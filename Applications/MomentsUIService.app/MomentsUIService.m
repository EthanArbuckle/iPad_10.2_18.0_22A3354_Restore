id checkLockedState_bounce(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "onLockNotification");
}

void sub_1000093C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100009A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100009CE0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10000ACD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void OUTLINED_FUNCTION_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_10(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_11(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

id _mo_log_facility_get_os_log(dispatch_once_t *predicate)
{
  if (*predicate != -1)
    dispatch_once_f(predicate, predicate, (dispatch_function_t)_mo_log_facility_prepare);
  return (id)predicate[2];
}

os_log_t _mo_log_facility_prepare(uint64_t a1)
{
  os_log_t result;

  result = os_log_create("com.apple.MomentsUIService", *(const char **)(a1 + 8));
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void OUTLINED_FUNCTION_3_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  int v7;
  char **v8;
  uint64_t v9;
  objc_class *ObjCClassFromMetadata;
  NSString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  objc_class *v15;
  NSString *v16;
  uint64_t v17;
  uint64_t v18;

  if ((_set_user_dir_suffix("com.apple.MomentsUIService", argv, envp) & 1) == 0)
  {
    if (serverManager._clientConnections != (NSMutableDictionary *)-1)
      swift_once(&serverManager._clientConnections, one-time initialization function for shared);
    v3 = type metadata accessor for Logger(0);
    __swift_project_value_buffer(v3, (uint64_t)static MOAngelLogger.shared);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Can't set user's dir suffix path.", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

  }
  serverManager.super.isa = (Class)objc_msgSend((id)objc_opt_self(MOSuggestionsUIServerManager), "sharedInstance");
  v7 = static CommandLine.argc.getter();
  v8 = (char **)static CommandLine.unsafeArgv.getter();
  v9 = type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for UIApplication, UIApplication_ptr);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v9);
  v11 = NSStringFromClass(ObjCClassFromMetadata);
  if (!v11)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v13 = v12;
    v11 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v13);
  }
  v14 = type metadata accessor for MOAppDelegate();
  v15 = (objc_class *)swift_getObjCClassFromMetadata(v14);
  v16 = NSStringFromClass(v15);
  if (!v16)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v18 = v17;
    v16 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
  }
  UIApplicationMain(v7, v8, v11, v16);

  return 0;
}

uint64_t variable initialization expression of MOSuggestionInterstitialExpandableListViewCell.didToggle()
{
  return 0;
}

uint64_t variable initialization expression of MOSuggestionSheetAssetViewModel.assignedAssetTileSize()
{
  return 11;
}

id variable initialization expression of MOCircularProgressIndicatorView.blurMaterialView()
{
  return variable initialization expression of MOSuggestionMapSnapshotView.platterBlurView(11);
}

uint64_t default argument 1 of static MOSuggestionInterstitialListAssetViewModel.assetVisualSubTypesToCountString(_:includeCount:separator:)()
{
  return 1;
}

uint64_t default argument 1 of UIView.alignCenterHorizontallyToSuper(margin:equivalency:)()
{
  return 0;
}

double default argument 0 of UILabel.setLineSpacing(lineSpacing:lineHeightMultiple:baselineOffset:font:)()
{
  return 0.0;
}

void *variable initialization expression of MOSuggestionInterstitialExpandableListView.selectedAssetIdentifiers()
{
  return &_swiftEmptySetSingleton;
}

void *variable initialization expression of MOSuggestionInterstitialExpandableListView.assetViewModels()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t static MOSuggestionSheetInterstitialView.EMPTY_TEXT.getter()
{
  return 0;
}

uint64_t variable initialization expression of MOSuggestionInterstitialSupplementaryCheckmarkView.keyColor()
{
  return 0;
}

double static MOSuggestionInterstitialExpandableListViewCellConstants.LABEL_SPACING.getter()
{
  return 0.5;
}

uint64_t default argument 0 of MOEventBundle.orderedAssetReferencesForPreview(max:)()
{
  return 5;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

id variable initialization expression of MOSuggestionPickerPrivacyBadge.iconView()
{
  double v0;
  double v1;
  double v2;
  double v3;

  v0 = CGRectMake();
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MOSuggestionPickerBadgeIconView()), "initWithFrame:", v0, v1, v2, v3);
}

uint64_t variable initialization expression of MOSuggestionAssetCacheWorkoutInput.workoutType()
{
  return 0;
}

_BYTE *variable initialization expression of MOSuggestionSheetAssetGridView.addedView()
{
  _BYTE *v0;
  _BYTE *v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MOSuggestionAddedView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v0[OBJC_IVAR____TtC16MomentsUIService21MOSuggestionAddedView_symbolOnly] = 0;
  v1 = v0;
  objc_msgSend(v1, "setClipsToBounds:", 1);
  MOSuggestionAddedView.initAddedView()();

  return v1;
}

uint64_t variable initialization expression of MOSuggestionSheetAssetGridView.assetViewModels()
{
  return 0;
}

id variable initialization expression of MOSuggestionSheetOverflowView.overflowCountLabel()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  if (one-time initialization token for numberColor != -1)
    swift_once(&one-time initialization token for numberColor, one-time initialization function for numberColor);
  objc_msgSend(v0, "setTextColor:", static MOSuggestionSheetOverflowView.numberColor);
  if (one-time initialization token for font != -1)
    swift_once(&one-time initialization token for font, one-time initialization function for font);
  objc_msgSend(v0, "setFont:", static MOSuggestionSheetOverflowView.font);
  objc_msgSend(v0, "setAdjustsFontForContentSizeCategory:", 1);
  return v0;
}

id variable initialization expression of MOSuggestionSheetInterstitialView.scrollView()
{
  return variable initialization expression of MOSuggestionSheetInterstitialView.scrollView((Class *)UIScrollView_ptr, (SEL *)&selRef_setShowsVerticalScrollIndicator_);
}

id variable initialization expression of MOSuggestionSheetInterstitialView.stackView()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
  objc_msgSend(v0, "setAxis:", 1);
  objc_msgSend(v0, "setAlignment:", 3);
  objc_msgSend(v0, "setSpacing:", 3.0);
  return v0;
}

id variable initialization expression of MOSuggestionSheetInterstitialView.labelStackView()
{
  return variable initialization expression of MOSuggestionSheetInterstitialView.labelStackView(0, 3);
}

uint64_t variable initialization expression of MOSuggestionAssetActivityRingsProvider.idx()
{
  return -1;
}

double variable initialization expression of MOSuggestionSheetHalfMosaicLayout.contentBounds()
{
  return 0.0;
}

id variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.assetGridView()
{
  return variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.assetGridView((uint64_t (*)(_QWORD))type metadata accessor for MOSuggestionSheetAssetGridView);
}

id variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.journalButton()
{
  objc_class *v0;
  _BYTE *v1;
  _QWORD *v2;
  id v3;
  objc_super v5;

  v0 = (objc_class *)type metadata accessor for MOSuggestionSheetJournalButton();
  v1 = objc_allocWithZone(v0);
  v2 = &v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped];
  *v2 = 0;
  v2[1] = 0;
  v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_singleCellAsset] = 1;
  v5.receiver = v1;
  v5.super_class = v0;
  v3 = objc_msgSendSuper2(&v5, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  MOSuggestionSheetJournalButton.sharedInit()();

  return v3;
}

uint64_t variable initialization expression of MOSuggestionInterstitialCarouselCheckMarkView.isSelected()
{
  return 2;
}

id variable initialization expression of MOSuggestionCutoutView.fillLayer()
{
  return objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
}

id default argument 2 of MOSuggestionWorkoutsSnowGlobeView.init(icons:glyphBackgroundColor:glyphTintColor:)()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for exerciseGreen, (id *)&static MOSuggestionTheme.Colors.exerciseGreen);
}

id default argument 1 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)()
{
  if (one-time initialization token for exerciseGreen != -1)
    swift_once(&one-time initialization token for exerciseGreen, one-time initialization function for exerciseGreen);
  return objc_msgSend((id)static MOSuggestionTheme.Colors.exerciseGreen, "colorWithAlphaComponent:", 0.18);
}

uint64_t static MOSuggestionAssetMediaAlbumArtProvider.DEFAULT_RETRY_COUNT.getter()
{
  return 3;
}

id default argument 0 of WorkoutLocationAnnotationView.init(annotation:type:tileSize:)()
{
  return objc_msgSend(objc_allocWithZone((Class)MKPointAnnotation), "init");
}

id variable initialization expression of MOSuggestionAssetActivityRingsProvider.summary()
{
  return objc_msgSend(objc_allocWithZone((Class)HKActivitySummary), "init");
}

id variable initialization expression of MOSuggestionAssetActivityRingsProvider.timeRangePredicate()
{
  return objc_msgSend(objc_allocWithZone((Class)NSPredicate), "init");
}

double variable initialization expression of MOSuggestionSheetFilterCollectionView.filterDelegate@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

id variable initialization expression of MOSuggestionInterstitialCarouselViewCell.assetView()
{
  return variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.assetGridView((uint64_t (*)(_QWORD))type metadata accessor for MOSuggestionSheetAssetView);
}

double default argument 1 of static MOSuggestionAssetSnowglobeEffect.imageFor(images:targetSize:)()
{
  return 250.0;
}

id default argument 3 of UIImage.composedOf(with:rects:targetSize:backgroundColor:)()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
}

uint64_t default argument 2 of static MOSuggestionInterstitialListAssetViewModel.assetVisualSubTypesToCountString(_:includeCount:separator:)()
{
  return 0x20A280E220;
}

double variable initialization expression of MOSuggestionPrivacyTipCellModel.tip@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of MOSuggestionAssetReference.transferID@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult.uuid((uint64_t (*)(_QWORD))&type metadata accessor for UUID, a1);
}

id default argument 2 of MOSuggestionAssetCacheManager.retrieveAssetsFor(_:withTypes:queue:cacheType:completion:)()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for defaultQueue, (id *)&static MOSuggestionAssetCacheManager.defaultQueue);
}

uint64_t variable initialization expression of MOSuggestionAssetMapSnapshotProvider.snapshotProcessingQueue()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;

  v0 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue, OS_dispatch_queue_ptr);
  static DispatchQoS.userInitiated.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  v15 = _swiftEmptyArrayStorage;
  v10 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  v12 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v0, v10);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000031, 0x80000001001A60C0, v9, v2, v6, 0);
}

double variable initialization expression of MOSuggestionAssetMapSnapshotProvider.minimumPinSeparationDegrees()
{
  return 0.0005;
}

id variable initialization expression of MOSuggestionAssetMapSnapshotProvider.mapService()
{
  return objc_msgSend(objc_allocWithZone((Class)GEOMapService), "init");
}

id variable initialization expression of MOSuggestionActivityRouteAssetView.distanceBlue()
{
  return variable initialization expression of MOSuggestionActivityRouteAssetView.distanceBlue(0x65636E6174736964, 0xEC00000065756C42, (SEL *)&selRef_systemBlueColor);
}

id variable initialization expression of MOSuggestionActivityRouteAssetView.timeYellow()
{
  return variable initialization expression of MOSuggestionActivityRouteAssetView.distanceBlue(0x6C6C6559656D6974, 0xEA0000000000776FLL, (SEL *)&selRef_systemYellowColor);
}

id variable initialization expression of MOSuggestionActivityRouteAssetView.movePink()
{
  return variable initialization expression of MOSuggestionActivityRouteAssetView.distanceBlue(0x6B6E695065766F6DLL, 0xE800000000000000, (SEL *)&selRef_systemPinkColor);
}

id variable initialization expression of MOSuggestionActivityRouteAssetView.labelStack()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
  objc_msgSend(v0, "setAxis:", 1);
  objc_msgSend(v0, "setDistribution:", 4);
  objc_msgSend(v0, "setAlignment:", 1);
  objc_msgSend(v0, "setSpacing:", 2.0);
  return v0;
}

id variable initialization expression of ReflectionPromptView.shuffleButton()
{
  return objc_msgSend(objc_allocWithZone((Class)UIButton), "init");
}

id variable initialization expression of MOSuggestionSheetMediaAssetView.sourceBlurContainerView()
{
  return variable initialization expression of MOSuggestionMapSnapshotView.platterBlurView(16);
}

id variable initialization expression of ReflectionPromptView.blurredEffectView()
{
  return objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "init");
}

id variable initialization expression of ReflectionPromptView.accentColor()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "systemWhiteColor");
}

id variable initialization expression of MOSuggestionCollectionViewListCell.stackView()
{
  return variable initialization expression of MOSuggestionCollectionViewListCell.stackView(1, 1, 0);
}

id variable initialization expression of MOSuggestionCollectionViewListCell.buttonHolder()
{
  return variable initialization expression of MOSuggestionCollectionViewListCell.stackView(0, 3, 0);
}

id variable initialization expression of MOSuggestionCollectionViewListCell.playButton()
{
  return variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.assetGridView((uint64_t (*)(_QWORD))type metadata accessor for MOSuggestionSheetListPlayButton);
}

_BYTE *variable initialization expression of MOSuggestionCollectionViewListCell.addedView()
{
  _BYTE *v0;
  _BYTE *v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MOSuggestionAddedView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v0[OBJC_IVAR____TtC16MomentsUIService21MOSuggestionAddedView_symbolOnly] = 1;
  v1 = v0;
  objc_msgSend(v1, "setClipsToBounds:", 1);
  MOSuggestionAddedView.initAddedView()();

  return v1;
}

id variable initialization expression of MOSuggestionCollectionViewListCell.assetContainerView()
{
  id v0;
  id v1;
  id v2;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v1 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  objc_msgSend(v0, "setBackgroundColor:", v1);

  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v2 = objc_msgSend(v0, "layer");
  objc_msgSend(v2, "setMaskedCorners:", 1);

  objc_msgSend(v0, "setClipsToBounds:", 1);
  return v0;
}

id variable initialization expression of MOSuggestionInterstitialExpandableListViewCell.stackView()
{
  return variable initialization expression of MOSuggestionCollectionViewListCell.stackView(1, 1, 2);
}

id variable initialization expression of MOSuggestionCollectionViewListCell.stackView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;

  v6 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
  objc_msgSend(v6, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v6, "setAxis:", a1);
  objc_msgSend(v6, "setAlignment:", a2);
  objc_msgSend(v6, "setDistribution:", a3);
  return v6;
}

id variable initialization expression of MOSuggestionInterstitialExpandableListViewCell.assetView()
{
  return variable initialization expression of MOSuggestionInterstitialExpandableListViewCell.assetView((uint64_t (*)(_QWORD))type metadata accessor for MOSuggestionInterstitialListAssetView);
}

id variable initialization expression of MOSuggestionInterstitialExpandableListViewCell.checkmarkView()
{
  if (one-time initialization token for checkPlatterViewSize != -1)
    swift_once(&one-time initialization token for checkPlatterViewSize, one-time initialization function for checkPlatterViewSize);
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasAssetAccessoryView()), "initWithFrame:", 0.0, 0.0, static MOSuggestionSheetMosaicCell.checkPlatterViewSize);
}

uint64_t variable initialization expression of MOWeakArray.references(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for MOWeakReference(0, a1, a3, a4);
  return static Array._allocateUninitialized(_:)(0, v4);
}

id variable initialization expression of MOSuggestionAssetPhotoLivePhotoVideosProvider.imageManager()
{
  return objc_msgSend(objc_allocWithZone((Class)PHCachingImageManager), "init");
}

uint64_t variable initialization expression of MOSuggestionAssetPhotoLivePhotoVideosProvider.queue()
{
  return variable initialization expression of MOSuggestionAssetPhotoLivePhotoVideosProvider.queue((void (*)(void))&static DispatchQoS.unspecified.getter, 0xD000000000000037, 0x80000001001A6100);
}

id variable initialization expression of MOSuggestionAssetWorkoutProvider.healthStore()
{
  return objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
}

uint64_t default argument 1 of static MOSuggestionAssetWorkoutProvider.localizedDistanceUsingPreferredUnit(meters:workoutType:)()
{
  return 37;
}

void *variable initialization expression of MOSuggestionCollectionViewModel.dayOverflowViewModelsDict()
{
  return &_swiftEmptyDictionarySingleton;
}

unint64_t variable initialization expression of MOSuggestionCollectionViewModel.stateBackup()
{
  return specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
}

id variable initialization expression of MOSuggestionCollectionViewModel.protectedAppsManager()
{
  return variable initialization expression of MOSuggestionInterstitialExpandableListViewCell.assetView((uint64_t (*)(_QWORD))type metadata accessor for MOProtectedAppsManager);
}

uint64_t default argument 0 of static MOProtectedAppsManager.requiresChallenge(appSources:completion:)()
{
  _BYTE v1[24];

  if (one-time initialization token for allFixedApps != -1)
    swift_once(&one-time initialization token for allFixedApps, one-time initialization function for allFixedApps);
  swift_beginAccess(&static MOProtectedAppSource.allFixedApps, v1, 0, 0);
  return swift_bridgeObjectRetain(static MOProtectedAppSource.allFixedApps);
}

id default argument 1 of MOEventBundleStore.fetchAvailableBundles(clientDetails:queue:databaseUpgradingStateHandler:completionHandler:)()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for defaultQueue, (id *)&static MOEventBundleStore.defaultQueue);
}

id default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

uint64_t default argument 27 of MOSuggestionSheetAssetViewModel.init(id:parent:image:activitySummary:routeMap:linkMetadata:assetType:assetVisualSubType:evergreenData:reflectionIndex:mediaAssetID:URL:mediaType:isSquare:contactName:contactFirstName:workoutName:livePhoto:videoAsset:activityName:activityStepCount:motionActivityNumSteps:title:subtitle:weatherString:weatherTemperature:calories:duration:distance:averageHeartRate:shouldAutoPlay:squareCropRect:landscapeCropRect:portraitCropRect:assignedAssetTileSize:mapPrimaryField:mapSecondaryField:mapLocationCount:isLoadingPlaceHolder:renderedView:valenceClassificationAndReflectiveInterval:reflectiveInterval:stateOfMindLabels:stateOfMindLabelsShortened:stateOfMindDomains:stateOfMindDomainsShortened:stateOfMindAssociatedColorsLight:stateOfMindAssociatedColorsDark:stateOfMindDate:bgColor:mediaThirdPartyAppAssociatedColors:bgColorVariant:)()
{
  return 0;
}

uint64_t variable initialization expression of MOSuggestionInterstitialCarouselView.queue()
{
  return variable initialization expression of MOSuggestionAssetPhotoLivePhotoVideosProvider.queue((void (*)(void))&static DispatchQoS.unspecified.getter, 0xD00000000000002FLL, 0x80000001001A6140);
}

double default argument 2 of MOSuggestionInterstitialCarouselView.scrollToIndex(index:shouldScroll:velocity:)()
{
  return 0.2;
}

id variable initialization expression of MOSuggestionStateOfMindAssetView.labelStack()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
  objc_msgSend(v0, "setAxis:", 1);
  objc_msgSend(v0, "setSpacing:", 1.0);
  objc_msgSend(v0, "setAlignment:", 1);
  return v0;
}

id variable initialization expression of MOAssetPhotoMomentProvider.imageManager()
{
  return objc_msgSend((id)objc_opt_self(PHImageManager), "defaultManager");
}

id variable initialization expression of MOSuggestionActivityRingsAssetView.labelStackView()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
  objc_msgSend(v0, "setAxis:", 1);
  objc_msgSend(v0, "setSpacing:", 2.0);
  objc_msgSend(v0, "setAlignment:", 1);
  objc_msgSend(v0, "setDistribution:", 3);
  return v0;
}

double variable initialization expression of MOSuggestionSheetImage.squareCrop@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

id variable initialization expression of MOSuggestionCollectionView.onboardingManager()
{
  return objc_msgSend((id)objc_opt_self(MOOnboardingManager), "sharedInstance");
}

id variable initialization expression of MOSuggestionCollectionView.privacyBadge()
{
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MOSuggestionPickerPrivacyBadge()), "initWithFrame:", CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);
}

id variable initialization expression of MOSuggestionCollectionView.activityIndicator()
{
  return variable initialization expression of MOSuggestionSheetInterstitialView.scrollView((Class *)UIActivityIndicatorView_ptr, (SEL *)&selRef_setTranslatesAutoresizingMaskIntoConstraints_);
}

id variable initialization expression of MOSuggestionSheetInterstitialView.scrollView(Class *a1, SEL *a2)
{
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(*a1), "init");
  objc_msgSend(v3, *a2, 0);
  return v3;
}

id variable initialization expression of MOSuggestionInterstitialAlertContentViewController.textView()
{
  return objc_msgSend(objc_allocWithZone((Class)UITextView), "init");
}

id variable initialization expression of MOSuggestionInterstitialAlertController.textViewContentController()
{
  return variable initialization expression of MOSuggestionInterstitialExpandableListViewCell.assetView((uint64_t (*)(_QWORD))type metadata accessor for MOSuggestionInterstitialAlertContentViewController);
}

double static MOSuggestionInterstitialListAssetViewConstants.INSET_MARGIN_CUTOUT.getter()
{
  return 2.0;
}

id variable initialization expression of MOPOIAnnotationView.basePOICircleView()
{
  return objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
}

id variable initialization expression of MOPOIAnnotationView.clusterCountLabel()
{
  return objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
}

id variable initialization expression of MOPOIAnnotationView.borderBackgroundView()
{
  return objc_msgSend(objc_allocWithZone((Class)UIView), "init");
}

id variable initialization expression of MOAngelControllerWrapper.serverManager()
{
  return objc_msgSend((id)objc_opt_self(MOSuggestionsUIServerManager), "sharedInstance");
}

id variable initialization expression of MOAngelControllerWrapper.engagementWriter()
{
  return objc_msgSend((id)objc_opt_self(MOEngagementHistoryWriter), "sharedInstance");
}

id variable initialization expression of MOSuggestionSheetFilterCollectionView.layout()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)UICollectionViewFlowLayout), "init");
  objc_msgSend(v0, "setScrollDirection:", 1);
  objc_msgSend(v0, "setMinimumInteritemSpacing:", 12.0);
  return v0;
}

uint64_t variable initialization expression of MOSuggestionSheetFilterCollectionView.filterViewModel()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for MOSuggestionSheetFilterCollectionViewModel();
  result = swift_allocObject(v0, 17, 7);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t variable initialization expression of MOSuggestionAssetCacheWorkoutInput.startDate@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult.uuid((uint64_t (*)(_QWORD))&type metadata accessor for Date, a1);
}

uint64_t variable initialization expression of MOSuggestionSheetAssetViewModel.assetVisualSubType()
{
  return 26;
}

uint64_t variable initialization expression of MOSuggestionSheetMediaAssetView.mediaPreviewURL@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult.uuid((uint64_t (*)(_QWORD))&type metadata accessor for URL, a1);
}

uint64_t variable initialization expression of MOSuggestionSheetAssetViewModel.weatherTemperature@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

id variable initialization expression of MOSuggestionInterstitialCarouselCheckMarkView.accessoryButton()
{
  return variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.assetGridView((uint64_t (*)(_QWORD))type metadata accessor for MOSuggestionSheetOversizedBoundsButton);
}

uint64_t variable initialization expression of MOSuggestionInterstitialExpandableListView.queue()
{
  return variable initialization expression of MOSuggestionAssetPhotoLivePhotoVideosProvider.queue((void (*)(void))&static DispatchQoS.unspecified.getter, 0xD00000000000002BLL, 0x80000001001A6170);
}

uint64_t variable initialization expression of MOSuggestionSheetMosaicCell.overflowDetail()
{
  return 0;
}

id variable initialization expression of MOSuggestionSheetVideoPlaybackView.config()
{
  return variable initialization expression of MOSuggestionSheetVideoPlaybackView.config((SEL *)&selRef_grayColor, 50.0);
}

id variable initialization expression of MOSuggestionSheetVideoPlaybackView.muteButtonConfig()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleTitle3);
  v1 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithFont:", v0);

  return v1;
}

id variable initialization expression of MOSuggestionSheetVideoPlaybackView.unMutedImage()
{
  return variable initialization expression of MOSuggestionSheetVideoPlaybackView.unMutedImage();
}

{
  NSString v0;
  id v1;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v0);

  return v1;
}

id variable initialization expression of MOSuggestionSheetVideoPlaybackView.mutedImage()
{
  return variable initialization expression of MOSuggestionSheetVideoPlaybackView.unMutedImage();
}

id variable initialization expression of MOCircularProgressIndicatorView.config()
{
  return variable initialization expression of MOSuggestionSheetVideoPlaybackView.config((SEL *)&selRef_whiteColor, 15.0);
}

id variable initialization expression of MOPlayPauseButton.pauseImage()
{
  return variable initialization expression of MOSuggestionSheetVideoPlaybackView.unMutedImage();
}

id variable initialization expression of MOPlayPauseButton.playImage()
{
  return variable initialization expression of MOSuggestionSheetVideoPlaybackView.unMutedImage();
}

unint64_t variable initialization expression of MOEventBundleStore.appMusicExternalBundleId()
{
  return 0xD000000000000029;
}

id variable initialization expression of MOEventBundleStore.promptManager()
{
  return objc_msgSend(objc_allocWithZone((Class)MOPromptManager), "init");
}

id variable initialization expression of CanvasAssetAccessoryView.keyColor()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "systemBlueColor");
}

id variable initialization expression of MOSuggestionCarouselView.pageControl()
{
  return objc_msgSend(objc_allocWithZone((Class)UIPageControl), "init");
}

id variable initialization expression of MOSuggestionMotionAssetView.motionBackground()
{
  return variable initialization expression of MOSuggestionActivityRouteAssetView.distanceBlue(0xD000000000000010, 0x80000001001A61C0, (SEL *)&selRef_systemWhiteColor);
}

id variable initialization expression of MOSuggestionActivityIconAssetView.labelStack()
{
  return variable initialization expression of MOSuggestionSheetInterstitialView.labelStackView(1, 1);
}

id variable initialization expression of MOMusicPlaybackCoordinator.mediaPlayer()
{
  return objc_msgSend((id)objc_opt_self(MPMusicPlayerController), "systemMusicPlayer");
}

id variable initialization expression of MOSuggestionAssetAppIconProvider.defaultDescriptor()
{
  id v0;
  double v1;
  double v2;

  v0 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v0, "scale");
  v2 = v1;

  return objc_msgSend(objc_allocWithZone((Class)ISImageDescriptor), "initWithSize:scale:", 350.0, 350.0, v2);
}

id variable initialization expression of MOLocationShifter.shifter()
{
  return objc_msgSend(objc_allocWithZone((Class)GEOLocationShifter), "init");
}

uint64_t variable initialization expression of MOLocationShifter.processingQueue()
{
  return variable initialization expression of MOSuggestionAssetPhotoLivePhotoVideosProvider.queue((void (*)(void))&static DispatchQoS.unspecified.getter, 0xD00000000000002BLL, 0x80000001001A61E0);
}

id variable initialization expression of MOSuggestionSheetVideoPlaybackView.config(SEL *a1, double a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v3 = objc_msgSend((id)objc_opt_self(UIColor), *a1);
  v4 = (void *)objc_opt_self(UIImageSymbolConfiguration);
  v5 = objc_msgSend(v4, "configurationWithHierarchicalColor:", v3);

  v6 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", a2);
  v7 = objc_msgSend(v4, "configurationWithFont:", v6);

  v8 = objc_msgSend(v5, "configurationByApplyingConfiguration:", v7);
  return v8;
}

id variable initialization expression of MOCircularProgressIndicatorView.borderPath()
{
  return objc_msgSend(objc_allocWithZone((Class)UIBezierPath), "init");
}

id variable initialization expression of MOSuggestionActivityIconAssetView.heartRed()
{
  return variable initialization expression of MOSuggestionActivityRouteAssetView.distanceBlue(0x6465527472616568, 0xE800000000000000, (SEL *)&selRef_systemRedColor);
}

id variable initialization expression of MOSuggestionActivityRouteAssetView.distanceBlue(uint64_t a1, uint64_t a2, SEL *a3)
{
  NSString v4;
  void *v5;
  id v6;

  v4 = String._bridgeToObjectiveC()();
  v5 = (void *)objc_opt_self(UIColor);
  v6 = objc_msgSend(v5, "colorNamed:", v4);

  if (v6)
    return v6;
  else
    return objc_msgSend(v5, *a3);
}

id variable initialization expression of MOSuggestionSheetInterstitialView.labelStackView(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
  objc_msgSend(v4, "setAxis:", a1);
  objc_msgSend(v4, "setAlignment:", a2);
  return v4;
}

void variable initialization expression of MOSuggestionPickerBadgeIconView.C1_1()
{
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
}

void variable initialization expression of MOSuggestionPickerBadgeIconView.C1_2()
{
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
}

id variable initialization expression of MOSuggestionPickerBadgeIconView.suggestionsImageView()
{
  return variable initialization expression of MOSuggestionPickerBadgeIconView.suggestionsImageView();
}

{
  NSString v0;
  id v1;
  id v2;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v0);

  v2 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v1);
  return v2;
}

id variable initialization expression of MOSuggestionPickerBadgeIconView.privacyImageView()
{
  return variable initialization expression of MOSuggestionPickerBadgeIconView.suggestionsImageView();
}

id variable initialization expression of MOSuggestionCollectionViewOnboardingSectionHeaderView.newEntryButton()
{
  return variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.assetGridView((uint64_t (*)(_QWORD))type metadata accessor for MOSuggestionSheetNewEntryButton);
}

id variable initialization expression of MOSecureWindow._controller()
{
  return variable initialization expression of MOSuggestionInterstitialExpandableListViewCell.assetView(type metadata accessor for MOAngelControllerWrapper);
}

id variable initialization expression of MOSuggestionInterstitialExpandableListViewCell.assetView(uint64_t (*a1)(_QWORD))
{
  return objc_msgSend(objc_allocWithZone((Class)a1(0)), "init");
}

id variable initialization expression of MOSuggestionInterstitialSupplementaryCheckmarkView.checkmarkView()
{
  if (one-time initialization token for CHECK_PLATTER_VIEW_SIZE != -1)
    swift_once(&one-time initialization token for CHECK_PLATTER_VIEW_SIZE, one-time initialization function for CHECK_PLATTER_VIEW_SIZE);
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MOSuggestionInterstitialCarouselCheckMarkView()), "initWithFrame:", 0.0, 0.0, static MOSuggestionInterstitialCarouselViewConstants.CHECK_PLATTER_VIEW_SIZE);
}

id variable initialization expression of MOSuggestionSheetMediaAssetView.labelStackView()
{
  return objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
}

id variable initialization expression of MOSuggestionMapSnapshotView.platterBlurView(uint64_t a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", a1);
  v2 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v1);

  return v2;
}

id variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.platterView()
{
  id v0;
  id v1;
  id v2;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v1 = objc_msgSend(v0, "traitCollection");
  v2 = objc_msgSend(v1, "userInterfaceStyle");

  specialized static MOSuggestionTheme.Styles.styleViewAsPlatter(view:traitCollection:)(v0, (uint64_t)v2);
  return v0;
}

id variable initialization expression of MOSuggestionCollectionViewCell.journalButton()
{
  objc_class *v0;
  _BYTE *v1;
  _QWORD *v2;
  id v3;
  objc_super v5;

  v0 = (objc_class *)type metadata accessor for MOSuggestionSheetJournalButton();
  v1 = objc_allocWithZone(v0);
  v2 = &v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped];
  *v2 = 0;
  v2[1] = 0;
  v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_singleCellAsset] = 0;
  v5.receiver = v1;
  v5.super_class = v0;
  v3 = objc_msgSendSuper2(&v5, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  MOSuggestionSheetJournalButton.sharedInit()();

  return v3;
}

id variable initialization expression of MOSuggestionCollectionViewCell.photoMemoryBanner()
{
  return variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.assetGridView((uint64_t (*)(_QWORD))type metadata accessor for MOSuggestionPhotoMemoryBanner);
}

id variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.assetGridView(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  v1 = a1(0);
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)), "init");
}

uint64_t variable initialization expression of MOSuggestionAssetMediaAlbumArtProvider.queue()
{
  return variable initialization expression of MOSuggestionAssetPhotoLivePhotoVideosProvider.queue((void (*)(void))&static DispatchQoS.utility.getter, 0xD000000000000030, 0x80000001001A6230);
}

uint64_t variable initialization expression of MOSuggestionAssetPhotoLivePhotoVideosProvider.queue(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  _QWORD *v20;

  v19 = a3;
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue, OS_dispatch_queue_ptr);
  a1();
  v20 = _swiftEmptyArrayStorage;
  v15 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  v17 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v9, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v5);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(a2, v19, v14, v11, v8, 0);
}

id variable initialization expression of MOSuggestionAssetMediaAlbumArtProvider.configurationManager()
{
  return objc_msgSend(objc_allocWithZone((Class)MOConfigurationManagerBase), "init");
}

uint64_t variable initialization expression of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult.uuid@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

id variable initialization expression of MOSuggestionAssetCacheManager.assetCache()
{
  return objc_msgSend(objc_allocWithZone((Class)NSCache), "init");
}

_QWORD *variable initialization expression of MOSuggestionAssetCacheManager.photoLivePhotoVideoProvider()
{
  uint64_t v0;

  v0 = type metadata accessor for MOSuggestionAssetPhotoLivePhotoVideosProvider();
  swift_allocObject(v0, 48, 7);
  return MOSuggestionAssetPhotoLivePhotoVideosProvider.init()();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

_QWORD *protocol witness for SetAlgebra.intersection(_:) in conformance CACornerMask@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance CACornerMask(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance CACornerMask(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance CACornerMask(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

NSNumber protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIFontWeight()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance UIFontWeight(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static CGFloat._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UIFontWeight(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return v3 & 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UIFontWeight(double *a1@<X8>)
{
  *a1 = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
}

void protocol witness for Hashable.hash(into:) in conformance MOSuggestionAssetMediaItemType()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

void protocol witness for SetAlgebra.init() in conformance MOPickerContentOption(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *protocol witness for SetAlgebra.union(_:) in conformance MOPickerContentOption@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance MOPickerContentOption@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.remove(_:) in conformance MOPickerContentOption@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance MOPickerContentOption@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance MOPickerContentOption(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance MOPickerContentOption@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance MOPickerContentOption(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance MOPickerContentOption()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance MOPickerContentOption(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *protocol witness for SetAlgebra.subtract(_:) in conformance MOPickerContentOption(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MOSuggestionAssetMediaItemType()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MOSuggestionAssetMediaItemType(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MOResourceType(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MORankingCategory(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSAttributedStringKey(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSAttributedStringKey(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSAttributedStringKey@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance CACornerMask@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MOSuggestionAssetsType(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetsType and conformance MOSuggestionAssetsType, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionAssetsType, (uint64_t)&protocol conformance descriptor for MOSuggestionAssetsType);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetsType and conformance MOSuggestionAssetsType, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionAssetsType, (uint64_t)&protocol conformance descriptor for MOSuggestionAssetsType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance PHAssetMediaSubtype(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance PHAssetMediaSubtype(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MOSuggestionEngagementEvent(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionEngagementEvent and conformance MOSuggestionEngagementEvent, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionEngagementEvent, (uint64_t)&protocol conformance descriptor for MOSuggestionEngagementEvent);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionEngagementEvent and conformance MOSuggestionEngagementEvent, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionEngagementEvent, (uint64_t)&protocol conformance descriptor for MOSuggestionEngagementEvent);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GEOPOICategory@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance MOPickerContentOption@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance GEOPOICategory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type GEOPOICategory and conformance GEOPOICategory, (uint64_t (*)(uint64_t))type metadata accessor for GEOPOICategory, (uint64_t)&protocol conformance descriptor for GEOPOICategory);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type GEOPOICategory and conformance GEOPOICategory, (uint64_t (*)(uint64_t))type metadata accessor for GEOPOICategory, (uint64_t)&protocol conformance descriptor for GEOPOICategory);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MOSuggestionAssetMetadataKey(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionAssetMetadataKey, (uint64_t)&protocol conformance descriptor for MOSuggestionAssetMetadataKey);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionAssetMetadataKey, (uint64_t)&protocol conformance descriptor for MOSuggestionAssetMetadataKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance UIFontWeight@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

double protocol witness for RawRepresentable.rawValue.getter in conformance UIFontWeight@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontWeight(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, (uint64_t (*)(uint64_t))type metadata accessor for UIFontWeight, (uint64_t)&protocol conformance descriptor for UIFontWeight);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, (uint64_t (*)(uint64_t))type metadata accessor for UIFontWeight, (uint64_t)&protocol conformance descriptor for UIFontWeight);
  v4 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, v4);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MOWorkoutMotionActivityAction(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOWorkoutMotionActivityAction and conformance MOWorkoutMotionActivityAction, (uint64_t (*)(uint64_t))type metadata accessor for MOWorkoutMotionActivityAction, (uint64_t)&protocol conformance descriptor for MOWorkoutMotionActivityAction);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOWorkoutMotionActivityAction and conformance MOWorkoutMotionActivityAction, (uint64_t (*)(uint64_t))type metadata accessor for MOWorkoutMotionActivityAction, (uint64_t)&protocol conformance descriptor for MOWorkoutMotionActivityAction);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontDescriptorAttributeName(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorAttributeName, (uint64_t)&protocol conformance descriptor for UIFontDescriptorAttributeName);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorAttributeName, (uint64_t)&protocol conformance descriptor for UIFontDescriptorAttributeName);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontDescriptorTraitKey(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorTraitKey, (uint64_t)&protocol conformance descriptor for UIFontDescriptorTraitKey);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorTraitKey, (uint64_t)&protocol conformance descriptor for UIFontDescriptorTraitKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance CIContextOption(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type CIContextOption and conformance CIContextOption, (uint64_t (*)(uint64_t))type metadata accessor for CIContextOption, (uint64_t)&protocol conformance descriptor for CIContextOption);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type CIContextOption and conformance CIContextOption, (uint64_t (*)(uint64_t))type metadata accessor for CIContextOption, (uint64_t)&protocol conformance descriptor for CIContextOption);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MOSuggestionAssetMotionActivityType(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMotionActivityType and conformance MOSuggestionAssetMotionActivityType, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionAssetMotionActivityType, (uint64_t)&protocol conformance descriptor for MOSuggestionAssetMotionActivityType);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMotionActivityType and conformance MOSuggestionAssetMotionActivityType, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionAssetMotionActivityType, (uint64_t)&protocol conformance descriptor for MOSuggestionAssetMotionActivityType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UISheetPresentationControllerDetentIdentifier(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for UISheetPresentationControllerDetentIdentifier, (uint64_t)&protocol conformance descriptor for UISheetPresentationControllerDetentIdentifier);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for UISheetPresentationControllerDetentIdentifier, (uint64_t)&protocol conformance descriptor for UISheetPresentationControllerDetentIdentifier);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIApplicationOpenExternalURLOptionsKey(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIApplicationOpenExternalURLOptionsKey, (uint64_t)&protocol conformance descriptor for UIApplicationOpenExternalURLOptionsKey);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIApplicationOpenExternalURLOptionsKey, (uint64_t)&protocol conformance descriptor for UIApplicationOpenExternalURLOptionsKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MOUsageContextType(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOUsageContextType and conformance MOUsageContextType, (uint64_t (*)(uint64_t))type metadata accessor for MOUsageContextType, (uint64_t)&protocol conformance descriptor for MOUsageContextType);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOUsageContextType and conformance MOUsageContextType, (uint64_t (*)(uint64_t))type metadata accessor for MOUsageContextType, (uint64_t)&protocol conformance descriptor for MOUsageContextType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MOMediaPlayMetaDataKeyPlayerMediaType(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOMediaPlayMetaDataKeyPlayerMediaType and conformance MOMediaPlayMetaDataKeyPlayerMediaType, (uint64_t (*)(uint64_t))type metadata accessor for MOMediaPlayMetaDataKeyPlayerMediaType, (uint64_t)&protocol conformance descriptor for MOMediaPlayMetaDataKeyPlayerMediaType);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOMediaPlayMetaDataKeyPlayerMediaType and conformance MOMediaPlayMetaDataKeyPlayerMediaType, (uint64_t (*)(uint64_t))type metadata accessor for MOMediaPlayMetaDataKeyPlayerMediaType, (uint64_t)&protocol conformance descriptor for MOMediaPlayMetaDataKeyPlayerMediaType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MOEventBundleSourceType(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOEventBundleSourceType and conformance MOEventBundleSourceType, (uint64_t (*)(uint64_t))type metadata accessor for MOEventBundleSourceType, (uint64_t)&protocol conformance descriptor for MOEventBundleSourceType);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOEventBundleSourceType and conformance MOEventBundleSourceType, (uint64_t (*)(uint64_t))type metadata accessor for MOEventBundleSourceType, (uint64_t)&protocol conformance descriptor for MOEventBundleSourceType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MOSuggestionAssetsType@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontDescriptorFeatureKey(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorFeatureKey, (uint64_t)&protocol conformance descriptor for UIFontDescriptorFeatureKey);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorFeatureKey, (uint64_t)&protocol conformance descriptor for UIFontDescriptorFeatureKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MOPhotoResourceType(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOPhotoResourceType and conformance MOPhotoResourceType, (uint64_t (*)(uint64_t))type metadata accessor for MOPhotoResourceType, (uint64_t)&protocol conformance descriptor for MOPhotoResourceType);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOPhotoResourceType and conformance MOPhotoResourceType, (uint64_t (*)(uint64_t))type metadata accessor for MOPhotoResourceType, (uint64_t)&protocol conformance descriptor for MOPhotoResourceType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GEOPOICategory(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance UIFontWeight()
{
  double *v0;

  return Double.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance UIFontWeight()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance UIFontWeight(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:_:)(a1, v2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MOSuggestionAssetsType(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSAttributedStringKey(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSAttributedStringKey(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UIFontWeight(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t specialized UnsafeMutablePointer.deallocate()(uint64_t a1)
{
  return swift_slowDealloc(a1, -1, -1);
}

double CGRectMake()
{
  return 0.0;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t type metadata accessor for UIApplication(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void type metadata accessor for HKWorkoutActivityType(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for HKWorkoutActivityType, (uint64_t)&unk_1001E4668);
}

void type metadata accessor for MOEventBundleInterfaceType(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MOEventBundleInterfaceType, (uint64_t)&unk_1001E4688);
}

void type metadata accessor for MOSuggestionAssetBgColorVariantType(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MOSuggestionAssetBgColorVariantType, (uint64_t)&unk_1001E46A8);
}

void type metadata accessor for MOPickerContentOption(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MOPickerContentOption, (uint64_t)&unk_1001E46C8);
}

void type metadata accessor for MOSuggestionAssetMediaItemType(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MOSuggestionAssetMediaItemType, (uint64_t)&unk_1001E46F0);
}

void type metadata accessor for PHImageContentMode(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for PHImageContentMode, (uint64_t)&unk_1001E4710);
}

void type metadata accessor for MONotificationEventTrigger(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MONotificationEventTrigger, (uint64_t)&unk_1001E4730);
}

void type metadata accessor for MOReflectionPromptType(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MOReflectionPromptType, (uint64_t)&unk_1001E4750);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CLLocationCoordinate2D(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CLLocationCoordinate2D(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for CLLocationCoordinate2D, (uint64_t)&unk_1001E47C8);
}

void type metadata accessor for MOEventBundleSuperType(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MOEventBundleSuperType, (uint64_t)&unk_1001E47F0);
}

void type metadata accessor for MOEventBundleSubType(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MOEventBundleSubType, (uint64_t)&unk_1001E4810);
}

void type metadata accessor for MOPhotoResourceType(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MOPhotoResourceType, (uint64_t)&unk_1001E4830);
}

void type metadata accessor for GEOLocationCoordinate2D(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for GEOLocationCoordinate2D, (uint64_t)&unk_1001E48B0);
}

void type metadata accessor for MOWorkoutMotionActivityAction(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MOWorkoutMotionActivityAction, (uint64_t)&unk_1001E48D8);
}

void type metadata accessor for MOMediaPlayMetaDataKeyPlayerMediaType(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MOMediaPlayMetaDataKeyPlayerMediaType, (uint64_t)&unk_1001E4900);
}

void type metadata accessor for UIApplicationOpenExternalURLOptionsKey(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for UIApplicationOpenExternalURLOptionsKey, (uint64_t)&unk_1001E4928);
}

void type metadata accessor for MOUsageContextType(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MOUsageContextType, (uint64_t)&unk_1001E4950);
}

void type metadata accessor for MOSuggestionSheetViewState(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MOSuggestionSheetViewState, (uint64_t)&unk_1001E4978);
}

void type metadata accessor for UISheetPresentationControllerDetentIdentifier(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for UISheetPresentationControllerDetentIdentifier, (uint64_t)&unk_1001E4998);
}

void type metadata accessor for CGColorRef(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for CGColorRef, (uint64_t)&unk_1001E49C0);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for CGPoint, (uint64_t)&unk_1001E4A48);
}

void type metadata accessor for MOSuggestionEngagementEvent(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MOSuggestionEngagementEvent, (uint64_t)&unk_1001E4A70);
}

void type metadata accessor for MOSuggestionAssetsType(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MOSuggestionAssetsType, (uint64_t)&unk_1001E4A98);
}

void type metadata accessor for CFNullRef(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for CFNullRef, (uint64_t)&unk_1001E4AC0);
}

void type metadata accessor for CIContextOption(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for CIContextOption, (uint64_t)&unk_1001E4AF0);
}

void type metadata accessor for MOSuggestionAssetMotionActivityType(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MOSuggestionAssetMotionActivityType, (uint64_t)&unk_1001E4B18);
}

void type metadata accessor for UIFontDescriptorTraitKey(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for UIFontDescriptorTraitKey, (uint64_t)&unk_1001E4B40);
}

void type metadata accessor for UIFontWeight(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for UIFontWeight, (uint64_t)&unk_1001E4B68);
}

void type metadata accessor for UIFontDescriptorAttributeName(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for UIFontDescriptorAttributeName, (uint64_t)&unk_1001E4B90);
}

void type metadata accessor for MOSuggestionAssetMetadataKey(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MOSuggestionAssetMetadataKey, (uint64_t)&unk_1001E4BB8);
}

void type metadata accessor for NSAttributedStringKey(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for NSAttributedStringKey, (uint64_t)&unk_1001E4BE0);
}

void type metadata accessor for CGRectEdge(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for CGRectEdge, (uint64_t)&unk_1001E4C08);
}

uint64_t initializeBufferWithCopyOfBuffer for CGRect(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for CGRect(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CGRect(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for CGRect, (uint64_t)&unk_1001E4C80);
}

void type metadata accessor for CGSize(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for CGSize, (uint64_t)&unk_1001E4D00);
}

uint64_t base witness table accessor for RawRepresentable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t base witness table accessor for RawRepresentable in MOSuggestionAssetMetadataKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionAssetMetadataKey, (uint64_t)&protocol conformance descriptor for MOSuggestionAssetMetadataKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MOSuggestionAssetMetadataKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionAssetMetadataKey, (uint64_t)&protocol conformance descriptor for MOSuggestionAssetMetadataKey);
}

uint64_t base witness table accessor for RawRepresentable in UIFontDescriptorAttributeName()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorAttributeName, (uint64_t)&protocol conformance descriptor for UIFontDescriptorAttributeName);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontDescriptorAttributeName()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorAttributeName, (uint64_t)&protocol conformance descriptor for UIFontDescriptorAttributeName);
}

uint64_t base witness table accessor for RawRepresentable in UIFontWeight()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, (uint64_t (*)(uint64_t))type metadata accessor for UIFontWeight, (uint64_t)&protocol conformance descriptor for UIFontWeight);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontWeight()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, (uint64_t (*)(uint64_t))type metadata accessor for UIFontWeight, (uint64_t)&protocol conformance descriptor for UIFontWeight);
}

uint64_t base witness table accessor for Equatable in UIFontWeight()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, (uint64_t (*)(uint64_t))type metadata accessor for UIFontWeight, (uint64_t)&protocol conformance descriptor for UIFontWeight);
}

uint64_t base witness table accessor for RawRepresentable in UIFontDescriptorTraitKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorTraitKey, (uint64_t)&protocol conformance descriptor for UIFontDescriptorTraitKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontDescriptorTraitKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorTraitKey, (uint64_t)&protocol conformance descriptor for UIFontDescriptorTraitKey);
}

uint64_t base witness table accessor for Equatable in UIFontDescriptorTraitKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorTraitKey, (uint64_t)&protocol conformance descriptor for UIFontDescriptorTraitKey);
}

uint64_t base witness table accessor for RawRepresentable in MOSuggestionAssetMotionActivityType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMotionActivityType and conformance MOSuggestionAssetMotionActivityType, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionAssetMotionActivityType, (uint64_t)&protocol conformance descriptor for MOSuggestionAssetMotionActivityType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MOSuggestionAssetMotionActivityType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMotionActivityType and conformance MOSuggestionAssetMotionActivityType, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionAssetMotionActivityType, (uint64_t)&protocol conformance descriptor for MOSuggestionAssetMotionActivityType);
}

uint64_t base witness table accessor for Equatable in MOSuggestionAssetMotionActivityType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMotionActivityType and conformance MOSuggestionAssetMotionActivityType, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionAssetMotionActivityType, (uint64_t)&protocol conformance descriptor for MOSuggestionAssetMotionActivityType);
}

uint64_t base witness table accessor for RawRepresentable in CIContextOption()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type CIContextOption and conformance CIContextOption, (uint64_t (*)(uint64_t))type metadata accessor for CIContextOption, (uint64_t)&protocol conformance descriptor for CIContextOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in CIContextOption()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type CIContextOption and conformance CIContextOption, (uint64_t (*)(uint64_t))type metadata accessor for CIContextOption, (uint64_t)&protocol conformance descriptor for CIContextOption);
}

uint64_t base witness table accessor for RawRepresentable in MOSuggestionAssetsType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetsType and conformance MOSuggestionAssetsType, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionAssetsType, (uint64_t)&protocol conformance descriptor for MOSuggestionAssetsType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MOSuggestionAssetsType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetsType and conformance MOSuggestionAssetsType, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionAssetsType, (uint64_t)&protocol conformance descriptor for MOSuggestionAssetsType);
}

uint64_t base witness table accessor for Equatable in MOSuggestionAssetsType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetsType and conformance MOSuggestionAssetsType, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionAssetsType, (uint64_t)&protocol conformance descriptor for MOSuggestionAssetsType);
}

uint64_t base witness table accessor for RawRepresentable in MOSuggestionEngagementEvent()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionEngagementEvent and conformance MOSuggestionEngagementEvent, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionEngagementEvent, (uint64_t)&protocol conformance descriptor for MOSuggestionEngagementEvent);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MOSuggestionEngagementEvent()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionEngagementEvent and conformance MOSuggestionEngagementEvent, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionEngagementEvent, (uint64_t)&protocol conformance descriptor for MOSuggestionEngagementEvent);
}

uint64_t base witness table accessor for Equatable in MOSuggestionEngagementEvent()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionEngagementEvent and conformance MOSuggestionEngagementEvent, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionEngagementEvent, (uint64_t)&protocol conformance descriptor for MOSuggestionEngagementEvent);
}

uint64_t base witness table accessor for RawRepresentable in UISheetPresentationControllerDetentIdentifier()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for UISheetPresentationControllerDetentIdentifier, (uint64_t)&protocol conformance descriptor for UISheetPresentationControllerDetentIdentifier);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UISheetPresentationControllerDetentIdentifier()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for UISheetPresentationControllerDetentIdentifier, (uint64_t)&protocol conformance descriptor for UISheetPresentationControllerDetentIdentifier);
}

uint64_t base witness table accessor for Equatable in UISheetPresentationControllerDetentIdentifier()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for UISheetPresentationControllerDetentIdentifier, (uint64_t)&protocol conformance descriptor for UISheetPresentationControllerDetentIdentifier);
}

uint64_t base witness table accessor for RawRepresentable in MOUsageContextType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOUsageContextType and conformance MOUsageContextType, (uint64_t (*)(uint64_t))type metadata accessor for MOUsageContextType, (uint64_t)&protocol conformance descriptor for MOUsageContextType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MOUsageContextType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOUsageContextType and conformance MOUsageContextType, (uint64_t (*)(uint64_t))type metadata accessor for MOUsageContextType, (uint64_t)&protocol conformance descriptor for MOUsageContextType);
}

uint64_t base witness table accessor for RawRepresentable in UIApplicationOpenExternalURLOptionsKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIApplicationOpenExternalURLOptionsKey, (uint64_t)&protocol conformance descriptor for UIApplicationOpenExternalURLOptionsKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIApplicationOpenExternalURLOptionsKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIApplicationOpenExternalURLOptionsKey, (uint64_t)&protocol conformance descriptor for UIApplicationOpenExternalURLOptionsKey);
}

uint64_t base witness table accessor for RawRepresentable in MOMediaPlayMetaDataKeyPlayerMediaType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOMediaPlayMetaDataKeyPlayerMediaType and conformance MOMediaPlayMetaDataKeyPlayerMediaType, (uint64_t (*)(uint64_t))type metadata accessor for MOMediaPlayMetaDataKeyPlayerMediaType, (uint64_t)&protocol conformance descriptor for MOMediaPlayMetaDataKeyPlayerMediaType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MOMediaPlayMetaDataKeyPlayerMediaType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOMediaPlayMetaDataKeyPlayerMediaType and conformance MOMediaPlayMetaDataKeyPlayerMediaType, (uint64_t (*)(uint64_t))type metadata accessor for MOMediaPlayMetaDataKeyPlayerMediaType, (uint64_t)&protocol conformance descriptor for MOMediaPlayMetaDataKeyPlayerMediaType);
}

uint64_t base witness table accessor for Equatable in MOMediaPlayMetaDataKeyPlayerMediaType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOMediaPlayMetaDataKeyPlayerMediaType and conformance MOMediaPlayMetaDataKeyPlayerMediaType, (uint64_t (*)(uint64_t))type metadata accessor for MOMediaPlayMetaDataKeyPlayerMediaType, (uint64_t)&protocol conformance descriptor for MOMediaPlayMetaDataKeyPlayerMediaType);
}

uint64_t base witness table accessor for RawRepresentable in MOWorkoutMotionActivityAction()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOWorkoutMotionActivityAction and conformance MOWorkoutMotionActivityAction, (uint64_t (*)(uint64_t))type metadata accessor for MOWorkoutMotionActivityAction, (uint64_t)&protocol conformance descriptor for MOWorkoutMotionActivityAction);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MOWorkoutMotionActivityAction()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOWorkoutMotionActivityAction and conformance MOWorkoutMotionActivityAction, (uint64_t (*)(uint64_t))type metadata accessor for MOWorkoutMotionActivityAction, (uint64_t)&protocol conformance descriptor for MOWorkoutMotionActivityAction);
}

uint64_t base witness table accessor for Equatable in MOWorkoutMotionActivityAction()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOWorkoutMotionActivityAction and conformance MOWorkoutMotionActivityAction, (uint64_t (*)(uint64_t))type metadata accessor for MOWorkoutMotionActivityAction, (uint64_t)&protocol conformance descriptor for MOWorkoutMotionActivityAction);
}

uint64_t base witness table accessor for RawRepresentable in MOPhotoResourceType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOPhotoResourceType and conformance MOPhotoResourceType, (uint64_t (*)(uint64_t))type metadata accessor for MOPhotoResourceType, (uint64_t)&protocol conformance descriptor for MOPhotoResourceType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MOPhotoResourceType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOPhotoResourceType and conformance MOPhotoResourceType, (uint64_t (*)(uint64_t))type metadata accessor for MOPhotoResourceType, (uint64_t)&protocol conformance descriptor for MOPhotoResourceType);
}

uint64_t base witness table accessor for Equatable in MOPhotoResourceType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOPhotoResourceType and conformance MOPhotoResourceType, (uint64_t (*)(uint64_t))type metadata accessor for MOPhotoResourceType, (uint64_t)&protocol conformance descriptor for MOPhotoResourceType);
}

uint64_t base witness table accessor for Equatable in MOSuggestionAssetMediaItemType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMediaItemType and conformance MOSuggestionAssetMediaItemType, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionAssetMediaItemType, (uint64_t)&protocol conformance descriptor for MOSuggestionAssetMediaItemType);
}

uint64_t base witness table accessor for Equatable in MOPickerContentOption()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOPickerContentOption and conformance MOPickerContentOption, (uint64_t (*)(uint64_t))type metadata accessor for MOPickerContentOption, (uint64_t)&protocol conformance descriptor for MOPickerContentOption);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in MOPickerContentOption()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOPickerContentOption and conformance MOPickerContentOption, (uint64_t (*)(uint64_t))type metadata accessor for MOPickerContentOption, (uint64_t)&protocol conformance descriptor for MOPickerContentOption);
}

uint64_t base witness table accessor for RawRepresentable in MOPickerContentOption()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOPickerContentOption and conformance MOPickerContentOption, (uint64_t (*)(uint64_t))type metadata accessor for MOPickerContentOption, (uint64_t)&protocol conformance descriptor for MOPickerContentOption);
}

uint64_t base witness table accessor for SetAlgebra in MOPickerContentOption()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOPickerContentOption and conformance MOPickerContentOption, (uint64_t (*)(uint64_t))type metadata accessor for MOPickerContentOption, (uint64_t)&protocol conformance descriptor for MOPickerContentOption);
}

uint64_t base witness table accessor for Equatable in UIApplicationOpenExternalURLOptionsKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIApplicationOpenExternalURLOptionsKey, (uint64_t)&protocol conformance descriptor for UIApplicationOpenExternalURLOptionsKey);
}

uint64_t base witness table accessor for Equatable in MOUsageContextType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOUsageContextType and conformance MOUsageContextType, (uint64_t (*)(uint64_t))type metadata accessor for MOUsageContextType, (uint64_t)&protocol conformance descriptor for MOUsageContextType);
}

uint64_t base witness table accessor for Equatable in CIContextOption()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type CIContextOption and conformance CIContextOption, (uint64_t (*)(uint64_t))type metadata accessor for CIContextOption, (uint64_t)&protocol conformance descriptor for CIContextOption);
}

uint64_t base witness table accessor for Equatable in UIFontDescriptorAttributeName()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorAttributeName, (uint64_t)&protocol conformance descriptor for UIFontDescriptorAttributeName);
}

uint64_t base witness table accessor for Equatable in MOSuggestionAssetMetadataKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey, (uint64_t (*)(uint64_t))type metadata accessor for MOSuggestionAssetMetadataKey, (uint64_t)&protocol conformance descriptor for MOSuggestionAssetMetadataKey);
}

uint64_t base witness table accessor for Equatable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

void type metadata accessor for UIFontDescriptorFeatureKey(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for UIFontDescriptorFeatureKey, (uint64_t)&unk_1001E4D28);
}

void type metadata accessor for MOSetting(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MOSetting, (uint64_t)&unk_1001E4D50);
}

void type metadata accessor for MOEventBundleSourceType(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MOEventBundleSourceType, (uint64_t)&unk_1001E4D70);
}

void type metadata accessor for MODatabaseUpgradeStatus(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MODatabaseUpgradeStatus, (uint64_t)&unk_1001E4D98);
}

void type metadata accessor for UIViewAnimationOptions(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for UIViewAnimationOptions, (uint64_t)&unk_1001E4DB8);
}

void type metadata accessor for MOVisibilityCategoryForUI(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for MOVisibilityCategoryForUI, (uint64_t)&unk_1001E4DE0);
}

void type metadata accessor for GEOPOICategory(uint64_t a1)
{
  type metadata accessor for HKWorkoutActivityType(a1, &lazy cache variable for type metadata for GEOPOICategory, (uint64_t)&unk_1001E4E00);
}

void type metadata accessor for HKWorkoutActivityType(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t base witness table accessor for RawRepresentable in GEOPOICategory()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type GEOPOICategory and conformance GEOPOICategory, (uint64_t (*)(uint64_t))type metadata accessor for GEOPOICategory, (uint64_t)&protocol conformance descriptor for GEOPOICategory);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in GEOPOICategory()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type GEOPOICategory and conformance GEOPOICategory, (uint64_t (*)(uint64_t))type metadata accessor for GEOPOICategory, (uint64_t)&protocol conformance descriptor for GEOPOICategory);
}

uint64_t base witness table accessor for Equatable in GEOPOICategory()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type GEOPOICategory and conformance GEOPOICategory, (uint64_t (*)(uint64_t))type metadata accessor for GEOPOICategory, (uint64_t)&protocol conformance descriptor for GEOPOICategory);
}

uint64_t base witness table accessor for Equatable in UIViewAnimationOptions()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIViewAnimationOptions and conformance UIViewAnimationOptions, (uint64_t (*)(uint64_t))type metadata accessor for UIViewAnimationOptions, (uint64_t)&protocol conformance descriptor for UIViewAnimationOptions);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in UIViewAnimationOptions()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIViewAnimationOptions and conformance UIViewAnimationOptions, (uint64_t (*)(uint64_t))type metadata accessor for UIViewAnimationOptions, (uint64_t)&protocol conformance descriptor for UIViewAnimationOptions);
}

uint64_t base witness table accessor for RawRepresentable in UIViewAnimationOptions()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIViewAnimationOptions and conformance UIViewAnimationOptions, (uint64_t (*)(uint64_t))type metadata accessor for UIViewAnimationOptions, (uint64_t)&protocol conformance descriptor for UIViewAnimationOptions);
}

uint64_t base witness table accessor for SetAlgebra in UIViewAnimationOptions()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIViewAnimationOptions and conformance UIViewAnimationOptions, (uint64_t (*)(uint64_t))type metadata accessor for UIViewAnimationOptions, (uint64_t)&protocol conformance descriptor for UIViewAnimationOptions);
}

uint64_t base witness table accessor for RawRepresentable in MOEventBundleSourceType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOEventBundleSourceType and conformance MOEventBundleSourceType, (uint64_t (*)(uint64_t))type metadata accessor for MOEventBundleSourceType, (uint64_t)&protocol conformance descriptor for MOEventBundleSourceType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MOEventBundleSourceType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOEventBundleSourceType and conformance MOEventBundleSourceType, (uint64_t (*)(uint64_t))type metadata accessor for MOEventBundleSourceType, (uint64_t)&protocol conformance descriptor for MOEventBundleSourceType);
}

uint64_t base witness table accessor for Equatable in MOSetting()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSetting and conformance MOSetting, (uint64_t (*)(uint64_t))type metadata accessor for MOSetting, (uint64_t)&protocol conformance descriptor for MOSetting);
}

uint64_t base witness table accessor for RawRepresentable in UIFontDescriptorFeatureKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorFeatureKey, (uint64_t)&protocol conformance descriptor for UIFontDescriptorFeatureKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontDescriptorFeatureKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorFeatureKey, (uint64_t)&protocol conformance descriptor for UIFontDescriptorFeatureKey);
}

uint64_t base witness table accessor for Equatable in UIFontDescriptorFeatureKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorFeatureKey, (uint64_t)&protocol conformance descriptor for UIFontDescriptorFeatureKey);
}

uint64_t base witness table accessor for Equatable in MOEventBundleSourceType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOEventBundleSourceType and conformance MOEventBundleSourceType, (uint64_t (*)(uint64_t))type metadata accessor for MOEventBundleSourceType, (uint64_t)&protocol conformance descriptor for MOEventBundleSourceType);
}

void MOSuggestionInterstitialAlertContentViewController.styleView()()
{
  swift_deletedMethodError();
  __break(1u);
}

uint64_t MOSuggestionMapSnapshotViewStyle.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100012C70 + 4 * byte_10019EC10[a1]))(0x646C6569466F7774, 0xEF72657474616C50);
}

unint64_t sub_100012C70()
{
  return 0xD000000000000012;
}

unint64_t sub_100012C8C()
{
  return 0xD000000000000013;
}

uint64_t sub_100012CDC()
{
  return 0x614C6E6564646968;
}

BOOL static UIView.AutolayoutEquivalency.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void UIView.AutolayoutEquivalency.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int UIView.AutolayoutEquivalency.hashValue.getter(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MOSuggestionMapSnapshotViewStyle(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MOSuggestionMapSnapshotViewStyle()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance MOSuggestionMapSnapshotViewStyle()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MOSuggestionMapSnapshotViewStyle(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

id MOSuggestionMapSnapshotView.imageView.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_imageView);
}

uint64_t MOSuggestionMapSnapshotView.prominentField.getter()
{
  return MOSuggestionMapSnapshotView.prominentField.getter(&OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_prominentField);
}

uint64_t MOSuggestionMapSnapshotView.prominentField.setter(uint64_t a1, uint64_t a2)
{
  return MOSuggestionMapSnapshotView.prominentField.setter(a1, a2, &OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_prominentField);
}

uint64_t (*MOSuggestionMapSnapshotView.prominentField.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_prominentField, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionMapSnapshotView.secondaryField.getter()
{
  return MOSuggestionMapSnapshotView.prominentField.getter(&OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_secondaryField);
}

uint64_t MOSuggestionMapSnapshotView.prominentField.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _BYTE v5[24];

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess(v2, v5, 0, 0);
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t MOSuggestionMapSnapshotView.secondaryField.setter(uint64_t a1, uint64_t a2)
{
  return MOSuggestionMapSnapshotView.prominentField.setter(a1, a2, &OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_secondaryField);
}

uint64_t MOSuggestionMapSnapshotView.prominentField.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];

  v6 = (_QWORD *)(v3 + *a3);
  swift_beginAccess(v6, v9, 1, 0);
  v7 = v6[1];
  *v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease(v7);
}

uint64_t (*MOSuggestionMapSnapshotView.secondaryField.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_secondaryField, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionMapSnapshotView.style.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_style);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_style, v3, 0, 0);
  return *v1;
}

uint64_t MOSuggestionMapSnapshotView.style.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_style);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*MOSuggestionMapSnapshotView.style.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_style, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionMapSnapshotView.assignedTileSize.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_assignedTileSize);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_assignedTileSize, v3, 0, 0);
  return *v1;
}

uint64_t MOSuggestionMapSnapshotView.assignedTileSize.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_assignedTileSize);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*MOSuggestionMapSnapshotView.assignedTileSize.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_assignedTileSize, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

id MOSuggestionMapSnapshotView.platterBlurView.getter()
{
  uint64_t v0;
  id *v1;
  _BYTE v3[24];

  v1 = (id *)(v0 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_platterBlurView);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_platterBlurView, v3, 0, 0);
  return *v1;
}

void MOSuggestionMapSnapshotView.platterBlurView.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  _BYTE v5[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_platterBlurView);
  swift_beginAccess(v3, v5, 1, 0);
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*MOSuggestionMapSnapshotView.platterBlurView.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_platterBlurView, a1, 33, 0);
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

id MOSuggestionMapSnapshotView.labelView.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_labelView);
}

char *MOSuggestionMapSnapshotView.__allocating_init(baseMapImage:prominentField:secondaryField:style:assignedTileSize:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  objc_class *v7;
  id v15;

  v15 = objc_allocWithZone(v7);
  return MOSuggestionMapSnapshotView.init(baseMapImage:prominentField:secondaryField:style:assignedTileSize:)(a1, a2, a3, a4, a5, a6, a7);
}

char *MOSuggestionMapSnapshotView.init(baseMapImage:prominentField:secondaryField:style:assignedTileSize:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  _BYTE *v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _BYTE *v14;
  uint64_t v15;
  void *v16;
  _BYTE *v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double y;
  double width;
  double height;
  objc_class *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  UIAccessibilityTraits v38;
  char *v39;
  unint64_t v40;
  UIAccessibilityTraits v41;
  void *v42;
  char *v43;
  id v44;
  Swift::String v45;
  Swift::String v46;
  void *object;
  NSString v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char v75[24];
  _QWORD aBlock[5];
  uint64_t v77;
  char v78[24];
  objc_super v79;
  char v80[24];
  char v81[24];
  char v82[16];
  Swift::String v83;

  v68 = a7;
  v67 = a6;
  v66 = a5;
  v65 = a4;
  v64 = a3;
  v74 = type metadata accessor for DispatchWorkItemFlags(0);
  v73 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v72 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for DispatchQoS(0);
  v70 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v69 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v7[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_prominentField];
  *v12 = 0;
  v12[1] = 0;
  v13 = &v7[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_secondaryField];
  *v13 = 0;
  v13[1] = 0;
  v14 = &v7[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_assignedTileSize];
  v7[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_assignedTileSize] = 11;
  v15 = OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_platterBlurView;
  v16 = (void *)objc_opt_self(UIBlurEffect);
  v17 = v7;
  v18 = objc_msgSend(v16, "effectWithStyle:", 11);
  v19 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v18);

  *(_QWORD *)&v7[v15] = v19;
  v20 = OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_labelView;
  *(_QWORD *)&v17[v20] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v21 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", a1);
  *(_QWORD *)&v17[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_imageView] = v21;
  objc_msgSend(v21, "setContentMode:", 2);
  swift_beginAccess(v12, v82, 1, 0);
  v22 = v12[1];
  v23 = v64;
  *v12 = a2;
  v12[1] = v23;
  swift_bridgeObjectRelease(v22);
  swift_beginAccess(v13, v81, 1, 0);
  v24 = v13[1];
  v25 = v66;
  *v13 = v65;
  v13[1] = v25;
  swift_bridgeObjectRelease(v24);
  v17[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_style] = v67;
  swift_beginAccess(v14, v80, 1, 0);
  *v14 = v68;

  y = CGRectZero.origin.y;
  width = CGRectZero.size.width;
  height = CGRectZero.size.height;
  v29 = (objc_class *)type metadata accessor for MOSuggestionMapSnapshotView();
  v79.receiver = v17;
  v79.super_class = v29;
  v30 = (char *)objc_msgSendSuper2(&v79, "initWithFrame:", CGRectZero.origin.x, y, width, height);
  v31 = &v30[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_prominentField];
  swift_beginAccess(&v30[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_prominentField], v78, 1, 0);
  if (*((_QWORD *)v31 + 1)
    || (v33 = &v30[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_secondaryField],
        swift_beginAccess(&v30[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_secondaryField], v75, 0, 0), (v34 = *((_QWORD *)v33 + 1)) == 0))
  {
    v32 = v30;
  }
  else
  {
    v35 = *(_QWORD *)v33;
    v36 = *((_QWORD *)v31 + 1);
    *(_QWORD *)v31 = v35;
    *((_QWORD *)v31 + 1) = v34;
    v37 = v30;
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRelease(v36);
  }
  objc_msgSend(v30, "setIsAccessibilityElement:", 1, v64);
  v38 = UIAccessibilityTraitImage;
  v39 = v30;
  v40 = (unint64_t)objc_msgSend(v39, "accessibilityTraits");
  if ((v38 & ~v40) != 0)
    v41 = v38;
  else
    v41 = 0;
  objc_msgSend(v39, "setAccessibilityTraits:", v41 | v40);

  v42 = (void *)objc_opt_self(NSBundle);
  v43 = v39;
  v44 = objc_msgSend(v42, "mainBundle");
  v83._object = (void *)0x80000001001A62F0;
  v45._countAndFlagsBits = 0x70616E732070614DLL;
  v45._object = (void *)0xEC000000746F6873;
  v46._countAndFlagsBits = 0;
  v46._object = (void *)0xE000000000000000;
  v83._countAndFlagsBits = 0xD00000000000002BLL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v45, (Swift::String_optional)0, (NSBundle)v44, v46, v83)._object;

  v48 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v43, "setAccessibilityLabel:", v48);

  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue, OS_dispatch_queue_ptr);
  v49 = (void *)static OS_dispatch_queue.main.getter();
  v50 = swift_allocObject(&unk_1001E4FC0, 24, 7);
  swift_unknownObjectWeakInit(v50 + 16, v43);
  aBlock[4] = partial apply for closure #1 in MOSuggestionMapSnapshotView.init(baseMapImage:prominentField:secondaryField:style:assignedTileSize:);
  v77 = v50;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor;
  v51 = _Block_copy(aBlock);
  v52 = swift_release(v77);
  v53 = v69;
  static DispatchQoS.unspecified.getter(v52);
  aBlock[0] = _swiftEmptyArrayStorage;
  v54 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  v56 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v57 = v72;
  v58 = v74;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v55, v56, v74, v54);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v53, v57, v51);
  _Block_release(v51);

  (*(void (**)(char *, uint64_t))(v73 + 8))(v57, v58);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v53, v71);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>);
  v60 = swift_allocObject(v59, 48, 7);
  *(_OWORD *)(v60 + 16) = xmmword_10019ED20;
  *(_QWORD *)(v60 + 32) = type metadata accessor for UITraitUserInterfaceStyle(0);
  *(_QWORD *)(v60 + 40) = &protocol witness table for UITraitUserInterfaceStyle;
  v61 = v43;
  v62 = UIView.registerForTraitChanges(_:action:)(v60, "handleTraitChange");
  swift_unknownObjectRelease(v62);
  swift_bridgeObjectRelease(v60);

  return v61;
}

uint64_t type metadata accessor for MOSuggestionMapSnapshotView()
{
  return objc_opt_self(_TtC16MomentsUIService27MOSuggestionMapSnapshotView);
}

void closure #1 in MOSuggestionMapSnapshotView.init(baseMapImage:prominentField:secondaryField:style:assignedTileSize:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *Strong;
  _QWORD *v3;
  id v4;
  void *v5;
  id v6;
  _BYTE v7[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = (_QWORD *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = objc_msgSend(Strong, "addSubview:", *(_QWORD *)((char *)Strong + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_imageView));
    v5 = (void *)(*(uint64_t (**)(id))((swift_isaMask & *v3) + 0xE8))(v4);
    objc_msgSend(v3, "addSubview:", v5);

    v6 = objc_msgSend(v3, "addSubview:", *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_labelView));
    (*(void (**)(id))((swift_isaMask & *v3) + 0x108))(v6);

  }
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

Swift::Void __swiftcall MOSuggestionMapSnapshotView.handleTraitChange()()
{
  _QWORD *v0;
  id v1;
  id v2;
  int v3;
  void *v4;
  id v5;
  id v6;

  v1 = objc_msgSend(v0, "traitCollection");
  v2 = objc_msgSend(v1, "userInterfaceStyle");

  v3 = (*(unsigned __int8 (**)(void))((swift_isaMask & *v0) + 0xB8))();
  if (v2 == (id)1)
  {
    if (v3 != 2)
    {
      v4 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xE8))();
      v5 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", 11);
LABEL_7:
      v6 = v5;
      objc_msgSend(v4, "setEffect:");

    }
  }
  else if (v3 != 2)
  {
    v4 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xE8))();
    v5 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", 16);
    goto LABEL_7;
  }
}

uint64_t MOSuggestionMapSnapshotView.applyStyle()()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t (*v2)(void);
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  result = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB8))();
  switch((char)result)
  {
    case 0:
      v2 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x88);
      v3 = v2();
      if (v4)
      {
        v5 = v3;
        v6 = v4;
        v7 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA0))();
        if (v8)
        {
          v9 = v7;
          v10 = v8;
          MOSuggestionMapSnapshotView.addPlatter()();
          MOSuggestionMapSnapshotView.addProminentAndSecondaryLabel(prominentField:secondaryField:)(v5, (uint64_t)v6, v9, v10);
          goto LABEL_11;
        }
        v3 = swift_bridgeObjectRelease(v6);
      }
      result = ((uint64_t (*)(uint64_t))v2)(v3);
      if (v11)
        goto LABEL_14;
      break;
    case 1:
      result = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x88))();
      if (v11)
      {
LABEL_14:
        v18 = v11;
        MOSuggestionMapSnapshotView.addPlatter()();
        MOSuggestionMapSnapshotView.addFullWidthProminentLabel(text:)();
        result = swift_bridgeObjectRelease(v18);
      }
      break;
    case 2:
      result = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x88))();
      if (v12)
      {
        v13 = v12;
        MOSuggestionMapSnapshotView.addGradient()();
        MOSuggestionMapSnapshotView.addFullWidthGradientLabel(text:)();
        result = swift_bridgeObjectRelease(v13);
      }
      break;
    case 4:
      result = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x88))();
      if (v14)
      {
        v15 = result;
        v6 = v14;
        v16 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA0))();
        v10 = v17;
        MOSuggestionMapSnapshotView.addCarouselCenteredLabels(prominentField:secondaryField:)(v15, v6, v16, v17);
LABEL_11:
        swift_bridgeObjectRelease(v6);
        result = swift_bridgeObjectRelease(v10);
      }
      break;
    default:
      return result;
  }
  return result;
}

void MOSuggestionMapSnapshotView.platterFrame.getter()
{
  void *v0;
  CGRect v1;
  CGRect v2;
  CGRect v3;
  CGRect v4;
  CGRect v5;
  CGRect v6;
  CGRect v7;

  objc_msgSend(v0, "bounds");
  CGRectGetHeight(v1);
  objc_msgSend(v0, "bounds");
  CGRectGetHeight(v2);
  objc_msgSend(v0, "bounds");
  CGRectGetHeight(v3);
  objc_msgSend(v0, "bounds");
  CGRectGetHeight(v4);
  objc_msgSend(v0, "bounds");
  CGRectGetWidth(v5);
  objc_msgSend(v0, "bounds");
  CGRectGetHeight(v6);
  objc_msgSend(v0, "bounds");
  CGRectGetHeight(v7);
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
}

void MOSuggestionMapSnapshotView.platterLabelFrame.getter()
{
  void *v0;
  CGRect v1;
  CGRect v2;
  CGRect v3;
  CGRect v4;
  CGRect v5;
  CGRect v6;
  CGRect v7;

  objc_msgSend(v0, "bounds");
  CGRectGetHeight(v1);
  objc_msgSend(v0, "bounds");
  CGRectGetHeight(v2);
  objc_msgSend(v0, "bounds");
  CGRectGetHeight(v3);
  objc_msgSend(v0, "bounds");
  CGRectGetHeight(v4);
  objc_msgSend(v0, "bounds");
  CGRectGetWidth(v5);
  objc_msgSend(v0, "bounds");
  CGRectGetHeight(v6);
  objc_msgSend(v0, "bounds");
  CGRectGetHeight(v7);
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
}

void MOSuggestionMapSnapshotView.gradientFrameLabel.getter()
{
  _QWORD *v0;
  CGRect v1;
  CGRect v2;
  CGRect v3;
  CGRect v4;

  (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xD0))();
  objc_msgSend(v0, "bounds");
  CGRectGetHeight(v1);
  objc_msgSend(v0, "bounds");
  CGRectGetHeight(v2);
  objc_msgSend(v0, "bounds");
  CGRectGetWidth(v3);
  objc_msgSend(v0, "bounds");
  CGRectGetHeight(v4);
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
}

void MOSuggestionMapSnapshotView.addGradient()()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  Class isa;
  uint64_t v23;
  uint64_t v24;
  id v25;
  Class v26;
  id v27;
  void *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  double v44;
  double v45;
  uint64_t (*v46)(void);
  id v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;

  v1 = v0;
  v46 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0xE8);
  v2 = (void *)v46();
  objc_msgSend(v1, "bounds");
  CGRectGetHeight(v48);
  objc_msgSend(v1, "bounds");
  CGRectGetHeight(v49);
  objc_msgSend(v1, "bounds");
  CGRectGetWidth(v50);
  objc_msgSend(v1, "bounds");
  CGRectGetHeight(v51);
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  objc_msgSend(v2, "setFrame:");

  v3 = objc_msgSend(objc_allocWithZone((Class)CAGradientLayer), "init");
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  objc_msgSend(v3, "setStartPoint:", 0.5, v4);
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  objc_msgSend(v3, "setEndPoint:", 0.5, v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v7 = swift_allocObject(v6, 160, 7);
  *(_OWORD *)(v7 + 16) = xmmword_10019ED30;
  v8 = (void *)objc_opt_self(UIColor);
  v9 = objc_msgSend(v8, "clearColor");
  v10 = objc_msgSend(v9, "CGColor");

  type metadata accessor for CGColorRef(0);
  v12 = v11;
  *(_QWORD *)(v7 + 56) = v11;
  *(_QWORD *)(v7 + 32) = v10;
  v13 = objc_msgSend(v8, "whiteColor");
  v14 = objc_msgSend(v13, "colorWithAlphaComponent:", 0.85);

  v15 = objc_msgSend(v14, "CGColor");
  *(_QWORD *)(v7 + 88) = v12;
  *(_QWORD *)(v7 + 64) = v15;
  v16 = objc_msgSend(v8, "whiteColor");
  v17 = objc_msgSend(v16, "colorWithAlphaComponent:", 1.0);

  v18 = objc_msgSend(v17, "CGColor");
  *(_QWORD *)(v7 + 120) = v12;
  *(_QWORD *)(v7 + 96) = v18;
  v19 = objc_msgSend(v8, "whiteColor");
  v20 = objc_msgSend(v19, "colorWithAlphaComponent:", 1.0);

  v21 = objc_msgSend(v20, "CGColor");
  *(_QWORD *)(v7 + 152) = v12;
  *(_QWORD *)(v7 + 128) = v21;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v7);
  objc_msgSend(v3, "setColors:", isa);

  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v24 = swift_allocObject(v23, 64, 7);
  *(_OWORD *)(v24 + 16) = xmmword_10019ED40;
  *(_QWORD *)(v24 + 32) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", 0.0);
  *(_QWORD *)(v24 + 40) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", 0.5);
  *(_QWORD *)(v24 + 48) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", 0.65);
  v25 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", 1.0);
  *(_QWORD *)(v24 + 56) = v25;
  specialized Array._endMutation()(v25);
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  v26 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v24);
  objc_msgSend(v3, "setLocations:", v26);

  v27 = v3;
  v28 = (void *)v46();
  objc_msgSend(v28, "bounds");
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v36 = v35;

  objc_msgSend(v27, "setFrame:", v30, v32, v34, v36);
  v37 = (void *)v46();
  v38 = objc_msgSend(v37, "layer");

  objc_msgSend(v38, "setMask:", v27);
  v39 = (void *)v46();
  v40 = objc_msgSend(v39, "layer");

  objc_msgSend(v40, "setMasksToBounds:", 1);
  v41 = (void *)v46();
  v42 = (void *)objc_opt_self(UIBlurEffect);
  v43 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v43, "scale");
  v45 = v44;

  v47 = objc_msgSend(v42, "_effectWithBlurRadius:scale:", 8.0, v45);
  objc_msgSend(v41, "setEffect:", v47);

}

id MOSuggestionMapSnapshotView.addFullWidthGradientLabel(text:)()
{
  _QWORD *v0;
  void *v1;
  NSString v2;
  id v3;
  int v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  v1 = *(void **)((char *)v0 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_labelView);
  MOSuggestionMapSnapshotView.gradientFrameLabel.getter();
  objc_msgSend(v1, "setFrame:");
  objc_msgSend(v1, "setTextAlignment:", 1);
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setText:", v2);

  v3 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  objc_msgSend(v1, "setTextColor:", v3);

  v4 = (*(unsigned __int8 (**)(void))((swift_isaMask & *v0) + 0xD0))();
  v5 = (void *)objc_opt_self(UIFontDescriptor);
  if (v4 == 4)
    v6 = objc_msgSend(v5, "preferredFontDescriptorWithTextStyle:", UIFontTextStyleFootnote);
  else
    v6 = objc_msgSend(v5, "preferredFontDescriptorWithTextStyle:", UIFontTextStyleCaption1);
  v7 = objc_msgSend(v6, "fontDescriptorWithSymbolicTraits:", 32770);

  if (v7)
  {
    v8 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithDescriptor:size:", v7, 0.0);

  }
  else
  {
    v8 = 0;
  }
  objc_msgSend(v1, "setFont:", v8);

  return objc_msgSend(v1, "setNumberOfLines:", 2);
}

void MOSuggestionMapSnapshotView.addFullWidthProminentLabel(text:)()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_labelView);
  MOSuggestionMapSnapshotView.platterLabelFrame.getter();
  objc_msgSend(v1, "setFrame:");
  objc_msgSend(v1, "setTextAlignment:", 1);
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setText:", v2);

  v3 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  objc_msgSend(v1, "setTextColor:", v3);

  v4 = (void *)objc_opt_self(UIFont);
  v5 = objc_msgSend(v4, "preferredFontForTextStyle:", UIFontTextStyleFootnote);
  v6 = objc_msgSend(v5, "fontDescriptor");
  v7 = objc_msgSend(v6, "fontDescriptorWithSymbolicTraits:", 2);

  if (v7)
  {
    v8 = objc_msgSend(v4, "fontWithDescriptor:size:", v7, 0.0);

    objc_msgSend(v1, "setFont:", v8);
  }
  else
  {
    __break(1u);
  }
}

void MOSuggestionMapSnapshotView.addProminentAndSecondaryLabel(prominentField:secondaryField:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  void *v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  id v13;
  NSString v14;
  uint64_t inited;
  void *v16;
  NSString *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  Class isa;
  uint64_t v25;
  NSString *v26;
  id v27;
  unint64_t v28;
  NSDictionary v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  _BYTE v40[72];
  _BYTE v41[72];
  uint64_t v42;
  uint64_t v43;

  v9 = *(void **)(v4 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_labelView);
  MOSuggestionMapSnapshotView.platterLabelFrame.getter();
  objc_msgSend(v9, "setFrame:");
  v34 = v9;
  objc_msgSend(v9, "setTextAlignment:", 1);
  v10 = a1;
  v42 = a1;
  v43 = a2;
  v36 = a2;
  swift_bridgeObjectRetain(a2);
  v11._countAndFlagsBits = 0x20A280E220;
  v11._object = (void *)0xA500000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRetain(a2);
  v37 = a3;
  v38 = a4;
  v12._countAndFlagsBits = a3;
  v12._object = a4;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(a2);
  v13 = objc_allocWithZone((Class)NSMutableAttributedString);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v39 = objc_msgSend(v13, "initWithString:", v14);

  v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  inited = swift_initStackObject(v35, v41);
  *(_OWORD *)(inited + 16) = xmmword_10019ED20;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  v16 = (void *)objc_opt_self(UIFont);
  v17 = NSFontAttributeName;
  v18 = objc_msgSend(v16, "preferredFontForTextStyle:", UIFontTextStyleFootnote);
  v19 = objc_msgSend(v18, "fontDescriptor");
  v20 = objc_msgSend(v19, "fontDescriptorWithSymbolicTraits:", 2);

  if (v20)
  {
    v21 = objc_msgSend(v16, "fontWithDescriptor:size:", v20, 0.0);

    v22 = type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for UIFont, UIFont_ptr);
    *(_QWORD *)(inited + 64) = v22;
    *(_QWORD *)(inited + 40) = v21;
    v23 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v23);
    objc_msgSend(v39, "addAttributes:range:", isa, 0, String.count.getter(v10, v36));

    v25 = swift_initStackObject(v35, v40);
    *(_OWORD *)(v25 + 16) = xmmword_10019ED20;
    *(_QWORD *)(v25 + 32) = v17;
    v26 = v17;
    v27 = objc_msgSend(v16, "preferredFontForTextStyle:", UIFontTextStyleFootnote);
    *(_QWORD *)(v25 + 64) = v22;
    *(_QWORD *)(v25 + 40) = v27;
    v28 = specialized Dictionary.init(dictionaryLiteral:)(v25);
    v29.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v28);
    v30 = String.count.getter(v10, v36);
    v31 = String.count.getter(v37, v38);
    v32 = String.count.getter(0x20A280E220, 0xA500000000000000);
    if (!__OFADD__(v31, v32))
    {
      objc_msgSend(v39, "addAttributes:range:", v29.super.isa, v30, v31 + v32);

      objc_msgSend(v34, "setAttributedText:", v39);
      v33 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
      objc_msgSend(v34, "setTextColor:", v33);

      objc_msgSend(v34, "setAdjustsFontSizeToFitWidth:", 1);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void MOSuggestionMapSnapshotView.addCarouselCenteredLabels(prominentField:secondaryField:)(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  void *v9;
  void *v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t inited;
  void *v15;
  id v16;
  Class isa;
  uint64_t v18;
  unint64_t v19;
  Class v20;
  uint64_t v21;
  NSString *v22;
  id v23;
  unint64_t v24;
  NSDictionary v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t (*v46)(void);
  void *v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  id v67;
  double v68;
  void *v69;
  Swift::String v70;
  Swift::String v71;
  NSString *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char v77[72];
  char v78[72];
  uint64_t v79;
  void *v80;
  CGRect v81;
  CGRect v82;

  v9 = *(void **)(v4 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_labelView);
  objc_msgSend(v9, "setTextAlignment:", 1);
  v79 = a1;
  v80 = a2;
  v75 = a3;
  if (!a4 || a3 == a1 && a2 == a4 || (_stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRetain(a2);
    v10 = a2;
  }
  else
  {
    v70._countAndFlagsBits = a3;
    v70._object = a4;
    String.append(_:)(v70);
    swift_bridgeObjectRetain(a2);
    v71._countAndFlagsBits = 10;
    v71._object = (void *)0xE100000000000000;
    String.append(_:)(v71);
    swift_bridgeObjectRelease(0xE100000000000000);
    v10 = v80;
  }
  v11 = objc_allocWithZone((Class)NSMutableAttributedString);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  v13 = objc_msgSend(v11, "initWithString:", v12);

  v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  inited = swift_initStackObject(v74, v78);
  *(_OWORD *)(inited + 16) = xmmword_10019ED20;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  v15 = (void *)objc_opt_self(UIFont);
  v72 = NSFontAttributeName;
  v73 = v15;
  v16 = objc_msgSend(v15, "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
  isa = UIFont.withWeight(_:)(UIFontWeightSemibold).super.isa;

  v18 = type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for UIFont, UIFont_ptr);
  *(_QWORD *)(inited + 64) = v18;
  *(_QWORD *)(inited + 40) = isa;
  v19 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  v20 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v19);
  objc_msgSend(v13, "addAttributes:range:", v20, 0, String.count.getter(a1, a2));

  if (!a4 || v75 == a1 && a2 == a4 || (_stringCompareWithSmolCheck(_:_:expecting:)(v75, a4, a1, a2, 0) & 1) != 0)
    goto LABEL_14;
  v21 = swift_initStackObject(v74, v77);
  *(_OWORD *)(v21 + 16) = xmmword_10019ED20;
  *(_QWORD *)(v21 + 32) = v72;
  v22 = v72;
  v23 = objc_msgSend(v73, "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
  *(_QWORD *)(v21 + 64) = v18;
  *(_QWORD *)(v21 + 40) = v23;
  v24 = specialized Dictionary.init(dictionaryLiteral:)(v21);
  v25.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v24);
  v26 = String.count.getter(a1, a2);
  v27 = v26 + 1;
  if (__OFADD__(v26, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  v28 = String.count.getter(v75, a4);
  v29 = String.count.getter(10, 0xE100000000000000);
  v30 = v28 + v29;
  if (__OFADD__(v28, v29))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (__OFSUB__(v30, 1))
  {
LABEL_24:
    __break(1u);
    return;
  }
  objc_msgSend(v13, "addAttributes:range:", v25.super.isa, v27, v30 - 1);

LABEL_14:
  objc_msgSend(v9, "setAttributedText:", v13);
  v31 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  objc_msgSend(v9, "setTextColor:", v31);

  objc_msgSend(v9, "setNumberOfLines:", 2);
  objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v76, "frame");
  objc_msgSend(v9, "setPreferredMaxLayoutWidth:", CGRectGetWidth(v81) + -64.0);
  v32 = objc_msgSend(v9, "heightAnchor");
  objc_msgSend(v76, "bounds");
  v33 = objc_msgSend(v32, "constraintLessThanOrEqualToConstant:", CGRectGetHeight(v82) / 5.0);

  objc_msgSend(v33, "setActive:", 1);
  v34 = objc_msgSend(v9, "superview");
  if (v34)
  {
    v35 = v34;
    objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v36 = objc_msgSend(v9, "bottomAnchor");
    v37 = objc_msgSend(v35, "bottomAnchor");
    v38 = objc_msgSend(v36, "constraintEqualToAnchor:", v37);

    if (v38)
    {
      objc_msgSend(v38, "setConstant:", -16.0);
      v39 = v38;
      objc_msgSend(v39, "setActive:", 1);

    }
  }
  v40 = objc_msgSend(v9, "superview");
  if (v40)
  {
    v41 = v40;
    objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v42 = objc_msgSend(v9, "centerXAnchor");
    v43 = objc_msgSend(v41, "centerXAnchor");
    v44 = objc_msgSend(v42, "constraintEqualToAnchor:", v43);

    objc_msgSend(v44, "setConstant:", 0.0);
    v45 = v44;
    objc_msgSend(v45, "setActive:", 1);

  }
  v46 = *(uint64_t (**)(void))((swift_isaMask & *v76) + 0xE8);
  v47 = (void *)v46();
  objc_msgSend(v47, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v48 = (void *)v46();
  objc_msgSend(v48, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v49 = objc_msgSend(v48, "leadingAnchor");
  v50 = objc_msgSend(v9, "leadingAnchor");
  v51 = objc_msgSend(v49, "constraintEqualToAnchor:constant:", v50, -16.0);

  objc_msgSend(v51, "setActive:", 1);
  v52 = (void *)v46();
  objc_msgSend(v52, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v53 = objc_msgSend(v52, "trailingAnchor");
  v54 = objc_msgSend(v9, "trailingAnchor");
  v55 = objc_msgSend(v53, "constraintEqualToAnchor:constant:", v54, 16.0);

  objc_msgSend(v55, "setActive:", 1);
  v56 = (void *)v46();
  objc_msgSend(v56, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v57 = objc_msgSend(v56, "topAnchor");
  v58 = objc_msgSend(v9, "topAnchor");
  v59 = objc_msgSend(v57, "constraintEqualToAnchor:constant:", v58, -8.0);

  objc_msgSend(v59, "setActive:", 1);
  v60 = (void *)v46();
  objc_msgSend(v60, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v61 = objc_msgSend(v60, "bottomAnchor");
  v62 = objc_msgSend(v9, "bottomAnchor");
  v63 = objc_msgSend(v61, "constraintEqualToAnchor:constant:", v62, 8.0);

  objc_msgSend(v63, "setActive:", 1);
  v64 = (void *)v46();
  v65 = objc_msgSend(v64, "layer");

  objc_msgSend(v65, "setCornerRadius:", 8.0);
  v66 = (void *)v46();
  v67 = objc_msgSend(v66, "layer");

  LODWORD(v68) = 1065017672;
  objc_msgSend(v67, "setOpacity:", v68);

  v69 = (void *)v46();
  objc_msgSend(v69, "setClipsToBounds:", 1);

}

void MOSuggestionMapSnapshotView.addPlatter()()
{
  _QWORD *v0;
  uint64_t (*v1)(void);
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  double v7;
  id v8;
  CGRect v9;

  v1 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0xE8);
  v2 = (void *)v1();
  MOSuggestionMapSnapshotView.platterFrame.getter();
  objc_msgSend(v2, "setFrame:");

  v3 = (void *)v1();
  v4 = objc_msgSend(v3, "layer");

  objc_msgSend(v0, "bounds");
  objc_msgSend(v4, "setCornerRadius:", CGRectGetHeight(v9) / 5.0 / 6.0);

  v5 = (void *)v1();
  v6 = objc_msgSend(v5, "layer");

  LODWORD(v7) = 1065017672;
  objc_msgSend(v6, "setOpacity:", v7);

  v8 = (id)v1();
  objc_msgSend(v8, "setClipsToBounds:", 1);

}

Swift::Void __swiftcall MOSuggestionMapSnapshotView.layoutSubviews()()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  objc_class *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD aBlock[5];
  uint64_t v20;
  objc_super v21;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (objc_class *)type metadata accessor for MOSuggestionMapSnapshotView();
  v21.receiver = v0;
  v21.super_class = v10;
  objc_msgSendSuper2(&v21, "layoutSubviews");
  v11 = *(void **)&v0[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_imageView];
  objc_msgSend(v1, "bounds");
  objc_msgSend(v11, "setFrame:");
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue, OS_dispatch_queue_ptr);
  v12 = (void *)static OS_dispatch_queue.main.getter();
  v13 = swift_allocObject(&unk_1001E4FC0, 24, 7);
  swift_unknownObjectWeakInit(v13 + 16, v1);
  aBlock[4] = partial apply for closure #1 in MOSuggestionMapSnapshotView.layoutSubviews();
  v20 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_4;
  v14 = _Block_copy(aBlock);
  v15 = swift_release(v20);
  static DispatchQoS.unspecified.getter(v15);
  aBlock[0] = _swiftEmptyArrayStorage;
  v16 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  v18 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v17, v18, v2, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void closure #1 in MOSuggestionMapSnapshotView.layoutSubviews()(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    MOSuggestionMapSnapshotView.applyStyle()();

  }
}

id MOSuggestionMapSnapshotView.__deallocating_deinit()
{
  char *v0;
  void *v1;
  id *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  objc_super v8;
  char v9[24];

  v1 = v0;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_imageView], "setImage:", 0);
  v2 = (id *)&v0[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_platterBlurView];
  swift_beginAccess(v2, v9, 0, 0);
  objc_msgSend(*v2, "setEffect:", 0);
  if (serverManager._displayMonitor != (FBSDisplayLayoutMonitor *)-1)
    swift_once(&serverManager._displayMonitor, one-time initialization function for memory);
  v3 = type metadata accessor for Logger(0);
  __swift_project_value_buffer(v3, (uint64_t)static MOAngelLogger.memory);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MOSuggestionMapSnapshotView] de-init", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for MOSuggestionMapSnapshotView();
  return objc_msgSendSuper2(&v8, "dealloc");
}

id MOSuggestionInterstitialSupplementaryCheckmarkView.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithCoder:", a1);

  return v3;
}

id MOSuggestionInterstitialSupplementaryCheckmarkView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), "initWithFrame:", a1, a2, a3, a4);
}

void MOSuggestionMapSnapshotView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer("MomentsUIService.MOSuggestionMapSnapshotView", 44, "init(frame:)", 12, 0);
  __break(1u);
}

uint64_t sub_100015CE4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in MOSuggestionMapSnapshotView.init(baseMapImage:prominentField:secondaryField:style:assignedTileSize:)()
{
  uint64_t v0;

  closure #1 in MOSuggestionMapSnapshotView.init(baseMapImage:prominentField:secondaryField:style:assignedTileSize:)(v0);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

void partial apply for closure #1 in MOSuggestionMapSnapshotView.layoutSubviews()()
{
  uint64_t v0;

  closure #1 in MOSuggestionMapSnapshotView.layoutSubviews()(v0);
}

void specialized MOSuggestionMapSnapshotView.init(coder:)()
{
  _BYTE *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;

  v1 = &v0[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_prominentField];
  *v1 = 0;
  v1[1] = 0;
  v2 = &v0[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_secondaryField];
  *v2 = 0;
  v2[1] = 0;
  v0[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_assignedTileSize] = 11;
  v3 = OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_platterBlurView;
  v4 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", 11);
  v5 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v4);

  *(_QWORD *)&v0[v3] = v5;
  v6 = OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_labelView;
  *(_QWORD *)&v0[v6] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001A6460, "MomentsUIService/MOSuggestionMapSnapshotView.swift", 50, 2, 307, 0);
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type MOSuggestionMapSnapshotViewStyle and conformance MOSuggestionMapSnapshotViewStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MOSuggestionMapSnapshotViewStyle and conformance MOSuggestionMapSnapshotViewStyle;
  if (!lazy protocol witness table cache variable for type MOSuggestionMapSnapshotViewStyle and conformance MOSuggestionMapSnapshotViewStyle)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MOSuggestionMapSnapshotViewStyle, &type metadata for MOSuggestionMapSnapshotViewStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionMapSnapshotViewStyle and conformance MOSuggestionMapSnapshotViewStyle);
  }
  return result;
}

uint64_t sub_100015ED4@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x88))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100015F14(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0x90);
  swift_bridgeObjectRetain(v3);
  return v4(v2, v3);
}

uint64_t sub_100015F68@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xA0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100015FA8(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0xA8);
  swift_bridgeObjectRetain(v3);
  return v4(v2, v3);
}

uint64_t sub_100015FFC@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xB8))();
  *a2 = result;
  return result;
}

uint64_t sub_10001603C(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((swift_isaMask & **a2) + 0xC0))(*a1);
}

uint64_t sub_100016078@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xD0))();
  *a2 = result;
  return result;
}

uint64_t sub_1000160B8(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((swift_isaMask & **a2) + 0xD8))(*a1);
}

uint64_t sub_1000160F4@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xE8))();
  *a2 = result;
  return result;
}

uint64_t sub_100016134(id *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(id))((swift_isaMask & **a2) + 0xF0))(*a1);
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MOSuggestionMapSnapshotViewStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MOSuggestionMapSnapshotViewStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10001625C + 4 * byte_10019EC20[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100016290 + 4 * byte_10019EC1B[v4]))();
}

uint64_t sub_100016290(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100016298(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000162A0);
  return result;
}

uint64_t sub_1000162AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000162B4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000162B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000162C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for MOSuggestionMapSnapshotViewStyle(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for MOSuggestionMapSnapshotViewStyle(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MOSuggestionMapSnapshotViewStyle()
{
  return &type metadata for MOSuggestionMapSnapshotViewStyle;
}

uint64_t MOSuggestionAssetMapsClusterer.skipRows.getter()
{
  return MOSuggestionAssetMapsClusterer.skipRows.getter(&OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_skipRows);
}

uint64_t MOSuggestionAssetMapsClusterer.skipRows.setter(uint64_t a1)
{
  return MOSuggestionAssetMapsClusterer.skipRows.setter(a1, &OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_skipRows);
}

uint64_t (*MOSuggestionAssetMapsClusterer.skipRows.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_skipRows, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionAssetMapsClusterer.skipColumns.getter()
{
  return MOSuggestionAssetMapsClusterer.skipRows.getter(&OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_skipColumns);
}

uint64_t MOSuggestionAssetMapsClusterer.skipRows.getter(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _BYTE v4[24];

  v2 = (_QWORD *)(v1 + *a1);
  swift_beginAccess(v2, v4, 0, 0);
  return swift_bridgeObjectRetain(*v2);
}

uint64_t MOSuggestionAssetMapsClusterer.skipColumns.setter(uint64_t a1)
{
  return MOSuggestionAssetMapsClusterer.skipRows.setter(a1, &OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_skipColumns);
}

uint64_t MOSuggestionAssetMapsClusterer.skipRows.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = (uint64_t *)(v2 + *a2);
  swift_beginAccess(v4, v7, 1, 0);
  v5 = *v4;
  *v4 = a1;
  return swift_bridgeObjectRelease(v5);
}

uint64_t (*MOSuggestionAssetMapsClusterer.skipColumns.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_skipColumns, a1, 33, 0);
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

void *MOSuggestionAssetMapsClusterer.MAX_SPAN_REGION_DEGREES.unsafeMutableAddressor()
{
  return &static MOSuggestionAssetMapsClusterer.MAX_SPAN_REGION_DEGREES;
}

double static MOSuggestionAssetMapsClusterer.MAX_SPAN_REGION_DEGREES.getter()
{
  return 180.0;
}

double MOSuggestionAssetMapsClusterer.Cluster.coordinates.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void MOSuggestionAssetMapsClusterer.Cluster.coordinates.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

void (__swiftcall *MOSuggestionAssetMediaCoverArtQueryInput.title.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

double MOSuggestionAssetMapsClusterer.Cluster.distance.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void MOSuggestionAssetMapsClusterer.Cluster.distance.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

void (__swiftcall *MOSuggestionAssetMediaCoverArtQueryInput.albumTitle.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.count.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

void (__swiftcall *MOPOIAnnotationViewConfiguration.forceCircle.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t MOSuggestionAssetMediaCoverArtQueryInput.artistName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t MOSuggestionAssetMediaCoverArtQueryInput.artistName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 40));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

void (__swiftcall *MOSuggestionAssetMediaCoverArtQueryInput.artistName.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0) + 32);
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1)
{
  uint64_t result;

  result = type metadata singleton initialization cache for MOSuggestionAssetMapsClusterer.Cluster;
  if (!type metadata singleton initialization cache for MOSuggestionAssetMapsClusterer.Cluster)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MOSuggestionAssetMapsClusterer.Cluster);
  return result;
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0) + 32);
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

void (__swiftcall *MOSuggestionAssetMapsClusterer.Cluster.id.modify())()
{
  type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.geoMapItem.getter()
{
  type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  return swift_unknownObjectRetain();
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.geoMapItem.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0) + 36);
  result = swift_unknownObjectRelease(*(_QWORD *)(v1 + v3));
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

void (__swiftcall *MOSuggestionAssetMapsClusterer.Cluster.geoMapItem.modify())()
{
  type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

double MOSuggestionAssetMapsClusterer.Cluster.confidence.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0) + 40));
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.confidence.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  *(double *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

void (__swiftcall *MOSuggestionAssetMapsClusterer.Cluster.confidence.modify())()
{
  type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.title.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0) + 44));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0) + 44));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

void (__swiftcall *MOSuggestionAssetMapsClusterer.Cluster.title.modify())()
{
  type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.isWork.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0) + 48));
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.isWork.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  *(_BYTE *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

void (__swiftcall *MOSuggestionAssetMapsClusterer.Cluster.isWork.modify())()
{
  type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.isScaledDownPOI.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0) + 52));
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.isScaledDownPOI.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

void (__swiftcall *MOSuggestionAssetMapsClusterer.Cluster.isScaledDownPOI.modify())()
{
  type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

double MOSuggestionAssetMapsClusterer.Cluster.horizontalUncertainty.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0) + 56));
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.horizontalUncertainty.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  *(double *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

void (__swiftcall *MOSuggestionAssetMapsClusterer.Cluster.horizontalUncertainty.modify())()
{
  type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t static MOSuggestionAssetMapsClusterer.Cluster.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0) + 32);
  return static UUID.== infix(_:_:)(a1 + v4, a2 + v4);
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.hash(into:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v2 = type metadata accessor for UUID(0);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int MOSuggestionAssetMapsClusterer.Cluster.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v0 = type metadata accessor for UUID(0);
  v1 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.init(coordinates:distance:count:chain:id:geoMapItem:confidence:title:isWork:isScaledDownPOI:horizontalUncertainty:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, double a14@<D4>, char a15)
{
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  _QWORD *v27;

  *(double *)a9 = a10;
  *(double *)(a9 + 8) = a11;
  *(double *)(a9 + 16) = a12;
  *(_QWORD *)(a9 + 24) = a1;
  *(_QWORD *)(a9 + 32) = a2;
  *(_QWORD *)(a9 + 40) = a3;
  v23 = (int *)type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v24 = a9 + v23[8];
  v25 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24, a4, v25);
  *(_QWORD *)(a9 + v23[9]) = a5;
  *(double *)(a9 + v23[10]) = a13;
  v27 = (_QWORD *)(a9 + v23[11]);
  *v27 = a6;
  v27[1] = a7;
  *(_BYTE *)(a9 + v23[12]) = a8;
  *(_BYTE *)(a9 + v23[13]) = a15;
  *(double *)(a9 + v23[14]) = a14;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MOSuggestionAssetMapsClusterer.Cluster()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  v0 = type metadata accessor for UUID(0);
  v1 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for UUID(0);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  v1 = type metadata accessor for UUID(0);
  v2 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static UUID.== infix(_:_:)(a1 + *(int *)(a3 + 32), a2 + *(int *)(a3 + 32));
}

uint64_t MOSuggestionAssetMapsClusterer.__allocating_init(mapLocations:separationThreshold:)(uint64_t a1, double a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return MOSuggestionAssetMapsClusterer.init(mapLocations:separationThreshold:)(a1, a2);
}

uint64_t MOSuggestionAssetMapsClusterer.init(mapLocations:separationThreshold:)(uint64_t a1, double a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t *v9;
  _QWORD *v10;
  objc_class *v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  objc_super v30;

  v5 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (double *)((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)&v2[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_skipRows] = &_swiftEmptySetSingleton;
  *(_QWORD *)&v2[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_skipColumns] = &_swiftEmptySetSingleton;
  v9 = &one-time initialization token for shared;
  v10 = _swiftEmptyArrayStorage;
  *(_QWORD *)&v2[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_inputClusters] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v2[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_results] = &_swiftEmptySetSingleton;
  *(double *)&v2[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_separationThreshold] = a2;
  v11 = (objc_class *)type metadata accessor for MOSuggestionAssetMapsClusterer();
  v30.receiver = v2;
  v30.super_class = v11;
  v12 = objc_msgSendSuper2(&v30, "init");
  v13 = v12;
  v29 = 0;
  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v15 = v12;
  if (v14)
  {
    while (1)
    {
      v28 = v10;
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0);
      if (v14 < 0)
        break;
      v25 = v13;
      v13 = 0;
      v10 = 0;
      v17 = v28;
      v26 = a1 & 0xC000000000000001;
      v9 = (uint64_t *)a1;
      while ((id)v14 != v13)
      {
        if (v26)
        {
          v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a1);
        }
        else
        {
          v18 = *(_QWORD *)(a1 + 8 * (_QWORD)v13 + 32);
          swift_retain(v18);
        }
        v27 = v18;
        closure #1 in MOSuggestionAssetMapsClusterer.init(mapLocations:separationThreshold:)(&v27, &v29, v8);
        swift_release(v18);
        v28 = v17;
        v20 = v17[2];
        v19 = v17[3];
        if (v20 >= v19 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
          v17 = v28;
        }
        v13 = (char *)v13 + 1;
        v17[2] = v20 + 1;
        outlined init with take of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v8, (uint64_t)v17+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v20);
        a1 = (uint64_t)v9;
        if ((id)v14 == v13)
        {
          swift_bridgeObjectRelease(v9);
          v13 = v25;

          v9 = &one-time initialization token for shared;
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_14:
      if (a1 < 0)
        v21 = a1;
      else
        v21 = a1 & 0xFFFFFFFFFFFFFF8;
      v22 = v13;
      swift_bridgeObjectRetain(a1);
      v14 = _CocoaArrayWrapper.endIndex.getter(v21);
      swift_bridgeObjectRelease(a1);
      if (!v14)
        goto LABEL_18;
    }
    __break(1u);
  }
  else
  {
LABEL_18:
    swift_bridgeObjectRelease(a1);

    v17 = _swiftEmptyArrayStorage;
LABEL_19:
    v23 = v9[267];
    v24 = *(_QWORD *)((char *)v13 + v23);
    *(_QWORD *)((char *)v13 + v23) = v17;
    swift_bridgeObjectRelease(v24);
    return (uint64_t)v13;
  }
  return result;
}

uint64_t type metadata accessor for MOSuggestionAssetMapsClusterer()
{
  return objc_opt_self(_TtC16MomentsUIService30MOSuggestionAssetMapsClusterer);
}

uint64_t closure #1 in MOSuggestionAssetMapsClusterer.init(mapLocations:separationThreshold:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, double *a3@<X8>)
{
  uint64_t v5;
  double v6;
  double v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  char v10;
  uint64_t result;
  char v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  double v21;
  int *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *a1;
  v6 = (*(double (**)(void))(*(_QWORD *)*a1 + 240))();
  v7 = (*(double (**)(void))(*(_QWORD *)v5 + 264))();
  v8 = *(uint64_t (**)(void))(*(_QWORD *)v5 + 312);
  v9 = v8();
  if ((v10 & 1) != 0)
  {
    v24 = 1;
  }
  else
  {
    result = ((uint64_t (*)(uint64_t))v8)(v9);
    if ((v12 & 1) != 0)
      goto LABEL_8;
    v24 = result;
  }
  v25 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v26 = v13;
  v14._countAndFlagsBits = 95;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 288))();
  v16 = (*(double (**)(void))(*(_QWORD *)v5 + 360))();
  v17 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 336))();
  v19 = v18;
  v20 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 384))();
  v21 = (*(double (**)(void))(*(_QWORD *)v5 + 456))();
  v22 = (int *)type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  result = UUID.init()();
  *a3 = v6;
  a3[1] = v7;
  a3[2] = 0.0;
  *((_QWORD *)a3 + 3) = v24;
  *((_QWORD *)a3 + 4) = v25;
  *((_QWORD *)a3 + 5) = v26;
  *(_QWORD *)((char *)a3 + v22[9]) = v15;
  *(double *)((char *)a3 + v22[10]) = v16;
  v23 = (uint64_t *)((char *)a3 + v22[11]);
  *v23 = v17;
  v23[1] = v19;
  *((_BYTE *)a3 + v22[12]) = v20 & 1;
  *((_BYTE *)a3 + v22[13]) = 0;
  *(double *)((char *)a3 + v22[14]) = v21;
  if (!__OFADD__(*a2, 1))
  {
    ++*a2;
    return result;
  }
  __break(1u);
LABEL_8:
  __break(1u);
  return result;
}

Swift::Void __swiftcall MOSuggestionAssetMapsClusterer.buildDendogram()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  double *v50;
  double *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  _QWORD *v59;
  char isUniquelyReferenced_nonNull_native;
  double v61;
  _QWORD *v62;
  char v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  double v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _BYTE v140[24];
  Swift::OpaquePointer distanceMatrix;
  unint64_t v142;
  Swift::tuple_tuple_Int_Int_Double_optional v143;

  v1 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v133 = *(_QWORD *)(v1 - 8);
  v2 = __chkstk_darwin(v1);
  v124 = (uint64_t)&v112 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v123 = (uint64_t)&v112 - v5;
  v6 = __chkstk_darwin(v4);
  v7 = __chkstk_darwin(v6);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v112 - v9;
  v11 = __chkstk_darwin(v8);
  v120 = (uint64_t)&v112 - v12;
  v13 = __chkstk_darwin(v11);
  v119 = (uint64_t)&v112 - v14;
  v15 = __chkstk_darwin(v13);
  v118 = (uint64_t)&v112 - v16;
  v17 = __chkstk_darwin(v15);
  v117 = (uint64_t)&v112 - v18;
  v19 = __chkstk_darwin(v17);
  v116 = (char *)&v112 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v112 - v22;
  v24 = __chkstk_darwin(v21);
  __chkstk_darwin(v24);
  v125 = (uint64_t)&v112 - v28;
  v29 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_inputClusters);
  v142 = v29;
  v30 = *(_QWORD *)(v29 + 16);
  if (!v30)
    goto LABEL_93;
  v31 = v30 - 1;
  if (v30 == 1)
  {
    swift_bridgeObjectRetain(v29);
    goto LABEL_78;
  }
  v131 = v27;
  v127 = v26;
  v128 = v25;
  v115 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_separationThreshold;
  v114 = v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_results;
  swift_bridgeObjectRetain(v29);
  v32 = 0;
  v122 = v0;
  v130 = v1;
  v113 = v10;
  v129 = v23;
  v121 = v31;
  while (1)
  {
    if (v32 == v31)
    {
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
      goto LABEL_96;
    }
    v126 = v32;
    v33 = *(_QWORD *)(v29 + 16);
    if (!v33)
    {
      v34 = _swiftEmptyArrayStorage;
LABEL_13:
      swift_bridgeObjectRelease(v34);
      v37 = _swiftEmptyArrayStorage;
      goto LABEL_14;
    }
    v34 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(*(_QWORD *)(v29 + 16), &type metadata for Double);
    v34[2] = v33;
    memset_pattern16(v34 + 4, &unk_10019EDB0, 8 * v33);
    v35 = *(_QWORD *)(v29 + 16);
    if (!v35)
      goto LABEL_13;
    v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Double]);
    v37 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(v35, v36);
    v37[2] = v35;
    v37[4] = v34;
    if (v35 != 1)
    {
      v38 = v37;
      v37[5] = v34;
      v39 = v35 - 2;
      if (v35 != 2)
      {
        v40 = v37 + 6;
        do
        {
          *v40++ = v34;
          swift_bridgeObjectRetain(v34);
          --v39;
        }
        while (v39);
      }
      swift_bridgeObjectRetain(v34);
      v37 = v38;
    }
LABEL_14:
    v41 = *(_QWORD *)(v29 + 16);
    if (!v41)
      goto LABEL_92;
    v42 = v41 - 1;
    v137 = v29;
    v43 = v37;
    if (v41 != 1)
      break;
LABEL_35:
    distanceMatrix._rawValue = v37;
    v64 = v37;
    v65 = v122;
    v143 = MOSuggestionAssetMapsClusterer.findSmallestEuclideanDistance(distanceMatrix:lowerHalfOnly:)(&distanceMatrix, 1);
    if ((v66 & 1) == 0)
    {
      if (v143.value._0._0 < 0)
        goto LABEL_95;
      v67 = *(_QWORD *)(v29 + 16);
      if (v143.value._0._0 < v67)
      {
        v68 = v143.value._0._1;
        v69 = *(double *)&v143.is_nil;
        v136 = (*(unsigned __int8 *)(v133 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80);
        v70 = v29 + v136;
        v71 = *(_QWORD *)(v133 + 72);
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v29 + v136 + v71 * v143.value._0._0, v125);
        if (v68 >= v67)
          goto LABEL_97;
        v72 = v67;
        v73 = v69;
        v74 = v131;
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v70 + v71 * v68, v131);
        if (*(double *)(v65 + v115) * *(double *)(v65 + v115) <= v73)
        {
          swift_bridgeObjectRelease(v43);
          v86 = v125;
          v87 = v120;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v125, v120);
          swift_beginAccess(v114, v140, 33, 0);
          v88 = v119;
          specialized Set._Variant.insert(_:)(v119, v87);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v88);
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v74, v87);
          specialized Set._Variant.insert(_:)(v88, v87);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v88);
          swift_endAccess(v140);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v74);
          v89 = v86;
LABEL_56:
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v89);
          v31 = v121;
          goto LABEL_57;
        }
        v139 = v125 + *(int *)(v130 + 32);
        swift_bridgeObjectRetain(v29);
        v75 = 0;
        v76 = v71 + v136;
        v77 = 1;
        v78 = (uint64_t)v116;
        v79 = v72;
        while (1)
        {
          v80 = v130;
          v81 = static UUID.== infix(_:_:)(v70 + *(int *)(v130 + 32), v139);
          v82 = (uint64_t)v129;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v70, (uint64_t)v129);
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v131, v78);
          if ((v81 & 1) != 0)
            break;
          v83 = static UUID.== infix(_:_:)(v82 + *(int *)(v80 + 32), v78 + *(int *)(v80 + 32));
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v78);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v82);
          if ((v83 & 1) != 0)
            goto LABEL_48;
          ++v75;
          v70 += v71;
          ++v77;
          v76 += v71;
          if (v79 == v75)
          {
            v84 = v137;
            swift_bridgeObjectRelease(v137);
            v75 = *(_QWORD *)(v84 + 16);
            v85 = v142;
            goto LABEL_50;
          }
        }
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v78);
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v82);
LABEL_48:
        v90 = v137;
        swift_bridgeObjectRelease(v137);
        v91 = (uint64_t)v113;
        if (__OFADD__(v75, 1))
        {
LABEL_104:
          __break(1u);
          return;
        }
        v92 = *(_QWORD *)(v90 + 16);
        v85 = v142;
        v93 = v130;
        if (v75 + 1 == v92)
        {
LABEL_50:
          v94 = *(_QWORD *)(v85 + 16);
          if (v94 >= (uint64_t)v75)
          {
            specialized Array.replaceSubrange<A>(_:with:)(v75, v94, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
            swift_bridgeObjectRelease(distanceMatrix._rawValue);
            v95 = v117;
            MOSuggestionAssetMapsClusterer.combinedCluster(_:_:distance:)(v125, v131, v117, v73);
            outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v95, v118);
            v29 = v142;
            if ((swift_isUniquelyReferenced_nonNull_native(v142) & 1) == 0)
              v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v29 + 16) + 1, 1, v29, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
            v97 = *(_QWORD *)(v29 + 16);
            v96 = *(_QWORD *)(v29 + 24);
            if (v97 >= v96 >> 1)
              v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v96 > 1, v97 + 1, 1, v29, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
            *(_QWORD *)(v29 + 16) = v97 + 1;
            outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v118, v29 + v136 + v97 * v71);
            v142 = v29;
            v98 = v117;
            v99 = v120;
            outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v117, v120);
            swift_beginAccess(v114, v140, 33, 0);
            v100 = v119;
            specialized Set._Variant.insert(_:)(v119, v99);
            outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v100);
            swift_endAccess(v140);
            outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v98);
            outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v131);
            v89 = v125;
            goto LABEL_56;
          }
          goto LABEL_103;
        }
        while (1)
        {
          if (v77 >= *(_QWORD *)(v85 + 16))
            goto LABEL_89;
          v101 = v71;
          v138 = v85 + v76;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v85 + v76, v91);
          v102 = v93;
          v103 = static UUID.== infix(_:_:)(v91 + *(int *)(v93 + 32), v139);
          v104 = v91;
          v105 = v91;
          v106 = v127;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v104, v127);
          v107 = v128;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v131, v128);
          if ((v103 & 1) != 0)
            break;
          v108 = static UUID.== infix(_:_:)(v106 + *(int *)(v102 + 32), v107 + *(int *)(v102 + 32));
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v106);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v107);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v105);
          v91 = v105;
          if ((v108 & 1) != 0)
            goto LABEL_63;
          v71 = v101;
          if (v77 != v75)
          {
            if ((v75 & 0x8000000000000000) != 0)
              goto LABEL_98;
            v109 = *(_QWORD *)(v85 + 16);
            if (v75 >= v109)
              goto LABEL_99;
            outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v85 + v136 + v75 * v101, v123);
            if (v77 >= v109)
              goto LABEL_100;
            outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v138, v124);
            if ((swift_isUniquelyReferenced_nonNull_native(v85) & 1) == 0)
            {
              v85 = specialized _ArrayBuffer._consumeAndCreateNew()(v85);
              v142 = v85;
            }
            v91 = (uint64_t)v113;
            if (v75 >= *(_QWORD *)(v85 + 16))
              goto LABEL_101;
            outlined assign with take of MOSuggestionAssetMapsClusterer.Cluster(v124, v85 + v136 + v75 * v101);
            if (v77 >= *(_QWORD *)(v142 + 16))
              goto LABEL_102;
            outlined assign with take of MOSuggestionAssetMapsClusterer.Cluster(v123, v142 + v76);
          }
          if (__OFADD__(v75++, 1))
            goto LABEL_94;
LABEL_74:
          v111 = v77 + 1;
          v93 = v130;
          if (__OFADD__(v77, 1))
            goto LABEL_90;
          v85 = v142;
          ++v77;
          v76 += v71;
          if (v111 == *(_QWORD *)(v142 + 16))
            goto LABEL_50;
        }
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v106);
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v107);
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v105);
        v91 = v105;
LABEL_63:
        v71 = v101;
        goto LABEL_74;
      }
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
      goto LABEL_104;
    }
    swift_bridgeObjectRelease(v64);
    v31 = v121;
LABEL_57:
    v32 = v126 + 1;
    if (v126 + 1 == v31)
      goto LABEL_85;
  }
  v44 = 0;
  v45 = v37 + 4;
  v46 = v37 + 5;
  v132 = v29 + 8;
  v136 = 1;
  v134 = v41 - 1;
  while (1)
  {
    if (v44 == v42)
    {
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }
    v47 = *(_QWORD *)(v29 + 16);
    if (v47 <= v44)
      goto LABEL_87;
    v135 = v44 + 1;
    if (v44 + 1 != v47)
      break;
LABEL_17:
    ++v136;
    v42 = v134;
    v44 = v135;
    if (v135 == v134)
      goto LABEL_35;
  }
  if (v44 + 1 >= v47)
    goto LABEL_88;
  v48 = (*(unsigned __int8 *)(v133 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80);
  v49 = *(_QWORD *)(v133 + 72);
  v50 = (double *)(v29 + v48 + v49 * v44);
  v138 = v47 - 1;
  v139 = v49;
  v51 = (double *)(v132 + v48 + v49 * v136);
  v52 = v44;
  while (1)
  {
    v53 = *(_QWORD *)(v29 + 16);
    if (v44 >= v53)
      break;
    v54 = v52 + 1;
    if (v52 + 1 >= v53)
      goto LABEL_80;
    if (v44 >= v37[2])
      goto LABEL_81;
    v55 = *(v51 - 1);
    v56 = *v51;
    v58 = *v50;
    v57 = v50[1];
    v59 = (_QWORD *)v45[v44];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v59);
    v45[v44] = v59;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v59 = specialized _ArrayBuffer._consumeAndCreateNew()(v59);
      v45[v44] = v59;
    }
    if (v54 >= v59[2])
      goto LABEL_82;
    v61 = (v58 - v55) * (v58 - v55) + (v57 - v56) * (v57 - v56);
    *(double *)&v59[v52 + 5] = v61;
    if (v54 >= v43[2])
      goto LABEL_83;
    v62 = (_QWORD *)v46[v52];
    v63 = swift_isUniquelyReferenced_nonNull_native(v62);
    v46[v52] = v62;
    if ((v63 & 1) == 0)
    {
      v62 = specialized _ArrayBuffer._consumeAndCreateNew()(v62);
      v46[v52] = v62;
    }
    v29 = v137;
    if (v44 >= v62[2])
      goto LABEL_84;
    v37 = v43;
    *(double *)&v62[v44 + 4] = v61;
    ++v52;
    v51 = (double *)((char *)v51 + v139);
    if (v138 == v52)
      goto LABEL_17;
  }
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  v29 = v142;
LABEL_78:
  swift_bridgeObjectRelease(v29);
}

uint64_t MOSuggestionAssetMapsClusterer.distanceMatrix(clusters:)(uint64_t *a1)
{
  uint64_t v1;
  char *v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  _QWORD *v22;
  double v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v1 = *a1;
  v2 = specialized Array.init(repeating:count:)(*(_QWORD *)(*a1 + 16), 1.79769313e308);
  result = (uint64_t)specialized Array.init(repeating:count:)((uint64_t)v2, *(_QWORD *)(v1 + 16));
  v30 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  if (v4)
  {
    v5 = (_QWORD *)result;
    v6 = v4 - 1;
    if (v4 == 1)
      return (uint64_t)v5;
    v7 = 0;
    v25 = v1 + 8;
    v26 = v4 - 1;
    v8 = 5;
    v9 = 1;
    while (v7 != v6)
    {
      v10 = *(_QWORD *)(v30 + 16);
      if (v10 <= v7)
        goto LABEL_32;
      v28 = v8;
      v27 = v7 + 1;
      if (v7 + 1 != v10)
      {
        if (v7 + 1 >= v10)
          goto LABEL_33;
        result = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
        v11 = *(_QWORD *)(result - 8);
        v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
        v13 = *(_QWORD *)(v11 + 72);
        v14 = (double *)(v30 + v12 + v13 * v7);
        v29 = 1 - v10;
        v15 = (double *)(v25 + v12 + v13 * v9);
        while (1)
        {
          v16 = *(_QWORD *)(v30 + 16);
          if (v7 >= v16)
            break;
          v17 = v8 - 4;
          if (v8 - 4 >= v16)
            goto LABEL_26;
          v18 = *(v15 - 1);
          v19 = *v15;
          v21 = *v14;
          v20 = v14[1];
          result = swift_isUniquelyReferenced_nonNull_native(v5);
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
            v5 = (_QWORD *)result;
          }
          if (v7 >= v5[2])
            goto LABEL_27;
          v22 = (_QWORD *)v5[v7 + 4];
          result = swift_isUniquelyReferenced_nonNull_native(v22);
          v5[v7 + 4] = v22;
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
            v22 = (_QWORD *)result;
            v5[v7 + 4] = result;
          }
          if (v17 >= v22[2])
            goto LABEL_28;
          v23 = (v21 - v18) * (v21 - v18) + (v20 - v19) * (v20 - v19);
          *(double *)&v22[v8] = v23;
          if (v17 >= v5[2])
            goto LABEL_29;
          v24 = (_QWORD *)v5[v8];
          result = swift_isUniquelyReferenced_nonNull_native(v24);
          v5[v8] = v24;
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v24);
            v24 = (_QWORD *)result;
            v5[v8] = result;
          }
          if (v7 >= v24[2])
            goto LABEL_30;
          *(double *)&v24[v7 + 4] = v23;
          ++v8;
          v15 = (double *)((char *)v15 + v13);
          if (v29 + v8 == 5)
            goto LABEL_4;
        }
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        break;
      }
LABEL_4:
      v8 = v28 + 1;
      ++v9;
      v6 = v26;
      ++v7;
      if (v27 == v26)
        return (uint64_t)v5;
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::tuple_tuple_Int_Int_Double_optional __swiftcall MOSuggestionAssetMapsClusterer.findSmallestEuclideanDistance(distanceMatrix:lowerHalfOnly:)(Swift::OpaquePointer *distanceMatrix, Swift::Bool lowerHalfOnly)
{
  _QWORD *v2;
  _QWORD *rawValue;
  Swift::Int v4;
  Swift::Int v5;
  Swift::Bool v6;
  double v7;
  unint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(Swift::Int);
  uint64_t v15;
  unint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  Swift::Int v36;
  Swift::tuple_tuple_Int_Int_Double_optional result;

  rawValue = distanceMatrix->_rawValue;
  v34 = rawValue[2];
  if (!v34)
  {
LABEL_37:
    v11 = 0;
    v10 = 0;
    v6 = 0;
    goto LABEL_39;
  }
  v33 = (char *)(rawValue + 4);
  v4 = swift_bridgeObjectRetain(rawValue);
  v8 = 0;
  v9 = 1.79769313e308;
  v10 = -1;
  v11 = -1;
  v36 = v4;
  while (1)
  {
    if (v8 >= *(_QWORD *)(v4 + 16))
      goto LABEL_41;
    v12 = *(_QWORD *)&v33[8 * v8];
    v13 = *(_QWORD *)(v12 + 16);
    if (v13)
      break;
LABEL_4:
    if (++v8 == v34)
    {
      swift_bridgeObjectRelease(v4);
      if (v11 == -1 && v10 == -1)
        goto LABEL_37;
      v6 = LOBYTE(v9);
LABEL_39:
      v4 = v11;
      v5 = v10;
      goto LABEL_42;
    }
  }
  v14 = *(uint64_t (**)(Swift::Int))((swift_isaMask & *v2) + 0x78);
  if (v8 <= 1)
    v15 = 1;
  else
    v15 = v8;
  v35 = v15;
  v4 = swift_bridgeObjectRetain(v12);
  v16 = 0;
  while (v16 < *(_QWORD *)(v12 + 16))
  {
    v17 = *(double *)(v12 + 32 + 8 * v16);
    v18 = v14(v4);
    v19 = v18;
    if (*(_QWORD *)(v18 + 16))
    {
      v20 = static Hasher._hash(seed:_:)(*(_QWORD *)(v18 + 40), v8);
      v21 = -1 << *(_BYTE *)(v19 + 32);
      v22 = v20 & ~v21;
      if (((*(_QWORD *)(v19 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
      {
        v23 = *(_QWORD *)(v19 + 48);
        if (*(_QWORD *)(v23 + 8 * v22) == v8)
          goto LABEL_11;
        v24 = ~v21;
        while (1)
        {
          v22 = (v22 + 1) & v24;
          if (((*(_QWORD *)(v19 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
            break;
          if (*(_QWORD *)(v23 + 8 * v22) == v8)
            goto LABEL_11;
        }
      }
    }
    v25 = swift_bridgeObjectRelease(v19);
    v26 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x90))(v25);
    v19 = v26;
    if (!*(_QWORD *)(v26 + 16))
      goto LABEL_28;
    v27 = static Hasher._hash(seed:_:)(*(_QWORD *)(v26 + 40), v16);
    v28 = -1 << *(_BYTE *)(v19 + 32);
    v29 = v27 & ~v28;
    if (((*(_QWORD *)(v19 + 56 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
      goto LABEL_28;
    v30 = *(_QWORD *)(v19 + 48);
    if (*(_QWORD *)(v30 + 8 * v29) != v16)
    {
      v31 = ~v28;
      while (1)
      {
        v29 = (v29 + 1) & v31;
        if (((*(_QWORD *)(v19 + 56 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
          break;
        if (*(_QWORD *)(v30 + 8 * v29) == v16)
          goto LABEL_11;
      }
LABEL_28:
      v4 = swift_bridgeObjectRelease(v19);
      if (!lowerHalfOnly || v16 < v8 && (v32 = *(_QWORD *)(v36 + 16), v16 < v32) && v32 > v35)
      {
        if (v17 < v9)
        {
          v10 = v16;
          v11 = v8;
          v9 = v17;
        }
      }
      goto LABEL_12;
    }
LABEL_11:
    v4 = swift_bridgeObjectRelease(v19);
LABEL_12:
    if (++v16 == v13)
    {
      swift_bridgeObjectRelease(v12);
      v4 = v36;
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  result.value._1 = v7;
  result.value._0._1 = v5;
  result.value._0._0 = v4;
  result.is_nil = v6;
  return result;
}

uint64_t MOSuggestionAssetMapsClusterer.combinedCluster(_:_:distance:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t result;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  result = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v9 = (int *)result;
  v10 = *(int *)(result + 36);
  v11 = *(_QWORD *)(a1 + v10);
  if (!v11)
  {
    v11 = *(_QWORD *)(a2 + v10);
    result = swift_unknownObjectRetain();
  }
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = (*(double *)(a1 + 8) + *(double *)(a2 + 8)) * 0.5;
    v16 = (*(double *)a1 + *(double *)a2) * 0.5;
    v18 = *(_QWORD *)(a1 + 32);
    v17 = *(_QWORD *)(a1 + 40);
    v19 = *(_QWORD *)(a2 + 32);
    v20 = *(void **)(a2 + 40);
    v24 = v18;
    v25 = v17;
    swift_bridgeObjectRetain(v17);
    v21._countAndFlagsBits = v19;
    v21._object = v20;
    String.append(_:)(v21);
    v22 = swift_unknownObjectRetain();
    result = UUID.init()(v22);
    *(double *)a3 = v16;
    *(double *)(a3 + 8) = v15;
    *(double *)(a3 + 16) = a4;
    *(_QWORD *)(a3 + 24) = v14;
    *(_QWORD *)(a3 + 32) = v24;
    *(_QWORD *)(a3 + 40) = v25;
    *(_QWORD *)(a3 + v9[9]) = v11;
    *(_QWORD *)(a3 + v9[10]) = 0;
    v23 = (_QWORD *)(a3 + v9[11]);
    *v23 = 0;
    v23[1] = 0xE000000000000000;
    *(_BYTE *)(a3 + v9[12]) = 0;
    *(_BYTE *)(a3 + v9[13]) = 0;
    *(_QWORD *)(a3 + v9[14]) = 0;
  }
  return result;
}

double static MOSuggestionAssetMapsClusterer.makeRegion(containing:applyBottomPaddingForPlatter:applyBottomPaddingForGradient:horizontalAspectRatio:markerStyle:applyRenderMargin:shouldAdjustMarker:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return specialized static MOSuggestionAssetMapsClusterer.makeRegion(containing:applyBottomPaddingForPlatter:applyBottomPaddingForGradient:horizontalAspectRatio:markerStyle:applyRenderMargin:shouldAdjustMarker:)(a1, a2, a3, a4, a6);
}

char *MOSuggestionAssetMapsClusterer.groupedByAverageHeight()()
{
  int64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  double v25;
  char v26;
  double v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint8_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  double i;
  unint64_t v40;
  unint64_t v41;
  double v42;
  double v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  double *v65;
  uint64_t v67;
  unint64_t v68;
  BOOL v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  double *v73;
  double v74;
  double v75;
  void *v76;
  uint64_t v77;
  void *v78;
  NSString v79;
  id v80;
  id v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  uint64_t v87;
  void *v88;
  id v89;
  double v90;
  id v91;
  id v92;
  id v93;
  id v94;
  double v95;
  id v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  Swift::String v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  id v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  _QWORD *v136;
  char *v137;
  unint64_t v138;
  id v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  double *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _OWORD v156[2];
  __int128 v157;
  __int128 v158;
  char v159[8];
  __int128 v160;

  v1 = v0;
  v154 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v155 = *(_QWORD *)(v154 - 8);
  v2 = __chkstk_darwin(v154);
  v153 = (uint64_t)&v132 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v132 - v5;
  v7 = __chkstk_darwin(v4);
  v141 = (uint64_t)&v132 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (unint64_t)&v132 - v10;
  v12 = __chkstk_darwin(v9);
  v149 = (double *)((char *)&v132 - v13);
  v14 = __chkstk_darwin(v12);
  v16 = (unint64_t)&v132 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v132 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (unint64_t)&v132 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v132 - v23;
  *(_QWORD *)&v160 = 0;
  *((_QWORD *)&v160 + 1) = 0xE000000000000000;
  v25 = COERCE_DOUBLE(specialized static MOAngelDefaultsManager.doubleValueFor(_:)());
  if ((v26 & 1) != 0)
    v27 = 0.5;
  else
    v27 = v25;
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1)
    goto LABEL_126;
  while (1)
  {
    v28 = type metadata accessor for Logger(0);
    __swift_project_value_buffer(v28, (uint64_t)static MOAngelLogger.assets);
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.default.getter();
    v31 = os_log_type_enabled(v29, v30);
    v143 = v16;
    if (v31)
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v32 = 134217984;
      *(double *)&v157 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, (char *)&v157 + 8, v32 + 4);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "[MOSuggestionAssetMapsClusterer] using POI penalty: %f", v32, 0xCu);
      swift_slowDealloc(v32, -1, -1);
    }

    v33 = (uint64_t *)(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_results);
    swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_results, v159, 0, 0);
    v34 = *v33;
    v35 = &one-time initialization token for shared;
    if (!*(_QWORD *)(*v33 + 16))
    {
      v24 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_109;
    }
    v136 = (_QWORD *)v11;
    v144 = v1;
    v16 = v34 + 56;
    v36 = 1 << *(_BYTE *)(v34 + 32);
    v37 = -1;
    if (v36 < 64)
      v37 = ~(-1 << v36);
    v11 = v37 & *(_QWORD *)(v34 + 56);
    v38 = (unint64_t)(v36 + 63) >> 6;
    swift_bridgeObjectRetain(v34);
    v1 = 0;
    for (i = 0.0; ; i = i + v43 * (1.0 - v42))
    {
      if (v11)
      {
        v40 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v41 = v40 | (v1 << 6);
        goto LABEL_12;
      }
      v44 = v1 + 1;
      if (__OFADD__(v1, 1))
      {
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
        goto LABEL_123;
      }
      if (v44 >= v38)
        goto LABEL_31;
      v45 = *(_QWORD *)(v16 + 8 * v44);
      ++v1;
      if (!v45)
      {
        v1 = v44 + 1;
        if (v44 + 1 >= v38)
          goto LABEL_31;
        v45 = *(_QWORD *)(v16 + 8 * v1);
        if (!v45)
        {
          v1 = v44 + 2;
          if (v44 + 2 >= v38)
            goto LABEL_31;
          v45 = *(_QWORD *)(v16 + 8 * v1);
          if (!v45)
            break;
        }
      }
LABEL_30:
      v11 = (v45 - 1) & v45;
      v41 = __clz(__rbit64(v45)) + (v1 << 6);
LABEL_12:
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(*(_QWORD *)(v34 + 48) + *(_QWORD *)(v155 + 72) * v41, (uint64_t)v24);
      outlined init with take of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v24, v22);
      if (*(_QWORD *)(v22 + *(int *)(v154 + 36)))
        v42 = v27;
      else
        v42 = -v27;
      v43 = *(double *)(v22 + 16);
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v22);
    }
    v46 = v44 + 3;
    if (v46 >= v38)
      break;
    v45 = *(_QWORD *)(v16 + 8 * v46);
    if (v45)
    {
      v1 = v46;
      goto LABEL_30;
    }
    while (1)
    {
      v1 = v46 + 1;
      if (__OFADD__(v46, 1))
        break;
      if (v1 >= v38)
        goto LABEL_31;
      v45 = *(_QWORD *)(v16 + 8 * v1);
      ++v46;
      if (v45)
        goto LABEL_30;
    }
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
  }
LABEL_31:
  swift_release(v34);
  v47 = *v33;
  v27 = *(double *)(*v33 + 16);
  swift_bridgeObjectRetain_n(*v33, 2);
  v48 = specialized _copyCollectionToContiguousArray<A>(_:)(v47);
  swift_bridgeObjectRelease(v47);
  *(_QWORD *)&v157 = v48;
  specialized MutableCollection<>.sort(by:)(&v157, specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_bridgeObjectRelease(v47);
  v11 = v157;
  v22 = *(_QWORD *)(v157 + 16);
  v1 = v144;
  v49 = v143;
  if (v22)
  {
    v16 = 0;
    v146 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_inputClusters;
    v145 = (*(unsigned __int8 *)(v155 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80);
    v50 = v157 + v145;
    v135 = GEOPOICategoryReligiousSite;
    v24 = (char *)_swiftEmptyArrayStorage;
    v138 = 0x80000001001A64B0;
    v137 = (char *)&type metadata for Any + 8;
    v51 = i / (double)*(uint64_t *)&v27;
    v140 = v157;
    v148 = v22;
    v147 = v157 + v145;
    while (1)
    {
      if (v16 >= *(_QWORD *)(v11 + 16))
      {
        __break(1u);
        goto LABEL_121;
      }
      v152 = *(_QWORD *)(v155 + 72);
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v50 + v152 * v16, (uint64_t)v19);
      v27 = *((double *)v19 + 2);
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v19, v49);
      if (v27 >= v51)
      {
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v49);
        goto LABEL_34;
      }
      v157 = v160;
      v52 = *(_QWORD *)(v49 + 40);
      *(_QWORD *)&v156[0] = *(_QWORD *)(v49 + 32);
      *((_QWORD *)&v156[0] + 1) = v52;
      v22 = lazy protocol witness table accessor for type String and conformance String();
      v53 = StringProtocol.contains<A>(_:)(v156, &type metadata for String, &type metadata for String, v22, v22);
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v49);
      if ((v53 & 1) != 0)
      {
        v22 = v148;
        v50 = v147;
        goto LABEL_34;
      }
      v54 = *((_QWORD *)v19 + 5);
      *(_QWORD *)&v157 = *((_QWORD *)v19 + 4);
      *((_QWORD *)&v157 + 1) = v54;
      *(_QWORD *)&v156[0] = 95;
      *((_QWORD *)&v156[0] + 1) = 0xE100000000000000;
      v55 = StringProtocol.components<A>(separatedBy:)(v156, &type metadata for String, &type metadata for String, v22, v22);
      if (!*(_QWORD *)(v55 + 16))
        goto LABEL_124;
      v56 = (_QWORD *)v55;
      if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) != 0)
      {
        v57 = v56[2];
        if (!v57)
          goto LABEL_125;
      }
      else
      {
        v56 = specialized _ArrayBuffer._consumeAndCreateNew()(v56);
        v57 = v56[2];
        if (!v57)
          goto LABEL_125;
      }
      v58 = v57 - 1;
      v59 = v56[2 * v58 + 5];
      v56[2] = v58;
      swift_bridgeObjectRelease(v59);
      v60 = v56[2];
      if (!v60)
      {
        swift_bridgeObjectRelease(v56);
        v63 = 0;
        v49 = v143;
        goto LABEL_102;
      }
      swift_bridgeObjectRetain(v56);
      v142 = 0;
      v151 = 0;
      v150 = 0;
      v11 = (unint64_t)(v56 + 5);
      v61 = 0.0;
      v62 = 0.0;
      do
      {
        v67 = *(_QWORD *)(v11 - 8);
        v68 = *(_QWORD *)v11;
        if (v67)
          v69 = 0;
        else
          v69 = v68 == 0xE000000000000000;
        if (v69)
          goto LABEL_57;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v11 - 8), *(_QWORD *)v11, 0, 0xE000000000000000, 0) & 1) != 0)goto LABEL_57;
        swift_bridgeObjectRetain(v68);
        v70 = specialized FixedWidthInteger.init(_:)(v67, v68);
        if ((v71 & 1) != 0)
          goto LABEL_57;
        if (v70 < 0)
          goto LABEL_57;
        v72 = *(_QWORD *)(v1 + v146);
        if (v70 >= *(_QWORD *)(v72 + 16))
          goto LABEL_57;
        v73 = v149;
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v72 + v145 + v70 * v152, (uint64_t)v149);
        v75 = *v73;
        v74 = v73[1];
        v22 = *(int *)(v154 + 36);
        v76 = *(void **)((char *)v73 + v22);
        if (!v76)
          goto LABEL_48;
        v64 = v151;
        if (v142 >= 1)
          goto LABEL_49;
        v77 = one-time initialization token for defaults;
        v139 = v76;
        swift_unknownObjectRetain();
        if (v77 != -1)
          swift_once(&one-time initialization token for defaults, one-time initialization function for defaults);
        v78 = (void *)static MOAngelDefaultsManager.defaults;
        if (!static MOAngelDefaultsManager.defaults)
        {
          v157 = 0u;
          v158 = 0u;
LABEL_46:
          outlined destroy of Any?((uint64_t)&v157);
          goto LABEL_47;
        }
        v79 = String._bridgeToObjectiveC()();
        v80 = objc_msgSend(v78, "objectForKey:", v79);

        if (v80)
        {
          _bridgeAnyObjectToAny(_:)(v156, v80);
          swift_unknownObjectRelease(v80);
        }
        else
        {
          memset(v156, 0, sizeof(v156));
        }
        v1 = v144;
        outlined init with take of Any?((uint64_t)v156, (uint64_t)&v157);
        if (!*((_QWORD *)&v158 + 1))
          goto LABEL_46;
        if ((swift_dynamicCast(v156, &v157, v137, &type metadata for Bool, 6) & 1) == 0 || (v156[0] & 1) == 0)
          goto LABEL_47;
        v81 = objc_msgSend(v139, "_poiCategory");
        if (v81)
        {
          v82 = v81;
          v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v135);
          v134 = v82;
          v83 = v82;
          v85 = v84;
          v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
          if (v133 == v87 && v85 == v86)
          {

            swift_bridgeObjectRelease_n(v85, 2);
LABEL_47:
            swift_unknownObjectRelease(v139);
LABEL_48:
            v64 = v151;
LABEL_49:
            swift_unknownObjectRelease(v64);
            goto LABEL_50;
          }
          v132 = v86;
          LODWORD(v133) = _stringCompareWithSmolCheck(_:_:expecting:)(v133, v85, v87, v86, 0);

          swift_bridgeObjectRelease(v85);
          swift_bridgeObjectRelease(v132);
          if ((v133 & 1) != 0)
            goto LABEL_47;
        }
        v88 = (void *)objc_opt_self(MKIconManager);
        v134 = objc_msgSend(v139, "_styleAttributes");
        v132 = (id)objc_opt_self(UIScreen);
        v89 = objc_msgSend(v132, "mainScreen");
        objc_msgSend(v89, "scale");
        v27 = v90;

        v91 = v134;
        v133 = (uint64_t)objc_msgSend(v88, "newFillColorForStyleAttributes:forScale:", v134, v27);

        v92 = v88;
        if (v133)
        {
          v134 = v92;
          v93 = objc_msgSend(v139, "_styleAttributes");
          v94 = objc_msgSend(v132, "mainScreen");
          objc_msgSend(v94, "scale");
          v27 = v95;

          v96 = objc_msgSend(v134, "imageForStyle:size:forScale:format:", v93, 3, 0, v27);
          if (v96)
          {

            v97 = *v149;
            v98 = *((_QWORD *)v149 + 1);
            v134 = (id)*((_QWORD *)v19 + 2);
            v99 = *((_QWORD *)v19 + 5);
            v142 = *((_QWORD *)v19 + 4);
            v100 = (int *)v154;
            v101 = v136;
            v133 = (uint64_t)v136 + *(int *)(v154 + 32);
            swift_unknownObjectRetain();
            v102 = swift_bridgeObjectRetain(v99);
            UUID.init()(v102);
            *(double *)v101 = v97;
            v101[1] = v98;
            v101[2] = v134;
            v103 = v142;
            v101[3] = 1;
            v101[4] = v103;
            v101[5] = v99;
            *(_QWORD *)((char *)v101 + v100[9]) = v139;
            *(_QWORD *)((char *)v101 + v100[10]) = 0;
            v104 = (_QWORD *)((char *)v101 + v100[11]);
            *v104 = 0;
            v104[1] = 0xE000000000000000;
            *((_BYTE *)v101 + v100[12]) = 0;
            *((_BYTE *)v101 + v100[13]) = 1;
            *(_QWORD *)((char *)v101 + v100[14]) = 0;
            if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
              v24 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v24 + 2) + 1, 1, (unint64_t)v24, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
            v27 = 7.0;
            v106 = *((_QWORD *)v24 + 2);
            v105 = *((_QWORD *)v24 + 3);
            v1 = v144;
            if (v106 >= v105 >> 1)
              v24 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v105 > 1, v106 + 1, 1, (unint64_t)v24, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
            *((_QWORD *)v24 + 2) = v106 + 1;
            outlined init with take of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v136, (uint64_t)&v24[v145 + v106 * v152]);
            swift_unknownObjectRelease(v139);
            outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v149);
            if (v62 != 0.0)
              v62 = v62 + (v62 - v75) / 7.0;
            if (v61 != 0.0)
              v61 = v61 + (v61 - v74) / 7.0;
            v142 = 1;
            goto LABEL_57;
          }
        }
        swift_unknownObjectRelease(v139);
        swift_unknownObjectRelease(v151);
        v1 = v144;
LABEL_50:
        if (v62 == 0.0)
          v62 = v75;
        else
          v62 = (v62 + v75) * 0.5;
        if (v61 == 0.0)
          v61 = v74;
        else
          v61 = (v61 + v74) * 0.5;
        v65 = v149;
        v151 = *(_QWORD *)((char *)v149 + v22);
        swift_unknownObjectRetain();
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v65);
        if (__OFADD__(v150++, 1))
          goto LABEL_122;
LABEL_57:
        v11 += 16;
        --v60;
      }
      while (v60);
      swift_bridgeObjectRelease(v56);
      v107 = v150;
      if (v150 <= 0)
      {
        swift_bridgeObjectRelease(v56);
        v49 = v143;
        v11 = v140;
      }
      else
      {
        v27 = *((double *)v19 + 2);
        v108 = *((_QWORD *)v19 + 5);
        v142 = *((_QWORD *)v19 + 4);
        v109 = v56[2];
        v110 = v151;
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain(v108);
        v111 = swift_bridgeObjectRelease(v56);
        v112 = v107 != v109;
        v113 = (int *)v154;
        v114 = v141;
        UUID.init()(v111);
        *(double *)v114 = v62;
        *(double *)(v114 + 8) = v61;
        *(double *)(v114 + 16) = v27;
        v115 = v142;
        *(_QWORD *)(v114 + 24) = v107;
        *(_QWORD *)(v114 + 32) = v115;
        *(_QWORD *)(v114 + 40) = v108;
        *(_QWORD *)(v114 + v113[9]) = v110;
        *(_QWORD *)(v114 + v113[10]) = 0;
        v116 = (_QWORD *)(v114 + v113[11]);
        *v116 = 0;
        v116[1] = 0xE000000000000000;
        *(_BYTE *)(v114 + v113[12]) = 0;
        *(_BYTE *)(v114 + v113[13]) = v112;
        *(_QWORD *)(v114 + v113[14]) = 0;
        if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
          v24 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v24 + 2) + 1, 1, (unint64_t)v24, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
        v118 = *((_QWORD *)v24 + 2);
        v117 = *((_QWORD *)v24 + 3);
        v49 = v143;
        v11 = v140;
        if (v118 >= v117 >> 1)
          v24 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v117 > 1, v118 + 1, 1, (unint64_t)v24, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
        *((_QWORD *)v24 + 2) = v118 + 1;
        outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v141, (uint64_t)&v24[v145 + v118 * v152]);
      }
      v63 = v151;
LABEL_102:
      v119 = *((_QWORD *)v19 + 4);
      v120 = (void *)*((_QWORD *)v19 + 5);
      swift_bridgeObjectRetain(v120);
      v121._countAndFlagsBits = v119;
      v121._object = v120;
      String.append(_:)(v121);
      swift_bridgeObjectRelease(v120);
      swift_unknownObjectRelease(v63);
      v22 = v148;
      v50 = v147;
      v1 = v144;
LABEL_34:
      ++v16;
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v19);
      if (v16 == v22)
      {
        swift_release(v11);
        goto LABEL_108;
      }
    }
  }
  swift_release(v157);
  v24 = (char *)_swiftEmptyArrayStorage;
LABEL_108:
  v35 = &one-time initialization token for shared;
LABEL_109:
  v122 = *(_QWORD *)(v1 + v35[267]);
  v123 = *(_QWORD *)(v122 + 16);
  if (v123)
  {
    v124 = (*(unsigned __int8 *)(v155 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80);
    v125 = v122 + v124;
    v126 = *(_QWORD *)(v155 + 72);
    swift_bridgeObjectRetain(v122);
    do
    {
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v125, (uint64_t)v6);
      v157 = v160;
      v127 = *((_QWORD *)v6 + 5);
      *(_QWORD *)&v156[0] = *((_QWORD *)v6 + 4);
      *((_QWORD *)&v156[0] + 1) = v127;
      v128 = lazy protocol witness table accessor for type String and conformance String();
      if ((StringProtocol.contains<A>(_:)(v156, &type metadata for String, &type metadata for String, v128, v128) & 1) == 0)
      {
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v6, v153);
        if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
          v24 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v24 + 2) + 1, 1, (unint64_t)v24, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
        v130 = *((_QWORD *)v24 + 2);
        v129 = *((_QWORD *)v24 + 3);
        if (v130 >= v129 >> 1)
          v24 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v129 > 1, v130 + 1, 1, (unint64_t)v24, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
        *((_QWORD *)v24 + 2) = v130 + 1;
        outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v153, (uint64_t)&v24[v124 + v130 * v126]);
      }
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v6);
      v125 += v126;
      --v123;
    }
    while (v123);
    swift_bridgeObjectRelease(v122);
  }
  swift_bridgeObjectRelease(*((_QWORD *)&v160 + 1));
  return v24;
}

uint64_t specialized FixedWidthInteger.init(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, a2);
      v7 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3)
        goto LABEL_50;
      if (v3 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_34;
      v7 = (BYTE1(result) - 48);
      v14 = v3 - 2;
      if (v14)
      {
        v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          v16 = *v15 - 48;
          if (v16 > 9)
            goto LABEL_34;
          v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v17 + v16;
          if (__OFADD__(v17, v16))
            goto LABEL_34;
          v9 = 0;
          ++v15;
          if (!--v14)
            goto LABEL_37;
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            v7 = -(uint64_t)(BYTE1(result) - 48);
            v10 = v3 - 2;
            if (v10)
            {
              v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                v12 = *v11 - 48;
                if (v12 > 9)
                  goto LABEL_34;
                v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  goto LABEL_34;
                v7 = v13 - v12;
                if (__OFSUB__(v13, v12))
                  goto LABEL_34;
                v9 = 0;
                ++v11;
                if (!--v10)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          v7 = 0;
          v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u)
        goto LABEL_34;
      v7 = (result - 48);
      v18 = v3 - 1;
      if (v18)
      {
        v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          v20 = *v19 - 48;
          if (v20 > 9)
            goto LABEL_34;
          v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v21 + v20;
          if (__OFADD__(v21, v20))
            goto LABEL_34;
          v9 = 0;
          ++v19;
          if (!--v18)
            goto LABEL_37;
        }
      }
    }
LABEL_36:
    v9 = 0;
    goto LABEL_37;
  }
  v7 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(result, a2, 10);
  v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease(a2);
  if ((v9 & 1) != 0)
    return 0;
  else
    return v7;
}

id MOSuggestionInterstitialAlertContentViewController.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void MOSuggestionAssetMapsClusterer.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("MomentsUIService.MOSuggestionAssetMapsClusterer", 47, "init()", 6, 0);
  __break(1u);
}

id MOSuggestionAssetMapsClusterer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionAssetMapsClusterer();
  return objc_msgSendSuper2(&v2, "dealloc");
}

char *MOSuggestionAssetMapsClusterer.__allocating_init(coordinates:separationThreshold:)(uint64_t a1, double a2)
{
  uint64_t v2;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  int64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v5 = (int *)type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v6 = *((_QWORD *)v5 - 1);
  __chkstk_darwin(v5);
  v8 = (char **)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (char *)(*(uint64_t (**)(_QWORD *, double))(v2 + 240))(_swiftEmptyArrayStorage, 0.5);
  v10 = v9;
  *(double *)&v9[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_separationThreshold] = a2;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v34 = _swiftEmptyArrayStorage;
    v29 = v9;
    v12 = v9;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v13 = 0;
    v14 = v34;
    v30 = a1;
    v15 = (uint64_t *)(a1 + 40);
    do
    {
      v16 = *(v15 - 1);
      v17 = *v15;
      v31 = v13;
      v32 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v33 = v18;
      v19._countAndFlagsBits = 95;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      v20 = v32;
      v21 = v33;
      UUID.init()(v22);
      *v8 = v16;
      v8[1] = v17;
      v8[2] = 0;
      v8[3] = 1;
      v8[4] = v20;
      v8[5] = v21;
      *(_QWORD *)((char *)v8 + v5[9]) = 0;
      *(_QWORD *)((char *)v8 + v5[10]) = 0;
      v23 = (_QWORD *)((char *)v8 + v5[11]);
      *v23 = 0;
      v23[1] = 0xE000000000000000;
      *((_BYTE *)v8 + v5[12]) = 0;
      *((_BYTE *)v8 + v5[13]) = 0;
      *(_QWORD *)((char *)v8 + v5[14]) = 0;
      v34 = v14;
      v25 = v14[2];
      v24 = v14[3];
      if (v25 >= v24 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
        v14 = v34;
      }
      ++v13;
      v14[2] = v25 + 1;
      outlined init with take of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v8, (uint64_t)v14+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v25);
      v15 += 2;
    }
    while (v11 != v13);
    swift_bridgeObjectRelease(v30);
    v10 = v29;
  }
  else
  {
    v26 = v9;
    swift_bridgeObjectRelease(a1);
    v14 = _swiftEmptyArrayStorage;
  }
  v27 = *(_QWORD *)&v10[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_inputClusters];
  *(_QWORD *)&v10[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_inputClusters] = v14;

  swift_bridgeObjectRelease(v27);
  return v10;
}

__C::CLLocationCoordinate2D __swiftcall CLLocationCoordinate2D.comparable()()
{
  double v0;
  Swift::Double v1;
  double v2;
  double v4;
  __C::CLLocationCoordinate2D result;

  v2 = v0;
  if (v1 < 0.0 && (*(_QWORD *)&v1 & 0x7FF0000000000000) != 0x7FF0000000000000)
    v1 = remainder(v1, 360.0) + 360.0;
  v4 = v2;
  result.longitude = v1;
  result.latitude = v4;
  return result;
}

char *specialized Array.init(repeating:count:)(unint64_t a1, double a2)
{
  char *result;
  double *v4;
  unint64_t v5;
  double v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = (char *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  if (!a1)
    return (char *)&_swiftEmptyArrayStorage;
  result = (char *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, &type metadata for Double);
  *((_QWORD *)result + 2) = a1;
  v4 = (double *)(result + 32);
  if (a1 < 4)
  {
    v5 = 0;
    v6 = a2;
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  v6 = a2;
  v7 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  v8 = (int64x2_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

_QWORD *specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  if (a2 < 0)
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Double]);
      v5 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a2, v4);
      v6 = v5;
      v5[2] = a2;
      v5[4] = a1;
      if (a2 != 1)
      {
        v5[5] = a1;
        v7 = a2 - 2;
        if (v7)
        {
          v8 = v5 + 6;
          do
          {
            *v8++ = a1;
            swift_bridgeObjectRetain(a1);
            --v7;
          }
          while (v7);
        }
        swift_bridgeObjectRetain(a1);
      }
    }
    else
    {
      swift_bridgeObjectRelease(a1);
      return _swiftEmptyArrayStorage;
    }
    return v6;
  }
  return result;
}

void *specialized Array.init(repeating:count:)(int a1, size_t a2)
{
  uint64_t v4;
  void *result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (!a2)
      return &_swiftEmptyArrayStorage;
    v4 = static Array._allocateBufferUninitialized(minimumCapacity:)(a2, &type metadata for UInt8);
    *(_QWORD *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1, a2);
    return (void *)v4;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v4 = type metadata accessor for MOSuggestionSheetAssetViewModel(0);
      v5 = static Array._allocateBufferUninitialized(minimumCapacity:)(a2, v4);
      v6 = v5 & 0xFFFFFFFFFFFFFF8;
      *(_QWORD *)(v6 + 16) = a2;
      v10 = (_QWORD *)v5;
      *(_QWORD *)(v6 + 32) = a1;
      if (a2 != 1)
      {
        *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x28) = a1;
        v7 = a2 - 2;
        if (v7)
        {
          v8 = (_QWORD *)(v6 + 48);
          do
          {
            *v8++ = a1;
            swift_retain(a1);
            --v7;
          }
          while (v7);
        }
        swift_retain(a1);
      }
    }
    else
    {
      v10 = _swiftEmptyArrayStorage;
      swift_release(a1);
    }
    specialized Array._endMutation()(v5);
    return (uint64_t)v10;
  }
  return result;
}

BOOL specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v4 = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), a1);
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

Swift::Bool __swiftcall MOSuggestionAssetMapsClusterer.isInLowerHalf(distanceMatrix:pair:)(Swift::OpaquePointer *distanceMatrix, Swift::tuple_Int_Int pair)
{
  Swift::Int v2;
  BOOL v3;
  Swift::Bool v4;

  v2 = *((_QWORD *)distanceMatrix->_rawValue + 2);
  v3 = (unint64_t)v2 > 1;
  if (pair._0 < 0)
    v3 = 0;
  if (pair._1 < 0)
    v3 = 0;
  if (v2 <= pair._0)
    v3 = 0;
  v4 = v2 > pair._1 && v3;
  if (pair._0 <= 0)
    v4 = 0;
  return pair._1 < pair._0 && v4;
}

Swift::Void __swiftcall MOSuggestionAssetMapsClusterer.printDendogram()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _BYTE v6[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_results);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_results, v6, 0, 0);
  v2 = *v1;
  swift_bridgeObjectRetain_n(v2, 2);
  v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  swift_bridgeObjectRelease(v2);
  v5 = v3;
  specialized MutableCollection<>.sort(by:)(&v5, specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_bridgeObjectRelease(v2);
  v4 = (uint64_t)v5;
  specialized MOSuggestionAssetMapsClusterer.printClusters(_:)((uint64_t)v5);
  swift_release(v4);
}

__C::CLLocationCoordinate2D __swiftcall CLLocationCoordinate2D.normalized()()
{
  int8x16_t v0;
  uint64_t v1;
  int8x16_t v2;
  double v3;
  float64x2_t v4;
  double v5;
  double v6;
  __C::CLLocationCoordinate2D result;

  v2.i64[0] = v1;
  v3 = *(double *)v0.i64;
  v0.i64[0] = 0x4076800000000000;
  v4.f64[0] = NAN;
  v4.f64[1] = NAN;
  v5 = remainder(*(long double *)v2.i64, *(long double *)vbslq_s8((int8x16_t)vnegq_f64(v4), v0, v2).i64);
  v6 = v3;
  result.longitude = v5;
  result.latitude = v6;
  return result;
}

uint64_t static FloatingPoint.* infix(_:_:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedConformanceWitness;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v20 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8);
  v7 = *(_QWORD *)(v6 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v7, a3, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v9 = ((uint64_t (*)(void))__chkstk_darwin)();
  v11 = (char *)&v19 - v10;
  v12 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v9);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, a3, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  if ((a1 & 1) != 0)
  {
    v16 = &unk_10019ED88;
    v17 = 257;
  }
  else
  {
    v16 = &unk_10019ED90;
    v17 = 512;
  }
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(v16, v17, AssociatedTypeWitness, AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v11, a3, v7);
  dispatch thunk of static Numeric.* infix(_:_:)(v14, v20, a3, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a3);
}

uint64_t specialized MutableCollection<>.sort(by:)(_QWORD *a1, uint64_t (*a2)(_QWORD *))
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  v4 = *(_QWORD *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0) - 8);
  v5 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v5 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v5);
  v6 = v5[2];
  v8[0] = (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v8[1] = v6;
  result = a2(v8);
  *a1 = v5;
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<MOMusicPlaybackCoordinatorDelegate>);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MOAssetAndMediaType, Int)>);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOProtectedAppSource>);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(presentationDetails: MOClientPresentationDetails, handler: (_:_:))>);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(MOSuggestionAssetReference, Int)>, (uint64_t *)&demangling cache variable for type metadata for (MOSuggestionAssetReference, Int));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MOSuggestionCollectionViewCellViewModel]>, (uint64_t *)&demangling cache variable for type metadata for [MOSuggestionCollectionViewCellViewModel]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(MOSuggestionAsset, Int)>, (uint64_t *)&demangling cache variable for type metadata for (MOSuggestionAsset, Int));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MOSuggestionAssetMetadataKey : Any?]>, &demangling cache variable for type metadata for [MOSuggestionAssetMetadataKey : Any?]);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionSheetAssetDateRange>, type metadata accessor for MOSuggestionSheetAssetDateRange);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetPhotoLivePhotoVideosProvider.LivePhotoTask>, type metadata accessor for MOSuggestionAssetPhotoLivePhotoVideosProvider.LivePhotoTask);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<URL>, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetPhotoMomentMetadata>, type metadata accessor for MOSuggestionAssetPhotoMomentMetadata);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PropertyDescriptor>, type metadata accessor for PropertyDescriptor);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Date>, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = _swift_stdlib_malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(a6(0) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (unint64_t)v18 + v22;
  if ((a1 & 1) != 0)
  {
    v24 = a4 + v22;
    if ((unint64_t)v18 < a4 || v23 >= v24 + *(_QWORD *)(v21 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v22, v24);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v22, v24);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v23, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

double *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  double *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v11 = (double *)swift_allocObject(v10, v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * v12 - 64;
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (double *)((char *)a4 + v8 + 32))
          memmove(v13, a4 + 4, v8);
        a4[2] = 0.0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  double *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      v11 = (double *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0.0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  double *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMediaAlbumArtProvider.QueuableRequest>);
      v11 = (double *)swift_allocObject(v10, 112 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 112);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[14 * v8 + 4])
          memmove(v13, a4 + 4, 112 * v8);
        a4[2] = 0.0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  double *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetCacheManager.MOSuggestionAssetCompletionResultHolder>);
      v11 = (double *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0.0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  double *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
      v11 = (double *)swift_allocObject(v10, v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * v12 - 64;
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (double *)((char *)a4 + v8 + 32))
          memmove(v13, a4 + 4, v8);
        a4[2] = 0.0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  double *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt>);
      v11 = (double *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0.0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
      v15 = _swift_stdlib_malloc_size(v14);
      v16 = v15 - 32;
      if (v15 < 32)
        v16 = v15 - 25;
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 3);
      v17 = v14 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[v11 + 4])
          memmove(v17, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 16 * v12 + 32, 7);
      v15 = _swift_stdlib_malloc_size(v14);
      v16 = v15 - 32;
      if (v15 < 32)
        v16 = v15 - 17;
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 4);
      v17 = v14 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[2 * v11 + 4])
          memmove(v17, a4 + 4, 16 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(MOSuggestionAssetReference, Int)>, (uint64_t *)&demangling cache variable for type metadata for (MOSuggestionAssetReference, Int));
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MOAssetAndMediaType, Int)>);
    v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 32 * v8)
      memmove(v11 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 32 * v8 || v14 >= v15 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MOAssetAndMediaType, Int));
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionSheetAssetDateRange>, type metadata accessor for MOSuggestionSheetAssetDateRange);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetsType>);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8)
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    type metadata accessor for MOSuggestionAssetsType(0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CLLocationCoordinate2D>);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    memcpy(v14, v15, 16 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MOSuggestionAssetVisualSubType, Int)>);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    memcpy(v14, v15, 16 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
    v11 = (double *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (char *)(v11 + 4);
  v15 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    if (v11 != (double *)a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    memcpy(v14, v15, 32 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetCacheManager.MOSuggestionAssetCompletionResultHolder>);
    v11 = (double *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (char *)(v11 + 4);
  v15 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    if (v11 != (double *)a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = _swift_stdlib_malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(a6(0) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v23, v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v25 = *(_QWORD *)(v21 + 72) * v11;
  v26 = &v23[v25];
  v27 = (unint64_t)&v24[v25];
  if (v24 >= v26 || (unint64_t)v23 >= v27)
  {
    swift_arrayInitWithCopy(v23);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 16 * v12 + 32, 7);
    v15 = _swift_stdlib_malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 17;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 4);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v17 = (unint64_t)(v14 + 4);
  v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 16 * v11)
      memmove(v14 + 4, a4 + 4, 16 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v18 >= v17 + 16 * v11 || v17 >= v18 + 16 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD v26[9];

  v5 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v2;
  v9 = *v2;
  Hasher.init(_seed:)(v26, *(_QWORD *)(*v2 + 40));
  v10 = a2 + *(int *)(v5 + 32);
  v11 = type metadata accessor for UUID(0);
  v12 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v9);
  dispatch thunk of Hashable.hash(into:)(v26, v11, v12);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v9 + 32);
  v15 = v13 & ~v14;
  if (((*(_QWORD *)(v9 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v23 = a2;
    v24 = a1;
    v16 = ~v14;
    v17 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(*(_QWORD *)(v9 + 48) + v17 * v15, (uint64_t)v8);
      v18 = static UUID.== infix(_:_:)(&v8[*(int *)(v5 + 32)], v10);
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v8);
      if ((v18 & 1) != 0)
        break;
      v15 = (v15 + 1) & v16;
      if (((*(_QWORD *)(v9 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      {
        swift_bridgeObjectRelease(v9);
        a2 = v23;
        a1 = v24;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v9);
    outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v23);
    outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(*(_QWORD *)(*v25 + 48) + v17 * v15, v24);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v9);
LABEL_7:
    v19 = v25;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v25);
    outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(a2, (uint64_t)v8);
    v26[0] = *v19;
    *v19 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native);
    v21 = *v19;
    *v19 = v26[0];
    swift_bridgeObjectRelease(v21);
    outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(a2, a1);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(unsigned __int8 *a1, unsigned __int8 a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  _QWORD v14[9];

  v5 = *v2;
  Hasher.init(_seed:)(v14, *(_QWORD *)(*v2 + 40));
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v14[0] = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    v13 = *v2;
    *v2 = v14[0];
    swift_bridgeObjectRelease(v13);
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  result = 0;
  a2 = *(_BYTE *)(*(_QWORD *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(v24, a2, a3);
  swift_bridgeObjectRelease(a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  _QWORD v14[9];

  v5 = *v2;
  Hasher.init(_seed:)(v14, *(_QWORD *)(*v2 + 40));
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v14[0] = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    v13 = *v2;
    *v2 = v14[0];
    swift_bridgeObjectRelease(v13);
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(_QWORD *)(v9 + 8 * v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v9 + 8 * v8) != a2);
  }
  result = 0;
  a2 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), a2);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v15 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    v14 = *v3;
    *v3 = v15;
    swift_bridgeObjectRelease(v14);
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2)
{
  return specialized Set._Variant.insert(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<MOEventBundleSourceType>, (uint64_t (*)(_QWORD, __n128))type metadata accessor for MOEventBundleSourceType);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetsType>, (uint64_t (*)(_QWORD, __n128))type metadata accessor for MOSuggestionAssetsType);
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2, uint64_t *a3, uint64_t (*a4)(_QWORD, __n128))
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  char isUniquelyReferenced_nonNull_native;
  id v33;
  uint64_t v34;
  void *v36;
  id v37;
  _QWORD v40[9];

  v5 = v4;
  v8 = *v4;
  v9 = *(_QWORD *)(*v4 + 40);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v12 = v11;
  Hasher.init(_seed:)(v40, v9);
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(v40, v10, v12);
  v13 = Hasher._finalize()();
  swift_bridgeObjectRelease(v12);
  v14 = -1 << *(_BYTE *)(v8 + 32);
  v15 = v13 & ~v14;
  if (((*(_QWORD *)(v8 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease(v8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
    v40[0] = *v5;
    *v5 = 0x8000000000000000;
    v33 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v33, v15, isUniquelyReferenced_nonNull_native, a3, a4);
    v34 = *v5;
    *v5 = v40[0];
    swift_bridgeObjectRelease(v34);
    *a1 = v33;
    return 1;
  }
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15));
  v18 = v17;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v16 == v19 && v18 == v20)
  {
LABEL_16:
    swift_bridgeObjectRelease_n(v18, 2);
  }
  else
  {
    v22 = v20;
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v19, v20, 0);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v22);
    if ((v23 & 1) == 0)
    {
      v24 = ~v14;
      do
      {
        v15 = (v15 + 1) & v24;
        if (((*(_QWORD *)(v8 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          goto LABEL_15;
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15));
        v18 = v26;
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
        if (v25 == v27 && v18 == v28)
          goto LABEL_16;
        v30 = v28;
        v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v18, v27, v28, 0);
        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(v30);
      }
      while ((v31 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease(v8);
  v36 = *(void **)(*(_QWORD *)(*v5 + 48) + 8 * v15);
  *a1 = v36;
  v37 = v36;
  return 0;
}

void specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[9];

  v2 = v1;
  v4 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetMapsClusterer.Cluster>);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v36 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v34 = v2;
  v35 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  swift_retain(v7);
  v15 = 0;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_26;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return;
    }
    if (v19 >= v35)
      goto LABEL_35;
    v20 = v36[v19];
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v35)
        goto LABEL_35;
      v20 = v36[v15];
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v35)
          goto LABEL_35;
        v20 = v36[v15];
        if (!v20)
          break;
      }
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_26:
    v22 = *(_QWORD *)(v37 + 72);
    outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(*(_QWORD *)(v7 + 48) + v22 * v18, (uint64_t)v6);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    v23 = type metadata accessor for UUID(0);
    v24 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v39, v23, v24);
    v25 = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v9 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v14 + 8 * v28);
      }
      while (v32 == -1);
      v16 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v14 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    outlined init with take of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v6, *(_QWORD *)(v9 + 48) + v16 * v22);
    ++*(_QWORD *)(v9 + 16);
  }
  v21 = v19 + 3;
  if (v21 < v35)
  {
    v20 = v36[v21];
    if (!v20)
    {
      while (1)
      {
        v15 = v21 + 1;
        if (__OFADD__(v21, 1))
          goto LABEL_41;
        if (v15 >= v35)
          goto LABEL_35;
        v20 = v36[v15];
        ++v21;
        if (v20)
          goto LABEL_25;
      }
    }
    v15 = v21;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v34;
  v33 = 1 << *(_BYTE *)(v7 + 32);
  if (v33 > 63)
    bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v36 = -1 << v33;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  swift_release(v7);
  *v2 = v9;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetVisualSubType>);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = v5 + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                v29 = 1 << *(_BYTE *)(v3 + 32);
                if (v29 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                v2 = v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v16);
      Hasher.init(_seed:)(v31, *(_QWORD *)(v6 + 40));
      Hasher._combine(_:)(v20);
      v21 = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = v21 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v21, v22);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MOProtectedAppSource>);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      swift_bridgeObjectRetain(v22);
      String.hash(into:)(v34, v21, v22);
      swift_bridgeObjectRelease(v22);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetMediaItemType>);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = v5 + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                v29 = 1 << *(_BYTE *)(v3 + 32);
                if (v29 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                v2 = v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v31, *(_QWORD *)(v6 + 40));
      Hasher._combine(_:)(v20);
      v21 = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = v21 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 0;
    v8 = (uint64_t *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    v29 = -1 << v9;
    v30 = v2;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v31 = 1 << *(_BYTE *)(v3 + 32);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = v5 + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v31 >= 64)
                  bzero((void *)(v3 + 56), 8 * v12);
                else
                  *v8 = v29;
                v2 = v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      v21 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = v21 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  _QWORD v36[9];

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v33 = v3;
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v35 = (_QWORD *)(v4 + 56);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v4 + 56);
    v34 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 56;
    swift_retain(v4);
    v12 = 0;
    while (1)
    {
      if (v10)
      {
        v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v16 >= v34)
          goto LABEL_36;
        v17 = v35[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v34)
            goto LABEL_36;
          v17 = v35[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v34)
              goto LABEL_36;
            v17 = v35[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v34)
              {
LABEL_36:
                swift_release(v4);
                v3 = v33;
                v32 = 1 << *(_BYTE *)(v4 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v17 = v35[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_42;
                  if (v12 >= v34)
                    goto LABEL_36;
                  v17 = v35[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_26;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_26:
        v10 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15);
      v20 = *(_QWORD *)(v7 + 40);
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v23 = v22;
      Hasher.init(_seed:)(v36, v20);
      String.hash(into:)(v36, v21, v23);
      v24 = Hasher._finalize()();
      swift_bridgeObjectRelease(v23);
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = v24 & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  swift_release(v4);
  *v3 = v7;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD v33[9];

  v7 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v31 = v3;
  v32 = a1;
  if (v12 > v11 && (a3 & 1) != 0)
  {
LABEL_13:
    v14 = v8;
    goto LABEL_14;
  }
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v13);
    goto LABEL_8;
  }
  if (v12 <= v11)
  {
    specialized _NativeSet.copyAndResize(capacity:)(v13);
LABEL_8:
    v15 = *v3;
    Hasher.init(_seed:)(v33, *(_QWORD *)(*v3 + 40));
    v16 = a1 + *(int *)(v7 + 32);
    v17 = type metadata accessor for UUID(0);
    v18 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v33, v17, v18);
    v19 = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v15 + 32);
    a2 = v19 & ~v20;
    if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v21 = ~v20;
      v14 = v8;
      v22 = *(_QWORD *)(v8 + 72);
      while (1)
      {
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(*(_QWORD *)(v15 + 48) + v22 * a2, (uint64_t)v10);
        v23 = static UUID.== infix(_:_:)(&v10[*(int *)(v7 + 32)], v16);
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v10);
        if ((v23 & 1) != 0)
          goto LABEL_17;
        a2 = (a2 + 1) & v21;
        if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          goto LABEL_14;
      }
    }
    goto LABEL_13;
  }
  v14 = v8;
  specialized _NativeSet.copy()();
LABEL_14:
  v24 = v32;
  v25 = *v31;
  *(_QWORD *)(*v31 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v24, *(_QWORD *)(v25 + 48) + *(_QWORD *)(v14 + 72) * a2);
  v27 = *(_QWORD *)(v25 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (!v28)
  {
    *(_QWORD *)(v25 + 16) = v29;
    return result;
  }
  __break(1u);
LABEL_17:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v7);
  __break(1u);
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(unsigned __int8 a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  v5 = a1;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v8);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v18, *(_QWORD *)(*v3 + 40));
  Hasher._combine(_:)(v5);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(_QWORD *)(v9 + 48);
    if (*(unsigned __int8 *)(v12 + a2) == (_DWORD)v5)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MOSuggestionAssetVisualSubType);
      __break(1u);
    }
    else
    {
      v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v12 + a2) == (_DWORD)v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v14 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v14 + 48) + a2) = v5;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v11);
  }
  else
  {
    if (v10 > v9)
    {
      specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v11);
  }
  else
  {
    if (v10 > v9)
    {
      specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v29, a1, a2);
  swift_bridgeObjectRelease(a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MOProtectedAppSource);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::UInt a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v8);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v19, *(_QWORD *)(*v3 + 40));
  Hasher._combine(_:)(a1);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v12 + 8 * a2) == a1)
    {
LABEL_13:
      type metadata accessor for MOSuggestionAssetMediaItemType(0);
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v14);
      __break(1u);
    }
    else
    {
      v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v12 + 8 * a2) == a1)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v15 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * a2) = a1;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    *(_QWORD *)(v15 + 16) = v18;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v8);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v8);
  }
  v9 = *v3;
  v10 = static Hasher._hash(seed:_:)(*(_QWORD *)(*v3 + 40), a1);
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v12 + 8 * a2) == a1)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
      __break(1u);
    }
    else
    {
      v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v12 + 8 * a2) == a1)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v14 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * a2) = a1;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, uint64_t (*a5)(_QWORD, __n128))
{
  Swift::Int v5;
  uint64_t *v7;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[9];

  v7 = (uint64_t *)v5;
  v10 = *(_QWORD *)(*(_QWORD *)v5 + 16);
  v11 = *(_QWORD *)(*(_QWORD *)v5 + 24);
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_22;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v12, a4);
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()(a4);
LABEL_22:
      v35 = *v7;
      *(_QWORD *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(_QWORD *)(*(_QWORD *)(v35 + 48) + 8 * a2) = a1;
      v36 = *(_QWORD *)(v35 + 16);
      v37 = __OFADD__(v36, 1);
      v38 = v36 + 1;
      if (!v37)
      {
        *(_QWORD *)(v35 + 16) = v38;
        return;
      }
      __break(1u);
      goto LABEL_25;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v12, a4);
  }
  v13 = *(_QWORD *)v5;
  v14 = *(_QWORD *)(*(_QWORD *)v5 + 40);
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v17 = v16;
  Hasher.init(_seed:)(v40, v14);
  String.hash(into:)(v40, v15, v17);
  v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v17);
  v18 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v5 & ~v18;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_22;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2));
  v5 = v20;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v19 == v21 && v5 == v22)
  {
LABEL_25:
    swift_bridgeObjectRelease_n(v5, 2);
    goto LABEL_26;
  }
  v24 = v22;
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v5, v21, v22, 0);
  swift_bridgeObjectRelease(v5);
  v26 = swift_bridgeObjectRelease(v24);
  if ((v25 & 1) == 0)
  {
    v27 = ~v18;
    do
    {
      a2 = (a2 + 1) & v27;
      if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_22;
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2));
      v5 = v29;
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      if (v28 == v30 && v5 == v31)
        goto LABEL_25;
      v33 = v31;
      v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v5, v30, v31, 0);
      swift_bridgeObjectRelease(v5);
      v26 = swift_bridgeObjectRelease(v33);
    }
    while ((v34 & 1) == 0);
  }
LABEL_26:
  v39 = a5(0, v26);
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v39);
  __break(1u);
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetMapsClusterer.Cluster>);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v6);
    *v1 = v8;
    return result;
  }
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(*(_QWORD *)(v6 + 48) + v20, (uint64_t)v5);
    result = (void *)outlined init with take of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v5, *(_QWORD *)(v8 + 48) + v20);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
    goto LABEL_28;
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetVisualSubType>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MOProtectedAppSource>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetMediaItemType>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 56 + 8 * v8)
    memmove(v6, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v14)
      goto LABEL_28;
    v21 = *(_QWORD *)(v7 + 8 * v20);
    ++v10;
    if (!v21)
    {
      v10 = v20 + 1;
      if (v20 + 1 >= v14)
        goto LABEL_28;
      v21 = *(_QWORD *)(v7 + 8 * v10);
      if (!v21)
      {
        v10 = v20 + 2;
        if (v20 + 2 >= v14)
          goto LABEL_28;
        v21 = *(_QWORD *)(v7 + 8 * v10);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v13 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    v19 = v18;
  }
  v22 = v20 + 3;
  if (v22 >= v14)
    goto LABEL_28;
  v21 = *(_QWORD *)(v7 + 8 * v22);
  if (v21)
  {
    v10 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v21 = *(_QWORD *)(v7 + 8 * v10);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[9];

  v2 = v1;
  v4 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetMapsClusterer.Cluster>);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 0);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    swift_release(v7);
LABEL_37:
    *v2 = v9;
    return;
  }
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v34 = v2;
  v35 = v7 + 56;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v36 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  v15 = swift_retain(v7);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v20 >= v36)
      goto LABEL_35;
    v21 = *(_QWORD *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v36)
        goto LABEL_35;
      v21 = *(_QWORD *)(v35 + 8 * v16);
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v36)
          goto LABEL_35;
        v21 = *(_QWORD *)(v35 + 8 * v16);
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = *(_QWORD *)(v37 + 72);
    outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(*(_QWORD *)(v7 + 48) + v23 * v19, (uint64_t)v6);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    v24 = type metadata accessor for UUID(0);
    v25 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v39, v24, v25);
    v26 = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v9 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v14 + 8 * v29);
      }
      while (v33 == -1);
      v17 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    outlined init with take of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v6, *(_QWORD *)(v9 + 48) + v17 * v23);
    ++*(_QWORD *)(v9 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_35:
    swift_release_n(v7, 2, v15);
    v2 = v34;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v35 + 8 * v22);
  if (v21)
  {
    v16 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v16 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v16 >= v36)
      goto LABEL_35;
    v21 = *(_QWORD *)(v35 + 8 * v16);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetVisualSubType>);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v29 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v5 + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v16);
    Hasher.init(_seed:)(v30, *(_QWORD *)(v6 + 40));
    Hasher._combine(_:)(v20);
    v21 = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v13 + 8 * v24);
      }
      while (v28 == -1);
      v14 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    swift_release(v3);
    v2 = v29;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v32 = v2;
  v33 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  v12 = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v33)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v33)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v33)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v34, v22, v23);
    v24 = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v6 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v33)
  {
LABEL_36:
    swift_release_n(v3, 2, v12);
    v2 = v32;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v33)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MOProtectedAppSource>);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v32 = v2;
  v33 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  v12 = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v33)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v33)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v33)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain_n(v23, 2);
    String.hash(into:)(v34, v22, v23);
    swift_bridgeObjectRelease(v23);
    v24 = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v6 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v33)
  {
LABEL_36:
    swift_release_n(v3, 2, v12);
    v2 = v32;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v33)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetMediaItemType>);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v29 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v5 + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v30, *(_QWORD *)(v6 + 40));
    Hasher._combine(_:)(v20);
    v21 = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v13 + 8 * v24);
      }
      while (v28 == -1);
      v14 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    swift_release(v3);
    v2 = v29;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v29 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v5 + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    v21 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v13 + 8 * v24);
      }
      while (v28 == -1);
      v14 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    swift_release(v3);
    v2 = v29;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  _QWORD v37[9];

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0);
  v7 = v6;
  if (!*(_QWORD *)(v4 + 16))
  {
    swift_release(v4);
LABEL_38:
    *v3 = v7;
    return;
  }
  v8 = 1 << *(_BYTE *)(v4 + 32);
  v34 = v3;
  v35 = v4 + 56;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v4 + 56);
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 56;
  v12 = swift_retain(v4);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_27;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v36)
      goto LABEL_36;
    v18 = *(_QWORD *)(v35 + 8 * v17);
    ++v13;
    if (!v18)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v36)
        goto LABEL_36;
      v18 = *(_QWORD *)(v35 + 8 * v13);
      if (!v18)
      {
        v13 = v17 + 2;
        if (v17 + 2 >= v36)
          goto LABEL_36;
        v18 = *(_QWORD *)(v35 + 8 * v13);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_27:
    v20 = *(void **)(*(_QWORD *)(v4 + 48) + 8 * v16);
    v21 = *(_QWORD *)(v7 + 40);
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v24 = v23;
    Hasher.init(_seed:)(v37, v21);
    v25 = v20;
    String.hash(into:)(v37, v22, v24);
    v26 = Hasher._finalize()();
    v12 = swift_bridgeObjectRelease(v24);
    v27 = -1 << *(_BYTE *)(v7 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v11 + 8 * v29);
      }
      while (v33 == -1);
      v14 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v25;
    ++*(_QWORD *)(v7 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v36)
  {
LABEL_36:
    swift_release_n(v4, v12);
    v3 = v34;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v35 + 8 * v19);
  if (v18)
  {
    v13 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v13 >= v36)
      goto LABEL_36;
    v18 = *(_QWORD *)(v35 + 8 * v13);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>, (uint64_t *)&demangling cache variable for type metadata for [Double]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MOSuggestionCollectionViewCellViewModel]>, (uint64_t *)&demangling cache variable for type metadata for [MOSuggestionCollectionViewCellViewModel]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<(MOSuggestionAsset, Int)>, (uint64_t *)&demangling cache variable for type metadata for (MOSuggestionAsset, Int));
}

uint64_t outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>);
  v4 = *(_QWORD *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)_swift_stdlib_malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = specialized Sequence._copySequenceContents(initializing:)(&v13, (uint64_t)v8 + v7, v1, a1);
      v12 = v13;
      swift_bridgeObjectRetain(a1);
      outlined consume of Set<String>.Iterator._Variant(v12);
      if (v11 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))specialized Array._copyContents(initializing:));
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for UIImage, UIImage_ptr);
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, &lazy cache variable for type metadata for PHAsset, PHAsset_ptr);
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return _swiftEmptyArrayStorage;
  v8 = 8 * v5;
  if (v5 <= 0)
  {
    v10 = _swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v10 = (_QWORD *)swift_allocObject(v9, v8 + 32, 7);
  v11 = _swift_stdlib_malloc_size(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 25;
  v10[2] = v5;
  v10[3] = (2 * (v12 >> 3)) | 1;
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = a2 + 8 * a3;
  if (v13 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)(v10 + 4) >= v13 + v8)
  {
    type metadata accessor for MOSuggestionCollectionViewCellViewModel();
    swift_arrayInitWithCopy(v10 + 4);
    return v10;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5, _QWORD *a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *result;

  v6 = a4 >> 1;
  v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v7)
    return _swiftEmptyArrayStorage;
  v12 = 8 * v7;
  if (v7 <= 0)
  {
    v14 = _swiftEmptyArrayStorage;
    if (v6 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v14 = (_QWORD *)swift_allocObject(v13, v12 + 32, 7);
  v15 = _swift_stdlib_malloc_size(v14);
  v16 = v15 - 32;
  if (v15 < 32)
    v16 = v15 - 25;
  v14[2] = v7;
  v14[3] = (2 * (v16 >> 3)) | 1;
  if (v6 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v7 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v17 = a2 + 8 * a3;
  if (v17 >= (unint64_t)&v14[(unint64_t)v12 / 8 + 4] || (unint64_t)(v14 + 4) >= v17 + v12)
  {
    type metadata accessor for UIApplication(0, a5, a6);
    swift_arrayInitWithCopy(v14 + 4);
    return v14;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD *, uint64_t, uint64_t);
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_10;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v4 <= 0)
    {
      v6 = _swiftEmptyArrayStorage;
    }
    else
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v6 = (_QWORD *)swift_allocObject(v5, 8 * v4 + 32, 7);
      v7 = _swift_stdlib_malloc_size(v6);
      v8 = v7 - 32;
      if (v7 < 32)
        v8 = v7 - 25;
      v6[2] = v4;
      v6[3] = (2 * (v8 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(a1);
    v9 = a2(v6 + 4, v4, a1);
    a2 = v10;
    swift_bridgeObjectRelease(v9);
    if (a2 == (uint64_t (*)(_QWORD *, uint64_t, uint64_t))v4)
      break;
    __break(1u);
LABEL_10:
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(a1);
    if (!v4)
      return _swiftEmptyArrayStorage;
  }
  return v6;
}

double *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = _swift_stdlib_malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  outlined consume of Set<String>.Iterator._Variant(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (double *)v4;
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = static String._copying(_:)(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t static String._copying(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = static String._copying(_:)(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v12, 0);
      v5 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t specialized Collection.count.getter(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  Swift::Int v46;
  uint64_t v47;
  Swift::Int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  char v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  char *v120;
  _QWORD *v121;
  char *v122;
  uint64_t v123;
  _QWORD *v124;
  Swift::Int v125;
  uint64_t v126;
  Swift::Int v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;

  v2 = v1;
  v4 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v131 = *(_QWORD *)(v4 - 8);
  v132 = v4;
  v5 = __chkstk_darwin(v4);
  v128 = (uint64_t)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v137 = (uint64_t)&v122 - v8;
  v9 = __chkstk_darwin(v7);
  v135 = (uint64_t)&v122 - v10;
  __chkstk_darwin(v9);
  v134 = (uint64_t)&v122 - v11;
  v12 = a1[1];
  result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0)
      goto LABEL_143;
    if (v12)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v12, 1, a1);
    return result;
  }
  if (v12 >= 0)
    v14 = v12;
  else
    v14 = v12 + 1;
  if (v12 < -1)
    goto LABEL_151;
  v125 = result;
  if (v12 < 2)
  {
    v18 = _swiftEmptyArrayStorage;
    v130 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80));
    if (v12 != 1)
    {
      v21 = _swiftEmptyArrayStorage[2];
      v20 = (char *)_swiftEmptyArrayStorage;
LABEL_105:
      v124 = v18;
      if (v21 >= 2)
      {
        v113 = *a1;
        do
        {
          v114 = v21 - 2;
          if (v21 < 2)
            goto LABEL_138;
          if (!v113)
            goto LABEL_150;
          v107 = v20;
          v115 = v20 + 32;
          v116 = *(_QWORD *)&v20[16 * v114 + 32];
          v117 = *(_QWORD *)&v20[16 * v21 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v113 + *(_QWORD *)(v131 + 72) * v116, v113 + *(_QWORD *)(v131 + 72) * *(_QWORD *)&v115[16 * v21 - 16], v113 + *(_QWORD *)(v131 + 72) * v117, v130);
          if (v2)
            goto LABEL_117;
          if (v117 < v116)
            goto LABEL_139;
          if ((swift_isUniquelyReferenced_nonNull_native(v107) & 1) == 0)
            v107 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v107);
          if (v114 >= *((_QWORD *)v107 + 2))
            goto LABEL_140;
          v118 = &v107[16 * v114 + 32];
          *(_QWORD *)v118 = v116;
          *((_QWORD *)v118 + 1) = v117;
          v119 = *((_QWORD *)v107 + 2);
          if (v21 > v119)
            goto LABEL_141;
          v20 = v107;
          memmove(&v107[16 * v21 + 16], &v107[16 * v21 + 32], 16 * (v119 - v21));
          *((_QWORD *)v107 + 2) = v119 - 1;
          v21 = v119 - 1;
        }
        while (v119 > 2);
      }
      v120 = v20;
LABEL_119:
      swift_bridgeObjectRelease(v120);
      v121 = v124;
      v124[2] = 0;
      return swift_bridgeObjectRelease(v121);
    }
    v124 = _swiftEmptyArrayStorage;
  }
  else
  {
    v15 = v14 >> 1;
    v16 = static Array._allocateBufferUninitialized(minimumCapacity:)(v14 >> 1, v132);
    *(_QWORD *)(v16 + 16) = v15;
    v17 = *(unsigned __int8 *)(v131 + 80);
    v124 = (_QWORD *)v16;
    v130 = v16 + ((v17 + 32) & ~v17);
  }
  v19 = 0;
  v20 = (char *)_swiftEmptyArrayStorage;
  v136 = a1;
  while (1)
  {
    v22 = v19;
    v23 = v19 + 1;
    if (v19 + 1 >= v12)
    {
      v32 = v19 + 1;
    }
    else
    {
      v24 = *a1;
      v25 = v19;
      v129 = v19;
      v26 = *(_QWORD *)(v131 + 72);
      v27 = v134;
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v24 + v26 * v23, v134);
      v28 = v24 + v26 * v25;
      v29 = v135;
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v28, v135);
      v30 = *(double *)(v27 + 16);
      v31 = *(double *)(v29 + 16);
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v29);
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v27);
      v32 = v129 + 2;
      v126 = v24;
      v138 = v26;
      if (v129 + 2 >= v12)
      {
        v37 = v26;
        v22 = v129;
        if (v31 >= v30)
          goto LABEL_40;
      }
      else
      {
        v123 = v2;
        v133 = v26 * v23;
        v33 = v24;
        v127 = v26 * v32;
        while (1)
        {
          v34 = v134;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v33 + v127, v134);
          v35 = v135;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v33 + v133, v135);
          v36 = *(double *)(v35 + 16) >= *(double *)(v34 + 16);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v35);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v34);
          if (v31 < v30 == v36)
            break;
          v37 = v138;
          v33 += v138;
          if (v12 == ++v32)
          {
            v32 = v12;
            v2 = v123;
            v22 = v129;
            if (v31 < v30)
              goto LABEL_27;
            goto LABEL_40;
          }
        }
        v2 = v123;
        v22 = v129;
        v37 = v138;
        if (v31 >= v30)
          goto LABEL_40;
      }
LABEL_27:
      if (v32 < v22)
        goto LABEL_144;
      if (v22 < v32)
      {
        v127 = v12;
        v122 = v20;
        v38 = 0;
        v39 = v37 * (v32 - 1);
        v40 = v32 * v37;
        v41 = v22 * v37;
        do
        {
          if (v22 != v32 + v38 - 1)
          {
            v44 = v126;
            if (!v126)
              goto LABEL_149;
            v45 = v126 + v41;
            v133 = v126 + v39;
            outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v126 + v41, v128);
            if (v41 < v39 || v45 >= v44 + v40)
            {
              v42 = v44 + v41;
              v43 = v133;
              swift_arrayInitWithTakeFrontToBack(v42, v133);
            }
            else
            {
              v43 = v133;
              if (v41 != v39)
                swift_arrayInitWithTakeBackToFront(v45, v133);
            }
            outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v128, v43);
            a1 = v136;
            v37 = v138;
          }
          ++v22;
          --v38;
          v39 -= v37;
          v40 -= v37;
          v41 += v37;
        }
        while (v22 < v32 + v38);
        v20 = v122;
        v22 = v129;
        v12 = v127;
      }
    }
LABEL_40:
    if (v32 < v12)
    {
      if (__OFSUB__(v32, v22))
        goto LABEL_142;
      if (v32 - v22 < v125)
        break;
    }
LABEL_57:
    if (v32 < v22)
      goto LABEL_137;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
    v138 = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
    v62 = *((_QWORD *)v20 + 2);
    v61 = *((_QWORD *)v20 + 3);
    v21 = v62 + 1;
    if (v62 >= v61 >> 1)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v61 > 1), v62 + 1, 1, v20);
    *((_QWORD *)v20 + 2) = v21;
    v63 = v20 + 32;
    v64 = &v20[16 * v62 + 32];
    v65 = v138;
    *(_QWORD *)v64 = v22;
    *((_QWORD *)v64 + 1) = v65;
    if (v62)
    {
      while (1)
      {
        v66 = v21 - 1;
        if (v21 >= 4)
        {
          v71 = &v63[16 * v21];
          v72 = *((_QWORD *)v71 - 8);
          v73 = *((_QWORD *)v71 - 7);
          v77 = __OFSUB__(v73, v72);
          v74 = v73 - v72;
          if (v77)
            goto LABEL_126;
          v76 = *((_QWORD *)v71 - 6);
          v75 = *((_QWORD *)v71 - 5);
          v77 = __OFSUB__(v75, v76);
          v69 = v75 - v76;
          v70 = v77;
          if (v77)
            goto LABEL_127;
          v78 = v21 - 2;
          v79 = &v63[16 * v21 - 32];
          v81 = *(_QWORD *)v79;
          v80 = *((_QWORD *)v79 + 1);
          v77 = __OFSUB__(v80, v81);
          v82 = v80 - v81;
          if (v77)
            goto LABEL_129;
          v77 = __OFADD__(v69, v82);
          v83 = v69 + v82;
          if (v77)
            goto LABEL_132;
          if (v83 >= v74)
          {
            v101 = &v63[16 * v66];
            v103 = *(_QWORD *)v101;
            v102 = *((_QWORD *)v101 + 1);
            v77 = __OFSUB__(v102, v103);
            v104 = v102 - v103;
            if (v77)
              goto LABEL_136;
            v94 = v69 < v104;
            goto LABEL_94;
          }
        }
        else
        {
          if (v21 != 3)
          {
            v95 = *((_QWORD *)v20 + 4);
            v96 = *((_QWORD *)v20 + 5);
            v77 = __OFSUB__(v96, v95);
            v88 = v96 - v95;
            v89 = v77;
            goto LABEL_88;
          }
          v68 = *((_QWORD *)v20 + 4);
          v67 = *((_QWORD *)v20 + 5);
          v77 = __OFSUB__(v67, v68);
          v69 = v67 - v68;
          v70 = v77;
        }
        if ((v70 & 1) != 0)
          goto LABEL_128;
        v78 = v21 - 2;
        v84 = &v63[16 * v21 - 32];
        v86 = *(_QWORD *)v84;
        v85 = *((_QWORD *)v84 + 1);
        v87 = __OFSUB__(v85, v86);
        v88 = v85 - v86;
        v89 = v87;
        if (v87)
          goto LABEL_131;
        v90 = &v63[16 * v66];
        v92 = *(_QWORD *)v90;
        v91 = *((_QWORD *)v90 + 1);
        v77 = __OFSUB__(v91, v92);
        v93 = v91 - v92;
        if (v77)
          goto LABEL_134;
        if (__OFADD__(v88, v93))
          goto LABEL_135;
        if (v88 + v93 >= v69)
        {
          v94 = v69 < v93;
LABEL_94:
          if (v94)
            v66 = v78;
          goto LABEL_96;
        }
LABEL_88:
        if ((v89 & 1) != 0)
          goto LABEL_130;
        v97 = &v63[16 * v66];
        v99 = *(_QWORD *)v97;
        v98 = *((_QWORD *)v97 + 1);
        v77 = __OFSUB__(v98, v99);
        v100 = v98 - v99;
        if (v77)
          goto LABEL_133;
        if (v100 < v88)
          goto LABEL_15;
LABEL_96:
        v105 = v66 - 1;
        if (v66 - 1 >= v21)
        {
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
          goto LABEL_146;
        }
        v106 = *a1;
        if (!*a1)
          goto LABEL_148;
        v107 = v20;
        v108 = &v63[16 * v105];
        v109 = *(_QWORD *)v108;
        v110 = &v63[16 * v66];
        v111 = *((_QWORD *)v110 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(v106 + *(_QWORD *)(v131 + 72) * *(_QWORD *)v108, v106 + *(_QWORD *)(v131 + 72) * *(_QWORD *)v110, v106 + *(_QWORD *)(v131 + 72) * v111, v130);
        if (v2)
        {
LABEL_117:
          v120 = v107;
          goto LABEL_119;
        }
        if (v111 < v109)
          goto LABEL_123;
        if (v66 > *((_QWORD *)v107 + 2))
          goto LABEL_124;
        *(_QWORD *)v108 = v109;
        *(_QWORD *)&v63[16 * v105 + 8] = v111;
        v112 = *((_QWORD *)v107 + 2);
        if (v66 >= v112)
          goto LABEL_125;
        v20 = v107;
        v21 = v112 - 1;
        memmove(&v63[16 * v66], v110 + 16, 16 * (v112 - 1 - v66));
        *((_QWORD *)v107 + 2) = v112 - 1;
        a1 = v136;
        if (v112 <= 2)
          goto LABEL_15;
      }
    }
    v21 = 1;
LABEL_15:
    v12 = a1[1];
    v19 = v138;
    if (v138 >= v12)
    {
      v18 = v124;
      goto LABEL_105;
    }
  }
  if (__OFADD__(v22, v125))
    goto LABEL_145;
  if (v22 + v125 >= v12)
    v46 = v12;
  else
    v46 = v22 + v125;
  if (v46 >= v22)
  {
    if (v32 != v46)
    {
      v129 = v22;
      v122 = v20;
      v123 = v2;
      v47 = *(_QWORD *)(v131 + 72);
      v138 = v47 * (v32 - 1);
      v133 = v47;
      v48 = v32 * v47;
      v127 = v46;
      do
      {
        v49 = 0;
        v50 = v129;
        do
        {
          v51 = *a1;
          v52 = v134;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v48 + v49 + *a1, v134);
          v53 = v138 + v49 + v51;
          v54 = v135;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v53, v135);
          v55 = *(double *)(v52 + 16);
          v56 = *(double *)(v54 + 16);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v54);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v52);
          if (v56 >= v55)
            break;
          v57 = *a1;
          if (!*a1)
            goto LABEL_147;
          v58 = v57 + v48 + v49;
          v59 = v57 + v138 + v49;
          outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v58, v137);
          swift_arrayInitWithTakeFrontToBack(v58, v59);
          outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v137, v59);
          v49 -= v133;
          ++v50;
          a1 = v136;
        }
        while (v32 != v50);
        ++v32;
        v138 += v133;
        v48 += v133;
      }
      while (v32 != v127);
      v32 = v127;
      v20 = v122;
      v2 = v123;
      v22 = v129;
    }
    goto LABEL_57;
  }
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::Int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  Swift::Int v29;
  unsigned __int8 *v30;
  unsigned int v31;
  Swift::Int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  _QWORD *v104;
  Swift::Int v105;
  Swift::Int v106;
  uint64_t v107;
  unsigned __int8 *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v88 = 0;
      v89 = *a1;
      v90 = 1;
      while (1)
      {
        v91 = *(unsigned __int8 *)(v89 + 16 * v90);
        v92 = v88;
        do
        {
          if (v91 >= *(unsigned __int8 *)(v89 + v92))
            break;
          if (!v89)
            goto LABEL_142;
          v93 = v89 + v92;
          v94 = *(_QWORD *)(v89 + v92 + 24);
          *(_OWORD *)(v89 + v92 + 16) = *(_OWORD *)(v89 + v92);
          *(_BYTE *)v93 = v91;
          *(_QWORD *)(v93 + 8) = v94;
          v92 -= 16;
        }
        while (v92 != -16);
        ++v90;
        v88 += 16;
        if (v90 == v3)
          return result;
      }
    }
    goto LABEL_138;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_147:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v6 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v10 = _swiftEmptyArrayStorage;
    __dst = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
      v13 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MOSuggestionAssetVisualSubType, Int));
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v104 = (_QWORD *)v9;
    __dst = (unsigned __int8 *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v103 = *a1 + 32;
  v101 = *a1 - 16;
  v13 = (char *)_swiftEmptyArrayStorage;
  v105 = v6;
  v106 = v3;
  v107 = v12;
  while (1)
  {
    v15 = v11++;
    if (v11 < v3)
    {
      v16 = *(unsigned __int8 *)(v12 + 16 * v11);
      v17 = 16 * v15;
      v18 = *(unsigned __int8 *)(v12 + 16 * v15);
      v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        v19 = (unsigned __int8 *)(v103 + 16 * v15);
        v20 = v16;
        while (1)
        {
          v22 = *v19;
          v19 += 16;
          v21 = v22;
          if (v16 < v18 == v22 >= v20)
            break;
          ++v11;
          v20 = v21;
          if (v3 == v11)
          {
            v11 = v3;
            break;
          }
        }
      }
      if (v16 < v18)
      {
        if (v11 < v15)
          goto LABEL_139;
        if (v15 < v11)
        {
          v23 = 16 * v11;
          v24 = v11;
          v25 = v15;
          do
          {
            if (v25 != --v24)
            {
              if (!v12)
                goto LABEL_145;
              v26 = v12 + v23;
              v27 = *(_BYTE *)(v12 + v17);
              v28 = *(_QWORD *)(v12 + v17 + 8);
              *(_OWORD *)(v12 + v17) = *(_OWORD *)(v12 + v23 - 16);
              *(_BYTE *)(v26 - 16) = v27;
              *(_QWORD *)(v26 - 8) = v28;
            }
            ++v25;
            v23 -= 16;
            v17 += 16;
          }
          while (v25 < v24);
        }
      }
    }
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v15))
        goto LABEL_137;
      if (v11 - v15 < v6)
      {
        v29 = v15 + v6;
        if (__OFADD__(v15, v6))
          goto LABEL_140;
        if (v29 >= v3)
          v29 = v3;
        if (v29 < v15)
          goto LABEL_141;
        if (v11 != v29)
        {
          v30 = (unsigned __int8 *)(v101 + 16 * v11);
          do
          {
            v31 = *(unsigned __int8 *)(v12 + 16 * v11);
            v32 = v15;
            v33 = v30;
            do
            {
              if (v31 >= *v33)
                break;
              if (!v12)
                goto LABEL_143;
              v34 = *((_QWORD *)v33 + 3);
              *((_OWORD *)v33 + 1) = *(_OWORD *)v33;
              *v33 = v31;
              *((_QWORD *)v33 + 1) = v34;
              v33 -= 16;
              ++v32;
            }
            while (v11 != v32);
            ++v11;
            v30 += 16;
          }
          while (v11 != v29);
          v11 = v29;
        }
      }
    }
    if (v11 < v15)
    {
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v36 = *((_QWORD *)v13 + 2);
    v35 = *((_QWORD *)v13 + 3);
    v14 = v36 + 1;
    v12 = v107;
    if (v36 >= v35 >> 1)
    {
      v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v13);
      v12 = v107;
      v13 = v85;
    }
    *((_QWORD *)v13 + 2) = v14;
    v37 = v13 + 32;
    v38 = &v13[16 * v36 + 32];
    *(_QWORD *)v38 = v15;
    *((_QWORD *)v38 + 1) = v11;
    if (v36)
      break;
    v14 = 1;
LABEL_15:
    v6 = v105;
    v3 = v106;
    if (v11 >= v106)
    {
      v10 = v104;
LABEL_104:
      v87 = v13;
      v104 = v10;
      if (v14 < 2)
        goto LABEL_95;
      v95 = *v102;
      while (1)
      {
        v96 = v14 - 2;
        if (v14 < 2)
          break;
        if (!v95)
          goto LABEL_146;
        v86 = v87;
        v97 = *(_QWORD *)&v87[16 * v96 + 32];
        v98 = *(_QWORD *)&v87[16 * v14 + 24];
        specialized _merge<A>(low:mid:high:buffer:by:)((unsigned __int8 *)(v95 + 16 * v97), (unsigned __int8 *)(v95 + 16 * *(_QWORD *)&v87[16 * v14 + 16]), v95 + 16 * v98, __dst);
        if (v1)
          goto LABEL_94;
        if (v98 < v97)
          goto LABEL_134;
        if ((swift_isUniquelyReferenced_nonNull_native(v86) & 1) == 0)
          v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
        if (v96 >= *((_QWORD *)v86 + 2))
          goto LABEL_135;
        v99 = &v86[16 * v96 + 32];
        *(_QWORD *)v99 = v97;
        *((_QWORD *)v99 + 1) = v98;
        v100 = *((_QWORD *)v86 + 2);
        if (v14 > v100)
          goto LABEL_136;
        memmove(&v86[16 * v14 + 16], &v86[16 * v14 + 32], 16 * (v100 - v14));
        v87 = v86;
        *((_QWORD *)v86 + 2) = v100 - 1;
        v14 = v100 - 1;
        if (v100 <= 2)
          goto LABEL_95;
      }
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
  }
  while (1)
  {
    v39 = v14 - 1;
    if (v14 >= 4)
    {
      v44 = &v37[16 * v14];
      v45 = *((_QWORD *)v44 - 8);
      v46 = *((_QWORD *)v44 - 7);
      v50 = __OFSUB__(v46, v45);
      v47 = v46 - v45;
      if (v50)
        goto LABEL_121;
      v49 = *((_QWORD *)v44 - 6);
      v48 = *((_QWORD *)v44 - 5);
      v50 = __OFSUB__(v48, v49);
      v42 = v48 - v49;
      v43 = v50;
      if (v50)
        goto LABEL_122;
      v51 = v14 - 2;
      v52 = &v37[16 * v14 - 32];
      v54 = *(_QWORD *)v52;
      v53 = *((_QWORD *)v52 + 1);
      v50 = __OFSUB__(v53, v54);
      v55 = v53 - v54;
      if (v50)
        goto LABEL_124;
      v50 = __OFADD__(v42, v55);
      v56 = v42 + v55;
      if (v50)
        goto LABEL_127;
      if (v56 >= v47)
      {
        v74 = &v37[16 * v39];
        v76 = *(_QWORD *)v74;
        v75 = *((_QWORD *)v74 + 1);
        v50 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v50)
          goto LABEL_131;
        v67 = v42 < v77;
        goto LABEL_83;
      }
    }
    else
    {
      if (v14 != 3)
      {
        v68 = *((_QWORD *)v13 + 4);
        v69 = *((_QWORD *)v13 + 5);
        v50 = __OFSUB__(v69, v68);
        v61 = v69 - v68;
        v62 = v50;
        goto LABEL_77;
      }
      v41 = *((_QWORD *)v13 + 4);
      v40 = *((_QWORD *)v13 + 5);
      v50 = __OFSUB__(v40, v41);
      v42 = v40 - v41;
      v43 = v50;
    }
    if ((v43 & 1) != 0)
      goto LABEL_123;
    v51 = v14 - 2;
    v57 = &v37[16 * v14 - 32];
    v59 = *(_QWORD *)v57;
    v58 = *((_QWORD *)v57 + 1);
    v60 = __OFSUB__(v58, v59);
    v61 = v58 - v59;
    v62 = v60;
    if (v60)
      goto LABEL_126;
    v63 = &v37[16 * v39];
    v65 = *(_QWORD *)v63;
    v64 = *((_QWORD *)v63 + 1);
    v50 = __OFSUB__(v64, v65);
    v66 = v64 - v65;
    if (v50)
      goto LABEL_129;
    if (__OFADD__(v61, v66))
      goto LABEL_130;
    if (v61 + v66 >= v42)
    {
      v67 = v42 < v66;
LABEL_83:
      if (v67)
        v39 = v51;
      goto LABEL_85;
    }
LABEL_77:
    if ((v62 & 1) != 0)
      goto LABEL_125;
    v70 = &v37[16 * v39];
    v72 = *(_QWORD *)v70;
    v71 = *((_QWORD *)v70 + 1);
    v50 = __OFSUB__(v71, v72);
    v73 = v71 - v72;
    if (v50)
      goto LABEL_128;
    if (v73 < v61)
      goto LABEL_15;
LABEL_85:
    v78 = v39 - 1;
    if (v39 - 1 >= v14)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    if (!v12)
      goto LABEL_144;
    v79 = v13;
    v80 = &v37[16 * v78];
    v81 = *(_QWORD *)v80;
    v82 = &v37[16 * v39];
    v83 = *((_QWORD *)v82 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)((unsigned __int8 *)(v12 + 16 * *(_QWORD *)v80), (unsigned __int8 *)(v12 + 16 * *(_QWORD *)v82), v12 + 16 * v83, __dst);
    if (v1)
      break;
    if (v83 < v81)
      goto LABEL_118;
    if (v39 > *((_QWORD *)v79 + 2))
      goto LABEL_119;
    *(_QWORD *)v80 = v81;
    *(_QWORD *)&v37[16 * v78 + 8] = v83;
    v84 = *((_QWORD *)v79 + 2);
    if (v39 >= v84)
      goto LABEL_120;
    v13 = v79;
    v14 = v84 - 1;
    memmove(&v37[16 * v39], v82 + 16, 16 * (v84 - 1 - v39));
    *((_QWORD *)v79 + 2) = v84 - 1;
    v12 = v107;
    if (v84 <= 2)
      goto LABEL_15;
  }
  v86 = v79;
LABEL_94:
  v87 = v86;
LABEL_95:
  swift_bridgeObjectRelease(v87);
  v104[2] = 0;
  return swift_bridgeObjectRelease(v104);
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  _QWORD *v30;
  uint64_t v31;
  Swift::Int v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  _QWORD *v103;
  Swift::Int v104;
  Swift::Int v105;
  uint64_t v106;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v88 = 0;
      v89 = *a1;
      v90 = 1;
      while (1)
      {
        v91 = *(_QWORD *)(v89 + 16 * v90 + 8);
        v92 = v88;
        do
        {
          v93 = v89 + v92;
          if (v91 >= *(_QWORD *)(v89 + v92 + 8))
            break;
          if (!v89)
            goto LABEL_142;
          v94 = *(_QWORD *)(v93 + 16);
          *(_OWORD *)(v93 + 16) = *(_OWORD *)v93;
          *(_QWORD *)v93 = v94;
          *(_QWORD *)(v93 + 8) = v91;
          v92 -= 16;
        }
        while (v92 != -16);
        ++v90;
        v88 += 16;
        if (v90 == v3)
          return result;
      }
    }
    goto LABEL_138;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_147:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v6 = result;
  v101 = a1;
  if (v3 < 2)
  {
    v10 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
      v13 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v103 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (MOSuggestionAssetReference, Int));
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v103 = (_QWORD *)v9;
    __dst = (char *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v102 = *a1 + 40;
  v13 = (char *)_swiftEmptyArrayStorage;
  v104 = v6;
  v105 = v3;
  v106 = v12;
  while (1)
  {
    v15 = v11++;
    if (v11 < v3)
    {
      v16 = *(_QWORD *)(v12 + 16 * v11 + 8);
      v17 = *(_QWORD *)(v12 + 16 * v15 + 8);
      v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        v18 = (uint64_t *)(v102 + 16 * v15);
        v19 = v16;
        while (1)
        {
          v21 = *v18;
          v18 += 2;
          v20 = v21;
          if (v16 < v17 == v21 >= v19)
            break;
          ++v11;
          v19 = v20;
          if (v3 == v11)
          {
            v11 = v3;
            break;
          }
        }
      }
      if (v16 < v17)
      {
        if (v11 < v15)
          goto LABEL_139;
        if (v15 < v11)
        {
          v22 = 16 * v11;
          v23 = 16 * v15;
          v24 = v11;
          v25 = v15;
          do
          {
            if (v25 != --v24)
            {
              if (!v12)
                goto LABEL_145;
              v26 = v12 + v22;
              v27 = *(_QWORD *)(v12 + v23);
              v28 = *(_QWORD *)(v12 + v23 + 8);
              *(_OWORD *)(v12 + v23) = *(_OWORD *)(v12 + v22 - 16);
              *(_QWORD *)(v26 - 16) = v27;
              *(_QWORD *)(v26 - 8) = v28;
            }
            ++v25;
            v22 -= 16;
            v23 += 16;
          }
          while (v25 < v24);
        }
      }
    }
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v15))
        goto LABEL_137;
      if (v11 - v15 < v6)
      {
        v29 = v15 + v6;
        if (__OFADD__(v15, v6))
          goto LABEL_140;
        if (v29 >= v3)
          v29 = v3;
        if (v29 < v15)
          goto LABEL_141;
        if (v11 != v29)
        {
          v30 = (_QWORD *)(v12 + 16 * v11);
          do
          {
            v31 = *(_QWORD *)(v12 + 16 * v11 + 8);
            v32 = v15;
            v33 = v30;
            do
            {
              if (v31 >= *(v33 - 1))
                break;
              if (!v12)
                goto LABEL_143;
              v34 = *v33;
              *(_OWORD *)v33 = *((_OWORD *)v33 - 1);
              *(v33 - 1) = v31;
              *(v33 - 2) = v34;
              v33 -= 2;
              ++v32;
            }
            while (v11 != v32);
            ++v11;
            v30 += 2;
          }
          while (v11 != v29);
          v11 = v29;
        }
      }
    }
    if (v11 < v15)
    {
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v36 = *((_QWORD *)v13 + 2);
    v35 = *((_QWORD *)v13 + 3);
    v14 = v36 + 1;
    v12 = v106;
    if (v36 >= v35 >> 1)
    {
      v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v13);
      v12 = v106;
      v13 = v85;
    }
    *((_QWORD *)v13 + 2) = v14;
    v37 = v13 + 32;
    v38 = &v13[16 * v36 + 32];
    *(_QWORD *)v38 = v15;
    *((_QWORD *)v38 + 1) = v11;
    if (v36)
      break;
    v14 = 1;
LABEL_15:
    v6 = v104;
    v3 = v105;
    if (v11 >= v105)
    {
      v10 = v103;
LABEL_104:
      v87 = v13;
      v103 = v10;
      if (v14 < 2)
        goto LABEL_95;
      v95 = *v101;
      while (1)
      {
        v96 = v14 - 2;
        if (v14 < 2)
          break;
        if (!v95)
          goto LABEL_146;
        v86 = v87;
        v97 = *(_QWORD *)&v87[16 * v96 + 32];
        v98 = *(_QWORD *)&v87[16 * v14 + 24];
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v95 + 16 * v97), (char *)(v95 + 16 * *(_QWORD *)&v87[16 * v14 + 16]), v95 + 16 * v98, __dst);
        if (v1)
          goto LABEL_94;
        if (v98 < v97)
          goto LABEL_134;
        if ((swift_isUniquelyReferenced_nonNull_native(v86) & 1) == 0)
          v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
        if (v96 >= *((_QWORD *)v86 + 2))
          goto LABEL_135;
        v99 = &v86[16 * v96 + 32];
        *(_QWORD *)v99 = v97;
        *((_QWORD *)v99 + 1) = v98;
        v100 = *((_QWORD *)v86 + 2);
        if (v14 > v100)
          goto LABEL_136;
        memmove(&v86[16 * v14 + 16], &v86[16 * v14 + 32], 16 * (v100 - v14));
        v87 = v86;
        *((_QWORD *)v86 + 2) = v100 - 1;
        v14 = v100 - 1;
        if (v100 <= 2)
          goto LABEL_95;
      }
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
  }
  while (1)
  {
    v39 = v14 - 1;
    if (v14 >= 4)
    {
      v44 = &v37[16 * v14];
      v45 = *((_QWORD *)v44 - 8);
      v46 = *((_QWORD *)v44 - 7);
      v50 = __OFSUB__(v46, v45);
      v47 = v46 - v45;
      if (v50)
        goto LABEL_121;
      v49 = *((_QWORD *)v44 - 6);
      v48 = *((_QWORD *)v44 - 5);
      v50 = __OFSUB__(v48, v49);
      v42 = v48 - v49;
      v43 = v50;
      if (v50)
        goto LABEL_122;
      v51 = v14 - 2;
      v52 = &v37[16 * v14 - 32];
      v54 = *(_QWORD *)v52;
      v53 = *((_QWORD *)v52 + 1);
      v50 = __OFSUB__(v53, v54);
      v55 = v53 - v54;
      if (v50)
        goto LABEL_124;
      v50 = __OFADD__(v42, v55);
      v56 = v42 + v55;
      if (v50)
        goto LABEL_127;
      if (v56 >= v47)
      {
        v74 = &v37[16 * v39];
        v76 = *(_QWORD *)v74;
        v75 = *((_QWORD *)v74 + 1);
        v50 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v50)
          goto LABEL_131;
        v67 = v42 < v77;
        goto LABEL_83;
      }
    }
    else
    {
      if (v14 != 3)
      {
        v68 = *((_QWORD *)v13 + 4);
        v69 = *((_QWORD *)v13 + 5);
        v50 = __OFSUB__(v69, v68);
        v61 = v69 - v68;
        v62 = v50;
        goto LABEL_77;
      }
      v41 = *((_QWORD *)v13 + 4);
      v40 = *((_QWORD *)v13 + 5);
      v50 = __OFSUB__(v40, v41);
      v42 = v40 - v41;
      v43 = v50;
    }
    if ((v43 & 1) != 0)
      goto LABEL_123;
    v51 = v14 - 2;
    v57 = &v37[16 * v14 - 32];
    v59 = *(_QWORD *)v57;
    v58 = *((_QWORD *)v57 + 1);
    v60 = __OFSUB__(v58, v59);
    v61 = v58 - v59;
    v62 = v60;
    if (v60)
      goto LABEL_126;
    v63 = &v37[16 * v39];
    v65 = *(_QWORD *)v63;
    v64 = *((_QWORD *)v63 + 1);
    v50 = __OFSUB__(v64, v65);
    v66 = v64 - v65;
    if (v50)
      goto LABEL_129;
    if (__OFADD__(v61, v66))
      goto LABEL_130;
    if (v61 + v66 >= v42)
    {
      v67 = v42 < v66;
LABEL_83:
      if (v67)
        v39 = v51;
      goto LABEL_85;
    }
LABEL_77:
    if ((v62 & 1) != 0)
      goto LABEL_125;
    v70 = &v37[16 * v39];
    v72 = *(_QWORD *)v70;
    v71 = *((_QWORD *)v70 + 1);
    v50 = __OFSUB__(v71, v72);
    v73 = v71 - v72;
    if (v50)
      goto LABEL_128;
    if (v73 < v61)
      goto LABEL_15;
LABEL_85:
    v78 = v39 - 1;
    if (v39 - 1 >= v14)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    if (!v12)
      goto LABEL_144;
    v79 = v13;
    v80 = &v37[16 * v78];
    v81 = *(_QWORD *)v80;
    v82 = &v37[16 * v39];
    v83 = *((_QWORD *)v82 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v12 + 16 * *(_QWORD *)v80), (char *)(v12 + 16 * *(_QWORD *)v82), v12 + 16 * v83, __dst);
    if (v1)
      break;
    if (v83 < v81)
      goto LABEL_118;
    if (v39 > *((_QWORD *)v79 + 2))
      goto LABEL_119;
    *(_QWORD *)v80 = v81;
    *(_QWORD *)&v37[16 * v78 + 8] = v83;
    v84 = *((_QWORD *)v79 + 2);
    if (v39 >= v84)
      goto LABEL_120;
    v13 = v79;
    v14 = v84 - 1;
    memmove(&v37[16 * v39], v82 + 16, 16 * (v84 - 1 - v39));
    *((_QWORD *)v79 + 2) = v84 - 1;
    v12 = v106;
    if (v84 <= 2)
      goto LABEL_15;
  }
  v86 = v79;
LABEL_94:
  v87 = v86;
LABEL_95:
  swift_bridgeObjectRelease(v87);
  v103[2] = 0;
  return swift_bridgeObjectRelease(v103);
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  Swift::Int v19;
  unint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  Swift::Int v39;
  Swift::Int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  Swift::Int v48;
  uint64_t v49;
  uint64_t v50;
  Swift::Int v51;
  Swift::Int v52;
  uint64_t v53;
  Swift::Int v54;
  uint64_t *v55;
  uint64_t v56;
  Swift::Int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  Swift::Int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  char v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  unint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  Swift::Int v128;
  uint64_t v129;
  char *v130;
  Swift::Int v131;
  uint64_t v132;
  Swift::Int v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  Swift::Int v140;
  _QWORD *v141;
  uint64_t v142;
  Swift::Int v143;
  uint64_t v144;

  v2 = v1;
  v4 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v135 = *(_QWORD *)(v4 - 8);
  v136 = v4;
  v5 = __chkstk_darwin(v4);
  v132 = (uint64_t)&v126 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v142 = (uint64_t)&v126 - v8;
  v9 = __chkstk_darwin(v7);
  v139 = (uint64_t)&v126 - v10;
  __chkstk_darwin(v9);
  v138 = (uint64_t)&v126 - v11;
  v12 = a1[1];
  result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0)
      goto LABEL_140;
    if (v12)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v12, 1, a1);
    return result;
  }
  if (v12 >= 0)
    v14 = v12;
  else
    v14 = v12 + 1;
  if (v12 < -1)
    goto LABEL_148;
  v128 = result;
  if (v12 < 2)
  {
    v18 = (char *)_swiftEmptyArrayStorage;
    v134 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v135 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80));
    v127 = _swiftEmptyArrayStorage;
    if (v12 != 1)
    {
      v20 = _swiftEmptyArrayStorage[2];
LABEL_106:
      if (v20 >= 2)
      {
        v119 = *a1;
        do
        {
          v120 = v20 - 2;
          if (v20 < 2)
            goto LABEL_135;
          if (!v119)
            goto LABEL_147;
          v121 = *(_QWORD *)&v18[16 * v120 + 32];
          v122 = *(_QWORD *)&v18[16 * v20 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v119 + *(_QWORD *)(v135 + 72) * v121, v119 + *(_QWORD *)(v135 + 72) * *(_QWORD *)&v18[16 * v20 + 16], v119 + *(_QWORD *)(v135 + 72) * v122, v134);
          if (v2)
            break;
          if (v122 < v121)
            goto LABEL_136;
          if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
            v18 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v18);
          if (v120 >= *((_QWORD *)v18 + 2))
            goto LABEL_137;
          v123 = &v18[16 * v120 + 32];
          *(_QWORD *)v123 = v121;
          *((_QWORD *)v123 + 1) = v122;
          v124 = *((_QWORD *)v18 + 2);
          if (v20 > v124)
            goto LABEL_138;
          memmove(&v18[16 * v20 + 16], &v18[16 * v20 + 32], 16 * (v124 - v20));
          *((_QWORD *)v18 + 2) = v124 - 1;
          v20 = v124 - 1;
        }
        while (v124 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease(v18);
      v125 = v127;
      v127[2] = 0;
      return swift_bridgeObjectRelease(v125);
    }
  }
  else
  {
    v15 = v14 >> 1;
    v16 = static Array._allocateBufferUninitialized(minimumCapacity:)(v14 >> 1, v136);
    *(_QWORD *)(v16 + 16) = v15;
    v17 = *(unsigned __int8 *)(v135 + 80);
    v127 = (_QWORD *)v16;
    v134 = v16 + ((v17 + 32) & ~v17);
  }
  v19 = 0;
  v18 = (char *)_swiftEmptyArrayStorage;
  v141 = a1;
  while (1)
  {
    v130 = v18;
    v21 = v19;
    v22 = v19 + 1;
    if (v19 + 1 >= v12)
    {
      v39 = v19 + 1;
      v18 = v130;
      v40 = v19;
      goto LABEL_58;
    }
    v129 = v2;
    v23 = *a1;
    v24 = *(_QWORD *)(v135 + 72);
    v25 = *a1 + v24 * v22;
    v143 = v12;
    v26 = v138;
    outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v25, v138);
    v27 = v139;
    outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v23 + v24 * v21, v139);
    v140 = *(_QWORD *)(v26 + 24);
    v28 = *(_QWORD *)(v27 + 24);
    outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v27);
    v29 = v26;
    v30 = v143;
    outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v29);
    v133 = v21;
    v137 = v23;
    v144 = v24;
    if (v21 + 2 >= v30)
    {
      v33 = v21 + 2;
    }
    else
    {
      v31 = v24 * v22;
      v32 = v23;
      v33 = v21 + 2;
      v34 = v24 * (v21 + 2);
      while (1)
      {
        v35 = v140 < v28;
        v36 = v138;
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v32 + v34, v138);
        v37 = v139;
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v32 + v31, v139);
        v38 = *(_QWORD *)(v36 + 24) >= *(_QWORD *)(v37 + 24);
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v37);
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v36);
        if (v35 == v38)
          break;
        v32 += v144;
        if (v143 == ++v33)
        {
          v30 = v143;
          v33 = v143;
          a1 = v141;
          goto LABEL_24;
        }
      }
      a1 = v141;
      v30 = v143;
    }
LABEL_24:
    v18 = v130;
    v40 = v133;
    if (v140 >= v28)
      break;
    if (v33 < v133)
      goto LABEL_141;
    v39 = v33;
    if (v133 >= v33)
      goto LABEL_38;
    v41 = 0;
    v42 = v144;
    v43 = v144 * (v33 - 1);
    v44 = v33 * v144;
    v45 = v133 * v144;
    do
    {
      if (v40 != v39 + v41 - 1)
      {
        v46 = v137;
        if (!v137)
          goto LABEL_146;
        v47 = v137 + v45;
        outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v137 + v45, v132);
        if (v45 < v43 || v47 >= v46 + v44)
        {
          swift_arrayInitWithTakeFrontToBack(v46 + v45, v46 + v43);
        }
        else if (v45 != v43)
        {
          swift_arrayInitWithTakeBackToFront(v46 + v45, v46 + v43);
        }
        outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v132, v46 + v43);
        v39 = v33;
        v42 = v144;
      }
      ++v40;
      --v41;
      v43 -= v42;
      v44 -= v42;
      v45 += v42;
    }
    while (v40 < v39 + v41);
    a1 = v141;
    v2 = v129;
    v18 = v130;
    v40 = v133;
    v30 = v143;
    if (v39 < v143)
      goto LABEL_41;
LABEL_58:
    if (v39 < v40)
      goto LABEL_134;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    v140 = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
    v69 = *((_QWORD *)v18 + 2);
    v68 = *((_QWORD *)v18 + 3);
    v20 = v69 + 1;
    if (v69 >= v68 >> 1)
      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v18);
    *((_QWORD *)v18 + 2) = v20;
    v70 = v18 + 32;
    v71 = &v18[16 * v69 + 32];
    v72 = v140;
    *(_QWORD *)v71 = v40;
    *((_QWORD *)v71 + 1) = v72;
    if (v69)
    {
      while (1)
      {
        v73 = v20 - 1;
        if (v20 >= 4)
        {
          v78 = &v70[16 * v20];
          v79 = *((_QWORD *)v78 - 8);
          v80 = *((_QWORD *)v78 - 7);
          v84 = __OFSUB__(v80, v79);
          v81 = v80 - v79;
          if (v84)
            goto LABEL_123;
          v83 = *((_QWORD *)v78 - 6);
          v82 = *((_QWORD *)v78 - 5);
          v84 = __OFSUB__(v82, v83);
          v76 = v82 - v83;
          v77 = v84;
          if (v84)
            goto LABEL_124;
          v85 = v20 - 2;
          v86 = &v70[16 * v20 - 32];
          v88 = *(_QWORD *)v86;
          v87 = *((_QWORD *)v86 + 1);
          v84 = __OFSUB__(v87, v88);
          v89 = v87 - v88;
          if (v84)
            goto LABEL_126;
          v84 = __OFADD__(v76, v89);
          v90 = v76 + v89;
          if (v84)
            goto LABEL_129;
          if (v90 >= v81)
          {
            v108 = &v70[16 * v73];
            v110 = *(_QWORD *)v108;
            v109 = *((_QWORD *)v108 + 1);
            v84 = __OFSUB__(v109, v110);
            v111 = v109 - v110;
            if (v84)
              goto LABEL_133;
            v101 = v76 < v111;
            goto LABEL_95;
          }
        }
        else
        {
          if (v20 != 3)
          {
            v102 = *((_QWORD *)v18 + 4);
            v103 = *((_QWORD *)v18 + 5);
            v84 = __OFSUB__(v103, v102);
            v95 = v103 - v102;
            v96 = v84;
            goto LABEL_89;
          }
          v75 = *((_QWORD *)v18 + 4);
          v74 = *((_QWORD *)v18 + 5);
          v84 = __OFSUB__(v74, v75);
          v76 = v74 - v75;
          v77 = v84;
        }
        if ((v77 & 1) != 0)
          goto LABEL_125;
        v85 = v20 - 2;
        v91 = &v70[16 * v20 - 32];
        v93 = *(_QWORD *)v91;
        v92 = *((_QWORD *)v91 + 1);
        v94 = __OFSUB__(v92, v93);
        v95 = v92 - v93;
        v96 = v94;
        if (v94)
          goto LABEL_128;
        v97 = &v70[16 * v73];
        v99 = *(_QWORD *)v97;
        v98 = *((_QWORD *)v97 + 1);
        v84 = __OFSUB__(v98, v99);
        v100 = v98 - v99;
        if (v84)
          goto LABEL_131;
        if (__OFADD__(v95, v100))
          goto LABEL_132;
        if (v95 + v100 >= v76)
        {
          v101 = v76 < v100;
LABEL_95:
          if (v101)
            v73 = v85;
          goto LABEL_97;
        }
LABEL_89:
        if ((v96 & 1) != 0)
          goto LABEL_127;
        v104 = &v70[16 * v73];
        v106 = *(_QWORD *)v104;
        v105 = *((_QWORD *)v104 + 1);
        v84 = __OFSUB__(v105, v106);
        v107 = v105 - v106;
        if (v84)
          goto LABEL_130;
        if (v107 < v95)
          goto LABEL_14;
LABEL_97:
        v112 = v73 - 1;
        if (v73 - 1 >= v20)
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        v113 = *a1;
        if (!*a1)
          goto LABEL_145;
        v114 = &v70[16 * v112];
        v115 = *(_QWORD *)v114;
        v116 = &v70[16 * v73];
        v117 = *((_QWORD *)v116 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(v113 + *(_QWORD *)(v135 + 72) * *(_QWORD *)v114, v113 + *(_QWORD *)(v135 + 72) * *(_QWORD *)v116, v113 + *(_QWORD *)(v135 + 72) * v117, v134);
        if (v2)
          goto LABEL_117;
        if (v117 < v115)
          goto LABEL_120;
        if (v73 > *((_QWORD *)v18 + 2))
          goto LABEL_121;
        *(_QWORD *)v114 = v115;
        *(_QWORD *)&v70[16 * v112 + 8] = v117;
        v118 = *((_QWORD *)v18 + 2);
        if (v73 >= v118)
          goto LABEL_122;
        v20 = v118 - 1;
        memmove(&v70[16 * v73], v116 + 16, 16 * (v118 - 1 - v73));
        *((_QWORD *)v18 + 2) = v118 - 1;
        a1 = v141;
        if (v118 <= 2)
          goto LABEL_14;
      }
    }
    v20 = 1;
LABEL_14:
    v12 = a1[1];
    v19 = v140;
    if (v140 >= v12)
      goto LABEL_106;
  }
  v39 = v33;
LABEL_38:
  v2 = v129;
  if (v39 >= v30)
    goto LABEL_58;
LABEL_41:
  if (__OFSUB__(v39, v40))
    goto LABEL_139;
  if (v39 - v40 >= v128)
    goto LABEL_58;
  if (__OFADD__(v40, v128))
    goto LABEL_142;
  if (v40 + v128 >= v30)
    v48 = v30;
  else
    v48 = v40 + v128;
  if (v48 >= v40)
  {
    if (v39 != v48)
    {
      v133 = v40;
      v129 = v2;
      v49 = *(_QWORD *)(v135 + 72);
      v50 = v49 * (v39 - 1);
      v137 = v49;
      v51 = v39 * v49;
      v131 = v48;
      do
      {
        v53 = 0;
        v54 = v133;
        v140 = v39;
        while (1)
        {
          v143 = v54;
          v55 = v141;
          v56 = *v141;
          v57 = v51;
          v58 = v51 + v53 + *v141;
          v59 = v138;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v58, v138);
          v60 = v50;
          v61 = v50 + v53 + v56;
          v62 = v139;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v61, v139);
          v144 = *(_QWORD *)(v59 + 24);
          v63 = *(_QWORD *)(v62 + 24);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v62);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v59);
          if (v144 >= v63)
            break;
          v64 = *v55;
          if (!*v55)
            goto LABEL_144;
          v51 = v57;
          v65 = v64 + v57 + v53;
          v50 = v60;
          v66 = v64 + v60 + v53;
          outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v65, v142);
          swift_arrayInitWithTakeFrontToBack(v65, v66);
          outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v142, v66);
          v53 -= v137;
          v54 = v143 + 1;
          v52 = v140;
          if (v140 == v143 + 1)
            goto LABEL_51;
        }
        v52 = v140;
        v50 = v60;
        v51 = v57;
LABEL_51:
        v39 = v52 + 1;
        v50 += v137;
        v51 += v137;
      }
      while (v39 != v131);
      v39 = v131;
      v2 = v129;
      v18 = v130;
      a1 = v141;
      v40 = v133;
    }
    goto LABEL_58;
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v27 = a1;
  v28 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v7 = __chkstk_darwin(v28);
  v31 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (double *)((char *)&v25 - v10);
  result = __chkstk_darwin(v9);
  v15 = (double *)((char *)&v25 - v14);
  v30 = a3;
  v26 = a2;
  if (a3 != a2)
  {
    v16 = *(_QWORD *)(v13 + 72);
    v33 = v16 * (v30 - 1);
    v29 = v16;
    v32 = v16 * v30;
LABEL_5:
    v17 = 0;
    v18 = v27;
    while (1)
    {
      v19 = *a4;
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v32 + v17 + *a4, (uint64_t)v15);
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v33 + v17 + v19, (uint64_t)v11);
      v20 = v15[2];
      v21 = v11[2];
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v11);
      result = outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v15);
      if (v21 >= v20)
      {
LABEL_4:
        v33 += v29;
        v32 += v29;
        if (++v30 == v26)
          return result;
        goto LABEL_5;
      }
      v22 = *a4;
      if (!*a4)
        break;
      v23 = v22 + v32 + v17;
      v24 = v22 + v33 + v17;
      outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v23, v31);
      swift_arrayInitWithTakeFrontToBack(v23, v24);
      result = outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v31, v24);
      v17 -= v29;
      if (v30 == ++v18)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v28 = a1;
  v7 = type metadata accessor for Date(0);
  v31 = *(_QWORD *)(v7 - 8);
  v32 = v7;
  v8 = __chkstk_darwin(v7);
  v30 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v12 = (char *)&v26 - v11;
  v27 = a2;
  if (a3 != a2)
  {
    v33 = *a4;
    v13 = (_QWORD *)(v33 + 8 * a3 - 8);
LABEL_5:
    v14 = *(_QWORD *)(v33 + 8 * a3);
    v15 = v28;
    v29 = v13;
    while (1)
    {
      v16 = *v13;
      v17 = *(void **)(v14 + 16);
      swift_retain(v14);
      swift_retain(v16);
      v18 = objc_msgSend(v17, "displayStartDate");
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v19 = objc_msgSend(*(id *)(v16 + 16), "displayStartDate");
      v20 = v30;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v19) = static Date.< infix(_:_:)(v12, v20);
      v21 = a3;
      v22 = *(void (**)(char *, uint64_t))(v31 + 8);
      v23 = v20;
      v24 = v32;
      v22(v23, v32);
      v22(v12, v24);
      a3 = v21;
      swift_release(v14);
      result = swift_release(v16);
      if ((v19 & 1) == 0)
      {
LABEL_4:
        a3 = v21 + 1;
        v13 = v29 + 1;
        if (v21 + 1 == v27)
          return result;
        goto LABEL_5;
      }
      if (!v33)
        break;
      v25 = *v13;
      v14 = v13[1];
      *v13 = v14;
      v13[1] = v25;
      --v13;
      if (v21 == ++v15)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v29 = a1;
  v30 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v7 = __chkstk_darwin(v30);
  v33 = (uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v27 - v10;
  result = __chkstk_darwin(v9);
  v15 = (char *)&v27 - v14;
  v32 = a3;
  v28 = a2;
  if (a3 != a2)
  {
    v16 = *(_QWORD *)(v13 + 72);
    v35 = v16 * (v32 - 1);
    v31 = v16;
    v34 = v16 * v32;
LABEL_5:
    v17 = 0;
    v18 = v29;
    while (1)
    {
      v19 = a4;
      v20 = *a4;
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v34 + v17 + v20, (uint64_t)v15);
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v35 + v17 + v20, (uint64_t)v11);
      v21 = *((_QWORD *)v15 + 3);
      v22 = *((_QWORD *)v11 + 3);
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v11);
      result = outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v15);
      v23 = v21 < v22;
      a4 = v19;
      if (!v23)
      {
LABEL_4:
        v35 += v31;
        v34 += v31;
        if (++v32 == v28)
          return result;
        goto LABEL_5;
      }
      v24 = *v19;
      if (!*v19)
        break;
      v25 = v24 + v34 + v17;
      v26 = v24 + v35 + v17;
      outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v25, v33);
      swift_arrayInitWithTakeFrontToBack(v25, v26);
      result = outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v33, v26);
      v17 -= v31;
      ++v18;
      a4 = v19;
      if (v32 == v18)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v29 = a1;
  v30 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  v7 = __chkstk_darwin(v30);
  v34 = (uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v31 = (uint64_t)&v27 - v10;
  result = __chkstk_darwin(v9);
  v14 = (char *)&v27 - v13;
  v33 = a3;
  v28 = a2;
  if (a3 != a2)
  {
    v15 = *(_QWORD *)(v12 + 72);
    v36 = v15 * (v33 - 1);
    v32 = v15;
    v35 = v15 * v33;
    v16 = type metadata accessor for MOSuggestionSheetAssetDateRange;
LABEL_5:
    v17 = 0;
    v18 = v29;
    while (1)
    {
      v19 = *a4;
      outlined init with copy of MOSuggestionSheetAssetDateRange(v35 + v17 + *a4, (uint64_t)v14, v16);
      v20 = v31;
      outlined init with copy of MOSuggestionSheetAssetDateRange(v36 + v17 + v19, v31, v16);
      LOBYTE(v19) = static Date.< infix(_:_:)(v14, v20);
      outlined destroy of MOSuggestionSheetAssetDateRange(v20);
      result = outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v14);
      if ((v19 & 1) == 0)
      {
LABEL_4:
        v36 += v32;
        v35 += v32;
        if (++v33 == v28)
          return result;
        goto LABEL_5;
      }
      v21 = *a4;
      if (!*a4)
        break;
      v22 = v16;
      v23 = a4;
      v24 = v21 + v35 + v17;
      v25 = v21 + v36 + v17;
      v26 = v22;
      outlined init with take of MOSuggestionSheetAssetDateRange(v24, v34, v22);
      swift_arrayInitWithTakeFrontToBack(v24, v25);
      result = outlined init with take of MOSuggestionSheetAssetDateRange(v34, v25, v26);
      v17 -= v32;
      ++v18;
      a4 = v23;
      v16 = v26;
      if (v33 == v18)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v29;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  double v34;
  double v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v41 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v8 = __chkstk_darwin(v41);
  v10 = (double *)((char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v12 = (double *)((char *)&v40 - v11);
  v14 = *(_QWORD *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1)
    goto LABEL_70;
  v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1)
    goto LABEL_71;
  v16 = (uint64_t)(a2 - a1) / v14;
  v44 = a1;
  v43 = a4;
  v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      v19 = v17 * v14;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v29 = a4 + v19;
      v42 = a4 + v19;
      v44 = a2;
      if (v19 >= 1 && a1 < a2)
      {
        v31 = -v14;
        do
        {
          v32 = a3 + v31;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v29 + v31, (uint64_t)v12);
          v33 = a2 + v31;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(a2 + v31, (uint64_t)v10);
          v34 = v12[2];
          v35 = v10[2];
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v10);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v12);
          if (v35 >= v34)
          {
            v36 = v42;
            v37 = v42 + v31;
            v42 += v31;
            if (a3 < v36 || v32 >= v36)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v31, v37);
            }
            else if (a3 != v36)
            {
              swift_arrayInitWithTakeBackToFront(a3 + v31, v37);
            }
            v33 = a2;
          }
          else
          {
            if (a3 < a2 || v32 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v31, a2 + v31);
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront(a3 + v31, a2 + v31);
            }
            v44 += v31;
          }
          v29 = v42;
          if (v42 <= a4)
            break;
          a2 = v33;
          a3 += v31;
        }
        while (v33 > a1);
      }
      goto LABEL_68;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v20 = a4 + v18;
    v42 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      do
      {
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(a2, (uint64_t)v12);
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(a4, (uint64_t)v10);
        v22 = v12[2];
        v23 = v10[2];
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v10);
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v12);
        v24 = v44;
        if (v23 >= v22)
        {
          v27 = v43 + v14;
          if (v44 < v43 || v44 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack(v44, v43);
          }
          else if (v44 != v43)
          {
            swift_arrayInitWithTakeBackToFront(v44, v43);
          }
          v43 = v27;
          v25 = a2;
        }
        else
        {
          v25 = a2 + v14;
          if (v44 < a2 || v44 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack(v44, a2);
          }
          else if (v44 == a2)
          {
            v24 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v44, a2);
          }
        }
        v44 = v24 + v14;
        a4 = v43;
        if (v43 >= v20)
          break;
        a2 = v25;
      }
      while (v25 < a3);
    }
LABEL_68:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v44, &v43, (uint64_t *)&v42);
    return 1;
  }
LABEL_72:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v29;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t result;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;

  v50 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v8 = __chkstk_darwin(v50);
  v51 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v47 - v10;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_71;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_72;
  v15 = (uint64_t)(a2 - a1) / v13;
  v54 = a1;
  v53 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v29 = a4 + v18;
      v52 = a4 + v18;
      v54 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v31 = -v13;
        v48 = a4;
        v49 = a1;
        do
        {
          v32 = a3 + v31;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v29 + v31, (uint64_t)v11);
          v33 = a2 + v31;
          v34 = a3;
          v35 = (uint64_t)v11;
          v36 = v51;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(a2 + v31, v51);
          v37 = *(_QWORD *)(v35 + 24);
          v38 = *(_QWORD *)(v36 + 24);
          v39 = v36;
          v11 = (char *)v35;
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v39);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v35);
          if (v37 >= v38)
          {
            v43 = v52;
            v44 = v52 + v31;
            v52 += v31;
            if (v34 < v43 || v32 >= v43)
            {
              swift_arrayInitWithTakeFrontToBack(v32, v44);
              v33 = a2;
              v41 = v48;
              v42 = v49;
            }
            else
            {
              v42 = v49;
              if (v34 != v43)
                swift_arrayInitWithTakeBackToFront(v32, v44);
              v33 = a2;
              v41 = v48;
            }
          }
          else
          {
            if (v34 < a2 || v32 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v32, a2 + v31);
              v41 = v48;
              v42 = v49;
            }
            else
            {
              v40 = v34 == a2;
              v41 = v48;
              v42 = v49;
              if (!v40)
                swift_arrayInitWithTakeBackToFront(v32, a2 + v31);
            }
            v54 += v31;
          }
          v29 = v52;
          if (v52 <= v41)
            break;
          a2 = v33;
          a3 = v32;
        }
        while (v33 > v42);
      }
      goto LABEL_69;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v19 = a4 + v17;
    v52 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      v21 = v51;
      do
      {
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(a2, (uint64_t)v11);
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(a4, v21);
        v22 = *((_QWORD *)v11 + 3);
        v23 = *(_QWORD *)(v21 + 24);
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v21);
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v11);
        v24 = v54;
        if (v22 >= v23)
        {
          v27 = v53 + v13;
          if (v54 < v53 || v54 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack(v54, v53);
          }
          else if (v54 != v53)
          {
            swift_arrayInitWithTakeBackToFront(v54, v53);
          }
          v53 = v27;
          v25 = a2;
        }
        else
        {
          v25 = a2 + v13;
          if (v54 < a2 || v54 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack(v54, a2);
          }
          else if (v54 == a2)
          {
            v24 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v54, a2);
          }
        }
        v54 = v24 + v13;
        a4 = v53;
        if (v53 >= v19)
          break;
        a2 = v25;
      }
      while (v25 < a3);
    }
LABEL_69:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v54, &v53, (uint64_t *)&v52);
    return 1;
  }
LABEL_73:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;

  v43 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  v8 = __chkstk_darwin(v43);
  v44 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v41 - v10;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_62;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_63;
  v15 = (uint64_t)(a2 - a1) / v13;
  v47 = a1;
  v46 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v26 = a4 + v18;
      v45 = a4 + v18;
      v47 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v28 = -v13;
        v42 = a1;
        do
        {
          v29 = a3 + v28;
          outlined init with copy of MOSuggestionSheetAssetDateRange(v26 + v28, (uint64_t)v11, type metadata accessor for MOSuggestionSheetAssetDateRange);
          v30 = a2 + v28;
          v31 = a3;
          v32 = (uint64_t)v11;
          v33 = v44;
          outlined init with copy of MOSuggestionSheetAssetDateRange(a2 + v28, v44, type metadata accessor for MOSuggestionSheetAssetDateRange);
          v34 = static Date.< infix(_:_:)(v32, v33);
          v35 = v33;
          v11 = (char *)v32;
          outlined destroy of MOSuggestionSheetAssetDateRange(v35);
          outlined destroy of MOSuggestionSheetAssetDateRange(v32);
          if ((v34 & 1) != 0)
          {
            if (v31 < a2 || v29 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v29, a2 + v28);
              v37 = v42;
            }
            else
            {
              v36 = v31 == a2;
              v37 = v42;
              if (!v36)
                swift_arrayInitWithTakeBackToFront(v29, a2 + v28);
            }
            v47 += v28;
          }
          else
          {
            v38 = v45;
            v39 = v45 + v28;
            v45 += v28;
            if (v31 < v38 || v29 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack(v29, v39);
              v30 = a2;
              v37 = v42;
            }
            else
            {
              v36 = v31 == v38;
              v37 = v42;
              if (!v36)
                swift_arrayInitWithTakeBackToFront(v29, v39);
              v30 = a2;
            }
          }
          v26 = v45;
          if (v45 <= a4)
            break;
          a2 = v30;
          a3 = v29;
        }
        while (v30 > v37);
      }
      goto LABEL_60;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v19 = a4 + v17;
    v45 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      v21 = v44;
      do
      {
        outlined init with copy of MOSuggestionSheetAssetDateRange(a2, (uint64_t)v11, type metadata accessor for MOSuggestionSheetAssetDateRange);
        outlined init with copy of MOSuggestionSheetAssetDateRange(a4, v21, type metadata accessor for MOSuggestionSheetAssetDateRange);
        v22 = static Date.< infix(_:_:)(v11, v21);
        outlined destroy of MOSuggestionSheetAssetDateRange(v21);
        outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v11);
        v23 = v47;
        if ((v22 & 1) != 0)
        {
          v24 = a2 + v13;
          if (v47 < a2 || v47 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v47, a2);
          }
          else if (v47 == a2)
          {
            v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v47, a2);
          }
        }
        else
        {
          v25 = v46 + v13;
          if (v47 < v46 || v47 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack(v47, v46);
          }
          else if (v47 != v46)
          {
            swift_arrayInitWithTakeBackToFront(v47, v46);
          }
          v46 = v25;
          v24 = a2;
        }
        v47 = v23 + v13;
        a4 = v46;
        if (v46 >= v19)
          break;
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_60:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v47, &v46, (uint64_t *)&v45);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v6 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v7 < 0)
    v24 = v7;
  else
    v24 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v7);
  if (v9 < v5)
    goto LABEL_34;
LABEL_4:
  v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v26 = v7;
    else
      v26 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v14 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v7);
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v25 = v7;
  else
    v25 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v10 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v7);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v7);
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v7);
  swift_bridgeObjectRelease(*v4);
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v6);
  v16 = type metadata accessor for MOSuggestionCollectionViewCellViewModel();
  v17 = (char *)swift_arrayDestroy(v15, v9, v16);
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    return specialized Array._endMutation()(v17);
  }
  if (!((unint64_t)v7 >> 62))
  {
    v18 = *(_QWORD *)(v13 + 16);
    v19 = v18 - v5;
    if (!__OFSUB__(v18, v5))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v7 < 0)
    v27 = v7;
  else
    v27 = v13;
  swift_bridgeObjectRetain(v7);
  v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v7);
  v19 = v28 - v5;
  if (__OFSUB__(v28, v5))
    goto LABEL_52;
LABEL_21:
  if ((v19 & 0x8000000000000000) == 0)
  {
    v17 = (char *)(v15 + 1);
    v20 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v20 || v17 >= &v20[8 * v19])
      v17 = (char *)memmove(v17, v20, 8 * v19);
    if (!((unint64_t)v7 >> 62))
    {
      v21 = *(_QWORD *)(v13 + 16);
      v22 = v21 + v8;
      if (!__OFADD__(v21, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v22;
        goto LABEL_28;
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v7 < 0)
      v29 = v7;
    else
      v29 = v13;
    swift_bridgeObjectRetain(v7);
    v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(v7);
    v22 = v30 + v8;
    if (!__OFADD__(v30, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = (_QWORD *)*v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v3);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MOSuggestionCollectionViewCellViewModel]>, (uint64_t *)&demangling cache variable for type metadata for [MOSuggestionCollectionViewCellViewModel]);
  }
  v14 = &v5[a1 + 4];
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [MOSuggestionCollectionViewCellViewModel]);
  result = (char *)swift_arrayDestroy(v14, v8, v15);
  if (!v9)
    goto LABEL_20;
  v17 = v5[2];
  v18 = __OFSUB__(v17, a2);
  v19 = v17 - a2;
  if (v18)
    goto LABEL_26;
  if ((v19 & 0x8000000000000000) == 0)
  {
    result = (char *)(v14 + 1);
    v20 = &v5[a2 + 4];
    if (v14 + 1 != v20 || result >= (char *)&v20[v19])
      result = (char *)memmove(result, v20, 8 * v19);
    v21 = v5[2];
    v18 = __OFADD__(v21, v9);
    v22 = v21 + v9;
    if (!v18)
    {
      v5[2] = v22;
LABEL_20:
      *v14 = a3;
      *v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v23 = 2;
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v23, 1046, 0);
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t v35;

  v8 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v15 = (char *)&v30 - v14;
  v35 = a4;
  v18 = *(_QWORD *)(a4 + 56);
  v17 = a4 + 56;
  v16 = v18;
  v19 = -1 << *(_BYTE *)(v17 - 24);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    *a1 = v35;
    a1[1] = v17;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v32 = -1 << *(_BYTE *)(v17 - 24);
  v33 = a1;
  v22 = 0;
  v23 = 0;
  v34 = (unint64_t)(63 - v19) >> 6;
  v31 = v34 - 1;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(*(_QWORD *)(v35 + 48) + v29 * v25, (uint64_t)v12);
    outlined init with take of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v12, (uint64_t)v15);
    result = outlined init with take of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v15, a2);
    if (v23 == a3)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v34)
      goto LABEL_32;
    v27 = *(_QWORD *)(v17 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v34)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v17 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v34)
    goto LABEL_32;
  v27 = *(_QWORD *)(v17 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v17 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v17 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v34)
    {
      v21 = 0;
      v22 = v31;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v17 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t outlined assign with take of MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

double specialized static MOSuggestionAssetMapsClusterer.makeRegion(containing:applyBottomPaddingForPlatter:applyBottomPaddingForGradient:horizontalAspectRatio:markerStyle:applyRenderMargin:shouldAdjustMarker:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  double latitude;
  double v14;
  uint64_t v15;
  char v16;
  char v17;
  int64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  double v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  double *v28;
  id v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double latitudeDelta;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  char v49;
  MKMapRect v50;
  MKCoordinateRegion v51;
  MKMapRect v52;

  v8 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v43 = a1;
    else
      v43 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    if (_CocoaArrayWrapper.endIndex.getter(v43))
      goto LABEL_3;
  }
  else
  {
    v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v9)
    {
LABEL_3:
      v49 = a5;
      if ((a1 & 0xC000000000000001) != 0)
      {
        v10 = a2;
        v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
LABEL_6:
        v12 = swift_bridgeObjectRelease(a1);
        latitude = (*(double (**)(uint64_t))(*(_QWORD *)v11 + 240))(v12);
        (*(void (**)(void))(*(_QWORD *)v11 + 264))();
        v14 = (*(double (**)(void))(*(_QWORD *)v11 + 456))();
        v15 = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 312))();
        v17 = v16;
        if (v8)
        {
          if (a1 < 0)
            v20 = a1;
          else
            v20 = a1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a1);
          v18 = _CocoaArrayWrapper.endIndex.getter(v20);
          swift_bridgeObjectRelease(a1);
          if (v18 < 2)
          {
LABEL_8:
            if ((v17 & 1) != 0 || v15 < 2)
            {
              if (v14 <= 0.0)
              {
                swift_release(v11);
                v19 = 0.04;
              }
              else
              {
                if (one-time initialization token for LOW_CONFIDENCE_HIGH_CERTAINTITY_THRESHOLD != -1)
                  swift_once(&one-time initialization token for LOW_CONFIDENCE_HIGH_CERTAINTITY_THRESHOLD, one-time initialization function for LOW_CONFIDENCE_HIGH_CERTAINTITY_THRESHOLD);
                v40 = *(double *)&static MOMapLocation.LOW_CONFIDENCE_HIGH_CERTAINTITY_THRESHOLD;
                swift_release(v11);
                v41 = v14 / 111000.0;
                if (v14 >= v40)
                {
                  v42 = v41 * 3.0 + 0.003;
                  if (v42 <= 0.1)
                    v19 = v42;
                  else
                    v19 = 0.1;
                }
                else
                {
                  v19 = v41 + v41 + 0.003;
                }
              }
            }
            else
            {
              swift_release(v11);
              v19 = 0.01;
            }
            latitudeDelta = v19;
            if ((v49 & 1) != 0)
            {
LABEL_34:
              v39 = 1.4;
LABEL_35:
              if ((v10 & 1) != 0)
                return latitude + latitudeDelta * v39 * 1.4 / -12.0;
              return latitude;
            }
LABEL_23:
            v39 = 1.1;
            goto LABEL_35;
          }
        }
        else
        {
          v18 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v18 < 2)
            goto LABEL_8;
        }
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
        v21 = 0;
        do
        {
          if ((a1 & 0xC000000000000001) != 0)
          {
            v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(v21, a1);
          }
          else
          {
            v22 = *(_QWORD *)(a1 + 8 * v21 + 32);
            v23 = swift_retain(v22);
          }
          v24 = (*(double (**)(__n128))(*(_QWORD *)v22 + 240))(v23);
          v25 = (*(double (**)(void))(*(_QWORD *)v22 + 264))();
          swift_release(v22);
          v27 = _swiftEmptyArrayStorage[2];
          v26 = _swiftEmptyArrayStorage[3];
          if (v27 >= v26 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
          ++v21;
          _swiftEmptyArrayStorage[2] = v27 + 1;
          v28 = (double *)&_swiftEmptyArrayStorage[2 * v27 + 4];
          *v28 = v24;
          v28[1] = v25;
        }
        while (v18 != v21);
        v29 = objc_msgSend((id)objc_opt_self(MKPolygon), "polygonWithCoordinates:count:", &_swiftEmptyArrayStorage[4], v18);
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        objc_msgSend(v29, "boundingMapRect");
        v31 = v30;
        v33 = v32;
        v35 = v34;
        v37 = v36;

        v50.origin.x = v31;
        v50.origin.y = v33;
        v50.size.width = v35;
        v50.size.height = v37;
        v51 = MKCoordinateRegionForMapRect(v50);
        latitude = v51.center.latitude;
        latitudeDelta = v51.span.latitudeDelta;
        swift_release(v11);
        if ((v49 & 1) != 0)
          goto LABEL_34;
        goto LABEL_23;
      }
      if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v10 = a2;
        v11 = *(_QWORD *)(a1 + 32);
        swift_retain(v11);
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_49;
    }
  }
  swift_bridgeObjectRelease(a1);
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1)
LABEL_49:
    swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
  v44 = type metadata accessor for Logger(0);
  __swift_project_value_buffer(v44, (uint64_t)static MOAngelLogger.assets);
  v45 = Logger.logObject.getter();
  v46 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "[MapSnapshot] makeRegion failed with 0 locations", v47, 2u);
    swift_slowDealloc(v47, -1, -1);
  }

  v52.origin.x = MKMapRectNull.origin.x;
  v52.origin.y = MKMapRectNull.origin.y;
  v52.size.width = MKMapRectNull.size.width;
  v52.size.height = MKMapRectNull.size.height;
  *(_QWORD *)&latitude = (unint64_t)MKCoordinateRegionForMapRect(v52);
  return latitude;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOMusicPlaybackCoordinatorDelegate);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 32 * a1 + 32;
    v7 = a3 + 32 * v4;
    if (v6 >= v7 || v6 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MOAssetAndMediaType, Int));
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 112 * a1 + 32;
  v6 = a3 + 112 * v4;
  if (v5 >= v6 || v5 + 112 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 32 * a1 + 32;
    v7 = a3 + 32 * v4;
    if (v6 >= v7 || v6 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (presentationDetails: MOClientPresentationDetails, handler: ()));
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t specialized static MOSuggestionAssetMapsClusterer.clusteredPins(locations:targetRegion:numBuckets:)(unint64_t a1, uint64_t a2, double a3, long double a4, double a5, double a6)
{
  uint64_t v11;
  unint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  long double v21;
  double v23;
  double v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  _QWORD *v30;
  uint64_t (*v31)();
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  unint64_t v56;
  unint64_t v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  NSMutableDictionary *connectionProperties;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  uint8_t *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t result;
  _BYTE *v110;
  uint64_t v111;
  char *v112;
  int64_t v113;
  uint64_t v114;
  uint64_t v115;
  int64_t v116;
  int64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[4];
  uint64_t v124;
  uint64_t v125;
  char v126[24];
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;

  v11 = a1;
  v12 = a1 >> 62;
  if (a1 >> 62)
    goto LABEL_149;
  if (*(uint64_t *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) < 2)
  {
LABEL_153:
    swift_bridgeObjectRetain(v11);
    return v11;
  }
LABEL_3:
  if ((~*(_QWORD *)&a4 & 0x7FF0000000000000) != 0 && a4 < 0.0)
    a4 = remainder(a4, 360.0) + 360.0;
  v13 = a6 * 0.5;
  a6 = a4 - a6 * 0.5;
  v14 = a5 * 0.5 + a3;
  a5 = a3 - a5 * 0.5;
  v15 = vabdd_f64(a5, v14) / (double)a2;
  if (v15 <= 0.0)
    goto LABEL_153;
  v16 = vabdd_f64(a6, a4 + v13) / (double)a2;
  if (v16 <= 0.0)
    goto LABEL_153;
  v130 = &_swiftEmptyDictionarySingleton;
  if (!v12)
  {
    v17 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v11);
    if (v17)
      goto LABEL_10;
LABEL_55:
    swift_bridgeObjectRelease(v11);
    v51 = &_swiftEmptyDictionarySingleton;
LABEL_56:
    v129 = (uint64_t)_swiftEmptyArrayStorage;
    v112 = v51 + 64;
    v53 = 1 << v51[32];
    v54 = -1;
    if (v53 < 64)
      v54 = ~(-1 << v53);
    v12 = v54 & *((_QWORD *)v51 + 8);
    v113 = (unint64_t)(v53 + 63) >> 6;
    swift_bridgeObjectRetain(v51);
    v55 = 0;
    v110 = v51;
    while (1)
    {
      if (v12)
      {
        v56 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v119 = v12;
        v57 = v56 | (v55 << 6);
      }
      else
      {
        v58 = v55 + 1;
        if (__OFADD__(v55, 1))
          goto LABEL_145;
        if (v58 >= v113)
        {
LABEL_135:
          swift_release(v51);
          v11 = v129;
          swift_bridgeObjectRelease(v130);
          return v11;
        }
        v59 = *(_QWORD *)&v112[8 * v58];
        ++v55;
        if (!v59)
        {
          v55 = v58 + 1;
          if (v58 + 1 >= v113)
            goto LABEL_135;
          v59 = *(_QWORD *)&v112[8 * v55];
          if (!v59)
          {
            v55 = v58 + 2;
            if (v58 + 2 >= v113)
              goto LABEL_135;
            v59 = *(_QWORD *)&v112[8 * v55];
            if (!v59)
            {
              v60 = v58 + 3;
              if (v60 >= v113)
                goto LABEL_135;
              v59 = *(_QWORD *)&v112[8 * v60];
              if (!v59)
              {
                while (1)
                {
                  v55 = v60 + 1;
                  if (__OFADD__(v60, 1))
                    break;
                  if (v55 >= v113)
                    goto LABEL_135;
                  v59 = *(_QWORD *)&v112[8 * v55];
                  ++v60;
                  if (v59)
                    goto LABEL_75;
                }
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
                goto LABEL_158;
              }
              v55 = v60;
            }
          }
        }
LABEL_75:
        v119 = (v59 - 1) & v59;
        v57 = __clz(__rbit64(v59)) + (v55 << 6);
      }
      v61 = *(_QWORD *)(*((_QWORD *)v51 + 7) + 8 * v57);
      connectionProperties = serverManager._connectionProperties;
      swift_bridgeObjectRetain(v61);
      if (connectionProperties != (NSMutableDictionary *)-1)
        swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
      v63 = type metadata accessor for Logger(0);
      __swift_project_value_buffer(v63, (uint64_t)static MOAngelLogger.assets);
      v64 = swift_bridgeObjectRetain_n(v61, 2);
      v65 = Logger.logObject.getter(v64);
      a2 = static os_log_type_t.debug.getter();
      v66 = (unint64_t)v61 >> 62;
      if (os_log_type_enabled(v65, (os_log_type_t)a2))
      {
        v67 = swift_slowAlloc(12, -1);
        *(_DWORD *)v67 = 134217984;
        if (v66)
        {
          if (v61 < 0)
            v98 = v61;
          else
            v98 = v61 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v61);
          v12 = _CocoaArrayWrapper.endIndex.getter(v98);
          swift_bridgeObjectRelease(v61);
        }
        else
        {
          v12 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease(v61);
        *(_QWORD *)(v67 + 4) = v12;
        swift_bridgeObjectRelease(v61);
        _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)a2, "[ClusterPins] Group Count %ld", (uint8_t *)v67, 0xCu);
        swift_slowDealloc(v67, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v61, 2);
      }
      if (v66)
      {
        if (v61 >= 0)
          v11 = v61 & 0xFFFFFFFFFFFFFF8;
        else
          v11 = v61;
        swift_bridgeObjectRetain(v61);
        a2 = _CocoaArrayWrapper.endIndex.getter(v11);
        swift_bridgeObjectRelease(v61);
        if (a2 <= 1)
        {
          swift_bridgeObjectRetain(v61);
          v11 = _CocoaArrayWrapper.endIndex.getter(v11);
          swift_bridgeObjectRelease(v61);
LABEL_124:
          if (!v11)
          {
            swift_bridgeObjectRelease(v61);
            v12 = v119;
            continue;
          }
          if ((v61 & 0xC000000000000001) != 0)
          {
            v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v61);
            goto LABEL_128;
          }
          if (*(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            v11 = *(_QWORD *)(v61 + 32);
            swift_retain(v11);
LABEL_128:
            swift_bridgeObjectRelease(v61);
            v100 = Logger.logObject.getter(v99);
            v101 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v100, v101))
            {
              v102 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v102 = 0;
              _os_log_impl((void *)&_mh_execute_header, v100, v101, "[ClusterPins] Single location pass through", v102, 2u);
              swift_slowDealloc(v102, -1, -1);
            }

            swift_retain(v11);
            a2 = (uint64_t)&v129;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v103);
            v105 = *(_QWORD *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v104 = *(_QWORD *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x18);
            v12 = v119;
            if (v105 >= v104 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v104 > 1, v105 + 1, 1);
            v106 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v105, v11);
            specialized Array._endMutation()(v106);
            swift_release(v11);
            continue;
          }
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          if (v11 < 0)
            v107 = v11;
          else
            v107 = v11 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v11);
          v108 = _CocoaArrayWrapper.endIndex.getter(v107);
          swift_bridgeObjectRelease(v11);
          if (v108 < 2)
            goto LABEL_153;
          goto LABEL_3;
        }
        v116 = v55;
        v127 = 0;
        v128 = 0;
        swift_bridgeObjectRetain(v61);
        v97 = _CocoaArrayWrapper.endIndex.getter(v11);
        if (!v97)
        {
          swift_bridgeObjectRelease_n(v61, 2);
          v12 = v119;
          continue;
        }
        v68 = v97;
        if (v97 < 1)
          goto LABEL_146;
        v111 = v61 & 0xFFFFFFFFFFFFFF8;
        v114 = a2;
      }
      else
      {
        v11 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if ((unint64_t)v11 <= 1)
          goto LABEL_124;
        v111 = v61 & 0xFFFFFFFFFFFFFF8;
        v116 = v55;
        v127 = 0;
        v128 = 0;
        swift_bridgeObjectRetain(v61);
        v114 = v11;
        v68 = v11;
      }
      v69 = v61 & 0xC000000000000001;
      swift_beginAccess(&v127, v123, 1, 0);
      swift_beginAccess(&v128, v126, 1, 0);
      v70 = 0;
      v12 = 0;
      v121 = 0;
      a5 = 0.0;
      a6 = 0.0;
      do
      {
        if (v69)
        {
          a2 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v61);
        }
        else
        {
          a2 = *(_QWORD *)(v61 + 8 * v12 + 32);
          v71 = swift_retain(a2);
        }
        a4 = (*(double (**)(__n128))(*(_QWORD *)a2 + 240))(v71);
        a3 = (*(double (**)(void))(*(_QWORD *)a2 + 264))();
        v11 = *(_QWORD *)(*(_QWORD *)a2 + 288);
        v72 = ((uint64_t (*)(void))v11)();
        if (v72)
        {
          v73 = v72;
          v74 = (void *)((uint64_t (*)(void))v11)();
          if (v74
            && (v75 = v74,
                v76 = objc_msgSend(v74, "_poiCategory"),
                swift_unknownObjectRelease(v75),
                v76))
          {

            v77 = v127;
            v127 = v73;
            v72 = swift_unknownObjectRelease(v77);
            v121 = v73;
          }
          else
          {
            v72 = swift_unknownObjectRelease(v73);
          }
        }
        v78 = ((uint64_t (*)(uint64_t))v11)(v72);
        swift_release(a2);
        swift_unknownObjectRelease(v70);
        v79 = v128 + 1;
        if (__OFADD__(v128, 1))
        {
          __break(1u);
          goto LABEL_137;
        }
        ++v12;
        a6 = a6 + a4;
        a5 = a5 + a3;
        ++v128;
        v70 = v78;
      }
      while (v68 != v12);
      swift_bridgeObjectRelease(v61);
      v11 = v121;
      if (v121)
      {
        v55 = v116;
        if (v79 > 0)
          goto LABEL_101;
LABEL_106:
        swift_bridgeObjectRelease(v61);
        swift_unknownObjectRelease(v78);
        swift_unknownObjectRelease(v11);
        v51 = v110;
        v12 = v119;
        continue;
      }
      v55 = v116;
      if (v78)
      {
        v81 = v127;
        v127 = v78;
        swift_unknownObjectRetain();
        v80 = swift_unknownObjectRelease(v81);
        v11 = v78;
      }
      if (v79 <= 0)
        goto LABEL_106;
LABEL_101:
      v122 = v11;
      v82 = Logger.logObject.getter(v80);
      v83 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v82, v83))
      {
        v117 = v55;
        v84 = swift_slowAlloc(22, -1);
        v85 = swift_slowAlloc(32, -1);
        *(_DWORD *)v84 = 134218242;
        v79 = v128;
        v124 = v128;
        v125 = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, &v125, v84 + 4);
        *(_WORD *)(v84 + 12) = 2080;
        v122 = v127;
        v124 = v127;
        v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GEOMapItem?);
        v87 = Optional.debugDescription.getter(v86);
        v89 = v88;
        v124 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, &v125);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, &v125, v84 + 14);
        swift_bridgeObjectRelease(v89);
        _os_log_impl((void *)&_mh_execute_header, v82, v83, "[ClusterPins] Conslidating %ld locations into a single pin, mapItem:%s", (uint8_t *)v84, 0x16u);
        swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v85, -1, -1);
        v90 = v84;
        v55 = v117;
        swift_slowDealloc(v90, -1, -1);
      }

      if (v69)
      {
        v11 = v122;
        swift_unknownObjectRetain();
        v91 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v61);
        goto LABEL_109;
      }
      v11 = v122;
      if (!*(_QWORD *)(v111 + 16))
      {
        __break(1u);
        goto LABEL_156;
      }
      v91 = *(_QWORD *)(v61 + 32);
      swift_unknownObjectRetain();
      swift_retain(v91);
LABEL_109:
      swift_bridgeObjectRelease(v61);
      a4 = a6 / (double)v79;
      a3 = a5 / (double)v114;
      a5 = (*(double (**)(void))(*(_QWORD *)v91 + 360))();
      swift_release(v91);
      v92 = type metadata accessor for MOMapLocation(0);
      swift_allocObject(v92, *(unsigned int *)(v92 + 48), *(unsigned __int16 *)(v92 + 52));
      v93 = MOMapLocation.init(latitude:longitude:title:clusterCount:geoMapItem:confidenceLevel:isWork:enclosingArea:horizontalUncertainty:isScaledDownPOI:poiCateogory:)(0, 0xE000000000000000, v79, 0, v11, 0, 0, 0, a4, a3, a5, 0.0, 0, 0, 0xE000000000000000);
      a2 = (uint64_t)&v129;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v93);
      v95 = *(_QWORD *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v94 = *(_QWORD *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v95 >= v94 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v94 > 1, v95 + 1, 1);
      v96 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v95, v93);
      specialized Array._endMutation()(v96);
      swift_unknownObjectRelease(v78);
      swift_unknownObjectRelease(v11);
      v51 = v110;
      v12 = v119;
    }
  }
  if (v11 < 0)
    v52 = v11;
  else
    v52 = v11 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v11);
  v17 = _CocoaArrayWrapper.endIndex.getter(v52);
  if (!v17)
    goto LABEL_55;
LABEL_10:
  v118 = a2 + 1;
  if (__OFADD__(a2, 1))
    goto LABEL_157;
  if (v17 >= 1)
  {
    v12 = 0;
    v120 = v11 & 0xC000000000000001;
    v115 = v17;
    do
    {
      if (v120)
      {
        v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v11);
      }
      else
      {
        v19 = *(_QWORD *)(v11 + 8 * v12 + 32);
        v20 = swift_retain(v19);
      }
      a2 = v19;
      a4 = (*(double (**)(__n128))(*(_QWORD *)v19 + 240))(v20);
      v21 = (*(double (**)(void))(*(_QWORD *)v19 + 264))();
      if (v21 < 0.0 && (*(_QWORD *)&v21 & 0x7FF0000000000000) != 0x7FF0000000000000)
      {
        a3 = 360.0;
        v21 = remainder(v21, 360.0) + 360.0;
      }
      v23 = (a4 - a5) / v15;
      if (v23 <= -9.22337204e18)
      {
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
        goto LABEL_147;
      }
      if (v23 >= 9.22337204e18)
        goto LABEL_138;
      v24 = (v21 - a6) / v16;
      if ((*(_QWORD *)&v23 & 0x7FF0000000000000) == 0x7FF0000000000000
        || (*(_QWORD *)&v24 & 0x7FF0000000000000) == 0x7FF0000000000000)
      {
        goto LABEL_139;
      }
      if (v24 <= -9.22337204e18)
        goto LABEL_140;
      if (v24 >= 9.22337204e18)
        goto LABEL_141;
      v26 = (uint64_t)v24 * v118;
      if ((unsigned __int128)((uint64_t)v24 * (__int128)v118) >> 64 != v26 >> 63)
        goto LABEL_142;
      v27 = (uint64_t)v23 + v26;
      if (__OFADD__((uint64_t)v23, v26))
        goto LABEL_143;
      v28 = v130;
      if (v130[2] && (specialized __RawDictionaryStorage.find<A>(_:)(v27), (v29 & 1) != 0))
      {
        a2 = (uint64_t)&v130;
        v31 = specialized Dictionary.subscript.modify(v123, v27);
        if (*v30)
        {
          a2 = (uint64_t)v30;
          swift_retain(v19);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v32);
          v34 = *(_QWORD *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v33 = *(_QWORD *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v34 >= v33 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
          v35 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v19);
          specialized Array._endMutation()(v35);
          ((void (*)(_QWORD *, _QWORD))v31)(v123, 0);
          swift_release(v19);
        }
        else
        {
          ((void (*)(_QWORD *, _QWORD))v31)(v123, 0);
          swift_release(v19);
        }
      }
      else
      {
        v36 = v11;
        v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v38 = swift_allocObject(v37, 40, 7);
        *(_OWORD *)(v38 + 16) = xmmword_10019EDA0;
        *(_QWORD *)(v38 + 32) = v19;
        v123[0] = v38;
        specialized Array._endMutation()(v38);
        v11 = v123[0];
        swift_retain(v19);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28);
        v123[0] = v28;
        a2 = (uint64_t)v28;
        v41 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
        v42 = v28[2];
        v43 = (v40 & 1) == 0;
        v44 = v42 + v43;
        if (__OFADD__(v42, v43))
          goto LABEL_144;
        v45 = v40;
        if (v28[3] >= v44)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, isUniquelyReferenced_nonNull_native);
          v46 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
          if ((v45 & 1) != (v47 & 1))
            goto LABEL_159;
          v41 = v46;
        }
        a2 = v123[0];
        if ((v45 & 1) != 0)
        {
          v18 = *(_QWORD *)(v123[0] + 56);
          swift_bridgeObjectRelease(*(_QWORD *)(v18 + 8 * v41));
          *(_QWORD *)(v18 + 8 * v41) = v11;
        }
        else
        {
          *(_QWORD *)(v123[0] + 8 * (v41 >> 6) + 64) |= 1 << v41;
          *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v41) = v27;
          *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v41) = v11;
          v48 = *(_QWORD *)(a2 + 16);
          v49 = __OFADD__(v48, 1);
          v50 = v48 + 1;
          if (v49)
            goto LABEL_148;
          *(_QWORD *)(a2 + 16) = v50;
        }
        v130 = (_QWORD *)a2;
        swift_release(v19);
        swift_bridgeObjectRelease(0x8000000000000000);
        v11 = v36;
        v17 = v115;
      }
      ++v12;
    }
    while (v17 != v12);
    swift_bridgeObjectRelease(v11);
    v51 = v130;
    goto LABEL_56;
  }
LABEL_158:
  __break(1u);
LABEL_159:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
  return result;
}

uint64_t specialized MOSuggestionAssetMapsClusterer.printClusters(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  void *object;
  Swift::String v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;

  v2 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster(0);
  result = __chkstk_darwin(v2);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v9 = *(_QWORD *)(v4 + 72);
    v25 = a1;
    swift_bridgeObjectRetain(a1);
    v26 = xmmword_10019ED20;
    do
    {
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v8, (uint64_t)v6);
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      v11 = swift_allocObject(v10, 64, 7);
      *(_OWORD *)(v11 + 16) = v26;
      v28 = 0;
      v29 = 0xE000000000000000;
      _StringGuts.grow(_:)(51);
      v12._countAndFlagsBits = 0x616E6964726F6F63;
      v12._object = (void *)0xED0000203A736574;
      String.append(_:)(v12);
      v27 = *(_OWORD *)v6;
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, Double));
      _print_unlocked<A, B>(_:_:)(&v27, &v28, v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v14._countAndFlagsBits = 0x6E6174736964202CLL;
      v14._object = (void *)0xEC000000203A6563;
      String.append(_:)(v14);
      Double.write<A>(to:)(&v28, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *((double *)v6 + 2));
      v15._countAndFlagsBits = 0x3A746E756F63202CLL;
      v15._object = (void *)0xE900000000000020;
      String.append(_:)(v15);
      *(_QWORD *)&v27 = *((_QWORD *)v6 + 3);
      v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v16._object;
      String.append(_:)(v16);
      swift_bridgeObjectRelease(object);
      v18._countAndFlagsBits = 0x3A6E69616863202CLL;
      v18._object = (void *)0xE900000000000020;
      String.append(_:)(v18);
      v19 = *((_QWORD *)v6 + 4);
      v20 = (void *)*((_QWORD *)v6 + 5);
      swift_bridgeObjectRetain(v20);
      v21._countAndFlagsBits = v19;
      v21._object = v20;
      String.append(_:)(v21);
      swift_bridgeObjectRelease(v20);
      v22 = v28;
      v23 = v29;
      *(_QWORD *)(v11 + 56) = &type metadata for String;
      *(_QWORD *)(v11 + 32) = v22;
      *(_QWORD *)(v11 + 40) = v23;
      print(_:separator:terminator:)(v11, 32, 0xE100000000000000, 10, 0xE100000000000000);
      swift_bridgeObjectRelease(v11);
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v6);
      v8 += v9;
      --v7;
    }
    while (v7);
    return swift_bridgeObjectRelease(v25);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in MOSuggestionAssetMapsClusterer.Cluster()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMapsClusterer.Cluster and conformance MOSuggestionAssetMapsClusterer.Cluster, type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster, (uint64_t)&protocol conformance descriptor for MOSuggestionAssetMapsClusterer.Cluster);
}

uint64_t sub_100025EB0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x78))();
  *a2 = result;
  return result;
}

uint64_t sub_100025EF0(_QWORD *a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x80);
  v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t sub_100025F30@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x90))();
  *a2 = result;
  return result;
}

uint64_t sub_100025F70(_QWORD *a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x98);
  v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

_QWORD *initializeBufferWithCopyOfBuffer for MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    v8 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v8;
    v9 = a3[8];
    v10 = a1 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    v14 = a3[10];
    *(_QWORD *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(_QWORD *)((char *)v4 + v14) = *(uint64_t *)((char *)a2 + v14);
    v15 = a3[11];
    v16 = a3[12];
    v17 = (_QWORD *)((char *)v4 + v15);
    v18 = (uint64_t *)((char *)a2 + v15);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    *((_BYTE *)v4 + v16) = *((_BYTE *)a2 + v16);
    v20 = a3[14];
    *((_BYTE *)v4 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    *(_QWORD *)((char *)v4 + v20) = *(uint64_t *)((char *)a2 + v20);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain(v19);
  }
  return v4;
}

uint64_t destroy for MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v4 = a1 + a2[8];
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_unknownObjectRelease(*(_QWORD *)(a1 + a2[9]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
}

uint64_t initializeWithCopy for MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = a3[8];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  v13 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v14 = a3[11];
  v15 = a3[12];
  v16 = (_QWORD *)(a1 + v14);
  v17 = (_QWORD *)(a2 + v14);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v19 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain(v18);
  return a1;
}

_QWORD *assignWithCopy for MOSuggestionAssetMapsClusterer.Cluster(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  v6 = a2[5];
  v7 = a1[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[8];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[9];
  v13 = *(_QWORD *)((char *)a1 + v12);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease(v13);
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  v14 = a3[11];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v17 = v16[1];
  v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  return a1;
}

_OWORD *initializeWithTake for MOSuggestionAssetMapsClusterer.Cluster(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[8];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  v12 = a3[12];
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  v13 = a3[14];
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  return a1;
}

uint64_t assignWithTake for MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v6);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[9];
  v12 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_unknownObjectRelease(v12);
  v13 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  return a1;
}

uint64_t getEnumTagSinglePayload for MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000264B4);
}

uint64_t sub_1000264B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002653C);
}

uint64_t sub_10002653C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 40) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];

  v4[0] = &unk_10019EE68;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = &unk_10019EE80;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = &unk_10019EE98;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = &unk_10019EE80;
    v4[8] = &unk_10019EEB0;
    v4[9] = &unk_10019EEB0;
    v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 11, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetPhotoLivePhotoVideosProvider.LivePhotoTask>, type metadata accessor for MOSuggestionAssetPhotoLivePhotoVideosProvider.LivePhotoTask);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  unint64_t *v4;
  unint64_t v6;
  int64_t v7;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int isUniquelyReferenced_nonNull_native;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  char v30;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v11 = v7 - v9;
  if (__OFADD__(v7, v10))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  if (!isUniquelyReferenced_nonNull_native || v11 > *(_QWORD *)(v6 + 24) >> 1)
  {
    if (v7 <= v11)
      v15 = v7 + v10;
    else
      v15 = v7;
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v6, a3, a4);
  }
  v16 = a4(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = v6 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v19 = *(_QWORD *)(v17 + 72);
  v20 = v19 * a1;
  v21 = v18 + v19 * a1;
  result = swift_arrayDestroy(v21, v9, v16);
  if (!v9)
    goto LABEL_25;
  v23 = *(_QWORD *)(v6 + 16);
  v24 = v23 - a2;
  if (__OFSUB__(v23, a2))
    goto LABEL_31;
  if ((v24 & 0x8000000000000000) == 0)
  {
    v25 = v18 + v19 * a2;
    if (v20 < v19 * a2 || v21 >= v25 + v24 * v19)
    {
      result = swift_arrayInitWithTakeFrontToBack(v21, v25);
    }
    else if (v20 != v19 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront(v21, v25);
    }
    v27 = *(_QWORD *)(v6 + 16);
    v28 = __OFADD__(v27, v10);
    v29 = v27 - v9;
    if (!v28)
    {
      *(_QWORD *)(v6 + 16) = v29;
LABEL_25:
      *v4 = v6;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  v30 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v30, 1046, 0);
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v21 = v5;
  else
    v21 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v7;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v5);
    goto LABEL_15;
  }
LABEL_37:
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v5 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v5);
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v5);
  swift_bridgeObjectRelease(*v3);
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = type metadata accessor for MOSuggestionCollectionViewCellViewModel();
  v14 = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6)
    return specialized Array._endMutation()(v14);
  if (!((unint64_t)v5 >> 62))
  {
    v15 = *(_QWORD *)(v11 + 16);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v5 < 0)
    v24 = v5;
  else
    v24 = v11;
  swift_bridgeObjectRetain(v5);
  v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v5);
  v16 = v25 - v2;
  if (__OFSUB__(v25, v2))
    goto LABEL_52;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v17 + 8 * v16)
      v14 = memmove((void *)(v11 + 32 + 8 * v4), v17, 8 * v16);
    if (!((unint64_t)v5 >> 62))
    {
      v18 = *(_QWORD *)(v11 + 16);
      v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v5 < 0)
      v26 = v5;
    else
      v26 = v11;
    swift_bridgeObjectRetain(v5);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v5);
    v19 = v27 + v6;
    if (!__OFADD__(v27, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v5 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v7 = a4 + 16 * a1 + 32;
    v8 = a3 + 16 * v5;
    if (v7 >= v8 || v7 + 16 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v5 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v7 = a4 + 8 * a1 + 32;
    v8 = a3 + 8 * v5;
    if (v7 >= v8 || v7 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t outlined consume of Set<String>.Iterator._Variant(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5 = v4;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v8 = v6;
  if (v3 == v7 && v5 == v6)
  {
    v9 = 1;
    v8 = v5;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v7, v6, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v8);
  return v9 & 1;
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v5;
  char v6;
  double result;

  if (*(_QWORD *)(a2 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v5, (uint64_t)a3);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

{
  unint64_t v5;
  char v6;
  double result;

  if (*(_QWORD *)(a2 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v5, (uint64_t)a3);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void *specialized Dictionary.subscript.getter(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  char v8;
  id v9;
  uint64_t v11;
  void *v12;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a1);
      if ((v8 & 1) != 0)
      {
        v6 = *(void **)(*(_QWORD *)(a2 + 56) + 8 * v7);
        v9 = v6;
        return v6;
      }
    }
    return 0;
  }
  v3 = a1;
  v4 = __CocoaDictionary.lookup(_:)();

  if (!v4)
    return 0;
  v11 = v4;
  v5 = type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for HKUnit, HKUnit_ptr);
  swift_unknownObjectRetain();
  swift_dynamicCast(&v12, &v11, (char *)&type metadata for Swift.AnyObject + 8, v5, 7);
  v6 = v12;
  swift_unknownObjectRelease(v4);
  return v6;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.__allocating_init(stateOfMindAssets:bundleStartDate:bundleEndDate:)(uint64_t a1, uint64_t a2, Swift::OpaquePointer a3)
{
  _OWORD *v3;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  Swift::String v23;
  unint64_t object;
  uint64_t v25;
  uint64_t v26;
  void (**v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  id v32;
  _OWORD *v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  char v45;
  uint64_t ObjCClassMetadata;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  unint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  id v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  id v80;
  Swift::String v81;
  Swift::String v82;
  Swift::String v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  id v95;
  Swift::String v96;
  Swift::String v97;
  unsigned __int128 v98;
  Swift::String v99;
  unint64_t v100;
  unint64_t v101;
  id v102;
  Swift::String v103;
  Swift::String v104;
  Swift::String v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(uint64_t, uint64_t, uint64_t);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void (*v171)(void *, uint64_t);
  uint64_t v172;
  void (*v173)(uint64_t, uint64_t, uint64_t);
  uint64_t v174;
  unint64_t v175;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  void *v182;
  void *v183;
  __int128 v184;
  uint64_t countAndFlagsBits;
  _OWORD *v186;
  __int128 v187;
  void (**v188)(uint64_t, uint64_t, uint64_t);
  uint64_t v189;
  void (**v190)(uint64_t, uint64_t, uint64_t);
  _QWORD *v191;
  void *rawValue;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  _QWORD *v202;
  char *v203;
  _QWORD *v204;
  uint64_t v205;
  unint64_t v206;
  unsigned __int128 v207;
  __int128 v208;
  char v209[8];
  char v210[16];
  char v211[8];
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  _OWORD v216[2];
  char v217;
  Swift::String v218;
  Swift::String v219;
  Swift::String v220;

  v7 = (_QWORD *)type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  v198 = *(v7 - 1);
  __chkstk_darwin(v7);
  v200 = (uint64_t)&v180 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (char *)((unint64_t)a1 >> 62);
  if ((unint64_t)a1 >> 62)
    goto LABEL_108;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v10 < 1)
  {
LABEL_112:
    swift_bridgeObjectRelease(a1);
    v170 = type metadata accessor for Date(0);
    v171 = *(void (**)(void *, uint64_t))(*(_QWORD *)(v170 - 8) + 8);
    v171(a3._rawValue, v170);
    v171((void *)a2, v170);
    return 0;
  }
LABEL_3:
  v203 = v9;
  v204 = v7;
  v186 = v3;
  rawValue = a3._rawValue;
  v196 = a2;
  v212 = (uint64_t)_swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
  a2 = 0;
  a3._rawValue = (void *)v212;
  v206 = a1 & 0xC000000000000001;
  v7 = &type metadata for String;
  v205 = a1;
  do
  {
    if (v206)
      v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a1);
    else
      v11 = *(id *)(a1 + 8 * a2 + 32);
    v12 = v11;
    v13 = objc_msgSend(v11, "identifier");
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v15 = v14;

    *(_QWORD *)&v216[0] = a1;
    *((_QWORD *)&v216[0] + 1) = v15;
    *(_QWORD *)&v207 = 35;
    *((_QWORD *)&v207 + 1) = 0xE100000000000000;
    v16 = lazy protocol witness table accessor for type String and conformance String();
    v3 = v216;
    v17 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v207, &type metadata for String, &type metadata for String, v16, v16);
    if (!v17[2])
    {
      __break(1u);
LABEL_108:
      if (a1 < 0)
        v169 = a1;
      else
        v169 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v10 = _CocoaArrayWrapper.endIndex.getter(v169);
      swift_bridgeObjectRelease(a1);
      if (v10 < 1)
        goto LABEL_112;
      goto LABEL_3;
    }
    v18 = v17;
    v9 = (char *)v17[4];
    v19 = v17[5];
    swift_bridgeObjectRetain(v19);

    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v18);
    v212 = (uint64_t)a3._rawValue;
    v21 = *((_QWORD *)a3._rawValue + 2);
    v20 = *((_QWORD *)a3._rawValue + 3);
    if (v21 >= v20 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
      a3._rawValue = (void *)v212;
    }
    ++a2;
    *((_QWORD *)a3._rawValue + 2) = v21 + 1;
    v22 = (char *)a3._rawValue + 16 * v21;
    *((_QWORD *)v22 + 4) = v9;
    *((_QWORD *)v22 + 5) = v19;
    a1 = v205;
  }
  while (v10 != a2);
  v23 = String.init(combinedIdentifiersFrom:)(a3);
  countAndFlagsBits = v23._countAndFlagsBits;
  object = (unint64_t)v23._object;
  v25 = MOSuggestionAssetsTypeStateOfMindAsset;
  v214 = (unint64_t)_swiftEmptyArrayStorage;
  v215 = (uint64_t)_swiftEmptyArrayStorage;
  v26 = type metadata accessor for Date(0);
  v27 = *(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8);
  v28 = v200;
  v27[2](v200, v196, v26);
  v29 = v28 + *((int *)v204 + 5);
  v188 = v27;
  v30 = v27[7];
  v189 = v26;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v30)(v29, 1, 1, v26);
  v191 = (_QWORD *)v25;
  v190 = (void (**)(uint64_t, uint64_t, uint64_t))v23._object;
  if (v203)
  {
    if (a1 < 0)
      v146 = a1;
    else
      v146 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v147 = (id)v25;
    v31 = _CocoaArrayWrapper.endIndex.getter(v146);
    swift_bridgeObjectRelease(a1);
    v33 = (_OWORD *)&unk_10019E000;
    if (!v31)
      goto LABEL_94;
LABEL_13:
    if (v31 < 1)
    {
      __break(1u);
      goto LABEL_122;
    }
    object = 0;
    v202 = _swiftEmptyArrayStorage;
    v203 = (char *)&type metadata for Any + 8;
    v197 = v33[210];
    v187 = xmmword_10019EDA0;
    v184 = xmmword_10019EEE0;
    v183 = (void *)0x80000001001A6770;
    v182 = (void *)0x80000001001A67B0;
    v181 = (void *)0x80000001001A6730;
    v204 = (_QWORD *)v31;
    while (1)
    {
      if (v206)
        v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(object, a1);
      else
        v34 = *(id *)(a1 + 8 * object + 32);
      v35 = v34;
      v36 = objc_msgSend(v34, "assetType");
      v37 = MOSuggestionAssetsTypeStateOfMindAsset;
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      v40 = v39;
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      if (v38 == v41 && v40 == v42)
      {

        swift_bridgeObjectRelease_n(v40, 2);
      }
      else
      {
        v44 = v42;
        v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v40, v41, v42, 0);

        swift_bridgeObjectRelease(v40);
        swift_bridgeObjectRelease(v44);
        if ((v45 & 1) == 0)
        {
          ObjCClassMetadata = swift_getObjCClassMetadata(objc_msgSend(v35, "contentClassType"));
          if (ObjCClassMetadata != type metadata accessor for MOSuggestionGenericFallBackInfo())
          {
            if (serverManager._clientConnections != (NSMutableDictionary *)-1)
              swift_once(&serverManager._clientConnections, one-time initialization function for shared);
            v47 = type metadata accessor for Logger(0);
            v48 = __swift_project_value_buffer(v47, (uint64_t)static MOAngelLogger.shared);
            v49 = Logger.logObject.getter(v48);
            v50 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v49, v50))
            {
              v51 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v51 = 0;
              _os_log_impl((void *)&_mh_execute_header, v49, v50, "[MOSuggestionInterstitialListAssetViewModel.stateOfMindAsset] Mismatched init for asset type", v51, 2u);
              swift_slowDealloc(v51, -1, -1);
            }

            goto LABEL_89;
          }
        }
      }
      v52 = objc_msgSend(v35, "content");
      v53 = objc_opt_self(UIImage);
      v54 = swift_dynamicCastObjCClass(v52, v53);
      if (v54)
      {
        v55 = v54;
        v56 = objc_msgSend(v35, "metadata");
        v57 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v56, &type metadata for AnyHashable, v203, &protocol witness table for AnyHashable);

        specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v57);
        v59 = v58;
        swift_bridgeObjectRelease(v57);
        if (v59)
        {
          if (*(_QWORD *)(v59 + 16))
          {
            v60 = MOSuggestionAssetMetadataKeyStateOfMindValenceClassificationAndReflectiveIntervalLocalized;
            v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v60);
            if ((v62 & 1) != 0)
            {
              outlined init with copy of Any(*(_QWORD *)(v59 + 56) + 32 * v61, (uint64_t)&v207);
            }
            else
            {
              v208 = 0u;
              v207 = 0u;
            }

            if (*((_QWORD *)&v208 + 1))
            {
              v63 = swift_dynamicCast(&v212, &v207, (char *)&type metadata for Any + 8, &type metadata for String, 6);
              v31 = (uint64_t)v204;
              if ((v63 & 1) == 0)
              {
                swift_unknownObjectRelease(v52);
                swift_bridgeObjectRelease(v59);
                goto LABEL_89;
              }
              v64 = v212;
              v201 = v213;
              memset(v216, 0, sizeof(v216));
              v217 = 1;
              v65 = type metadata accessor for MOSuggestionSheetImage();
              swift_allocObject(v65, 105, 7);
              swift_unknownObjectRetain();
              v199 = MOSuggestionSheetImage.init(image:associatedTintColor:associatedBackgroundColor:tileBackgroundColor:shouldBeRounded:squareCrop:extraMargin:)(v55, 0, 0, 0, 0, (uint64_t)v216, 0, 1);
              if (*(_QWORD *)(v59 + 16))
              {
                v66 = MOSuggestionAssetMetadataKeyStateOfMindLabelsLocalized;
                v67 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v66);
                if ((v68 & 1) != 0)
                {
                  outlined init with copy of Any(*(_QWORD *)(v59 + 56) + 32 * v67, (uint64_t)&v207);
                }
                else
                {
                  v208 = 0u;
                  v207 = 0u;
                }

                if (*((_QWORD *)&v208 + 1))
                {
                  if (swift_dynamicCast(&v212, &v207, (char *)&type metadata for Any + 8, &type metadata for String, 6))
                  {
                    v69 = v212;
                    v70 = v213;
                    goto LABEL_55;
                  }
LABEL_54:
                  v69 = 0;
                  v70 = 0xE000000000000000;
LABEL_55:
                  if (*(_QWORD *)(v59 + 16))
                  {
                    v71 = MOSuggestionAssetMetadataKeyStateOfMindDomainsLocalized;
                    v72 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v71);
                    if ((v73 & 1) != 0)
                    {
                      outlined init with copy of Any(*(_QWORD *)(v59 + 56) + 32 * v72, (uint64_t)&v207);
                    }
                    else
                    {
                      v208 = 0u;
                      v207 = 0u;
                    }

                  }
                  else
                  {
                    v208 = 0uLL;
                    v207 = 0uLL;
                  }
                  swift_bridgeObjectRelease(v59);
                  if (*((_QWORD *)&v208 + 1))
                  {
                    if (swift_dynamicCast(&v212, &v207, (char *)&type metadata for Any + 8, &type metadata for String, 6))
                    {
                      v75 = v212;
                      v74 = v213;
                      if (v69)
                      {
LABEL_70:
                        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, 0, 0xE000000000000000, 0) & 1) != 0)
                        {
                          swift_bridgeObjectRelease(v70);
                          if (v75)
                            goto LABEL_76;
LABEL_74:
                          if (v74 == 0xE000000000000000)
                          {
                            v88 = 0xE000000000000000;
                            goto LABEL_79;
                          }
                        }
                        else
                        {
                          v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
                          v77 = swift_allocObject(v76, 64, 7);
                          v195 = v75;
                          v78 = v77;
                          *(_OWORD *)(v77 + 16) = v184;
                          v79 = v201;
                          *(_QWORD *)(v77 + 32) = v64;
                          *(_QWORD *)(v77 + 40) = v79;
                          *(_QWORD *)(v77 + 48) = v69;
                          *(_QWORD *)(v77 + 56) = v70;
                          *(_QWORD *)&v207 = v77;
                          v80 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
                          v218._countAndFlagsBits = 0xD000000000000033;
                          v218._object = v181;
                          v81._countAndFlagsBits = 8236;
                          v81._object = (void *)0xE200000000000000;
                          v82._countAndFlagsBits = 0;
                          v82._object = (void *)0xE000000000000000;
                          v83 = NSLocalizedString(_:tableName:bundle:value:comment:)(v81, (Swift::String_optional)0, (NSBundle)v80, v82, v218);

                          v84 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
                          v85 = lazy protocol witness table accessor for type [String] and conformance [A]();
                          v64 = BidirectionalCollection<>.joined(separator:)(v83._countAndFlagsBits, v83._object, v84, v85);
                          v201 = v86;
                          v87 = v78;
                          v75 = v195;
                          swift_bridgeObjectRelease(v87);
                          swift_bridgeObjectRelease(v83._object);
                          if (!v75)
                            goto LABEL_74;
                        }
LABEL_76:
                        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v75, v74, 0, 0xE000000000000000, 0) & 1) != 0)
                        {
                          v88 = v74;
                        }
                        else
                        {
                          v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
                          v90 = swift_allocObject(v89, 64, 7);
                          *(_OWORD *)(v90 + 16) = v184;
                          v91 = v201;
                          *(_QWORD *)(v90 + 32) = v64;
                          *(_QWORD *)(v90 + 40) = v91;
                          v92 = (void *)objc_opt_self(NSBundle);
                          v195 = v75;
                          v93 = v92;
                          v94 = (void *)v74;
                          v95 = objc_msgSend(v92, "mainBundle");
                          v219._object = v183;
                          v96._countAndFlagsBits = 10272;
                          v96._object = (void *)0xE200000000000000;
                          v97._countAndFlagsBits = 0;
                          v97._object = (void *)0xE000000000000000;
                          v219._countAndFlagsBits = 0xD00000000000003ELL;
                          v98 = (unsigned __int128)NSLocalizedString(_:tableName:bundle:value:comment:)(v96, (Swift::String_optional)0, (NSBundle)v95, v97, v219);

                          v207 = v98;
                          swift_bridgeObjectRetain(*((_QWORD *)&v98 + 1));
                          v99._countAndFlagsBits = v195;
                          v99._object = v94;
                          String.append(_:)(v99);
                          swift_bridgeObjectRelease(*((_QWORD *)&v98 + 1));
                          swift_bridgeObjectRelease(v94);
                          v101 = *((_QWORD *)&v207 + 1);
                          v100 = v207;
                          v102 = objc_msgSend(v93, "mainBundle");
                          v220._object = v182;
                          v103._countAndFlagsBits = 41;
                          v103._object = (void *)0xE100000000000000;
                          v104._countAndFlagsBits = 0;
                          v104._object = (void *)0xE000000000000000;
                          v220._countAndFlagsBits = 0xD00000000000003ELL;
                          v105 = NSLocalizedString(_:tableName:bundle:value:comment:)(v103, (Swift::String_optional)0, (NSBundle)v102, v104, v220);

                          v207 = __PAIR128__(v101, v100);
                          swift_bridgeObjectRetain(v101);
                          String.append(_:)(v105);
                          swift_bridgeObjectRelease(v101);
                          swift_bridgeObjectRelease(v105._object);
                          v106 = *((_QWORD *)&v207 + 1);
                          *(_QWORD *)(v90 + 48) = v207;
                          *(_QWORD *)(v90 + 56) = v106;
                          *(_QWORD *)&v207 = v90;
                          v107 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
                          v108 = lazy protocol witness table accessor for type [String] and conformance [A]();
                          v64 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v107, v108);
                          v201 = v109;
                          v88 = v90;
                        }
LABEL_79:
                        swift_bridgeObjectRelease(v88);
                        v110 = objc_msgSend(v35, "identifier");
                        v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
                        v113 = v112;

                        *(_QWORD *)&v207 = v111;
                        *((_QWORD *)&v207 + 1) = v113;
                        v212 = 35;
                        v213 = 0xE100000000000000;
                        v25 = (uint64_t)&v207;
                        v114 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v212, &type metadata for String, &type metadata for String, v16, v16);
                        if (!v114[2])
                        {
                          __break(1u);
                          goto LABEL_114;
                        }
                        v115 = v114;
                        v117 = v114[4];
                        v116 = v114[5];
                        v194 = v117;
                        v193 = v116;
                        swift_bridgeObjectRetain(v116);
                        swift_bridgeObjectRelease(v113);
                        swift_bridgeObjectRelease(v115);
                        v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionSheetAssetDateRange>);
                        v119 = *(unsigned __int8 *)(v198 + 80);
                        v120 = (v119 + 32) & ~v119;
                        v121 = swift_allocObject(v118, v120 + *(_QWORD *)(v198 + 72), v119 | 7);
                        *(_OWORD *)(v121 + 16) = v197;
                        outlined init with copy of MOSuggestionSheetAssetDateRange(v200, v121 + v120);
                        v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
                        v123 = swift_allocObject(v122, 48, 7);
                        *(_OWORD *)(v123 + 16) = v197;
                        v195 = v64;
                        v124 = v201;
                        *(_QWORD *)(v123 + 32) = v64;
                        *(_QWORD *)(v123 + 40) = v124;
                        v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
                        v126 = swift_allocObject(v125, 40, 7);
                        *(_OWORD *)(v126 + 16) = v187;
                        v127 = v199;
                        *(_QWORD *)(v126 + 32) = v199;
                        *(_QWORD *)&v207 = v126;
                        specialized Array._endMutation()(v126);
                        v128 = v207;
                        v129 = type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
                        swift_allocObject(v129, *(unsigned int *)(v129 + 48), *(unsigned __int16 *)(v129 + 52));
                        swift_bridgeObjectRetain(v124);
                        swift_retain(v127);
                        v130 = MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(v194, v193, 0, 0, 0, v121, v123, v128, 25, 1, 0, 0);
                        swift_retain(v130);
                        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v131);
                        v133 = *(_QWORD *)((v215 & 0xFFFFFFFFFFFFFF8) + 0x10);
                        v132 = *(_QWORD *)((v215 & 0xFFFFFFFFFFFFFF8) + 0x18);
                        if (v133 >= v132 >> 1)
                          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v132 > 1, v133 + 1, 1);
                        v134 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v133, v130);
                        specialized Array._endMutation()(v134);
                        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v202);
                        a1 = v205;
                        v31 = (uint64_t)v204;
                        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                          v202 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v202[2] + 1, 1, v202);
                        v136 = v199;
                        v138 = v202[2];
                        v137 = v202[3];
                        if (v138 >= v137 >> 1)
                          v202 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v137 > 1), v138 + 1, 1, v202);
                        v139 = v202;
                        v202[2] = v138 + 1;
                        v140 = &v139[2 * v138];
                        v141 = v201;
                        v140[4] = v195;
                        v140[5] = v141;
                        swift_retain(v136);
                        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v142);
                        v144 = *(_QWORD *)((v214 & 0xFFFFFFFFFFFFFF8) + 0x10);
                        v143 = *(_QWORD *)((v214 & 0xFFFFFFFFFFFFFF8) + 0x18);
                        if (v144 >= v143 >> 1)
                          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v143 > 1, v144 + 1, 1);
                        v145 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v144, v136);
                        specialized Array._endMutation()(v145);
                        swift_release(v130);
                        swift_release(v136);
                        swift_unknownObjectRelease(v52);
LABEL_89:

                        goto LABEL_16;
                      }
LABEL_67:
                      if (v70 != 0xE000000000000000)
                        goto LABEL_70;
                      swift_bridgeObjectRelease(0xE000000000000000);
                      if (!v75)
                        goto LABEL_74;
                      goto LABEL_76;
                    }
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)&v207, &demangling cache variable for type metadata for Any?);
                  }
                  v75 = 0;
                  v74 = 0xE000000000000000;
                  if (v69)
                    goto LABEL_70;
                  goto LABEL_67;
                }
              }
              else
              {
                v208 = 0u;
                v207 = 0u;
              }
              outlined destroy of Any?((uint64_t)&v207, &demangling cache variable for type metadata for Any?);
              goto LABEL_54;
            }
          }
          else
          {
            v208 = 0u;
            v207 = 0u;
          }
          swift_unknownObjectRelease(v52);
          swift_bridgeObjectRelease(v59);

          outlined destroy of Any?((uint64_t)&v207, &demangling cache variable for type metadata for Any?);
        }
        else
        {
          swift_unknownObjectRelease(v52);

        }
        v31 = (uint64_t)v204;
      }
      else
      {

        swift_unknownObjectRelease(v52);
      }
LABEL_16:
      if (v31 == ++object)
        goto LABEL_95;
    }
  }
  v31 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v32 = (id)v25;
  v33 = &unk_10019E000;
  if (v31)
    goto LABEL_13;
LABEL_94:
  v202 = _swiftEmptyArrayStorage;
LABEL_95:
  swift_bridgeObjectRelease(a1);
  v25 = v214;
  if (v214 >> 62)
  {
LABEL_114:
    if (v25 < 0)
      v148 = v25;
    else
      v148 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v25);
    v172 = _CocoaArrayWrapper.endIndex.getter(v148);
    v26 = v196;
    v7 = v191;
    v27 = v190;
    if (!v172)
      goto LABEL_118;
LABEL_97:
    if ((v25 & 0xC000000000000001) == 0)
    {
      if (!*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_129;
      }
      v148 = *(_QWORD *)(v25 + 32);
      swift_retain(v148);
LABEL_100:
      swift_bridgeObjectRelease(v25);
      v149 = (*((uint64_t (**)(uint64_t, void (**)(uint64_t, uint64_t, uint64_t), _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))v186
              + 43))(countAndFlagsBits, v27, 0, 0, 0, 0, 0, 0, 281);
      v25 = v149;
      object = v215;
      if ((unint64_t)v215 >> 62)
      {
        if (v215 < 0)
          v177 = v215;
        else
          v177 = v215 & 0xFFFFFFFFFFFFFF8;
        swift_retain(v149);
        swift_bridgeObjectRetain(object);
        v178 = _CocoaArrayWrapper.endIndex.getter(v177);
        swift_bridgeObjectRelease(object);
        if (v178 < 2)
          goto LABEL_106;
      }
      else
      {
        v150 = *(_QWORD *)((v215 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain(v149);
        if (v150 < 2)
        {
LABEL_106:
          swift_bridgeObjectRelease(object);
          v153 = MOSuggestionInterstitialListAssetViewModel._groupAssetTypeAndCountDescription(with:)(0);
          v155 = v154;
          swift_beginAccess(v25 + 24, &v207, 1, 0);
          v156 = *(_QWORD *)(v25 + 32);
          *(_QWORD *)(v25 + 24) = v153;
          *(_QWORD *)(v25 + 32) = v155;
          swift_bridgeObjectRelease(v156);
          swift_beginAccess(v25 + 48, &v212, 1, 0);
          v157 = *(_QWORD *)(v25 + 48);
          *(_QWORD *)(v25 + 48) = v202;
          swift_bridgeObjectRelease(v157);
          v158 = v214;
          swift_beginAccess(v25 + 56, v211, 1, 0);
          v159 = *(_QWORD *)(v25 + 56);
          *(_QWORD *)(v25 + 56) = v158;
          swift_bridgeObjectRelease(v159);
          v160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionSheetAssetDateRange>);
          v161 = *(unsigned __int8 *)(v198 + 80);
          v162 = (v161 + 32) & ~v161;
          v163 = swift_allocObject(v160, v162 + *(_QWORD *)(v198 + 72), v161 | 7);
          *(_OWORD *)(v163 + 16) = xmmword_10019ED20;
          v164 = v163 + v162;
          v165 = v200;
          outlined init with copy of MOSuggestionSheetAssetDateRange(v200, v164);
          swift_release(v148);

          v166 = v188[1];
          v167 = v189;
          ((void (*)(void *, uint64_t))v166)(rawValue, v189);
          ((void (*)(uint64_t, uint64_t))v166)(v26, v167);
          outlined destroy of MOSuggestionSheetAssetDateRange(v165);
          swift_beginAccess(v25 + 40, v210, 1, 0);
          v168 = *(_QWORD *)(v25 + 40);
          *(_QWORD *)(v25 + 40) = v163;
          swift_release(v25);
          swift_bridgeObjectRelease(v168);
          return v25;
        }
      }
      if ((object & 0x8000000000000000) == 0 && (object & 0x4000000000000000) == 0)
      {
        v151 = object & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(object);
LABEL_105:
        *(_QWORD *)&v207 = v151;
        specialized MutableCollection<>.sort(by:)((uint64_t *)&v207);
        swift_bridgeObjectRelease(object);
        v152 = v207;
        swift_beginAccess(v25 + 16, v209, 1, 0);
        object = *(_QWORD *)(v25 + 16);
        *(_QWORD *)(v25 + 16) = v152;
        goto LABEL_106;
      }
LABEL_129:
      v179 = swift_bridgeObjectRetain(object);
      v151 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v179);
      swift_bridgeObjectRelease(object);
      goto LABEL_105;
    }
LABEL_122:
    v148 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v25);
    goto LABEL_100;
  }
  v148 = *(_QWORD *)((v214 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v214);
  v26 = v196;
  v7 = v191;
  v27 = v190;
  if (v148)
    goto LABEL_97;
LABEL_118:
  swift_bridgeObjectRelease(v27);

  swift_bridgeObjectRelease(v25);
  v173 = v188[1];
  v174 = v189;
  ((void (*)(void *, uint64_t))v173)(rawValue, v189);
  ((void (*)(uint64_t, uint64_t))v173)(v26, v174);
  outlined destroy of MOSuggestionSheetAssetDateRange(v200);
  v175 = v214;
  swift_bridgeObjectRelease(v202);
  swift_bridgeObjectRelease(v175);
  swift_bridgeObjectRelease(v215);
  return 0;
}

void specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v34;
  _OWORD v35[4];
  void *v36;
  _OWORD v37[2];
  _OWORD v38[2];
  _OWORD v39[2];
  _OWORD v40[2];
  _OWORD v41[2];
  uint64_t v42;
  _OWORD v43[2];
  _OWORD v44[2];
  uint64_t v45;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOSuggestionAssetMetadataKey, Any>);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  }
  else
  {
    v2 = &_swiftEmptyDictionarySingleton;
  }
  v32 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain(a1);
  swift_retain(v2);
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = (v5 - 1) & v5;
      v10 = __clz(__rbit64(v5)) | (v7 << 6);
      v11 = v7;
      goto LABEL_28;
    }
    v12 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v12 >= v31)
      goto LABEL_39;
    v13 = *(_QWORD *)(v32 + 8 * v12);
    v11 = v7 + 1;
    if (!v13)
    {
      v11 = v7 + 2;
      if (v7 + 2 >= v31)
        goto LABEL_39;
      v13 = *(_QWORD *)(v32 + 8 * v11);
      if (!v13)
      {
        v11 = v7 + 3;
        if (v7 + 3 >= v31)
          goto LABEL_39;
        v13 = *(_QWORD *)(v32 + 8 * v11);
        if (!v13)
        {
          v11 = v7 + 4;
          if (v7 + 4 >= v31)
            goto LABEL_39;
          v13 = *(_QWORD *)(v32 + 8 * v11);
          if (!v13)
            break;
        }
      }
    }
LABEL_27:
    v9 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v11 << 6);
LABEL_28:
    outlined init with copy of AnyHashable(*(_QWORD *)(a1 + 48) + 40 * v10, (uint64_t)v43);
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)v44 + 8);
    v41[0] = v44[0];
    v41[1] = v44[1];
    v42 = v45;
    v40[0] = v43[0];
    v40[1] = v43[1];
    outlined init with copy of AnyHashable((uint64_t)v40, (uint64_t)v37);
    type metadata accessor for MOSuggestionAssetMetadataKey(0);
    if (!swift_dynamicCast(&v36, v37, &type metadata for AnyHashable, v15, 6))
    {
      v36 = 0;
      outlined destroy of Any?((uint64_t)v40, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      v30 = v36;
      swift_release(v2);

      outlined consume of Set<String>.Iterator._Variant(a1);
      swift_release(v2);
      return;
    }
    v16 = (uint64_t)v36;
    outlined init with copy of Any((uint64_t)v41 + 8, (uint64_t)v37);
    outlined destroy of Any?((uint64_t)v40, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    outlined init with take of Any(v37, (_OWORD *)((char *)v38 + 8));
    v34 = v16;
    outlined init with take of Any((_OWORD *)((char *)v38 + 8), v35);
    v17 = v34;
    outlined init with take of Any(v35, v39);
    outlined init with take of Any(v39, v38);
    v18 = v2[5];
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;
    Hasher.init(_seed:)(&v34, v18);
    String.hash(into:)(&v34, v19, v21);
    v22 = Hasher._finalize()();
    swift_bridgeObjectRelease(v21);
    v23 = -1 << *((_BYTE *)v2 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)&v6[8 * (v24 >> 6)]) != 0)
    {
      v8 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)&v6[8 * (v24 >> 6)])) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)&v6[8 * v25];
      }
      while (v29 == -1);
      v8 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)&v6[(v8 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v8;
    *(_QWORD *)(v2[6] + 8 * v8) = v17;
    outlined init with take of Any(v38, (_OWORD *)(v2[7] + 32 * v8));
    ++v2[2];
    v7 = v11;
    v5 = v9;
  }
  v14 = v7 + 5;
  if (v7 + 5 >= v31)
  {
LABEL_39:
    swift_release(v2);
    outlined consume of Set<String>.Iterator._Variant(a1);
    return;
  }
  v13 = *(_QWORD *)(v32 + 8 * v14);
  if (v13)
  {
    v11 = v7 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v11 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v11 >= v31)
      goto LABEL_39;
    v13 = *(_QWORD *)(v32 + 8 * v11);
    ++v14;
    if (v13)
      goto LABEL_27;
  }
LABEL_41:
  __break(1u);
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v7);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v7);
}

{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v7);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  Hasher._combine(_:)(a1);
  v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v5);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, *(_QWORD *)(v1 + 40));
  v3 = MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.rawValue.getter(a1);
  v5 = v4;
  String.hash(into:)(v8, v3, v4);
  swift_bridgeObjectRelease(v5);
  v6 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  MOSuggestionAssetTileSize.hash(into:)((uint64_t)v5, a1);
  v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  Hasher._combine(_:)(a1);
  v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *a1, Swift::UInt a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  Swift::Int v13;
  _QWORD v15[9];

  v4 = v3;
  v8 = a3 & 1;
  Hasher.init(_seed:)(v15, *(_QWORD *)(v4 + 40));
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v11 = v10;
  v12 = a1;
  String.hash(into:)(v15, v9, v11);

  swift_bridgeObjectRelease(v11);
  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2);
  }
  v13 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)((uint64_t)v12, a2, v8, v13);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for HKQuantityType, HKQuantityType_ptr);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)(v6);

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)(v9);

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    while (2)
    {
      switch(*(_BYTE *)(*(_QWORD *)(v2 + 48) + result))
      {
        case 2:
          if (a1 != 2)
            goto LABEL_4;
          break;
        case 3:
          if (a1 != 3)
            goto LABEL_4;
          break;
        case 4:
          if (a1 != 4)
            goto LABEL_4;
          break;
        case 5:
          if (a1 != 5)
            goto LABEL_4;
          break;
        case 6:
          if (a1 != 6)
            goto LABEL_4;
          break;
        case 7:
          if (a1 != 7)
            goto LABEL_4;
          break;
        case 8:
          if (a1 != 8)
            goto LABEL_4;
          break;
        case 9:
          if (a1 != 9)
            goto LABEL_4;
          break;
        case 0xA:
          if (a1 != 10)
            goto LABEL_4;
          break;
        default:
          if (a1 - 2 < 9 || ((*(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + result) ^ a1) & 1) != 0)
          {
LABEL_4:
            result = (result + 1) & v6;
            if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
              continue;
          }
          break;
      }
      break;
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;

  v5 = -1 << *(_BYTE *)(v4 + 32);
  v6 = a4 & ~v5;
  if (((*(_QWORD *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v8 = ~v5;
    do
    {
      v9 = *(_QWORD *)(v4 + 48) + 24 * v6;
      v10 = *(_QWORD *)(v9 + 8);
      v11 = *(_BYTE *)(v9 + 16);
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)v9);
      v14 = v13;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      if (v12 == v15 && v14 == v16)
      {
        swift_bridgeObjectRelease_n(v14, 2);
        if ((v11 & 1) != 0)
        {
LABEL_3:
          if ((a3 & 1) != 0)
            return v6;
          goto LABEL_4;
        }
      }
      else
      {
        v18 = v16;
        v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v15, v16, 0);
        swift_bridgeObjectRelease(v14);
        swift_bridgeObjectRelease(v18);
        if ((v19 & 1) == 0)
          goto LABEL_4;
        if ((v11 & 1) != 0)
          goto LABEL_3;
      }
      if ((a3 & 1) == 0 && v10 == a2)
        return v6;
LABEL_4:
      v6 = (v6 + 1) & v8;
    }
    while (((*(_QWORD *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  Swift::Int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(__n128);
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char v54;
  Swift::Int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  Swift::Int v70;
  uint64_t *v71;
  Swift::Int v72;
  Swift::Int v73;
  uint64_t *v74;
  uint64_t v75;
  Swift::Int v76;
  _QWORD *v77;
  Swift::Int v78;
  uint64_t v79;
  Swift::Int v80;
  uint64_t v81;
  uint64_t (*v82)(__n128);
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  Swift::Int v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  char v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  unint64_t v169;
  char *v170;
  uint64_t *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  Swift::Int v177;
  char *v178;
  Swift::Int v179;
  Swift::Int v180;
  Swift::Int v181;
  _QWORD *v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v190;
  Swift::Int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
  v5 = __chkstk_darwin(v4);
  v185 = (uint64_t)&v171 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v187 = (uint64_t)&v171 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v171 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v171 - v12;
  v14 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  v193 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v184 = (uint64_t)&v171 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v190 = (uint64_t)&v171 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v171 - v20;
  __chkstk_darwin(v19);
  v176 = (uint64_t)&v171 - v22;
  v23 = a1[1];
  v177 = _minimumMergeRunLength(_:)(v23);
  if (v177 >= v23)
  {
    if (v23 < 0)
      goto LABEL_185;
    if (v23)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v23, 1, a1);
    return;
  }
  if (v23 >= 0)
    v24 = v23;
  else
    v24 = v23 + 1;
  if (v23 < -1)
    goto LABEL_193;
  v173 = v21;
  v192 = v14;
  v178 = v13;
  v171 = a1;
  if (v23 < 2)
  {
    v28 = (char *)_swiftEmptyArrayStorage;
    v196 = (uint64_t)_swiftEmptyArrayStorage;
    v183 = (uint64_t *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v23 != 1)
    {
      v110 = _swiftEmptyArrayStorage[2];
      if (v110 >= 2)
        goto LABEL_146;
LABEL_159:
      v170 = v28;
LABEL_160:
      v161 = swift_bridgeObjectRelease(v170);
LABEL_161:
      *(_QWORD *)((v196 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v161);
      swift_bridgeObjectRelease(v196);
      return;
    }
  }
  else
  {
    v25 = v24 >> 1;
    v26 = type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
    v27 = static Array._allocateBufferUninitialized(minimumCapacity:)(v25, v26);
    *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) = v25;
    v183 = (uint64_t *)((v27 & 0xFFFFFFFFFFFFFF8) + 32);
    v196 = v27;
  }
  v174 = v11;
  v186 = v1;
  v29 = 0;
  v30 = *a1;
  v172 = *a1 - 8;
  v28 = (char *)_swiftEmptyArrayStorage;
  v31 = v193;
  v180 = v23;
  v188 = v30;
LABEL_13:
  v32 = v29 + 1;
  v181 = v29;
  if (v29 + 1 >= v23)
  {
    v55 = v29 + 1;
    v70 = v177;
    goto LABEL_57;
  }
  v33 = *(_QWORD *)(v30 + 8 * v32);
  v194 = *(_QWORD *)(v30 + 8 * v29);
  v34 = v194;
  v195 = v33;
  swift_retain(v33);
  swift_retain(v34);
  v35 = v186;
  v36 = closure #1 in Array<A>.sortedByAscendingTime.getter(&v195, &v194);
  if (v35)
  {
    swift_bridgeObjectRelease(v28);
    swift_release(v33);
    swift_release(v34);
    goto LABEL_161;
  }
  LODWORD(v37) = v36;
  v175 = v28;
  v186 = 0;
  swift_release(v33);
  swift_release(v34);
  v38 = v29 + 2;
  v31 = v193;
  LODWORD(v191) = v37;
  if (v29 + 2 < v23)
  {
    while (1)
    {
      v39 = *(_QWORD *)(v30 + 8 * v38);
      v40 = *(_QWORD *)(v30 + 8 * v32);
      v41 = *(uint64_t (**)(__n128))(*(_QWORD *)v39 + 224);
      swift_retain(v39);
      v42 = swift_retain(v40);
      v43 = v41(v42);
      v44 = swift_bridgeObjectRelease(v43);
      if (!v43)
        break;
      v45 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 224);
      v46 = v45(v44);
      v47 = swift_bridgeObjectRelease(v46);
      if (!v46)
      {
        swift_release(v39);
        swift_release(v40);
        if ((v37 & 1) == 0)
        {
          v55 = v38;
          v28 = v175;
          v23 = v180;
LABEL_45:
          v70 = v177;
          v29 = v181;
          goto LABEL_57;
        }
        v54 = 1;
        goto LABEL_25;
      }
      v48 = ((uint64_t (*)(uint64_t))v41)(v47);
      if (!v48)
      {
        v56 = (uint64_t)v178;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v178, 1, 1, v192);
        v57 = v56;
        goto LABEL_38;
      }
      v49 = v48;
      if (*(_QWORD *)(v48 + 16))
      {
        v50 = (uint64_t)v178;
        outlined init with copy of MOSuggestionSheetAssetDateRange(v48 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80)), (uint64_t)v178);
        v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56);
        v52 = v50;
        v53 = 0;
      }
      else
      {
        v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56);
        v50 = (uint64_t)v178;
        v52 = (uint64_t)v178;
        v53 = 1;
      }
      v37 = v192;
      v51(v52, v53, 1, v192);
      swift_bridgeObjectRelease(v49);
      v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
      v59 = v58(v50, 1, v37);
      v57 = v50;
      v30 = v188;
      LOBYTE(v37) = v191;
      if (v59 == 1)
      {
LABEL_38:
        outlined destroy of Any?(v57, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
        swift_release(v39);
        swift_release(v40);
        if ((v37 & 1) != 0)
        {
          v55 = v38;
          v31 = v193;
          goto LABEL_49;
        }
        v55 = v38 + 1;
        v32 = v38;
        v38 = v55;
        v23 = v180;
        v31 = v193;
        if (v55 >= v180)
          goto LABEL_44;
      }
      else
      {
        v60 = outlined init with take of MOSuggestionSheetAssetDateRange((uint64_t)v178, v176);
        v61 = v45(v60);
        if (!v61)
        {
          v63 = (uint64_t)v174;
          v51((uint64_t)v174, 1, 1, v192);
LABEL_37:
          outlined destroy of MOSuggestionSheetAssetDateRange(v176);
          v57 = v63;
          goto LABEL_38;
        }
        v62 = v61;
        if (*(_QWORD *)(v61 + 16))
        {
          v63 = (uint64_t)v174;
          outlined init with copy of MOSuggestionSheetAssetDateRange(v61 + ((*(unsigned __int8 *)(v193 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v193 + 80)), (uint64_t)v174);
          v64 = 0;
        }
        else
        {
          v64 = 1;
          v63 = (uint64_t)v174;
        }
        v37 = v192;
        v51(v63, v64, 1, v192);
        swift_bridgeObjectRelease(v62);
        v65 = v58(v63, 1, v37);
        LODWORD(v37) = v191;
        if (v65 == 1)
          goto LABEL_37;
        v66 = v63;
        v67 = (uint64_t)v173;
        outlined init with take of MOSuggestionSheetAssetDateRange(v66, (uint64_t)v173);
        v68 = v176;
        v69 = static Date.< infix(_:_:)(v176, v67);
        outlined destroy of MOSuggestionSheetAssetDateRange(v67);
        outlined destroy of MOSuggestionSheetAssetDateRange(v68);
        swift_release(v39);
        swift_release(v40);
        v54 = v37;
        v31 = v193;
        v23 = v180;
        if (((v37 ^ v69) & 1) != 0)
          goto LABEL_42;
LABEL_26:
        v55 = v38 + 1;
        v32 = v38;
        v38 = v55;
        if (v55 >= v23)
          goto LABEL_43;
      }
    }
    swift_release(v39);
    swift_release(v40);
    if ((v37 & 1) != 0)
    {
      v55 = v38;
LABEL_49:
      v23 = v180;
      goto LABEL_50;
    }
    v54 = 0;
LABEL_25:
    v23 = v180;
    goto LABEL_26;
  }
LABEL_42:
  v54 = v37;
  v55 = v38;
LABEL_43:
  if ((v54 & 1) == 0)
  {
LABEL_44:
    v28 = v175;
    goto LABEL_45;
  }
LABEL_50:
  v29 = v181;
  v28 = v175;
  v70 = v177;
  if (v55 < v181)
    goto LABEL_186;
  if (v181 < v55)
  {
    v71 = (uint64_t *)(v172 + 8 * v55);
    v72 = v55;
    v73 = v181;
    v74 = (uint64_t *)(v30 + 8 * v181);
    do
    {
      if (v73 != --v72)
      {
        if (!v30)
          goto LABEL_191;
        v75 = *v74;
        *v74 = *v71;
        *v71 = v75;
      }
      ++v73;
      --v71;
      ++v74;
    }
    while (v73 < v72);
  }
LABEL_57:
  if (v55 >= v23)
    goto LABEL_93;
  if (__OFSUB__(v55, v29))
    goto LABEL_184;
  if (v55 - v29 >= v70)
    goto LABEL_93;
  if (__OFADD__(v29, v70))
    goto LABEL_187;
  if (v29 + v70 >= v23)
    v76 = v23;
  else
    v76 = v29 + v70;
  if (v76 >= v29)
  {
    if (v55 == v76)
      goto LABEL_93;
    v175 = v28;
    v77 = (_QWORD *)(v172 + 8 * v55);
    v179 = v76;
LABEL_70:
    v79 = *(_QWORD *)(v30 + 8 * v55);
    v80 = v181;
    v182 = v77;
    v191 = v55;
    while (1)
    {
      v81 = *v77;
      v82 = *(uint64_t (**)(__n128))(*(_QWORD *)v79 + 224);
      swift_retain(v79);
      v83 = swift_retain(v81);
      v84 = v82(v83);
      v85 = swift_bridgeObjectRelease(v84);
      if (!v84)
      {
        swift_release(v79);
        swift_release(v81);
        goto LABEL_68;
      }
      v86 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 224);
      v87 = v86(v85);
      v88 = swift_bridgeObjectRelease(v87);
      if (v87)
      {
        v89 = ((uint64_t (*)(uint64_t))v82)(v88);
        if (!v89)
        {
          v91 = v187;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v187, 1, 1, v192);
LABEL_89:
          outlined destroy of Any?(v91, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
          swift_release(v79);
          swift_release(v81);
          v31 = v193;
          v30 = v188;
          goto LABEL_68;
        }
        v90 = v89;
        if (*(_QWORD *)(v89 + 16))
        {
          v91 = v187;
          outlined init with copy of MOSuggestionSheetAssetDateRange(v89 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80)), v187);
          v92 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56);
          v93 = v91;
          v94 = 0;
        }
        else
        {
          v92 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56);
          v91 = v187;
          v93 = v187;
          v94 = 1;
        }
        v95 = v192;
        v189 = v92;
        v92(v93, v94, 1, v192);
        swift_bridgeObjectRelease(v90);
        v96 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
        if (v96(v91, 1, v95) == 1)
          goto LABEL_89;
        v97 = outlined init with take of MOSuggestionSheetAssetDateRange(v91, v190);
        v98 = v86(v97);
        if (!v98)
        {
          v100 = v185;
          v189(v185, 1, 1, v192);
          v30 = v188;
LABEL_91:
          outlined destroy of MOSuggestionSheetAssetDateRange(v190);
          outlined destroy of Any?(v100, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
          swift_release(v79);
          swift_release(v81);
          v31 = v193;
LABEL_68:
          v78 = v191;
LABEL_69:
          v55 = v78 + 1;
          v77 = v182 + 1;
          if (v55 != v179)
            goto LABEL_70;
          v55 = v179;
          v28 = v175;
          v29 = v181;
LABEL_93:
          if (v55 < v29)
            goto LABEL_180;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28);
          v191 = v55;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
          v109 = *((_QWORD *)v28 + 2);
          v108 = *((_QWORD *)v28 + 3);
          v110 = v109 + 1;
          if (v109 >= v108 >> 1)
            v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v108 > 1), v109 + 1, 1, v28);
          *((_QWORD *)v28 + 2) = v110;
          v111 = v28 + 32;
          v112 = &v28[16 * v109 + 32];
          v113 = v191;
          *(_QWORD *)v112 = v181;
          *((_QWORD *)v112 + 1) = v113;
          if (v109)
          {
LABEL_99:
            v114 = v110 - 1;
            if (v110 >= 4)
            {
              v119 = &v111[16 * v110];
              v120 = *((_QWORD *)v119 - 8);
              v121 = *((_QWORD *)v119 - 7);
              v125 = __OFSUB__(v121, v120);
              v122 = v121 - v120;
              if (v125)
                goto LABEL_168;
              v124 = *((_QWORD *)v119 - 6);
              v123 = *((_QWORD *)v119 - 5);
              v125 = __OFSUB__(v123, v124);
              v117 = v123 - v124;
              v118 = v125;
              if (v125)
                goto LABEL_169;
              v126 = v110 - 2;
              v127 = &v111[16 * v110 - 32];
              v129 = *(_QWORD *)v127;
              v128 = *((_QWORD *)v127 + 1);
              v125 = __OFSUB__(v128, v129);
              v130 = v128 - v129;
              if (v125)
                goto LABEL_171;
              v125 = __OFADD__(v117, v130);
              v131 = v117 + v130;
              if (v125)
                goto LABEL_174;
              if (v131 >= v122)
              {
                v149 = &v111[16 * v114];
                v151 = *(_QWORD *)v149;
                v150 = *((_QWORD *)v149 + 1);
                v125 = __OFSUB__(v150, v151);
                v152 = v150 - v151;
                if (v125)
                  goto LABEL_178;
                v142 = v117 < v152;
              }
              else
              {
LABEL_112:
                if ((v118 & 1) != 0)
                  goto LABEL_170;
                v126 = v110 - 2;
                v132 = &v111[16 * v110 - 32];
                v134 = *(_QWORD *)v132;
                v133 = *((_QWORD *)v132 + 1);
                v135 = __OFSUB__(v133, v134);
                v136 = v133 - v134;
                v137 = v135;
                if (v135)
                  goto LABEL_173;
                v138 = &v111[16 * v114];
                v140 = *(_QWORD *)v138;
                v139 = *((_QWORD *)v138 + 1);
                v125 = __OFSUB__(v139, v140);
                v141 = v139 - v140;
                if (v125)
                  goto LABEL_176;
                if (__OFADD__(v136, v141))
                  goto LABEL_177;
                if (v136 + v141 < v117)
                  goto LABEL_124;
                v142 = v117 < v141;
              }
              if (v142)
                v114 = v126;
            }
            else
            {
              if (v110 == 3)
              {
                v116 = *((_QWORD *)v28 + 4);
                v115 = *((_QWORD *)v28 + 5);
                v125 = __OFSUB__(v115, v116);
                v117 = v115 - v116;
                v118 = v125;
                goto LABEL_112;
              }
              v143 = *((_QWORD *)v28 + 4);
              v144 = *((_QWORD *)v28 + 5);
              v125 = __OFSUB__(v144, v143);
              v136 = v144 - v143;
              v137 = v125;
LABEL_124:
              if ((v137 & 1) != 0)
                goto LABEL_172;
              v145 = &v111[16 * v114];
              v147 = *(_QWORD *)v145;
              v146 = *((_QWORD *)v145 + 1);
              v125 = __OFSUB__(v146, v147);
              v148 = v146 - v147;
              if (v125)
                goto LABEL_175;
              if (v148 < v136)
                goto LABEL_141;
            }
            v153 = v114 - 1;
            if (v114 - 1 >= v110)
            {
              __break(1u);
LABEL_165:
              __break(1u);
LABEL_166:
              __break(1u);
LABEL_167:
              __break(1u);
LABEL_168:
              __break(1u);
LABEL_169:
              __break(1u);
LABEL_170:
              __break(1u);
LABEL_171:
              __break(1u);
LABEL_172:
              __break(1u);
LABEL_173:
              __break(1u);
LABEL_174:
              __break(1u);
LABEL_175:
              __break(1u);
LABEL_176:
              __break(1u);
LABEL_177:
              __break(1u);
LABEL_178:
              __break(1u);
LABEL_179:
              __break(1u);
LABEL_180:
              __break(1u);
LABEL_181:
              __break(1u);
LABEL_182:
              __break(1u);
LABEL_183:
              __break(1u);
LABEL_184:
              __break(1u);
LABEL_185:
              __break(1u);
LABEL_186:
              __break(1u);
LABEL_187:
              __break(1u);
              break;
            }
            if (!v30)
              goto LABEL_190;
            v154 = v28;
            v155 = &v111[16 * v153];
            v156 = *(_QWORD *)v155;
            v157 = &v111[16 * v114];
            v158 = *((_QWORD *)v157 + 1);
            v159 = v186;
            specialized _merge<A>(low:mid:high:buffer:by:)((uint64_t *)(v30 + 8 * *(_QWORD *)v155), (uint64_t *)(v30 + 8 * *(_QWORD *)v157), v30 + 8 * v158, v183);
            v186 = v159;
            if (v159)
            {
              v161 = swift_bridgeObjectRelease(v154);
              goto LABEL_161;
            }
            if (v158 < v156)
              goto LABEL_165;
            if (v114 > *((_QWORD *)v154 + 2))
              goto LABEL_166;
            *(_QWORD *)v155 = v156;
            *(_QWORD *)&v111[16 * v153 + 8] = v158;
            v160 = *((_QWORD *)v154 + 2);
            if (v114 >= v160)
              goto LABEL_167;
            v28 = v154;
            v110 = v160 - 1;
            memmove(&v111[16 * v114], v157 + 16, 16 * (v160 - 1 - v114));
            *((_QWORD *)v154 + 2) = v160 - 1;
            v31 = v193;
            if (v160 <= 2)
              goto LABEL_141;
            goto LABEL_99;
          }
          v110 = 1;
LABEL_141:
          v23 = v180;
          v29 = v191;
          if (v191 >= v180)
          {
            v2 = v186;
            if (v110 < 2)
              goto LABEL_159;
LABEL_146:
            v162 = *v171;
            while (1)
            {
              v163 = v110 - 2;
              if (v110 < 2)
                goto LABEL_179;
              if (!v162)
                goto LABEL_192;
              v164 = v28;
              v165 = v28 + 32;
              v166 = *(_QWORD *)&v28[16 * v163 + 32];
              v167 = *(_QWORD *)&v28[16 * v110 + 24];
              specialized _merge<A>(low:mid:high:buffer:by:)((uint64_t *)(v162 + 8 * v166), (uint64_t *)(v162 + 8 * *(_QWORD *)&v165[16 * v110 - 16]), v162 + 8 * v167, v183);
              if (v2)
              {
                v170 = v164;
                goto LABEL_160;
              }
              if (v167 < v166)
                goto LABEL_181;
              if ((swift_isUniquelyReferenced_nonNull_native(v164) & 1) == 0)
                v164 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v164);
              if (v163 >= *((_QWORD *)v164 + 2))
                goto LABEL_182;
              v168 = &v164[16 * v163 + 32];
              *(_QWORD *)v168 = v166;
              *((_QWORD *)v168 + 1) = v167;
              v169 = *((_QWORD *)v164 + 2);
              if (v110 > v169)
                goto LABEL_183;
              v28 = v164;
              memmove(&v164[16 * v110 + 16], &v164[16 * v110 + 32], 16 * (v169 - v110));
              *((_QWORD *)v164 + 2) = v169 - 1;
              v110 = v169 - 1;
              if (v169 <= 2)
                goto LABEL_159;
            }
          }
          goto LABEL_13;
        }
        v99 = v98;
        v30 = v188;
        if (*(_QWORD *)(v98 + 16))
        {
          v100 = v185;
          outlined init with copy of MOSuggestionSheetAssetDateRange(v98 + ((*(unsigned __int8 *)(v193 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v193 + 80)), v185);
          v101 = 0;
        }
        else
        {
          v101 = 1;
          v100 = v185;
        }
        v102 = v192;
        v189(v100, v101, 1, v192);
        swift_bridgeObjectRelease(v99);
        if (v96(v100, 1, v102) == 1)
          goto LABEL_91;
        v103 = v184;
        outlined init with take of MOSuggestionSheetAssetDateRange(v100, v184);
        v104 = v190;
        v105 = static Date.< infix(_:_:)(v190, v103);
        outlined destroy of MOSuggestionSheetAssetDateRange(v103);
        outlined destroy of MOSuggestionSheetAssetDateRange(v104);
        swift_release(v79);
        swift_release(v81);
        v31 = v193;
        if ((v105 & 1) == 0)
          goto LABEL_68;
      }
      else
      {
        swift_release(v79);
        swift_release(v81);
      }
      if (!v30)
        goto LABEL_189;
      v106 = *v77;
      v79 = v77[1];
      *v77 = v79;
      v77[1] = v106;
      --v77;
      ++v80;
      v78 = v191;
      if (v191 == v80)
        goto LABEL_69;
    }
  }
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  Swift::Int v36;
  Swift::Int v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  __int128 v44;
  Swift::Int v45;
  uint64_t v46;
  uint64_t v47;
  Swift::Int v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  char v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  char v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  Swift::Int v125;
  _QWORD *v126;
  Swift::Int v127;
  Swift::Int v128;
  Swift::Int v129;
  char *__dst;
  uint64_t v131;
  uint64_t v132;

  v2 = v1;
  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_151;
    if (v4)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1);
    return;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_159;
  v125 = v5;
  v123 = a1;
  if (v4 < 2)
  {
    v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v4 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
      v12 = (char *)_swiftEmptyArrayStorage;
LABEL_116:
      v126 = v9;
      if (v13 >= 2)
      {
        v115 = *v123;
        do
        {
          v116 = v13 - 2;
          if (v13 < 2)
            goto LABEL_146;
          if (!v115)
            goto LABEL_158;
          v117 = *(_QWORD *)&v12[16 * v116 + 32];
          v118 = *(_QWORD *)&v12[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v115 + 32 * v117), (char *)(v115 + 32 * *(_QWORD *)&v12[16 * v13 + 16]), v115 + 32 * v118, __dst);
          if (v2)
            break;
          if (v118 < v117)
            goto LABEL_147;
          if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
            v12 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
          if (v116 >= *((_QWORD *)v12 + 2))
            goto LABEL_148;
          v119 = &v12[16 * v116 + 32];
          *(_QWORD *)v119 = v117;
          *((_QWORD *)v119 + 1) = v118;
          v120 = *((_QWORD *)v12 + 2);
          if (v13 > v120)
            goto LABEL_149;
          memmove(&v12[16 * v13 + 16], &v12[16 * v13 + 32], 16 * (v120 - v13));
          *((_QWORD *)v12 + 2) = v120 - 1;
          v13 = v120 - 1;
        }
        while (v120 > 2);
      }
LABEL_127:
      swift_bridgeObjectRelease(v12);
      v126[2] = 0;
      swift_bridgeObjectRelease(v126);
      return;
    }
    v131 = v1;
  }
  else
  {
    v131 = v1;
    v7 = v6 >> 1;
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MOAssetAndMediaType, Int));
    v9 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    v9[2] = v7;
    __dst = (char *)(v9 + 4);
  }
  v126 = v9;
  v10 = 0;
  v11 = *a1;
  v124 = *a1 + 64;
  v122 = *a1 + 24;
  v12 = (char *)_swiftEmptyArrayStorage;
  v129 = v4;
  v132 = *a1;
  while (1)
  {
    v14 = v10++;
    if (v10 < v4)
    {
      v15 = 32 * v14;
      v16 = *(_QWORD *)(v11 + 32 * v14);
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v11 + 32 * v10));
      v19 = v18;
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v22 = v21;
      if (v17 == v20 && v19 == v21)
        v24 = 0;
      else
        v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v20, v21, 1);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v22);
      v10 = v14 + 2;
      if (v14 + 2 < v129)
      {
        v25 = (_QWORD *)(v124 + 32 * v14);
        while (1)
        {
          v26 = *(v25 - 4);
          v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v25);
          v29 = v28;
          v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
          v32 = v31;
          v33 = v27 == v30 && v29 == v31;
          v34 = v33 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v30, v31, 1);
          swift_bridgeObjectRelease(v29);
          swift_bridgeObjectRelease(v32);
          if (((v24 ^ v34) & 1) != 0)
            break;
          ++v10;
          v25 += 4;
          if (v129 == v10)
          {
            v10 = v129;
            break;
          }
        }
      }
      v11 = v132;
      if ((v24 & 1) != 0)
      {
        if (v10 < v14)
          goto LABEL_152;
        if (v14 < v10)
        {
          v35 = 32 * v10;
          v36 = v10;
          v37 = v14;
          do
          {
            if (v37 != --v36)
            {
              if (!v132)
                goto LABEL_157;
              v38 = (_OWORD *)(v132 + v15);
              v39 = v132 + v35;
              v40 = *(_QWORD *)(v132 + v15);
              v41 = *(_QWORD *)(v132 + v15 + 8);
              v42 = *(_BYTE *)(v132 + v15 + 16);
              v43 = *(_QWORD *)(v132 + v15 + 24);
              v44 = *(_OWORD *)(v132 + v35 - 16);
              *v38 = *(_OWORD *)(v132 + v35 - 32);
              v38[1] = v44;
              *(_QWORD *)(v39 - 32) = v40;
              *(_QWORD *)(v39 - 24) = v41;
              *(_BYTE *)(v39 - 16) = v42;
              *(_QWORD *)(v39 - 8) = v43;
            }
            ++v37;
            v35 -= 32;
            v15 += 32;
          }
          while (v37 < v36);
        }
      }
      v4 = v129;
    }
    if (v10 >= v4)
      goto LABEL_67;
    if (__OFSUB__(v10, v14))
      goto LABEL_150;
    if (v10 - v14 >= v125)
      goto LABEL_67;
    if (__OFADD__(v14, v125))
      goto LABEL_153;
    v45 = v14 + v125 >= v4 ? v4 : v14 + v125;
    if (v45 < v14)
      break;
    if (v10 != v45)
    {
      v121 = v12;
      v46 = v122 + 32 * v10;
      v127 = v45;
      v128 = v14;
      do
      {
        v47 = *(_QWORD *)(v11 + 32 * v10);
        v48 = v14;
        v49 = v46;
        while (1)
        {
          v50 = (__int128 *)(v49 - 56);
          v51 = *(_QWORD *)(v49 - 56);
          v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
          v54 = v53;
          v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
          if (v52 == v55 && v54 == v56)
            break;
          v58 = v56;
          v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v54, v55, v56, 1);
          swift_bridgeObjectRelease(v54);
          swift_bridgeObjectRelease(v58);
          if ((v59 & 1) == 0)
            goto LABEL_55;
          v11 = v132;
          if (!v132)
            goto LABEL_155;
          v61 = *v50;
          v60 = *(_OWORD *)(v49 - 40);
          *(_QWORD *)(v49 - 32) = *(_QWORD *)v49;
          v49 -= 32;
          v47 = *(_QWORD *)(v49 + 8);
          v62 = *(_QWORD *)(v49 + 16);
          v63 = *(_BYTE *)(v49 + 24);
          v50[2] = v61;
          v50[3] = v60;
          *(_QWORD *)(v49 - 24) = v47;
          *(_QWORD *)(v49 - 16) = v62;
          *(_BYTE *)(v49 - 8) = v63;
          if (v10 == ++v48)
            goto LABEL_56;
        }
        swift_bridgeObjectRelease_n(v54, 2);
LABEL_55:
        v11 = v132;
LABEL_56:
        ++v10;
        v46 += 32;
        v14 = v128;
      }
      while (v10 != v127);
      v10 = v127;
      v12 = v121;
    }
LABEL_67:
    if (v10 < v14)
      goto LABEL_145;
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v65 = *((_QWORD *)v12 + 2);
    v64 = *((_QWORD *)v12 + 3);
    v13 = v65 + 1;
    v11 = v132;
    if (v65 >= v64 >> 1)
    {
      v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v65 + 1, 1, v12);
      v11 = v132;
      v12 = v114;
    }
    *((_QWORD *)v12 + 2) = v13;
    v66 = v12 + 32;
    v67 = &v12[16 * v65 + 32];
    *(_QWORD *)v67 = v14;
    *((_QWORD *)v67 + 1) = v10;
    if (v65)
    {
      while (1)
      {
        v68 = v13 - 1;
        if (v13 >= 4)
        {
          v73 = &v66[16 * v13];
          v74 = *((_QWORD *)v73 - 8);
          v75 = *((_QWORD *)v73 - 7);
          v79 = __OFSUB__(v75, v74);
          v76 = v75 - v74;
          if (v79)
            goto LABEL_134;
          v78 = *((_QWORD *)v73 - 6);
          v77 = *((_QWORD *)v73 - 5);
          v79 = __OFSUB__(v77, v78);
          v71 = v77 - v78;
          v72 = v79;
          if (v79)
            goto LABEL_135;
          v80 = v13 - 2;
          v81 = &v66[16 * v13 - 32];
          v83 = *(_QWORD *)v81;
          v82 = *((_QWORD *)v81 + 1);
          v79 = __OFSUB__(v82, v83);
          v84 = v82 - v83;
          if (v79)
            goto LABEL_137;
          v79 = __OFADD__(v71, v84);
          v85 = v71 + v84;
          if (v79)
            goto LABEL_140;
          if (v85 >= v76)
          {
            v103 = &v66[16 * v68];
            v105 = *(_QWORD *)v103;
            v104 = *((_QWORD *)v103 + 1);
            v79 = __OFSUB__(v104, v105);
            v106 = v104 - v105;
            if (v79)
              goto LABEL_144;
            v96 = v71 < v106;
            goto LABEL_104;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v97 = *((_QWORD *)v12 + 4);
            v98 = *((_QWORD *)v12 + 5);
            v79 = __OFSUB__(v98, v97);
            v90 = v98 - v97;
            v91 = v79;
            goto LABEL_98;
          }
          v70 = *((_QWORD *)v12 + 4);
          v69 = *((_QWORD *)v12 + 5);
          v79 = __OFSUB__(v69, v70);
          v71 = v69 - v70;
          v72 = v79;
        }
        if ((v72 & 1) != 0)
          goto LABEL_136;
        v80 = v13 - 2;
        v86 = &v66[16 * v13 - 32];
        v88 = *(_QWORD *)v86;
        v87 = *((_QWORD *)v86 + 1);
        v89 = __OFSUB__(v87, v88);
        v90 = v87 - v88;
        v91 = v89;
        if (v89)
          goto LABEL_139;
        v92 = &v66[16 * v68];
        v94 = *(_QWORD *)v92;
        v93 = *((_QWORD *)v92 + 1);
        v79 = __OFSUB__(v93, v94);
        v95 = v93 - v94;
        if (v79)
          goto LABEL_142;
        if (__OFADD__(v90, v95))
          goto LABEL_143;
        if (v90 + v95 >= v71)
        {
          v96 = v71 < v95;
LABEL_104:
          if (v96)
            v68 = v80;
          goto LABEL_106;
        }
LABEL_98:
        if ((v91 & 1) != 0)
          goto LABEL_138;
        v99 = &v66[16 * v68];
        v101 = *(_QWORD *)v99;
        v100 = *((_QWORD *)v99 + 1);
        v79 = __OFSUB__(v100, v101);
        v102 = v100 - v101;
        if (v79)
          goto LABEL_141;
        if (v102 < v90)
          goto LABEL_15;
LABEL_106:
        v107 = v68 - 1;
        if (v68 - 1 >= v13)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v11)
          goto LABEL_156;
        v108 = v12;
        v109 = &v66[16 * v107];
        v110 = *(_QWORD *)v109;
        v111 = &v66[16 * v68];
        v112 = *((_QWORD *)v111 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v11 + 32 * *(_QWORD *)v109), (char *)(v11 + 32 * *(_QWORD *)v111), v11 + 32 * v112, __dst);
        if (v131)
        {
          v12 = v108;
          goto LABEL_127;
        }
        if (v112 < v110)
          goto LABEL_131;
        if (v68 > *((_QWORD *)v108 + 2))
          goto LABEL_132;
        *(_QWORD *)v109 = v110;
        *(_QWORD *)&v66[16 * v107 + 8] = v112;
        v113 = *((_QWORD *)v108 + 2);
        if (v68 >= v113)
          goto LABEL_133;
        v12 = v108;
        v13 = v113 - 1;
        memmove(&v66[16 * v68], v111 + 16, 16 * (v113 - 1 - v68));
        *((_QWORD *)v12 + 2) = v113 - 1;
        v11 = v132;
        if (v113 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v4 = v129;
    v9 = v126;
    if (v10 >= v129)
    {
      v2 = v131;
      goto LABEL_116;
    }
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  _BOOL4 v18;
  uint64_t *v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t *v24;
  Swift::Int v25;
  Swift::Int v26;
  uint64_t *v27;
  uint64_t v28;
  Swift::Int v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  char v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  Swift::Int v84;
  uint64_t *v85;
  uint64_t *v86;
  Swift::Int v87;
  BOOL v88;
  BOOL v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  Swift::Int v107;
  Swift::Int v108;
  Swift::Int v109;
  char *v110;
  Swift::Int v111;
  char *v112;
  Swift::Int v113;
  uint64_t *__dst;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_145;
    if (v3)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_154;
  v6 = v4;
  v105 = a1;
  if (v3 < 2)
  {
    v10 = (char *)_swiftEmptyArrayStorage;
    v118 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (uint64_t *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v33 = _swiftEmptyArrayStorage[2];
      goto LABEL_104;
    }
  }
  else
  {
    v7 = v5 >> 1;
    v8 = type metadata accessor for MOSuggestionAssetReference(0);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    __dst = (uint64_t *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v118 = v9;
  }
  v11 = 0;
  v12 = *a1;
  v106 = *a1 + 16;
  v104 = *a1 - 8;
  v10 = (char *)_swiftEmptyArrayStorage;
  v113 = v3;
  v109 = v6;
  v115 = *a1;
  do
  {
    v13 = v11;
    v14 = v11 + 1;
    if (v11 + 1 < v3)
    {
      v110 = v10;
      v15 = *(_QWORD *)(v12 + 8 * v14);
      v117 = v15;
      v116 = *(_QWORD *)(v12 + 8 * v11);
      v16 = v116;
      swift_retain(v15);
      swift_retain(v16);
      v17 = closure #1 in MOEventBundle.typeSortedAssetReferencesForInterstitial.getter(&v117, &v116);
      if (v1)
      {
        swift_bridgeObjectRelease(v110);
        v102 = v15;
        goto LABEL_120;
      }
      v18 = v17;
      swift_release(v15);
      swift_release(v16);
      v14 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v107 = v13;
        v19 = (uint64_t *)(v106 + 8 * v13);
        while (1)
        {
          v20 = v14;
          v21 = *(v19 - 1);
          v117 = *v19;
          v22 = v117;
          v116 = v21;
          swift_retain(v117);
          swift_retain(v21);
          v23 = closure #1 in MOEventBundle.typeSortedAssetReferencesForInterstitial.getter(&v117, &v116);
          swift_release(v22);
          swift_release(v21);
          if (((v18 ^ v23) & 1) != 0)
            break;
          v14 = v20 + 1;
          ++v19;
          v3 = v113;
          if (v113 == v20 + 1)
          {
            v14 = v113;
            v6 = v109;
            goto LABEL_21;
          }
        }
        v3 = v113;
        v6 = v109;
        v14 = v20;
LABEL_21:
        v13 = v107;
      }
      v10 = v110;
      v12 = v115;
      if (v18)
      {
        if (v14 < v13)
          goto LABEL_149;
        if (v13 < v14)
        {
          v24 = (uint64_t *)(v104 + 8 * v14);
          v25 = v14;
          v26 = v13;
          v27 = (uint64_t *)(v115 + 8 * v13);
          do
          {
            if (v26 != --v25)
            {
              if (!v115)
                goto LABEL_152;
              v28 = *v27;
              *v27 = *v24;
              *v24 = v28;
            }
            ++v26;
            --v24;
            ++v27;
          }
          while (v26 < v25);
        }
      }
    }
    if (v14 >= v3)
      goto LABEL_40;
    if (__OFSUB__(v14, v13))
      goto LABEL_146;
    if (v14 - v13 >= v6)
    {
LABEL_40:
      if (v14 < v13)
        goto LABEL_144;
      goto LABEL_41;
    }
    if (__OFADD__(v13, v6))
      goto LABEL_147;
    if (v13 + v6 >= v3)
      v29 = v3;
    else
      v29 = v13 + v6;
    if (v29 < v13)
    {
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
      __break(1u);
      return;
    }
    if (v14 == v29)
      goto LABEL_40;
    v112 = v10;
    v82 = (uint64_t *)(v104 + 8 * v14);
    v108 = v13;
    do
    {
      v83 = *(_QWORD *)(v12 + 8 * v14);
      v84 = v13;
      v85 = v82;
      v86 = v82;
      while (1)
      {
        v87 = v14;
        v117 = v83;
        v116 = *v86;
        v16 = v116;
        swift_retain(v83);
        swift_retain(v16);
        v88 = closure #1 in MOEventBundle.typeSortedAssetReferencesForInterstitial.getter(&v117, &v116);
        if (v1)
        {
          swift_bridgeObjectRelease(v112);
          v102 = v83;
LABEL_120:
          swift_release(v102);
          swift_release(v16);
          goto LABEL_123;
        }
        v89 = v88;
        swift_release(v83);
        swift_release(v16);
        if (!v89)
          break;
        v12 = v115;
        if (!v115)
          goto LABEL_151;
        v90 = *v86;
        v83 = v86[1];
        *v86 = v83;
        v86[1] = v90;
        --v86;
        ++v84;
        v14 = v87;
        if (v87 == v84)
          goto LABEL_98;
      }
      v12 = v115;
      v14 = v87;
LABEL_98:
      ++v14;
      v82 = v85 + 1;
      v13 = v108;
    }
    while (v14 != v29);
    v14 = v29;
    v10 = v112;
    if (v29 < v108)
      goto LABEL_144;
LABEL_41:
    v30 = v10;
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) != 0)
      v10 = v30;
    else
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v30 + 2) + 1, 1, v30);
    v32 = *((_QWORD *)v10 + 2);
    v31 = *((_QWORD *)v10 + 3);
    v33 = v32 + 1;
    v12 = v115;
    if (v32 >= v31 >> 1)
    {
      v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v10);
      v12 = v115;
      v10 = v91;
    }
    *((_QWORD *)v10 + 2) = v33;
    v34 = v10 + 32;
    v35 = &v10[16 * v32 + 32];
    *(_QWORD *)v35 = v13;
    *((_QWORD *)v35 + 1) = v14;
    v111 = v14;
    if (v32)
    {
      while (2)
      {
        v36 = v33 - 1;
        if (v33 >= 4)
        {
          v41 = &v34[16 * v33];
          v42 = *((_QWORD *)v41 - 8);
          v43 = *((_QWORD *)v41 - 7);
          v47 = __OFSUB__(v43, v42);
          v44 = v43 - v42;
          if (v47)
            goto LABEL_129;
          v46 = *((_QWORD *)v41 - 6);
          v45 = *((_QWORD *)v41 - 5);
          v47 = __OFSUB__(v45, v46);
          v39 = v45 - v46;
          v40 = v47;
          if (v47)
            goto LABEL_130;
          v48 = v33 - 2;
          v49 = &v34[16 * v33 - 32];
          v51 = *(_QWORD *)v49;
          v50 = *((_QWORD *)v49 + 1);
          v47 = __OFSUB__(v50, v51);
          v52 = v50 - v51;
          if (v47)
            goto LABEL_132;
          v47 = __OFADD__(v39, v52);
          v53 = v39 + v52;
          if (v47)
            goto LABEL_135;
          if (v53 >= v44)
          {
            v71 = &v34[16 * v36];
            v73 = *(_QWORD *)v71;
            v72 = *((_QWORD *)v71 + 1);
            v47 = __OFSUB__(v72, v73);
            v74 = v72 - v73;
            if (v47)
              goto LABEL_139;
            v64 = v39 < v74;
          }
          else
          {
LABEL_59:
            if ((v40 & 1) != 0)
              goto LABEL_131;
            v48 = v33 - 2;
            v54 = &v34[16 * v33 - 32];
            v56 = *(_QWORD *)v54;
            v55 = *((_QWORD *)v54 + 1);
            v57 = __OFSUB__(v55, v56);
            v58 = v55 - v56;
            v59 = v57;
            if (v57)
              goto LABEL_134;
            v60 = &v34[16 * v36];
            v62 = *(_QWORD *)v60;
            v61 = *((_QWORD *)v60 + 1);
            v47 = __OFSUB__(v61, v62);
            v63 = v61 - v62;
            if (v47)
              goto LABEL_137;
            if (__OFADD__(v58, v63))
              goto LABEL_138;
            if (v58 + v63 < v39)
              goto LABEL_71;
            v64 = v39 < v63;
          }
          if (v64)
            v36 = v48;
        }
        else
        {
          if (v33 == 3)
          {
            v38 = *((_QWORD *)v10 + 4);
            v37 = *((_QWORD *)v10 + 5);
            v47 = __OFSUB__(v37, v38);
            v39 = v37 - v38;
            v40 = v47;
            goto LABEL_59;
          }
          v65 = *((_QWORD *)v10 + 4);
          v66 = *((_QWORD *)v10 + 5);
          v47 = __OFSUB__(v66, v65);
          v58 = v66 - v65;
          v59 = v47;
LABEL_71:
          if ((v59 & 1) != 0)
            goto LABEL_133;
          v67 = &v34[16 * v36];
          v69 = *(_QWORD *)v67;
          v68 = *((_QWORD *)v67 + 1);
          v47 = __OFSUB__(v68, v69);
          v70 = v68 - v69;
          if (v47)
            goto LABEL_136;
          if (v70 < v58)
            goto LABEL_88;
        }
        v75 = v36 - 1;
        if (v36 - 1 >= v33)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
          goto LABEL_148;
        }
        if (!v12)
          goto LABEL_150;
        v76 = v10;
        v77 = &v34[16 * v75];
        v78 = *(_QWORD *)v77;
        v79 = &v34[16 * v36];
        v80 = *((_QWORD *)v79 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((uint64_t *)(v12 + 8 * *(_QWORD *)v77), (uint64_t *)(v12 + 8 * *(_QWORD *)v79), v12 + 8 * v80, __dst);
        if (v1)
        {
          v92 = (uint64_t)v76;
          goto LABEL_122;
        }
        if (v80 < v78)
          goto LABEL_126;
        if (v36 > *((_QWORD *)v76 + 2))
          goto LABEL_127;
        *(_QWORD *)v77 = v78;
        *(_QWORD *)&v34[16 * v75 + 8] = v80;
        v81 = *((_QWORD *)v76 + 2);
        if (v36 >= v81)
          goto LABEL_128;
        v33 = v81 - 1;
        memmove(&v34[16 * v36], v79 + 16, 16 * (v81 - 1 - v36));
        v10 = v76;
        *((_QWORD *)v76 + 2) = v81 - 1;
        v12 = v115;
        if (v81 <= 2)
          goto LABEL_88;
        continue;
      }
    }
    v33 = 1;
LABEL_88:
    v11 = v111;
    v3 = v113;
    v6 = v109;
  }
  while (v111 < v113);
LABEL_104:
  if (v33 >= 2)
  {
    v93 = *v105;
    do
    {
      v94 = v33 - 2;
      if (v33 < 2)
        goto LABEL_140;
      if (!v93)
        goto LABEL_153;
      v95 = (uint64_t)v10;
      v96 = *(_QWORD *)&v10[16 * v94 + 32];
      v97 = *(_QWORD *)&v10[16 * v33 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)((uint64_t *)(v93 + 8 * v96), (uint64_t *)(v93 + 8 * *(_QWORD *)&v10[16 * v33 + 16]), v93 + 8 * v97, __dst);
      if (v1)
      {
        v92 = v95;
        goto LABEL_122;
      }
      if (v97 < v96)
        goto LABEL_141;
      if ((swift_isUniquelyReferenced_nonNull_native(v95) & 1) != 0)
        v98 = (char *)v95;
      else
        v98 = specialized _ArrayBuffer._consumeAndCreateNew()(v95);
      if (v94 >= *((_QWORD *)v98 + 2))
        goto LABEL_142;
      v99 = &v98[16 * v94 + 32];
      *(_QWORD *)v99 = v96;
      *((_QWORD *)v99 + 1) = v97;
      v100 = *((_QWORD *)v98 + 2);
      if (v33 > v100)
        goto LABEL_143;
      v101 = v98;
      memmove(&v98[16 * v33 + 16], &v98[16 * v33 + 32], 16 * (v100 - v33));
      v10 = v101;
      *((_QWORD *)v101 + 2) = v100 - 1;
      v33 = v100 - 1;
    }
    while (v100 > 2);
  }
  v92 = (uint64_t)v10;
LABEL_122:
  v103 = swift_bridgeObjectRelease(v92);
LABEL_123:
  *(_QWORD *)((v118 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
  specialized Array._endMutation()(v103);
  swift_bridgeObjectRelease(v118);
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  double v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  double v29;
  id *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  double v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  id v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  double v45;
  uint64_t *v46;
  Swift::Int v47;
  Swift::Int v48;
  uint64_t *v49;
  uint64_t v50;
  Swift::Int v51;
  uint64_t v52;
  void *v53;
  Swift::Int v54;
  uint64_t v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  double v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  id v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  double v70;
  void *v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  char v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  Swift::Int v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  Swift::Int v135;
  Swift::Int v136;
  Swift::Int v137;
  Swift::Int v138;
  Swift::Int v139;
  Swift::Int v140;
  void **v141;
  uint64_t v142;
  _QWORD v143[2];
  _QWORD v144[5];
  __int128 v145;
  __int128 v146;
  uint64_t v147;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_188;
    if (v3)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_196;
  v135 = v4;
  v132 = a1;
  if (v3 < 2)
  {
    v9 = (char *)_swiftEmptyArrayStorage;
    v147 = (uint64_t)_swiftEmptyArrayStorage;
    v141 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
LABEL_154:
      if (v12 >= 2)
      {
        v124 = *v132;
        do
        {
          v125 = v12 - 2;
          if (v12 < 2)
            goto LABEL_183;
          if (!v124)
            goto LABEL_195;
          v126 = *(_QWORD *)&v9[16 * v125 + 32];
          v127 = *(_QWORD *)&v9[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v124 + 8 * v126), (id *)(v124 + 8 * *(_QWORD *)&v9[16 * v12 + 16]), v124 + 8 * v127, v141);
          if (v1)
            break;
          if (v127 < v126)
            goto LABEL_184;
          if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
            v9 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v9);
          if (v125 >= *((_QWORD *)v9 + 2))
            goto LABEL_185;
          v128 = &v9[16 * v125 + 32];
          *(_QWORD *)v128 = v126;
          *((_QWORD *)v128 + 1) = v127;
          v129 = *((_QWORD *)v9 + 2);
          if (v12 > v129)
            goto LABEL_186;
          memmove(&v9[16 * v12 + 16], &v9[16 * v12 + 32], 16 * (v129 - v12));
          *((_QWORD *)v9 + 2) = v129 - 1;
          v12 = v129 - 1;
        }
        while (v129 > 2);
      }
LABEL_165:
      swift_bridgeObjectRelease(v9);
      *(_QWORD *)((v147 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v130);
      swift_bridgeObjectRelease(v147);
      return;
    }
  }
  else
  {
    v6 = v5 >> 1;
    v7 = type metadata accessor for UIApplication(0, &lazy cache variable for type metadata for MOEventBundle, MOEventBundle_ptr);
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
    v141 = (void **)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    v147 = v8;
  }
  v10 = 0;
  v11 = *a1;
  v134 = *a1 + 16;
  v9 = (char *)_swiftEmptyArrayStorage;
  v133 = *a1 - 8;
  v142 = *a1;
  v137 = v3;
  while (2)
  {
    v13 = v10;
    v14 = v10 + 1;
    if (v10 + 1 >= v3)
      goto LABEL_69;
    v15 = *(void **)(v11 + 8 * v10);
    v16 = *(id *)(v11 + 8 * v14);
    v17 = v15;
    v18 = objc_msgSend(v16, "rankingDictionary");
    v19 = 0.0;
    if (v18)
    {
      v20 = v18;
      v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v18, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      strcpy((char *)v143, "rankingScore");
      BYTE5(v143[1]) = 0;
      HIWORD(v143[1]) = -5120;
      AnyHashable.init<A>(_:)(v144, v143, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(v21 + 16)
        && (v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v144), (v23 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v21 + 56) + 32 * v22, (uint64_t)&v145);
      }
      else
      {
        v145 = 0u;
        v146 = 0u;
      }
      swift_bridgeObjectRelease(v21);
      outlined destroy of AnyHashable((uint64_t)v144);
      if (*((_QWORD *)&v146 + 1))
      {
        if ((swift_dynamicCast(v143, &v145, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
          v19 = *(double *)v143;
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v145, &demangling cache variable for type metadata for Any?);
      }
    }
    v24 = objc_msgSend(v17, "rankingDictionary");
    if (!v24)
      goto LABEL_34;
    v25 = v24;
    v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v24, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

    strcpy((char *)v143, "rankingScore");
    BYTE5(v143[1]) = 0;
    HIWORD(v143[1]) = -5120;
    AnyHashable.init<A>(_:)(v144, v143, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v26 + 16) && (v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v144), (v28 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v26 + 56) + 32 * v27, (uint64_t)&v145);
    }
    else
    {
      v145 = 0u;
      v146 = 0u;
    }
    swift_bridgeObjectRelease(v26);
    outlined destroy of AnyHashable((uint64_t)v144);
    if (!*((_QWORD *)&v146 + 1))
    {
      outlined destroy of Any?((uint64_t)&v145, &demangling cache variable for type metadata for Any?);
      goto LABEL_34;
    }
    if ((swift_dynamicCast(v143, &v145, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) == 0)
    {
LABEL_34:

      v29 = 0.0;
      goto LABEL_35;
    }
    v29 = *(double *)v143;

LABEL_35:
    v14 = v13 + 2;
    v11 = v142;
    if (v13 + 2 >= v3)
      goto LABEL_61;
    v138 = v13;
    v30 = (id *)(v134 + 8 * v13);
    while (1)
    {
      v31 = *(v30 - 1);
      v32 = *v30;
      v33 = v31;
      v34 = objc_msgSend(v32, "rankingDictionary");
      v35 = 0.0;
      if (v34)
      {
        v36 = v34;
        v37 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v34, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

        strcpy((char *)v143, "rankingScore");
        BYTE5(v143[1]) = 0;
        HIWORD(v143[1]) = -5120;
        AnyHashable.init<A>(_:)(v144, v143, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(v37 + 16)
          && (v38 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v144), (v39 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v37 + 56) + 32 * v38, (uint64_t)&v145);
        }
        else
        {
          v145 = 0u;
          v146 = 0u;
        }
        swift_bridgeObjectRelease(v37);
        outlined destroy of AnyHashable((uint64_t)v144);
        if (*((_QWORD *)&v146 + 1))
        {
          if ((swift_dynamicCast(v143, &v145, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
            v35 = *(double *)v143;
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v145, &demangling cache variable for type metadata for Any?);
        }
      }
      v40 = objc_msgSend(v33, "rankingDictionary");
      if (v40)
      {
        v41 = v40;
        v42 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v40, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

        strcpy((char *)v143, "rankingScore");
        BYTE5(v143[1]) = 0;
        HIWORD(v143[1]) = -5120;
        AnyHashable.init<A>(_:)(v144, v143, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(v42 + 16)
          && (v43 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v144), (v44 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v42 + 56) + 32 * v43, (uint64_t)&v145);
        }
        else
        {
          v145 = 0u;
          v146 = 0u;
        }
        swift_bridgeObjectRelease(v42);
        outlined destroy of AnyHashable((uint64_t)v144);
        if (*((_QWORD *)&v146 + 1))
        {
          if ((swift_dynamicCast(v143, &v145, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
          {
            v45 = *(double *)v143;

            goto LABEL_56;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v145, &demangling cache variable for type metadata for Any?);
        }
      }

      v45 = 0.0;
LABEL_56:
      v11 = v142;
      if (v29 < v19 == v45 >= v35)
        break;
      ++v14;
      ++v30;
      v3 = v137;
      if (v137 == v14)
      {
        v14 = v137;
        goto LABEL_60;
      }
    }
    v3 = v137;
LABEL_60:
    v13 = v138;
LABEL_61:
    if (v29 < v19)
    {
      if (v14 < v13)
        goto LABEL_189;
      if (v13 < v14)
      {
        v46 = (uint64_t *)(v133 + 8 * v14);
        v47 = v14;
        v48 = v13;
        v49 = (uint64_t *)(v11 + 8 * v13);
        do
        {
          if (v48 != --v47)
          {
            if (!v11)
              goto LABEL_194;
            v50 = *v49;
            *v49 = *v46;
            *v46 = v50;
          }
          ++v48;
          --v46;
          ++v49;
        }
        while (v48 < v47);
      }
    }
LABEL_69:
    if (v14 >= v3)
      goto LABEL_105;
    if (__OFSUB__(v14, v13))
      goto LABEL_187;
    if (v14 - v13 >= v135)
      goto LABEL_105;
    if (__OFADD__(v13, v135))
      goto LABEL_190;
    if (v13 + v135 >= v3)
      v51 = v3;
    else
      v51 = v13 + v135;
    if (v51 >= v13)
    {
      if (v14 == v51)
        goto LABEL_105;
      v139 = v13;
      v131 = v9;
      v52 = v133 + 8 * v14;
      v136 = v51;
      while (2)
      {
        v53 = *(void **)(v11 + 8 * v14);
        v54 = v139;
        v55 = v52;
        while (2)
        {
          v56 = *(void **)v55;
          v57 = v53;
          v58 = v56;
          v59 = objc_msgSend(v57, "rankingDictionary");
          v60 = 0.0;
          if (v59)
          {
            v61 = v59;
            v62 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v59, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

            strcpy((char *)v143, "rankingScore");
            BYTE5(v143[1]) = 0;
            HIWORD(v143[1]) = -5120;
            AnyHashable.init<A>(_:)(v144, v143, &type metadata for String, &protocol witness table for String);
            if (*(_QWORD *)(v62 + 16)
              && (v63 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v144), (v64 & 1) != 0))
            {
              outlined init with copy of Any(*(_QWORD *)(v62 + 56) + 32 * v63, (uint64_t)&v145);
            }
            else
            {
              v145 = 0u;
              v146 = 0u;
            }
            swift_bridgeObjectRelease(v62);
            outlined destroy of AnyHashable((uint64_t)v144);
            if (*((_QWORD *)&v146 + 1))
            {
              if ((swift_dynamicCast(v143, &v145, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
                v60 = *(double *)v143;
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v145, &demangling cache variable for type metadata for Any?);
            }
          }
          v65 = objc_msgSend(v58, "rankingDictionary");
          if (v65)
          {
            v66 = v65;
            v67 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v65, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

            strcpy((char *)v143, "rankingScore");
            BYTE5(v143[1]) = 0;
            HIWORD(v143[1]) = -5120;
            AnyHashable.init<A>(_:)(v144, v143, &type metadata for String, &protocol witness table for String);
            if (*(_QWORD *)(v67 + 16)
              && (v68 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v144), (v69 & 1) != 0))
            {
              outlined init with copy of Any(*(_QWORD *)(v67 + 56) + 32 * v68, (uint64_t)&v145);
            }
            else
            {
              v145 = 0u;
              v146 = 0u;
            }
            swift_bridgeObjectRelease(v67);
            outlined destroy of AnyHashable((uint64_t)v144);
            if (*((_QWORD *)&v146 + 1))
            {
              if ((swift_dynamicCast(v143, &v145, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
              {
                v70 = *(double *)v143;

                goto LABEL_100;
              }
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v145, &demangling cache variable for type metadata for Any?);
            }
          }

          v70 = 0.0;
LABEL_100:
          v11 = v142;
          if (v70 >= v60)
            break;
          if (!v142)
            goto LABEL_192;
          v71 = *(void **)v55;
          v53 = *(void **)(v55 + 8);
          *(_QWORD *)v55 = v53;
          *(_QWORD *)(v55 + 8) = v71;
          v55 -= 8;
          if (v14 != ++v54)
            continue;
          break;
        }
        ++v14;
        v52 += 8;
        if (v14 != v136)
          continue;
        break;
      }
      v14 = v136;
      v9 = v131;
      v3 = v137;
      v13 = v139;
LABEL_105:
      if (v14 < v13)
        goto LABEL_182;
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
      v73 = *((_QWORD *)v9 + 2);
      v72 = *((_QWORD *)v9 + 3);
      v12 = v73 + 1;
      v11 = v142;
      if (v73 >= v72 >> 1)
      {
        v123 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v9);
        v11 = v142;
        v9 = v123;
      }
      *((_QWORD *)v9 + 2) = v12;
      v74 = v9 + 32;
      v75 = &v9[16 * v73 + 32];
      *(_QWORD *)v75 = v13;
      *((_QWORD *)v75 + 1) = v14;
      v140 = v14;
      if (v73)
      {
        while (2)
        {
          v76 = v12 - 1;
          if (v12 >= 4)
          {
            v81 = &v74[16 * v12];
            v82 = *((_QWORD *)v81 - 8);
            v83 = *((_QWORD *)v81 - 7);
            v87 = __OFSUB__(v83, v82);
            v84 = v83 - v82;
            if (v87)
              goto LABEL_171;
            v86 = *((_QWORD *)v81 - 6);
            v85 = *((_QWORD *)v81 - 5);
            v87 = __OFSUB__(v85, v86);
            v79 = v85 - v86;
            v80 = v87;
            if (v87)
              goto LABEL_172;
            v88 = v12 - 2;
            v89 = &v74[16 * v12 - 32];
            v91 = *(_QWORD *)v89;
            v90 = *((_QWORD *)v89 + 1);
            v87 = __OFSUB__(v90, v91);
            v92 = v90 - v91;
            if (v87)
              goto LABEL_174;
            v87 = __OFADD__(v79, v92);
            v93 = v79 + v92;
            if (v87)
              goto LABEL_177;
            if (v93 >= v84)
            {
              v111 = &v74[16 * v76];
              v113 = *(_QWORD *)v111;
              v112 = *((_QWORD *)v111 + 1);
              v87 = __OFSUB__(v112, v113);
              v114 = v112 - v113;
              if (v87)
                goto LABEL_181;
              v104 = v79 < v114;
            }
            else
            {
LABEL_124:
              if ((v80 & 1) != 0)
                goto LABEL_173;
              v88 = v12 - 2;
              v94 = &v74[16 * v12 - 32];
              v96 = *(_QWORD *)v94;
              v95 = *((_QWORD *)v94 + 1);
              v97 = __OFSUB__(v95, v96);
              v98 = v95 - v96;
              v99 = v97;
              if (v97)
                goto LABEL_176;
              v100 = &v74[16 * v76];
              v102 = *(_QWORD *)v100;
              v101 = *((_QWORD *)v100 + 1);
              v87 = __OFSUB__(v101, v102);
              v103 = v101 - v102;
              if (v87)
                goto LABEL_179;
              if (__OFADD__(v98, v103))
                goto LABEL_180;
              if (v98 + v103 < v79)
                goto LABEL_136;
              v104 = v79 < v103;
            }
            if (v104)
              v76 = v88;
          }
          else
          {
            if (v12 == 3)
            {
              v78 = *((_QWORD *)v9 + 4);
              v77 = *((_QWORD *)v9 + 5);
              v87 = __OFSUB__(v77, v78);
              v79 = v77 - v78;
              v80 = v87;
              goto LABEL_124;
            }
            v105 = *((_QWORD *)v9 + 4);
            v106 = *((_QWORD *)v9 + 5);
            v87 = __OFSUB__(v106, v105);
            v98 = v106 - v105;
            v99 = v87;
LABEL_136:
            if ((v99 & 1) != 0)
              goto LABEL_175;
            v107 = &v74[16 * v76];
            v109 = *(_QWORD *)v107;
            v108 = *((_QWORD *)v107 + 1);
            v87 = __OFSUB__(v108, v109);
            v110 = v108 - v109;
            if (v87)
              goto LABEL_178;
            if (v110 < v98)
              goto LABEL_14;
          }
          v115 = v76 - 1;
          if (v76 - 1 >= v12)
          {
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
LABEL_176:
            __break(1u);
LABEL_177:
            __break(1u);
LABEL_178:
            __break(1u);
LABEL_179:
            __break(1u);
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
LABEL_182:
            __break(1u);
LABEL_183:
            __break(1u);
LABEL_184:
            __break(1u);
LABEL_185:
            __break(1u);
LABEL_186:
            __break(1u);
LABEL_187:
            __break(1u);
LABEL_188:
            __break(1u);
LABEL_189:
            __break(1u);
LABEL_190:
            __break(1u);
            goto LABEL_191;
          }
          if (!v11)
            goto LABEL_193;
          v116 = v3;
          v117 = v9;
          v118 = &v74[16 * v115];
          v119 = *(_QWORD *)v118;
          v120 = &v74[16 * v76];
          v121 = *((_QWORD *)v120 + 1);
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v11 + 8 * *(_QWORD *)v118), (id *)(v11 + 8 * *(_QWORD *)v120), v11 + 8 * v121, v141);
          if (v1)
          {
            v9 = v117;
            goto LABEL_165;
          }
          if (v121 < v119)
            goto LABEL_168;
          if (v76 > *((_QWORD *)v117 + 2))
            goto LABEL_169;
          *(_QWORD *)v118 = v119;
          *(_QWORD *)&v74[16 * v115 + 8] = v121;
          v122 = *((_QWORD *)v117 + 2);
          if (v76 >= v122)
            goto LABEL_170;
          v9 = v117;
          v12 = v122 - 1;
          memmove(&v74[16 * v76], v120 + 16, 16 * (v122 - 1 - v76));
          *((_QWORD *)v117 + 2) = v122 - 1;
          v3 = v116;
          v11 = v142;
          if (v122 <= 2)
            goto LABEL_14;
          continue;
        }
      }
      v12 = 1;
LABEL_14:
      v10 = v140;
      if (v140 >= v3)
        goto LABEL_154;
      continue;
    }
    break;
  }
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::Int v17;
  char *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  id *v28;
  Swift::Int v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  Swift::Int v39;
  Swift::Int v40;
  uint64_t *v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  Swift::Int v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  void *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  char v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  Swift::Int v124;
  Swift::Int v125;
  Swift::Int v126;
  Swift::Int v127;
  Swift::Int v128;
  id *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;

  v133 = type metadata accessor for Date(0);
  v131 = *(_QWORD *)(v133 - 8);
  v2 = __chkstk_darwin(v133);
  v132 = (char *)&v119 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v5 = (char *)&v119 - v4;
  v6 = a1[1];
  v7 = _minimumMergeRunLength(_:)(v6);
  if (v7 >= v6)
  {
    if (v6 < 0)
      goto LABEL_135;
    if (v6)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v6, 1, a1);
    return;
  }
  if (v6 >= 0)
    v8 = v6;
  else
    v8 = v6 + 1;
  if (v6 < -1)
    goto LABEL_143;
  v124 = v7;
  v121 = a1;
  if (v6 < 2)
  {
    v12 = (char *)_swiftEmptyArrayStorage;
    v135 = (uint64_t)_swiftEmptyArrayStorage;
    v129 = (id *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v6 != 1)
    {
      v16 = _swiftEmptyArrayStorage[2];
LABEL_101:
      v111 = v130;
      if (v16 >= 2)
      {
        v112 = *v121;
        do
        {
          v113 = v16 - 2;
          if (v16 < 2)
            goto LABEL_130;
          if (!v112)
            goto LABEL_142;
          v102 = v12;
          v114 = *(_QWORD *)&v12[16 * v113 + 32];
          v115 = *(_QWORD *)&v12[16 * v16 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v112 + 8 * v114), (id *)(v112 + 8 * *(_QWORD *)&v12[16 * v16 + 16]), (id *)(v112 + 8 * v115), v129);
          if (v111)
            goto LABEL_98;
          if (v115 < v114)
            goto LABEL_131;
          if ((swift_isUniquelyReferenced_nonNull_native(v102) & 1) == 0)
            v102 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v102);
          if (v113 >= *((_QWORD *)v102 + 2))
            goto LABEL_132;
          v116 = &v102[16 * v113 + 32];
          *(_QWORD *)v116 = v114;
          *((_QWORD *)v116 + 1) = v115;
          v117 = *((_QWORD *)v102 + 2);
          if (v16 > v117)
            goto LABEL_133;
          memmove(&v102[16 * v16 + 16], &v102[16 * v16 + 32], 16 * (v117 - v16));
          v12 = v102;
          *((_QWORD *)v102 + 2) = v117 - 1;
          v16 = v117 - 1;
        }
        while (v117 > 2);
      }
      v110 = v12;
LABEL_113:
      swift_bridgeObjectRelease(v110);
      *(_QWORD *)((v135 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v118);
      swift_bridgeObjectRelease(v135);
      return;
    }
  }
  else
  {
    v9 = v8 >> 1;
    v10 = type metadata accessor for UIApplication(0, &lazy cache variable for type metadata for MOEventBundle, MOEventBundle_ptr);
    v11 = static Array._allocateBufferUninitialized(minimumCapacity:)(v9, v10);
    *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) = v9;
    v129 = (id *)((v11 & 0xFFFFFFFFFFFFFF8) + 32);
    v135 = v11;
  }
  v13 = 0;
  v14 = *a1;
  v15 = *a1 + 16;
  v122 = *a1 - 8;
  v123 = v15;
  v12 = (char *)_swiftEmptyArrayStorage;
  v127 = v6;
  v134 = v14;
  while (1)
  {
    v17 = v13 + 1;
    v126 = v13;
    if (v13 + 1 < v6)
    {
      v18 = v12;
      v19 = *(void **)(v14 + 8 * v13);
      v20 = *(id *)(v14 + 8 * v17);
      v21 = v19;
      v22 = objc_msgSend(v20, "startDate");
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v23 = objc_msgSend(v21, "startDate");
      v24 = v132;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      LODWORD(v128) = static Date.> infix(_:_:)(v5, v24);
      v25 = *(void (**)(char *, uint64_t))(v131 + 8);
      v26 = v24;
      v27 = v133;
      v25(v26, v133);
      v25(v5, v27);

      v6 = v127;
      v17 = v13 + 2;
      if (v13 + 2 < v6)
      {
        v28 = (id *)(v123 + 8 * v13);
        while (1)
        {
          v29 = v17;
          v30 = *(v28 - 1);
          v31 = *v28;
          v32 = v30;
          v33 = objc_msgSend(v31, "startDate");
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v34 = objc_msgSend(v32, "startDate");
          v35 = v132;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          LODWORD(v34) = static Date.> infix(_:_:)(v5, v35);
          v36 = v35;
          v37 = v133;
          v25(v36, v133);
          v25(v5, v37);

          if (((v128 ^ v34) & 1) != 0)
            break;
          v17 = v29 + 1;
          ++v28;
          v6 = v127;
          if (v127 == v29 + 1)
          {
            v17 = v127;
            goto LABEL_22;
          }
        }
        v6 = v127;
        v17 = v29;
LABEL_22:
        v13 = v126;
      }
      v12 = v18;
      v14 = v134;
      if ((v128 & 1) != 0)
      {
        if (v17 < v13)
          goto LABEL_136;
        if (v13 < v17)
        {
          v38 = (uint64_t *)(v122 + 8 * v17);
          v39 = v17;
          v40 = v13;
          v41 = (uint64_t *)(v134 + 8 * v13);
          do
          {
            if (v40 != --v39)
            {
              if (!v14)
                goto LABEL_141;
              v42 = *v41;
              *v41 = *v38;
              *v38 = v42;
            }
            ++v40;
            --v38;
            ++v41;
          }
          while (v40 < v39);
        }
      }
    }
    if (v17 < v6)
    {
      if (__OFSUB__(v17, v13))
        goto LABEL_134;
      if (v17 - v13 < v124)
        break;
    }
LABEL_50:
    if (v17 < v13)
      goto LABEL_129;
    v57 = v12;
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) != 0)
      v12 = v57;
    else
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v57 + 2) + 1, 1, v57);
    v59 = *((_QWORD *)v12 + 2);
    v58 = *((_QWORD *)v12 + 3);
    v16 = v59 + 1;
    v14 = v134;
    if (v59 >= v58 >> 1)
    {
      v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, v12);
      v14 = v134;
      v12 = v109;
    }
    *((_QWORD *)v12 + 2) = v16;
    v60 = v12 + 32;
    v61 = &v12[16 * v59 + 32];
    *(_QWORD *)v61 = v13;
    *((_QWORD *)v61 + 1) = v17;
    v128 = v17;
    if (v59)
    {
      while (1)
      {
        v62 = v16 - 1;
        if (v16 >= 4)
        {
          v67 = &v60[16 * v16];
          v68 = *((_QWORD *)v67 - 8);
          v69 = *((_QWORD *)v67 - 7);
          v73 = __OFSUB__(v69, v68);
          v70 = v69 - v68;
          if (v73)
            goto LABEL_118;
          v72 = *((_QWORD *)v67 - 6);
          v71 = *((_QWORD *)v67 - 5);
          v73 = __OFSUB__(v71, v72);
          v65 = v71 - v72;
          v66 = v73;
          if (v73)
            goto LABEL_119;
          v74 = v16 - 2;
          v75 = &v60[16 * v16 - 32];
          v77 = *(_QWORD *)v75;
          v76 = *((_QWORD *)v75 + 1);
          v73 = __OFSUB__(v76, v77);
          v78 = v76 - v77;
          if (v73)
            goto LABEL_121;
          v73 = __OFADD__(v65, v78);
          v79 = v65 + v78;
          if (v73)
            goto LABEL_124;
          if (v79 >= v70)
          {
            v97 = &v60[16 * v62];
            v99 = *(_QWORD *)v97;
            v98 = *((_QWORD *)v97 + 1);
            v73 = __OFSUB__(v98, v99);
            v100 = v98 - v99;
            if (v73)
              goto LABEL_128;
            v90 = v65 < v100;
            goto LABEL_87;
          }
        }
        else
        {
          if (v16 != 3)
          {
            v91 = *((_QWORD *)v12 + 4);
            v92 = *((_QWORD *)v12 + 5);
            v73 = __OFSUB__(v92, v91);
            v84 = v92 - v91;
            v85 = v73;
            goto LABEL_81;
          }
          v64 = *((_QWORD *)v12 + 4);
          v63 = *((_QWORD *)v12 + 5);
          v73 = __OFSUB__(v63, v64);
          v65 = v63 - v64;
          v66 = v73;
        }
        if ((v66 & 1) != 0)
          goto LABEL_120;
        v74 = v16 - 2;
        v80 = &v60[16 * v16 - 32];
        v82 = *(_QWORD *)v80;
        v81 = *((_QWORD *)v80 + 1);
        v83 = __OFSUB__(v81, v82);
        v84 = v81 - v82;
        v85 = v83;
        if (v83)
          goto LABEL_123;
        v86 = &v60[16 * v62];
        v88 = *(_QWORD *)v86;
        v87 = *((_QWORD *)v86 + 1);
        v73 = __OFSUB__(v87, v88);
        v89 = v87 - v88;
        if (v73)
          goto LABEL_126;
        if (__OFADD__(v84, v89))
          goto LABEL_127;
        if (v84 + v89 >= v65)
        {
          v90 = v65 < v89;
LABEL_87:
          if (v90)
            v62 = v74;
          goto LABEL_89;
        }
LABEL_81:
        if ((v85 & 1) != 0)
          goto LABEL_122;
        v93 = &v60[16 * v62];
        v95 = *(_QWORD *)v93;
        v94 = *((_QWORD *)v93 + 1);
        v73 = __OFSUB__(v94, v95);
        v96 = v94 - v95;
        if (v73)
          goto LABEL_125;
        if (v96 < v84)
          goto LABEL_14;
LABEL_89:
        v101 = v62 - 1;
        if (v62 - 1 >= v16)
        {
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
          goto LABEL_138;
        }
        if (!v14)
          goto LABEL_140;
        v102 = v12;
        v103 = &v60[16 * v101];
        v104 = *(_QWORD *)v103;
        v105 = &v60[16 * v62];
        v106 = *((_QWORD *)v105 + 1);
        v107 = v130;
        specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v14 + 8 * *(_QWORD *)v103), (id *)(v14 + 8 * *(_QWORD *)v105), (id *)(v14 + 8 * v106), v129);
        v130 = v107;
        if (v107)
        {
LABEL_98:
          v110 = v102;
          goto LABEL_113;
        }
        if (v106 < v104)
          goto LABEL_115;
        if (v62 > *((_QWORD *)v102 + 2))
          goto LABEL_116;
        *(_QWORD *)v103 = v104;
        *(_QWORD *)&v60[16 * v101 + 8] = v106;
        v108 = *((_QWORD *)v102 + 2);
        if (v62 >= v108)
          goto LABEL_117;
        v16 = v108 - 1;
        memmove(&v60[16 * v62], v105 + 16, 16 * (v108 - 1 - v62));
        v12 = v102;
        *((_QWORD *)v102 + 2) = v108 - 1;
        v14 = v134;
        if (v108 <= 2)
          goto LABEL_14;
      }
    }
    v16 = 1;
LABEL_14:
    v6 = v127;
    v13 = v128;
    if (v128 >= v127)
      goto LABEL_101;
  }
  if (__OFADD__(v13, v124))
    goto LABEL_137;
  if (v13 + v124 >= v6)
    v43 = v6;
  else
    v43 = v13 + v124;
  if (v43 >= v13)
  {
    if (v17 != v43)
    {
      v120 = v12;
      v44 = v122 + 8 * v17;
      v125 = v43;
      do
      {
        v45 = v17;
        v46 = *(void **)(v14 + 8 * v17);
        v128 = v44;
        while (1)
        {
          v47 = *(void **)v44;
          v48 = v46;
          v49 = v47;
          v50 = objc_msgSend(v48, "startDate");
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v51 = objc_msgSend(v49, "startDate");
          v52 = v132;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          LOBYTE(v51) = static Date.> infix(_:_:)(v5, v52);
          v53 = *(void (**)(char *, uint64_t))(v131 + 8);
          v54 = v52;
          v55 = v133;
          v53(v54, v133);
          v53(v5, v55);

          if ((v51 & 1) == 0)
            break;
          v14 = v134;
          if (!v134)
            goto LABEL_139;
          v56 = *(void **)v44;
          v46 = *(void **)(v44 + 8);
          *(_QWORD *)v44 = v46;
          *(_QWORD *)(v44 + 8) = v56;
          v44 -= 8;
          if (v45 == ++v13)
            goto LABEL_43;
        }
        v14 = v134;
LABEL_43:
        v17 = v45 + 1;
        v44 = v128 + 8;
        v13 = v126;
      }
      while (v45 + 1 != v125);
      v17 = v125;
      v12 = v120;
    }
    goto LABEL_50;
  }
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::Int v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t *v40;
  uint64_t v41;
  Swift::Int v42;
  _QWORD *v43;
  uint64_t v44;
  Swift::Int v45;
  Swift::Int v46;
  uint64_t v47;
  void *v48;
  id v49;
  id v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  char v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  Swift::Int v122;
  char *v123;
  Swift::Int v124;
  Swift::Int v125;
  Swift::Int v126;
  _QWORD *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v132 = type metadata accessor for Date(0);
  v130 = *(_QWORD *)(v132 - 8);
  v2 = __chkstk_darwin(v132);
  v131 = (char *)&v118 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v5 = (char *)&v118 - v4;
  v6 = a1[1];
  v7 = _minimumMergeRunLength(_:)(v6);
  if (v7 >= v6)
  {
    if (v6 < 0)
      goto LABEL_135;
    if (v6)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v6, 1, a1);
    return;
  }
  if (v6 >= 0)
    v8 = v6;
  else
    v8 = v6 + 1;
  if (v6 < -1)
    goto LABEL_143;
  v122 = v7;
  v119 = a1;
  if (v6 < 2)
  {
    v12 = (char *)_swiftEmptyArrayStorage;
    v134 = (uint64_t)_swiftEmptyArrayStorage;
    v128 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v6 != 1)
    {
      v16 = _swiftEmptyArrayStorage[2];
LABEL_101:
      v110 = v129;
      if (v16 >= 2)
      {
        v111 = *v119;
        do
        {
          v112 = v16 - 2;
          if (v16 < 2)
            goto LABEL_130;
          if (!v111)
            goto LABEL_142;
          v101 = v12;
          v113 = *(_QWORD *)&v12[16 * v112 + 32];
          v114 = *(_QWORD *)&v12[16 * v16 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v111 + 8 * v113), (char *)(v111 + 8 * *(_QWORD *)&v12[16 * v16 + 16]), (char *)(v111 + 8 * v114), v128);
          if (v110)
            goto LABEL_98;
          if (v114 < v113)
            goto LABEL_131;
          if ((swift_isUniquelyReferenced_nonNull_native(v101) & 1) == 0)
            v101 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v101);
          if (v112 >= *((_QWORD *)v101 + 2))
            goto LABEL_132;
          v115 = &v101[16 * v112 + 32];
          *(_QWORD *)v115 = v113;
          *((_QWORD *)v115 + 1) = v114;
          v116 = *((_QWORD *)v101 + 2);
          if (v16 > v116)
            goto LABEL_133;
          memmove(&v101[16 * v16 + 16], &v101[16 * v16 + 32], 16 * (v116 - v16));
          v12 = v101;
          *((_QWORD *)v101 + 2) = v116 - 1;
          v16 = v116 - 1;
        }
        while (v116 > 2);
      }
      v109 = v12;
LABEL_113:
      swift_bridgeObjectRelease(v109);
      *(_QWORD *)((v134 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v117);
      swift_bridgeObjectRelease(v134);
      return;
    }
  }
  else
  {
    v9 = v8 >> 1;
    v10 = type metadata accessor for MOSuggestionCollectionViewCellViewModel();
    v11 = static Array._allocateBufferUninitialized(minimumCapacity:)(v9, v10);
    *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) = v9;
    v128 = (char *)((v11 & 0xFFFFFFFFFFFFFF8) + 32);
    v134 = v11;
  }
  v13 = 0;
  v14 = *a1;
  v15 = *a1 + 16;
  v120 = *a1 - 8;
  v121 = v15;
  v12 = (char *)_swiftEmptyArrayStorage;
  v126 = v6;
  v133 = v14;
  while (1)
  {
    v17 = v13;
    v18 = v13 + 1;
    if (v13 + 1 < v6)
    {
      v123 = v12;
      v19 = *(_QWORD *)(v14 + 8 * v18);
      v20 = *(_QWORD *)(v14 + 8 * v13);
      v21 = *(void **)(v19 + 16);
      swift_retain(v19);
      v22 = objc_msgSend(v21, "displayStartDate", swift_retain(v20).n128_f64[0]);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v23 = objc_msgSend(*(id *)(v20 + 16), "displayStartDate");
      v24 = v131;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      LODWORD(v127) = static Date.< infix(_:_:)(v5, v24);
      v25 = *(void (**)(char *, uint64_t))(v130 + 8);
      v26 = v132;
      v25(v24, v132);
      v25(v5, v26);
      swift_release(v19);
      v6 = v126;
      swift_release(v20);
      v18 = v17 + 2;
      if (v17 + 2 < v6)
      {
        v27 = (_QWORD *)(v121 + 8 * v17);
        while (1)
        {
          v28 = v18;
          v30 = *(v27 - 1);
          v29 = *v27;
          v31 = *(void **)(*v27 + 16);
          swift_retain(*v27);
          v32 = objc_msgSend(v31, "displayStartDate", swift_retain(v30).n128_f64[0]);
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v33 = objc_msgSend(*(id *)(v30 + 16), "displayStartDate");
          v34 = v131;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          LODWORD(v33) = static Date.< infix(_:_:)(v5, v34);
          v35 = v34;
          v36 = v132;
          v25(v35, v132);
          v25(v5, v36);
          swift_release(v29);
          swift_release(v30);
          if (((v127 ^ v33) & 1) != 0)
            break;
          v18 = v28 + 1;
          ++v27;
          v6 = v126;
          if (v126 == v28 + 1)
          {
            v18 = v126;
            goto LABEL_22;
          }
        }
        v6 = v126;
        v18 = v28;
      }
LABEL_22:
      v12 = v123;
      v14 = v133;
      if ((v127 & 1) != 0)
      {
        if (v18 < v17)
          goto LABEL_136;
        if (v17 < v18)
        {
          v37 = (uint64_t *)(v120 + 8 * v18);
          v38 = v18;
          v39 = v17;
          v40 = (uint64_t *)(v133 + 8 * v17);
          do
          {
            if (v39 != --v38)
            {
              if (!v14)
                goto LABEL_141;
              v41 = *v40;
              *v40 = *v37;
              *v37 = v41;
            }
            ++v39;
            --v37;
            ++v40;
          }
          while (v39 < v38);
        }
      }
    }
    if (v18 < v6)
    {
      if (__OFSUB__(v18, v17))
        goto LABEL_134;
      if (v18 - v17 < v122)
        break;
    }
LABEL_49:
    if (v18 < v17)
      goto LABEL_129;
    v56 = v12;
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) != 0)
      v12 = v56;
    else
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v56 + 2) + 1, 1, v56);
    v58 = *((_QWORD *)v12 + 2);
    v57 = *((_QWORD *)v12 + 3);
    v16 = v58 + 1;
    v14 = v133;
    if (v58 >= v57 >> 1)
    {
      v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v12);
      v14 = v133;
      v12 = v108;
    }
    *((_QWORD *)v12 + 2) = v16;
    v59 = &v12[16 * v58 + 32];
    *(_QWORD *)v59 = v17;
    *((_QWORD *)v59 + 1) = v18;
    v127 = (_QWORD *)v18;
    if (v58)
    {
      v60 = v12 + 32;
      while (1)
      {
        v61 = v16 - 1;
        if (v16 >= 4)
        {
          v66 = &v60[16 * v16];
          v67 = *((_QWORD *)v66 - 8);
          v68 = *((_QWORD *)v66 - 7);
          v72 = __OFSUB__(v68, v67);
          v69 = v68 - v67;
          if (v72)
            goto LABEL_118;
          v71 = *((_QWORD *)v66 - 6);
          v70 = *((_QWORD *)v66 - 5);
          v72 = __OFSUB__(v70, v71);
          v64 = v70 - v71;
          v65 = v72;
          if (v72)
            goto LABEL_119;
          v73 = v16 - 2;
          v74 = &v60[16 * v16 - 32];
          v76 = *(_QWORD *)v74;
          v75 = *((_QWORD *)v74 + 1);
          v72 = __OFSUB__(v75, v76);
          v77 = v75 - v76;
          if (v72)
            goto LABEL_121;
          v72 = __OFADD__(v64, v77);
          v78 = v64 + v77;
          if (v72)
            goto LABEL_124;
          if (v78 >= v69)
          {
            v96 = &v60[16 * v61];
            v98 = *(_QWORD *)v96;
            v97 = *((_QWORD *)v96 + 1);
            v72 = __OFSUB__(v97, v98);
            v99 = v97 - v98;
            if (v72)
              goto LABEL_128;
            v89 = v64 < v99;
            goto LABEL_87;
          }
        }
        else
        {
          if (v16 != 3)
          {
            v90 = *((_QWORD *)v12 + 4);
            v91 = *((_QWORD *)v12 + 5);
            v72 = __OFSUB__(v91, v90);
            v83 = v91 - v90;
            v84 = v72;
            goto LABEL_81;
          }
          v63 = *((_QWORD *)v12 + 4);
          v62 = *((_QWORD *)v12 + 5);
          v72 = __OFSUB__(v62, v63);
          v64 = v62 - v63;
          v65 = v72;
        }
        if ((v65 & 1) != 0)
          goto LABEL_120;
        v73 = v16 - 2;
        v79 = &v60[16 * v16 - 32];
        v81 = *(_QWORD *)v79;
        v80 = *((_QWORD *)v79 + 1);
        v82 = __OFSUB__(v80, v81);
        v83 = v80 - v81;
        v84 = v82;
        if (v82)
          goto LABEL_123;
        v85 = &v60[16 * v61];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v72 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v72)
          goto LABEL_126;
        if (__OFADD__(v83, v88))
          goto LABEL_127;
        if (v83 + v88 >= v64)
        {
          v89 = v64 < v88;
LABEL_87:
          if (v89)
            v61 = v73;
          goto LABEL_89;
        }
LABEL_81:
        if ((v84 & 1) != 0)
          goto LABEL_122;
        v92 = &v60[16 * v61];
        v94 = *(_QWORD *)v92;
        v93 = *((_QWORD *)v92 + 1);
        v72 = __OFSUB__(v93, v94);
        v95 = v93 - v94;
        if (v72)
          goto LABEL_125;
        if (v95 < v83)
          goto LABEL_14;
LABEL_89:
        v100 = v61 - 1;
        if (v61 - 1 >= v16)
        {
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
          goto LABEL_138;
        }
        if (!v14)
          goto LABEL_140;
        v101 = v12;
        v102 = &v60[16 * v100];
        v103 = *(_QWORD *)v102;
        v104 = &v60[16 * v61];
        v105 = *((_QWORD *)v104 + 1);
        v106 = v129;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v14 + 8 * *(_QWORD *)v102), (char *)(v14 + 8 * *(_QWORD *)v104), (char *)(v14 + 8 * v105), v128);
        v129 = v106;
        if (v106)
        {
LABEL_98:
          v109 = v101;
          goto LABEL_113;
        }
        if (v105 < v103)
          goto LABEL_115;
        if (v61 > *((_QWORD *)v101 + 2))
          goto LABEL_116;
        *(_QWORD *)v102 = v103;
        *(_QWORD *)&v60[16 * v100 + 8] = v105;
        v107 = *((_QWORD *)v101 + 2);
        if (v61 >= v107)
          goto LABEL_117;
        v16 = v107 - 1;
        memmove(&v60[16 * v61], v104 + 16, 16 * (v107 - 1 - v61));
        v12 = v101;
        *((_QWORD *)v101 + 2) = v107 - 1;
        v14 = v133;
        if (v107 <= 2)
          goto LABEL_14;
      }
    }
    v16 = 1;
LABEL_14:
    v6 = v126;
    v13 = (Swift::Int)v127;
    if ((uint64_t)v127 >= v126)
      goto LABEL_101;
  }
  if (__OFADD__(v17, v122))
    goto LABEL_137;
  if (v17 + v122 >= v6)
    v42 = v6;
  else
    v42 = v17 + v122;
  if (v42 >= v17)
  {
    if (v18 != v42)
    {
      v123 = v12;
      v124 = v42;
      v43 = (_QWORD *)(v120 + 8 * v18);
      v125 = v17;
      do
      {
        v44 = *(_QWORD *)(v14 + 8 * v18);
        v45 = v17;
        v127 = v43;
        while (1)
        {
          v46 = v18;
          v47 = *v43;
          v48 = *(void **)(v44 + 16);
          swift_retain(v44);
          v49 = objc_msgSend(v48, "displayStartDate", swift_retain(v47).n128_f64[0]);
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v50 = objc_msgSend(*(id *)(v47 + 16), "displayStartDate");
          v51 = v131;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          LOBYTE(v50) = static Date.< infix(_:_:)(v5, v51);
          v52 = *(void (**)(char *, uint64_t))(v130 + 8);
          v53 = v51;
          v54 = v132;
          v52(v53, v132);
          v52(v5, v54);
          swift_release(v44);
          swift_release(v47);
          if ((v50 & 1) == 0)
            break;
          v14 = v133;
          if (!v133)
            goto LABEL_139;
          v18 = v46;
          v55 = *v43;
          v44 = v43[1];
          *v43 = v44;
          v43[1] = v55;
          --v43;
          if (v46 == ++v45)
            goto LABEL_42;
        }
        v14 = v133;
        v18 = v46;
LABEL_42:
        ++v18;
        v43 = v127 + 1;
        v17 = v125;
      }
      while (v18 != v124);
      v18 = v124;
      v12 = v123;
    }
    goto LABEL_49;
  }
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

{
  uint64_t v1;
  uint64_t *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  double v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  double v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  double v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  id v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  double v46;
  uint64_t *v47;
  Swift::Int v48;
  Swift::Int v49;
  uint64_t *v50;
  uint64_t v51;
  Swift::Int v52;
  uint64_t *v53;
  uint64_t v54;
  Swift::Int v55;
  uint64_t *v56;
  uint64_t v57;
  void *v58;
  id v59;
  double v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  id v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  double v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  char v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  Swift::Int v134;
  Swift::Int v135;
  Swift::Int v136;
  Swift::Int v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _QWORD v143[5];
  __int128 v144;
  __int128 v145;
  uint64_t v146;

  v2 = a1;
  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_187;
    if (v3)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, v2);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_195;
  v6 = v4;
  v139 = v1;
  v131 = v2;
  if (v3 < 2)
  {
    v11 = (char *)_swiftEmptyArrayStorage;
    v146 = (uint64_t)_swiftEmptyArrayStorage;
    v138 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
LABEL_153:
      if (v14 >= 2)
      {
        v123 = *v131;
        do
        {
          v124 = v14 - 2;
          if (v14 < 2)
            goto LABEL_182;
          if (!v123)
            goto LABEL_194;
          v125 = *(_QWORD *)&v11[16 * v124 + 32];
          v126 = *(_QWORD *)&v11[16 * v14 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v123 + 8 * v125), (char *)(v123 + 8 * *(_QWORD *)&v11[16 * v14 + 16]), v123 + 8 * v126, v138);
          if (v139)
            break;
          if (v126 < v125)
            goto LABEL_183;
          if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
            v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
          if (v124 >= *((_QWORD *)v11 + 2))
            goto LABEL_184;
          v127 = &v11[16 * v124 + 32];
          *(_QWORD *)v127 = v125;
          *((_QWORD *)v127 + 1) = v126;
          v128 = *((_QWORD *)v11 + 2);
          if (v14 > v128)
            goto LABEL_185;
          memmove(&v11[16 * v14 + 16], &v11[16 * v14 + 32], 16 * (v128 - v14));
          *((_QWORD *)v11 + 2) = v128 - 1;
          v14 = v128 - 1;
        }
        while (v128 > 2);
      }
LABEL_164:
      swift_bridgeObjectRelease(v11);
      *(_QWORD *)((v146 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v129);
      swift_bridgeObjectRelease(v146);
      return;
    }
  }
  else
  {
    v7 = v2;
    v8 = v5 >> 1;
    v9 = type metadata accessor for MOSuggestionCollectionViewCellViewModel();
    v10 = static Array._allocateBufferUninitialized(minimumCapacity:)(v8, v9);
    *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    v2 = v7;
    v138 = (char *)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    v146 = v10;
  }
  v12 = 0;
  v13 = *v2;
  v133 = *v2 + 16;
  v134 = v6;
  v11 = (char *)_swiftEmptyArrayStorage;
  v132 = *v2 - 8;
  v137 = v3;
  v140 = *v2;
  while (2)
  {
    v15 = v12++;
    if (v12 >= v3)
      goto LABEL_68;
    v16 = *(_QWORD *)(v13 + 8 * v12);
    v17 = *(_QWORD *)(v13 + 8 * v15);
    v18 = *(void **)(v16 + 16);
    swift_retain(v16);
    v19 = objc_msgSend(v18, "rankingDictionary", swift_retain(v17).n128_f64[0]);
    v20 = 0.0;
    if (v19)
    {
      v21 = v19;
      v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v19, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      v141 = 0x726F635365736162;
      v142 = 0xE900000000000065;
      AnyHashable.init<A>(_:)(v143, &v141, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(v22 + 16)
        && (v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v143), (v24 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v22 + 56) + 32 * v23, (uint64_t)&v144);
      }
      else
      {
        v144 = 0u;
        v145 = 0u;
      }
      swift_bridgeObjectRelease(v22);
      outlined destroy of AnyHashable((uint64_t)v143);
      if (*((_QWORD *)&v145 + 1))
      {
        if ((swift_dynamicCast(&v141, &v144, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
          v20 = *(double *)&v141;
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v144, &demangling cache variable for type metadata for Any?);
      }
    }
    v25 = objc_msgSend(*(id *)(v17 + 16), "rankingDictionary");
    if (!v25)
      goto LABEL_34;
    v26 = v25;
    v27 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v25, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

    v141 = 0x726F635365736162;
    v142 = 0xE900000000000065;
    AnyHashable.init<A>(_:)(v143, &v141, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v27 + 16) && (v28 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v143), (v29 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v27 + 56) + 32 * v28, (uint64_t)&v144);
    }
    else
    {
      v144 = 0u;
      v145 = 0u;
    }
    swift_bridgeObjectRelease(v27);
    outlined destroy of AnyHashable((uint64_t)v143);
    if (!*((_QWORD *)&v145 + 1))
    {
      outlined destroy of Any?((uint64_t)&v144, &demangling cache variable for type metadata for Any?);
      goto LABEL_34;
    }
    if ((swift_dynamicCast(&v141, &v144, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) == 0)
    {
LABEL_34:
      swift_release(v16);
      swift_release(v17);
      v30 = 0.0;
      goto LABEL_35;
    }
    v30 = *(double *)&v141;
    swift_release(v16);
    swift_release(v17);
LABEL_35:
    v12 = v15 + 2;
    v13 = v140;
    if (v15 + 2 >= v3)
      goto LABEL_60;
    v31 = (_QWORD *)(v133 + 8 * v15);
    do
    {
      v32 = *(v31 - 1);
      v33 = *v31;
      v34 = *(void **)(*v31 + 16);
      swift_retain(*v31);
      v35 = objc_msgSend(v34, "rankingDictionary", swift_retain(v32).n128_f64[0]);
      v36 = 0.0;
      if (v35)
      {
        v37 = v35;
        v38 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v35, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

        v141 = 0x726F635365736162;
        v142 = 0xE900000000000065;
        AnyHashable.init<A>(_:)(v143, &v141, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(v38 + 16)
          && (v39 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v143), (v40 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v38 + 56) + 32 * v39, (uint64_t)&v144);
        }
        else
        {
          v144 = 0u;
          v145 = 0u;
        }
        swift_bridgeObjectRelease(v38);
        outlined destroy of AnyHashable((uint64_t)v143);
        if (*((_QWORD *)&v145 + 1))
        {
          if ((swift_dynamicCast(&v141, &v144, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
            v36 = *(double *)&v141;
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v144, &demangling cache variable for type metadata for Any?);
        }
      }
      v41 = objc_msgSend(*(id *)(v32 + 16), "rankingDictionary");
      if (v41)
      {
        v42 = v41;
        v43 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v41, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

        v141 = 0x726F635365736162;
        v142 = 0xE900000000000065;
        AnyHashable.init<A>(_:)(v143, &v141, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(v43 + 16)
          && (v44 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v143), (v45 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v43 + 56) + 32 * v44, (uint64_t)&v144);
        }
        else
        {
          v144 = 0u;
          v145 = 0u;
        }
        v3 = v137;
        swift_bridgeObjectRelease(v43);
        outlined destroy of AnyHashable((uint64_t)v143);
        if (*((_QWORD *)&v145 + 1))
        {
          if ((swift_dynamicCast(&v141, &v144, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
          {
            v46 = *(double *)&v141;
            swift_release(v33);
            swift_release(v32);
            goto LABEL_57;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v144, &demangling cache variable for type metadata for Any?);
        }
        swift_release(v33);
        swift_release(v32);
        v46 = 0.0;
      }
      else
      {
        swift_release(v33);
        swift_release(v32);
        v46 = 0.0;
        v3 = v137;
      }
LABEL_57:
      v13 = v140;
      if (v30 < v20 == v46 >= v36)
        goto LABEL_60;
      ++v12;
      ++v31;
    }
    while (v3 != v12);
    v12 = v3;
LABEL_60:
    if (v30 < v20)
    {
      if (v12 < v15)
        goto LABEL_188;
      if (v15 < v12)
      {
        v47 = (uint64_t *)(v132 + 8 * v12);
        v48 = v12;
        v49 = v15;
        v50 = (uint64_t *)(v13 + 8 * v15);
        do
        {
          if (v49 != --v48)
          {
            if (!v13)
              goto LABEL_193;
            v51 = *v50;
            *v50 = *v47;
            *v47 = v51;
          }
          ++v49;
          --v47;
          ++v50;
        }
        while (v49 < v48);
      }
    }
LABEL_68:
    if (v12 >= v3)
      goto LABEL_104;
    if (__OFSUB__(v12, v15))
      goto LABEL_186;
    if (v12 - v15 >= v134)
      goto LABEL_104;
    if (__OFADD__(v15, v134))
      goto LABEL_189;
    if (v15 + v134 >= v3)
      v52 = v3;
    else
      v52 = v15 + v134;
    if (v52 >= v15)
    {
      if (v12 == v52)
        goto LABEL_104;
      v135 = v52;
      v136 = v15;
      v130 = v11;
      v53 = (uint64_t *)(v132 + 8 * v12);
      while (2)
      {
        v54 = *(_QWORD *)(v13 + 8 * v12);
        v55 = v136;
        v56 = v53;
        while (2)
        {
          v57 = *v56;
          v58 = *(void **)(v54 + 16);
          swift_retain(v54);
          v59 = objc_msgSend(v58, "rankingDictionary", swift_retain(v57).n128_f64[0]);
          v60 = 0.0;
          if (v59)
          {
            v61 = v59;
            v62 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v59, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

            v141 = 0x726F635365736162;
            v142 = 0xE900000000000065;
            AnyHashable.init<A>(_:)(v143, &v141, &type metadata for String, &protocol witness table for String);
            if (*(_QWORD *)(v62 + 16)
              && (v63 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v143), (v64 & 1) != 0))
            {
              outlined init with copy of Any(*(_QWORD *)(v62 + 56) + 32 * v63, (uint64_t)&v144);
            }
            else
            {
              v144 = 0u;
              v145 = 0u;
            }
            swift_bridgeObjectRelease(v62);
            outlined destroy of AnyHashable((uint64_t)v143);
            if (*((_QWORD *)&v145 + 1))
            {
              if ((swift_dynamicCast(&v141, &v144, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
                v60 = *(double *)&v141;
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v144, &demangling cache variable for type metadata for Any?);
            }
          }
          v65 = objc_msgSend(*(id *)(v57 + 16), "rankingDictionary");
          if (v65)
          {
            v66 = v65;
            v67 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v65, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

            v141 = 0x726F635365736162;
            v142 = 0xE900000000000065;
            AnyHashable.init<A>(_:)(v143, &v141, &type metadata for String, &protocol witness table for String);
            if (*(_QWORD *)(v67 + 16)
              && (v68 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v143), (v69 & 1) != 0))
            {
              outlined init with copy of Any(*(_QWORD *)(v67 + 56) + 32 * v68, (uint64_t)&v144);
            }
            else
            {
              v144 = 0u;
              v145 = 0u;
            }
            swift_bridgeObjectRelease(v67);
            outlined destroy of AnyHashable((uint64_t)v143);
            if (*((_QWORD *)&v145 + 1))
            {
              if ((swift_dynamicCast(&v141, &v144, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
              {
                v70 = *(double *)&v141;
                swift_release(v54);
                swift_release(v57);
                goto LABEL_99;
              }
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v144, &demangling cache variable for type metadata for Any?);
            }
          }
          swift_release(v54);
          swift_release(v57);
          v70 = 0.0;
LABEL_99:
          v13 = v140;
          if (v70 >= v60)
            break;
          if (!v140)
            goto LABEL_191;
          v71 = *v56;
          v54 = v56[1];
          *v56 = v54;
          v56[1] = v71;
          --v56;
          if (v12 != ++v55)
            continue;
          break;
        }
        ++v12;
        ++v53;
        if (v12 != v135)
          continue;
        break;
      }
      v12 = v135;
      v11 = v130;
      v15 = v136;
LABEL_104:
      if (v12 < v15)
        goto LABEL_181;
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      v73 = *((_QWORD *)v11 + 2);
      v72 = *((_QWORD *)v11 + 3);
      v14 = v73 + 1;
      v13 = v140;
      if (v73 >= v72 >> 1)
      {
        v122 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v11);
        v13 = v140;
        v11 = v122;
      }
      *((_QWORD *)v11 + 2) = v14;
      v74 = v11 + 32;
      v75 = &v11[16 * v73 + 32];
      *(_QWORD *)v75 = v15;
      *((_QWORD *)v75 + 1) = v12;
      if (v73)
      {
        while (2)
        {
          v76 = v14 - 1;
          if (v14 >= 4)
          {
            v81 = &v74[16 * v14];
            v82 = *((_QWORD *)v81 - 8);
            v83 = *((_QWORD *)v81 - 7);
            v87 = __OFSUB__(v83, v82);
            v84 = v83 - v82;
            if (v87)
              goto LABEL_170;
            v86 = *((_QWORD *)v81 - 6);
            v85 = *((_QWORD *)v81 - 5);
            v87 = __OFSUB__(v85, v86);
            v79 = v85 - v86;
            v80 = v87;
            if (v87)
              goto LABEL_171;
            v88 = v14 - 2;
            v89 = &v74[16 * v14 - 32];
            v91 = *(_QWORD *)v89;
            v90 = *((_QWORD *)v89 + 1);
            v87 = __OFSUB__(v90, v91);
            v92 = v90 - v91;
            if (v87)
              goto LABEL_173;
            v87 = __OFADD__(v79, v92);
            v93 = v79 + v92;
            if (v87)
              goto LABEL_176;
            if (v93 >= v84)
            {
              v111 = &v74[16 * v76];
              v113 = *(_QWORD *)v111;
              v112 = *((_QWORD *)v111 + 1);
              v87 = __OFSUB__(v112, v113);
              v114 = v112 - v113;
              if (v87)
                goto LABEL_180;
              v104 = v79 < v114;
            }
            else
            {
LABEL_123:
              if ((v80 & 1) != 0)
                goto LABEL_172;
              v88 = v14 - 2;
              v94 = &v74[16 * v14 - 32];
              v96 = *(_QWORD *)v94;
              v95 = *((_QWORD *)v94 + 1);
              v97 = __OFSUB__(v95, v96);
              v98 = v95 - v96;
              v99 = v97;
              if (v97)
                goto LABEL_175;
              v100 = &v74[16 * v76];
              v102 = *(_QWORD *)v100;
              v101 = *((_QWORD *)v100 + 1);
              v87 = __OFSUB__(v101, v102);
              v103 = v101 - v102;
              if (v87)
                goto LABEL_178;
              if (__OFADD__(v98, v103))
                goto LABEL_179;
              if (v98 + v103 < v79)
                goto LABEL_135;
              v104 = v79 < v103;
            }
            if (v104)
              v76 = v88;
          }
          else
          {
            if (v14 == 3)
            {
              v78 = *((_QWORD *)v11 + 4);
              v77 = *((_QWORD *)v11 + 5);
              v87 = __OFSUB__(v77, v78);
              v79 = v77 - v78;
              v80 = v87;
              goto LABEL_123;
            }
            v105 = *((_QWORD *)v11 + 4);
            v106 = *((_QWORD *)v11 + 5);
            v87 = __OFSUB__(v106, v105);
            v98 = v106 - v105;
            v99 = v87;
LABEL_135:
            if ((v99 & 1) != 0)
              goto LABEL_174;
            v107 = &v74[16 * v76];
            v109 = *(_QWORD *)v107;
            v108 = *((_QWORD *)v107 + 1);
            v87 = __OFSUB__(v108, v109);
            v110 = v108 - v109;
            if (v87)
              goto LABEL_177;
            if (v110 < v98)
              goto LABEL_14;
          }
          v115 = v76 - 1;
          if (v76 - 1 >= v14)
          {
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
LABEL_176:
            __break(1u);
LABEL_177:
            __break(1u);
LABEL_178:
            __break(1u);
LABEL_179:
            __break(1u);
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
LABEL_182:
            __break(1u);
LABEL_183:
            __break(1u);
LABEL_184:
            __break(1u);
LABEL_185:
            __break(1u);
LABEL_186:
            __break(1u);
LABEL_187:
            __break(1u);
LABEL_188:
            __break(1u);
LABEL_189:
            __break(1u);
            goto LABEL_190;
          }
          if (!v13)
            goto LABEL_192;
          v116 = v11;
          v117 = &v74[16 * v115];
          v118 = *(_QWORD *)v117;
          v119 = &v74[16 * v76];
          v120 = *((_QWORD *)v119 + 1);
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v13 + 8 * *(_QWORD *)v117), (char *)(v13 + 8 * *(_QWORD *)v119), v13 + 8 * v120, v138);
          if (v139)
          {
            v11 = v116;
            goto LABEL_164;
          }
          if (v120 < v118)
            goto LABEL_167;
          if (v76 > *((_QWORD *)v116 + 2))
            goto LABEL_168;
          *(_QWORD *)v117 = v118;
          *(_QWORD *)&v74[16 * v115 + 8] = v120;
          v121 = *((_QWORD *)v116 + 2);
          if (v76 >= v121)
            goto LABEL_169;
          v11 = v116;
          v14 = v121 - 1;
          memmove(&v74[16 * v76], v119 + 16, 16 * (v121 - 1 - v76));
          *((_QWORD *)v116 + 2) = v121 - 1;
          v13 = v140;
          if (v121 <= 2)
            goto LABEL_14;
          continue;
        }
      }
      v14 = 1;
LABEL_14:
      v3 = v137;
      if (v12 >= v137)
        goto LABEL_153;
      continue;
    }
    break;
  }
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  _QWORD *v30;
  uint64_t v31;
  Swift::Int v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  _QWORD *v103;
  Swift::Int v104;
  Swift::Int v105;
  uint64_t v106;
  char *__dst;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return;
      v88 = 0;
      v89 = *a1;
      v90 = 1;
      while (1)
      {
        v91 = *(_QWORD *)(v89 + 16 * v90 + 8);
        v92 = v88;
        do
        {
          v93 = v89 + v92;
          if (v91 >= *(_QWORD *)(v89 + v92 + 8))
            break;
          if (!v89)
            goto LABEL_142;
          v94 = *(_QWORD *)(v93 + 16);
          *(_OWORD *)(v93 + 16) = *(_OWORD *)v93;
          *(_QWORD *)v93 = v94;
          *(_QWORD *)(v93 + 8) = v91;
          v92 -= 16;
        }
        while (v92 != -16);
        ++v90;
        v88 += 16;
        if (v90 == v3)
          return;
      }
    }
    goto LABEL_138;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_147:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return;
  }
  v6 = v4;
  v101 = a1;
  if (v3 < 2)
  {
    v10 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
      v13 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v103 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (MOSuggestionAsset, Int));
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v103 = (_QWORD *)v9;
    __dst = (char *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v102 = *a1 + 40;
  v13 = (char *)_swiftEmptyArrayStorage;
  v104 = v6;
  v105 = v3;
  v106 = v12;
  while (1)
  {
    v15 = v11++;
    if (v11 < v3)
    {
      v16 = *(_QWORD *)(v12 + 16 * v11 + 8);
      v17 = *(_QWORD *)(v12 + 16 * v15 + 8);
      v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        v18 = (uint64_t *)(v102 + 16 * v15);
        v19 = v16;
        while (1)
        {
          v21 = *v18;
          v18 += 2;
          v20 = v21;
          if (v16 < v17 == v21 >= v19)
            break;
          ++v11;
          v19 = v20;
          if (v3 == v11)
          {
            v11 = v3;
            break;
          }
        }
      }
      if (v16 < v17)
      {
        if (v11 < v15)
          goto LABEL_139;
        if (v15 < v11)
        {
          v22 = 16 * v11;
          v23 = 16 * v15;
          v24 = v11;
          v25 = v15;
          do
          {
            if (v25 != --v24)
            {
              if (!v12)
                goto LABEL_145;
              v26 = v12 + v22;
              v27 = *(_QWORD *)(v12 + v23);
              v28 = *(_QWORD *)(v12 + v23 + 8);
              *(_OWORD *)(v12 + v23) = *(_OWORD *)(v12 + v22 - 16);
              *(_QWORD *)(v26 - 16) = v27;
              *(_QWORD *)(v26 - 8) = v28;
            }
            ++v25;
            v22 -= 16;
            v23 += 16;
          }
          while (v25 < v24);
        }
      }
    }
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v15))
        goto LABEL_137;
      if (v11 - v15 < v6)
      {
        v29 = v15 + v6;
        if (__OFADD__(v15, v6))
          goto LABEL_140;
        if (v29 >= v3)
          v29 = v3;
        if (v29 < v15)
          goto LABEL_141;
        if (v11 != v29)
        {
          v30 = (_QWORD *)(v12 + 16 * v11);
          do
          {
            v31 = *(_QWORD *)(v12 + 16 * v11 + 8);
            v32 = v15;
            v33 = v30;
            do
            {
              if (v31 >= *(v33 - 1))
                break;
              if (!v12)
                goto LABEL_143;
              v34 = *v33;
              *(_OWORD *)v33 = *((_OWORD *)v33 - 1);
              *(v33 - 1) = v31;
              *(v33 - 2) = v34;
              v33 -= 2;
              ++v32;
            }
            while (v11 != v32);
            ++v11;
            v30 += 2;
          }
          while (v11 != v29);
          v11 = v29;
        }
      }
    }
    if (v11 < v15)
    {
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v36 = *((_QWORD *)v13 + 2);
    v35 = *((_QWORD *)v13 + 3);
    v14 = v36 + 1;
    v12 = v106;
    if (v36 >= v35 >> 1)
    {
      v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v13);
      v12 = v106;
      v13 = v85;
    }
    *((_QWORD *)v13 + 2) = v14;
    v37 = v13 + 32;
    v38 = &v13[16 * v36 + 32];
    *(_QWORD *)v38 = v15;
    *((_QWORD *)v38 + 1) = v11;
    if (v36)
      break;
    v14 = 1;
LABEL_15:
    v6 = v104;
    v3 = v105;
    if (v11 >= v105)
    {
      v10 = v103;
LABEL_104:
      v87 = v13;
      v103 = v10;
      if (v14 < 2)
        goto LABEL_95;
      v95 = *v101;
      while (1)
      {
        v96 = v14 - 2;
        if (v14 < 2)
          break;
        if (!v95)
          goto LABEL_146;
        v86 = v87;
        v97 = *(_QWORD *)&v87[16 * v96 + 32];
        v98 = *(_QWORD *)&v87[16 * v14 + 24];
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v95 + 16 * v97), (char *)(v95 + 16 * *(_QWORD *)&v87[16 * v14 + 16]), v95 + 16 * v98, __dst);
        if (v1)
          goto LABEL_94;
        if (v98 < v97)
          goto LABEL_134;
        if ((swift_isUniquelyReferenced_nonNull_native(v86) & 1) == 0)
          v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
        if (v96 >= *((_QWORD *)v86 + 2))
          goto LABEL_135;
        v99 = &v86[16 * v96 + 32];
        *(_QWORD *)v99 = v97;
        *((_QWORD *)v99 + 1) = v98;
        v100 = *((_QWORD *)v86 + 2);
        if (v14 > v100)
          goto LABEL_136;
        memmove(&v86[16 * v14 + 16], &v86[16 * v14 + 32], 16 * (v100 - v14));
        v87 = v86;
        *((_QWORD *)v86 + 2) = v100 - 1;
        v14 = v100 - 1;
        if (v100 <= 2)
          goto LABEL_95;
      }
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
  }
  while (1)
  {
    v39 = v14 - 1;
    if (v14 >= 4)
    {
      v44 = &v37[16 * v14];
      v45 = *((_QWORD *)v44 - 8);
      v46 = *((_QWORD *)v44 - 7);
      v50 = __OFSUB__(v46, v45);
      v47 = v46 - v45;
      if (v50)
        goto LABEL_121;
      v49 = *((_QWORD *)v44 - 6);
      v48 = *((_QWORD *)v44 - 5);
      v50 = __OFSUB__(v48, v49);
      v42 = v48 - v49;
      v43 = v50;
      if (v50)
        goto LABEL_122;
      v51 = v14 - 2;
      v52 = &v37[16 * v14 - 32];
      v54 = *(_QWORD *)v52;
      v53 = *((_QWORD *)v52 + 1);
      v50 = __OFSUB__(v53, v54);
      v55 = v53 - v54;
      if (v50)
        goto LABEL_124;
      v50 = __OFADD__(v42, v55);
      v56 = v42 + v55;
      if (v50)
        goto LABEL_127;
      if (v56 >= v47)
      {
        v74 = &v37[16 * v39];
        v76 = *(_QWORD *)v74;
        v75 = *((_QWORD *)v74 + 1);
        v50 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v50)
          goto LABEL_131;
        v67 = v42 < v77;
        goto LABEL_83;
      }
    }
    else
    {
      if (v14 != 3)
      {
        v68 = *((_QWORD *)v13 + 4);
        v69 = *((_QWORD *)v13 + 5);
        v50 = __OFSUB__(v69, v68);
        v61 = v69 - v68;
        v62 = v50;
        goto LABEL_77;
      }
      v41 = *((_QWORD *)v13 + 4);
      v40 = *((_QWORD *)v13 + 5);
      v50 = __OFSUB__(v40, v41);
      v42 = v40 - v41;
      v43 = v50;
    }
    if ((v43 & 1) != 0)
      goto LABEL_123;
    v51 = v14 - 2;
    v57 = &v37[16 * v14 - 32];
    v59 = *(_QWORD *)v57;
    v58 = *((_QWORD *)v57 + 1);
    v60 = __OFSUB__(v58, v59);
    v61 = v58 - v59;
    v62 = v60;
    if (v60)
      goto LABEL_126;
    v63 = &v37[16 * v39];
    v65 = *(_QWORD *)v63;
    v64 = *((_QWORD *)v63 + 1);
    v50 = __OFSUB__(v64, v65);
    v66 = v64 - v65;
    if (v50)
      goto LABEL_129;
    if (__OFADD__(v61, v66))
      goto LABEL_130;
    if (v61 + v66 >= v42)
    {
      v67 = v42 < v66;
LABEL_83:
      if (v67)
        v39 = v51;
      goto LABEL_85;
    }
LABEL_77:
    if ((v62 & 1) != 0)
      goto LABEL_125;
    v70 = &v37[16 * v39];
    v72 = *(_QWORD *)v70;
    v71 = *((_QWORD *)v70 + 1);
    v50 = __OFSUB__(v71, v72);
    v73 = v71 - v72;
    if (v50)
      goto LABEL_128;
    if (v73 < v61)
      goto LABEL_15;
LABEL_85:
    v78 = v39 - 1;
    if (v39 - 1 >= v14)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    if (!v12)
      goto LABEL_144;
    v79 = v13;
    v80 = &v37[16 * v78];
    v81 = *(_QWORD *)v80;
    v82 = &v37[16 * v39];
    v83 = *((_QWORD *)v82 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v12 + 16 * *(_QWORD *)v80), (char *)(v12 + 16 * *(_QWORD *)v82), v12 + 16 * v83, __dst);
    if (v1)
      break;
    if (v83 < v81)
      goto LABEL_118;
    if (v39 > *((_QWORD *)v79 + 2))
      goto LABEL_119;
    *(_QWORD *)v80 = v81;
    *(_QWORD *)&v37[16 * v78 + 8] = v83;
    v84 = *((_QWORD *)v79 + 2);
    if (v39 >= v84)
      goto LABEL_120;
    v13 = v79;
    v14 = v84 - 1;
    memmove(&v37[16 * v39], v82 + 16, 16 * (v84 - 1 - v39));
    *((_QWORD *)v79 + 2) = v84 - 1;
    v12 = v106;
    if (v84 <= 2)
      goto LABEL_15;
  }
  v86 = v79;
LABEL_94:
  v87 = v86;
LABEL_95:
  swift_bridgeObjectRelease(v87);
  v103[2] = 0;
  swift_bridgeObjectRelease(v103);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  void *v16;
  id v17;
  id v18;
  double v19;
  double v20;
  double v21;
  double v22;
  id *v23;
  void *v24;
  id v25;
  id v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t *v31;
  Swift::Int v32;
  Swift::Int v33;
  uint64_t *v34;
  uint64_t v35;
  Swift::Int v36;
  uint64_t v37;
  void *v38;
  Swift::Int v39;
  uint64_t v40;
  void *v41;
  id v42;
  id v43;
  double v44;
  double v45;
  double v46;
  double v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  Swift::Int v115;
  Swift::Int v116;
  Swift::Int v117;
  Swift::Int v118;
  void **v119;
  uint64_t v120;

  v2 = v1;
  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_133;
    if (v4)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1);
    return;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_141;
  v7 = v5;
  v111 = a1;
  if (v4 < 2)
  {
    v11 = (char *)_swiftEmptyArrayStorage;
    v120 = (uint64_t)_swiftEmptyArrayStorage;
    v119 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
LABEL_99:
      v103 = v11;
      if (v14 >= 2)
      {
        v105 = *v111;
        do
        {
          v106 = v14 - 2;
          if (v14 < 2)
            goto LABEL_128;
          if (!v105)
            goto LABEL_140;
          v94 = v103;
          v107 = *(_QWORD *)&v103[16 * v106 + 32];
          v108 = *(_QWORD *)&v103[16 * v14 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v105 + 8 * v107), (id *)(v105 + 8 * *(_QWORD *)&v103[16 * v14 + 16]), v105 + 8 * v108, v119);
          if (v2)
            goto LABEL_95;
          if (v108 < v107)
            goto LABEL_129;
          if ((swift_isUniquelyReferenced_nonNull_native(v94) & 1) == 0)
            v94 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v94);
          if (v106 >= *((_QWORD *)v94 + 2))
            goto LABEL_130;
          v109 = &v94[16 * v106 + 32];
          *(_QWORD *)v109 = v107;
          *((_QWORD *)v109 + 1) = v108;
          v110 = *((_QWORD *)v94 + 2);
          if (v14 > v110)
            goto LABEL_131;
          memmove(&v94[16 * v14 + 16], &v94[16 * v14 + 32], 16 * (v110 - v14));
          v103 = v94;
          *((_QWORD *)v94 + 2) = v110 - 1;
          v14 = v110 - 1;
        }
        while (v110 > 2);
      }
LABEL_96:
      v104 = swift_bridgeObjectRelease(v103);
      *(_QWORD *)((v120 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v104);
      swift_bridgeObjectRelease(v120);
      return;
    }
  }
  else
  {
    v8 = v6 >> 1;
    v9 = type metadata accessor for UIApplication(0, &lazy cache variable for type metadata for MOResource, MOResource_ptr);
    v10 = static Array._allocateBufferUninitialized(minimumCapacity:)(v8, v9);
    *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    v119 = (void **)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    v120 = v10;
  }
  v115 = v7;
  v12 = 0;
  v13 = *a1;
  v112 = *a1 - 8;
  v113 = *a1 + 16;
  v11 = (char *)_swiftEmptyArrayStorage;
  v116 = v4;
  while (1)
  {
    v15 = v12++;
    v117 = v15;
    if (v12 < v4)
    {
      v16 = *(void **)(v13 + 8 * v15);
      v17 = *(id *)(v13 + 8 * v12);
      v18 = v16;
      objc_msgSend(v17, "priorityScore");
      v20 = v19;
      objc_msgSend(v18, "priorityScore");
      v22 = v21;

      v12 = v15 + 2;
      if (v15 + 2 < v4)
      {
        v23 = (id *)(v113 + 8 * v15);
        while (1)
        {
          v24 = *(v23 - 1);
          v25 = *v23;
          v26 = v24;
          objc_msgSend(v25, "priorityScore");
          v28 = v27;
          objc_msgSend(v26, "priorityScore");
          v30 = v29;

          if (v20 < v22 == v28 >= v30)
            break;
          ++v12;
          ++v23;
          if (v4 == v12)
          {
            v12 = v4;
            break;
          }
        }
        v15 = v117;
      }
      if (v20 < v22)
      {
        if (v12 < v15)
          goto LABEL_134;
        if (v15 < v12)
        {
          v31 = (uint64_t *)(v112 + 8 * v12);
          v32 = v12;
          v33 = v15;
          v34 = (uint64_t *)(v13 + 8 * v15);
          do
          {
            if (v33 != --v32)
            {
              if (!v13)
                goto LABEL_139;
              v35 = *v34;
              *v34 = *v31;
              *v31 = v35;
            }
            ++v33;
            --v31;
            ++v34;
          }
          while (v33 < v32);
        }
      }
    }
    if (v12 >= v4)
      goto LABEL_47;
    if (__OFSUB__(v12, v15))
      goto LABEL_132;
    if (v12 - v15 >= v115)
      goto LABEL_47;
    if (__OFADD__(v15, v115))
      goto LABEL_135;
    v36 = v15 + v115 >= v4 ? v4 : v15 + v115;
    if (v36 < v15)
      break;
    if (v12 != v36)
    {
      v114 = v11;
      v37 = v112 + 8 * v12;
      do
      {
        v38 = *(void **)(v13 + 8 * v12);
        v39 = v15;
        v40 = v37;
        do
        {
          v41 = *(void **)v40;
          v42 = v38;
          v43 = v41;
          objc_msgSend(v42, "priorityScore");
          v45 = v44;
          objc_msgSend(v43, "priorityScore");
          v47 = v46;

          if (v45 >= v47)
            break;
          if (!v13)
            goto LABEL_137;
          v48 = *(void **)v40;
          v38 = *(void **)(v40 + 8);
          *(_QWORD *)v40 = v38;
          *(_QWORD *)(v40 + 8) = v48;
          v40 -= 8;
          ++v39;
        }
        while (v12 != v39);
        ++v12;
        v37 += 8;
        v15 = v117;
      }
      while (v12 != v36);
      v12 = v36;
      v11 = v114;
    }
LABEL_47:
    if (v12 < v15)
      goto LABEL_127;
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v50 = *((_QWORD *)v11 + 2);
    v49 = *((_QWORD *)v11 + 3);
    v14 = v50 + 1;
    if (v50 >= v49 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v14;
    v51 = v11 + 32;
    v52 = &v11[16 * v50 + 32];
    *(_QWORD *)v52 = v15;
    *((_QWORD *)v52 + 1) = v12;
    if (v50)
    {
      v118 = v12;
      while (1)
      {
        v53 = v14 - 1;
        if (v14 >= 4)
        {
          v58 = &v51[16 * v14];
          v59 = *((_QWORD *)v58 - 8);
          v60 = *((_QWORD *)v58 - 7);
          v64 = __OFSUB__(v60, v59);
          v61 = v60 - v59;
          if (v64)
            goto LABEL_116;
          v63 = *((_QWORD *)v58 - 6);
          v62 = *((_QWORD *)v58 - 5);
          v64 = __OFSUB__(v62, v63);
          v56 = v62 - v63;
          v57 = v64;
          if (v64)
            goto LABEL_117;
          v65 = v14 - 2;
          v66 = &v51[16 * v14 - 32];
          v68 = *(_QWORD *)v66;
          v67 = *((_QWORD *)v66 + 1);
          v64 = __OFSUB__(v67, v68);
          v69 = v67 - v68;
          if (v64)
            goto LABEL_119;
          v64 = __OFADD__(v56, v69);
          v70 = v56 + v69;
          if (v64)
            goto LABEL_122;
          if (v70 >= v61)
          {
            v88 = &v51[16 * v53];
            v90 = *(_QWORD *)v88;
            v89 = *((_QWORD *)v88 + 1);
            v64 = __OFSUB__(v89, v90);
            v91 = v89 - v90;
            if (v64)
              goto LABEL_126;
            v81 = v56 < v91;
            goto LABEL_85;
          }
        }
        else
        {
          if (v14 != 3)
          {
            v82 = *((_QWORD *)v11 + 4);
            v83 = *((_QWORD *)v11 + 5);
            v64 = __OFSUB__(v83, v82);
            v75 = v83 - v82;
            v76 = v64;
            goto LABEL_79;
          }
          v55 = *((_QWORD *)v11 + 4);
          v54 = *((_QWORD *)v11 + 5);
          v64 = __OFSUB__(v54, v55);
          v56 = v54 - v55;
          v57 = v64;
        }
        if ((v57 & 1) != 0)
          goto LABEL_118;
        v65 = v14 - 2;
        v71 = &v51[16 * v14 - 32];
        v73 = *(_QWORD *)v71;
        v72 = *((_QWORD *)v71 + 1);
        v74 = __OFSUB__(v72, v73);
        v75 = v72 - v73;
        v76 = v74;
        if (v74)
          goto LABEL_121;
        v77 = &v51[16 * v53];
        v79 = *(_QWORD *)v77;
        v78 = *((_QWORD *)v77 + 1);
        v64 = __OFSUB__(v78, v79);
        v80 = v78 - v79;
        if (v64)
          goto LABEL_124;
        if (__OFADD__(v75, v80))
          goto LABEL_125;
        if (v75 + v80 >= v56)
        {
          v81 = v56 < v80;
LABEL_85:
          if (v81)
            v53 = v65;
          goto LABEL_87;
        }
LABEL_79:
        if ((v76 & 1) != 0)
          goto LABEL_120;
        v84 = &v51[16 * v53];
        v86 = *(_QWORD *)v84;
        v85 = *((_QWORD *)v84 + 1);
        v64 = __OFSUB__(v85, v86);
        v87 = v85 - v86;
        if (v64)
          goto LABEL_123;
        if (v87 < v75)
          goto LABEL_14;
LABEL_87:
        v92 = v53 - 1;
        if (v53 - 1 >= v14)
        {
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        v93 = v13;
        if (!v13)
          goto LABEL_138;
        v94 = v11;
        v95 = &v51[16 * v92];
        v96 = *(_QWORD *)v95;
        v97 = v51;
        v98 = v53;
        v99 = &v51[16 * v53];
        v100 = *((_QWORD *)v99 + 1);
        v101 = v93;
        specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v93 + 8 * *(_QWORD *)v95), (id *)(v93 + 8 * *(_QWORD *)v99), v93 + 8 * v100, v119);
        if (v1)
        {
LABEL_95:
          v103 = v94;
          goto LABEL_96;
        }
        if (v100 < v96)
          goto LABEL_113;
        if (v98 > *((_QWORD *)v94 + 2))
          goto LABEL_114;
        *(_QWORD *)v95 = v96;
        *(_QWORD *)&v97[16 * v92 + 8] = v100;
        v102 = *((_QWORD *)v94 + 2);
        if (v98 >= v102)
          goto LABEL_115;
        v11 = v94;
        v14 = v102 - 1;
        memmove(v99, v99 + 16, 16 * (v102 - 1 - v98));
        v51 = v97;
        *((_QWORD *)v94 + 2) = v102 - 1;
        v13 = v101;
        v12 = v118;
        if (v102 <= 2)
          goto LABEL_14;
      }
    }
    v14 = 1;
LABEL_14:
    v4 = v116;
    if (v12 >= v116)
    {
      v2 = v1;
      goto LABEL_99;
    }
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  _QWORD *v29;
  uint64_t v30;
  Swift::Int v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  double *v102;
  Swift::Int v103;
  Swift::Int v104;
  uint64_t v105;
  char *__dst;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return;
      v87 = 0;
      v88 = *a1;
      v89 = 1;
      while (1)
      {
        v90 = *(_QWORD *)(v88 + 16 * v89 + 8);
        v91 = v87;
        do
        {
          v92 = v88 + v91;
          if (v90 >= *(_QWORD *)(v88 + v91 + 8))
            break;
          if (!v88)
            goto LABEL_142;
          v93 = *(_QWORD *)(v92 + 16);
          *(_OWORD *)(v92 + 16) = *(_OWORD *)v92;
          *(_QWORD *)v92 = v93;
          *(_QWORD *)(v92 + 8) = v90;
          v91 -= 16;
        }
        while (v91 != -16);
        ++v89;
        v87 += 16;
        if (v89 == v3)
          return;
      }
    }
    goto LABEL_138;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_147:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return;
  }
  v6 = v4;
  v100 = a1;
  if (v3 < 2)
  {
    v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v13 = *(_QWORD *)&_swiftEmptyArrayStorage[2];
      v12 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v102 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for MOSuggestionAssetCacheManager.MOSuggestionAssetCompletionResultHolder);
    *(_QWORD *)(v8 + 16) = v7;
    v102 = (double *)v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v101 = *a1 + 40;
  v12 = (char *)_swiftEmptyArrayStorage;
  v103 = v6;
  v104 = v3;
  v105 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(_QWORD *)(v11 + 16 * v10 + 8);
      v16 = *(_QWORD *)(v11 + 16 * v14 + 8);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (uint64_t *)(v101 + 16 * v14);
        v18 = v15;
        while (1)
        {
          v20 = *v17;
          v17 += 2;
          v19 = v20;
          if (v15 < v16 == v20 >= v18)
            break;
          ++v10;
          v18 = v19;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14)
          goto LABEL_139;
        if (v14 < v10)
        {
          v21 = 16 * v10;
          v22 = 16 * v14;
          v23 = v10;
          v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11)
                goto LABEL_145;
              v25 = v11 + v21;
              v26 = *(_QWORD *)(v11 + v22);
              v27 = *(_QWORD *)(v11 + v22 + 8);
              *(_OWORD *)(v11 + v22) = *(_OWORD *)(v11 + v21 - 16);
              *(_QWORD *)(v25 - 16) = v26;
              *(_QWORD *)(v25 - 8) = v27;
            }
            ++v24;
            v21 -= 16;
            v22 += 16;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 < v3)
    {
      if (__OFSUB__(v10, v14))
        goto LABEL_137;
      if (v10 - v14 < v6)
      {
        v28 = v14 + v6;
        if (__OFADD__(v14, v6))
          goto LABEL_140;
        if (v28 >= v3)
          v28 = v3;
        if (v28 < v14)
          goto LABEL_141;
        if (v10 != v28)
        {
          v29 = (_QWORD *)(v11 + 16 * v10);
          do
          {
            v30 = *(_QWORD *)(v11 + 16 * v10 + 8);
            v31 = v14;
            v32 = v29;
            do
            {
              if (v30 >= *(v32 - 1))
                break;
              if (!v11)
                goto LABEL_143;
              v33 = *v32;
              *(_OWORD *)v32 = *((_OWORD *)v32 - 1);
              *(v32 - 1) = v30;
              *(v32 - 2) = v33;
              v32 -= 2;
              ++v31;
            }
            while (v10 != v31);
            ++v10;
            v29 += 2;
          }
          while (v10 != v28);
          v10 = v28;
        }
      }
    }
    if (v10 < v14)
    {
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v35 = *((_QWORD *)v12 + 2);
    v34 = *((_QWORD *)v12 + 3);
    v13 = v35 + 1;
    v11 = v105;
    if (v35 >= v34 >> 1)
    {
      v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v12);
      v11 = v105;
      v12 = v84;
    }
    *((_QWORD *)v12 + 2) = v13;
    v36 = v12 + 32;
    v37 = &v12[16 * v35 + 32];
    *(_QWORD *)v37 = v14;
    *((_QWORD *)v37 + 1) = v10;
    if (v35)
      break;
    v13 = 1;
LABEL_15:
    v6 = v103;
    v3 = v104;
    if (v10 >= v104)
    {
      v9 = v102;
LABEL_104:
      v86 = v12;
      v102 = v9;
      if (v13 < 2)
        goto LABEL_95;
      v94 = *v100;
      while (1)
      {
        v95 = v13 - 2;
        if (v13 < 2)
          break;
        if (!v94)
          goto LABEL_146;
        v85 = v86;
        v96 = *(_QWORD *)&v86[16 * v95 + 32];
        v97 = *(_QWORD *)&v86[16 * v13 + 24];
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v94 + 16 * v96), (char *)(v94 + 16 * *(_QWORD *)&v86[16 * v13 + 16]), v94 + 16 * v97, __dst);
        if (v1)
          goto LABEL_94;
        if (v97 < v96)
          goto LABEL_134;
        if ((swift_isUniquelyReferenced_nonNull_native(v85) & 1) == 0)
          v85 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v85);
        if (v95 >= *((_QWORD *)v85 + 2))
          goto LABEL_135;
        v98 = &v85[16 * v95 + 32];
        *(_QWORD *)v98 = v96;
        *((_QWORD *)v98 + 1) = v97;
        v99 = *((_QWORD *)v85 + 2);
        if (v13 > v99)
          goto LABEL_136;
        memmove(&v85[16 * v13 + 16], &v85[16 * v13 + 32], 16 * (v99 - v13));
        v86 = v85;
        *((_QWORD *)v85 + 2) = v99 - 1;
        v13 = v99 - 1;
        if (v99 <= 2)
          goto LABEL_95;
      }
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
  }
  while (1)
  {
    v38 = v13 - 1;
    if (v13 >= 4)
    {
      v43 = &v36[16 * v13];
      v44 = *((_QWORD *)v43 - 8);
      v45 = *((_QWORD *)v43 - 7);
      v49 = __OFSUB__(v45, v44);
      v46 = v45 - v44;
      if (v49)
        goto LABEL_121;
      v48 = *((_QWORD *)v43 - 6);
      v47 = *((_QWORD *)v43 - 5);
      v49 = __OFSUB__(v47, v48);
      v41 = v47 - v48;
      v42 = v49;
      if (v49)
        goto LABEL_122;
      v50 = v13 - 2;
      v51 = &v36[16 * v13 - 32];
      v53 = *(_QWORD *)v51;
      v52 = *((_QWORD *)v51 + 1);
      v49 = __OFSUB__(v52, v53);
      v54 = v52 - v53;
      if (v49)
        goto LABEL_124;
      v49 = __OFADD__(v41, v54);
      v55 = v41 + v54;
      if (v49)
        goto LABEL_127;
      if (v55 >= v46)
      {
        v73 = &v36[16 * v38];
        v75 = *(_QWORD *)v73;
        v74 = *((_QWORD *)v73 + 1);
        v49 = __OFSUB__(v74, v75);
        v76 = v74 - v75;
        if (v49)
          goto LABEL_131;
        v66 = v41 < v76;
        goto LABEL_83;
      }
    }
    else
    {
      if (v13 != 3)
      {
        v67 = *((_QWORD *)v12 + 4);
        v68 = *((_QWORD *)v12 + 5);
        v49 = __OFSUB__(v68, v67);
        v60 = v68 - v67;
        v61 = v49;
        goto LABEL_77;
      }
      v40 = *((_QWORD *)v12 + 4);
      v39 = *((_QWORD *)v12 + 5);
      v49 = __OFSUB__(v39, v40);
      v41 = v39 - v40;
      v42 = v49;
    }
    if ((v42 & 1) != 0)
      goto LABEL_123;
    v50 = v13 - 2;
    v56 = &v36[16 * v13 - 32];
    v58 = *(_QWORD *)v56;
    v57 = *((_QWORD *)v56 + 1);
    v59 = __OFSUB__(v57, v58);
    v60 = v57 - v58;
    v61 = v59;
    if (v59)
      goto LABEL_126;
    v62 = &v36[16 * v38];
    v64 = *(_QWORD *)v62;
    v63 = *((_QWORD *)v62 + 1);
    v49 = __OFSUB__(v63, v64);
    v65 = v63 - v64;
    if (v49)
      goto LABEL_129;
    if (__OFADD__(v60, v65))
      goto LABEL_130;
    if (v60 + v65 >= v41)
    {
      v66 = v41 < v65;
LABEL_83:
      if (v66)
        v38 = v50;
      goto LABEL_85;
    }
LABEL_77:
    if ((v61 & 1) != 0)
      goto LABEL_125;
    v69 = &v36[16 * v38];
    v71 = *(_QWORD *)v69;
    v70 = *((_QWORD *)v69 + 1);
    v49 = __OFSUB__(v70, v71);
    v72 = v70 - v71;
    if (v49)
      goto LABEL_128;
    if (v72 < v60)
      goto LABEL_15;
LABEL_85:
    v77 = v38 - 1;
    if (v38 - 1 >= v13)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    if (!v11)
      goto LABEL_144;
    v78 = v12;
    v79 = &v36[16 * v77];
    v80 = *(_QWORD *)v79;
    v81 = &v36[16 * v38];
    v82 = *((_QWORD *)v81 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v11 + 16 * *(_QWORD *)v79), (char *)(v11 + 16 * *(_QWORD *)v81), v11 + 16 * v82, __dst);
    if (v1)
      break;
    if (v82 < v80)
      goto LABEL_118;
    if (v38 > *((_QWORD *)v78 + 2))
      goto LABEL_119;
    *(_QWORD *)v79 = v80;
    *(_QWORD *)&v36[16 * v77 + 8] = v82;
    v83 = *((_QWORD *)v78 + 2);
    if (v38 >= v83)
      goto LABEL_120;
    v12 = v78;
    v13 = v83 - 1;
    memmove(&v36[16 * v38], v81 + 16, 16 * (v83 - 1 - v38));
    *((_QWORD *)v78 + 2) = v83 - 1;
    v11 = v105;
    if (v83 <= 2)
      goto LABEL_15;
  }
  v85 = v78;
LABEL_94:
  v86 = v85;
LABEL_95:
  swift_bridgeObjectRelease(v86);
  v102[2] = 0.0;
  swift_bridgeObjectRelease(v102);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(__n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v60;

  v50 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v55 = (uint64_t)&v48 - v11;
  v60 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  v12 = *(_QWORD *)(v60 - 8);
  v13 = __chkstk_darwin(v60);
  v52 = (uint64_t)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v58 = (uint64_t)&v48 - v15;
  v49 = a2;
  if (a3 != a2)
  {
    v57 = *a4;
    v16 = (_QWORD *)(v57 + 8 * a3 - 8);
    v53 = v10;
    v54 = v12;
LABEL_6:
    v17 = *(_QWORD *)(v57 + 8 * a3);
    v18 = v50;
    v51 = v16;
    v56 = a3;
    while (1)
    {
      v19 = *v16;
      v20 = *(uint64_t (**)(__n128))(*(_QWORD *)v17 + 224);
      swift_retain(v17);
      v21 = swift_retain(v19);
      v22 = v20(v21);
      v23 = swift_bridgeObjectRelease(v22);
      if (!v22)
      {
        swift_release(v17);
        swift_release(v19);
        goto LABEL_5;
      }
      v24 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 224);
      v25 = v24(v23);
      v26 = swift_bridgeObjectRelease(v25);
      if (v25)
      {
        v27 = ((uint64_t (*)(uint64_t))v20)(v26);
        if (!v27)
        {
          v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
          v32 = v55;
          v47(v55, 1, 1, v60);
LABEL_25:
          outlined destroy of Any?(v32, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
          swift_release(v17);
          swift_release(v19);
          a3 = v56;
          v12 = v54;
LABEL_5:
          ++a3;
          v16 = v51 + 1;
          if (a3 == v49)
            return;
          goto LABEL_6;
        }
        v28 = v27;
        v29 = v60;
        if (*(_QWORD *)(v27 + 16))
        {
          v30 = v27 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
          v31 = v12;
          v32 = v55;
          outlined init with copy of MOSuggestionSheetAssetDateRange(v30, v55);
          v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
          v34 = v32;
          v35 = 0;
        }
        else
        {
          v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
          v31 = v12;
          v32 = v55;
          v34 = v55;
          v35 = 1;
        }
        v59 = v33;
        v33((char *)v34, v35, 1, v29);
        swift_bridgeObjectRelease(v28);
        v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
        if (v36(v32, 1, v29) == 1)
          goto LABEL_25;
        v37 = outlined init with take of MOSuggestionSheetAssetDateRange(v32, v58);
        v38 = v24(v37);
        if (!v38)
        {
          v40 = (uint64_t)v53;
          v59(v53, 1, 1, v60);
          v12 = v54;
LABEL_27:
          outlined destroy of MOSuggestionSheetAssetDateRange(v58);
          outlined destroy of Any?(v40, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
          swift_release(v17);
          swift_release(v19);
          a3 = v56;
          goto LABEL_5;
        }
        v39 = v38;
        v40 = (uint64_t)v53;
        v12 = v54;
        if (*(_QWORD *)(v38 + 16))
        {
          outlined init with copy of MOSuggestionSheetAssetDateRange(v38 + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80)), (uint64_t)v53);
          v41 = 0;
        }
        else
        {
          v41 = 1;
        }
        v42 = v60;
        v59((char *)v40, v41, 1, v60);
        swift_bridgeObjectRelease(v39);
        if (v36(v40, 1, v42) == 1)
          goto LABEL_27;
        v43 = v52;
        outlined init with take of MOSuggestionSheetAssetDateRange(v40, v52);
        v44 = v58;
        v45 = static Date.< infix(_:_:)(v58, v43);
        outlined destroy of MOSuggestionSheetAssetDateRange(v43);
        outlined destroy of MOSuggestionSheetAssetDateRange(v44);
        swift_release(v17);
        swift_release(v19);
        a3 = v56;
        if ((v45 & 1) == 0)
          goto LABEL_5;
      }
      else
      {
        swift_release(v17);
        swift_release(v19);
      }
      if (!v57)
        break;
      v46 = *v16;
      v17 = v16[1];
      *v16 = v17;
      v16[1] = v46;
      --v16;
      if (a3 == ++v18)
        goto LABEL_5;
    }
    __break(1u);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;

  if (a3 != a2)
  {
    v5 = a3;
    v6 = a1;
    v7 = *a4;
    v8 = *a4 + 8 * a3 - 8;
LABEL_4:
    v9 = *(_QWORD *)(v7 + 8 * v5);
    v10 = (uint64_t *)v8;
    while (1)
    {
      v17 = v9;
      v16 = *v10;
      v11 = v16;
      swift_retain(v9);
      swift_retain(v11);
      v12 = closure #1 in MOEventBundle.typeSortedAssetReferencesForInterstitial.getter(&v17, &v16);
      swift_release(v9);
      swift_release(v11);
      if (v4)
        break;
      if (v12)
      {
        if (!v7)
        {
          __break(1u);
          return;
        }
        v13 = *v10;
        v9 = v10[1];
        *v10 = v9;
        v10[1] = v13;
        --v10;
        if (v5 != ++v6)
          continue;
      }
      ++v5;
      v8 += 8;
      v6 = a1;
      if (v5 != a2)
        goto LABEL_4;
      return;
    }
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  double v23;
  void *v24;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[5];
  __int128 v30;
  __int128 v31;
  char *v32;

  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 8 * a3 - 8;
    v32 = (char *)&type metadata for Any + 8;
LABEL_5:
    v7 = *(void **)(v5 + 8 * v4);
    v8 = a1;
    v27 = v6;
    while (1)
    {
      v9 = *(void **)v6;
      v10 = v7;
      v11 = v9;
      v12 = objc_msgSend(v10, "rankingDictionary");
      v13 = 0.0;
      if (v12)
      {
        v14 = v12;
        v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v12, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

        strcpy((char *)v28, "rankingScore");
        BYTE5(v28[1]) = 0;
        HIWORD(v28[1]) = -5120;
        AnyHashable.init<A>(_:)(v29, v28, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(v15 + 16)
          && (v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v29), (v17 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v15 + 56) + 32 * v16, (uint64_t)&v30);
        }
        else
        {
          v30 = 0u;
          v31 = 0u;
        }
        swift_bridgeObjectRelease(v15);
        outlined destroy of AnyHashable((uint64_t)v29);
        if (*((_QWORD *)&v31 + 1))
        {
          if ((swift_dynamicCast(v28, &v30, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
            v13 = *(double *)v28;
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v30, &demangling cache variable for type metadata for Any?);
        }
      }
      v18 = objc_msgSend(v11, "rankingDictionary");
      if (v18)
      {
        v19 = v18;
        v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v18, &type metadata for AnyHashable, v32, &protocol witness table for AnyHashable);

        strcpy((char *)v28, "rankingScore");
        BYTE5(v28[1]) = 0;
        HIWORD(v28[1]) = -5120;
        AnyHashable.init<A>(_:)(v29, v28, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(v20 + 16)
          && (v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v29), (v22 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v21, (uint64_t)&v30);
        }
        else
        {
          v30 = 0u;
          v31 = 0u;
        }
        swift_bridgeObjectRelease(v20);
        outlined destroy of AnyHashable((uint64_t)v29);
        if (*((_QWORD *)&v31 + 1))
        {
          if ((swift_dynamicCast(v28, &v30, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
          {
            v23 = *(double *)v28;

            if (v23 >= v13)
              goto LABEL_4;
            goto LABEL_26;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v30, &demangling cache variable for type metadata for Any?);
        }
      }

      if (v13 <= 0.0)
        goto LABEL_4;
LABEL_26:
      if (!v5)
      {
        __break(1u);
        return;
      }
      v24 = *(void **)v6;
      v7 = *(void **)(v6 + 8);
      *(_QWORD *)v6 = v7;
      *(_QWORD *)(v6 + 8) = v24;
      v6 -= 8;
      if (v4 == ++v8)
      {
LABEL_4:
        ++v4;
        v6 = v27 + 8;
        if (v4 == a2)
          return;
        goto LABEL_5;
      }
    }
  }
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v28 = a1;
  v7 = type metadata accessor for Date(0);
  v31 = *(_QWORD *)(v7 - 8);
  v32 = v7;
  v8 = __chkstk_darwin(v7);
  v30 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - v10;
  v27 = a2;
  if (a3 != a2)
  {
    v33 = *a4;
    v12 = v33 + 8 * a3 - 8;
LABEL_5:
    v13 = *(void **)(v33 + 8 * a3);
    v14 = v28;
    v29 = v12;
    while (1)
    {
      v15 = *(void **)v12;
      v16 = v13;
      v17 = v15;
      v18 = objc_msgSend(v16, "startDate");
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v19 = objc_msgSend(v17, "startDate");
      v20 = v30;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v19) = static Date.> infix(_:_:)(v11, v20);
      v21 = a3;
      v22 = *(void (**)(char *, uint64_t))(v31 + 8);
      v23 = v20;
      v24 = v32;
      v22(v23, v32);
      v22(v11, v24);
      a3 = v21;

      if ((v19 & 1) == 0)
      {
LABEL_4:
        a3 = v21 + 1;
        v12 = v29 + 8;
        if (v21 + 1 == v27)
          return;
        goto LABEL_5;
      }
      if (!v33)
        break;
      v25 = *(void **)v12;
      v13 = *(void **)(v12 + 8);
      *(_QWORD *)v12 = v13;
      *(_QWORD *)(v12 + 8) = v25;
      v12 -= 8;
      if (v21 == ++v14)
        goto LABEL_4;
    }
    __break(1u);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  double v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  double v22;
  uint64_t v23;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD v29[5];
  __int128 v30;
  __int128 v31;
  char *v32;

  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = (_QWORD *)(*a4 + 8 * a3 - 8);
    v32 = (char *)&type metadata for Any + 8;
LABEL_5:
    v7 = *(_QWORD *)(v5 + 8 * v4);
    v8 = a1;
    v26 = v6;
    while (1)
    {
      v9 = *v6;
      v10 = *(void **)(v7 + 16);
      swift_retain(v7);
      v11 = objc_msgSend(v10, "rankingDictionary", swift_retain(v9).n128_f64[0]);
      v12 = 0.0;
      if (v11)
      {
        v13 = v11;
        v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v11, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

        v27 = 0x726F635365736162;
        v28 = 0xE900000000000065;
        AnyHashable.init<A>(_:)(v29, &v27, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(v14 + 16)
          && (v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v29), (v16 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v14 + 56) + 32 * v15, (uint64_t)&v30);
        }
        else
        {
          v30 = 0u;
          v31 = 0u;
        }
        swift_bridgeObjectRelease(v14);
        outlined destroy of AnyHashable((uint64_t)v29);
        if (*((_QWORD *)&v31 + 1))
        {
          if ((swift_dynamicCast(&v27, &v30, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
            v12 = *(double *)&v27;
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v30, &demangling cache variable for type metadata for Any?);
        }
      }
      v17 = objc_msgSend(*(id *)(v9 + 16), "rankingDictionary");
      if (v17)
      {
        v18 = v17;
        v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v17, &type metadata for AnyHashable, v32, &protocol witness table for AnyHashable);

        v27 = 0x726F635365736162;
        v28 = 0xE900000000000065;
        AnyHashable.init<A>(_:)(v29, &v27, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(v19 + 16)
          && (v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v29), (v21 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v19 + 56) + 32 * v20, (uint64_t)&v30);
        }
        else
        {
          v30 = 0u;
          v31 = 0u;
        }
        swift_bridgeObjectRelease(v19);
        outlined destroy of AnyHashable((uint64_t)v29);
        if (*((_QWORD *)&v31 + 1))
        {
          if ((swift_dynamicCast(&v27, &v30, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
          {
            v22 = *(double *)&v27;
            swift_release(v7);
            swift_release(v9);
            if (v22 >= v12)
              goto LABEL_4;
            goto LABEL_26;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v30, &demangling cache variable for type metadata for Any?);
        }
      }
      swift_release(v7);
      swift_release(v9);
      if (v12 <= 0.0)
        goto LABEL_4;
LABEL_26:
      if (!v5)
      {
        __break(1u);
        return;
      }
      v23 = *v6;
      v7 = v6[1];
      *v6 = v7;
      v6[1] = v23;
      --v6;
      if (v4 == ++v8)
      {
LABEL_4:
        ++v4;
        v6 = v26 + 1;
        if (v4 == a2)
          return;
        goto LABEL_5;
      }
    }
  }
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = *a4;
    v7 = *a4 + 8 * a3 - 8;
LABEL_5:
    v8 = *(void **)(v6 + 8 * v4);
    v9 = a1;
    v10 = v7;
    while (1)
    {
      v11 = *(void **)v10;
      v12 = v8;
      v13 = v11;
      objc_msgSend(v12, "priorityScore");
      v15 = v14;
      objc_msgSend(v13, "priorityScore");
      v17 = v16;

      if (v15 >= v17)
      {
LABEL_4:
        ++v4;
        v7 += 8;
        if (v4 == a2)
          return;
        goto LABEL_5;
      }
      if (!v6)
        break;
      v18 = *(void **)v10;
      v8 = *(void **)(v10 + 8);
      *(_QWORD *)v10 = v8;
      *(_QWORD *)(v10 + 8) = v18;
      v10 -= 8;
      if (v4 == ++v9)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(uint64_t *__src, uint64_t *a2, unint64_t a3, uint64_t *__dst)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t result;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;

  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v41 = __src;
  v40 = __dst;
  v36 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      v21 = v4;
      if (__dst != a2 || &a2[v13] <= __dst)
      {
        memmove(__dst, a2, 8 * v13);
        __dst = v36;
      }
      v22 = &__dst[v13];
      v39 = v22;
      v41 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v23 = (uint64_t *)(a3 - 8);
        v24 = v6;
        v35 = v7;
        while (1)
        {
          v25 = v22;
          v27 = *--v22;
          v26 = v27;
          v38 = v27;
          v29 = *--v24;
          v28 = v29;
          v37 = v29;
          swift_retain(v38);
          swift_retain(v29);
          v30 = closure #1 in Array<A>.sortedByAscendingTime.getter(&v38, &v37);
          if (v21)
            break;
          v31 = v30;
          v32 = v23 + 1;
          swift_release(v26);
          swift_release(v28);
          if ((v31 & 1) != 0)
          {
            v33 = v36;
            if (v32 != v6 || v23 >= v6)
              *v23 = *v24;
            v41 = v24;
            v21 = 0;
            v22 = v25;
          }
          else
          {
            v39 = v22;
            v33 = v36;
            if (v32 < v25 || v23 >= v25 || v32 != v25)
              *v23 = *v22;
            v24 = v6;
            v21 = 0;
          }
          if (v24 > v35)
          {
            --v23;
            v6 = v24;
            if (v22 > v33)
              continue;
          }
          goto LABEL_49;
        }
        swift_release(v26);
        swift_release(v28);
      }
      goto LABEL_49;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
    {
      memmove(__dst, __src, 8 * v10);
      __dst = v36;
    }
    v14 = &__dst[v10];
    v39 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      while (1)
      {
        v15 = *v6;
        v38 = v15;
        v16 = __dst;
        v37 = *__dst;
        v17 = v37;
        swift_retain(v15);
        swift_retain(v17);
        v18 = closure #1 in Array<A>.sortedByAscendingTime.getter(&v38, &v37);
        if (v4)
          break;
        v19 = v18;
        swift_release(v15);
        swift_release(v17);
        if ((v19 & 1) != 0)
        {
          v20 = v6 + 1;
          if (v7 < v6 || v7 >= v20 || v7 != v6)
            *v7 = *v6;
          __dst = v16;
        }
        else
        {
          if (v7 != v16)
            *v7 = *v16;
          __dst = v16 + 1;
          v40 = v16 + 1;
          v20 = v6;
        }
        v41 = ++v7;
        if (__dst < v14)
        {
          v6 = v20;
          if ((unint64_t)v20 < a3)
            continue;
        }
        goto LABEL_49;
      }
      swift_release(v15);
      swift_release(v17);
    }
LABEL_49:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v41, &v40, &v39);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t result;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;

  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v41 = __src;
  v40 = __dst;
  v36 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      v21 = v4;
      if (__dst != a2 || &a2[v13] <= __dst)
      {
        memmove(__dst, a2, 8 * v13);
        __dst = v36;
      }
      v22 = &__dst[v13];
      v39 = v22;
      v41 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v23 = (uint64_t *)(a3 - 8);
        v24 = v6;
        v35 = v7;
        while (1)
        {
          v25 = v22;
          v27 = *--v22;
          v26 = v27;
          v38 = v27;
          v29 = *--v24;
          v28 = v29;
          v37 = v29;
          swift_retain(v38);
          swift_retain(v29);
          v30 = closure #1 in MOEventBundle.typeSortedAssetReferencesForInterstitial.getter(&v38, &v37);
          if (v21)
            break;
          v31 = v30;
          v32 = v23 + 1;
          swift_release(v26);
          swift_release(v28);
          if (v31)
          {
            v33 = v36;
            if (v32 != v6 || v23 >= v6)
              *v23 = *v24;
            v41 = v24;
            v21 = 0;
            v22 = v25;
          }
          else
          {
            v39 = v22;
            v33 = v36;
            if (v32 < v25 || v23 >= v25 || v32 != v25)
              *v23 = *v22;
            v24 = v6;
            v21 = 0;
          }
          if (v24 > v35)
          {
            --v23;
            v6 = v24;
            if (v22 > v33)
              continue;
          }
          goto LABEL_49;
        }
        swift_release(v26);
        swift_release(v28);
      }
      goto LABEL_49;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
    {
      memmove(__dst, __src, 8 * v10);
      __dst = v36;
    }
    v14 = &__dst[v10];
    v39 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      while (1)
      {
        v15 = *v6;
        v38 = v15;
        v16 = __dst;
        v37 = *__dst;
        v17 = v37;
        swift_retain(v15);
        swift_retain(v17);
        v18 = closure #1 in MOEventBundle.typeSortedAssetReferencesForInterstitial.getter(&v38, &v37);
        if (v4)
          break;
        v19 = v18;
        swift_release(v15);
        swift_release(v17);
        if (v19)
        {
          v20 = v6 + 1;
          if (v7 < v6 || v7 >= v20 || v7 != v6)
            *v7 = *v6;
          __dst = v16;
        }
        else
        {
          if (v7 != v16)
            *v7 = *v16;
          __dst = v16 + 1;
          v40 = v16 + 1;
          v20 = v6;
        }
        v41 = ++v7;
        if (__dst < v14)
        {
          v6 = v20;
          if ((unint64_t)v20 < a3)
            continue;
        }
        goto LABEL_49;
      }
      swift_release(v15);
      swift_release(v17);
    }
LABEL_49:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v41, &v40, &v39);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t **a1, unint64_t a2, uint64_t a3))()
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t (*v3)();
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of MOSuggestionSheetAssetDateRange(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MOSuggestionSheetAssetDateRange(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [String]);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{

}

uint64_t *specialized Array.subscript.read(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    swift_retain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t Array.subscript.readspecialized (_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of MOSuggestionSheetAssetDateRange(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t MOAngelLogger.shared.unsafeMutableAddressor()
{
  return MOAngelLogger.shared.unsafeMutableAddressor(&serverManager._clientConnections, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.shared, (uint64_t)one-time initialization function for shared);
}

uint64_t MOAngelLogger.memory.unsafeMutableAddressor()
{
  return MOAngelLogger.shared.unsafeMutableAddressor(&serverManager._displayMonitor, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.memory, (uint64_t)one-time initialization function for memory);
}

uint64_t MOAngelLogger.shared.unsafeMutableAddressor(_QWORD *a1, uint64_t (*a2)(_QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if (*a1 != -1)
    swift_once(a1, a4);
  v6 = a2(0);
  return __swift_project_value_buffer(v6, a3);
}

uint64_t MOAngelLogger.assets.unsafeMutableAddressor()
{
  return MOAngelLogger.shared.unsafeMutableAddressor(&serverManager._connectionProperties, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.assets, (uint64_t)one-time initialization function for assets);
}

uint64_t one-time initialization function for shared(uint64_t a1)
{
  return one-time initialization function for shared(a1, static MOAngelLogger.shared, 0x4349565245534955, 0xE900000000000045);
}

uint64_t static MOAngelLogger.shared.getter@<X0>(uint64_t a1@<X8>)
{
  return static MOAngelLogger.shared.getter(&serverManager._clientConnections, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.shared, (uint64_t)one-time initialization function for shared, a1);
}

uint64_t one-time initialization function for assets(uint64_t a1)
{
  return one-time initialization function for shared(a1, static MOAngelLogger.assets, 0x535445535341, 0xE600000000000000);
}

uint64_t static MOAngelLogger.assets.getter@<X0>(uint64_t a1@<X8>)
{
  return static MOAngelLogger.shared.getter(&serverManager._connectionProperties, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.assets, (uint64_t)one-time initialization function for assets, a1);
}

uint64_t static MOAngelLogger.shared.getter@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  if (*a1 != -1)
    swift_once(a1, a4);
  v8 = a2(0);
  v9 = __swift_project_value_buffer(v8, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v9, v8);
}

uint64_t one-time initialization function for ranking(uint64_t a1)
{
  return one-time initialization function for shared(a1, static MOAngelLogger.ranking, 0x474E494B4E4152, 0xE700000000000000);
}

uint64_t MOAngelLogger.ranking.unsafeMutableAddressor()
{
  return MOAngelLogger.shared.unsafeMutableAddressor(&serverManager._connectionListener, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.ranking, (uint64_t)one-time initialization function for ranking);
}

uint64_t static MOAngelLogger.ranking.getter@<X0>(uint64_t a1@<X8>)
{
  return static MOAngelLogger.shared.getter(&serverManager._connectionListener, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.ranking, (uint64_t)one-time initialization function for ranking, a1);
}

uint64_t one-time initialization function for memory(uint64_t a1)
{
  return one-time initialization function for shared(a1, static MOAngelLogger.memory, 0x59524F4D454DLL, 0xE600000000000000);
}

uint64_t static MOAngelLogger.memory.getter@<X0>(uint64_t a1@<X8>)
{
  return static MOAngelLogger.shared.getter(&serverManager._displayMonitor, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.memory, (uint64_t)one-time initialization function for memory, a1);
}

uint64_t one-time initialization function for sheetController(uint64_t a1)
{
  return one-time initialization function for shared(a1, static MOAngelLogger.sheetController, 0x4E4F435445454853, 0xEF52454C4C4F5254);
}

uint64_t MOAngelLogger.sheetController.unsafeMutableAddressor()
{
  return MOAngelLogger.shared.unsafeMutableAddressor(&one-time initialization token for sheetController, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.sheetController, (uint64_t)one-time initialization function for sheetController);
}

uint64_t static MOAngelLogger.sheetController.getter@<X0>(uint64_t a1@<X8>)
{
  return static MOAngelLogger.shared.getter(&one-time initialization token for sheetController, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.sheetController, (uint64_t)one-time initialization function for sheetController, a1);
}

uint64_t one-time initialization function for filtering(uint64_t a1)
{
  return one-time initialization function for shared(a1, static MOAngelLogger.filtering, 0x4E495245544C4946, 0xE900000000000047);
}

uint64_t one-time initialization function for shared(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for Logger(0);
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD000000000000020, 0x80000001001A6850, a3, a4);
}

uint64_t MOAngelLogger.filtering.unsafeMutableAddressor()
{
  return MOAngelLogger.shared.unsafeMutableAddressor(&one-time initialization token for filtering, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.filtering, (uint64_t)one-time initialization function for filtering);
}

uint64_t static MOAngelLogger.filtering.getter@<X0>(uint64_t a1@<X8>)
{
  return static MOAngelLogger.shared.getter(&one-time initialization token for filtering, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.filtering, (uint64_t)one-time initialization function for filtering, a1);
}

uint64_t MOSuggestionAssetContactProfilePictureProvider.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t MOSuggestionAssetContactProfilePictureProvider.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t MOSuggestionAssetContactProfilePictureProvider.__allocating_init()()
{
  uint64_t v0;

  return swift_allocObject(v0, 16, 7);
}

uint64_t one-time initialization function for assets()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignposter(0);
  __swift_allocate_value_buffer(v4, static MOAngelSignposter.assets);
  __swift_project_value_buffer(v4, (uint64_t)static MOAngelSignposter.assets);
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1)
    swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
  v5 = __swift_project_value_buffer(v0, (uint64_t)static MOAngelLogger.assets);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSSignposter.init(logger:)(v3);
}

uint64_t MOAngelSignposter.assets.unsafeMutableAddressor()
{
  return MOAngelLogger.shared.unsafeMutableAddressor(&one-time initialization token for assets, (uint64_t (*)(_QWORD))&type metadata accessor for OSSignposter, (uint64_t)static MOAngelSignposter.assets, (uint64_t)one-time initialization function for assets);
}

uint64_t static MOAngelSignposter.assets.getter@<X0>(uint64_t a1@<X8>)
{
  return static MOAngelLogger.shared.getter(&one-time initialization token for assets, (uint64_t (*)(_QWORD))&type metadata accessor for OSSignposter, (uint64_t)static MOAngelSignposter.assets, (uint64_t)one-time initialization function for assets, a1);
}

uint64_t type metadata accessor for MOAngelLogger()
{
  return objc_opt_self(_TtC16MomentsUIService13MOAngelLogger);
}

uint64_t type metadata accessor for MOAngelSignposter()
{
  return objc_opt_self(_TtC16MomentsUIService17MOAngelSignposter);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

void *MOSuggestionPickerPrivacyBadge.IMAGE_LENGTH.unsafeMutableAddressor()
{
  return &static MOSuggestionPickerPrivacyBadge.IMAGE_LENGTH;
}

double static MOSuggestionSheetInterstitialViewConstants.SIDE_MARGIN.getter()
{
  return 20.0;
}

void *MOSuggestionPickerPrivacyBadge.CONTENT_MARGIN.unsafeMutableAddressor()
{
  return &static MOSuggestionPickerPrivacyBadge.CONTENT_MARGIN;
}

id MOSuggestionPickerPrivacyBadge.iconView.getter()
{
  uint64_t v0;
  id *v1;
  _BYTE v3[24];

  v1 = (id *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_iconView);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_iconView, v3, 0, 0);
  return *v1;
}

void MOSuggestionPickerPrivacyBadge.iconView.setter(void *a1)
{
  MOSuggestionPickerPrivacyBadge.iconView.setter(a1, &OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_iconView);
}

uint64_t (*MOSuggestionPickerPrivacyBadge.iconView.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_iconView, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

void closure #1 in variable initialization expression of MOSuggestionPickerPrivacyBadge.label()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  void *object;
  NSString v10;
  Swift::String v11;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v1 = (void *)objc_opt_self(UIFont);
  v2 = objc_msgSend(v1, "preferredFontForTextStyle:", UIFontTextStyleCaption1);
  v3 = objc_msgSend(v2, "fontDescriptor");
  v4 = objc_msgSend(v3, "fontDescriptorWithSymbolicTraits:", 2);

  if (v4)
  {
    v5 = objc_msgSend(v1, "fontWithDescriptor:size:", v4, 0.0);

    objc_msgSend(v0, "setFont:", v5);
    v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v11._countAndFlagsBits = 0xD00000000000001DLL;
    v11._object = (void *)0x80000001001A6970;
    v7._object = (void *)0x80000001001A6950;
    v7._countAndFlagsBits = 0xD000000000000016;
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v11)._object;

    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    objc_msgSend(v0, "setText:", v10);

    objc_msgSend(v0, "setAdjustsFontForContentSizeCategory:", 1);
    objc_msgSend(v0, "setMaximumContentSizeCategory:", UIContentSizeCategoryAccessibilityMedium);
  }
  else
  {
    __break(1u);
  }
}

id MOSuggestionPickerPrivacyBadge.label.getter()
{
  uint64_t v0;
  id *v1;
  _BYTE v3[24];

  v1 = (id *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_label);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_label, v3, 0, 0);
  return *v1;
}

void MOSuggestionPickerPrivacyBadge.label.setter(void *a1)
{
  MOSuggestionPickerPrivacyBadge.iconView.setter(a1, &OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_label);
}

void MOSuggestionPickerPrivacyBadge.iconView.setter(void *a1, _QWORD *a2)
{
  uint64_t v2;
  void **v4;
  void *v5;
  _BYTE v6[24];

  v4 = (void **)(v2 + *a2);
  swift_beginAccess(v4, v6, 1, 0);
  v5 = *v4;
  *v4 = a1;

}

uint64_t (*MOSuggestionPickerPrivacyBadge.label.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_label, a1, 33, 0);
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

void MOSuggestionPickerPrivacyBadge.init(coder:)()
{
  char *v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_iconView;
  v2 = CGRectMake();
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MOSuggestionPickerBadgeIconView()), "initWithFrame:", v2, v3, v4, v5);
  v6 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_label;
  closure #1 in variable initialization expression of MOSuggestionPickerPrivacyBadge.label();
  *(_QWORD *)&v0[v6] = v7;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001A6460, "MomentsUIService/MOSuggestionPickerPrivacyBadge.swift", 53, 2, 49, 0);
  __break(1u);
}

Swift::Void __swiftcall MOSuggestionPickerPrivacyBadge.flipToPrivacyIconAndDismissAfterDelay()()
{
  _QWORD *v0;
  void *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  void **v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  void *v30;
  id (*v31)();
  uint64_t v32;

  v1 = v0;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  v3 = v2;
  v5 = v4;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  v7 = v6;
  v9 = v8;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  v11 = v10;
  v13 = v12;
  v14 = (_QWORD *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x60))();
  (*(void (**)(void))((swift_isaMask & *v14) + 0x70))();

  v15 = swift_allocObject(&unk_1001E51A8, 24, 7);
  *(_QWORD *)(v15 + 16) = v1;
  v16 = objc_allocWithZone((Class)UIViewPropertyAnimator);
  v31 = partial apply for closure #1 in MOSuggestionPickerPrivacyBadge.flipToPrivacyIconAndDismissAfterDelay();
  v32 = v15;
  v27 = _NSConcreteStackBlock;
  v28 = 1107296256;
  v29 = thunk for @escaping @callee_guaranteed () -> ();
  v30 = &block_descriptor_0;
  v17 = _Block_copy(&v27);
  v18 = v32;
  v19 = v1;
  swift_release(v18);
  v20 = objc_msgSend(v16, "initWithDuration:controlPoint1:controlPoint2:animations:", v17, 0.167, v3, v5, v11, v13);
  _Block_release(v17);
  objc_msgSend(v20, "startAnimationAfterDelay:", 2.75);
  v21 = swift_allocObject(&unk_1001E51F8, 24, 7);
  *(_QWORD *)(v21 + 16) = v19;
  v22 = objc_allocWithZone((Class)UIViewPropertyAnimator);
  v31 = partial apply for closure #2 in MOSuggestionPickerPrivacyBadge.flipToPrivacyIconAndDismissAfterDelay();
  v32 = v21;
  v27 = _NSConcreteStackBlock;
  v28 = 1107296256;
  v29 = thunk for @escaping @callee_guaranteed () -> ();
  v30 = &block_descriptor_6;
  v23 = _Block_copy(&v27);
  v24 = v32;
  v25 = v19;
  swift_release(v24);
  v26 = objc_msgSend(v22, "initWithDuration:controlPoint1:controlPoint2:animations:", v23, 0.167, v3, v5, v7, v9);
  _Block_release(v23);
  objc_msgSend(v26, "startAnimationAfterDelay:", 2.75);

}

id closure #1 in MOSuggestionPickerPrivacyBadge.flipToPrivacyIconAndDismissAfterDelay()(void *a1)
{
  CGAffineTransform v3;

  CGAffineTransformMakeScale(&v3, 0.75, 0.75);
  return objc_msgSend(a1, "setTransform:", &v3);
}

id MOSuggestionPickerPrivacyBadge.__allocating_init(effect:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithEffect:", a1);

  return v3;
}

void MOSuggestionPickerPrivacyBadge.init(effect:)()
{
  _swift_stdlib_reportUnimplementedInitializer("MomentsUIService.MOSuggestionPickerPrivacyBadge", 47, "init(effect:)", 13, 0);
  __break(1u);
}

id MOSuggestionPickerPrivacyBadge.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionPickerPrivacyBadge();
  return objc_msgSendSuper2(&v2, "dealloc");
}

char *specialized MOSuggestionPickerPrivacyBadge.init(frame:)()
{
  char *v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  objc_class *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id *v14;
  id v15;
  id v16;
  id *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  Class isa;
  id v49;
  id v50;
  char v51[24];
  char v52[24];
  objc_super v53;

  v1 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_iconView;
  v2 = CGRectMake();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = (objc_class *)type metadata accessor for MOSuggestionPickerBadgeIconView();
  v10 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(v9), "initWithFrame:", v2, v4, v6, v8);
  v11 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_label;
  closure #1 in variable initialization expression of MOSuggestionPickerPrivacyBadge.label();
  *(_QWORD *)&v10[v11] = v12;

  v50 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", 8);
  v53.receiver = v10;
  v53.super_class = (Class)type metadata accessor for MOSuggestionPickerPrivacyBadge();
  v13 = (char *)objc_msgSendSuper2(&v53, "initWithEffect:", v50);
  objc_msgSend(v13, "setEffect:", v50);
  v14 = (id *)&v13[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_iconView];
  swift_beginAccess(&v13[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_iconView], v52, 0, 0);
  objc_msgSend(*v14, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v15 = objc_msgSend(v13, "contentView");
  objc_msgSend(v15, "addSubview:", *v14);

  v16 = objc_msgSend(v13, "contentView");
  v17 = (id *)&v13[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_label];
  swift_beginAccess(&v13[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_label], v51, 0, 0);
  objc_msgSend(v16, "addSubview:", *v17);

  objc_msgSend(v13, "_setCornerRadius:", 6.0);
  v49 = (id)objc_opt_self(NSLayoutConstraint);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v19 = swift_allocObject(v18, 104, 7);
  *(_OWORD *)(v19 + 16) = xmmword_10019EF60;
  v20 = objc_msgSend(*v14, "widthAnchor");
  v21 = objc_msgSend(v20, "constraintEqualToConstant:", 20.0);

  *(_QWORD *)(v19 + 32) = v21;
  v22 = objc_msgSend(*v14, "heightAnchor");
  v23 = objc_msgSend(v22, "constraintEqualToConstant:", 20.0);

  *(_QWORD *)(v19 + 40) = v23;
  v24 = objc_msgSend(*v14, "leadingAnchor");
  v25 = objc_msgSend(v13, "leadingAnchor");
  v26 = objc_msgSend(v24, "constraintEqualToAnchor:constant:", v25, 2.0);

  *(_QWORD *)(v19 + 48) = v26;
  v27 = objc_msgSend(*v14, "topAnchor");
  v28 = objc_msgSend(v13, "topAnchor");
  v29 = objc_msgSend(v27, "constraintEqualToAnchor:constant:", v28, 2.0);

  *(_QWORD *)(v19 + 56) = v29;
  v30 = objc_msgSend(v13, "bottomAnchor");
  v31 = objc_msgSend(*v14, "bottomAnchor");
  v32 = objc_msgSend(v30, "constraintEqualToAnchor:constant:", v31, 2.0);

  *(_QWORD *)(v19 + 64) = v32;
  v33 = objc_msgSend(*v17, "leadingAnchor");
  v34 = objc_msgSend(*v14, "trailingAnchor");
  v35 = objc_msgSend(v33, "constraintEqualToAnchor:constant:", v34, 3.0);

  *(_QWORD *)(v19 + 72) = v35;
  v36 = objc_msgSend(*v17, "topAnchor");
  v37 = objc_msgSend(v13, "topAnchor");
  v38 = objc_msgSend(v36, "constraintEqualToAnchor:", v37);

  *(_QWORD *)(v19 + 80) = v38;
  v39 = objc_msgSend(*v17, "bottomAnchor");
  v40 = objc_msgSend(v13, "bottomAnchor");
  v41 = objc_msgSend(v39, "constraintEqualToAnchor:", v40);

  *(_QWORD *)(v19 + 88) = v41;
  v42 = objc_msgSend(v13, "trailingAnchor");
  v43 = objc_msgSend(*v17, "trailingAnchor");
  v44 = objc_msgSend(v42, "constraintEqualToAnchor:constant:", v43, 6.0);

  *(_QWORD *)(v19 + 96) = v44;
  specialized Array._endMutation()(v45);
  v46 = v19;
  type metadata accessor for NSLayoutConstraint();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v46);
  objc_msgSend(v49, "activateConstraints:", isa);

  return v13;
}

uint64_t sub_10002D1B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id partial apply for closure #1 in MOSuggestionPickerPrivacyBadge.flipToPrivacyIconAndDismissAfterDelay()()
{
  uint64_t v0;

  return closure #1 in MOSuggestionPickerPrivacyBadge.flipToPrivacyIconAndDismissAfterDelay()(*(void **)(v0 + 16));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id partial apply for closure #2 in MOSuggestionPickerPrivacyBadge.flipToPrivacyIconAndDismissAfterDelay()()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "setAlpha:", 0.0);
}

uint64_t type metadata accessor for MOSuggestionPickerPrivacyBadge()
{
  return objc_opt_self(_TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge);
}

uint64_t sub_10002D230@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x60))();
  *a2 = result;
  return result;
}

uint64_t sub_10002D270(id *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(id))((swift_isaMask & **a2) + 0x68))(*a1);
}

uint64_t sub_10002D2B0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x78))();
  *a2 = result;
  return result;
}

uint64_t sub_10002D2F0(id *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(id))((swift_isaMask & **a2) + 0x80))(*a1);
}

unint64_t type metadata accessor for NSLayoutConstraint()
{
  unint64_t result;
  uint64_t v1;

  result = lazy cache variable for type metadata for NSLayoutConstraint;
  if (!lazy cache variable for type metadata for NSLayoutConstraint)
  {
    v1 = objc_opt_self(NSLayoutConstraint);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  }
  return result;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.__allocating_init(contactAssets:bundleStartDate:bundleEndDate:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __int128 *v3;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  Swift::String v24;
  void *object;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  id v33;
  _OWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v46;
  uint64_t ObjCClassMetadata;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(void *, uint64_t);
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(_QWORD *, uint64_t);
  uint64_t v125;
  void (*v126)(void *, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t countAndFlagsBits;
  __int128 *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  char *v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t v154;
  __int128 v155;
  __int128 v156;
  char v157[8];
  char v158[8];
  char v159[24];
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _OWORD v164[2];
  char v165;

  v7 = (char *)type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  v148 = *((_QWORD *)v7 - 1);
  __chkstk_darwin(v7);
  v150 = (uint64_t)&countAndFlagsBits - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)((unint64_t)a1 >> 62);
  if ((unint64_t)a1 >> 62)
    goto LABEL_76;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v10 < 1)
  {
LABEL_80:
    swift_bridgeObjectRelease(a1);
    v123 = type metadata accessor for Date(0);
    v124 = *(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v123 - 8) + 8);
    v124(a3, v123);
    v124((_QWORD *)a2, v123);
    return 0;
  }
LABEL_3:
  v151 = v7;
  v152 = v9;
  v134 = v3;
  v140 = a3;
  v141 = a2;
  v160 = (uint64_t)_swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
  a2 = 0;
  a3 = (_QWORD *)v160;
  v154 = a1 & 0xC000000000000001;
  v9 = &type metadata for String;
  v153 = a1;
  do
  {
    if (v154)
      v11 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a1);
    else
      v11 = (char *)*(id *)(a1 + 8 * a2 + 32);
    v7 = v11;
    v12 = objc_msgSend(v11, "identifier", countAndFlagsBits);
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    *(_QWORD *)&v164[0] = v13;
    *((_QWORD *)&v164[0] + 1) = v15;
    *(_QWORD *)&v155 = 35;
    *((_QWORD *)&v155 + 1) = 0xE100000000000000;
    v16 = lazy protocol witness table accessor for type String and conformance String();
    v3 = v164;
    v17 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v155, &type metadata for String, &type metadata for String, v16, v16);
    if (!v17[2])
    {
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      if (a1 < 0)
        v122 = a1;
      else
        v122 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v10 = _CocoaArrayWrapper.endIndex.getter(v122);
      swift_bridgeObjectRelease(a1);
      if (v10 < 1)
        goto LABEL_80;
      goto LABEL_3;
    }
    v18 = v17;
    v19 = v17[4];
    v20 = (_QWORD *)v17[5];
    swift_bridgeObjectRetain(v20);

    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v18);
    v160 = (uint64_t)a3;
    v22 = a3[2];
    v21 = a3[3];
    if (v22 >= v21 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
      a3 = (_QWORD *)v160;
    }
    ++a2;
    a3[2] = v22 + 1;
    v23 = &a3[2 * v22];
    v23[4] = v19;
    v23[5] = v20;
    a1 = v153;
  }
  while (v10 != a2);
  v24 = String.init(combinedIdentifiersFrom:)((Swift::OpaquePointer)a3);
  object = v24._object;
  a2 = MOSuggestionAssetsTypeContactPhoto;
  v162 = (uint64_t)_swiftEmptyArrayStorage;
  v163 = (uint64_t)_swiftEmptyArrayStorage;
  v26 = type metadata accessor for Date(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(_QWORD *)(v27 + 16);
  v29 = v150;
  ((void (*)(uint64_t, uint64_t, uint64_t))v28)(v150, v141, v26);
  v30 = v29 + *((int *)v151 + 5);
  ((void (*)(uint64_t, _QWORD *, uint64_t))v28)(v30, v140, v26);
  v136 = v27;
  v31 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56);
  v137 = v26;
  v31(v30, 0, 1, v26);
  v138 = a2;
  v135 = v24._object;
  countAndFlagsBits = v24._countAndFlagsBits;
  if (v152)
  {
    if (a1 < 0)
      v98 = a1;
    else
      v98 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v99 = (id)a2;
    v32 = _CocoaArrayWrapper.endIndex.getter(v98);
    swift_bridgeObjectRelease(a1);
    v34 = (_OWORD *)&unk_10019E000;
    if (!v32)
      goto LABEL_61;
LABEL_13:
    v152 = (_QWORD *)v32;
    if (v32 < 1)
    {
      __break(1u);
      goto LABEL_89;
    }
    v35 = 0;
    v20 = _swiftEmptyArrayStorage;
    v151 = (char *)&type metadata for Any + 8;
    v149 = v34[210];
    v139 = xmmword_10019EDA0;
    v36 = v152;
    while (1)
    {
      if (v154)
        v37 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v35, a1);
      else
        v37 = *(id *)(a1 + 8 * v35 + 32);
      a3 = v37;
      v38 = objc_msgSend(v37, "assetType", countAndFlagsBits);
      v39 = MOSuggestionAssetsTypeContactPhoto;
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v42 = v41;
      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      if (v40 == v43 && v42 == v44)
      {

        swift_bridgeObjectRelease_n(v42, 2);
      }
      else
      {
        a2 = v44;
        v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, v43, v44, 0);

        swift_bridgeObjectRelease(v42);
        swift_bridgeObjectRelease(a2);
        if ((v46 & 1) == 0)
        {
          ObjCClassMetadata = swift_getObjCClassMetadata(objc_msgSend(a3, "contentClassType"));
          if (ObjCClassMetadata != type metadata accessor for MOSuggestionGenericFallBackInfo())
          {
            if (serverManager._clientConnections != (NSMutableDictionary *)-1)
              swift_once(&serverManager._clientConnections, one-time initialization function for shared);
            v48 = type metadata accessor for Logger(0);
            v49 = __swift_project_value_buffer(v48, (uint64_t)static MOAngelLogger.shared);
            v50 = Logger.logObject.getter(v49);
            v51 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v50, v51))
            {
              a2 = swift_slowAlloc(2, -1);
              *(_WORD *)a2 = 0;
              _os_log_impl((void *)&_mh_execute_header, v50, v51, "[MOSuggestionInterstitialListAssetViewModel.contactAssets] Mismatched init for asset type", (uint8_t *)a2, 2u);
              swift_slowDealloc(a2, -1, -1);
            }

            goto LABEL_56;
          }
        }
      }
      a2 = (uint64_t)objc_msgSend(a3, "content");
      v52 = objc_opt_self(UIImage);
      v53 = swift_dynamicCastObjCClass(a2, v52);
      if (v53)
      {
        v54 = v53;
        v55 = objc_msgSend(a3, "metadata");
        v56 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v55, &type metadata for AnyHashable, v151, &protocol witness table for AnyHashable);

        specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v56);
        v58 = v57;
        swift_bridgeObjectRelease(v56);
        if (v58)
        {
          v36 = v152;
          if (*(_QWORD *)(v58 + 16))
          {
            v59 = MOSuggestionAssetMetadataKeyContactName;
            v60 = specialized __RawDictionaryStorage.find<A>(_:)(v59);
            if ((v61 & 1) != 0)
            {
              outlined init with copy of Any(*(_QWORD *)(v58 + 56) + 32 * v60, (uint64_t)&v155);
            }
            else
            {
              v156 = 0u;
              v155 = 0u;
            }

          }
          else
          {
            v156 = 0u;
            v155 = 0u;
          }
          swift_bridgeObjectRelease(v58);
          if (!*((_QWORD *)&v156 + 1))
          {
            swift_unknownObjectRelease(a2);

            outlined destroy of Any?((uint64_t)&v155);
            goto LABEL_16;
          }
          if ((swift_dynamicCast(&v160, &v155, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
          {
            swift_unknownObjectRelease(a2);
LABEL_56:

            goto LABEL_16;
          }
          v147 = v20;
          v7 = (char *)v160;
          a1 = v161;
          memset(v164, 0, sizeof(v164));
          v165 = 1;
          v62 = type metadata accessor for MOSuggestionSheetImage();
          swift_allocObject(v62, 105, 7);
          swift_unknownObjectRetain();
          v146 = MOSuggestionSheetImage.init(image:associatedTintColor:associatedBackgroundColor:tileBackgroundColor:shouldBeRounded:squareCrop:extraMargin:)(v54, 0, 0, 0, 0, (uint64_t)v164, 0, 1);
          v63 = objc_msgSend(a3, "identifier");
          v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
          v9 = &type metadata for String;
          v66 = v65;

          *(_QWORD *)&v155 = v64;
          *((_QWORD *)&v155 + 1) = v66;
          v160 = 35;
          v161 = 0xE100000000000000;
          v3 = &v155;
          v67 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v160, v9, v9, v16, v16);
          if (!v67[2])
            goto LABEL_75;
          v68 = v67;
          v70 = v67[4];
          v69 = v67[5];
          v143 = v70;
          v142 = v69;
          swift_bridgeObjectRetain(v69);
          swift_bridgeObjectRelease(v66);
          swift_bridgeObjectRelease(v68);
          v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionSheetAssetDateRange>);
          v72 = *(unsigned __int8 *)(v148 + 80);
          v73 = (v72 + 32) & ~v72;
          v74 = swift_allocObject(v71, v73 + *(_QWORD *)(v148 + 72), v72 | 7);
          *(_OWORD *)(v74 + 16) = v149;
          outlined init with copy of MOSuggestionSheetAssetDateRange(v150, v74 + v73);
          v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
          v76 = swift_allocObject(v75, 48, 7);
          v77 = v7;
          v78 = v76;
          *(_OWORD *)(v76 + 16) = v149;
          v144 = v77;
          *(_QWORD *)(v76 + 32) = v77;
          *(_QWORD *)(v76 + 40) = a1;
          v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          v80 = swift_allocObject(v79, 40, 7);
          *(_OWORD *)(v80 + 16) = v139;
          v81 = v146;
          *(_QWORD *)(v80 + 32) = v146;
          *(_QWORD *)&v155 = v80;
          specialized Array._endMutation()(v80);
          v82 = v155;
          v83 = type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
          swift_allocObject(v83, *(unsigned int *)(v83 + 48), *(unsigned __int16 *)(v83 + 52));
          v145 = a1;
          swift_bridgeObjectRetain(a1);
          swift_retain(v81);
          v84 = MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(v143, v142, 0, 0, 0, v74, v78, v82, 11, 1, 0, 0);
          swift_retain(v84);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v85);
          v87 = *(_QWORD *)((v163 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v86 = *(_QWORD *)((v163 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v87 >= v86 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v86 > 1, v87 + 1, 1);
          v88 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v87, v84);
          specialized Array._endMutation()(v88);
          v20 = v147;
          if ((swift_isUniquelyReferenced_nonNull_native(v147) & 1) == 0)
            v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
          v89 = v144;
          v91 = v20[2];
          v90 = v20[3];
          v92 = v145;
          if (v91 >= v90 >> 1)
          {
            v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v90 > 1), v91 + 1, 1, v20);
            v92 = v145;
          }
          v20[2] = v91 + 1;
          v93 = &v20[2 * v91];
          v93[4] = v89;
          v93[5] = v92;
          swift_retain(v81);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v94);
          v96 = *(_QWORD *)((v162 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v95 = *(_QWORD *)((v162 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v96 >= v95 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v95 > 1, v96 + 1, 1);
          v97 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v96, v81);
          specialized Array._endMutation()(v97);
          swift_release(v84);
          swift_release(v81);
          swift_unknownObjectRelease(a2);

          a1 = v153;
        }
        else
        {
          swift_unknownObjectRelease(a2);

        }
        v36 = v152;
      }
      else
      {

        swift_unknownObjectRelease(a2);
      }
LABEL_16:
      if (v36 == (_QWORD *)++v35)
        goto LABEL_62;
    }
  }
  v32 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v33 = (id)a2;
  v34 = &unk_10019E000;
  if (v32)
    goto LABEL_13;
LABEL_61:
  v20 = _swiftEmptyArrayStorage;
LABEL_62:
  swift_bridgeObjectRelease(a1);
  v28 = v162;
  if ((unint64_t)v162 >> 62)
  {
    if (v162 < 0)
      v100 = v162;
    else
      v100 = v162 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v162);
    v125 = _CocoaArrayWrapper.endIndex.getter(v100);
    v27 = v141;
    object = v140;
    a1 = v138;
    if (!v125)
      goto LABEL_85;
LABEL_64:
    if ((v28 & 0xC000000000000001) == 0)
    {
      if (!*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_96;
      }
      v100 = *(_QWORD *)(v28 + 32);
      swift_retain(v100);
LABEL_67:
      swift_bridgeObjectRelease(v28);
      v101 = (*((uint64_t (**)(uint64_t, void *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))v134 + 43))(countAndFlagsBits, v135, 0, 0, 0, 0, 0, 0, 267);
      v28 = v101;
      a2 = v163;
      if ((unint64_t)v163 >> 62)
      {
        if (v163 < 0)
          v130 = v163;
        else
          v130 = v163 & 0xFFFFFFFFFFFFFF8;
        swift_retain(v101);
        swift_bridgeObjectRetain(a2);
        v131 = _CocoaArrayWrapper.endIndex.getter(v130);
        swift_bridgeObjectRelease(a2);
        if (v131 < 2)
          goto LABEL_73;
      }
      else
      {
        v102 = *(_QWORD *)((v163 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain(v101);
        if (v102 < 2)
        {
LABEL_73:
          swift_bridgeObjectRelease(a2);
          v105 = MOSuggestionInterstitialListAssetViewModel._groupAssetTypeAndCountDescription(with:)(0);
          v107 = v106;
          swift_beginAccess(v28 + 24, &v155, 1, 0);
          v108 = *(_QWORD *)(v28 + 32);
          *(_QWORD *)(v28 + 24) = v105;
          *(_QWORD *)(v28 + 32) = v107;
          swift_bridgeObjectRelease(v108);
          swift_beginAccess(v28 + 48, &v160, 1, 0);
          v109 = *(_QWORD *)(v28 + 48);
          *(_QWORD *)(v28 + 48) = v20;
          swift_bridgeObjectRelease(v109);
          v110 = v162;
          swift_beginAccess(v28 + 56, v159, 1, 0);
          v111 = *(_QWORD *)(v28 + 56);
          *(_QWORD *)(v28 + 56) = v110;
          swift_bridgeObjectRelease(v111);
          v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionSheetAssetDateRange>);
          v113 = *(unsigned __int8 *)(v148 + 80);
          v114 = (v113 + 32) & ~v113;
          v115 = swift_allocObject(v112, v114 + *(_QWORD *)(v148 + 72), v113 | 7);
          *(_OWORD *)(v115 + 16) = xmmword_10019ED20;
          v116 = v115 + v114;
          v117 = v150;
          outlined init with copy of MOSuggestionSheetAssetDateRange(v150, v116);
          swift_release(v100);

          v118 = *(void (**)(void *, uint64_t))(v136 + 8);
          v119 = object;
          v120 = v137;
          v118(v119, v137);
          v118((void *)v27, v120);
          outlined destroy of MOSuggestionSheetAssetDateRange(v117);
          swift_beginAccess(v28 + 40, v158, 1, 0);
          v121 = *(_QWORD *)(v28 + 40);
          *(_QWORD *)(v28 + 40) = v115;
          swift_release(v28);
          swift_bridgeObjectRelease(v121);
          return v28;
        }
      }
      if ((a2 & 0x8000000000000000) == 0 && (a2 & 0x4000000000000000) == 0)
      {
        v103 = a2 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a2);
LABEL_72:
        *(_QWORD *)&v155 = v103;
        specialized MutableCollection<>.sort(by:)((uint64_t *)&v155);
        swift_bridgeObjectRelease(a2);
        v104 = v155;
        swift_beginAccess(v28 + 16, v157, 1, 0);
        a2 = *(_QWORD *)(v28 + 16);
        *(_QWORD *)(v28 + 16) = v104;
        goto LABEL_73;
      }
LABEL_96:
      v132 = swift_bridgeObjectRetain(a2);
      v103 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v132);
      swift_bridgeObjectRelease(a2);
      goto LABEL_72;
    }
LABEL_89:
    v100 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v28);
    goto LABEL_67;
  }
  v100 = *(_QWORD *)((v162 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v162);
  v27 = v141;
  object = v140;
  a1 = v138;
  if (v100)
    goto LABEL_64;
LABEL_85:
  swift_bridgeObjectRelease(v135);

  swift_bridgeObjectRelease(v28);
  v126 = *(void (**)(void *, uint64_t))(v136 + 8);
  v127 = v137;
  v126(object, v137);
  v126((void *)v27, v127);
  outlined destroy of MOSuggestionSheetAssetDateRange(v150);
  v128 = v162;
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v128);
  swift_bridgeObjectRelease(v163);
  return 0;
}

double MOSuggestionContactAssetView.mediumWidth.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + OBJC_IVAR____TtC16MomentsUIService28MOSuggestionContactAssetView____lazy_storage___mediumWidth);
  if ((*(_BYTE *)(v0
                 + OBJC_IVAR____TtC16MomentsUIService28MOSuggestionContactAssetView____lazy_storage___mediumWidth
                 + 8) & 1) == 0)
    return *(double *)v1;
  *(_QWORD *)v1 = 0x4034000000000000;
  v1[8] = 0;
  return 20.0;
}

void MOSuggestionContactAssetView.mediumWidth.setter(double a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + OBJC_IVAR____TtC16MomentsUIService28MOSuggestionContactAssetView____lazy_storage___mediumWidth;
  *(double *)v2 = a1;
  *(_BYTE *)(v2 + 8) = 0;
}

_QWORD *(*MOSuggestionContactAssetView.mediumWidth.modify(uint64_t a1))(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(double *)a1 = MOSuggestionContactAssetView.mediumWidth.getter();
  return MOSuggestionContactAssetView.mediumWidth.modify;
}

_QWORD *MOSuggestionContactAssetView.mediumWidth.modify(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1] + OBJC_IVAR____TtC16MomentsUIService28MOSuggestionContactAssetView____lazy_storage___mediumWidth;
  *(_QWORD *)v1 = *result;
  *(_BYTE *)(v1 + 8) = 0;
  return result;
}

id MOSuggestionContactAssetView.__allocating_init(image:name:contactFirstName:assignedTileSize:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  objc_class *v6;
  id v13;

  v13 = objc_allocWithZone(v6);
  return MOSuggestionContactAssetView.init(image:name:contactFirstName:assignedTileSize:)(a1, a2, a3, a4, a5, a6);
}

id MOSuggestionContactAssetView.init(image:name:contactFirstName:assignedTileSize:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  char *v6;
  char *v10;
  double y;
  double width;
  double height;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _QWORD *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  void *v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  void *v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  void *v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  void *v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  void *v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  void *v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  void *v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  void *v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  void *v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  void *v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  void *v129;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  void *v135;
  id v136;
  id v137;
  id v138;
  id v139;
  UIAccessibilityTraits v140;
  id v141;
  unint64_t v142;
  UIAccessibilityTraits v143;
  void *v144;
  id v145;
  id v146;
  Swift::String v147;
  Swift::String v148;
  void *object;
  NSString v150;
  void *v152;
  objc_super v154;
  Swift::String v155;

  v10 = &v6[OBJC_IVAR____TtC16MomentsUIService28MOSuggestionContactAssetView____lazy_storage___mediumWidth];
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  y = CGRectZero.origin.y;
  width = CGRectZero.size.width;
  height = CGRectZero.size.height;
  v154.receiver = v6;
  v154.super_class = (Class)type metadata accessor for MOSuggestionContactAssetView();
  v14 = objc_msgSendSuper2(&v154, "initWithFrame:", CGRectZero.origin.x, y, width, height);
  v15 = objc_allocWithZone((Class)UIImageView);
  v16 = v14;
  v17 = objc_msgSend(v15, "initWithImage:", a1);
  v18 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", 8);
  v19 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v18);
  objc_msgSend(v17, "bounds");
  objc_msgSend(v19, "setFrame:");
  objc_msgSend(v19, "setAutoresizingMask:", 18);
  objc_msgSend(v17, "addSubview:", v19);

  objc_msgSend(v17, "setContentMode:", 2);
  objc_msgSend(v16, "addSubview:", v17);
  v152 = v17;
  v20 = UIView.fillSuper(margin:)(0.0);
  swift_bridgeObjectRelease(v20);
  v21 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", a1);
  objc_msgSend(v21, "setContentMode:", 1);
  v22 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v23 = (void *)objc_opt_self(UIFont);
  v24 = objc_msgSend(v23, "preferredFontForTextStyle:", UIFontTextStyleFootnote);
  v25 = objc_msgSend(v24, "fontDescriptor");
  v26 = objc_msgSend(v25, "fontDescriptorWithSymbolicTraits:", 2);

  if (!v26)
  {
    __break(1u);
LABEL_78:
    __break(1u);
    JUMPOUT(0x10002F748);
  }
  v27 = objc_msgSend(v23, "fontWithDescriptor:size:", v26, 0.0);

  objc_msgSend(v22, "setFont:", v27);
  v28 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  objc_msgSend(v22, "setTextColor:", v28);

  objc_msgSend(v22, "setNumberOfLines:", 0);
  objc_msgSend(v22, "setLineBreakMode:", 4);
  v29 = a6 == 2 || a6 == 5;
  if (a6 == 2)
    v30 = a3;
  else
    v30 = a5;
  if (a6 == 2)
    v31 = a5;
  else
    v31 = a3;
  objc_msgSend(v22, "setTextAlignment:", v29);
  swift_bridgeObjectRelease(v30);
  v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v31);
  objc_msgSend(v22, "setText:", v32);

  objc_msgSend(v22, "setMaximumContentSizeCategory:", UIContentSizeCategoryAccessibilityMedium);
  v33 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
  objc_msgSend(v33, "addArrangedSubview:", v21);
  objc_msgSend(v33, "addArrangedSubview:", v22);
  objc_msgSend(v33, "setAlignment:", 3);
  objc_msgSend(v16, "addSubview:", v33);
  switch(a6)
  {
    case 2:
      objc_msgSend(v22, "setTextAlignment:", 1);
      objc_msgSend(v33, "setAxis:", 1);
      objc_msgSend(v22, "setNumberOfLines:", 1);
      v64 = objc_msgSend(v33, "superview");
      if (v64)
      {
        v65 = v64;
        objc_msgSend(v33, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v66 = objc_msgSend(v33, "topAnchor");
        v67 = objc_msgSend(v65, "topAnchor");
        v68 = objc_msgSend(v66, "constraintEqualToAnchor:", v67);

        objc_msgSend(v68, "setConstant:", 8.0);
        if (v68)
        {
          v69 = v68;
          objc_msgSend(v69, "setActive:", 1);

        }
      }
      v70 = objc_msgSend(v33, "superview");
      if (v70)
      {
        v71 = v70;
        objc_msgSend(v33, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v72 = objc_msgSend(v33, "leadingAnchor");
        v73 = objc_msgSend(v71, "leadingAnchor");
        v74 = objc_msgSend(v72, "constraintEqualToAnchor:", v73);

        objc_msgSend(v74, "setConstant:", 8.0);
        if (v74)
        {
          v75 = v74;
          objc_msgSend(v75, "setActive:", 1);

        }
      }
      v76 = objc_msgSend(v33, "superview");
      if (v76)
      {
        v77 = v76;
        objc_msgSend(v33, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v78 = objc_msgSend(v33, "trailingAnchor");
        v79 = objc_msgSend(v77, "trailingAnchor");
        v80 = objc_msgSend(v78, "constraintEqualToAnchor:", v79);

        objc_msgSend(v80, "setConstant:", -8.0);
        if (v80)
        {
          v81 = v80;
          objc_msgSend(v81, "setActive:", 1);

        }
      }
      v82 = objc_msgSend(v33, "superview");
      if (v82)
      {
        v83 = v82;
        objc_msgSend(v33, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v84 = objc_msgSend(v33, "bottomAnchor");
        v85 = objc_msgSend(v83, "bottomAnchor");
        v86 = objc_msgSend(v84, "constraintEqualToAnchor:", v85);

        if (v86)
        {
          objc_msgSend(v86, "setConstant:", -8.0);
          v87 = v86;
          objc_msgSend(v87, "setActive:", 1);

        }
      }
      objc_msgSend(v33, "setCustomSpacing:afterView:", v21, 8.0);
      goto LABEL_73;
    case 3:
      objc_msgSend(v33, "removeFromSuperview");
      objc_msgSend(v16, "addSubview:", v21);
      v88 = objc_msgSend(v21, "superview");
      if (v88)
      {
        v89 = v88;
        objc_msgSend(v21, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v90 = objc_msgSend(v21, "topAnchor");
        v91 = objc_msgSend(v89, "topAnchor");
        v92 = objc_msgSend(v90, "constraintEqualToAnchor:", v91);

        objc_msgSend(v92, "setConstant:", 4.0);
        if (v92)
        {
          v93 = v92;
          objc_msgSend(v93, "setActive:", 1);

        }
      }
      v94 = objc_msgSend(v21, "superview");
      if (v94)
      {
        v95 = v94;
        objc_msgSend(v21, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v96 = objc_msgSend(v21, "leadingAnchor");
        v97 = objc_msgSend(v95, "leadingAnchor");
        v98 = objc_msgSend(v96, "constraintEqualToAnchor:", v97);

        objc_msgSend(v98, "setConstant:", 4.0);
        if (v98)
        {
          v99 = v98;
          objc_msgSend(v99, "setActive:", 1);

        }
      }
      v100 = objc_msgSend(v21, "superview");
      if (v100)
      {
        v101 = v100;
        objc_msgSend(v21, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v102 = objc_msgSend(v21, "trailingAnchor");
        v103 = objc_msgSend(v101, "trailingAnchor");
        v104 = objc_msgSend(v102, "constraintEqualToAnchor:", v103);

        objc_msgSend(v104, "setConstant:", -4.0);
        if (v104)
        {
          v105 = v104;
          objc_msgSend(v105, "setActive:", 1);

        }
      }
      v106 = objc_msgSend(v21, "superview");
      if (v106)
      {
        v107 = v106;
        objc_msgSend(v21, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v108 = objc_msgSend(v21, "bottomAnchor");
        v109 = objc_msgSend(v107, "bottomAnchor");
        v110 = objc_msgSend(v108, "constraintEqualToAnchor:", v109);

        if (v110)
        {
          objc_msgSend(v110, "setConstant:", -4.0);
          v111 = v110;
          objc_msgSend(v111, "setActive:", 1);

        }
      }
      goto LABEL_73;
    case 4:
    case 6:
    case 7:
      objc_msgSend(v22, "setTextAlignment:", 0);
      objc_msgSend(v33, "setAxis:", 0);
      v34 = objc_msgSend(v21, "widthAnchor");
      v35 = objc_msgSend(v21, "heightAnchor");
      v36 = objc_msgSend(v34, "constraintEqualToAnchor:", v35);

      objc_msgSend(v36, "setActive:", 1);
      v37 = objc_msgSend(v22, "leadingAnchor");
      v38 = objc_msgSend(v21, "trailingAnchor");
      v39 = objc_msgSend(v37, "constraintEqualToAnchor:constant:", v38, 12.0);

      objc_msgSend(v39, "setActive:", 1);
      v40 = objc_msgSend(v33, "superview");
      if (v40)
      {
        v41 = v40;
        objc_msgSend(v33, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v42 = objc_msgSend(v33, "topAnchor");
        v43 = objc_msgSend(v41, "topAnchor");
        v44 = objc_msgSend(v42, "constraintEqualToAnchor:", v43);

        objc_msgSend(v44, "setConstant:", 8.0);
        v45 = v44;
        objc_msgSend(v45, "setActive:", 1);

      }
      v46 = objc_msgSend(v33, "superview");
      if (v46)
      {
        v47 = v46;
        objc_msgSend(v33, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v48 = objc_msgSend(v33, "leadingAnchor");
        v49 = objc_msgSend(v47, "leadingAnchor");
        v50 = objc_msgSend(v48, "constraintEqualToAnchor:", v49);

        objc_msgSend(v50, "setConstant:", 8.0);
        v51 = v50;
        objc_msgSend(v51, "setActive:", 1);

      }
      v52 = objc_msgSend(v33, "superview");
      if (v52)
      {
        v53 = v52;
        objc_msgSend(v33, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v54 = objc_msgSend(v33, "trailingAnchor");
        v55 = objc_msgSend(v53, "trailingAnchor");
        v56 = objc_msgSend(v54, "constraintEqualToAnchor:", v55);

        objc_msgSend(v56, "setConstant:", -8.0);
        v57 = v56;
        objc_msgSend(v57, "setActive:", 1);

      }
      v58 = objc_msgSend(v33, "superview");
      if (v58)
      {
        v59 = v58;
        objc_msgSend(v33, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v60 = objc_msgSend(v33, "bottomAnchor");
        v61 = objc_msgSend(v59, "bottomAnchor");
        v62 = objc_msgSend(v60, "constraintEqualToAnchor:", v61);

        objc_msgSend(v62, "setConstant:", -8.0);
        v63 = v62;
        objc_msgSend(v63, "setActive:", 1);

      }
      objc_msgSend(v33, "setCustomSpacing:afterView:", v21, 12.0);
      goto LABEL_73;
    case 5:
      goto LABEL_56;
    case 8:
      v112 = objc_msgSend(v23, "preferredFontForTextStyle:", UIFontTextStyleBody);
      v113 = objc_msgSend(v112, "fontDescriptor");
      v114 = objc_msgSend(v113, "fontDescriptorWithSymbolicTraits:", 2);

      if (!v114)
        goto LABEL_78;
      v115 = objc_msgSend(v23, "fontWithDescriptor:size:", v114, 0.0);

      objc_msgSend(v22, "setFont:", v115);
LABEL_56:
      objc_msgSend(v22, "setTextAlignment:", 1);
      objc_msgSend(v33, "setAxis:", 1);
      v116 = objc_msgSend(v33, "superview");
      if (v116)
      {
        v117 = v116;
        objc_msgSend(v33, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v118 = objc_msgSend(v33, "topAnchor");
        v119 = objc_msgSend(v117, "topAnchor");
        v120 = objc_msgSend(v118, "constraintEqualToAnchor:", v119);

        objc_msgSend(v120, "setConstant:", 16.0);
        if (v120)
        {
          v121 = v120;
          objc_msgSend(v121, "setActive:", 1);

        }
      }
      v122 = objc_msgSend(v33, "superview");
      if (v122)
      {
        v123 = v122;
        objc_msgSend(v33, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v124 = objc_msgSend(v33, "leadingAnchor");
        v125 = objc_msgSend(v123, "leadingAnchor");
        v126 = objc_msgSend(v124, "constraintEqualToAnchor:", v125);

        objc_msgSend(v126, "setConstant:", 12.0);
        if (v126)
        {
          v127 = v126;
          objc_msgSend(v127, "setActive:", 1);

        }
      }
      v128 = objc_msgSend(v33, "superview");
      if (v128)
      {
        v129 = v128;
        objc_msgSend(v33, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v130 = objc_msgSend(v33, "trailingAnchor");
        v131 = objc_msgSend(v129, "trailingAnchor");
        v132 = objc_msgSend(v130, "constraintEqualToAnchor:", v131);

        objc_msgSend(v132, "setConstant:", -12.0);
        if (v132)
        {
          v133 = v132;
          objc_msgSend(v133, "setActive:", 1);

        }
      }
      v134 = objc_msgSend(v33, "superview");
      if (v134)
      {
        v135 = v134;
        objc_msgSend(v33, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v136 = objc_msgSend(v33, "bottomAnchor");
        v137 = objc_msgSend(v135, "bottomAnchor");
        v138 = objc_msgSend(v136, "constraintEqualToAnchor:", v137);

        if (v138)
        {
          objc_msgSend(v138, "setConstant:", -16.0);
          v139 = v138;
          objc_msgSend(v139, "setActive:", 1);

        }
      }
      objc_msgSend(v33, "setCustomSpacing:afterView:", v21, 16.0);
LABEL_73:
      objc_msgSend(v16, "setIsAccessibilityElement:", 1);
      v140 = UIAccessibilityTraitImage;
      v141 = v16;
      v142 = (unint64_t)objc_msgSend(v141, "accessibilityTraits");
      if ((v140 & ~v142) != 0)
        v143 = v140;
      else
        v143 = 0;
      objc_msgSend(v141, "setAccessibilityTraits:", v143 | v142);

      objc_msgSend(v141, "setAccessibilityIgnoresInvertColors:", 1);
      v144 = (void *)objc_opt_self(NSBundle);
      v145 = v141;
      v146 = objc_msgSend(v144, "mainBundle");
      v155._object = (void *)0x80000001001A6990;
      v147._countAndFlagsBits = 0x746361746E6F43;
      v147._object = (void *)0xE700000000000000;
      v148._countAndFlagsBits = 0;
      v148._object = (void *)0xE000000000000000;
      v155._countAndFlagsBits = 0xD000000000000026;
      object = NSLocalizedString(_:tableName:bundle:value:comment:)(v147, (Swift::String_optional)0, (NSBundle)v146, v148, v155)._object;

      v150 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(object);
      objc_msgSend(v145, "setAccessibilityLabel:", v150);

      return v145;
    default:
      goto LABEL_73;
  }
}

void MOSuggestionContactAssetView.init(coder:)()
{
  char *v0;
  char *v1;

  v1 = &v0[OBJC_IVAR____TtC16MomentsUIService28MOSuggestionContactAssetView____lazy_storage___mediumWidth];
  *(_QWORD *)v1 = 0;
  v1[8] = 1;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001A6460, "MomentsUIService/MOSuggestionContactAssetView.swift", 51, 2, 93, 0);
  __break(1u);
}

void MOSuggestionContactAssetView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer("MomentsUIService.MOSuggestionContactAssetView", 45, "init(frame:)", 12, 0);
  __break(1u);
}

id MOSuggestionContactAssetView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionContactAssetView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MOSuggestionContactAssetView()
{
  return objc_opt_self(_TtC16MomentsUIService28MOSuggestionContactAssetView);
}

void sub_10002F900(_QWORD **a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void))((swift_isaMask & **a1) + 0x58))();
}

uint64_t sub_10002F940(double *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(double))((swift_isaMask & **a2) + 0x60))(*a1);
}

void *MOSuggestionSheetAssetGridView.maxCount.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetAssetGridView.maxCount;
}

uint64_t static MOSuggestionSheetAssetGridView.maxCount.getter()
{
  return 13;
}

void *MOSuggestionSheetAssetGridView.fullWidthfirstRowCount.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetAssetGridView.fullWidthfirstRowCount;
}

void *MOSuggestionSheetAssetGridView.halfWidthfirstRowCount.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetAssetGridView.halfWidthfirstRowCount;
}

uint64_t static MOSuggestionSheetAssetGridView.fullWidthIndexBeforeCutoff.getter()
{
  return 4;
}

void *MOSuggestionSheetAssetGridView.cornerRadius.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetAssetGridView.cornerRadius;
}

double static MOSuggestionInterstitialExpandableListViewCellConstants.CHECKMARK_PLATTER_MARGIN.getter()
{
  return 8.0;
}

void *MOSuggestionSheetAssetGridView.gutter.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetAssetGridView.gutter;
}

double static MOSuggestionInterstitialListAssetViewConstants.MAP_PIN_INSET_MARGIN.getter()
{
  return 4.0;
}

void *MOSuggestionSheetAssetGridView.fullWidthIndexBeforeCutoff.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetAssetGridView.fullWidthIndexBeforeCutoff;
}

void *MOSuggestionSheetAssetGridView.halfWidthIndexBeforeCutoff.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetAssetGridView.halfWidthIndexBeforeCutoff;
}

void *MOSuggestionSheetAssetGridView.gridCollectionView.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_gridCollectionView);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_gridCollectionView, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void MOSuggestionSheetAssetGridView.gridCollectionView.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  _BYTE v5[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_gridCollectionView);
  swift_beginAccess(v3, v5, 1, 0);
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*MOSuggestionSheetAssetGridView.gridCollectionView.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_gridCollectionView, a1, 33, 0);
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

uint64_t MOSuggestionSheetAssetGridView.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_delegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_delegate, v3, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t MOSuggestionSheetAssetGridView.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  v5 = v2 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_delegate;
  swift_beginAccess(v5, v7, 1, 0);
  *(_QWORD *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1);
}

void (*MOSuggestionSheetAssetGridView.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return MOSuggestionSheetAssetGridView.delegate.modify;
}

void MOSuggestionSheetAssetGridView.delegate.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48);
  *(_QWORD *)(v6 + 8) = v5;
  swift_unknownObjectWeakAssign(v6, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

uint64_t MOSuggestionSheetAssetGridView.assetCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetCount;
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetCount, v3, 0, 0);
  return *(_QWORD *)v1;
}

uint64_t MOSuggestionSheetAssetGridView.assetCount.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetCount);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*MOSuggestionSheetAssetGridView.assetCount.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetCount, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionSheetAssetGridView.isFullWidth.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullWidth);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullWidth, v3, 0, 0);
  return *v1;
}

uint64_t MOSuggestionSheetAssetGridView.isFullWidth.setter(char a1)
{
  _QWORD *v1;
  _BYTE *v3;
  objc_class *v4;
  id v5;
  void *v6;
  _BYTE v8[24];

  v3 = (char *)v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullWidth;
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullWidth, v8, 1, 0);
  *v3 = a1;
  if ((a1 & 1) != 0)
    v4 = (objc_class *)type metadata accessor for MOSuggestionSheetMosaicLayout();
  else
    v4 = (objc_class *)type metadata accessor for MOSuggestionSheetHalfMosaicLayout();
  v5 = objc_msgSend(objc_allocWithZone(v4), "init");
  v6 = *(void **)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_mosaicLayout);
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_mosaicLayout) = v5;

  return (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x1E0))();
}

void (*MOSuggestionSheetAssetGridView.isFullWidth.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullWidth;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  return MOSuggestionSheetAssetGridView.isFullWidth.modify;
}

void MOSuggestionSheetAssetGridView.isFullWidth.modify(_QWORD *a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  objc_class *v5;
  id v6;
  void *v7;

  v3 = (_QWORD *)*a1;
  swift_endAccess(*a1);
  if ((a2 & 1) == 0)
  {
    v4 = (_QWORD *)v3[3];
    if (*((_BYTE *)v4 + v3[4]) == 1)
      v5 = (objc_class *)type metadata accessor for MOSuggestionSheetMosaicLayout();
    else
      v5 = (objc_class *)type metadata accessor for MOSuggestionSheetHalfMosaicLayout();
    v6 = objc_msgSend(objc_allocWithZone(v5), "init");
    v7 = *(void **)((char *)v4 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_mosaicLayout);
    *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_mosaicLayout) = v6;

    (*(void (**)(void))((swift_isaMask & *v4) + 0x1E0))();
  }
  free(v3);
}

uint64_t MOSuggestionSheetAssetGridView.isFullHeight.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullHeight);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullHeight, v3, 0, 0);
  return *v1;
}

uint64_t MOSuggestionSheetAssetGridView.isFullHeight.setter(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _BYTE *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  void (*v8)(_QWORD);
  id v9;
  _BYTE v11[24];

  v2 = v1;
  v4 = (char *)v2 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullHeight;
  swift_beginAccess((char *)v2 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullHeight, v11, 1, 0);
  *v4 = a1;
  v5 = *(void **)((char *)v2 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_mosaicLayout);
  v6 = type metadata accessor for MOSuggestionSheetMosaicLayout();
  v7 = (_QWORD *)swift_dynamicCastClass(v5, v6);
  if (v7)
  {
    v8 = *(void (**)(_QWORD))((swift_isaMask & *v7) + 0xA8);
    v9 = v5;
    v8(a1 & 1);

  }
  return (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x1E0))();
}

void (*MOSuggestionSheetAssetGridView.isFullHeight.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullHeight;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  return MOSuggestionSheetAssetGridView.isFullHeight.modify;
}

void MOSuggestionSheetAssetGridView.isFullHeight.modify(_QWORD *a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  id v10;

  v3 = (_QWORD *)*a1;
  swift_endAccess(*a1);
  if ((a2 & 1) == 0)
  {
    v4 = (_QWORD *)v3[3];
    v5 = *(void **)((char *)v4 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_mosaicLayout);
    v6 = type metadata accessor for MOSuggestionSheetMosaicLayout();
    v7 = (_QWORD *)swift_dynamicCastClass(v5, v6);
    if (v7)
    {
      v8 = *((unsigned __int8 *)v4 + v3[4]);
      v9 = *(void (**)(uint64_t))((swift_isaMask & *v7) + 0xA8);
      v10 = v5;
      v9(v8);

      v4 = (_QWORD *)v3[3];
    }
    (*(void (**)(void))((swift_isaMask & *v4) + 0x1E0))();
  }
  free(v3);
}

uint64_t MOSuggestionSheetAssetGridView.assetViewModels.didset()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(__n128);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  double (*v22)(_QWORD *, _QWORD);
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(__n128);
  uint64_t v27;
  unint64_t v28;
  _QWORD v29[4];
  uint64_t v30;
  unint64_t v31;
  _BYTE v32[24];

  v1 = v0;
  v2 = (_QWORD *)((char *)v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetViewModels);
  v3 = swift_beginAccess(v2, v32, 0, 0);
  v4 = *v2;
  if (!*v2)
    return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x1C0))(v3);
  v5 = (uint64_t (*)(__n128))v2[1];
  v6 = v4 & 0xFFFFFFFFFFFFFF8;
  if ((unint64_t)v4 >> 62)
    goto LABEL_22;
  v7 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*v2);
  result = swift_bridgeObjectRetain(v5);
  if (v7)
  {
LABEL_4:
    if ((v7 & 0x8000000000000000) == 0)
    {
      v26 = v5;
      v27 = v4;
      v9 = 0;
      v28 = v4 & 0xC000000000000001;
      v4 += 32;
      while (1)
      {
        if (v9 < 0 || v9 >= v7)
        {
          if (__OFADD__(v9++, 1))
          {
            __break(1u);
LABEL_20:
            __break(1u);
LABEL_21:
            __break(1u);
LABEL_22:
            if (v4 >= 0)
              v25 = v6;
            else
              v25 = v4;
            outlined copy of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v4, (uint64_t)v5);
            swift_bridgeObjectRetain(v4);
            v7 = _CocoaArrayWrapper.endIndex.getter(v25);
            result = swift_bridgeObjectRelease(v4);
            if (!v7)
              goto LABEL_26;
            goto LABEL_4;
          }
        }
        else
        {
          if (v28)
          {
            v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v27);
          }
          else
          {
            if ((unint64_t)v9 >= *(_QWORD *)(v6 + 16))
              goto LABEL_20;
            v11 = *(_QWORD *)(v4 + 8 * v9);
            v12 = swift_retain(v11);
          }
          v13 = (*(uint64_t (**)(__n128))(*(_QWORD *)v11 + 96))(v12);
          swift_release(v11);
          ++v9;
          if (v13)
          {
            v5 = *(uint64_t (**)(__n128))(*(_QWORD *)v13 + 512);
            v14 = swift_retain(v13);
            v15 = v5(v14);
            v17 = v16;
            v29[0] = v15;
            v29[1] = v16;
            v30 = 35;
            v31 = 0xE100000000000000;
            v18 = lazy protocol witness table accessor for type String and conformance String();
            v19 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v30, &type metadata for String, &type metadata for String, v18, v18);
            if (!v19[2])
              goto LABEL_21;
            v20 = v19;
            v21 = v19[4];
            v5 = (uint64_t (*)(__n128))v19[5];
            swift_bridgeObjectRetain(v5);
            swift_bridgeObjectRelease(v17);
            swift_bridgeObjectRelease(v20);
            v22 = (double (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))((swift_isaMask & *v1)
                                                                                               + 0x178))(v29);
            specialized Set._Variant.insert(_:)(&v30, v21, (uint64_t)v5);
            swift_bridgeObjectRelease(v31);
            v23.n128_f64[0] = v22(v29, 0);
            swift_release_n(v13, 2, v23);
          }
        }
        if (v9 == v7)
        {
          swift_bridgeObjectRelease(v26);
          v24 = v27;
          return swift_bridgeObjectRelease(v24);
        }
      }
    }
    __break(1u);
  }
  else
  {
LABEL_26:
    swift_bridgeObjectRelease(v5);
    v24 = v4;
    return swift_bridgeObjectRelease(v24);
  }
  return result;
}

uint64_t MOSuggestionSheetAssetGridView.assetViewModels.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetViewModels);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetViewModels, v4, 0, 0);
  v2 = *v1;
  outlined copy of MOWeakArray<MOSuggestionSheetAssetViewModel>?(*v1, v1[1]);
  return v2;
}

uint64_t outlined copy of MOWeakArray<MOSuggestionSheetAssetViewModel>?(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t MOSuggestionSheetAssetGridView.assetViewModels.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetViewModels);
  swift_beginAccess(v3 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetViewModels, v11, 1, 0);
  v8 = *v7;
  v9 = v7[1];
  *v7 = a1;
  v7[1] = a2;
  v7[2] = a3;
  outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v8, v9);
  return MOSuggestionSheetAssetGridView.assetViewModels.didset();
}

uint64_t outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t (*MOSuggestionSheetAssetGridView.assetViewModels.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetViewModels, a1, 33, 0);
  return MOSuggestionSheetAssetGridView.assetViewModels.modify;
}

uint64_t MOSuggestionSheetAssetGridView.assetViewModels.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess(a1);
  if ((a2 & 1) == 0)
    return MOSuggestionSheetAssetGridView.assetViewModels.didset();
  return result;
}

uint64_t MOSuggestionSheetAssetGridView.selectedAssetIdentifiers.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_selectedAssetIdentifiers);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_selectedAssetIdentifiers, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t MOSuggestionSheetAssetGridView.selectedAssetIdentifiers.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_selectedAssetIdentifiers);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*MOSuggestionSheetAssetGridView.selectedAssetIdentifiers.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_selectedAssetIdentifiers, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionSheetAssetGridView.isBundleSelected.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isBundleSelected);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isBundleSelected, v3, 0, 0);
  return *v1;
}

uint64_t MOSuggestionSheetAssetGridView.isBundleSelected.setter(char a1)
{
  _QWORD *v1;
  _BYTE *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (char *)v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isBundleSelected;
  v4 = swift_beginAccess((char *)v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isBundleSelected, v6, 1, 0);
  *v3 = a1;
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x1E8))(v4);
}

uint64_t (*MOSuggestionSheetAssetGridView.isBundleSelected.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isBundleSelected, a1, 33, 0);
  return MOSuggestionSheetAssetGridView.isBundleSelected.modify;
}

uint64_t MOSuggestionSheetAssetGridView.isBundleSelected.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess(a1);
  if ((a2 & 1) == 0)
    return (*(uint64_t (**)(uint64_t))((swift_isaMask & **(_QWORD **)(a1 + 24)) + 0x1E8))(result);
  return result;
}

uint64_t MOSuggestionSheetAssetGridView.isInterstitial.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isInterstitial);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isInterstitial, v3, 0, 0);
  return *v1;
}

void MOSuggestionSheetAssetGridView.isInterstitial.setter(char a1)
{
  _QWORD *v1;
  _BYTE *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _BYTE v7[24];

  v3 = (char *)v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isInterstitial;
  v4 = swift_beginAccess((char *)v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isInterstitial, v7, 1, 0);
  *v3 = a1;
  v5 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0xA8))(v4);
  if (v5)
  {
    v6 = v5;
    objc_msgSend(v5, "reloadData");

  }
}

void (*MOSuggestionSheetAssetGridView.isInterstitial.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isInterstitial, a1, 33, 0);
  return MOSuggestionSheetAssetGridView.isInterstitial.modify;
}

void MOSuggestionSheetAssetGridView.isInterstitial.modify(uint64_t a1, char a2)
{
  uint64_t v4;
  void *v5;
  id v6;

  v4 = swift_endAccess(a1);
  if ((a2 & 1) == 0)
  {
    v5 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & **(_QWORD **)(a1 + 24)) + 0xA8))(v4);
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, "reloadData");

    }
  }
}

char *MOSuggestionSheetAssetGridView.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v5;
  uint64_t v10;
  id v11;
  char *v12;
  _BYTE *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  id v19;
  objc_super v21;

  v5 = v4;
  *(_QWORD *)&v4[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_gridCollectionView] = 0;
  v10 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_addedView;
  v11 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionAddedView());
  v12 = v5;
  v13 = objc_msgSend(v11, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v13[OBJC_IVAR____TtC16MomentsUIService21MOSuggestionAddedView_symbolOnly] = 0;
  v14 = v13;
  objc_msgSend(v14, "setClipsToBounds:", 1);
  MOSuggestionAddedView.initAddedView()();

  *(_QWORD *)&v5[v10] = v14;
  v15 = &v12[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_delegate];
  *((_QWORD *)v15 + 1) = 0;
  swift_unknownObjectWeakInit(v15, 0);
  *(_QWORD *)&v12[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetCount] = 0;
  v12[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullWidth] = 1;
  v12[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullHeight] = 1;
  v16 = &v12[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetViewModels];
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_selectedAssetIdentifiers] = &_swiftEmptySetSingleton;
  v12[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isBundleSelected] = 0;
  v12[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isInterstitial] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_mosaicLayout] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MOSuggestionSheetMosaicLayout()), "init");

  v21.receiver = v12;
  v21.super_class = (Class)type metadata accessor for MOSuggestionSheetAssetGridView();
  v17 = (char *)objc_msgSendSuper2(&v21, "initWithFrame:", a1, a2, a3, a4);
  MOSuggestionSheetAssetGridView.initGridCollectionView()();
  v18 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_addedView;
  objc_msgSend(v17, "addSubview:", *(_QWORD *)&v17[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_addedView]);
  v19 = objc_msgSend(*(id *)&v17[v18], "layer");
  objc_msgSend(v19, "setCornerRadius:", 8.0);

  return v17;
}

Swift::Void __swiftcall MOSuggestionSheetAssetGridView.layoutSubviews()()
{
  _QWORD *v0;
  id v1;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetAssetGridView();
  v1 = objc_msgSendSuper2(&v2, "layoutSubviews");
  (*(void (**)(id))((swift_isaMask & *v0) + 0x1E8))(v1);
}

Swift::Void __swiftcall MOSuggestionSheetAssetGridView.setAddedViewInteractionState(_:)(MomentsUIService::MOSuggestionCollectionViewInteractionState a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void (*v4)(uint64_t);
  _QWORD *v5;

  v2 = a1 & 1;
  v3 = *(_QWORD **)(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_addedView);
  v4 = *(void (**)(uint64_t))((swift_isaMask & *v3) + 0x98);
  v5 = v3;
  v4(v2);

}

void MOSuggestionSheetAssetGridView.initGridCollectionView()()
{
  _QWORD *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  id v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;

  objc_msgSend(v0, "bounds");
  v5 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MOSuggestionSheetGridCollectionView()), "initWithFrame:collectionViewLayout:", *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_mosaicLayout), v1, v2, v3, v4);
  v6 = (*(uint64_t (**)(id))((swift_isaMask & *v0) + 0xB0))(v5);
  v7 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA8);
  v8 = (void *)((uint64_t (*)(uint64_t))v7)(v6);
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  }
  v10 = (void *)v7();
  if (v10)
  {
    v11 = v10;
    objc_msgSend(v10, "setAllowsSelection:", 1);
    objc_msgSend(v11, "setAllowsMultipleSelection:", 1);
    objc_msgSend(v11, "setDelegate:", v0);
    objc_msgSend(v11, "setDataSource:", v0);
    objc_msgSend(v11, "setClipsToBounds:", 0);
    v12 = objc_msgSend(v11, "layer");
    objc_msgSend(v12, "setCornerCurve:", kCACornerCurveContinuous);

    v13 = objc_msgSend(v11, "layer");
    objc_msgSend(v13, "setMaskedCorners:", 1);

    v14 = (void *)objc_opt_self(UIColor);
    v40 = v11;
    v15 = objc_msgSend(v14, "clearColor");
    objc_msgSend(v40, "setBackgroundColor:", v15);

    objc_msgSend(v0, "addSubview:", v40);
    v16 = objc_msgSend(v40, "superview");
    if (v16)
    {
      v17 = v16;
      objc_msgSend(v40, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      v18 = objc_msgSend(v40, "topAnchor");
      v19 = objc_msgSend(v17, "topAnchor");
      v20 = objc_msgSend(v18, "constraintEqualToAnchor:", v19);

      objc_msgSend(v20, "setConstant:", 2.0);
      v21 = v20;
      objc_msgSend(v21, "setActive:", 1);

    }
    v22 = objc_msgSend(v40, "superview");
    if (v22)
    {
      v23 = v22;
      objc_msgSend(v40, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      v24 = objc_msgSend(v40, "leadingAnchor");
      v25 = objc_msgSend(v23, "leadingAnchor");
      v26 = objc_msgSend(v24, "constraintEqualToAnchor:", v25);

      objc_msgSend(v26, "setConstant:", 2.0);
      v27 = v26;
      objc_msgSend(v27, "setActive:", 1);

    }
    v28 = objc_msgSend(v40, "superview");
    if (v28)
    {
      v29 = v28;
      objc_msgSend(v40, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      v30 = objc_msgSend(v40, "trailingAnchor");
      v31 = objc_msgSend(v29, "trailingAnchor");
      v32 = objc_msgSend(v30, "constraintEqualToAnchor:", v31);

      objc_msgSend(v32, "setConstant:", -2.0);
      v33 = v32;
      objc_msgSend(v33, "setActive:", 1);

    }
    v34 = objc_msgSend(v40, "superview");
    if (v34)
    {
      v35 = v34;
      objc_msgSend(v40, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      v36 = objc_msgSend(v40, "bottomAnchor");
      v37 = objc_msgSend(v35, "bottomAnchor");
      v38 = objc_msgSend(v36, "constraintEqualToAnchor:", v37);

      objc_msgSend(v38, "setConstant:", -2.0);
      v39 = v38;
      objc_msgSend(v39, "setActive:", 1);

    }
    (*(void (**)(void))((swift_isaMask & *v0) + 0x1C0))();

  }
}

Swift::Void __swiftcall MOSuggestionSheetAssetGridView.invalidateGrid()()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_mosaicLayout), "invalidateLayout");
}

Swift::Void __swiftcall MOSuggestionSheetAssetGridView.reloadAll()()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x1C0))();
  v2 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0xA8))(v1);
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, "reloadData");

  }
}

Swift::Void __swiftcall MOSuggestionSheetAssetGridView.reload(index:)(Swift::Int index)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  os_log_t oslog;

  v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x150))();
  if (!v3)
    goto LABEL_7;
  v5 = v3;
  v6 = v4;
  if ((unint64_t)v3 >> 62)
  {
    v17 = v3 >= 0 ? v3 & 0xFFFFFFFFFFFFFF8 : v3;
    swift_bridgeObjectRetain(v3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v7 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v5);
  v8 = swift_bridgeObjectRelease(v6);
  if (v7 <= index)
  {
LABEL_7:
    if (serverManager._connectionProperties != (NSMutableDictionary *)-1)
      swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
    v14 = type metadata accessor for Logger(0);
    __swift_project_value_buffer(v14, (uint64_t)static MOAngelLogger.assets);
    oslog = (os_log_t)Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v15, "[MOSuggestionSheetAssetGridView] Refusing to reconfigure due to size / index mismatch", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    goto LABEL_11;
  }
  v9 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0xA8))(v8);
  if (v9)
  {
    v10 = (void *)v9;
    v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
    v12 = type metadata accessor for IndexPath(0);
    v13 = swift_allocObject(v11, ((*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80) | 7);
    *(_OWORD *)(v13 + 16) = xmmword_10019ED20;
    IndexPath.init(row:section:)(index, 0);
    oslog = (os_log_t)Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v13);
    objc_msgSend(v10, "reconfigureItemsAtIndexPaths:", oslog);

LABEL_11:
  }
}

void MOSuggestionSheetAssetGridView.reloadWith(assetViewModel:index:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t (*v12)(_BYTE *, _QWORD);
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Class isa;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  NSObject *oslog;
  char v34[24];
  _BYTE v35[32];

  v3 = v2;
  v6 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x150))();
  if (v6)
  {
    v8 = v6;
    v9 = v7;
    if ((unint64_t)v6 >> 62)
    {
      v32 = v6 >= 0 ? v6 & 0xFFFFFFFFFFFFFF8 : v6;
      swift_bridgeObjectRetain(v6);
      v10 = _CocoaArrayWrapper.endIndex.getter(v32);
      swift_bridgeObjectRelease(v8);
    }
    else
    {
      v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v9);
    if (v10 > a2)
    {
      v12 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))((swift_isaMask & *v3) + 0x160))(v35);
      if (!*v11)
        goto LABEL_13;
      v13 = v11;
      v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MOWeakReference<MOSuggestionSheetAssetViewModel>);
      v15 = swift_allocObject(v14, 24, 7);
      v16 = swift_weakInit(v15 + 16, 0);
      swift_beginAccess(v16, v34, 1, 0);
      swift_weakAssign(v15 + 16, a1);
      v17 = *v13;
      swift_retain_n(a1, 2);
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v17);
      *v13 = v17;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v17 < 0 || (v17 & 0x4000000000000000) != 0)
      {
        v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
        *v13 = v17;
      }
      if (a2 < 0)
      {
        __break(1u);
      }
      else if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)a2)
      {
        v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * a2 + 0x20);
        *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * a2 + 0x20) = v15;
        swift_release(v19);
        specialized Array._endMutation()(v20);
        swift_release_n(a1, 2, v21);
LABEL_13:
        v22 = v12(v35, 0);
        v23 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0xA8))(v22);
        if (v23)
        {
          v24 = (void *)v23;
          v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
          v26 = type metadata accessor for IndexPath(0);
          v27 = swift_allocObject(v25, ((*(unsigned __int8 *)(*(_QWORD *)(v26 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v26 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v26 - 8) + 80) | 7);
          *(_OWORD *)(v27 + 16) = xmmword_10019ED20;
          IndexPath.init(row:section:)(a2, 0);
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v27);
          objc_msgSend(v24, "reconfigureItemsAtIndexPaths:", isa);

        }
        return;
      }
      __break(1u);
      return;
    }
  }
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1)
    swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
  v29 = type metadata accessor for Logger(0);
  __swift_project_value_buffer(v29, (uint64_t)static MOAngelLogger.assets);
  oslog = Logger.logObject.getter();
  v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v30, "[MOSuggestionSheetAssetGridView] Refusing to reconfigure due to size / index mismatch", v31, 2u);
    swift_slowDealloc(v31, -1, -1);
  }

}

Swift::Void __swiftcall MOSuggestionSheetAssetGridView.updateGridLayout()()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  id v3;

  v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA8))();
  if (v1)
  {
    v3 = (id)v1;
    v2 = *(id *)((char *)v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_mosaicLayout);
    objc_msgSend(v3, "setCollectionViewLayout:", v2);

  }
}

Swift::Void __swiftcall MOSuggestionSheetAssetGridView.updateAddedVisibility()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  id v3;
  id v4;

  v1 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_addedView;
  v2 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x180);
  v3 = *(id *)((char *)v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_addedView);
  objc_msgSend(v3, "setHidden:", (v2() & 1) == 0);

  v4 = *(id *)((char *)v0 + v1);
  objc_msgSend(v0, "bounds");
  objc_msgSend(v4, "setFrame:");

}

Swift::Void __swiftcall MOSuggestionSheetAssetGridView.updateSelectedAssets()()
{
  _QWORD *v0;
  void *v1;
  id v2;

  v1 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA8))();
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, "reloadData");

  }
}

Swift::Int __swiftcall MOSuggestionSheetAssetGridView.maxAssetCount()()
{
  _QWORD *v0;
  Swift::Int result;
  uint64_t v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x150))();
  if (result)
  {
    v3 = result;
    v4 = v2;
    if (((*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x198))() & 1) != 0)
    {
      if ((unint64_t)v3 >> 62)
      {
        if (v3 >= 0)
          v7 = v3 & 0xFFFFFFFFFFFFFF8;
        else
          v7 = v3;
        swift_bridgeObjectRetain(v3);
        v5 = _CocoaArrayWrapper.endIndex.getter(v7);
        swift_bridgeObjectRelease(v3);
      }
      else
      {
        v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v4);
      if (v5 >= 13)
        return 13;
      else
        return v5;
    }
    else
    {
      swift_bridgeObjectRelease(v4);
      v6 = swift_bridgeObjectRelease(v3);
      if (((*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x120))(v6) & 1) != 0)
        return 5;
      else
        return 4;
    }
  }
  return result;
}

id MOSuggestionSheetAssetGridView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetAssetGridView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

Swift::Int __swiftcall MOSuggestionSheetAssetGridView.collectionView(_:numberOfItemsInSection:)(UICollectionView _, Swift::Int numberOfItemsInSection)
{
  _QWORD *v2;
  Swift::Int result;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  Swift::Int v9;

  result = (*(uint64_t (**)(Class, Swift::Int))((swift_isaMask & *v2) + 0x150))(_.super.super.super.super.isa, numberOfItemsInSection);
  if (result)
  {
    v5 = result;
    v6 = v4;
    if ((unint64_t)result >> 62)
    {
      if (result >= 0)
        v9 = result & 0xFFFFFFFFFFFFFF8;
      else
        v9 = result;
      swift_bridgeObjectRetain(result);
      v7 = _CocoaArrayWrapper.endIndex.getter(v9);
      swift_bridgeObjectRelease(v5);
    }
    else
    {
      v7 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v5);
    v8 = swift_bridgeObjectRelease(v6);
    result = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x1F8))(v8);
    if (result >= v7)
      return v7;
  }
  return result;
}

void MOSuggestionSheetAssetGridView.collectionView(_:didEndDisplaying:forItemAt:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  _QWORD *v4;
  void (*v5)(void);
  id v6;

  v3 = type metadata accessor for MOSuggestionSheetMosaicCell();
  v4 = (_QWORD *)swift_dynamicCastClass(a2, v3);
  if (v4)
  {
    v5 = *(void (**)(void))((swift_isaMask & *v4) + 0x170);
    v6 = a2;
    v5();

  }
}

void MOSuggestionSheetAssetGridView.collectionView(_:cellForItemAt:)(NSObject *a1, uint64_t a2)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSString v9;
  Class isa;
  _QWORD *p_isa;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  os_log_type_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  id v35;
  Class v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(void);
  uint64_t v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t (*v51)(__n128);
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t (*v65)(void);
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t *);
  uint64_t (*v75)(uint64_t *, _QWORD);
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t *, _QWORD);
  BOOL *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t (*v85)(uint64_t);
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[3];
  _QWORD v91[2];

  v3 = v2;
  v87 = (_QWORD *)type metadata accessor for IndexPath(0);
  v6 = *(v87 - 1);
  __chkstk_darwin(v87);
  v8 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  p_isa = -[NSObject dequeueReusableCellWithReuseIdentifier:forIndexPath:](a1, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v9, isa);

  v12 = type metadata accessor for MOSuggestionSheetMosaicCell();
  v13 = swift_dynamicCastClass(p_isa, v12);
  if (!v13)
    goto LABEL_64;
  v14 = (_QWORD *)v13;
  v15 = IndexPath.item.getter(v13);
  v16 = *(uint64_t (**)(void))((swift_isaMask & (uint64_t)v3->isa) + 0x150);
  v17 = v16();
  v88 = a2;
  if (!v17)
  {
    if (v15 > -2)
      return;
LABEL_8:
    v23 = ((uint64_t (*)(uint64_t))v16)(v17);
    v86 = v14;
    if (v23)
    {
      v26 = v23;
      v27 = v24;
      v85 = v25;
      v28 = IndexPath.item.getter(v23);
      v29 = v26 & 0xF8;
      if ((unint64_t)v26 >> 62)
      {
        if (v26 >= 0)
          v83 = v26 & 0xFFFFFFFFFFFFFF8;
        else
          v83 = v26;
        swift_bridgeObjectRetain(v26);
        v30 = _CocoaArrayWrapper.endIndex.getter(v83);
        swift_bridgeObjectRelease(v26);
        if ((v30 & 0x8000000000000000) != 0)
        {
          __break(1u);
          goto LABEL_56;
        }
      }
      else
      {
        v30 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if ((v28 & 0x8000000000000000) == 0 && v28 < v30)
      {
        if ((v26 & 0xC000000000000001) == 0)
        {
          v31 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v28 >= v31)
          {
            __break(1u);
            goto LABEL_58;
          }
          v32 = *(_QWORD *)(v26 + 8 * v28 + 32);
          v33 = swift_retain(v32);
          goto LABEL_16;
        }
LABEL_56:
        v32 = specialized _ArrayBuffer._getElementSlowPath(_:)(v28, v26);
LABEL_16:
        v34 = (*(uint64_t (**)(__n128))(*(_QWORD *)v32 + 96))(v33);
        swift_release(v32);
        outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v26, v27);
        if (v34)
        {
          v35 = -[NSObject collectionViewLayout](a1, "collectionViewLayout");
          v36 = IndexPath._bridgeToObjectiveC()().super.isa;
          a1 = objc_msgSend(v35, "layoutAttributesForItemAtIndexPath:", v36);

          v87 = v35;
          if (a1)
          {
            -[NSObject size](a1, "size");
            v38 = v37;
            -[NSObject size](a1, "size");
            v40 = v38 - v39;
          }
          else
          {
            v40 = 0.0;
          }
          v48 = (*(uint64_t (**)(BOOL))(*(_QWORD *)v34 + 808))(fabs(v40) < 5.0);
          v85 = *(uint64_t (**)(uint64_t))((swift_isaMask & (uint64_t)v3->isa) + 0x198);
          v49 = v85(v48);
          v50 = v86;
          (*(void (**)(_QWORD))((swift_isaMask & *v86) + 0x128))(v49 & 1);
          v51 = *(uint64_t (**)(__n128))((swift_isaMask & *v50) + 0x110);
          v52 = swift_retain(v34);
          v53 = v51(v52);
          v54 = (*(uint64_t (**)(uint64_t))((swift_isaMask & (uint64_t)v3->isa) + 0x168))(v53);
          v55 = v34;
          v56 = (*(uint64_t (**)(void))(*(_QWORD *)v34 + 512))();
          v58 = v57;
          v89 = v56;
          v90[0] = v57;
          v91[0] = 35;
          v91[1] = 0xE100000000000000;
          v59 = lazy protocol witness table accessor for type String and conformance String();
          p_isa = &v89;
          v60 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(v91, &type metadata for String, &type metadata for String, v59, v59);
          if (v60[2])
          {
            v61 = v60;
            v62 = v60[4];
            v63 = v60[5];
            swift_bridgeObjectRetain(v63);
            swift_bridgeObjectRelease(v58);
            swift_bridgeObjectRelease(v61);
            LOBYTE(v61) = specialized Set.contains(_:)(v62, v63, v54);
            swift_bridgeObjectRelease(v63);
            swift_bridgeObjectRelease(v54);
            v64 = objc_msgSend(v50, "setSelected:", v61 & 1);
            v65 = *(uint64_t (**)(void))((swift_isaMask & (uint64_t)v3->isa) + 0x120);
            if ((((uint64_t (*)(id))v65)(v64) & 1) != 0)
              v66 = 4;
            else
              v66 = 3;
            v67 = v65();
            v68 = (*(uint64_t (**)(void))((swift_isaMask & (uint64_t)v3->isa) + 0x108))();
            if (IndexPath.row.getter(v68) != v66)
              goto LABEL_42;
            v69 = 4;
            if ((v67 & 1) != 0)
              v69 = 5;
            if (v68 <= v69)
            {
LABEL_42:

              swift_release(v55);
              goto LABEL_45;
            }
            p_isa = &v3->isa;
            v70 = v65();
            v71 = (*(uint64_t (**)(void))((swift_isaMask & (uint64_t)v3->isa) + 0x108))();
            if ((v70 & 1) != 0)
            {
              v72 = v71 - 5;
              if (!__OFSUB__(v71, 5))
                goto LABEL_44;
              __break(1u);
              goto LABEL_42;
            }
            v72 = v71 - 4;
            if (!__OFSUB__(v71, 4))
            {
LABEL_44:
              v73 = v72 + 1;
              v74 = *(uint64_t (**)(uint64_t *))((swift_isaMask & *v86) + 0x148);
              v75 = (uint64_t (*)(uint64_t *, _QWORD))v74(&v89);
              *(_QWORD *)(v76 + 8) = v73;
              v77 = v75(&v89, 0);
              LOBYTE(v73) = v85(v77);
              v78 = (void (*)(uint64_t *, _QWORD))v74(&v89);
              *v79 = (v73 & 1) == 0;
              v78(&v89, 0);

              swift_release(v55);
              goto LABEL_45;
            }
          }
          else
          {
            __break(1u);
          }
          __break(1u);
LABEL_64:

          __break(1u);
          return;
        }
        goto LABEL_20;
      }
      outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v26, v27);
    }
LABEL_20:
    if (serverManager._clientConnections != (NSMutableDictionary *)-1)
      swift_once(&serverManager._clientConnections, one-time initialization function for shared);
    v41 = type metadata accessor for Logger(0);
    __swift_project_value_buffer(v41, (uint64_t)static MOAngelLogger.shared);
    v42 = v87;
    (*(void (**)(char *, uint64_t, _QWORD *))(v6 + 16))(v8, v88, v87);
    v3 = v3;
    a1 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(a1, v29))
    {

      (*(void (**)(char *, _QWORD *))(v6 + 8))(v8, v42);
      a1 = v3;
LABEL_45:

      return;
    }
    v26 = swift_slowAlloc(22, -1);
    *(_DWORD *)v26 = 134218240;
    v43 = IndexPath.item.getter(v26);
    (*(void (**)(char *, _QWORD *))(v6 + 8))(v8, v42);
    v89 = v43;
    v44 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v26 + 4);
    *(_WORD *)(v26 + 12) = 2048;
    v45 = ((uint64_t (*)(uint64_t))v16)(v44);
    if (!v45)
    {

      v47 = 0;
      goto LABEL_28;
    }
    v28 = v45;
    v16 = v46;
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v16);
    outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v28, (uint64_t)v16);
    v31 = v28 & 0xFFFFFFFFFFFFFF8;
    if (!(v28 >> 62))
    {
      v47 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);

      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v28);
LABEL_28:
      v89 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v26 + 14);

      _os_log_impl((void *)&_mh_execute_header, a1, v29, "[MOSuggestionSheetAssetGridView] index out of bounds, indexPath.item=%ld, count=%ld", (uint8_t *)v26, 0x16u);
      swift_slowDealloc(v26, -1, -1);
      goto LABEL_45;
    }
LABEL_58:
    if ((v28 & 0x8000000000000000) == 0)
      v84 = v31;
    else
      v84 = v28;
    swift_bridgeObjectRetain(v28);
    v47 = _CocoaArrayWrapper.endIndex.getter(v84);

    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease_n(v28, 2);
    goto LABEL_28;
  }
  v19 = v17;
  v20 = v18;
  if ((unint64_t)v17 >> 62)
  {
    v80 = v14;
    if (v17 >= 0)
      v81 = v17 & 0xFFFFFFFFFFFFFF8;
    else
      v81 = v17;
    swift_bridgeObjectRetain(v17);
    v82 = v81;
    v14 = v80;
    v21 = _CocoaArrayWrapper.endIndex.getter(v82);
    swift_bridgeObjectRelease(v20);
    v22 = v19;
  }
  else
  {
    v21 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v22 = v18;
  }
  swift_bridgeObjectRelease(v22);
  v17 = swift_bridgeObjectRelease(v19);
  if (v15 < v21)
    goto LABEL_8;
}

void MOSuggestionSheetAssetGridView.collectionView(_:willDisplay:forItemAt:)(void *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  Class isa;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  _QWORD v38[4];

  v3 = v2;
  v6 = *(uint64_t (**)(void))((swift_isaMask & *v2) + 0x150);
  v7 = v6();
  if (!v7)
    return;
  v10 = v7;
  v11 = v8;
  v12 = v9;
  v37 = a1;
  v13 = IndexPath.item.getter(v7);
  v14 = (void *)(v10 & 0xFFFFFFFFFFFFFF8);
  if ((unint64_t)v10 >> 62)
  {
    if (v10 >= 0)
      v35 = v10 & 0xFFFFFFFFFFFFFF8;
    else
      v35 = v10;
    swift_bridgeObjectRetain(v10);
    v15 = _CocoaArrayWrapper.endIndex.getter(v35);
    swift_bridgeObjectRelease(v10);
    if ((v15 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_27:
      v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v10);
      goto LABEL_9;
    }
  }
  else
  {
    v15 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v13 < 0 || v13 >= v15)
  {
    outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v10, v11);
    return;
  }
  if ((v10 & 0xC000000000000001) != 0)
    goto LABEL_27;
  v16 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v13 >= v16)
  {
    __break(1u);
    goto LABEL_29;
  }
  v17 = *(_QWORD *)(v10 + 8 * v13 + 32);
  v18 = swift_retain(v17);
LABEL_9:
  v14 = a2;
  v15 = (*(uint64_t (**)(__n128))(*(_QWORD *)v17 + 96))(v18);
  swift_release(v17);
  v19 = outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v10, v11);
  a2 = v37;
  if (!v15)
    return;
  v12 = IndexPath.item.getter(v19);
  v20 = v6();
  if (v20)
  {
    v13 = v20;
    v11 = v21;
    v16 = v20 & 0xFFFFFFFFFFFFFF8;
    if (!(v20 >> 62))
    {
      v22 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v23 = v21;
      goto LABEL_13;
    }
LABEL_29:
    if (v13 >= 0)
      v36 = v16;
    else
      v36 = v13;
    swift_bridgeObjectRetain(v13);
    v22 = _CocoaArrayWrapper.endIndex.getter(v36);
    swift_bridgeObjectRelease(v11);
    v23 = v13;
LABEL_13:
    swift_bridgeObjectRelease(v23);
    v20 = swift_bridgeObjectRelease(v13);
    if (v12 < v22)
      goto LABEL_14;
LABEL_21:
    swift_release(v15);
    return;
  }
  if (v12 >= -1)
    goto LABEL_21;
LABEL_14:
  v24 = (*(uint64_t (**)(unint64_t))((swift_isaMask & *v3) + 0x168))(v20);
  v25 = (*(uint64_t (**)(void))(*(_QWORD *)v15 + 512))();
  v27 = v26;
  v38[2] = v25;
  v38[3] = v26;
  v38[0] = 35;
  v38[1] = 0xE100000000000000;
  v28 = lazy protocol witness table accessor for type String and conformance String();
  v29 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(v38, &type metadata for String, &type metadata for String, v28, v28);
  if (v29[2])
  {
    v30 = v29;
    v31 = v29[4];
    v32 = v29[5];
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v30);
    v33 = specialized Set.contains(_:)(v31, v32, v24);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v24);
    if ((v33 & 1) != 0)
    {
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(a2, "selectItemAtIndexPath:animated:scrollPosition:", isa, 0, 1);

    }
    objc_msgSend(v14, "setSelected:", v33 & 1);
    swift_release(v15);
  }
  else
  {
    __break(1u);
  }
}

void MOSuggestionSheetAssetGridView.collectionView(_:didSelectItemAt:)()
{
  specialized MOSuggestionSheetAssetGridView.collectionView(_:didSelectItemAt:)();
}

void MOSuggestionSheetAssetGridView.collectionView(_:didDeselectItemAt:)()
{
  specialized MOSuggestionSheetAssetGridView.collectionView(_:didDeselectItemAt:)();
}

uint64_t @objc MOSuggestionSheetAssetGridView.collectionView(_:didSelectItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v16;

  v9 = type metadata accessor for IndexPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v13 = a3;
  v14 = a1;
  a5(v12);

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t type metadata accessor for MOSuggestionSheetAssetGridView()
{
  return objc_opt_self(_TtC16MomentsUIService30MOSuggestionSheetAssetGridView);
}

void specialized MOSuggestionSheetAssetGridView.init(coder:)()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  char *v5;
  _QWORD *v6;

  v1 = v0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_gridCollectionView] = 0;
  v2 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_addedView;
  v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MOSuggestionAddedView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v3[OBJC_IVAR____TtC16MomentsUIService21MOSuggestionAddedView_symbolOnly] = 0;
  v4 = v3;
  objc_msgSend(v4, "setClipsToBounds:", 1);
  MOSuggestionAddedView.initAddedView()();

  *(_QWORD *)&v1[v2] = v4;
  v5 = &v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_delegate];
  *((_QWORD *)v5 + 1) = 0;
  swift_unknownObjectWeakInit(v5, 0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetCount] = 0;
  v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullWidth] = 1;
  v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullHeight] = 1;
  v6 = &v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetViewModels];
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_selectedAssetIdentifiers] = &_swiftEmptySetSingleton;
  v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isBundleSelected] = 0;
  v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isInterstitial] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001A6460, "MomentsUIService/MOSuggestionSheetAssetGridView.swift", 53, 2, 81, 0);
  __break(1u);
}

void specialized MOSuggestionSheetAssetGridView.collectionView(_:didSelectItemAt:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t *, _QWORD);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t ObjectType;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  uint64_t v53;
  unint64_t v54;

  v1 = v0;
  v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x150))();
  if (!v2)
    return;
  v4 = v2;
  v5 = v3;
  v6 = IndexPath.item.getter(v2);
  if ((unint64_t)v4 >> 62)
  {
    if (v4 >= 0)
      v47 = v4 & 0xFFFFFFFFFFFFFF8;
    else
      v47 = v4;
    swift_bridgeObjectRetain(v4);
    v7 = _CocoaArrayWrapper.endIndex.getter(v47);
    swift_bridgeObjectRelease(v4);
    if ((v7 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_33:
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
      goto LABEL_9;
    }
  }
  else
  {
    v7 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((v6 & 0x8000000000000000) != 0 || v6 >= v7)
  {
    outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v4, v5);
    return;
  }
  if ((v4 & 0xC000000000000001) != 0)
    goto LABEL_33;
  if (v6 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_35:
    swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
    goto LABEL_19;
  }
  v8 = *(_QWORD *)(v4 + 8 * v6 + 32);
  v9 = swift_retain(v8);
LABEL_9:
  v7 = (*(uint64_t (**)(__n128))(*(_QWORD *)v8 + 96))(v9);
  swift_release(v8);
  v10 = outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v4, v5);
  if (!v7)
    return;
  v4 = *(_QWORD *)(*(_QWORD *)v7 + 512);
  v11 = ((uint64_t (*)(uint64_t))v4)(v10);
  if (v11 == 0x6C6F686563616C70 && v12 == 0xEB00000000726564)
  {
    swift_release(v7);
    swift_bridgeObjectRelease(0xEB00000000726564);
    return;
  }
  v14 = v12;
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, 0x6C6F686563616C70, 0xEB00000000726564, 0);
  swift_bridgeObjectRelease(v14);
  if ((v15 & 1) != 0)
  {
    swift_release(v7);
    return;
  }
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1)
    goto LABEL_35;
LABEL_19:
  v16 = type metadata accessor for Logger(0);
  __swift_project_value_buffer(v16, (uint64_t)static MOAngelLogger.assets);
  v17 = swift_retain_n(v7, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v49 = v19;
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = swift_slowAlloc(32, -1);
    v50 = v48;
    *(_DWORD *)v20 = 136315138;
    v21 = ((uint64_t (*)(void))v4)();
    v23 = v22;
    v51 = v21;
    v52[0] = v22;
    v53 = 35;
    v54 = 0xE100000000000000;
    v24 = lazy protocol witness table accessor for type String and conformance String();
    v25 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v53, &type metadata for String, &type metadata for String, v24, v24);
    if (!v25[2])
    {
LABEL_37:
      __break(1u);
      return;
    }
    v26 = v25;
    v28 = v25[4];
    v27 = v25[5];
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v26);
    v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v20 + 4);
    swift_release_n(v7, 2, v29);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v18, v49, "[MOSuggestionSheetAssetGridView] selecting %s", v20, 0xCu);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    v30 = swift_release_n(v7, 2, v31);
  }
  v32 = ((uint64_t (*)(uint64_t))v4)(v30);
  v34 = v33;
  v51 = v32;
  v52[0] = v33;
  v53 = 35;
  v54 = 0xE100000000000000;
  v35 = lazy protocol witness table accessor for type String and conformance String();
  v36 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v53, &type metadata for String, &type metadata for String, v35, v35);
  if (!v36[2])
  {
    __break(1u);
    goto LABEL_37;
  }
  v37 = v36;
  v38 = v36[4];
  v39 = v36[5];
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v37);
  v40 = (uint64_t (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))((swift_isaMask & *v1) + 0x178))(&v51);
  specialized Set._Variant.insert(_:)(&v53, v38, v39);
  swift_bridgeObjectRelease(v54);
  v41 = v40(&v51, 0);
  v42 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0xF0))(v41);
  v44 = v42;
  if (v42)
  {
    v45 = v43;
    ObjectType = swift_getObjectType(v42);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(ObjectType, v45);
    swift_unknownObjectRelease(v44);
  }
  swift_release(v7);
}

void specialized MOSuggestionSheetAssetGridView.collectionView(_:didDeselectItemAt:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t *, _QWORD);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ObjectType;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  uint64_t v49;
  unint64_t v50;

  v1 = v0;
  v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x150))();
  if (!v2)
    return;
  v4 = v2;
  v5 = v3;
  v6 = IndexPath.item.getter(v2);
  if ((unint64_t)v4 >> 62)
  {
    if (v4 >= 0)
      v43 = v4 & 0xFFFFFFFFFFFFFF8;
    else
      v43 = v4;
    swift_bridgeObjectRetain(v4);
    v7 = _CocoaArrayWrapper.endIndex.getter(v43);
    swift_bridgeObjectRelease(v4);
    if ((v7 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_26:
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
      goto LABEL_9;
    }
  }
  else
  {
    v7 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((v6 & 0x8000000000000000) != 0 || v6 >= v7)
  {
    outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v4, v5);
    return;
  }
  if ((v4 & 0xC000000000000001) != 0)
    goto LABEL_26;
  if (v6 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_28:
    swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(v4 + 8 * v6 + 32);
  v9 = swift_retain(v8);
LABEL_9:
  v7 = (*(uint64_t (**)(__n128))(*(_QWORD *)v8 + 96))(v9);
  swift_release(v8);
  outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v4, v5);
  if (!v7)
    return;
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1)
    goto LABEL_28;
LABEL_11:
  v10 = type metadata accessor for Logger(0);
  __swift_project_value_buffer(v10, (uint64_t)static MOAngelLogger.assets);
  v11 = swift_retain_n(v7, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v45 = v13;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    v46 = v44;
    *(_DWORD *)v14 = 136315138;
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)v7 + 512))();
    v17 = v16;
    v47 = v15;
    v48[0] = v16;
    v49 = 35;
    v50 = 0xE100000000000000;
    v18 = lazy protocol witness table accessor for type String and conformance String();
    v19 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v49, &type metadata for String, &type metadata for String, v18, v18);
    if (!v19[2])
    {
LABEL_30:
      __break(1u);
      return;
    }
    v20 = v19;
    v22 = v19[4];
    v21 = v19[5];
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v20);
    v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v14 + 4);
    swift_release_n(v7, 2, v23);
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v12, v45, "[MOSuggestionSheetAssetGridView] un-selecting %s", v14, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    v24 = swift_release_n(v7, 2, v25);
  }
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 512))(v24);
  v28 = v27;
  v47 = v26;
  v48[0] = v27;
  v49 = 35;
  v50 = 0xE100000000000000;
  v29 = lazy protocol witness table accessor for type String and conformance String();
  v30 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v49, &type metadata for String, &type metadata for String, v29, v29);
  if (!v30[2])
  {
    __break(1u);
    goto LABEL_30;
  }
  v31 = v30;
  v32 = v30[4];
  v33 = v30[5];
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v31);
  v34 = (uint64_t (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))((swift_isaMask & *v1) + 0x178))(&v47);
  specialized Set._Variant.remove(_:)(v32, v33);
  v36 = v35;
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v36);
  v37 = v34(&v47, 0);
  v38 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0xF0))(v37);
  v40 = v38;
  if (v38)
  {
    v41 = v39;
    ObjectType = swift_getObjectType(v38);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(ObjectType, v41);
    swift_unknownObjectRelease(v40);
  }
  swift_release(v7);
}

uint64_t sub_1000335C8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xA8))();
  *a2 = result;
  return result;
}

uint64_t sub_100033608(id *a1, _QWORD **a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))((swift_isaMask & **a2) + 0xB0);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_100033654@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xF0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100033694(_QWORD *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = a1[1];
  v3 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0xF8);
  v4 = swift_unknownObjectRetain(*a1);
  return v3(v4, v2);
}

uint64_t sub_1000336E4@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x108))();
  *a2 = result;
  return result;
}

uint64_t sub_100033724(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((swift_isaMask & **a2) + 0x110))(*a1);
}

uint64_t sub_100033760@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x120))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000337A4(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((swift_isaMask & **a2) + 0x128))(*a1);
}

uint64_t sub_1000337E0@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x138))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_100033824(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((swift_isaMask & **a2) + 0x140))(*a1);
}

uint64_t sub_100033860@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x150))();
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t sub_1000338A4(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & **a2) + 0x158);
  outlined copy of MOWeakArray<MOSuggestionSheetAssetViewModel>?(*a1, v3);
  return v5(v2, v3, v4);
}

uint64_t sub_100033910@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x168))();
  *a2 = result;
  return result;
}

uint64_t sub_100033950(_QWORD *a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x170);
  v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t sub_100033990@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x180))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000339D4(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((swift_isaMask & **a2) + 0x188))(*a1);
}

uint64_t sub_100033A10@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x198))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_100033A54(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((swift_isaMask & **a2) + 0x1A0))(*a1);
}

uint64_t outlined destroy of weak MOSuggestionSheetInterstitialGridInteractionsDelegate?(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

void one-time initialization function for font()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;

  v0 = (void *)objc_opt_self(UIFont);
  v1 = objc_msgSend(v0, "preferredFontForTextStyle:", UIFontTextStyleBody);
  v2 = objc_msgSend(v1, "fontDescriptor");
  v3 = objc_msgSend(v2, "fontDescriptorWithSymbolicTraits:", 2);

  if (v3)
  {
    v4 = objc_msgSend(v0, "fontWithDescriptor:size:", v3, 0.0);

    static MOSuggestionSheetOverflowView.font = (uint64_t)v4;
  }
  else
  {
    __break(1u);
  }
}

{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;

  v0 = (void *)objc_opt_self(UIFont);
  v1 = objc_msgSend(v0, "preferredFontForTextStyle:", UIFontTextStyleCallout);
  v2 = objc_msgSend(v1, "fontDescriptor");
  v3 = objc_msgSend(v2, "fontDescriptorWithSymbolicTraits:", 2);

  if (v3)
  {
    v4 = objc_msgSend(v0, "fontWithDescriptor:size:", v3, 0.0);

    static MOSuggestionAddedView.font = (uint64_t)v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t *MOSuggestionSheetOverflowView.font.unsafeMutableAddressor()
{
  if (one-time initialization token for font != -1)
    swift_once(&one-time initialization token for font, one-time initialization function for font);
  return &static MOSuggestionSheetOverflowView.font;
}

id static MOSuggestionSheetOverflowView.font.getter()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for font, (id *)&static MOSuggestionSheetOverflowView.font);
}

void one-time initialization function for config()
{
  void *v0;
  void *v1;
  id v2;
  id v3;

  if (one-time initialization token for font != -1)
    swift_once(&one-time initialization token for font, one-time initialization function for font);
  v0 = (void *)static MOSuggestionSheetOverflowView.font;
  v1 = (void *)objc_opt_self(UIImageSymbolConfiguration);
  v2 = v0;
  v3 = objc_msgSend(v1, "configurationWithFont:scale:", v2, 1);

  static MOSuggestionSheetOverflowView.config = (uint64_t)v3;
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;

  if (one-time initialization token for font != -1)
    swift_once(&one-time initialization token for font, one-time initialization function for font);
  v0 = (void *)static MOSuggestionAddedView.font;
  v1 = (void *)objc_opt_self(UIImageSymbolConfiguration);
  v2 = v0;
  v3 = objc_msgSend(v1, "configurationWithFont:", v2);

  static MOSuggestionAddedView.config = (uint64_t)v3;
}

uint64_t *MOSuggestionSheetOverflowView.config.unsafeMutableAddressor()
{
  if (one-time initialization token for config != -1)
    swift_once(&one-time initialization token for config, one-time initialization function for config);
  return &static MOSuggestionSheetOverflowView.config;
}

id static MOSuggestionSheetOverflowView.config.getter()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for config, (id *)&static MOSuggestionSheetOverflowView.config);
}

const char *MOSuggestionSheetOverflowView.systemSymbol.unsafeMutableAddressor()
{
  return "plus";
}

uint64_t static MOSuggestionSheetOverflowView.systemSymbol.getter()
{
  return 1937075312;
}

void one-time initialization function for symbolColor()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemBackgroundColor");
  v1 = objc_msgSend(v0, "colorWithAlphaComponent:", 0.5);

  static MOSuggestionSheetOverflowView.symbolColor = (uint64_t)v1;
}

uint64_t *MOSuggestionSheetOverflowView.symbolColor.unsafeMutableAddressor()
{
  if (one-time initialization token for symbolColor != -1)
    swift_once(&one-time initialization token for symbolColor, one-time initialization function for symbolColor);
  return &static MOSuggestionSheetOverflowView.symbolColor;
}

id static MOSuggestionSheetOverflowView.symbolColor.getter()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for symbolColor, (id *)&static MOSuggestionSheetOverflowView.symbolColor);
}

id one-time initialization function for numberColor()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIColor), "systemWhiteColor");
  static MOSuggestionSheetOverflowView.numberColor = (uint64_t)result;
  return result;
}

uint64_t *MOSuggestionSheetOverflowView.numberColor.unsafeMutableAddressor()
{
  if (one-time initialization token for numberColor != -1)
    swift_once(&one-time initialization token for numberColor, one-time initialization function for numberColor);
  return &static MOSuggestionSheetOverflowView.numberColor;
}

id static MOSuggestionSheetOverflowView.numberColor.getter()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for numberColor, (id *)&static MOSuggestionSheetOverflowView.numberColor);
}

id MOSuggestionSheetOverflowView.blurEffectView.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_blurEffectView);
}

void MOSuggestionSheetOverflowView.overflowCount.didset()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  _BYTE v15[24];
  Swift::String v16;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCountLabel);
  v2 = (void *)objc_opt_self(NSBundle);
  v3 = v1;
  v4 = objc_msgSend(v2, "mainBundle");
  v16._object = (void *)0x80000001001A6CB0;
  v5._countAndFlagsBits = 25637;
  v5._object = (void *)0xE200000000000000;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v16._countAndFlagsBits = 0xD000000000000014;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v16);

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10019ED20;
  v10 = (uint64_t *)(v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCount);
  swift_beginAccess(v10, v15, 0, 0);
  v11 = *v10;
  *(_QWORD *)(v9 + 56) = &type metadata for Int;
  *(_QWORD *)(v9 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v9 + 32) = v11;
  static String.localizedStringWithFormat(_:_:)(v7._countAndFlagsBits, v7._object, v9);
  v13 = v12;
  swift_bridgeObjectRelease(v7._object);
  swift_bridgeObjectRelease(v9);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  objc_msgSend(v3, "setText:", v14);

}

uint64_t MOSuggestionSheetOverflowView.overflowCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCount;
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCount, v3, 0, 0);
  return *(_QWORD *)v1;
}

void MOSuggestionSheetOverflowView.overflowCount.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE v4[24];

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCount);
  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCount, v4, 1, 0);
  *v3 = a1;
  MOSuggestionSheetOverflowView.overflowCount.didset();
}

void (*MOSuggestionSheetOverflowView.overflowCount.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCount, a1, 33, 0);
  return MOSuggestionSheetOverflowView.overflowCount.modify;
}

void MOSuggestionSheetOverflowView.overflowCount.modify(uint64_t a1, char a2)
{
  swift_endAccess(a1);
  if ((a2 & 1) == 0)
    MOSuggestionSheetOverflowView.overflowCount.didset();
}

char *MOSuggestionSheetOverflowView.__allocating_init(overflowCount:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v4;
  void *v5;
  id v6;
  NSString v7;

  v4 = (char *)objc_msgSend(objc_allocWithZone(v2), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v5 = *(void **)&v4[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCountLabel];
  v6 = v5;
  if (a2)
  {
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v7 = 0;
  }
  objc_msgSend(v5, "setText:", v7);

  return v4;
}

id MOSuggestionSheetOverflowView.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  id v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  objc_super v16;

  v9 = OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_blurEffectView;
  v10 = objc_allocWithZone((Class)UIVisualEffectView);
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, "init");
  *(_QWORD *)&v11[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCount] = 0;
  v12 = OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCountLabel;
  v13 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  if (one-time initialization token for numberColor != -1)
    swift_once(&one-time initialization token for numberColor, one-time initialization function for numberColor);
  objc_msgSend(v13, "setTextColor:", static MOSuggestionSheetOverflowView.numberColor);
  if (one-time initialization token for font != -1)
    swift_once(&one-time initialization token for font, one-time initialization function for font);
  objc_msgSend(v13, "setFont:", static MOSuggestionSheetOverflowView.font);
  objc_msgSend(v13, "setAdjustsFontForContentSizeCategory:", 1);
  *(_QWORD *)&v11[v12] = v13;

  v16.receiver = v11;
  v16.super_class = (Class)type metadata accessor for MOSuggestionSheetOverflowView();
  v14 = objc_msgSendSuper2(&v16, "initWithFrame:", a1, a2, a3, a4);
  MOSuggestionSheetOverflowView.initOverflowView()();

  return v14;
}

uint64_t type metadata accessor for MOSuggestionSheetOverflowView()
{
  return objc_opt_self(_TtC16MomentsUIService29MOSuggestionSheetOverflowView);
}

void MOSuggestionSheetOverflowView.initOverflowView()()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  _QWORD *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  NSString v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_blurEffectView];
  v3 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "_effectWithBlurRadius:scale:", 10.0, 1.0);
  objc_msgSend(v2, "setEffect:", v3);

  v4 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  v5 = objc_msgSend(v4, "colorWithAlphaComponent:", 0.2);

  objc_msgSend(v2, "setBackgroundColor:", v5);
  objc_msgSend(v1, "addSubview:", v2);
  v6 = UIView.fillSuper(margin:)(0.0);
  swift_bridgeObjectRelease(v6);
  v7 = objc_msgSend(v2, "layer");
  objc_msgSend(v7, "setCornerRadius:", 7.0);

  objc_msgSend(v2, "setClipsToBounds:", 1);
  v8 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
  objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v8, "setAxis:", 0);
  objc_msgSend(v8, "setDistribution:", 2);
  objc_msgSend(v8, "setAlignment:", 3);
  objc_msgSend(v1, "addSubview:", v8);
  v9 = objc_msgSend(v8, "superview");
  if (v9)
  {
    v10 = v9;
    objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v11 = objc_msgSend(v8, "centerXAnchor");
    v12 = objc_msgSend(v10, "centerXAnchor");
    v13 = objc_msgSend(v11, "constraintEqualToAnchor:", v12);

    objc_msgSend(v13, "setConstant:", 0.0);
    v14 = v13;
    objc_msgSend(v14, "setActive:", 1);

  }
  v15 = objc_msgSend(v8, "superview");
  if (v15)
  {
    v16 = v15;
    objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v17 = objc_msgSend(v8, "centerYAnchor");
    v18 = objc_msgSend(v16, "centerYAnchor");
    v19 = objc_msgSend(v17, "constraintEqualToAnchor:", v18);

    objc_msgSend(v19, "setConstant:", 0.0);
    v20 = v19;
    objc_msgSend(v20, "setActive:", 1);

  }
  v29 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  if (one-time initialization token for config != -1)
    swift_once(&one-time initialization token for config, one-time initialization function for config);
  v21 = (id)static MOSuggestionSheetOverflowView.config;
  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v22, v21);

  objc_msgSend(v29, "setImage:", v23);
  if (one-time initialization token for symbolColor != -1)
    swift_once(&one-time initialization token for symbolColor, one-time initialization function for symbolColor);
  objc_msgSend(v29, "setTintColor:", static MOSuggestionSheetOverflowView.symbolColor);
  objc_msgSend(v29, "setOverrideUserInterfaceStyle:", 1);
  objc_msgSend(v29, "setMaximumContentSizeCategory:", UIContentSizeCategoryAccessibilityMedium);
  objc_msgSend(v8, "addArrangedSubview:", v29);
  v24 = OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCountLabel;
  v25 = one-time initialization token for numberColor;
  v26 = *(id *)&v1[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCountLabel];
  if (v25 != -1)
    swift_once(&one-time initialization token for numberColor, one-time initialization function for numberColor);
  objc_msgSend(v26, "setTextColor:", static MOSuggestionSheetOverflowView.numberColor);

  v27 = one-time initialization token for font;
  v28 = *(id *)&v1[v24];
  if (v27 != -1)
    swift_once(&one-time initialization token for font, one-time initialization function for font);
  objc_msgSend(v28, "setFont:", static MOSuggestionSheetOverflowView.font);

  objc_msgSend(*(id *)&v1[v24], "setMaximumContentSizeCategory:", UIContentSizeCategoryAccessibilityMedium);
  objc_msgSend(v8, "addArrangedSubview:", *(_QWORD *)&v1[v24]);

}

id MOSuggestionSheetOverflowView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetOverflowView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void specialized MOSuggestionSheetOverflowView.init(coder:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_blurEffectView;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "init");
  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCount] = 0;
  v2 = OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCountLabel;
  v3 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  if (one-time initialization token for numberColor != -1)
    swift_once(&one-time initialization token for numberColor, one-time initialization function for numberColor);
  objc_msgSend(v3, "setTextColor:", static MOSuggestionSheetOverflowView.numberColor);
  if (one-time initialization token for font != -1)
    swift_once(&one-time initialization token for font, one-time initialization function for font);
  objc_msgSend(v3, "setFont:", static MOSuggestionSheetOverflowView.font);
  objc_msgSend(v3, "setAdjustsFontForContentSizeCategory:", 1);
  *(_QWORD *)&v0[v2] = v3;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001A6460, "MomentsUIService/MOSuggestionOverflowView.swift", 47, 2, 43, 0);
  __break(1u);
}

uint64_t sub_100034A7C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x68))();
  *a2 = result;
  return result;
}

uint64_t sub_100034ABC(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((swift_isaMask & **a2) + 0x70))(*a1);
}

BOOL static MOSuggestionCollectionViewInteractionState.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void MOSuggestionCollectionViewInteractionState.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int MOSuggestionCollectionViewInteractionState.hashValue.getter(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AssetViewMode(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void *MOSuggestionSheetInterstitialViewConstants.SIDE_MARGIN.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetInterstitialViewConstants.SIDE_MARGIN;
}

void *MOSuggestionSheetInterstitialViewConstants.BUTTON_SIDE_MARGIN_LANDSCAPE.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetInterstitialViewConstants.BUTTON_SIDE_MARGIN_LANDSCAPE;
}

double static MOSuggestionSheetInterstitialViewConstants.BUTTON_SIDE_MARGIN_LANDSCAPE.getter()
{
  return 200.0;
}

void one-time initialization function for BUTTON_BOTTOM_MARGIN_LANDSCAPE()
{
  static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_LANDSCAPE = 0x4010000000000000;
}

uint64_t *MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_LANDSCAPE.unsafeMutableAddressor()
{
  if (one-time initialization token for BUTTON_BOTTOM_MARGIN_LANDSCAPE != -1)
    swift_once(&one-time initialization token for BUTTON_BOTTOM_MARGIN_LANDSCAPE, one-time initialization function for BUTTON_BOTTOM_MARGIN_LANDSCAPE);
  return &static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_LANDSCAPE;
}

double static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_LANDSCAPE.getter()
{
  return static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_LANDSCAPE.getter(&one-time initialization token for BUTTON_BOTTOM_MARGIN_LANDSCAPE, (uint64_t)&static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_LANDSCAPE);
}

void one-time initialization function for BUTTON_BOTTOM_MARGIN_PORTRAIT()
{
  static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_PORTRAIT = 0x404C000000000000;
}

uint64_t *MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_PORTRAIT.unsafeMutableAddressor()
{
  if (one-time initialization token for BUTTON_BOTTOM_MARGIN_PORTRAIT != -1)
    swift_once(&one-time initialization token for BUTTON_BOTTOM_MARGIN_PORTRAIT, one-time initialization function for BUTTON_BOTTOM_MARGIN_PORTRAIT);
  return &static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_PORTRAIT;
}

double static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_PORTRAIT.getter()
{
  return static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_LANDSCAPE.getter(&one-time initialization token for BUTTON_BOTTOM_MARGIN_PORTRAIT, (uint64_t)&static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_PORTRAIT);
}

double static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_LANDSCAPE.getter(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(double *)a2;
}

void *MOSuggestionSheetInterstitialViewConstants.LIST_SIDE_MARGIN_LANDSCAPE.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetInterstitialViewConstants.LIST_SIDE_MARGIN_LANDSCAPE;
}

double static MOSuggestionSheetInterstitialViewConstants.LIST_SIDE_MARGIN_LANDSCAPE.getter()
{
  return 104.0;
}

void *MOSuggestionSheetInterstitialViewConstants.SIDE_MARGIN_PHOTO_MEMORY_BANNER.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetInterstitialViewConstants.SIDE_MARGIN_PHOTO_MEMORY_BANNER;
}

double static MOSuggestionInterstitialExpandableListViewCellConstants.ASSET_PLATTER_EDGE_LENGTH.getter()
{
  return 40.0;
}

void *MOSuggestionSheetInterstitialViewConstants.SECONDARY_BUTTON_BOTTOM_MARGIN.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetInterstitialViewConstants.SECONDARY_BUTTON_BOTTOM_MARGIN;
}

double static MOSuggestionSheetInterstitialViewConstants.SECONDARY_BUTTON_BOTTOM_MARGIN.getter()
{
  return 34.0;
}

void *MOSuggestionSheetInterstitialViewConstants.SECONDARY_BUTTON_JOURNAL_BUTTON_MARGIN.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetInterstitialViewConstants.SECONDARY_BUTTON_JOURNAL_BUTTON_MARGIN;
}

double static MOSuggestionInterstitialListAssetViewConstants.INSET_MARGIN.getter()
{
  return 5.0;
}

uint64_t MOSuggestionSheetInterstitialView.controller.getter()
{
  return MOSuggestionSheetInterstitialView.controller.getter(&OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_controller, (uint64_t (*)(uint64_t))&_swift_unknownObjectWeakLoadStrong);
}

void MOSuggestionSheetInterstitialView.controller.setter(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v4[24];

  v3 = v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_controller;
  swift_beginAccess(v3, v4, 1, 0);
  swift_unknownObjectWeakAssign(v3, a1);

}

void (*MOSuggestionSheetInterstitialView.controller.modify(_QWORD *a1))(id **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_controller;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  v3[3] = swift_unknownObjectWeakLoadStrong(v5);
  return MOSuggestionSheetInterstitialView.controller.modify;
}

void MOSuggestionSheetInterstitialView.controller.modify(id **a1, char a2)
{
  id *v3;
  id v4;

  v3 = *a1;
  v4 = (*a1)[3];
  swift_unknownObjectWeakAssign((char *)(*a1)[5] + (_QWORD)(*a1)[4], v4);
  if ((a2 & 1) != 0)
  {

    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);

  }
  free(v3);
}

uint64_t MOSuggestionSheetInterstitialView.presentationDelegate.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_presentationDelegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_presentationDelegate, v3, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t MOSuggestionSheetInterstitialView.presentationDelegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  v5 = v2 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_presentationDelegate;
  swift_beginAccess(v5, v7, 1, 0);
  *(_QWORD *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1);
}

void (*MOSuggestionSheetInterstitialView.presentationDelegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_presentationDelegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return MOSuggestionSheetAssetGridView.delegate.modify;
}

uint64_t MOSuggestionSheetInterstitialView.cellViewModel.getter()
{
  return MOSuggestionSheetInterstitialView.controller.getter(&OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_cellViewModel, (uint64_t (*)(uint64_t))&_swift_weakLoadStrong);
}

uint64_t MOSuggestionSheetInterstitialView.controller.getter(_QWORD *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  _BYTE v6[24];

  v4 = v2 + *a1;
  swift_beginAccess(v4, v6, 0, 0);
  return a2(v4);
}

uint64_t MOSuggestionSheetInterstitialView.cellViewModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_cellViewModel;
  swift_beginAccess(v3, v5, 1, 0);
  swift_weakAssign(v3, a1);
  return swift_release(a1);
}

void (*MOSuggestionSheetInterstitialView.cellViewModel.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_cellViewModel;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  v3[3] = swift_weakLoadStrong(v5);
  return MOSuggestionSheetInterstitialView.cellViewModel.modify;
}

void MOSuggestionSheetInterstitialView.cellViewModel.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  swift_weakAssign(*(_QWORD *)(*(_QWORD *)a1 + 32) + *(_QWORD *)(*(_QWORD *)a1 + 40), v4);
  if ((a2 & 1) != 0)
  {
    swift_release(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_release(v4);
  }
  free(v3);
}

uint64_t MOSuggestionSheetInterstitialView.toggleListViewCarouselModeAccessibilityLabel.getter()
{
  uint64_t v0;
  char v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  Swift::String v5;
  unint64_t v6;
  uint64_t countAndFlagsBits;
  unint64_t v9;

  v1 = *(_BYTE *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode);
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v9 = 0x80000001001A70A0;
  if ((v1 & 1) != 0)
  {
    v3 = 0x6C6573756F726143;
    v4 = 0xED00007765695620;
  }
  else
  {
    v3 = 0x656956207473694CLL;
    v4 = 0xE900000000000077;
  }
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = 0xD00000000000004ELL;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v3, (Swift::String_optional)0, (NSBundle)v2, v5, *(Swift::String *)(&v9 - 1))._countAndFlagsBits;

  return countAndFlagsBits;
}

void closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.titleLabel()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "setAdjustsFontForContentSizeCategory:", 1);
  objc_msgSend(v0, "setNumberOfLines:", 0);
  v1 = (void *)objc_opt_self(UIFont);
  v2 = objc_msgSend(v1, "preferredFontForTextStyle:", UIFontTextStyleTitle2);
  v3 = objc_msgSend(v2, "fontDescriptor");
  v4 = objc_msgSend(v3, "fontDescriptorWithSymbolicTraits:", 2);

  if (v4)
  {
    v5 = objc_msgSend(v1, "fontWithDescriptor:size:", v4, 0.0);

    objc_msgSend(v0, "setFont:", v5);
    objc_msgSend(v0, "setTextAlignment:", 1);
  }
  else
  {
    __break(1u);
  }
}

id closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.dateLabel()
{
  id v0;
  id v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "setAdjustsFontForContentSizeCategory:", 1);
  objc_msgSend(v0, "setLineBreakMode:", 4);
  v1 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleTitle3);
  objc_msgSend(v0, "setFont:", v1);

  objc_msgSend(v0, "setNumberOfLines:", 0);
  objc_msgSend(v0, "setTextAlignment:", 1);
  return v0;
}

id closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.assetTypeLabel()
{
  id v0;
  id v1;
  id v2;
  id v3;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "setAdjustsFontForContentSizeCategory:", 1);
  objc_msgSend(v0, "setNumberOfLines:", 0);
  v1 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
  objc_msgSend(v0, "setFont:", v1);

  v2 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  v3 = objc_msgSend(v2, "colorWithAlphaComponent:", 0.67);

  objc_msgSend(v0, "setTextColor:", v3);
  objc_msgSend(v0, "setTextAlignment:", 1);
  return v0;
}

id closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.emptySelectionLabel()
{
  id v0;
  id v1;
  id v2;
  id v3;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "setAdjustsFontForContentSizeCategory:", 1);
  objc_msgSend(v0, "setNumberOfLines:", 0);
  v1 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
  objc_msgSend(v0, "setFont:", v1);

  v2 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  v3 = objc_msgSend(v2, "colorWithAlphaComponent:", 0.67);

  objc_msgSend(v0, "setTextColor:", v3);
  objc_msgSend(v0, "setTextAlignment:", 1);
  objc_msgSend(v0, "setHidden:", 1);
  objc_msgSend(v0, "setMaximumContentSizeCategory:", UIContentSizeCategoryAccessibilityMedium);
  return v0;
}

void one-time initialization function for SELECT_AT_LEAST_ONE_TEXT()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v4._countAndFlagsBits = 0xD000000000000049;
  v4._object = (void *)0x80000001001A7390;
  v1._object = (void *)0x80000001001A7360;
  v1._countAndFlagsBits = 0xD00000000000002ELL;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  static MOSuggestionSheetInterstitialView.SELECT_AT_LEAST_ONE_TEXT = (__int128)v3;
}

__int128 *MOSuggestionSheetInterstitialView.SELECT_AT_LEAST_ONE_TEXT.unsafeMutableAddressor()
{
  if (one-time initialization token for SELECT_AT_LEAST_ONE_TEXT != -1)
    swift_once(&one-time initialization token for SELECT_AT_LEAST_ONE_TEXT, one-time initialization function for SELECT_AT_LEAST_ONE_TEXT);
  return &static MOSuggestionSheetInterstitialView.SELECT_AT_LEAST_ONE_TEXT;
}

uint64_t static MOSuggestionSheetInterstitialView.SELECT_AT_LEAST_ONE_TEXT.getter()
{
  uint64_t v0;

  if (one-time initialization token for SELECT_AT_LEAST_ONE_TEXT != -1)
    swift_once(&one-time initialization token for SELECT_AT_LEAST_ONE_TEXT, one-time initialization function for SELECT_AT_LEAST_ONE_TEXT);
  v0 = static MOSuggestionSheetInterstitialView.SELECT_AT_LEAST_ONE_TEXT;
  swift_bridgeObjectRetain(*((_QWORD *)&static MOSuggestionSheetInterstitialView.SELECT_AT_LEAST_ONE_TEXT + 1));
  return v0;
}

void *MOSuggestionSheetInterstitialView.EMPTY_TEXT.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetInterstitialView.EMPTY_TEXT;
}

char *MOSuggestionSheetInterstitialView.__allocating_init(controller:cellViewModel:presentationDelegate:selectedSuggestion:indexPath:fromNotification:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  objc_class *v8;
  id v17;
  char *v18;

  v17 = objc_allocWithZone(v8);
  v18 = specialized MOSuggestionSheetInterstitialView.init(controller:cellViewModel:presentationDelegate:selectedSuggestion:indexPath:fromNotification:)(a1, a2, a3, a4, a5, a6, a7, a8);

  swift_release(a2);
  swift_unknownObjectRelease(a3);
  swift_release(a6);
  return v18;
}

char *MOSuggestionSheetInterstitialView.init(controller:cellViewModel:presentationDelegate:selectedSuggestion:indexPath:fromNotification:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  char *v12;

  v12 = specialized MOSuggestionSheetInterstitialView.init(controller:cellViewModel:presentationDelegate:selectedSuggestion:indexPath:fromNotification:)(a1, a2, a3, a4, a5, a6, a7, a8);

  swift_release(a2);
  swift_unknownObjectRelease(a3);
  swift_release(a6);
  return v12;
}

void MOSuggestionSheetInterstitialView.viewWillTransition(to:with:)(void *a1, double a2, double a3)
{
  void *v3;
  BOOL v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[5];
  uint64_t v13;
  objc_super v14;

  v7 = specialized static MOAngelRootViewController.isLandscape.getter();
  v8 = *(double *)&static MOAngelRootViewController.LANDSCAPE_WIDTH;
  if (!v7)
    v8 = a2;
  objc_msgSend(v3, "setPreferredContentSize:", v8, a3);
  v14.receiver = v3;
  v14.super_class = (Class)type metadata accessor for MOSuggestionSheetInterstitialView(0);
  objc_msgSendSuper2(&v14, "viewWillTransitionToSize:withTransitionCoordinator:", a1, a2, a3);
  v9 = swift_allocObject(&unk_1001E5318, 24, 7);
  swift_unknownObjectWeakInit(v9 + 16);
  v10 = swift_allocObject(&unk_1001E5340, 40, 7);
  *(_QWORD *)(v10 + 16) = v9;
  *(double *)(v10 + 24) = a2;
  *(double *)(v10 + 32) = a3;
  v12[4] = partial apply for closure #1 in MOSuggestionSheetInterstitialView.viewWillTransition(to:with:);
  v13 = v10;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  v12[3] = &block_descriptor_1;
  v11 = _Block_copy(v12);
  objc_msgSend(a1, "animateAlongsideTransition:completion:", 0, v11, swift_release(v13).n128_f64[0]);
  _Block_release(v11);
}

void closure #1 in MOSuggestionSheetInterstitialView.viewWillTransition(to:with:)(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t Strong;
  char *v8;
  uint64_t v9;
  id v10;
  BOOL v11;
  double v12;
  id v13;
  _BYTE v14[24];

  v6 = a4 + 16;
  swift_beginAccess(a4 + 16, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v6);
  if (Strong)
  {
    v8 = (char *)Strong;
    MOSuggestionSheetInterstitialView.updateConstraints()();
    v9 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
    v10 = *(id *)&v8[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView];
    MOSuggestionInterstitialCarouselView.updateLayout()();

    v11 = specialized static MOAngelRootViewController.isLandscape.getter();
    v12 = *(double *)&static MOAngelRootViewController.LANDSCAPE_WIDTH;
    if (!v11)
      v12 = a1;
    objc_msgSend(v8, "setPreferredContentSize:", v12, a2);
    MOSuggestionSheetInterstitialView.updateConstraints()();
    v13 = *(id *)&v8[v9];
    MOSuggestionInterstitialCarouselView.updateLayout()();

  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

id MOSuggestionSheetInterstitialView.updateConstraints()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;

  v1 = v0;
  if (specialized static MOAngelRootViewController.isLandscape.getter())
  {
    if (serverManager._clientConnections != (NSMutableDictionary *)-1)
      swift_once(&serverManager._clientConnections, one-time initialization function for shared);
    v2 = type metadata accessor for Logger(0);
    v3 = __swift_project_value_buffer(v2, (uint64_t)static MOAngelLogger.shared);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "handling landscape", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    MOSuggestionSheetInterstitialView.handleLandscapeLayout()();
  }
  else
  {
    if (serverManager._clientConnections != (NSMutableDictionary *)-1)
      swift_once(&serverManager._clientConnections, one-time initialization function for shared);
    v7 = type metadata accessor for Logger(0);
    v8 = __swift_project_value_buffer(v7, (uint64_t)static MOAngelLogger.shared);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "handling portrait", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    MOSuggestionSheetInterstitialView.handlePortraitLayout()();
  }
  v12 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView), "setNeedsLayout");
  return objc_msgSend(*(id *)(v1 + v12), "layoutIfNeeded");
}

void MOSuggestionSheetInterstitialView.handlePortraitLayout()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  Swift::String v23;
  unint64_t v24;
  void *object;
  NSString v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  Class isa;
  uint64_t v33;
  Class v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = v0;
  v2 = type metadata accessor for UIButton.Configuration.Size(0);
  v48 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v47 - v10;
  v12 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x1C8))(v9);
  if (v12)
  {
    v13 = v12;
    v14 = objc_msgSend(v0, "navigationItem");
    v15 = *(id *)(v13 + 16);
    v16 = (uint64_t)MOEventBundle._orderedAssetReferences()();
    if (v16)
    {
      v17 = v16;
      v18 = v2;
      if ((unint64_t)v16 >> 62)
      {
        if (v16 >= 0)
          v16 &= 0xFFFFFFFFFFFFFF8uLL;
        v19 = _CocoaArrayWrapper.endIndex.getter(v16);
      }
      else
      {
        v19 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }

      swift_bridgeObjectRelease(v17);
      if (v19 == 1)
      {
        v20 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v46 = 0x80000001001A6D40;
        v21 = 0x49207463656C6553;
        v22 = 0xEB000000006D6574;
LABEL_9:
        v23._countAndFlagsBits = 0;
        v23._object = (void *)0xE000000000000000;
        v24 = 0xD00000000000002DLL;
        object = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v21, (Swift::String_optional)0, (NSBundle)v20, v23, *(Swift::String *)(&v46 + -8))._object;

        v26 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(object);
        objc_msgSend(v14, "setTitle:", v26);
        swift_release(v13);

        v2 = v18;
        goto LABEL_10;
      }
    }
    else
    {
      v18 = v2;

    }
    v20 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v46 = 0x80000001001A6D10;
    v21 = 0x49207463656C6553;
    v22 = 0xEC000000736D6574;
    goto LABEL_9;
  }
LABEL_10:
  v27 = *(void **)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_navigationBar);
  objc_msgSend(v27, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v28 = objc_msgSend(v27, "heightAnchor");
  v29 = objc_msgSend(v28, "constraintEqualToConstant:", 50.0);

  objc_msgSend(v29, "setActive:", 1);
  v30 = (void *)objc_opt_self(NSLayoutConstraint);
  v31 = *(_QWORD *)((char *)v1
                  + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_landscapeConstraints);
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint, NSLayoutConstraint_ptr);
  swift_bridgeObjectRetain(v31);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v31);
  objc_msgSend(v30, "deactivateConstraints:", isa);

  v33 = *(_QWORD *)((char *)v1
                  + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_portraitConstraints);
  swift_bridgeObjectRetain(v33);
  v34 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v33);
  objc_msgSend(v30, "activateConstraints:", v34);

  v35 = *(void **)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_stackView);
  objc_msgSend(v35, "setCustomSpacing:afterView:", *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleLabel), 10.0);
  v36 = *(void **)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_labelStackView);
  objc_msgSend(v35, "setCustomSpacing:afterView:", v36, 20.0);
  objc_msgSend(*(id *)((char *)v1+ OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonLeadingConstraint), "setConstant:", 20.0);
  v37 = *(void **)((char *)v1
                 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonTrailingConstraint);
  if (v37)
    objc_msgSend(v37, "setConstant:", -20.0);
  objc_msgSend(v36, "setAxis:", 1);
  objc_msgSend(v36, "setAlignment:", 3);
  v38 = objc_msgSend(v36, "setCustomSpacing:afterView:", *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_dateLabel), 0.0);
  v39 = (_QWORD *)(*(uint64_t (**)(id))((swift_isaMask & *v1) + 0x138))(v38);
  if (v39)
  {
    v40 = v39;
    if (((*(uint64_t (**)(void))((swift_isaMask & *v39) + 0x1B0))() & 1) != 0
      || ((*(uint64_t (**)(void))((swift_isaMask & *v40) + 0x1C0))() & 1) != 0)
    {
      v41 = *(void **)((char *)v1
                     + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonBottomConstraint);
      if (v41)
      {
        v42 = one-time initialization token for BUTTON_BOTTOM_MARGIN_PORTRAIT;
        v43 = v41;
        if (v42 != -1)
          swift_once(&one-time initialization token for BUTTON_BOTTOM_MARGIN_PORTRAIT, one-time initialization function for BUTTON_BOTTOM_MARGIN_PORTRAIT);
        objc_msgSend(v43, "setConstant:", -*(double *)&static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_PORTRAIT);

      }
    }

  }
  v44 = objc_retain(*(id *)((char *)v1
                          + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButton));
  UIButton.configuration.getter();
  v45 = type metadata accessor for UIButton.Configuration(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v11, 1, v45))
  {
    outlined init with copy of UIButton.Configuration?((uint64_t)v11, (uint64_t)v8);
    UIButton.configuration.setter(v8);

    outlined destroy of UIButton.Configuration?((uint64_t)v11);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v4, enum case for UIButton.Configuration.Size.large(_:), v2);
    UIButton.Configuration.buttonSize.setter(v4);
    UIButton.configuration.setter(v11);

  }
}

void MOSuggestionSheetInterstitialView.handleLandscapeLayout()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  NSString v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  Class isa;
  uint64_t v20;
  Class v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;

  v1 = v0;
  v2 = type metadata accessor for UIButton.Configuration.Size(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v34 - v10;
  v12 = objc_msgSend(v0, "navigationItem");
  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v12, "setTitle:", v13);

  v14 = *(void **)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_navigationBar);
  objc_msgSend(v14, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v15 = objc_msgSend(v14, "heightAnchor");
  v16 = objc_msgSend(v15, "constraintEqualToConstant:", 40.0);

  objc_msgSend(v16, "setActive:", 1);
  v17 = (void *)objc_opt_self(NSLayoutConstraint);
  v18 = *(_QWORD *)((char *)v1
                  + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_portraitConstraints);
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint, NSLayoutConstraint_ptr);
  swift_bridgeObjectRetain(v18);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  objc_msgSend(v17, "deactivateConstraints:", isa);

  v20 = *(_QWORD *)((char *)v1
                  + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_landscapeConstraints);
  swift_bridgeObjectRetain(v20);
  v21 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v20);
  objc_msgSend(v17, "activateConstraints:", v21);

  v22 = *(void **)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_stackView);
  objc_msgSend(v22, "setCustomSpacing:afterView:", *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleLabel), 0.0);
  v23 = *(void **)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_labelStackView);
  objc_msgSend(v22, "setCustomSpacing:afterView:", v23, 10.0);
  v24 = *(void **)((char *)v1
                 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonLeadingConstraint);
  if (v24)
    objc_msgSend(v24, "setConstant:", 200.0);
  v25 = *(void **)((char *)v1
                 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonTrailingConstraint);
  if (v25)
    objc_msgSend(v25, "setConstant:", -200.0);
  objc_msgSend(v23, "setAxis:", 1);
  objc_msgSend(v23, "setAlignment:", 3);
  v26 = objc_msgSend(v23, "setCustomSpacing:afterView:", *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_dateLabel), 2.0);
  v27 = (_QWORD *)(*(uint64_t (**)(id))((swift_isaMask & *v1) + 0x138))(v26);
  if (v27)
  {
    v28 = v27;
    if (((*(uint64_t (**)(void))((swift_isaMask & *v27) + 0x1B0))() & 1) != 0
      || ((*(uint64_t (**)(void))((swift_isaMask & *v28) + 0x1C0))() & 1) != 0)
    {
      v29 = *(void **)((char *)v1
                     + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonBottomConstraint);
      if (v29)
      {
        v30 = one-time initialization token for BUTTON_BOTTOM_MARGIN_LANDSCAPE;
        v31 = v29;
        if (v30 != -1)
          swift_once(&one-time initialization token for BUTTON_BOTTOM_MARGIN_LANDSCAPE, one-time initialization function for BUTTON_BOTTOM_MARGIN_LANDSCAPE);
        objc_msgSend(v31, "setConstant:", -*(double *)&static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_LANDSCAPE);

      }
    }

  }
  v32 = objc_retain(*(id *)((char *)v1
                          + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButton));
  UIButton.configuration.getter();
  v33 = type metadata accessor for UIButton.Configuration(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v11, 1, v33))
  {
    outlined init with copy of UIButton.Configuration?((uint64_t)v11, (uint64_t)v9);
    UIButton.configuration.setter(v9);

    outlined destroy of UIButton.Configuration?((uint64_t)v11);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for UIButton.Configuration.Size.medium(_:), v2);
    UIButton.Configuration.buttonSize.setter(v5);
    UIButton.configuration.setter(v11);

  }
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.setupViews()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  id *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  char **v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  Swift::String v20;
  unint64_t v21;
  void *object;
  id v23;
  NSString v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  id v31;
  void *v32;
  void *v33;
  char **v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  char **v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  id v57;
  void *v58;
  id v59;
  void *v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  void *v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  void *v76;
  char **v77;
  id v78;
  id v79;
  uint64_t v80;
  void *v81;
  id v82;
  id v83;
  void *v84;
  id v85;
  id v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  id v118;
  void *v119;
  id v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  id v144;
  id v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  id v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  id v160;
  id v161;
  void *v162;
  id v163;
  id v164;
  id v165;
  char **v166;
  void *v167;
  id v168;
  id v169;
  void *v170;
  id v171;
  id v172;
  id v173;
  id v174;
  void *v175;
  id v176;
  id v177;
  id v178;
  id v179;
  id v180;
  void *v181;
  id v182;
  id v183;
  id v184;
  id v185;
  uint64_t *v186;
  id v187;
  id v188;
  id v189;
  char **v190;
  id v191;
  id v192;
  void *v193;
  id v194;
  id v195;
  id v196;
  void *v197;
  id v198;
  id v199;
  id v200;
  id v201;
  id v202;
  void *v203;
  id v204;
  id v205;
  id v206;
  id v207;
  id v208;
  id v209;
  id v210;
  void *v211;
  id v212;
  id v213;
  id v214;
  char **v215;
  char **v216;
  id v217;
  id v218;
  void *v219;
  id v220;
  id v221;
  id v222;
  id v223;
  id v224;
  uint64_t v225;
  void *v226;
  id v227;
  void *v228;
  id v229;
  id v230;
  id v231;
  id v232;
  id v233;
  void *v234;
  id v235;
  id v236;
  id v237;
  id v238;
  id v239;
  void *v240;
  id v241;
  id v242;
  id v243;
  id v244;
  uint64_t v245;
  id v246;
  id v247;
  void *v248;
  id v249;
  id v250;
  id v251;
  id v252;
  void *v253;
  id v254;
  id v255;
  id v256;
  id v257;
  void *v258;
  id v259;
  id v260;
  id v261;
  id v262;
  id v263;
  id v264;
  id v265;
  id v266;
  id v267;
  id v268;
  id v269;
  id v270;
  id v271;
  id v272;
  id v273;
  id v274;
  id v275;
  id v276;
  id v277;
  id v278;
  id v279;
  id v280;
  id v281;
  uint64_t v282;
  Class isa;
  id v284;
  void *v285;
  unint64_t v286;
  id v287;
  id v288;
  id *v289;
  id v290;
  uint64_t v291;
  _QWORD *v292;
  id v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  id v297;
  id v298;
  void *v299;
  uint64_t v300;
  void *v301;
  id v302;

  v1 = v0;
  v2 = (*(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v0) + 0x1C8))();
  if (v2)
  {
    v3 = (id *)v2;
    v4 = (*(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v0) + 0x138))();
    if (!v4)
    {
      swift_release(v3);
      return;
    }
    v292 = (_QWORD *)v4;
    v5 = *(void **)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_navigationBar];
    v6 = (void *)objc_opt_self(UIColor);
    v7 = objc_msgSend(v6, "systemBackgroundColor");
    objc_msgSend(v5, "setBarTintColor:", v7);

    v8 = objc_msgSend(v6, "systemBackgroundColor");
    objc_msgSend(v5, "setBackgroundColor:", v8);

    objc_msgSend(v5, "setTranslucent:", 0);
    v9 = objc_msgSend(objc_allocWithZone((Class)UIImage), "init");
    objc_msgSend(v5, "setShadowImage:", v9);

    objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v10 = &selRef_genericAvatarFor_pointSize_completion_;
    v11 = objc_msgSend(v0, "view");
    if (!v11)
    {
      __break(1u);
      goto LABEL_76;
    }
    v12 = v11;
    v298 = v5;
    objc_msgSend(v11, "addSubview:", v5);

    v13 = v3[2];
    v14 = (uint64_t)MOEventBundle._orderedAssetReferences()();
    v288 = v6;
    if (v14)
    {
      v15 = v14;
      if ((unint64_t)v14 >> 62)
      {
        if (v14 >= 0)
          v14 &= 0xFFFFFFFFFFFFFF8uLL;
        v16 = _CocoaArrayWrapper.endIndex.getter(v14);
      }
      else
      {
        v16 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }

      swift_bridgeObjectRelease(v15);
      if (v16 == 1)
      {
        v17 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v286 = 0x80000001001A6D40;
        v18 = 0x49207463656C6553;
        v19 = 0xEB000000006D6574;
        goto LABEL_13;
      }
    }
    else
    {

    }
    v17 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v286 = 0x80000001001A6D10;
    v18 = 0x49207463656C6553;
    v19 = 0xEC000000736D6574;
LABEL_13:
    v20._countAndFlagsBits = 0;
    v20._object = (void *)0xE000000000000000;
    v21 = 0xD00000000000002DLL;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v18, (Swift::String_optional)0, (NSBundle)v17, v20, *(Swift::String *)(&v286 + -8))._object;

    v23 = objc_msgSend(v1, "navigationItem");
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    objc_msgSend(v23, "setTitle:", v24);

    MOSuggestionSheetInterstitialView.setNavBar()();
    v25 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleLabel];
    objc_msgSend(v25, "setUserInteractionEnabled:", 1);
    v287 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v1, "handleLabelEditTap:");
    v26 = objc_msgSend(v25, "addGestureRecognizer:");
    v27 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_dateLabel];
    v289 = v3;
    (*((void (**)(id))*v3 + 56))(v26);
    v29 = v28;
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v29);
    v299 = v27;
    objc_msgSend(v27, "setText:", v30);

    v31 = objc_msgSend(v1, "view");
    if (v31)
    {
      v32 = v31;
      v33 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_scrollView];
      v34 = &selRef_genericAvatarFor_pointSize_completion_;
      objc_msgSend(v31, "addSubview:", v33);

      v35 = objc_msgSend(v33, "superview");
      if (v35)
      {
        v36 = v35;
        objc_msgSend(v33, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v37 = objc_msgSend(v33, "leadingAnchor");
        v38 = objc_msgSend(v36, "leadingAnchor");
        v39 = objc_msgSend(v37, "constraintEqualToAnchor:", v38);

        objc_msgSend(v39, "setConstant:", 0.0);
        v40 = v39;
        v10 = &selRef_genericAvatarFor_pointSize_completion_;
        v41 = v40;
        objc_msgSend(v40, "setActive:", 1);

        v34 = &selRef_genericAvatarFor_pointSize_completion_;
      }
      v42 = objc_msgSend(v33, "superview");
      if (v42)
      {
        v43 = v42;
        objc_msgSend(v33, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v44 = objc_msgSend(v33, "trailingAnchor");
        v45 = objc_msgSend(v43, "trailingAnchor");
        v46 = objc_msgSend(v44, "constraintEqualToAnchor:", v45);

        objc_msgSend(v46, "setConstant:", 0.0);
        v47 = v46;
        v10 = &selRef_genericAvatarFor_pointSize_completion_;
        v48 = v47;
        objc_msgSend(v47, "setActive:", 1);

        v34 = &selRef_genericAvatarFor_pointSize_completion_;
      }
      v49 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_stackView];
      v297 = v33;
      objc_msgSend(v33, v34[118], v49);
      v50 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_labelStackView];
      objc_msgSend(v50, "addArrangedSubview:", v299);
      v51 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetTypeLabel];
      objc_msgSend(v50, "addArrangedSubview:", v51);
      objc_msgSend(v49, "addArrangedSubview:", v25);
      objc_msgSend(v49, "addArrangedSubview:", v50);
      v52 = v34;
      v53 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView;
      objc_msgSend(v49, "addArrangedSubview:", *(_QWORD *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView]);
      v300 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
      objc_msgSend(v49, "addArrangedSubview:", *(_QWORD *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView]);
      v296 = v53;
      objc_msgSend(*(id *)&v1[v53], "setHidden:", 1);
      v54 = objc_msgSend(v1, v10[174]);
      if (v54)
      {
        v55 = v54;
        v56 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButton;
        objc_msgSend(v54, v52[118], *(_QWORD *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButton]);

        v57 = objc_msgSend(v1, v10[174]);
        if (v57)
        {
          v58 = v57;
          v294 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_quickAddButton;
          objc_msgSend(v57, v52[118], *(_QWORD *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_quickAddButton]);

          v59 = objc_msgSend(v1, v10[174]);
          if (v59)
          {
            v60 = v59;
            v293 = *(id *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_emptySelectionLabel];
            objc_msgSend(v59, v52[118]);

            v61 = objc_msgSend(v25, "superview");
            v295 = v56;
            if (v61)
            {
              v62 = v61;
              objc_msgSend(v25, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
              v63 = objc_msgSend(v25, "leadingAnchor");
              v64 = objc_msgSend(v62, "leadingAnchor");
              v65 = objc_msgSend(v63, "constraintEqualToAnchor:", v64);

              v10 = &selRef_genericAvatarFor_pointSize_completion_;
              v56 = v295;
              objc_msgSend(v65, "setConstant:", 24.0);
              v66 = v65;
              objc_msgSend(v66, "setActive:", 1);

            }
            v67 = objc_msgSend(v25, "superview");
            if (v67)
            {
              v68 = v67;
              objc_msgSend(v25, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
              v69 = objc_msgSend(v25, "trailingAnchor");
              v70 = objc_msgSend(v68, "trailingAnchor");
              v71 = objc_msgSend(v69, "constraintEqualToAnchor:", v70);

              objc_msgSend(v71, "setConstant:", -16.0);
              v72 = v71;
              v10 = &selRef_genericAvatarFor_pointSize_completion_;
              v73 = v72;
              objc_msgSend(v72, "setActive:", 1);

            }
            v74 = objc_msgSend(*(id *)&v1[v56], "leadingAnchor");
            v75 = objc_msgSend(v1, v10[174]);
            if (v75)
            {
              v76 = v75;
              v77 = v10;
              v290 = v50;
              v78 = objc_msgSend(v75, "leadingAnchor");

              v79 = objc_msgSend(v74, "constraintEqualToAnchor:constant:", v78, 20.0);
              v80 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonLeadingConstraint;
              v81 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonLeadingConstraint];
              *(_QWORD *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonLeadingConstraint] = v79;

              v82 = objc_msgSend(*(id *)&v1[v56], "trailingAnchor");
              v83 = objc_msgSend(v1, v77[174]);
              if (v83)
              {
                v84 = v83;
                v85 = objc_msgSend(v83, "trailingAnchor");

                v86 = objc_msgSend(v82, "constraintEqualToAnchor:constant:", v85, -20.0);
                v87 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonTrailingConstraint;
                v88 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonTrailingConstraint];
                *(_QWORD *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonTrailingConstraint] = v86;

                objc_msgSend(*(id *)&v1[v80], "setActive:", 1);
                objc_msgSend(*(id *)&v1[v87], "setActive:", 1);
                v291 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
                v89 = swift_allocObject(v291, 96, 7);
                *(_OWORD *)(v89 + 16) = xmmword_10019F0A0;
                v90 = objc_msgSend(*(id *)&v1[v300], "heightAnchor");
                v91 = objc_msgSend(*(id *)&v1[v300], "widthAnchor");
                v92 = objc_msgSend(v90, "constraintEqualToAnchor:", v91);

                *(_QWORD *)(v89 + 32) = v92;
                v93 = objc_msgSend(*(id *)&v1[v296], "leadingAnchor");
                v94 = objc_msgSend(v49, "leadingAnchor");
                v95 = objc_msgSend(v93, "constraintEqualToAnchor:constant:", v94, 20.0);

                *(_QWORD *)(v89 + 40) = v95;
                v96 = objc_msgSend(*(id *)&v1[v296], "trailingAnchor");
                v97 = objc_msgSend(v49, "trailingAnchor");
                v98 = objc_msgSend(v96, "constraintEqualToAnchor:constant:", v97, -20.0);

                *(_QWORD *)(v89 + 48) = v98;
                v99 = objc_msgSend(v297, "topAnchor");
                v100 = objc_msgSend(v298, "bottomAnchor");
                v101 = objc_msgSend(v99, "constraintEqualToAnchor:constant:", v100, 20.0);

                *(_QWORD *)(v89 + 56) = v101;
                v102 = objc_msgSend(v49, "topAnchor");
                v103 = objc_msgSend(v297, "topAnchor");
                v104 = objc_msgSend(v102, "constraintEqualToAnchor:constant:", v103, 8.0);

                *(_QWORD *)(v89 + 64) = v104;
                v105 = objc_msgSend(v299, "topAnchor");
                v106 = objc_msgSend(v50, "topAnchor");
                v107 = objc_msgSend(v105, "constraintEqualToAnchor:", v106);

                *(_QWORD *)(v89 + 72) = v107;
                v108 = objc_msgSend(v299, "bottomAnchor");
                v109 = objc_msgSend(v51, "topAnchor");
                v110 = objc_msgSend(v108, "constraintEqualToAnchor:constant:", v109, -10.0);

                *(_QWORD *)(v89 + 80) = v110;
                v111 = objc_msgSend(v51, "bottomAnchor");
                v112 = objc_msgSend(v50, "bottomAnchor");
                v113 = objc_msgSend(v111, "constraintEqualToAnchor:", v112);

                *(_QWORD *)(v89 + 88) = v113;
                specialized Array._endMutation()(v114);
                v115 = *(_QWORD *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_portraitConstraints];
                *(_QWORD *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_portraitConstraints] = v89;
                swift_bridgeObjectRelease(v115);
                v116 = swift_allocObject(v291, 136, 7);
                *(_OWORD *)(v116 + 16) = xmmword_10019F0B0;
                v117 = objc_msgSend(*(id *)&v1[v300], "heightAnchor");
                v118 = objc_msgSend(v1, "view");
                if (v118)
                {
                  v119 = v118;
                  v120 = objc_msgSend(v118, "heightAnchor");

                  v121 = objc_msgSend(v117, "constraintEqualToAnchor:multiplier:", v120, 0.5);
                  *(_QWORD *)(v116 + 32) = v121;
                  v122 = objc_msgSend(*(id *)&v1[v296], "leadingAnchor");
                  v123 = objc_msgSend(v49, "leadingAnchor");
                  v124 = objc_msgSend(v122, "constraintEqualToAnchor:constant:", v123, 104.0);

                  *(_QWORD *)(v116 + 40) = v124;
                  v125 = objc_msgSend(*(id *)&v1[v296], "trailingAnchor");
                  v126 = objc_msgSend(v49, "trailingAnchor");
                  v127 = objc_msgSend(v125, "constraintEqualToAnchor:constant:", v126, -104.0);

                  *(_QWORD *)(v116 + 48) = v127;
                  v128 = objc_msgSend(v297, "topAnchor");
                  v129 = objc_msgSend(v298, "bottomAnchor");
                  v130 = objc_msgSend(v128, "constraintEqualToAnchor:", v129);

                  *(_QWORD *)(v116 + 56) = v130;
                  v131 = objc_msgSend(v49, "topAnchor");
                  v132 = objc_msgSend(v297, "topAnchor");
                  v133 = objc_msgSend(v131, "constraintEqualToAnchor:", v132);

                  *(_QWORD *)(v116 + 64) = v133;
                  v134 = objc_msgSend(v299, "leadingAnchor");
                  v135 = objc_msgSend(v50, "leadingAnchor");
                  v136 = objc_msgSend(v134, "constraintEqualToAnchor:", v135);

                  *(_QWORD *)(v116 + 72) = v136;
                  v137 = objc_msgSend(v299, "trailingAnchor");
                  v138 = objc_msgSend(v50, "trailingAnchor");
                  v139 = objc_msgSend(v137, "constraintEqualToAnchor:", v138);

                  *(_QWORD *)(v116 + 80) = v139;
                  v140 = objc_msgSend(v51, "leadingAnchor");
                  v141 = objc_msgSend(v50, "leadingAnchor");
                  v142 = objc_msgSend(v140, "constraintEqualToAnchor:", v141);

                  *(_QWORD *)(v116 + 88) = v142;
                  v143 = objc_msgSend(v50, "leadingAnchor");
                  v144 = objc_msgSend(v49, "leadingAnchor");
                  v145 = objc_msgSend(v143, "constraintGreaterThanOrEqualToAnchor:", v144);

                  *(_QWORD *)(v116 + 96) = v145;
                  v146 = objc_msgSend(v50, "trailingAnchor");
                  v147 = objc_msgSend(v49, "trailingAnchor");
                  v148 = objc_msgSend(v146, "constraintLessThanOrEqualToAnchor:", v147);

                  *(_QWORD *)(v116 + 104) = v148;
                  v149 = objc_msgSend(v299, "leadingAnchor");
                  v150 = objc_msgSend(v50, "leadingAnchor");
                  v151 = objc_msgSend(v149, "constraintGreaterThanOrEqualToAnchor:", v150);

                  *(_QWORD *)(v116 + 112) = v151;
                  v152 = objc_msgSend(v51, "trailingAnchor");
                  v153 = objc_msgSend(v290, "trailingAnchor");
                  v154 = objc_msgSend(v152, "constraintLessThanOrEqualToAnchor:", v153);

                  *(_QWORD *)(v116 + 120) = v154;
                  v155 = objc_msgSend(v290, "centerXAnchor");
                  v156 = objc_msgSend(v49, "centerXAnchor");
                  v157 = objc_msgSend(v155, "constraintEqualToAnchor:", v156);

                  *(_QWORD *)(v116 + 128) = v157;
                  specialized Array._endMutation()(v158);
                  v159 = *(_QWORD *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_landscapeConstraints];
                  *(_QWORD *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_landscapeConstraints] = v116;
                  swift_bridgeObjectRelease(v159);
                  v160 = *(id *)&v1[v300];
                  v161 = objc_msgSend(v160, "superview");
                  if (v161)
                  {
                    v162 = v161;
                    objc_msgSend(v160, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
                    v163 = objc_msgSend(v160, "leadingAnchor");
                    v164 = objc_msgSend(v162, "leadingAnchor");
                    v165 = objc_msgSend(v163, "constraintEqualToAnchor:", v164);

                    v166 = &selRef_genericAvatarFor_pointSize_completion_;
                    objc_msgSend(v165, "setConstant:", 0.0);
                    if (v165)
                    {
                      v165 = v165;
                      objc_msgSend(v165, "setActive:", 1);

                      v160 = v165;
                    }
                    v167 = v293;

                  }
                  else
                  {
                    v165 = 0;
                    v162 = v160;
                    v167 = v293;
                    v166 = &selRef_genericAvatarFor_pointSize_completion_;
                  }

                  v168 = *(id *)&v1[v300];
                  v169 = objc_msgSend(v168, "superview");
                  if (v169)
                  {
                    v170 = v169;
                    objc_msgSend(v168, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
                    v171 = objc_msgSend(v168, "trailingAnchor");
                    v172 = objc_msgSend(v170, "trailingAnchor");
                    v173 = objc_msgSend(v171, "constraintEqualToAnchor:", v172);

                    objc_msgSend(v173, "setConstant:", 0.0);
                    if (v173)
                    {
                      v173 = v173;
                      objc_msgSend(v173, "setActive:", 1);

                      v168 = v173;
                    }
                    v167 = v293;

                  }
                  else
                  {
                    v173 = 0;
                    v170 = v168;
                  }

                  v174 = objc_msgSend(v167, "superview");
                  if (v174)
                  {
                    v175 = v174;
                    objc_msgSend(v167, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
                    v176 = objc_msgSend(v167, "leadingAnchor");
                    v177 = objc_msgSend(v175, "leadingAnchor");
                    v178 = objc_msgSend(v176, "constraintEqualToAnchor:", v177);

                    objc_msgSend(v178, "setConstant:", 20.0);
                    v179 = v178;
                    objc_msgSend(v179, "setActive:", 1);

                  }
                  v180 = objc_msgSend(v167, "superview");
                  if (v180)
                  {
                    v181 = v180;
                    objc_msgSend(v167, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
                    v182 = objc_msgSend(v167, "trailingAnchor");
                    v183 = objc_msgSend(v181, "trailingAnchor");
                    v184 = objc_msgSend(v182, "constraintEqualToAnchor:", v183);

                    objc_msgSend(v184, "setConstant:", -20.0);
                    v185 = v184;
                    objc_msgSend(v185, "setActive:", 1);

                  }
                  v186 = &one-time initialization token for shared;
                  if (((*(uint64_t (**)(void))((swift_isaMask & *v292) + 0x1B0))() & 1) != 0
                    || ((*(uint64_t (**)(void))((swift_isaMask & *v292) + 0x1C0))() & 1) != 0)
                  {
                    v187 = *(id *)&v1[v294];
                    objc_msgSend(v187, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
                    v188 = objc_msgSend(v187, "heightAnchor");
                    v189 = objc_msgSend(v188, "constraintEqualToConstant:", 0.0);

                    v190 = &selRef_genericAvatarFor_pointSize_completion_;
                    objc_msgSend(v189, "setActive:", 1);

                    objc_msgSend(*(id *)&v1[v294], "setHidden:", 1);
                    v191 = objc_msgSend(*(id *)&v1[v295], "bottomAnchor");
                    v192 = objc_msgSend(v1, "view");
                    if (!v192)
                    {
LABEL_87:
                      __break(1u);
                      return;
                    }
                    v193 = v192;
                    v194 = objc_msgSend(v192, "safeAreaLayoutGuide");

                    v195 = objc_msgSend(v194, "bottomAnchor");
                    v196 = objc_msgSend(v191, "constraintEqualToAnchor:constant:", v195, -4.0);

                  }
                  else
                  {
                    v197 = *(void **)&v1[v295];
                    v198 = *(id *)&v1[v294];
                    v199 = v197;
                    objc_msgSend(v198, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
                    v200 = objc_msgSend(v198, "leadingAnchor");
                    v201 = objc_msgSend(v199, "leadingAnchor");
                    v202 = objc_msgSend(v200, "constraintEqualToAnchor:constant:", v201, 0.0);

                    objc_msgSend(v202, "setActive:", 1);
                    v203 = *(void **)&v1[v295];
                    v204 = *(id *)&v1[v294];
                    v205 = v203;
                    objc_msgSend(v204, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
                    v206 = objc_msgSend(v204, "trailingAnchor");
                    v207 = objc_msgSend(v205, "trailingAnchor");
                    v208 = objc_msgSend(v206, "constraintEqualToAnchor:constant:", v207, 0.0);

                    objc_msgSend(v208, "setActive:", 1);
                    v209 = *(id *)&v1[v294];
                    v210 = objc_msgSend(v209, "superview");
                    if (v210)
                    {
                      v211 = v210;
                      objc_msgSend(v209, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
                      v212 = objc_msgSend(v209, "centerXAnchor");
                      v213 = objc_msgSend(v211, "centerXAnchor");
                      v214 = objc_msgSend(v212, "constraintEqualToAnchor:", v213);

                      v166 = &selRef_genericAvatarFor_pointSize_completion_;
                      objc_msgSend(v214, "setConstant:", 0.0);
                      if (v214)
                      {
                        v214 = v214;
                        v190 = &selRef_genericAvatarFor_pointSize_completion_;
                        objc_msgSend(v214, "setActive:", 1);

                        v209 = v214;
                      }
                      else
                      {
                        v190 = &selRef_genericAvatarFor_pointSize_completion_;
                      }
                      v215 = &selRef_genericAvatarFor_pointSize_completion_;
                      v216 = &selRef_genericAvatarFor_pointSize_completion_;

                    }
                    else
                    {
                      v214 = 0;
                      v211 = v209;
                      v190 = &selRef_genericAvatarFor_pointSize_completion_;
                      v166 = &selRef_genericAvatarFor_pointSize_completion_;
                      v215 = &selRef_genericAvatarFor_pointSize_completion_;
                      v216 = &selRef_genericAvatarFor_pointSize_completion_;
                    }

                    v217 = *(id *)&v1[v294];
                    v218 = objc_msgSend(v217, "superview");
                    if (v218)
                    {
                      v219 = v218;
                      objc_msgSend(v217, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
                      v220 = objc_msgSend(v217, v216[99]);
                      v221 = objc_msgSend(v219, v216[99]);
                      v222 = objc_msgSend(v220, "constraintEqualToAnchor:", v221);

                      if (v222)
                      {
                        objc_msgSend(v222, v166[102], -34.0);
                        v222 = v222;
                        v190 = &selRef_genericAvatarFor_pointSize_completion_;
                        objc_msgSend(v222, "setActive:", 1);

                        v217 = v222;
                      }
                      else
                      {
                        v190 = &selRef_genericAvatarFor_pointSize_completion_;
                      }
                      v215 = &selRef_genericAvatarFor_pointSize_completion_;

                    }
                    else
                    {
                      v222 = 0;
                      v219 = v217;
                    }

                    v223 = objc_msgSend(*(id *)&v1[v295], v216[99]);
                    v224 = objc_msgSend(*(id *)&v1[v294], v215[98]);
                    v196 = objc_msgSend(v223, "constraintEqualToAnchor:constant:", v224, -5.0);

                    v186 = &one-time initialization token for shared;
                  }
                  v225 = v186[466];
                  v226 = *(void **)&v1[v225];
                  *(_QWORD *)&v1[v225] = v196;

                  objc_msgSend(*(id *)&v1[v186[466]], v190[93], 1);
                  v227 = objc_msgSend(v49, "superview");
                  if (v227)
                  {
                    v228 = v227;
                    objc_msgSend(v49, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
                    v229 = objc_msgSend(v49, "leadingAnchor");
                    v230 = objc_msgSend(v228, "leadingAnchor");
                    v231 = objc_msgSend(v229, "constraintEqualToAnchor:", v230);

                    objc_msgSend(v231, v166[102], 0.0);
                    v232 = v231;
                    objc_msgSend(v232, v190[93], 1);

                  }
                  v233 = objc_msgSend(v49, "superview");
                  if (v233)
                  {
                    v234 = v233;
                    objc_msgSend(v49, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
                    v235 = objc_msgSend(v49, "trailingAnchor");
                    v236 = objc_msgSend(v234, "trailingAnchor");
                    v237 = objc_msgSend(v235, "constraintEqualToAnchor:", v236);

                    objc_msgSend(v237, "setConstant:", 0.0);
                    v238 = v237;
                    objc_msgSend(v238, "setActive:", 1);

                  }
                  v239 = objc_msgSend(v49, "superview");
                  if (v239)
                  {
                    v240 = v239;
                    objc_msgSend(v49, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
                    v241 = objc_msgSend(v49, "bottomAnchor");
                    v242 = objc_msgSend(v240, "bottomAnchor");
                    v243 = objc_msgSend(v241, "constraintEqualToAnchor:", v242);

                    if (v243)
                    {
                      objc_msgSend(v243, "setConstant:", -0.0);
                      v244 = v243;
                      objc_msgSend(v244, "setActive:", 1);

                    }
                  }
                  v245 = swift_allocObject(v291, 112, 7);
                  *(_OWORD *)(v245 + 16) = xmmword_10019F0C0;
                  v246 = objc_msgSend(v298, "leadingAnchor");
                  v247 = objc_msgSend(v1, "view");
                  if (v247)
                  {
                    v248 = v247;
                    v249 = objc_msgSend(v247, "leadingAnchor");

                    v250 = objc_msgSend(v246, "constraintEqualToAnchor:", v249);
                    *(_QWORD *)(v245 + 32) = v250;
                    v251 = objc_msgSend(v298, "trailingAnchor");
                    v252 = objc_msgSend(v1, "view");
                    if (v252)
                    {
                      v253 = v252;
                      v254 = objc_msgSend(v252, "trailingAnchor");

                      v255 = objc_msgSend(v251, "constraintEqualToAnchor:", v254);
                      *(_QWORD *)(v245 + 40) = v255;
                      v256 = objc_msgSend(v298, "topAnchor");
                      v257 = objc_msgSend(v1, "view");
                      if (v257)
                      {
                        v258 = v257;
                        v301 = (void *)objc_opt_self(NSLayoutConstraint);
                        v259 = objc_msgSend(v258, "topAnchor");

                        v260 = objc_msgSend(v256, "constraintEqualToAnchor:", v259);
                        *(_QWORD *)(v245 + 48) = v260;
                        v261 = objc_msgSend(*(id *)&v1[v295], "centerXAnchor");
                        v262 = objc_msgSend(v297, "centerXAnchor");
                        v263 = objc_msgSend(v261, "constraintEqualToAnchor:", v262);

                        *(_QWORD *)(v245 + 56) = v263;
                        v264 = objc_msgSend(v49, "widthAnchor");
                        v265 = objc_msgSend(v297, "widthAnchor");
                        v266 = objc_msgSend(v264, "constraintEqualToAnchor:", v265);

                        *(_QWORD *)(v245 + 64) = v266;
                        v267 = objc_msgSend(v297, "bottomAnchor");
                        v268 = objc_msgSend(v293, "topAnchor");
                        v269 = objc_msgSend(v267, "constraintEqualToAnchor:", v268);

                        *(_QWORD *)(v245 + 72) = v269;
                        v270 = objc_msgSend(*(id *)&v1[v296], "bottomAnchor");
                        v271 = objc_msgSend(v293, "topAnchor");
                        v272 = objc_msgSend(v270, "constraintEqualToAnchor:", v271);

                        *(_QWORD *)(v245 + 80) = v272;
                        v273 = objc_msgSend(*(id *)&v1[v295], "topAnchor");
                        v274 = objc_msgSend(v293, "bottomAnchor");
                        v275 = objc_msgSend(v273, "constraintEqualToAnchor:", v274);

                        *(_QWORD *)(v245 + 88) = v275;
                        v276 = objc_msgSend(v293, "centerXAnchor");
                        v277 = objc_msgSend(*(id *)&v1[v295], "centerXAnchor");
                        v278 = objc_msgSend(v276, "constraintEqualToAnchor:", v277);

                        *(_QWORD *)(v245 + 96) = v278;
                        v279 = objc_msgSend(v293, "bottomAnchor");
                        v280 = objc_msgSend(*(id *)&v1[v295], "topAnchor");
                        v281 = objc_msgSend(v279, "constraintEqualToAnchor:constant:", v280, -10.0);

                        *(_QWORD *)(v245 + 104) = v281;
                        specialized Array._endMutation()(v282);
                        type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint, NSLayoutConstraint_ptr);
                        isa = Array._bridgeToObjectiveC()().super.isa;
                        swift_bridgeObjectRelease(v245);
                        objc_msgSend(v301, "activateConstraints:", isa);

                        objc_msgSend(*(id *)&v1[v295], "addTarget:action:forControlEvents:", v1, "journalButtonTapped:", 64);
                        objc_msgSend(*(id *)&v1[v294], "addTarget:action:forControlEvents:", v1, "addButtonTapped", 64);
                        v284 = objc_msgSend(v1, "view");
                        if (v284)
                        {
                          v285 = v284;
                          v302 = objc_msgSend(v288, "systemBackgroundColor");
                          objc_msgSend(v285, "setBackgroundColor:", v302);
                          swift_release(v289);

                          return;
                        }
                        goto LABEL_86;
                      }
LABEL_85:
                      __break(1u);
LABEL_86:
                      __break(1u);
                      goto LABEL_87;
                    }
LABEL_84:
                    __break(1u);
                    goto LABEL_85;
                  }
LABEL_83:
                  __break(1u);
                  goto LABEL_84;
                }
LABEL_82:
                __break(1u);
                goto LABEL_83;
              }
LABEL_81:
              __break(1u);
              goto LABEL_82;
            }
LABEL_80:
            __break(1u);
            goto LABEL_81;
          }
LABEL_79:
          __break(1u);
          goto LABEL_80;
        }
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.preFetch()()
{
  MOSuggestionSheetInterstitialView.fetchAssetsForCarousel()();
  MOSuggestionSheetInterstitialView.didUpdateSelection()();
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.didUpdateSelection()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t (*v5)(void);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  NSString v13;
  uint64_t v14;

  v1 = v0;
  v2 = 272;
  if (*((_BYTE *)v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode))
    v2 = 208;
  v3 = &OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView;
  if (!*((_BYTE *)v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode))
    v3 = &OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
  v4 = *(_QWORD **)((char *)v0 + *v3);
  v5 = *(uint64_t (**)(void))((swift_isaMask & *v4) + v2);
  v6 = v4;
  v7 = v5();

  v14 = v7;
  specialized Set._Variant.remove(_:)(0x6C6F686563616C70, 0xEB00000000726564);
  swift_bridgeObjectRelease(v8);
  specialized Set._Variant.remove(_:)(0, 0xE000000000000000);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRelease(v14);
  v11 = *(void **)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButton);
  if (v10)
  {
    objc_msgSend(v11, "setEnabled:", 1);
    objc_msgSend(*(id *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_quickAddButton), "setEnabled:", 1);
    v12 = *(void **)((char *)v1
                   + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_emptySelectionLabel);
    objc_msgSend(v12, "setHidden:", 1);
  }
  else
  {
    objc_msgSend(v11, "setEnabled:", 0);
    objc_msgSend(*(id *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_quickAddButton), "setEnabled:", 0);
    v12 = *(void **)((char *)v1
                   + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_emptySelectionLabel);
    objc_msgSend(v12, "setHidden:", 0);
    if (one-time initialization token for SELECT_AT_LEAST_ONE_TEXT != -1)
      swift_once(&one-time initialization token for SELECT_AT_LEAST_ONE_TEXT, one-time initialization function for SELECT_AT_LEAST_ONE_TEXT);
  }
  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v12, "setText:", v13);

  (*(void (**)(void))((swift_isaMask & *v1) + 0x330))();
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.viewDidAppear(_:)(Swift::Bool a1)
{
  MOSuggestionSheetInterstitialView.viewDidAppear(_:)(a1, (SEL *)&selRef_viewDidAppear_);
}

void MOSuggestionSheetInterstitialView.setNavBar()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  _QWORD *v3;
  NSString v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  char v9;
  void *v10;
  char **v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  Class isa;
  id v27;
  id v28;

  v1 = v0;
  v2 = (*(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v0) + 0x138))();
  if (v2)
  {
    v3 = (_QWORD *)v2;
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v4);

    v6 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithImage:style:target:action:", v5, 2, 0, "didToggleListCarouselViewButtonWithCarouselIndex:");
    v7 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_toggleListViewCarouselButton;
    v8 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_toggleListViewCarouselButton];
    *(_QWORD *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_toggleListViewCarouselButton] = v6;

    v9 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x1B0))();
    v10 = (void *)objc_opt_self(UIColor);
    v11 = &selRef_systemBlueColor;
    if ((v9 & 1) == 0)
      v11 = &selRef_systemIndigoColor;
    v12 = objc_msgSend(v10, *v11);
    v13 = *(void **)&v1[v7];
    if (v13)
    {
      objc_msgSend(v13, "setTintColor:", v12);
      v14 = *(void **)&v1[v7];
      if (v14)
      {
        v15 = v14;
        MOSuggestionSheetInterstitialView.toggleListViewCarouselModeAccessibilityLabel.getter();
        v17 = v16;
        v18 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v17);
        objc_msgSend(v15, "setAccessibilityLabel:", v18);

        v19 = *(void **)&v1[v7];
        if (v19)
        {
          v20 = v19;
          v21 = objc_msgSend(v1, "navigationItem");
          objc_msgSend(v21, "setRightBarButtonItem:", v20);

        }
      }
    }
    v22 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_navigationBar];
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v24 = swift_allocObject(v23, 40, 7);
    *(_OWORD *)(v24 + 16) = xmmword_10019EDA0;
    v25 = objc_msgSend(v1, "navigationItem");
    *(_QWORD *)(v24 + 32) = v25;
    specialized Array._endMutation()(v25);
    type metadata accessor for UIApplication(0, &lazy cache variable for type metadata for UINavigationItem, UINavigationItem_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v24);
    objc_msgSend(v22, "setItems:animated:", isa, 0);

    v27 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithBarButtonSystemItem:target:action:", 1, 0, "cancelSheet");
    objc_msgSend(v27, "setTintColor:", v12);
    v28 = objc_msgSend(v1, "navigationItem");
    objc_msgSend(v28, "setLeftBarButtonItem:", v27);

  }
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.updateAssetTypes()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __n128 v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD aBlock[5];
  uint64_t v17;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue, OS_dispatch_queue_ptr);
  v9 = (void *)static OS_dispatch_queue.main.getter(v8);
  v10 = swift_allocObject(&unk_1001E5318, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16);
  aBlock[4] = partial apply for closure #1 in MOSuggestionSheetInterstitialView.updateAssetTypes();
  v17 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_7;
  v11 = _Block_copy(aBlock);
  swift_release(v17);
  static DispatchQoS.unspecified.getter(v12);
  aBlock[0] = _swiftEmptyArrayStorage;
  v13 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  v15 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v14, v15, v0, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void closure #1 in MOSuggestionSheetInterstitialView.updateAssetTypes()(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  _QWORD aBlock[5];
  uint64_t v10;
  char v11[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = (void *)objc_opt_self(UIView);
    v5 = swift_allocObject(&unk_1001E55C8, 24, 7);
    *(_QWORD *)(v5 + 16) = v3;
    aBlock[4] = partial apply for closure #1 in closure #1 in MOSuggestionSheetInterstitialView.updateAssetTypes();
    v10 = v5;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_42;
    v6 = _Block_copy(aBlock);
    v7 = v10;
    v8 = v3;
    swift_release(v7);
    objc_msgSend(v4, "animateWithDuration:animations:", v6, 1.0);
    _Block_release(v6);

  }
}

void closure #1 in closure #1 in MOSuggestionSheetInterstitialView.updateAssetTypes()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  id v19;

  v2 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode;
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode) != 1)
  {
LABEL_7:
    v11 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
    v12 = objc_retain(*(id *)(a1
                            + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView));
    v13 = MOSuggestionInterstitialCarouselView.assetTypeSummary.getter();
    v15 = v14;

    swift_bridgeObjectRelease(v15);
    v16 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000) == 0)
      v16 = v13 & 0xFFFFFFFFFFFFLL;
    if (v16)
    {
      v9 = *(id *)(a1 + v11);
      MOSuggestionInterstitialCarouselView.assetTypeSummary.getter();
      goto LABEL_11;
    }
LABEL_12:
    v17 = 0xE100000000000000;
    goto LABEL_13;
  }
  v3 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView;
  v4 = *(id *)(a1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView);
  v5 = MOSuggestionInterstitialExpandableListView.assetTypeSummary.getter();
  v7 = v6;

  swift_bridgeObjectRelease(v7);
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  if (!v8)
  {
    if ((*(_BYTE *)(a1 + v2) & 1) != 0)
      goto LABEL_12;
    goto LABEL_7;
  }
  v9 = *(id *)(a1 + v3);
  MOSuggestionInterstitialExpandableListView.assetTypeSummary.getter();
LABEL_11:
  v17 = v10;

LABEL_13:
  v18 = *(void **)(a1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetTypeLabel);
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  objc_msgSend(v18, "setText:", v19);

}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.viewDidLoad()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  objc_super v4;

  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for MOSuggestionSheetInterstitialView(0);
  objc_msgSendSuper2(&v4, "viewDidLoad");
  v1 = objc_msgSend(v0, "view");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
    objc_msgSend(v2, "setBackgroundColor:", v3);

  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.viewDidDisappear(_:)(Swift::Bool a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(_BYTE *);
  _QWORD *v7;
  void (*v8)(_BYTE *, _QWORD);
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  void (*v12)(_QWORD);
  _QWORD *v13;
  _QWORD *v14;
  void (*v15)(_QWORD);
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t (*v19)(_BYTE *);
  _QWORD *v20;
  void (*v21)(_BYTE *, _QWORD);
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  void (*v25)(_QWORD);
  _QWORD *v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  id v34;
  void *v35;
  uint64_t v36;
  _BYTE v37[32];
  objc_super v38;

  v2 = v1;
  v38.receiver = v2;
  v38.super_class = (Class)type metadata accessor for MOSuggestionSheetInterstitialView(0);
  objc_msgSendSuper2(&v38, "viewDidDisappear:", a1);
  v4 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
  v5 = *(_QWORD **)&v2[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView];
  v6 = *(uint64_t (**)(_BYTE *))((swift_isaMask & *v5) + 0xF0);
  v7 = v5;
  v8 = (void (*)(_BYTE *, _QWORD))v6(v37);
  v10 = *v9;
  *v9 = (uint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v10);
  v8(v37, 0);

  v11 = *(_QWORD **)&v2[v4];
  v12 = *(void (**)(_QWORD))((swift_isaMask & *v11) + 0xD0);
  v13 = v11;
  v12(0);

  v14 = *(_QWORD **)&v2[v4];
  v15 = *(void (**)(_QWORD))((swift_isaMask & *v14) + 0xB8);
  v16 = v14;
  v15(0);

  v17 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView;
  v18 = *(_QWORD **)&v2[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView];
  v19 = *(uint64_t (**)(_BYTE *))((swift_isaMask & *v18) + 0xC8);
  v20 = v18;
  v21 = (void (*)(_BYTE *, _QWORD))v19(v37);
  v23 = *v22;
  *v22 = (uint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v23);
  v21(v37, 0);

  v24 = *(_QWORD **)&v2[v17];
  v25 = *(void (**)(_QWORD))((swift_isaMask & *v24) + 0x90);
  v26 = v24;
  v25(0);

  v27 = objc_msgSend(v2, "view");
  if (!v27)
    goto LABEL_18;
  v28 = v27;
  v29 = objc_msgSend(v27, "subviews");
  v30 = type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for UIView, UIView_ptr);
  v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v30);

  if ((unint64_t)v31 >> 62)
  {
    if (v31 < 0)
      v36 = v31;
    else
      v36 = v31 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v31);
    v32 = _CocoaArrayWrapper.endIndex.getter(v36);
    swift_bridgeObjectRelease(v31);
    if (v32)
      goto LABEL_4;
  }
  else
  {
    v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v32)
    {
LABEL_4:
      if (v32 >= 1)
      {
        for (i = 0; i != v32; ++i)
        {
          if ((v31 & 0xC000000000000001) != 0)
            v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v31);
          else
            v34 = *(id *)(v31 + 8 * i + 32);
          v35 = v34;
          objc_msgSend(v34, "removeFromSuperview");

        }
        goto LABEL_14;
      }
      __break(1u);
LABEL_18:
      __break(1u);
      return;
    }
  }
LABEL_14:

  swift_bridgeObjectRelease(v31);
  if (one-time initialization token for shared != -1)
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  (*(void (**)(void))(*(_QWORD *)static MOSuggestionAssetCacheManager.shared + 296))();
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.viewWillDisappear(_:)(Swift::Bool a1)
{
  MOSuggestionSheetInterstitialView.viewDidAppear(_:)(a1, (SEL *)&selRef_viewWillDisappear_);
}

id MOSuggestionSheetInterstitialView.viewDidAppear(_:)(char a1, SEL *a2)
{
  void *v2;
  objc_super v6;

  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for MOSuggestionSheetInterstitialView(0);
  return objc_msgSendSuper2(&v6, *a2, a1 & 1);
}

id @objc MOSuggestionSheetInterstitialView.viewDidAppear(_:)(void *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  objc_super v7;

  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for MOSuggestionSheetInterstitialView(0);
  return objc_msgSendSuper2(&v7, *a4, a3);
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.cancelSheet()()
{
  void *v0;

  if (one-time initialization token for shared != -1)
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  (*(void (**)(void))(*(_QWORD *)static MOSuggestionAssetCacheManager.shared + 288))();
  objc_msgSend(v0, "dismissViewControllerAnimated:completion:", 1, 0);
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.addButtonTapped()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, _QWORD, id);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  id v18;

  v1 = v0;
  v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x1C8))();
  if (v2)
  {
    v3 = v2;
    v4 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x138))();
    if (v4)
    {
      v18 = (id)v4;
      v5 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x390))();
      v6 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x3A0))(v5);
      v7 = (*(uint64_t (**)(uint64_t, uint64_t))((char *)v0
                                                       + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_selectedSuggestion))((uint64_t)v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_indexPath, 1);
      v8 = IndexPath.row.getter(v7);
      v9 = *(_QWORD *)((char *)v1
                     + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_modifiedTitleString);
      v10 = *(_QWORD *)((char *)v1
                      + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_modifiedTitleString
                      + 8);
      v11 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, id))(*(_QWORD *)v3 + 552);
      swift_bridgeObjectRetain(v10);
      v11(v8, v9, v10, v6 & 1, v18);
      swift_bridgeObjectRelease(v10);
      v12 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x3A8))(5);
      v13 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x150))(v12);
      if (v13)
      {
        v15 = v13;
        v16 = v14;
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v16 + 16))(ObjectType, v16);
        swift_unknownObjectRelease(v15);
      }
      objc_msgSend(v1, "dismissViewControllerAnimated:completion:", 1, 0);
      swift_release(v3);

    }
    else
    {
      swift_release(v3);
    }
  }
}

void MOSuggestionSheetInterstitialView.updateTitleLabelString()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  NSString v7;
  id v8;
  NSString v9;
  id v10;
  char v11;
  void *v12;
  char **v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  NSString v24;
  id v25;
  void *v26;
  id v27;

  v1 = v0;
  v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x138))();
  if (v2)
  {
    v3 = (_QWORD *)v2;
    v4 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString + 8);
    if (v4)
      v5 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString
                                  + 8);
    else
      v5 = 0xE000000000000000;
    v6 = objc_allocWithZone((Class)NSMutableAttributedString);
    swift_bridgeObjectRetain(v4);
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
    v8 = objc_msgSend(v6, "initWithString:", v7);

    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v9);

    if (!v10)
      goto LABEL_11;
    v11 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x1B0))();
    v12 = (void *)objc_opt_self(UIColor);
    v13 = &selRef_systemBlueColor;
    if ((v11 & 1) == 0)
      v13 = &selRef_systemIndigoColor;
    v14 = objc_msgSend(v12, *v13);
    v15 = objc_msgSend(v10, "imageWithTintColor:", v14);

    v16 = (void *)objc_opt_self(UIFont);
    v17 = objc_msgSend(v16, "preferredFontForTextStyle:", UIFontTextStyleHeadline);
    v18 = objc_msgSend(v17, "fontDescriptor");
    v19 = objc_msgSend(v18, "fontDescriptorWithSymbolicTraits:", 2);

    if (v19)
    {
      v20 = objc_msgSend(v16, "fontWithDescriptor:size:", v19, 0.0);

      v21 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithFont:", v20);
      v10 = objc_msgSend(v15, "imageWithSymbolConfiguration:", v21);

LABEL_11:
      v22 = objc_msgSend(objc_allocWithZone((Class)NSTextAttachment), "init");
      objc_msgSend(v22, "setImage:", v10);
      v27 = objc_msgSend((id)objc_opt_self(NSAttributedString), "attributedStringWithAttachment:", v22);
      v23 = objc_allocWithZone((Class)NSAttributedString);
      v24 = String._bridgeToObjectiveC()();
      v25 = objc_msgSend(v23, "initWithString:", v24);

      objc_msgSend(v8, "appendAttributedString:", v25);
      objc_msgSend(v8, "appendAttributedString:", v27);
      v26 = *(void **)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleLabel);
      objc_msgSend(v26, "setAttributedText:", v8);
      objc_msgSend(v26, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      objc_msgSend(v26, "setAdjustsFontForContentSizeCategory:", 1);

      return;
    }
    __break(1u);
  }
}

void closure #1 in MOSuggestionSheetInterstitialView.handleLabelEditTap(_:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  uint64_t Strong;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  char v21[24];
  _QWORD v22[3];
  char v23[24];

  v3 = a3 + 16;
  v4 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0x60))();
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  swift_beginAccess(v3, v23, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  v9 = (void *)Strong;
  if (Strong)
  {
    v11 = *(_QWORD *)(Strong + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString);
    v10 = *(_QWORD *)(Strong + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString + 8);
    swift_bridgeObjectRetain(v10);

    if (v10)
    {
      v22[0] = v11;
      v22[1] = v10;
      v9 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v22, &type metadata for String);
      outlined destroy of String((uint64_t)v22);
    }
    else
    {
      v9 = 0;
    }
  }
  v12 = objc_msgSend(v7, "isEqual:", v9);

  swift_unknownObjectRelease(v9);
  if ((v12 & 1) != 0)
    goto LABEL_10;
  swift_beginAccess(v3, v22, 0, 0);
  v13 = swift_unknownObjectWeakLoadStrong(v3);
  if (v13)
  {
    v14 = (void *)v13;
    v15 = (uint64_t *)(v13 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_modifiedTitleString);
    v16 = *(_QWORD *)(v13 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_modifiedTitleString + 8);
    *v15 = v4;
    v15[1] = v6;
    swift_bridgeObjectRetain(v6);

    swift_bridgeObjectRelease(v16);
  }
  swift_beginAccess(v3, v21, 0, 0);
  v17 = swift_unknownObjectWeakLoadStrong(v3);
  if (!v17)
  {
LABEL_10:
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v18 = (void *)v17;
    v19 = (uint64_t *)(v17 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString);
    v20 = *(_QWORD *)(v17 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString + 8);
    *v19 = v4;
    v19[1] = v6;
    swift_bridgeObjectRelease(v20);
    MOSuggestionSheetInterstitialView.updateTitleLabelString()();

  }
}

void MOSuggestionSheetInterstitialView.fetchAssetsForCarousel()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  id v10;

  v1 = v0;
  v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x1C8))();
  if (v2)
  {
    v3 = v2;
    if (one-time initialization token for shared != -1)
      swift_once(&one-time initialization token for shared, one-time initialization function for shared);
    (*(void (**)(void))(*(_QWORD *)static MOSuggestionAssetCacheManager.shared + 296))();
    v4 = swift_allocObject(&unk_1001E5318, 24, 7);
    swift_unknownObjectWeakInit(v4 + 16);
    swift_retain(v4);
    v5 = MOSuggestionCollectionViewCellViewModel.fetchAssetsWithPlaceHolderSingleResult(previewOnly:previewMax:style:typeSorted:completionHandler:)(0, 5, MomentsUIService_SuggestionCellStyle_carouselFullScreen, 0, (uint64_t)partial apply for closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForCarousel(), v4);
    swift_release_n(v4, 2, v6);
    v7 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
    v8 = objc_retain(*(id *)((char *)v1
                           + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView));
    v9 = specialized static MOSuggestionSheetAssetViewModel.placeholders(count:parent:)(v5, v3);
    (*(void (**)(_QWORD *))((swift_isaMask & *v8) + 0xE8))(v9);

    v10 = *(id *)((char *)v1 + v7);
    MOSuggestionInterstitialCarouselView.reloadAll()();
    swift_release(v3);

  }
}

void closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForCarousel()(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *Strong;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  _QWORD *v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD aBlock[5];
  _QWORD *v30;
  char v31[24];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v31, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v13 = Strong;
    if (*((_BYTE *)a1 + 16) == 1 || (v14 = *a1) == 0)
    {

    }
    else
    {
      v15 = a1[1];
      type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue, OS_dispatch_queue_ptr);
      v16 = swift_retain(v14);
      v28 = static OS_dispatch_queue.main.getter(v16);
      v17 = (_QWORD *)swift_allocObject(&unk_1001E5618, 40, 7);
      v17[2] = v13;
      v17[3] = v14;
      v17[4] = v15;
      aBlock[4] = partial apply for closure #1 in closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForCarousel();
      v30 = v17;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_49;
      v27 = _Block_copy(aBlock);
      v18 = v30;
      swift_retain(v14);
      v19 = v13;
      swift_release(v18);
      static DispatchQoS.unspecified.getter(v20);
      aBlock[0] = _swiftEmptyArrayStorage;
      v21 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
      v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      v23 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v22, v23, v4, v21);
      v25 = v27;
      v24 = (void *)v28;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v27);
      _Block_release(v25);

      swift_release(v14);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
}

void closure #1 in closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForCarousel()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;

  v5 = *(id *)(a1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView);
  MOSuggestionInterstitialCarouselView.reloadCell(_:index:)(a2, a3);

}

void MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  id v15;

  v3 = v2;
  v6 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x1C8))();
  if (v6)
  {
    v7 = v6;
    v8 = swift_allocObject(&unk_1001E54D8, 17, 7);
    *(_BYTE *)(v8 + 16) = 0;
    v9 = swift_allocObject(&unk_1001E5318, 24, 7);
    swift_unknownObjectWeakInit(v9 + 16);
    v10 = (_QWORD *)swift_allocObject(&unk_1001E5500, 48, 7);
    v10[2] = v9;
    v10[3] = v8;
    v10[4] = a1;
    v10[5] = a2;
    swift_retain(v9);
    swift_retain(v8);
    swift_retain(a2);
    v11 = MOSuggestionCollectionViewCellViewModel.fetchListAssetsWithPlaceHolderSingleResult(previewOnly:previewMax:typeSorted:completion:)(0, 5, 1, (uint64_t)partial apply for closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:), (int64_t)v10);
    swift_release(v9);
    swift_release(v10);
    v12 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView;
    v13 = objc_retain(*(id *)((char *)v3
                            + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView));
    v14 = specialized static MOSuggestionInterstitialListAssetViewModel.placeHolders(count:)(v11);
    (*(void (**)(unint64_t))((swift_isaMask & *v13) + 0xC0))(v14);

    v15 = *(id *)((char *)v3 + v12);
    MOSuggestionInterstitialExpandableListView.reloadAll()();
    swift_release(v7);
    swift_release(v8);

  }
}

void closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *Strong;
  void *v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD aBlock[5];
  uint64_t v49;
  char v50[24];

  v44 = a3;
  v45 = a5;
  v43 = a4;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v11 - 8);
  v47 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v50, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v19 = Strong;
    if (*(_BYTE *)(a1 + 16) == 1)
    {

    }
    else
    {
      v40 = *(_QWORD *)(a1 + 8);
      type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue, OS_dispatch_queue_ptr);
      v42 = static OS_dispatch_queue.main.getter(v20);
      outlined init with copy of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(a1, (uint64_t)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
      v21 = *(unsigned __int8 *)(v15 + 80);
      v22 = (v21 + 24) & ~v21;
      v23 = (v16 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
      v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
      v41 = v8;
      v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF8;
      v26 = swift_allocObject(&unk_1001E5528, v25 + 16, v21 | 7);
      *(_QWORD *)(v26 + 16) = v19;
      outlined init with take of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult((uint64_t)v17, v26 + v22);
      *(_QWORD *)(v26 + v23) = v40;
      v27 = v43;
      v28 = v44;
      *(_QWORD *)(v26 + v24) = v44;
      v29 = (_QWORD *)(v26 + v25);
      v30 = v45;
      *v29 = v27;
      v29[1] = v30;
      aBlock[4] = partial apply for closure #1 in closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:);
      v49 = v26;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_28;
      v31 = _Block_copy(aBlock);
      v32 = v49;
      v33 = v19;
      swift_retain(v28);
      swift_retain(v30);
      swift_release(v32);
      static DispatchQoS.unspecified.getter(v34);
      aBlock[0] = _swiftEmptyArrayStorage;
      v35 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
      v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      v37 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v36, v37, v7, v35);
      v38 = (void *)v42;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v31);
      _Block_release(v31);

      (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v7);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v13, v47);
    }
  }
}

void closure #1 in closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:)(_QWORD *a1, uint64_t *a2, unint64_t a3, uint64_t a4, void (*a5)(__n128))
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)(_BYTE *, __n128);
  _QWORD *v11;
  __n128 v12;
  void (*v13)(_BYTE *, _QWORD);
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int isUniquelyReferenced_nonNull_bridgeObject;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  char v23[24];
  _BYTE v24[32];

  v8 = *(_QWORD **)((char *)a1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView);
  v9 = *a2;
  v10 = *(uint64_t (**)(_BYTE *, __n128))((swift_isaMask & *v8) + 0xC8);
  v11 = v8;
  v12 = swift_retain(v9);
  v13 = (void (*)(_BYTE *, _QWORD))v10(v24, v12);
  v15 = v14;
  v16 = *v14;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v14);
  *v15 = v16;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v16 < 0 || (v16 & 0x4000000000000000) != 0)
  {
    v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
    *v15 = v16;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a3)
  {
LABEL_11:
    __break(1u);
    return;
  }
  v18 = (_BYTE *)(a4 + 16);
  v19 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 8 * a3 + 0x20);
  *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 8 * a3 + 0x20) = v9;
  swift_release(v19);
  specialized Array._endMutation()(v20);
  v13(v24, 0);
  MOSuggestionInterstitialExpandableListView.reloadAll()();

  (*(void (**)(void))((swift_isaMask & *a1) + 0x330))();
  v21 = swift_beginAccess(v18, v24, 0, 0);
  if ((*v18 & 1) == 0)
  {
    a5(v21);
    swift_beginAccess(v18, v23, 1, 0);
    *v18 = 1;
  }
}

void MOSuggestionSheetInterstitialView.showCarousel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(void);
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  _QWORD *v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  id v14;

  v1 = v0;
  v2 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
  v3 = *(_QWORD **)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView);
  v4 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode) & 1) != 0)
  {
    v5 = *(_QWORD **)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView);
    v6 = *(uint64_t (**)(void))((swift_isaMask & *v5) + 0xD0);
    v7 = v3;
    v8 = v5;
    v9 = v6();

  }
  else
  {
    v10 = *(uint64_t (**)(void))((swift_isaMask & *v3) + 0x110);
    v11 = v3;
    v9 = v10();
  }
  v12 = *(void (**)(uint64_t))((swift_isaMask & *v3) + 0x118);
  v13 = swift_bridgeObjectRetain(v9);
  v12(v13);

  swift_bridgeObjectRelease(v9);
  v14 = *(id *)(v1 + v2);
  MOSuggestionInterstitialCarouselView.refreshCheckmarksState()();

  *(_BYTE *)(v1 + v4) = 0;
  objc_msgSend(*(id *)(v1 + v2), "setHidden:", 0);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView), "setHidden:", 1);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_scrollView), "setShowsVerticalScrollIndicator:", 0);
  MOSuggestionSheetInterstitialView.didUpdateSelection()();
  MOSuggestionSheetInterstitialView.setNavBar()();
}

uint64_t MOSuggestionSheetInterstitialView.currentlyActiveSelectedIdentifiers.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t (*v4)(void);
  _QWORD *v5;
  uint64_t v6;

  v1 = 272;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode))
    v1 = 208;
  v2 = &OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView;
  if (!*(_BYTE *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode))
    v2 = &OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
  v3 = *(_QWORD **)(v0 + *v2);
  v4 = *(uint64_t (**)(void))((swift_isaMask & *v3) + v1);
  v5 = v3;
  v6 = v4();

  return v6;
}

uint64_t MOSuggestionSheetInterstitialView.showListView()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)(void);
  _QWORD *v15;
  _QWORD *v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  __n128 v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD **)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView);
  v9 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode) & 1) != 0)
  {
    v10 = *(uint64_t (**)(void))((swift_isaMask & *v8) + 0xD0);
    v11 = v8;
    v12 = v10();
  }
  else
  {
    v13 = *(_QWORD **)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView);
    v14 = *(uint64_t (**)(void))((swift_isaMask & *v13) + 0x110);
    v15 = v8;
    v16 = v13;
    v12 = v14();

  }
  v17 = *(void (**)(uint64_t))((swift_isaMask & *v8) + 0xD8);
  v18 = swift_bridgeObjectRetain(v12);
  v17(v18);

  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(v1 + v9) = 1;
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue, OS_dispatch_queue_ptr);
  v20 = (void *)static OS_dispatch_queue.main.getter(v19);
  v21 = swift_allocObject(&unk_1001E5318, 24, 7);
  swift_unknownObjectWeakInit(v21 + 16);
  aBlock[4] = partial apply for closure #1 in MOSuggestionSheetInterstitialView.showListView();
  v31 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_15;
  v22 = _Block_copy(aBlock);
  swift_release(v31);
  static DispatchQoS.unspecified.getter(v23);
  aBlock[0] = _swiftEmptyArrayStorage;
  v24 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  v26 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v26, v2, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v28);
}

void closure #1 in MOSuggestionSheetInterstitialView.showListView()(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  char *v3;
  uint64_t v4;
  id v5;
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (char *)Strong;
    v4 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView;
    v5 = *(id *)(Strong + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView);
    MOSuggestionInterstitialExpandableListView.refreshCheckmarksState()();

    objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView], "setHidden:", 1);
    objc_msgSend(*(id *)&v3[v4], "setHidden:", 0);
    objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_scrollView], "setShowsVerticalScrollIndicator:", 1);
    MOSuggestionSheetInterstitialView.didUpdateSelection()();
    MOSuggestionSheetInterstitialView.setNavBar()();

  }
}

void *MOSuggestionSheetInterstitialView.NIL_CAROUSEL_INDEX.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetInterstitialView.NIL_CAROUSEL_INDEX;
}

void closure #1 in MOSuggestionSheetInterstitialView.didToggleListCarouselViewButton(carouselIndex:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t (*v15)(void);
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t (*v22)(void);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v30, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    MOSuggestionSheetInterstitialView.showListView()();
    if (serverManager._connectionProperties != (NSMutableDictionary *)-1)
      swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
    v4 = type metadata accessor for Logger(0);
    __swift_project_value_buffer(v4, (uint64_t)static MOAngelLogger.assets);
    v5 = v3;
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc(22, -1);
      v9 = swift_slowAlloc(64, -1);
      *(_DWORD *)v8 = 136315394;
      v10 = v5[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode];
      v29 = v9;
      v11 = v10 == 0;
      v12 = 272;
      if (!v11)
        v12 = 208;
      v13 = &OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
      if (!v11)
        v13 = &OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView;
      v14 = *(_QWORD **)&v5[*v13];
      v15 = *(uint64_t (**)(void))((swift_isaMask & *v14) + v12);
      v16 = v14;
      v17 = v15();

      v18 = Set.debugDescription.getter(v17, &type metadata for String, &protocol witness table for String);
      v20 = v19;
      swift_bridgeObjectRelease(v17);
      v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v8 + 4);

      swift_bridgeObjectRelease(v20);
      *(_WORD *)(v8 + 12) = 2080;
      v21 = *(_QWORD **)&v5[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView];
      v22 = *(uint64_t (**)(void))((swift_isaMask & *v21) + 0xD0);
      v23 = v21;
      v24 = v22();

      v25 = Set.debugDescription.getter(v24, &type metadata for String, &protocol witness table for String);
      v27 = v26;
      swift_bridgeObjectRelease(v24);
      v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v8 + 14);

      swift_bridgeObjectRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[Interstitial] currentlySelected: %s, selectedList: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

    }
    else
    {

    }
  }
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.markSelectedAssetsAsEligible()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t (*v4)(void);
  _QWORD *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = 272;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode))
    v1 = 208;
  v2 = &OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView;
  if (!*(_BYTE *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode))
    v2 = &OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
  v3 = *(_QWORD **)(v0 + *v2);
  v4 = *(uint64_t (**)(void))((swift_isaMask & *v3) + v1);
  v5 = v3;
  v6 = v4();

  v7 = 0;
  v8 = v6 + 56;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v6 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  if (!v11)
    goto LABEL_9;
LABEL_8:
  v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v13 | (v7 << 6); ; i = __clz(__rbit64(v16)) + (v7 << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * i);
    v20 = *v18;
    v19 = v18[1];
    v21 = one-time initialization token for shared;
    swift_bridgeObjectRetain(v19);
    if (v21 != -1)
      swift_once(&one-time initialization token for shared, one-time initialization function for shared);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)static MOSuggestionAssetCacheManager.shared + 264))(v20, v19);
    swift_bridgeObjectRelease(v19);
    if (v11)
      goto LABEL_8;
LABEL_9:
    v15 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v15 >= v12)
      goto LABEL_27;
    v16 = *(_QWORD *)(v8 + 8 * v15);
    ++v7;
    if (!v16)
    {
      v7 = v15 + 1;
      if (v15 + 1 >= v12)
        goto LABEL_27;
      v16 = *(_QWORD *)(v8 + 8 * v7);
      if (!v16)
      {
        v7 = v15 + 2;
        if (v15 + 2 >= v12)
          goto LABEL_27;
        v16 = *(_QWORD *)(v8 + 8 * v7);
        if (!v16)
          break;
      }
    }
LABEL_22:
    v11 = (v16 - 1) & v16;
  }
  v17 = v15 + 3;
  if (v17 >= v12)
  {
LABEL_27:
    swift_release(v6);
    return;
  }
  v16 = *(_QWORD *)(v8 + 8 * v17);
  if (v16)
  {
    v7 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v7 >= v12)
      goto LABEL_27;
    v16 = *(_QWORD *)(v8 + 8 * v7);
    ++v17;
    if (v16)
      goto LABEL_22;
  }
LABEL_29:
  __break(1u);
}

Swift::Bool __swiftcall MOSuggestionSheetInterstitialView.isPromptElligibleForTransfer()()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t (*v6)(void);
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  unint64_t v91;
  Swift::Bool v92;
  uint64_t v93;
  uint64_t v94;

  v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x1C8))();
  if (!v1)
    return 0;
  v2 = v1;
  v3 = 272;
  if (*((_BYTE *)v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode))
    v3 = 208;
  v4 = &OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView;
  if (!*((_BYTE *)v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode))
    v4 = &OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
  v5 = *(_QWORD **)((char *)v0 + *v4);
  v6 = *(uint64_t (**)(void))((swift_isaMask & *v5) + v3);
  v7 = v5;
  v8 = v6();

  v9 = (unint64_t)MOEventBundle.orderedAssetReferencesForPreview(max:)(13);
  if (v9)
  {
    v10 = v9;
    v11 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v9 >> 62)
      goto LABEL_63;
    for (i = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v89))
    {
      v93 = v8;
      v94 = v11;
      v91 = v2;
      v13 = 0;
      v2 = v10 & 0xC000000000000001;
      v92 = 1;
      while (1)
      {
        if (v2)
        {
          v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v10);
          v8 = v13 + 1;
          if (__OFADD__(v13, 1))
            break;
          goto LABEL_16;
        }
        if (v13 >= *(_QWORD *)(v94 + 16))
          goto LABEL_62;
        v11 = *(_QWORD *)(v10 + 8 * v13 + 32);
        swift_retain(v11);
        v8 = v13 + 1;
        if (__OFADD__(v13, 1))
          break;
LABEL_16:
        v14 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v11 + 120))();
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeContactPhoto);
        v17 = v16;
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
        if (v15 == v18 && v17 == v19)
        {
LABEL_37:
          swift_bridgeObjectRelease_n(v17, 2);
          goto LABEL_38;
        }
        v21 = v19;
        v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v18, v19, 0);
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease(v21);
        if ((v22 & 1) != 0)
          goto LABEL_38;
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeMotionActivity);
        v17 = v24;
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
        if (v23 == v25 && v17 == v26)
          goto LABEL_37;
        v28 = v26;
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v17, v25, v26, 0);
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease(v28);
        if ((v29 & 1) != 0)
          goto LABEL_38;
        v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypePhoto);
        v17 = v31;
        v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
        v34 = v32;
        if (v30 == v33 && v17 == v32)
          goto LABEL_37;
        v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v17, v33, v32, 0);
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease(v34);
        if ((v35 & 1) != 0)
          goto LABEL_38;
        v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeLivePhoto);
        v17 = v37;
        v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
        v40 = v38;
        if (v36 == v39 && v17 == v38)
          goto LABEL_37;
        v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v17, v39, v38, 0);
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease(v40);
        if ((v41 & 1) != 0)
          goto LABEL_38;
        v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeVideo);
        v17 = v43;
        v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
        v46 = v44;
        if (v42 == v45 && v17 == v44)
          goto LABEL_37;
        v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v17, v45, v44, 0);
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease(v46);
        if ((v47 & 1) != 0)
        {
LABEL_38:
          swift_release(v11);

LABEL_39:
          ++v13;
          if (v8 == i)
          {
            swift_release(v91);
            swift_bridgeObjectRelease(v93);
            swift_bridgeObjectRelease(v10);
            return v92;
          }
        }
        else
        {
          v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeReflectionPrompt);
          v17 = v49;
          v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
          v52 = v50;
          if (v48 == v51 && v17 == v50)
            goto LABEL_37;
          v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v17, v51, v50, 0);
          swift_bridgeObjectRelease(v17);
          swift_bridgeObjectRelease(v52);
          if ((v53 & 1) != 0)
            goto LABEL_38;
          v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeGenericMap);
          v56 = v55;
          v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
          v59 = v57;
          if (v54 == v58 && v56 == v57)
          {
LABEL_44:
            v60 = v56;
LABEL_45:
            swift_bridgeObjectRelease(v56);
            v61 = swift_bridgeObjectRelease(v60);
            goto LABEL_56;
          }
          v62 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v56, v58, v57, 0);
          swift_bridgeObjectRelease(v56);
          v61 = swift_bridgeObjectRelease(v59);
          if ((v62 & 1) == 0)
          {
            v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeLocationPreview);
            v56 = v64;
            v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
            v67 = v65;
            if (v63 == v66 && v56 == v65)
              goto LABEL_44;
            v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v56, v66, v65, 0);
            swift_bridgeObjectRelease(v56);
            v61 = swift_bridgeObjectRelease(v67);
            if ((v68 & 1) == 0)
            {
              v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeMapSnapshot);
              v56 = v70;
              v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
              v73 = v71;
              if (v69 == v72 && v56 == v71)
                goto LABEL_44;
              v74 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v56, v72, v71, 0);
              swift_bridgeObjectRelease(v56);
              v61 = swift_bridgeObjectRelease(v73);
              if ((v74 & 1) == 0)
              {
                v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeMediaCoverArt);
                v56 = v76;
                v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
                v79 = v77;
                if (v75 == v78 && v56 == v77)
                  goto LABEL_44;
                v80 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v56, v78, v77, 0);
                swift_bridgeObjectRelease(v56);
                v61 = swift_bridgeObjectRelease(v79);
                if ((v80 & 1) == 0)
                {
                  static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeMultiPinMap);
                  v56 = v85;
                  static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
                  v60 = v86;
                  goto LABEL_45;
                }
              }
            }
          }
LABEL_56:
          v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 296))(v61);
          v83 = v82;
          v84 = specialized Set.contains(_:)(v81, v82, v93);
          swift_bridgeObjectRelease(v83);

          swift_release(v11);
          if ((v84 & 1) != 0)
            goto LABEL_39;
          v92 = 0;
          v13 = v8;
          if (v8 == i)
          {
            swift_release(v91);
            swift_bridgeObjectRelease(v93);
            swift_bridgeObjectRelease(v10);
            return 0;
          }
        }
      }
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      if (v10 >= 0)
        v89 = v11;
      else
        v89 = v10;
    }
    swift_release(v2);
    swift_bridgeObjectRelease(v8);
    v88 = v10;
  }
  else
  {
    swift_release(v2);
    v88 = v8;
  }
  swift_bridgeObjectRelease(v88);
  return 1;
}

void MOSuggestionSheetInterstitialView.logNotificationAnalyticsEvent(trigger:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  _QWORD *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  char v13[8];
  id v14;
  uint64_t v15;
  uint64_t v16;

  if (serverManager._connectionProperties != (NSMutableDictionary *)-1)
    swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
  v3 = type metadata accessor for Logger(0);
  __swift_project_value_buffer(v3, (uint64_t)static MOAngelLogger.assets);
  v4 = v1;
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(18, -1);
    *(_DWORD *)v7 = 67109376;
    LODWORD(v12) = *((unsigned __int8 *)v4
                   + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_fromNotification);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, (char *)&v12 + 4, v7 + 4);

    *(_WORD *)(v7 + 8) = 2048;
    v12 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, v13, v7 + 10);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[Interstitial] fromNotification: %{BOOL}d, trigger: %lu", (uint8_t *)v7, 0x12u);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

  }
  if (*((_BYTE *)v4 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_fromNotification) == 1)
  {
    v8 = (*(uint64_t (**)(void))((swift_isaMask & *v4) + 0x1C8))();
    if (v8)
    {
      v9 = v8;
      v10 = *(id *)(v8 + 16);
      swift_release(v9);
      v12 = a1;
      v13[0] = 1;
      v15 = 0;
      v16 = 0;
      v14 = v10;
      v11 = v10;
      MONotificationAnalytics.NotificationEngagementEvent.send()();

    }
  }
}

id MOSuggestionSheetInterstitialView.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  NSString v7;
  id v8;

  v4 = v3;
  if (a2)
  {
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(objc_allocWithZone(v4), "initWithNibName:bundle:", v7, a3);

  return v8;
}

void MOSuggestionSheetInterstitialView.init(nibName:bundle:)()
{
  _swift_stdlib_reportUnimplementedInitializer("MomentsUIService.MOSuggestionSheetInterstitialView", 50, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

id MOSuggestionSheetInterstitialView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetInterstitialView(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.shouldShowCarouselAtIndex(index:)(Swift::Int index)
{
  _QWORD *v1;

  (*(void (**)(Swift::Int))((swift_isaMask & *v1) + 0x388))(index);
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.enableActionButtons()()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButton), "setEnabled:", 1);
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_quickAddButton), "setEnabled:", 1);
  v1 = *(void **)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_emptySelectionLabel);
  objc_msgSend(v1, "setHidden:", 1);
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setText:", v2);

}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.disableActionButtons()()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButton), "setEnabled:", 0);
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_quickAddButton), "setEnabled:", 0);
  v1 = *(void **)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_emptySelectionLabel);
  objc_msgSend(v1, "setHidden:", 0);
  if (one-time initialization token for SELECT_AT_LEAST_ONE_TEXT != -1)
    swift_once(&one-time initialization token for SELECT_AT_LEAST_ONE_TEXT, one-time initialization function for SELECT_AT_LEAST_ONE_TEXT);
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setText:", v2);

}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  _QWORD v22[9];

  v5 = *v2;
  Hasher.init(_seed:)(v22, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = v10[1];
  v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
  {
    v17 = ~v7;
    do
    {
      v8 = (v8 + 1) & v17;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v18 = (_QWORD *)(v9 + 16 * v8);
      v19 = v18[1];
      v20 = *v18 == a1 && v19 == a2;
    }
    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0) & 1) == 0);
  }
  swift_bridgeObjectRelease(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v14 = *v2;
  v22[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v14 = v22[0];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  specialized _NativeSet._delete(at:)(v8);
  v16 = *v2;
  *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = *v2;
  v5 = static Hasher._hash(seed:_:)(*(_QWORD *)(*v2 + 40), a1);
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(v4 + 48);
  if (*(_QWORD *)(v8 + 8 * v7) != a1)
  {
    v9 = ~v6;
    do
    {
      v7 = (v7 + 1) & v9;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v8 + 8 * v7) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v11 = *v2;
  v15 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v11 = v15;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7);
  specialized _NativeSet._delete(at:)(v7);
  v13 = *v2;
  *v2 = v15;
  swift_bridgeObjectRelease(v13);
  return v12;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v21, *(_QWORD *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_OWORD *)(v15 + 16 * v2);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(v3);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        v12 = static Hasher._hash(seed:_:)(*(_QWORD *)(v3 + 40), *v11) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v2);
            if (v2 != v6 || (v2 = v6, v15 >= v11 + 1))
            {
              *v15 = *v11;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v16 = *(_QWORD *)(v3 + 16);
  v17 = __OFSUB__(v16, 1);
  v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

id specialized static MOSuggestionSheetInterstitialView.makeJournalButton(publicUI:clientName:isSourceJournalComposer:)(int a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  void (*v19)(char *, _QWORD, uint64_t);
  uint64_t v20;
  void *v21;
  char **v22;
  char v23;
  void (*v24)(char *, char *, uint64_t);
  void (*v25)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v26;
  char v27;
  void *v28;
  id v29;
  Swift::String v30;
  Swift::String v31;
  void *object;
  NSString v33;
  id v34;
  id v35;
  Swift::String v36;
  Swift::String v37;
  void *v38;
  NSString v39;
  id v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSString v48;
  id v49;
  NSString v50;
  id v51;
  Swift::String v52;
  Swift::String v53;
  void *v54;
  NSString v55;
  id v56;
  id v57;
  Swift::String v58;
  Swift::String v59;
  void *v60;
  NSString v61;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  char *v68;
  uint64_t v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;

  v66 = a1;
  v67 = a4;
  v64 = a2;
  v65 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  __chkstk_darwin(v4);
  v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for UIButton.Configuration.Size(0);
  v7 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UIButton.Configuration.CornerStyle(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UIButton.Configuration(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = objc_msgSend(objc_allocWithZone((Class)UIButton), "init");
  static UIButton.Configuration.filled()(v18);
  v19 = *(void (**)(char *, _QWORD, uint64_t))(v11 + 104);
  v20 = v65;
  v19(v13, enum case for UIButton.Configuration.CornerStyle.large(_:), v10);
  UIButton.Configuration.cornerStyle.setter(v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for UIButton.Configuration.Size.large(_:), v69);
  UIButton.Configuration.buttonSize.setter(v9);
  v21 = (void *)objc_opt_self(UIColor);
  v22 = &selRef_systemBlueColor;
  v23 = v66;
  if ((v66 & 1) == 0)
    v22 = &selRef_systemIndigoColor;
  UIButton.Configuration.baseBackgroundColor.setter(objc_msgSend(v21, *v22));
  v24 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v68 = v17;
  v24(v6, v17, v14);
  v69 = v15;
  v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56);
  v26 = v14;
  v27 = v23;
  v25(v6, 0, 1, v26);
  UIButton.configuration.setter(v6);
  objc_msgSend(v18, "setRole:", 1);
  objc_msgSend(v18, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v28 = (void *)objc_opt_self(NSBundle);
  v29 = objc_msgSend(v28, "mainBundle");
  v63 = (unint64_t)"s without writing about it";
  v70._object = (void *)0x80000001001A72B0;
  v30._countAndFlagsBits = 0x7257207472617453;
  v30._object = (void *)0xED0000676E697469;
  v31._countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  v70._countAndFlagsBits = 0xD00000000000003BLL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v30, (Swift::String_optional)0, (NSBundle)v29, v31, v70)._object;

  v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v18, "setTitle:forState:", v33, 0);

  v34 = v18;
  v35 = objc_msgSend(v28, "mainBundle");
  v71._countAndFlagsBits = 0xD000000000000042;
  v71._object = (void *)0x80000001001A72F0;
  v36._countAndFlagsBits = 0x7257207472617453;
  v36._object = (void *)0xED0000676E697469;
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v36, (Swift::String_optional)0, (NSBundle)v35, v37, v71)._object;

  v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v38);
  objc_msgSend(v34, "setAccessibilityLabel:", v39);

  objc_msgSend(v34, "setMaximumContentSizeCategory:", UIContentSizeCategoryAccessibilityMedium);
  if ((v27 & 1) != 0 && v20)
  {
    swift_bridgeObjectRetain(v20);
    v40 = objc_msgSend(v28, "mainBundle");
    v72._countAndFlagsBits = 0xD000000000000011;
    v72._object = (void *)0x80000001001A7340;
    v41._countAndFlagsBits = 0xE2206F7420646441;
    v41._object = (void *)0xAF9D80E240259C80;
    v42._countAndFlagsBits = 0;
    v42._object = (void *)0xE000000000000000;
    v43 = NSLocalizedString(_:tableName:bundle:value:comment:)(v41, (Swift::String_optional)0, (NSBundle)v40, v42, v72);

    v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v45 = swift_allocObject(v44, 72, 7);
    *(_OWORD *)(v45 + 16) = xmmword_10019ED20;
    *(_QWORD *)(v45 + 56) = &type metadata for String;
    *(_QWORD *)(v45 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v45 + 32) = v64;
    *(_QWORD *)(v45 + 40) = v20;
    static String.localizedStringWithFormat(_:_:)(v43._countAndFlagsBits, v43._object, v45);
    v47 = v46;
    swift_bridgeObjectRelease(v43._object);
    swift_bridgeObjectRelease(v45);
    v48 = String._bridgeToObjectiveC()();
    objc_msgSend(v34, "setTitle:forState:", v48, 0);

    v49 = v34;
    v50 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v47);
    objc_msgSend(v49, "setAccessibilityLabel:", v50);

  }
  if ((v67 & 1) != 0 && (v27 & 1) == 0)
  {
    v51 = objc_msgSend(v28, "mainBundle");
    v73._object = (void *)(v63 | 0x8000000000000000);
    v52._countAndFlagsBits = 0x45206F7420646441;
    v52._object = (void *)0xEC0000007972746ELL;
    v53._countAndFlagsBits = 0;
    v53._object = (void *)0xE000000000000000;
    v73._countAndFlagsBits = 0xD00000000000003BLL;
    v54 = NSLocalizedString(_:tableName:bundle:value:comment:)(v52, (Swift::String_optional)0, (NSBundle)v51, v53, v73)._object;

    v55 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v54);
    objc_msgSend(v34, "setTitle:forState:", v55, 0);

    v56 = v34;
    v57 = objc_msgSend(v28, "mainBundle");
    v74._countAndFlagsBits = 0xD000000000000042;
    v74._object = (void *)0x80000001001A72F0;
    v58._countAndFlagsBits = 0x45206F7420646441;
    v58._object = (void *)0xEC0000007972746ELL;
    v59._countAndFlagsBits = 0;
    v59._object = (void *)0xE000000000000000;
    v60 = NSLocalizedString(_:tableName:bundle:value:comment:)(v58, (Swift::String_optional)0, (NSBundle)v57, v59, v74)._object;

    v61 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v60);
    objc_msgSend(v56, "setAccessibilityLabel:", v61);

  }
  (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v26);
  return v34;
}

id specialized static MOSuggestionSheetInterstitialView.makeQuickAddButton(publicUI:)(char a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  Swift::String v18;
  Swift::String v19;
  void *object;
  NSString v21;
  char **v22;
  id v23;
  id v24;
  uint64_t v26;
  Swift::String v27;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UIButton.Configuration.Size(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UIButton.Configuration(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(objc_allocWithZone((Class)UIButton), "init");
  static UIButton.Configuration.plain()();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for UIButton.Configuration.Size.large(_:), v5);
  UIButton.Configuration.buttonSize.setter(v8);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v4, v12, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v4, 0, 1, v9);
  UIButton.configuration.setter(v4);
  objc_msgSend(v13, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v14 = (void *)objc_opt_self(UIColor);
  v15 = v13;
  v16 = objc_msgSend(v14, "systemBackgroundColor");
  objc_msgSend(v15, "setBackgroundColor:", v16);

  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v27._countAndFlagsBits = 0xD00000000000004ALL;
  v27._object = (void *)0x80000001001A7260;
  v18._object = (void *)0x80000001001A7240;
  v18._countAndFlagsBits = 0xD000000000000014;
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v27)._object;

  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v15, "setTitle:forState:", v21, 0);

  if ((a1 & 1) != 0)
    v22 = &selRef_systemBlueColor;
  else
    v22 = &selRef_systemIndigoColor;
  v23 = objc_msgSend(v14, *v22);
  objc_msgSend(v15, "setTitleColor:forState:", v23, 0);

  v24 = objc_msgSend(v14, *v22);
  objc_msgSend(v15, "setTintColor:", v24);

  objc_msgSend(v15, "setMaximumContentSizeCategory:", UIContentSizeCategoryAccessibilityMedium);
  objc_msgSend(v15, "setRole:", 1);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v15;
}

char *specialized MOSuggestionSheetInterstitialView.init(controller:cellViewModel:presentationDelegate:selectedSuggestion:indexPath:fromNotification:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  _BYTE *v8;
  char *v10;
  char *v11;
  uint64_t v12;
  id v13;
  _BYTE *v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  id v36;
  uint64_t v37;
  char v38;
  id v39;
  _QWORD *v40;
  id v41;
  char *v42;
  _QWORD *v43;
  void (*v44)(char *, _UNKNOWN **);
  char *v45;
  _QWORD *v46;
  _QWORD *v47;
  void (*v48)(char *, _UNKNOWN **);
  char *v49;
  _QWORD *v50;
  id v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  char *v57;
  uint64_t v64;
  objc_super v66;
  char v67[24];
  char v68[24];
  char v69[32];

  v10 = &v8[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_controller];
  swift_unknownObjectWeakInit(&v8[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_controller]);
  v11 = &v8[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_presentationDelegate];
  *((_QWORD *)v11 + 1) = 0;
  swift_unknownObjectWeakInit(v11);
  v8[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_photoMemoryBanner] = 0;
  v57 = &v8[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_cellViewModel];
  swift_weakInit(&v8[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_cellViewModel], 0);
  *(_QWORD *)&v8[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_toggleListViewCarouselButton] = 0;
  v12 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_scrollView;
  v13 = objc_allocWithZone((Class)UIScrollView);
  v14 = v8;
  v15 = objc_msgSend(v13, "init");
  objc_msgSend(v15, "setShowsVerticalScrollIndicator:", 0);
  *(_QWORD *)&v8[v12] = v15;
  v16 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_stackView;
  v17 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
  objc_msgSend(v17, "setAxis:", 1);
  objc_msgSend(v17, "setAlignment:", 3);
  objc_msgSend(v17, "setSpacing:", 3.0);
  *(_QWORD *)&v14[v16] = v17;
  v18 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_labelStackView;
  v19 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
  objc_msgSend(v19, "setAxis:", 0);
  objc_msgSend(v19, "setAlignment:", 3);
  *(_QWORD *)&v14[v18] = v19;
  v20 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleLabel;
  closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.titleLabel();
  *(_QWORD *)&v14[v20] = v21;
  v22 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_dateLabel;
  *(_QWORD *)&v14[v22] = closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.dateLabel();
  v23 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetTypeLabel;
  *(_QWORD *)&v14[v23] = closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.assetTypeLabel();
  v24 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_emptySelectionLabel;
  *(_QWORD *)&v14[v24] = closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.emptySelectionLabel();
  *(_QWORD *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_portraitConstraints] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_landscapeConstraints] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_commonConstraints] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonLeadingConstraint] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonTrailingConstraint] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonBottomConstraint] = 0;
  v25 = &v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString];
  *v25 = 0;
  v25[1] = 0;
  v26 = &v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_modifiedTitleString];
  *v26 = 0;
  v26[1] = 0;
  swift_beginAccess(v10, v69, 1, 0);
  swift_unknownObjectWeakAssign(v10, a1);
  swift_beginAccess(v11, v68, 1, 0);
  *((_QWORD *)v11 + 1) = a4;
  swift_unknownObjectWeakAssign(v11, a3);
  v27 = &v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_selectedSuggestion];
  *v27 = a5;
  v27[1] = a6;
  v28 = &v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_indexPath];
  v29 = type metadata accessor for IndexPath(0);
  v64 = *(_QWORD *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v28, a7, v29);
  v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_fromNotification] = a8;
  *(_QWORD *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_navigationBar] = objc_msgSend(objc_allocWithZone((Class)UINavigationBar), "init", swift_retain(a6).n128_f64[0]);
  swift_beginAccess(v57, v67, 1, 0);
  v30 = swift_weakAssign(v57, a2);
  v31 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x1B0);
  LOBYTE(v28) = v31(v30);
  v32 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x1C8))();
  v34 = v33;
  v35 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x1C0))();
  v36 = specialized static MOSuggestionSheetInterstitialView.makeJournalButton(publicUI:clientName:isSourceJournalComposer:)(v28 & 1, v32, v34, v35 & 1);
  v37 = swift_bridgeObjectRelease(v34);
  *(_QWORD *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButton] = v36;
  v38 = v31(v37);
  *(_QWORD *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_quickAddButton] = specialized static MOSuggestionSheetInterstitialView.makeQuickAddButton(publicUI:)(v38 & 1);
  v39 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionInterstitialExpandableListView());
  v40 = a1;
  *(_QWORD *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView] = MOSuggestionInterstitialExpandableListView.init(controller:)(v40);
  v41 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionInterstitialCarouselView());
  *(_QWORD *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView] = MOSuggestionInterstitialCarouselView.init(controller:)(v40);

  v66.receiver = v14;
  v66.super_class = (Class)type metadata accessor for MOSuggestionSheetInterstitialView(0);
  v42 = (char *)objc_msgSendSuper2(&v66, "initWithNibName:bundle:", 0, 0);
  v43 = *(_QWORD **)&v42[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView];
  v44 = *(void (**)(char *, _UNKNOWN **))((swift_isaMask & *v43) + 0x198);
  v45 = v42;
  v46 = v43;
  v44(v42, &protocol witness table for MOSuggestionSheetInterstitialView);

  v47 = *(_QWORD **)&v45[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView];
  v48 = *(void (**)(char *, _UNKNOWN **))((swift_isaMask & *v47) + 0xF0);
  v49 = v45;
  v50 = v47;
  v48(v42, &protocol witness table for MOSuggestionSheetInterstitialView);

  v51 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v51, "addObserver:selector:name:object:", v49, "handleContentSizeChanged", UIContentSizeCategoryDidChangeNotification, 0);

  v52 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 176))();
  v53 = (uint64_t *)&v49[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString];
  v54 = *(_QWORD *)&v49[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString + 8];
  *v53 = v52;
  v53[1] = v55;
  swift_bridgeObjectRelease(v54);
  MOSuggestionSheetInterstitialView.updateTitleLabelString()();
  (*(void (**)(void))((swift_isaMask & *(_QWORD *)v49) + 0x318))();
  (*(void (**)(uint64_t))((swift_isaMask & *(_QWORD *)v49) + 0x3A8))(6);
  MOSuggestionSheetInterstitialView.updateConstraints()();

  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(a7, v29);
  return v49;
}

uint64_t type metadata accessor for MOSuggestionSheetInterstitialView(uint64_t a1)
{
  uint64_t result;

  result = type metadata singleton initialization cache for MOSuggestionSheetInterstitialView;
  if (!type metadata singleton initialization cache for MOSuggestionSheetInterstitialView)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MOSuggestionSheetInterstitialView);
  return result;
}

uint64_t sub_10003DA2C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003DA50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 40, 7);
}

void partial apply for closure #1 in MOSuggestionSheetInterstitialView.viewWillTransition(to:with:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in MOSuggestionSheetInterstitialView.viewWillTransition(to:with:)(*(double *)(v1 + 24), *(double *)(v1 + 32), a1, *(_QWORD *)(v1 + 16));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_1(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void specialized MOSuggestionSheetInterstitialView.init(coder:)()
{
  _BYTE *v0;
  char *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_controller]);
  v1 = &v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_presentationDelegate];
  *((_QWORD *)v1 + 1) = 0;
  swift_unknownObjectWeakInit(v1);
  v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_photoMemoryBanner] = 0;
  swift_weakInit(&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_cellViewModel]);
  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_toggleListViewCarouselButton] = 0;
  v2 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_scrollView;
  v3 = objc_msgSend(objc_allocWithZone((Class)UIScrollView), "init");
  objc_msgSend(v3, "setShowsVerticalScrollIndicator:", 0);
  *(_QWORD *)&v0[v2] = v3;
  v4 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_stackView;
  v5 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
  objc_msgSend(v5, "setAxis:", 1);
  objc_msgSend(v5, "setAlignment:", 3);
  objc_msgSend(v5, "setSpacing:", 3.0);
  *(_QWORD *)&v0[v4] = v5;
  v6 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_labelStackView;
  v7 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
  objc_msgSend(v7, "setAxis:", 0);
  objc_msgSend(v7, "setAlignment:", 3);
  *(_QWORD *)&v0[v6] = v7;
  v8 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleLabel;
  closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.titleLabel();
  *(_QWORD *)&v0[v8] = v9;
  v10 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_dateLabel;
  *(_QWORD *)&v0[v10] = closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.dateLabel();
  v11 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetTypeLabel;
  *(_QWORD *)&v0[v11] = closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.assetTypeLabel();
  v12 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_emptySelectionLabel;
  *(_QWORD *)&v0[v12] = closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.emptySelectionLabel();
  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_portraitConstraints] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_landscapeConstraints] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_commonConstraints] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonLeadingConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonTrailingConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonBottomConstraint] = 0;
  v13 = &v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString];
  *v13 = 0;
  v13[1] = 0;
  v14 = &v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_modifiedTitleString];
  *v14 = 0;
  v14[1] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001A6460, "MomentsUIService/MOSuggestionSheetInterstitialView.swift", 56, 2, 431, 0);
  __break(1u);
}

void partial apply for closure #1 in MOSuggestionSheetInterstitialView.updateAssetTypes()()
{
  uint64_t v0;

  closure #1 in MOSuggestionSheetInterstitialView.updateAssetTypes()(v0);
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

void specialized MOSuggestionSheetInterstitialView.journalButtonTapped(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  _QWORD *v17;

  v1 = v0;
  v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x1C8))();
  if (v2)
  {
    v3 = v2;
    v4 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x138))();
    if (v4)
    {
      v17 = (_QWORD *)v4;
      v5 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x390))();
      v6 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x3A0))(v5);
      v7 = (*(uint64_t (**)(uint64_t, _QWORD))((char *)v0
                                                      + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_selectedSuggestion))((uint64_t)v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_indexPath, 0);
      v8 = IndexPath.row.getter(v7);
      v9 = *(_QWORD *)((char *)v1
                     + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_modifiedTitleString);
      v10 = *(_QWORD *)((char *)v1
                      + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_modifiedTitleString
                      + 8);
      v11 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v3 + 528);
      swift_bridgeObjectRetain(v10);
      v11(v8, v9, v10, v6 & 1, v17);
      swift_bridgeObjectRelease(v10);
      (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0x3A8))(5);
      if (((*(uint64_t (**)(void))((swift_isaMask & *v17) + 0x1C0))() & 1) != 0)
      {
        v12 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x150))();
        if (v12)
        {
          v14 = v12;
          v15 = v13;
          ObjectType = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t))(v15 + 16))(ObjectType, v15);
          swift_unknownObjectRelease(v14);
        }
        objc_msgSend(v1, "dismissViewControllerAnimated:completion:", 1, 0);
      }
      swift_release(v3);

    }
    else
    {
      swift_release(v3);
    }
  }
}

void specialized MOSuggestionSheetInterstitialView.handleLabelEditTap(_:)()
{
  char *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  void *object;
  NSString v10;
  _QWORD *v11;
  id v12;
  Swift::String v13;
  Swift::String v14;
  void *v15;
  NSString v16;
  void *v17;
  id v18;
  id v19;
  Swift::String v20;
  Swift::String v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  NSString v26;
  void *v27;
  id v28;
  _QWORD aBlock[5];
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString + 8];
  if (v1)
  {
    v2 = v0;
    v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString];
    v4 = type metadata accessor for MOSuggestionInterstitialAlertController();
    v5 = (void *)objc_opt_self(NSBundle);
    swift_bridgeObjectRetain(v1);
    v6 = objc_msgSend(v5, "mainBundle");
    v31._countAndFlagsBits = 0xD00000000000004ALL;
    v31._object = (void *)0x80000001001A70F0;
    v7._countAndFlagsBits = 0x7469542074696445;
    v7._object = (void *)0xEA0000000000656CLL;
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v31)._object;

    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "alertControllerWithTitle:message:preferredStyle:", v10, 0, 1);

    (*(void (**)(uint64_t, uint64_t))((swift_isaMask & *v11) + 0x58))(v3, v1);
    swift_bridgeObjectRelease(v1);
    v12 = objc_msgSend(v5, "mainBundle");
    v32._countAndFlagsBits = 0xD000000000000049;
    v32._object = (void *)0x80000001001A7140;
    v13._countAndFlagsBits = 0x6C65636E6143;
    v13._object = (void *)0xE600000000000000;
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v32)._object;

    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    v17 = (void *)objc_opt_self(UIAlertAction);
    v18 = objc_msgSend(v17, "actionWithTitle:style:handler:", v16, 1, 0);

    objc_msgSend(v11, "addAction:", v18);
    v19 = objc_msgSend(v5, "mainBundle");
    v33._object = (void *)0x80000001001A7190;
    v20._countAndFlagsBits = 0x6D7269666E6F43;
    v20._object = (void *)0xE700000000000000;
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    v33._countAndFlagsBits = 0xD000000000000044;
    v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, (Swift::String_optional)0, (NSBundle)v19, v21, v33)._object;

    v23 = swift_allocObject(&unk_1001E5318, 24, 7);
    swift_unknownObjectWeakInit(v23 + 16);
    v24 = swift_allocObject(&unk_1001E5578, 32, 7);
    *(_QWORD *)(v24 + 16) = v11;
    *(_QWORD *)(v24 + 24) = v23;
    v25 = v11;
    swift_retain(v23);
    v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v22);
    aBlock[4] = partial apply for closure #1 in MOSuggestionSheetInterstitialView.handleLabelEditTap(_:);
    v30 = v24;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
    aBlock[3] = &block_descriptor_36;
    v27 = _Block_copy(aBlock);
    v28 = objc_msgSend(v17, "actionWithTitle:style:handler:", v26, 0, v27, swift_release(v30).n128_f64[0]);
    _Block_release(v27);
    swift_release(v23);

    objc_msgSend(v25, "addAction:", v28);
    objc_msgSend(v2, "presentViewController:animated:completion:", v25, 1, 0);

  }
}

void specialized MOSuggestionSheetInterstitialView.didToggleListCarouselViewButton(carouselIndex:)()
{
  unsigned __int8 *v0;
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(void);
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  unsigned __int8 *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t (*v21)(void);
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t (*v28)(void);
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = v0;
  v2 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode;
  if (v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode] == 1)
  {
    MOSuggestionSheetInterstitialView.showCarousel()();
  }
  else
  {
    v3 = *(_QWORD **)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView];
    v4 = *(uint64_t (**)(void))((swift_isaMask & *v3) + 0xB8);
    v5 = v3;
    v6 = v4();

    if ((unint64_t)v6 >> 62)
    {
      if (v6 < 0)
        v34 = v6;
      else
        v34 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      v7 = _CocoaArrayWrapper.endIndex.getter(v34);
      swift_bridgeObjectRelease(v6);
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v6);
    if (v7)
    {
      MOSuggestionSheetInterstitialView.showListView()();
    }
    else
    {
      v8 = swift_allocObject(&unk_1001E5318, 24, 7);
      swift_unknownObjectWeakInit(v8 + 16);
      swift_retain(v8);
      MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:)((uint64_t)partial apply for closure #1 in MOSuggestionSheetInterstitialView.didToggleListCarouselViewButton(carouselIndex:), v8);
      swift_release_n(v8, 2, v9);
    }
  }
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1)
    swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
  v10 = type metadata accessor for Logger(0);
  __swift_project_value_buffer(v10, (uint64_t)static MOAngelLogger.assets);
  v11 = v1;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v36 = v15;
    v16 = v1[v2];
    *(_DWORD *)v14 = 136315394;
    v17 = v16 == 0;
    v18 = 272;
    if (!v17)
      v18 = 208;
    v19 = &OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView;
    if (v17)
      v19 = &OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
    v20 = *(_QWORD **)&v11[*v19];
    v21 = *(uint64_t (**)(void))((swift_isaMask & *v20) + v18);
    v22 = v20;
    v23 = v21();

    v24 = Set.debugDescription.getter(v23, &type metadata for String, &protocol witness table for String);
    v26 = v25;
    swift_bridgeObjectRelease(v23);
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v14 + 4);

    swift_bridgeObjectRelease(v26);
    *(_WORD *)(v14 + 12) = 2080;
    v27 = *(_QWORD **)&v11[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView];
    v28 = *(uint64_t (**)(void))((swift_isaMask & *v27) + 0x110);
    v29 = v27;
    v30 = v28();

    v31 = Set.debugDescription.getter(v30, &type metadata for String, &protocol witness table for String);
    v33 = v32;
    swift_bridgeObjectRelease(v30);
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v14 + 14);

    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "[Interstitial] currentlySelected: %s, selectedList: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

  }
  MOSuggestionSheetInterstitialView.setNavBar()();
}

unint64_t lazy protocol witness table accessor for type AssetViewMode and conformance AssetViewMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AssetViewMode and conformance AssetViewMode;
  if (!lazy protocol witness table cache variable for type AssetViewMode and conformance AssetViewMode)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AssetViewMode, &type metadata for AssetViewMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AssetViewMode and conformance AssetViewMode);
  }
  return result;
}

uint64_t sub_10003E710@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x138))();
  *a2 = result;
  return result;
}

uint64_t sub_10003E750(id *a1, _QWORD **a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))((swift_isaMask & **a2) + 0x140);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_10003E79C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x150))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10003E7DC(_QWORD *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = a1[1];
  v3 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0x158);
  v4 = swift_unknownObjectRetain(*a1);
  return v3(v4, v2);
}

uint64_t sub_10003E82C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x1C8))();
  *a2 = result;
  return result;
}

uint64_t sub_10003E86C(_QWORD *a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x1D0);
  v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t getEnumTagSinglePayload for AssetViewMode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetViewMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10003E988 + 4 * byte_10019F0D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10003E9BC + 4 * byte_10019F0D0[v4]))();
}

uint64_t sub_10003E9BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003E9C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003E9CCLL);
  return result;
}

uint64_t sub_10003E9D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003E9E0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10003E9E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003E9EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for AssetViewMode(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AssetViewMode()
{
  return &type metadata for AssetViewMode;
}

ValueMetadata *type metadata accessor for MOSuggestionSheetInterstitialViewConstants()
{
  return &type metadata for MOSuggestionSheetInterstitialViewConstants;
}

uint64_t ObjC metadata update function for MOSuggestionSheetInterstitialView()
{
  return type metadata accessor for MOSuggestionSheetInterstitialView(0);
}

uint64_t type metadata completion function for MOSuggestionSheetInterstitialView(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[29];

  v4[0] = "\b";
  v4[1] = &unk_10019F270;
  v4[2] = (char *)&value witness table for () + 64;
  result = type metadata accessor for IndexPath(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_10019F288;
    v4[5] = &unk_10019F288;
    v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[9] = &unk_10019F2A0;
    v4[10] = "\b";
    v4[11] = &unk_10019F2A0;
    v4[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[14] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[15] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[16] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[17] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[18] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[19] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[20] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[21] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[22] = &unk_10019F2A0;
    v4[23] = &unk_10019F2A0;
    v4[24] = &unk_10019F2A0;
    v4[25] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[26] = &unk_10019F2B8;
    v4[27] = &unk_10019F2B8;
    v4[28] = (char *)&value witness table for Builtin.UnknownObject + 64;
    return swift_updateClassMetadata2(a1, 256, 29, v4, a1 + 80);
  }
  return result;
}

void partial apply for closure #1 in MOSuggestionSheetInterstitialView.showListView()()
{
  uint64_t v0;

  closure #1 in MOSuggestionSheetInterstitialView.showListView()(v0);
}

uint64_t sub_10003EB28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10003EB38()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void partial apply for closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:)(uint64_t a1)
{
  uint64_t *v1;

  closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t outlined init with copy of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003EBBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1 = type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  swift_release(*(_QWORD *)(v0 + v4));
  v6 = v0 + v4 + *(int *)(v1 + 24);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = (((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + v9));
  swift_release(*(_QWORD *)(v0 + v10 + 8));
  return swift_deallocObject(v0, v10 + 16, v3 | 7);
}

uint64_t outlined init with take of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(0)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:)(*(_QWORD **)(v0 + 16), (uint64_t *)(v0 + v2), *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(__n128))(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t outlined init with copy of UIButton.Configuration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UIButton.Configuration?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #1 in MOSuggestionSheetInterstitialView.didToggleListCarouselViewButton(carouselIndex:)()
{
  uint64_t v0;

  closure #1 in MOSuggestionSheetInterstitialView.didToggleListCarouselViewButton(carouselIndex:)(v0);
}

uint64_t sub_10003EDD8()
{
  return objectdestroy_32Tm(32);
}

void partial apply for closure #1 in MOSuggestionSheetInterstitialView.handleLabelEditTap(_:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in MOSuggestionSheetInterstitialView.handleLabelEditTap(_:)(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t outlined destroy of String(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for String - 1) + 8))();
  return a1;
}

uint64_t sub_10003EE1C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in closure #1 in MOSuggestionSheetInterstitialView.updateAssetTypes()()
{
  uint64_t v0;

  closure #1 in closure #1 in MOSuggestionSheetInterstitialView.updateAssetTypes()(*(_QWORD *)(v0 + 16));
}

void partial apply for closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForCarousel()(uint64_t *a1)
{
  uint64_t v1;

  closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForCarousel()(a1, v1);
}

uint64_t sub_10003EE50()
{
  return objectdestroy_32Tm(40);
}

uint64_t objectdestroy_32Tm(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 24));
  return swift_deallocObject(v1, a1, 7);
}

void partial apply for closure #1 in closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForCarousel()()
{
  uint64_t *v0;

  closure #1 in closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForCarousel()(v0[2], v0[3], v0[4]);
}

uint64_t MOSuggestionSheetMosaicLayout.cachedAttributes.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_cachedAttributes);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_cachedAttributes, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t MOSuggestionSheetMosaicLayout.cachedAttributes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_cachedAttributes);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*MOSuggestionSheetMosaicLayout.cachedAttributes.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_cachedAttributes, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

double MOSuggestionSheetMosaicLayout.contentBounds.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_contentBounds;
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_contentBounds, v3, 0, 0);
  return *(double *)v1;
}

uint64_t MOSuggestionSheetMosaicLayout.contentBounds.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  double *v9;
  uint64_t result;
  _BYTE v11[24];

  v9 = (double *)(v4 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_contentBounds);
  result = swift_beginAccess(v4 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_contentBounds, v11, 1, 0);
  *v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  return result;
}

uint64_t (*MOSuggestionSheetMosaicLayout.contentBounds.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_contentBounds, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionSheetMosaicLayout.isFullHeight.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_isFullHeight);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_isFullHeight, v3, 0, 0);
  return *v1;
}

uint64_t MOSuggestionSheetMosaicLayout.isFullHeight.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_isFullHeight);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*MOSuggestionSheetMosaicLayout.isFullHeight.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_isFullHeight, a1, 33, 0);
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

uint64_t MOSuggestionSheetMosaicLayout.mosaicSegmentDelegate.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_mosaicSegmentDelegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_mosaicSegmentDelegate, v3, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t MOSuggestionSheetMosaicLayout.mosaicSegmentDelegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  v5 = v2 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_mosaicSegmentDelegate;
  swift_beginAccess(v5, v7, 1, 0);
  *(_QWORD *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1);
}

void (*MOSuggestionSheetMosaicLayout.mosaicSegmentDelegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_mosaicSegmentDelegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return MOSuggestionSheetAssetGridView.delegate.modify;
}

Swift::Void __swiftcall MOSuggestionSheetMosaicLayout.prepare()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  objc_class *v3;
  id v4;
  void *v5;
  void (*v6)(uint64_t, _UNKNOWN **);
  uint64_t v7;
  void (*v8)(CGRect *, _QWORD);
  uint64_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  CGFloat v18;
  uint64_t v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  uint64_t v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat width;
  CGFloat height;
  uint64_t v31;
  CGPoint v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  double v36;
  CGFloat x;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  uint64_t v41;
  CGPoint v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  double v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  uint64_t v52;
  CGPoint v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  uint64_t v58;
  uint64_t v59;
  CGPoint v60;
  CGFloat v61;
  CGFloat v62;
  CGFloat v63;
  double v64;
  CGFloat v65;
  CGFloat y;
  CGFloat v67;
  CGFloat v68;
  uint64_t v69;
  CGFloat v70;
  CGFloat v71;
  CGFloat v72;
  CGFloat v73;
  CGFloat v74;
  CGFloat v75;
  CGPoint v76;
  CGPoint v77;
  unint64_t v78;
  CGPoint v79;
  CGPoint v80;
  CGPoint v81;
  CGPoint v82;
  CGFloat v83;
  double v84;
  CGFloat v85;
  double v86;
  CGPoint *v87;
  CGFloat v88;
  unint64_t v89;
  uint64_t v90;
  CGPoint *v91;
  CGPoint v92;
  CGPoint v93;
  unint64_t v94;
  unint64_t v95;
  CGPoint *v96;
  _QWORD *v97;
  CGFloat v98;
  double v99;
  double v100;
  double v101;
  CGPoint *v102;
  CGFloat v103;
  unint64_t v104;
  uint64_t v105;
  CGPoint *v106;
  CGPoint v107;
  CGPoint v108;
  unint64_t v109;
  unint64_t v110;
  CGPoint *v111;
  _QWORD *v112;
  CGFloat v113;
  double v114;
  double v115;
  double v116;
  CGPoint *v117;
  CGFloat v118;
  unint64_t v119;
  uint64_t v120;
  CGPoint *v121;
  CGPoint v122;
  CGPoint v123;
  unint64_t v124;
  unint64_t v125;
  CGPoint *v126;
  _QWORD *v127;
  __int128 v128;
  __int128 v129;
  CGPoint *v130;
  CGFloat v131;
  unint64_t v132;
  uint64_t v133;
  CGPoint *v134;
  CGPoint v135;
  CGPoint v136;
  unint64_t v137;
  unint64_t v138;
  CGPoint *v139;
  _QWORD *v140;
  __int128 v141;
  __int128 v142;
  CGPoint *v143;
  CGFloat v144;
  unint64_t v145;
  uint64_t v146;
  CGPoint *v147;
  CGPoint v148;
  CGPoint v149;
  unint64_t v150;
  unint64_t v151;
  CGPoint *v152;
  _QWORD *v153;
  __int128 v154;
  __int128 v155;
  CGPoint *v156;
  CGFloat v157;
  unint64_t v158;
  uint64_t v159;
  CGPoint *v160;
  CGPoint v161;
  CGPoint v162;
  unint64_t v163;
  unint64_t v164;
  CGPoint *v165;
  _QWORD *v166;
  __int128 v167;
  __int128 v168;
  CGPoint *v169;
  CGFloat v170;
  unint64_t v171;
  uint64_t v172;
  CGPoint *v173;
  CGPoint v174;
  CGPoint v175;
  unint64_t v176;
  unint64_t v177;
  CGPoint *v178;
  _QWORD *v179;
  __int128 v180;
  __int128 v181;
  CGPoint *v182;
  CGFloat v183;
  unint64_t v184;
  uint64_t v185;
  CGPoint *v186;
  CGPoint v187;
  CGPoint v188;
  unint64_t v189;
  unint64_t v190;
  CGPoint *v191;
  _QWORD *v192;
  unint64_t v193;
  unint64_t v194;
  CGFloat *v195;
  CGFloat v196;
  CGFloat v197;
  CGFloat v198;
  CGFloat v199;
  unint64_t v200;
  unint64_t v201;
  int64_t v202;
  unint64_t v203;
  _QWORD *v204;
  CGFloat v205;
  CGFloat v206;
  double *v207;
  CGFloat v208;
  CGFloat v209;
  CGFloat v210;
  double v211;
  double v212;
  unint64_t v213;
  unint64_t v214;
  int64_t v215;
  unint64_t v216;
  _QWORD *v217;
  unint64_t v218;
  double *v219;
  unint64_t v220;
  CGFloat v221;
  CGFloat v222;
  CGFloat *v223;
  CGFloat v224;
  CGFloat *v225;
  CGFloat v226;
  CGFloat v227;
  CGFloat v228;
  CGFloat v229;
  unint64_t v230;
  unint64_t v231;
  int64_t v232;
  unint64_t v233;
  CGFloat *v234;
  unint64_t v235;
  CGFloat v236;
  CGFloat v237;
  CGFloat v238;
  CGFloat v239;
  _QWORD *v240;
  unint64_t v241;
  unint64_t v242;
  _QWORD *v243;
  unint64_t v244;
  CGFloat *v245;
  __int128 v246;
  __int128 v247;
  CGFloat v248;
  CGFloat v249;
  __int128 v250;
  uint64_t v251;
  uint64_t v252;
  CGFloat v253;
  CGFloat v254;
  CGSize v255;
  CGSize v256;
  unint64_t v257;
  unint64_t v258;
  int64_t v259;
  unint64_t v260;
  CGSize *v261;
  CGSize v262;
  CGSize v263;
  unint64_t v264;
  CGSize *v265;
  CGSize v266;
  CGSize v267;
  unint64_t v268;
  unint64_t v269;
  CGSize *v270;
  CGSize v271;
  CGSize v272;
  unint64_t v273;
  CGSize *v274;
  unint64_t v275;
  unint64_t v276;
  CGFloat v277;
  __int128 v278;
  __int128 v279;
  CGFloat v280;
  CGFloat v281;
  __int128 v282;
  uint64_t v283;
  uint64_t v284;
  CGFloat v285;
  CGFloat v286;
  CGSize v287;
  CGSize v288;
  unint64_t v289;
  unint64_t v290;
  int64_t v291;
  unint64_t v292;
  CGSize *v293;
  CGSize v294;
  CGSize v295;
  unint64_t v296;
  CGSize *v297;
  CGSize v298;
  CGSize v299;
  unint64_t v300;
  unint64_t v301;
  CGSize *v302;
  CGSize v303;
  CGSize v304;
  unint64_t v305;
  CGSize *v306;
  CGPoint v307;
  CGSize size;
  CGPoint v309;
  CGPoint v310;
  unint64_t v311;
  unint64_t v312;
  int64_t v313;
  unint64_t v314;
  CGPoint *v315;
  CGPoint *v316;
  __int128 v317;
  __int128 v318;
  CGFloat v319;
  CGFloat v320;
  __int128 v321;
  uint64_t v322;
  uint64_t v323;
  CGFloat v324;
  CGFloat v325;
  CGSize v326;
  CGSize v327;
  unint64_t v328;
  unint64_t v329;
  int64_t v330;
  unint64_t v331;
  CGSize *v332;
  CGSize v333;
  CGSize v334;
  unint64_t v335;
  CGSize *v336;
  CGSize v337;
  CGSize v338;
  unint64_t v339;
  unint64_t v340;
  CGSize *v341;
  CGSize v342;
  CGSize v343;
  unint64_t v344;
  CGSize *v345;
  uint64_t v346;
  uint64_t v347;
  CGPoint v348;
  CGSize v349;
  CGPoint v350;
  CGPoint v351;
  unint64_t v352;
  unint64_t v353;
  int64_t v354;
  unint64_t v355;
  CGPoint *v356;
  unint64_t v357;
  CGPoint *v358;
  unint64_t v359;
  _QWORD *v360;
  __int128 v361;
  __int128 v362;
  CGFloat v363;
  CGFloat v364;
  __int128 v365;
  uint64_t v366;
  uint64_t v367;
  _QWORD *v368;
  _OWORD *v369;
  CGFloat v370;
  CGFloat v371;
  _QWORD *v372;
  CGSize v373;
  CGSize v374;
  unint64_t v375;
  unint64_t v376;
  int64_t v377;
  unint64_t v378;
  CGSize *v379;
  CGSize v380;
  CGSize v381;
  unint64_t v382;
  CGSize *v383;
  CGSize v384;
  CGSize v385;
  unint64_t v386;
  unint64_t v387;
  CGSize *v388;
  CGSize v389;
  CGSize v390;
  unint64_t v391;
  CGSize *v392;
  _OWORD *v393;
  __int128 v394;
  __int128 v395;
  CGFloat v396;
  CGFloat v397;
  __int128 v398;
  uint64_t v399;
  CGFloat v400;
  uint64_t v401;
  CGFloat v402;
  CGFloat v403;
  CGFloat v404;
  unint64_t v405;
  unint64_t v406;
  int64_t v407;
  unint64_t v408;
  CGFloat *v409;
  CGPoint v410;
  CGPoint v411;
  unint64_t v412;
  CGPoint *v413;
  CGPoint v414;
  CGPoint v415;
  unint64_t v416;
  unint64_t v417;
  CGPoint *v418;
  CGPoint v419;
  CGPoint v420;
  unint64_t v421;
  CGPoint *v422;
  uint64_t v423;
  _QWORD *v424;
  void *v425;
  double (*v426)(uint64_t);
  double *v427;
  double v428;
  double v429;
  double v430;
  double v431;
  char *v432;
  Class isa;
  id v434;
  id v435;
  uint64_t (*v436)(CGRect *, _QWORD);
  _QWORD *v437;
  _QWORD *v438;
  _QWORD *v439;
  unint64_t v440;
  unint64_t v441;
  uint64_t v442;
  uint64_t v443;
  _QWORD *v444;
  _QWORD *v445;
  _QWORD *v446;
  _QWORD *v447;
  _QWORD *v448;
  _QWORD *v449;
  _QWORD *v450;
  _QWORD *v451;
  _QWORD *v452;
  _QWORD *v453;
  _QWORD *v454;
  _QWORD *v455;
  _QWORD *v456;
  _QWORD *v457;
  _QWORD *v458;
  _QWORD *v459;
  _QWORD *v460;
  _QWORD *v461;
  _QWORD *v462;
  _QWORD *v463;
  _QWORD *v464;
  _QWORD *v465;
  _QWORD *v466;
  double v467;
  double v468;
  uint64_t v469;
  double v470;
  _QWORD *v471;
  _QWORD *v472;
  _QWORD *v473;
  _QWORD *v474;
  _QWORD *v475;
  uint64_t v476;
  id v477;
  CGPoint v478;
  __int128 v479;
  CGPoint v480;
  CGPoint v481;
  CGPoint v482;
  CGPoint v483;
  CGSize v484;
  CGSize v485;
  CGPoint origin;
  CGPoint v487;
  CGPoint v488;
  __int128 v489;
  CGFloat v490;
  CGFloat v491;
  uint64_t v492;
  CGFloat v493;
  CGFloat v494;
  uint64_t v495;
  CGPoint v496;
  void (*v497)(__n128, __n128, __n128, __n128);
  uint64_t (*v498)(CGRect *);
  char *v499;
  uint64_t v500;
  uint64_t v501;
  CGRect remainder;
  objc_super v503;
  CGRect slice;
  _BYTE v505[32];
  uint64_t v506;
  CGRect v507;
  CGRect v508;
  CGRect v509;
  CGRect v510;
  CGRect v511;
  CGRect v512;
  CGRect v513;
  CGRect v514;
  CGRect v515;
  CGRect v516;
  CGRect v517;
  CGRect v518;
  CGRect v519;
  CGRect v520;
  CGRect v521;
  CGRect v522;
  CGRect v523;
  CGRect v524;
  CGRect v525;
  CGRect v526;
  CGRect v527;

  v1 = v0;
  v501 = type metadata accessor for IndexPath(0);
  v500 = *(_QWORD *)(v501 - 8);
  __chkstk_darwin(v501);
  v499 = (char *)&v476 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = (objc_class *)type metadata accessor for MOSuggestionSheetMosaicLayout();
  v503.receiver = v0;
  v503.super_class = v3;
  objc_msgSendSuper2(&v503, "prepareLayout");
  v4 = objc_msgSend(v0, "collectionView");
  if (v4)
  {
    v5 = v4;
    v6 = *(void (**)(uint64_t, _UNKNOWN **))((swift_isaMask & *v0) + 0xC0);
    v7 = swift_unknownObjectRetain();
    v6(v7, &protocol witness table for MOSuggestionSheetMosaicLayout);
    v498 = *(uint64_t (**)(CGRect *))((swift_isaMask & *v0) + 0x80);
    v8 = (void (*)(CGRect *, _QWORD))v498(&slice);
    v10 = *v9;
    *v9 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v10);
    v8(&slice, 0);
    v11 = objc_msgSend(v5, "bounds");
    v497 = *(void (**)(__n128, __n128, __n128, __n128))((swift_isaMask & *v1) + 0x90);
    ((void (*)(id, double, double))v497)(v11, 0.0, 0.0);
    v12 = (uint64_t)objc_msgSend(v5, "numberOfItemsInSection:", 0);
    objc_msgSend(v5, "bounds");
    v14 = v13;
    (*(void (**)(uint64_t, double))((swift_isaMask & *v1) + 0xD0))(v12, v13);
    v495 = v12;
    v16 = v12 - 1;
    if (v12 < 1)
    {

    }
    else
    {
      v477 = v5;
      v17 = 0;
      v493 = v15;
      v490 = ceil(v15 * 0.5);
      v18 = 0.0;
      v494 = v14;
      v19 = (uint64_t)_swiftEmptyArrayStorage;
      v491 = ceil(v14 * 0.5);
      v489 = xmmword_10019ED20;
      v20 = 0.0;
      v21 = 0.0;
      v22 = 0.0;
      v492 = v12 - 1;
LABEL_5:
      switch(v16)
      {
        case 0:
          swift_bridgeObjectRelease(v19);
          v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
          v19 = swift_allocObject(v23, 64, 7);
          *(_OWORD *)(v19 + 16) = v489;
          *(_QWORD *)(v19 + 32) = 0;
          *(_QWORD *)(v19 + 40) = 0;
          v24 = v493;
          *(CGFloat *)(v19 + 48) = v494;
          *(CGFloat *)(v19 + 56) = v24;
          goto LABEL_179;
        case 1:
          swift_bridgeObjectRelease(v19);
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v507.origin.x = 0.0;
          v507.origin.y = 0.0;
          v25 = v494;
          v507.size.width = v494;
          v26 = v493;
          v507.size.height = v493;
          v27 = v491;
          CGRectDivide(v507, &slice, &remainder, v491, CGRectMinXEdge);
          v496.x = remainder.origin.y;
          v488.x = remainder.size.height;
          v28 = remainder.origin.x + 1.0;
          v487.x = remainder.size.width + -1.0;
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v508.origin.x = 0.0;
          v508.origin.y = 0.0;
          v508.size.width = v25;
          v508.size.height = v26;
          CGRectDivide(v508, &slice, &remainder, v27, CGRectMinXEdge);
          origin = slice.origin;
          width = slice.size.width;
          height = slice.size.height;
          v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
          v19 = swift_allocObject(v31, 96, 7);
          v32 = origin;
          *(_OWORD *)(v19 + 16) = xmmword_10019EEE0;
          *(CGPoint *)(v19 + 32) = v32;
          *(CGFloat *)(v19 + 48) = width;
          *(CGFloat *)(v19 + 56) = height;
          v32.x = v496.x;
          *(CGFloat *)(v19 + 64) = v28;
          *(CGFloat *)(v19 + 72) = v32.x;
          v32.x = v488.x;
          *(CGFloat *)(v19 + 80) = v487.x;
          *(CGFloat *)(v19 + 88) = v32.x;
          goto LABEL_179;
        case 2:
          swift_bridgeObjectRelease(v19);
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v509.origin.x = 0.0;
          v509.origin.y = 0.0;
          v33 = v494;
          v509.size.width = v494;
          v34 = v493;
          v509.size.height = v493;
          v35 = v491;
          CGRectDivide(v509, &slice, &remainder, v491, CGRectMinXEdge);
          origin.x = remainder.origin.y;
          v36 = remainder.size.height;
          v485.width = remainder.origin.x + 1.0;
          v484.width = remainder.size.width + -1.0;
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v510.origin.x = 0.0;
          v510.origin.y = 0.0;
          v510.size.width = v33;
          v510.size.height = v34;
          CGRectDivide(v510, &slice, &remainder, v35, CGRectMinXEdge);
          v496 = slice.origin;
          v488.x = slice.size.width;
          v487.x = slice.size.height;
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v511.origin.x = v485.width;
          v511.origin.y = origin.x;
          v511.size.width = v484.width;
          v511.size.height = v36;
          CGRectDivide(v511, &slice, &remainder, ceil(v36 * 0.5), CGRectMinYEdge);
          origin = slice.origin;
          v485.width = slice.size.width;
          v484.width = slice.size.height;
          x = remainder.origin.x;
          v38 = remainder.size.width;
          v39 = remainder.origin.y + 1.0;
          v40 = remainder.size.height + -1.0;
          v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
          v19 = swift_allocObject(v41, 128, 7);
          v42 = v496;
          *(_OWORD *)(v19 + 16) = xmmword_10019F2D0;
          *(CGPoint *)(v19 + 32) = v42;
          v42.x = v487.x;
          *(CGFloat *)(v19 + 48) = v488.x;
          *(CGFloat *)(v19 + 56) = v42.x;
          *(CGPoint *)(v19 + 64) = origin;
          v42.x = v484.width;
          *(CGFloat *)(v19 + 80) = v485.width;
          *(CGFloat *)(v19 + 88) = v42.x;
          *(CGFloat *)(v19 + 96) = x;
          *(CGFloat *)(v19 + 104) = v39;
          *(CGFloat *)(v19 + 112) = v38;
          *(CGFloat *)(v19 + 120) = v40;
          goto LABEL_179;
        case 3:
          swift_bridgeObjectRelease(v19);
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v512.origin.x = 0.0;
          v512.origin.y = 0.0;
          v43 = v494;
          v512.size.width = v494;
          v44 = v493;
          v512.size.height = v493;
          v45 = v491;
          CGRectDivide(v512, &slice, &remainder, v491, CGRectMinXEdge);
          origin.x = remainder.origin.y;
          v46 = remainder.size.height;
          v485.width = remainder.origin.x + 1.0;
          v484.width = remainder.size.width + -1.0;
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v513.origin.x = 0.0;
          v513.origin.y = 0.0;
          v513.size.width = v43;
          v513.size.height = v44;
          CGRectDivide(v513, &slice, &remainder, v45, CGRectMinXEdge);
          v496 = slice.origin;
          v488.x = slice.size.width;
          v487.x = slice.size.height;
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v514.origin.x = v485.width;
          v514.origin.y = origin.x;
          v514.size.width = v484.width;
          v514.size.height = v46;
          CGRectDivide(v514, &slice, &remainder, ceil(v46 * 0.5), CGRectMinYEdge);
          origin = slice.origin;
          v485.width = slice.size.width;
          v484.width = slice.size.height;
          v515.origin.x = remainder.origin.x;
          v515.size.width = remainder.size.width;
          v515.origin.y = remainder.origin.y + 1.0;
          v515.size.height = remainder.size.height + -1.0;
          v47 = ceil(remainder.size.width * 0.5);
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          CGRectDivide(v515, &slice, &remainder, v47, CGRectMinXEdge);
          v483 = slice.origin;
          v48 = slice.size.width;
          v49 = slice.size.height;
          v482.x = remainder.origin.y;
          v481.x = remainder.size.height;
          v50 = remainder.origin.x + 1.0;
          v51 = remainder.size.width + -1.0;
          v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
          v19 = swift_allocObject(v52, 160, 7);
          v53 = v496;
          *(_OWORD *)(v19 + 16) = xmmword_10019ED30;
          *(CGPoint *)(v19 + 32) = v53;
          v53.x = v487.x;
          *(CGFloat *)(v19 + 48) = v488.x;
          *(CGFloat *)(v19 + 56) = v53.x;
          *(CGPoint *)(v19 + 64) = origin;
          v53.x = v484.width;
          *(CGFloat *)(v19 + 80) = v485.width;
          *(CGFloat *)(v19 + 88) = v53.x;
          *(CGPoint *)(v19 + 96) = v483;
          *(CGFloat *)(v19 + 112) = v48;
          *(CGFloat *)(v19 + 120) = v49;
          v53.x = v482.x;
          *(CGFloat *)(v19 + 128) = v50;
          *(CGFloat *)(v19 + 136) = v53.x;
          v53.x = v481.x;
          *(CGFloat *)(v19 + 144) = v51;
          *(CGFloat *)(v19 + 152) = v53.x;
          goto LABEL_179;
        case 4:
          swift_bridgeObjectRelease(v19);
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v516.origin.x = 0.0;
          v516.origin.y = 0.0;
          v516.size.width = v494;
          v516.size.height = v493;
          CGRectDivide(v516, &slice, &remainder, v491, CGRectMinXEdge);
          v487 = slice.origin;
          v54 = slice.size.width;
          v55 = slice.size.height;
          v496.x = remainder.origin.y;
          v488.x = remainder.size.height;
          v56 = remainder.origin.x + 1.0;
          v57 = remainder.size.width + -1.0;
          v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
          v59 = swift_allocObject(v58, 64, 7);
          v60 = v487;
          *(_OWORD *)(v59 + 16) = v489;
          *(CGPoint *)(v59 + 32) = v60;
          *(CGFloat *)(v59 + 48) = v54;
          *(CGFloat *)(v59 + 56) = v55;
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v60.x = v56;
          v61 = v496.x;
          v62 = v57;
          v63 = v488.x;
          CGRectDivide(*(CGRect *)&v60.x, &slice, &remainder, ceil(v57 * 0.5), CGRectMinXEdge);
          v517 = slice;
          origin.x = remainder.origin.y;
          v64 = remainder.size.height;
          v483.x = remainder.origin.x + 1.0;
          v482.x = remainder.size.width + -1.0;
          v65 = ceil(slice.size.height * 0.5);
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          CGRectDivide(v517, &slice, &remainder, v65, CGRectMinYEdge);
          v67 = slice.origin.x;
          y = slice.origin.y;
          v68 = slice.size.width;
          v484.width = slice.size.height;
          v496.x = remainder.origin.x;
          v488.x = remainder.size.width;
          v485.width = remainder.origin.y + 1.0;
          v487.x = remainder.size.height + -1.0;
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v518.origin.x = v483.x;
          v518.origin.y = origin.x;
          v518.size.width = v482.x;
          v518.size.height = v64;
          CGRectDivide(v518, &slice, &remainder, ceil(v64 * 0.5), CGRectMinYEdge);
          v480 = slice.origin;
          *(CGFloat *)&v479 = slice.size.width;
          v478.x = slice.size.height;
          origin.x = remainder.origin.x;
          v483.x = remainder.size.width;
          v481.x = remainder.origin.y + 1.0;
          v482.x = remainder.size.height + -1.0;
          v69 = swift_allocObject(v58, 160, 7);
          *(CGFloat *)(v69 + 32) = v67;
          *(CGFloat *)(v69 + 40) = y;
          v70 = v484.width;
          *(CGFloat *)(v69 + 48) = v68;
          *(CGFloat *)(v69 + 56) = v70;
          *(CGPoint *)(v69 + 64) = v480;
          v71 = v478.x;
          *(_QWORD *)(v69 + 80) = v479;
          *(CGFloat *)(v69 + 88) = v71;
          v72 = v485.width;
          *(CGFloat *)(v69 + 96) = v496.x;
          *(CGFloat *)(v69 + 104) = v72;
          v73 = v487.x;
          *(CGFloat *)(v69 + 112) = v488.x;
          *(CGFloat *)(v69 + 120) = v73;
          v74 = v481.x;
          *(CGFloat *)(v69 + 128) = origin.x;
          *(CGFloat *)(v69 + 136) = v74;
          v75 = v482.x;
          *(CGFloat *)(v69 + 144) = v483.x;
          *(CGFloat *)(v69 + 152) = v75;
          v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 2, 1, (_QWORD *)v59);
          *(_QWORD *)(v19 + 16) = 2;
          *(CGFloat *)(v19 + 64) = v67;
          *(CGFloat *)(v19 + 72) = y;
          *(CGFloat *)(v19 + 80) = v68;
          *(CGFloat *)(v19 + 88) = v70;
          v76 = *(CGPoint *)(v69 + 64);
          v77 = *(CGPoint *)(v69 + 80);
          v78 = *(_QWORD *)(v19 + 24);
          if (v78 < 6)
          {
            v496 = *(CGPoint *)(v69 + 64);
            v488 = v77;
            v444 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v78 > 1), 3, 1, (_QWORD *)v19);
            v77 = v488;
            v76 = v496;
            v19 = (uint64_t)v444;
            v78 = v444[3];
          }
          *(_QWORD *)(v19 + 16) = 3;
          *(CGPoint *)(v19 + 96) = v76;
          *(CGPoint *)(v19 + 112) = v77;
          v79 = *(CGPoint *)(v69 + 96);
          v80 = *(CGPoint *)(v69 + 112);
          v16 = v492;
          if (v78 <= 7)
          {
            v496 = *(CGPoint *)(v69 + 96);
            v488 = v80;
            v445 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v78 > 1), 4, 1, (_QWORD *)v19);
            v80 = v488;
            v79 = v496;
            v19 = (uint64_t)v445;
            v78 = v445[3];
          }
          *(_QWORD *)(v19 + 16) = 4;
          *(CGPoint *)(v19 + 128) = v79;
          *(CGPoint *)(v19 + 144) = v80;
          v81 = *(CGPoint *)(v69 + 128);
          v82 = *(CGPoint *)(v69 + 144);
          if (v78 <= 9)
          {
            v496 = *(CGPoint *)(v69 + 128);
            v488 = v82;
            v446 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v78 > 1), 5, 1, (_QWORD *)v19);
            v82 = v488;
            v81 = v496;
            v19 = (uint64_t)v446;
          }
          *(_QWORD *)(v19 + 16) = 5;
          *(CGPoint *)(v19 + 160) = v81;
          *(CGPoint *)(v19 + 176) = v82;
          goto LABEL_178;
        case 5:
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v519.origin.x = 0.0;
          v519.origin.y = 0.0;
          v519.size.width = v494;
          v519.size.height = v493;
          CGRectDivide(v519, &slice, &remainder, v490, CGRectMinYEdge);
          v83 = remainder.origin.x;
          v84 = remainder.origin.y;
          v85 = remainder.size.width;
          v86 = remainder.size.height;
          v87 = (CGPoint *)specialized MOSuggestionSheetMosaicLayout.firstRowRects(segmentFrame:)(slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
          v88 = v87[1].x;
          if (v88 != 0.0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
              v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (_QWORD *)v19);
            v89 = *(_QWORD *)(v19 + 16);
            v90 = 32 * v89;
            v91 = v87 + 3;
            do
            {
              v92 = v91[-1];
              v93 = *v91;
              v94 = *(_QWORD *)(v19 + 24);
              v95 = v89 + 1;
              if (v89 >= v94 >> 1)
              {
                v496 = v91[-1];
                v488 = v93;
                v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v94 > 1), v89 + 1, 1, (_QWORD *)v19);
                v93 = v488;
                v92 = v496;
                v19 = (uint64_t)v97;
              }
              *(_QWORD *)(v19 + 16) = v95;
              v96 = (CGPoint *)(v19 + v90);
              v96[2] = v92;
              v96[3] = v93;
              v90 += 32;
              v91 += 2;
              v89 = v95;
              --*(_QWORD *)&v88;
            }
            while (v88 != 0.0);
          }
          swift_bridgeObjectRelease(v87);
          if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
            v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (_QWORD *)v19);
          v194 = *(_QWORD *)(v19 + 16);
          v193 = *(_QWORD *)(v19 + 24);
          if (v194 >= v193 >> 1)
            v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v193 > 1), v194 + 1, 1, (_QWORD *)v19);
          *(_QWORD *)(v19 + 16) = v194 + 1;
          v195 = (CGFloat *)(v19 + 32 * v194);
          v195[4] = v83;
          v195[5] = v84 + 1.0;
          v195[6] = v85;
          v195[7] = v86 + -1.0;
          goto LABEL_179;
        case 6:
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v520.origin.x = 0.0;
          v520.origin.y = 0.0;
          v520.size.width = v494;
          v520.size.height = v493;
          CGRectDivide(v520, &slice, &remainder, v490, CGRectMinYEdge);
          v98 = remainder.origin.x;
          v99 = remainder.origin.y;
          v100 = remainder.size.width;
          v101 = remainder.size.height;
          v102 = (CGPoint *)specialized MOSuggestionSheetMosaicLayout.firstRowRects(segmentFrame:)(slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
          v103 = v102[1].x;
          if (v103 != 0.0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
              v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (_QWORD *)v19);
            v104 = *(_QWORD *)(v19 + 16);
            v105 = 32 * v104;
            v106 = v102 + 3;
            do
            {
              v107 = v106[-1];
              v108 = *v106;
              v109 = *(_QWORD *)(v19 + 24);
              v110 = v104 + 1;
              if (v104 >= v109 >> 1)
              {
                v496 = v106[-1];
                v488 = v108;
                v112 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v109 > 1), v104 + 1, 1, (_QWORD *)v19);
                v108 = v488;
                v107 = v496;
                v19 = (uint64_t)v112;
              }
              *(_QWORD *)(v19 + 16) = v110;
              v111 = (CGPoint *)(v19 + v105);
              v111[2] = v107;
              v111[3] = v108;
              v105 += 32;
              v106 += 2;
              v104 = v110;
              --*(_QWORD *)&v103;
            }
            while (v103 != 0.0);
          }
          swift_bridgeObjectRelease(v102);
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v522.origin.x = v98;
          v522.origin.y = v99 + 1.0;
          v522.size.width = v100;
          v522.size.height = v101 + -1.0;
          CGRectDivide(v522, &slice, &remainder, ceil(v100 * 0.5), CGRectMinXEdge);
          v196 = slice.origin.x;
          v496 = *(CGPoint *)&slice.origin.y;
          v197 = slice.size.height;
          v488.x = remainder.origin.x;
          v198 = remainder.origin.y;
          v199 = remainder.size.height;
          v487.x = remainder.size.width;
          if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
            v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (_QWORD *)v19);
          v201 = *(_QWORD *)(v19 + 16);
          v200 = *(_QWORD *)(v19 + 24);
          v202 = v200 >> 1;
          v203 = v201 + 1;
          if (v200 >> 1 <= v201)
          {
            v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v200 > 1), v201 + 1, 1, (_QWORD *)v19);
            v200 = *(_QWORD *)(v19 + 24);
            v202 = v200 >> 1;
          }
          *(_QWORD *)(v19 + 16) = v203;
          v204 = (_QWORD *)(v19 + 32 * v201);
          *((CGFloat *)v204 + 4) = v196;
          *(CGPoint *)(v204 + 5) = v496;
          *((CGFloat *)v204 + 7) = v197;
          if (v202 < (uint64_t)(v201 + 2))
            v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v200 > 1), v201 + 2, 1, (_QWORD *)v19);
          v205 = v488.x + 1.0;
          v206 = v487.x + -1.0;
          *(_QWORD *)(v19 + 16) = v201 + 2;
          v207 = (double *)(v19 + 32 * v203);
          v207[4] = v205;
          v207[5] = v198;
          v207[6] = v206;
          v207[7] = v199;
          goto LABEL_179;
        case 7:
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v521.origin.x = 0.0;
          v521.origin.y = 0.0;
          v521.size.width = v494;
          v521.size.height = v493;
          CGRectDivide(v521, &slice, &remainder, v490, CGRectMinYEdge);
          v113 = remainder.origin.x;
          v114 = remainder.origin.y;
          v115 = remainder.size.width;
          v116 = remainder.size.height;
          v117 = (CGPoint *)specialized MOSuggestionSheetMosaicLayout.firstRowRects(segmentFrame:)(slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
          v118 = v117[1].x;
          v496.x = v113;
          if (v118 != 0.0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
              v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (_QWORD *)v19);
            v119 = *(_QWORD *)(v19 + 16);
            v120 = 32 * v119;
            v121 = v117 + 3;
            do
            {
              v122 = v121[-1];
              v123 = *v121;
              v124 = *(_QWORD *)(v19 + 24);
              v125 = v119 + 1;
              if (v119 >= v124 >> 1)
              {
                v488 = v121[-1];
                v487 = v123;
                v127 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v124 > 1), v119 + 1, 1, (_QWORD *)v19);
                v123 = v487;
                v122 = v488;
                v19 = (uint64_t)v127;
              }
              *(_QWORD *)(v19 + 16) = v125;
              v126 = (CGPoint *)(v19 + v120);
              v126[2] = v122;
              v126[3] = v123;
              v120 += 32;
              v121 += 2;
              v119 = v125;
              --*(_QWORD *)&v118;
            }
            while (v118 != 0.0);
          }
          swift_bridgeObjectRelease(v117);
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v523.origin.x = v496.x;
          v523.origin.y = v114 + 1.0;
          v523.size.width = v115;
          v523.size.height = v116 + -1.0;
          CGRectDivide(v523, &slice, &remainder, ceil(v115 * 0.5), CGRectMinXEdge);
          v524 = slice;
          v487.x = remainder.origin.x;
          v496.x = remainder.origin.y;
          origin.x = remainder.size.width;
          v488.x = remainder.size.height;
          v208 = ceil(slice.size.height * 0.5);
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          CGRectDivide(v524, &slice, &remainder, v208, CGRectMinYEdge);
          v209 = slice.origin.x;
          v483 = *(CGPoint *)&slice.origin.y;
          v210 = slice.size.height;
          v485.width = remainder.origin.x;
          v211 = remainder.origin.y;
          v212 = remainder.size.height;
          v484.width = remainder.size.width;
          if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
            v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (_QWORD *)v19);
          v214 = *(_QWORD *)(v19 + 16);
          v213 = *(_QWORD *)(v19 + 24);
          v215 = v213 >> 1;
          v216 = v214 + 1;
          if (v213 >> 1 <= v214)
          {
            v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v213 > 1), v214 + 1, 1, (_QWORD *)v19);
            v213 = *(_QWORD *)(v19 + 24);
            v215 = v213 >> 1;
          }
          *(_QWORD *)(v19 + 16) = v216;
          v217 = (_QWORD *)(v19 + 32 * v214);
          *((CGFloat *)v217 + 4) = v209;
          *(CGPoint *)(v217 + 5) = v483;
          *((CGFloat *)v217 + 7) = v210;
          v218 = v214 + 2;
          if (v215 < (uint64_t)(v214 + 2))
            v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v213 > 1), v214 + 2, 1, (_QWORD *)v19);
          *(_QWORD *)(v19 + 16) = v218;
          v219 = (double *)(v19 + 32 * v216);
          v219[4] = v485.width;
          v219[5] = v211 + 1.0;
          v219[6] = v484.width;
          v219[7] = v212 + -1.0;
          v220 = *(_QWORD *)(v19 + 24);
          if ((uint64_t)(v214 + 3) > (uint64_t)(v220 >> 1))
            v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v220 > 1), v214 + 3, 1, (_QWORD *)v19);
          v221 = v487.x + 1.0;
          v222 = origin.x + -1.0;
          *(_QWORD *)(v19 + 16) = v214 + 3;
          v223 = (CGFloat *)(v19 + 32 * v218);
          v224 = v496.x;
          v223[4] = v221;
          v223[5] = v224;
          v223[6] = v222;
          v225 = (CGFloat *)&v506;
          goto LABEL_126;
        case 8:
          CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, 0.0, 0.0, v494, v493);
          v128 = *(_OWORD *)v505;
          v129 = *(_OWORD *)&v505[16];
          v130 = (CGPoint *)specialized MOSuggestionSheetMosaicLayout.firstRowRects(segmentFrame:)(slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
          v131 = v130[1].x;
          if (v131 != 0.0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
              v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (_QWORD *)v19);
            v132 = *(_QWORD *)(v19 + 16);
            v133 = 32 * v132;
            v134 = v130 + 3;
            do
            {
              v135 = v134[-1];
              v136 = *v134;
              v137 = *(_QWORD *)(v19 + 24);
              v138 = v132 + 1;
              if (v132 >= v137 >> 1)
              {
                v496 = v134[-1];
                v488 = v136;
                v140 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v137 > 1), v132 + 1, 1, (_QWORD *)v19);
                v136 = v488;
                v135 = v496;
                v19 = (uint64_t)v140;
              }
              *(_QWORD *)(v19 + 16) = v138;
              v139 = (CGPoint *)(v19 + v133);
              v139[2] = v135;
              v139[3] = v136;
              v133 += 32;
              v134 += 2;
              v132 = v138;
              --*(_QWORD *)&v131;
            }
            while (v131 != 0.0);
          }
          swift_bridgeObjectRelease(v130);
          CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v128, *((CGFloat *)&v128 + 1), *(CGFloat *)&v129, *((CGFloat *)&v129 + 1));
          v482.x = *(CGFloat *)&v505[8];
          v483.x = *(CGFloat *)v505;
          v480.x = *(CGFloat *)&v505[24];
          v481.x = *(CGFloat *)&v505[16];
          CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
          v226 = slice.origin.x;
          v227 = slice.origin.y;
          v228 = slice.size.width;
          v229 = slice.size.height;
          CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, *(CGFloat *)v505, *(CGFloat *)&v505[8], *(CGFloat *)&v505[16], *(CGFloat *)&v505[24]);
          origin.x = slice.origin.x;
          v485 = *(CGSize *)&slice.origin.y;
          v484.width = slice.size.height;
          v496.x = *(CGFloat *)v505;
          v488 = *(CGPoint *)&v505[8];
          v487.x = *(CGFloat *)&v505[24];
          if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
            v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (_QWORD *)v19);
          v231 = *(_QWORD *)(v19 + 16);
          v230 = *(_QWORD *)(v19 + 24);
          v232 = v230 >> 1;
          v233 = v231 + 1;
          if (v230 >> 1 <= v231)
          {
            v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v230 > 1), v231 + 1, 1, (_QWORD *)v19);
            v230 = *(_QWORD *)(v19 + 24);
            v232 = v230 >> 1;
          }
          *(_QWORD *)(v19 + 16) = v233;
          v234 = (CGFloat *)(v19 + 32 * v231);
          v234[4] = v226;
          v234[5] = v227;
          v234[6] = v228;
          v234[7] = v229;
          v235 = v231 + 2;
          if (v232 < (uint64_t)(v231 + 2))
            v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v230 > 1), v231 + 2, 1, (_QWORD *)v19);
          v236 = v483.x;
          v237 = v482.x;
          v238 = v481.x;
          v239 = v480.x;
          *(_QWORD *)(v19 + 16) = v235;
          v240 = (_QWORD *)(v19 + 32 * v233);
          v240[4] = *(_QWORD *)&origin.x;
          *(CGSize *)(v240 + 5) = v485;
          v240[7] = *(_QWORD *)&v484.width;
          v241 = *(_QWORD *)(v19 + 24);
          v242 = v231 + 3;
          if ((uint64_t)(v231 + 3) > (uint64_t)(v241 >> 1))
            v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v241 > 1), v231 + 3, 1, (_QWORD *)v19);
          *(_QWORD *)(v19 + 16) = v242;
          v243 = (_QWORD *)(v19 + 32 * v235);
          v243[4] = *(_QWORD *)&v496.x;
          *(CGPoint *)(v243 + 5) = v488;
          v243[7] = *(_QWORD *)&v487.x;
          v244 = *(_QWORD *)(v19 + 24);
          if ((uint64_t)(v231 + 4) > (uint64_t)(v244 >> 1))
            v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v244 > 1), v231 + 4, 1, (_QWORD *)v19);
          *(_QWORD *)(v19 + 16) = v231 + 4;
          v245 = (CGFloat *)(v19 + 32 * v242);
          v245[4] = v236;
          v245[5] = v237;
          v245[6] = v238;
          v245[7] = v239;
          goto LABEL_179;
        case 9:
          CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, 0.0, 0.0, v494, v493);
          v141 = *(_OWORD *)v505;
          v142 = *(_OWORD *)&v505[16];
          v143 = (CGPoint *)specialized MOSuggestionSheetMosaicLayout.firstRowRects(segmentFrame:)(slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
          v144 = v143[1].x;
          if (v144 != 0.0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
              v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (_QWORD *)v19);
            v145 = *(_QWORD *)(v19 + 16);
            v146 = 32 * v145;
            v147 = v143 + 3;
            do
            {
              v148 = v147[-1];
              v149 = *v147;
              v150 = *(_QWORD *)(v19 + 24);
              v151 = v145 + 1;
              if (v145 >= v150 >> 1)
              {
                v496 = v147[-1];
                v488 = v149;
                v153 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v150 > 1), v145 + 1, 1, (_QWORD *)v19);
                v149 = v488;
                v148 = v496;
                v19 = (uint64_t)v153;
              }
              *(_QWORD *)(v19 + 16) = v151;
              v152 = (CGPoint *)(v19 + v146);
              v152[2] = v148;
              v152[3] = v149;
              v146 += 32;
              v147 += 2;
              v145 = v151;
              --*(_QWORD *)&v144;
            }
            while (v144 != 0.0);
          }
          swift_bridgeObjectRelease(v143);
          CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v141, *((CGFloat *)&v141 + 1), *(CGFloat *)&v142, *((CGFloat *)&v142 + 1));
          v488.x = *(CGFloat *)&v505[8];
          v496.x = *(CGFloat *)v505;
          origin.x = *(CGFloat *)&v505[24];
          v487.x = *(CGFloat *)&v505[16];
          CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
          v246 = *(_OWORD *)v505;
          v247 = *(_OWORD *)&v505[16];
          CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
          v482 = slice.origin;
          v481.x = slice.size.width;
          v480.x = slice.size.height;
          v485 = *(CGSize *)v505;
          v483.x = *(CGFloat *)&v505[24];
          v484.width = *(CGFloat *)&v505[16];
          CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v246, *((CGFloat *)&v246 + 1), *(CGFloat *)&v247, *((CGFloat *)&v247 + 1));
          v478 = slice.origin;
          v248 = slice.size.width;
          v249 = slice.size.height;
          v479 = *(_OWORD *)v505;
          v250 = *(_OWORD *)&v505[16];
          v251 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
          v252 = swift_allocObject(v251, 160, 7);
          *(CGPoint *)(v252 + 32) = v482;
          v253 = v480.x;
          *(CGFloat *)(v252 + 48) = v481.x;
          *(CGFloat *)(v252 + 56) = v253;
          *(CGPoint *)(v252 + 64) = v478;
          *(CGFloat *)(v252 + 80) = v248;
          *(CGFloat *)(v252 + 88) = v249;
          *(CGSize *)(v252 + 96) = v485;
          v254 = v483.x;
          *(CGFloat *)(v252 + 112) = v484.width;
          *(CGFloat *)(v252 + 120) = v254;
          *(_OWORD *)(v252 + 128) = v479;
          *(_OWORD *)(v252 + 144) = v250;
          if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
            v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (_QWORD *)v19);
          v255 = *(CGSize *)(v252 + 32);
          v256 = *(CGSize *)(v252 + 48);
          v258 = *(_QWORD *)(v19 + 16);
          v257 = *(_QWORD *)(v19 + 24);
          v259 = v257 >> 1;
          v260 = v258 + 1;
          if (v257 >> 1 <= v258)
          {
            v485 = *(CGSize *)(v252 + 32);
            v484 = v256;
            v447 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v257 > 1), v258 + 1, 1, (_QWORD *)v19);
            v256 = v484;
            v255 = v485;
            v19 = (uint64_t)v447;
            v257 = v447[3];
            v259 = v257 >> 1;
          }
          *(_QWORD *)(v19 + 16) = v260;
          v261 = (CGSize *)(v19 + 32 * v258);
          v261[2] = v255;
          v261[3] = v256;
          v262 = *(CGSize *)(v252 + 64);
          v263 = *(CGSize *)(v252 + 80);
          v264 = v258 + 2;
          if (v259 < (uint64_t)(v258 + 2))
          {
            v485 = *(CGSize *)(v252 + 64);
            v484 = v263;
            v448 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v257 > 1), v258 + 2, 1, (_QWORD *)v19);
            v263 = v484;
            v262 = v485;
            v19 = (uint64_t)v448;
          }
          *(_QWORD *)(v19 + 16) = v264;
          v265 = (CGSize *)(v19 + 32 * v260);
          v265[2] = v262;
          v265[3] = v263;
          v266 = *(CGSize *)(v252 + 96);
          v267 = *(CGSize *)(v252 + 112);
          v268 = *(_QWORD *)(v19 + 24);
          v269 = v258 + 3;
          if ((uint64_t)(v258 + 3) > (uint64_t)(v268 >> 1))
          {
            v485 = *(CGSize *)(v252 + 96);
            v484 = v267;
            v449 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v268 > 1), v258 + 3, 1, (_QWORD *)v19);
            v267 = v484;
            v266 = v485;
            v19 = (uint64_t)v449;
          }
          *(_QWORD *)(v19 + 16) = v269;
          v270 = (CGSize *)(v19 + 32 * v264);
          v270[2] = v266;
          v270[3] = v267;
          v271 = *(CGSize *)(v252 + 128);
          v272 = *(CGSize *)(v252 + 144);
          v273 = *(_QWORD *)(v19 + 24);
          if ((uint64_t)(v258 + 4) > (uint64_t)(v273 >> 1))
          {
            v485 = *(CGSize *)(v252 + 128);
            v484 = v272;
            v450 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v273 > 1), v258 + 4, 1, (_QWORD *)v19);
            v272 = v484;
            v271 = v485;
            v19 = (uint64_t)v450;
          }
          *(_QWORD *)(v19 + 16) = v258 + 4;
          v274 = (CGSize *)(v19 + 32 * v269);
          v274[2] = v271;
          v274[3] = v272;
          swift_setDeallocating(v252);
          swift_deallocClassInstance(v252, 32, 7);
          v276 = *(_QWORD *)(v19 + 16);
          v275 = *(_QWORD *)(v19 + 24);
          if (v276 >= v275 >> 1)
            v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v275 > 1), v276 + 1, 1, (_QWORD *)v19);
          *(_QWORD *)(v19 + 16) = v276 + 1;
          v223 = (CGFloat *)(v19 + 32 * v276);
          v277 = v488.x;
          v223[4] = v496.x;
          v223[5] = v277;
          v223[6] = v487.x;
          v225 = (CGFloat *)v505;
LABEL_126:
          v223[7] = *(v225 - 32);
          goto LABEL_179;
        case 10:
          CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, 0.0, 0.0, v494, v493);
          v154 = *(_OWORD *)v505;
          v155 = *(_OWORD *)&v505[16];
          v156 = (CGPoint *)specialized MOSuggestionSheetMosaicLayout.firstRowRects(segmentFrame:)(slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
          v157 = v156[1].x;
          if (v157 != 0.0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
              v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (_QWORD *)v19);
            v158 = *(_QWORD *)(v19 + 16);
            v159 = 32 * v158;
            v160 = v156 + 3;
            do
            {
              v161 = v160[-1];
              v162 = *v160;
              v163 = *(_QWORD *)(v19 + 24);
              v164 = v158 + 1;
              if (v158 >= v163 >> 1)
              {
                v496 = v160[-1];
                v488 = v162;
                v166 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v163 > 1), v158 + 1, 1, (_QWORD *)v19);
                v162 = v488;
                v161 = v496;
                v19 = (uint64_t)v166;
              }
              *(_QWORD *)(v19 + 16) = v164;
              v165 = (CGPoint *)(v19 + v159);
              v165[2] = v161;
              v165[3] = v162;
              v159 += 32;
              v160 += 2;
              v158 = v164;
              --*(_QWORD *)&v157;
            }
            while (v157 != 0.0);
          }
          swift_bridgeObjectRelease(v156);
          CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v154, *((CGFloat *)&v154 + 1), *(CGFloat *)&v155, *((CGFloat *)&v155 + 1));
          v488.x = *(CGFloat *)&v505[8];
          v496.x = *(CGFloat *)v505;
          origin.x = *(CGFloat *)&v505[24];
          v487.x = *(CGFloat *)&v505[16];
          CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
          v278 = *(_OWORD *)v505;
          v279 = *(_OWORD *)&v505[16];
          CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
          v482 = slice.origin;
          v481.x = slice.size.width;
          v480.x = slice.size.height;
          v485 = *(CGSize *)v505;
          v483.x = *(CGFloat *)&v505[24];
          v484.width = *(CGFloat *)&v505[16];
          CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v278, *((CGFloat *)&v278 + 1), *(CGFloat *)&v279, *((CGFloat *)&v279 + 1));
          v478 = slice.origin;
          v280 = slice.size.width;
          v281 = slice.size.height;
          v479 = *(_OWORD *)v505;
          v282 = *(_OWORD *)&v505[16];
          v283 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
          v284 = swift_allocObject(v283, 160, 7);
          *(CGPoint *)(v284 + 32) = v482;
          v285 = v480.x;
          *(CGFloat *)(v284 + 48) = v481.x;
          *(CGFloat *)(v284 + 56) = v285;
          *(CGPoint *)(v284 + 64) = v478;
          *(CGFloat *)(v284 + 80) = v280;
          *(CGFloat *)(v284 + 88) = v281;
          *(CGSize *)(v284 + 96) = v485;
          v286 = v483.x;
          *(CGFloat *)(v284 + 112) = v484.width;
          *(CGFloat *)(v284 + 120) = v286;
          *(_OWORD *)(v284 + 128) = v479;
          *(_OWORD *)(v284 + 144) = v282;
          if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
            v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (_QWORD *)v19);
          v287 = *(CGSize *)(v284 + 32);
          v288 = *(CGSize *)(v284 + 48);
          v290 = *(_QWORD *)(v19 + 16);
          v289 = *(_QWORD *)(v19 + 24);
          v291 = v289 >> 1;
          v292 = v290 + 1;
          if (v289 >> 1 <= v290)
          {
            v485 = *(CGSize *)(v284 + 32);
            v484 = v288;
            v451 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v289 > 1), v290 + 1, 1, (_QWORD *)v19);
            v288 = v484;
            v287 = v485;
            v19 = (uint64_t)v451;
            v289 = v451[3];
            v291 = v289 >> 1;
          }
          *(_QWORD *)(v19 + 16) = v292;
          v293 = (CGSize *)(v19 + 32 * v290);
          v293[2] = v287;
          v293[3] = v288;
          v294 = *(CGSize *)(v284 + 64);
          v295 = *(CGSize *)(v284 + 80);
          v296 = v290 + 2;
          if (v291 < (uint64_t)(v290 + 2))
          {
            v485 = *(CGSize *)(v284 + 64);
            v484 = v295;
            v452 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v289 > 1), v290 + 2, 1, (_QWORD *)v19);
            v295 = v484;
            v294 = v485;
            v19 = (uint64_t)v452;
          }
          *(_QWORD *)(v19 + 16) = v296;
          v297 = (CGSize *)(v19 + 32 * v292);
          v297[2] = v294;
          v297[3] = v295;
          v298 = *(CGSize *)(v284 + 96);
          v299 = *(CGSize *)(v284 + 112);
          v300 = *(_QWORD *)(v19 + 24);
          v301 = v290 + 3;
          if ((uint64_t)(v290 + 3) > (uint64_t)(v300 >> 1))
          {
            v485 = *(CGSize *)(v284 + 96);
            v484 = v299;
            v453 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v300 > 1), v290 + 3, 1, (_QWORD *)v19);
            v299 = v484;
            v298 = v485;
            v19 = (uint64_t)v453;
          }
          *(_QWORD *)(v19 + 16) = v301;
          v302 = (CGSize *)(v19 + 32 * v296);
          v302[2] = v298;
          v302[3] = v299;
          v303 = *(CGSize *)(v284 + 128);
          v304 = *(CGSize *)(v284 + 144);
          v305 = *(_QWORD *)(v19 + 24);
          if ((uint64_t)(v290 + 4) > (uint64_t)(v305 >> 1))
          {
            v485 = *(CGSize *)(v284 + 128);
            v484 = v304;
            v454 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v305 > 1), v290 + 4, 1, (_QWORD *)v19);
            v304 = v484;
            v303 = v485;
            v19 = (uint64_t)v454;
          }
          *(_QWORD *)(v19 + 16) = v290 + 4;
          v306 = (CGSize *)(v19 + 32 * v301);
          v306[2] = v303;
          v306[3] = v304;
          swift_setDeallocating(v284);
          swift_deallocClassInstance(v284, 32, 7);
          CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, v496.x, v488.x, v487.x, origin.x);
          v307 = slice.origin;
          size = slice.size;
          v309 = *(CGPoint *)v505;
          v310 = *(CGPoint *)&v505[16];
          v312 = *(_QWORD *)(v19 + 16);
          v311 = *(_QWORD *)(v19 + 24);
          v313 = v311 >> 1;
          v314 = v312 + 1;
          if (v311 >> 1 <= v312)
          {
            v496 = *(CGPoint *)v505;
            v488 = *(CGPoint *)&v505[16];
            v487 = slice.origin;
            origin = (CGPoint)slice.size;
            v455 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v311 > 1), v312 + 1, 1, (_QWORD *)v19);
            size = (CGSize)origin;
            v307 = v487;
            v310 = v488;
            v309 = v496;
            v19 = (uint64_t)v455;
            v311 = v455[3];
            v313 = v311 >> 1;
          }
          *(_QWORD *)(v19 + 16) = v314;
          v315 = (CGPoint *)(v19 + 32 * v312);
          v315[2] = v307;
          v315[3] = (CGPoint)size;
          if (v313 < (uint64_t)(v312 + 2))
          {
            v496 = v309;
            v488 = v310;
            v456 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v311 > 1), v312 + 2, 1, (_QWORD *)v19);
            v310 = v488;
            v309 = v496;
            v19 = (uint64_t)v456;
          }
          *(_QWORD *)(v19 + 16) = v312 + 2;
          v316 = (CGPoint *)(v19 + 32 * v314);
          v316[2] = v309;
          v316[3] = v310;
          goto LABEL_179;
        case 11:
          CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, 0.0, 0.0, v494, v493);
          v167 = *(_OWORD *)v505;
          v168 = *(_OWORD *)&v505[16];
          v169 = (CGPoint *)specialized MOSuggestionSheetMosaicLayout.firstRowRects(segmentFrame:)(slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
          v170 = v169[1].x;
          if (v170 != 0.0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
              v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (_QWORD *)v19);
            v171 = *(_QWORD *)(v19 + 16);
            v172 = 32 * v171;
            v173 = v169 + 3;
            do
            {
              v174 = v173[-1];
              v175 = *v173;
              v176 = *(_QWORD *)(v19 + 24);
              v177 = v171 + 1;
              if (v171 >= v176 >> 1)
              {
                v496 = v173[-1];
                v488 = v175;
                v179 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v176 > 1), v171 + 1, 1, (_QWORD *)v19);
                v175 = v488;
                v174 = v496;
                v19 = (uint64_t)v179;
              }
              *(_QWORD *)(v19 + 16) = v177;
              v178 = (CGPoint *)(v19 + v172);
              v178[2] = v174;
              v178[3] = v175;
              v172 += 32;
              v173 += 2;
              v171 = v177;
              --*(_QWORD *)&v170;
            }
            while (v170 != 0.0);
          }
          swift_bridgeObjectRelease(v169);
          CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v167, *((CGFloat *)&v167 + 1), *(CGFloat *)&v168, *((CGFloat *)&v168 + 1));
          v488.x = *(CGFloat *)&v505[8];
          v496.x = *(CGFloat *)v505;
          origin.x = *(CGFloat *)&v505[24];
          v487.x = *(CGFloat *)&v505[16];
          CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
          v317 = *(_OWORD *)v505;
          v318 = *(_OWORD *)&v505[16];
          CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
          v482 = slice.origin;
          v481.x = slice.size.width;
          v480.x = slice.size.height;
          v485 = *(CGSize *)v505;
          v483.x = *(CGFloat *)&v505[24];
          v484.width = *(CGFloat *)&v505[16];
          CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v317, *((CGFloat *)&v317 + 1), *(CGFloat *)&v318, *((CGFloat *)&v318 + 1));
          v478 = slice.origin;
          v319 = slice.size.width;
          v320 = slice.size.height;
          v479 = *(_OWORD *)v505;
          v321 = *(_OWORD *)&v505[16];
          v322 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
          v323 = swift_allocObject(v322, 160, 7);
          *(CGPoint *)(v323 + 32) = v482;
          v324 = v480.x;
          *(CGFloat *)(v323 + 48) = v481.x;
          *(CGFloat *)(v323 + 56) = v324;
          *(CGPoint *)(v323 + 64) = v478;
          *(CGFloat *)(v323 + 80) = v319;
          *(CGFloat *)(v323 + 88) = v320;
          *(CGSize *)(v323 + 96) = v485;
          v325 = v483.x;
          *(CGFloat *)(v323 + 112) = v484.width;
          *(CGFloat *)(v323 + 120) = v325;
          *(_OWORD *)(v323 + 128) = v479;
          *(_OWORD *)(v323 + 144) = v321;
          if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
            v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (_QWORD *)v19);
          v326 = *(CGSize *)(v323 + 32);
          v327 = *(CGSize *)(v323 + 48);
          v329 = *(_QWORD *)(v19 + 16);
          v328 = *(_QWORD *)(v19 + 24);
          v330 = v328 >> 1;
          v331 = v329 + 1;
          if (v328 >> 1 <= v329)
          {
            v485 = *(CGSize *)(v323 + 32);
            v484 = v327;
            v457 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v328 > 1), v329 + 1, 1, (_QWORD *)v19);
            v327 = v484;
            v326 = v485;
            v19 = (uint64_t)v457;
            v328 = v457[3];
            v330 = v328 >> 1;
          }
          *(_QWORD *)(v19 + 16) = v331;
          v332 = (CGSize *)(v19 + 32 * v329);
          v332[2] = v326;
          v332[3] = v327;
          v333 = *(CGSize *)(v323 + 64);
          v334 = *(CGSize *)(v323 + 80);
          v335 = v329 + 2;
          if (v330 < (uint64_t)(v329 + 2))
          {
            v485 = *(CGSize *)(v323 + 64);
            v484 = v334;
            v458 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v328 > 1), v329 + 2, 1, (_QWORD *)v19);
            v334 = v484;
            v333 = v485;
            v19 = (uint64_t)v458;
          }
          *(_QWORD *)(v19 + 16) = v335;
          v336 = (CGSize *)(v19 + 32 * v331);
          v336[2] = v333;
          v336[3] = v334;
          v337 = *(CGSize *)(v323 + 96);
          v338 = *(CGSize *)(v323 + 112);
          v339 = *(_QWORD *)(v19 + 24);
          v340 = v329 + 3;
          if ((uint64_t)(v329 + 3) > (uint64_t)(v339 >> 1))
          {
            v485 = *(CGSize *)(v323 + 96);
            v484 = v338;
            v459 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v339 > 1), v329 + 3, 1, (_QWORD *)v19);
            v338 = v484;
            v337 = v485;
            v19 = (uint64_t)v459;
          }
          *(_QWORD *)(v19 + 16) = v340;
          v341 = (CGSize *)(v19 + 32 * v335);
          v341[2] = v337;
          v341[3] = v338;
          v342 = *(CGSize *)(v323 + 128);
          v343 = *(CGSize *)(v323 + 144);
          v344 = *(_QWORD *)(v19 + 24);
          if ((uint64_t)(v329 + 4) > (uint64_t)(v344 >> 1))
          {
            v485 = *(CGSize *)(v323 + 128);
            v484 = v343;
            v460 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v344 > 1), v329 + 4, 1, (_QWORD *)v19);
            v343 = v484;
            v342 = v485;
            v19 = (uint64_t)v460;
          }
          *(_QWORD *)(v19 + 16) = v329 + 4;
          v345 = (CGSize *)(v19 + 32 * v340);
          v345[2] = v342;
          v345[3] = v343;
          swift_setDeallocating(v323);
          swift_deallocClassInstance(v323, 32, 7);
          CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, v496.x, v488.x, v487.x, origin.x);
          v346 = *(_QWORD *)v505;
          v496 = *(CGPoint *)&v505[8];
          v347 = *(_QWORD *)&v505[24];
          CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
          v348 = slice.origin;
          v349 = slice.size;
          v350 = *(CGPoint *)v505;
          v351 = *(CGPoint *)&v505[16];
          v353 = *(_QWORD *)(v19 + 16);
          v352 = *(_QWORD *)(v19 + 24);
          v354 = v352 >> 1;
          v355 = v353 + 1;
          if (v352 >> 1 <= v353)
          {
            v488 = *(CGPoint *)v505;
            v487 = *(CGPoint *)&v505[16];
            origin = slice.origin;
            v485 = slice.size;
            v461 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v352 > 1), v353 + 1, 1, (_QWORD *)v19);
            v349 = v485;
            v348 = origin;
            v351 = v487;
            v350 = v488;
            v19 = (uint64_t)v461;
            v352 = v461[3];
            v354 = v352 >> 1;
          }
          *(_QWORD *)(v19 + 16) = v355;
          v356 = (CGPoint *)(v19 + 32 * v353);
          v356[2] = v348;
          v356[3] = (CGPoint)v349;
          v357 = v353 + 2;
          if (v354 < (uint64_t)(v353 + 2))
          {
            v488 = v350;
            v487 = v351;
            v462 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v352 > 1), v353 + 2, 1, (_QWORD *)v19);
            v351 = v487;
            v350 = v488;
            v19 = (uint64_t)v462;
          }
          *(_QWORD *)(v19 + 16) = v357;
          v358 = (CGPoint *)(v19 + 32 * v355);
          v358[2] = v350;
          v358[3] = v351;
          v359 = *(_QWORD *)(v19 + 24);
          if ((uint64_t)(v353 + 3) > (uint64_t)(v359 >> 1))
            v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v359 > 1), v353 + 3, 1, (_QWORD *)v19);
          *(_QWORD *)(v19 + 16) = v353 + 3;
          v360 = (_QWORD *)(v19 + 32 * v357);
          v360[4] = v346;
          *(CGPoint *)(v360 + 5) = v496;
          v360[7] = v347;
          goto LABEL_179;
        case 12:
          CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, 0.0, 0.0, v494, v493);
          v180 = *(_OWORD *)v505;
          v181 = *(_OWORD *)&v505[16];
          v182 = (CGPoint *)specialized MOSuggestionSheetMosaicLayout.firstRowRects(segmentFrame:)(slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
          v183 = v182[1].x;
          if (v183 != 0.0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
              v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (_QWORD *)v19);
            v184 = *(_QWORD *)(v19 + 16);
            v185 = 32 * v184;
            v186 = v182 + 3;
            do
            {
              v187 = v186[-1];
              v188 = *v186;
              v189 = *(_QWORD *)(v19 + 24);
              v190 = v184 + 1;
              if (v184 >= v189 >> 1)
              {
                v496 = v186[-1];
                v488 = v188;
                v192 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v189 > 1), v184 + 1, 1, (_QWORD *)v19);
                v188 = v488;
                v187 = v496;
                v19 = (uint64_t)v192;
              }
              *(_QWORD *)(v19 + 16) = v190;
              v191 = (CGPoint *)(v19 + v185);
              v191[2] = v187;
              v191[3] = v188;
              v185 += 32;
              v186 += 2;
              v184 = v190;
              --*(_QWORD *)&v183;
            }
            while (v183 != 0.0);
          }
          swift_bridgeObjectRelease(v182);
          CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v180, *((CGFloat *)&v180 + 1), *(CGFloat *)&v181, *((CGFloat *)&v181 + 1));
          v488.x = *(CGFloat *)&v505[8];
          v496.x = *(CGFloat *)v505;
          origin.x = *(CGFloat *)&v505[24];
          v487.x = *(CGFloat *)&v505[16];
          CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
          v361 = *(_OWORD *)v505;
          v362 = *(_OWORD *)&v505[16];
          CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
          v482 = slice.origin;
          v481.x = slice.size.width;
          v480.x = slice.size.height;
          v485 = *(CGSize *)v505;
          v483.x = *(CGFloat *)&v505[24];
          v484.width = *(CGFloat *)&v505[16];
          CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v361, *((CGFloat *)&v361 + 1), *(CGFloat *)&v362, *((CGFloat *)&v362 + 1));
          v478 = slice.origin;
          v363 = slice.size.width;
          v364 = slice.size.height;
          v479 = *(_OWORD *)v505;
          v365 = *(_OWORD *)&v505[16];
          v366 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
          v367 = swift_allocObject(v366, 160, 7);
          v368 = (_QWORD *)v19;
          v369 = (_OWORD *)v367;
          *(CGPoint *)(v367 + 32) = v482;
          v370 = v480.x;
          *(CGFloat *)(v367 + 48) = v481.x;
          *(CGFloat *)(v367 + 56) = v370;
          *(CGPoint *)(v367 + 64) = v478;
          *(CGFloat *)(v367 + 80) = v363;
          *(CGFloat *)(v367 + 88) = v364;
          *(CGSize *)(v367 + 96) = v485;
          v371 = v483.x;
          *(CGFloat *)(v367 + 112) = v484.width;
          *(CGFloat *)(v367 + 120) = v371;
          *(_OWORD *)(v367 + 128) = v479;
          *(_OWORD *)(v367 + 144) = v365;
          v372 = v368;
          if ((swift_isUniquelyReferenced_nonNull_native(v368) & 1) == 0)
            v372 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v372[2] + 1, 1, v372);
          v373 = (CGSize)v369[2];
          v374 = (CGSize)v369[3];
          v376 = v372[2];
          v375 = v372[3];
          v377 = v375 >> 1;
          v378 = v376 + 1;
          if (v375 >> 1 <= v376)
          {
            v485 = (CGSize)v369[2];
            v484 = v374;
            v463 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v375 > 1), v376 + 1, 1, v372);
            v374 = v484;
            v373 = v485;
            v372 = v463;
            v375 = v463[3];
            v377 = v375 >> 1;
          }
          v372[2] = v378;
          v379 = (CGSize *)&v372[4 * v376];
          v379[2] = v373;
          v379[3] = v374;
          v380 = (CGSize)v369[4];
          v381 = (CGSize)v369[5];
          v382 = v376 + 2;
          if (v377 < (uint64_t)(v376 + 2))
          {
            v485 = (CGSize)v369[4];
            v484 = v381;
            v464 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v375 > 1), v376 + 2, 1, v372);
            v381 = v484;
            v380 = v485;
            v372 = v464;
          }
          v372[2] = v382;
          v383 = (CGSize *)&v372[4 * v378];
          v383[2] = v380;
          v383[3] = v381;
          v384 = (CGSize)v369[6];
          v385 = (CGSize)v369[7];
          v386 = v372[3];
          v387 = v376 + 3;
          if ((uint64_t)(v376 + 3) > (uint64_t)(v386 >> 1))
          {
            v485 = (CGSize)v369[6];
            v484 = v385;
            v465 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v386 > 1), v376 + 3, 1, v372);
            v385 = v484;
            v384 = v485;
            v372 = v465;
          }
          v372[2] = v387;
          v388 = (CGSize *)&v372[4 * v382];
          v388[2] = v384;
          v388[3] = v385;
          v389 = (CGSize)v369[8];
          v390 = (CGSize)v369[9];
          v391 = v372[3];
          if ((uint64_t)(v376 + 4) > (uint64_t)(v391 >> 1))
          {
            v485 = (CGSize)v369[8];
            v484 = v390;
            v466 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v391 > 1), v376 + 4, 1, v372);
            v390 = v484;
            v389 = v485;
            v372 = v466;
          }
          v372[2] = v376 + 4;
          v392 = (CGSize *)&v372[4 * v387];
          v392[2] = v389;
          v392[3] = v390;
          swift_setDeallocating(v369);
          v393 = v369;
          v19 = (uint64_t)v372;
          swift_deallocClassInstance(v393, 32, 7);
          CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, v496.x, v488.x, v487.x, origin.x);
          v394 = *(_OWORD *)v505;
          v395 = *(_OWORD *)&v505[16];
          CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
          origin.x = slice.origin.x;
          v485.width = slice.origin.y;
          v484.width = slice.size.width;
          v483.x = slice.size.height;
          v496 = *(CGPoint *)v505;
          v487.x = *(CGFloat *)&v505[24];
          v488.x = *(CGFloat *)&v505[16];
          CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v394, *((CGFloat *)&v394 + 1), *(CGFloat *)&v395, *((CGFloat *)&v395 + 1));
          v481 = slice.origin;
          v396 = slice.size.width;
          v397 = slice.size.height;
          v482 = *(CGPoint *)v505;
          v398 = *(_OWORD *)&v505[16];
          v399 = swift_allocObject(v366, 160, 7);
          v400 = v483.x;
          v401 = *(_QWORD *)&v484.width;
          v402 = v485.width;
          v403 = origin.x;
          v69 = v399;
          *(CGFloat *)(v399 + 32) = origin.x;
          *(CGFloat *)(v399 + 40) = v402;
          *(_QWORD *)(v399 + 48) = v401;
          *(CGFloat *)(v399 + 56) = v400;
          *(CGPoint *)(v399 + 64) = v481;
          *(CGFloat *)(v399 + 80) = v396;
          *(CGFloat *)(v399 + 88) = v397;
          *(CGPoint *)(v399 + 96) = v496;
          v404 = v487.x;
          *(CGFloat *)(v399 + 112) = v488.x;
          *(CGFloat *)(v399 + 120) = v404;
          *(CGPoint *)(v399 + 128) = v482;
          *(_OWORD *)(v399 + 144) = v398;
          v406 = v372[2];
          v405 = v372[3];
          v407 = v405 >> 1;
          v408 = v406 + 1;
          if (v405 >> 1 <= v406)
          {
            v467 = v403;
            v468 = v402;
            v469 = v401;
            v470 = v400;
            v471 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v405 > 1), v406 + 1, 1, v372);
            v400 = v470;
            v401 = v469;
            v402 = v468;
            v403 = v467;
            v19 = (uint64_t)v471;
            v405 = v471[3];
            v407 = v405 >> 1;
          }
          *(_QWORD *)(v19 + 16) = v408;
          v409 = (CGFloat *)(v19 + 32 * v406);
          v409[4] = v403;
          v409[5] = v402;
          *((_QWORD *)v409 + 6) = v401;
          v409[7] = v400;
          v410 = *(CGPoint *)(v69 + 64);
          v411 = *(CGPoint *)(v69 + 80);
          v412 = v406 + 2;
          if (v407 < (uint64_t)(v406 + 2))
          {
            v496 = *(CGPoint *)(v69 + 64);
            v488 = v411;
            v472 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v405 > 1), v406 + 2, 1, (_QWORD *)v19);
            v411 = v488;
            v410 = v496;
            v19 = (uint64_t)v472;
          }
          *(_QWORD *)(v19 + 16) = v412;
          v413 = (CGPoint *)(v19 + 32 * v408);
          v413[2] = v410;
          v413[3] = v411;
          v414 = *(CGPoint *)(v69 + 96);
          v415 = *(CGPoint *)(v69 + 112);
          v416 = *(_QWORD *)(v19 + 24);
          v417 = v406 + 3;
          if ((uint64_t)(v406 + 3) > (uint64_t)(v416 >> 1))
          {
            v496 = *(CGPoint *)(v69 + 96);
            v488 = v415;
            v473 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v416 > 1), v406 + 3, 1, (_QWORD *)v19);
            v415 = v488;
            v414 = v496;
            v19 = (uint64_t)v473;
          }
          *(_QWORD *)(v19 + 16) = v417;
          v418 = (CGPoint *)(v19 + 32 * v412);
          v418[2] = v414;
          v418[3] = v415;
          v419 = *(CGPoint *)(v69 + 128);
          v420 = *(CGPoint *)(v69 + 144);
          v421 = *(_QWORD *)(v19 + 24);
          if ((uint64_t)(v406 + 4) > (uint64_t)(v421 >> 1))
          {
            v496 = *(CGPoint *)(v69 + 128);
            v488 = v420;
            v474 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v421 > 1), v406 + 4, 1, (_QWORD *)v19);
            v420 = v488;
            v419 = v496;
            v19 = (uint64_t)v474;
          }
          *(_QWORD *)(v19 + 16) = v406 + 4;
          v422 = (CGPoint *)(v19 + 32 * v417);
          v422[2] = v419;
          v422[3] = v420;
LABEL_178:
          swift_setDeallocating(v69);
          swift_deallocClassInstance(v69, 32, 7);
LABEL_179:
          v423 = *(_QWORD *)(v19 + 16);
          if (!v423)
            goto LABEL_4;
          v424 = (_QWORD *)v19;
          v425 = (void *)objc_opt_self(UICollectionViewLayoutAttributes);
          v426 = *(double (**)(uint64_t))((swift_isaMask & *v1) + 0x88);
          swift_bridgeObjectRetain(v424);
          *(_QWORD *)&v496.x = v424;
          v427 = (double *)(v424 + 7);
          break;
        default:
          goto LABEL_191;
      }
      while (1)
      {
        v428 = *(v427 - 3);
        v429 = *(v427 - 2);
        v430 = *(v427 - 1);
        v431 = *v427;
        v432 = v499;
        IndexPath.init(item:section:)(v17, 0);
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        v434 = objc_msgSend(v425, "layoutAttributesForCellWithIndexPath:", isa);

        (*(void (**)(char *, uint64_t))(v500 + 8))(v432, v501);
        objc_msgSend(v434, "setFrame:", v428, v429, v430, v431);
        v435 = v434;
        v436 = (uint64_t (*)(CGRect *, _QWORD))v498(&slice);
        v438 = v437;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v436);
        v439 = v1;
        v441 = *(_QWORD *)((*v438 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v440 = *(_QWORD *)((*v438 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v441 >= v440 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v440 > 1, v441 + 1, 1);
        v442 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v441, v435);
        specialized Array._endMutation()(v442);
        v443 = v436(&slice, 0);
        v525.origin.x = v426(v443);
        v527.origin.x = v21;
        v527.origin.y = v22;
        v527.size.width = v18;
        v527.size.height = v20;
        v526 = CGRectUnion(v525, v527);
        v497((__n128)v526.origin, *(__n128 *)&v526.origin.y, (__n128)v526.size, *(__n128 *)&v526.size.height);

        if (v17 == 0x7FFFFFFFFFFFFFFFLL)
          break;
        v1 = v439;
        ++v17;
        v427 += 4;
        v18 = v430;
        v20 = v431;
        v21 = v428;
        v22 = v429;
        if (!--v423)
        {
          v19 = *(_QWORD *)&v496.x;
          swift_bridgeObjectRelease(*(_QWORD *)&v496.x);
          v18 = v430;
          v20 = v431;
          v21 = v428;
          v22 = v429;
          v16 = v492;
LABEL_4:
          if (v17 >= v495)
          {

            v475 = (_QWORD *)v19;
            goto LABEL_187;
          }
          goto LABEL_5;
        }
      }
      __break(1u);
LABEL_191:

      v475 = _swiftEmptyArrayStorage;
LABEL_187:
      swift_bridgeObjectRelease(v475);
    }
  }
}

uint64_t type metadata accessor for MOSuggestionSheetMosaicLayout()
{
  return objc_opt_self(_TtC16MomentsUIService29MOSuggestionSheetMosaicLayout);
}

void CGRect.dividedIntegral(fraction:from:)(CGRectEdge a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, CGFloat a7@<D4>)
{
  CGSize size;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  CGPoint origin;
  CGFloat v22;
  CGRect v23;
  CGRect slice;
  CGRect v25;

  type metadata accessor for CGRectEdge(0);
  v20 = v19;
  origin.x = a6;
  switch(a1)
  {
    case CGRectMinXEdge:
    case CGRectMaxXEdge:
      goto LABEL_3;
    case CGRectMinYEdge:
    case CGRectMaxYEdge:
      origin.x = a7;
LABEL_3:
      v22 = ceil(origin.x * a3);
      memset(&slice, 0, sizeof(slice));
      memset(&v23, 0, sizeof(v23));
      v25.origin.x = a4;
      v25.origin.y = a5;
      v25.size.width = a6;
      v25.size.height = a7;
      CGRectDivide(v25, &slice, &v23, v22, a1);
      origin = slice.origin;
      size = slice.size;
      v16.n128_u64[0] = *(_QWORD *)&v23.origin.y;
      v15.n128_u64[0] = *(_QWORD *)&v23.origin.x;
      v18.n128_u64[0] = *(_QWORD *)&v23.size.height;
      v17.n128_u64[0] = *(_QWORD *)&v23.size.width;
      switch(a1)
      {
        case CGRectMinXEdge:
        case CGRectMaxXEdge:
          v15.n128_f64[0] = v23.origin.x + 1.0;
          v17.n128_f64[0] = v23.size.width + -1.0;
          break;
        case CGRectMinYEdge:
        case CGRectMaxYEdge:
          v16.n128_f64[0] = v23.origin.y + 1.0;
          v18.n128_f64[0] = v23.size.height + -1.0;
          break;
        default:
          goto LABEL_7;
      }
      *(CGPoint *)a2 = slice.origin;
      *(CGSize *)(a2 + 16) = size;
      *(_QWORD *)(a2 + 32) = v15.n128_u64[0];
      *(_QWORD *)(a2 + 40) = v16.n128_u64[0];
      *(_QWORD *)(a2 + 48) = v17.n128_u64[0];
      *(_QWORD *)(a2 + 56) = v18.n128_u64[0];
      break;
    default:
LABEL_7:
      LODWORD(slice.origin.x) = a1;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v20, &slice, v20, &type metadata for UInt32, (__n128)origin, (__n128)size, v15, v16, v17, v18);
      __break(1u);
      break;
  }
}

double MOSuggestionSheetHalfMosaicLayout.firstRect(segmentFrame:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double v5;

  CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&v5, 0.5, a1, a2, a3, a4);
  return v5;
}

__n128 MOSuggestionSheetHalfMosaicLayout.quarterRects(of:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  __n128 v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  double v9;
  double v10;
  CGFloat v11;
  CGFloat v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  __n128 result;
  __int128 v18;
  __n128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  CGFloat v23;
  CGFloat v24;
  __n128 v25;
  double v26;
  double v27;

  CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&v22, 0.5, a1, a2, a3, a4);
  v4 = v25;
  v5 = v26;
  v6 = v27;
  CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&v22, 0.5, *(CGFloat *)&v22, *((CGFloat *)&v22 + 1), v23, v24);
  v7 = v23;
  v8 = v24;
  v20 = v22;
  v21 = v25;
  v9 = v26;
  v10 = v27;
  CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&v22, 0.5, v4.n128_f64[0], v4.n128_f64[1], v5, v6);
  v11 = v23;
  v12 = v24;
  v18 = v22;
  v19 = v25;
  v13 = v26;
  v14 = v27;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
  v16 = swift_allocObject(v15, 160, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10019ED30;
  *(_OWORD *)(v16 + 32) = v20;
  *(CGFloat *)(v16 + 48) = v7;
  *(CGFloat *)(v16 + 56) = v8;
  *(_OWORD *)(v16 + 64) = v18;
  *(CGFloat *)(v16 + 80) = v11;
  *(CGFloat *)(v16 + 88) = v12;
  *(__n128 *)(v16 + 96) = v21;
  *(double *)(v16 + 112) = v9;
  *(double *)(v16 + 120) = v10;
  result = v19;
  *(__n128 *)(v16 + 128) = v19;
  *(double *)(v16 + 144) = v13;
  *(double *)(v16 + 152) = v14;
  return result;
}

double MOSuggestionSheetMosaicLayout.collectionViewContentSize.getter()
{
  _QWORD *v0;
  double v1;

  (*(void (**)(void))((swift_isaMask & *v0) + 0x88))();
  return v1;
}

id MOSuggestionSheetHalfMosaicLayout.shouldInvalidateLayout(forBoundsChange:)(double a1, double a2, CGFloat a3, CGFloat a4)
{
  void *v4;
  id result;
  void *v8;
  _BOOL4 v9;
  CGSize v10;
  CGSize v11;

  result = objc_msgSend(v4, "collectionView");
  if (result)
  {
    v8 = result;
    objc_msgSend(result, "bounds");
    v10.width = a3;
    v10.height = a4;
    v9 = CGSizeEqualToSize(v10, v11);

    return (id)!v9;
  }
  return result;
}

uint64_t MOSuggestionSheetMosaicLayout.layoutAttributesForItem(at:)()
{
  _QWORD *v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  id v10;
  id v11;

  v1 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x70);
  v2 = v1();
  v3 = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 >= 0)
      v2 &= 0xFFFFFFFFFFFFFF8uLL;
    v4 = _CocoaArrayWrapper.endIndex.getter(v2);
  }
  else
  {
    v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = swift_bridgeObjectRelease(v3);
  v6 = IndexPath.item.getter(v5);
  if (v6 >= v4)
    return 0;
  v7 = IndexPath.item.getter(v6);
  result = v1();
  v9 = result;
  if ((result & 0xC000000000000001) != 0)
  {
    v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, result);
    goto LABEL_8;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v7 < *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v10 = *(id *)(result + 8 * v7 + 32);
LABEL_8:
    v11 = v10;
    swift_bridgeObjectRelease(v9);
    return (uint64_t)v11;
  }
  __break(1u);
  return result;
}

void MOSuggestionSheetMosaicLayout.layoutAttributesForElements(in:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  _QWORD *v4;
  Swift::Int v5;
  _QWORD *v6;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(void);
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  unint64_t v28;
  unint64_t v29;
  uint64_t (*v30)(void);
  BOOL v31;
  id v32;
  double MaxY;
  id v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::Int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t (*v42)(void);
  Swift::Int v43;
  unint64_t v44;
  unint64_t v45;
  id v46;
  double MinY;
  id v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(void);
  unint64_t v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;

  v6 = v4;
  v11 = *v4;
  v59 = (unint64_t)_swiftEmptyArrayStorage;
  v12 = &swift_isaMask;
  v13 = *(uint64_t (**)(void))((swift_isaMask & v11) + 0x70);
  v14 = v13();
  v15 = v14;
  if (v14 >> 62)
    goto LABEL_57;
  v16 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRelease(v14);
LABEL_3:
  if (v16)
  {
    v17 = (*(uint64_t (**)(_QWORD, uint64_t, CGFloat, CGFloat, CGFloat, CGFloat))((*v12 & *v6) + 0xD8))(0, v16 - 1, a1, a2, a3, a4);
    if ((v18 & 1) == 0)
    {
      v5 = v17;
      v15 = (uint64_t)v6;
      v19 = v13();
      if (v5 < 0)
      {
        while (1)
        {
          __break(1u);
LABEL_63:
          v53 = v15 < 0 ? v15 : v15 & 0xFFFFFFFFFFFFFF8;
          if (_CocoaArrayWrapper.endIndex.getter(v53) < 0)
            break;
          swift_bridgeObjectRetain(v15);
          v54 = _CocoaArrayWrapper.endIndex.getter(v53);
          swift_bridgeObjectRelease(v15);
          if (v54 >= v5)
            goto LABEL_8;
LABEL_68:
          __break(1u);
LABEL_69:
          if (v15 < 0)
            v55 = v15;
          else
            v55 = v15 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v15);
          v6 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v55);
          swift_bridgeObjectRelease(v15);
          if ((uint64_t)v6 < v5)
            goto LABEL_79;
          swift_bridgeObjectRetain(v15);
          v56 = _CocoaArrayWrapper.endIndex.getter(v55);
          swift_bridgeObjectRelease(v15);
          if (v56 < v5)
            goto LABEL_80;
          swift_bridgeObjectRetain(v15);
          v57 = _CocoaArrayWrapper.endIndex.getter(v55);
          swift_bridgeObjectRelease(v15);
          if (v57 < (uint64_t)v6)
          {
            __break(1u);
            goto LABEL_76;
          }
LABEL_33:
          if ((v15 & 0xC000000000000001) != 0 && (_QWORD *)v5 != v6)
          {
            if (v5 >= (uint64_t)v6)
              goto LABEL_77;
            type metadata accessor for UICollectionViewLayoutAttributes();
            v39 = v5;
            do
            {
              v40 = (_QWORD *)(v39 + 1);
              _ArrayBuffer._typeCheckSlowPath(_:)(v39);
              v39 = (Swift::Int)v40;
            }
            while (v6 != v40);
          }
          if (!v16)
          {
            v12 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFF8);
            v13 = (uint64_t (*)(void))((v15 & 0xFFFFFFFFFFFFFF8) + 32);
            if ((_QWORD *)v5 != v6)
              goto LABEL_45;
LABEL_52:
            swift_unknownObjectRelease(v12);
            return;
          }
          if (v15 < 0)
            v41 = v15;
          else
            v41 = v15 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v15);
          v12 = (_QWORD *)_CocoaArrayWrapper.subscript.getter(v5, v6, v41);
          v13 = v42;
          v5 = v43;
          v45 = v44;
          swift_bridgeObjectRelease_n(v15, 2);
          v6 = (_QWORD *)(v45 >> 1);
          if ((_QWORD *)v5 == v6)
            goto LABEL_52;
LABEL_45:
          while (v5 < (uint64_t)v6)
          {
            v46 = *((id *)v13 + v5);
            objc_msgSend(v46, "frame");
            MinY = CGRectGetMinY(v62);
            v63.origin.x = a1;
            v63.origin.y = a2;
            v63.size.width = a3;
            v63.size.height = a4;
            if (MinY > CGRectGetMaxY(v63))
            {

              goto LABEL_52;
            }
            v48 = v46;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v48);
            v50 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v49 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v50 >= v49 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
            ++v5;
            v51 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v50, v48);
            v15 = (uint64_t)&v59;
            specialized Array._endMutation()(v51);

            if (v6 == (_QWORD *)v5)
              goto LABEL_52;
          }
LABEL_56:
          __break(1u);
LABEL_57:
          if (v15 < 0)
            v52 = v15;
          else
            v52 = v15 & 0xFFFFFFFFFFFFFF8;
          v16 = _CocoaArrayWrapper.endIndex.getter(v52);
          swift_bridgeObjectRelease(v15);
          if ((v16 & 0x8000000000000000) == 0)
            goto LABEL_3;
          __break(1u);
        }
      }
      else
      {
        v15 = v19;
        v16 = v19 >> 62;
        if (v19 >> 62)
          goto LABEL_63;
        if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10) < v5)
          goto LABEL_68;
LABEL_8:
        v58 = v13;
        if ((v15 & 0xC000000000000001) != 0 && v5 != 0)
        {
          type metadata accessor for UICollectionViewLayoutAttributes();
          v21 = 0;
          do
          {
            v22 = v21 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v21);
            v21 = v22;
          }
          while (v5 != v22);
        }
        if (v16)
        {
          if (v15 < 0)
            v25 = v15;
          else
            v25 = v15 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v15);
          v12 = (_QWORD *)_CocoaArrayWrapper.subscript.getter(0, v5, v25);
          v23 = v26;
          v13 = v27;
          v29 = v28;
          swift_bridgeObjectRelease_n(v15, 2);
          v24 = (uint64_t (*)(void))(v29 >> 1);
        }
        else
        {
          v13 = 0;
          v12 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFF8);
          v23 = (v15 & 0xFFFFFFFFFFFFFF8) + 32;
          v24 = (uint64_t (*)(void))v5;
        }
        if (v24 != v13)
        {
          v30 = v24;
          while (1)
          {
            v31 = __OFSUB__(v30, 1);
            v30 = (uint64_t (*)(void))((char *)v30 - 1);
            if (v31)
            {
              __break(1u);
LABEL_55:
              __break(1u);
              goto LABEL_56;
            }
            if ((uint64_t)v30 < (uint64_t)v13 || (uint64_t)v30 >= (uint64_t)v24)
              goto LABEL_55;
            v32 = *(id *)(v23 + 8 * (_QWORD)v30);
            objc_msgSend(v32, "frame");
            MaxY = CGRectGetMaxY(v60);
            v61.origin.x = a1;
            v61.origin.y = a2;
            v61.size.width = a3;
            v61.size.height = a4;
            if (CGRectGetMinY(v61) > MaxY)
              break;
            v34 = v32;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v34);
            v36 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v35 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v36 >= v35 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
            v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
            v15 = (uint64_t)&v59;
            specialized Array._endMutation()(v37);

            if (v30 == v13)
              goto LABEL_31;
          }

        }
LABEL_31:
        v38 = swift_unknownObjectRelease(v12);
        v15 = ((uint64_t (*)(uint64_t))v58)(v38);
        v16 = (unint64_t)v15 >> 62;
        if ((unint64_t)v15 >> 62)
          goto LABEL_69;
        v6 = *(_QWORD **)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
        if ((uint64_t)v6 >= v5)
          goto LABEL_33;
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
      }
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
    }
  }
}

uint64_t MOSuggestionSheetMosaicLayout.assetGridHeight(assetCount:totalWidth:)(uint64_t result)
{
  _QWORD *v1;

  if (result)
    return (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA0))();
  return result;
}

uint64_t MOSuggestionSheetMosaicLayout.binSearch(_:start:end:)(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  id v19;
  void *v20;
  double MaxY;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;

  if (a2 < a1)
    return 0;
  v16 = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
LABEL_19:
    v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v8);
LABEL_11:
    v20 = v19;
    swift_bridgeObjectRelease(v8);
    objc_msgSend(v20, "frame");
    v31.origin.x = v13;
    v31.origin.y = v12;
    v31.size.width = v11;
    v31.size.height = v10;
    if (CGRectIntersectsRect(v28, v31))
    {

    }
    else
    {
      objc_msgSend(v20, "frame");
      MaxY = CGRectGetMaxY(v29);
      v30.origin.x = v13;
      v30.origin.y = v12;
      v30.size.width = v11;
      v30.size.height = v10;
      if (MaxY >= CGRectGetMinY(v30))
      {
        v27 = v6 - 1;
        v22.n128_f64[0] = v13;
        v23.n128_f64[0] = v12;
        v24.n128_f64[0] = v11;
        v25.n128_f64[0] = v10;
        v26 = a1;
      }
      else
      {
        v26 = v6 + 1;
        v22.n128_f64[0] = v13;
        v23.n128_f64[0] = v12;
        v24.n128_f64[0] = v11;
        v25.n128_f64[0] = v10;
        v27 = a2;
      }
      v6 = (*(uint64_t (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))((*v9 & *v7) + 0xD8))(v26, v27, v22, v23, v24, v25);

    }
    return v6;
  }
  v10 = a6;
  v11 = a5;
  v12 = a4;
  v13 = a3;
  if (v16 >= 0)
    v17 = a1 + a2;
  else
    v17 = v16 + 1;
  v6 = v17 >> 1;
  v9 = &swift_isaMask;
  result = (*(uint64_t (**)(void))((swift_isaMask & *v7) + 0x70))();
  v8 = result;
  if ((result & 0xC000000000000001) != 0)
    goto LABEL_19;
  if (v16 < -1)
  {
    __break(1u);
  }
  else if (v6 < *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v19 = *(id *)(result + 8 * v6 + 32);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

id MOSuggestionSheetMosaicLayout.init()()
{
  _BYTE *v0;
  _OWORD *v1;
  char *v2;
  objc_super v4;

  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_cachedAttributes] = _swiftEmptyArrayStorage;
  v1 = &v0[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_contentBounds];
  *v1 = 0u;
  v1[1] = 0u;
  v0[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_isFullHeight] = 1;
  v2 = &v0[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_mosaicSegmentDelegate];
  *((_QWORD *)v2 + 1) = 0;
  swift_unknownObjectWeakInit(v2);
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for MOSuggestionSheetMosaicLayout();
  return objc_msgSendSuper2(&v4, "init");
}

id MOSuggestionSheetMosaicLayout.init(coder:)(void *a1)
{
  _BYTE *v1;
  _OWORD *v3;
  char *v4;
  id v5;
  objc_super v7;

  *(_QWORD *)&v1[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_cachedAttributes] = _swiftEmptyArrayStorage;
  v3 = &v1[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_contentBounds];
  *v3 = 0u;
  v3[1] = 0u;
  v1[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_isFullHeight] = 1;
  v4 = &v1[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_mosaicSegmentDelegate];
  *((_QWORD *)v4 + 1) = 0;
  swift_unknownObjectWeakInit(v4);
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for MOSuggestionSheetMosaicLayout();
  v5 = objc_msgSendSuper2(&v7, "initWithCoder:", a1);

  return v5;
}

id MOSuggestionSheetMosaicLayout.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetMosaicLayout();
  return objc_msgSendSuper2(&v2, "dealloc");
}

_QWORD *specialized MOSuggestionSheetMosaicLayout.firstRowRects(segmentFrame:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v4;
  uint64_t v5;
  CGFloat v6;
  __int128 v7;
  CGFloat v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  __int128 v13;
  CGFloat v14;
  CGFloat v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[32];
  _BYTE v57[32];

  CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)v56, 0.5, a1, a2, a3, a4);
  v4 = *(_QWORD *)v56;
  v54 = *(_OWORD *)&v56[8];
  v5 = *(_QWORD *)&v56[24];
  v7 = *(_OWORD *)v57;
  v6 = *(double *)&v57[16];
  v8 = *(double *)&v57[24];
  v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, _swiftEmptyArrayStorage);
  v11 = v9[2];
  v10 = v9[3];
  if (v11 >= v10 >> 1)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
  v9[2] = v11 + 1;
  v12 = &v9[4 * v11];
  v12[4] = v4;
  *(_OWORD *)(v12 + 5) = v54;
  v12[7] = v5;
  CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)v56, 0.5, *(CGFloat *)&v7, *((CGFloat *)&v7 + 1), v6, v8);
  v13 = *(_OWORD *)v57;
  v14 = *(double *)&v57[16];
  v15 = *(double *)&v57[24];
  CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)v56, 0.5, *(CGFloat *)v56, *(CGFloat *)&v56[8], *(CGFloat *)&v56[16], *(CGFloat *)&v56[24]);
  v16 = *(_QWORD *)v56;
  v18 = *(_QWORD *)&v56[24];
  v17 = *(_QWORD *)v57;
  v53 = *(_OWORD *)&v56[8];
  v55 = *(_OWORD *)&v57[8];
  v19 = *(_QWORD *)&v57[24];
  CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)v56, 0.5, *(CGFloat *)&v13, *((CGFloat *)&v13 + 1), v14, v15);
  v20 = *(_OWORD *)v56;
  v21 = *(_OWORD *)&v56[16];
  v22 = *(_OWORD *)v57;
  v23 = *(_OWORD *)&v57[16];
  v25 = v9[2];
  v24 = v9[3];
  v26 = v24 >> 1;
  v27 = v25 + 1;
  if (v24 >> 1 <= v25)
  {
    v45 = *(_OWORD *)&v57[16];
    v49 = *(_OWORD *)v57;
    v41 = *(_OWORD *)&v56[16];
    v43 = *(_OWORD *)v56;
    v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v9);
    v21 = v41;
    v20 = v43;
    v23 = v45;
    v22 = v49;
    v9 = v37;
    v24 = v37[3];
    v26 = v24 >> 1;
  }
  v9[2] = v27;
  v28 = &v9[4 * v25];
  v28[4] = v16;
  *(_OWORD *)(v28 + 5) = v53;
  v28[7] = v18;
  v29 = v25 + 2;
  if (v26 < (uint64_t)(v25 + 2))
  {
    v46 = v23;
    v50 = v22;
    v42 = v21;
    v44 = v20;
    v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 2, 1, v9);
    v21 = v42;
    v20 = v44;
    v23 = v46;
    v22 = v50;
    v9 = v38;
  }
  v9[2] = v29;
  v30 = &v9[4 * v27];
  *((_OWORD *)v30 + 2) = v20;
  *((_OWORD *)v30 + 3) = v21;
  v31 = v9[3];
  v32 = v25 + 3;
  if ((uint64_t)(v25 + 3) > (uint64_t)(v31 >> 1))
  {
    v47 = v23;
    v51 = v22;
    v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v25 + 3, 1, v9);
    v23 = v47;
    v22 = v51;
    v9 = v39;
  }
  v9[2] = v32;
  v33 = &v9[4 * v29];
  v33[4] = v17;
  *(_OWORD *)(v33 + 5) = v55;
  v33[7] = v19;
  v34 = v9[3];
  if ((uint64_t)(v25 + 4) > (uint64_t)(v34 >> 1))
  {
    v48 = v23;
    v52 = v22;
    v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v25 + 4, 1, v9);
    v23 = v48;
    v22 = v52;
    v9 = v40;
  }
  v9[2] = v25 + 4;
  v35 = &v9[4 * v32];
  *((_OWORD *)v35 + 2) = v22;
  *((_OWORD *)v35 + 3) = v23;
  return v9;
}

unint64_t type metadata accessor for UICollectionViewLayoutAttributes()
{
  unint64_t result;
  uint64_t v1;

  result = lazy cache variable for type metadata for UICollectionViewLayoutAttributes;
  if (!lazy cache variable for type metadata for UICollectionViewLayoutAttributes)
  {
    v1 = objc_opt_self(UICollectionViewLayoutAttributes);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewLayoutAttributes);
  }
  return result;
}

uint64_t sub_1000438DC@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x70))();
  *a2 = result;
  return result;
}

uint64_t sub_10004391C(_QWORD *a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x78);
  v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

void sub_10004395C(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(double *)a2 = (*(double (**)(void))((swift_isaMask & **a1) + 0x88))();
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
}

uint64_t sub_1000439A0(double *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(double, double, double, double))((swift_isaMask & **a2) + 0x90))(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1000439E0@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xA0))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_100043A24(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((swift_isaMask & **a2) + 0xA8))(*a1);
}

uint64_t sub_100043A60@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xB8))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100043AA0(_QWORD *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = a1[1];
  v3 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0xC0);
  v4 = swift_unknownObjectRetain(*a1);
  return v3(v4, v2);
}

id MOSuggestionSheetFilterCollectionView.__allocating_init(frame:collectionViewLayout:)(void *a1, double a2, double a3, double a4, double a5)
{
  objc_class *v5;
  id v7;

  v7 = objc_msgSend(objc_allocWithZone(v5), "initWithFrame:collectionViewLayout:", a1, a2, a3, a4, a5);

  return v7;
}

id MOSuggestionSheetGridCollectionView.init(frame:collectionViewLayout:)(void *a1, double a2, double a3, double a4, double a5)
{
  void *v5;
  id v11;
  uint64_t v12;
  uint64_t ObjCClassFromMetadata;
  id v14;
  NSString v15;
  id v16;
  objc_super v18;

  v18.receiver = v5;
  v18.super_class = (Class)type metadata accessor for MOSuggestionSheetGridCollectionView();
  v11 = objc_msgSendSuper2(&v18, "initWithFrame:collectionViewLayout:", a1, a2, a3, a4, a5);
  v12 = type metadata accessor for MOSuggestionSheetMosaicCell();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v12);
  v14 = v11;
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "registerClass:forCellWithReuseIdentifier:", ObjCClassFromMetadata, v15);

  objc_msgSend(v14, "setScrollEnabled:", 0);
  v16 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
  objc_msgSend(v14, "setBackgroundColor:", v16);

  return v14;
}

uint64_t type metadata accessor for MOSuggestionSheetGridCollectionView()
{
  return objc_opt_self(_TtC16MomentsUIService35MOSuggestionSheetGridCollectionView);
}

id MOSuggestionSheetGridCollectionView.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t ObjCClassFromMetadata;
  id v6;
  NSString v7;
  id v8;
  objc_super v10;

  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for MOSuggestionSheetGridCollectionView();
  v3 = objc_msgSendSuper2(&v10, "initWithCoder:", a1);
  if (v3)
  {
    v4 = type metadata accessor for MOSuggestionSheetMosaicCell();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v4);
    v6 = v3;
    v7 = String._bridgeToObjectiveC()();
    objc_msgSend(v6, "registerClass:forCellWithReuseIdentifier:", ObjCClassFromMetadata, v7);

    objc_msgSend(v6, "setScrollEnabled:", 0);
    v8 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
    objc_msgSend(v6, "setBackgroundColor:", v8);

    a1 = v8;
  }

  return v3;
}

id MOSuggestionSheetGridCollectionView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetGridCollectionView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t MOSuggestionAssetTileSize.description.getter(char a1)
{
  unint64_t result;

  switch(a1)
  {
    case 2:
      result = 0x4C4C414D53;
      break;
    case 3:
      result = 1414744396;
      break;
    case 4:
      result = 0xD000000000000011;
      break;
    case 5:
      result = 0x454752414CLL;
      break;
    case 6:
      result = 0x414C5F4152545845;
      break;
    case 7:
      result = 0xD000000000000015;
      break;
    case 8:
      result = 0x455243534C4C5546;
      break;
    case 9:
    case 10:
      result = 0xD000000000000016;
      break;
    default:
      result = 0x524546534E415254;
      break;
  }
  return result;
}

Swift::Bool __swiftcall MOSuggestionAssetTileSize.isHighestQualityForTransfer()()
{
  unsigned __int8 v0;

  return v0 - 11 < 0xFFFFFFF7;
}

Swift::Bool __swiftcall MOSuggestionAssetTileSize.isHighestQualityForTransfer3P()()
{
  unsigned __int8 v0;

  return (v0 - 11 < 0xFFFFFFF7) & v0;
}

void MOSuggestionAssetTileSize.hash(into:)(uint64_t a1, char a2)
{
  Swift::UInt v2;

  if ((a2 - 2) >= 9u)
  {
    Hasher._combine(_:)(7uLL);
    v2 = a2 & 1;
  }
  else
  {
    v2 = qword_10019F508[(char)(a2 - 2)];
  }
  Hasher._combine(_:)(v2);
}

Swift::Int MOSuggestionAssetTileSize.hashValue.getter(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  MOSuggestionAssetTileSize.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MOSuggestionAssetTileSize()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  MOSuggestionAssetTileSize.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance MOSuggestionAssetTileSize(uint64_t a1)
{
  char *v1;

  MOSuggestionAssetTileSize.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MOSuggestionAssetTileSize(uint64_t a1)
{
  char *v1;
  char v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  MOSuggestionAssetTileSize.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MOSuggestionAssetTileSize(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static MOSuggestionAssetTileSize.__derived_enum_equals(_:_:)(*a1, *a2);
}

uint64_t one-time initialization function for tileSizesByCount()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, [MOSuggestionAssetTileSize])>);
  inited = swift_initStackObject(v0, &v30);
  *(_OWORD *)(inited + 16) = xmmword_10019F5E0;
  *(_QWORD *)(inited + 32) = 1;
  if (one-time initialization token for oneAssetsGrid != -1)
    swift_once(&one-time initialization token for oneAssetsGrid, one-time initialization function for oneAssetsGrid);
  v2 = static MOSuggestionLayoutEngine.FullWidth.oneAssetsGrid;
  *(_QWORD *)(inited + 40) = static MOSuggestionLayoutEngine.FullWidth.oneAssetsGrid;
  *(_QWORD *)(inited + 48) = 2;
  v3 = one-time initialization token for twoAssetsGrid;
  swift_bridgeObjectRetain(v2);
  if (v3 != -1)
    swift_once(&one-time initialization token for twoAssetsGrid, one-time initialization function for twoAssetsGrid);
  v4 = static MOSuggestionLayoutEngine.FullWidth.twoAssetsGrid;
  *(_QWORD *)(inited + 56) = static MOSuggestionLayoutEngine.FullWidth.twoAssetsGrid;
  *(_QWORD *)(inited + 64) = 3;
  v5 = one-time initialization token for threeAssetsGrid;
  swift_bridgeObjectRetain(v4);
  if (v5 != -1)
    swift_once(&one-time initialization token for threeAssetsGrid, one-time initialization function for threeAssetsGrid);
  v6 = static MOSuggestionLayoutEngine.FullWidth.threeAssetsGrid;
  *(_QWORD *)(inited + 72) = static MOSuggestionLayoutEngine.FullWidth.threeAssetsGrid;
  *(_QWORD *)(inited + 80) = 4;
  v7 = one-time initialization token for fourAssetsGrid;
  swift_bridgeObjectRetain(v6);
  if (v7 != -1)
    swift_once(&one-time initialization token for fourAssetsGrid, one-time initialization function for fourAssetsGrid);
  v8 = static MOSuggestionLayoutEngine.FullWidth.fourAssetsGrid;
  *(_QWORD *)(inited + 88) = static MOSuggestionLayoutEngine.FullWidth.fourAssetsGrid;
  *(_QWORD *)(inited + 96) = 5;
  v9 = one-time initialization token for fiveAssetsGrid;
  swift_bridgeObjectRetain(v8);
  if (v9 != -1)
    swift_once(&one-time initialization token for fiveAssetsGrid, one-time initialization function for fiveAssetsGrid);
  v10 = static MOSuggestionLayoutEngine.FullWidth.fiveAssetsGrid;
  *(_QWORD *)(inited + 104) = static MOSuggestionLayoutEngine.FullWidth.fiveAssetsGrid;
  *(_QWORD *)(inited + 112) = 6;
  v11 = one-time initialization token for sixAssetsGrid;
  swift_bridgeObjectRetain(v10);
  if (v11 != -1)
    swift_once(&one-time initialization token for sixAssetsGrid, one-time initialization function for sixAssetsGrid);
  v12 = static MOSuggestionLayoutEngine.FullWidth.sixAssetsGrid;
  *(_QWORD *)(inited + 120) = static MOSuggestionLayoutEngine.FullWidth.sixAssetsGrid;
  *(_QWORD *)(inited + 128) = 7;
  v13 = one-time initialization token for sevenAssetsGrid;
  swift_bridgeObjectRetain(v12);
  if (v13 != -1)
    swift_once(&one-time initialization token for sevenAssetsGrid, one-time initialization function for sevenAssetsGrid);
  v14 = static MOSuggestionLayoutEngine.FullWidth.sevenAssetsGrid;
  *(_QWORD *)(inited + 136) = static MOSuggestionLayoutEngine.FullWidth.sevenAssetsGrid;
  *(_QWORD *)(inited + 144) = 8;
  v15 = one-time initialization token for eightAssetsGrid;
  swift_bridgeObjectRetain(v14);
  if (v15 != -1)
    swift_once(&one-time initialization token for eightAssetsGrid, one-time initialization function for eightAssetsGrid);
  v16 = static MOSuggestionLayoutEngine.FullWidth.eightAssetsGrid;
  *(_QWORD *)(inited + 152) = static MOSuggestionLayoutEngine.FullWidth.eightAssetsGrid;
  *(_QWORD *)(inited + 160) = 9;
  v17 = one-time initialization token for nineAssetsGrid;
  swift_bridgeObjectRetain(v16);
  if (v17 != -1)
    swift_once(&one-time initialization token for nineAssetsGrid, one-time initialization function for nineAssetsGrid);
  v18 = static MOSuggestionLayoutEngine.FullWidth.nineAssetsGrid;
  *(_QWORD *)(inited + 168) = static MOSuggestionLayoutEngine.FullWidth.nineAssetsGrid;
  *(_QWORD *)(inited + 176) = 10;
  v19 = one-time initialization token for tenAssetsGrid;
  swift_bridgeObjectRetain(v18);
  if (v19 != -1)
    swift_once(&one-time initialization token for tenAssetsGrid, one-time initialization function for tenAssetsGrid);
  v20 = static MOSuggestionLayoutEngine.FullWidth.tenAssetsGrid;
  *(_QWORD *)(inited + 184) = static MOSuggestionLayoutEngine.FullWidth.tenAssetsGrid;
  *(_QWORD *)(inited + 192) = 11;
  v21 = one-time initialization token for elevenAssetsGrid;
  swift_bridgeObjectRetain(v20);
  if (v21 != -1)
    swift_once(&one-time initialization token for elevenAssetsGrid, one-time initialization function for elevenAssetsGrid);
  v22 = static MOSuggestionLayoutEngine.FullWidth.elevenAssetsGrid;
  *(_QWORD *)(inited + 200) = static MOSuggestionLayoutEngine.FullWidth.elevenAssetsGrid;
  *(_QWORD *)(inited + 208) = 12;
  v23 = one-time initialization token for twelveAssetsGrid;
  swift_bridgeObjectRetain(v22);
  if (v23 != -1)
    swift_once(&one-time initialization token for twelveAssetsGrid, one-time initialization function for twelveAssetsGrid);
  v24 = static MOSuggestionLayoutEngine.FullWidth.twelveAssetsGrid;
  *(_QWORD *)(inited + 216) = static MOSuggestionLayoutEngine.FullWidth.twelveAssetsGrid;
  *(_QWORD *)(inited + 224) = 13;
  v25 = one-time initialization token for thirteenAssetsGrid;
  swift_bridgeObjectRetain(v24);
  if (v25 != -1)
    swift_once(&one-time initialization token for thirteenAssetsGrid, one-time initialization function for thirteenAssetsGrid);
  v26 = static MOSuggestionLayoutEngine.FullWidth.thirteenAssetsGrid;
  *(_QWORD *)(inited + 232) = static MOSuggestionLayoutEngine.FullWidth.thirteenAssetsGrid;
  v27 = specialized Dictionary.init(dictionaryLiteral:)((_QWORD *)inited);
  swift_setDeallocating(inited);
  swift_bridgeObjectRetain(v26);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, [MOSuggestionAssetTileSize]));
  result = swift_arrayDestroy(inited + 32, 13, v28);
  static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount = v27;
  return result;
}

{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, [MOSuggestionAssetTileSize])>);
  inited = swift_initStackObject(v0, &v12);
  *(_OWORD *)(inited + 16) = xmmword_10019ED30;
  *(_QWORD *)(inited + 32) = 1;
  if (one-time initialization token for oneAssetsGrid != -1)
    swift_once(&one-time initialization token for oneAssetsGrid, one-time initialization function for oneAssetsGrid);
  v2 = static MOSuggestionLayoutEngine.HalfWidth.oneAssetsGrid;
  *(_QWORD *)(inited + 40) = static MOSuggestionLayoutEngine.HalfWidth.oneAssetsGrid;
  *(_QWORD *)(inited + 48) = 2;
  v3 = one-time initialization token for twoAssetsGrid;
  swift_bridgeObjectRetain(v2);
  if (v3 != -1)
    swift_once(&one-time initialization token for twoAssetsGrid, one-time initialization function for twoAssetsGrid);
  v4 = static MOSuggestionLayoutEngine.HalfWidth.twoAssetsGrid;
  *(_QWORD *)(inited + 56) = static MOSuggestionLayoutEngine.HalfWidth.twoAssetsGrid;
  *(_QWORD *)(inited + 64) = 3;
  v5 = one-time initialization token for threeAssetsGrid;
  swift_bridgeObjectRetain(v4);
  if (v5 != -1)
    swift_once(&one-time initialization token for threeAssetsGrid, one-time initialization function for threeAssetsGrid);
  v6 = static MOSuggestionLayoutEngine.HalfWidth.threeAssetsGrid;
  *(_QWORD *)(inited + 72) = static MOSuggestionLayoutEngine.HalfWidth.threeAssetsGrid;
  *(_QWORD *)(inited + 80) = 4;
  v7 = one-time initialization token for fourAssetsGrid;
  swift_bridgeObjectRetain(v6);
  if (v7 != -1)
    swift_once(&one-time initialization token for fourAssetsGrid, one-time initialization function for fourAssetsGrid);
  v8 = static MOSuggestionLayoutEngine.HalfWidth.fourAssetsGrid;
  *(_QWORD *)(inited + 88) = static MOSuggestionLayoutEngine.HalfWidth.fourAssetsGrid;
  v9 = specialized Dictionary.init(dictionaryLiteral:)((_QWORD *)inited);
  swift_setDeallocating(inited);
  swift_bridgeObjectRetain(v8);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, [MOSuggestionAssetTileSize]));
  result = swift_arrayDestroy(inited + 32, 4, v10);
  static MOSuggestionLayoutEngine.HalfWidth.tileSizesByCount = v9;
  return result;
}

{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, [MOSuggestionAssetTileSize])>);
  inited = swift_initStackObject(v0, &v6);
  *(_OWORD *)(inited + 16) = xmmword_10019ED20;
  *(_QWORD *)(inited + 32) = 1;
  if (one-time initialization token for oneAssetsGrid != -1)
    swift_once(&one-time initialization token for oneAssetsGrid, one-time initialization function for oneAssetsGrid);
  v2 = static MOSuggestionLayoutEngine.oneAssetsGrid;
  *(_QWORD *)(inited + 40) = static MOSuggestionLayoutEngine.oneAssetsGrid;
  v3 = specialized Dictionary.init(dictionaryLiteral:)((_QWORD *)inited);
  swift_setDeallocating(inited);
  swift_bridgeObjectRetain(v2);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, [MOSuggestionAssetTileSize]));
  result = swift_arrayDestroy(inited + 32, 1, v4);
  static MOSuggestionLayoutEngine.FullWidthCondensed.tileSizesByCount = v3;
  return result;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.oneAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for oneAssetsGrid != -1)
    swift_once(&one-time initialization token for oneAssetsGrid, one-time initialization function for oneAssetsGrid);
  return &static MOSuggestionLayoutEngine.FullWidth.oneAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.twoAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for twoAssetsGrid != -1)
    swift_once(&one-time initialization token for twoAssetsGrid, one-time initialization function for twoAssetsGrid);
  return &static MOSuggestionLayoutEngine.FullWidth.twoAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.threeAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for threeAssetsGrid != -1)
    swift_once(&one-time initialization token for threeAssetsGrid, one-time initialization function for threeAssetsGrid);
  return &static MOSuggestionLayoutEngine.FullWidth.threeAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.fourAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for fourAssetsGrid != -1)
    swift_once(&one-time initialization token for fourAssetsGrid, one-time initialization function for fourAssetsGrid);
  return &static MOSuggestionLayoutEngine.FullWidth.fourAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.fiveAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for fiveAssetsGrid != -1)
    swift_once(&one-time initialization token for fiveAssetsGrid, one-time initialization function for fiveAssetsGrid);
  return &static MOSuggestionLayoutEngine.FullWidth.fiveAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.sixAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for sixAssetsGrid != -1)
    swift_once(&one-time initialization token for sixAssetsGrid, one-time initialization function for sixAssetsGrid);
  return &static MOSuggestionLayoutEngine.FullWidth.sixAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.sevenAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for sevenAssetsGrid != -1)
    swift_once(&one-time initialization token for sevenAssetsGrid, one-time initialization function for sevenAssetsGrid);
  return &static MOSuggestionLayoutEngine.FullWidth.sevenAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.eightAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for eightAssetsGrid != -1)
    swift_once(&one-time initialization token for eightAssetsGrid, one-time initialization function for eightAssetsGrid);
  return &static MOSuggestionLayoutEngine.FullWidth.eightAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.nineAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for nineAssetsGrid != -1)
    swift_once(&one-time initialization token for nineAssetsGrid, one-time initialization function for nineAssetsGrid);
  return &static MOSuggestionLayoutEngine.FullWidth.nineAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.tenAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for tenAssetsGrid != -1)
    swift_once(&one-time initialization token for tenAssetsGrid, one-time initialization function for tenAssetsGrid);
  return &static MOSuggestionLayoutEngine.FullWidth.tenAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.elevenAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for elevenAssetsGrid != -1)
    swift_once(&one-time initialization token for elevenAssetsGrid, one-time initialization function for elevenAssetsGrid);
  return &static MOSuggestionLayoutEngine.FullWidth.elevenAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.twelveAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for twelveAssetsGrid != -1)
    swift_once(&one-time initialization token for twelveAssetsGrid, one-time initialization function for twelveAssetsGrid);
  return &static MOSuggestionLayoutEngine.FullWidth.twelveAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.thirteenAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for thirteenAssetsGrid != -1)
    swift_once(&one-time initialization token for thirteenAssetsGrid, one-time initialization function for thirteenAssetsGrid);
  return &static MOSuggestionLayoutEngine.FullWidth.thirteenAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.unsafeMutableAddressor()
{
  if (one-time initialization token for tileSizesByCount != -1)
    swift_once(&one-time initialization token for tileSizesByCount, one-time initialization function for tileSizesByCount);
  return &static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for tileSizesByCount, &static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount);
}

void one-time initialization function for oneAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.oneAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for oneAssetsGrid;
}

{
  static MOSuggestionLayoutEngine.HalfWidth.oneAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for oneAssetsGrid;
}

{
  static MOSuggestionLayoutEngine.oneAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for oneAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.oneAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for oneAssetsGrid, &static MOSuggestionLayoutEngine.FullWidth.oneAssetsGrid);
}

void one-time initialization function for twoAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.twoAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for twoAssetsGrid;
}

{
  static MOSuggestionLayoutEngine.HalfWidth.twoAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for twoAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.twoAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for twoAssetsGrid, &static MOSuggestionLayoutEngine.FullWidth.twoAssetsGrid);
}

void one-time initialization function for threeAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.threeAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for threeAssetsGrid;
}

{
  static MOSuggestionLayoutEngine.HalfWidth.threeAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for threeAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.threeAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for threeAssetsGrid, &static MOSuggestionLayoutEngine.FullWidth.threeAssetsGrid);
}

void one-time initialization function for fourAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.fourAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for fourAssetsGrid;
}

{
  static MOSuggestionLayoutEngine.HalfWidth.fourAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for fourAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.fourAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for fourAssetsGrid, &static MOSuggestionLayoutEngine.FullWidth.fourAssetsGrid);
}

void one-time initialization function for fiveAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.fiveAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for fiveAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.fiveAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for fiveAssetsGrid, &static MOSuggestionLayoutEngine.FullWidth.fiveAssetsGrid);
}

void one-time initialization function for sixAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.sixAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for sixAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.sixAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for sixAssetsGrid, &static MOSuggestionLayoutEngine.FullWidth.sixAssetsGrid);
}

void one-time initialization function for sevenAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.sevenAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for sevenAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.sevenAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for sevenAssetsGrid, &static MOSuggestionLayoutEngine.FullWidth.sevenAssetsGrid);
}

void one-time initialization function for eightAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.eightAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for eightAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.eightAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for eightAssetsGrid, &static MOSuggestionLayoutEngine.FullWidth.eightAssetsGrid);
}

void one-time initialization function for nineAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.nineAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for nineAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.nineAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for nineAssetsGrid, &static MOSuggestionLayoutEngine.FullWidth.nineAssetsGrid);
}

void one-time initialization function for tenAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.tenAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for tenAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.tenAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for tenAssetsGrid, &static MOSuggestionLayoutEngine.FullWidth.tenAssetsGrid);
}

void one-time initialization function for elevenAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.elevenAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for elevenAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.elevenAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for elevenAssetsGrid, &static MOSuggestionLayoutEngine.FullWidth.elevenAssetsGrid);
}

void one-time initialization function for twelveAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.twelveAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for twelveAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.twelveAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for twelveAssetsGrid, &static MOSuggestionLayoutEngine.FullWidth.twelveAssetsGrid);
}

void one-time initialization function for thirteenAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.thirteenAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for thirteenAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.thirteenAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for thirteenAssetsGrid, &static MOSuggestionLayoutEngine.FullWidth.thirteenAssetsGrid);
}

uint64_t *MOSuggestionLayoutEngine.HalfWidth.oneAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for oneAssetsGrid != -1)
    swift_once(&one-time initialization token for oneAssetsGrid, one-time initialization function for oneAssetsGrid);
  return &static MOSuggestionLayoutEngine.HalfWidth.oneAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.HalfWidth.twoAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for twoAssetsGrid != -1)
    swift_once(&one-time initialization token for twoAssetsGrid, one-time initialization function for twoAssetsGrid);
  return &static MOSuggestionLayoutEngine.HalfWidth.twoAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.HalfWidth.threeAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for threeAssetsGrid != -1)
    swift_once(&one-time initialization token for threeAssetsGrid, one-time initialization function for threeAssetsGrid);
  return &static MOSuggestionLayoutEngine.HalfWidth.threeAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.HalfWidth.fourAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for fourAssetsGrid != -1)
    swift_once(&one-time initialization token for fourAssetsGrid, one-time initialization function for fourAssetsGrid);
  return &static MOSuggestionLayoutEngine.HalfWidth.fourAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.HalfWidth.tileSizesByCount.unsafeMutableAddressor()
{
  if (one-time initialization token for tileSizesByCount != -1)
    swift_once(&one-time initialization token for tileSizesByCount, one-time initialization function for tileSizesByCount);
  return &static MOSuggestionLayoutEngine.HalfWidth.tileSizesByCount;
}

uint64_t static MOSuggestionLayoutEngine.HalfWidth.tileSizesByCount.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for tileSizesByCount, &static MOSuggestionLayoutEngine.HalfWidth.tileSizesByCount);
}

uint64_t static MOSuggestionLayoutEngine.HalfWidth.oneAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for oneAssetsGrid, &static MOSuggestionLayoutEngine.HalfWidth.oneAssetsGrid);
}

uint64_t static MOSuggestionLayoutEngine.HalfWidth.twoAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for twoAssetsGrid, &static MOSuggestionLayoutEngine.HalfWidth.twoAssetsGrid);
}

uint64_t static MOSuggestionLayoutEngine.HalfWidth.threeAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for threeAssetsGrid, &static MOSuggestionLayoutEngine.HalfWidth.threeAssetsGrid);
}

uint64_t static MOSuggestionLayoutEngine.HalfWidth.fourAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for fourAssetsGrid, &static MOSuggestionLayoutEngine.HalfWidth.fourAssetsGrid);
}

uint64_t *MOSuggestionLayoutEngine.oneAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for oneAssetsGrid != -1)
    swift_once(&one-time initialization token for oneAssetsGrid, one-time initialization function for oneAssetsGrid);
  return &static MOSuggestionLayoutEngine.oneAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidthCondensed.tileSizesByCount.unsafeMutableAddressor()
{
  if (one-time initialization token for tileSizesByCount != -1)
    swift_once(&one-time initialization token for tileSizesByCount, one-time initialization function for tileSizesByCount);
  return &static MOSuggestionLayoutEngine.FullWidthCondensed.tileSizesByCount;
}

uint64_t static MOSuggestionLayoutEngine.FullWidthCondensed.tileSizesByCount.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for tileSizesByCount, &static MOSuggestionLayoutEngine.FullWidthCondensed.tileSizesByCount);
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(_QWORD *a1, _QWORD *a2)
{
  if (*a1 != -1)
    swift_once();
  return swift_bridgeObjectRetain(*a2);
}

uint64_t static MOSuggestionLayoutEngine.oneAssetsGrid.getter()
{
  if (one-time initialization token for oneAssetsGrid != -1)
    swift_once(&one-time initialization token for oneAssetsGrid, one-time initialization function for oneAssetsGrid);
  return swift_bridgeObjectRetain(static MOSuggestionLayoutEngine.oneAssetsGrid);
}

double static MOSuggestionLayoutEngine.viewportFromTileSize(_:)(char a1)
{
  if ((a1 - 2) > 8u)
    return 300.0;
  else
    return dbl_10019F550[(char)(a1 - 2)];
}

double static MOSuggestionLayoutEngine.heightToWidthRatio(_:)(char a1)
{
  double result;

  result = 1.0;
  if ((a1 - 2) <= 8u)
    return dbl_10019F598[(char)(a1 - 2)] / dbl_10019F550[(char)(a1 - 2)];
  return result;
}

double static MOSuggestionLayoutEngine.widthToHeightRatio(_:)(char a1)
{
  double v1;

  v1 = 1.0;
  if ((a1 - 2) <= 8u)
    v1 = dbl_10019F598[(char)(a1 - 2)] / dbl_10019F550[(char)(a1 - 2)];
  return 1.0 / v1;
}

BOOL specialized static MOSuggestionAssetTileSize.__derived_enum_equals(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  _BOOL8 result;

  switch(a1)
  {
    case 2u:
      if (a2 != 2)
        goto LABEL_21;
      result = 1;
      break;
    case 3u:
      if (a2 != 3)
        goto LABEL_21;
      result = 1;
      break;
    case 4u:
      if (a2 != 4)
        goto LABEL_21;
      result = 1;
      break;
    case 5u:
      if (a2 != 5)
        goto LABEL_21;
      result = 1;
      break;
    case 6u:
      if (a2 != 6)
        goto LABEL_21;
      result = 1;
      break;
    case 7u:
      if (a2 != 7)
        goto LABEL_21;
      result = 1;
      break;
    case 8u:
      if (a2 != 8)
        goto LABEL_21;
      result = 1;
      break;
    case 9u:
      if (a2 != 9)
        goto LABEL_21;
      result = 1;
      break;
    case 0xAu:
      if (a2 != 10)
        goto LABEL_21;
      result = 1;
      break;
    default:
      if (a2 - 2 >= 9)
        result = ((a2 ^ a1) & 1) == 0;
      else
LABEL_21:
        result = 0;
      break;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MOSuggestionAssetTransferDelivery and conformance MOSuggestionAssetTransferDelivery()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MOSuggestionAssetTransferDelivery and conformance MOSuggestionAssetTransferDelivery;
  if (!lazy protocol witness table cache variable for type MOSuggestionAssetTransferDelivery and conformance MOSuggestionAssetTransferDelivery)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MOSuggestionAssetTransferDelivery, &type metadata for MOSuggestionAssetTransferDelivery);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionAssetTransferDelivery and conformance MOSuggestionAssetTransferDelivery);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MOSuggestionAssetTileSize and conformance MOSuggestionAssetTileSize()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MOSuggestionAssetTileSize and conformance MOSuggestionAssetTileSize;
  if (!lazy protocol witness table cache variable for type MOSuggestionAssetTileSize and conformance MOSuggestionAssetTileSize)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MOSuggestionAssetTileSize, &type metadata for MOSuggestionAssetTileSize);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionAssetTileSize and conformance MOSuggestionAssetTileSize);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MOSuggestionAssetTransferDelivery(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10004528C + 4 * byte_10019F387[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000452C0 + 4 * byte_10019F382[v4]))();
}

uint64_t sub_1000452C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000452C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000452D0);
  return result;
}

uint64_t sub_1000452DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000452E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000452E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000452F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MOSuggestionAssetTransferDelivery()
{
  return &type metadata for MOSuggestionAssetTransferDelivery;
}

uint64_t getEnumTagSinglePayload for MOSuggestionAssetTileSize(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
  {
    v6 = *a1;
    if (v6 >= 2)
      v7 = v6 - 1;
    else
      v7 = 0;
    if (v7 >= 0xA)
      return v7 - 9;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 10;
    if (a2 + 10 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_10004535C + 4 * byte_10019F38C[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for MOSuggestionAssetTileSize(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 10;
  if (a3 + 10 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xF6)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_100045408 + 4 * byte_10019F396[v5]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_10004543C + 4 * byte_10019F391[v5]))();
}

uint64_t sub_10004543C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100045444(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004544CLL);
  return result;
}

uint64_t sub_100045458(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100045460);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_100045464(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004546C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for MOSuggestionAssetTileSize(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 2)
    return v1 - 1;
  else
    return 0;
}

_BYTE *destructiveInjectEnumTag for MOSuggestionAssetTileSize(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for MOSuggestionAssetTileSize()
{
  return &type metadata for MOSuggestionAssetTileSize;
}

uint64_t type metadata accessor for MOSuggestionLayoutEngine()
{
  return objc_opt_self(_TtC16MomentsUIService24MOSuggestionLayoutEngine);
}

ValueMetadata *type metadata accessor for MOSuggestionLayoutEngine.FullWidth()
{
  return &type metadata for MOSuggestionLayoutEngine.FullWidth;
}

ValueMetadata *type metadata accessor for MOSuggestionLayoutEngine.HalfWidth()
{
  return &type metadata for MOSuggestionLayoutEngine.HalfWidth;
}

ValueMetadata *type metadata accessor for MOSuggestionLayoutEngine.FullWidthCondensed()
{
  return &type metadata for MOSuggestionLayoutEngine.FullWidthCondensed;
}

uint64_t one-time initialization function for queue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue, OS_dispatch_queue_ptr);
  static DispatchQoS.userInteractive.getter();
  v15 = _swiftEmptyArrayStorage;
  v10 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  v12 = lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000031, 0x80000001001A7900, v9, v6, v3, 0);
  static MOSuggestionAssetStateOfMindProvider.queue = result;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue, OS_dispatch_queue_ptr);
  static DispatchQoS.userInteractive.getter();
  v15 = _swiftEmptyArrayStorage;
  v10 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  v12 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002ELL, 0x80000001001AA530, v9, v6, v3, 0);
  static MOSuggestionAssetWorkoutProvider.queue = result;
  return result;
}

uint64_t *MOSuggestionAssetStateOfMindProvider.queue.unsafeMutableAddressor()
{
  if (one-time initialization token for queue != -1)
    swift_once(&one-time initialization token for queue, one-time initialization function for queue);
  return &static MOSuggestionAssetStateOfMindProvider.queue;
}

id static MOSuggestionAssetStateOfMindProvider.queue.getter()
{
  if (one-time initialization token for queue != -1)
    swift_once(&one-time initialization token for queue, one-time initialization function for queue);
  return (id)static MOSuggestionAssetStateOfMindProvider.queue;
}

void MOSuggestionAssetStateOfMindProvider.getStateOfMind(stateOfMindUUID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  Class isa;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  _QWORD v15[5];
  uint64_t v16;

  v4 = v3;
  v7 = (void *)objc_opt_self(HKQuery);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v9 = objc_msgSend(v7, "predicateForObjectWithUUID:", isa);

  v10 = objc_msgSend((id)objc_opt_self(HKObjectType), "stateOfMindType");
  v11 = swift_allocObject(&unk_1001E58B8, 32, 7);
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = objc_allocWithZone((Class)HKSampleQuery);
  v15[4] = partial apply for closure #1 in MOSuggestionAssetStateOfMindProvider.getStateOfMind(stateOfMindUUID:completion:);
  v16 = v11;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed (@guaranteed HKSampleQuery, @guaranteed [HKSample]?, @guaranteed Error?) -> ();
  v15[3] = &block_descriptor_2;
  v13 = _Block_copy(v15);
  v14 = objc_msgSend(v12, "initWithSampleType:predicate:limit:sortDescriptors:resultsHandler:", v10, v9, 1, 0, v13, swift_retain(a3).n128_f64[0]);

  _Block_release(v13);
  objc_msgSend(*(id *)(v4 + 16), "executeQuery:", v14, swift_release(v16).n128_f64[0]);

}

void closure #1 in MOSuggestionAssetStateOfMindProvider.getStateOfMind(stateOfMindUUID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  if (!a2)
    goto LABEL_15;
  v6 = a2 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)a2 >> 62))
  {
    v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (v7)
      goto LABEL_4;
    goto LABEL_14;
  }
  if (a2 >= 0)
    v13 = a2 & 0xFFFFFFFFFFFFFF8;
  else
    v13 = a2;
  swift_bridgeObjectRetain(a2);
  if (!_CocoaArrayWrapper.endIndex.getter(v13))
  {
LABEL_14:
    swift_bridgeObjectRelease(a2);
LABEL_15:
    a4(0);
    return;
  }
LABEL_4:
  if ((a2 & 0xC000000000000001) != 0)
  {
    v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
    goto LABEL_7;
  }
  if (*(_QWORD *)(v6 + 16))
  {
    v8 = *(id *)(a2 + 32);
LABEL_7:
    v9 = v8;
    swift_bridgeObjectRelease(a2);
    v10 = objc_opt_self(HKStateOfMind);
    v11 = swift_dynamicCastObjCClass(v9, v10);
    if (v11)
    {
      v12 = v11;
      v14 = v9;
      a4(v12);

      return;
    }

    goto LABEL_15;
  }
  __break(1u);
}

uint64_t sub_1000459C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void partial apply for closure #1 in MOSuggestionAssetStateOfMindProvider.getStateOfMind(stateOfMindUUID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  closure #1 in MOSuggestionAssetStateOfMindProvider.getStateOfMind(stateOfMindUUID:completion:)(a1, a2, a3, *(void (**)(uint64_t))(v3 + 16));
}

void static MOSuggestionAssetStateOfMindProvider.getAssetFor(valence:cacheType:completion:)(double a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;

  v5 = type metadata accessor for StateOfMindVisualization.ValenceImageProvider.ImageScale(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for StateOfMindVisualization.ValenceImageProvider(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for StateOfMindVisualization.ValenceImageProvider.ImageScale.confirmationView(_:), v5);
  v13 = StateOfMindVisualization.ValenceImageProvider.init(valence:imageScale:)(v8, a1);
  v14 = (void *)StateOfMindVisualization.ValenceImageProvider.uiImage.getter(v13);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v15 = MOSuggestionAssetsTypeStateOfMindAsset;
  v16 = type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for UIImage, UIImage_ptr);
  v17 = objc_msgSend(objc_allocWithZone((Class)MOSuggestionAsset), "init:type:contentClassType:", v14, v15, swift_getObjCClassFromMetadata(v16));
  a3();

}

uint64_t static MOSuggestionAssetStateOfMindProvider.getBackgroundColor(valence:style:)(uint64_t a1, double a2)
{
  type metadata accessor for UIApplication(0, &lazy cache variable for type metadata for CAGradientLayer, CAGradientLayer_ptr);
  return static CAGradientLayer.gradientLayerForValence(_:style:)(a1, a2);
}

uint64_t static MOSuggestionAssetStateOfMindProvider.getValenceClassificationAndReflectiveIntervalLocalized(valenceClassification:reflectiveInterval:)()
{
  id v0;
  uint64_t v1;

  v0 = (id)HKUILocalizedStringForValenceClassificationAndReflectiveInterval();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);

  return v1;
}

uint64_t MOSuggestionAssetStateOfMindProvider.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t MOSuggestionAssetStateOfMindProvider.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t MOSuggestionAssetStateOfMindProvider.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 24, 7);
  *(_QWORD *)(v1 + 16) = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
  return v1;
}

uint64_t MOSuggestionAssetStateOfMindProvider.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
  return v0;
}

double thunk for @escaping @callee_guaranteed (@guaranteed HKSampleQuery, @guaranteed [HKSample]?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v7;
  void (*v8)(id, uint64_t, void *);
  uint64_t v9;
  id v10;
  id v11;
  double result;

  v5 = a3;
  v8 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (a3)
  {
    v9 = type metadata accessor for UIApplication(0, &lazy cache variable for type metadata for HKSample, HKSample_ptr);
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v9);
  }
  swift_retain(v7);
  v10 = a2;
  v11 = a4;
  v8(v10, v5, a4);
  swift_release(v7);

  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_2(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t specialized static MOSuggestionAssetStateOfMindProvider.getLabelsLocalized(labelResource:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  unint64_t v5;
  uint64_t v6;
  __n128 v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double *v13;
  void *v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t result;
  unint64_t v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  swift_bridgeObjectRetain(a1);
  v3 = 0;
  v4 = _swiftEmptyArrayStorage;
  v5 = 0xE000000000000000;
  do
  {
    v6 = *(_QWORD *)(a1 + 8 * v3 + 32);
    v7 = swift_bridgeObjectRelease(v5);
    v8 = (id)HKUILocalizedStringForStateOfMindLabel(v6, v7);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v5 = v10;

    swift_bridgeObjectRetain(v5);
    if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
      v4 = (double *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
    v12 = *((_QWORD *)v4 + 2);
    v11 = *((_QWORD *)v4 + 3);
    if (v12 >= v11 >> 1)
      v4 = (double *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v4);
    ++v3;
    *((_QWORD *)v4 + 2) = v12 + 1;
    v13 = &v4[2 * v12];
    *((_QWORD *)v13 + 4) = v9;
    *((_QWORD *)v13 + 5) = v5;
  }
  while (v2 != v3);
  swift_bridgeObjectRelease(a1);
  if (*((_QWORD *)v4 + 2) < 2uLL)
    goto LABEL_16;
  swift_bridgeObjectRelease(v5);
  v14 = (void *)objc_opt_self(NSBundle);
  v15 = objc_msgSend(v14, "mainBundle", swift_bridgeObjectRetain(v4).n128_f64[0]);
  v30._countAndFlagsBits = 0xD000000000000025;
  v30._object = (void *)0x80000001001A78D0;
  v16._countAndFlagsBits = 8236;
  v16._object = (void *)0xE200000000000000;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v30);

  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  v20 = lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], (uint64_t)&protocol conformance descriptor for [A]);
  v9 = BidirectionalCollection<>.joined(separator:)(v18._countAndFlagsBits, v18._object, v19, v20);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v18._object);
  if (*((_QWORD *)v4 + 2) < 3uLL)
  {
LABEL_16:
    swift_bridgeObjectRelease(v4);
    return v9;
  }
  v21 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v22._countAndFlagsBits = 0xD000000000000036;
  v31._countAndFlagsBits = 0xD0000000000000A2;
  v31._object = (void *)0x80000001001A7820;
  v22._object = (void *)0x80000001001A77E0;
  v23._object = (void *)0x80000001001A76E0;
  v23._countAndFlagsBits = 0xD000000000000010;
  v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, (Swift::String_optional)0, (NSBundle)v21, v23, v31);

  v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v26 = swift_allocObject(v25, 112, 7);
  *(_OWORD *)(v26 + 16) = xmmword_10019EEE0;
  *(_QWORD *)(v26 + 56) = &type metadata for String;
  result = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v26 + 64) = result;
  if (*((_QWORD *)v4 + 2))
  {
    v28 = result;
    result = *((_QWORD *)v4 + 5);
    *(double *)(v26 + 32) = v4[4];
    *(_QWORD *)(v26 + 40) = result;
    *(_QWORD *)(v26 + 96) = &type metadata for String;
    *(_QWORD *)(v26 + 104) = v28;
    if (*((_QWORD *)v4 + 2) >= 2uLL)
    {
      v29 = *((_QWORD *)v4 + 7);
      *(double *)(v26 + 72) = v4[6];
      *(_QWORD *)(v26 + 80) = v29;
      swift_bridgeObjectRetain(result);
      swift_bridgeObjectRetain(v29);
      static String.localizedStringWithFormat(_:_:)(v24._countAndFlagsBits, v24._object, v26);
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v24._object);
      return v9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t specialized static MOSuggestionAssetStateOfMindProvider.getDomainsLocalized(domainResource:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  unint64_t v5;
  uint64_t v6;
  __n128 v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double *v13;
  void *v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t result;
  unint64_t v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  swift_bridgeObjectRetain(a1);
  v3 = 0;
  v4 = _swiftEmptyArrayStorage;
  v5 = 0xE000000000000000;
  do
  {
    v6 = *(_QWORD *)(a1 + 8 * v3 + 32);
    v7 = swift_bridgeObjectRelease(v5);
    v8 = (id)HKUILocalizedStringForStateOfMindDomain(v6, v7);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v5 = v10;

    swift_bridgeObjectRetain(v5);
    if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
      v4 = (double *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
    v12 = *((_QWORD *)v4 + 2);
    v11 = *((_QWORD *)v4 + 3);
    if (v12 >= v11 >> 1)
      v4 = (double *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v4);
    ++v3;
    *((_QWORD *)v4 + 2) = v12 + 1;
    v13 = &v4[2 * v12];
    *((_QWORD *)v13 + 4) = v9;
    *((_QWORD *)v13 + 5) = v5;
  }
  while (v2 != v3);
  swift_bridgeObjectRelease(a1);
  if (*((_QWORD *)v4 + 2) < 2uLL)
    goto LABEL_16;
  swift_bridgeObjectRelease(v5);
  v14 = (void *)objc_opt_self(NSBundle);
  v15 = objc_msgSend(v14, "mainBundle", swift_bridgeObjectRetain(v4).n128_f64[0]);
  v30._countAndFlagsBits = 0xD000000000000026;
  v30._object = (void *)0x80000001001A77B0;
  v16._countAndFlagsBits = 8236;
  v16._object = (void *)0xE200000000000000;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v30);

  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  v20 = lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], (uint64_t)&protocol conformance descriptor for [A]);
  v9 = BidirectionalCollection<>.joined(separator:)(v18._countAndFlagsBits, v18._object, v19, v20);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v18._object);
  if (*((_QWORD *)v4 + 2) < 3uLL)
  {
LABEL_16:
    swift_bridgeObjectRelease(v4);
    return v9;
  }
  v21 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v22._countAndFlagsBits = 0xD000000000000038;
  v31._countAndFlagsBits = 0xD0000000000000A6;
  v31._object = (void *)0x80000001001A7700;
  v22._object = (void *)0x80000001001A76A0;
  v23._object = (void *)0x80000001001A76E0;
  v23._countAndFlagsBits = 0xD000000000000010;
  v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, (Swift::String_optional)0, (NSBundle)v21, v23, v31);

  v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v26 = swift_allocObject(v25, 112, 7);
  *(_OWORD *)(v26 + 16) = xmmword_10019EEE0;
  *(_QWORD *)(v26 + 56) = &type metadata for String;
  result = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v26 + 64) = result;
  if (*((_QWORD *)v4 + 2))
  {
    v28 = result;
    result = *((_QWORD *)v4 + 5);
    *(double *)(v26 + 32) = v4[4];
    *(_QWORD *)(v26 + 40) = result;
    *(_QWORD *)(v26 + 96) = &type metadata for String;
    *(_QWORD *)(v26 + 104) = v28;
    if (*((_QWORD *)v4 + 2) >= 2uLL)
    {
      v29 = *((_QWORD *)v4 + 7);
      *(double *)(v26 + 72) = v4[6];
      *(_QWORD *)(v26 + 80) = v29;
      swift_bridgeObjectRetain(result);
      swift_bridgeObjectRetain(v29);
      static String.localizedStringWithFormat(_:_:)(v24._countAndFlagsBits, v24._object, v26);
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v24._object);
      return v9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for MOSuggestionAssetStateOfMindProvider()
{
  return objc_opt_self(_TtC16MomentsUIService36MOSuggestionAssetStateOfMindProvider);
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance [A](unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void *MOSuggestionCollectionViewSingleAssetCell.reuseIdentifier.unsafeMutableAddressor()
{
  return &static MOSuggestionCollectionViewSingleAssetCell.reuseIdentifier;
}

unint64_t static MOSuggestionCollectionViewSingleAssetCell.reuseIdentifier.getter()
{
  return 0xD000000000000029;
}

id closure #1 in variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.titleLabel()
{
  id v0;
  id v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "setLineBreakMode:", 4);
  objc_msgSend(v0, "setNumberOfLines:", 2);
  objc_msgSend(v0, "setBaselineAdjustment:", 2);
  v1 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  objc_msgSend(v0, "setTextColor:", v1);

  objc_msgSend(v0, "setTextAlignment:", 4);
  objc_msgSend(v0, "setAdjustsFontForContentSizeCategory:", 1);
  objc_msgSend(v0, "setMaximumContentSizeCategory:", UIContentSizeCategoryAccessibilityExtraExtraLarge);
  return v0;
}

id closure #1 in variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.subtitleLabel()
{
  id v0;
  id v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "setLineBreakMode:", 4);
  objc_msgSend(v0, "setNumberOfLines:", 2);
  v1 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  objc_msgSend(v0, "setTextColor:", v1);

  objc_msgSend(v0, "setTextAlignment:", 4);
  objc_msgSend(v0, "setBaselineAdjustment:", 2);
  objc_msgSend(v0, "setAdjustsFontForContentSizeCategory:", 1);
  objc_msgSend(v0, "setMaximumContentSizeCategory:", UIContentSizeCategoryAccessibilityExtraExtraLarge);
  return v0;
}

void (__swiftcall *variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.accessoryButtonAction())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t key path setter for MOSuggestionCollectionViewSingleAssetCell.accessoryButtonAction : MOSuggestionCollectionViewSingleAssetCell(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t (*)(), uint64_t, __n128);
  __n128 v7;

  v3 = *a1;
  v4 = a1[1];
  v5 = swift_allocObject(&unk_1001E5938, 32, 7);
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = *(uint64_t (**)(uint64_t (*)(), uint64_t, __n128))((swift_isaMask & **a2) + 0x90);
  v7 = swift_retain(v4);
  return v6(partial apply for thunk for @escaping @callee_guaranteed () -> (@out ()), v5, v7);
}

uint64_t MOSuggestionCollectionViewSingleAssetCell.accessoryButtonAction.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0
                 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_accessoryButtonAction);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_accessoryButtonAction, v4, 0, 0);
  v2 = *v1;
  swift_retain(v1[1]);
  return v2;
}

uint64_t MOSuggestionCollectionViewSingleAssetCell.accessoryButtonAction.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _BYTE v11[24];

  v5 = (uint64_t *)(v2
                 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_accessoryButtonAction);
  swift_beginAccess(v2 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_accessoryButtonAction, v11, 1, 0);
  v6 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  swift_retain(a2);
  swift_release(v6);
  v7 = *v5;
  v8 = v5[1];
  v9 = *(void (**)(uint64_t, uint64_t))((swift_isaMask & **(_QWORD **)(v2
                                                                              + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_journalButton))
                                               + 0x68);
  swift_retain(v8);
  v9(v7, v8);
  return swift_release(a2);
}

void (*MOSuggestionCollectionViewSingleAssetCell.accessoryButtonAction.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_accessoryButtonAction;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  return MOSuggestionCollectionViewSingleAssetCell.accessoryButtonAction.modify;
}

void MOSuggestionCollectionViewSingleAssetCell.accessoryButtonAction.modify(_QWORD *a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  v3 = (_QWORD *)*a1;
  swift_endAccess(*a1);
  if ((a2 & 1) == 0)
  {
    v4 = v3[3];
    v5 = (uint64_t *)(v4 + v3[4]);
    v6 = *v5;
    v7 = v5[1];
    v8 = *(void (**)(uint64_t, uint64_t))((swift_isaMask & **(_QWORD **)(v4
                                                                                + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_journalButton))
                                                 + 0x68);
    swift_retain(v7);
    v8(v6, v7);
  }
  free(v3);
}

uint64_t MOSuggestionCollectionViewSingleAssetCell.cellViewModel.didset()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  char *v3;
  uint64_t Strong;
  double v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  double v12;
  NSString v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  char v36[24];

  v1 = v0;
  v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_titleLabel);
  v3 = (char *)v0 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_cellViewModel;
  swift_beginAccess((char *)v0 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_cellViewModel, v36, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  v6 = (NSString)Strong;
  if (Strong)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)Strong + 176))(Strong);
    v8 = v7;
    swift_release(v6);
    v6 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v5 = swift_bridgeObjectRelease(v8).n128_u64[0];
  }
  objc_msgSend(v2, "setText:", v6, v5);

  v9 = specialized static MOSuggestionTheme.Fonts.footnoteEmphShortFont()();
  UILabel.setLineSpacing(lineSpacing:lineHeightMultiple:baselineOffset:font:)(v9, 0.0, 0.95, 0.0);

  v10 = *(void **)((char *)v1
                 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_subtitleLabel);
  v11 = swift_weakLoadStrong(v3);
  v13 = (NSString)v11;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 376))(v11);
    v15 = v14;
    swift_release(v13);
    v13 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v12 = swift_bridgeObjectRelease(v15).n128_u64[0];
  }
  objc_msgSend(v10, "setText:", v13, v12);

  v16 = specialized static MOSuggestionTheme.Fonts.footnoteShortFont()();
  UILabel.setLineSpacing(lineSpacing:lineHeightMultiple:baselineOffset:font:)(v16, 0.0, 0.95, 0.0);

  v17 = swift_weakLoadStrong(v3);
  if (v17)
  {
    v18 = v17;
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 224))(v17);
    swift_release(v18);
    v20 = v19 & 1;
  }
  else
  {
    v20 = 2;
  }
  v21 = swift_weakLoadStrong(v3);
  if (v21)
  {
    v23 = v21;
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 248))(v21);
    v22 = swift_release(v23);
    v25 = v24 & 1;
  }
  else
  {
    v25 = 2;
  }
  (*(void (**)(uint64_t, uint64_t, __n128))((swift_isaMask & *v1) + 0xD8))(v20, v25, v22);
  v26 = *(_QWORD **)((char *)v1
                   + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView);
  v27 = swift_weakLoadStrong(v3);
  if (v27)
  {
    v29 = v27;
    v30 = (*(uint64_t (**)(void))(*(_QWORD *)v27 + 392))();
    v28 = swift_release(v29);
  }
  else
  {
    v30 = 0;
  }
  (*(void (**)(uint64_t, __n128))((swift_isaMask & *v26) + 0x110))(v30, v28);
  v31 = *(_QWORD **)((char *)v1
                   + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_journalButton);
  v32 = swift_weakLoadStrong(v3);
  if (v32)
  {
    v34 = *(unsigned __int8 *)(v32 + 80);
    v33 = swift_release(v32);
  }
  else
  {
    v34 = 0;
  }
  return (*(uint64_t (**)(uint64_t, __n128))((swift_isaMask & *v31) + 0x98))(v34, v33);
}

uint64_t MOSuggestionCollectionViewSingleAssetCell.cellViewModel.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_cellViewModel;
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_cellViewModel, v3, 0, 0);
  return swift_weakLoadStrong(v1);
}

double MOSuggestionCollectionViewSingleAssetCell.cellViewModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_cellViewModel;
  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_cellViewModel, v5, 1, 0);
  swift_weakAssign(v3, a1);
  MOSuggestionCollectionViewSingleAssetCell.cellViewModel.didset();
  *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

void (*MOSuggestionCollectionViewSingleAssetCell.cellViewModel.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_cellViewModel;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  v3[3] = swift_weakLoadStrong(v5);
  return MOSuggestionCollectionViewSingleAssetCell.cellViewModel.modify;
}

void MOSuggestionCollectionViewSingleAssetCell.cellViewModel.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  swift_weakAssign(*(_QWORD *)(*(_QWORD *)a1 + 32) + *(_QWORD *)(*(_QWORD *)a1 + 40), v4);
  if ((a2 & 1) != 0)
  {
    swift_release(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_release(v4);
    MOSuggestionCollectionViewSingleAssetCell.cellViewModel.didset();
  }
  free(v3);
}

char *MOSuggestionCollectionViewSingleAssetCell.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  _BYTE *v17;
  _QWORD *v18;
  id v19;
  void (__swiftcall **v20)();
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(_QWORD);
  char *v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  id v33;
  void *v34;
  char *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  objc_super v42;
  objc_super v43;

  v9 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView;
  v10 = type metadata accessor for MOSuggestionSheetAssetGridView();
  v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v10));
  v12 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v11, "init");
  v13 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_titleLabel;
  *(_QWORD *)&v12[v13] = closure #1 in variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.titleLabel();
  v14 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_subtitleLabel;
  *(_QWORD *)&v12[v14] = closure #1 in variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.subtitleLabel();
  v15 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_journalButton;
  v16 = (objc_class *)type metadata accessor for MOSuggestionSheetJournalButton();
  v17 = objc_allocWithZone(v16);
  v18 = &v17[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped];
  *v18 = 0;
  v18[1] = 0;
  v17[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_singleCellAsset] = 1;
  v43.receiver = v17;
  v43.super_class = v16;
  v19 = objc_msgSendSuper2(&v43, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  MOSuggestionSheetJournalButton.sharedInit()();

  *(_QWORD *)&v12[v15] = v19;
  v20 = (void (__swiftcall **)())&v12[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_accessoryButtonAction];
  *v20 = MOSuggestionInterstitialExpandableListViewCellConstants.init();
  v20[1] = 0;
  swift_weakInit(&v12[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_cellViewModel]);
  v21 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_platterView;
  v22 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v23 = objc_msgSend(v22, "traitCollection");
  v24 = objc_msgSend(v23, "userInterfaceStyle");

  specialized static MOSuggestionTheme.Styles.styleViewAsPlatter(view:traitCollection:)(v22, (uint64_t)v24);
  *(_QWORD *)&v12[v21] = v22;

  v42.receiver = v12;
  v42.super_class = (Class)type metadata accessor for MOSuggestionCollectionViewSingleAssetCell();
  v25 = (char *)objc_msgSendSuper2(&v42, "initWithFrame:", a1, a2, a3, a4);
  v26 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView;
  v27 = *(_QWORD **)&v25[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView];
  v28 = *(void (**)(_QWORD))((swift_isaMask & *v27) + 0x128);
  v29 = v25;
  v30 = v27;
  v28(0);

  v31 = objc_msgSend(v29, "contentView");
  v32 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_platterView;
  objc_msgSend(v31, "addSubview:", *(_QWORD *)&v29[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_platterView]);

  objc_msgSend(*(id *)&v29[v32], "addSubview:", *(_QWORD *)&v25[v26]);
  objc_msgSend(v29, "addSubview:", *(_QWORD *)&v29[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_titleLabel]);
  objc_msgSend(v29, "addSubview:", *(_QWORD *)&v29[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_subtitleLabel]);
  v33 = objc_msgSend(v29, "addSubview:", *(_QWORD *)&v29[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_journalButton]);
  (*(void (**)(id))((swift_isaMask & *(_QWORD *)v29) + 0xE0))(v33);
  v34 = (void *)objc_opt_self(UIColor);
  v35 = v29;
  v36 = objc_msgSend(v34, "clearColor");
  objc_msgSend(v35, "setBackgroundColor:", v36);

  objc_msgSend(v35, "setClipsToBounds:", 0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>);
  v38 = swift_allocObject(v37, 48, 7);
  *(_OWORD *)(v38 + 16) = xmmword_10019ED20;
  *(_QWORD *)(v38 + 32) = type metadata accessor for UITraitUserInterfaceStyle(0);
  *(_QWORD *)(v38 + 40) = &protocol witness table for UITraitUserInterfaceStyle;
  v39 = v35;
  v40 = UIView.registerForTraitChanges(_:action:)(v38, "handleTraitChange");
  swift_unknownObjectRelease(v40);
  swift_bridgeObjectRelease(v38);

  return v39;
}

Swift::Void __swiftcall MOSuggestionCollectionViewSingleAssetCell.handleTraitChange()()
{
  char *v0;
  id v1;
  id v2;
  id v3;

  v3 = *(id *)&v0[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_platterView];
  v1 = objc_msgSend(v0, "traitCollection");
  v2 = objc_msgSend(v1, "userInterfaceStyle");

  specialized static MOSuggestionTheme.Styles.styleViewAsPlatter(view:traitCollection:)(v3, (uint64_t)v2);
}

Swift::Void __swiftcall MOSuggestionCollectionViewSingleAssetCell.setInteractionState(added:saved:)(Swift::Bool_optional added, Swift::Bool_optional saved)
{
  uint64_t v2;
  _QWORD *v3;

  if (added.value)
  {
    v3 = *(_QWORD **)(v2 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView);
    (*(void (**)(_QWORD))((swift_isaMask & *v3) + 0x1B0))(0);
  }
  else
  {
    if (!saved.value)
      return;
    v3 = *(_QWORD **)(v2 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView);
    (*(void (**)(uint64_t))((swift_isaMask & *v3) + 0x1B0))(1);
  }
  (*(void (**)(uint64_t))((swift_isaMask & *v3) + 0x188))(1);
}

Swift::Void __swiftcall MOSuggestionCollectionViewSingleAssetCell.setupConstraints()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  id v3;
  char **v4;
  id v5;
  char **v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  void *v68;
  Class isa;

  v1 = v0;
  v2 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_platterView;
  v3 = *(id *)&v0[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_platterView];
  v4 = &selRef_genericAvatarFor_pointSize_completion_;
  v5 = objc_msgSend(v3, "superview");
  v6 = &selRef_genericAvatarFor_pointSize_completion_;
  if (v5)
  {
    v7 = v5;
    objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v8 = objc_msgSend(v3, "topAnchor");
    v9 = objc_msgSend(v7, "topAnchor");
    v10 = objc_msgSend(v8, "constraintEqualToAnchor:", v9);

    objc_msgSend(v10, "setConstant:", 4.0);
    if (v10)
    {
      v10 = v10;
      objc_msgSend(v10, "setActive:", 1);

      v3 = v10;
    }

    v6 = &selRef_genericAvatarFor_pointSize_completion_;
  }
  else
  {
    v10 = 0;
    v7 = v3;
  }

  v11 = *(id *)&v1[v2];
  v12 = objc_msgSend(v11, "superview");
  if (v12)
  {
    v13 = v12;
    objc_msgSend(v11, v6[47], 0);
    v14 = objc_msgSend(v11, "leadingAnchor");
    v15 = objc_msgSend(v13, "leadingAnchor");
    v16 = objc_msgSend(v14, "constraintEqualToAnchor:", v15);

    objc_msgSend(v16, "setConstant:", 4.0);
    if (v16)
    {
      v16 = v16;
      objc_msgSend(v16, "setActive:", 1);

      v11 = v16;
    }

    v4 = &selRef_genericAvatarFor_pointSize_completion_;
  }
  else
  {
    v16 = 0;
    v13 = v11;
  }

  v17 = *(id *)&v1[v2];
  v18 = objc_msgSend(v17, v4[94]);
  if (v18)
  {
    v19 = v18;
    objc_msgSend(v17, v6[47], 0);
    v20 = objc_msgSend(v17, "trailingAnchor");
    v21 = objc_msgSend(v19, "trailingAnchor");
    v22 = objc_msgSend(v20, "constraintEqualToAnchor:", v21);

    objc_msgSend(v22, "setConstant:", -4.0);
    if (v22)
    {
      v22 = v22;
      objc_msgSend(v22, "setActive:", 1);

      v17 = v22;
    }

  }
  else
  {
    v22 = 0;
    v19 = v17;
  }

  v23 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView];
  v24 = UIView.fillSuper(margin:)(0.0);
  swift_bridgeObjectRelease(v24);
  v68 = (void *)objc_opt_self(NSLayoutConstraint);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v26 = swift_allocObject(v25, 136, 7);
  *(_OWORD *)(v26 + 16) = xmmword_10019F0B0;
  v27 = objc_msgSend(v23, "heightAnchor");
  v28 = objc_msgSend(v23, "widthAnchor");
  v29 = objc_msgSend(v27, "constraintEqualToAnchor:", v28);

  *(_QWORD *)(v26 + 32) = v29;
  v30 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_titleLabel];
  v31 = objc_msgSend(v30, "topAnchor");
  v32 = objc_msgSend(*(id *)&v1[v2], "bottomAnchor");
  v33 = objc_msgSend(v31, "constraintEqualToAnchor:constant:", v32, 8.0);

  *(_QWORD *)(v26 + 40) = v33;
  v34 = objc_msgSend(v30, "leadingAnchor");
  v35 = objc_msgSend(v1, "leadingAnchor");
  v36 = objc_msgSend(v34, "constraintEqualToAnchor:constant:", v35, 5.0);

  *(_QWORD *)(v26 + 48) = v36;
  v37 = objc_msgSend(v30, "trailingAnchor");
  v38 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_journalButton];
  v39 = objc_msgSend(v38, "leadingAnchor");
  v40 = objc_msgSend(v37, "constraintEqualToAnchor:constant:", v39, -5.0);

  *(_QWORD *)(v26 + 56) = v40;
  v41 = objc_msgSend(v38, "topAnchor");
  v42 = objc_msgSend(*(id *)&v1[v2], "bottomAnchor");
  v43 = objc_msgSend(v41, "constraintEqualToAnchor:constant:", v42, 10.0);

  *(_QWORD *)(v26 + 64) = v43;
  v44 = objc_msgSend(v38, "trailingAnchor");
  v45 = objc_msgSend(*(id *)&v1[v2], "trailingAnchor");
  v46 = objc_msgSend(v44, "constraintEqualToAnchor:constant:", v45, -4.0);

  *(_QWORD *)(v26 + 72) = v46;
  v47 = objc_msgSend(v38, "widthAnchor");
  v48 = objc_msgSend(v47, "constraintGreaterThanOrEqualToConstant:", 27.0);

  *(_QWORD *)(v26 + 80) = v48;
  v49 = objc_msgSend(v38, "widthAnchor");
  v50 = objc_msgSend(v49, "constraintLessThanOrEqualToConstant:", 33.0);

  *(_QWORD *)(v26 + 88) = v50;
  v51 = objc_msgSend(v38, "heightAnchor");
  v52 = objc_msgSend(v38, "widthAnchor");
  v53 = objc_msgSend(v51, "constraintEqualToAnchor:", v52);

  *(_QWORD *)(v26 + 96) = v53;
  v54 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_subtitleLabel];
  v55 = objc_msgSend(v54, "topAnchor");
  v56 = objc_msgSend(v30, "bottomAnchor");
  v57 = objc_msgSend(v55, "constraintEqualToAnchor:constant:", v56, 1.0);

  *(_QWORD *)(v26 + 104) = v57;
  v58 = objc_msgSend(v54, "bottomAnchor");
  v59 = objc_msgSend(v1, "bottomAnchor");
  v60 = objc_msgSend(v58, "constraintLessThanOrEqualToAnchor:", v59);

  *(_QWORD *)(v26 + 112) = v60;
  v61 = objc_msgSend(v54, "leadingAnchor");
  v62 = objc_msgSend(v30, "leadingAnchor");
  v63 = objc_msgSend(v61, "constraintEqualToAnchor:", v62);

  *(_QWORD *)(v26 + 120) = v63;
  v64 = objc_msgSend(v54, "trailingAnchor");
  v65 = objc_msgSend(v30, "trailingAnchor");
  v66 = objc_msgSend(v64, "constraintEqualToAnchor:", v65);

  *(_QWORD *)(v26 + 128) = v66;
  specialized Array._endMutation()(v67);
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v68, "activateConstraints:", isa, swift_bridgeObjectRelease(v26).n128_f64[0]);

}

void MOSuggestionCollectionViewSingleAssetCell.setAssetViewModels(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, _QWORD *, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(__n128);
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  void *v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSString v40;
  _BYTE v41[24];
  _QWORD *v42;

  v2 = v1;
  v4 = *(_QWORD **)((char *)v1
                  + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView);
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v24 = a1;
    else
      v24 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v24);
    if (v5)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease(a1);
    v23 = _swiftEmptyArrayStorage;
    goto LABEL_16;
  }
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v5)
    goto LABEL_15;
LABEL_3:
  v42 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v5);
  if (v5 < 0)
  {
    __break(1u);
    return;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    v6 = 0;
    do
    {
      v7 = v6 + 1;
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MOWeakReference<MOSuggestionSheetAssetViewModel>);
      v10 = swift_allocObject(v9, 24, 7);
      v11 = swift_weakInit(v10 + 16);
      swift_beginAccess(v11, v41, 1, 0);
      swift_weakAssign(v10 + 16, v8);
      v12 = swift_unknownObjectRelease(v8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v13 = v42[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
      specialized ContiguousArray._endMutation()(v14);
      v6 = v7;
    }
    while (v5 != v7);
  }
  else
  {
    v15 = (uint64_t *)(a1 + 32);
    do
    {
      v16 = *v15++;
      v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MOWeakReference<MOSuggestionSheetAssetViewModel>);
      v18 = swift_allocObject(v17, 24, 7);
      v19 = swift_weakInit(v18 + 16);
      swift_beginAccess(v19, v41, 1, 0);
      v20 = swift_weakAssign(v18 + 16, v16);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      v21 = v42[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
      v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v18);
      specialized ContiguousArray._endMutation()(v22);
      --v5;
    }
    while (v5);
  }
  v23 = v42;
  swift_bridgeObjectRelease(a1);
LABEL_16:
  v25 = *(uint64_t (**)(uint64_t, _QWORD *, _QWORD))((swift_isaMask & *v4) + 0x158);
  v26 = swift_bridgeObjectRetain(v23);
  v27 = v25(v26, v23, 0);
  v28 = *(uint64_t (**)(__n128))((swift_isaMask & *v2) + 0xA0);
  v29 = ((uint64_t (*)(uint64_t))v28)(v27);
  if (v29)
  {
    v31 = v29;
    v32 = *(void (**)(uint64_t))(*(_QWORD *)v29 + 304);
    v33 = swift_bridgeObjectRetain(a1);
    v32(v33);
    v30 = swift_release(v31);
  }
  v34 = *(void **)((char *)v2
                 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_subtitleLabel);
  v35 = v28(v30);
  if (v35)
  {
    v37 = v35;
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 376))(v35);
    v39 = v38;
    swift_release(v37);
    v40 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v36 = swift_bridgeObjectRelease(v39).n128_u64[0];
  }
  else
  {
    v40 = 0;
  }
  objc_msgSend(v34, "setText:", v40, v36);

}

Swift::Void __swiftcall MOSuggestionCollectionViewSingleAssetCell.updateCell(with:)(Swift::OpaquePointer with)
{
  uint64_t v1;

  MOSuggestionCollectionViewSingleAssetCell.setAssetViewModels(_:)((uint64_t)with._rawValue);
  (*(void (**)(void))((swift_isaMask & **(_QWORD **)(v1
                                                   + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView))
                    + 0x1C8))();
}

Swift::Void __swiftcall MOSuggestionCollectionViewSingleAssetCell.updateCell(with:index:)(Swift::OpaquePointer with, Swift::Int index)
{
  uint64_t v2;

  MOSuggestionCollectionViewSingleAssetCell.setAssetViewModels(_:)((uint64_t)with._rawValue);
  (*(void (**)(Swift::Int))((swift_isaMask & **(_QWORD **)(v2
                                                                    + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView))
                                     + 0x1D0))(index);
}

uint64_t MOSuggestionCollectionViewSingleAssetCell.updateCell(with:index:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t (*v8)(_BYTE *, _QWORD);
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  double v21;
  NSString v22;
  uint64_t v23;
  uint64_t v24;
  char v25[24];
  _BYTE v26[32];

  v3 = v2;
  v6 = *(_QWORD **)((char *)v2
                  + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView);
  v8 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))((swift_isaMask & *v6) + 0x160))(v26);
  if (*v7)
  {
    v9 = v7;
    v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MOWeakReference<MOSuggestionSheetAssetViewModel>);
    v11 = swift_allocObject(v10, 24, 7);
    v12 = swift_weakInit(v11 + 16);
    swift_beginAccess(v12, v25, 1, 0);
    swift_weakAssign(v11 + 16, a1);
    v13 = *v9;
    swift_retain_n(a1, 2);
    result = swift_isUniquelyReferenced_nonNull_bridgeObject(v13);
    *v9 = v13;
    if (!(_DWORD)result || v13 < 0 || (v13 & 0x4000000000000000) != 0)
    {
      result = specialized _ArrayBuffer._consumeAndCreateNew()(v13);
      v13 = result;
      *v9 = result;
    }
    if ((a2 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
    {
      v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 8 * a2 + 0x20);
      *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 8 * a2 + 0x20) = v11;
      swift_release(v15);
      specialized Array._endMutation()(v16);
      swift_release_n(a1, 2, v17);
      goto LABEL_9;
    }
    __break(1u);
    return result;
  }
LABEL_9:
  v18 = v8(v26, 0);
  v19 = *(void **)((char *)v3
                 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_subtitleLabel);
  v20 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0xA0))(v18);
  v22 = (NSString)v20;
  if (v20)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 376))(v20);
    v24 = v23;
    swift_release(v22);
    v22 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v21 = swift_bridgeObjectRelease(v24).n128_u64[0];
  }
  objc_msgSend(v19, "setText:", v22, v21);

  return (*(uint64_t (**)(unint64_t))((swift_isaMask & *v6) + 0x1D0))(a2);
}

id MOSuggestionCollectionViewSingleAssetCell.hitTest(_:with:)(uint64_t a1, double a2, double a3)
{
  void *v3;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  objc_super v12;

  v12.receiver = v3;
  v12.super_class = (Class)type metadata accessor for MOSuggestionCollectionViewSingleAssetCell();
  v7 = objc_msgSendSuper2(&v12, "hitTest:withEvent:", a1, a2, a3);
  if (v7)
  {
    v8 = type metadata accessor for UIApplication(0, &lazy cache variable for type metadata for UIButton, UIButton_ptr);
    if ((objc_msgSend(v7, "isKindOfClass:", swift_getObjCClassFromMetadata(v8)) & 1) == 0)
    {
      v9 = type metadata accessor for UIApplication(0, &lazy cache variable for type metadata for PHLivePhotoView, PHLivePhotoView_ptr);
      if ((objc_msgSend(v7, "isKindOfClass:", swift_getObjCClassFromMetadata(v9)) & 1) == 0)
      {

        v10 = v3;
        return v3;
      }
    }
  }
  return v7;
}

Swift::Void __swiftcall MOSuggestionCollectionViewSingleAssetCell.prepareForReuse()()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  NSString v3;
  void *v4;
  NSString v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  objc_super v10;

  v1 = v0;
  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for MOSuggestionCollectionViewSingleAssetCell();
  objc_msgSendSuper2(&v10, "prepareForReuse");
  v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_titleLabel);
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setText:", v3);

  v4 = *(void **)((char *)v1
                + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_subtitleLabel);
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setText:", v5);

  v6 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA0))();
  if (v6)
  {
    v8 = v6;
    (*(void (**)(_QWORD))(*(_QWORD *)v6 + 304))(0);
    v7 = swift_release(v8);
  }
  (*(void (**)(_QWORD, __n128))((swift_isaMask & *v1) + 0xA8))(0, v7);
  v9 = *(_QWORD **)((char *)v1
                  + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView);
  (*(void (**)(_QWORD, _QWORD, _QWORD))((swift_isaMask & *v9) + 0x158))(0, 0, 0);
  (*(void (**)(_QWORD))((swift_isaMask & *v9) + 0x188))(0);
}

id MOSuggestionCollectionViewSingleAssetCell.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionCollectionViewSingleAssetCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MOSuggestionCollectionViewSingleAssetCell()
{
  return objc_opt_self(_TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell);
}

void specialized MOSuggestionCollectionViewSingleAssetCell.init(coder:)()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *v7;
  _BYTE *v8;
  _QWORD *v9;
  id v10;
  void (__swiftcall **v11)();
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  objc_super v16;

  v1 = v0;
  v2 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView;
  v3 = type metadata accessor for MOSuggestionSheetAssetGridView();
  *(_QWORD *)&v1[v2] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)), "init");
  v4 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_titleLabel;
  *(_QWORD *)&v1[v4] = closure #1 in variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.titleLabel();
  v5 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_subtitleLabel;
  *(_QWORD *)&v1[v5] = closure #1 in variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.subtitleLabel();
  v6 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_journalButton;
  v7 = (objc_class *)type metadata accessor for MOSuggestionSheetJournalButton();
  v8 = objc_allocWithZone(v7);
  v9 = &v8[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped];
  *v9 = 0;
  v9[1] = 0;
  v8[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_singleCellAsset] = 1;
  v16.receiver = v8;
  v16.super_class = v7;
  v10 = objc_msgSendSuper2(&v16, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  MOSuggestionSheetJournalButton.sharedInit()();

  *(_QWORD *)&v1[v6] = v10;
  v11 = (void (__swiftcall **)())&v1[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_accessoryButtonAction];
  *v11 = MOSuggestionInterstitialExpandableListViewCellConstants.init();
  v11[1] = 0;
  swift_weakInit(&v1[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_cellViewModel]);
  v12 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_platterView;
  v13 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v14 = objc_msgSend(v13, "traitCollection");
  v15 = objc_msgSend(v14, "userInterfaceStyle");

  specialized static MOSuggestionTheme.Styles.styleViewAsPlatter(view:traitCollection:)(v13, (uint64_t)v15);
  *(_QWORD *)&v1[v12] = v13;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001A6460, "MomentsUIService/MOSuggestionCollectionViewSingleAssetCell.swift", 64, 2, 89, 0);
  __break(1u);
}

uint64_t sub_1000486AC@<X0>(_QWORD **a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x88))();
  v5 = v4;
  result = swift_allocObject(&unk_1001E5960, 32, 7);
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_100048720@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xA0))();
  *a2 = result;
  return result;
}

uint64_t sub_100048760(_QWORD *a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0xA8);
  v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t sub_1000487A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out ())()
{
  uint64_t v0;

  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

void *MOSuggestionSheetOnboardingTipCell.reuseIdentifier.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetOnboardingTipCell.reuseIdentifier;
}

unint64_t static MOSuggestionSheetOnboardingTipCell.reuseIdentifier.getter()
{
  return 0xD000000000000022;
}

uint64_t MOSuggestionSheetOnboardingTipCell.tipModel.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC16MomentsUIService34MOSuggestionSheetOnboardingTipCell_tipModel);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService34MOSuggestionSheetOnboardingTipCell_tipModel, v3, 0, 0);
  return swift_retain(*v1);
}

uint64_t MOSuggestionSheetOnboardingTipCell.tipModel.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v3 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService34MOSuggestionSheetOnboardingTipCell_tipModel);
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC16MomentsUIService34MOSuggestionSheetOnboardingTipCell_tipModel, v7, 1, 0);
  v4 = *v3;
  *v3 = a1;
  swift_retain(a1);
  v5 = swift_release(v4);
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0x70))(v5);
  return swift_release(a1);
}

uint64_t (*MOSuggestionSheetOnboardingTipCell.tipModel.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService34MOSuggestionSheetOnboardingTipCell_tipModel, a1, 33, 0);
  return MOSuggestionSheetOnboardingTipCell.tipModel.modify;
}

uint64_t MOSuggestionSheetOnboardingTipCell.tipModel.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess(a1);
  if ((a2 & 1) == 0)
    return (*(uint64_t (**)(uint64_t))((swift_isaMask & **(_QWORD **)(a1 + 24)) + 0x70))(result);
  return result;
}

void MOSuggestionSheetOnboardingTipCell.init(coder:)()
{
  char *v0;

  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionSheetOnboardingTipCell_tipModel] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001A6460, "MomentsUIService/MOSuggestionSheetOnboardingTipCell.swift", 57, 2, 25, 0);
  __break(1u);
}

_QWORD *MOSuggestionSheetOnboardingTipCell.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  _QWORD *v9;
  void (*v10)(void);
  _QWORD *v11;
  objc_super v13;

  *(_QWORD *)&v4[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionSheetOnboardingTipCell_tipModel] = 0;
  v13.receiver = v4;
  v13.super_class = (Class)type metadata accessor for MOSuggestionSheetOnboardingTipCell();
  v9 = objc_msgSendSuper2(&v13, "initWithFrame:", a1, a2, a3, a4);
  v10 = *(void (**)(void))((swift_isaMask & *v9) + 0x70);
  v11 = v9;
  v10();

  return v11;
}

uint64_t type metadata accessor for MOSuggestionSheetOnboardingTipCell()
{
  return objc_opt_self(_TtC16MomentsUIService34MOSuggestionSheetOnboardingTipCell);
}

Swift::Void __swiftcall MOSuggestionSheetOnboardingTipCell.setUpTip()()
{
  _QWORD *v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  char **v11;
  int v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  double v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  _BYTE v48[24];
  ValueMetadata *v49;
  unint64_t v50;

  v1 = v0;
  v2 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x58);
  v3 = v2();
  v4 = v3;
  if (v3)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 128))(v3);
    swift_release(v4);
    LOBYTE(v4) = v5 & 1;
  }
  v49 = &type metadata for MOSuggestionOnboardingTip;
  v50 = lazy protocol witness table accessor for type MOSuggestionOnboardingTip and conformance MOSuggestionOnboardingTip();
  v48[0] = v4;
  v6 = swift_allocObject(&unk_1001E5998, 24, 7);
  swift_unknownObjectWeakInit(v6 + 16);
  v7 = objc_allocWithZone((Class)type metadata accessor for TipUIView(0));
  v8 = (void *)TipUIView.init(_:arrowEdge:actionHandler:)(v48, 4, partial apply for closure #1 in MOSuggestionSheetOnboardingTipCell.setUpTip(), v6);
  objc_msgSend(v1, "addSubview:", v8);
  v9 = (void *)objc_opt_self(UIColor);
  TipUIView.backgroundColor.setter(objc_msgSend(v9, "secondarySystemGroupedBackgroundColor"));
  v47 = v8;
  v10 = v2();
  v11 = &selRef_systemBlueColor;
  if (v10)
  {
    v12 = *(unsigned __int8 *)(v10 + 32);
    swift_release(v10);
    if (!v12)
      v11 = &selRef_systemIndigoColor;
  }
  v13 = objc_msgSend(v9, *v11);
  objc_msgSend(v47, "setTintColor:", v13);

  v14 = objc_msgSend(v47, "layer");
  v15 = objc_msgSend(v9, "blackColor");
  v16 = objc_msgSend(v15, "CGColor");

  objc_msgSend(v14, "setShadowColor:", v16);
  v17 = objc_msgSend(v47, "layer");
  LODWORD(v18) = 1036831949;
  objc_msgSend(v17, "setShadowOpacity:", v18);

  v19 = objc_msgSend(v47, "layer");
  objc_msgSend(v19, "setShadowOffset:", 0.0, 5.0);

  v20 = objc_msgSend(v47, "layer");
  objc_msgSend(v20, "setShadowRadius:", 8.0);

  v21 = objc_msgSend(v47, "layer");
  objc_msgSend(v21, "setCornerCurve:", kCACornerCurveContinuous);

  v22 = objc_msgSend(v47, "layer");
  objc_msgSend(v22, "setShadowPathIsBounds:", 1);

  v23 = objc_msgSend(v47, "superview");
  if (v23)
  {
    v24 = v23;
    objc_msgSend(v47, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v25 = objc_msgSend(v47, "topAnchor");
    v26 = objc_msgSend(v24, "topAnchor");
    v27 = objc_msgSend(v25, "constraintEqualToAnchor:", v26);

    objc_msgSend(v27, "setConstant:", 0.0);
    v28 = v27;
    objc_msgSend(v28, "setActive:", 1);

  }
  v29 = objc_msgSend(v47, "superview");
  if (v29)
  {
    v30 = v29;
    objc_msgSend(v47, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v31 = objc_msgSend(v47, "bottomAnchor");
    v32 = objc_msgSend(v30, "bottomAnchor");
    v33 = objc_msgSend(v31, "constraintEqualToAnchor:", v32);

    if (v33)
    {
      objc_msgSend(v33, "setConstant:", -0.0);
      v34 = v33;
      objc_msgSend(v34, "setActive:", 1);

    }
  }
  v35 = objc_msgSend(v47, "superview");
  if (v35)
  {
    v36 = v35;
    objc_msgSend(v47, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v37 = objc_msgSend(v47, "leadingAnchor");
    v38 = objc_msgSend(v36, "leadingAnchor");
    v39 = objc_msgSend(v37, "constraintEqualToAnchor:", v38);

    objc_msgSend(v39, "setConstant:", 20.0);
    v40 = v39;
    objc_msgSend(v40, "setActive:", 1);

  }
  v41 = objc_msgSend(v47, "superview");
  if (v41)
  {
    v42 = v41;
    objc_msgSend(v47, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v43 = objc_msgSend(v47, "trailingAnchor");
    v44 = objc_msgSend(v42, "trailingAnchor");
    v45 = objc_msgSend(v43, "constraintEqualToAnchor:", v44);

    objc_msgSend(v45, "setConstant:", -20.0);
    v46 = v45;
    objc_msgSend(v46, "setActive:", 1);

  }
  TipUIView.imageSize.setter(50.0, 50.0);

}

unint64_t lazy protocol witness table accessor for type MOSuggestionOnboardingTip and conformance MOSuggestionOnboardingTip()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MOSuggestionOnboardingTip and conformance MOSuggestionOnboardingTip;
  if (!lazy protocol witness table cache variable for type MOSuggestionOnboardingTip and conformance MOSuggestionOnboardingTip)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MOSuggestionOnboardingTip, &type metadata for MOSuggestionOnboardingTip);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionOnboardingTip and conformance MOSuggestionOnboardingTip);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MOSuggestionOnboardingTip and conformance MOSuggestionOnboardingTip;
  if (!lazy protocol witness table cache variable for type MOSuggestionOnboardingTip and conformance MOSuggestionOnboardingTip)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MOSuggestionOnboardingTip, &type metadata for MOSuggestionOnboardingTip);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionOnboardingTip and conformance MOSuggestionOnboardingTip);
  }
  return result;
}

uint64_t sub_1000491D8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void closure #1 in MOSuggestionSheetOnboardingTipCell.setUpTip()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (_QWORD *)Strong;
    v6 = Tips.Action.id.getter();
    v7 = v5;
    if (v6 == 0x726174732D746567 && v5 == 0xEB00000000646574)
    {
      v8 = swift_bridgeObjectRelease(0xEB00000000646574);
    }
    else
    {
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726174732D746567, 0xEB00000000646574, v6, v5, 0);
      v8 = swift_bridgeObjectRelease(v7);
      if ((v9 & 1) == 0)
      {
LABEL_8:

        return;
      }
    }
    v10 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v4) + 0x58))(v8);
    if (v10)
    {
      v11 = v10;
      v12 = (void (*)(uint64_t))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
      v14 = v13;
      v15 = swift_release(v11);
      v12(v15);

      swift_release(v14);
      return;
    }
    goto LABEL_8;
  }
}

void partial apply for closure #1 in MOSuggestionSheetOnboardingTipCell.setUpTip()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in MOSuggestionSheetOnboardingTipCell.setUpTip()(a1, v1);
}

id MOSuggestionSheetOnboardingTipCell.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetOnboardingTipCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t MOSuggestionOnboardingTip.id.getter()
{
  return 0xD000000000000019;
}

uint64_t MOSuggestionOnboardingTip.title.getter()
{
  return specialized MOSuggestionOnboardingTip.title.getter();
}

uint64_t MOSuggestionOnboardingTip.image.getter()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id v2;

  v0 = type metadata accessor for MOSuggestionSheetOnboardingTipCell();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  return Image.init(_:bundle:)(0xD000000000000019, 0x80000001001A6210, v2);
}

uint64_t MOSuggestionStateOfMindTip.options.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t OpaqueTypeConformance2;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  void *v18;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildPartialBlock<A>(first:)>>.0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildExpression<A>(_:)>>.0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Tips.IgnoresDisplayFrequency>);
  v9 = type metadata accessor for Tips.IgnoresDisplayFrequency(0);
  v10 = swift_allocObject(v8, ((*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80) | 7);
  *(_OWORD *)(v10 + 16) = xmmword_10019ED20;
  Tips.IgnoresDisplayFrequency.init(_:)(1);
  static Tips.OptionsBuilder.buildExpression<A>(_:)(v10, v9, &protocol witness table for Tips.IgnoresDisplayFrequency);
  v11 = swift_bridgeObjectRelease(v10);
  v17 = v9;
  v18 = &protocol witness table for Tips.IgnoresDisplayFrequency;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v17, &opaque type descriptor for <<opaque return type of static Tips.OptionsBuilder.buildExpression<A>(_:)>>, 1, v11);
  static Tips.OptionsBuilder.buildPartialBlock<A>(first:)(v7, v4, OpaqueTypeConformance2);
  v17 = v4;
  v18 = (void *)OpaqueTypeConformance2;
  v14 = swift_getOpaqueTypeConformance2(&v17, &opaque type descriptor for <<opaque return type of static Tips.OptionsBuilder.buildPartialBlock<A>(first:)>>, 1, v13);
  v15 = static Tips.OptionsBuilder.buildFinalResult<A>(_:)(v3, v0, v14);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v15;
}

uint64_t one-time initialization function for $showSuggestionsOnboarding()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  BOOL v4;
  id v5;
  id v6;
  BOOL v8;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  __swift_allocate_value_buffer(v0, static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
  __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
  v1 = (void *)objc_opt_self(MOOnboardingManager);
  v2 = objc_msgSend(v1, "sharedInstance");
  v3 = objc_msgSend(v2, "onboardingFlowCompletionStatus");

  if (v3 == (id)1)
  {
    v4 = 1;
  }
  else
  {
    v5 = objc_msgSend(v1, "sharedInstance");
    v6 = objc_msgSend(v5, "onboardingFlowCompletionStatus");

    v4 = v6 == 0;
  }
  v8 = v4;
  return Tips.Parameter.init<A>(_:_:_:_:)(&type metadata for MOSuggestionOnboardingTip, 0xD00000000000001ALL, 0x80000001001A7BA0, &v8, _swiftEmptyArrayStorage, &type metadata for Bool, &type metadata for MOSuggestionOnboardingTip, &protocol witness table for Bool, &protocol witness table for Bool);
}

uint64_t MOSuggestionOnboardingTip.$showSuggestionsOnboarding.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for $showSuggestionsOnboarding != -1)
    swift_once(&one-time initialization token for $showSuggestionsOnboarding, one-time initialization function for $showSuggestionsOnboarding);
  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  return __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
}

uint64_t static MOSuggestionOnboardingTip.$showSuggestionsOnboarding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  _BYTE v6[24];

  if (one-time initialization token for $showSuggestionsOnboarding != -1)
    swift_once(&one-time initialization token for $showSuggestionsOnboarding, one-time initialization function for $showSuggestionsOnboarding);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
  v4 = swift_beginAccess(v3, v6, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2, v4);
}

uint64_t static MOSuggestionOnboardingTip.$showSuggestionsOnboarding.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _BYTE v7[24];

  if (one-time initialization token for $showSuggestionsOnboarding != -1)
    swift_once(&one-time initialization token for $showSuggestionsOnboarding, one-time initialization function for $showSuggestionsOnboarding);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
  v4 = swift_beginAccess(v3, v7, 33, 0);
  v5 = *(_QWORD *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v5 + 24))(v3, a1, v2, v4);
  swift_endAccess(v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v2);
}

uint64_t (*static MOSuggestionOnboardingTip.$showSuggestionsOnboarding.modify(uint64_t a1))()
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for $showSuggestionsOnboarding != -1)
    swift_once(&one-time initialization token for $showSuggestionsOnboarding, one-time initialization function for $showSuggestionsOnboarding);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
  swift_beginAccess(v3, a1, 33, 0);
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

uint64_t static MOSuggestionOnboardingTip.showSuggestionsOnboarding.getter()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  _QWORD v5[3];

  if (one-time initialization token for $showSuggestionsOnboarding != -1)
    swift_once(&one-time initialization token for $showSuggestionsOnboarding, one-time initialization function for $showSuggestionsOnboarding);
  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
  v2 = swift_beginAccess(v1, (char *)v5 + 1, 32, 0);
  Tips.Parameter.wrappedValue.getter(v5, v0, v2);
  v3 = LOBYTE(v5[0]);
  swift_endAccess((char *)v5 + 1);
  return v3;
}

uint64_t static MOSuggestionOnboardingTip.showSuggestionsOnboarding.setter(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[31];
  char v6;

  if (one-time initialization token for $showSuggestionsOnboarding != -1)
    swift_once(&one-time initialization token for $showSuggestionsOnboarding, one-time initialization function for $showSuggestionsOnboarding);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
  v6 = a1 & 1;
  swift_beginAccess(v3, v5, 33, 0);
  Tips.Parameter.wrappedValue.setter(&v6, v2);
  return swift_endAccess(v5);
}

void (*static MOSuggestionOnboardingTip.showSuggestionsOnboarding.modify(_QWORD *a1))(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  char v6;

  v2 = malloc(0x30uLL);
  *a1 = v2;
  if (one-time initialization token for $showSuggestionsOnboarding != -1)
    swift_once(&one-time initialization token for $showSuggestionsOnboarding, one-time initialization function for $showSuggestionsOnboarding);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  v2[3] = v3;
  v4 = __swift_project_value_buffer(v3, (uint64_t)static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
  v2[4] = v4;
  v5 = swift_beginAccess(v4, v2, 32, 0);
  Tips.Parameter.wrappedValue.getter((_QWORD *)((char *)v2 + 41), v3, v5);
  v6 = *((_BYTE *)v2 + 41);
  swift_endAccess(v2);
  *((_BYTE *)v2 + 40) = v6;
  return static MOSuggestionOnboardingTip.showSuggestionsOnboarding.modify;
}

void static MOSuggestionOnboardingTip.showSuggestionsOnboarding.modify(uint64_t *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)*a1;
  v3 = *(_QWORD *)(*a1 + 24);
  v2 = *(_QWORD *)(*a1 + 32);
  v4 = *a1;
  *(_BYTE *)(*a1 + 41) = *(_BYTE *)(*a1 + 40);
  swift_beginAccess(v2, v1, 33, 0);
  Tips.Parameter.wrappedValue.setter(v4 + 41, v3);
  swift_endAccess(v1);
  free(v1);
}

uint64_t MOSuggestionOnboardingTip.rules.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _BYTE v14[24];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v14[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Tips.Rule>);
  v5 = type metadata accessor for Tips.Rule(0);
  v6 = swift_allocObject(v4, ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v5 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) | 7);
  *(_OWORD *)(v6 + 16) = xmmword_10019ED20;
  if (one-time initialization token for $showSuggestionsOnboarding != -1)
    swift_once(&one-time initialization token for $showSuggestionsOnboarding, one-time initialization function for $showSuggestionsOnboarding);
  v7 = __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
  v8 = swift_beginAccess(v7, v14, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v1 + 16))(v3, v7, v0, v8);
  Tips.Rule.init<A>(_:_:)(v3, closure #2 in MOSuggestionOnboardingTip.rules.getter, 0, &type metadata for Bool, &protocol witness table for Bool, &protocol witness table for Bool);
  v9 = static Tips.RuleBuilder.buildExpression(_:)(v6);
  v10 = swift_bridgeObjectRelease(v6);
  v11 = static Tips.RuleBuilder.buildPartialBlock(first:)(v9, v10);
  swift_bridgeObjectRelease(v9);
  return v11;
}

uint64_t closure #2 in MOSuggestionOnboardingTip.rules.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[15];
  char v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Value<Bool>);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Variable<Bool>);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type PredicateExpressions.Variable<Bool> and conformance PredicateExpressions.Variable<A>, &demangling cache variable for type metadata for PredicateExpressions.Variable<Bool>, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(a1, v8, v12);
  v16 = 1;
  static PredicateExpressions.build_Arg<A>(_:)(&v16, &type metadata for Bool);
  a2[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>>);
  a2[4] = lazy protocol witness table accessor for type PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>> and conformance <> PredicateExpressions.Equal<A, B>();
  __swift_allocate_boxed_opaque_existential_1(a2);
  v13 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance PredicateExpressions.Value<A>, &demangling cache variable for type metadata for PredicateExpressions.Value<Bool>, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v11, v7, v8, v4, v12, v13, &protocol witness table for Bool);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t MOClientPresentationDetails.isPublicUI.getter(char a1)
{
  return a1 & 1;
}

uint64_t MOSuggestionStateOfMindTip.isPublicUI.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance MOSuggestionOnboardingTip(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000019;
  a1[1] = 0x800000010019F680;
}

uint64_t key path setter for MOSuggestionSheetOnboardingTipCellModel.presentOnboardingController : MOSuggestionSheetOnboardingTipCellModel(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t (*)(), uint64_t, __n128);
  __n128 v7;

  v3 = *a1;
  v4 = a1[1];
  v5 = swift_allocObject(&unk_1001E5A70, 32, 7);
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = *(uint64_t (**)(uint64_t (*)(), uint64_t, __n128))(**(_QWORD **)a2 + 112);
  v7 = swift_retain(v4);
  return v6(partial apply for thunk for @escaping @callee_guaranteed () -> (@out ()), v5, v7);
}

uint64_t MOSuggestionSheetOnboardingTipCellModel.presentOnboardingController.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 16, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 16);
  swift_retain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t MOSuggestionSheetOnboardingTipCellModel.presentOnboardingController.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(v2 + 16, v7, 1, 0);
  v5 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_release(v5);
}

uint64_t (*MOSuggestionSheetFilterCollectionViewModel.selectedFilter.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionSheetOnboardingTipCellModel.isPublicUI.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t MOSuggestionSheetOnboardingTipCellModel.tip.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 33, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t MOSuggestionSheetOnboardingTipCellModel.tip.setter(char a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 33, v4, 1, 0);
  *(_BYTE *)(v1 + 33) = a1;
  return result;
}

uint64_t (*MOSuggestionSheetOnboardingTipCellModel.tip.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + 33, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionSheetOnboardingTipCellModel.__allocating_init(publicUI:presentOnboardingController:tip:)(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  _BYTE v11[24];

  v9 = swift_allocObject(v4, 34, 7);
  *(_BYTE *)(v9 + 33) = 2;
  *(_BYTE *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  swift_beginAccess(v9 + 33, v11, 1, 0);
  *(_BYTE *)(v9 + 33) = a4;
  return v9;
}

uint64_t MOSuggestionSheetOnboardingTipCellModel.init(publicUI:presentOnboardingController:tip:)(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  _BYTE v7[24];

  *(_BYTE *)(v4 + 33) = 2;
  *(_BYTE *)(v4 + 32) = a1;
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a3;
  swift_beginAccess(v4 + 33, v7, 1, 0);
  *(_BYTE *)(v4 + 33) = a4;
  return v4;
}

uint64_t MOSuggestionSheetOnboardingTipCellModel.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t MOSuggestionSheetOnboardingTipCellModel.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 34, 7);
}

uint64_t specialized MOSuggestionOnboardingTip.title.getter()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  unint64_t v4;
  Swift::String v6;
  Swift::String v7;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v7._countAndFlagsBits = 0xD000000000000036;
  v7._object = (void *)0x80000001001A7CB0;
  v1._object = (void *)0x80000001001A6950;
  v1._countAndFlagsBits = 0xD000000000000016;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v7);

  v6 = v3;
  v4 = lazy protocol witness table accessor for type String and conformance String();
  return Text.init<A>(_:)(&v6, &type metadata for String, v4);
}

uint64_t specialized MOSuggestionOnboardingTip.message.getter()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  unint64_t v4;
  Swift::String v6;
  Swift::String v7;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1._countAndFlagsBits = 0xD0000000000000A2;
  v7._object = (void *)0x80000001001A7C70;
  v1._object = (void *)0x80000001001A7BC0;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v7._countAndFlagsBits = 0xD000000000000039;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v7);

  v6 = v3;
  v4 = lazy protocol witness table accessor for type String and conformance String();
  return Text.init<A>(_:)(&v6, &type metadata for String, v4);
}

_QWORD *specialized MOSuggestionOnboardingTip.actions.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  unint64_t v12;
  _QWORD *v13;
  Swift::String v15;
  Swift::String v16;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Tips.Action>);
  v1 = type metadata accessor for Tips.Action(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v0, v5 + v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_10019ED20;
  v7 = v6 + v5;
  v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v16._object = (void *)0x80000001001A7B60;
  v9._countAndFlagsBits = 0x7261745320746547;
  v9._object = (void *)0xEB00000000646574;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v16._countAndFlagsBits = 0xD000000000000037;
  v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v16);

  v15 = v11;
  v12 = lazy protocol witness table accessor for type String and conformance String();
  Tips.Action.init<A>(id:title:perform:)(0x726174732D746567, 0xEB00000000646574, &v15, MOSuggestionInterstitialExpandableListViewCellConstants.init(), 0, &type metadata for String, v12);
  v13 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay6TipKit4TipsO6ActionVGG_ALs5NeverOTgq505_sSi6f4Kit4h2O6i34VAEIgynr_Si6offset_AE7elementtAEs5J94OIegnrzr_TR03_s6a4Kit4c3O13D54BuilderV16buildFinalResultySayAC0D0VGAIFZAHSi_AHtXEfU_Tf3nnnpf_nTf1cn_n(v6);
  swift_setDeallocating(v6);
  swift_arrayDestroy(v7, *(_QWORD *)(v6 + 16), v1);
  swift_deallocClassInstance(v6, 32, 7);
  return v13;
}

void *associated type witness table accessor for Identifiable.ID : Hashable in MOSuggestionOnboardingTip()
{
  return &protocol witness table for String;
}

uint64_t sub_10004A54C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x58))();
  *a2 = result;
  return result;
}

uint64_t sub_10004A58C(_QWORD *a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x60);
  v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t sub_10004A5CC@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 104))();
  v5 = v4;
  result = swift_allocObject(&unk_1001E5A98, 32, 7);
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_10004A630@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_10004A660(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 136))(*a1);
}

uint64_t getEnumTagSinglePayload for MOSuggestionOnboardingTip(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MOSuggestionOnboardingTip(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10004A778 + 4 * byte_10019F665[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10004A7AC + 4 * asc_10019F660[v4]))();
}

uint64_t sub_10004A7AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004A7B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004A7BCLL);
  return result;
}

uint64_t sub_10004A7C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004A7D0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10004A7D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004A7DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MOSuggestionOnboardingTip()
{
  return &type metadata for MOSuggestionOnboardingTip;
}

uint64_t type metadata accessor for MOSuggestionSheetOnboardingTipCellModel()
{
  return objc_opt_self(_TtC16MomentsUIService39MOSuggestionSheetOnboardingTipCellModel);
}

uint64_t sub_10004A818()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>> and conformance <> PredicateExpressions.Equal<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>> and conformance <> PredicateExpressions.Equal<A, B>;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>> and conformance <> PredicateExpressions.Equal<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type PredicateExpressions.Variable<Bool> and conformance PredicateExpressions.Variable<A>, &demangling cache variable for type metadata for PredicateExpressions.Variable<Bool>, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
    lazy protocol witness table accessor for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>> and conformance <> PredicateExpressions.Equal<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PredicateExpressions.Value<Bool>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>);
  }
  return result;
}

_QWORD *__swift_allocate_boxed_opaque_existential_1(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

Swift::Void __swiftcall MOSuggestionRoundView.layoutSubviews()()
{
  void *v0;
  objc_super v1;
  CGRect v2;

  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for MOSuggestionRoundView();
  objc_msgSendSuper2(&v1, "layoutSubviews");
  objc_msgSend(v0, "setClipsToBounds:", 1);
  objc_msgSend(v0, "bounds");
  objc_msgSend(v0, "_setCornerRadius:", CGRectGetHeight(v2) * 0.5);
}

uint64_t type metadata accessor for MOSuggestionRoundView()
{
  return objc_opt_self(_TtC16MomentsUIService21MOSuggestionRoundView);
}

id MOSuggestionRoundView.init(frame:)(double a1, double a2, double a3, double a4)
{
  void *v4;
  objc_super v10;

  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for MOSuggestionRoundView();
  return objc_msgSendSuper2(&v10, "initWithFrame:", a1, a2, a3, a4);
}

id MOSuggestionRoundView.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for MOSuggestionRoundView();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id MOSuggestionRoundView.__deallocating_deinit()
{
  return MOSuggestionRoundView.__deallocating_deinit(type metadata accessor for MOSuggestionRoundView);
}

id MOSuggestionCutoutView.fillLayer.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService22MOSuggestionCutoutView_fillLayer);
}

char *MOSuggestionCutoutView.init()()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  char *v4;
  id v5;
  id v6;
  objc_super v8;

  v1 = OBJC_IVAR____TtC16MomentsUIService22MOSuggestionCutoutView_fillLayer;
  v2 = objc_allocWithZone((Class)CAShapeLayer);
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, "init");

  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for MOSuggestionCutoutView();
  v4 = (char *)objc_msgSendSuper2(&v8, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v5 = objc_msgSend(v4, "layer");
  v6 = *(id *)&v4[OBJC_IVAR____TtC16MomentsUIService22MOSuggestionCutoutView_fillLayer];
  objc_msgSend(v5, "addSublayer:", v6);

  return v4;
}

uint64_t type metadata accessor for MOSuggestionCutoutView()
{
  return objc_opt_self(_TtC16MomentsUIService22MOSuggestionCutoutView);
}

void MOSuggestionCutoutView.init(coder:)()
{
  char *v0;
  uint64_t v1;

  v1 = OBJC_IVAR____TtC16MomentsUIService22MOSuggestionCutoutView_fillLayer;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001A6460, "MomentsUIService/MOSuggestionInterstitialListAssetView.swift", 60, 2, 28, 0);
  __break(1u);
}

Swift::Void __swiftcall MOSuggestionCutoutView.layoutSubviews()()
{
  char *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  double v16;
  objc_super v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  v17.receiver = v0;
  v17.super_class = (Class)type metadata accessor for MOSuggestionCutoutView();
  objc_msgSendSuper2(&v17, "layoutSubviews");
  objc_msgSend(v0, "frame");
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = (void *)objc_opt_self(UIBezierPath);
  v10 = objc_msgSend(v9, "bezierPathWithRoundedRect:cornerRadius:", v2, v4, v6, v8, 0.0);
  objc_msgSend(v0, "frame");
  CGRectGetWidth(v18);
  objc_msgSend(v0, "frame");
  CGRectGetHeight(v19);
  objc_msgSend(v0, "frame");
  CGRectGetWidth(v20);
  objc_msgSend(v0, "frame");
  CGRectGetHeight(v21);
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  v11 = objc_msgSend(v9, "bezierPathWithRoundedRect:cornerRadius:", v22.origin.x, v22.origin.y, v22.size.width, v22.size.height, CGRectGetWidth(v22) * 0.5);
  objc_msgSend(v10, "appendPath:", v11);
  objc_msgSend(v10, "setUsesEvenOddFillRule:", 1);
  v12 = *(void **)&v0[OBJC_IVAR____TtC16MomentsUIService22MOSuggestionCutoutView_fillLayer];
  v13 = objc_msgSend(v10, "CGPath");
  objc_msgSend(v12, "setPath:", v13);

  objc_msgSend(v12, "setFillRule:", kCAFillRuleEvenOdd);
  v14 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  v15 = objc_msgSend(v14, "CGColor");

  objc_msgSend(v12, "setFillColor:", v15);
  LODWORD(v16) = 1057803469;
  objc_msgSend(v12, "setOpacity:", v16);

}

void MOSuggestionCutoutView.init(frame:)()
{
  MOSuggestionCutoutView.init(frame:)((uint64_t)"MomentsUIService.MOSuggestionCutoutView", 39);
}

id MOSuggestionCutoutView.__deallocating_deinit()
{
  return MOSuggestionRoundView.__deallocating_deinit(type metadata accessor for MOSuggestionCutoutView);
}

void *MOSuggestionInterstitialListAssetViewConstants.INSET_MARGIN.unsafeMutableAddressor()
{
  return &static MOSuggestionInterstitialListAssetViewConstants.INSET_MARGIN;
}

void *MOSuggestionInterstitialListAssetViewConstants.INSET_MARGIN_CUTOUT.unsafeMutableAddressor()
{
  return &static MOSuggestionInterstitialListAssetViewConstants.INSET_MARGIN_CUTOUT;
}

void *MOSuggestionInterstitialListAssetViewConstants.MAP_PIN_INSET_MARGIN.unsafeMutableAddressor()
{
  return &static MOSuggestionInterstitialListAssetViewConstants.MAP_PIN_INSET_MARGIN;
}

id MOSuggestionInterstitialListAssetView.init()()
{
  _BYTE *v0;
  id v1;
  objc_super v3;

  v0[OBJC_IVAR____TtC16MomentsUIService37MOSuggestionInterstitialListAssetView_shouldBeRounded] = 0;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for MOSuggestionInterstitialListAssetView();
  v1 = objc_msgSendSuper2(&v3, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v1, "_setCornerRadius:", 7.0);
  objc_msgSend(v1, "setClipsToBounds:", 1);

  return v1;
}

uint64_t type metadata accessor for MOSuggestionInterstitialListAssetView()
{
  return objc_opt_self(_TtC16MomentsUIService37MOSuggestionInterstitialListAssetView);
}

uint64_t MOSuggestionInterstitialListAssetView.update(with:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __n128 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD aBlock[5];
  uint64_t v22;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue, OS_dispatch_queue_ptr);
  v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  v12 = swift_allocObject(&unk_1001E5B28, 24, 7);
  swift_unknownObjectWeakInit(v12 + 16);
  v13 = swift_allocObject(&unk_1001E5B50, 32, 7);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = a1;
  aBlock[4] = partial apply for closure #1 in MOSuggestionInterstitialListAssetView.update(with:);
  v22 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_3;
  v14 = _Block_copy(aBlock);
  v15 = v22;
  swift_retain(a1);
  swift_release(v15);
  static DispatchQoS.unspecified.getter(v16);
  aBlock[0] = _swiftEmptyArrayStorage;
  v17 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  v19 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v2, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10004B48C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void closure #1 in MOSuggestionInterstitialListAssetView.update(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *Strong;
  void *v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = (_QWORD *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    (*(void (**)(uint64_t))((swift_isaMask & *Strong) + 0x78))(a2);

  }
}

uint64_t sub_10004B520()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void partial apply for closure #1 in MOSuggestionInterstitialListAssetView.update(with:)()
{
  uint64_t v0;

  closure #1 in MOSuggestionInterstitialListAssetView.update(with:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_3(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void MOSuggestionInterstitialListAssetView._update(with:)(unsigned __int8 *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(__n128);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __n128 v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xD8))();
  if ((a1[89] & 1) != 0)
  {
    v5 = a1[65];
    if (v5 != 26)
      MOSuggestionInterstitialListAssetView.addFallbackView(_:)(v5);
    return;
  }
  if ((a1[88] & 1) != 0)
  {
    MOSuggestionInterstitialListAssetView.addFallBackSpinner()();
    return;
  }
  v6 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 272);
  v7 = ((uint64_t (*)(uint64_t))v6)(v4);
  if (v7)
  {
    v8 = v7;
    v9 = (uint64_t (*)(__n128))a1[65];
    if ((_DWORD)v9 != 26)
    {
      if ((unint64_t)v7 >> 62)
      {
        if (v7 < 0)
          v25 = v7;
        else
          v25 = v7 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v7);
        v10 = _CocoaArrayWrapper.endIndex.getter(v25);
        swift_bridgeObjectRelease(v8);
        if (v10)
        {
LABEL_10:
          if ((v8 & 0xC000000000000001) != 0)
          {
            v2 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
            if (v9 > 0x19)
            {
LABEL_43:
              swift_release(v2);
              swift_bridgeObjectRelease(v8);
              return;
            }
          }
          else
          {
            v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (!v11)
            {
              __break(1u);
LABEL_67:
              if (v10 >= 0)
                v54 = v11;
              else
                v54 = v10;
              v18 = _CocoaArrayWrapper.endIndex.getter(v54);
              goto LABEL_30;
            }
            v2 = *(_QWORD *)(v8 + 32);
            swift_retain(v2);
          }
          switch((int)v9)
          {
            case 0:
            case 1:
            case 2:
            case 4:
            case 5:
            case 6:
            case 12:
            case 13:
            case 14:
              swift_bridgeObjectRelease(v8);
              v12 = v2;
              v13 = 1;
              goto LABEL_18;
            case 7:
              swift_bridgeObjectRelease(v8);
              MOSuggestionInterstitialListAssetView.addWorkoutGlyph(_:)(v2);
              goto LABEL_19;
            case 9:
              swift_bridgeObjectRelease(v8);
              MOSuggestionInterstitialListAssetView.addRouteSpotlightView(_:)(v2);
              goto LABEL_19;
            case 10:
              MOSuggestionInterstitialListAssetView.addWorkoutGlobeGlyph(_:)(v8);
              swift_bridgeObjectRelease(v8);
              goto LABEL_19;
            case 11:
              if ((unint64_t)v8 >> 62)
              {
                if (v8 < 0)
                  v24 = v8;
                else
                  v24 = v8 & 0xFFFFFFFFFFFFFF8;
                swift_bridgeObjectRetain(v8);
                v15 = _CocoaArrayWrapper.endIndex.getter(v24);
                swift_bridgeObjectRelease(v8);
              }
              else
              {
                v15 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
              }
              if (v15 <= 1)
                goto LABEL_41;
              MOSuggestionInterstitialListAssetView.addContactsGlobeGlyph(_:)(v8);
              goto LABEL_43;
            case 15:
              v16 = swift_bridgeObjectRelease(v8);
              v9 = *(uint64_t (**)(__n128))(*(_QWORD *)a1 + 176);
              v14 = v9(v16);
              if (v14)
                goto LABEL_16;
              v17 = v6();
              if (!v17)
                goto LABEL_34;
              v10 = v17;
              v11 = v17 & 0xFFFFFFFFFFFFFF8;
              if (v17 >> 62)
                goto LABEL_67;
              v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
              break;
            case 17:
            case 18:
              swift_bridgeObjectRelease(v8);
              MOSuggestionInterstitialListAssetView.addGlyphWithBackground(_:)(v2);
              goto LABEL_19;
            case 19:
              swift_bridgeObjectRelease(v8);
              MOSuggestionInterstitialListAssetView.addMixedRunWalkFillIcon(_:smartInvertOff:)(v2, 0);
              goto LABEL_19;
            case 20:
            case 21:
            case 22:
              v14 = v8;
LABEL_16:
              swift_bridgeObjectRelease(v14);
              goto LABEL_17;
            case 25:
LABEL_41:
              swift_bridgeObjectRelease(v8);
              MOSuggestionInterstitialListAssetView.addGenericRoundView(_:)(v2);
              goto LABEL_19;
            default:
              goto LABEL_43;
          }
LABEL_30:
          v19 = swift_bridgeObjectRelease(v10);
          if (v18 == 1)
          {
            (*(void (**)(__n128))(*(_QWORD *)a1 + 200))(v19);
            v21 = v20;
            v22 = swift_bridgeObjectRelease(v20);
            if (v21)
            {
              v23 = v9(v22);
              if (!v23)
              {
LABEL_17:
                v12 = v2;
                v13 = 0;
LABEL_18:
                MOSuggestionInterstitialListAssetView.addFillIcon(_:smartInvertOff:)(v12, v13);
                goto LABEL_19;
              }
              swift_bridgeObjectRelease(v23);
            }
          }
LABEL_34:
          MOSuggestionInterstitialListAssetView.addSpotlightIconView(_:)(v2);
LABEL_19:
          swift_release(v2);
          return;
        }
      }
      else
      {
        v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v10)
          goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease(v8);
  }
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1)
    swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
  v26 = type metadata accessor for Logger(0);
  __swift_project_value_buffer(v26, (uint64_t)static MOAngelLogger.assets);
  v27 = swift_retain_n(a1, 6);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = swift_slowAlloc(32, -1);
    v55 = swift_slowAlloc(96, -1);
    v57 = v55;
    *(_DWORD *)v30 = 136315650;
    v31 = v6();
    if (v31)
    {
      v32 = v31;
      v33 = type metadata accessor for MOSuggestionSheetImage();
      v34 = Array.debugDescription.getter(v32, v33);
      v36 = v35;
      swift_bridgeObjectRelease(v32);
    }
    else
    {
      v36 = 0xE300000000000000;
      v34 = 7104878;
    }
    v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v30 + 4);
    swift_release_n(a1, 2, v38);
    v39 = swift_bridgeObjectRelease(v36);
    *(_WORD *)(v30 + 12) = 2080;
    v40 = (*(uint64_t (**)(__n128))(*(_QWORD *)a1 + 248))(v39);
    if (v40)
    {
      v41 = v40;
      v42 = Array.debugDescription.getter(v40, &type metadata for String);
      v44 = v43;
      swift_bridgeObjectRelease(v41);
    }
    else
    {
      v44 = 0xE300000000000000;
      v42 = 7104878;
    }
    v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v30 + 14);
    swift_release_n(a1, 2, v45);
    v46 = swift_bridgeObjectRelease(v44);
    *(_WORD *)(v30 + 22) = 2080;
    v47 = ((uint64_t (*)(__n128))v6)(v46);
    if (v47)
    {
      v48 = v47;
      v49 = type metadata accessor for MOSuggestionSheetImage();
      v50 = Array.debugDescription.getter(v48, v49);
      v52 = v51;
      swift_bridgeObjectRelease(v48);
    }
    else
    {
      v52 = 0xE300000000000000;
      v50 = 7104878;
    }
    v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v52, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v30 + 24);
    swift_release_n(a1, 2, v53);
    swift_bridgeObjectRelease(v52);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "[MOSuggestionInterstitialListAssetView.init] Unable to render, icons=%s, title=%s, dates=%s", (uint8_t *)v30, 0x20u);
    swift_arrayDestroy(v55, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    swift_release_n(a1, 6, v37);
  }
}

void MOSuggestionInterstitialListAssetView.addFallBackSpinner()()
{
  void *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;

  objc_msgSend(v0, "frame");
  v5 = objc_msgSend(objc_allocWithZone((Class)UIActivityIndicatorView), "initWithFrame:", v1, v2, v3, v4);
  v6 = objc_msgSend((id)objc_opt_self(UIColor), "darkGrayColor");
  objc_msgSend(v5, "setColor:", v6);

  objc_msgSend(v5, "startAnimating");
  objc_msgSend(v0, "addSubview:", v5);
  objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v7 = objc_msgSend(v5, "superview");
  if (v7)
  {
    v8 = v7;
    objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v9 = objc_msgSend(v5, "centerYAnchor");
    v10 = objc_msgSend(v8, "centerYAnchor");
    v11 = objc_msgSend(v9, "constraintEqualToAnchor:", v10);

    objc_msgSend(v11, "setConstant:", 0.0);
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v12, "setActive:", 1);

    }
  }
  v13 = objc_msgSend(v5, "superview");
  if (v13)
  {
    v19 = v13;
    objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v14 = objc_msgSend(v5, "centerXAnchor");
    v15 = objc_msgSend(v19, "centerXAnchor");
    v16 = objc_msgSend(v14, "constraintEqualToAnchor:", v15);

    objc_msgSend(v16, "setConstant:", 0.0);
    if (v16)
    {
      v17 = v16;
      objc_msgSend(v17, "setActive:", 1);

      v5 = v17;
    }

    v18 = v19;
  }
  else
  {
    v18 = v5;
  }

}

void MOSuggestionInterstitialListAssetView.addWorkoutGlyph(_:)(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v4;
  void *v5;
  id v6;
  _QWORD *v7;
  __n128 v8;
  uint64_t v9;
  void *v10;
  char *v11;

  v2 = v1;
  v4 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 136))();
  if (one-time initialization token for exerciseGreen != -1)
    swift_once(&one-time initialization token for exerciseGreen, one-time initialization function for exerciseGreen);
  v5 = (void *)static MOSuggestionTheme.Colors.exerciseGreen;
  v6 = objc_msgSend((id)static MOSuggestionTheme.Colors.exerciseGreen, "colorWithAlphaComponent:", 0.18);
  objc_allocWithZone((Class)type metadata accessor for MOSuggestionWorkoutIconGlyphView());
  v11 = MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(v4, v6, v5);
  objc_msgSend(v2, "addSubview:", v11);
  v7 = UIView.fillSuper(margin:)(5.0);
  v8 = swift_bridgeObjectRelease(v7);
  v9 = (*(uint64_t (**)(__n128))(*(_QWORD *)a1 + 208))(v8);
  if (v9)
  {
    v10 = (void *)v9;
    objc_msgSend(v2, "setBackgroundColor:", v9);

  }
  objc_msgSend(v2, "setAccessibilityIgnoresInvertColors:", 1);
  objc_msgSend(v11, "setIsAccessibilityElement:", 1);

}

void MOSuggestionInterstitialListAssetView.addGlyphWithBackground(_:)(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  NSString v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  _QWORD *v30;
  __n128 v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  Swift::String v37;
  Swift::String v38;
  void *object;
  id v40;
  id v41;
  Swift::String v42;

  v2 = type metadata accessor for MOSuggestionRoundView();
  v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)), "init");
  v4 = (void *)objc_opt_self(UIColor);
  v5 = v3;
  v6 = objc_msgSend(v4, "systemWhiteColor");
  v7 = objc_msgSend(v6, "colorWithAlphaComponent:", 0.55);

  objc_msgSend(v5, "setBackgroundColor:", v7);
  v8 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  v9 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 136))();
  objc_msgSend(v8, "setImage:", v9);

  objc_msgSend(v8, "setContentMode:", 1);
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v4, "colorNamed:", v10);

  objc_msgSend(v8, "setTintColor:", v11);
  objc_msgSend(v5, "addSubview:", v8);
  v12 = objc_msgSend(v8, "heightAnchor");
  v13 = objc_msgSend(v5, "heightAnchor");
  v14 = objc_msgSend(v12, "constraintEqualToAnchor:multiplier:", v13, 0.5);

  objc_msgSend(v14, "setActive:", 1);
  v15 = objc_msgSend(v8, "widthAnchor");
  v16 = objc_msgSend(v5, "widthAnchor");
  v17 = objc_msgSend(v15, "constraintEqualToAnchor:multiplier:", v16, 0.5);

  objc_msgSend(v17, "setActive:", 1);
  v18 = objc_msgSend(v8, "superview");
  if (v18)
  {
    v19 = v18;
    objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v20 = objc_msgSend(v8, "centerYAnchor");
    v21 = objc_msgSend(v19, "centerYAnchor");
    v22 = objc_msgSend(v20, "constraintEqualToAnchor:", v21);

    objc_msgSend(v22, "setConstant:", 0.0);
    v23 = v22;
    objc_msgSend(v23, "setActive:", 1);

  }
  v24 = objc_msgSend(v8, "superview");
  if (v24)
  {
    v25 = v24;
    objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v26 = objc_msgSend(v8, "centerXAnchor");
    v27 = objc_msgSend(v25, "centerXAnchor");
    v28 = objc_msgSend(v26, "constraintEqualToAnchor:", v27);

    objc_msgSend(v28, "setConstant:", 0.0);
    v29 = v28;
    objc_msgSend(v29, "setActive:", 1);

  }
  objc_msgSend(v40, "addSubview:", v5);
  v30 = UIView.fillSuper(margin:)(5.0);
  v31 = swift_bridgeObjectRelease(v30);
  v32 = (*(uint64_t (**)(__n128))(*(_QWORD *)a1 + 208))(v31);
  if (v32)
  {
    v33 = (void *)v32;
    objc_msgSend(v40, "setBackgroundColor:", v32);

  }
  objc_msgSend(v5, "setIsAccessibilityElement:", 1);
  v34 = (void *)objc_opt_self(NSBundle);
  v35 = v5;
  v36 = objc_msgSend(v34, "mainBundle");
  v42._object = (void *)0x80000001001A7EC0;
  v37._countAndFlagsBits = 0x676E696B6C6157;
  v37._object = (void *)0xE700000000000000;
  v38._countAndFlagsBits = 0;
  v38._object = (void *)0xE000000000000000;
  v42._countAndFlagsBits = 0xD000000000000036;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, (Swift::String_optional)0, (NSBundle)v36, v38, v42)._object;

  v41 = String._bridgeToObjectiveC()();
  objc_msgSend(v35, "setAccessibilityLabel:", v41, swift_bridgeObjectRelease(object).n128_f64[0]);

}

void MOSuggestionInterstitialListAssetView.addFallbackView(_:)(unsigned __int8 a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  UIAccessibilityTraits v15;
  id v16;
  unint64_t v17;
  UIAccessibilityTraits v18;
  void *v19;
  id v20;
  id v21;
  Swift::String v22;
  Swift::String v23;
  void *object;
  NSString v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;

  v2 = v1;
  v4 = 0x6F746F6870;
  v5 = 0xE500000000000000;
  switch(a1)
  {
    case 0u:
    case 1u:
      v4 = 0x636973756DLL;
      goto LABEL_9;
    case 2u:
      v5 = 0xE800000000000000;
      v4 = 0x7374736163646F70;
      goto LABEL_9;
    case 7u:
      v5 = 0xEA00000000006E75;
      v4 = 0x722E657275676966;
      goto LABEL_9;
    case 0xBu:
      v5 = 0x80000001001A5F90;
      v4 = 0xD000000000000012;
      goto LABEL_9;
    case 0xCu:
    case 0xDu:
      goto LABEL_9;
    case 0xEu:
      v4 = 0x6F65646976;
      goto LABEL_9;
    case 0xFu:
      v4 = 0xD000000000000015;
      v5 = 0x80000001001A5F60;
      goto LABEL_9;
    case 0x1Au:
      return;
    default:
      v5 = 0xEC0000006B72616DLL;
      v4 = 0x6E6F697473657571;
LABEL_9:
      if (serverManager._connectionProperties != (NSMutableDictionary *)-1)
        swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
      v6 = type metadata accessor for Logger(0);
      __swift_project_value_buffer(v6, (uint64_t)static MOAngelLogger.assets);
      v7 = swift_bridgeObjectRetain_n(v5, 2);
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = swift_slowAlloc(22, -1);
        v11 = swift_slowAlloc(32, -1);
        *(_DWORD *)v10 = 134218242;
        v26 = a1;
        v27 = v11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v10 + 4);
        *(_WORD *)(v10 + 12) = 2080;
        swift_bridgeObjectRetain(v5);
        v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v10 + 14);
        swift_bridgeObjectRelease_n(v5, 3);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "[MOSuggestionInterstitialListAssetView] using visualType=%ld, fallbackType=%s", (uint8_t *)v10, 0x16u);
        swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v11, -1, -1);
        swift_slowDealloc(v10, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v5, 2);
      }
      type metadata accessor for MOSuggestionFallbackAssetView();
      MOSuggestionFallbackAssetView.__allocating_init(with:sizeType:)(v4, v5, 3);
      v13 = v12;
      objc_msgSend(v2, "addSubview:", v12);
      v14 = UIView.fillSuper(margin:)(0.0);
      objc_msgSend(v13, "setIsAccessibilityElement:", 1, swift_bridgeObjectRelease(v14).n128_f64[0]);
      v15 = UIAccessibilityTraitImage;
      v16 = v13;
      v17 = (unint64_t)objc_msgSend(v16, "accessibilityTraits");
      if ((v15 & ~v17) != 0)
        v18 = v15;
      else
        v18 = 0;
      objc_msgSend(v16, "setAccessibilityTraits:", v18 | v17);

      v19 = (void *)objc_opt_self(NSBundle);
      v20 = v16;
      v21 = objc_msgSend(v19, "mainBundle");
      v28._countAndFlagsBits = 0xD00000000000002DLL;
      v28._object = (void *)0x80000001001A7E60;
      v22._countAndFlagsBits = 0x6B6361626C6C6146;
      v22._object = (void *)0xE800000000000000;
      v23._countAndFlagsBits = 0;
      v23._object = (void *)0xE000000000000000;
      object = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, (Swift::String_optional)0, (NSBundle)v21, v23, v28)._object;

      v25 = String._bridgeToObjectiveC()();
      objc_msgSend(v20, "setAccessibilityLabel:", v25, swift_bridgeObjectRelease(object).n128_f64[0]);

      return;
  }
}

void MOSuggestionInterstitialListAssetView.addFillIcon(_:smartInvertOff:)(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  id v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  id v12;
  _QWORD *v13;
  _QWORD v14[5];
  _QWORD v15[4];
  char v16;

  v3 = v2;
  v6 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  v7 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 136))();
  objc_msgSend(v6, "setImage:", v7);

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 256))(v14);
  outlined init with take of CGRect?((uint64_t)v14, (uint64_t)v15);
  if ((v16 & 1) == 0)
  {
    v8 = *(double *)v15;
    v9 = *(double *)&v15[1];
    v10 = *(double *)&v15[2];
    v11 = *(double *)&v15[3];
    v12 = objc_msgSend(v6, "layer");
    objc_msgSend(v12, "setContentsRect:", v8, v9, v10, v11);

  }
  objc_msgSend(v6, "setContentMode:", 2);
  objc_msgSend(v3, "addSubview:", v6);
  v13 = UIView.fillSuper(margin:)(0.0);
  objc_msgSend(v6, "setIsAccessibilityElement:", 1, swift_bridgeObjectRelease(v13).n128_f64[0]);
  if ((a2 & 1) != 0)
    objc_msgSend(v6, "setAccessibilityIgnoresInvertColors:", 1);

}

void MOSuggestionInterstitialListAssetView.addMixedRunWalkFillIcon(_:smartInvertOff:)(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  id v6;
  void *v7;
  NSString v8;
  id v9;
  _QWORD *v10;
  id v11;

  v3 = v2;
  v6 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  v7 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 136))();
  objc_msgSend(v6, "setImage:", v7);

  v11 = v6;
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v8);

  objc_msgSend(v11, "setBackgroundColor:", v9);
  objc_msgSend(v11, "setContentMode:", 2);
  objc_msgSend(v3, "addSubview:", v11);
  v10 = UIView.fillSuper(margin:)(0.0);
  objc_msgSend(v11, "setIsAccessibilityElement:", 1, swift_bridgeObjectRelease(v10).n128_f64[0]);
  if ((a2 & 1) != 0)
    objc_msgSend(v11, "setAccessibilityIgnoresInvertColors:", 1);

}

void MOSuggestionInterstitialListAssetView.addGenericRoundView(_:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  id v6;
  void *v7;
  _QWORD *v8;
  UIAccessibilityTraits v9;
  id v10;
  unint64_t v11;
  UIAccessibilityTraits v12;
  void *v13;
  id v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  void *object;
  id v19;
  Swift::String v20;

  v3 = type metadata accessor for MOSuggestionRoundView();
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)), "init");
  objc_msgSend(v1, "addSubview:", v4);
  v5 = UIView.fillSuper(margin:)(0.0);
  swift_bridgeObjectRelease(v5);
  v6 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  v7 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 136))();
  objc_msgSend(v6, "setImage:", v7);

  objc_msgSend(v4, "addSubview:", v6);
  v8 = UIView.fillSuper(margin:)(0.0);
  objc_msgSend(v6, "setIsAccessibilityElement:", 1, swift_bridgeObjectRelease(v8).n128_f64[0]);
  v9 = UIAccessibilityTraitImage;
  v10 = v6;
  v11 = (unint64_t)objc_msgSend(v10, "accessibilityTraits");
  if ((v9 & ~v11) != 0)
    v12 = v9;
  else
    v12 = 0;
  objc_msgSend(v10, "setAccessibilityTraits:", v12 | v11);

  objc_msgSend(v10, "setAccessibilityIgnoresInvertColors:", 1);
  v13 = (void *)objc_opt_self(NSBundle);
  v14 = v10;
  v15 = objc_msgSend(v13, "mainBundle");
  v20._object = (void *)0x80000001001A6990;
  v16._countAndFlagsBits = 0x746361746E6F43;
  v16._object = (void *)0xE700000000000000;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v20._countAndFlagsBits = 0xD000000000000026;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v20)._object;

  v19 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setAccessibilityLabel:", v19, swift_bridgeObjectRelease(object).n128_f64[0]);

}

void MOSuggestionInterstitialListAssetView.addSpotlightIconView(_:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  id v9;
  void *v10;
  double v11;
  char v12;
  _QWORD *v13;
  UIAccessibilityTraits v14;
  id v15;
  unint64_t v16;
  UIAccessibilityTraits v17;
  void *v18;
  id v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  void *object;
  NSString v24;
  id v25;
  Swift::String v26;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 160))();
  if (v3)
  {
    v25 = (id)v3;
    v4 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 184))();
    if (v4)
    {
      v5 = (void *)v4;
      v6 = type metadata accessor for MOSuggestionRoundView();
      v7 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v6)), "init");
      objc_msgSend(v7, "setBackgroundColor:", v5);
      objc_msgSend(v1, "addSubview:", v7);
      v8 = UIView.fillSuper(margin:)(5.0);
      swift_bridgeObjectRelease(v8);
      v9 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
      v10 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 136))();
      objc_msgSend(v9, "setImage:", v10);

      objc_msgSend(v9, "setContentMode:", 1);
      objc_msgSend(v9, "setTintColor:", v25);
      v11 = COERCE_DOUBLE((*(uint64_t (**)(id))(*(_QWORD *)a1 + 280))(objc_msgSend(v7, "addSubview:", v9)))
          + 4.0;
      if ((v12 & 1) != 0)
        v11 = 4.0;
      v13 = UIView.fillSuper(margin:)(v11);
      objc_msgSend(v9, "setIsAccessibilityElement:", 1, swift_bridgeObjectRelease(v13).n128_f64[0]);
      v14 = UIAccessibilityTraitImage;
      v15 = v9;
      v16 = (unint64_t)objc_msgSend(v15, "accessibilityTraits");
      if ((v14 & ~v16) != 0)
        v17 = v14;
      else
        v17 = 0;
      objc_msgSend(v15, "setAccessibilityTraits:", v17 | v16);

      v18 = (void *)objc_opt_self(NSBundle);
      v19 = v15;
      v20 = objc_msgSend(v18, "mainBundle");
      v26._object = (void *)0x80000001001A7F00;
      v21._countAndFlagsBits = 7364941;
      v21._object = (void *)0xE300000000000000;
      v22._countAndFlagsBits = 0;
      v22._object = (void *)0xE000000000000000;
      v26._countAndFlagsBits = 0xD000000000000022;
      object = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v26)._object;

      v24 = String._bridgeToObjectiveC()();
      objc_msgSend(v19, "setAccessibilityLabel:", v24, swift_bridgeObjectRelease(object).n128_f64[0]);

    }
  }
}

void MOSuggestionInterstitialListAssetView.addRouteSpotlightView(_:)(uint64_t a1)
{
  void *v1;
  id v2;
  _QWORD *v3;
  UIAccessibilityTraits v4;
  id v5;
  unint64_t v6;
  UIAccessibilityTraits v7;
  void *v8;
  id v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  void *object;
  id v14;
  Swift::String v15;

  MOSuggestionInterstitialListAssetView.addFillIcon(_:smartInvertOff:)(a1, 1);
  v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MOSuggestionCutoutView()), "init");
  objc_msgSend(v1, "addSubview:", v2);
  v3 = UIView.fillSuper(margin:)(0.0);
  objc_msgSend(v2, "setIsAccessibilityElement:", 1, swift_bridgeObjectRelease(v3).n128_f64[0]);
  v4 = UIAccessibilityTraitImage;
  v5 = v2;
  v6 = (unint64_t)objc_msgSend(v5, "accessibilityTraits");
  if ((v4 & ~v6) != 0)
    v7 = v4;
  else
    v7 = 0;
  objc_msgSend(v5, "setAccessibilityTraits:", v7 | v6);

  objc_msgSend(v5, "setAccessibilityIgnoresInvertColors:", 1);
  v8 = (void *)objc_opt_self(NSBundle);
  v9 = v5;
  v10 = objc_msgSend(v8, "mainBundle");
  v15._object = (void *)0x80000001001A7E90;
  v11._countAndFlagsBits = 0x6574756F52;
  v11._object = (void *)0xE500000000000000;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v15._countAndFlagsBits = 0xD000000000000024;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v15)._object;

  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setAccessibilityLabel:", v14, swift_bridgeObjectRelease(object).n128_f64[0]);

}

void MOSuggestionInterstitialListAssetView.addWorkoutGlobeGlyph(_:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  _QWORD *v15;
  void *v16;
  id v17;
  Swift::String v18;
  Swift::String v19;
  void *object;
  NSString v21;
  id v22;
  uint64_t v23;
  id v24;
  Swift::String v25;

  v2 = v1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v23 = a1;
    else
      v23 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v4)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v4);
    if (v4 < 0)
    {
      __break(1u);
      return;
    }
    v5 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
      }
      else
      {
        v6 = *(_QWORD *)(a1 + 8 * v5 + 32);
        swift_retain(v6);
      }
      ++v5;
      v7 = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 136))();
      swift_release(v6);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      v9 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
      v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
      specialized ContiguousArray._endMutation()(v10);
    }
    while (v4 != v5);
  }
  if (one-time initialization token for exerciseGreen != -1)
    swift_once(&one-time initialization token for exerciseGreen, one-time initialization function for exerciseGreen);
  v11 = (void *)static MOSuggestionTheme.Colors.exerciseGreen;
  v12 = objc_msgSend((id)static MOSuggestionTheme.Colors.exerciseGreen, "colorWithAlphaComponent:", 0.18);
  objc_allocWithZone((Class)type metadata accessor for MOSuggestionWorkoutsSnowGlobeView());
  v13 = v11;
  v14 = specialized MOSuggestionWorkoutsSnowGlobeView.init(icons:glyphBackgroundColor:glyphTintColor:)((uint64_t)_swiftEmptyArrayStorage, v12, v13);

  objc_msgSend(v2, "addSubview:", v14);
  v15 = UIView.fillSuper(margin:)(0.0);
  objc_msgSend(v14, "setIsAccessibilityElement:", 1, swift_bridgeObjectRelease(v15).n128_f64[0]);
  v16 = (void *)objc_opt_self(NSBundle);
  v24 = v14;
  v17 = objc_msgSend(v16, "mainBundle");
  v25._object = (void *)0x80000001001A7F30;
  v18._countAndFlagsBits = 0x7374756F6B726F57;
  v18._object = (void *)0xE800000000000000;
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  v25._countAndFlagsBits = 0xD00000000000002FLL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v25)._object;

  v21 = String._bridgeToObjectiveC()();
  objc_msgSend(v24, "setAccessibilityLabel:", v21, swift_bridgeObjectRelease(object).n128_f64[0]);

  v22 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  objc_msgSend(v2, "setBackgroundColor:", v22);

  objc_msgSend(v2, "setAccessibilityIgnoresInvertColors:", 1);
  objc_msgSend(v24, "setIsAccessibilityElement:", 1);

}

void MOSuggestionInterstitialListAssetView.addContactsGlobeGlyph(_:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  _QWORD *v13;
  UIAccessibilityTraits v14;
  id v15;
  unint64_t v16;
  UIAccessibilityTraits v17;
  void *v18;
  id v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  void *object;
  NSString v24;
  uint64_t v25;
  id v26;
  Swift::String v27;

  v2 = v1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v25 = a1;
    else
      v25 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v4)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v4);
    if (v4 < 0)
    {
      __break(1u);
      return;
    }
    v5 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
      }
      else
      {
        v6 = *(_QWORD *)(a1 + 8 * v5 + 32);
        swift_retain(v6);
      }
      ++v5;
      v7 = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 136))();
      swift_release(v6);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      v9 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
      v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
      specialized ContiguousArray._endMutation()(v10);
    }
    while (v4 != v5);
  }
  v11 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionWorkoutsSnowGlobeView());
  v12 = MOSuggestionWorkoutsSnowGlobeView.init(alreadyRoundedIcons:)((uint64_t)_swiftEmptyArrayStorage);
  objc_msgSend(v2, "addSubview:", v12);
  v13 = UIView.fillSuper(margin:)(0.0);
  objc_msgSend(v12, "setIsAccessibilityElement:", 1, swift_bridgeObjectRelease(v13).n128_f64[0]);
  v14 = UIAccessibilityTraitImage;
  v15 = v12;
  v16 = (unint64_t)objc_msgSend(v15, "accessibilityTraits");
  if ((v14 & ~v16) != 0)
    v17 = v14;
  else
    v17 = 0;
  objc_msgSend(v15, "setAccessibilityTraits:", v17 | v16);

  objc_msgSend(v15, "setAccessibilityIgnoresInvertColors:", 1);
  v18 = (void *)objc_opt_self(NSBundle);
  v19 = v15;
  v20 = objc_msgSend(v18, "mainBundle");
  v27._object = (void *)0x80000001001A6990;
  v21._countAndFlagsBits = 0x746361746E6F43;
  v21._object = (void *)0xE700000000000000;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v27._countAndFlagsBits = 0xD000000000000026;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v27)._object;

  v24 = String._bridgeToObjectiveC()();
  objc_msgSend(v19, "setAccessibilityLabel:", v24, swift_bridgeObjectRelease(object).n128_f64[0]);

  v26 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
  objc_msgSend(v2, "setBackgroundColor:", v26);

}

void MOSuggestionInterstitialListAssetView.init(coder:)()
{
  _BYTE *v0;

  v0[OBJC_IVAR____TtC16MomentsUIService37MOSuggestionInterstitialListAssetView_shouldBeRounded] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001A6460, "MomentsUIService/MOSuggestionInterstitialListAssetView.swift", 60, 2, 303, 0);
  __break(1u);
}

Swift::Void __swiftcall MOSuggestionInterstitialListAssetView.prepareForReuse()()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;

  v1 = objc_msgSend(v0, "subviews");
  v2 = type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for UIView, UIView_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if (!((unint64_t)v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease(v3);
    v9 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v0, "setBackgroundColor:", v9);

    return;
  }
  if (v3 < 0)
    v8 = v3;
  else
    v8 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  v4 = _CocoaArrayWrapper.endIndex.getter(v8);
  swift_bridgeObjectRelease(v3);
  if (!v4)
    goto LABEL_13;
LABEL_3:
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
      else
        v6 = *(id *)(v3 + 8 * i + 32);
      v7 = v6;
      objc_msgSend(v6, "removeFromSuperview");

    }
    goto LABEL_13;
  }
  __break(1u);
}

void MOSuggestionInterstitialListAssetView.init(frame:)()
{
  MOSuggestionCutoutView.init(frame:)((uint64_t)"MomentsUIService.MOSuggestionInterstitialListAssetView", 54);
}

void MOSuggestionCutoutView.init(frame:)(uint64_t a1, uint64_t a2)
{
  _swift_stdlib_reportUnimplementedInitializer(a1, a2, "init(frame:)", 12, 0);
  __break(1u);
}

void @objc MOSuggestionCutoutView.init(frame:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _swift_stdlib_reportUnimplementedInitializer(a3, a4, "init(frame:)", 12, 0);
  __break(1u);
}

id MOSuggestionInterstitialListAssetView.__deallocating_deinit()
{
  return MOSuggestionRoundView.__deallocating_deinit(type metadata accessor for MOSuggestionInterstitialListAssetView);
}

id MOSuggestionRoundView.__deallocating_deinit(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

ValueMetadata *type metadata accessor for MOSuggestionInterstitialListAssetViewConstants()
{
  return &type metadata for MOSuggestionInterstitialListAssetViewConstants;
}

uint64_t outlined init with take of CGRect?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGRect?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *MOSuggestionShowMoreFooterView.reuseIdentifier.unsafeMutableAddressor()
{
  return &static MOSuggestionShowMoreFooterView.reuseIdentifier;
}

unint64_t static MOSuggestionShowMoreFooterView.reuseIdentifier.getter()
{
  return 0xD00000000000001ELL;
}

void closure #1 in variable initialization expression of MOSuggestionShowMoreFooterView.showMoreButton()
{
  uint64_t v0;
  id v1;
  id v2;
  Swift::String v3;
  Swift::String v4;
  void *object;
  uint64_t v6;
  uint64_t inited;
  void *v8;
  NSString *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  unint64_t v14;
  id v15;
  NSString v16;
  Class isa;
  id v18;
  _BYTE v19[72];
  Swift::String v20;

  v0 = type metadata accessor for MOSuggestionCapsuleButton();
  v1 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0)), "init");
  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v20._object = (void *)0x80000001001A8000;
  v3._countAndFlagsBits = 0x726F4D20776F6853;
  v3._object = (void *)0xE900000000000065;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v20._countAndFlagsBits = 0xD00000000000004ALL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v20)._object;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  inited = swift_initStackObject(v6, v19);
  *(_OWORD *)(inited + 16) = xmmword_10019ED20;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  v8 = (void *)objc_opt_self(UIFont);
  v9 = NSFontAttributeName;
  v10 = objc_msgSend(v8, "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
  v11 = objc_msgSend(v10, "fontDescriptor");
  v12 = objc_msgSend(v11, "fontDescriptorWithSymbolicTraits:", 2);

  if (v12)
  {
    v13 = objc_msgSend(v8, "fontWithDescriptor:size:", v12, 0.0);

    *(_QWORD *)(inited + 64) = type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for UIFont, UIFont_ptr);
    *(_QWORD *)(inited + 40) = v13;
    v14 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    v15 = objc_allocWithZone((Class)NSAttributedString);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v18 = objc_msgSend(v15, "initWithString:attributes:", v16, isa, swift_bridgeObjectRelease(v14).n128_f64[0]);

    objc_msgSend(v1, "setAttributedTitle:forState:", v18, 0);
  }
  else
  {
    __break(1u);
  }
}

id MOSuggestionShowMoreFooterView.showMoreButton.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreButton);
}

uint64_t key path setter for MOSuggestionShowMoreFooterView.showMoreAction : MOSuggestionShowMoreFooterView(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t (*)(), uint64_t, __n128);
  __n128 v7;

  v3 = *a1;
  v4 = a1[1];
  v5 = swift_allocObject(&unk_1001E5BE0, 32, 7);
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = *(uint64_t (**)(uint64_t (*)(), uint64_t, __n128))((swift_isaMask & **a2) + 0x68);
  v7 = swift_retain(v4);
  return v6(partial apply for thunk for @escaping @callee_guaranteed () -> (@out ()), v5, v7);
}

uint64_t MOSuggestionShowMoreFooterView.showMoreAction.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreAction);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreAction, v4, 0, 0);
  v2 = *v1;
  swift_retain(v1[1]);
  return v2;
}

uint64_t MOSuggestionShowMoreFooterView.showMoreAction.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _BYTE v11[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreAction);
  swift_beginAccess(v2 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreAction, v11, 1, 0);
  v6 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  swift_retain(a2);
  swift_release(v6);
  v7 = *v5;
  v8 = v5[1];
  v9 = *(void (**)(uint64_t, uint64_t))((swift_isaMask & **(_QWORD **)(v2
                                                                              + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreButton))
                                               + 0x60);
  swift_retain(v8);
  v9(v7, v8);
  return swift_release(a2);
}

void (*MOSuggestionShowMoreFooterView.showMoreAction.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreAction;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  return MOSuggestionShowMoreFooterView.showMoreAction.modify;
}

void MOSuggestionShowMoreFooterView.showMoreAction.modify(_QWORD *a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  v3 = (_QWORD *)*a1;
  swift_endAccess(*a1);
  if ((a2 & 1) == 0)
  {
    v4 = v3[3];
    v5 = (uint64_t *)(v4 + v3[4]);
    v6 = *v5;
    v7 = v5[1];
    v8 = *(void (**)(uint64_t, uint64_t))((swift_isaMask & **(_QWORD **)(v4
                                                                                + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreButton))
                                                 + 0x60);
    swift_retain(v7);
    v8(v6, v7);
  }
  free(v3);
}

char *MOSuggestionShowMoreFooterView.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (__swiftcall **v12)();
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  char *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  Class isa;
  objc_super v32;

  v9 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreButton;
  v10 = v4;
  closure #1 in variable initialization expression of MOSuggestionShowMoreFooterView.showMoreButton();
  *(_QWORD *)&v4[v9] = v11;
  v12 = (void (__swiftcall **)())&v10[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreAction];
  *v12 = MOSuggestionInterstitialExpandableListViewCellConstants.init();
  v12[1] = 0;

  v32.receiver = v10;
  v32.super_class = (Class)type metadata accessor for MOSuggestionShowMoreFooterView();
  v13 = (char *)objc_msgSendSuper2(&v32, "initWithFrame:", a1, a2, a3, a4);
  v14 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreButton;
  v15 = *(_QWORD *)&v13[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreButton];
  v16 = v13;
  objc_msgSend(v16, "addSubview:", v15);
  v17 = (void *)objc_opt_self(UIColor);
  v18 = v16;
  v19 = objc_msgSend(v17, "clearColor");
  objc_msgSend(v18, "setBackgroundColor:", v19);

  v20 = (void *)objc_opt_self(NSLayoutConstraint);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v22 = swift_allocObject(v21, 48, 7);
  *(_OWORD *)(v22 + 16) = xmmword_10019F870;
  v23 = objc_msgSend(*(id *)&v13[v14], "centerXAnchor");
  v24 = objc_msgSend(v18, "centerXAnchor");
  v25 = objc_msgSend(v23, "constraintEqualToAnchor:", v24);

  *(_QWORD *)(v22 + 32) = v25;
  v26 = objc_msgSend(*(id *)&v13[v14], "topAnchor");
  v27 = objc_msgSend(v18, "topAnchor");
  v28 = objc_msgSend(v26, "constraintEqualToAnchor:constant:", v27, 10.0);

  *(_QWORD *)(v22 + 40) = v28;
  specialized Array._endMutation()(v29);
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v20, "activateConstraints:", isa, swift_bridgeObjectRelease(v22).n128_f64[0]);

  return v18;
}

uint64_t type metadata accessor for MOSuggestionShowMoreFooterView()
{
  return objc_opt_self(_TtC16MomentsUIService30MOSuggestionShowMoreFooterView);
}

void MOSuggestionShowMoreFooterView.init(coder:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  void (__swiftcall **v3)();

  v1 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreButton;
  closure #1 in variable initialization expression of MOSuggestionShowMoreFooterView.showMoreButton();
  *(_QWORD *)&v0[v1] = v2;
  v3 = (void (__swiftcall **)())&v0[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreAction];
  *v3 = MOSuggestionInterstitialExpandableListViewCellConstants.init();
  v3[1] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001A6460, "MomentsUIService/MOSuggestionShowMoreFooterView.swift", 53, 2, 37, 0);
  __break(1u);
}

id MOSuggestionShowMoreFooterView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionShowMoreFooterView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10004E508@<X0>(_QWORD **a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x60))();
  v5 = v4;
  result = swift_allocObject(&unk_1001E5C08, 32, 7);
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_10004E5B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey;
  if (!lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey)
  {
    type metadata accessor for NSAttributedStringKey(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSAttributedStringKey, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey);
  }
  return result;
}

void one-time initialization function for BACKGROUND_COLOR()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(UIColor), "systemIndigoColor");
  v1 = objc_msgSend(v0, "colorWithAlphaComponent:", 0.15);

  static Constants.BACKGROUND_COLOR = (uint64_t)v1;
}

void one-time initialization function for LABEL_HEIGHT()
{
  id v0;
  id v1;
  Class isa;
  double v3;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v1 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleFootnote);
  isa = UIFont.withWeight(_:)(UIFontWeightSemibold).super.isa;

  v3 = specialized UILabel.estimatedHeight(forWidth:text:ofFont:)(0, 0xE000000000000000, isa, 0.0);
  static Constants.LABEL_HEIGHT = *(_QWORD *)&v3;
}

id MOSuggestionPhotoMemoryBanner.bannerLabel.getter()
{
  uint64_t v0;
  id *v1;
  _BYTE v3[24];

  v1 = (id *)(v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionPhotoMemoryBanner_bannerLabel);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionPhotoMemoryBanner_bannerLabel, v3, 0, 0);
  return *v1;
}

void MOSuggestionPhotoMemoryBanner.bannerLabel.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  _BYTE v5[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionPhotoMemoryBanner_bannerLabel);
  swift_beginAccess(v3, v5, 1, 0);
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*MOSuggestionPhotoMemoryBanner.bannerLabel.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionPhotoMemoryBanner_bannerLabel, a1, 33, 0);
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

Swift::Void __swiftcall MOSuggestionPhotoMemoryBanner.setPublicUI(_:)(Swift::Bool a1)
{
  void *v1;
  void *v3;
  char **v4;
  id v5;
  id v6;

  v3 = (void *)objc_opt_self(UIColor);
  v4 = &selRef_systemBlueColor;
  if (!a1)
    v4 = &selRef_systemIndigoColor;
  v5 = objc_msgSend(v3, *v4);
  v6 = objc_msgSend(v5, "colorWithAlphaComponent:", 0.15);

  objc_msgSend(v1, "setBackgroundColor:", v6);
  objc_msgSend(v1, "setNeedsDisplay");
}

id MOSuggestionPhotoMemoryBanner.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  id v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  NSString v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD v28[5];
  uint64_t v29;
  objc_super v30;

  v9 = OBJC_IVAR____TtC16MomentsUIService29MOSuggestionPhotoMemoryBanner_bannerLabel;
  v10 = objc_allocWithZone((Class)UILabel);
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, "init");

  v30.receiver = v11;
  v30.super_class = (Class)type metadata accessor for MOSuggestionPhotoMemoryBanner();
  v12 = objc_msgSendSuper2(&v30, "initWithFrame:", a1, a2, a3, a4);
  v13 = objc_msgSend(v12, "layer");
  objc_msgSend(v13, "setCornerRadius:", 7.0);

  v14 = one-time initialization token for BACKGROUND_COLOR;
  v15 = v12;
  if (v14 != -1)
    swift_once(&one-time initialization token for BACKGROUND_COLOR, one-time initialization function for BACKGROUND_COLOR);
  objc_msgSend(v15, "setBackgroundColor:", static Constants.BACKGROUND_COLOR);

  objc_msgSend(v15, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v16 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  v17 = swift_allocObject(&unk_1001E5C30, 24, 7);
  swift_unknownObjectWeakInit(v17 + 16);
  v18 = swift_allocObject(&unk_1001E5C58, 32, 7);
  *(_QWORD *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = v16;
  v19 = objc_allocWithZone((Class)ISIcon);
  swift_retain(v17);
  v20 = v16;
  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend(v19, "initWithBundleIdentifier:", v21);

  if (one-time initialization token for iconDescriptor != -1)
    swift_once(&one-time initialization token for iconDescriptor, one-time initialization function for iconDescriptor);
  v23 = static MOSuggestionAssetAppIconProvider.iconDescriptor;
  v24 = swift_allocObject(&unk_1001E5C80, 32, 7);
  *(_QWORD *)(v24 + 16) = partial apply for closure #1 in MOSuggestionPhotoMemoryBanner.initBannerView();
  *(_QWORD *)(v24 + 24) = v18;
  v28[4] = partial apply for closure #1 in static MOSuggestionAssetAppIconProvider.getImageFor(bundleIdentifier:completion:);
  v29 = v24;
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 1107296256;
  v28[2] = thunk for @escaping @callee_guaranteed (@guaranteed CGImageRef?) -> ();
  v28[3] = &block_descriptor_4;
  v25 = _Block_copy(v28);
  v26 = v29;
  swift_retain(v18);
  objc_msgSend(v22, "getCGImageForImageDescriptor:completion:", v23, v25, swift_release(v26).n128_f64[0]);
  _Block_release(v25);

  swift_release(v17);
  swift_release(v18);

  return v15;
}

uint64_t type metadata accessor for MOSuggestionPhotoMemoryBanner()
{
  return objc_opt_self(_TtC16MomentsUIService29MOSuggestionPhotoMemoryBanner);
}

uint64_t sub_10004EBD0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void MOSuggestionPhotoMemoryBanner.init(coder:)()
{
  char *v0;
  uint64_t v1;

  v1 = OBJC_IVAR____TtC16MomentsUIService29MOSuggestionPhotoMemoryBanner_bannerLabel;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001A6460, "MomentsUIService/MOSuggestionPhotoMemoryBanner.swift", 52, 2, 36, 0);
  __break(1u);
}

uint64_t closure #1 in MOSuggestionPhotoMemoryBanner.initBannerView()(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __n128 v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue();
  v13 = (void *)static OS_dispatch_queue.main.getter(v12);
  v14 = (_QWORD *)swift_allocObject(&unk_1001E5CE0, 40, 7);
  v14[2] = a1;
  v14[3] = a2;
  v14[4] = a3;
  aBlock[4] = partial apply for closure #1 in closure #1 in MOSuggestionPhotoMemoryBanner.initBannerView();
  v27 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_12;
  v15 = _Block_copy(aBlock);
  v16 = v27;
  v17 = a1;
  swift_retain(a2);
  v18 = a3;
  swift_release(v16);
  static DispatchQoS.unspecified.getter(v19);
  aBlock[0] = _swiftEmptyArrayStorage;
  v20 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  v22 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v21, v22, v6, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v24);
}

uint64_t sub_10004EF1C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in MOSuggestionPhotoMemoryBanner.initBannerView()(void *a1)
{
  uint64_t v1;

  return closure #1 in MOSuggestionPhotoMemoryBanner.initBannerView()(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

void closure #1 in closure #1 in MOSuggestionPhotoMemoryBanner.initBannerView()(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t Strong;
  _QWORD *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t (*v24)(void);
  void *v25;
  id v26;
  Class isa;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  NSString v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  id v63;
  void *v64;
  id v65;
  _BYTE v66[24];
  Swift::String v67;

  if (a1)
  {
    v5 = a2 + 16;
    swift_beginAccess(a2 + 16, v66, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v5);
    if (Strong)
    {
      v7 = (_QWORD *)Strong;
      v65 = a1;
      objc_msgSend(a3, "setImage:");
      objc_msgSend(a3, "setContentMode:", 1);
      objc_msgSend(a3, "setClipsToBounds:", 1);
      objc_msgSend(a3, "_setCornerRadius:", 4.0);
      objc_msgSend(v7, "addSubview:", a3);
      v8 = objc_msgSend(a3, "superview");
      if (v8)
      {
        v9 = v8;
        objc_msgSend(a3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v10 = objc_msgSend(a3, "leadingAnchor");
        v11 = objc_msgSend(v9, "leadingAnchor");
        v12 = objc_msgSend(v10, "constraintEqualToAnchor:", v11);

        objc_msgSend(v12, "setConstant:", 6.0);
        v13 = v12;
        objc_msgSend(v13, "setActive:", 1);

      }
      v14 = objc_msgSend(a3, "superview");
      if (v14)
      {
        v15 = v14;
        objc_msgSend(a3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v16 = objc_msgSend(a3, "centerYAnchor");
        v17 = objc_msgSend(v15, "centerYAnchor");
        v18 = objc_msgSend(v16, "constraintEqualToAnchor:", v17);

        objc_msgSend(v18, "setConstant:", 0.0);
        v19 = v18;
        objc_msgSend(v19, "setActive:", 1);

      }
      v20 = objc_msgSend(a3, "heightAnchor");
      if (one-time initialization token for LABEL_HEIGHT != -1)
        swift_once(&one-time initialization token for LABEL_HEIGHT, one-time initialization function for LABEL_HEIGHT);
      v21 = objc_msgSend(v20, "constraintEqualToConstant:", *(double *)&static Constants.LABEL_HEIGHT);

      objc_msgSend(v21, "setActive:", 1);
      v22 = objc_msgSend(a3, "widthAnchor");
      v23 = objc_msgSend(v22, "constraintEqualToConstant:", *(double *)&static Constants.LABEL_HEIGHT);

      objc_msgSend(v23, "setActive:", 1);
      v24 = *(uint64_t (**)(void))((swift_isaMask & *v7) + 0x58);
      v25 = (void *)v24();
      v26 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleFootnote);
      isa = UIFont.withWeight(_:)(UIFontWeightSemibold).super.isa;

      objc_msgSend(v25, "setFont:", isa);
      v28 = (void *)v24();
      v29 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
      objc_msgSend(v28, "setTextColor:", v29);

      v30 = (void *)v24();
      objc_msgSend(v30, "setNumberOfLines:", 0);

      v31 = (void *)v24();
      v32 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v33._countAndFlagsBits = 0xD00000000000001ELL;
      v67._object = (void *)0x80000001001A8120;
      v33._object = (void *)0x80000001001A8100;
      v34._countAndFlagsBits = 0;
      v34._object = (void *)0xE000000000000000;
      v67._countAndFlagsBits = 0xD00000000000001BLL;
      v35 = NSLocalizedString(_:tableName:bundle:value:comment:)(v33, (Swift::String_optional)0, (NSBundle)v32, v34, v67);

      String.append(_:)(v35);
      swift_bridgeObjectRelease(v35._object);
      v36 = String._bridgeToObjectiveC()();
      objc_msgSend(v31, "setText:", v36, swift_bridgeObjectRelease(0xE100000000000000).n128_f64[0]);

      v37 = (void *)v24();
      objc_msgSend(v37, "setAdjustsFontSizeToFitWidth:", 1);

      v38 = (void *)v24();
      objc_msgSend(v38, "setAdjustsFontForContentSizeCategory:", 1);

      v39 = (void *)v24();
      objc_msgSend(v39, "setMaximumContentSizeCategory:", UIContentSizeCategoryAccessibilityMedium);

      v40 = (void *)v24();
      objc_msgSend(v7, "addSubview:", v40);

      v41 = (void *)v24();
      objc_msgSend(v41, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      v42 = objc_msgSend(v41, "leadingAnchor");
      v43 = objc_msgSend(a3, "trailingAnchor");
      v44 = objc_msgSend(v42, "constraintEqualToAnchor:", v43);

      objc_msgSend(v44, "setConstant:", 1.0);
      objc_msgSend(v44, "setActive:", 1);

      v45 = (void *)v24();
      v46 = objc_msgSend(v45, "superview");
      if (v46)
      {
        v47 = v46;
        objc_msgSend(v45, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v48 = objc_msgSend(v45, "topAnchor");
        v49 = objc_msgSend(v47, "topAnchor");
        v50 = objc_msgSend(v48, "constraintEqualToAnchor:", v49);

        objc_msgSend(v50, "setConstant:", 6.0);
        if (v50)
        {
          v50 = v50;
          objc_msgSend(v50, "setActive:", 1);

          v45 = v50;
        }

      }
      else
      {
        v50 = 0;
        v47 = v45;
      }

      v51 = (void *)v24();
      v52 = objc_msgSend(v51, "superview");
      if (v52)
      {
        v53 = v52;
        objc_msgSend(v51, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v54 = objc_msgSend(v51, "bottomAnchor");
        v55 = objc_msgSend(v53, "bottomAnchor");
        v56 = objc_msgSend(v54, "constraintEqualToAnchor:", v55);

        if (v56)
        {
          objc_msgSend(v56, "setConstant:", -6.0);
          v56 = v56;
          objc_msgSend(v56, "setActive:", 1);

          v51 = v56;
        }

      }
      else
      {
        v56 = 0;
        v53 = v51;
      }

      v57 = (void *)v24();
      v58 = objc_msgSend(v57, "superview");
      if (v58)
      {
        v59 = v58;
        objc_msgSend(v57, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v60 = objc_msgSend(v57, "trailingAnchor");
        v61 = objc_msgSend(v59, "trailingAnchor");
        v62 = objc_msgSend(v60, "constraintEqualToAnchor:", v61);

        objc_msgSend(v62, "setConstant:", 1.0);
        v63 = v62;
        objc_msgSend(v63, "setActive:", 1);

        v64 = v63;
        v7 = v63;
        v57 = v59;
      }
      else
      {
        v64 = v65;
      }

    }
  }
}

double static MOSuggestionPhotoMemoryBanner.photoMemoryBannerHeight()()
{
  if (one-time initialization token for LABEL_HEIGHT != -1)
    swift_once(&one-time initialization token for LABEL_HEIGHT, one-time initialization function for LABEL_HEIGHT);
  return *(double *)&static Constants.LABEL_HEIGHT + 12.0;
}

id MOSuggestionPhotoMemoryBanner.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionPhotoMemoryBanner();
  return objc_msgSendSuper2(&v2, "dealloc");
}

double static MOSuggestionPhotoMemoryBanner.estimatedHeight.getter()
{
  id v0;
  id v1;
  Class isa;
  double v3;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v1 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleFootnote);
  isa = UIFont.withWeight(_:)(UIFontWeightSemibold).super.isa;

  v3 = specialized UILabel.estimatedHeight(forWidth:text:ofFont:)(0, 0xE000000000000000, isa, 100.0);
  return v3 + 12.0;
}

void thunk for @escaping @callee_guaranteed (@guaranteed CGImageRef?) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_10004F9D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in static MOSuggestionAssetAppIconProvider.getImageFor(bundleIdentifier:completion:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static MOSuggestionAssetAppIconProvider.getImageFor(bundleIdentifier:completion:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004FA18@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x58))();
  *a2 = result;
  return result;
}

uint64_t sub_10004FA58(id *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(id))((swift_isaMask & **a2) + 0x60))(*a1);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;
  uint64_t v1;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t sub_10004FAD4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

void partial apply for closure #1 in closure #1 in MOSuggestionPhotoMemoryBanner.initBannerView()()
{
  uint64_t v0;

  closure #1 in closure #1 in MOSuggestionPhotoMemoryBanner.initBannerView()(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

void *MOSuggestionSheetAssetView.cornerRadius.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetAssetView.cornerRadius;
}

double static MOSuggestionInterstitialCarouselViewConstants.CAROUSEL_CELL_CORNER_RADIUS.getter()
{
  return 7.0;
}

uint64_t MOSuggestionSheetAssetView.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_delegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_delegate, v3, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t MOSuggestionSheetAssetView.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  v5 = v2 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_delegate;
  swift_beginAccess(v5, v7, 1, 0);
  *(_QWORD *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1);
}

void (*MOSuggestionSheetAssetView.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return MOSuggestionSheetAssetGridView.delegate.modify;
}

uint64_t MOSuggestionSheetAssetView.assetViewModel.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __n128 v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD aBlock[5];
  uint64_t v18;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue, OS_dispatch_queue_ptr);
  v9 = (void *)static OS_dispatch_queue.main.getter(v8);
  v10 = swift_allocObject(&unk_1001E5DA0, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16);
  aBlock[4] = partial apply for closure #1 in MOSuggestionSheetAssetView.assetViewModel.didset;
  v18 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_8;
  v11 = _Block_copy(aBlock);
  swift_release(v18);
  static DispatchQoS.unspecified.getter(v12);
  aBlock[0] = _swiftEmptyArrayStorage;
  v13 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  v15 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v14, v15, v0, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void closure #1 in MOSuggestionSheetAssetView.assetViewModel.didset(uint64_t a1)
{
  uint64_t v1;
  _QWORD *Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = (_QWORD *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    (*(void (**)(void))((swift_isaMask & *Strong) + 0xC0))();

  }
}

uint64_t MOSuggestionSheetAssetView.assetViewModel.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_assetViewModel;
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_assetViewModel, v3, 0, 0);
  return swift_weakLoadStrong(v1);
}

double MOSuggestionSheetAssetView.assetViewModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_assetViewModel;
  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_assetViewModel, v5, 1, 0);
  swift_weakAssign(v3, a1);
  MOSuggestionSheetAssetView.assetViewModel.didset();
  *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

void (*MOSuggestionSheetAssetView.assetViewModel.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_assetViewModel;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  v3[3] = swift_weakLoadStrong(v5);
  return MOSuggestionSheetAssetView.assetViewModel.modify;
}

void MOSuggestionSheetAssetView.assetViewModel.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  swift_weakAssign(*(_QWORD *)(*(_QWORD *)a1 + 32) + *(_QWORD *)(*(_QWORD *)a1 + 40), v4);
  if ((a2 & 1) != 0)
  {
    swift_release(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_release(v4);
    MOSuggestionSheetAssetView.assetViewModel.didset();
  }
  free(v3);
}

id MOSuggestionSheetAssetView.init(frame:)(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  char *v9;
  id v10;
  id v11;
  objc_super v13;

  v4[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_currentSizeType] = 3;
  v9 = &v4[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_delegate];
  *((_QWORD *)v9 + 1) = 0;
  swift_unknownObjectWeakInit(v9);
  swift_weakInit(&v4[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_assetViewModel]);
  v13.receiver = v4;
  v13.super_class = (Class)type metadata accessor for MOSuggestionSheetAssetView();
  v10 = objc_msgSendSuper2(&v13, "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v10, "setContentMode:", 2);
  v11 = objc_msgSend(v10, "layer");
  objc_msgSend(v11, "setCornerRadius:", 7.0);

  objc_msgSend(v10, "setClipsToBounds:", 1);
  return v10;
}

uint64_t type metadata accessor for MOSuggestionSheetAssetView()
{
  return objc_opt_self(_TtC16MomentsUIService26MOSuggestionSheetAssetView);
}

void MOSuggestionSheetAssetView.init(coder:)()
{
  _BYTE *v0;

  v0[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_currentSizeType] = 3;
  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit(&v0[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_assetViewModel], 0);

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001A6460, "MomentsUIService/MOSuggestionSheetAssetView.swift", 49, 2, 40, 0);
  __break(1u);
}

uint64_t MOSuggestionSheetAssetView.sizedBasedMapStyle(numLocations:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t result;

  v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x98))();
  if (!v3)
    return 5;
  v4 = v3;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1328))(v3);
  swift_release(v4);
  result = 5;
  switch(v5)
  {
    case 2:
    case 4:
      if (a1 <= 1)
        result = 2;
      else
        result = 5;
      break;
    case 5:
      result = 1;
      break;
    case 6:
      result = 0;
      break;
    case 8:
      result = 4;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Void __swiftcall MOSuggestionSheetAssetView.initAssetView()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  id v27;
  void *v28;
  uint64_t v29;
  double v30;
  _QWORD *v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  id v43;
  id v44;
  void *v45;
  char *v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  char v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  char v73;
  uint64_t v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  char v83;
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  char v93;
  uint64_t v94;
  __n128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  void *v104;
  id v105;
  char v106;
  id v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  id v116;
  _QWORD *v117;
  void *v118;
  _QWORD *v119;
  char *v120;
  _QWORD *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  char v134;
  void *v135;
  id v136;
  id v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  void *v146;
  id v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  _BYTE *v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  double v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  double v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t (*v186)(void);
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char v199;
  void *v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  uint64_t v212;
  void *v213;
  void *v214;
  char *v215;
  double v216;
  uint64_t v217;
  id v218;
  void *v219;
  id v220;
  id v221;
  char *v222;
  id v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  id v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char v242;
  uint64_t v243;
  void *v244;
  id v245;
  uint64_t v246;
  uint64_t *v247;
  CGFloat v248;
  CGFloat v249;
  CGFloat v250;
  CGFloat v251;
  char v252;
  uint64_t v253;
  id v254;
  void *v255;
  void *v256;
  char v257;
  id v258;
  id v259;
  char v260;
  double v261;
  id v262;
  id v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  id v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  CGPoint v280;
  CGSize v281;
  char v282;
  id v283;
  _QWORD *v284;
  UIAccessibilityTraits v285;
  id v286;
  unint64_t v287;
  UIAccessibilityTraits v288;
  void *v289;
  id v290;
  id v291;
  Swift::String v292;
  Swift::String v293;
  void *object;
  _QWORD *v295;
  char v296;
  uint64_t v297;
  void *v298;
  char v299;
  id v300;
  char v301;
  uint64_t v302;
  unint64_t v303;
  unint64_t v304;
  _QWORD *v305;
  _QWORD *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char v314;
  id v315;
  id v316;
  double v317;
  double v318;
  double v319;
  double v320;
  double v321;
  double v322;
  double v323;
  double v324;
  char v325;
  id v326;
  uint64_t v327;
  uint64_t *v328;
  CGFloat v329;
  CGFloat v330;
  CGFloat v331;
  CGFloat v332;
  char v333;
  uint64_t v334;
  char v335;
  uint64_t v336;
  void *v337;
  char v338;
  uint64_t v339;
  void *v340;
  char v341;
  CGPoint v342;
  CGSize v343;
  char v344;
  _QWORD *v345;
  _QWORD *v346;
  __n128 v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char v356;
  id v357;
  double v358;
  CGFloat v359;
  double v360;
  CGFloat v361;
  double v362;
  CGFloat v363;
  double v364;
  CGFloat v365;
  uint64_t v366;
  _QWORD *v367;
  CGFloat v368;
  CGFloat v369;
  CGFloat v370;
  CGFloat v371;
  char v372;
  uint64_t v373;
  char *v374;
  __int128 *v375;
  char *v376;
  char v377;
  char v378;
  id v379;
  uint64_t v380;
  _QWORD *v381;
  CGFloat v382;
  CGFloat v383;
  CGFloat v384;
  CGFloat v385;
  char v386;
  uint64_t v387;
  __int128 *v388;
  __int128 *v389;
  char *v390;
  char v391;
  char v392;
  uint64_t v393;
  void *v394;
  uint64_t v395;
  char v396;
  uint64_t v397;
  char *v398;
  uint64_t (*v399)(void);
  id v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  id v407;
  int v408;
  id v409;
  char *v410;
  id v411;
  void *v412;
  void *v413;
  _QWORD *v414;
  __n128 v415;
  __n128 v416;
  void *v417;
  uint64_t v418;
  void *v419;
  uint64_t v420;
  id v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  void *v434;
  char v435;
  char v436;
  id v437;
  char *v438;
  char *v439;
  char v440;
  void *v441;
  uint64_t (*v442)(void);
  int v443;
  id v444;
  char *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  char v453;
  uint64_t v454;
  void *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  char v461;
  double v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  char v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  char v479;
  uint64_t v480;
  void *v481;
  id v482;
  id v483;
  id v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  char v492;
  void *v493;
  id v494;
  id v495;
  uint64_t v496;
  char v497;
  id v498;
  id v499;
  double v500;
  double v501;
  double v502;
  double v503;
  double v504;
  double v505;
  double v506;
  double v507;
  id v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  char v516;
  char v517;
  char v518;
  char *v519;
  void *v520;
  uint64_t v521;
  unint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t (*v526)(void);
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  void *v534;
  uint64_t v535;
  id v536;
  _QWORD *v537;
  _QWORD *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  char v546;
  uint64_t v547;
  void *v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  char v553;
  char v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  NSString v558;
  id v559;
  id v560;
  _QWORD *v561;
  uint64_t v562;
  id v563;
  void *v564;
  void *v565;
  _QWORD *v566;
  uint64_t v567;
  id v568;
  double v569;
  double v570;
  double v571;
  double v572;
  double v573;
  double v574;
  double v575;
  double v576;
  char *v577;
  unint64_t v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unint64_t v582;
  uint64_t v583;
  unint64_t v584;
  unint64_t v585;
  void (*v586)(char *, char *, _QWORD);
  uint64_t v587;
  id v588;
  void *v589;
  _QWORD *v590;
  void *v591;
  _QWORD *v592;
  __n128 v593;
  uint64_t v594;
  id v595;
  char *v596;
  unint64_t v597;
  uint64_t v598;
  unint64_t v599;
  uint64_t v600;
  char *v601;
  char *v602;
  __int128 v603;
  __int128 v604;
  uint64_t v605;
  __int128 v606;
  id v607;
  __int128 v608;
  CGPoint aBlock;
  CGSize v610;
  uint64_t (*v611)();
  uint64_t v612;
  char v613;
  uint64_t v614;
  uint64_t v615;
  char v616;
  char v617;
  char v618;
  __int128 v619;
  __int128 v620;
  char v621;
  uint64_t v622;
  uint64_t v623;
  Swift::String v624;
  CGRect v625;
  CGRect v626;
  CGRect v627;
  CGRect v628;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v1);
  v600 = (uint64_t)&v595 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v604 = type metadata accessor for Date(0);
  *(_QWORD *)&v603 = *(_QWORD *)(v604 - 8);
  v3 = __chkstk_darwin(v604);
  v5 = (char *)&v595 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v595 - v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v9 = __chkstk_darwin(v8);
  v598 = (uint64_t)&v595 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v595 - v11;
  v13 = (uint64_t (*)(void))type metadata accessor for DispatchWorkItemFlags(0);
  *(_QWORD *)&v606 = *((_QWORD *)v13 - 1);
  __chkstk_darwin(v13);
  v15 = (char *)&v595 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v605 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v595 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for URL(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v595 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = objc_msgSend(v0, "subviews");
  v23 = type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for UIView, UIView_ptr);
  v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);

  v602 = v7;
  v601 = v5;
  v599 = (unint64_t)v12;
  *(_QWORD *)&v608 = v13;
  if ((unint64_t)v24 >> 62)
  {
    if (v24 < 0)
      v29 = v24;
    else
      v29 = v24 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v24);
    v25 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(v24);
    if (!v25)
      goto LABEL_13;
  }
  else
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v25)
      goto LABEL_13;
  }
  if (v25 < 1)
  {
    __break(1u);
LABEL_89:
    v191 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeContactPhoto);
    v193 = v192;
    v195 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v196 = v194;
    if (v191 == v195 && v193 == v194)
    {
      v197 = swift_bridgeObjectRelease_n(v193, 2);
      goto LABEL_100;
    }
    v199 = _stringCompareWithSmolCheck(_:_:expecting:)(v191, v193, v195, v194, 0);
    swift_bridgeObjectRelease(v193);
    swift_bridgeObjectRelease(v196);
    if ((v199 & 1) != 0)
    {
LABEL_100:
      v200 = v7;
      v201 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 536))(v197);
      if (v201)
      {
        v202 = (void *)v201;
        v203 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 824))();
        if (v204)
        {
          v205 = v203;
          v206 = v204;
          v207 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 872))();
          if (!v208)
          {

            v212 = v206;
            goto LABEL_127;
          }
          v209 = v207;
          v210 = v208;
          v211 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 1328))();
          if (v211 == 11)
          {

            swift_bridgeObjectRelease(v206);
            v212 = v210;
LABEL_127:
            swift_bridgeObjectRelease(v212);
            goto LABEL_128;
          }
          v257 = v211;
          objc_allocWithZone((Class)type metadata accessor for MOSuggestionContactAssetView());
          v258 = v202;
          v259 = MOSuggestionContactAssetView.init(image:name:contactFirstName:assignedTileSize:)(v258, v205, v206, v209, v210, v257);
          objc_msgSend(v607, "addSubview:", v259);
          v119 = UIView.fillSuper(margin:)(0.0);

          v120 = v5;
LABEL_52:
          swift_release(v120);
          v121 = v119;
LABEL_268:
          swift_bridgeObjectRelease(v121);
          return;
        }

      }
LABEL_128:
      type metadata accessor for MOSuggestionFallbackAssetView();
      v254 = v607;
      MOSuggestionFallbackAssetView.__allocating_init(with:sizeType:)(0xD000000000000012, 0x80000001001A5F90, *((_BYTE *)v607 + v597));
      v256 = v255;
      objc_msgSend(v254, "addSubview:", v255);
      v149 = UIView.fillSuper(margin:)(0.0);

      goto LABEL_109;
    }
    v596 = v5;
    v234 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypePhoto);
    v236 = v235;
    v595 = v7;
    v238 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v239 = v237;
    if (v234 == v238 && v236 == v237)
    {
      v240 = swift_bridgeObjectRelease_n(v236, 2);
      goto LABEL_122;
    }
    v242 = _stringCompareWithSmolCheck(_:_:expecting:)(v234, v236, v238, v237, 0);
    swift_bridgeObjectRelease(v236);
    swift_bridgeObjectRelease(v239);
    if ((v242 & 1) != 0)
    {
LABEL_122:
      v243 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v596 + 536))(v240);
      if (v243)
      {
        v244 = (void *)v243;
        v245 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v243);
        v246 = v13();
        if (v246)
        {
          v247 = (uint64_t *)v246;
          objc_msgSend(v607, "frame");
          v252 = specialized static MOSuggestionSheetGridManager.getSizeType(for:)(v248, v249, v250, v251);
          v253 = *v247;
          if (v252 == 2)
            (*(void (**)(CGPoint *__return_ptr))(v253 + 1280))(&aBlock);
          else
            (*(void (**)(CGPoint *__return_ptr))(v253 + 1256))(&aBlock);
          v280 = aBlock;
          v281 = v610;
          v282 = (char)v611;
          swift_release(v247);
          if ((v282 & 1) == 0)
          {
            v627.origin.x = 0.0;
            v627.origin.y = 0.0;
            v627.size.width = 0.0;
            v627.size.height = 0.0;
            v625.origin = v280;
            v625.size = v281;
            if (!CGRectEqualToRect(v625, v627))
            {
              v283 = objc_msgSend(v245, "layer");
              objc_msgSend(v283, "setContentsRect:", v280, v281);

            }
          }
        }
        objc_msgSend(v245, "setContentMode:", 2);
        objc_msgSend(v607, "addSubview:", v245);
        v284 = UIView.fillSuper(margin:)(0.0);
        objc_msgSend(v245, "setIsAccessibilityElement:", 1, swift_bridgeObjectRelease(v284).n128_f64[0]);
        v285 = UIAccessibilityTraitImage;
        v286 = v245;
        v287 = (unint64_t)objc_msgSend(v286, "accessibilityTraits");
        if ((v285 & ~v287) != 0)
          v288 = v285;
        else
          v288 = 0;
        objc_msgSend(v286, "setAccessibilityTraits:", v288 | v287);

        objc_msgSend(v286, "setAccessibilityIgnoresInvertColors:", 1);
        v289 = (void *)objc_opt_self(NSBundle);
        v290 = v286;
        v291 = objc_msgSend(v289, "mainBundle");
        v624._countAndFlagsBits = 0xD00000000000002ALL;
        v624._object = (void *)0x80000001001A81A0;
        v292._countAndFlagsBits = 0x7361206F746F6850;
        v292._object = (void *)0xEB00000000746573;
        v293._countAndFlagsBits = 0;
        v293._object = (void *)0xE000000000000000;
        object = NSLocalizedString(_:tableName:bundle:value:comment:)(v292, (Swift::String_optional)0, (NSBundle)v291, v293, v624)._object;

        v295 = String._bridgeToObjectiveC()();
        objc_msgSend(v290, "setAccessibilityLabel:", v295, swift_bridgeObjectRelease(object).n128_f64[0]);

LABEL_145:
        goto LABEL_146;
      }
LABEL_152:
      type metadata accessor for MOSuggestionFallbackAssetView();
      v300 = v607;
      v301 = *((_BYTE *)v607 + v597);
      v302 = 1953458288;
LABEL_153:
      v303 = v302 & 0xFFFF0000FFFFFFFFLL | 0x6F00000000;
      v304 = 0xE500000000000000;
LABEL_154:
      MOSuggestionFallbackAssetView.__allocating_init(with:sizeType:)(v303, v304, v301);
      v306 = v305;
      objc_msgSend(v300, "addSubview:", v305);
      v149 = UIView.fillSuper(margin:)(0.0);
      goto LABEL_155;
    }
    v273 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeLivePhoto);
    v275 = v274;
    v277 = static String._unconditionallyBridgeFromObjectiveC(_:)(v595);
    v278 = v276;
    if (v273 == v277 && v275 == v276)
    {
      v279 = swift_bridgeObjectRelease_n(v275, 2);
      goto LABEL_149;
    }
    v296 = _stringCompareWithSmolCheck(_:_:expecting:)(v273, v275, v277, v276, 0);
    swift_bridgeObjectRelease(v275);
    swift_bridgeObjectRelease(v278);
    if ((v296 & 1) != 0)
    {
LABEL_149:
      v297 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v596 + 920))(v279);
      if (v297)
      {
        v298 = (void *)v297;
        v299 = (*(uint64_t (**)(void))(*(_QWORD *)v596 + 1328))();
        if (v299 != 11)
        {
          v314 = v299;
          v315 = v298;
          v316 = objc_msgSend(v607, "frame");
          v318 = v317;
          v320 = v319;
          v322 = v321;
          v324 = v323;
          v325 = (*(uint64_t (**)(id))(*(_QWORD *)v596 + 1232))(v316);
          v326 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionLivePhotoView());
          v295 = MOSuggestionLivePhotoView.init(livePhoto:frame:shouldAutoPlay:size:)(v315, v325 & 1, v314, v318, v320, v322, v324);
          v327 = v13();
          if (v327)
          {
            v328 = (uint64_t *)v327;
            objc_msgSend(v607, "frame");
            v333 = specialized static MOSuggestionSheetGridManager.getSizeType(for:)(v329, v330, v331, v332);
            v334 = *v328;
            if (v333 == 2)
              (*(void (**)(CGPoint *__return_ptr))(v334 + 1280))(&aBlock);
            else
              (*(void (**)(CGPoint *__return_ptr))(v334 + 1256))(&aBlock);
            v342 = aBlock;
            v343 = v610;
            v344 = (char)v611;
            swift_release(v328);
            if ((v344 & 1) == 0)
            {
              v628.origin.x = 0.0;
              v628.origin.y = 0.0;
              v628.size.width = 0.0;
              v628.size.height = 0.0;
              v626.origin = v342;
              v626.size = v343;
              if (!CGRectEqualToRect(v626, v628))
                (*(void (**)(double, double, double, double))((swift_isaMask & *v295) + 0x88))(v342.x, v342.y, v343.width, v343.height);
            }
          }
          v345 = v607;
          objc_msgSend(v607, "addSubview:", v295);
          v346 = UIView.fillSuper(margin:)(0.0);
          v347 = swift_bridgeObjectRelease(v346);
          v348 = (*(uint64_t (**)(__n128))((swift_isaMask & *v345) + 0x80))(v347);
          (*(void (**)(uint64_t))((swift_isaMask & *v295) + 0x70))(v348);

          goto LABEL_145;
        }

      }
      goto LABEL_152;
    }
    v307 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeVideo);
    v309 = v308;
    v311 = static String._unconditionallyBridgeFromObjectiveC(_:)(v595);
    v312 = v310;
    if (v307 == v311 && v309 == v310)
    {
      v313 = swift_bridgeObjectRelease_n(v309, 2);
LABEL_164:
      v336 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v596 + 944))(v313);
      if (v336)
      {
        v337 = (void *)v336;
        v338 = (*(uint64_t (**)(void))(*(_QWORD *)v596 + 1328))();
        if (v338 != 11)
        {
          v356 = v338;
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v337);
          v357 = objc_msgSend(v607, "frame");
          v359 = v358;
          v361 = v360;
          v363 = v362;
          v365 = v364;
          v366 = ((uint64_t (*)(id))v13)(v357);
          if (v366)
          {
            v367 = (_QWORD *)v366;
            objc_msgSend(v607, "frame");
            v372 = specialized static MOSuggestionSheetGridManager.getSizeType(for:)(v368, v369, v370, v371);
            v373 = 1256;
            if (v372 == 2)
            {
              v373 = 1280;
              v374 = &v613;
            }
            else
            {
              v374 = &v616;
            }
            if (v372 == 2)
              v375 = (__int128 *)&v614;
            else
              v375 = (__int128 *)&v617;
            if (v372 == 2)
              v376 = (char *)&v615;
            else
              v376 = &v618;
            (*(void (**)(void))(*v367 + v373))();
            v604 = *(_OWORD *)v374;
            v603 = *v375;
            v377 = *v376;
            swift_release(v367);
          }
          else
          {
            v604 = 0u;
            v377 = 1;
            v603 = 0u;
          }
          v619 = v604;
          v620 = v603;
          v621 = v377 & 1;
          v411 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionSheetVideoPlaybackView());
          MOSuggestionSheetVideoPlaybackView.init(url:frame:assignedTileSize:cropRect:)((uint64_t)v21, v356, (uint64_t)&v619, v359, v361, v363, v365);
          v413 = v412;
          objc_msgSend(v607, "addSubview:", v412);
          v414 = UIView.fillSuper(margin:)(0.0);
          v415 = swift_bridgeObjectRelease(v414);
          if (((*(uint64_t (**)(__n128))(*(_QWORD *)v596 + 1232))(v415) & 1) != 0)
          {
            type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue, OS_dispatch_queue_ptr);
            v417 = (void *)static OS_dispatch_queue.main.getter(v416);
            v418 = swift_allocObject(&unk_1001E5D30, 24, 7);
            *(_QWORD *)(v418 + 16) = v413;
            v611 = partial apply for closure #1 in MOSuggestionSheetAssetView.initAssetView();
            v612 = v418;
            *(_QWORD *)&aBlock.x = _NSConcreteStackBlock;
            *(_QWORD *)&aBlock.y = 1107296256;
            *(_QWORD *)&v610.width = thunk for @escaping @callee_guaranteed () -> ();
            *(_QWORD *)&v610.height = &block_descriptor_5;
            v419 = _Block_copy(&aBlock);
            v420 = v612;
            v421 = v413;
            swift_release(v420);
            static DispatchQoS.unspecified.getter(v422);
            *(_QWORD *)&aBlock.x = _swiftEmptyArrayStorage;
            v423 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
            v424 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
            v425 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
            v426 = v608;
            dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v424, v425, v608, v423);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v15, v419);
            swift_release(v596);
            _Block_release(v419);

            (*(void (**)(char *, uint64_t))(v606 + 8))(v15, v426);
            (*(void (**)(char *, uint64_t))(v605 + 8))(v18, v16);
          }
          else
          {

            swift_release(v596);
          }
          return;
        }

      }
      v339 = (*(uint64_t (**)(void))(*(_QWORD *)v596 + 536))();
      if (!v339)
        goto LABEL_170;
      v340 = (void *)v339;
      v341 = (*(uint64_t (**)(void))(*(_QWORD *)v596 + 1328))();
      if (v341 == 11)
      {

LABEL_170:
        type metadata accessor for MOSuggestionFallbackAssetView();
        v300 = v607;
        v301 = *((_BYTE *)v607 + v597);
        v302 = 1701079414;
        goto LABEL_153;
      }
      v378 = v341;
      v379 = v340;
      v380 = v13();
      if (v380)
      {
        v381 = (_QWORD *)v380;
        objc_msgSend(v607, "frame");
        v386 = specialized static MOSuggestionSheetGridManager.getSizeType(for:)(v382, v383, v384, v385);
        v387 = 1256;
        if (v386 == 2)
        {
          v387 = 1280;
          v388 = (__int128 *)&v616;
        }
        else
        {
          v388 = &v619;
        }
        if (v386 == 2)
          v389 = (__int128 *)&v617;
        else
          v389 = &v620;
        if (v386 == 2)
          v390 = &v618;
        else
          v390 = &v621;
        (*(void (**)(void))(*v381 + v387))();
        v608 = *v388;
        v606 = *v389;
        v391 = *v390;
        swift_release(v381);
      }
      else
      {
        v608 = 0u;
        v391 = 1;
        v606 = 0u;
      }
      aBlock = (CGPoint)v608;
      v610 = (CGSize)v606;
      LOBYTE(v611) = v391 & 1;
      v5 = v596;
      v434 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v596 + 1160))();
      v436 = v435 & 1;
      v437 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionSheetVideoPlaybackView.ThumbnailView());
      MOSuggestionSheetVideoPlaybackView.ThumbnailView.init(thumbnail:assignedTileSize:cropRect:duration:)(v379, v378, (uint64_t)&aBlock, v434, v436);
      v439 = v438;
      goto LABEL_215;
    }
    v335 = _stringCompareWithSmolCheck(_:_:expecting:)(v307, v309, v311, v310, 0);
    swift_bridgeObjectRelease(v309);
    swift_bridgeObjectRelease(v312);
    if ((v335 & 1) != 0)
      goto LABEL_164;
    v349 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeMultiPinMap);
    v351 = v350;
    v353 = static String._unconditionallyBridgeFromObjectiveC(_:)(v595);
    v354 = v352;
    if (v349 == v353 && v351 == v352)
    {
      v355 = swift_bridgeObjectRelease_n(v351, 2);
      goto LABEL_202;
    }
    v392 = _stringCompareWithSmolCheck(_:_:expecting:)(v349, v351, v353, v352, 0);
    swift_bridgeObjectRelease(v351);
    swift_bridgeObjectRelease(v354);
    if ((v392 & 1) != 0)
    {
LABEL_202:
      v393 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v596 + 536))(v355);
      if (v393)
      {
        v394 = (void *)v393;
        v395 = (*(uint64_t (**)(void))(*(_QWORD *)v596 + 1400))();
        if ((v396 & 1) == 0)
        {
          v397 = v395;
          v398 = v596;
          v399 = *(uint64_t (**)(void))(*(_QWORD *)v596 + 1352);
          v400 = v394;
          v401 = v399();
          v403 = v402;
          v404 = (*(uint64_t (**)(void))(*(_QWORD *)v398 + 1376))();
          v406 = v405;
          v407 = v607;
          LODWORD(v397) = MOSuggestionSheetAssetView.sizedBasedMapStyle(numLocations:)(v397);
          v408 = (*(uint64_t (**)(void))(*(_QWORD *)v398 + 1328))();
          v409 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionMapSnapshotView());
          v410 = MOSuggestionMapSnapshotView.init(baseMapImage:prominentField:secondaryField:style:assignedTileSize:)(v400, v401, v403, v404, v406, v397, v408);
          objc_msgSend(v410, "setContentMode:", 2);
          objc_msgSend(v407, "addSubview:", v410);
          v119 = UIView.fillSuper(margin:)(0.0);

          v120 = v398;
          goto LABEL_52;
        }

      }
      goto LABEL_217;
    }
    v427 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeGenericMap);
    v429 = v428;
    v431 = static String._unconditionallyBridgeFromObjectiveC(_:)(v595);
    v432 = v430;
    if (v427 == v431 && v429 == v430)
    {
      v433 = swift_bridgeObjectRelease_n(v429, 2);
LABEL_219:
      v441 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v596 + 536))(v433);
      if (!v441)
      {
LABEL_217:
        type metadata accessor for MOSuggestionFallbackAssetView();
        v300 = v607;
        v301 = *((_BYTE *)v607 + v597);
        v304 = 0x80000001001A5F60;
        v303 = 0xD000000000000015;
        goto LABEL_154;
      }
      v5 = v596;
      v442 = *(uint64_t (**)(void))(*(_QWORD *)v596 + 1328);
      v379 = v441;
      v443 = v442();
      v444 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionMapSnapshotView());
      v445 = MOSuggestionMapSnapshotView.init(baseMapImage:prominentField:secondaryField:style:assignedTileSize:)(v379, 0, 0, 0, 0, 5, v443);
LABEL_221:
      v439 = v445;
      objc_msgSend(v445, "setContentMode:", 2);
LABEL_215:
      objc_msgSend(v607, "addSubview:", v439);
      v119 = UIView.fillSuper(margin:)(0.0);

      goto LABEL_51;
    }
    v440 = _stringCompareWithSmolCheck(_:_:expecting:)(v427, v429, v431, v430, 0);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v432);
    if ((v440 & 1) != 0)
      goto LABEL_219;
    v446 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeRoutePreview);
    v448 = v447;
    v450 = static String._unconditionallyBridgeFromObjectiveC(_:)(v595);
    v451 = v449;
    if (v446 == v450 && v448 == v449)
    {
      v452 = swift_bridgeObjectRelease_n(v448, 2);
LABEL_226:
      v454 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v596 + 584))(v452);
      if (!v454)
        goto LABEL_146;
      v455 = (void *)v454;
      v456 = (*(uint64_t (**)(void))(*(_QWORD *)v596 + 1136))();
      if (!v457)
      {

        goto LABEL_146;
      }
      v458 = v456;
      v459 = v457;
      *(double *)&v460 = COERCE_DOUBLE((*(uint64_t (**)(void))(*(_QWORD *)v596 + 1160))());
      if ((v461 & 1) != 0
        || (v462 = *(double *)&v460, v463 = (*(uint64_t (**)(void))(*(_QWORD *)v596 + 1184))(), !v464))
      {

        swift_bridgeObjectRelease(v459);
        goto LABEL_146;
      }
      v465 = v463;
      v466 = v464;
      v467 = (*(uint64_t (**)(void))(*(_QWORD *)v596 + 896))();
      if (!v468)
      {

        swift_bridgeObjectRelease(v459);
        swift_bridgeObjectRelease(v466);
        goto LABEL_146;
      }
      v469 = v467;
      v470 = v468;
      v471 = (*(uint64_t (**)(void))(*(_QWORD *)v596 + 1328))();
      if (v471 == 11)
      {

        swift_bridgeObjectRelease(v459);
        swift_bridgeObjectRelease(v466);
        swift_bridgeObjectRelease(v470);
        goto LABEL_146;
      }
      v497 = v471;
      v498 = v455;
      v499 = v607;
      objc_msgSend(v607, "frame");
      v501 = v500;
      v503 = v502;
      v505 = v504;
      v507 = v506;
      v508 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionActivityRouteAssetView());
      v306 = MOSuggestionActivityRouteAssetView.init(routeMap:name:assignedTileSize:frame:calories:duration:distance:)(v498, v469, v470, v497, v458, v459, v465, v466, v501, v503, v505, v507, v462);
      objc_msgSend(v499, "addSubview:", v306);
      v149 = UIView.fillSuper(margin:)(0.0);

LABEL_155:
      goto LABEL_156;
    }
    v453 = _stringCompareWithSmolCheck(_:_:expecting:)(v446, v448, v450, v449, 0);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v451);
    if ((v453 & 1) != 0)
      goto LABEL_226;
    v472 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeLinkPreview);
    v474 = v473;
    v476 = static String._unconditionallyBridgeFromObjectiveC(_:)(v595);
    v477 = v475;
    if (v472 == v476 && v474 == v475)
    {
      v478 = swift_bridgeObjectRelease_n(v474, 2);
      goto LABEL_239;
    }
    v479 = _stringCompareWithSmolCheck(_:_:expecting:)(v472, v474, v476, v475, 0);
    swift_bridgeObjectRelease(v474);
    swift_bridgeObjectRelease(v477);
    if ((v479 & 1) != 0)
    {
LABEL_239:
      v480 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v596 + 608))(v478);
      if (v480)
      {
        v481 = (void *)v480;
        v482 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionLinkShareView());
        v483 = v481;
        v484 = MOSuggestionLinkShareView.init(linkMetadata:)(v483);
        objc_msgSend(v607, "addSubview:", v484);
        v119 = UIView.fillSuper(margin:)(0.0);

        v120 = v596;
        goto LABEL_52;
      }
LABEL_146:

      goto LABEL_147;
    }
    v485 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeReflectionPrompt);
    v487 = v486;
    v489 = static String._unconditionallyBridgeFromObjectiveC(_:)(v595);
    v490 = v488;
    if (v485 == v489 && v487 == v488)
    {
      v491 = swift_bridgeObjectRelease_n(v487, 2);
LABEL_246:
      v493 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v596 + 680))(v491);
      if (!v493)
        goto LABEL_146;
      v379 = v493;
      v494 = objc_msgSend(v493, "reflectionType");
      v495 = objc_msgSend(v379, "reflectionPrompts");
      v496 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v495, &type metadata for String);

      objc_allocWithZone((Class)type metadata accessor for ReflectionPromptView());
      v5 = v596;
      swift_retain(v596);
      v445 = ReflectionPromptView.init(type:prompts:updateReflectionIndex:)((uint64_t)v494, v496, (uint64_t)partial apply for implicit closure #2 in implicit closure #1 in MOSuggestionSheetAssetView.initAssetView(), (uint64_t)v5);
      goto LABEL_221;
    }
    v492 = _stringCompareWithSmolCheck(_:_:expecting:)(v485, v487, v489, v488, 0);
    swift_bridgeObjectRelease(v487);
    swift_bridgeObjectRelease(v490);
    if ((v492 & 1) != 0)
      goto LABEL_246;
    v509 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeMediaCoverArt);
    v511 = v510;
    v513 = static String._unconditionallyBridgeFromObjectiveC(_:)(v595);
    v514 = v512;
    if (v509 == v513 && v511 == v512)
    {
      v515 = swift_bridgeObjectRelease_n(v511, 2);
      goto LABEL_253;
    }
    v516 = _stringCompareWithSmolCheck(_:_:expecting:)(v509, v511, v513, v512, 0);
    swift_bridgeObjectRelease(v511);
    swift_bridgeObjectRelease(v514);
    if ((v516 & 1) != 0)
    {
LABEL_253:
      v517 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v596 + 1328))(v515);
      if (v517 != 11)
      {
        v518 = v517;
        v519 = v596;
        v520 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v596 + 536))();
        *(_QWORD *)&v603 = v520;
        *(_QWORD *)&v606 = (*(uint64_t (**)(void))(*(_QWORD *)v519 + 728))();
        v605 = v521;
        v522 = v599;
        v523 = (*(uint64_t (**)(void))(*(_QWORD *)v519 + 752))();
        *(_QWORD *)&v604 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v519 + 1712))(v523);
        v524 = v522;
        v525 = v598;
        outlined init with copy of URL?(v524, v598);
        v526 = *(uint64_t (**)(void))(*(_QWORD *)v519 + 776);
        *(_QWORD *)&v608 = v520;
        v527 = v526();
        v528 = (*(uint64_t (**)(void))(*(_QWORD *)v519 + 1040))();
        v530 = v529;
        v531 = (*(uint64_t (**)(void))(*(_QWORD *)v519 + 1064))();
        v533 = v532;
        v534 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v519 + 1688))();
        v535 = (*(uint64_t (**)(void))(*(_QWORD *)v519 + 1736))();
        v536 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionSheetMediaAssetView(0));
        v537 = specialized MOSuggestionSheetMediaAssetView.init(mediaAssetID:mediaPreviewURL:image:mediaType:sizeType:title:subtitle:assignedTileSize:bgColor:associatedColors:colorVariant:)(v606, v605, v525, (void *)v603, v527, v528, v530, v531, v533, v518, v534, v604, v535);
        objc_msgSend(v607, "addSubview:", v537);
        v538 = UIView.fillSuper(margin:)(0.0);

        swift_release(v519);
        swift_bridgeObjectRelease(v538);
        outlined destroy of Any?(v599, &demangling cache variable for type metadata for URL?);
        return;
      }
      goto LABEL_146;
    }
    v539 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeStateOfMindAsset);
    v541 = v540;
    v543 = static String._unconditionallyBridgeFromObjectiveC(_:)(v595);
    v544 = v542;
    if (v539 == v543 && v541 == v542)
    {
      v545 = swift_bridgeObjectRelease_n(v541, 2);
      goto LABEL_259;
    }
    v546 = _stringCompareWithSmolCheck(_:_:expecting:)(v539, v541, v543, v542, 0);
    swift_bridgeObjectRelease(v541);
    swift_bridgeObjectRelease(v544);
    if ((v546 & 1) != 0)
    {
LABEL_259:
      v547 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v596 + 536))(v545);
      if (!v547)
        goto LABEL_273;
      v548 = (void *)v547;
      v549 = (*(uint64_t (**)(void))(*(_QWORD *)v596 + 1616))();
      if (!v549)
      {

        goto LABEL_273;
      }
      v550 = v549;
      v551 = (*(uint64_t (**)(void))(*(_QWORD *)v596 + 1640))();
      if (v551)
      {
        v552 = v551;
        v553 = (*(uint64_t (**)(void))(*(_QWORD *)v596 + 1328))();
        if (v553 != 11)
        {
          v554 = v553;
          *(_QWORD *)&v608 = (*(uint64_t (**)(void))(*(_QWORD *)v596 + 1472))();
          if (v555)
          {
            v556 = v555;
            v557 = v600;
            (*(void (**)(void))(*(_QWORD *)v596 + 1664))();
            if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v603 + 48))(v557, 1, v604) != 1)
            {
              v567 = v603;
              (*(void (**)(char *, uint64_t, _QWORD))(v603 + 32))(v602, v600, v604);
              *(_QWORD *)&v606 = v548;
              v568 = objc_msgSend(v607, "frame");
              v570 = v569;
              v572 = v571;
              v574 = v573;
              v576 = v575;
              v577 = v596;
              v605 = (*(uint64_t (**)(id))(*(_QWORD *)v596 + 1496))(v568);
              v600 = (*(uint64_t (**)(void))(*(_QWORD *)v577 + 1520))();
              v599 = v578;
              v598 = (*(uint64_t (**)(void))(*(_QWORD *)v577 + 1544))();
              v597 = v579;
              v580 = (*(uint64_t (**)(void))(*(_QWORD *)v577 + 1568))();
              v582 = v581;
              v583 = (*(uint64_t (**)(void))(*(_QWORD *)v577 + 1592))();
              v585 = v584;
              v586 = *(void (**)(char *, char *, _QWORD))(v567 + 16);
              v587 = (uint64_t)v601;
              v586(v601, v602, v604);
              v588 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionStateOfMindAssetView());
              v594 = v550;
              v589 = (void *)v606;
              v590 = specialized MOSuggestionStateOfMindAssetView.init(image:assignedTileSize:frame:valenceClassificationAndReflectiveInterval:reflectiveInterval:labels:labelsShortened:domains:domainsShortened:associatedColorsLight:associatedColorsDark:startDate:)(v606, v554, v608, v556, v605, v600, v599, v598, v570, v572, v574, v576, v597, v580, v582, v583, v585, v594, v552,
                       v587);

              v591 = v589;
              objc_msgSend(v607, "addSubview:", v590);
              v592 = UIView.fillSuper(margin:)(0.0);

              swift_release(v577);
              v593 = swift_bridgeObjectRelease(v592);
              (*(void (**)(char *, _QWORD, __n128))(v603 + 8))(v602, v604, v593);
              return;
            }
            swift_bridgeObjectRelease(v556);
            swift_bridgeObjectRelease(v552);
            swift_bridgeObjectRelease(v550);

            outlined destroy of Any?(v600, (uint64_t *)&demangling cache variable for type metadata for Date?);
LABEL_273:
            type metadata accessor for MOSuggestionFallbackAssetView();
            v563 = v607;
            MOSuggestionFallbackAssetView.__allocating_init(with:sizeType:)(0xD000000000000011, 0x80000001001A5FB0, *((_BYTE *)v607 + v597));
            v565 = v564;
            objc_msgSend(v563, "addSubview:", v564);
            v566 = UIView.fillSuper(margin:)(0.0);

            swift_release(v596);
            swift_bridgeObjectRelease(v566);
            return;
          }
        }

        swift_bridgeObjectRelease(v550);
        v562 = v552;
      }
      else
      {

        v562 = v550;
      }
      swift_bridgeObjectRelease(v562);
      goto LABEL_273;
    }

    v5 = v596;
    v31 = v607;
LABEL_267:
    v558 = String._bridgeToObjectiveC()();
    v559 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v558);

    v560 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v559);
    objc_msgSend(v31, "addSubview:", v560);
    v561 = UIView.fillSuper(margin:)(0.0);

    swift_release(v5);
    v121 = v561;
    goto LABEL_268;
  }
  for (i = 0; i != v25; ++i)
  {
    if ((v24 & 0xC000000000000001) != 0)
      v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v24);
    else
      v27 = *(id *)(v24 + 8 * i + 32);
    v28 = v27;
    objc_msgSend(v27, "removeFromSuperview");

  }
LABEL_13:
  *(_QWORD *)&v30 = swift_bridgeObjectRelease(v24).n128_u64[0];
  v31 = v607;
  objc_msgSend(v607, "frame", v30);
  v36 = specialized static MOSuggestionSheetGridManager.getSizeType(for:)(v32, v33, v34, v35);
  v37 = OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_currentSizeType;
  *((_BYTE *)v31 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_currentSizeType) = v36;
  v13 = *(uint64_t (**)(void))((swift_isaMask & *v31) + 0x98);
  v38 = v13();
  if (!v38)
    return;
  v5 = (char *)v38;
  if (((*(uint64_t (**)(void))(*(_QWORD *)v38 + 1424))() & 1) == 0)
  {
    v55 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 632))();
    if (!v55)
      goto LABEL_267;
    v7 = (char *)v55;
    v597 = v37;
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeActivityRings);
    v58 = v57;
    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    if (v56 == v59 && v58 == v60)
    {
      v64 = swift_bridgeObjectRelease_n(v58, 2);
    }
    else
    {
      v62 = v60;
      v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v58, v59, v60, 0);
      swift_bridgeObjectRelease(v58);
      v65 = swift_bridgeObjectRelease(v62);
      if ((v63 & 1) == 0)
      {
        v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeAppIcon);
        v68 = v67;
        v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
        if (v66 == v69 && v68 == v70)
        {
          v74 = swift_bridgeObjectRelease_n(v68, 2);
        }
        else
        {
          v72 = v70;
          v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v68, v69, v70, 0);
          swift_bridgeObjectRelease(v68);
          v75 = swift_bridgeObjectRelease(v72);
          if ((v73 & 1) == 0)
          {
            v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeMotionActivity);
            v78 = v77;
            v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
            if (v76 == v79 && v78 == v80)
            {
              v84 = swift_bridgeObjectRelease_n(v78, 2);
            }
            else
            {
              v82 = v80;
              v83 = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v78, v79, v80, 0);
              swift_bridgeObjectRelease(v78);
              v85 = swift_bridgeObjectRelease(v82);
              if ((v83 & 1) == 0)
              {
                v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeSystemImage);
                v88 = v87;
                v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
                if (v86 == v89 && v88 == v90)
                {
                  v94 = swift_bridgeObjectRelease_n(v88, 2);
                }
                else
                {
                  v92 = v90;
                  v93 = _stringCompareWithSmolCheck(_:_:expecting:)(v86, v88, v89, v90, 0);
                  swift_bridgeObjectRelease(v88);
                  v95 = swift_bridgeObjectRelease(v92);
                  if ((v93 & 1) == 0)
                  {
                    v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeWorkoutGroup);
                    v98 = v97;
                    v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
                    v101 = v99;
                    if (v96 == v100 && v98 == v99)
                    {
                      v102 = swift_bridgeObjectRelease_n(v98, 2);
                      goto LABEL_80;
                    }
                    v170 = _stringCompareWithSmolCheck(_:_:expecting:)(v96, v98, v100, v99, 0);
                    swift_bridgeObjectRelease(v98);
                    swift_bridgeObjectRelease(v101);
                    if ((v170 & 1) != 0)
                    {
LABEL_80:
                      v171 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1448))(v102);
                      if (v171)
                      {
                        v172 = (void *)v171;
                        v173 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 1136))();
                        if (v174)
                        {
                          v175 = v173;
                          v176 = v174;
                          v177 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 1160))();
                          if ((v178 & 1) == 0)
                          {
                            v179 = *(double *)&v177;
                            v161 = v7;
                            v180 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 1184))();
                            if (v181)
                            {
                              v182 = v180;
                              v183 = v181;
                              *(_QWORD *)&v608 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 1208))();
                              if (v184)
                              {
                                v185 = v184;
                                v186 = *(uint64_t (**)(void))(*(_QWORD *)v5 + 896);
                                v596 = v5;
                                *(_QWORD *)&v606 = v186();
                                if (!v187)
                                {

                                  swift_bridgeObjectRelease(v176);
                                  swift_bridgeObjectRelease(v183);
                                  v190 = v185;
                                  goto LABEL_131;
                                }
                                v188 = v187;
                                v189 = (*(uint64_t (**)(void))(*(_QWORD *)v596 + 1328))();
                                if (v189 == 11)
                                {

                                  swift_bridgeObjectRelease(v176);
                                  swift_bridgeObjectRelease(v183);
                                  swift_bridgeObjectRelease(v185);
                                  v190 = v188;
LABEL_131:
                                  swift_bridgeObjectRelease(v190);

LABEL_147:
                                  v198 = v596;
                                  goto LABEL_97;
                                }
                                v260 = v189;
                                v261 = v179;
                                v262 = v172;
                                v263 = v607;
                                objc_msgSend(v607, "frame");
                                v265 = v264;
                                v267 = v266;
                                v269 = v268;
                                v271 = v270;
                                v272 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionActivityIconAssetView());
                                v233 = MOSuggestionActivityIconAssetView.init(imageView:name:assignedTileSize:frame:calories:duration:distance:averageHeartRate:)(v262, v606, v188, v260, v175, v176, v182, v183, v265, v267, v269, v271, v261, v608, v185);
                                objc_msgSend(v263, "addSubview:", v233);
                                v149 = UIView.fillSuper(margin:)(0.0);

                                goto LABEL_133;
                              }

                              swift_bridgeObjectRelease(v176);
                              v241 = v183;
                            }
                            else
                            {

                              v241 = v176;
                            }
                            swift_bridgeObjectRelease(v241);

LABEL_96:
                            v198 = v5;
LABEL_97:
                            swift_release(v198);
                            return;
                          }

                          swift_bridgeObjectRelease(v176);
                        }
                        else
                        {

                        }
                      }
LABEL_95:

                      goto LABEL_96;
                    }
                    goto LABEL_89;
                  }
                }
                v150 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v5 + 536))(v94, v95);
                v151 = v607;
                v152 = v597;
                if (v150)
                {
                  v153 = (void *)v150;
                  v154 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 1136))();
                  if (v155)
                  {
                    v156 = v154;
                    v157 = v155;
                    v158 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 1160))();
                    if ((v159 & 1) != 0)
                    {

                      swift_bridgeObjectRelease(v157);
                    }
                    else
                    {
                      v160 = *(double *)&v158;
                      v161 = v7;
                      v162 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 1184))();
                      if (v163)
                      {
                        v164 = v162;
                        v165 = v163;
                        *(_QWORD *)&v608 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 1208))();
                        if (v166)
                        {
                          v167 = v166;
                          v605 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 896))();
                          *(_QWORD *)&v606 = v168;
                          if (v168)
                          {
                            LODWORD(v604) = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 1328))();
                            if (v604 != 11)
                            {
                              v596 = v5;
                              v216 = v160;
                              v217 = one-time initialization token for exerciseGreen;
                              v218 = v153;
                              if (v217 != -1)
                                swift_once(&one-time initialization token for exerciseGreen, one-time initialization function for exerciseGreen);
                              v219 = (void *)static MOSuggestionTheme.Colors.exerciseGreen;
                              v220 = objc_msgSend((id)static MOSuggestionTheme.Colors.exerciseGreen, "colorWithAlphaComponent:", 0.18);
                              v221 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionWorkoutIconGlyphView());
                              v222 = MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(v218, v220, v219);
                              v223 = v607;
                              objc_msgSend(v607, "frame");
                              v225 = v224;
                              v227 = v226;
                              v229 = v228;
                              v231 = v230;
                              v232 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionActivityIconAssetView());
                              v233 = MOSuggestionActivityIconAssetView.init(imageView:name:assignedTileSize:frame:calories:duration:distance:averageHeartRate:)(v222, v605, v606, v604, v156, v157, v164, v165, v225, v227, v229, v231, v216, v608, v167);
                              objc_msgSend(v223, "addSubview:", v233);
                              v149 = UIView.fillSuper(margin:)(0.0);

LABEL_133:
LABEL_156:
                              v215 = v596;
                              goto LABEL_110;
                            }

                            swift_bridgeObjectRelease(v157);
                            swift_bridgeObjectRelease(v165);
                            swift_bridgeObjectRelease(v167);
                            v169 = v606;
                          }
                          else
                          {

                            swift_bridgeObjectRelease(v157);
                            swift_bridgeObjectRelease(v165);
                            v169 = v167;
                          }
                        }
                        else
                        {

                          swift_bridgeObjectRelease(v157);
                          v169 = v165;
                        }
                      }
                      else
                      {

                        v169 = v157;
                      }
                      swift_bridgeObjectRelease(v169);
                      v7 = v161;
                    }
                    v151 = v607;
                    v152 = v597;
                  }
                  else
                  {

                  }
                }
                type metadata accessor for MOSuggestionFallbackAssetView();
                MOSuggestionFallbackAssetView.__allocating_init(with:sizeType:)(0x722E657275676966, 0xEA00000000006E75, v151[v152]);
                v214 = v213;
                objc_msgSend(v151, "addSubview:", v213);
                v149 = UIView.fillSuper(margin:)(0.0);

LABEL_109:
                v215 = v5;
LABEL_110:
                swift_release(v215);
                v121 = v149;
                goto LABEL_268;
              }
            }
            v123 = v7;
            v124 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v5 + 1040))(v84, v85);
            if (v125)
            {
              v126 = v124;
              v127 = v125;
              v128 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 1064))();
              if (v129)
              {
                v130 = v128;
                v131 = v129;
                v132 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 1328))();
                if (v132 != 11)
                {
                  v134 = v132;
                  v135 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v5 + 536))();
                  v136 = v607;
                  v137 = objc_msgSend(v607, "frame");
                  v139 = v138;
                  v141 = v140;
                  v143 = v142;
                  v145 = v144;
                  v146 = (void *)(*(uint64_t (**)(id))(*(_QWORD *)v5 + 1448))(v137);
                  v147 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionMotionAssetView());
                  v148 = MOSuggestionMotionAssetView.init(image:title:subtitle:assignedTileSize:frame:snowglobeView:)(v135, v126, v127, v130, v131, v134, v146, v139, v141, v143, v145);
                  objc_msgSend(v136, "addSubview:", v148);
                  v149 = UIView.fillSuper(margin:)(0.0);

                  goto LABEL_109;
                }
                swift_bridgeObjectRelease(v127);
                v133 = v131;
              }
              else
              {
                v133 = v127;
              }
              swift_bridgeObjectRelease(v133);
            }

            goto LABEL_96;
          }
        }
        v122 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v5 + 536))(v74, v75);
        if (!v122)
          goto LABEL_95;
        v107 = (id)v122;
        v117 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v122);
        objc_msgSend(v117, "setContentMode:", 1);
        objc_msgSend(v607, "addSubview:", v117);
LABEL_50:
        v118 = v7;
        v119 = UIView.fillSuper(margin:)(0.0);

LABEL_51:
        v120 = v5;
        goto LABEL_52;
      }
    }
    v104 = (void *)(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v5 + 560))(v64, v65);
    if (!v104)
      goto LABEL_95;
    v105 = v607;
    v106 = *((_BYTE *)v607 + v597);
    v107 = v104;
    objc_msgSend(v105, "frame");
    v109 = v108;
    v111 = v110;
    v113 = v112;
    v115 = v114;
    v116 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionActivityRingsAssetView());
    v117 = MOSuggestionActivityRingsAssetView.init(activitySummary:currentSizeType:frame:)(v107, v106, v109, v111, v113, v115);
    objc_msgSend(v117, "setContentMode:", 1);
    objc_msgSend(v105, "addSubview:", v117);
    goto LABEL_50;
  }
  objc_msgSend(v31, "frame");
  *(_QWORD *)&v608 = objc_msgSend(objc_allocWithZone((Class)UIActivityIndicatorView), "initWithFrame:", v39, v40, v41, v42);
  v43 = objc_msgSend((id)objc_opt_self(UIColor), "darkGrayColor");
  objc_msgSend((id)v608, "setColor:", v43);

  objc_msgSend((id)v608, "startAnimating");
  objc_msgSend(v31, "addSubview:", (_QWORD)v608);
  objc_msgSend((id)v608, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v44 = objc_msgSend((id)v608, "superview");
  if (v44)
  {
    v45 = v44;
    v46 = v5;
    objc_msgSend((id)v608, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v47 = objc_msgSend((id)v608, "centerYAnchor");
    v48 = objc_msgSend(v45, "centerYAnchor");
    v49 = objc_msgSend(v47, "constraintEqualToAnchor:", v48);

    objc_msgSend(v49, "setConstant:", 0.0);
    if (v49)
    {
      v50 = v49;
      objc_msgSend(v50, "setActive:", 1);

    }
    v5 = v46;
  }
  v607 = objc_msgSend((id)v608, "superview");
  if (v607)
  {
    objc_msgSend((id)v608, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v51 = objc_msgSend((id)v608, "centerXAnchor");
    v52 = objc_msgSend(v607, "centerXAnchor");
    v53 = objc_msgSend(v51, "constraintEqualToAnchor:", v52);

    objc_msgSend(v53, "setConstant:", 0.0);
    if (v53)
    {
      v54 = v53;
      objc_msgSend(v54, "setActive:", 1);
      swift_release(v5);

    }
    else
    {
      swift_release(v5);

    }
    v103 = &v622;
  }
  else
  {
    swift_release(v5);
    v103 = &v623;
  }

}

id @nonobjc UIImage.__allocating_init(named:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSString v4;
  id v5;

  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "imageNamed:", v4);

  return v5;
}

Swift::Void __swiftcall MOSuggestionSheetAssetView.prepareForReuse()()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  uint64_t v8;

  (*(void (**)(_QWORD))((swift_isaMask & *v0) + 0xA0))(0);
  v1 = objc_msgSend(v0, "subviews");
  v2 = type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for UIView, UIView_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if (!((unint64_t)v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease(v3);
    return;
  }
  if (v3 < 0)
    v8 = v3;
  else
    v8 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  v4 = _CocoaArrayWrapper.endIndex.getter(v8);
  swift_bridgeObjectRelease(v3);
  if (!v4)
    goto LABEL_13;
LABEL_3:
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
      else
        v6 = *(id *)(v3 + 8 * i + 32);
      v7 = v6;
      objc_msgSend(v6, "removeFromSuperview");

    }
    goto LABEL_13;
  }
  __break(1u);
}

id MOSuggestionSheetAssetView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetAssetView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in MOSuggestionSheetAssetView.initAssetView()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1792))();
}

uint64_t sub_1000532E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in MOSuggestionSheetAssetView.initAssetView()()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))((swift_isaMask & **(_QWORD **)(v0 + 16)) + 0x118))(1);
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_5(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10005335C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x80))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10005339C(_QWORD *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = a1[1];
  v3 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0x88);
  v4 = swift_unknownObjectRetain(*a1);
  return v3(v4, v2);
}

uint64_t sub_1000533EC@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x98))();
  *a2 = result;
  return result;
}

uint64_t sub_10005342C(_QWORD *a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0xA0);
  v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t sub_10005346C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in MOSuggestionSheetAssetView.assetViewModel.didset()
{
  uint64_t v0;

  closure #1 in MOSuggestionSheetAssetView.assetViewModel.didset(v0);
}

uint64_t MOSuggestionSheetHalfMosaicLayout.cachedAttributes.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_cachedAttributes);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_cachedAttributes, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t MOSuggestionSheetHalfMosaicLayout.cachedAttributes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_cachedAttributes);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*MOSuggestionSheetHalfMosaicLayout.cachedAttributes.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_cachedAttributes, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

double MOSuggestionSheetHalfMosaicLayout.contentBounds.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_contentBounds;
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_contentBounds, v3, 0, 0);
  return *(double *)v1;
}

uint64_t MOSuggestionSheetHalfMosaicLayout.contentBounds.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  double *v9;
  uint64_t result;
  _BYTE v11[24];

  v9 = (double *)(v4 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_contentBounds);
  result = swift_beginAccess(v4 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_contentBounds, v11, 1, 0);
  *v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  return result;
}

uint64_t (*MOSuggestionSheetHalfMosaicLayout.contentBounds.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_contentBounds, a1, 33, 0);
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

uint64_t MOSuggestionSheetHalfMosaicLayout.mosaicSegmentDelegate.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_mosaicSegmentDelegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_mosaicSegmentDelegate, v3, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t MOSuggestionSheetHalfMosaicLayout.mosaicSegmentDelegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  v5 = v2 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_mosaicSegmentDelegate;
  swift_beginAccess(v5, v7, 1, 0);
  *(_QWORD *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1);
}

void (*MOSuggestionSheetHalfMosaicLayout.mosaicSegmentDelegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_mosaicSegmentDelegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return MOSuggestionSheetAssetGridView.delegate.modify;
}

Swift::Void __swiftcall MOSuggestionSheetHalfMosaicLayout.prepare()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  id v5;
  void *v6;
  void (*v7)(uint64_t, _UNKNOWN **);
  uint64_t v8;
  void (*v9)(CGRect *, _QWORD, __n128);
  uint64_t *v10;
  uint64_t v11;
  __n128 v12;
  id v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  BOOL v18;
  uint64_t v19;
  CGFloat v20;
  uint64_t v21;
  CGFloat v22;
  uint64_t v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  uint64_t v27;
  uint64_t v28;
  CGFloat width;
  CGFloat height;
  CGFloat x;
  CGFloat v32;
  uint64_t v33;
  CGPoint v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat y;
  CGFloat v39;
  uint64_t v40;
  CGPoint v41;
  CGFloat v42;
  double v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  double v49;
  double v50;
  unint64_t v51;
  unint64_t v52;
  int64_t v53;
  unint64_t v54;
  CGFloat *v55;
  CGFloat v56;
  CGFloat v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  CGFloat v62;
  CGFloat v63;
  CGFloat *v64;
  _QWORD *v65;
  unint64_t v66;
  CGFloat *v67;
  double *v68;
  void *v69;
  double (*v70)(uint64_t);
  double v71;
  double v72;
  double v73;
  double v74;
  char *v75;
  Class isa;
  id v77;
  id v78;
  uint64_t (*v79)(CGRect *, _QWORD);
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  id v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  CGFloat v92;
  CGFloat v93;
  CGFloat v94;
  CGFloat v95;
  CGFloat v96;
  __int128 v97;
  CGPoint v98;
  CGFloat v99;
  CGFloat v100;
  CGPoint origin;
  CGFloat v102;
  CGFloat v103;
  uint64_t v104;
  double v105;
  double v106;
  uint64_t v107;
  CGPoint v108;
  void (*v109)(__n128, __n128, __n128, __n128);
  uint64_t (*v110)(CGRect *);
  char *v111;
  uint64_t v112;
  uint64_t v113;
  CGRect remainder;
  objc_super v115;
  CGRect slice;
  CGRect v117;
  CGRect v118;
  CGRect v119;
  CGRect v120;
  CGRect v121;
  CGRect v122;
  CGRect v123;
  CGRect v124;
  CGRect v125;

  v1 = v0;
  v2 = type metadata accessor for IndexPath(0);
  v112 = *(_QWORD *)(v2 - 8);
  v113 = v2;
  __chkstk_darwin(v2);
  v111 = (char *)&v87 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (objc_class *)type metadata accessor for MOSuggestionSheetHalfMosaicLayout();
  v115.receiver = v0;
  v115.super_class = v4;
  objc_msgSendSuper2(&v115, "prepareLayout");
  v5 = objc_msgSend(v0, "collectionView");
  if (v5)
  {
    v6 = v5;
    v7 = *(void (**)(uint64_t, _UNKNOWN **))((swift_isaMask & *v0) + 0xA0);
    v8 = swift_unknownObjectRetain();
    v7(v8, &protocol witness table for MOSuggestionSheetHalfMosaicLayout);
    v110 = *(uint64_t (**)(CGRect *))((swift_isaMask & *v0) + 0x78);
    v9 = (void (*)(CGRect *, _QWORD, __n128))v110(&slice);
    v11 = *v10;
    *v10 = (uint64_t)_swiftEmptyArrayStorage;
    v12 = swift_bridgeObjectRelease(v11);
    v9(&slice, 0, v12);
    v13 = objc_msgSend(v6, "bounds");
    v109 = *(void (**)(__n128, __n128, __n128, __n128))((swift_isaMask & *v1) + 0x88);
    ((void (*)(id, double, double))v109)(v13, 0.0, 0.0);
    v14 = (uint64_t)objc_msgSend(v6, "numberOfItemsInSection:", 0);
    objc_msgSend(v6, "bounds");
    v16 = v15;
    (*(void (**)(uint64_t, double))((swift_isaMask & *v1) + 0xB0))(v14, v15);
    v107 = v14;
    v18 = v14 < 1;
    v19 = v14 - 1;
    if (v18)
    {

    }
    else
    {
      v20 = v17;
      v88 = v6;
      v21 = 0;
      v92 = ceil(v16 * 0.5);
      v22 = 0.0;
      v103 = ceil(v17 * 0.5);
      v23 = (uint64_t)_swiftEmptyArrayStorage;
      v91 = xmmword_10019ED20;
      v90 = xmmword_10019EEE0;
      v89 = xmmword_10019F2D0;
      v24 = 0.0;
      v25 = 0.0;
      v26 = 0.0;
      v106 = v16;
      v105 = v17;
      v104 = v19;
LABEL_4:
      switch(v19)
      {
        case 0:
          swift_bridgeObjectRelease(v23);
          v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
          v23 = swift_allocObject(v27, 64, 7);
          *(_OWORD *)(v23 + 16) = v91;
          *(_QWORD *)(v23 + 32) = 0;
          *(_QWORD *)(v23 + 40) = 0;
          v28 = 1;
          *(double *)(v23 + 48) = v16;
          *(CGFloat *)(v23 + 56) = v20;
          goto LABEL_19;
        case 1:
          swift_bridgeObjectRelease(v23);
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v117.origin.x = 0.0;
          v117.origin.y = 0.0;
          v117.size.width = v16;
          v117.size.height = v20;
          CGRectDivide(v117, &slice, &remainder, v103, CGRectMinYEdge);
          origin = slice.origin;
          width = slice.size.width;
          height = slice.size.height;
          x = remainder.origin.x;
          v108.x = remainder.size.width;
          v32 = remainder.origin.y + 1.0;
          v102 = remainder.size.height + -1.0;
          v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
          v23 = swift_allocObject(v33, 96, 7);
          v34 = origin;
          *(_OWORD *)(v23 + 16) = v90;
          *(CGPoint *)(v23 + 32) = v34;
          *(CGFloat *)(v23 + 48) = width;
          *(CGFloat *)(v23 + 56) = height;
          *(CGFloat *)(v23 + 64) = x;
          *(CGFloat *)(v23 + 72) = v32;
          v28 = 2;
          v34.x = v102;
          *(CGFloat *)(v23 + 80) = v108.x;
          *(CGFloat *)(v23 + 88) = v34.x;
          goto LABEL_19;
        case 2:
          swift_bridgeObjectRelease(v23);
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v118.origin.x = 0.0;
          v118.origin.y = 0.0;
          v118.size.width = v16;
          v118.size.height = v20;
          CGRectDivide(v118, &slice, &remainder, v103, CGRectMinYEdge);
          v108 = slice.origin;
          v102 = slice.size.width;
          origin.x = slice.size.height;
          v119.origin.x = remainder.origin.x;
          v119.size.width = remainder.size.width;
          v119.origin.y = remainder.origin.y + 1.0;
          v119.size.height = remainder.size.height + -1.0;
          v35 = ceil(remainder.size.width * 0.5);
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          CGRectDivide(v119, &slice, &remainder, v35, CGRectMinXEdge);
          v98 = slice.origin;
          v36 = slice.size.width;
          v37 = slice.size.height;
          y = remainder.origin.y;
          v100 = remainder.size.height;
          v39 = remainder.origin.x + 1.0;
          v99 = remainder.size.width + -1.0;
          v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
          v23 = swift_allocObject(v40, 128, 7);
          v41 = v108;
          *(_OWORD *)(v23 + 16) = v89;
          *(CGPoint *)(v23 + 32) = v41;
          v41.x = origin.x;
          *(CGFloat *)(v23 + 48) = v102;
          *(CGFloat *)(v23 + 56) = v41.x;
          *(CGPoint *)(v23 + 64) = v98;
          *(CGFloat *)(v23 + 80) = v36;
          *(CGFloat *)(v23 + 88) = v37;
          *(CGFloat *)(v23 + 96) = v39;
          *(CGFloat *)(v23 + 104) = y;
          v28 = 3;
          v41.x = v100;
          *(CGFloat *)(v23 + 112) = v99;
          *(CGFloat *)(v23 + 120) = v41.x;
          goto LABEL_19;
        case 3:
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v120.origin.x = 0.0;
          v120.origin.y = 0.0;
          v120.size.width = v16;
          v120.size.height = v20;
          CGRectDivide(v120, &slice, &remainder, v92, CGRectMinXEdge);
          v121 = slice;
          v42 = remainder.origin.y;
          v43 = remainder.size.height;
          v44 = remainder.origin.x + 1.0;
          v45 = remainder.size.width + -1.0;
          v46 = ceil(slice.size.height * 0.5);
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          CGRectDivide(v121, &slice, &remainder, v46, CGRectMinYEdge);
          v96 = slice.origin.x;
          v95 = slice.origin.y;
          v94 = slice.size.width;
          v93 = slice.size.height;
          origin.x = remainder.origin.x;
          v99 = remainder.origin.y;
          v100 = remainder.size.width;
          v98.x = remainder.size.height;
          memset(&slice, 0, sizeof(slice));
          memset(&remainder, 0, sizeof(remainder));
          v122.origin.x = v44;
          v122.origin.y = v42;
          v122.size.width = v45;
          v122.size.height = v43;
          CGRectDivide(v122, &slice, &remainder, ceil(v43 * 0.5), CGRectMinYEdge);
          v47 = slice.origin.x;
          v97 = *(_OWORD *)&slice.origin.y;
          v48 = slice.size.height;
          v49 = remainder.origin.y;
          v108.x = remainder.origin.x;
          v50 = remainder.size.height;
          v102 = remainder.size.width;
          if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
            v23 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1, (_QWORD *)v23);
          v52 = *(_QWORD *)(v23 + 16);
          v51 = *(_QWORD *)(v23 + 24);
          v53 = v51 >> 1;
          v54 = v52 + 1;
          if (v51 >> 1 <= v52)
          {
            v23 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v51 > 1), v52 + 1, 1, (_QWORD *)v23);
            v51 = *(_QWORD *)(v23 + 24);
            v53 = v51 >> 1;
          }
          *(_QWORD *)(v23 + 16) = v54;
          v55 = (CGFloat *)(v23 + 32 * v52);
          v56 = v95;
          v55[4] = v96;
          v55[5] = v56;
          v57 = v93;
          v55[6] = v94;
          v55[7] = v57;
          v58 = v52 + 2;
          if (v53 < (uint64_t)(v52 + 2))
            v23 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v51 > 1), v52 + 2, 1, (_QWORD *)v23);
          *(_QWORD *)(v23 + 16) = v58;
          v59 = (_QWORD *)(v23 + 32 * v54);
          *((CGFloat *)v59 + 4) = v47;
          *(_OWORD *)(v59 + 5) = v97;
          *((CGFloat *)v59 + 7) = v48;
          v60 = *(_QWORD *)(v23 + 24);
          v61 = v52 + 3;
          if ((uint64_t)(v52 + 3) > (uint64_t)(v60 >> 1))
            v23 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v60 > 1), v52 + 3, 1, (_QWORD *)v23);
          v62 = v99 + 1.0;
          v63 = v98.x + -1.0;
          *(_QWORD *)(v23 + 16) = v61;
          v64 = (CGFloat *)(v23 + 32 * v58);
          v64[4] = origin.x;
          v64[5] = v62;
          v64[6] = v100;
          v64[7] = v63;
          v65 = (_QWORD *)v23;
          v66 = *(_QWORD *)(v23 + 24);
          if ((uint64_t)(v52 + 4) > (uint64_t)(v66 >> 1))
            v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v66 > 1), v52 + 4, 1, (_QWORD *)v23);
          v65[2] = v52 + 4;
          v23 = (uint64_t)v65;
          v67 = (CGFloat *)&v65[4 * v61];
          v67[4] = v108.x;
          v67[5] = v49 + 1.0;
          v67[6] = v102;
          v67[7] = v50 + -1.0;
          v28 = v65[2];
          if (!v28)
            goto LABEL_25;
LABEL_19:
          v68 = (double *)(v23 + 56);
          v69 = (void *)objc_opt_self(UICollectionViewLayoutAttributes);
          v70 = *(double (**)(uint64_t))((swift_isaMask & *v1) + 0x80);
          *(_QWORD *)&v108.x = v23;
          swift_bridgeObjectRetain(v23);
          break;
        default:
          goto LABEL_29;
      }
      while (1)
      {
        v71 = *(v68 - 3);
        v72 = *(v68 - 2);
        v73 = *(v68 - 1);
        v74 = *v68;
        v75 = v111;
        IndexPath.init(item:section:)(v21, 0);
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        v77 = objc_msgSend(v69, "layoutAttributesForCellWithIndexPath:", isa);

        (*(void (**)(char *, uint64_t))(v112 + 8))(v75, v113);
        objc_msgSend(v77, "setFrame:", v71, v72, v73, v74);
        v78 = v77;
        v79 = (uint64_t (*)(CGRect *, _QWORD))v110(&slice);
        v81 = v80;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
        v83 = *(_QWORD *)((*v81 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v82 = *(_QWORD *)((*v81 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v83 >= v82 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v82 > 1, v83 + 1, 1);
        v84 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v83, v78);
        specialized Array._endMutation()(v84);
        v85 = v79(&slice, 0);
        v123.origin.x = v70(v85);
        v125.origin.x = v25;
        v125.origin.y = v26;
        v125.size.width = v22;
        v125.size.height = v24;
        v124 = CGRectUnion(v123, v125);
        v109((__n128)v124.origin, *(__n128 *)&v124.origin.y, (__n128)v124.size, *(__n128 *)&v124.size.height);

        if (v21 == 0x7FFFFFFFFFFFFFFFLL)
          break;
        ++v21;
        v68 += 4;
        v22 = v73;
        v24 = v74;
        v25 = v71;
        v26 = v72;
        if (!--v28)
        {
          v23 = *(_QWORD *)&v108.x;
          swift_bridgeObjectRelease(*(_QWORD *)&v108.x);
          v22 = v73;
          v24 = v74;
          v25 = v71;
          v26 = v72;
          v19 = v104;
LABEL_25:
          v16 = v106;
          v20 = v105;
          if (v21 >= v107)
          {

            v86 = (_QWORD *)v23;
            goto LABEL_30;
          }
          goto LABEL_4;
        }
      }
      __break(1u);
LABEL_29:

      v86 = _swiftEmptyArrayStorage;
LABEL_30:
      swift_bridgeObjectRelease(v86);
    }
  }
}

uint64_t type metadata accessor for MOSuggestionSheetHalfMosaicLayout()
{
  return objc_opt_self(_TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout);
}

double MOSuggestionSheetHalfMosaicLayout.collectionViewContentSize.getter()
{
  _QWORD *v0;
  double v1;

  (*(void (**)(void))((swift_isaMask & *v0) + 0x80))();
  return v1;
}

uint64_t MOSuggestionSheetHalfMosaicLayout.layoutAttributesForItem(at:)()
{
  _QWORD *v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  id v10;
  id v11;

  v1 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x68);
  v2 = v1();
  v3 = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 >= 0)
      v2 &= 0xFFFFFFFFFFFFFF8uLL;
    v4 = _CocoaArrayWrapper.endIndex.getter(v2);
  }
  else
  {
    v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = swift_bridgeObjectRelease(v3);
  v6 = IndexPath.item.getter(v5);
  if (v6 >= v4)
    return 0;
  v7 = IndexPath.item.getter(v6);
  result = v1();
  v9 = result;
  if ((result & 0xC000000000000001) != 0)
  {
    v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, result);
    goto LABEL_8;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v7 < *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v10 = *(id *)(result + 8 * v7 + 32);
LABEL_8:
    v11 = v10;
    swift_bridgeObjectRelease(v9);
    return (uint64_t)v11;
  }
  __break(1u);
  return result;
}

void MOSuggestionSheetHalfMosaicLayout.layoutAttributesForElements(in:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  _QWORD *v4;
  Swift::Int v5;
  _QWORD *v6;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(void);
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  unint64_t v28;
  unint64_t v29;
  uint64_t (*v30)(void);
  BOOL v31;
  id v32;
  double MaxY;
  id v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::Int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t (*v42)(void);
  Swift::Int v43;
  unint64_t v44;
  unint64_t v45;
  id v46;
  double MinY;
  id v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(void);
  unint64_t v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;

  v6 = v4;
  v11 = *v4;
  v59 = (unint64_t)_swiftEmptyArrayStorage;
  v12 = &swift_isaMask;
  v13 = *(uint64_t (**)(void))((swift_isaMask & v11) + 0x68);
  v14 = v13();
  v15 = v14;
  if (v14 >> 62)
    goto LABEL_57;
  v16 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRelease(v14);
LABEL_3:
  if (v16)
  {
    v17 = (*(uint64_t (**)(_QWORD, uint64_t, CGFloat, CGFloat, CGFloat, CGFloat))((*v12 & *v6) + 0xB8))(0, v16 - 1, a1, a2, a3, a4);
    if ((v18 & 1) == 0)
    {
      v5 = v17;
      v15 = (uint64_t)v6;
      v19 = v13();
      if (v5 < 0)
      {
        while (1)
        {
          __break(1u);
LABEL_63:
          v53 = v15 < 0 ? v15 : v15 & 0xFFFFFFFFFFFFFF8;
          if (_CocoaArrayWrapper.endIndex.getter(v53) < 0)
            break;
          swift_bridgeObjectRetain(v15);
          v54 = _CocoaArrayWrapper.endIndex.getter(v53);
          swift_bridgeObjectRelease(v15);
          if (v54 >= v5)
            goto LABEL_8;
LABEL_68:
          __break(1u);
LABEL_69:
          if (v15 < 0)
            v55 = v15;
          else
            v55 = v15 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v15);
          v6 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v55);
          swift_bridgeObjectRelease(v15);
          if ((uint64_t)v6 < v5)
            goto LABEL_79;
          swift_bridgeObjectRetain(v15);
          v56 = _CocoaArrayWrapper.endIndex.getter(v55);
          swift_bridgeObjectRelease(v15);
          if (v56 < v5)
            goto LABEL_80;
          swift_bridgeObjectRetain(v15);
          v57 = _CocoaArrayWrapper.endIndex.getter(v55);
          swift_bridgeObjectRelease(v15);
          if (v57 < (uint64_t)v6)
          {
            __break(1u);
            goto LABEL_76;
          }
LABEL_33:
          if ((v15 & 0xC000000000000001) != 0 && (_QWORD *)v5 != v6)
          {
            if (v5 >= (uint64_t)v6)
              goto LABEL_77;
            type metadata accessor for UICollectionViewLayoutAttributes();
            v39 = v5;
            do
            {
              v40 = (_QWORD *)(v39 + 1);
              _ArrayBuffer._typeCheckSlowPath(_:)(v39);
              v39 = (Swift::Int)v40;
            }
            while (v6 != v40);
          }
          if (!v16)
          {
            v12 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFF8);
            v13 = (uint64_t (*)(void))((v15 & 0xFFFFFFFFFFFFFF8) + 32);
            if ((_QWORD *)v5 != v6)
              goto LABEL_45;
LABEL_52:
            swift_unknownObjectRelease(v12);
            return;
          }
          if (v15 < 0)
            v41 = v15;
          else
            v41 = v15 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v15);
          v12 = (_QWORD *)_CocoaArrayWrapper.subscript.getter(v5, v6, v41);
          v13 = v42;
          v5 = v43;
          v45 = v44;
          swift_bridgeObjectRelease_n(v15, 2);
          v6 = (_QWORD *)(v45 >> 1);
          if ((_QWORD *)v5 == v6)
            goto LABEL_52;
LABEL_45:
          while (v5 < (uint64_t)v6)
          {
            v46 = *((id *)v13 + v5);
            objc_msgSend(v46, "frame");
            MinY = CGRectGetMinY(v62);
            v63.origin.x = a1;
            v63.origin.y = a2;
            v63.size.width = a3;
            v63.size.height = a4;
            if (MinY > CGRectGetMaxY(v63))
            {

              goto LABEL_52;
            }
            v48 = v46;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v48);
            v50 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v49 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v50 >= v49 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
            ++v5;
            v51 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v50, v48);
            v15 = (uint64_t)&v59;
            specialized Array._endMutation()(v51);

            if (v6 == (_QWORD *)v5)
              goto LABEL_52;
          }
LABEL_56:
          __break(1u);
LABEL_57:
          if (v15 < 0)
            v52 = v15;
          else
            v52 = v15 & 0xFFFFFFFFFFFFFF8;
          v16 = _CocoaArrayWrapper.endIndex.getter(v52);
          swift_bridgeObjectRelease(v15);
          if ((v16 & 0x8000000000000000) == 0)
            goto LABEL_3;
          __break(1u);
        }
      }
      else
      {
        v15 = v19;
        v16 = v19 >> 62;
        if (v19 >> 62)
          goto LABEL_63;
        if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10) < v5)
          goto LABEL_68;
LABEL_8:
        v58 = v13;
        if ((v15 & 0xC000000000000001) != 0 && v5 != 0)
        {
          type metadata accessor for UICollectionViewLayoutAttributes();
          v21 = 0;
          do
          {
            v22 = v21 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v21);
            v21 = v22;
          }
          while (v5 != v22);
        }
        if (v16)
        {
          if (v15 < 0)
            v25 = v15;
          else
            v25 = v15 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v15);
          v12 = (_QWORD *)_CocoaArrayWrapper.subscript.getter(0, v5, v25);
          v23 = v26;
          v13 = v27;
          v29 = v28;
          swift_bridgeObjectRelease_n(v15, 2);
          v24 = (uint64_t (*)(void))(v29 >> 1);
        }
        else
        {
          v13 = 0;
          v12 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFF8);
          v23 = (v15 & 0xFFFFFFFFFFFFFF8) + 32;
          v24 = (uint64_t (*)(void))v5;
        }
        if (v24 != v13)
        {
          v30 = v24;
          while (1)
          {
            v31 = __OFSUB__(v30, 1);
            v30 = (uint64_t (*)(void))((char *)v30 - 1);
            if (v31)
            {
              __break(1u);
LABEL_55:
              __break(1u);
              goto LABEL_56;
            }
            if ((uint64_t)v30 < (uint64_t)v13 || (uint64_t)v30 >= (uint64_t)v24)
              goto LABEL_55;
            v32 = *(id *)(v23 + 8 * (_QWORD)v30);
            objc_msgSend(v32, "frame");
            MaxY = CGRectGetMaxY(v60);
            v61.origin.x = a1;
            v61.origin.y = a2;
            v61.size.width = a3;
            v61.size.height = a4;
            if (CGRectGetMinY(v61) > MaxY)
              break;
            v34 = v32;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v34);
            v36 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v35 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v36 >= v35 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
            v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
            v15 = (uint64_t)&v59;
            specialized Array._endMutation()(v37);

            if (v30 == v13)
              goto LABEL_31;
          }

        }
LABEL_31:
        v38 = swift_unknownObjectRelease(v12);
        v15 = ((uint64_t (*)(uint64_t))v58)(v38);
        v16 = (unint64_t)v15 >> 62;
        if ((unint64_t)v15 >> 62)
          goto LABEL_69;
        v6 = *(_QWORD **)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
        if ((uint64_t)v6 >= v5)
          goto LABEL_33;
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
      }
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
    }
  }
}

double MOSuggestionSheetHalfMosaicLayout.assetGridHeight(assetCount:totalWidth:)(uint64_t a1, double result)
{
  if (a1 > 5)
    result = result + result;
  if (!a1)
    return 0.0;
  return result;
}

uint64_t MOSuggestionSheetHalfMosaicLayout.binSearch(_:start:end:)(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  id v19;
  void *v20;
  double MaxY;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;

  if (a2 < a1)
    return 0;
  v16 = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
LABEL_19:
    v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v8);
LABEL_11:
    v20 = v19;
    swift_bridgeObjectRelease(v8);
    objc_msgSend(v20, "frame");
    v31.origin.x = v13;
    v31.origin.y = v12;
    v31.size.width = v11;
    v31.size.height = v10;
    if (CGRectIntersectsRect(v28, v31))
    {

    }
    else
    {
      objc_msgSend(v20, "frame");
      MaxY = CGRectGetMaxY(v29);
      v30.origin.x = v13;
      v30.origin.y = v12;
      v30.size.width = v11;
      v30.size.height = v10;
      if (MaxY >= CGRectGetMinY(v30))
      {
        v27 = v6 - 1;
        v22.n128_f64[0] = v13;
        v23.n128_f64[0] = v12;
        v24.n128_f64[0] = v11;
        v25.n128_f64[0] = v10;
        v26 = a1;
      }
      else
      {
        v26 = v6 + 1;
        v22.n128_f64[0] = v13;
        v23.n128_f64[0] = v12;
        v24.n128_f64[0] = v11;
        v25.n128_f64[0] = v10;
        v27 = a2;
      }
      v6 = (*(uint64_t (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))((*v9 & *v7) + 0xB8))(v26, v27, v22, v23, v24, v25);

    }
    return v6;
  }
  v10 = a6;
  v11 = a5;
  v12 = a4;
  v13 = a3;
  if (v16 >= 0)
    v17 = a1 + a2;
  else
    v17 = v16 + 1;
  v6 = v17 >> 1;
  v9 = &swift_isaMask;
  result = (*(uint64_t (**)(void))((swift_isaMask & *v7) + 0x68))();
  v8 = result;
  if ((result & 0xC000000000000001) != 0)
    goto LABEL_19;
  if (v16 < -1)
  {
    __break(1u);
  }
  else if (v6 < *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v19 = *(id *)(result + 8 * v6 + 32);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

id MOSuggestionSheetHalfMosaicLayout.init()()
{
  char *v0;
  char *v1;
  char *v2;
  objc_super v4;

  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_cachedAttributes] = _swiftEmptyArrayStorage;
  v1 = &v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_contentBounds];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  v2 = &v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_mosaicSegmentDelegate];
  *((_QWORD *)v2 + 1) = 0;
  swift_unknownObjectWeakInit(v2);
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for MOSuggestionSheetHalfMosaicLayout();
  return objc_msgSendSuper2(&v4, "init");
}

id MOSuggestionSheetHalfMosaicLayout.init(coder:)(void *a1)
{
  char *v1;
  char *v3;
  char *v4;
  id v5;
  objc_super v7;

  *(_QWORD *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_cachedAttributes] = _swiftEmptyArrayStorage;
  v3 = &v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_contentBounds];
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  v4 = &v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_mosaicSegmentDelegate];
  *((_QWORD *)v4 + 1) = 0;
  swift_unknownObjectWeakInit(v4);
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for MOSuggestionSheetHalfMosaicLayout();
  v5 = objc_msgSendSuper2(&v7, "initWithCoder:", a1);

  return v5;
}

id MOSuggestionSheetHalfMosaicLayout.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetHalfMosaicLayout();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100054F78@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x68))();
  *a2 = result;
  return result;
}

uint64_t sub_100054FB8(_QWORD *a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x70);
  v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

void sub_100054FF8(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(double *)a2 = (*(double (**)(void))((swift_isaMask & **a1) + 0x80))();
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
}

uint64_t sub_10005503C(double *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(double, double, double, double))((swift_isaMask & **a2) + 0x88))(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_10005507C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x98))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1000550BC(_QWORD *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = a1[1];
  v3 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0xA0);
  v4 = swift_unknownObjectRetain(*a1);
  return v3(v4, v2);
}

double MOAngelDefaultsManager.momentsUIDendrogramPOIPenalty.getter()
{
  void *v0;
  NSString v1;
  id v2;
  _OWORD v4[2];
  __int128 v5;
  __int128 v6;

  if (one-time initialization token for defaults != -1)
    swift_once(&one-time initialization token for defaults, one-time initialization function for defaults);
  v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    v5 = 0u;
    v6 = 0u;
LABEL_11:
    outlined destroy of Any?((uint64_t)&v5);
    return 0.5;
  }
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v4, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)&v5);
  if (!*((_QWORD *)&v6 + 1))
    goto LABEL_11;
  if ((swift_dynamicCast(v4, &v5, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
    return *(double *)v4;
  return 0.5;
}

uint64_t MOAngelDefaultsManager.momentsUIShouldUpLevelPOI.getter()
{
  void *v0;
  NSString v1;
  id v2;
  _OWORD v4[2];
  __int128 v5;
  __int128 v6;

  if (one-time initialization token for defaults != -1)
    swift_once(&one-time initialization token for defaults, one-time initialization function for defaults);
  v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    v5 = 0u;
    v6 = 0u;
LABEL_11:
    outlined destroy of Any?((uint64_t)&v5);
    return 0;
  }
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v4, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)&v5);
  if (!*((_QWORD *)&v6 + 1))
    goto LABEL_11;
  if ((swift_dynamicCast(v4, &v5, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
    return LOBYTE(v4[0]);
  return 0;
}

void one-time initialization function for defaults(uint64_t a1)
{
  one-time initialization function for defaults(a1, 0xD000000000000012, 0x80000001001A83B0, &static MOAngelDefaultsManager.defaults);
}

void one-time initialization function for siri(uint64_t a1)
{
  one-time initialization function for defaults(a1, 0xD000000000000015, 0x80000001001A8390, &static MOAngelDefaultsManager.siri);
}

void one-time initialization function for defaults(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  id v5;
  NSString v6;
  id v7;

  v5 = objc_allocWithZone((Class)NSUserDefaults);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "initWithSuiteName:", v6);

  *a4 = v7;
}

uint64_t MOAngelDefaultsManager.momentsUIShouldSkipDendrogram.getter()
{
  void *v0;
  NSString v1;
  id v2;
  _OWORD v4[2];
  __int128 v5;
  __int128 v6;

  if (one-time initialization token for defaults != -1)
    swift_once(&one-time initialization token for defaults, one-time initialization function for defaults);
  v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    v5 = 0u;
    v6 = 0u;
LABEL_11:
    outlined destroy of Any?((uint64_t)&v5);
    return 0;
  }
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v4, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)&v5);
  if (!*((_QWORD *)&v6 + 1))
    goto LABEL_11;
  if ((swift_dynamicCast(v4, &v5, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
    return LOBYTE(v4[0]);
  return 0;
}

uint64_t MOAngelDefaultsManager.momentsUIForceEmbeddedPOI.getter()
{
  void *v0;
  NSString v1;
  id v2;
  _OWORD v4[2];
  __int128 v5;
  __int128 v6;

  if (one-time initialization token for defaults != -1)
    swift_once(&one-time initialization token for defaults, one-time initialization function for defaults);
  v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    v5 = 0u;
    v6 = 0u;
LABEL_11:
    outlined destroy of Any?((uint64_t)&v5);
    return 0;
  }
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v4, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)&v5);
  if (!*((_QWORD *)&v6 + 1))
    goto LABEL_11;
  if ((swift_dynamicCast(v4, &v5, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
    return LOBYTE(v4[0]);
  return 0;
}

uint64_t MOAngelDefaultsManager.momentsUITripDropUninterestingPOI.getter()
{
  void *v0;
  NSString v1;
  id v2;
  _OWORD v4[2];
  __int128 v5;
  __int128 v6;

  if (one-time initialization token for defaults != -1)
    swift_once(&one-time initialization token for defaults, one-time initialization function for defaults);
  v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    v5 = 0u;
    v6 = 0u;
LABEL_11:
    outlined destroy of Any?((uint64_t)&v5);
    return 0;
  }
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v4, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)&v5);
  if (!*((_QWORD *)&v6 + 1))
    goto LABEL_11;
  if ((swift_dynamicCast(v4, &v5, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
    return LOBYTE(v4[0]);
  return 0;
}

double MOAngelDefaultsManager.momentsUILowConfidenceHighCertaintyThreshold.getter()
{
  void *v0;
  NSString v1;
  id v2;
  _OWORD v4[2];
  __int128 v5;
  __int128 v6;

  if (one-time initialization token for defaults != -1)
    swift_once(&one-time initialization token for defaults, one-time initialization function for defaults);
  v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    v5 = 0u;
    v6 = 0u;
LABEL_11:
    outlined destroy of Any?((uint64_t)&v5);
    return 150.0;
  }
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v4, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)&v5);
  if (!*((_QWORD *)&v6 + 1))
    goto LABEL_11;
  if ((swift_dynamicCast(v4, &v5, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
    return *(double *)v4;
  return 150.0;
}

uint64_t MOAngelDefaultsManager.momentsUIGridBuckets.getter()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t result;
  double v4;
  _OWORD v5[2];
  __int128 v6;
  __int128 v7;

  if (one-time initialization token for defaults != -1)
    swift_once(&one-time initialization token for defaults, one-time initialization function for defaults);
  v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    v6 = 0u;
    v7 = 0u;
LABEL_14:
    outlined destroy of Any?((uint64_t)&v6);
    return 5;
  }
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v5, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  outlined init with take of Any?((uint64_t)v5, (uint64_t)&v6);
  if (!*((_QWORD *)&v7 + 1))
    goto LABEL_14;
  result = swift_dynamicCast(v5, &v6, (char *)&type metadata for Any + 8, &type metadata for Double, 6);
  if ((result & 1) == 0)
    return 5;
  v4 = round(*(double *)v5);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) != 0)
  {
    if (v4 > -9.22337204e18)
    {
      if (v4 < 9.22337204e18)
        return (uint64_t)v4;
      goto LABEL_18;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t MOAngelDefaultsManager.momentsUIClusterMaxCount.getter()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t result;
  double v4;
  _OWORD v5[2];
  __int128 v6;
  __int128 v7;

  if (one-time initialization token for defaults != -1)
    swift_once(&one-time initialization token for defaults, one-time initialization function for defaults);
  v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    v6 = 0u;
    v7 = 0u;
LABEL_14:
    outlined destroy of Any?((uint64_t)&v6);
    return 30;
  }
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v5, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  outlined init with take of Any?((uint64_t)v5, (uint64_t)&v6);
  if (!*((_QWORD *)&v7 + 1))
    goto LABEL_14;
  result = swift_dynamicCast(v5, &v6, (char *)&type metadata for Any + 8, &type metadata for Double, 6);
  if ((result & 1) == 0)
    return 30;
  v4 = round(*(double *)v5);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) != 0)
  {
    if (v4 > -9.22337204e18)
    {
      if (v4 < 9.22337204e18)
        return (uint64_t)v4;
      goto LABEL_18;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

double MOAngelDefaultsManager.momentsUITightPOIScale.getter()
{
  void *v0;
  NSString v1;
  id v2;
  _OWORD v4[2];
  __int128 v5;
  __int128 v6;

  if (one-time initialization token for defaults != -1)
    swift_once(&one-time initialization token for defaults, one-time initialization function for defaults);
  v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    v5 = 0u;
    v6 = 0u;
LABEL_11:
    outlined destroy of Any?((uint64_t)&v5);
    return 0.5;
  }
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v4, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)&v5);
  if (!*((_QWORD *)&v6 + 1))
    goto LABEL_11;
  if ((swift_dynamicCast(v4, &v5, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
    return *(double *)v4;
  return 0.5;
}

void *MOAngelDefaultsManager.siriCanLearnFromAppDenySet.getter()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;

  if (one-time initialization token for siri != -1)
    swift_once(&one-time initialization token for siri, one-time initialization function for siri);
  v0 = (void *)static MOAngelDefaultsManager.siri;
  if (!static MOAngelDefaultsManager.siri)
  {
    v9 = 0u;
    v10 = 0u;
LABEL_12:
    outlined destroy of Any?((uint64_t)&v9);
    return &_swiftEmptySetSingleton;
  }
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v8, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  outlined init with take of Any?((uint64_t)v8, (uint64_t)&v9);
  if (!*((_QWORD *)&v10 + 1))
    goto LABEL_12;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Swift.AnyObject]);
  if ((swift_dynamicCast(v8, &v9, (char *)&type metadata for Any + 8, v3, 6) & 1) == 0)
    return &_swiftEmptySetSingleton;
  v4 = *(_QWORD *)&v8[0];
  v5 = specialized _arrayConditionalCast<A, B>(_:)(*(uint64_t *)&v8[0]);
  swift_bridgeObjectRelease(v4);
  if (!v5)
    return &_swiftEmptySetSingleton;
  v6 = specialized Set.init<A>(_:)((uint64_t)v5);
  swift_bridgeObjectRelease(v5);
  return (void *)v6;
}

_QWORD *specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
    goto LABEL_26;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v20 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  v4 = v20;
  if (!v2)
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v2)
      return v4;
LABEL_10:
    for (i = 4; ; ++i)
    {
      v7 = i - 4;
      if ((a1 & 0xC000000000000001) != 0)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
        v9 = i - 3;
        if (__OFADD__(v7, 1))
          goto LABEL_25;
      }
      else
      {
        v8 = swift_unknownObjectRetain();
        v9 = i - 3;
        if (__OFADD__(v7, 1))
        {
LABEL_25:
          __break(1u);
LABEL_26:
          if (a1 < 0)
            v16 = a1;
          else
            v16 = a1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a1);
          v3 = _CocoaArrayWrapper.endIndex.getter(v16);
          swift_bridgeObjectRelease(a1);
          goto LABEL_3;
        }
      }
      v19 = v8;
      if (!swift_dynamicCast(&v17, &v19, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6))
      {
        v17 = 0;
        v18 = 0;
        swift_release(v4);
        swift_bridgeObjectRelease(v18);
        return 0;
      }
      v11 = v17;
      v10 = v18;
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1);
        v4 = v20;
      }
      v13 = v4[2];
      v12 = v4[3];
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v4 = v20;
      }
      v4[2] = v13 + 1;
      v14 = &v4[2 * v13];
      v14[4] = v11;
      v14[5] = v10;
      if (v9 == v2)
        return v4;
    }
  }
  if (a1 < 0)
    v5 = a1;
  else
    v5 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v2 = _CocoaArrayWrapper.endIndex.getter(v5);
  swift_bridgeObjectRelease(a1);
  if (v2)
    goto LABEL_10;
  return v4;
}

{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v14 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
    specialized ContiguousArray.reserveCapacity(_:)(v14);
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v13);
    result = (_QWORD *)swift_bridgeObjectRelease(a1);
    if (!v3)
      return _swiftEmptyArrayStorage;
  }
  else
  {
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10));
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3)
      return _swiftEmptyArrayStorage;
  }
  if (v3 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v4 = 0;
      do
      {
        v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4++, a1);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v6 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
        v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v5);
        specialized ContiguousArray._endMutation()(v7);
      }
      while (v3 != v4);
    }
    else
    {
      v8 = (void **)(a1 + 32);
      do
      {
        v9 = *v8++;
        v10 = v9;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v11 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
        v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
        specialized ContiguousArray._endMutation()(v12);
        --v3;
      }
      while (v3);
    }
    return _swiftEmptyArrayStorage;
  }
  __break(1u);
  return result;
}

uint64_t specialized static MOAngelDefaultsManager.doubleValueFor(_:)()
{
  void *v0;
  NSString v1;
  id v2;
  _OWORD v4[2];
  __int128 v5;
  __int128 v6;

  if (one-time initialization token for defaults != -1)
    swift_once(&one-time initialization token for defaults, one-time initialization function for defaults);
  v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    v5 = 0u;
    v6 = 0u;
LABEL_12:
    outlined destroy of Any?((uint64_t)&v5);
    return 0;
  }
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v4, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)&v5);
  if (!*((_QWORD *)&v6 + 1))
    goto LABEL_12;
  if (swift_dynamicCast(v4, &v5, (char *)&type metadata for Any + 8, &type metadata for Double, 6))
    return *(_QWORD *)&v4[0];
  else
    return 0;
}

uint64_t specialized static MOAngelDefaultsManager.BOOLeanValueFor(_:)()
{
  void *v0;
  NSString v1;
  id v2;
  _OWORD v4[2];
  __int128 v5;
  __int128 v6;

  if (one-time initialization token for defaults != -1)
    swift_once(&one-time initialization token for defaults, one-time initialization function for defaults);
  v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    v5 = 0u;
    v6 = 0u;
LABEL_12:
    outlined destroy of Any?((uint64_t)&v5);
    return 2;
  }
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v4, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)&v5);
  if (!*((_QWORD *)&v6 + 1))
    goto LABEL_12;
  if (swift_dynamicCast(v4, &v5, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))
    return LOBYTE(v4[0]);
  else
    return 2;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      specialized Set._Variant.insert(_:)(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MOAngelDefaultsManager()
{
  return &type metadata for MOAngelDefaultsManager;
}

uint64_t MOAppDelegate.init()()
{
  void *v0;
  void *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  __n128 v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  id v30;
  void (*v31)(char *, uint64_t, __n128);
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  objc_super v37;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = type metadata accessor for Tips.ConfigurationOption.AnalyticsEngine(0);
  v35 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Tips.ConfigurationOption.DatastoreLocation(0);
  v33 = *(_QWORD *)(v6 - 8);
  v34 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v32 - v17;
  v37.receiver = v1;
  v37.super_class = ObjectType;
  v32 = objc_msgSendSuper2(&v37, "init");
  v19 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v20 = 1;
  v21 = objc_msgSend(v19, "URLsForDirectory:inDomains:", 14, 1);

  v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v12);
  if (*(_QWORD *)(v22 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, v22 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), v12);
    v20 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v20, 1, v12);
  v23 = swift_bridgeObjectRelease(v22);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v13 + 48))(v11, 1, v12, v23);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
    URL.appendingPathComponent(_:)(0xD00000000000001BLL, 0x80000001001A83D0);
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Tips.ConfigurationOption>);
    v26 = *(_QWORD *)(type metadata accessor for Tips.ConfigurationOption(0) - 8);
    v27 = swift_allocObject(v25, ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ 2 * *(_QWORD *)(v26 + 72), *(unsigned __int8 *)(v26 + 80) | 7);
    *(_OWORD *)(v27 + 16) = xmmword_10019EEE0;
    static Tips.ConfigurationOption.DatastoreLocation.url(_:)(v16);
    static Tips.ConfigurationOption.datastoreLocation(_:)(v8);
    v28 = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v8, v34);
    static Tips.ConfigurationOption.AnalyticsEngine.coreAnalytics.getter(v28);
    static Tips.ConfigurationOption.analyticsEngine(_:)(v5);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v5, v36);
    static Tips.configure(_:)(v27);
    v29 = swift_bridgeObjectRelease(v27);
    v30 = v32;
    v31 = *(void (**)(char *, uint64_t, __n128))(v13 + 8);
    v31(v16, v12, v29);
    ((void (*)(char *, uint64_t))v31)(v18, v12);
    return (uint64_t)v30;
  }
  return result;
}

Swift::Void __swiftcall MOAppDelegate.applicationDidCreateWindowScene(_:)(UIWindowScene a1)
{
  -[objc_class _setKeepContextAssociationInBackground:](a1.super.super.super.isa, "_setKeepContextAssociationInBackground:", 1);
}

id MOSceneDelegate.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MOAppDelegate()
{
  return objc_opt_self(_TtC16MomentsUIService13MOAppDelegate);
}

id WorkoutStartLocationAnnotation.init()()
{
  return WorkoutStartLocationAnnotation.init()(type metadata accessor for WorkoutStartLocationAnnotation);
}

uint64_t type metadata accessor for WorkoutStartLocationAnnotation()
{
  return objc_opt_self(_TtC16MomentsUIService30WorkoutStartLocationAnnotation);
}

id WorkoutStartLocationAnnotation.__deallocating_deinit()
{
  return MOSuggestionRoundView.__deallocating_deinit(type metadata accessor for WorkoutStartLocationAnnotation);
}

id WorkoutEndLocationAnnotation.init()()
{
  return WorkoutStartLocationAnnotation.init()(type metadata accessor for WorkoutEndLocationAnnotation);
}

id WorkoutStartLocationAnnotation.init()(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "init");
}

uint64_t type metadata accessor for WorkoutEndLocationAnnotation()
{
  return objc_opt_self(_TtC16MomentsUIService28WorkoutEndLocationAnnotation);
}

id @objc WorkoutStartLocationAnnotation.init()(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  objc_super v4;

  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return objc_msgSendSuper2(&v4, "init");
}

id WorkoutEndLocationAnnotation.__deallocating_deinit()
{
  return MOSuggestionRoundView.__deallocating_deinit(type metadata accessor for WorkoutEndLocationAnnotation);
}

_QWORD *WorkoutLocationAnnotationView.__allocating_init(annotation:type:tileSize:)(uint64_t a1, char a2)
{
  char v3;

  v3 = a2 & 1;
  swift_getObjectType(a1);
  return specialized WorkoutLocationAnnotationView.__allocating_init(annotation:type:tileSize:)(a1, v3);
}

_QWORD *WorkoutLocationAnnotationView.init(annotation:type:tileSize:)(uint64_t a1, char a2)
{
  void *v2;
  char v4;

  v4 = a2 & 1;
  swift_getObjectType(a1);
  return specialized WorkoutLocationAnnotationView.init(annotation:type:tileSize:)(a1, v4, v2);
}

uint64_t WorkoutLocationAnnotationView.init(coder:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for WorkoutLocationAnnotationView();
  swift_deallocPartialClassInstance(v1, v2, 8, 7);
  return 0;
}

Swift::Void __swiftcall WorkoutLocationAnnotationView.setTintColor(_:)(MomentsUIService::WorkoutLocationAnnotationView::RouteAnnotationViewType a1)
{
  void *v1;
  void *v2;
  id v3;

  if ((a1 & 1) != 0)
    v2 = (void *)HKUIStandardMapRedColor();
  else
    v2 = (void *)HKUIStandardMapGreenColor();
  v3 = v2;
  objc_msgSend(v1, "setTintColor:", v3);

}

void WorkoutLocationAnnotationView.draw(_:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  void *v4;
  CGContext *v9;
  id v10;
  void *v11;
  CGColor *v12;
  id v13;
  CGColor *v14;
  CGContext *c;
  CGRect v16;
  CGRect v17;

  v9 = UIGraphicsGetCurrentContext();
  if (v9)
  {
    c = v9;
    CGContextSetLineWidth(v9, 2.0);
    v10 = objc_msgSend(v4, "tintColor");
    if (v10)
    {
      v11 = v10;
      v12 = (CGColor *)objc_msgSend(v10, "CGColor");

      CGContextSetFillColorWithColor(c, v12);
      v13 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
      v14 = (CGColor *)objc_msgSend(v13, "CGColor");

      CGContextSetStrokeColorWithColor(c, v14);
      v16.origin.x = a1;
      v16.origin.y = a2;
      v16.size.width = a3;
      v16.size.height = a4;
      v17 = CGRectInset(v16, 2.0, 2.0);
      CGContextAddEllipseInRect(c, v17);
      CGContextDrawPath(c, kCGPathFillStroke);

    }
    else
    {
      __break(1u);
    }
  }
}

id WorkoutLocationAnnotationView.__allocating_init(annotation:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  objc_class *v4;
  NSString v7;
  id v8;

  v4 = v3;
  if (a3)
  {
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(objc_allocWithZone(v4), "initWithAnnotation:reuseIdentifier:", a1, v7);

  swift_unknownObjectRelease(a1);
  return v8;
}

void WorkoutLocationAnnotationView.init(annotation:reuseIdentifier:)()
{
  _swift_stdlib_reportUnimplementedInitializer("MomentsUIService.WorkoutLocationAnnotationView", 46, "init(annotation:reuseIdentifier:)", 33, 0);
  __break(1u);
}

id WorkoutLocationAnnotationView.__deallocating_deinit()
{
  return MOSuggestionRoundView.__deallocating_deinit(type metadata accessor for WorkoutLocationAnnotationView);
}

_QWORD *specialized WorkoutLocationAnnotationView.init(annotation:type:tileSize:)(uint64_t a1, char a2, void *a3)
{
  uint64_t v4;
  id v5;
  void *v6;
  _QWORD *v7;
  id v8;
  UIAccessibilityTraits v9;
  _QWORD *v10;
  unint64_t v11;
  UIAccessibilityTraits v12;
  void *v13;
  _QWORD *v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  void *object;
  NSString v19;
  objc_super v21;
  Swift::String v22;

  v4 = a2 & 1;
  v21.receiver = a3;
  v21.super_class = (Class)type metadata accessor for WorkoutLocationAnnotationView();
  v5 = objc_msgSendSuper2(&v21, "initWithAnnotation:reuseIdentifier:", a1, 0);
  objc_msgSend(v5, "setFrame:", 0.0, 0.0, 15.0, 15.0);
  v6 = (void *)objc_opt_self(UIColor);
  v7 = v5;
  v8 = objc_msgSend(v6, "clearColor");
  objc_msgSend(v7, "setBackgroundColor:", v8);

  objc_msgSend(v7, "setCanShowCallout:", 1);
  (*(void (**)(uint64_t))((swift_isaMask & *v7) + 0x58))(v4);
  objc_msgSend(v7, "setIsAccessibilityElement:", 1);
  v9 = UIAccessibilityTraitImage;
  v10 = v7;
  v11 = (unint64_t)objc_msgSend(v10, "accessibilityTraits");
  if ((v9 & ~v11) != 0)
    v12 = v9;
  else
    v12 = 0;
  objc_msgSend(v10, "setAccessibilityTraits:", v12 | v11);

  v13 = (void *)objc_opt_self(NSBundle);
  v14 = v10;
  v15 = objc_msgSend(v13, "mainBundle");
  v22._object = (void *)0x80000001001A8590;
  v16._countAndFlagsBits = 0x6E73206574756F52;
  v16._object = (void *)0xEE00746F68737061;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0xD000000000000033;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v22)._object;

  v19 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setAccessibilityLabel:", v19, swift_bridgeObjectRelease(object).n128_f64[0]);

  swift_unknownObjectRelease(a1);
  return v14;
}

_QWORD *specialized WorkoutLocationAnnotationView.__allocating_init(annotation:type:tileSize:)(uint64_t a1, char a2)
{
  char v3;
  id v4;

  v3 = a2 & 1;
  v4 = objc_allocWithZone((Class)type metadata accessor for WorkoutLocationAnnotationView());
  return specialized WorkoutLocationAnnotationView.init(annotation:type:tileSize:)(a1, v3, v4);
}

uint64_t type metadata accessor for WorkoutLocationAnnotationView()
{
  return objc_opt_self(_TtC16MomentsUIService29WorkoutLocationAnnotationView);
}

unint64_t lazy protocol witness table accessor for type WorkoutLocationAnnotationView.RouteAnnotationViewType and conformance WorkoutLocationAnnotationView.RouteAnnotationViewType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WorkoutLocationAnnotationView.RouteAnnotationViewType and conformance WorkoutLocationAnnotationView.RouteAnnotationViewType;
  if (!lazy protocol witness table cache variable for type WorkoutLocationAnnotationView.RouteAnnotationViewType and conformance WorkoutLocationAnnotationView.RouteAnnotationViewType)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WorkoutLocationAnnotationView.RouteAnnotationViewType, &type metadata for WorkoutLocationAnnotationView.RouteAnnotationViewType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkoutLocationAnnotationView.RouteAnnotationViewType and conformance WorkoutLocationAnnotationView.RouteAnnotationViewType);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for WorkoutLocationAnnotationView.RouteAnnotationViewType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100056FA4 + 4 * byte_10019F9B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100056FD8 + 4 * asc_10019F9B0[v4]))();
}

uint64_t sub_100056FD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100056FE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100056FE8);
  return result;
}

uint64_t sub_100056FF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100056FFCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100057000(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100057008(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WorkoutLocationAnnotationView.RouteAnnotationViewType()
{
  return &type metadata for WorkoutLocationAnnotationView.RouteAnnotationViewType;
}

id PrivacyViewController.__allocating_init(clientName:)()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  return specialized PrivacyViewController.init(clientName:)();
}

id PrivacyViewController.__allocating_init(title:detailText:symbolName:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  objc_class *v7;
  objc_class *v8;
  NSString v13;
  NSString v14;
  NSString v15;
  id v16;

  v8 = v7;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (!a4)
  {
    v14 = 0;
    if (a6)
      goto LABEL_3;
LABEL_5:
    v15 = 0;
    goto LABEL_6;
  }
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (!a6)
    goto LABEL_5;
LABEL_3:
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6);
LABEL_6:
  v16 = objc_msgSend(objc_allocWithZone(v8), "initWithTitle:detailText:symbolName:contentLayout:", v13, v14, v15, a7);

  return v16;
}

void PrivacyViewController.init(title:detailText:symbolName:contentLayout:)()
{
  _swift_stdlib_reportUnimplementedInitializer("MomentsUIService.PrivacyViewController", 38, "init(title:detailText:symbolName:contentLayout:)", 48, 0);
  __break(1u);
}

id PrivacyViewController.__allocating_init(title:detailText:icon:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  objc_class *v6;
  objc_class *v7;
  NSString v12;
  NSString v13;
  id v14;

  v7 = v6;
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    v13 = 0;
  }
  v14 = objc_msgSend(objc_allocWithZone(v7), "initWithTitle:detailText:icon:contentLayout:", v12, v13, a5, a6);

  return v14;
}

void PrivacyViewController.init(title:detailText:icon:contentLayout:)()
{
  _swift_stdlib_reportUnimplementedInitializer("MomentsUIService.PrivacyViewController", 38, "init(title:detailText:icon:contentLayout:)", 42, 0);
  __break(1u);
}

id PrivacyViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PrivacyViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id specialized PrivacyViewController.init(clientName:)()
{
  void *v0;
  NSString v1;
  id v2;
  void *v3;
  id v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  void *object;
  NSString v14;
  NSString v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  void *v23;
  NSString v24;
  id v25;
  objc_super v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v1);

  v3 = (void *)objc_opt_self(NSBundle);
  v4 = objc_msgSend(v3, "mainBundle");
  v28._countAndFlagsBits = 0xD000000000000019;
  v5._countAndFlagsBits = 0xD000000000000137;
  v28._object = (void *)0x80000001001A8820;
  v5._object = (void *)0x80000001001A86E0;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v28);

  static String.localizedStringWithFormat(_:_:)(v7._countAndFlagsBits, v7._object, _swiftEmptyArrayStorage);
  v9 = v8;
  v10 = objc_msgSend(v3, "mainBundle", swift_bridgeObjectRelease(v7._object).n128_f64[0]);
  v11._countAndFlagsBits = 0xD00000000000001CLL;
  v29._object = (void *)0x80000001001A8860;
  v11._object = (void *)0x80000001001A8840;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v29._countAndFlagsBits = 0xD00000000000001ALL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v29)._object;

  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  v27.receiver = v0;
  v27.super_class = (Class)type metadata accessor for PrivacyViewController();
  v16 = objc_msgSendSuper2(&v27, "initWithTitle:detailText:icon:contentLayout:", v14, v15, v2, 2);

  v17 = (void *)objc_opt_self(OBBoldTrayButton);
  v18 = v16;
  v19 = objc_msgSend(v17, "boldButton");
  objc_msgSend(v19, "addTarget:action:forControlEvents:", v18, "doneTapped:", 64);
  v20 = objc_msgSend(v3, "mainBundle");
  v30._object = (void *)0x80000001001A8880;
  v21._countAndFlagsBits = 1701736260;
  v21._object = (void *)0xE400000000000000;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v30._countAndFlagsBits = 0xD00000000000001ALL;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v30)._object;

  v24 = String._bridgeToObjectiveC()();
  objc_msgSend(v19, "setTitle:forState:", v24, 0, swift_bridgeObjectRelease(v23).n128_f64[0]);

  v25 = objc_msgSend(v18, "buttonTray");
  objc_msgSend(v25, "addButton:", v19);

  return v18;
}

uint64_t type metadata accessor for PrivacyViewController()
{
  return objc_opt_self(_TtC16MomentsUIService21PrivacyViewController);
}

void *MOSuggestionAssetActivityRingsConstants.kUnknownQueryValue.unsafeMutableAddressor()
{
  return &static MOSuggestionAssetActivityRingsConstants.kUnknownQueryValue;
}

double static MOSuggestionAssetActivityRingsConstants.kUnknownQueryValue.getter()
{
  return -1.0;
}

id one-time initialization function for healthStore()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
  static MOSuggestionAssetActivityRingsProvider.healthStore = (uint64_t)result;
  return result;
}

uint64_t MOSuggestionAssetActivityRingsProvider.getAsset(workoutStartDate:workoutEndDate:index:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, _QWORD, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  char *v42;
  __n128 v43;
  void (*v44)(char *, char *, uint64_t, __n128);
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t (*v48)(char *, char *);
  uint64_t v49;
  uint64_t result;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  __n128 v56;
  id v57;
  void *v58;
  void *v59;
  void (*v60)(char *, uint64_t, uint64_t);
  Class isa;
  void (*v62)(char *, uint64_t);
  Class v63;
  id v64;
  void *v65;
  Class v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  __n128 v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(char *, char *);
  _QWORD *v95;
  void (*v96)(void (*)(void *), _QWORD *, __n128);
  __n128 v97;
  __n128 v98;
  char *v99;
  uint64_t (*v100)(char *, char *);
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117[4];

  v107 = a4;
  v108 = a5;
  v111 = a2;
  v101 = a1;
  v110 = type metadata accessor for Date(0);
  v113 = *(_QWORD *)(v110 - 8);
  v7 = __chkstk_darwin(v110);
  v103 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v102 = (char *)&v99 - v10;
  __chkstk_darwin(v9);
  v99 = (char *)&v99 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v12);
  v112 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?);
  __chkstk_darwin(v14);
  v109 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DateComponents(0);
  v105 = *(_QWORD *)(v16 - 8);
  v106 = v16;
  __chkstk_darwin(v16);
  v115 = (char *)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Calendar(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v99 - v24;
  v114 = v5;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_idx) = a3;
  static Calendar.autoupdatingCurrent.getter(v23);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  v27 = type metadata accessor for Calendar.Component(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(_QWORD *)(v28 + 72);
  v30 = *(unsigned __int8 *)(v28 + 80);
  v31 = (v30 + 32) & ~v30;
  v32 = 2 * v29;
  v33 = swift_allocObject(v26, v31 + 3 * v29, v30 | 7);
  *(_OWORD *)(v33 + 16) = xmmword_10019F2D0;
  v34 = v33 + v31;
  v35 = *(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 104);
  v35(v34, enum case for Calendar.Component.year(_:), v27);
  v36 = v34 + v29;
  v37 = v110;
  v35(v36, enum case for Calendar.Component.month(_:), v27);
  v38 = v34 + v32;
  v39 = v111;
  v35(v38, enum case for Calendar.Component.day(_:), v27);
  v40 = specialized Set.init(_nonEmptyArrayLiteral:)(v33);
  swift_setDeallocating(v33);
  swift_arrayDestroy(v34, 3, v27);
  v41 = v33;
  v42 = v115;
  swift_deallocClassInstance(v41, 32, 7);
  Calendar.dateComponents(_:from:)(v40, v39);
  v43 = swift_bridgeObjectRelease(v40);
  v44 = *(void (**)(char *, char *, uint64_t, __n128))(v19 + 16);
  v45 = v109;
  v104 = v25;
  v44(v109, v25, v18, v43);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v45, 0, 1, v18);
  v46 = DateComponents.calendar.setter(v45);
  static Calendar.autoupdatingCurrent.getter(v46);
  v47 = v112;
  Calendar.date(from:)(v42);
  v48 = *(uint64_t (**)(char *, char *))(v19 + 8);
  v49 = v113;
  v109 = (char *)v18;
  v100 = v48;
  v48(v22, (char *)v18);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v37);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v51 = v99;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v99, v47, v37);
    v52 = v114;
    v53 = v114 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsStartDate;
    v54 = swift_beginAccess(v114 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsStartDate, v117, 33, 0);
    (*(void (**)(uint64_t, char *, uint64_t, __n128))(v49 + 40))(v53, v51, v37, v54);
    swift_endAccess(v117);
    v55 = v52 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsEndDate;
    v56 = swift_beginAccess(v52 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsEndDate, v117, 33, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v49 + 24))(v55, v39, v37, v56);
    swift_endAccess(v117);
    v57 = objc_msgSend(objc_allocWithZone((Class)HKActivitySummary), "init");
    v58 = *(void **)(v52 + 16);
    *(_QWORD *)(v52 + 16) = v57;

    v59 = (void *)objc_opt_self(HKQuery);
    v60 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 16);
    v60(v51, v53, v37);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v62 = *(void (**)(char *, uint64_t))(v49 + 8);
    v62(v51, v37);
    v63 = Date._bridgeToObjectiveC()().super.isa;
    v64 = objc_msgSend(v59, "predicateForSamplesWithStartDate:endDate:options:", isa, v63, 1);

    v65 = *(void **)(v52 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_timeRangePredicate);
    *(_QWORD *)(v52 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_timeRangePredicate) = v64;

    v66 = DateComponents._bridgeToObjectiveC()().super.isa;
    v67 = objc_msgSend(v59, "predicateForActivitySummaryWithDateComponents:", v66);

    v68 = *(void **)(v52
                   + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_activitySummaryPredicate);
    *(_QWORD *)(v52 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_activitySummaryPredicate) = v67;

    v69 = v39;
    v70 = v52;
    if (serverManager._clientConnections != (NSMutableDictionary *)-1)
      swift_once(&serverManager._clientConnections, one-time initialization function for shared);
    v71 = type metadata accessor for Logger(0);
    __swift_project_value_buffer(v71, (uint64_t)static MOAngelLogger.shared);
    v72 = v102;
    v60(v102, v101, v37);
    v73 = v103;
    v74 = ((uint64_t (*)(char *, uint64_t, uint64_t))v60)(v103, v69, v37);
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.default.getter();
    v77 = v76;
    if (os_log_type_enabled(v75, v76))
    {
      v78 = swift_slowAlloc(22, -1);
      v113 = swift_slowAlloc(64, -1);
      v117[0] = v113;
      *(_DWORD *)v78 = 136315394;
      v79 = lazy protocol witness table accessor for type Date and conformance Date();
      LODWORD(v112) = v77;
      v80 = dispatch thunk of CustomStringConvertible.description.getter(v37, v79);
      v82 = v81;
      v116 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117, v78 + 4);
      v83 = swift_bridgeObjectRelease(v82);
      ((void (*)(char *, uint64_t, __n128))v62)(v72, v37, v83);
      *(_WORD *)(v78 + 12) = 2080;
      v84 = v79;
      v42 = v115;
      v85 = dispatch thunk of CustomStringConvertible.description.getter(v37, v84);
      v87 = v86;
      v116 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117, v78 + 14);
      v88 = swift_bridgeObjectRelease(v87);
      ((void (*)(char *, uint64_t, __n128))v62)(v73, v37, v88);
      v70 = v114;
      _os_log_impl((void *)&_mh_execute_header, v75, (os_log_type_t)v112, "[Assets] Packing rings for workout startTime=%s endTime=%s", (uint8_t *)v78, 0x16u);
      v89 = v113;
      swift_arrayDestroy(v113, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v89, -1, -1);
      swift_slowDealloc(v78, -1, -1);
    }
    else
    {
      v62(v72, v37);
      v62(v73, v37);
    }

    v90 = v107;
    v91 = v108;
    v93 = v105;
    v92 = v106;
    v94 = v100;
    v95 = (_QWORD *)swift_allocObject(&unk_1001E5F30, 40, 7);
    v95[2] = v90;
    v95[3] = v91;
    v95[4] = v70;
    v96 = *(void (**)(void (*)(void *), _QWORD *, __n128))(*(_QWORD *)v70 + 312);
    swift_retain(v91);
    v97 = swift_retain(v70);
    v96(partial apply for closure #1 in MOSuggestionAssetActivityRingsProvider.getAsset(workoutStartDate:workoutEndDate:index:completion:), v95, v97);
    v98 = swift_release(v95);
    (*(void (**)(char *, uint64_t, __n128))(v93 + 8))(v42, v92, v98);
    return v94(v104, v109);
  }
  return result;
}

void closure #1 in MOSuggestionAssetActivityRingsProvider.getAsset(workoutStartDate:workoutEndDate:index:completion:)(void *a1, void (*a2)(uint64_t, void *), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;

  if (a1)
  {
    v7 = *(_QWORD *)(a4 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_idx);
    v13 = a1;
    a2(v7, a1);

  }
  else
  {
    if (serverManager._clientConnections != (NSMutableDictionary *)-1)
      swift_once(&serverManager._clientConnections, one-time initialization function for shared);
    v8 = type metadata accessor for Logger(0);
    v9 = __swift_project_value_buffer(v8, (uint64_t)static MOAngelLogger.shared);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to generate rings", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    a2(*(_QWORD *)(a4 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_idx), 0);
  }
}

void MOSuggestionAssetActivityRingsProvider.getUserDefaults(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  _QWORD *v11;

  v5 = *(_QWORD *)(v2
                 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_activitySummaryPredicate);
  v6 = (_QWORD *)swift_allocObject(&unk_1001E5F58, 40, 7);
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = v2;
  v7 = objc_allocWithZone((Class)HKActivitySummaryQuery);
  v10[4] = partial apply for closure #1 in MOSuggestionAssetActivityRingsProvider.getUserDefaults(completion:);
  v11 = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = thunk for @escaping @callee_guaranteed (@guaranteed HKActivitySummaryQuery, @guaranteed [HKActivitySummary]?, @guaranteed Error?) -> ();
  v10[3] = &block_descriptor_6;
  v8 = _Block_copy(v10);
  swift_retain(a2);
  v9 = objc_msgSend(v7, "initWithPredicate:resultsHandler:", v5, v8, swift_retain(v2).n128_f64[0]);
  _Block_release(v8);
  swift_release(v11);
  if (one-time initialization token for healthStore != -1)
    swift_once(&one-time initialization token for healthStore, one-time initialization function for healthStore);
  objc_msgSend((id)static MOSuggestionAssetActivityRingsProvider.healthStore, "executeQuery:", v9);

}

void closure #1 in MOSuggestionAssetActivityRingsProvider.getUserDefaults(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5, id *a6)
{
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;

  if (!a2)
    goto LABEL_13;
  v10 = a2 & 0xFFFFFFFFFFFFFF8;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 >= 0)
      v19 = a2 & 0xFFFFFFFFFFFFFF8;
    else
      v19 = a2;
    swift_bridgeObjectRetain(a2);
    if (_CocoaArrayWrapper.endIndex.getter(v19))
      goto LABEL_4;
    goto LABEL_12;
  }
  v11 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  if (!v11)
  {
LABEL_12:
    swift_bridgeObjectRelease(a2);
LABEL_13:
    a4(0);
    return;
  }
LABEL_4:
  if ((a2 & 0xC000000000000001) != 0)
  {
    v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
    goto LABEL_7;
  }
  if (*(_QWORD *)(v10 + 16))
  {
    v12 = *(id *)(a2 + 32);
LABEL_7:
    v20 = v12;
    swift_bridgeObjectRelease(a2);
    v13 = a6[2];
    v14 = objc_msgSend(v20, "appleStandHoursGoal");
    objc_msgSend(v13, "setAppleStandHoursGoal:", v14);

    v15 = a6[2];
    v16 = objc_msgSend(v20, "exerciseTimeGoal");
    objc_msgSend(v15, "setExerciseTimeGoal:", v16);

    v17 = a6[2];
    v18 = objc_msgSend(v20, "activeEnergyBurnedGoal");
    objc_msgSend(v17, "setActiveEnergyBurnedGoal:", v18);

    (*((void (**)(void (*)(_QWORD), uint64_t))*a6 + 40))(a4, a5);
    return;
  }
  __break(1u);
}

id MOSuggestionAssetActivityRingsProvider.getStandMinutes(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id result;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  Class isa;
  NSDateComponents v30;
  uint64_t v31;
  Class v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD aBlock[5];
  _QWORD *v45;
  char v46[24];

  v3 = v2;
  v43 = a2;
  v40 = a1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?);
  __chkstk_darwin(v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DateComponents(0);
  v41 = *(_QWORD *)(v14 - 8);
  v42 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for HKQuantityType, HKQuantityType_ptr);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(v17), "quantityTypeForIdentifier:", HKQuantityTypeIdentifierAppleStandTime);
  if (result)
  {
    v19 = result;
    v20 = type metadata accessor for Calendar(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v13, 1, 1, v20);
    v21 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v10, 1, 1, v21);
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v13, v10, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1);
    DateComponents.hour.setter(1, 0);
    v22 = *(void **)(v3 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_timeRangePredicate);
    v23 = v3 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsStartDate;
    v24 = swift_beginAccess(v3 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsStartDate, v46, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v7, v23, v4, v24);
    v25 = v5;
    v26 = objc_allocWithZone((Class)HKStatisticsCollectionQuery);
    v27 = v19;
    v28 = v22;
    isa = Date._bridgeToObjectiveC()().super.isa;
    v30.super.isa = DateComponents._bridgeToObjectiveC()().super.isa;
    v39 = v16;
    v31 = v4;
    v32 = v30.super.isa;
    v33 = objc_msgSend(v26, "initWithQuantityType:quantitySamplePredicate:options:anchorDate:intervalComponents:", v27, v28, 0, isa, v30.super.isa);

    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v31);
    v34 = (_QWORD *)swift_allocObject(&unk_1001E5FA8, 40, 7);
    v35 = v40;
    v34[2] = v3;
    v34[3] = v35;
    v36 = v43;
    v34[4] = v43;
    aBlock[4] = partial apply for closure #1 in MOSuggestionAssetActivityRingsProvider.getStandMinutes(completion:);
    v45 = v34;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed HKStatisticsCollectionQuery, @guaranteed HKStatisticsCollection?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_9;
    v37 = _Block_copy(aBlock);
    v38 = v45;
    swift_retain(v3);
    swift_retain(v36);
    objc_msgSend(v33, "setInitialResultsHandler:", v37, swift_release(v38).n128_f64[0]);
    _Block_release(v37);
    if (one-time initialization token for healthStore != -1)
      swift_once(&one-time initialization token for healthStore, one-time initialization function for healthStore);
    objc_msgSend((id)static MOSuggestionAssetActivityRingsProvider.healthStore, "executeQuery:", v33);

    return (id)(*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v39, v42);
  }
  else
  {
    __break(1u);
  }
  return result;
}

double closure #1 in MOSuggestionAssetActivityRingsProvider.getStandMinutes(completion:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  void (*v17)(char *, uint64_t, uint64_t, __n128);
  Class isa;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  __n128 v23;
  Class v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  double v28;
  id v29;
  double result;
  uint64_t v31;
  id v32;
  _QWORD aBlock[5];
  uint64_t v34;
  char v35[24];
  char v36[24];

  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_1001E60B8, 24, 7);
  *(_QWORD *)(v14 + 16) = 0;
  if (a2)
  {
    v15 = a4 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsStartDate;
    v16 = swift_beginAccess(a4 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsStartDate, v36, 0, 0);
    v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
    v17(v13, v15, v10, v16);
    v32 = a2;
    isa = Date._bridgeToObjectiveC()().super.isa;
    v19 = a5;
    v20 = a6;
    v21 = *(void (**)(char *, uint64_t))(v11 + 8);
    v21(v13, v10);
    v22 = a4 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsEndDate;
    v23 = swift_beginAccess(a4 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsEndDate, v35, 0, 0);
    v17(v13, v22, v10, v23);
    v24 = Date._bridgeToObjectiveC()().super.isa;
    v21(v13, v10);
    a6 = v20;
    a5 = v19;
    v25 = swift_allocObject(&unk_1001E60E0, 32, 7);
    *(_QWORD *)(v25 + 16) = v14;
    *(_QWORD *)(v25 + 24) = a4;
    aBlock[4] = partial apply for closure #1 in closure #1 in MOSuggestionAssetActivityRingsProvider.getStandMinutes(completion:);
    v34 = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed HKStatistics, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    aBlock[3] = &block_descriptor_30;
    v26 = _Block_copy(aBlock);
    v27 = v34;
    swift_retain(v14);
    swift_retain(a4);
    *(_QWORD *)&v28 = swift_release(v27).n128_u64[0];
    v29 = v32;
    objc_msgSend(v32, "enumerateStatisticsFromDate:toDate:withBlock:", isa, v24, v26, v28);
    _Block_release(v26);

  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 328))(a5, a6);
  *(_QWORD *)&result = swift_release(v14).n128_u64[0];
  return result;
}

void closure #1 in closure #1 in MOSuggestionAssetActivityRingsProvider.getStandMinutes(completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  void *v7;
  double *v8;
  void *v9;
  id v10;
  double v11;
  double v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  _BYTE v17[24];

  v6 = objc_msgSend(a1, "sumQuantity");
  if (v6)
  {
    v7 = v6;
    v8 = (double *)(a3 + 16);
    v9 = (void *)objc_opt_self(HKUnit);
    v10 = objc_msgSend(v9, "minuteUnit");
    objc_msgSend(v7, "doubleValueForUnit:", v10);
    v12 = v11;

    if (v12 > 0.0)
    {
      swift_beginAccess(v8, &v16, 1, 0);
      *v8 = *v8 + 1.0;
    }
    v13 = *(id *)(a4 + 16);
    v14 = objc_msgSend(v9, "countUnit");
    swift_beginAccess(v8, v17, 0, 0);
    v15 = objc_msgSend((id)objc_opt_self(HKQuantity), "quantityWithUnit:doubleValue:", v14, *v8);

    objc_msgSend(v13, "setAppleStandHours:", v15);
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed HKStatistics, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void MOSuggestionAssetActivityRingsProvider.getExerciseMinutes(completion:)(uint64_t a1, uint64_t a2)
{
  MOSuggestionAssetActivityRingsProvider.getExerciseMinutes(completion:)(a1, a2, &HKQuantityTypeIdentifierAppleExerciseTime, (uint64_t)&unk_1001E5FF8, (uint64_t)partial apply for closure #1 in MOSuggestionAssetActivityRingsProvider.getExerciseMinutes(completion:), (uint64_t)&block_descriptor_15_0);
}

void closure #1 in MOSuggestionAssetActivityRingsProvider.getExerciseMinutes(completion:)(uint64_t a1, void *a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5, id *a6)
{
  id v9;
  id v10;
  id v11;

  if (a2)
  {
    v9 = a2;
    v10 = objc_msgSend(v9, "sumQuantity");
    if (v10)
    {
      v11 = v10;
      objc_msgSend(a6[2], "setAppleExerciseTime:");
      (*((void (**)(void (*)(_QWORD), uint64_t))*a6 + 42))(a4, a5);

      return;
    }

  }
  a4(0);
}

void MOSuggestionAssetActivityRingsProvider.getMoveCalories(completion:)(uint64_t a1, uint64_t a2)
{
  MOSuggestionAssetActivityRingsProvider.getExerciseMinutes(completion:)(a1, a2, &HKQuantityTypeIdentifierActiveEnergyBurned, (uint64_t)&unk_1001E6048, (uint64_t)partial apply for closure #1 in MOSuggestionAssetActivityRingsProvider.getMoveCalories(completion:), (uint64_t)&block_descriptor_21);
}

void MOSuggestionAssetActivityRingsProvider.getExerciseMinutes(completion:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  void *v19;
  id v20;
  _QWORD v21[5];
  _QWORD *v22;

  v13 = type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for HKQuantityType, HKQuantityType_ptr);
  v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "quantityTypeForIdentifier:", *a3);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)(v6 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_timeRangePredicate);
    v17 = (_QWORD *)swift_allocObject(a4, 40, 7);
    v17[2] = a1;
    v17[3] = a2;
    v17[4] = v6;
    v18 = objc_allocWithZone((Class)HKStatisticsQuery);
    v21[4] = a5;
    v22 = v17;
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 1107296256;
    v21[2] = thunk for @escaping @callee_guaranteed (@guaranteed HKStatisticsCollectionQuery, @guaranteed HKStatisticsCollection?, @guaranteed Error?) -> ();
    v21[3] = a6;
    v19 = _Block_copy(v21);
    swift_retain(a2);
    v20 = objc_msgSend(v18, "initWithQuantityType:quantitySamplePredicate:options:completionHandler:", v15, v16, 0, v19, swift_retain(v6).n128_f64[0]);
    _Block_release(v19);
    swift_release(v22);
    if (one-time initialization token for healthStore != -1)
      swift_once(&one-time initialization token for healthStore, one-time initialization function for healthStore);
    objc_msgSend((id)static MOSuggestionAssetActivityRingsProvider.healthStore, "executeQuery:", v20);

  }
  else
  {
    __break(1u);
  }
}

void closure #1 in MOSuggestionAssetActivityRingsProvider.getMoveCalories(completion:)(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void *), uint64_t a5, uint64_t a6)
{
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  id v22;

  if (a2)
  {
    v8 = a2;
    v9 = objc_msgSend(v8, "sumQuantity");
    if (v9)
    {
      v10 = v9;
      objc_msgSend(*(id *)(a6 + 16), "setActiveEnergyBurned:", v9);
      if (serverManager._clientConnections != (NSMutableDictionary *)-1)
        swift_once(&serverManager._clientConnections, one-time initialization function for shared);
      v11 = type metadata accessor for Logger(0);
      v12 = __swift_project_value_buffer(v11, (uint64_t)static MOAngelLogger.shared);
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "[Assets] Packed rings asset", v15, 2u);
        swift_slowDealloc(v15, -1, -1);
      }

      v16 = *(void **)(a6 + 16);
      v22 = v16;
      a4(v16);

      return;
    }

  }
  if (serverManager._clientConnections != (NSMutableDictionary *)-1)
    swift_once(&serverManager._clientConnections, one-time initialization function for shared);
  v17 = type metadata accessor for Logger(0);
  v18 = __swift_project_value_buffer(v17, (uint64_t)static MOAngelLogger.shared);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "[Assets] Unable to obtain user move calories", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  a4(0);
}

uint64_t MOSuggestionAssetActivityRingsProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  v1 = v0 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsStartDate;
  v2 = type metadata accessor for Date(0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsEndDate, v2);

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_activitySummaryPredicate));

  return v0;
}

uint64_t MOSuggestionAssetActivityRingsProvider.__deallocating_deinit()
{
  id *v0;
  char *v1;
  uint64_t v2;
  void (*v3)(char *, uint64_t);

  v1 = (char *)v0 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsStartDate;
  v2 = type metadata accessor for Date(0);
  v3 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3((char *)v0 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsEndDate, v2);
  objc_release(*(id *)((char *)v0
                     + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_timeRangePredicate));
  objc_release(*(id *)((char *)v0
                     + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_activitySummaryPredicate));

  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t MOSuggestionAssetActivityRingsProvider.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  MOSuggestionAssetActivityRingsProvider.init()();
  return v1;
}

uint64_t MOSuggestionAssetActivityRingsProvider.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 16) = objc_msgSend(objc_allocWithZone((Class)HKActivitySummary), "init");
  v1 = ((uint64_t (*)(void))Date.init())();
  Date.init()(v1);
  v2 = OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_timeRangePredicate;
  *(_QWORD *)(v0 + v2) = objc_msgSend(objc_allocWithZone((Class)NSPredicate), "init");
  v3 = OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_activitySummaryPredicate;
  *(_QWORD *)(v0 + v3) = objc_msgSend(objc_allocWithZone((Class)NSPredicate), "init");
  *(_QWORD *)(v0 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_workout) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_idx) = -1;
  return v0;
}

double thunk for @escaping @callee_guaranteed (@guaranteed HKActivitySummaryQuery, @guaranteed [HKActivitySummary]?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v7;
  void (*v8)(id, uint64_t, void *);
  uint64_t v9;
  id v10;
  id v11;
  double result;

  v5 = a3;
  v8 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (a3)
  {
    v9 = type metadata accessor for UIApplication(0, &lazy cache variable for type metadata for HKActivitySummary, HKActivitySummary_ptr);
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v9);
  }
  swift_retain(v7);
  v10 = a2;
  v11 = a4;
  v8(v10, v5, a4);
  swift_release(v7);

  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed HKStatisticsCollectionQuery, @guaranteed HKStatisticsCollection?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  void (*v8)(id, void *, void *);
  id v9;
  id v10;
  id v11;

  v8 = *(void (**)(id, void *, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v11 = a2;
  v9 = a3;
  v10 = a4;
  v8(v11, a3, a4);
  swift_release(v7);

}

void partial apply for closure #1 in MOSuggestionAssetActivityRingsProvider.getAsset(workoutStartDate:workoutEndDate:index:completion:)(void *a1)
{
  uint64_t v1;

  closure #1 in MOSuggestionAssetActivityRingsProvider.getAsset(workoutStartDate:workoutEndDate:index:completion:)(a1, *(void (**)(uint64_t, void *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

void partial apply for closure #1 in MOSuggestionAssetActivityRingsProvider.getUserDefaults(completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  closure #1 in MOSuggestionAssetActivityRingsProvider.getUserDefaults(completion:)(a1, a2, a3, *(void (**)(_QWORD))(v3 + 16), *(_QWORD *)(v3 + 24), *(id **)(v3 + 32));
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_6(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000592B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

double partial apply for closure #1 in MOSuggestionAssetActivityRingsProvider.getStandMinutes(completion:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t *v3;

  return closure #1 in MOSuggestionAssetActivityRingsProvider.getStandMinutes(completion:)(a1, a2, a3, v3[2], v3[3], v3[4]);
}

void partial apply for closure #1 in MOSuggestionAssetActivityRingsProvider.getExerciseMinutes(completion:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;

  closure #1 in MOSuggestionAssetActivityRingsProvider.getExerciseMinutes(completion:)(a1, a2, a3, *(void (**)(_QWORD))(v3 + 16), *(_QWORD *)(v3 + 24), *(id **)(v3 + 32));
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void partial apply for closure #1 in MOSuggestionAssetActivityRingsProvider.getMoveCalories(completion:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;

  closure #1 in MOSuggestionAssetActivityRingsProvider.getMoveCalories(completion:)(a1, a2, a3, *(void (**)(void *))(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
}

ValueMetadata *type metadata accessor for MOSuggestionAssetActivityRingsConstants()
{
  return &type metadata for MOSuggestionAssetActivityRingsConstants;
}

uint64_t ObjC metadata update function for MOSuggestionAssetActivityRingsProvider()
{
  return type metadata accessor for MOSuggestionAssetActivityRingsProvider(0);
}

uint64_t type metadata accessor for MOSuggestionAssetActivityRingsProvider(uint64_t a1)
{
  uint64_t result;

  result = type metadata singleton initialization cache for MOSuggestionAssetActivityRingsProvider;
  if (!type metadata singleton initialization cache for MOSuggestionAssetActivityRingsProvider)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MOSuggestionAssetActivityRingsProvider);
  return result;
}

uint64_t type metadata completion function for MOSuggestionAssetActivityRingsProvider(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  const char *v9;
  char *v10;

  v4 = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    v7 = (char *)&value witness table for Builtin.UnknownObject + 64;
    v8 = (char *)&value witness table for Builtin.UnknownObject + 64;
    v9 = "\b";
    v10 = (char *)&value witness table for Builtin.Int64 + 64;
    result = swift_updateClassMetadata2(a1, 256, 7, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100059424()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100059434()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in MOSuggestionAssetActivityRingsProvider.getStandMinutes(completion:)(void *a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in closure #1 in MOSuggestionAssetActivityRingsProvider.getStandMinutes(completion:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void MOSuggestionInterstitialListAssetViewModel.__allocating_init(multiPinMapAsset:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t ObjCClassMetadata;
  id v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void (*v59)(uint64_t, char *, uint64_t);
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  id v64;
  uint64_t v65;
  char v66;
  id v67;
  uint64_t v68;
  char v69;
  id v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  void *v74;
  id v75;
  id v76;
  void *v77;
  id v78;
  void *v79;
  void *v80;
  void *v81;
  id v82;
  double v83;
  double v84;
  id v85;
  id v86;
  void *v87;
  id v88;
  double v89;
  double v90;
  id v91;
  id v92;
  id v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  void *v98;
  void *v99;
  id v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  char v107;
  id v108;
  void *v109;
  void *v110;
  void *v111;
  id v112;
  double v113;
  double v114;
  id v115;
  id v116;
  void *v117;
  id v118;
  double v119;
  double v120;
  id v121;
  id v122;
  id v123;
  void *v124;
  uint64_t v125;
  void *v126;
  void *v127;
  void *v128;
  id v129;
  uint64_t v130;
  __objc2_ivar_list **p_ivars;
  __objc2_ivar_list **v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v166;
  unint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  char v174;
  void *v175;
  void *v176;
  void *v177;
  id v178;
  id v179;
  double v180;
  double v181;
  id v182;
  id v183;
  void *v184;
  id v185;
  double v186;
  double v187;
  id v188;
  id v189;
  id v190;
  void *v191;
  uint64_t v192;
  void *v193;
  void *v194;
  void *v195;
  id v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  id v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  NSObject *v228;
  os_log_type_t v229;
  uint8_t *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  id v235;
  id v236;
  id v237;
  __int128 v238;
  uint64_t v239;
  char *v240;
  void *v241;
  uint64_t v242;
  __int128 v243;
  _QWORD *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  void (*v254)(char *, uint64_t, uint64_t, uint64_t);
  char *v255;
  id v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278[3];
  __int128 v279;
  __int128 v280;
  __int128 v281;
  char v282;
  __int128 v283;
  __int128 v284;
  unint64_t v285;
  unint64_t v286;

  v2 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  v252 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v248 = (uint64_t)&v234 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v247 = (uint64_t)&v234 - v6;
  __chkstk_darwin(v5);
  v246 = (uint64_t)&v234 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v8);
  v253 = (char *)&v234 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v258 = *(_QWORD *)(v10 - 8);
  v259 = v10;
  __chkstk_darwin(v10);
  v245 = (char *)&v234 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
  v13 = __chkstk_darwin(v12);
  v255 = (char *)&v234 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v234 - v15;
  v17 = objc_msgSend(a1, "assetType");
  v18 = MOSuggestionAssetsTypeMultiPinMap;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v21 = v20;
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v24 = v22;
  if (v19 == v23 && v21 == v22)
  {

    swift_bridgeObjectRelease_n(v21, 2);
  }
  else
  {
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v23, v22, 0);

    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v24);
    if ((v25 & 1) == 0)
      goto LABEL_9;
  }
  ObjCClassMetadata = swift_getObjCClassMetadata(objc_msgSend(a1, "contentClassType"));
  if (ObjCClassMetadata == type metadata accessor for MOSuggestionGenericFallBackInfo())
  {
LABEL_9:
    if (serverManager._clientConnections != (NSMutableDictionary *)-1)
      goto LABEL_146;
    goto LABEL_10;
  }
  v237 = objc_msgSend(a1, "assetType");
  v285 = (unint64_t)_swiftEmptyArrayStorage;
  v286 = (unint64_t)_swiftEmptyArrayStorage;
  v27 = objc_msgSend(a1, "metadata");
  v28 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v27, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v29 = (void *)MOSuggestionAssetMetadataKeyMultiPinMapLocations;
  *(_QWORD *)&v279 = MOSuggestionAssetMetadataKeyMultiPinMapLocations;
  type metadata accessor for MOSuggestionAssetMetadataKey(0);
  v31 = v30;
  v32 = lazy protocol witness table accessor for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey();
  v33 = v29;
  AnyHashable.init<A>(_:)(&v280, &v279, v31, v32);
  if (*(_QWORD *)(v28 + 16))
  {
    v34 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v280);
    v36 = v252;
    v35 = (uint64_t)v253;
    if ((v37 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v28 + 56) + 32 * v34, (uint64_t)&v283);
    }
    else
    {
      v283 = 0u;
      v284 = 0u;
    }
  }
  else
  {
    v283 = 0u;
    v284 = 0u;
    v36 = v252;
    v35 = (uint64_t)v253;
  }
  swift_bridgeObjectRelease(v28);
  outlined destroy of AnyHashable((uint64_t)&v280);
  if (!*((_QWORD *)&v284 + 1))
  {
    outlined destroy of Any?((uint64_t)&v283, &demangling cache variable for type metadata for Any?);
    goto LABEL_139;
  }
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[MOSuggestionAssetMetadataKey : Any]]);
  if ((swift_dynamicCast(&v279, &v283, (char *)&type metadata for Any + 8, v43, 6) & 1) == 0)
  {
LABEL_139:
    swift_bridgeObjectRelease(v285);
    swift_bridgeObjectRelease(v286);
    if (serverManager._clientConnections != (NSMutableDictionary *)-1)
      swift_once(&serverManager._clientConnections, one-time initialization function for shared);
    v226 = type metadata accessor for Logger(0);
    v227 = __swift_project_value_buffer(v226, (uint64_t)static MOAngelLogger.shared);
    v228 = Logger.logObject.getter(v227);
    v229 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v228, v229))
    {
      v230 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v230 = 0;
      _os_log_impl((void *)&_mh_execute_header, v228, v229, "[MOSuggestionInterstitialListAssetViewModel.multiPinMapAsset] Failed to unwrap metadata", v230, 2u);
      swift_slowDealloc(v230, -1, -1);
    }

    return;
  }
  v44 = v279;
  v251 = *(_QWORD *)(v279 + 16);
  if (!v251)
  {
    swift_bridgeObjectRelease(v279);
    goto LABEL_139;
  }
  v45 = 0;
  v240 = (char *)&type metadata for Any + 8;
  v254 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56);
  v243 = xmmword_10019ED20;
  v238 = xmmword_10019EDA0;
  v244 = _swiftEmptyArrayStorage;
  v249 = _swiftEmptyArrayStorage;
  v250 = v279;
  v241 = a1;
  v242 = v2;
  v257 = v16;
  while (1)
  {
    v260 = v45;
    v47 = *(_QWORD *)(v44 + 8 * v45 + 32);
    v254(v16, 1, 1, v2);
    if (!*(_QWORD *)(v47 + 16))
    {
      v280 = 0u;
      v281 = 0u;
      swift_bridgeObjectRetain(v47);
LABEL_34:
      outlined destroy of Any?((uint64_t)&v280, &demangling cache variable for type metadata for Any?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v258 + 56))(v35, 1, 1, v259);
LABEL_35:
      outlined destroy of Any?(v35, (uint64_t *)&demangling cache variable for type metadata for Date?);
      if (!*(_QWORD *)(v47 + 16))
        goto LABEL_33;
      goto LABEL_36;
    }
    v48 = (void *)MOSuggestionAssetMetadataKeyLocationPreviewVisitStartTime;
    swift_bridgeObjectRetain(v47);
    v49 = v48;
    v50 = specialized __RawDictionaryStorage.find<A>(_:)(v49);
    if ((v51 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v47 + 56) + 32 * v50, (uint64_t)&v280);
    }
    else
    {
      v280 = 0u;
      v281 = 0u;
    }

    if (!*((_QWORD *)&v281 + 1))
      goto LABEL_34;
    v52 = v259;
    v53 = swift_dynamicCast(v35, &v280, (char *)&type metadata for Any + 8, v259, 6);
    v54 = v258;
    v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v258 + 56);
    v55(v35, v53 ^ 1u, 1, v52);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v35, 1, v52) == 1)
      goto LABEL_35;
    v56 = v258;
    v57 = v259;
    v58 = v245;
    (*(void (**)(char *, uint64_t, uint64_t))(v258 + 32))(v245, v35, v259);
    v59 = *(void (**)(uint64_t, char *, uint64_t))(v56 + 16);
    v60 = v246;
    v59(v246, v58, v57);
    v55(v60 + *(int *)(v2 + 20), 1, 1, v57);
    outlined init with copy of MOSuggestionSheetAssetDateRange(v60, v247);
    if ((swift_isUniquelyReferenced_nonNull_native(v244) & 1) == 0)
      v244 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v244[2] + 1, 1, (unint64_t)v244);
    v62 = v244[2];
    v61 = v244[3];
    v16 = v257;
    if (v62 >= v61 >> 1)
      v244 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1, (unint64_t)v244);
    v63 = v244;
    v244[2] = v62 + 1;
    outlined init with take of MOSuggestionSheetAssetDateRange(v247, (uint64_t)v63+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(_QWORD *)(v36 + 72) * v62);
    (*(void (**)(char *, uint64_t))(v258 + 8))(v245, v259);
    outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
    outlined init with take of MOSuggestionSheetAssetDateRange(v246, (uint64_t)v16);
    v254(v16, 0, 1, v2);
    if (!*(_QWORD *)(v47 + 16))
    {
LABEL_33:
      v280 = 0u;
      v281 = 0u;
LABEL_45:
      outlined destroy of Any?((uint64_t)&v280, &demangling cache variable for type metadata for Any?);
LABEL_46:
      v283 = 0uLL;
      goto LABEL_47;
    }
LABEL_36:
    v64 = MOSuggestionAssetMetadataKeyLocationPreviewPlaceName;
    v65 = specialized __RawDictionaryStorage.find<A>(_:)(v64);
    if ((v66 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v47 + 56) + 32 * v65, (uint64_t)&v280);
    }
    else
    {
      v280 = 0u;
      v281 = 0u;
    }

    if (!*((_QWORD *)&v281 + 1))
      goto LABEL_45;
    if ((swift_dynamicCast(&v283, &v280, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
      goto LABEL_46;
    if (*((_QWORD *)&v283 + 1))
    {
      if (!*(_QWORD *)(v47 + 16))
        goto LABEL_65;
      goto LABEL_43;
    }
LABEL_47:
    if (!*(_QWORD *)(v47 + 16))
    {
      v280 = 0u;
      v281 = 0u;
LABEL_63:
      outlined destroy of Any?((uint64_t)&v280, &demangling cache variable for type metadata for Any?);
      v102 = 0;
      v103 = 0;
      goto LABEL_64;
    }
    v70 = MOSuggestionAssetMetadataKeyLocationPreviewCityName;
    v71 = specialized __RawDictionaryStorage.find<A>(_:)(v70);
    if ((v72 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v47 + 56) + 32 * v71, (uint64_t)&v280);
    }
    else
    {
      v280 = 0u;
      v281 = 0u;
    }

    if (!*((_QWORD *)&v281 + 1))
      goto LABEL_63;
    v101 = swift_dynamicCast(&v279, &v280, v240, &type metadata for String, 6);
    v103 = *((_QWORD *)&v279 + 1);
    v102 = v279;
    if (!v101)
    {
      v102 = 0;
      v103 = 0;
    }
LABEL_64:
    v104 = *((_QWORD *)&v283 + 1);
    *(_QWORD *)&v283 = v102;
    *((_QWORD *)&v283 + 1) = v103;
    swift_bridgeObjectRelease(v104);
    if (!*(_QWORD *)(v47 + 16))
    {
LABEL_65:
      v280 = 0u;
      v281 = 0u;
LABEL_66:
      outlined destroy of Any?((uint64_t)&v280, &demangling cache variable for type metadata for Any?);
LABEL_67:
      if (*(_QWORD *)(v47 + 16))
      {
        v105 = MOSuggestionAssetMetadataKeyLocationPreviewTypeOfPlace;
        v106 = specialized __RawDictionaryStorage.find<A>(_:)(v105);
        if ((v107 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(v47 + 56) + 32 * v106, (uint64_t)&v280);
        }
        else
        {
          v280 = 0u;
          v281 = 0u;
        }

        if (*((_QWORD *)&v281 + 1))
        {
          if ((swift_dynamicCast(&v279, &v280, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0
            && (_QWORD)v279 == 2)
          {
            swift_bridgeObjectRelease(v47);
            v108 = objc_msgSend((id)objc_opt_self(GEOFeatureStyleAttributes), "workStyleAttributes");
            if (!v108)
              goto LABEL_155;
            v109 = v108;
            v110 = (void *)objc_opt_self(MKIconManager);
            v111 = (void *)objc_opt_self(UIScreen);
            v112 = objc_msgSend(v111, "mainScreen");
            objc_msgSend(v112, "scale");
            v114 = v113;

            v115 = objc_msgSend(v110, "newFillColorForStyleAttributes:forScale:", v109, v114);
            v116 = v110;
            if (!v115
              || (v117 = v116,
                  v118 = objc_msgSend(v111, "mainScreen"),
                  objc_msgSend(v118, "scale"),
                  v120 = v119,
                  v118,
                  (v121 = objc_msgSend(v117, "imageForStyle:size:forScale:format:", v109, 3, 0, v120)) == 0))
            {

              v46 = (uint64_t)v16;
              v2 = v242;
              v35 = (uint64_t)v253;
              goto LABEL_20;
            }
            v122 = v121;
            v123 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithCGColor:", v115);

            v124 = (void *)objc_opt_self(UIColor);
            v256 = v123;
            v236 = objc_msgSend(v124, "whiteColor");
            v125 = type metadata accessor for MOSuggestionSheetImage();
            v96 = swift_allocObject(v125, 105, 7);
            *(_QWORD *)(v96 + 40) = 0;
            *(_QWORD *)(v96 + 32) = 0;
            *(_QWORD *)(v96 + 24) = 0;
            *(_OWORD *)(v96 + 72) = 0u;
            *(_OWORD *)(v96 + 56) = 0u;
            *(_BYTE *)(v96 + 88) = 1;
            *(_QWORD *)(v96 + 96) = 0;
            *(_BYTE *)(v96 + 104) = 1;
            *(_QWORD *)(v96 + 16) = v122;
            swift_beginAccess(v96 + 24, &v270, 1, 0);
            v126 = *(void **)(v96 + 24);
            *(_QWORD *)(v96 + 24) = v123;
            v36 = v252;

            swift_beginAccess(v96 + 32, &v269, 1, 0);
            v127 = *(void **)(v96 + 32);
            *(_QWORD *)(v96 + 32) = v236;

            swift_beginAccess(v96 + 40, &v268, 1, 0);
            v128 = *(void **)(v96 + 40);
            *(_QWORD *)(v96 + 40) = 0;
            a1 = v241;

            *(_BYTE *)(v96 + 48) = 0;
            swift_beginAccess(v96 + 56, &v267, 1, 0);
            *(_OWORD *)(v96 + 72) = 0u;
            *(_OWORD *)(v96 + 56) = 0u;
            *(_BYTE *)(v96 + 88) = 1;
            swift_beginAccess(v96 + 96, &v266, 1, 0);
            *(_QWORD *)(v96 + 96) = 0xC000000000000000;
            *(_BYTE *)(v96 + 104) = 0;

            v100 = 0;
            v2 = v242;
            goto LABEL_121;
          }
LABEL_80:
          if (*(_QWORD *)(v47 + 16))
          {
            v129 = MOSuggestionAssetMetadataKeyLocationPreviewCityName;
            v130 = specialized __RawDictionaryStorage.find<A>(_:)(v129);
            p_ivars = &MOSuggestionCollectionViewCellConstants.ivars;
            v132 = &MOSuggestionCollectionViewCellConstants.ivars;
            if ((v133 & 1) != 0)
            {
              outlined init with copy of Any(*(_QWORD *)(v47 + 56) + 32 * v130, (uint64_t)&v280);
            }
            else
            {
              v280 = 0u;
              v281 = 0u;
            }

          }
          else
          {
            v280 = 0u;
            v281 = 0u;
            p_ivars = (__objc2_ivar_list **)(&MOSuggestionCollectionViewCellConstants + 48);
            v132 = (__objc2_ivar_list **)(&MOSuggestionCollectionViewCellConstants + 48);
          }
          swift_bridgeObjectRelease(v47);
          if (*((_QWORD *)&v281 + 1))
          {
            if ((swift_dynamicCast(&v279, &v280, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
            {
              v134 = *((_QWORD *)&v279 + 1);
              if (*((_QWORD *)&v283 + 1))
              {
                if (v283 == v279)
                {
                  swift_bridgeObjectRelease(*((_QWORD *)&v279 + 1));
LABEL_115:
                  if (one-time initialization token for cityStyleAttributes != -1)
                    swift_once(&one-time initialization token for cityStyleAttributes, one-time initialization function for cityStyleAttributes);
                  v175 = (void *)static MOPOIAnnotationView.cityStyleAttributes;
                  if (static MOPOIAnnotationView.cityStyleAttributes)
                  {
                    v176 = (void *)objc_opt_self(MKIconManager);
                    v177 = (void *)objc_opt_self(UIScreen);
                    v178 = v175;
                    v179 = objc_msgSend(v177, (SEL)p_ivars[360]);
                    objc_msgSend(v179, (SEL)v132[398]);
                    v181 = v180;

                    v182 = objc_msgSend(v176, "newFillColorForStyleAttributes:forScale:", v178, v181);
                    v183 = v176;
                    if (v182)
                    {
                      v184 = v183;
                      v185 = objc_msgSend(v177, (SEL)p_ivars[360]);
                      objc_msgSend(v185, (SEL)v132[398]);
                      v187 = v186;

                      v188 = objc_msgSend(v184, "imageForStyle:size:forScale:format:", v178, 3, 0, v187);
                      if (v188)
                      {
                        v189 = v188;
                        v190 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithCGColor:", v182);

                        v191 = (void *)objc_opt_self(UIColor);
                        v256 = v190;
                        v236 = objc_msgSend(v191, "whiteColor");
                        v192 = type metadata accessor for MOSuggestionSheetImage();
                        v96 = swift_allocObject(v192, 105, 7);
                        *(_QWORD *)(v96 + 40) = 0;
                        *(_QWORD *)(v96 + 32) = 0;
                        *(_QWORD *)(v96 + 24) = 0;
                        *(_OWORD *)(v96 + 72) = 0u;
                        *(_OWORD *)(v96 + 56) = 0u;
                        *(_BYTE *)(v96 + 88) = 1;
                        *(_QWORD *)(v96 + 96) = 0;
                        *(_BYTE *)(v96 + 104) = 1;
                        *(_QWORD *)(v96 + 16) = v189;
                        swift_beginAccess(v96 + 24, &v275, 1, 0);
                        v193 = *(void **)(v96 + 24);
                        *(_QWORD *)(v96 + 24) = v190;
                        v36 = v252;
                        v2 = v242;

                        swift_beginAccess(v96 + 32, &v274, 1, 0);
                        v194 = *(void **)(v96 + 32);
                        *(_QWORD *)(v96 + 32) = v236;

                        swift_beginAccess(v96 + 40, &v273, 1, 0);
                        v195 = *(void **)(v96 + 40);
                        *(_QWORD *)(v96 + 40) = 0;
                        a1 = v241;

                        *(_BYTE *)(v96 + 48) = 0;
                        swift_beginAccess(v96 + 56, &v272, 1, 0);
                        *(_OWORD *)(v96 + 72) = 0u;
                        *(_OWORD *)(v96 + 56) = 0u;
                        *(_BYTE *)(v96 + 88) = 1;
                        swift_beginAccess(v96 + 96, &v271, 1, 0);
                        *(_QWORD *)(v96 + 96) = 0xC000000000000000;
                        *(_BYTE *)(v96 + 104) = 0;

                        v100 = 0;
LABEL_121:
                        v35 = (uint64_t)v253;
                        v135 = (uint64_t)v255;
                        goto LABEL_97;
                      }
                    }

                  }
                  if (one-time initialization token for genericIconWithColor != -1)
                    swift_once(&one-time initialization token for genericIconWithColor, one-time initialization function for genericIconWithColor);
                  v96 = static MOPOIAnnotationView.genericIconWithColor;
                  swift_retain(static MOPOIAnnotationView.genericIconWithColor);
                  v100 = 0;
LABEL_127:
                  v35 = (uint64_t)v253;
                  v135 = (uint64_t)v255;
                  goto LABEL_97;
                }
                v174 = _stringCompareWithSmolCheck(_:_:expecting:)(v283, *((_QWORD *)&v283 + 1), v279, *((_QWORD *)&v279 + 1), 0);
                swift_bridgeObjectRelease(v134);
                v135 = (uint64_t)v255;
                if ((v174 & 1) != 0)
                  goto LABEL_115;
                goto LABEL_94;
              }
              swift_bridgeObjectRelease(*((_QWORD *)&v279 + 1));
            }
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v280, &demangling cache variable for type metadata for Any?);
          }
          v135 = (uint64_t)v255;
LABEL_94:
          if (one-time initialization token for genericIconWithColor != -1)
            swift_once(&one-time initialization token for genericIconWithColor, one-time initialization function for genericIconWithColor);
          v96 = static MOPOIAnnotationView.genericIconWithColor;
          swift_retain(static MOPOIAnnotationView.genericIconWithColor);
          v100 = 0;
          goto LABEL_97;
        }
      }
      else
      {
        v280 = 0u;
        v281 = 0u;
      }
      outlined destroy of Any?((uint64_t)&v280, &demangling cache variable for type metadata for Any?);
      goto LABEL_80;
    }
LABEL_43:
    v67 = MOSuggestionAssetMetadataKeyLocationPreviewVisitMapItem;
    v68 = specialized __RawDictionaryStorage.find<A>(_:)(v67);
    if ((v69 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v47 + 56) + 32 * v68, (uint64_t)&v280);
    }
    else
    {
      v280 = 0u;
      v281 = 0u;
    }

    if (!*((_QWORD *)&v281 + 1))
      goto LABEL_66;
    v73 = type metadata accessor for MKMapItem();
    if ((swift_dynamicCast(&v279, &v280, (char *)&type metadata for Any + 8, v73, 6) & 1) == 0)
      goto LABEL_67;
    v74 = a1;
    swift_bridgeObjectRelease(v47);
    v75 = (id)v279;
    v76 = objc_msgSend(v75, "_styleAttributes");

    v77 = v75;
    if (v76)
    {
      v256 = v75;
      v78 = objc_msgSend(v75, "_styleAttributes");
      if (!v78)
      {
        __break(1u);
LABEL_155:
        __break(1u);
        swift_release(v280);
        __break(1u);
        return;
      }
      v79 = v78;
      v80 = (void *)objc_opt_self(MKIconManager);
      v81 = (void *)objc_opt_self(UIScreen);
      v82 = objc_msgSend(v81, "mainScreen");
      objc_msgSend(v82, "scale");
      v84 = v83;

      v85 = objc_msgSend(v80, "newFillColorForStyleAttributes:forScale:", v79, v84);
      v86 = v80;
      if (v85)
      {
        v87 = v86;
        v88 = objc_msgSend(v81, "mainScreen");
        objc_msgSend(v88, "scale");
        v90 = v89;

        v91 = objc_msgSend(v87, "imageForStyle:size:forScale:format:", v79, 3, 0, v90);
        if (v91)
        {
          v92 = v91;
          v93 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithCGColor:", v85);

          v94 = (void *)objc_opt_self(UIColor);
          v236 = v93;
          v235 = objc_msgSend(v94, "whiteColor");
          v95 = type metadata accessor for MOSuggestionSheetImage();
          v96 = swift_allocObject(v95, 105, 7);
          *(_QWORD *)(v96 + 40) = 0;
          *(_QWORD *)(v96 + 32) = 0;
          *(_QWORD *)(v96 + 24) = 0;
          *(_OWORD *)(v96 + 72) = 0u;
          *(_OWORD *)(v96 + 56) = 0u;
          *(_BYTE *)(v96 + 88) = 1;
          *(_QWORD *)(v96 + 96) = 0;
          *(_BYTE *)(v96 + 104) = 1;
          *(_QWORD *)(v96 + 16) = v92;
          swift_beginAccess(v96 + 24, &v265, 1, 0);
          v97 = *(void **)(v96 + 24);
          *(_QWORD *)(v96 + 24) = v93;
          v36 = v252;

          swift_beginAccess(v96 + 32, &v264, 1, 0);
          v98 = *(void **)(v96 + 32);
          *(_QWORD *)(v96 + 32) = v235;
          a1 = v241;

          swift_beginAccess(v96 + 40, &v263, 1, 0);
          v99 = *(void **)(v96 + 40);
          *(_QWORD *)(v96 + 40) = 0;

          *(_BYTE *)(v96 + 48) = 0;
          swift_beginAccess(v96 + 56, &v262, 1, 0);
          *(_OWORD *)(v96 + 72) = 0u;
          *(_OWORD *)(v96 + 56) = 0u;
          *(_BYTE *)(v96 + 88) = 1;
          swift_beginAccess(v96 + 96, &v261, 1, 0);
          *(_QWORD *)(v96 + 96) = 0xC000000000000000;
          *(_BYTE *)(v96 + 104) = 0;
          v100 = v256;

          v2 = v242;
          goto LABEL_127;
        }
      }
      v77 = v79;
      v75 = v256;

      v2 = v242;
      v35 = (uint64_t)v253;
    }
    v100 = v75;

    if (one-time initialization token for genericIconWithColor != -1)
      swift_once(&one-time initialization token for genericIconWithColor, one-time initialization function for genericIconWithColor);
    v96 = static MOPOIAnnotationView.genericIconWithColor;
    swift_retain(static MOPOIAnnotationView.genericIconWithColor);
    v135 = (uint64_t)v255;
    a1 = v74;
    v36 = v252;
LABEL_97:
    v136 = *((_QWORD *)&v283 + 1);
    if (*((_QWORD *)&v283 + 1))
      break;

    swift_release(v96);
    v16 = v257;
    v46 = (uint64_t)v257;
LABEL_20:
    v45 = v260 + 1;
    outlined destroy of Any?(v46, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
    swift_bridgeObjectRelease(*((_QWORD *)&v283 + 1));
    v44 = v250;
    if (v251 == v45)
    {
      swift_bridgeObjectRelease(v250);
      swift_bridgeObjectRelease(v285);
      v196 = objc_msgSend(a1, "content");
      v197 = objc_opt_self(UIImage);
      v198 = swift_dynamicCastObjCClass(v196, v197);
      if (!v198)
      {
        swift_bridgeObjectRelease(v249);
        swift_bridgeObjectRelease(v244);
        swift_unknownObjectRelease(v196);

        swift_bridgeObjectRelease(v286);
        return;
      }
      v199 = v198;
      v200 = objc_msgSend(a1, "identifier");
      v201 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v200);
      v203 = v202;

      *(_QWORD *)&v280 = v201;
      *((_QWORD *)&v280 + 1) = v203;
      *(_QWORD *)&v283 = 35;
      *((_QWORD *)&v283 + 1) = 0xE100000000000000;
      v204 = lazy protocol witness table accessor for type String and conformance String();
      v205 = (uint64_t)&v280;
      v206 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v283, &type metadata for String, &type metadata for String, v204, v204);
      if (v206[2])
      {
        v207 = v206;
        v208 = v206[4];
        v209 = v206[5];
        swift_bridgeObjectRetain(v209);
        swift_bridgeObjectRelease(v203);
        swift_bridgeObjectRelease(v207);
        v210 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))(v239 + 344))(v208, v209, 0, 0, 0, 0, 0, 0, 271);
        v201 = (_QWORD *)v210;
        v205 = v286;
        if (!(v286 >> 62))
        {
          v211 = *(_QWORD *)((v286 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_retain(v210);
          if (v211 >= 2)
            goto LABEL_133;
          goto LABEL_137;
        }
      }
      else
      {
        __break(1u);
      }
      if (v205 < 0)
        v231 = v205;
      else
        v231 = v205 & 0xFFFFFFFFFFFFFF8;
      swift_retain(v201);
      swift_bridgeObjectRetain(v205);
      v232 = _CocoaArrayWrapper.endIndex.getter(v231);
      swift_bridgeObjectRelease(v205);
      if (v232 >= 2)
      {
LABEL_133:
        if (v205 < 0 || (v205 & 0x4000000000000000) != 0)
        {
          v233 = swift_bridgeObjectRetain(v205);
          v212 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v233);
          swift_bridgeObjectRelease(v205);
        }
        else
        {
          v212 = v205 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v205);
        }
        *(_QWORD *)&v280 = v212;
        specialized MutableCollection<>.sort(by:)((uint64_t *)&v280);
        swift_bridgeObjectRelease(v205);
        v213 = v280;
        swift_beginAccess(v201 + 2, &v276, 1, 0);
        v205 = v201[2];
        v201[2] = v213;
      }
LABEL_137:
      swift_bridgeObjectRelease(v205);
      v214 = MOSuggestionInterstitialListAssetViewModel._groupAssetTypeAndCountDescription(with:)(0);
      v216 = v215;
      swift_beginAccess(v201 + 3, &v283, 1, 0);
      v217 = v201[4];
      v201[3] = v214;
      v201[4] = v216;
      swift_bridgeObjectRelease(v217);
      swift_beginAccess(v201 + 6, &v279, 1, 0);
      v218 = v201[6];
      v201[6] = v249;
      swift_bridgeObjectRelease(v218);
      v219 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v220 = swift_allocObject(v219, 40, 7);
      *(_OWORD *)(v220 + 16) = v238;
      v280 = 0u;
      v281 = 0u;
      v282 = 1;
      v221 = type metadata accessor for MOSuggestionSheetImage();
      swift_allocObject(v221, 105, 7);
      swift_unknownObjectRetain();
      v222 = MOSuggestionSheetImage.init(image:associatedTintColor:associatedBackgroundColor:tileBackgroundColor:shouldBeRounded:squareCrop:extraMargin:)(v199, 0, 0, 0, 0, (uint64_t)&v280, 0, 1);
      *(_QWORD *)(v220 + 32) = v222;
      v278[0] = v220;
      specialized Array._endMutation()(v222);
      v223 = v278[0];
      swift_unknownObjectRelease(v196);

      swift_beginAccess(v201 + 7, v278, 1, 0);
      v224 = v201[7];
      v201[7] = v223;
      swift_bridgeObjectRelease(v224);
      swift_beginAccess(v201 + 5, &v277, 1, 0);
      v225 = v201[5];
      v201[5] = v244;
      swift_release(v201);
      swift_bridgeObjectRelease(v225);
      return;
    }
  }
  v256 = v100;
  v137 = v283;
  v138 = (uint64_t)v257;
  outlined init with copy of MOSuggestionSheetAssetDateRange?((uint64_t)v257, v135);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v135, 1, v2) == 1)
  {

    swift_release(v96);
    outlined destroy of Any?(v138, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
    v46 = v135;
    v16 = (char *)v138;
    goto LABEL_20;
  }
  v139 = v248;
  outlined init with take of MOSuggestionSheetAssetDateRange(v135, v248);
  swift_bridgeObjectRetain(v136);
  v140 = objc_msgSend(a1, "identifier");
  v141 = static String._unconditionallyBridgeFromObjectiveC(_:)(v140);
  v143 = v142;

  *(_QWORD *)&v280 = v141;
  *((_QWORD *)&v280 + 1) = v143;
  *(_QWORD *)&v279 = 35;
  *((_QWORD *)&v279 + 1) = 0xE100000000000000;
  v144 = lazy protocol witness table accessor for type String and conformance String();
  v145 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v279, &type metadata for String, &type metadata for String, v144, v144);
  if (v145[2])
  {
    v146 = v145;
    v147 = v139;
    v149 = v145[4];
    v148 = v145[5];
    swift_bridgeObjectRetain(v148);
    swift_bridgeObjectRelease(v143);
    swift_bridgeObjectRelease(v146);
    v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionSheetAssetDateRange>);
    v151 = *(unsigned __int8 *)(v36 + 80);
    v152 = (v151 + 32) & ~v151;
    v153 = swift_allocObject(v150, v152 + *(_QWORD *)(v36 + 72), v151 | 7);
    *(_OWORD *)(v153 + 16) = v243;
    outlined init with copy of MOSuggestionSheetAssetDateRange(v147, v153 + v152);
    v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v155 = swift_allocObject(v154, 48, 7);
    *(_OWORD *)(v155 + 16) = v243;
    *(_QWORD *)(v155 + 32) = v137;
    *(_QWORD *)(v155 + 40) = v136;
    v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v157 = swift_allocObject(v156, 40, 7);
    *(_OWORD *)(v157 + 16) = v238;
    *(_QWORD *)(v157 + 32) = v96;
    *(_QWORD *)&v280 = v157;
    specialized Array._endMutation()(v157);
    v158 = v280;
    v159 = type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
    swift_allocObject(v159, *(unsigned int *)(v159 + 48), *(unsigned __int16 *)(v159 + 52));
    swift_bridgeObjectRetain(v136);
    swift_retain(v96);
    v160 = MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(v149, v148, 0, 0, 0, v153, v155, v158, 15, 1, 0, 0);
    *(_BYTE *)(v160 + 90) = 0;
    swift_retain(v160);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v161);
    v163 = *(_QWORD *)((v286 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v162 = *(_QWORD *)((v286 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v163 >= v162 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v162 > 1, v163 + 1, 1);
    v164 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v163, v160);
    specialized Array._endMutation()(v164);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v249);
    v35 = (uint64_t)v253;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v249 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v249[2] + 1, 1, v249);
    v2 = v242;
    v36 = v252;
    v167 = v249[2];
    v166 = v249[3];
    if (v167 >= v166 >> 1)
      v249 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v166 > 1), v167 + 1, 1, v249);
    v168 = v249;
    v249[2] = v167 + 1;
    v169 = &v168[2 * v167];
    v169[4] = v137;
    v169[5] = v136;
    swift_retain(v96);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v170);
    v172 = *(_QWORD *)((v285 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v171 = *(_QWORD *)((v285 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v172 >= v171 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v171 > 1, v172 + 1, 1);
    v173 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v172, v96);
    specialized Array._endMutation()(v173);

    swift_release(v96);
    swift_release(v160);
    outlined destroy of MOSuggestionSheetAssetDateRange(v248);
    v16 = v257;
    v46 = (uint64_t)v257;
    a1 = v241;
    goto LABEL_20;
  }
  __break(1u);
LABEL_146:
  swift_once(&serverManager._clientConnections, one-time initialization function for shared);
LABEL_10:
  v38 = type metadata accessor for Logger(0);
  v39 = __swift_project_value_buffer(v38, (uint64_t)static MOAngelLogger.shared);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "[MOSuggestionInterstitialListAssetViewModel.multiPinMapAsset] Mismatched init for asset type", v42, 2u);
    swift_slowDealloc(v42, -1, -1);
  }

}

_QWORD *specialized _convertToAnyHashable<A>(_:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v9;

  v9 = a1;
  type metadata accessor for MOSuggestionAssetMetadataKey(0);
  v5 = v4;
  v6 = lazy protocol witness table accessor for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey();
  v7 = a1;
  return AnyHashable.init<A>(_:)(a2, &v9, v5, v6);
}

void static MOPOIAnnotationView.iconWithColor(type:mapItem:)(char a1)
{
  __asm { BR              X10 }
}

id sub_10005B064(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  if (!a2)
    goto LABEL_7;
  v2 = a2;
  v3 = objc_msgSend(v2, "_styleAttributes");

  if (!v3)
  {

LABEL_7:
    if (one-time initialization token for genericIconWithColor != -1)
      swift_once(&one-time initialization token for genericIconWithColor, one-time initialization function for genericIconWithColor);
    v6 = (id)static MOPOIAnnotationView.genericIconWithColor;
    swift_retain(static MOPOIAnnotationView.genericIconWithColor);
    return v6;
  }
  v4 = objc_msgSend(v2, "_styleAttributes");
  if (!v4)
  {
    __break(1u);
    JUMPOUT(0x10005B1A8);
  }
  v5 = v4;
  v6 = specialized static MOPOIAnnotationView.poiWithStyle(_:)((uint64_t)v4);

  if (!v6)
    goto LABEL_7;
  return v6;
}

void one-time initialization function for genericIconWithColor()
{
  NSString v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  _OWORD v6[2];
  char v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  if (v1)
  {
    v2 = (void *)objc_opt_self(UIColor);
    v3 = objc_msgSend(v2, "whiteColor");
    v4 = objc_msgSend(v2, "systemIndigoColor");
    memset(v6, 0, sizeof(v6));
    v7 = 1;
    v5 = type metadata accessor for MOSuggestionSheetImage();
    swift_allocObject(v5, 105, 7);
    static MOPOIAnnotationView.genericIconWithColor = MOSuggestionSheetImage.init(image:associatedTintColor:associatedBackgroundColor:tileBackgroundColor:shouldBeRounded:squareCrop:extraMargin:)((uint64_t)v1, (uint64_t)v3, v4, 0, 0, (uint64_t)v6, 0x4010000000000000, 0);
  }
  else
  {
    __break(1u);
  }
}

unint64_t lazy protocol witness table accessor for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey;
  if (!lazy protocol witness table cache variable for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey)
  {
    type metadata accessor for MOSuggestionAssetMetadataKey(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for MOSuggestionAssetMetadataKey, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey);
  }
  return result;
}

uint64_t outlined init with copy of MOSuggestionSheetAssetDateRange?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for MKMapItem()
{
  unint64_t result;
  uint64_t v1;

  result = lazy cache variable for type metadata for MKMapItem;
  if (!lazy cache variable for type metadata for MKMapItem)
  {
    v1 = objc_opt_self(MKMapItem);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MKMapItem);
  }
  return result;
}

id specialized static MOPOIAnnotationView.poiWithStyle(_:)(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  double v5;
  double v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  double v11;
  double v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  _OWORD v20[2];
  char v21;

  v2 = (void *)objc_opt_self(MKIconManager);
  v3 = (void *)objc_opt_self(UIScreen);
  v4 = objc_msgSend(v3, "mainScreen");
  objc_msgSend(v4, "scale");
  v6 = v5;

  v7 = objc_msgSend(v2, "newFillColorForStyleAttributes:forScale:", a1, v6);
  v8 = v2;
  if (!v7)
    return 0;
  v9 = v8;
  v10 = objc_msgSend(v3, "mainScreen");
  objc_msgSend(v10, "scale");
  v12 = v11;

  v13 = objc_msgSend(v9, "imageForStyle:size:forScale:format:", a1, 3, 0, v12);
  if (v13)
  {
    v14 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithCGColor:", v7);

    v15 = (void *)objc_opt_self(UIColor);
    v16 = v14;
    v17 = objc_msgSend(v15, "whiteColor");
    memset(v20, 0, sizeof(v20));
    v21 = 1;
    v18 = type metadata accessor for MOSuggestionSheetImage();
    swift_allocObject(v18, 105, 7);
    v13 = (id)MOSuggestionSheetImage.init(image:associatedTintColor:associatedBackgroundColor:tileBackgroundColor:shouldBeRounded:squareCrop:extraMargin:)((uint64_t)v13, (uint64_t)v14, v17, 0, 0, (uint64_t)v20, 0xC000000000000000, 0);

  }
  return v13;
}

unint64_t lazy protocol witness table accessor for type MOPOIAnnotationView.POIType and conformance MOPOIAnnotationView.POIType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MOPOIAnnotationView.POIType and conformance MOPOIAnnotationView.POIType;
  if (!lazy protocol witness table cache variable for type MOPOIAnnotationView.POIType and conformance MOPOIAnnotationView.POIType)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MOPOIAnnotationView.POIType, &type metadata for MOPOIAnnotationView.POIType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOPOIAnnotationView.POIType and conformance MOPOIAnnotationView.POIType);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MOPOIAnnotationView.POIType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MOPOIAnnotationView.POIType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10005B684 + 4 * byte_10019FB55[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10005B6B8 + 4 * byte_10019FB50[v4]))();
}

uint64_t sub_10005B6B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005B6C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005B6C8);
  return result;
}

uint64_t sub_10005B6D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005B6DCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10005B6E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005B6E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MOPOIAnnotationView.POIType()
{
  return &type metadata for MOPOIAnnotationView.POIType;
}

void one-time initialization function for dayNameFormatter(uint64_t a1)
{
  one-time initialization function for dayNameFormatter(a1, 1162167621, 0xE400000000000000, &static MODateFormatter.dayNameFormatter);
}

uint64_t *MODateFormatter.dayNameFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for dayNameFormatter != -1)
    swift_once(&one-time initialization token for dayNameFormatter, one-time initialization function for dayNameFormatter);
  return &static MODateFormatter.dayNameFormatter;
}

id static MODateFormatter.dayNameFormatter.getter()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for dayNameFormatter, (id *)&static MODateFormatter.dayNameFormatter);
}

void one-time initialization function for monthNameFormatter(uint64_t a1)
{
  one-time initialization function for dayNameFormatter(a1, 1296911693, 0xE400000000000000, &static MODateFormatter.monthNameFormatter);
}

_QWORD *MODateFormatter.monthNameFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for monthNameFormatter != -1)
    swift_once(&one-time initialization token for monthNameFormatter, one-time initialization function for monthNameFormatter);
  return &static MODateFormatter.monthNameFormatter;
}

id static MODateFormatter.monthNameFormatter.getter()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for monthNameFormatter, (id *)&static MODateFormatter.monthNameFormatter);
}

void one-time initialization function for monthDayNumberFormatter(uint64_t a1)
{
  one-time initialization function for dayNameFormatter(a1, 100, 0xE100000000000000, &static MODateFormatter.monthDayNumberFormatter);
}

_QWORD *MODateFormatter.monthDayNumberFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for monthDayNumberFormatter != -1)
    swift_once(&one-time initialization token for monthDayNumberFormatter, one-time initialization function for monthDayNumberFormatter);
  return &static MODateFormatter.monthDayNumberFormatter;
}

id static MODateFormatter.monthDayNumberFormatter.getter()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for monthDayNumberFormatter, (id *)&static MODateFormatter.monthDayNumberFormatter);
}

void one-time initialization function for fullDateFormatter(uint64_t a1)
{
  one-time initialization function for dayNameFormatter(a1, 0x4D4D202C45454545, 0xEC00000064204D4DLL, &static MODateFormatter.fullDateFormatter);
}

uint64_t *MODateFormatter.fullDateFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for fullDateFormatter != -1)
    swift_once(&one-time initialization token for fullDateFormatter, one-time initialization function for fullDateFormatter);
  return &static MODateFormatter.fullDateFormatter;
}

id static MODateFormatter.fullDateFormatter.getter()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for fullDateFormatter, (id *)&static MODateFormatter.fullDateFormatter);
}

id one-time initialization function for yearDateTimeFormatter()
{
  id result;

  result = closure #1 in variable initialization expression of static MODateFormatter.yearDateTimeFormatter();
  static MODateFormatter.yearDateTimeFormatter = (uint64_t)result;
  return result;
}

uint64_t *MODateFormatter.yearDateTimeFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for yearDateTimeFormatter != -1)
    swift_once(&one-time initialization token for yearDateTimeFormatter, one-time initialization function for yearDateTimeFormatter);
  return &static MODateFormatter.yearDateTimeFormatter;
}

id static MODateFormatter.yearDateTimeFormatter.getter()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for yearDateTimeFormatter, (id *)&static MODateFormatter.yearDateTimeFormatter);
}

void one-time initialization function for yearDateFormatter(uint64_t a1)
{
  one-time initialization function for dayNameFormatter(a1, 0x4D4D4D2059595959, 0xEA00000000006420, &static MODateFormatter.yearDateFormatter);
}

uint64_t *MODateFormatter.yearDateFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for yearDateFormatter != -1)
    swift_once(&one-time initialization token for yearDateFormatter, one-time initialization function for yearDateFormatter);
  return &static MODateFormatter.yearDateFormatter;
}

id static MODateFormatter.yearDateFormatter.getter()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for yearDateFormatter, (id *)&static MODateFormatter.yearDateFormatter);
}

id one-time initialization function for fullDateWithTimeFormatter()
{
  id result;

  result = closure #1 in variable initialization expression of static MODateFormatter.yearDateTimeFormatter();
  static MODateFormatter.fullDateWithTimeFormatter = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static MODateFormatter.yearDateTimeFormatter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  Class isa;
  NSString v6;
  uint64_t v8;

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  static Locale.autoupdatingCurrent.getter();
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, "setLocale:", isa);

  objc_msgSend(v4, "setFormattingContext:", 2);
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setLocalizedDateFormatFromTemplate:", v6);

  return v4;
}

uint64_t *MODateFormatter.fullDateWithTimeFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for fullDateWithTimeFormatter != -1)
    swift_once(&one-time initialization token for fullDateWithTimeFormatter, one-time initialization function for fullDateWithTimeFormatter);
  return &static MODateFormatter.fullDateWithTimeFormatter;
}

id static MODateFormatter.fullDateWithTimeFormatter.getter()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for fullDateWithTimeFormatter, (id *)&static MODateFormatter.fullDateWithTimeFormatter);
}

void one-time initialization function for shortDateWithTimeFormatter(uint64_t a1)
{
  one-time initialization function for dayNameFormatter(a1, 0x80E22064204D4D4DLL, 0xAE006D6D3A6A20A2, &static MODateFormatter.shortDateWithTimeFormatter);
}

_QWORD *MODateFormatter.shortDateWithTimeFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for shortDateWithTimeFormatter != -1)
    swift_once(&one-time initialization token for shortDateWithTimeFormatter, one-time initialization function for shortDateWithTimeFormatter);
  return &static MODateFormatter.shortDateWithTimeFormatter;
}

id static MODateFormatter.shortDateWithTimeFormatter.getter()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for shortDateWithTimeFormatter, (id *)&static MODateFormatter.shortDateWithTimeFormatter);
}

void one-time initialization function for shortDateFormatter(uint64_t a1)
{
  one-time initialization function for dayNameFormatter(a1, 0x64204D4D4DLL, 0xE500000000000000, &static MODateFormatter.shortDateFormatter);
}

_QWORD *MODateFormatter.shortDateFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for shortDateFormatter != -1)
    swift_once(&one-time initialization token for shortDateFormatter, one-time initialization function for shortDateFormatter);
  return &static MODateFormatter.shortDateFormatter;
}

id static MODateFormatter.shortDateFormatter.getter()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for shortDateFormatter, (id *)&static MODateFormatter.shortDateFormatter);
}

void one-time initialization function for shortTimeFormatter(uint64_t a1)
{
  one-time initialization function for dayNameFormatter(a1, 1835874922, 0xE400000000000000, &static MODateFormatter.shortTimeFormatter);
}

void one-time initialization function for dayNameFormatter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  Class isa;
  NSString v11;
  uint64_t v12;

  v5 = type metadata accessor for Locale(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  static Locale.autoupdatingCurrent.getter();
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  objc_msgSend(v9, "setLocale:", isa);

  objc_msgSend(v9, "setFormattingContext:", 2);
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setLocalizedDateFormatFromTemplate:", v11);

  *a4 = v9;
}

uint64_t *MODateFormatter.shortTimeFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for shortTimeFormatter != -1)
    swift_once(&one-time initialization token for shortTimeFormatter, one-time initialization function for shortTimeFormatter);
  return &static MODateFormatter.shortTimeFormatter;
}

id static MODateFormatter.shortTimeFormatter.getter()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for shortTimeFormatter, (id *)&static MODateFormatter.shortTimeFormatter);
}

id one-time initialization function for relativeDateFormatter()
{
  id result;

  result = closure #1 in variable initialization expression of static MODateFormatter.relativeDateFormatter();
  static MODateFormatter.relativeDateFormatter = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static MODateFormatter.relativeDateFormatter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  Class isa;
  uint64_t v7;

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSRelativeDateTimeFormatter), "init");
  static Locale.autoupdatingCurrent.getter();
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, "setLocale:", isa);

  objc_msgSend(v4, "setUnitsStyle:", 0);
  objc_msgSend(v4, "setDateTimeStyle:", 1);
  objc_msgSend(v4, "setFormattingContext:", 4);
  return v4;
}

uint64_t *MODateFormatter.relativeDateFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for relativeDateFormatter != -1)
    swift_once(&one-time initialization token for relativeDateFormatter, one-time initialization function for relativeDateFormatter);
  return &static MODateFormatter.relativeDateFormatter;
}

id static MODateFormatter.relativeDateFormatter.getter()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for relativeDateFormatter, (id *)&static MODateFormatter.relativeDateFormatter);
}

id one-time initialization function for durationWithHourMinuteSecondFormatter(uint64_t a1)
{
  return one-time initialization function for durationWithHourMinuteSecondFormatter(a1, 224, &static MODateFormatter.durationWithHourMinuteSecondFormatter);
}

uint64_t *MODateFormatter.durationWithHourMinuteSecondFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for durationWithHourMinuteSecondFormatter != -1)
    swift_once(&one-time initialization token for durationWithHourMinuteSecondFormatter, one-time initialization function for durationWithHourMinuteSecondFormatter);
  return &static MODateFormatter.durationWithHourMinuteSecondFormatter;
}

id static MODateFormatter.durationWithHourMinuteSecondFormatter.getter()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for durationWithHourMinuteSecondFormatter, (id *)&static MODateFormatter.durationWithHourMinuteSecondFormatter);
}

id one-time initialization function for durationWithMinuteSecondFormatter(uint64_t a1)
{
  return one-time initialization function for durationWithHourMinuteSecondFormatter(a1, 192, &static MODateFormatter.durationWithMinuteSecondFormatter);
}

id one-time initialization function for durationWithHourMinuteSecondFormatter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  id result;

  v5 = objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), "init");
  objc_msgSend(v5, "setUnitsStyle:", 0);
  objc_msgSend(v5, "setAllowedUnits:", a2);
  result = objc_msgSend(v5, "setZeroFormattingBehavior:", 0x10000);
  *a3 = v5;
  return result;
}

uint64_t *MODateFormatter.durationWithMinuteSecondFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for durationWithMinuteSecondFormatter != -1)
    swift_once(&one-time initialization token for durationWithMinuteSecondFormatter, one-time initialization function for durationWithMinuteSecondFormatter);
  return &static MODateFormatter.durationWithMinuteSecondFormatter;
}

id static MODateFormatter.durationWithMinuteSecondFormatter.getter()
{
  return default argument 2 of MOSuggestionWorkoutIconGlyphView.init(image:glyphBackgroundColor:glyphTintColor:)(&one-time initialization token for durationWithMinuteSecondFormatter, (id *)&static MODateFormatter.durationWithMinuteSecondFormatter);
}

uint64_t type metadata accessor for MODateFormatter()
{
  return objc_opt_self(_TtC16MomentsUIService15MODateFormatter);
}

const char *MOMomentsFeatureFlags.domain.getter()
{
  return "Moments";
}

uint64_t MOMomentsFeatureFlags.feature.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_10005C130 + 4 * asc_10019FBF0[a1]))("MOAngelEnabled", 14);
}

const char *sub_10005C130()
{
  return "MOInternalEnabled";
}

const char *sub_10005C144()
{
  return "MODevEnabled";
}

const char *sub_10005C158()
{
  return "MOLinkPreviewEnabled";
}

uint64_t protocol witness for FeatureFlagsKey.feature.getter in conformance MOMomentsFeatureFlags()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_10005C194 + 4 * byte_10019FBF4[*v0]))("MOAngelEnabled", 14);
}

const char *sub_10005C194()
{
  return "MOInternalEnabled";
}

const char *sub_10005C1A8()
{
  return "MODevEnabled";
}

const char *sub_10005C1BC()
{
  return "MOLinkPreviewEnabled";
}

const char *MOAppProtectionFeatureFlags.domain.getter()
{
  return "AppProtection";
}

const char *MOAppProtectionFeatureFlags.feature.getter()
{
  return "protected_apps";
}

void MOAppProtectionFeatureFlags.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int MOAppProtectionFeatureFlags.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MOAppProtectionFeatureFlags(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type MOMomentsFeatureFlags and conformance MOMomentsFeatureFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MOMomentsFeatureFlags and conformance MOMomentsFeatureFlags;
  if (!lazy protocol witness table cache variable for type MOMomentsFeatureFlags and conformance MOMomentsFeatureFlags)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MOMomentsFeatureFlags, &type metadata for MOMomentsFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOMomentsFeatureFlags and conformance MOMomentsFeatureFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags;
  if (!lazy protocol witness table cache variable for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MOAppProtectionFeatureFlags, &type metadata for MOAppProtectionFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags;
  if (!lazy protocol witness table cache variable for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MOAppProtectionFeatureFlags, &type metadata for MOAppProtectionFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MOMomentsFeatureFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10005C374 + 4 * byte_10019FBFD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10005C3A8 + 4 * byte_10019FBF8[v4]))();
}

uint64_t sub_10005C3A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005C3B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005C3B8);
  return result;
}

uint64_t sub_10005C3C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005C3CCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10005C3D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005C3D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MOMomentsFeatureFlags()
{
  return &type metadata for MOMomentsFeatureFlags;
}

uint64_t getEnumTagSinglePayload for MOAppProtectionFeatureFlags(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for MOAppProtectionFeatureFlags(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10005C488 + 4 * byte_10019FC02[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10005C4A8 + 4 * byte_10019FC07[v4]))();
}

_BYTE *sub_10005C488(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10005C4A8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10005C4B0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10005C4B8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10005C4C0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10005C4C8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MOAppProtectionFeatureFlags()
{
  return &type metadata for MOAppProtectionFeatureFlags;
}

uint64_t MOSuggestionAssetMediaAnalytics.MediaEngagementEvent.bundleId.getter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain(a2);
  return a1;
}

uint64_t MOSuggestionAssetMediaCoverArtQueryInput.title.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

MomentsUIService::MOProtectedAppSource __swiftcall MOProtectedAppSource.init(fixedAppSource:)(MomentsUIService::MOProtectedFixedAppSource fixedAppSource)
{
  uint64_t v1;
  void *v2;
  MomentsUIService::MOProtectedAppSource result;

  v1 = ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10005C584
                                                                   + 4
                                                                   * asc_10019FD80[fixedAppSource]))(0xD000000000000019, 0x80000001001A5AB0);
  result.bundleIdentifier._object = v2;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t sub_10005C584()
{
  uint64_t v0;

  return v0 - 1;
}

uint64_t MOProtectedFixedAppSource.bundleIdentifier.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10005C670 + 4 * byte_10019FD8A[a1]))(0xD000000000000019, 0x80000001001A5AB0);
}

uint64_t sub_10005C670()
{
  uint64_t v0;

  return v0 - 1;
}

id MOProtectedAppSource.protectionSubject.getter()
{
  void *v0;
  NSString v1;
  id v2;

  v0 = (void *)objc_opt_self(APApplication);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "applicationWithBundleIdentifier:", v1);

  return v2;
}

void one-time initialization function for allFixedApps()
{
  static MOProtectedAppSource.allFixedApps = (uint64_t)&outlined read-only object #0 of one-time initialization function for allFixedApps;
}

uint64_t *MOProtectedAppSource.allFixedApps.unsafeMutableAddressor()
{
  if (one-time initialization token for allFixedApps != -1)
    swift_once(&one-time initialization token for allFixedApps, one-time initialization function for allFixedApps);
  return &static MOProtectedAppSource.allFixedApps;
}

uint64_t static MOProtectedAppSource.allFixedApps.getter()
{
  _BYTE v1[24];

  if (one-time initialization token for allFixedApps != -1)
    swift_once(&one-time initialization token for allFixedApps, one-time initialization function for allFixedApps);
  swift_beginAccess(&static MOProtectedAppSource.allFixedApps, v1, 0, 0);
  return swift_bridgeObjectRetain(static MOProtectedAppSource.allFixedApps);
}

double static MOProtectedAppSource.allFixedApps.setter(uint64_t a1)
{
  uint64_t v2;
  double result;
  _BYTE v4[24];

  if (one-time initialization token for allFixedApps != -1)
    swift_once(&one-time initialization token for allFixedApps, one-time initialization function for allFixedApps);
  swift_beginAccess(&static MOProtectedAppSource.allFixedApps, v4, 1, 0);
  v2 = static MOProtectedAppSource.allFixedApps;
  static MOProtectedAppSource.allFixedApps = a1;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v2).n128_u64[0];
  return result;
}

uint64_t (*static MOProtectedAppSource.allFixedApps.modify(uint64_t a1))()
{
  if (one-time initialization token for allFixedApps != -1)
    swift_once(&one-time initialization token for allFixedApps, one-time initialization function for allFixedApps);
  swift_beginAccess(&static MOProtectedAppSource.allFixedApps, a1, 33, 0);
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

uint64_t MOProtectedAppSource.bundleIdHash.getter()
{
  unint64_t v0;

  v0 = lazy protocol witness table accessor for type String and conformance String();
  return StringProtocol.hash.getter(&type metadata for String, v0);
}

uint64_t MOProtectedAppSource.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(a1, a2, a3);
  return swift_bridgeObjectRelease(a3);
}

uint64_t static MOProtectedAppSource.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

Swift::Int MOProtectedAppSource.hashValue.getter(uint64_t a1, uint64_t a2)
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v5, a1, a2);
  swift_bridgeObjectRelease(a2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MOProtectedAppSource()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MOProtectedAppSource(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v4, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MOProtectedAppSource(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MOProtectedAppSource(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
}

uint64_t MOProtectedFixedAppSource.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10005CB8C + 4 * byte_10019FD94[a1]))(0xD000000000000019, 0x80000001001A5AB0);
}

uint64_t sub_10005CB8C()
{
  uint64_t v0;

  return v0 - 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MOProtectedFixedAppSource(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = MOProtectedFixedAppSource.rawValue.getter(*a1);
  v5 = v4;
  v6 = MOProtectedFixedAppSource.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MOProtectedFixedAppSource()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = MOProtectedFixedAppSource.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double protocol witness for Hashable.hash(into:) in conformance MOProtectedFixedAppSource(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = MOProtectedFixedAppSource.rawValue.getter(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MOProtectedFixedAppSource(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = MOProtectedFixedAppSource.rawValue.getter(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MOProtectedFixedAppSource@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized MOProtectedFixedAppSource.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MOProtectedFixedAppSource@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = MOProtectedFixedAppSource.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id one-time initialization function for accessGuard()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(APGuard), "sharedGuard");
  static MOProtectedAppsManager.accessGuard = (uint64_t)result;
  return result;
}

uint64_t *MOProtectedAppsManager.accessGuard.unsafeMutableAddressor()
{
  if (one-time initialization token for accessGuard != -1)
    swift_once(&one-time initialization token for accessGuard, one-time initialization function for accessGuard);
  return &static MOProtectedAppsManager.accessGuard;
}

id static MOProtectedAppsManager.accessGuard.getter()
{
  if (one-time initialization token for accessGuard != -1)
    swift_once(&one-time initialization token for accessGuard, one-time initialization function for accessGuard);
  return (id)static MOProtectedAppsManager.accessGuard;
}

uint64_t MOProtectedAppsManager.delegate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_delegate;
  swift_beginAccess(v3, v5, 0, 0);
  return outlined init with copy of MOProtectedAppsManagerDelegate?(v3, a1);
}

uint64_t MOProtectedAppsManager.delegate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_delegate;
  swift_beginAccess(v3, v5, 33, 0);
  outlined assign with take of MOProtectedAppsManagerDelegate?(a1, v3);
  return swift_endAccess(v5);
}

uint64_t (*MOProtectedAppsManager.delegate.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_delegate, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOProtectedAppsManager.monitoring.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_monitoring);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_monitoring, v3, 0, 0);
  return *v1;
}

uint64_t MOProtectedAppsManager.monitoring.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_monitoring);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*MOProtectedAppsManager.monitoring.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_monitoring, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOProtectedAppsManager.monitoringSubjects.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_monitoringSubjects);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_monitoringSubjects, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t MOProtectedAppsManager.monitoringSubjects.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_monitoringSubjects);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*MOProtectedAppsManager.monitoringSubjects.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_monitoringSubjects, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

id MOProtectedAppsManager.init()()
{
  _BYTE *v0;
  char *v1;
  objc_super v3;

  v1 = &v0[OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_delegate];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_QWORD *)v1 + 4) = 0;
  v0[OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_monitoring] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_monitoringSubjects] = &_swiftEmptySetSingleton;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for MOProtectedAppsManager();
  return objc_msgSendSuper2(&v3, "init");
}

id MOProtectedAppsManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOProtectedAppsManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

Swift::Void __swiftcall MOProtectedAppsManager.subscribeToChanges(apps:)(Swift::OpaquePointer apps)
{
  _QWORD *v1;
  _QWORD *v2;
  char v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t *, __n128);
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  void (*v11)(uint64_t *, _QWORD, __n128);
  __n128 v12;
  uint64_t v13;
  _QWORD *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[5];

  v2 = v1;
  v27[3] = (uint64_t)&type metadata for MOAppProtectionFeatureFlags;
  v27[4] = lazy protocol witness table accessor for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags();
  v4 = isFeatureEnabled(_:)(v27);
  __swift_destroy_boxed_opaque_existential_1(v27);
  if ((v4 & 1) != 0)
  {
    (*(void (**)(void *))((swift_isaMask & *v2) + 0xA0))(&_swiftEmptySetSingleton);
    v5 = *((_QWORD *)apps._rawValue + 2);
    if (v5)
    {
      v6 = *(uint64_t (**)(uint64_t *, __n128))((swift_isaMask & *v2) + 0xA8);
      swift_bridgeObjectRetain(apps._rawValue);
      v7 = (uint64_t *)((char *)apps._rawValue + 40);
      do
      {
        v8 = *(v7 - 1);
        v9 = *v7;
        v10 = swift_bridgeObjectRetain(*v7);
        v11 = (void (*)(uint64_t *, _QWORD, __n128))v6(v27, v10);
        specialized Set._Variant.insert(_:)(&v25, v8, v9);
        v12 = swift_bridgeObjectRelease(v26);
        v11(v27, 0, v12);
        v7 += 2;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease(apps._rawValue);
    }
    if (one-time initialization token for filtering != -1)
      swift_once(&one-time initialization token for filtering, one-time initialization function for filtering);
    v13 = type metadata accessor for Logger(0);
    __swift_project_value_buffer(v13, (uint64_t)static MOAngelLogger.filtering);
    v14 = v2;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      *(_DWORD *)v17 = 136315138;
      v27[0] = v18;
      v19 = (*(uint64_t (**)(void))((swift_isaMask & *v14) + 0x98))();
      v20 = lazy protocol witness table accessor for type MOProtectedAppSource and conformance MOProtectedAppSource();
      v21 = Set.debugDescription.getter(v19, &type metadata for MOProtectedAppSource, v20);
      v23 = v22;
      swift_bridgeObjectRelease(v19);
      v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v17 + 4);

      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "[subscribeToChanges] monitoring status for sources:%s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

    }
    if (((*(uint64_t (**)(void))((swift_isaMask & *v14) + 0x80))() & 1) == 0)
    {
      v24 = objc_msgSend((id)objc_opt_self(APSubject), "subjectMonitorRegistry");
      swift_unknownObjectRelease(objc_msgSend(v24, "addMonitor:", v14));
      (*(void (**)(uint64_t))((swift_isaMask & *v14) + 0x88))(1);
      swift_unknownObjectRelease(v24);
    }
  }
}

id static MOProtectedAppsManager.shouldDropContentFrom(bundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  void *v3;
  NSString v4;
  id v5;
  id v6;

  v3 = (void *)objc_opt_self(APApplication);
  swift_bridgeObjectRetain(a2);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "applicationWithBundleIdentifier:", v4);
  swift_bridgeObjectRelease(a2);

  v6 = objc_msgSend(v5, "isHidden");
  return v6;
}

void static MOProtectedAppsManager.requiresChallenge(appSources:completion:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  NSString v17;
  id v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[3];
  ValueMetadata *v25;
  unint64_t v26;
  _QWORD *v27;

  v25 = &type metadata for MOAppProtectionFeatureFlags;
  v26 = lazy protocol witness table accessor for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags();
  v6 = isFeatureEnabled(_:)(aBlock);
  __swift_destroy_boxed_opaque_existential_1(aBlock);
  if ((v6 & 1) != 0)
  {
    v7 = swift_allocObject(&unk_1001E6370, 24, 7);
    *(_QWORD *)(v7 + 16) = 0;
    v8 = swift_allocObject(&unk_1001E6398, 17, 7);
    *(_BYTE *)(v8 + 16) = 1;
    v9 = (_QWORD *)swift_allocObject(&unk_1001E63C0, 56, 7);
    v9[2] = v7;
    v9[3] = a1;
    v9[4] = v8;
    v9[5] = a2;
    v9[6] = a3;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = (void *)objc_opt_self(APApplication);
      swift_bridgeObjectRetain_n(a1, 2);
      v22 = v7;
      swift_retain(v7);
      swift_retain(v8);
      swift_retain(a3);
      v23 = a1;
      v12 = (_QWORD *)(a1 + 40);
      do
      {
        v13 = *(v12 - 1);
        v14 = *v12;
        v15 = one-time initialization token for accessGuard;
        swift_bridgeObjectRetain(*v12);
        if (v15 != -1)
          swift_once(&one-time initialization token for accessGuard, one-time initialization function for accessGuard);
        v12 += 2;
        v16 = (void *)static MOProtectedAppsManager.accessGuard;
        v17 = String._bridgeToObjectiveC()();
        v18 = objc_msgSend(v11, "applicationWithBundleIdentifier:", v17);

        v19 = (_QWORD *)swift_allocObject(&unk_1001E63E8, 56, 7);
        v19[2] = v8;
        v19[3] = v13;
        v19[4] = v14;
        v19[5] = partial apply for closure #1 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:);
        v19[6] = v9;
        v26 = (unint64_t)partial apply for closure #2 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:);
        v27 = v19;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSNumber?, @guaranteed Error?) -> ();
        v25 = (ValueMetadata *)&block_descriptor_7;
        v20 = _Block_copy(aBlock);
        v21 = v27;
        swift_retain(v8);
        swift_retain(v9);
        objc_msgSend(v16, "getIsChallengeCurrentlyRequiredForSubject:completion:", v18, v20, swift_release(v21).n128_f64[0]);
        _Block_release(v20);

        --v10;
      }
      while (v10);
      swift_release(v8);
      swift_release(v9);
      swift_bridgeObjectRelease(v23);
      v7 = v22;
    }
    else
    {
      swift_bridgeObjectRetain(a1);
      swift_retain(v7);
      swift_retain(v8);
      swift_retain(a3);
      swift_release(v8);
      swift_release(v9);
    }
    swift_release(v7);
  }
  else
  {
    a2(1);
  }
}

uint64_t closure #1 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(BOOL))
{
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE v15[24];

  v8 = (_QWORD *)(a1 + 16);
  result = swift_beginAccess(a1 + 16, v15, 1, 0);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
  }
  else
  {
    *v8 = v12;
    if (v12 == *(_QWORD *)(a2 + 16))
    {
      v13 = (_BYTE *)(a3 + 16);
      swift_beginAccess(v13, &v14, 0, 0);
      return a4((*v13 & 1) == 0);
    }
  }
  return result;
}

uint64_t closure #2 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(void))
{
  uint64_t (*v6)(void);
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v32;
  _QWORD v33[3];
  _BYTE v34[8];
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];

  v6 = a6;
  v9 = (_BYTE *)(a3 + 16);
  if (a1)
  {
    if ((objc_msgSend(a1, "BOOLValue") & 1) != 0)
    {
      swift_beginAccess(v9, &v36, 1, 0);
      *v9 = 1;
      if (one-time initialization token for filtering != -1)
        swift_once(&one-time initialization token for filtering, one-time initialization function for filtering);
      v10 = type metadata accessor for Logger(0);
      __swift_project_value_buffer(v10, (uint64_t)static MOAngelLogger.filtering);
      v11 = swift_bridgeObjectRetain_n(a5, 2);
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(12, -1);
        v15 = swift_slowAlloc(32, -1);
        v35 = v15;
        *(_DWORD *)v14 = 136315138;
        swift_bridgeObjectRetain(a5);
        v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v14 + 4);
        swift_bridgeObjectRelease_n(a5, 3);
        v16 = "protected apps requires authentication, appSource=%s";
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v12, v13, v16, v14, 0xCu);
        swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v15, -1, -1);
        swift_slowDealloc(v14, -1, -1);

        return v6();
      }
    }
    else
    {
      swift_beginAccess(v9, &v36, 1, 0);
      *v9 = 0;
      if (one-time initialization token for filtering != -1)
        swift_once(&one-time initialization token for filtering, one-time initialization function for filtering);
      v28 = type metadata accessor for Logger(0);
      __swift_project_value_buffer(v28, (uint64_t)static MOAngelLogger.filtering);
      v29 = swift_bridgeObjectRetain_n(a5, 2);
      v12 = Logger.logObject.getter(v29);
      v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(12, -1);
        v15 = swift_slowAlloc(32, -1);
        v35 = v15;
        *(_DWORD *)v14 = 136315138;
        swift_bridgeObjectRetain(a5);
        v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v14 + 4);
        swift_bridgeObjectRelease_n(a5, 3);
        v16 = "protected apps requires no authentication, appSource=%s";
        goto LABEL_16;
      }
    }

    swift_bridgeObjectRelease_n(a5, 2);
    return v6();
  }
  if (one-time initialization token for filtering != -1)
    swift_once(&one-time initialization token for filtering, one-time initialization function for filtering);
  v18 = type metadata accessor for Logger(0);
  __swift_project_value_buffer(v18, (uint64_t)static MOAngelLogger.filtering);
  swift_errorRetain(a2);
  swift_errorRetain(a2);
  v19 = swift_bridgeObjectRetain(a5);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(32, -1);
    v35 = v23;
    *(_DWORD *)v22 = 134218242;
    v37[0] = a5;
    v24 = lazy protocol witness table accessor for type String and conformance String();
    v36 = StringProtocol.hash.getter(&type metadata for String, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v22 + 4);
    swift_bridgeObjectRelease(a5);
    *(_WORD *)(v22 + 12) = 2080;
    if (a2)
    {
      swift_getErrorValue(a2, v34, v33);
      v25 = Error.localizedDescription.getter(v33[1], v33[2]);
      v27 = v26;
    }
    else
    {
      v27 = 0xE700000000000000;
      v25 = 0x6E776F6E6B6E75;
    }
    v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v22 + 14);
    swift_bridgeObjectRelease(v27);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "protected apps unlock, appSource=%ld, error=%s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease(a5);
    swift_errorRelease(a2);
    swift_errorRelease(a2);

  }
  swift_beginAccess(v9, &v36, 1, 0);
  *v9 = 1;
  v6 = a6;
  return v6();
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSNumber?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void static MOProtectedAppsManager.requestAccess(appSources:completion:)(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  NSString v17;
  id v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[3];
  ValueMetadata *v25;
  unint64_t v26;
  _QWORD *v27;

  v25 = &type metadata for MOAppProtectionFeatureFlags;
  v26 = lazy protocol witness table accessor for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags();
  v6 = isFeatureEnabled(_:)(aBlock);
  __swift_destroy_boxed_opaque_existential_1(aBlock);
  if ((v6 & 1) != 0)
  {
    v7 = swift_allocObject(&unk_1001E6370, 24, 7);
    *(_QWORD *)(v7 + 16) = 0;
    v8 = swift_allocObject(&unk_1001E6398, 17, 7);
    *(_BYTE *)(v8 + 16) = 0;
    v9 = (_QWORD *)swift_allocObject(&unk_1001E6438, 56, 7);
    v9[2] = v7;
    v9[3] = a1;
    v9[4] = v8;
    v9[5] = a2;
    v9[6] = a3;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = (void *)objc_opt_self(APApplication);
      swift_bridgeObjectRetain_n(a1, 2);
      v22 = v7;
      swift_retain(v7);
      swift_retain(v8);
      swift_retain(a3);
      v23 = a1;
      v12 = (_QWORD *)(a1 + 40);
      do
      {
        v13 = *(v12 - 1);
        v14 = *v12;
        v15 = one-time initialization token for accessGuard;
        swift_bridgeObjectRetain(*v12);
        if (v15 != -1)
          swift_once(&one-time initialization token for accessGuard, one-time initialization function for accessGuard);
        v12 += 2;
        v16 = (void *)static MOProtectedAppsManager.accessGuard;
        v17 = String._bridgeToObjectiveC()();
        v18 = objc_msgSend(v11, "applicationWithBundleIdentifier:", v17);

        v19 = (_QWORD *)swift_allocObject(&unk_1001E6460, 56, 7);
        v19[2] = v13;
        v19[3] = v14;
        v19[4] = v8;
        v19[5] = partial apply for closure #1 in static MOProtectedAppsManager.requestAccess(appSources:completion:);
        v19[6] = v9;
        v26 = (unint64_t)partial apply for closure #2 in static MOProtectedAppsManager.requestAccess(appSources:completion:);
        v27 = v19;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
        v25 = (ValueMetadata *)&block_descriptor_20;
        v20 = _Block_copy(aBlock);
        v21 = v27;
        swift_retain(v8);
        swift_retain(v9);
        objc_msgSend(v16, "authenticateForSubject:completion:", v18, v20, swift_release(v21).n128_f64[0]);
        _Block_release(v20);

        --v10;
      }
      while (v10);
      swift_release(v8);
      swift_release(v9);
      swift_bridgeObjectRelease(v23);
      v7 = v22;
    }
    else
    {
      swift_bridgeObjectRetain(a1);
      swift_retain(v7);
      swift_retain(v8);
      swift_retain(a3);
      swift_release(v8);
      swift_release(v9);
    }
    swift_release(v7);
  }
  else
  {
    a2(0);
  }
}

uint64_t closure #1 in static MOProtectedAppsManager.requestAccess(appSources:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _BYTE v15[24];

  v8 = (_QWORD *)(a1 + 16);
  result = swift_beginAccess(a1 + 16, v15, 1, 0);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
  }
  else
  {
    *v8 = v12;
    if (v12 == *(_QWORD *)(a2 + 16))
    {
      v13 = (unsigned __int8 *)(a3 + 16);
      swift_beginAccess(v13, &v14, 0, 0);
      return a4(*v13);
    }
  }
  return result;
}

uint64_t closure #2 in static MOProtectedAppsManager.requestAccess(appSources:completion:)(char a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t (*v28)(void);
  _QWORD v29[3];
  _BYTE v30[8];
  uint64_t v31;
  uint64_t v32[3];

  if ((a1 & 1) != 0)
  {
    if (one-time initialization token for filtering != -1)
      swift_once(&one-time initialization token for filtering, one-time initialization function for filtering);
    v9 = type metadata accessor for Logger(0);
    __swift_project_value_buffer(v9, (uint64_t)static MOAngelLogger.filtering);
    v10 = swift_bridgeObjectRetain_n(a4, 2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc(18, -1);
      v14 = swift_slowAlloc(32, -1);
      v32[0] = v14;
      *(_DWORD *)v13 = 136315394;
      swift_bridgeObjectRetain(a4);
      v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v13 + 4);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v13 + 12) = 1024;
      LODWORD(v31) = 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, (char *)&v31 + 4, v13 + 14);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "protected apps unlock, appSource=%s, success=%{BOOL}d", (uint8_t *)v13, 0x12u);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
    }
  }
  else
  {
    if (one-time initialization token for filtering != -1)
      swift_once(&one-time initialization token for filtering, one-time initialization function for filtering);
    v17 = (_BYTE *)(a5 + 16);
    v18 = type metadata accessor for Logger(0);
    __swift_project_value_buffer(v18, (uint64_t)static MOAngelLogger.filtering);
    swift_bridgeObjectRetain(a4);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a4);
    v19 = swift_errorRetain(a2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v28 = a6;
      v22 = swift_slowAlloc(22, -1);
      v23 = swift_slowAlloc(64, -1);
      v32[0] = v23;
      *(_DWORD *)v22 = 136315394;
      swift_bridgeObjectRetain(a4);
      v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v22 + 4);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v22 + 12) = 2080;
      if (a2)
      {
        swift_getErrorValue(a2, v30, v29);
        v24 = Error.localizedDescription.getter(v29[1], v29[2]);
        v26 = v25;
      }
      else
      {
        v26 = 0xE700000000000000;
        v24 = 0x6E776F6E6B6E75;
      }
      v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v22 + 14);
      swift_bridgeObjectRelease(v26);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "protected apps unlock, appSource=%s, error=%s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);

      a6 = v28;
    }
    else
    {
      swift_bridgeObjectRelease_n(a4, 2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
    swift_beginAccess(v17, v32, 1, 0);
    *v17 = 1;
  }
  return a6();
}

void thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

unint64_t specialized MOProtectedFixedAppSource.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MOProtectedFixedAppSource.init(rawValue:), v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

uint64_t outlined init with copy of MOProtectedAppsManagerDelegate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOProtectedAppsManagerDelegate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of MOProtectedAppsManagerDelegate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOProtectedAppsManagerDelegate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for MOProtectedAppsManager()
{
  return objc_opt_self(_TtC16MomentsUIService22MOProtectedAppsManager);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t lazy protocol witness table accessor for type MOProtectedAppSource and conformance MOProtectedAppSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MOProtectedAppSource and conformance MOProtectedAppSource;
  if (!lazy protocol witness table cache variable for type MOProtectedAppSource and conformance MOProtectedAppSource)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MOProtectedAppSource, &type metadata for MOProtectedAppSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOProtectedAppSource and conformance MOProtectedAppSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MOProtectedAppSource and conformance MOProtectedAppSource;
  if (!lazy protocol witness table cache variable for type MOProtectedAppSource and conformance MOProtectedAppSource)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MOProtectedAppSource, &type metadata for MOProtectedAppSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOProtectedAppSource and conformance MOProtectedAppSource);
  }
  return result;
}

void specialized MOProtectedAppsManager.appProtectionSubjectsChanged(_:for:)(uint64_t a1)
{
  _QWORD *v1;
  char v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  _QWORD *v34;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[3];
  ValueMetadata *v63;
  unint64_t v64;

  v63 = &type metadata for MOAppProtectionFeatureFlags;
  v64 = lazy protocol witness table accessor for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags();
  v3 = isFeatureEnabled(_:)(v62);
  __swift_destroy_boxed_opaque_existential_1(v62);
  if ((v3 & 1) != 0)
  {
    if ((unint64_t)a1 >> 62)
      goto LABEL_52;
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v47))
    {
      v5 = 0;
      v6 = a1 & 0xC000000000000001;
      v7 = a1 & 0xFFFFFFFFFFFFFF8;
      v8 = a1 + 32;
      v54 = v1;
      v55 = a1;
      v50 = a1 & 0xC000000000000001;
      v51 = v4;
      v48 = a1 + 32;
      v49 = a1 & 0xFFFFFFFFFFFFFF8;
      while (1)
      {
        if (v6)
        {
          v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        }
        else
        {
          if (v5 >= *(_QWORD *)(v7 + 16))
          {
            __break(1u);
            return;
          }
          v10 = *(id *)(v8 + 8 * v5);
        }
        v11 = v10;
        if (__OFADD__(v5++, 1))
          break;
        v13 = objc_opt_self(APApplication);
        v14 = swift_dynamicCastObjCClass(v11, v13);
        v9 = v11;
        if (v14)
        {
          v15 = (void *)v14;
          v52 = v9;
          v53 = v5;
          v16 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x98);
          v56 = v9;
          v17 = v16();
          v18 = 0;
          a1 = v17 + 56;
          v19 = *(_QWORD *)(v17 + 56);
          v57 = v17;
          v20 = 1 << *(_BYTE *)(v17 + 32);
          if (v20 < 64)
            v21 = ~(-1 << v20);
          else
            v21 = -1;
          v22 = v21 & v19;
          v23 = (unint64_t)(v20 + 63) >> 6;
          if ((v21 & v19) != 0)
          {
LABEL_17:
            v24 = __clz(__rbit64(v22));
            v22 &= v22 - 1;
            v25 = v24 | (v18 << 6);
            goto LABEL_32;
          }
          while (1)
          {
            v26 = v18 + 1;
            if (__OFADD__(v18, 1))
            {
              __break(1u);
              goto LABEL_50;
            }
            if (v26 >= v23)
              goto LABEL_5;
            v27 = *(_QWORD *)(a1 + 8 * v26);
            ++v18;
            if (!v27)
            {
              v18 = v26 + 1;
              if (v26 + 1 >= v23)
                goto LABEL_5;
              v27 = *(_QWORD *)(a1 + 8 * v18);
              if (!v27)
              {
                v18 = v26 + 2;
                if (v26 + 2 >= v23)
                  goto LABEL_5;
                v27 = *(_QWORD *)(a1 + 8 * v18);
                if (!v27)
                {
                  v28 = v26 + 3;
                  if (v28 >= v23)
                  {
LABEL_5:

                    swift_release(v57);
                    v1 = v54;
                    a1 = v55;
                    v6 = v50;
                    v4 = v51;
                    v9 = v52;
                    v5 = v53;
                    v8 = v48;
                    v7 = v49;
                    goto LABEL_6;
                  }
                  v27 = *(_QWORD *)(a1 + 8 * v28);
                  if (!v27)
                  {
                    while (1)
                    {
                      v18 = v28 + 1;
                      if (__OFADD__(v28, 1))
                        goto LABEL_51;
                      if (v18 >= v23)
                        goto LABEL_5;
                      v27 = *(_QWORD *)(a1 + 8 * v18);
                      ++v28;
                      if (v27)
                        goto LABEL_31;
                    }
                  }
                  v18 = v28;
                }
              }
            }
LABEL_31:
            v22 = (v27 - 1) & v27;
            v25 = __clz(__rbit64(v27)) + (v18 << 6);
LABEL_32:
            v29 = (uint64_t *)(*(_QWORD *)(v57 + 48) + 16 * v25);
            v30 = *v29;
            v31 = v29[1];
            swift_bridgeObjectRetain(v31);
            v32 = objc_msgSend(v15, "bundleIdentifier");
            v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
            v1 = v34;

            if (v33 == v30 && v1 == (_QWORD *)v31)
              break;
            v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v1, v30, v31, 0);
            swift_bridgeObjectRelease(v1);
            if ((v36 & 1) != 0)
            {
              v37 = v55;
              goto LABEL_41;
            }
            swift_bridgeObjectRelease(v31);
            if (v22)
              goto LABEL_17;
          }
          swift_bridgeObjectRelease(v55);
          v37 = v31;
LABEL_41:
          swift_bridgeObjectRelease(v37);
          if (one-time initialization token for filtering != -1)
            swift_once(&one-time initialization token for filtering, one-time initialization function for filtering);
          v38 = type metadata accessor for Logger(0);
          __swift_project_value_buffer(v38, (uint64_t)static MOAngelLogger.filtering);
          v39 = swift_bridgeObjectRetain(v31);
          v40 = Logger.logObject.getter(v39);
          v41 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v40, v41))
          {
            v42 = (uint8_t *)swift_slowAlloc(12, -1);
            v43 = swift_slowAlloc(32, -1);
            v62[0] = v43;
            *(_DWORD *)v42 = 136315138;
            swift_bridgeObjectRetain(v31);
            v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v62);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v42 + 4);
            swift_bridgeObjectRelease_n(v31, 3);
            _os_log_impl((void *)&_mh_execute_header, v40, v41, "[subscribeToChanges] App status changed, validating conditions, appBundleId=%s", v42, 0xCu);
            swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v43, -1, -1);
            swift_slowDealloc(v42, -1, -1);

          }
          else
          {

            v44 = swift_bridgeObjectRelease_n(v31, 2);
          }
          (*(void (**)(uint64_t *__return_ptr, uint64_t))((swift_isaMask & *v54) + 0x68))(v62, v44);
          if (v63)
          {
            outlined init with copy of MOProtectedAppsManagerDelegate((uint64_t)v62, (uint64_t)&v58);
            outlined destroy of MOProtectedAppsManagerDelegate?((uint64_t)v62);
            v45 = v60;
            v46 = v61;
            __swift_project_boxed_opaque_existential_1(&v58, v60);
            (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v46);
            swift_release(v57);

            __swift_destroy_boxed_opaque_existential_1(&v58);
          }
          else
          {

            swift_release(v57);
            outlined destroy of MOProtectedAppsManagerDelegate?((uint64_t)v62);
          }
          return;
        }
LABEL_6:

        if (v5 == v4)
          goto LABEL_56;
      }
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      if (a1 < 0)
        v47 = a1;
      else
        v47 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
    }
LABEL_56:
    swift_bridgeObjectRelease(a1);
  }
}

uint64_t sub_10005EE6C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005EE7C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t partial apply for closure #1 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:)()
{
  return partial apply for closure #1 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:));
}

uint64_t sub_10005EE9C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #2 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:)(void *a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(uint64_t (**)(void))(v2 + 40));
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_7(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t objectdestroy_5Tm()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in static MOProtectedAppsManager.requestAccess(appSources:completion:)()
{
  return partial apply for closure #1 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in static MOProtectedAppsManager.requestAccess(appSources:completion:));
}

uint64_t partial apply for closure #1 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:)(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10005EF58()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #2 in static MOProtectedAppsManager.requestAccess(appSources:completion:)(char a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in static MOProtectedAppsManager.requestAccess(appSources:completion:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(uint64_t (**)(void))(v2 + 40));
}

unint64_t lazy protocol witness table accessor for type MOProtectedFixedAppSource and conformance MOProtectedFixedAppSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MOProtectedFixedAppSource and conformance MOProtectedFixedAppSource;
  if (!lazy protocol witness table cache variable for type MOProtectedFixedAppSource and conformance MOProtectedFixedAppSource)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MOProtectedFixedAppSource, &type metadata for MOProtectedFixedAppSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOProtectedFixedAppSource and conformance MOProtectedFixedAppSource);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MOProtectedAppChallengeResult and conformance MOProtectedAppChallengeResult()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MOProtectedAppChallengeResult and conformance MOProtectedAppChallengeResult;
  if (!lazy protocol witness table cache variable for type MOProtectedAppChallengeResult and conformance MOProtectedAppChallengeResult)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MOProtectedAppChallengeResult, &type metadata for MOProtectedAppChallengeResult);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOProtectedAppChallengeResult and conformance MOProtectedAppChallengeResult);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MOProtectedAppAuthenticationResult and conformance MOProtectedAppAuthenticationResult()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MOProtectedAppAuthenticationResult and conformance MOProtectedAppAuthenticationResult;
  if (!lazy protocol witness table cache variable for type MOProtectedAppAuthenticationResult and conformance MOProtectedAppAuthenticationResult)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MOProtectedAppAuthenticationResult, &type metadata for MOProtectedAppAuthenticationResult);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOProtectedAppAuthenticationResult and conformance MOProtectedAppAuthenticationResult);
  }
  return result;
}

uint64_t sub_10005F0BC(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x68))();
}

uint64_t sub_10005F0F4(uint64_t a1, _QWORD **a2)
{
  _BYTE v4[40];

  outlined init with copy of MOProtectedAppsManagerDelegate?(a1, (uint64_t)v4);
  return (*(uint64_t (**)(_BYTE *))((swift_isaMask & **a2) + 0x70))(v4);
}

uint64_t sub_10005F144@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x80))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_10005F188(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((swift_isaMask & **a2) + 0x88))(*a1);
}

uint64_t sub_10005F1C4@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x98))();
  *a2 = result;
  return result;
}

uint64_t sub_10005F204(_QWORD *a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0xA0);
  v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

_QWORD *initializeBufferWithCopyOfBuffer for MOProtectedAppSource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for MOProtectedAppSource(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for MOProtectedAppSource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for MOProtectedAppSource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MOProtectedAppSource(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MOProtectedAppSource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MOProtectedAppSource()
{
  return &type metadata for MOProtectedAppSource;
}

uint64_t getEnumTagSinglePayload for MOProtectedFixedAppSource(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MOProtectedFixedAppSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_10005F458 + 4 * byte_10019FDA3[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_10005F48C + 4 * byte_10019FD9E[v4]))();
}

uint64_t sub_10005F48C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005F494(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005F49CLL);
  return result;
}

uint64_t sub_10005F4A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005F4B0);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_10005F4B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005F4BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MOProtectedFixedAppSource()
{
  return &type metadata for MOProtectedFixedAppSource;
}

ValueMetadata *type metadata accessor for MOProtectedAppChallengeResult()
{
  return &type metadata for MOProtectedAppChallengeResult;
}

uint64_t storeEnumTagSinglePayload for MOProtectedAppChallengeResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10005F53C + 4 * byte_10019FDAD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10005F570 + 4 * byte_10019FDA8[v4]))();
}

uint64_t sub_10005F570(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005F578(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005F580);
  return result;
}

uint64_t sub_10005F58C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005F594);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10005F598(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005F5A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MOProtectedAppAuthenticationResult()
{
  return &type metadata for MOProtectedAppAuthenticationResult;
}

uint64_t outlined destroy of MOProtectedAppsManagerDelegate?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOProtectedAppsManagerDelegate?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of MOProtectedAppsManagerDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

_QWORD *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay16MomentsUIService26MOSuggestionAssetReferenceCG_AHs5NeverOTg5(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_16;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v7)
      break;
    v18 = _swiftEmptyArrayStorage;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v7);
    if (v7 < 0)
    {
      __break(1u);
      return result;
    }
    v9 = 0;
    while (v7 != v9)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a3);
      }
      else
      {
        v10 = *(_QWORD *)(a3 + 8 * v9 + 32);
        swift_retain(v10);
      }
      v16 = v10;
      a1(&v17, &v16);
      v11 = swift_release(v10);
      if (v4)
        return (_QWORD *)swift_release(v18);
      ++v9;
      v12 = v17;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v13 = v18[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
      specialized ContiguousArray._endMutation()(v14);
      if (v7 == v9)
        return v18;
    }
    __break(1u);
LABEL_16:
    if (a3 < 0)
      v15 = a3;
    else
      v15 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(a3);
  }
  return result;
}

void *MOSuggestionAssetAnalytics.Events.assetTransfer.unsafeMutableAddressor()
{
  return &static MOSuggestionAssetAnalytics.Events.assetTransfer;
}

unint64_t static MOSuggestionAssetAnalytics.Events.assetTransfer.getter()
{
  return 0xD00000000000001FLL;
}

void *MOSuggestionAssetAnalytics.AssetTransferEvent.SECONDS_SCALE_FACTOR.unsafeMutableAddressor()
{
  return &static MOSuggestionAssetAnalytics.AssetTransferEvent.SECONDS_SCALE_FACTOR;
}

double static MOSuggestionAssetAnalytics.AssetTransferEvent.SECONDS_SCALE_FACTOR.getter()
{
  return 10000.0;
}

uint64_t MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005F878 + 4 * aQ_2[a1]))(0x74657373416D756ELL, 0xE900000000000073);
}

unint64_t sub_10005F878()
{
  return 0xD000000000000011;
}

unint64_t sub_10005F97C()
{
  return 0xD000000000000013;
}

uint64_t sub_10005F988()
{
  return 0x726566736E617274;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.rawValue.getter(*a1);
  v5 = v4;
  v6 = MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double protocol witness for Hashable.hash(into:) in conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.rawValue.getter(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.rawValue.getter(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t MOSuggestionAssetAnalytics.AssetTransferEvent.numAssets.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t MOSuggestionAssetAnalytics.AssetTransferEvent.numAssets.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void *MOSuggestionAssetAnalytics.AssetTransferEvent.assetsAuthorized.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = v1;
  return v1;
}

void MOSuggestionAssetAnalytics.AssetTransferEvent.assetsAuthorized.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

void (__swiftcall *MOPOIAnnotationViewConfiguration.tileSize.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t MOPOIAnnotationViewConfiguration.numLocations.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t MOPOIAnnotationViewConfiguration.numLocations.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t MOSuggestionAssetAnalytics.AssetTransferEvent.transferID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent(0) + 32);
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t MOSuggestionAssetAnalytics.AssetTransferEvent.transferID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent(0) + 32);
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

void (__swiftcall *MOSuggestionAssetAnalytics.AssetTransferEvent.transferID.modify())()
{
  type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent(0);
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

double MOSuggestionAssetAnalytics.AssetTransferEvent.sheetProcessingTime_Seconds.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent(0) + 36));
}

uint64_t MOSuggestionAssetAnalytics.AssetTransferEvent.sheetProcessingTime_Seconds.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent(0);
  *(double *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

void (__swiftcall *MOSuggestionAssetAnalytics.AssetTransferEvent.sheetProcessingTime_Seconds.modify())()
{
  type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent(0);
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

unint64_t one-time initialization function for fieldTypeToAssetType()
{
  uint64_t v0;
  uint64_t inited;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  unint64_t result;
  _BYTE v23[200];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields, MOSuggestionAssetsType)>);
  inited = swift_initStackObject(v0, v23);
  *(_OWORD *)(inited + 16) = xmmword_1001A01C0;
  *(_BYTE *)(inited + 32) = 1;
  v2 = (void *)MOSuggestionAssetsTypeContactPhoto;
  *(_QWORD *)(inited + 40) = MOSuggestionAssetsTypeContactPhoto;
  *(_BYTE *)(inited + 48) = 2;
  v3 = (void *)MOSuggestionAssetsTypeLivePhoto;
  *(_QWORD *)(inited + 56) = MOSuggestionAssetsTypeLivePhoto;
  *(_BYTE *)(inited + 64) = 3;
  v4 = (void *)MOSuggestionAssetsTypeMultiPinMap;
  *(_QWORD *)(inited + 72) = MOSuggestionAssetsTypeMultiPinMap;
  *(_BYTE *)(inited + 80) = 4;
  v5 = (void *)MOSuggestionAssetsTypeMediaCoverArt;
  *(_QWORD *)(inited + 88) = MOSuggestionAssetsTypeMediaCoverArt;
  *(_BYTE *)(inited + 96) = 5;
  v6 = (void *)MOSuggestionAssetsTypeMotionActivity;
  *(_QWORD *)(inited + 104) = MOSuggestionAssetsTypeMotionActivity;
  *(_BYTE *)(inited + 112) = 6;
  v7 = (void *)MOSuggestionAssetsTypePhoto;
  *(_QWORD *)(inited + 120) = MOSuggestionAssetsTypePhoto;
  *(_BYTE *)(inited + 128) = 7;
  v8 = (void *)MOSuggestionAssetsTypeReflectionPrompt;
  *(_QWORD *)(inited + 136) = MOSuggestionAssetsTypeReflectionPrompt;
  *(_BYTE *)(inited + 144) = 8;
  v9 = (void *)MOSuggestionAssetsTypeVideo;
  *(_QWORD *)(inited + 152) = MOSuggestionAssetsTypeVideo;
  *(_BYTE *)(inited + 160) = 9;
  v10 = (void *)MOSuggestionAssetsTypeWorkout;
  *(_QWORD *)(inited + 168) = MOSuggestionAssetsTypeWorkout;
  *(_BYTE *)(inited + 176) = 10;
  v11 = (void *)MOSuggestionAssetsTypeWorkoutGroup;
  *(_QWORD *)(inited + 184) = MOSuggestionAssetsTypeWorkoutGroup;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  v18 = v8;
  v19 = v9;
  v20 = v10;
  v21 = v11;
  result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  static MOSuggestionAssetAnalytics.AssetTransferEvent.fieldTypeToAssetType = result;
  return result;
}

uint64_t *MOSuggestionAssetAnalytics.AssetTransferEvent.fieldTypeToAssetType.unsafeMutableAddressor()
{
  if (one-time initialization token for fieldTypeToAssetType != -1)
    swift_once(&one-time initialization token for fieldTypeToAssetType, one-time initialization function for fieldTypeToAssetType);
  return &static MOSuggestionAssetAnalytics.AssetTransferEvent.fieldTypeToAssetType;
}

uint64_t static MOSuggestionAssetAnalytics.AssetTransferEvent.fieldTypeToAssetType.getter()
{
  if (one-time initialization token for fieldTypeToAssetType != -1)
    swift_once(&one-time initialization token for fieldTypeToAssetType, one-time initialization function for fieldTypeToAssetType);
  return swift_bridgeObjectRetain(static MOSuggestionAssetAnalytics.AssetTransferEvent.fieldTypeToAssetType);
}

void MOSuggestionAssetAnalytics.AssetTransferEvent.init(bundle:references:transferID:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  __n128 v16;
  uint64_t v17;

  v8 = type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent(0);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + *(int *)(v8 + 36)) = 0;
  *(_QWORD *)(a4 + 16) = objc_msgSend(a1, "bundleSubType");
  *(_QWORD *)(a4 + 24) = objc_msgSend(a1, "bundleSuperType");
  v9 = a4 + *(int *)(v8 + 32);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, a3, v10);
  if (one-time initialization token for shared != -1)
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)static MOSuggestionAssetCacheManager.shared + 256))(a2);
  if (v12)
  {
    v13 = v12;
    if ((unint64_t)a2 >> 62)
    {
      if (a2 < 0)
        v17 = a2;
      else
        v17 = a2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a2);
      v14 = _CocoaArrayWrapper.endIndex.getter(v17);

      swift_bridgeObjectRelease(a2);
    }
    else
    {
      v14 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);

    }
    v15 = swift_bridgeObjectRelease(a2);
    (*(void (**)(uint64_t, uint64_t, __n128))(v11 + 8))(a3, v10, v15);
    *(_QWORD *)a4 = v14;

    *(_QWORD *)(a4 + 8) = v13;
  }
  else
  {

    v16 = swift_bridgeObjectRelease(a2);
    (*(void (**)(uint64_t, uint64_t, __n128))(v11 + 8))(a3, v10, v16);
  }
}

Swift::Void __swiftcall MOSuggestionAssetAnalytics.AssetTransferEvent.send()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __n128 v9;
  _QWORD aBlock[5];
  uint64_t v11;

  v1 = type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin(v1);
  v4 = String._bridgeToObjectiveC()();
  outlined init with copy of MOSuggestionAssetAnalytics.AssetTransferEvent(v0, (uint64_t)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(unsigned __int8 *)(v2 + 80);
  v6 = (v5 + 16) & ~v5;
  v7 = swift_allocObject(&unk_1001E6778, v6 + v3, v5 | 7);
  outlined init with take of MOSuggestionAssetAnalytics.AssetTransferEvent((uint64_t)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6);
  aBlock[4] = partial apply for closure #1 in MOSuggestionAssetAnalytics.AssetTransferEvent.send();
  v11 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = &block_descriptor_8;
  v8 = _Block_copy(aBlock);
  v9 = swift_release(v11);
  AnalyticsSendEventLazy(v4, v8, v9);
  _Block_release(v8);

}

uint64_t closure #1 in MOSuggestionAssetAnalytics.AssetTransferEvent.send()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  double v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  id v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v41;
  int64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46[3];
  _BYTE v47[152];
  uint64_t v48;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject(v2, v47);
  *(_OWORD *)(inited + 16) = xmmword_1001A01D0;
  *(_QWORD *)(inited + 32) = 0x74657373416D756ELL;
  *(_QWORD *)(inited + 40) = 0xE900000000000073;
  *(_QWORD *)(inited + 48) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *a1);
  *(_QWORD *)(inited + 56) = 0xD000000000000011;
  *(_QWORD *)(inited + 64) = 0x80000001001A5D10;
  *(_QWORD *)(inited + 72) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInteger:", a1[2]);
  *(_QWORD *)(inited + 80) = 0xD000000000000013;
  *(_QWORD *)(inited + 88) = 0x80000001001A5D30;
  *(_QWORD *)(inited + 96) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInteger:", a1[3]);
  *(_QWORD *)(inited + 104) = 0x726566736E617274;
  *(_QWORD *)(inited + 112) = 0xEA00000000004449;
  v4 = type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent(0);
  UUID.uuidString.getter();
  v6 = v5;
  v7 = objc_allocWithZone((Class)NSString);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "initWithString:", v8, swift_bridgeObjectRelease(v6).n128_f64[0]);

  *(_QWORD *)(inited + 120) = v9;
  *(_QWORD *)(inited + 128) = 0xD000000000000013;
  *(_QWORD *)(inited + 136) = 0x80000001001A5D50;
  v10 = *(double *)((char *)a1 + *(int *)(v4 + 36)) * 10000.0;
  if ((~*(_QWORD *)&v10 & 0x7FF0000000000000) == 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v10 <= -9.22337204e18)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v10 < 9.22337204e18)
  {
    *(_QWORD *)(inited + 144) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", (uint64_t)v10);
    v11 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    v48 = v11;
    v12 = (void *)a1[1];
    if (!v12)
      goto LABEL_26;
    v13 = v11;
    v14 = one-time initialization token for fieldTypeToAssetType;
    v44 = v12;
    if (v14 != -1)
      swift_once(&one-time initialization token for fieldTypeToAssetType, one-time initialization function for fieldTypeToAssetType);
    v41 = (_QWORD *)(static MOSuggestionAssetAnalytics.AssetTransferEvent.fieldTypeToAssetType + 64);
    v15 = 1 << *(_BYTE *)(static MOSuggestionAssetAnalytics.AssetTransferEvent.fieldTypeToAssetType + 32);
    v16 = -1;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    v17 = v16 & *(_QWORD *)(static MOSuggestionAssetAnalytics.AssetTransferEvent.fieldTypeToAssetType + 64);
    v42 = (unint64_t)(v15 + 63) >> 6;
    v43 = static MOSuggestionAssetAnalytics.AssetTransferEvent.fieldTypeToAssetType;
    swift_bridgeObjectRetain(static MOSuggestionAssetAnalytics.AssetTransferEvent.fieldTypeToAssetType);
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      goto LABEL_24;
    }
    if (v42 > 1)
    {
      v19 = v41[1];
      v20 = 1;
      if (v19)
        goto LABEL_23;
      v20 = 2;
      if (v42 > 2)
      {
        v19 = v41[2];
        if (v19)
          goto LABEL_23;
        v20 = 3;
        if (v42 > 3)
        {
          v19 = v41[3];
          if (!v19)
          {
            v21 = 4;
            if (v42 > 4)
            {
              v19 = v41[4];
              if (v19)
              {
                v20 = 4;
                goto LABEL_23;
              }
              while (1)
              {
                v20 = v21 + 1;
                if (__OFADD__(v21, 1))
                  break;
                if (v20 >= v42)
                  goto LABEL_25;
                v19 = v41[v20];
                ++v21;
                if (v19)
                  goto LABEL_23;
              }
              __break(1u);
              goto LABEL_32;
            }
            goto LABEL_25;
          }
LABEL_23:
          v18 = __clz(__rbit64(v19)) + (v20 << 6);
LABEL_24:
          v22 = *(unsigned __int8 *)(*(_QWORD *)(v43 + 48) + v18);
          v23 = *(void **)(*(_QWORD *)(v43 + 56) + 8 * v18);
          static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
          v25 = v24;
          v23;
          v26 = String._bridgeToObjectiveC()();
          objc_msgSend(v44, "countForObject:", v26, swift_bridgeObjectRelease(v25).n128_f64[0]);

          __asm { BR              X8 }
        }
      }
    }
LABEL_25:
    swift_release(v43);
    v27 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
    v46[0] = v48;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v27, 0xD000000000000013, 0x80000001001A5CF0, isUniquelyReferenced_nonNull_native);
    v48 = v46[0];

    swift_bridgeObjectRelease(0x8000000000000000);
LABEL_26:
    if (serverManager._connectionProperties == (NSMutableDictionary *)-1)
      goto LABEL_27;
    goto LABEL_35;
  }
LABEL_34:
  __break(1u);
LABEL_35:
  swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
LABEL_27:
  v29 = type metadata accessor for Logger(0);
  __swift_project_value_buffer(v29, (uint64_t)static MOAngelLogger.assets);
  v30 = v48;
  v31 = swift_bridgeObjectRetain_n(v48, 2);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = swift_slowAlloc(32, -1);
    v46[0] = v35;
    *(_DWORD *)v34 = 136315138;
    v36 = type metadata accessor for NSObject();
    v37 = Dictionary.debugDescription.getter(v30, &type metadata for String, v36, &protocol witness table for String);
    v39 = v38;
    v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v34 + 4);
    swift_bridgeObjectRelease_n(v30, 2);
    swift_bridgeObjectRelease(v39);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "[analytics] result=%s", v34, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v30, 2);
  }
  swift_beginAccess(&v48, v46, 0, 0);
  return v48;
}

_QWORD *Array<A>.withTransferID(uuid:)(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];

  v3[2] = a1;
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay16MomentsUIService26MOSuggestionAssetReferenceCG_AHs5NeverOTg5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in Array<A>.withTransferID(uuid:), (uint64_t)v3, a2);
}

double closure #1 in Array<A>.withTransferID(uuid:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v8, a2, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  (*(void (**)(char *))(*(_QWORD *)v9 + 200))(v8);
  *a3 = v9;
  *(_QWORD *)&result = swift_retain(v9).n128_u64[0];
  return result;
}

unint64_t specialized MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.init(rawValue:), v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0x10)
    return 16;
  else
    return v3;
}

uint64_t type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1)
{
  uint64_t result;

  result = type metadata singleton initialization cache for MOSuggestionAssetAnalytics.AssetTransferEvent;
  if (!type metadata singleton initialization cache for MOSuggestionAssetAnalytics.AssetTransferEvent)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MOSuggestionAssetAnalytics.AssetTransferEvent);
  return result;
}

uint64_t outlined init with copy of MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100060D54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;

  v8 = v7 + *(int *)(v1 + 32);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t outlined init with take of MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in MOSuggestionAssetAnalytics.AssetTransferEvent.send()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent(0) - 8)
                          + 80);
  return closure #1 in MOSuggestionAssetAnalytics.AssetTransferEvent.send()((_QWORD *)(v0 + ((v1 + 16) & ~v1)));
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

double partial apply for closure #1 in Array<A>.withTransferID(uuid:)@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Array<A>.withTransferID(uuid:)(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields and conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields and conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields;
  if (!lazy protocol witness table cache variable for type MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields and conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields, &type metadata for MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields and conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields);
  }
  return result;
}

uint64_t type metadata accessor for MOSuggestionAssetAnalytics()
{
  return objc_opt_self(_TtC16MomentsUIService26MOSuggestionAssetAnalytics);
}

ValueMetadata *type metadata accessor for MOSuggestionAssetAnalytics.Events()
{
  return &type metadata for MOSuggestionAssetAnalytics.Events;
}

_QWORD *initializeBufferWithCopyOfBuffer for MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  id v13;
  uint64_t v14;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = (void *)a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    v8 = *(int *)(a3 + 32);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for UUID(0);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v13 = v7;
    v12(v9, v10, v11);
    *(_QWORD *)((char *)v4 + *(int *)(a3 + 36)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 36));
  }
  return v4;
}

uint64_t destroy for MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  id v12;

  v6 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v12 = v6;
  v11(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 36)) = *(_QWORD *)(a2 + *(int *)(a3 + 36));
  return a1;
}

_QWORD *assignWithCopy for MOSuggestionAssetAnalytics.AssetTransferEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = (void *)a1[1];
  v7 = (void *)a2[1];
  a1[1] = v7;
  v8 = v7;

  a1[2] = a2[2];
  a1[3] = a2[3];
  v9 = *(int *)(a3 + 32);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 36)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t initializeWithTake for MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 36)) = *(_QWORD *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t assignWithTake for MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(void **)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v8 = *(int *)(a3 + 32);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  *(_QWORD *)(a1 + *(int *)(a3 + 36)) = *(_QWORD *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t getEnumTagSinglePayload for MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100061240);
}

uint64_t sub_100061240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000612D4);
}

uint64_t sub_1000612D4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = "\b";
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_1000614A8 + 4 * byte_1001A0095[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_1000614DC + 4 * byte_1001A0090[v4]))();
}

uint64_t sub_1000614DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000614E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000614ECLL);
  return result;
}

uint64_t sub_1000614F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100061500);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_100061504(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006150C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields()
{
  return &type metadata for MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

void *MOSuggestionInterstitialCarouselViewCell.reuseIdentifier.unsafeMutableAddressor()
{
  return &static MOSuggestionInterstitialCarouselViewCell.reuseIdentifier;
}

unint64_t static MOSuggestionInterstitialCarouselViewCell.reuseIdentifier.getter()
{
  return 0xD000000000000028;
}

uint64_t key path getter for MOSuggestionInterstitialCarouselViewCell.blockUserInteraction : MOSuggestionInterstitialCarouselViewCell@<X0>(_QWORD **a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x70))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject(&unk_1001E69A0, 32, 7);
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for MOSuggestionInterstitialCarouselViewCell.blockUserInteraction : MOSuggestionInterstitialCarouselViewCell(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t (*v7)(uint64_t (*)(), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject(&unk_1001E6978, 32, 7);
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((swift_isaMask & **a2) + 0x78);
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v3, v4);
  return v7(v6, v5);
}

uint64_t MOSuggestionInterstitialCarouselViewCell.blockUserInteraction.getter()
{
  return MOSuggestionInterstitialCarouselViewCell.blockUserInteraction.getter(&OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_blockUserInteraction);
}

uint64_t outlined copy of (@escaping @callee_guaranteed () -> ())?(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t MOSuggestionInterstitialCarouselViewCell.blockUserInteraction.setter(uint64_t a1, uint64_t a2)
{
  return MOSuggestionInterstitialCarouselViewCell.blockUserInteraction.setter(a1, a2, &OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_blockUserInteraction);
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t (*MOSuggestionInterstitialCarouselViewCell.blockUserInteraction.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_blockUserInteraction, a1, 33, 0);
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

uint64_t key path getter for MOSuggestionInterstitialCarouselViewCell.unBlockUserInteraction : MOSuggestionInterstitialCarouselViewCell@<X0>(_QWORD **a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x88))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject(&unk_1001E6950, 32, 7);
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for MOSuggestionInterstitialCarouselViewCell.unBlockUserInteraction : MOSuggestionInterstitialCarouselViewCell(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t (*v7)(uint64_t (*)(), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject(&unk_1001E6928, 32, 7);
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((swift_isaMask & **a2) + 0x90);
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v3, v4);
  return v7(v6, v5);
}

uint64_t MOSuggestionInterstitialCarouselViewCell.unBlockUserInteraction.getter()
{
  return MOSuggestionInterstitialCarouselViewCell.blockUserInteraction.getter(&OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_unBlockUserInteraction);
}

uint64_t MOSuggestionInterstitialCarouselViewCell.blockUserInteraction.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _BYTE v5[24];

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess(v2, v5, 0, 0);
  v3 = *v2;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(*v2, v2[1]);
  return v3;
}

uint64_t MOSuggestionInterstitialCarouselViewCell.unBlockUserInteraction.setter(uint64_t a1, uint64_t a2)
{
  return MOSuggestionInterstitialCarouselViewCell.blockUserInteraction.setter(a1, a2, &OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_unBlockUserInteraction);
}

uint64_t MOSuggestionInterstitialCarouselViewCell.blockUserInteraction.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  v6 = (uint64_t *)(v3 + *a3);
  swift_beginAccess(v6, v10, 1, 0);
  v7 = *v6;
  v8 = v6[1];
  *v6 = a1;
  v6[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v7, v8);
}

uint64_t (*MOSuggestionInterstitialCarouselViewCell.unBlockUserInteraction.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_unBlockUserInteraction, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

Swift::Void __swiftcall MOSuggestionInterstitialCarouselViewCell.updateAssetView()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = v0;
  v2 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA0);
  v3 = v2();
  if (v3)
  {
    v4 = v3;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 808))(1);
    v3 = swift_release(v4);
  }
  v5 = *(_QWORD **)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetView);
  v6 = ((uint64_t (*)(uint64_t))v2)(v3);
  (*(void (**)(uint64_t))((swift_isaMask & *v5) + 0xA0))(v6);
}

uint64_t MOSuggestionInterstitialCarouselViewCell.assetViewModel.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetViewModel;
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetViewModel, v3, 0, 0);
  return swift_weakLoadStrong(v1);
}

uint64_t MOSuggestionInterstitialCarouselViewCell.assetViewModel.setter(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char v12[24];

  v2 = v1;
  v4 = (char *)v1 + OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetViewModel;
  swift_beginAccess(v4, v12, 1, 0);
  v5 = swift_weakAssign(v4, a1);
  v6 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xA0);
  v7 = v6(v5);
  if (v7)
  {
    v8 = v7;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 808))(1);
    v7 = swift_release(v8);
  }
  v9 = *(_QWORD **)((char *)v2 + OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetView);
  v10 = v6(v7);
  (*(void (**)(uint64_t))((swift_isaMask & *v9) + 0xA0))(v10);
  return swift_release(a1);
}

void (*MOSuggestionInterstitialCarouselViewCell.assetViewModel.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetViewModel;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  v3[3] = swift_weakLoadStrong(v5);
  return MOSuggestionInterstitialCarouselViewCell.assetViewModel.modify;
}

void MOSuggestionInterstitialCarouselViewCell.assetViewModel.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  swift_weakAssign(*(_QWORD *)(*(_QWORD *)a1 + 32) + *(_QWORD *)(*(_QWORD *)a1 + 40), v4);
  if ((a2 & 1) != 0)
  {
    swift_release(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    v5 = (_QWORD *)v3[4];
    swift_endAccess(v3);
    v6 = swift_release(v4);
    v7 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v5) + 0xA0);
    v8 = v7(v6);
    if (v8)
    {
      v9 = v8;
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 808))(1);
      v8 = swift_release(v9);
    }
    v10 = *(_QWORD **)(v3[4] + OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetView);
    v11 = v7(v8);
    (*(void (**)(uint64_t))((swift_isaMask & *v10) + 0xA0))(v11);
  }
  free(v3);
}

Swift::Void __swiftcall MOSuggestionInterstitialCarouselViewCell.setupViews()()
{
  char *v0;
  _QWORD *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  double v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void (*v14)(uint64_t, _UNKNOWN **);
  uint64_t v15;

  v1 = *(_QWORD **)&v0[OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetView];
  objc_msgSend(v0, "addSubview:", v1);
  v2 = (void *)objc_opt_self(UIColor);
  v3 = objc_msgSend(v2, "clearColor");
  objc_msgSend(v0, "setBackgroundColor:", v3);

  objc_msgSend(v0, "setClipsToBounds:", 0);
  v4 = objc_msgSend(v0, "layer");
  objc_msgSend(v4, "setCornerRadius:", 7.0);

  v5 = objc_msgSend(v0, "layer");
  v6 = objc_msgSend(v2, "blackColor");
  v7 = objc_msgSend(v6, "CGColor");

  objc_msgSend(v5, "setShadowColor:", v7);
  v8 = objc_msgSend(v0, "layer");
  LODWORD(v9) = 1036831949;
  objc_msgSend(v8, "setShadowOpacity:", v9);

  v10 = objc_msgSend(v0, "layer");
  objc_msgSend(v10, "setShadowOffset:", 0.0, 2.0);

  v11 = objc_msgSend(v0, "layer");
  objc_msgSend(v11, "setShadowRadius:", 4.0);

  v12 = objc_msgSend(v0, "layer");
  objc_msgSend(v12, "setCornerCurve:", kCACornerCurveContinuous);

  v13 = objc_msgSend(v0, "layer");
  objc_msgSend(v13, "setShadowPathIsBounds:", 1);

  v14 = *(void (**)(uint64_t, _UNKNOWN **))((swift_isaMask & *v1) + 0x88);
  v15 = swift_unknownObjectRetain();
  v14(v15, &protocol witness table for MOSuggestionInterstitialCarouselViewCell);
}

id MOSuggestionInterstitialCarouselViewCell.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionInterstitialCarouselViewCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

Swift::Void __swiftcall MOSuggestionInterstitialCarouselViewCell.layoutSubviews()()
{
  char *v0;
  void *v1;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionInterstitialCarouselViewCell();
  objc_msgSendSuper2(&v2, "layoutSubviews");
  v1 = *(void **)&v0[OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetView];
  objc_msgSend(v0, "bounds");
  objc_msgSend(v1, "setFrame:");
}

Swift::Void __swiftcall MOSuggestionInterstitialCarouselViewCell.shouldBlockUserSelection()()
{
  _QWORD *v0;
  void (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void (*)(void))(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x70))();
  if (v1)
  {
    v3 = (uint64_t)v1;
    v4 = v2;
    v1();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v3, v4);
  }
}

Swift::Void __swiftcall MOSuggestionInterstitialCarouselViewCell.shouldUnblockUserSelection()()
{
  _QWORD *v0;
  void (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void (*)(void))(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x88))();
  if (v1)
  {
    v3 = (uint64_t)v1;
    v4 = v2;
    v1();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v3, v4);
  }
}

id specialized MOSuggestionInterstitialCarouselViewCell.init(frame:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  char *v4;
  char *v5;
  char *v6;
  id v7;
  objc_super v9;

  v1 = OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetView;
  v2 = type metadata accessor for MOSuggestionSheetAssetView();
  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  v4 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v3, "init");
  v5 = &v4[OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_blockUserInteraction];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v6 = &v4[OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_unBlockUserInteraction];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  swift_weakInit(&v4[OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetViewModel]);

  v9.receiver = v4;
  v9.super_class = (Class)type metadata accessor for MOSuggestionInterstitialCarouselViewCell();
  v7 = objc_msgSendSuper2(&v9, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  MOSuggestionInterstitialCarouselViewCell.setupViews()();

  return v7;
}

void specialized MOSuggestionInterstitialCarouselViewCell.init(coder:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;

  v1 = OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetView;
  v2 = type metadata accessor for MOSuggestionSheetAssetView();
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)), "init");
  v3 = &v0[OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_blockUserInteraction];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = &v0[OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_unBlockUserInteraction];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  swift_weakInit(&v0[OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetViewModel]);

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001A6460, "MomentsUIService/MOSuggestionInterstitialCarouselViewCell.swift", 63, 2, 27, 0);
  __break(1u);
}

uint64_t type metadata accessor for MOSuggestionInterstitialCarouselViewCell()
{
  return objc_opt_self(_TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell);
}

uint64_t sub_1000622BC@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xA0))();
  *a2 = result;
  return result;
}

uint64_t sub_1000622FC(_QWORD *a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0xA8);
  v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t sub_10006233C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

char *MOSuggestionLivePhotoView.__allocating_init(livePhoto:frame:shouldAutoPlay:size:)(void *a1, int a2, char a3, double a4, double a5, double a6, double a7)
{
  objc_class *v7;
  id v15;

  v15 = objc_allocWithZone(v7);
  return MOSuggestionLivePhotoView.init(livePhoto:frame:shouldAutoPlay:size:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t MOSuggestionLivePhotoView.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_delegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_delegate, v3, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t MOSuggestionLivePhotoView.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  v5 = v2 + OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_delegate;
  swift_beginAccess(v5, v7, 1, 0);
  *(_QWORD *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1);
}

void (*MOSuggestionLivePhotoView.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return MOSuggestionSheetAssetGridView.delegate.modify;
}

char *MOSuggestionLivePhotoView.init(livePhoto:frame:shouldAutoPlay:size:)(void *a1, int a2, char a3, double a4, double a5, double a6, double a7)
{
  char *v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  id v23;
  char *v24;
  id v25;
  double v26;
  double v27;
  double v28;
  double v29;
  id v30;
  objc_class *v31;
  char *v32;
  void *v33;
  char *v34;
  id v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  NSString v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  double v50;
  void *v51;
  id v52;
  id v53;
  void *v54;
  id v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  CGFloat v64;
  id v65;
  id v66;
  id v67;
  UIAccessibilityTraits v68;
  char *v69;
  unint64_t v70;
  UIAccessibilityTraits v71;
  void *v72;
  char *v73;
  id v74;
  Swift::String v75;
  Swift::String v76;
  void *object;
  NSString v78;
  __n128 v79;
  void *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t);
  id v103;
  _QWORD aBlock[5];
  uint64_t v105;
  objc_super v106;
  Swift::String v107;
  CGRect v108;
  CGRect v109;

  LODWORD(v102) = a2;
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v100 = *(_QWORD *)(v14 - 8);
  v101 = v14;
  __chkstk_darwin(v14);
  v99 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for DispatchQoS(0);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v96 = (char *)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for DispatchTime(0);
  v94 = *(_QWORD *)(v95 - 8);
  v17 = __chkstk_darwin(v95);
  v19 = (char *)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v93 - v20;
  v22 = &v7[OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_delegate];
  *((_QWORD *)v22 + 1) = 0;
  swift_unknownObjectWeakInit(v22);
  v23 = objc_allocWithZone((Class)PHLivePhotoView);
  v24 = v7;
  v25 = objc_msgSend(v23, "initWithFrame:", a4, a5, a6, a7);
  *(_QWORD *)&v24[OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_livePhotoView] = v25;
  if (one-time initialization token for checkPlatterViewSize != -1)
    swift_once(&one-time initialization token for checkPlatterViewSize, one-time initialization function for checkPlatterViewSize);
  v26 = CGRectMake_0();
  v30 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithFrame:", v26, v27, v28, v29);
  *(_QWORD *)&v24[OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_iconView] = v30;

  v31 = (objc_class *)type metadata accessor for MOSuggestionLivePhotoView();
  v106.receiver = v24;
  v106.super_class = v31;
  v32 = (char *)objc_msgSendSuper2(&v106, "initWithFrame:", a4, a5, a6, a7);
  v33 = *(void **)&v32[OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_livePhotoView];
  v34 = v32;
  v103 = a1;
  objc_msgSend(v33, "setLivePhoto:", a1);
  objc_msgSend(v33, "setContentMode:", 2);
  objc_msgSend(v34, "addSubview:", v33);
  objc_msgSend(v33, "setDelegate:", v34);
  v35 = v33;
  v36 = UIView.fillSuper(margin:)(0.0);

  swift_bridgeObjectRelease(v36);
  if (a3 == 8)
  {
    v37 = OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_iconView;
    v38 = *(id *)&v34[OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_iconView];
    v39 = String._bridgeToObjectiveC()();
    v40 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v39);

    objc_msgSend(v38, "setImage:", v40);
    v41 = *(void **)&v34[v37];
    v42 = (void *)objc_opt_self(UIColor);
    v43 = v41;
    v44 = objc_msgSend(v42, "whiteColor");
    objc_msgSend(v43, "setTintColor:", v44);

    v45 = objc_msgSend(*(id *)&v34[v37], "layer");
    v46 = objc_msgSend(v42, "blackColor");
    v47 = objc_msgSend(v46, "CGColor");

    objc_msgSend(v45, "setShadowColor:", v47);
    v48 = objc_msgSend(*(id *)&v34[v37], "layer");
    objc_msgSend(v48, "setShadowRadius:", 2.0);

    v49 = objc_msgSend(*(id *)&v34[v37], "layer");
    LODWORD(v50) = 1045220557;
    objc_msgSend(v49, "setShadowOpacity:", v50);

    v51 = *(void **)&v34[v37];
    v52 = objc_msgSend(v51, "layer");
    objc_msgSend(v51, "bounds");
    objc_msgSend(v52, "setCornerRadius:", CGRectGetHeight(v108) * 0.5);

    v53 = objc_msgSend(*(id *)&v34[v37], "layer");
    objc_msgSend(v53, "setShadowOffset:", 0.0, 0.0);

    v54 = *(void **)&v34[v37];
    v55 = objc_msgSend(v54, "layer");
    objc_msgSend(v54, "bounds");
    v57 = v56;
    v59 = v58;
    v61 = v60;
    v63 = v62;
    objc_msgSend(v54, "bounds");
    v64 = CGRectGetHeight(v109) * 0.5;
    v65 = objc_msgSend((id)objc_opt_self(UIBezierPath), "bezierPathWithRoundedRect:cornerRadius:", v57, v59, v61, v63, v64);
    v66 = objc_msgSend(v65, "CGPath");

    objc_msgSend(v55, "setShadowPath:", v66);
    v67 = objc_msgSend(*(id *)&v34[v37], "layer");
    objc_msgSend(v67, "setShadowPathIsBounds:", 1);

    objc_msgSend(v34, "addSubview:", *(_QWORD *)&v34[v37]);
  }
  objc_msgSend(v34, "setIsAccessibilityElement:", 1);
  v68 = UIAccessibilityTraitImage;
  v69 = v34;
  v70 = (unint64_t)objc_msgSend(v69, "accessibilityTraits");
  if ((v68 & ~v70) != 0)
    v71 = v68;
  else
    v71 = 0;
  objc_msgSend(v69, "setAccessibilityTraits:", v71 | v70);

  objc_msgSend(v69, "setAccessibilityIgnoresInvertColors:", 1);
  v72 = (void *)objc_opt_self(NSBundle);
  v73 = v69;
  v74 = objc_msgSend(v72, "mainBundle");
  v107._object = (void *)0x80000001001A8D60;
  v75._countAndFlagsBits = 0x6F6850206576694CLL;
  v75._object = (void *)0xEA00000000006F74;
  v76._countAndFlagsBits = 0;
  v76._object = (void *)0xE000000000000000;
  v107._countAndFlagsBits = 0xD00000000000002FLL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v75, (Swift::String_optional)0, (NSBundle)v74, v76, v107)._object;

  v78 = String._bridgeToObjectiveC()();
  objc_msgSend(v73, "setAccessibilityLabel:", v78, swift_bridgeObjectRelease(object).n128_f64[0]);

  if ((v102 & 1) != 0)
  {
    type metadata accessor for OS_dispatch_queue();
    v80 = (void *)static OS_dispatch_queue.main.getter(v79);
    static DispatchTime.now()(v80);
    v81 = v21;
    + infix(_:_:)(v19, 1.0);
    v102 = *(void (**)(char *, uint64_t))(v94 + 8);
    v82 = v95;
    v102(v19, v95);
    v83 = swift_allocObject(&unk_1001E69D0, 24, 7);
    swift_unknownObjectWeakInit(v83 + 16);
    aBlock[4] = partial apply for closure #1 in MOSuggestionLivePhotoView.init(livePhoto:frame:shouldAutoPlay:size:);
    v105 = v83;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_9;
    v84 = _Block_copy(aBlock);
    swift_release(v105);
    v85 = v96;
    static DispatchQoS.unspecified.getter(v86);
    aBlock[0] = _swiftEmptyArrayStorage;
    v87 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    v88 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    v89 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    v90 = v99;
    v91 = v101;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v88, v89, v101, v87);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v81, v85, v90, v84);

    _Block_release(v84);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v90, v91);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v85, v98);
    v102(v81, v82);
  }
  else
  {

  }
  return v73;
}

void closure #1 in MOSuggestionLivePhotoView.init(livePhoto:frame:shouldAutoPlay:size:)(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _BYTE v7[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    objc_msgSend(Strong, "setMuted:", 1);

  }
  swift_beginAccess(v1, &v6, 0, 0);
  v4 = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, "startPlaybackWithStyle:", 2);

  }
}

void MOSuggestionLivePhotoView.init(coder:)()
{
  char *v0;

  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001A6460, "MomentsUIService/MOSuggestionLivePhotoView.swift", 48, 2, 66, 0);
  __break(1u);
}

void MOSuggestionLivePhotoView.updateCrop(_:)(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  id v9;
  CGRect v10;

  v10.origin.x = 0.0;
  v10.origin.y = 0.0;
  v10.size.width = 0.0;
  v10.size.height = 0.0;
  if (!CGRectEqualToRect(*(CGRect *)&a1, v10))
    objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_livePhotoView), "setContentsRect:", a1, a2, a3, a4);
  v9 = objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_livePhotoView), "layer");
  objc_msgSend(v9, "setNeedsDisplay");

}

void MOSuggestionLivePhotoView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer("MomentsUIService.MOSuggestionLivePhotoView", 42, "init(frame:)", 12, 0);
  __break(1u);
}

id MOSuggestionLivePhotoView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionLivePhotoView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

double CGRectMake_0()
{
  return 8.0;
}

uint64_t type metadata accessor for MOSuggestionLivePhotoView()
{
  return objc_opt_self(_TtC16MomentsUIService25MOSuggestionLivePhotoView);
}

uint64_t sub_1000631E4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in MOSuggestionLivePhotoView.init(livePhoto:frame:shouldAutoPlay:size:)()
{
  uint64_t v0;

  closure #1 in MOSuggestionLivePhotoView.init(livePhoto:frame:shouldAutoPlay:size:)(v0);
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_9(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void specialized MOSuggestionLivePhotoView.livePhotoView(_:willBeginPlaybackWith:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  NSObject *oslog;

  v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x68))();
  if (v1)
  {
    v3 = v1;
    v4 = v2;
    ObjectType = swift_getObjectType(v1);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
    swift_unknownObjectRelease(v3);
  }
  if (serverManager._clientConnections != (NSMutableDictionary *)-1)
    swift_once(&serverManager._clientConnections, one-time initialization function for shared);
  v6 = type metadata accessor for Logger(0);
  v7 = __swift_project_value_buffer(v6, (uint64_t)static MOAngelLogger.shared);
  oslog = Logger.logObject.getter(v7);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v8, "[MOSuggestionLivePhotoView] shouldBlockUserSelection", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

}

void specialized MOSuggestionLivePhotoView.livePhotoView(_:didEndPlaybackWith:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  NSObject *oslog;

  v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x68))();
  if (v1)
  {
    v3 = v1;
    v4 = v2;
    ObjectType = swift_getObjectType(v1);
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4);
    swift_unknownObjectRelease(v3);
  }
  if (serverManager._clientConnections != (NSMutableDictionary *)-1)
    swift_once(&serverManager._clientConnections, one-time initialization function for shared);
  v6 = type metadata accessor for Logger(0);
  v7 = __swift_project_value_buffer(v6, (uint64_t)static MOAngelLogger.shared);
  oslog = Logger.logObject.getter(v7);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v8, "[MOSuggestionLivePhotoView] shouldUnblockUserSelection", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

}

uint64_t sub_100063440@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x68))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100063480(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0x70);
  v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

id MOSuggestionSheetJournalButton.__allocating_init(frame:isSingleCell:)(char a1, double a2, double a3, double a4, double a5)
{
  objc_class *v5;
  _BYTE *v11;
  _QWORD *v12;
  id v13;
  objc_super v15;

  v11 = objc_allocWithZone(v5);
  v12 = &v11[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped];
  *v12 = 0;
  v12[1] = 0;
  v11[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_singleCellAsset] = a1;
  v15.receiver = v11;
  v15.super_class = v5;
  v13 = objc_msgSendSuper2(&v15, "initWithFrame:", a2, a3, a4, a5);
  MOSuggestionSheetJournalButton.sharedInit()();

  return v13;
}

uint64_t key path getter for MOSuggestionSheetJournalButton.buttonTapped : MOSuggestionSheetJournalButton@<X0>(_QWORD **a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x60))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject(&unk_1001E6A68, 32, 7);
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for MOSuggestionSheetJournalButton.buttonTapped : MOSuggestionSheetJournalButton(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t (*v7)(uint64_t (*)(), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject(&unk_1001E6A40, 32, 7);
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((swift_isaMask & **a2) + 0x68);
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v3, v4);
  return v7(v6, v5);
}

uint64_t MOSuggestionSheetJournalButton.buttonTapped.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped, v4, 0, 0);
  v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(*v1, v1[1]);
  return v2;
}

uint64_t MOSuggestionSheetJournalButton.buttonTapped.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped);
  swift_beginAccess(v5, v9, 1, 0);
  v6 = *v5;
  v7 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v6, v7);
}

uint64_t (*MOSuggestionSheetJournalButton.buttonTapped.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped, a1, 33, 0);
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

id MOSuggestionSheetJournalButton.init(frame:isSingleCell:)(char a1, double a2, double a3, double a4, double a5)
{
  _BYTE *v5;
  _QWORD *v10;
  id v11;
  objc_super v13;

  v10 = &v5[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped];
  *v10 = 0;
  v10[1] = 0;
  v5[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_singleCellAsset] = a1;
  v13.receiver = v5;
  v13.super_class = (Class)type metadata accessor for MOSuggestionSheetJournalButton();
  v11 = objc_msgSendSuper2(&v13, "initWithFrame:", a2, a3, a4, a5);
  MOSuggestionSheetJournalButton.sharedInit()();

  return v11;
}

id MOSuggestionSheetJournalButton.init(coder:)(void *a1)
{
  _BYTE *v1;
  _QWORD *v3;
  id v4;
  id v5;
  id v6;
  objc_super v8;

  v3 = &v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped];
  *v3 = 0;
  v3[1] = 0;
  v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_singleCellAsset] = 0;
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for MOSuggestionSheetJournalButton();
  v4 = objc_msgSendSuper2(&v8, "initWithCoder:", a1);
  v5 = v4;
  if (v4)
  {
    v6 = v4;
    MOSuggestionSheetJournalButton.sharedInit()();

  }
  return v5;
}

Swift::Void __swiftcall MOSuggestionSheetJournalButton.setPublicUI(_:)(Swift::Bool a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  char **v12;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v13 - v8;
  UIButton.configuration.getter(v7);
  v10 = type metadata accessor for UIButton.Configuration(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    outlined init with copy of UIButton.Configuration?((uint64_t)v9, (uint64_t)v6);
    UIButton.configuration.setter(v6);
    outlined destroy of UIButton.Configuration?((uint64_t)v9);
  }
  else
  {
    v11 = (void *)objc_opt_self(UIColor);
    v12 = &selRef_systemBlueColor;
    if (!a1)
      v12 = &selRef_systemIndigoColor;
    UIButton.Configuration.baseForegroundColor.setter(objc_msgSend(v11, *v12));
    UIButton.configuration.setter(v9);
  }
  objc_msgSend(v1, "setNeedsUpdateConfiguration");
}

uint64_t MOSuggestionSheetJournalButton.sharedInit()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  id v17;
  Class isa;
  id v19;
  NSString v20;
  id v21;
  const UIContentSizeCategory *v22;
  id v23;
  Swift::String v24;
  Swift::String v25;
  void *object;
  NSString v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  __chkstk_darwin(v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UIButton.Configuration.CornerStyle(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UIButton.Configuration.Size(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for UIButton.Configuration(0);
  v13 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIButton.Configuration.filled()(objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0));
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for UIButton.Configuration.Size.medium(_:), v9);
  UIButton.Configuration.buttonSize.setter(v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v5);
  UIButton.Configuration.cornerStyle.setter(v8);
  v16 = (void *)objc_opt_self(UIColor);
  UIButton.Configuration.baseBackgroundColor.setter(objc_msgSend(v16, "tertiarySystemFillColor"));
  UIButton.Configuration.baseForegroundColor.setter(objc_msgSend(v16, "systemIndigoColor"));
  v17 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleCaption2);
  isa = UIFont.withWeight(_:)(UIFontWeightSemibold).super.isa;

  v19 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithFont:", isa);
  v20 = String._bridgeToObjectiveC()();
  v21 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v20, v19);

  UIButton.Configuration.image.setter(v21);
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_singleCellAsset))
    v22 = &UIContentSizeCategoryExtraLarge;
  else
    v22 = &UIContentSizeCategoryAccessibilityMedium;
  objc_msgSend(v1, "setMaximumContentSizeCategory:", *v22);
  v23 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v34._countAndFlagsBits = 0xD00000000000002ELL;
  v34._object = (void *)0x80000001001A8F30;
  v24._countAndFlagsBits = 0x206C616E72756F4ALL;
  v24._object = (void *)0xEB00000000776F4ELL;
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v34)._object;

  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v1, "setAccessibilityLabel:", v27);

  v28 = v33;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v4, v15, v33);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v4, 0, 1, v28);
  UIButton.configuration.setter(v4);
  type metadata accessor for UIAction();
  v29 = swift_allocObject(&unk_1001E6A90, 24, 7);
  swift_unknownObjectWeakInit(v29 + 16, v1);
  v30 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, partial apply for closure #1 in MOSuggestionSheetJournalButton.sharedInit(), v29);
  objc_msgSend(v1, "addAction:forControlEvents:", v30, 64);

  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v28);
}

uint64_t type metadata accessor for MOSuggestionSheetJournalButton()
{
  return objc_opt_self(_TtC16MomentsUIService30MOSuggestionSheetJournalButton);
}

void closure #1 in MOSuggestionSheetJournalButton.sharedInit()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *Strong;
  void *v4;
  void (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  Strong = (_QWORD *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    v5 = (void (*)(void))(*(uint64_t (**)(void))((swift_isaMask & *Strong) + 0x60))();
    if (v5)
    {
      v7 = (uint64_t)v5;
      v8 = v6;
      v5();
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v7, v8);
    }

  }
}

void MOSuggestionSheetJournalButton.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer("MomentsUIService.MOSuggestionSheetJournalButton", 47, "init(frame:)", 12, 0);
  __break(1u);
}

id MOSuggestionSheetJournalButton.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetJournalButton();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10006401C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t type metadata accessor for UIAction()
{
  unint64_t result;
  uint64_t v1;

  result = lazy cache variable for type metadata for UIAction;
  if (!lazy cache variable for type metadata for UIAction)
  {
    v1 = objc_opt_self(UIAction);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  }
  return result;
}

uint64_t sub_10006407C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in MOSuggestionSheetJournalButton.sharedInit()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in MOSuggestionSheetJournalButton.sharedInit()(a1, v1);
}

id MOSuggestionCollectionViewHeader.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  id v9;
  void *v10;
  id v11;
  id v12;
  objc_super v14;

  *(_QWORD *)&v4[OBJC_IVAR____TtC16MomentsUIService32MOSuggestionCollectionViewHeader_titleLabel] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC16MomentsUIService32MOSuggestionCollectionViewHeader_subTitleLabel] = 0;
  v14.receiver = v4;
  v14.super_class = (Class)type metadata accessor for MOSuggestionCollectionViewHeader();
  v9 = objc_msgSendSuper2(&v14, "initWithFrame:", a1, a2, a3, a4);
  v10 = (void *)objc_opt_self(UIColor);
  v11 = v9;
  v12 = objc_msgSend(v10, "secondarySystemBackgroundColor");
  objc_msgSend(v11, "setBackgroundColor:", v12);

  return v11;
}

uint64_t type metadata accessor for MOSuggestionCollectionViewHeader()
{
  return objc_opt_self(_TtC16MomentsUIService32MOSuggestionCollectionViewHeader);
}

void MOSuggestionCollectionViewHeader.init(coder:)()
{
  char *v0;

  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService32MOSuggestionCollectionViewHeader_titleLabel] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService32MOSuggestionCollectionViewHeader_subTitleLabel] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001A6460, "MomentsUIService/MOSuggestionCollectionViewHeader.swift", 55, 2, 32, 0);
  __break(1u);
}

Swift::Void __swiftcall MOSuggestionCollectionViewHeader.layoutSubviews()()
{
  char *v0;
  uint64_t v1;
  id v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  void *object;
  NSString v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  Class isa;
  id v25;
  id v26;
  id v27;
  id v28;
  objc_super v29;
  Swift::String v30;

  v29.receiver = v0;
  v29.super_class = (Class)type metadata accessor for MOSuggestionCollectionViewHeader();
  objc_msgSendSuper2(&v29, "layoutSubviews");
  v1 = OBJC_IVAR____TtC16MomentsUIService32MOSuggestionCollectionViewHeader_titleLabel;
  if (!*(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService32MOSuggestionCollectionViewHeader_titleLabel])
  {
    v2 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
    v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v4._object = (void *)0x80000001001A8FA0;
    v30._object = (void *)0x80000001001A8FA0;
    v4._countAndFlagsBits = 0xD000000000000019;
    v5._countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    v30._countAndFlagsBits = 0xD000000000000019;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v30)._object;

    v7 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "setText:", v7, swift_bridgeObjectRelease(object).n128_f64[0]);

    v8 = objc_msgSend((id)objc_opt_self(UIFont), "boldSystemFontOfSize:", 15.0);
    objc_msgSend(v2, "setFont:", v8);

    v9 = (void *)objc_opt_self(UIColor);
    v10 = objc_msgSend(v9, "labelColor");
    objc_msgSend(v2, "setTextColor:", v10);

    v11 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v2;
    v12 = v2;

    objc_msgSend(v0, "addSubview:", v12);
    objc_msgSend(v12, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v13 = (void *)objc_opt_self(NSLayoutConstraint);
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v15 = swift_allocObject(v14, 48, 7);
    *(_OWORD *)(v15 + 16) = xmmword_10019F870;
    v16 = objc_msgSend(v12, "topAnchor");
    v17 = objc_msgSend(v0, "topAnchor");
    v18 = objc_msgSend(v16, "constraintEqualToAnchor:", v17);

    *(_QWORD *)(v15 + 32) = v18;
    v19 = objc_msgSend(v12, "centerXAnchor");
    v20 = objc_msgSend(v0, "centerXAnchor");
    v21 = objc_msgSend(v19, "constraintEqualToAnchor:", v20);

    *(_QWORD *)(v15 + 40) = v21;
    specialized Array._endMutation()(v22);
    v23 = v15;
    type metadata accessor for NSLayoutConstraint();
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v13, "activateConstraints:", isa, swift_bridgeObjectRelease(v23).n128_f64[0]);

    v25 = objc_msgSend(v12, "heightAnchor");
    v26 = objc_msgSend(v25, "constraintEqualToConstant:", 50.0);

    objc_msgSend(v26, "setActive:", 1);
    v27 = v12;
    v28 = objc_msgSend(v9, "secondarySystemBackgroundColor");
    objc_msgSend(v27, "setBackgroundColor:", v28);

  }
}

id MOSuggestionCollectionViewHeader.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionCollectionViewHeader();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for Constants()
{
  return objc_opt_self(_TtC16MomentsUIServiceP33_9C1763807BF5D3C1FEEF4308FE44E26F9Constants);
}

{
  return objc_opt_self(_TtC16MomentsUIServiceP33_549EE6D0D74C50ED29ACB0307DB42A219Constants);
}

{
  return objc_opt_self(_TtC16MomentsUIServiceP33_DA9E162AFE355D60562ED9A9192A567A9Constants);
}

{
  return objc_opt_self(_TtC16MomentsUIServiceP33_68128ADEE9C432E6DE58ED171BA377259Constants);
}

{
  return objc_opt_self(_TtC16MomentsUIServiceP33_E60C2CDD990134FD49F10FDF8A4D88FE9Constants);
}

{
  return objc_opt_self(_TtC16MomentsUIServiceP33_678EEFF8A21E3B03CC763417644FC1589Constants);
}

{
  return objc_opt_self(_TtC16MomentsUIServiceP33_271D2716D145D00E6C4F3B141B7DFC9C9Constants);
}

{
  return objc_opt_self(_TtC16MomentsUIServiceP33_AC256D580F167A79FA69EF4065BC61AD9Constants);
}

{
  return objc_opt_self(_TtC16MomentsUIServiceP33_CA39EDEF807D759D646E82273DC410139Constants);
}

int64x2_t one-time initialization function for avatarBaseSize()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4056000000000000uLL);
  static MOSuggestionAssetSnowglobeEffect.avatarBaseSize = (__int128)result;
  return result;
}

void one-time initialization function for avatarLayout()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[CGRect]>);
  v1 = swift_allocObject(v0, 88, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1001A02E0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
  v3 = swift_allocObject(v2, 64, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10019ED20;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = v5;
  *(_QWORD *)(v3 + 48) = v6;
  *(_QWORD *)(v3 + 56) = v7;
  *(_QWORD *)(v1 + 32) = v3;
  v8 = swift_allocObject(v2, 96, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10019EEE0;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(_QWORD *)(v8 + 32) = v9;
  *(_QWORD *)(v8 + 40) = v10;
  *(_QWORD *)(v8 + 48) = v11;
  *(_QWORD *)(v8 + 56) = v12;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(_QWORD *)(v8 + 64) = v13;
  *(_QWORD *)(v8 + 72) = v14;
  *(_QWORD *)(v8 + 80) = v15;
  *(_QWORD *)(v8 + 88) = v16;
  *(_QWORD *)(v1 + 40) = v8;
  v17 = swift_allocObject(v2, 128, 7);
  *(_OWORD *)(v17 + 16) = xmmword_10019F2D0;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(_QWORD *)(v17 + 32) = v18;
  *(_QWORD *)(v17 + 40) = v19;
  v20 = v18;
  v88 = v19;
  v89 = v18;
  v21 = v19;
  *(_QWORD *)(v17 + 48) = v22;
  *(_QWORD *)(v17 + 56) = v23;
  v24 = v22;
  v25 = v23;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  v93 = v26;
  *(_QWORD *)(v17 + 64) = v27;
  *(_QWORD *)(v17 + 72) = v28;
  v29 = v27;
  v98 = v28;
  v99 = v27;
  v30 = v28;
  *(_QWORD *)(v17 + 80) = v31;
  *(_QWORD *)(v17 + 88) = v26;
  v32 = v31;
  v97 = v31;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  v91 = v34;
  v92 = v33;
  v90 = v35;
  v37 = v36;
  *(_QWORD *)(v17 + 96) = v33;
  *(_QWORD *)(v17 + 104) = v34;
  *(_QWORD *)(v17 + 112) = v35;
  *(_QWORD *)(v17 + 120) = v36;
  v96 = v36;
  *(_QWORD *)(v1 + 48) = v17;
  v38 = swift_allocObject(v2, 160, 7);
  *(_OWORD *)(v38 + 16) = xmmword_10019ED30;
  *(_QWORD *)(v38 + 32) = v20;
  *(_QWORD *)(v38 + 40) = v21;
  v84 = v25;
  v85 = v24;
  *(_QWORD *)(v38 + 48) = v24;
  *(_QWORD *)(v38 + 56) = v25;
  *(_QWORD *)(v38 + 64) = v29;
  *(_QWORD *)(v38 + 72) = v30;
  *(_QWORD *)(v38 + 80) = v32;
  *(_QWORD *)(v38 + 88) = v93;
  *(_QWORD *)(v38 + 96) = v92;
  *(_QWORD *)(v38 + 104) = v91;
  *(_QWORD *)(v38 + 112) = v90;
  *(_QWORD *)(v38 + 120) = v37;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  v40 = v39;
  v42 = v41;
  v94 = v44;
  v95 = v43;
  *(_QWORD *)(v38 + 128) = v39;
  *(_QWORD *)(v38 + 136) = v41;
  v86 = v41;
  v87 = v39;
  *(_QWORD *)(v38 + 144) = v43;
  *(_QWORD *)(v38 + 152) = v44;
  *(_QWORD *)(v1 + 56) = v38;
  v45 = swift_allocObject(v2, 192, 7);
  *(_OWORD *)(v45 + 16) = xmmword_1001A01D0;
  *(_QWORD *)(v45 + 32) = v89;
  *(_QWORD *)(v45 + 40) = v88;
  *(_QWORD *)(v45 + 48) = v24;
  *(_QWORD *)(v45 + 56) = v25;
  *(_QWORD *)(v45 + 64) = v99;
  *(_QWORD *)(v45 + 72) = v98;
  *(_QWORD *)(v45 + 80) = v97;
  *(_QWORD *)(v45 + 88) = v93;
  *(_QWORD *)(v45 + 96) = v92;
  *(_QWORD *)(v45 + 104) = v91;
  *(_QWORD *)(v45 + 112) = v90;
  *(_QWORD *)(v45 + 120) = v96;
  *(_QWORD *)(v45 + 128) = v40;
  *(_QWORD *)(v45 + 136) = v42;
  *(_QWORD *)(v45 + 144) = v95;
  *(_QWORD *)(v45 + 152) = v94;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  v47 = v46;
  v49 = v48;
  v51 = v50;
  v53 = v52;
  *(_QWORD *)(v45 + 160) = v46;
  *(_QWORD *)(v45 + 168) = v48;
  *(_QWORD *)(v45 + 176) = v50;
  *(_QWORD *)(v45 + 184) = v52;
  *(_QWORD *)(v1 + 64) = v45;
  v54 = swift_allocObject(v2, 224, 7);
  *(_OWORD *)(v54 + 16) = xmmword_1001A02F0;
  *(_QWORD *)(v54 + 32) = v89;
  *(_QWORD *)(v54 + 40) = v88;
  *(_QWORD *)(v54 + 48) = v85;
  *(_QWORD *)(v54 + 56) = v84;
  *(_QWORD *)(v54 + 64) = v99;
  *(_QWORD *)(v54 + 72) = v98;
  *(_QWORD *)(v54 + 80) = v97;
  *(_QWORD *)(v54 + 88) = v93;
  *(_QWORD *)(v54 + 96) = v92;
  *(_QWORD *)(v54 + 104) = v91;
  *(_QWORD *)(v54 + 112) = v90;
  *(_QWORD *)(v54 + 120) = v96;
  *(_QWORD *)(v54 + 128) = v87;
  *(_QWORD *)(v54 + 136) = v86;
  *(_QWORD *)(v54 + 144) = v95;
  *(_QWORD *)(v54 + 152) = v94;
  *(_QWORD *)(v54 + 160) = v47;
  *(_QWORD *)(v54 + 168) = v49;
  *(_QWORD *)(v54 + 176) = v51;
  *(_QWORD *)(v54 + 184) = v53;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(_QWORD *)(v54 + 192) = v55;
  *(_QWORD *)(v54 + 200) = v56;
  *(_QWORD *)(v54 + 208) = v57;
  *(_QWORD *)(v54 + 216) = v58;
  *(_QWORD *)(v1 + 72) = v54;
  v59 = swift_allocObject(v2, 256, 7);
  *(_OWORD *)(v59 + 16) = xmmword_1001A02E0;
  *(_QWORD *)(v59 + 32) = v89;
  *(_QWORD *)(v59 + 40) = v88;
  *(_QWORD *)(v59 + 48) = v85;
  *(_QWORD *)(v59 + 56) = v84;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(_QWORD *)(v59 + 64) = v60;
  *(_QWORD *)(v59 + 72) = v61;
  *(_QWORD *)(v59 + 80) = v62;
  *(_QWORD *)(v59 + 88) = v63;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(_QWORD *)(v59 + 96) = v64;
  *(_QWORD *)(v59 + 104) = v65;
  *(_QWORD *)(v59 + 112) = v66;
  *(_QWORD *)(v59 + 120) = v67;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(_QWORD *)(v59 + 128) = v68;
  *(_QWORD *)(v59 + 136) = v69;
  *(_QWORD *)(v59 + 144) = v70;
  *(_QWORD *)(v59 + 152) = v71;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(_QWORD *)(v59 + 160) = v72;
  *(_QWORD *)(v59 + 168) = v73;
  *(_QWORD *)(v59 + 176) = v74;
  *(_QWORD *)(v59 + 184) = v75;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(_QWORD *)(v59 + 192) = v76;
  *(_QWORD *)(v59 + 200) = v77;
  *(_QWORD *)(v59 + 208) = v78;
  *(_QWORD *)(v59 + 216) = v79;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(_QWORD *)(v59 + 224) = v80;
  *(_QWORD *)(v59 + 232) = v81;
  *(_QWORD *)(v59 + 240) = v82;
  *(_QWORD *)(v59 + 248) = v83;
  *(_QWORD *)(v1 + 80) = v59;
  static MOSuggestionAssetSnowglobeEffect.avatarLayout = (_UNKNOWN *)v1;
}

UIImage *UIImage.composedOf(with:rects:targetSize:backgroundColor:)(uint64_t a1, uint64_t a2, void *a3, CGFloat a4, CGFloat a5)
{
  void *v5;
  UIImage *result;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  id v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  UIImage *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  CGRect v35;

  UIGraphicsBeginImageContext(*(CGSize *)&a4);
  objc_msgSend(a3, "set");
  v35.origin.x = 0.0;
  v35.origin.y = 0.0;
  v35.size.width = a4;
  v35.size.height = a5;
  UIRectFill(v35);
  result = (UIImage *)objc_msgSend(v5, "drawInRect:", 0.0, 0.0, a4, a5);
  v12 = *(_QWORD *)(a2 + 16);
  if (v12)
  {
    if (serverManager._connectionProperties == (NSMutableDictionary *)-1)
    {
      v13 = a1 & 0xC000000000000001;
      if ((a1 & 0xC000000000000001) != 0)
      {
LABEL_5:
        v14 = type metadata accessor for Logger(0);
        v15 = 0;
        v16 = (double *)(a2 + 56);
        v32 = v14;
        v33 = v12;
        while (1)
        {
          __swift_project_value_buffer(v14, (uint64_t)static MOAngelLogger.assets);
          v19 = swift_bridgeObjectRetain_n(a2, 2);
          v20 = Logger.logObject.getter(v19);
          v21 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v20, v21))
          {
            v22 = swift_slowAlloc(12, -1);
            v23 = swift_slowAlloc(32, -1);
            v34 = v23;
            *(_DWORD *)v22 = 136315138;
            v24 = CGRect.debugDescription.getter(*(v16 - 3), *(v16 - 2), *(v16 - 1), *v16);
            v25 = v13;
            v26 = a1;
            v28 = v27;
            *(_QWORD *)(v22 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v27, &v34);
            swift_bridgeObjectRelease_n(a2, 2);
            v29 = v28;
            a1 = v26;
            v13 = v25;
            swift_bridgeObjectRelease(v29);
            _os_log_impl((void *)&_mh_execute_header, v20, v21, "[Snowglobe] %s", (uint8_t *)v22, 0xCu);
            swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
            v12 = v33;
            swift_slowDealloc(v23, -1, -1);
            v30 = v22;
            v14 = v32;
            swift_slowDealloc(v30, -1, -1);

            if (!v13)
              goto LABEL_12;
          }
          else
          {

            swift_bridgeObjectRelease_n(a2, 2);
            if (!v13)
            {
LABEL_12:
              v17 = *(id *)(a1 + 8 * v15 + 32);
              goto LABEL_7;
            }
          }
          v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, a1);
LABEL_7:
          v18 = v17;
          ++v15;
          objc_msgSend(v17, "drawInRect:", *(v16 - 3), *(v16 - 2), *(v16 - 1), *v16);

          v16 += 4;
          if (v12 == v15)
            goto LABEL_13;
        }
      }
    }
    else
    {
      result = (UIImage *)swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
      v13 = a1 & 0xC000000000000001;
      if ((a1 & 0xC000000000000001) != 0)
        goto LABEL_5;
    }
    if (v12 <= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
    __break(1u);
  }
  else
  {
LABEL_13:
    v31 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return v31;
  }
  return result;
}

uint64_t specialized static MOSuggestionAssetSnowglobeEffect.layoutRectsFor(targetSize:count:)(uint64_t result, double a2, float64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  double *v5;
  int64_t v6;
  float64x2_t v7;
  _BOOL4 v8;
  float64x2_t v9;
  BOOL v10;
  float64x2_t *v11;
  BOOL v12;
  float64x2_t v18;
  float64x2_t v19;
  double v20;
  double v21;
  double *v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v27;
  double v28;
  float64x2_t v29;

  v3 = 7;
  if (result < 7)
    v3 = result;
  v4 = v3 - 1;
  if (__OFSUB__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v28 = a2;
    if (one-time initialization token for avatarLayout == -1)
      goto LABEL_5;
  }
  result = swift_once(&one-time initialization token for avatarLayout, one-time initialization function for avatarLayout);
LABEL_5:
  v5 = _swiftEmptyArrayStorage;
  if (v4 < *((_QWORD *)static MOSuggestionAssetSnowglobeEffect.avatarLayout + 2))
  {
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    v5 = (double *)*((_QWORD *)static MOSuggestionAssetSnowglobeEffect.avatarLayout + v4 + 4);
    swift_bridgeObjectRetain(v5);
  }
  v6 = *((_QWORD *)v5 + 2);
  if (v6)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    if (one-time initialization token for avatarBaseSize != -1)
      swift_once(&one-time initialization token for avatarBaseSize, one-time initialization function for avatarBaseSize);
    v7.f64[0] = v28;
    v7.f64[1] = a3;
    v8 = *((double *)&static MOSuggestionAssetSnowglobeEffect.avatarBaseSize + 1) > 0.0
      && *(double *)&static MOSuggestionAssetSnowglobeEffect.avatarBaseSize > 0.0;
    v9 = vdivq_f64(v7, (float64x2_t)static MOSuggestionAssetSnowglobeEffect.avatarBaseSize);
    v10 = v9.f64[0] < 100.0;
    if (v9.f64[1] >= 100.0)
      v10 = 0;
    v11 = (float64x2_t *)(v5 + 6);
    v12 = !v10;
    __asm { FMOV            V4.2D, #0.5 }
    do
    {
      v18 = 0uLL;
      v19 = 0uLL;
      if (v8 && !v12)
      {
        v19 = vmulq_f64(v9, *v11);
        v18 = vaddq_f64(vmulq_f64(v9, v11[-1]), vmulq_f64(vsubq_f64(v7, v19), _Q4));
      }
      v21 = _swiftEmptyArrayStorage[2];
      v20 = _swiftEmptyArrayStorage[3];
      if (*(_QWORD *)&v21 >= *(_QWORD *)&v20 >> 1)
      {
        v27 = v9;
        v29 = v7;
        v24 = v18;
        v25 = _Q4;
        v23 = v19;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(*(_QWORD *)&v20 > 1uLL, *(_QWORD *)&v21 + 1, 1);
        v19 = v23;
        v18 = v24;
        _Q4 = v25;
        v9 = v27;
        v7 = v29;
      }
      *(_QWORD *)&_swiftEmptyArrayStorage[2] = *(_QWORD *)&v21 + 1;
      v22 = &_swiftEmptyArrayStorage[4 * *(_QWORD *)&v21];
      *((float64x2_t *)v22 + 2) = v18;
      *((float64x2_t *)v22 + 3) = v19;
      v11 += 2;
      --v6;
    }
    while (v6);
  }
  swift_bridgeObjectRelease(v5);
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t specialized static MOSuggestionAssetSnowglobeEffect.imageFor(images:targetSize:)(uint64_t a1, double a2, float64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  UIImage *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = a1;
  v6 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) < 8uLL)
    {
LABEL_3:
      swift_bridgeObjectRetain(v5);
      goto LABEL_20;
    }
    swift_bridgeObjectRetain(a1);
LABEL_5:
    if ((v5 & 0xC000000000000001) != 0)
    {
      type metadata accessor for UIImage();
      _ArrayBuffer._typeCheckSlowPath(_:)(0);
      _ArrayBuffer._typeCheckSlowPath(_:)(1);
      _ArrayBuffer._typeCheckSlowPath(_:)(2);
      _ArrayBuffer._typeCheckSlowPath(_:)(3);
      _ArrayBuffer._typeCheckSlowPath(_:)(4);
      _ArrayBuffer._typeCheckSlowPath(_:)(5);
      _ArrayBuffer._typeCheckSlowPath(_:)(6);
    }
    if (v6)
    {
      if (v5 < 0)
        v11 = v5;
      else
        v11 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v8 = _CocoaArrayWrapper.subscript.getter(0, 7, v11);
      v9 = v12;
      v7 = v13;
      v10 = v14;
      swift_bridgeObjectRelease_n(v5, 2);
      if ((v10 & 1) == 0)
        goto LABEL_13;
    }
    else
    {
      v7 = 0;
      v8 = v5 & 0xFFFFFFFFFFFFFF8;
      v9 = (v5 & 0xFFFFFFFFFFFFFF8) + 32;
      v10 = 15;
    }
    v15 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v16 = swift_unknownObjectRetain_n(v8, 2);
    v17 = (double *)swift_dynamicCastClass(v16, v15);
    if (!v17)
    {
      swift_unknownObjectRelease(v8);
      v17 = _swiftEmptyArrayStorage;
    }
    v18 = *((_QWORD *)v17 + 2);
    swift_release(v17);
    if (__OFSUB__(v10 >> 1, v7))
    {
      __break(1u);
    }
    else
    {
      v19 = v8;
      if (v18 == (v10 >> 1) - v7)
      {
        v5 = swift_dynamicCastClass(v8, v15);
        swift_unknownObjectRelease(v8);
        if (!v5)
        {
          swift_unknownObjectRelease(v8);
          v5 = (uint64_t)_swiftEmptyArrayStorage;
        }
LABEL_20:
        if (!((unint64_t)v5 >> 62))
        {
          v20 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_22:
          v21 = specialized static MOSuggestionAssetSnowglobeEffect.layoutRectsFor(targetSize:count:)(v20, a2, a3);
          v22 = objc_msgSend(objc_allocWithZone((Class)UIImage), "init");
          v23 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
          v24 = UIImage.composedOf(with:rects:targetSize:backgroundColor:)(v5, v21, v23, a2, a3);
          swift_bridgeObjectRelease(v5);
          swift_bridgeObjectRelease(v21);

          return (uint64_t)v24;
        }
LABEL_30:
        if (v5 < 0)
          v29 = v5;
        else
          v29 = v5 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v5);
        v20 = _CocoaArrayWrapper.endIndex.getter(v29);
        swift_bridgeObjectRelease(v5);
        goto LABEL_22;
      }
    }
    swift_unknownObjectRelease(v19);
LABEL_13:
    v5 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v8, v9, v7, v10);
    swift_unknownObjectRelease(v8);
    goto LABEL_20;
  }
  if (a1 < 0)
    v26 = a1;
  else
    v26 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v27 = _CocoaArrayWrapper.endIndex.getter(v26);
  swift_bridgeObjectRelease(v5);
  if (v27 <= 7)
    goto LABEL_3;
  swift_bridgeObjectRetain(v5);
  result = _CocoaArrayWrapper.endIndex.getter(v26);
  if ((result & 0x8000000000000000) == 0)
  {
    swift_bridgeObjectRetain(v5);
    v28 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v5);
    if (v28 < 7)
    {
      __break(1u);
      goto LABEL_30;
    }
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for MOSuggestionAssetSnowglobeEffect()
{
  return &type metadata for MOSuggestionAssetSnowglobeEffect;
}

unint64_t type metadata accessor for UIImage()
{
  unint64_t result;
  uint64_t v1;

  result = lazy cache variable for type metadata for UIImage;
  if (!lazy cache variable for type metadata for UIImage)
  {
    v1 = objc_opt_self(UIImage);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  }
  return result;
}

uint64_t MOSuggestionAssetVisualSubType.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t one-time initialization function for localizableStringKey(uint64_t a1)
{
  return one-time initialization function for localizableStringKey(a1, (uint64_t)&outlined read-only object #0 of one-time initialization function for localizableStringKey, (uint64_t)&unk_1001E3B00, 26, (unint64_t *)&static MOSuggestionAssetVisualSubType.localizableStringKey);
}

uint64_t one-time initialization function for pluralLocalizableStringKey(uint64_t a1)
{
  return one-time initialization function for localizableStringKey(a1, (uint64_t)&outlined read-only object #0 of one-time initialization function for pluralLocalizableStringKey, (uint64_t)&unk_1001E3D90, 2, (unint64_t *)&static MOSuggestionAssetVisualSubType.pluralLocalizableStringKey);
}

uint64_t one-time initialization function for localizableStringKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t result;

  v8 = specialized Dictionary.init(dictionaryLiteral:)(a2);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MOSuggestionAssetVisualSubType, String));
  result = swift_arrayDestroy(a3, a4, v9);
  *a5 = v8;
  return result;
}

void MOSuggestionAssetVisualSubType.localizableKeyWithCount(count:)(uint64_t a1, char a2)
{
  uint64_t v3;

  v3 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_1000655F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;

  ((void (*)(uint64_t, uint64_t))String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:))(7, 1);
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v3);
  *(_QWORD *)(v2 - 40) = v1;
  ((void (*)(uint64_t, uint64_t, unint64_t, void *, void *))String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:))(v2 - 40, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
  v4._countAndFlagsBits = 0x736D75626C4120;
  v4._object = (void *)0xE700000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v4);
  return ((uint64_t (*)(uint64_t))String.LocalizationValue.init(stringInterpolation:))(v0);
}

uint64_t one-time initialization function for assetTypeMapping()
{
  uint64_t v0;
  uint64_t inited;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t result;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[440];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MOSuggestionAssetVisualSubType, MOSuggestionAssetsType)>);
  inited = swift_initStackObject(v0, v41);
  *(_OWORD *)(inited + 16) = xmmword_1001A0440;
  *(_BYTE *)(inited + 32) = 0;
  v40 = inited + 32;
  v2 = (void *)MOSuggestionAssetsTypeMediaCoverArt;
  *(_QWORD *)(inited + 40) = MOSuggestionAssetsTypeMediaCoverArt;
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 56) = v2;
  *(_BYTE *)(inited + 64) = 2;
  *(_QWORD *)(inited + 72) = v2;
  *(_BYTE *)(inited + 80) = 3;
  *(_QWORD *)(inited + 88) = v2;
  *(_BYTE *)(inited + 96) = 4;
  *(_QWORD *)(inited + 104) = v2;
  *(_BYTE *)(inited + 112) = 5;
  *(_QWORD *)(inited + 120) = v2;
  *(_BYTE *)(inited + 128) = 6;
  *(_QWORD *)(inited + 136) = v2;
  *(_BYTE *)(inited + 144) = 7;
  v3 = (void *)MOSuggestionAssetsTypeWorkout;
  *(_QWORD *)(inited + 152) = MOSuggestionAssetsTypeWorkout;
  *(_BYTE *)(inited + 160) = 8;
  *(_QWORD *)(inited + 168) = v3;
  *(_BYTE *)(inited + 176) = 9;
  *(_QWORD *)(inited + 184) = v3;
  *(_BYTE *)(inited + 192) = 10;
  v39 = (void *)MOSuggestionAssetsTypeWorkoutGroup;
  *(_QWORD *)(inited + 200) = MOSuggestionAssetsTypeWorkoutGroup;
  *(_BYTE *)(inited + 208) = 11;
  v38 = (void *)MOSuggestionAssetsTypeContactPhoto;
  *(_QWORD *)(inited + 216) = MOSuggestionAssetsTypeContactPhoto;
  *(_BYTE *)(inited + 224) = 12;
  v37 = (void *)MOSuggestionAssetsTypePhoto;
  *(_QWORD *)(inited + 232) = MOSuggestionAssetsTypePhoto;
  *(_BYTE *)(inited + 240) = 14;
  v36 = (void *)MOSuggestionAssetsTypeVideo;
  *(_QWORD *)(inited + 248) = MOSuggestionAssetsTypeVideo;
  *(_BYTE *)(inited + 256) = 13;
  v35 = (void *)MOSuggestionAssetsTypeLivePhoto;
  *(_QWORD *)(inited + 264) = MOSuggestionAssetsTypeLivePhoto;
  *(_BYTE *)(inited + 272) = 15;
  v4 = (void *)MOSuggestionAssetsTypeMultiPinMap;
  *(_QWORD *)(inited + 280) = MOSuggestionAssetsTypeMultiPinMap;
  *(_BYTE *)(inited + 288) = 16;
  v5 = (void *)MOSuggestionAssetsTypeLocationPreview;
  *(_QWORD *)(inited + 296) = MOSuggestionAssetsTypeLocationPreview;
  *(_BYTE *)(inited + 304) = 20;
  v6 = (void *)MOSuggestionAssetsTypeGenericMap;
  *(_QWORD *)(inited + 312) = MOSuggestionAssetsTypeGenericMap;
  *(_BYTE *)(inited + 320) = 21;
  *(_QWORD *)(inited + 328) = v6;
  *(_BYTE *)(inited + 336) = 22;
  *(_QWORD *)(inited + 344) = v6;
  *(_BYTE *)(inited + 352) = 17;
  v7 = (void *)MOSuggestionAssetsTypeMotionActivity;
  *(_QWORD *)(inited + 360) = MOSuggestionAssetsTypeMotionActivity;
  *(_BYTE *)(inited + 368) = 18;
  *(_QWORD *)(inited + 376) = v7;
  *(_BYTE *)(inited + 384) = 19;
  *(_QWORD *)(inited + 392) = v7;
  *(_BYTE *)(inited + 400) = 23;
  v8 = (void *)MOSuggestionAssetsTypeReflectionPrompt;
  *(_QWORD *)(inited + 408) = MOSuggestionAssetsTypeReflectionPrompt;
  *(_BYTE *)(inited + 416) = 25;
  v9 = (void *)MOSuggestionAssetsTypeStateOfMindAsset;
  *(_QWORD *)(inited + 424) = MOSuggestionAssetsTypeStateOfMindAsset;
  v10 = v2;
  v11 = v3;
  v12 = v6;
  v13 = v7;
  v14 = v10;
  v15 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_setDeallocating(inited);
  v16 = v14;
  v17 = v11;
  v18 = v12;
  v19 = v13;
  v20 = v16;
  v21 = v17;
  v22 = v18;
  v23 = v19;
  v24 = v39;
  v25 = v38;
  v26 = v37;
  v27 = v36;
  v28 = v35;
  v29 = v4;
  v30 = v5;
  v31 = v8;
  v32 = v9;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MOSuggestionAssetVisualSubType, MOSuggestionAssetsType));
  result = swift_arrayDestroy(v40, 25, v33);
  static MOSuggestionAssetVisualSubType.assetTypeMapping = v15;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MOSuggestionAssetVisualSubType@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized MOSuggestionAssetVisualSubType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MOSuggestionAssetVisualSubType(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t MOSuggestionAssetVisualSubType.singularLocalizedString.getter(unsigned __int8 a1)
{
  return MOSuggestionAssetVisualSubType.singularLocalizedString.getter(a1, (uint64_t (*)(void))MOSuggestionAssetVisualSubType.singularLocalizableStringKey.getter, "(Singular) Unknown visual subtype: %ld");
}

uint64_t MOSuggestionAssetVisualSubType.singularLocalizableStringKey.getter(unsigned __int8 a1)
{
  _QWORD *v2;
  unint64_t v3;
  char v4;
  uint64_t *v5;
  uint64_t v6;

  if (one-time initialization token for localizableStringKey != -1)
    swift_once(&one-time initialization token for localizableStringKey, one-time initialization function for localizableStringKey);
  v2 = static MOSuggestionAssetVisualSubType.localizableStringKey;
  if (!*((_QWORD *)static MOSuggestionAssetVisualSubType.localizableStringKey + 2))
    return 0;
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = (uint64_t *)(v2[7] + 16 * v3);
  v6 = *v5;
  swift_bridgeObjectRetain(v5[1]);
  return v6;
}

uint64_t MOSuggestionAssetVisualSubType.pluralLocalizedString.getter(unsigned __int8 a1)
{
  return MOSuggestionAssetVisualSubType.singularLocalizedString.getter(a1, (uint64_t (*)(void))MOSuggestionAssetVisualSubType.pluralLocalizableStringKey.getter, "(Plural) Unknown visual subtype: %ld");
}

uint64_t MOSuggestionAssetVisualSubType.singularLocalizedString.getter(unsigned __int8 a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t countAndFlagsBits;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;

  v5 = a2();
  if (v6)
  {
    v7 = v5;
    v8 = v6;
    v9 = StaticString.description.getter("Asset Type Description", 22, 2);
    v11 = v10;
    v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v24._object = v11;
    v13._countAndFlagsBits = v7;
    v13._object = v8;
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    v24._countAndFlagsBits = v9;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v24)._countAndFlagsBits;
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v11);

  }
  else
  {
    if (serverManager._connectionProperties != (NSMutableDictionary *)-1)
      swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
    v16 = type metadata accessor for Logger(0);
    v17 = __swift_project_value_buffer(v16, (uint64_t)static MOAngelLogger.assets);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v20 = 134217984;
      v22 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v20 + 4);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, a3, v20, 0xCu);
      swift_slowDealloc(v20, -1, -1);
    }

    return 0;
  }
  return countAndFlagsBits;
}

uint64_t MOSuggestionAssetVisualSubType.pluralLocalizableStringKey.getter(unsigned __int8 a1)
{
  _QWORD *v2;
  unint64_t v3;
  char v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  Swift::String v11;
  uint64_t v13;

  if (one-time initialization token for pluralLocalizableStringKey != -1)
    swift_once(&one-time initialization token for pluralLocalizableStringKey, one-time initialization function for pluralLocalizableStringKey);
  v2 = static MOSuggestionAssetVisualSubType.pluralLocalizableStringKey;
  if (*((_QWORD *)static MOSuggestionAssetVisualSubType.pluralLocalizableStringKey + 2)
    && (v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0))
  {
    v5 = (uint64_t *)(v2[7] + 16 * v3);
    v6 = *v5;
    swift_bridgeObjectRetain(v5[1]);
  }
  else
  {
    if (one-time initialization token for localizableStringKey != -1)
      swift_once(&one-time initialization token for localizableStringKey, one-time initialization function for localizableStringKey);
    v7 = static MOSuggestionAssetVisualSubType.localizableStringKey;
    if (*((_QWORD *)static MOSuggestionAssetVisualSubType.localizableStringKey + 2)
      && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v9 & 1) != 0))
    {
      v10 = (uint64_t *)(v7[7] + 16 * v8);
      v13 = *v10;
      swift_bridgeObjectRetain(v10[1]);
      v11._countAndFlagsBits = 115;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      return v13;
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

Swift::String __swiftcall MOSuggestionAssetVisualSubType.localizedStringWithCount(_:)(Swift::Int a1)
{
  char v1;
  char v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  Swift::String result;
  _BYTE v14[16];

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MOSuggestionAssetVisualSubType.localizableKeyWithCount(count:)(a1, v2);
  static Locale.current.getter(v10);
  v11 = String.init(localized:table:bundle:locale:comment:)(v9, 0xD000000000000012, 0x80000001001A90C0, 0, v6, "Asset Type Description", 22, 2);
  result._object = v12;
  result._countAndFlagsBits = v11;
  return result;
}

void *MOSuggestionAssetVisualSubType.assetType.getter(unsigned __int8 a1)
{
  _QWORD *v2;
  unint64_t v3;
  char v4;
  void *v5;
  id v6;

  if (one-time initialization token for assetTypeMapping != -1)
    swift_once(&one-time initialization token for assetTypeMapping, one-time initialization function for assetTypeMapping);
  v2 = static MOSuggestionAssetVisualSubType.assetTypeMapping;
  if (!*((_QWORD *)static MOSuggestionAssetVisualSubType.assetTypeMapping + 2))
    return 0;
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = *(void **)(v2[7] + 8 * v3);
  v6 = v5;
  return v5;
}

unint64_t MOSuggestionAssetVisualSubType.init(assetType:mediaType:motionActivityType:)(void *a1, uint64_t a2, char a3, void *a4)
{
  return specialized MOSuggestionAssetVisualSubType.init(assetType:mediaType:motionActivityType:)(a1, a2, a3 & 1, a4);
}

uint64_t specialized formatSpecifier<A>(_:)()
{
  return 1684827173;
}

unint64_t specialized MOSuggestionAssetVisualSubType.init(rawValue:)(unint64_t result)
{
  if (result >= 0x1A)
    return 26;
  return result;
}

unint64_t specialized MOSuggestionAssetVisualSubType.init(assetType:mediaType:motionActivityType:)(void *a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  id v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  char v88;
  id v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  char v108;
  char v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  char v118;
  id v119;

  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypePhoto);
  v10 = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v8 == v11 && v10 == v12)
  {
    swift_bridgeObjectRelease_n(v10, 2);
    goto LABEL_15;
  }
  v14 = v12;
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v11, v12, 0);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v14);
  if ((v15 & 1) != 0)
  {
LABEL_15:

    return 12;
  }
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeLivePhoto);
  v18 = v17;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v16 == v19 && v18 == v20)
  {
    swift_bridgeObjectRelease_n(v18, 2);
    goto LABEL_17;
  }
  v22 = v20;
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v19, v20, 0);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v22);
  if ((v23 & 1) != 0)
  {
LABEL_17:

    return 13;
  }
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeVideo);
  v26 = v25;
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v29 = v27;
  if (v24 == v28 && v26 == v27)
  {
    swift_bridgeObjectRelease_n(v26, 2);
LABEL_19:

    return 14;
  }
  v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, v28, v27, 0);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v29);
  if ((v31 & 1) != 0)
    goto LABEL_19;
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeMultiPinMap);
  v34 = v33;
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v37 = v35;
  if (v32 == v36 && v34 == v35)
  {
    swift_bridgeObjectRelease_n(v34, 2);
LABEL_24:

    return 15;
  }
  v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v34, v36, v35, 0);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v37);
  if ((v38 & 1) != 0)
    goto LABEL_24;
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeWorkout);
  v41 = v40;
  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v44 = v42;
  if (v39 == v43 && v41 == v42)
  {
    swift_bridgeObjectRelease_n(v41, 2);
LABEL_29:

    return 10;
  }
  v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v41, v43, v42, 0);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v44);
  if ((v45 & 1) != 0)
    goto LABEL_29;
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeMotionActivity);
  v48 = v47;
  v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v51 = v49;
  if (v46 == v50 && v48 == v49)
  {
    swift_bridgeObjectRelease_n(v48, 2);
    goto LABEL_34;
  }
  v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v48, v50, v49, 0);
  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v51);
  if ((v52 & 1) != 0)
  {
LABEL_34:
    if (a4)
    {
      v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOWorkoutMotionActivityActionRun[0]);
      v55 = v54;
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
      v58 = v56;
      if (v53 == v57 && v55 == v56)
      {
        v59 = a4;
        swift_bridgeObjectRelease_n(v55, 2);
LABEL_42:

        return 18;
      }
      v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v55, v57, v56, 0);
      v67 = a4;
      swift_bridgeObjectRelease(v55);
      swift_bridgeObjectRelease(v58);
      if ((v66 & 1) != 0)
        goto LABEL_42;
      v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOWorkoutMotionActivityActionWalk[0]);
      v78 = v77;
      v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
      v81 = v79;
      if (v76 == v80 && v78 == v79)
      {
        swift_bridgeObjectRelease_n(v78, 2);
LABEL_60:

        return 17;
      }
      v90 = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v78, v80, v79, 0);
      swift_bridgeObjectRelease(v78);
      swift_bridgeObjectRelease(v81);
      if ((v90 & 1) != 0)
        goto LABEL_60;
      v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOWorkoutMotionActivityActionRunAndWalk[0]);
      v103 = v102;
      v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
      v106 = v104;
      if (v101 == v105 && v103 == v104)
      {
        v107 = v67;

        swift_bridgeObjectRelease_n(v103, 2);
        return 19;
      }
      v109 = _stringCompareWithSmolCheck(_:_:expecting:)(v101, v103, v105, v104, 0);
      v110 = v67;

      swift_bridgeObjectRelease(v103);
      swift_bridgeObjectRelease(v106);
      if ((v109 & 1) != 0)
        return 19;
      return 26;
    }
    goto LABEL_48;
  }
  v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeGenericMap);
  v62 = v61;
  v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v65 = v63;
  if (v60 == v64 && v62 == v63)
  {
    swift_bridgeObjectRelease_n(v62, 2);
  }
  else
  {
    v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v62, v64, v63, 0);
    swift_bridgeObjectRelease(v62);
    swift_bridgeObjectRelease(v65);
    if ((v68 & 1) == 0)
    {
      v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeMediaCoverArt);
      v84 = v83;
      v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      if (v82 == v86 && v84 == v85)
      {
        v87 = a1;

        swift_bridgeObjectRelease_n(v84, 2);
        if ((a3 & 1) != 0)
          return 26;
      }
      else
      {
        v91 = v82;
        v92 = v85;
        v93 = _stringCompareWithSmolCheck(_:_:expecting:)(v91, v84, v86, v85, 0);
        v94 = a1;

        swift_bridgeObjectRelease(v84);
        swift_bridgeObjectRelease(v92);

        if ((v93 & 1) == 0 || (a3 & 1) != 0)
          return 26;
      }
      if ((unint64_t)(a2 - 1) < 8)
        return 0x6050402011A0200uLL >> (8 * (a2 - 1));
      return 26;
    }
  }
  if (!a4)
  {
LABEL_48:

    return 26;
  }
  v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOWorkoutMotionActivityActionRun[0]);
  v71 = v70;
  v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v74 = v72;
  if (v69 == v73 && v71 == v72)
  {
    v75 = a4;
    swift_bridgeObjectRelease_n(v71, 2);
LABEL_58:

    return 21;
  }
  v88 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v71, v73, v72, 0);
  v89 = a4;
  swift_bridgeObjectRelease(v71);
  swift_bridgeObjectRelease(v74);
  if ((v88 & 1) != 0)
    goto LABEL_58;
  v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOWorkoutMotionActivityActionWalk[0]);
  v97 = v96;
  v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v100 = v98;
  if (v95 == v99 && v97 == v98)
  {
    swift_bridgeObjectRelease_n(v97, 2);
LABEL_72:

    return 20;
  }
  v108 = _stringCompareWithSmolCheck(_:_:expecting:)(v95, v97, v99, v98, 0);
  swift_bridgeObjectRelease(v97);
  swift_bridgeObjectRelease(v100);
  if ((v108 & 1) != 0)
    goto LABEL_72;
  v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOWorkoutMotionActivityActionRunAndWalk[0]);
  v113 = v112;
  v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v116 = v114;
  if (v111 == v115 && v113 == v114)
  {
    v117 = v89;

    swift_bridgeObjectRelease_n(v113, 2);
  }
  else
  {
    v118 = _stringCompareWithSmolCheck(_:_:expecting:)(v111, v113, v115, v114, 0);
    v119 = v89;

    swift_bridgeObjectRelease(v113);
    swift_bridgeObjectRelease(v116);
    if ((v118 & 1) == 0)
      return 26;
  }
  return 22;
}

unint64_t lazy protocol witness table accessor for type MOSuggestionAssetVisualSubType and conformance MOSuggestionAssetVisualSubType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MOSuggestionAssetVisualSubType and conformance MOSuggestionAssetVisualSubType;
  if (!lazy protocol witness table cache variable for type MOSuggestionAssetVisualSubType and conformance MOSuggestionAssetVisualSubType)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MOSuggestionAssetVisualSubType, &type metadata for MOSuggestionAssetVisualSubType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionAssetVisualSubType and conformance MOSuggestionAssetVisualSubType);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MOSuggestionAssetVisualSubType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE7)
    goto LABEL_17;
  if (a2 + 25 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 25) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 25;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 25;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 25;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1A;
  v8 = v6 - 26;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MOSuggestionAssetVisualSubType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 25 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 25) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE6)
    return ((uint64_t (*)(void))((char *)&loc_100066F40 + 4 * byte_1001A0369[v4]))();
  *a1 = a2 + 25;
  return ((uint64_t (*)(void))((char *)sub_100066F74 + 4 * byte_1001A0364[v4]))();
}

uint64_t sub_100066F74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100066F7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100066F84);
  return result;
}

uint64_t sub_100066F90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100066F98);
  *(_BYTE *)result = a2 + 25;
  return result;
}

uint64_t sub_100066F9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100066FA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MOSuggestionAssetVisualSubType()
{
  return &type metadata for MOSuggestionAssetVisualSubType;
}

_QWORD *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy16MomentsUIService30MOSuggestionAssetVisualSubTypeOSiG_AH_Sits5NeverOTg504_s16d11UIService30fghij38OSiACSiIgyydd_AC3key_Si5valuetAC_Sits5k130OIegnrzr_TR04_s16a11UIService42c16InterstitialListd17ViewModelC32assetef53TypesToCountString_07includeN09separatorSSSDyAA0cfjK4G29N36G_SbSStFZAH_SitAH_SitXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v25 = *(_QWORD *)(a1 + 16);
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  result = (_QWORD *)specialized Dictionary.startIndex.getter(a1);
  v4 = (uint64_t)result;
  v6 = v25;
  v5 = a1;
  v7 = 0;
  v8 = a1 + 64;
  v9 = a1 + 80;
  while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(v5 + 32))
  {
    v11 = (unint64_t)v4 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v5 + 36) != (_DWORD)v3)
      goto LABEL_24;
    v12 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v4);
    v13 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v4);
    v15 = _swiftEmptyArrayStorage[2];
    v14 = _swiftEmptyArrayStorage[3];
    if (v15 >= v14 >> 1)
    {
      v23 = v8;
      v24 = v3;
      v22 = v9;
      result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      v9 = v22;
      v8 = v23;
      v3 = v24;
      v6 = v25;
      v5 = a1;
    }
    _swiftEmptyArrayStorage[2] = v15 + 1;
    v16 = &_swiftEmptyArrayStorage[2 * v15];
    *((_BYTE *)v16 + 32) = v12;
    v16[5] = v13;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v4 >= v10)
      goto LABEL_25;
    v17 = *(_QWORD *)(v8 + 8 * v11);
    if ((v17 & (1 << v4)) == 0)
      goto LABEL_26;
    if (*(_DWORD *)(v5 + 36) != (_DWORD)v3)
      goto LABEL_27;
    v18 = v17 & (-2 << (v4 & 0x3F));
    if (v18)
    {
      v10 = __clz(__rbit64(v18)) | v4 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v19 = v11 + 1;
      v20 = (unint64_t)(v10 + 63) >> 6;
      if (v11 + 1 < v20)
      {
        v21 = *(_QWORD *)(v8 + 8 * v19);
        if (v21)
        {
LABEL_20:
          v10 = __clz(__rbit64(v21)) + (v19 << 6);
        }
        else
        {
          while (v20 - 2 != v11)
          {
            v21 = *(_QWORD *)(v9 + 8 * v11++);
            if (v21)
            {
              v19 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v7;
    v4 = v10;
    if (v7 == v6)
      return _swiftEmptyArrayStorage;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

_QWORD *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay16MomentsUIService19MOAssetAndMediaTypeV_SitG_SSs5NeverOTg504_s16d11UIService19fghi21VSiSSIggyo_AC_SitSSs5j137OIegnrzr_TR04_s16a61UIService42MOSuggestionInterstitialListAssetViewModelC25assetf44SetToCountStringySSSo09NSCountedK0CFZSSAA015cdE13J0V_P16XEfU1_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v3 = (uint64_t *)(a1 + 56);
    do
    {
      v4 = *(v3 - 2);
      v5 = *((_BYTE *)v3 - 8);
      v6 = *v3;
      v7 = (id)*(v3 - 3);
      v8 = specialized static MOSuggestionSheetAssetViewModel.assetTypeAsPluralString(assetAndMediaType:count:includeCount:)(v7, v4, v5, v6, 1);
      v10 = v9;

      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      v3 += 4;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t (*specialized Dictionary.subscript.modify(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized Dictionary._Variant.subscript.modify(v4, a2);
  return Dictionary.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary.subscript.modify(_QWORD *a1, unsigned __int8 a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized Dictionary._Variant.subscript.modify(v4, a2);
  return Dictionary.subscript.modifyspecialized ;
}

void Dictionary.subscript.modifyspecialized (_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

{
  void *v1;
  void *v2;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);

  free(v1);
}

uint64_t (*specialized Dictionary.subscript.modify(_QWORD *a1, void *a2))()
{
  _QWORD *v4;

  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[4] = a2;
  v4[5] = specialized Dictionary._Variant.subscript.modify(v4, a2);
  return Dictionary.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary.subscript.modify(_QWORD *a1, void *a2, Swift::UInt a3, char a4))()
{
  _QWORD *v8;

  v8 = malloc(0x30uLL);
  *a1 = v8;
  v8[4] = a2;
  v8[5] = specialized Dictionary._Variant.subscript.modify(v8, a2, a3, a4 & 1);
  return Dictionary.subscript.modifyspecialized ;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.__allocating_init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, char a11, char a12)
{
  uint64_t v12;
  uint64_t v18;

  v18 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return v18;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.groupAssetTypeAndCountDescription.getter()
{
  return MOSuggestionInterstitialListAssetViewModel._groupAssetTypeAndCountDescription(with:)(0);
}

BOOL MOSuggestionInterstitialListAssetViewModel.isTopLevelWithChildren.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
  v2 = v1;
  if (v1)
    swift_bridgeObjectRelease(v1);
  return v2 != 0;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.isSingleTopLevel.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
  if (result)
  {
    v2 = result;
    if ((unint64_t)result >> 62)
    {
      if (result >= 0)
        result &= 0xFFFFFFFFFFFFFF8uLL;
      v3 = _CocoaArrayWrapper.endIndex.getter(result);
    }
    else
    {
      v3 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    v4 = swift_bridgeObjectRelease(v2);
    if (v3 == 1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v0 + 200))(v4);
      v6 = v5;
      v7 = swift_bridgeObjectRelease(v5);
      if (v6)
      {
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 176))(v7);
        if (!v8)
          return 1;
        swift_bridgeObjectRelease(v8);
      }
    }
    return 0;
  }
  return result;
}

Swift::Void __swiftcall MOSuggestionInterstitialListAssetViewModel.disallowSelection()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 90) = 0;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.subViewModels.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t MOSuggestionInterstitialListAssetViewModel.subViewModels.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 16, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*MOSuggestionInterstitialListAssetViewModel.subViewModels.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.topLevelGroupHeading.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 24, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.topLevelGroupHeading.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(v2 + 24, v7, 1, 0);
  v5 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return swift_bridgeObjectRelease(v5);
}

uint64_t (*MOSuggestionInterstitialListAssetViewModel.topLevelGroupHeading.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + 24, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.dates.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 40, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
}

uint64_t MOSuggestionInterstitialListAssetViewModel.dates.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 40, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*MOSuggestionInterstitialListAssetViewModel.dates.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + 40, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.titles.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 48, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
}

uint64_t MOSuggestionInterstitialListAssetViewModel.titles.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 48, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*MOSuggestionInterstitialListAssetViewModel.titles.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + 48, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.icons.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 56, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
}

uint64_t MOSuggestionInterstitialListAssetViewModel.icons.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 56, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*MOSuggestionInterstitialListAssetViewModel.icons.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + 56, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.topLevelShouldBeSkippedInSummary.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 64, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t MOSuggestionInterstitialListAssetViewModel.topLevelShouldBeSkippedInSummary.setter(char a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 64, v4, 1, 0);
  *(_BYTE *)(v1 + 64) = a1;
  return result;
}

uint64_t (*MOSuggestionInterstitialListAssetViewModel.topLevelShouldBeSkippedInSummary.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + 64, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.assetVisualSubType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 65);
}

uint64_t MOSuggestionInterstitialListAssetViewModel.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
  return v1;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.isLoadingPlaceHolder.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t MOSuggestionInterstitialListAssetViewModel.isFallback.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 89);
}

uint64_t MOSuggestionInterstitialListAssetViewModel.uniqueUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC16MomentsUIService42MOSuggestionInterstitialListAssetViewModel_uniqueUUID;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, char a11, char a12)
{
  uint64_t v12;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v27[24];
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE v30[24];
  _BYTE v31[32];

  *(_BYTE *)(v12 + 64) = 0;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_BYTE *)(v12 + 90) = 1;
  UUID.init()();
  swift_beginAccess(v12 + 16, v31, 1, 0);
  v17 = *(_QWORD *)(v12 + 16);
  *(_QWORD *)(v12 + 16) = a3;
  swift_bridgeObjectRelease(v17);
  swift_beginAccess(v12 + 24, v30, 1, 0);
  v18 = *(_QWORD *)(v12 + 32);
  *(_QWORD *)(v12 + 24) = a4;
  *(_QWORD *)(v12 + 32) = a5;
  swift_bridgeObjectRelease(v18);
  swift_beginAccess(v12 + 40, v29, 1, 0);
  v19 = *(_QWORD *)(v12 + 40);
  *(_QWORD *)(v12 + 40) = a6;
  swift_bridgeObjectRelease(v19);
  swift_beginAccess(v12 + 48, v28, 1, 0);
  v20 = *(_QWORD *)(v12 + 48);
  *(_QWORD *)(v12 + 48) = a7;
  swift_bridgeObjectRelease(v20);
  swift_beginAccess(v12 + 56, v27, 1, 0);
  v21 = *(_QWORD *)(v12 + 56);
  *(_QWORD *)(v12 + 56) = a8;
  swift_bridgeObjectRelease(v21);
  *(_BYTE *)(v12 + 65) = a9;
  *(_QWORD *)(v12 + 72) = a1;
  *(_QWORD *)(v12 + 80) = a2;
  *(_BYTE *)(v12 + 90) = a10;
  *(_BYTE *)(v12 + 88) = a11;
  *(_BYTE *)(v12 + 89) = a12;
  if ((a12 & 1) != 0 || (a11 & 1) != 0)
    *(_BYTE *)(v12 + 90) = 0;
  return v12;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.hash(into:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for UUID(0);
  v3 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

uint64_t static MOSuggestionInterstitialListAssetViewModel.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static UUID.== infix(_:_:)(a1 + OBJC_IVAR____TtC16MomentsUIService42MOSuggestionInterstitialListAssetViewModel_uniqueUUID, a2 + OBJC_IVAR____TtC16MomentsUIService42MOSuggestionInterstitialListAssetViewModel_uniqueUUID);
}

_QWORD *MOSuggestionInterstitialListAssetViewModel.deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[10]);
  v1 = (char *)v0 + OBJC_IVAR____TtC16MomentsUIService42MOSuggestionInterstitialListAssetViewModel_uniqueUUID;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.__deallocating_deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[10]);
  v1 = (char *)v0 + OBJC_IVAR____TtC16MomentsUIService42MOSuggestionInterstitialListAssetViewModel_uniqueUUID;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

Swift::Int MOSuggestionInterstitialListAssetViewModel.hashValue.getter()
{
  uint64_t v0;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  (*(void (**)(_QWORD *))(*(_QWORD *)v0 + 352))(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance MOSuggestionInterstitialListAssetViewModel()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 360))();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MOSuggestionInterstitialListAssetViewModel()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 352))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MOSuggestionInterstitialListAssetViewModel(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  (*(void (**)(_QWORD *))(**(_QWORD **)v1 + 352))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MOSuggestionInterstitialListAssetViewModel(_QWORD *a1, _QWORD *a2)
{
  return static UUID.== infix(_:_:)(*a1 + OBJC_IVAR____TtC16MomentsUIService42MOSuggestionInterstitialListAssetViewModel_uniqueUUID, *a2 + OBJC_IVAR____TtC16MomentsUIService42MOSuggestionInterstitialListAssetViewModel_uniqueUUID);
}

uint64_t MOSuggestionInterstitialListAssetViewModel.isSelectable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 90);
}

uint64_t MOSuggestionInterstitialListAssetViewModel.hasIdentifiersSelected(_:)(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  unint64_t j;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  uint64_t v33;
  Swift::Int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  BOOL v45;
  unint64_t k;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[9];

  v3 = (*(uint64_t (**)(void))(*v1 + 176))();
  if (v3)
  {
    v4 = v3;
    v5 = v3 & 0xFFFFFFFFFFFFFF8;
    if (v3 >> 62)
      goto LABEL_65;
    for (i = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v52))
    {
      v55 = v4;
      v56 = i;
      if ((v4 & 0xC000000000000001) != 0)
      {
        v7 = 0;
        v8 = a1 + 56;
        while (1)
        {
          v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v4);
          if (__OFADD__(v7++, 1))
            break;
          v11 = v9;
          if (*(_QWORD *)(a1 + 16))
          {
            v13 = *(_QWORD *)(v9 + 72);
            v12 = *(_QWORD *)(v9 + 80);
            Hasher.init(_seed:)(v57, *(_QWORD *)(a1 + 40));
            swift_bridgeObjectRetain(v12);
            String.hash(into:)(v57, v13, v12);
            v14 = Hasher._finalize()();
            v15 = -1 << *(_BYTE *)(a1 + 32);
            v5 = v14 & ~v15;
            if (((*(_QWORD *)(v8 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
            {
              v16 = *(_QWORD *)(a1 + 48);
              v17 = (_QWORD *)(v16 + 16 * v5);
              v18 = v17[1];
              v19 = *v17 == v13 && v18 == v12;
              if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, v13, v12, 0) & 1) != 0)
              {
                swift_bridgeObjectRelease(v4);
                swift_bridgeObjectRelease(v12);
                swift_unknownObjectRelease(v11);
                return 1;
              }
              v20 = ~v15;
              v5 = (v5 + 1) & ~v15;
              if (((*(_QWORD *)(v8 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              {
                v21 = (_QWORD *)(v16 + 16 * v5);
                v22 = v21[1];
                v23 = *v21 == v13 && v22 == v12;
                if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, v13, v12, 0) & 1) != 0)
                  goto LABEL_60;
                for (j = v5 + 1; ; j = v25 + 1)
                {
                  v25 = j & v20;
                  if (((*(_QWORD *)(v8 + (((j & v20) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v20)) & 1) == 0)
                    break;
                  v26 = (_QWORD *)(v16 + 16 * v25);
                  v27 = v26[1];
                  v28 = *v26 == v13 && v27 == v12;
                  if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v26, v27, v13, v12, 0) & 1) != 0)
                    goto LABEL_60;
                }
              }
              swift_bridgeObjectRelease(v12);
              swift_unknownObjectRelease(v11);
              v4 = v55;
              i = v56;
            }
            else
            {
              swift_bridgeObjectRelease(v12);
              swift_unknownObjectRelease(v11);
              i = v56;
            }
          }
          else
          {
            swift_unknownObjectRelease(v9);
          }
          if (v7 == i)
            goto LABEL_69;
        }
        __break(1u);
      }
      else
      {
        v32 = 0;
        v53 = v5;
        v54 = v4 + 32;
        v4 = a1 + 56;
        while (v32 < *(_QWORD *)(v5 + 16))
        {
          if (*(_QWORD *)(a1 + 16))
          {
            v11 = *(_QWORD *)(v54 + 8 * v32);
            v33 = *(_QWORD *)(v11 + 72);
            v12 = *(_QWORD *)(v11 + 80);
            Hasher.init(_seed:)(v57, *(_QWORD *)(a1 + 40));
            swift_retain(v11);
            swift_bridgeObjectRetain(v12);
            String.hash(into:)(v57, v33, v12);
            v34 = Hasher._finalize()();
            v35 = -1 << *(_BYTE *)(a1 + 32);
            v36 = v34 & ~v35;
            if (((*(_QWORD *)(v4 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) != 0)
            {
              v37 = *(_QWORD *)(a1 + 48);
              v38 = (_QWORD *)(v37 + 16 * v36);
              v39 = v38[1];
              v40 = *v38 == v33 && v39 == v12;
              if (v40 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v38, v39, v33, v12, 0) & 1) != 0)
              {
LABEL_60:
                swift_bridgeObjectRelease(v55);
                swift_bridgeObjectRelease(v12);
                swift_release(v11);
                return 1;
              }
              v41 = ~v35;
              v42 = (v36 + 1) & ~v35;
              if (((*(_QWORD *)(v4 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) != 0)
              {
                v43 = (_QWORD *)(v37 + 16 * v42);
                v44 = v43[1];
                v45 = *v43 == v33 && v44 == v12;
                if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v43, v44, v33, v12, 0) & 1) != 0)
                  goto LABEL_60;
                for (k = v42 + 1; ; k = v47 + 1)
                {
                  v47 = k & v41;
                  if (((*(_QWORD *)(v4 + (((k & v41) >> 3) & 0xFFFFFFFFFFFFF8)) >> (k & v41)) & 1) == 0)
                    break;
                  v48 = (_QWORD *)(v37 + 16 * v47);
                  v49 = v48[1];
                  v50 = *v48 == v33 && v49 == v12;
                  if (v50 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v48, v49, v33, v12, 0) & 1) != 0)
                    goto LABEL_60;
                }
              }
              swift_bridgeObjectRelease(v12);
              swift_release(v11);
              i = v56;
            }
            else
            {
              swift_bridgeObjectRelease(v12);
              swift_release(v11);
            }
            v5 = v53;
          }
          if (++v32 == i)
          {
            v51 = v55;
            goto LABEL_70;
          }
        }
      }
      __break(1u);
LABEL_65:
      if (v4 >= 0)
        v52 = v5;
      else
        v52 = v4;
    }
LABEL_69:
    v51 = v4;
LABEL_70:
    swift_bridgeObjectRelease(v51);
    return 0;
  }
  else
  {
    v29 = v1[9];
    v30 = v1[10];
    swift_bridgeObjectRetain(v30);
    LOBYTE(v29) = specialized Set.contains(_:)(v29, v30, a1);
    swift_bridgeObjectRelease(v30);
    return v29 & 1;
  }
}

uint64_t MOSuggestionInterstitialListAssetViewModel.hasConsistentSubArrays.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __n128 v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = v0;
  v2 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 224);
  v3 = v2();
  if (!v3)
    goto LABEL_12;
  v4 = v3;
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
  if (!v5)
  {
    v8 = v4;
LABEL_11:
    swift_bridgeObjectRelease(v8);
    goto LABEL_12;
  }
  v6 = v5;
  v7 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
  if (!v7)
  {
    swift_bridgeObjectRelease(v4);
    v8 = v6;
    goto LABEL_11;
  }
  v8 = v7;
  v9 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRelease(v4);
  if ((unint64_t)v6 >> 62)
  {
    if (v6 >= 0)
      v42 = v6 & 0xFFFFFFFFFFFFFF8;
    else
      v42 = v6;
    swift_bridgeObjectRetain(v6);
    v10 = _CocoaArrayWrapper.endIndex.getter(v42);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v6);
  if (v9 != v10)
    goto LABEL_11;
  v11 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRelease(v8);
  if (v9 == v11)
    return 1;
LABEL_12:
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1)
    swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
  v13 = type metadata accessor for Logger(0);
  __swift_project_value_buffer(v13, (uint64_t)static MOAngelLogger.assets);
  v14 = swift_retain_n(v1, 6);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(32, -1);
    v18 = swift_slowAlloc(96, -1);
    v44 = v18;
    *(_DWORD *)v17 = 136315650;
    v19 = v2();
    if (v19)
    {
      v20 = v19;
      v21 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
      v22 = Array.debugDescription.getter(v20, v21);
      v24 = v23;
      swift_bridgeObjectRelease(v20);
    }
    else
    {
      v24 = 0xE300000000000000;
      v22 = 7104878;
    }
    v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v17 + 4);
    swift_release_n(v1, 2, v26);
    v27 = swift_bridgeObjectRelease(v24);
    *(_WORD *)(v17 + 12) = 2080;
    v28 = (*(uint64_t (**)(__n128))(*(_QWORD *)v1 + 272))(v27);
    if (v28)
    {
      v29 = v28;
      v30 = type metadata accessor for MOSuggestionSheetImage();
      v31 = Array.debugDescription.getter(v29, v30);
      v33 = v32;
      swift_bridgeObjectRelease(v29);
    }
    else
    {
      v33 = 0xE300000000000000;
      v31 = 7104878;
    }
    v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v17 + 14);
    swift_release_n(v1, 2, v34);
    v35 = swift_bridgeObjectRelease(v33);
    *(_WORD *)(v17 + 22) = 2080;
    v36 = (*(uint64_t (**)(__n128))(*(_QWORD *)v1 + 248))(v35);
    if (v36)
    {
      v37 = v36;
      v38 = Array.debugDescription.getter(v36, &type metadata for String);
      v40 = v39;
      swift_bridgeObjectRelease(v37);
    }
    else
    {
      v40 = 0xE300000000000000;
      v38 = 7104878;
    }
    v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v17 + 24);
    swift_release_n(v1, 2, v41);
    swift_bridgeObjectRelease(v40);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "[MOSuggestionInterstitialListAssetViewModel] inconsistent sub arrays dates=%s, icons=%s, titles=%s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy(v18, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_release_n(v1, 6, v25);
  }
  return 0;
}

void *MOSuggestionInterstitialListAssetViewModel.DOT_SEPARATOR.unsafeMutableAddressor()
{
  return &static MOSuggestionInterstitialListAssetViewModel.DOT_SEPARATOR;
}

void one-time initialization function for TIME_SEPARATOR()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v4._object = (void *)0x80000001001A9250;
  v1._countAndFlagsBits = 2108704;
  v1._object = (void *)0xE300000000000000;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0xD000000000000034;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  static MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR = (__int128)v3;
}

__int128 *MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR.unsafeMutableAddressor()
{
  if (one-time initialization token for TIME_SEPARATOR != -1)
    swift_once(&one-time initialization token for TIME_SEPARATOR, one-time initialization function for TIME_SEPARATOR);
  return &static MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR;
}

uint64_t static MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR.getter()
{
  return static MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR.getter(&one-time initialization token for TIME_SEPARATOR, (uint64_t *)&static MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR, (_QWORD *)&static MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR + 1);
}

void one-time initialization function for COMMA_SEPARATOR()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v4._object = (void *)0x80000001001A9290;
  v1._countAndFlagsBits = 8236;
  v1._object = (void *)0xE200000000000000;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0xD000000000000017;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  static MOSuggestionInterstitialListAssetViewModel.COMMA_SEPARATOR = (__int128)v3;
}

__int128 *MOSuggestionInterstitialListAssetViewModel.COMMA_SEPARATOR.unsafeMutableAddressor()
{
  if (one-time initialization token for COMMA_SEPARATOR != -1)
    swift_once(&one-time initialization token for COMMA_SEPARATOR, one-time initialization function for COMMA_SEPARATOR);
  return &static MOSuggestionInterstitialListAssetViewModel.COMMA_SEPARATOR;
}

uint64_t static MOSuggestionInterstitialListAssetViewModel.COMMA_SEPARATOR.getter()
{
  return static MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR.getter(&one-time initialization token for COMMA_SEPARATOR, (uint64_t *)&static MOSuggestionInterstitialListAssetViewModel.COMMA_SEPARATOR, (_QWORD *)&static MOSuggestionInterstitialListAssetViewModel.COMMA_SEPARATOR + 1);
}

uint64_t static MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR.getter(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;

  if (*a1 != -1)
    swift_once();
  v5 = *a2;
  swift_bridgeObjectRetain(*a3);
  return v5;
}

uint64_t MOSuggestionInterstitialListAssetViewModel._groupAssetTypeAndCountDescription(with:)(unint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  unint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  int64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t result;
  uint64_t v67;
  unsigned __int8 *v68;
  char *v69;
  unsigned __int8 v70[32];
  _QWORD *v71;
  unsigned __int8 *v72;

  v3 = type metadata accessor for Locale(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for String.LocalizationValue(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 176))(v7);
  if (!v10)
  {
LABEL_4:
    v12 = v1[65];
    if (v12 == 26)
      return 0;
    v16 = 0;
    if (a1)
    {
      v14 = *((_QWORD *)v1 + 9);
      v15 = *((_QWORD *)v1 + 10);
      swift_bridgeObjectRetain(v15);
      LOBYTE(v14) = specialized Set.contains(_:)(v14, v15, a1);
      swift_bridgeObjectRelease(v15);
      if ((v14 & 1) == 0)
        v16 = 1;
    }
    (*(void (**)(_BOOL8))(*(_QWORD *)v1 + 304))(v16);
    MOSuggestionAssetVisualSubType.localizableKeyWithCount(count:)(1, v12);
    static Locale.current.getter(v39);
    return String.init(localized:table:bundle:locale:comment:)(v9, 0xD000000000000012, 0x80000001001A90C0, 0, v5, "Asset Type Description", 22, 2);
  }
  v11 = v10;
  if ((v1[65] | 0x10) == 0x1A)
  {
    swift_bridgeObjectRelease(v10);
    goto LABEL_4;
  }
  v17 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  v72 = (unsigned __int8 *)v17;
  v71 = &_swiftEmptySetSingleton;
  v18 = v11 & 0xFFFFFFFFFFFFFF8;
  if ((unint64_t)v11 >> 62)
    goto LABEL_47;
  v19 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v19)
  {
LABEL_51:
    swift_bridgeObjectRelease(v11);
    if (*(_QWORD *)(v17 + 16))
      goto LABEL_41;
    goto LABEL_52;
  }
LABEL_11:
  v68 = v1;
  if (v19 < 1)
    goto LABEL_91;
  v17 = 0;
  v20 = v11 & 0xC000000000000001;
  v69 = (char *)v11;
  do
  {
    if (v20)
    {
      v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v11);
    }
    else
    {
      v21 = *(_QWORD *)(v11 + 8 * v17 + 32);
      swift_retain(v21);
    }
    v22 = *(unsigned __int8 *)(v21 + 65);
    if (v22 == 26)
      goto LABEL_14;
    specialized Set._Variant.insert(_:)(v70, *(_BYTE *)(v21 + 65));
    if (a1)
    {
      v23 = *(_QWORD *)(v21 + 72);
      v24 = *(_QWORD *)(v21 + 80);
      swift_bridgeObjectRetain(v24);
      LOBYTE(v23) = specialized Set.contains(_:)(v23, v24, a1);
      swift_bridgeObjectRelease(v24);
      if ((v23 & 1) == 0)
        goto LABEL_14;
    }
    v1 = v72;
    if (*((_QWORD *)v72 + 2))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v22);
      if ((v25 & 1) != 0)
      {
        v1 = (unsigned __int8 *)&v72;
        v18 = (uint64_t)specialized Dictionary.subscript.modify(v70, v22);
        if ((*(_BYTE *)(v26 + 8) & 1) == 0)
        {
          if (__OFADD__(*(_QWORD *)v26, 1))
            goto LABEL_46;
          ++*(_QWORD *)v26;
        }
        ((void (*)(unsigned __int8 *, _QWORD))v18)(v70, 0);
LABEL_14:
        swift_release(v21);
        goto LABEL_15;
      }
    }
    v11 = v19;
    v27 = v20;
    v28 = a1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
    *(_QWORD *)v70 = v1;
    a1 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
    v18 = *((_QWORD *)v1 + 2);
    v31 = (v30 & 1) == 0;
    v32 = v18 + v31;
    if (__OFADD__(v18, v31))
    {
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      if (v11 >= 0)
        v40 = v18;
      else
        v40 = v11;
      swift_bridgeObjectRetain(v11);
      v19 = _CocoaArrayWrapper.endIndex.getter(v40);
      swift_bridgeObjectRelease(v11);
      if (!v19)
        goto LABEL_51;
      goto LABEL_11;
    }
    v33 = v30;
    if (*((_QWORD *)v1 + 3) >= v32)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v18 = *(_QWORD *)v70;
        if ((v30 & 1) == 0)
          goto LABEL_37;
      }
      else
      {
        v1 = v70;
        specialized _NativeDictionary.copy()();
        v18 = *(_QWORD *)v70;
        if ((v33 & 1) == 0)
          goto LABEL_37;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, isUniquelyReferenced_nonNull_native);
      v1 = *(unsigned __int8 **)v70;
      v34 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
      if ((v33 & 1) != (v35 & 1))
        goto LABEL_92;
      a1 = v34;
      v18 = *(_QWORD *)v70;
      if ((v33 & 1) == 0)
      {
LABEL_37:
        *(_QWORD *)(v18 + 8 * (a1 >> 6) + 64) |= 1 << a1;
        *(_BYTE *)(*(_QWORD *)(v18 + 48) + a1) = v22;
        *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * a1) = 1;
        v36 = *(_QWORD *)(v18 + 16);
        v37 = __OFADD__(v36, 1);
        v38 = v36 + 1;
        if (v37)
          goto LABEL_45;
        *(_QWORD *)(v18 + 16) = v38;
        goto LABEL_39;
      }
    }
    *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * a1) = 1;
LABEL_39:
    v72 = (unsigned __int8 *)v18;
    swift_release(v21);
    swift_bridgeObjectRelease(0x8000000000000000);
    a1 = v28;
    v20 = v27;
    v19 = v11;
    v11 = (uint64_t)v69;
LABEL_15:
    ++v17;
  }
  while (v19 != v17);
  swift_bridgeObjectRelease(v11);
  v17 = (unint64_t)v72;
  v1 = v68;
  if (*((_QWORD *)v72 + 2))
  {
LABEL_41:
    swift_bridgeObjectRelease(v71);
    (*(void (**)(_QWORD))(*(_QWORD *)v1 + 304))(0);
LABEL_85:
    v65 = swift_bridgeObjectRetain(v17);
    v13 = specialized static MOSuggestionInterstitialListAssetViewModel.assetVisualSubTypesToCountString(_:includeCount:separator:)(v65, 1, 0x20A280E220, 0xA500000000000000);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v17);
    return v13;
  }
LABEL_52:
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 304))(1);
  v41 = 0;
  v42 = v71;
  v43 = v71[7];
  v69 = (char *)(v71 + 7);
  v44 = 1 << *((_BYTE *)v71 + 32);
  v45 = -1;
  if (v44 < 64)
    v45 = ~(-1 << v44);
  v46 = v45 & v43;
  v47 = (unint64_t)(v44 + 63) >> 6;
  while (2)
  {
    if (v46)
    {
      v48 = __clz(__rbit64(v46));
      v46 &= v46 - 1;
      v49 = v48 | (v41 << 6);
    }
    else
    {
      v50 = v41 + 1;
      if (__OFADD__(v41, 1))
        goto LABEL_89;
      if (v50 >= v47)
      {
LABEL_84:
        v72 = (unsigned __int8 *)v17;
        swift_release(v42);
        goto LABEL_85;
      }
      v51 = *(_QWORD *)&v69[8 * v50];
      ++v41;
      if (!v51)
      {
        v41 = v50 + 1;
        if (v50 + 1 >= v47)
          goto LABEL_84;
        v51 = *(_QWORD *)&v69[8 * v41];
        if (!v51)
        {
          v41 = v50 + 2;
          if (v50 + 2 >= v47)
            goto LABEL_84;
          v51 = *(_QWORD *)&v69[8 * v41];
          if (!v51)
          {
            v52 = v50 + 3;
            if (v52 >= v47)
              goto LABEL_84;
            v51 = *(_QWORD *)&v69[8 * v52];
            if (!v51)
            {
              while (1)
              {
                v41 = v52 + 1;
                if (__OFADD__(v52, 1))
                  goto LABEL_90;
                if (v41 >= v47)
                  goto LABEL_84;
                v51 = *(_QWORD *)&v69[8 * v41];
                ++v52;
                if (v51)
                  goto LABEL_72;
              }
            }
            v41 = v52;
          }
        }
      }
LABEL_72:
      v46 = (v51 - 1) & v51;
      v49 = __clz(__rbit64(v51)) + (v41 << 6);
    }
    v53 = *(_BYTE *)(v42[6] + v49);
    v54 = swift_isUniquelyReferenced_nonNull_native(v17);
    *(_QWORD *)v70 = v17;
    v56 = specialized __RawDictionaryStorage.find<A>(_:)(v53);
    v57 = *(_QWORD *)(v17 + 16);
    v58 = (v55 & 1) == 0;
    v59 = v57 + v58;
    if (!__OFADD__(v57, v58))
    {
      v60 = v55;
      if (*(_QWORD *)(v17 + 24) >= v59)
      {
        if ((v54 & 1) != 0)
        {
          v17 = *(_QWORD *)v70;
          if ((v55 & 1) == 0)
            goto LABEL_80;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v17 = *(_QWORD *)v70;
          if ((v60 & 1) == 0)
            goto LABEL_80;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v59, v54);
        v61 = specialized __RawDictionaryStorage.find<A>(_:)(v53);
        if ((v60 & 1) != (v62 & 1))
          goto LABEL_92;
        v56 = v61;
        v17 = *(_QWORD *)v70;
        if ((v60 & 1) == 0)
        {
LABEL_80:
          *(_QWORD *)(v17 + 8 * (v56 >> 6) + 64) |= 1 << v56;
          *(_BYTE *)(*(_QWORD *)(v17 + 48) + v56) = v53;
          *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v56) = 0;
          v63 = *(_QWORD *)(v17 + 16);
          v37 = __OFADD__(v63, 1);
          v64 = v63 + 1;
          if (v37)
            goto LABEL_88;
          *(_QWORD *)(v17 + 16) = v64;
          goto LABEL_56;
        }
      }
      *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v56) = 0;
LABEL_56:
      swift_bridgeObjectRelease(0x8000000000000000);
      continue;
    }
    break;
  }
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MOSuggestionAssetVisualSubType);
  __break(1u);
  return result;
}

uint64_t static MOSuggestionInterstitialListAssetViewModel.assetTypeSetToCountString(_:)(void *a1)
{
  id v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v9;

  v1 = a1;
  v2 = specialized Sequence.compactMap<A>(_:)(v1, v1);

  v9 = v2;
  swift_bridgeObjectRetain(v2);
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v9, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(_QWORD *))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_bridgeObjectRelease(v2);
  v3 = (uint64_t)v9;
  v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay16MomentsUIService19MOAssetAndMediaTypeV_SitG_SSs5NeverOTg504_s16d11UIService19fghi21VSiSSIggyo_AC_SitSSs5j137OIegnrzr_TR04_s16a61UIService42MOSuggestionInterstitialListAssetViewModelC25assetf44SetToCountStringySSSo09NSCountedK0CFZSSAA015cdE13J0V_P16XEfU1_Tf3nnnpf_nTf1cn_n((uint64_t)v9);
  swift_release(v3);
  v9 = v4;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  v6 = lazy protocol witness table accessor for type [String] and conformance [A]();
  v7 = BidirectionalCollection<>.joined(separator:)(0x20A280E220, 0xA500000000000000, v5, v6);
  swift_bridgeObjectRelease(v4);
  return v7;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.groupAssetTypeAndCountDescription(selectedAssetIdentifiers:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = MOSuggestionInterstitialListAssetViewModel._groupAssetTypeAndCountDescription(with:)(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 208))(v2);
  return (*(uint64_t (**)(void))(*(_QWORD *)v1 + 200))();
}

uint64_t MOSuggestionInterstitialListAssetViewModel.singleFirstTitleAndDate.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v19;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
  __chkstk_darwin(v1);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v0[65];
  if (v9 > 0x19)
    goto LABEL_9;
  if (((1 << v9) & 0x20080F7) == 0
    || (v6 = MOSuggestionInterstitialListAssetViewModel.firstTitleAndDate.getter(), !v10))
  {
    if (v9 == 11)
    {
      v12 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 248))(v6);
      if (v12)
      {
        v13 = v12;
        if (v12[2])
        {
          v11 = v12[4];
          swift_bridgeObjectRetain(v12[5]);
          swift_bridgeObjectRelease(v13);
          return v11;
        }
        swift_bridgeObjectRelease(v12);
      }
      return 0;
    }
LABEL_9:
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 224))(v6);
    if (v14)
    {
      v15 = v14;
      if (*(_QWORD *)(v14 + 16))
      {
        outlined init with copy of MOSuggestionSheetAssetDateRange(v14 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), (uint64_t)v3, type metadata accessor for MOSuggestionSheetAssetDateRange);
        v16 = 0;
      }
      else
      {
        v16 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, v16, 1, v4);
      v17 = swift_bridgeObjectRelease(v15);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v5 + 48))(v3, 1, v4, v17) != 1)
      {
        outlined init with take of MOSuggestionSheetAssetDateRange((uint64_t)v3, (uint64_t)v8, type metadata accessor for MOSuggestionSheetAssetDateRange);
        v11 = specialized MOSuggestionInterstitialListAssetViewModel.singleDateRangeRepresentation(_:)((uint64_t)v8);
        outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v8);
        return v11;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
    }
    outlined destroy of Any?((uint64_t)v3, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
    return 0;
  }
  return v6;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.firstTitleAndDate.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
  __chkstk_darwin(v1);
  v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 224))(v6);
  if (!v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
LABEL_7:
    outlined destroy of Any?((uint64_t)v3, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
    return 0;
  }
  v10 = v9;
  if (*(_QWORD *)(v9 + 16))
  {
    outlined init with copy of MOSuggestionSheetAssetDateRange(v9 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), (uint64_t)v3, type metadata accessor for MOSuggestionSheetAssetDateRange);
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, v11, 1, v4);
  v12 = swift_bridgeObjectRelease(v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v5 + 48))(v3, 1, v4, v12) == 1)
    goto LABEL_7;
  outlined init with take of MOSuggestionSheetAssetDateRange((uint64_t)v3, (uint64_t)v8, type metadata accessor for MOSuggestionSheetAssetDateRange);
  v15 = specialized MOSuggestionInterstitialListAssetViewModel.singleDateRangeRepresentation(_:)((uint64_t)v8);
  v17 = v16;
  if (!v16)
  {
    outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v8);
    return 0;
  }
  v18 = v15;
  v19 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
  if (v19)
  {
    v20 = v19;
    if (v19[2])
    {
      v22 = v19[4];
      v21 = v19[5];
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRelease(v20);
      v26 = v22;
      v27 = v21;
      swift_bridgeObjectRetain(v21);
      v23._countAndFlagsBits = 0x20A280E220;
      v23._object = (void *)0xA500000000000000;
      String.append(_:)(v23);
      swift_bridgeObjectRelease(v21);
      v24 = v27;
      swift_bridgeObjectRetain(v27);
      v25._countAndFlagsBits = v18;
      v25._object = v17;
      String.append(_:)(v25);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v17);
      v13 = v26;
      outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v8);
      return v13;
    }
    swift_bridgeObjectRelease(v17);
    v17 = v20;
  }
  swift_bridgeObjectRelease(v17);
  outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v8);
  return 0;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.topLevelSubtitleString.getter()
{
  uint64_t v0;

  if ((*(unsigned __int8 *)(v0 + 65) | 4) == 0xF)
    return MOSuggestionInterstitialListAssetViewModel.concactenatedTitles.getter();
  else
    return MOSuggestionInterstitialListAssetViewModel.toplevelDateRangeString.getter();
}

uint64_t MOSuggestionInterstitialListAssetViewModel.toplevelDateRangeString.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;

  v1 = type metadata accessor for Calendar(0);
  v53 = *(_QWORD *)(v1 - 8);
  v54 = v1;
  __chkstk_darwin(v1);
  v52 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v3);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v56 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v51 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v55 = (char *)&v49 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v49 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v49 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v49 - v25;
  if (v0[65] - 17 > 1)
  {
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 224))(v24);
    v29 = v28;
    if (!v28)
      return 0;
    v50 = v6;
    v30 = *(_QWORD *)(v28 + 16);
    if (!v30)
    {
      swift_bridgeObjectRelease(v28);
      return 0;
    }
    v49 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    outlined init with copy of MOSuggestionSheetAssetDateRange(v28 + v49, (uint64_t)v26, type metadata accessor for MOSuggestionSheetAssetDateRange);
    if (v30 == 1)
    {
      swift_bridgeObjectRelease(v29);
    }
    else
    {
      v57 = v29;
      swift_bridgeObjectRetain(v29);
      specialized MutableCollection<>.sort(by:)(&v57);
      swift_bridgeObjectRelease(v29);
      v31 = v57;
      v32 = *(_QWORD *)(v57 + 16);
      if (v32)
      {
        v49 += v57;
        outlined init with copy of MOSuggestionSheetAssetDateRange(v49, (uint64_t)v23, type metadata accessor for MOSuggestionSheetAssetDateRange);
        outlined init with copy of MOSuggestionSheetAssetDateRange(v49 + *(_QWORD *)(v14 + 72) * (v32 - 1), (uint64_t)v12, type metadata accessor for MOSuggestionSheetAssetDateRange);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
        v33 = swift_release(v31);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v14 + 48))(v12, 1, v13, v33) != 1)
        {
          outlined init with take of MOSuggestionSheetAssetDateRange((uint64_t)v12, (uint64_t)v20, type metadata accessor for MOSuggestionSheetAssetDateRange);
          v35 = v56;
          v36 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
          v37 = v50;
          v36(v55, v23, v50);
          outlined init with copy of Date?((uint64_t)&v20[*(int *)(v13 + 20)], (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Date?);
          outlined init with copy of MOSuggestionSheetAssetDateRange((uint64_t)v20, (uint64_t)v17, type metadata accessor for MOSuggestionSheetAssetDateRange);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v5, 1, v37) == 1)
          {
            v38 = (uint64_t)v51;
            v36(v51, v17, v37);
            outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v17);
            v39 = outlined destroy of Any?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Date?);
          }
          else
          {
            outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v17);
            v40 = *(uint64_t (**)(char *, char *, uint64_t))(v35 + 32);
            v38 = (uint64_t)v51;
            v39 = v40(v51, v5, v37);
          }
          v42 = v53;
          v41 = v54;
          v43 = v52;
          static Calendar.current.getter(v39);
          v44 = (uint64_t)v55;
          v45 = Calendar.isDate(_:inSameDayAs:)(v55, v38);
          (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
          if ((v45 & 1) != 0)
            v46 = specialized MOSuggestionInterstitialListAssetViewModel.timeRangeWithSameDayRepresentation(startTime:endTime:)(v44, v38);
          else
            v46 = specialized MOSuggestionInterstitialListAssetViewModel.timeRangeWithDifferentDaysRepresentation(startTime:endTime:)();
          v27 = v46;
          v47 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
          v48 = v50;
          v47(v38, v50);
          v47(v44, v48);
          outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v20);
          outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v23);
          goto LABEL_14;
        }
        outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v23);
        outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
      }
      else
      {
        swift_release(v57);
      }
    }
    v27 = specialized MOSuggestionInterstitialListAssetViewModel.singleDateRangeRepresentation(_:)((uint64_t)v26);
LABEL_14:
    outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v26);
    return v27;
  }
  return MOSuggestionInterstitialListAssetViewModel.singleFirstTitleAndDate.getter();
}

uint64_t MOSuggestionInterstitialListAssetViewModel.concactenatedTitles.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  Swift::String v31;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 176))();
  v3 = v2;
  if (v2)
  {
    if ((unint64_t)v2 >> 62)
    {
      if (v2 >= 0)
        v0 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFF8);
      else
        v0 = (_QWORD *)v2;
      swift_bridgeObjectRetain(v2);
      v4 = _CocoaArrayWrapper.endIndex.getter(v0);
      if (v4)
        goto LABEL_4;
    }
    else
    {
      v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v2);
      if (v4)
      {
LABEL_4:
        if (v4 < 1)
        {
          __break(1u);
          goto LABEL_36;
        }
        v5 = 0;
        v0 = _swiftEmptyArrayStorage;
        do
        {
          if ((v3 & 0xC000000000000001) != 0)
          {
            v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
          }
          else
          {
            v6 = *(_QWORD *)(v3 + 8 * v5 + 32);
            v7 = swift_retain(v6);
          }
          v8 = (_QWORD *)(*(uint64_t (**)(__n128))(*(_QWORD *)v6 + 248))(v7);
          if (v8)
          {
            v9 = v8;
            if (v8[2])
            {
              v11 = v8[4];
              v10 = v8[5];
              swift_bridgeObjectRetain(v10);
              swift_release(v6);
              swift_bridgeObjectRelease(v9);
              if ((swift_isUniquelyReferenced_nonNull_native(v0) & 1) == 0)
                v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v0[2] + 1, 1, v0);
              v13 = v0[2];
              v12 = v0[3];
              if (v13 >= v12 >> 1)
                v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v0);
              v0[2] = v13 + 1;
              v14 = &v0[2 * v13];
              v14[4] = v11;
              v14[5] = v10;
            }
            else
            {
              swift_release(v6);
              swift_bridgeObjectRelease(v9);
            }
          }
          else
          {
            swift_release(v6);
          }
          ++v5;
        }
        while (v4 != v5);
LABEL_25:
        swift_bridgeObjectRelease_n(v3, 2);
        v15 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v16._countAndFlagsBits = 0xD000000000000021;
        v31._object = (void *)0x80000001001A9110;
        v16._object = (void *)0x80000001001A90E0;
        v17._countAndFlagsBits = 0x26204025202C4025;
        v17._object = (void *)0xED000065726F6D20;
        v31._countAndFlagsBits = 0xD00000000000001FLL;
        v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v31);

        v19 = v0[2];
        if (v19 > 2)
        {
          v21 = v0[4];
          v20 = v0[5];
          v23 = v0[6];
          v22 = v0[7];
          swift_bridgeObjectRetain(v20);
          swift_bridgeObjectRetain(v22);
          swift_bridgeObjectRelease(v0);
          v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
          v0 = (_QWORD *)swift_allocObject(v24, 112, 7);
          *((_OWORD *)v0 + 1) = xmmword_10019EEE0;
          v0[7] = &type metadata for String;
          v25 = lazy protocol witness table accessor for type String and conformance String();
          v0[4] = v21;
          v0[5] = v20;
          v0[12] = &type metadata for String;
          v0[13] = v25;
          v0[8] = v25;
          v0[9] = v23;
          v0[10] = v22;
          v3 = static String.localizedStringWithFormat(_:_:)(v18._countAndFlagsBits, v18._object, v0);
          swift_bridgeObjectRelease(v18._object);
LABEL_32:
          swift_bridgeObjectRelease(v0);
          return v3;
        }
        swift_bridgeObjectRelease(v18._object);
        if (v19 != 2)
        {
          if (!v0[2])
          {
            swift_bridgeObjectRelease(v0);
            return 0;
          }
          v3 = v0[4];
          swift_bridgeObjectRetain(v0[5]);
          goto LABEL_32;
        }
        if (one-time initialization token for COMMA_SEPARATOR == -1)
        {
LABEL_29:
          v27 = *((_QWORD *)&static MOSuggestionInterstitialListAssetViewModel.COMMA_SEPARATOR + 1);
          v26 = static MOSuggestionInterstitialListAssetViewModel.COMMA_SEPARATOR;
          v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
          v29 = lazy protocol witness table accessor for type [String] and conformance [A]();
          v3 = BidirectionalCollection<>.joined(separator:)(v26, v27, v28, v29);
          goto LABEL_32;
        }
LABEL_36:
        swift_once(&one-time initialization token for COMMA_SEPARATOR, one-time initialization function for COMMA_SEPARATOR);
        goto LABEL_29;
      }
    }
    v0 = _swiftEmptyArrayStorage;
    goto LABEL_25;
  }
  return v3;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.subLevelDateRangeString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v15;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
  __chkstk_darwin(v1);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 224))(v6);
  if (v9)
  {
    v10 = v9;
    if (*(_QWORD *)(v9 + 16))
    {
      outlined init with copy of MOSuggestionSheetAssetDateRange(v9 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), (uint64_t)v3, type metadata accessor for MOSuggestionSheetAssetDateRange);
      v11 = 0;
    }
    else
    {
      v11 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, v11, 1, v4);
    v12 = swift_bridgeObjectRelease(v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v5 + 48))(v3, 1, v4, v12) != 1)
    {
      outlined init with take of MOSuggestionSheetAssetDateRange((uint64_t)v3, (uint64_t)v8, type metadata accessor for MOSuggestionSheetAssetDateRange);
      v13 = specialized MOSuggestionInterstitialListAssetViewModel.singleDateRangeRepresentation(_:)((uint64_t)v8);
      outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v8);
      return v13;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  }
  outlined destroy of Any?((uint64_t)v3, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
  return 0;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

{
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v6 = *a1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
  *a1 = v6;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v6 < 0 || (v6 & 0x4000000000000000) != 0)
  {
    v6 = a2(v6);
    *a1 = v6;
  }
  v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v11[0] = (v6 & 0xFFFFFFFFFFFFFF8) + 32;
  v11[1] = v8;
  v9 = a3(v11);
  return specialized Array._endMutation()(v9);
}

void specialized MutableCollection<>.sort(by:)(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[2];

  v2 = *(_QWORD *)(type metadata accessor for MOSuggestionSheetAssetDateRange(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v3;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  v3 = v2[2];
  v4[0] = (uint64_t)(v2 + 4);
  v4[1] = v3;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v4);
  *a1 = v2;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = v2[2];
  v4[0] = (uint64_t)(v2 + 4);
  v4[1] = v3;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v4);
  *a1 = v2;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  Swift::Int v19;
  unint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  Swift::Int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::Int v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  uint64_t v46;
  Swift::Int v47;
  uint64_t v48;
  Swift::Int v49;
  Swift::Int v50;
  uint64_t v51;
  Swift::Int v52;
  uint64_t v53;
  Swift::Int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  Swift::Int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  char v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  char *v121;
  _QWORD *v122;
  char *v123;
  _QWORD *v124;
  Swift::Int v125;
  uint64_t v126;
  Swift::Int v127;
  uint64_t v128;
  Swift::Int v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  Swift::Int v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;

  v2 = v1;
  v4 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  v131 = *(_QWORD *)(v4 - 8);
  v132 = v4;
  v5 = __chkstk_darwin(v4);
  v128 = (uint64_t)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v138 = (uint64_t)&v123 - v8;
  v9 = __chkstk_darwin(v7);
  v135 = (uint64_t)&v123 - v10;
  __chkstk_darwin(v9);
  v134 = (uint64_t)&v123 - v11;
  v12 = a1[1];
  v13 = _minimumMergeRunLength(_:)(v12);
  if (v13 >= v12)
  {
    if (v12 < 0)
      goto LABEL_143;
    if (v12)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v12, 1, a1);
    return;
  }
  if (v12 >= 0)
    v14 = v12;
  else
    v14 = v12 + 1;
  if (v12 < -1)
    goto LABEL_151;
  v125 = v13;
  if (v12 < 2)
  {
    v18 = (char *)_swiftEmptyArrayStorage;
    v130 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80));
    v124 = _swiftEmptyArrayStorage;
    if (v12 != 1)
    {
      v20 = _swiftEmptyArrayStorage[2];
LABEL_106:
      if (v20 >= 2)
      {
        v115 = *a1;
        do
        {
          v116 = v20 - 2;
          if (v20 < 2)
            goto LABEL_138;
          if (!v115)
            goto LABEL_150;
          v109 = v18;
          v117 = *(_QWORD *)&v18[16 * v116 + 32];
          v118 = *(_QWORD *)&v18[16 * v20 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v115 + *(_QWORD *)(v131 + 72) * v117, v115 + *(_QWORD *)(v131 + 72) * *(_QWORD *)&v18[16 * v20 + 16], v115 + *(_QWORD *)(v131 + 72) * v118, v130);
          if (v2)
            goto LABEL_118;
          if (v118 < v117)
            goto LABEL_139;
          if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
            v109 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v18);
          if (v116 >= *((_QWORD *)v109 + 2))
            goto LABEL_140;
          v119 = &v109[16 * v116 + 32];
          *(_QWORD *)v119 = v117;
          *((_QWORD *)v119 + 1) = v118;
          v120 = *((_QWORD *)v109 + 2);
          if (v20 > v120)
            goto LABEL_141;
          memmove(&v109[16 * v20 + 16], &v109[16 * v20 + 32], 16 * (v120 - v20));
          *((_QWORD *)v109 + 2) = v120 - 1;
          v20 = v120 - 1;
          v18 = v109;
        }
        while (v120 > 2);
      }
      v121 = v18;
LABEL_120:
      swift_bridgeObjectRelease(v121);
      v122 = v124;
      v124[2] = 0;
      swift_bridgeObjectRelease(v122);
      return;
    }
  }
  else
  {
    v15 = v14 >> 1;
    v16 = static Array._allocateBufferUninitialized(minimumCapacity:)(v14 >> 1, v132);
    *(_QWORD *)(v16 + 16) = v15;
    v17 = *(unsigned __int8 *)(v131 + 80);
    v124 = (_QWORD *)v16;
    v130 = v16 + ((v17 + 32) & ~v17);
  }
  v19 = 0;
  v18 = (char *)_swiftEmptyArrayStorage;
  v137 = a1;
  while (1)
  {
    v21 = v19;
    v22 = v19 + 1;
    if (v19 + 1 >= v12)
    {
      v38 = v19 + 1;
      goto LABEL_58;
    }
    v126 = v2;
    v23 = *a1;
    v24 = v19;
    v129 = v19;
    v25 = *(_QWORD *)(v131 + 72);
    v26 = v134;
    outlined init with copy of MOSuggestionSheetAssetDateRange(v23 + v25 * v22, v134, type metadata accessor for MOSuggestionSheetAssetDateRange);
    v136 = v12;
    v27 = v135;
    outlined init with copy of MOSuggestionSheetAssetDateRange(v23 + v25 * v24, v135, type metadata accessor for MOSuggestionSheetAssetDateRange);
    v28 = static Date.< infix(_:_:)(v26, v27);
    v29 = v27;
    v30 = v136;
    outlined destroy of MOSuggestionSheetAssetDateRange(v29);
    outlined destroy of MOSuggestionSheetAssetDateRange(v26);
    v139 = v25;
    v133 = v23;
    if (v129 + 2 < v30)
      break;
    v33 = v129 + 2;
    v21 = v129;
    if ((v28 & 1) == 0)
      goto LABEL_37;
LABEL_23:
    v39 = v139;
    if (v33 < v21)
      goto LABEL_144;
    v38 = v33;
    if (v21 >= v33)
      goto LABEL_38;
    v123 = v18;
    v40 = 0;
    v41 = v139 * (v33 - 1);
    v42 = v21;
    v43 = v33 * v139;
    v44 = v42;
    v45 = v42 * v139;
    v46 = v133;
    do
    {
      if (v44 != v38 + v40 - 1)
      {
        if (!v46)
          goto LABEL_149;
        outlined init with take of MOSuggestionSheetAssetDateRange(v46 + v45, v128, type metadata accessor for MOSuggestionSheetAssetDateRange);
        if (v45 < v41 || v46 + v45 >= (unint64_t)(v46 + v43))
        {
          swift_arrayInitWithTakeFrontToBack(v46 + v45, v46 + v41);
        }
        else if (v45 != v41)
        {
          swift_arrayInitWithTakeBackToFront(v46 + v45, v46 + v41);
        }
        outlined init with take of MOSuggestionSheetAssetDateRange(v128, v46 + v41, type metadata accessor for MOSuggestionSheetAssetDateRange);
        a1 = v137;
        v38 = v33;
        v39 = v139;
      }
      ++v44;
      --v40;
      v41 -= v39;
      v43 -= v39;
      v45 += v39;
    }
    while (v44 < v38 + v40);
    v18 = v123;
    v2 = v126;
    v21 = v129;
    v30 = v136;
    if (v38 < v136)
      goto LABEL_41;
LABEL_58:
    if (v38 < v21)
      goto LABEL_137;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    v136 = v38;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
    v64 = *((_QWORD *)v18 + 2);
    v63 = *((_QWORD *)v18 + 3);
    v20 = v64 + 1;
    if (v64 >= v63 >> 1)
      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v63 > 1), v64 + 1, 1, v18);
    *((_QWORD *)v18 + 2) = v20;
    v65 = v18 + 32;
    v66 = &v18[16 * v64 + 32];
    v67 = v136;
    *(_QWORD *)v66 = v21;
    *((_QWORD *)v66 + 1) = v67;
    if (v64)
    {
      while (1)
      {
        v68 = v20 - 1;
        if (v20 >= 4)
        {
          v73 = &v65[16 * v20];
          v74 = *((_QWORD *)v73 - 8);
          v75 = *((_QWORD *)v73 - 7);
          v79 = __OFSUB__(v75, v74);
          v76 = v75 - v74;
          if (v79)
            goto LABEL_126;
          v78 = *((_QWORD *)v73 - 6);
          v77 = *((_QWORD *)v73 - 5);
          v79 = __OFSUB__(v77, v78);
          v71 = v77 - v78;
          v72 = v79;
          if (v79)
            goto LABEL_127;
          v80 = v20 - 2;
          v81 = &v65[16 * v20 - 32];
          v83 = *(_QWORD *)v81;
          v82 = *((_QWORD *)v81 + 1);
          v79 = __OFSUB__(v82, v83);
          v84 = v82 - v83;
          if (v79)
            goto LABEL_129;
          v79 = __OFADD__(v71, v84);
          v85 = v71 + v84;
          if (v79)
            goto LABEL_132;
          if (v85 >= v76)
          {
            v103 = &v65[16 * v68];
            v105 = *(_QWORD *)v103;
            v104 = *((_QWORD *)v103 + 1);
            v79 = __OFSUB__(v104, v105);
            v106 = v104 - v105;
            if (v79)
              goto LABEL_136;
            v96 = v71 < v106;
            goto LABEL_95;
          }
        }
        else
        {
          if (v20 != 3)
          {
            v97 = *((_QWORD *)v18 + 4);
            v98 = *((_QWORD *)v18 + 5);
            v79 = __OFSUB__(v98, v97);
            v90 = v98 - v97;
            v91 = v79;
            goto LABEL_89;
          }
          v70 = *((_QWORD *)v18 + 4);
          v69 = *((_QWORD *)v18 + 5);
          v79 = __OFSUB__(v69, v70);
          v71 = v69 - v70;
          v72 = v79;
        }
        if ((v72 & 1) != 0)
          goto LABEL_128;
        v80 = v20 - 2;
        v86 = &v65[16 * v20 - 32];
        v88 = *(_QWORD *)v86;
        v87 = *((_QWORD *)v86 + 1);
        v89 = __OFSUB__(v87, v88);
        v90 = v87 - v88;
        v91 = v89;
        if (v89)
          goto LABEL_131;
        v92 = &v65[16 * v68];
        v94 = *(_QWORD *)v92;
        v93 = *((_QWORD *)v92 + 1);
        v79 = __OFSUB__(v93, v94);
        v95 = v93 - v94;
        if (v79)
          goto LABEL_134;
        if (__OFADD__(v90, v95))
          goto LABEL_135;
        if (v90 + v95 >= v71)
        {
          v96 = v71 < v95;
LABEL_95:
          if (v96)
            v68 = v80;
          goto LABEL_97;
        }
LABEL_89:
        if ((v91 & 1) != 0)
          goto LABEL_130;
        v99 = &v65[16 * v68];
        v101 = *(_QWORD *)v99;
        v100 = *((_QWORD *)v99 + 1);
        v79 = __OFSUB__(v100, v101);
        v102 = v100 - v101;
        if (v79)
          goto LABEL_133;
        if (v102 < v90)
          goto LABEL_14;
LABEL_97:
        v107 = v68 - 1;
        if (v68 - 1 >= v20)
        {
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
          goto LABEL_146;
        }
        v108 = *a1;
        if (!*a1)
          goto LABEL_148;
        v109 = v18;
        v110 = &v65[16 * v107];
        v111 = *(_QWORD *)v110;
        v112 = &v65[16 * v68];
        v113 = *((_QWORD *)v112 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(v108 + *(_QWORD *)(v131 + 72) * *(_QWORD *)v110, v108 + *(_QWORD *)(v131 + 72) * *(_QWORD *)v112, v108 + *(_QWORD *)(v131 + 72) * v113, v130);
        if (v2)
        {
LABEL_118:
          v121 = v109;
          goto LABEL_120;
        }
        if (v113 < v111)
          goto LABEL_123;
        if (v68 > *((_QWORD *)v109 + 2))
          goto LABEL_124;
        *(_QWORD *)v110 = v111;
        *(_QWORD *)&v65[16 * v107 + 8] = v113;
        v114 = *((_QWORD *)v109 + 2);
        if (v68 >= v114)
          goto LABEL_125;
        v18 = v109;
        v20 = v114 - 1;
        memmove(&v65[16 * v68], v112 + 16, 16 * (v114 - 1 - v68));
        *((_QWORD *)v109 + 2) = v114 - 1;
        a1 = v137;
        if (v114 <= 2)
          goto LABEL_14;
      }
    }
    v20 = 1;
LABEL_14:
    v12 = a1[1];
    v19 = v136;
    if (v136 >= v12)
      goto LABEL_106;
  }
  v31 = v25 * v22;
  v32 = v23;
  v33 = v129 + 2;
  v34 = v25 * (v129 + 2);
  while (1)
  {
    v35 = v134;
    outlined init with copy of MOSuggestionSheetAssetDateRange(v32 + v34, v134, type metadata accessor for MOSuggestionSheetAssetDateRange);
    v36 = v135;
    outlined init with copy of MOSuggestionSheetAssetDateRange(v32 + v31, v135, type metadata accessor for MOSuggestionSheetAssetDateRange);
    v37 = static Date.< infix(_:_:)(v35, v36);
    outlined destroy of MOSuggestionSheetAssetDateRange(v36);
    outlined destroy of MOSuggestionSheetAssetDateRange(v35);
    if (((v28 ^ v37) & 1) != 0)
      break;
    v32 += v139;
    if (v136 == ++v33)
    {
      v30 = v136;
      a1 = v137;
      v33 = v136;
      goto LABEL_36;
    }
  }
  v30 = v136;
  a1 = v137;
LABEL_36:
  v21 = v129;
  if ((v28 & 1) != 0)
    goto LABEL_23;
LABEL_37:
  v38 = v33;
LABEL_38:
  v2 = v126;
  if (v38 >= v30)
    goto LABEL_58;
LABEL_41:
  if (__OFSUB__(v38, v21))
    goto LABEL_142;
  if (v38 - v21 >= v125)
    goto LABEL_58;
  if (__OFADD__(v21, v125))
    goto LABEL_145;
  if (v21 + v125 >= v30)
    v47 = v30;
  else
    v47 = v21 + v125;
  if (v47 >= v21)
  {
    if (v38 != v47)
    {
      v129 = v21;
      v123 = v18;
      v126 = v2;
      v127 = v47;
      v48 = *(_QWORD *)(v131 + 72);
      v139 = v48 * (v38 - 1);
      v133 = v48;
      v49 = v38 * v48;
      do
      {
        v51 = 0;
        v52 = v129;
        v136 = v38;
        while (1)
        {
          v53 = *a1;
          v54 = v49;
          v55 = v49 + v51 + *a1;
          v56 = a1;
          v57 = v134;
          outlined init with copy of MOSuggestionSheetAssetDateRange(v55, v134, type metadata accessor for MOSuggestionSheetAssetDateRange);
          v58 = v135;
          outlined init with copy of MOSuggestionSheetAssetDateRange(v139 + v51 + v53, v135, type metadata accessor for MOSuggestionSheetAssetDateRange);
          LOBYTE(v53) = static Date.< infix(_:_:)(v57, v58);
          outlined destroy of MOSuggestionSheetAssetDateRange(v58);
          outlined destroy of MOSuggestionSheetAssetDateRange(v57);
          if ((v53 & 1) == 0)
            break;
          v59 = *v56;
          if (!*v56)
            goto LABEL_147;
          v49 = v54;
          v60 = v59 + v54 + v51;
          v61 = v59 + v139 + v51;
          outlined init with take of MOSuggestionSheetAssetDateRange(v60, v138, type metadata accessor for MOSuggestionSheetAssetDateRange);
          swift_arrayInitWithTakeFrontToBack(v60, v61);
          outlined init with take of MOSuggestionSheetAssetDateRange(v138, v61, type metadata accessor for MOSuggestionSheetAssetDateRange);
          v51 -= v133;
          ++v52;
          v50 = v136;
          a1 = v137;
          if (v136 == v52)
            goto LABEL_51;
        }
        v50 = v136;
        a1 = v56;
        v49 = v54;
LABEL_51:
        v38 = v50 + 1;
        v139 += v133;
        v49 += v133;
      }
      while (v38 != v127);
      v38 = v127;
      v2 = v126;
      v18 = v123;
      v21 = v129;
    }
    goto LABEL_58;
  }
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  uint64_t v24;

  v24 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 32 * a3 + 24;
LABEL_6:
    result = *(_QWORD *)(v5 + 32 * v4);
    v7 = v24;
    v8 = v6;
    while (1)
    {
      v10 = (__int128 *)(v8 - 56);
      v9 = *(_QWORD *)(v8 - 56);
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v13 = v12;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      if (v11 == v14 && v13 == v15)
      {
        result = swift_bridgeObjectRelease_n(v13, 2);
LABEL_5:
        ++v4;
        v6 += 32;
        if (v4 == a2)
          return result;
        goto LABEL_6;
      }
      v17 = v15;
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v14, v15, 1);
      swift_bridgeObjectRelease(v13);
      result = swift_bridgeObjectRelease(v17);
      if ((v18 & 1) == 0)
        goto LABEL_5;
      if (!v5)
        break;
      v20 = *v10;
      v19 = *(_OWORD *)(v8 - 40);
      *(_QWORD *)(v8 - 32) = *(_QWORD *)v8;
      v8 -= 32;
      result = *(_QWORD *)(v8 + 8);
      v21 = *(_QWORD *)(v8 + 16);
      v22 = *(_BYTE *)(v8 + 24);
      v10[2] = v20;
      v10[3] = v19;
      *(_QWORD *)(v8 - 24) = result;
      *(_QWORD *)(v8 - 16) = v21;
      *(_BYTE *)(v8 - 8) = v22;
      if (v4 == ++v7)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unsigned __int8 *__src, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *__dst)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t result;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v16 = &v4[16 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v17 = (unsigned __int8 *)(a3 - 16);
        v18 = v6;
        while (1)
        {
          v19 = v17 + 16;
          v20 = *(v18 - 16);
          v18 -= 16;
          if (*(v16 - 16) >= v20)
          {
            v22 = v16 - 16;
            if (v19 < v16 || v17 >= v16 || v19 != v16)
              *(_OWORD *)v17 = *((_OWORD *)v16 - 1);
            v18 = v6;
            v16 -= 16;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v19 != v6 || v17 >= v6)
              *(_OWORD *)v17 = *(_OWORD *)v18;
            v24 = v18;
            if (v18 <= v7)
              goto LABEL_42;
          }
          v17 -= 16;
          v6 = v18;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 16;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *__src, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  uint64_t result;
  char *v43;
  char *v45;
  char *v46;
  char *v47;

  v4 = __dst;
  v6 = __src;
  v7 = __src - a1;
  v8 = __src - a1 + 31;
  if (__src - a1 >= 0)
    v8 = __src - a1;
  v9 = v8 >> 5;
  v10 = a3 - (_QWORD)__src;
  v11 = a3 - (_QWORD)__src + 31;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v11 = a3 - (_QWORD)__src;
  v12 = v11 >> 5;
  v47 = a1;
  v46 = __dst;
  if (v9 >= v11 >> 5)
  {
    if (v10 >= -31)
    {
      if (__dst != __src || &__src[32 * v12] <= __dst)
        memmove(__dst, __src, 32 * v12);
      v27 = &v4[32 * v12];
      v45 = v27;
      v47 = v6;
      if (a1 < v6 && v10 >= 32)
      {
        v28 = (char *)(a3 - 32);
        v29 = v6;
        v43 = v4;
        do
        {
          v30 = *((_QWORD *)v29 - 4);
          v29 -= 32;
          v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(*((_QWORD *)v27 - 4));
          v33 = v32;
          v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
          v36 = v35;
          if (v31 == v34 && v33 == v35)
            v38 = 0;
          else
            v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v34, v35, 1);
          v39 = v28 + 32;
          swift_bridgeObjectRelease(v33);
          swift_bridgeObjectRelease(v36);
          if ((v38 & 1) != 0)
          {
            if (v39 != v6 || v28 >= v6)
            {
              v40 = *((_OWORD *)v29 + 1);
              *(_OWORD *)v28 = *(_OWORD *)v29;
              *((_OWORD *)v28 + 1) = v40;
            }
            v47 = v29;
          }
          else
          {
            v45 = v27 - 32;
            if (v39 < v27 || v28 >= v27 || v39 != v27)
            {
              v41 = *((_OWORD *)v27 - 1);
              *(_OWORD *)v28 = *((_OWORD *)v27 - 2);
              *((_OWORD *)v28 + 1) = v41;
            }
            v29 = v6;
            v27 -= 32;
          }
          if (v29 <= a1)
            break;
          v28 -= 32;
          v6 = v29;
        }
        while (v27 > v43);
      }
LABEL_54:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v47, (const void **)&v46, &v45);
      return 1;
    }
  }
  else if (v7 >= -31)
  {
    if (__dst != a1 || &a1[32 * v9] <= __dst)
      memmove(__dst, a1, 32 * v9);
    v13 = &v4[32 * v9];
    v45 = v13;
    if ((unint64_t)v6 < a3 && v7 >= 32)
    {
      v14 = a1;
      while (1)
      {
        v15 = *(_QWORD *)v4;
        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)v6);
        v18 = v17;
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        if (v16 == v19 && v18 == v20)
          break;
        v22 = v20;
        v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v19, v20, 1);
        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(v22);
        if ((v23 & 1) == 0)
          goto LABEL_23;
        v24 = v6 + 32;
        if (v14 < v6 || v14 >= v24 || v14 != v6)
        {
          v25 = *((_OWORD *)v6 + 1);
          *(_OWORD *)v14 = *(_OWORD *)v6;
          *((_OWORD *)v14 + 1) = v25;
        }
LABEL_26:
        v14 += 32;
        if (v4 < v13)
        {
          v6 = v24;
          if ((unint64_t)v24 < a3)
            continue;
        }
        v47 = v14;
        goto LABEL_54;
      }
      swift_bridgeObjectRelease_n(v18, 2);
LABEL_23:
      if (v14 != v4)
      {
        v26 = *((_OWORD *)v4 + 1);
        *(_OWORD *)v14 = *(_OWORD *)v4;
        *((_OWORD *)v14 + 1) = v26;
      }
      v4 += 32;
      v46 = v4;
      v24 = v6;
      goto LABEL_26;
    }
    goto LABEL_54;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v2;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v5[8] = specialized Dictionary._Variant.asNative.modify(v5);
  v5[9] = specialized _NativeDictionary.subscript.modify(v5 + 4, a2, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(_QWORD *a1, unsigned __int8 a2))()
{
  _QWORD *v2;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v5[8] = specialized Dictionary._Variant.asNative.modify(v5);
  v5[9] = specialized _NativeDictionary.subscript.modify((uint64_t)(v5 + 4), a2, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void Dictionary._Variant.subscript.modifyspecialized (uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(*(_QWORD *)a1 + 32, 0);
  v2(v1, 0);
  free(v1);
}

{
  void *v1;
  void (*v2)(void *, _QWORD);
  void *v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = *(void **)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);

  v2(v1, 0);
  free(v1);
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(_QWORD *a1, void *a2))()
{
  _QWORD *v2;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  id v7;

  v5 = malloc(0x58uLL);
  *a1 = v5;
  v5[8] = a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = a2;
  v5[9] = specialized Dictionary._Variant.asNative.modify(v5);
  v5[10] = specialized _NativeDictionary.subscript.modify(v5 + 4, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(_QWORD *a1, void *a2, Swift::UInt a3, char a4))()
{
  _QWORD *v4;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  id v11;

  v9 = malloc(0x58uLL);
  *a1 = v9;
  v9[8] = a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  v11 = a2;
  v9[9] = specialized Dictionary._Variant.asNative.modify(v9);
  v9[10] = specialized _NativeDictionary.subscript.modify(v9 + 4, v11, a3, a4 & 1, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, uint64_t a2)
{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UIFontDescriptorAttributeName, Any>);
}

{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UIFontDescriptorTraitKey, Any>);
}

{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<Int, [MOMapLocation]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOSuggestionAssetVisualSubType, Int>);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v32 = v3;
    v9 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v9 << 6);
      }
      else
      {
        v18 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v18 >= v13)
          goto LABEL_34;
        v19 = v34[v18];
        ++v9;
        if (!v19)
        {
          v9 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_34;
          v19 = v34[v9];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((v33 & 1) == 0)
              {
                swift_release(v5);
                v3 = v32;
                goto LABEL_41;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v31;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v9 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_43;
                if (v9 >= v13)
                  goto LABEL_34;
                v19 = v34[v9];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v9 = v20;
          }
        }
LABEL_24:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v9 << 6);
      }
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v17);
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      Hasher.init(_seed:)(v35, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v21);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v8 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v14 + 8 * v26);
        }
        while (v30 == -1);
        v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v15) = v21;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v15) = v22;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_41:
  *v3 = v8;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [MOMusicPlaybackCoordinatorDelegate]>);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<MOSuggestionAssetMetadataKey, Any>);
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, unint64_t, uint64_t, __n128);
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  uint64_t v53;

  v53 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v52 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = v2;
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, (Bool, Bool)>);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v7, a1, a2);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    swift_release(v7);
    v42 = v46;
LABEL_44:
    *v42 = v9;
    return;
  }
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 64);
  v48 = (_QWORD *)(v7 + 64);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v47 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  v15 = swift_retain(v7);
  v16 = 0;
  v45 = a2;
  v17 = 16;
  if ((a2 & 1) != 0)
    v17 = 32;
  v49 = v7;
  v50 = v17;
  while (1)
  {
    if (v13)
    {
      v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v21 = v20 | (v16 << 6);
      goto LABEL_26;
    }
    v22 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v22 >= v47)
    {
      swift_release(v7);
      v42 = v46;
      v23 = v48;
      if ((v45 & 1) != 0)
      {
LABEL_39:
        v43 = 1 << *(_BYTE *)(v7 + 32);
        if (v43 >= 64)
          bzero(v23, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v23 = -1 << v43;
        *(_QWORD *)(v7 + 16) = 0;
      }
LABEL_43:
      swift_release(v7);
      goto LABEL_44;
    }
    v23 = v48;
    v24 = v48[v22];
    ++v16;
    if (!v24)
    {
      v16 = v22 + 1;
      if (v22 + 1 >= v47)
        goto LABEL_36;
      v24 = v48[v16];
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v16 << 6);
LABEL_26:
    v26 = *(_QWORD *)(v5 + 72);
    v27 = v5;
    v28 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + v50);
    v29 = v53;
    v28(v52, *(_QWORD *)(v7 + 48) + v26 * v21, v53, v15);
    v30 = (char *)(*(_QWORD *)(v7 + 56) + 2 * v21);
    v51 = v30[1];
    v31 = *v30;
    v32 = *(_QWORD *)(v9 + 40);
    v33 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v34 = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v29, v33);
    v35 = -1 << *(_BYTE *)(v9 + 32);
    v36 = v34 & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v14 + 8 * (v36 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v14 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      v5 = v27;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      v5 = v27;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v14 + 8 * v37);
      }
      while (v41 == -1);
      v18 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v9 + 48) + v26 * v18, v52, v53);
    v19 = (_BYTE *)(*(_QWORD *)(v9 + 56) + 2 * v18);
    *v19 = v31;
    v19[1] = v51;
    ++*(_QWORD *)(v9 + 16);
    v7 = v49;
  }
  v25 = v22 + 2;
  if (v25 >= v47)
  {
LABEL_36:
    swift_release(v7);
    v42 = v46;
    if ((v45 & 1) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v24 = v48[v25];
  if (v24)
  {
    v16 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v16 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v16 >= v47)
      goto LABEL_36;
    v24 = v48[v16];
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
}

{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<Int, [MOSuggestionCollectionViewCellViewModel]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  char v41;
  _QWORD v42[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOSuggestionAssetsType, [MOSuggestionAsset]>);
  v41 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v38 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v40 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v39 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v24 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v25 = v24 | (v13 << 6);
      }
      else
      {
        v26 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v26 >= v39)
          goto LABEL_36;
        v27 = v40[v26];
        ++v13;
        if (!v27)
        {
          v13 = v26 + 1;
          if (v26 + 1 >= v39)
            goto LABEL_36;
          v27 = v40[v13];
          if (!v27)
          {
            v28 = v26 + 2;
            if (v28 >= v39)
            {
LABEL_36:
              swift_release(v5);
              v3 = v38;
              if ((v41 & 1) != 0)
              {
                v37 = 1 << *(_BYTE *)(v5 + 32);
                if (v37 >= 64)
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v40 = -1 << v37;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v27 = v40[v28];
            if (!v27)
            {
              while (1)
              {
                v13 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_43;
                if (v13 >= v39)
                  goto LABEL_36;
                v27 = v40[v13];
                ++v28;
                if (v27)
                  goto LABEL_33;
              }
            }
            v13 = v28;
          }
        }
LABEL_33:
        v11 = (v27 - 1) & v27;
        v25 = __clz(__rbit64(v27)) + (v13 << 6);
      }
      v33 = 8 * v25;
      v34 = *(void **)(*(_QWORD *)(v5 + 48) + v33);
      v35 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v33);
      if ((v41 & 1) == 0)
      {
        v36 = v34;
        swift_bridgeObjectRetain(v35);
      }
      v14 = *(_QWORD *)(v8 + 40);
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v17 = v16;
      Hasher.init(_seed:)(v42, v14);
      String.hash(into:)(v42, v15, v17);
      v18 = Hasher._finalize()();
      swift_bridgeObjectRelease(v17);
      v19 = -1 << *(_BYTE *)(v8 + 32);
      v20 = v18 & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
      {
        v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v21 == v30;
          if (v21 == v30)
            v21 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v21);
        }
        while (v32 == -1);
        v22 = __clz(__rbit64(~v32)) + (v21 << 6);
      }
      *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      v23 = 8 * v22;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v23) = v34;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v23) = v35;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  char v39;
  _QWORD v40[9];
  _BYTE v41[32];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOSuggestionAssetMetadataKey, Any?>);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v13 << 6);
      }
      else
      {
        v17 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v17 >= v37)
          goto LABEL_37;
        v18 = v38[v17];
        ++v13;
        if (!v18)
        {
          v13 = v17 + 1;
          if (v17 + 1 >= v37)
            goto LABEL_37;
          v18 = v38[v13];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v37)
            {
LABEL_37:
              swift_release(v5);
              v3 = v36;
              if ((v39 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v18 = v38[v19];
            if (!v18)
            {
              while (1)
              {
                v13 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_44;
                if (v13 >= v37)
                  goto LABEL_37;
                v18 = v38[v13];
                ++v19;
                if (v18)
                  goto LABEL_24;
              }
            }
            v13 = v19;
          }
        }
LABEL_24:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }
      v20 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v21 = *(_QWORD *)(v5 + 56) + 32 * v16;
      if ((v39 & 1) != 0)
      {
        outlined init with take of Date?(v21, (uint64_t)v41, &demangling cache variable for type metadata for Any?);
      }
      else
      {
        outlined init with copy of Date?(v21, (uint64_t)v41, &demangling cache variable for type metadata for Any?);
        v22 = v20;
      }
      v23 = *(_QWORD *)(v8 + 40);
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v26 = v25;
      Hasher.init(_seed:)(v40, v23);
      String.hash(into:)(v40, v24, v26);
      v27 = Hasher._finalize()();
      swift_bridgeObjectRelease(v26);
      v28 = -1 << *(_BYTE *)(v8 + 32);
      v29 = v27 & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v12 + 8 * v30);
        }
        while (v34 == -1);
        v14 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14) = v20;
      outlined init with take of Date?((uint64_t)v41, *(_QWORD *)(v8 + 56) + 32 * v14, &demangling cache variable for type metadata for Any?);
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  Swift::UInt v25;
  int v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  char v45;
  uint64_t v46;
  _QWORD v47[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOAssetAndMediaType, Int>);
  v45 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_46;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v43 = (_QWORD *)(v5 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v41 = v3;
  v42 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_25;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      return;
    }
    if (v18 >= v42)
      break;
    v19 = v43;
    v20 = v43[v18];
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v42)
        goto LABEL_39;
      v20 = v43[v13];
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v42)
        {
LABEL_39:
          swift_release(v5);
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_46;
          goto LABEL_42;
        }
        v20 = v43[v21];
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_48;
            if (v13 >= v42)
              goto LABEL_39;
            v20 = v43[v13];
            ++v21;
            if (v20)
              goto LABEL_24;
          }
        }
        v13 = v21;
      }
    }
LABEL_24:
    v11 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_25:
    v22 = *(_QWORD *)(v5 + 56);
    v23 = *(_QWORD *)(v5 + 48) + 24 * v17;
    v24 = *(void **)v23;
    v25 = *(_QWORD *)(v23 + 8);
    v26 = *(unsigned __int8 *)(v23 + 16);
    v46 = *(_QWORD *)(v22 + 8 * v17);
    if ((v45 & 1) == 0)
      v27 = v24;
    Hasher.init(_seed:)(v47, *(_QWORD *)(v8 + 40));
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v30 = v29;
    v31 = v24;
    String.hash(into:)(v47, v28, v30);

    swift_bridgeObjectRelease(v30);
    if (v26)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v25);
    }
    v32 = Hasher._finalize()();
    v33 = -1 << *(_BYTE *)(v8 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v12 + 8 * (v34 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v12 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_47;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v12 + 8 * v35);
      }
      while (v39 == -1);
      v14 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v8 + 48) + 24 * v14;
    *(_QWORD *)v15 = v31;
    *(_QWORD *)(v15 + 8) = v25;
    *(_BYTE *)(v15 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v14) = v46;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v41;
  v19 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_46;
LABEL_42:
  v40 = 1 << *(_BYTE *)(v5 + 32);
  if (v40 >= 64)
    bzero(v19, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v40;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_46:
  swift_release(v5);
  *v3 = v8;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v18 >= v35)
          goto LABEL_37;
        v19 = v36[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v35)
            goto LABEL_37;
          v19 = v36[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v36[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_44;
                if (v13 >= v35)
                  goto LABEL_37;
                v19 = v36[v13];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v13 = v20;
          }
        }
LABEL_24:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        outlined init with take of Any(v24, v38);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v38);
        swift_bridgeObjectRetain(v22);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v23, v22);
      v25 = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = v25 & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v14 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      outlined init with take of Any(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v14));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  _QWORD v45[9];

  v3 = v2;
  v6 = type metadata accessor for PropertyDescriptor(0);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PropertyDescriptor>);
  v44 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v42 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = v3;
  v41 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  swift_retain(v9);
  v17 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v41)
      break;
    v23 = v42;
    v24 = v42[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v41)
        goto LABEL_36;
      v24 = v42[v17];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v41)
        {
LABEL_36:
          swift_release(v9);
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = v42[v25];
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v17 >= v41)
              goto LABEL_36;
            v24 = v42[v17];
            ++v25;
            if (v24)
              goto LABEL_23;
          }
        }
        v17 = v25;
      }
    }
LABEL_23:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_24:
    v26 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v43 + 72);
    v30 = *(_QWORD *)(v9 + 56) + v29 * v21;
    if ((v44 & 1) != 0)
    {
      outlined init with take of MOSuggestionSheetAssetDateRange(v30, (uint64_t)v8, type metadata accessor for PropertyDescriptor);
    }
    else
    {
      outlined init with copy of MOSuggestionSheetAssetDateRange(v30, (uint64_t)v8, type metadata accessor for PropertyDescriptor);
      swift_bridgeObjectRetain(v27);
    }
    Hasher.init(_seed:)(v45, *(_QWORD *)(v11 + 40));
    String.hash(into:)(v45, v28, v27);
    v31 = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v11 + 32);
    v33 = v31 & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v16 + 8 * v34);
      }
      while (v38 == -1);
      v18 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    outlined init with take of MOSuggestionSheetAssetDateRange((uint64_t)v8, *(_QWORD *)(v11 + 56) + v29 * v18, type metadata accessor for PropertyDescriptor);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v40;
  v23 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v9 + 32);
  if (v39 >= 64)
    bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v39;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  swift_release(v9);
  *v3 = v11;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  int v45;
  char *v46;
  uint64_t v47;
  _QWORD v48[9];

  v3 = v2;
  v47 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v46 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, URL>);
  v45 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v42 = v3;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v44 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v43 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  v16 = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return;
    }
    if (v22 >= v43)
      goto LABEL_36;
    v23 = v44[v22];
    ++v17;
    if (!v23)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v43)
        goto LABEL_36;
      v23 = v44[v17];
      if (!v23)
        break;
    }
LABEL_23:
    v14 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v8 + 56);
    v26 = v8;
    v27 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v6 + 72);
    v31 = v25 + v30 * v21;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 32))(v46, v31, v47, v16);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v46, v31, v47, v16);
      swift_bridgeObjectRetain(v28);
    }
    Hasher.init(_seed:)(v48, *(_QWORD *)(v10 + 40));
    String.hash(into:)(v48, v29, v28);
    v32 = Hasher._finalize()();
    v33 = -1 << *(_BYTE *)(v10 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v15 + 8 * (v34 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v15 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v15 + 8 * v35);
      }
      while (v39 == -1);
      v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
    *v19 = v29;
    v19[1] = v28;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v10 + 56) + v30 * v18, v46, v47);
    ++*(_QWORD *)(v10 + 16);
    v8 = v26;
  }
  v24 = v22 + 2;
  if (v24 < v43)
  {
    v23 = v44[v24];
    if (!v23)
    {
      while (1)
      {
        v17 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_43;
        if (v17 >= v43)
          goto LABEL_36;
        v23 = v44[v17];
        ++v24;
        if (v23)
          goto LABEL_23;
      }
    }
    v17 = v24;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v8);
  v3 = v42;
  if ((v45 & 1) != 0)
  {
    v40 = 1 << *(_BYTE *)(v8 + 32);
    if (v40 >= 64)
      bzero(v44, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v44 = -1 << v40;
    *(_QWORD *)(v8 + 16) = 0;
  }
LABEL_41:
  swift_release(v8);
  *v3 = v10;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_25;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v21 >= v12)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v12)
        goto LABEL_37;
      v23 = *(_QWORD *)(v37 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_46;
            if (v14 >= v12)
              goto LABEL_37;
            v23 = *(_QWORD *)(v37 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_24;
          }
        }
        v14 = v24;
      }
    }
LABEL_24:
    v11 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_25:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v41 = *(_QWORD *)(v25 + 32);
      v39 = v26;
      v40 = v27;
      outlined init with take of Any((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v38);
    }
    else
    {
      outlined init with copy of AnyHashable(v25, (uint64_t)&v39);
      outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v38);
    }
    v28 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v8 + 48) + 40 * v15;
    v17 = v39;
    v18 = v40;
    *(_QWORD *)(v16 + 32) = v41;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    outlined init with take of Any(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  _QWORD v43[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AppBgColor>);
  v41 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v40 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v38 = v3;
  v39 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_34;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v39)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v40 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v39)
        goto LABEL_36;
      v25 = *(_QWORD *)(v40 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v39)
        {
LABEL_36:
          swift_release(v5);
          v3 = v38;
          if ((v41 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v40 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v13 >= v39)
              goto LABEL_36;
            v25 = *(_QWORD *)(v40 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v13 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(v5 + 56) + 32 * v22;
    v42 = *(_OWORD *)v34;
    v35 = *(_QWORD *)(v34 + 16);
    v36 = *(_BYTE *)(v34 + 24);
    if ((v41 & 1) == 0)
    {
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v35);
    }
    Hasher.init(_seed:)(v43, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v43, v33, v32);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v17 == v28;
        if (v17 == v28)
          v17 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v33;
    v19[1] = v32;
    v20 = *(_QWORD *)(v8 + 56) + 32 * v18;
    *(_OWORD *)v20 = v42;
    *(_QWORD *)(v20 + 16) = v35;
    *(_BYTE *)(v20 + 24) = v36;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v38;
  v24 = (_QWORD *)(v5 + 64);
  if ((v41 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  _QWORD v45[9];

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date?>);
  v44 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v42 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = v3;
  v41 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  swift_retain(v9);
  v17 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v41)
      break;
    v23 = v42;
    v24 = v42[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v41)
        goto LABEL_36;
      v24 = v42[v17];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v41)
        {
LABEL_36:
          swift_release(v9);
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = v42[v25];
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v17 >= v41)
              goto LABEL_36;
            v24 = v42[v17];
            ++v25;
            if (v24)
              goto LABEL_23;
          }
        }
        v17 = v25;
      }
    }
LABEL_23:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_24:
    v26 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v43 + 72);
    v30 = *(_QWORD *)(v9 + 56) + v29 * v21;
    if ((v44 & 1) != 0)
    {
      outlined init with take of Date?(v30, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Date?);
    }
    else
    {
      outlined init with copy of Date?(v30, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Date?);
      swift_bridgeObjectRetain(v27);
    }
    Hasher.init(_seed:)(v45, *(_QWORD *)(v11 + 40));
    String.hash(into:)(v45, v28, v27);
    v31 = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v11 + 32);
    v33 = v31 & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v16 + 8 * v34);
      }
      while (v38 == -1);
      v18 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    outlined init with take of Date?((uint64_t)v8, *(_QWORD *)(v11 + 56) + v29 * v18, (uint64_t *)&demangling cache variable for type metadata for Date?);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v40;
  v23 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v9 + 32);
  if (v39 >= 64)
    bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v39;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  swift_release(v9);
  *v3 = v11;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  __int128 v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v14 << 6);
      }
      else
      {
        v24 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v38[v24];
        ++v14;
        if (!v25)
        {
          v14 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v38[v14];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v36;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                v14 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v14 >= v37)
                  goto LABEL_36;
                v25 = v38[v14];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v14 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v14 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v39 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain(*((_QWORD *)&v39 + 1));
        swift_bridgeObjectRetain(v33);
      }
      Hasher.init(_seed:)(v40, *(_QWORD *)(v9 + 40));
      String.hash(into:)(v40, v34, v33);
      v15 = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = v15 & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v39;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  swift_release(v5);
  *v3 = v9;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Double>);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v31[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v33, v32);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  _OWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];
  _OWORD v42[2];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v40 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_44;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v38 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  swift_retain(v6);
  v14 = 0;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_25;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v18 >= v38)
      break;
    v19 = (_QWORD *)(v6 + 64);
    v20 = *(_QWORD *)(v39 + 8 * v18);
    ++v14;
    if (!v20)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v38)
        goto LABEL_37;
      v20 = *(_QWORD *)(v39 + 8 * v14);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v38)
        {
LABEL_37:
          swift_release(v6);
          if ((v40 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v20 = *(_QWORD *)(v39 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v14 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_46;
            if (v14 >= v38)
              goto LABEL_37;
            v20 = *(_QWORD *)(v39 + 8 * v14);
            ++v21;
            if (v20)
              goto LABEL_24;
          }
        }
        v14 = v21;
      }
    }
LABEL_24:
    v12 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_25:
    v22 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v17);
    v23 = (_OWORD *)(*(_QWORD *)(v6 + 56) + 32 * v17);
    if ((v40 & 1) != 0)
    {
      outlined init with take of Any(v23, v42);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v23, (uint64_t)v42);
      v24 = v22;
    }
    v25 = *(_QWORD *)(v9 + 40);
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v28 = v27;
    Hasher.init(_seed:)(v41, v25);
    String.hash(into:)(v41, v26, v28);
    v29 = Hasher._finalize()();
    swift_bridgeObjectRelease(v28);
    v30 = -1 << *(_BYTE *)(v9 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v13 + 8 * v32);
      }
      while (v36 == -1);
      v15 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v15) = v22;
    outlined init with take of Any(v42, (_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v15));
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v19 = (_QWORD *)(v6 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v37 = 1 << *(_BYTE *)(v6 + 32);
  if (v37 >= 64)
    bzero(v19, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v37;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_44:
  swift_release(v6);
  *v4 = v9;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v10 = 0;
    v11 = (uint64_t *)(v6 + 64);
    v12 = 1 << *(_BYTE *)(v6 + 32);
    v35 = -1 << v12;
    v36 = v12;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v14 = v13 & *(_QWORD *)(v6 + 64);
    v37 = (unint64_t)(v12 + 63) >> 6;
    v15 = v8 + 64;
    while (1)
    {
      if (v14)
      {
        v22 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v23 = v22 | (v10 << 6);
      }
      else
      {
        v24 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v11[v24];
        ++v10;
        if (!v25)
        {
          v10 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v11[v10];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v36 >= 64)
                  bzero((void *)(v6 + 64), 8 * v37);
                else
                  *v11 = v35;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v25 = v11[v26];
            if (!v25)
            {
              while (1)
              {
                v10 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_44;
                if (v10 >= v37)
                  goto LABEL_36;
                v25 = v11[v10];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v10 = v26;
          }
        }
LABEL_33:
        v14 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v10 << 6);
      }
      v31 = 8 * v23;
      v32 = *(_QWORD *)(v6 + 56);
      v33 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v31);
      v34 = *(_QWORD *)(v32 + v31);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v32 + v31));
      v16 = static Hasher._hash(seed:_:)(*(_QWORD *)(v9 + 40), v33);
      v17 = -1 << *(_BYTE *)(v9 + 32);
      v18 = v16 & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v15 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v15 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v29 = v19 == v28;
          if (v19 == v28)
            v19 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v15 + 8 * v19);
        }
        while (v30 == -1);
        v20 = __clz(__rbit64(~v30)) + (v19 << 6);
      }
      *(_QWORD *)(v15 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      v21 = 8 * v20;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v33;
      *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v34;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  swift_release(v6);
  *v4 = v9;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = outlined init with take of Date?(a3, a4[7] + 32 * a1, &demangling cache variable for type metadata for Any?);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = a6[6] + 24 * result;
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  *(_BYTE *)(v6 + 16) = a4 & 1;
  *(_QWORD *)(a6[7] + 8 * result) = a5;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a4, v10);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  result = outlined init with take of Date?(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, (uint64_t *)&demangling cache variable for type metadata for Date?);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, _QWORD *a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a8[(result >> 6) + 8] |= 1 << result;
  v8 = (_QWORD *)(a8[6] + 16 * result);
  *v8 = a2;
  v8[1] = a3;
  v9 = a8[7] + 32 * result;
  *(_QWORD *)v9 = a4;
  *(_QWORD *)(v9 + 8) = a5;
  *(_QWORD *)(v9 + 16) = a6;
  *(_BYTE *)(v9 + 24) = a7;
  v10 = a8[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a8[2] = v12;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, double a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a4[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(double *)(a4[7] + 8 * result) = a5;
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

id specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UIFontDescriptorAttributeName, Any>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UIFontDescriptorTraitKey, Any>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<MOSuggestionAssetMetadataKey, Any>);
}

void specialized _NativeDictionary.copy()()
{
  specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Int, [MOMapLocation]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOSuggestionAssetVisualSubType, Int>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  id v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    v22 = v20;
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [MOMusicPlaybackCoordinatorDelegate]>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  char v24;
  _BYTE *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v35 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v34 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, (Bool, Bool)>);
  v31 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
    v29 = v31;
LABEL_28:
    *v29 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v7)
    memmove(v6, (const void *)(v3 + 64), 8 * v7);
  v9 = 0;
  v10 = *(_QWORD *)(v3 + 16);
  v36 = v5;
  v37 = v3;
  *(_QWORD *)(v5 + 16) = v10;
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v32 = v3 + 64;
  v33 = (unint64_t)(v11 + 63) >> 6;
  v15 = v34;
  v14 = v35;
  v16 = v5;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v9 << 6);
      v19 = v37;
      goto LABEL_12;
    }
    v26 = v9 + 1;
    v19 = v37;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v33)
      goto LABEL_26;
    v27 = *(_QWORD *)(v32 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v33)
        goto LABEL_26;
      v27 = *(_QWORD *)(v32 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v13 = (v27 - 1) & v27;
    v18 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(_QWORD *)(v19 + 48) + v20, v14);
    v21 = 2 * v18;
    v22 = (char *)(*(_QWORD *)(v19 + 56) + v21);
    v23 = *v22;
    v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v16 + 48) + v20, v15, v14);
    v25 = (_BYTE *)(*(_QWORD *)(v16 + 56) + v21);
    *v25 = v23;
    v25[1] = v24;
  }
  v28 = v26 + 2;
  if (v28 >= v33)
  {
LABEL_26:
    swift_release(v37);
    v29 = v31;
    v5 = v36;
    goto LABEL_28;
  }
  v27 = *(_QWORD *)(v32 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v33)
      goto LABEL_26;
    v27 = *(_QWORD *)(v32 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

{
  specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Int, [MOSuggestionCollectionViewCellViewModel]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v18);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOSuggestionAssetsType, [MOSuggestionAsset]>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  _BYTE v24[32];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOSuggestionAssetMetadataKey, Any?>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v23 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    outlined init with copy of Date?(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v24, &demangling cache variable for type metadata for Any?);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    outlined init with take of Date?((uint64_t)v24, *(_QWORD *)(v4 + 56) + v18, &demangling cache variable for type metadata for Any?);
    v19 = v17;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v23;
    goto LABEL_28;
  }
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOAssetAndMediaType, Int>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v18 = *(void **)v17;
    v19 = *(_QWORD *)(v17 + 8);
    LOBYTE(v17) = *(_BYTE *)(v17 + 16);
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v22 = v18;
    *(_QWORD *)(v22 + 8) = v19;
    *(_BYTE *)(v22 + 16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    v23 = v18;
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for PropertyDescriptor(0);
  v29 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PropertyDescriptor>);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_release(v5);
LABEL_28:
    *v1 = v7;
    return;
  }
  v26 = v1;
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v27 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v23 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    ++v11;
    if (!v24)
    {
      v11 = v23 + 1;
      if (v23 + 1 >= v28)
        goto LABEL_26;
      v24 = *(_QWORD *)(v27 + 8 * v11);
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    v19 = *v18;
    v20 = v18[1];
    v21 = *(_QWORD *)(v29 + 72) * v16;
    outlined init with copy of MOSuggestionSheetAssetDateRange(*(_QWORD *)(v5 + 56) + v21, (uint64_t)v4, type metadata accessor for PropertyDescriptor);
    v22 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v17);
    *v22 = v19;
    v22[1] = v20;
    outlined init with take of MOSuggestionSheetAssetDateRange((uint64_t)v4, *(_QWORD *)(v7 + 56) + v21, type metadata accessor for PropertyDescriptor);
    swift_bridgeObjectRetain(v20);
  }
  v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_26:
    swift_release(v5);
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v27 + 8 * v25);
  if (v24)
  {
    v11 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v11 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v11);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, URL>);
  v31 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v4 + 16);
  v35 = v5;
  if (!v6)
  {
    swift_release(v4);
    v29 = v35;
    v28 = v31;
LABEL_28:
    *v28 = v29;
    return;
  }
  v7 = v5;
  v8 = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)v8 >= v4 + 64 + 8 * v9)
  {
    memmove(v8, (const void *)(v4 + 64), 8 * v9);
    v7 = v35;
  }
  v32 = v4 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v33 = (unint64_t)(v12 + 63) >> 6;
  v15 = v34;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v33)
        goto LABEL_26;
      v26 = *(_QWORD *)(v32 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_25:
    v14 = (v26 - 1) & v26;
    v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(_QWORD *)(v4 + 56) + v22, v15);
    v23 = v35;
    v24 = (_QWORD *)(*(_QWORD *)(v35 + 48) + v18);
    *v24 = v21;
    v24[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v23 + 56) + v22, v3, v15);
    swift_bridgeObjectRetain(v20);
  }
  v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    swift_release(v4);
    v28 = v31;
    v29 = v35;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    outlined init with take of Any(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  __int128 v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AppBgColor>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)(v21 + 16);
    v23 = *(_BYTE *)(v21 + 24);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v25 = *(_OWORD *)v21;
    *v24 = v19;
    v24[1] = v18;
    v26 = *(_QWORD *)(v4 + 56) + v20;
    *(_OWORD *)v26 = v25;
    *(_QWORD *)(v26 + 16) = v22;
    *(_BYTE *)(v26 + 24) = v23;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v28 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date?>);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_release(v5);
LABEL_25:
    *v1 = v7;
    return;
  }
  v25 = v1;
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v26 = v5 + 64;
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v11 = 1 << *(_BYTE *)(v5 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v5 + 64);
  v27 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    v22 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v27)
      goto LABEL_23;
    v23 = *(_QWORD *)(v26 + 8 * v22);
    ++v10;
    if (!v23)
    {
      v10 = v22 + 1;
      if (v22 + 1 >= v27)
        goto LABEL_23;
      v23 = *(_QWORD *)(v26 + 8 * v10);
      if (!v23)
        break;
    }
LABEL_22:
    v13 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_9:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_QWORD *)(v28 + 72) * v15;
    outlined init with copy of Date?(*(_QWORD *)(v5 + 56) + v20, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Date?);
    v21 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    outlined init with take of Date?((uint64_t)v4, *(_QWORD *)(v7 + 56) + v20, (uint64_t *)&demangling cache variable for type metadata for Date?);
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v27)
  {
LABEL_23:
    swift_release(v5);
    v1 = v25;
    goto LABEL_25;
  }
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
    v10 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v10 >= v27)
      goto LABEL_23;
    v23 = *(_QWORD *)(v26 + 8 * v10);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *v17;
    v19 = v17[1];
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v21 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *v20 = v18;
    v20[1] = v19;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v21;
    swift_bridgeObjectRetain(*((_QWORD *)&v21 + 1));
    swift_bridgeObjectRetain(v19);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Double>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v14)
      goto LABEL_26;
    v21 = *(_QWORD *)(v7 + 8 * v20);
    ++v10;
    if (!v21)
    {
      v10 = v20 + 1;
      if (v20 + 1 >= v14)
        goto LABEL_26;
      v21 = *(_QWORD *)(v7 + 8 * v10);
      if (!v21)
        break;
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v16);
    v19 = 32 * v16;
    outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v16, (uint64_t)v23);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    outlined init with take of Any(v23, (_OWORD *)(*(_QWORD *)(v5 + 56) + v19));
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v14)
    goto LABEL_26;
  v21 = *(_QWORD *)(v7 + 8 * v22);
  if (v21)
  {
    v10 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v21 = *(_QWORD *)(v7 + 8 * v10);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
    swift_bridgeObjectRetain(v18);
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void (*specialized _NativeDictionary.subscript.modify(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*result)(uint64_t **, char);

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *v8 = v17;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Int, [MOMapLocation]>);
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1, &demangling cache variable for type metadata for _DictionaryStorage<Int, [MOMapLocation]>);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **, char))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = **a1;
  LOBYTE(v4) = *((_BYTE *)*a1 + 32);
  if ((a2 & 1) != 0)
  {
    if (!v3)
      goto LABEL_10;
    v5 = v2[3];
    v6 = *(_QWORD **)v2[2];
    if (((*a1)[4] & 1) != 0)
    {
LABEL_9:
      *(_QWORD *)(v6[7] + 8 * v5) = v3;
LABEL_14:
      v14 = *v2;
      swift_bridgeObjectRetain(v3);
      swift_bridgeObjectRelease(v14);
      free(v2);
      return;
    }
    v7 = v2[1];
    v6[(v5 >> 6) + 8] |= 1 << v5;
    v8 = 8 * v5;
    *(_QWORD *)(v6[6] + v8) = v7;
    *(_QWORD *)(v6[7] + v8) = v3;
    v9 = v6[2];
    v10 = __OFADD__(v9, 1);
    v4 = v9 + 1;
    if (!v10)
      goto LABEL_13;
    __break(1u);
  }
  if (!v3)
  {
LABEL_10:
    if ((v4 & 1) != 0)
      specialized _NativeDictionary._delete(at:)(v2[3], *(_QWORD *)v2[2]);
    goto LABEL_14;
  }
  v5 = v2[3];
  v6 = *(_QWORD **)v2[2];
  if ((v4 & 1) != 0)
    goto LABEL_9;
  v11 = v2[1];
  v6[(v5 >> 6) + 8] |= 1 << v5;
  v12 = 8 * v5;
  *(_QWORD *)(v6[6] + v12) = v11;
  *(_QWORD *)(v6[7] + v12) = v3;
  v13 = v6[2];
  v10 = __OFADD__(v13, 1);
  v4 = v13 + 1;
  if (!v10)
  {
LABEL_13:
    v6[2] = v4;
    goto LABEL_14;
  }
  __break(1u);
}

unint64_t (*specialized _NativeDictionary.subscript.modify(uint64_t a1, unsigned __int8 a2, char a3))(unint64_t result, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t (*result)(unint64_t, char);

  v4 = v3;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 9) = a2;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *(_BYTE *)(a1 + 10) = v9 & 1;
  v11 = *(_QWORD *)(v8 + 16);
  v12 = v9 ^ 1;
  v13 = v11 + ((v9 ^ 1) & 1);
  if (__OFADD__(v11, (v9 ^ 1) & 1))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = *(_QWORD *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(a1 + 24) = v10;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v16 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v10);
LABEL_12:
        *(_QWORD *)a1 = v16;
        *(_BYTE *)(a1 + 8) = v12 & 1;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      v16 = 0;
      goto LABEL_12;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v18 & 1))
    {
      v10 = v17;
      *(_QWORD *)(a1 + 24) = v17;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (unint64_t (*)(unint64_t, char))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MOSuggestionAssetVisualSubType);
  __break(1u);
  return result;
}

unint64_t _NativeDictionary.subscript.modifyspecialized (unint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t v10;

  v2 = *(_QWORD *)result;
  LOBYTE(v3) = *(_BYTE *)(result + 10);
  if ((a2 & 1) != 0)
  {
    if ((*(_BYTE *)(result + 8) & 1) != 0)
    {
      if ((*(_BYTE *)(result + 10) & 1) == 0)
        return result;
      return specialized _NativeDictionary._delete(at:)(*(_QWORD *)(result + 24), **(_QWORD **)(result + 16));
    }
    v4 = *(_QWORD *)(result + 24);
    v5 = **(_QWORD ***)(result + 16);
    if ((*(_BYTE *)(result + 10) & 1) != 0)
      goto LABEL_13;
    v6 = *(_BYTE *)(result + 9);
    v5[(v4 >> 6) + 8] |= 1 << v4;
    *(_BYTE *)(v5[6] + v4) = v6;
    v3 = v5[7];
    *(_QWORD *)(v3 + 8 * v4) = v2;
    v7 = v5[2];
    v8 = __OFADD__(v7, 1);
    v2 = v7 + 1;
    if (!v8)
      goto LABEL_15;
    __break(1u);
LABEL_12:
    v4 = *(_QWORD *)(result + 24);
    v5 = **(_QWORD ***)(result + 16);
    if ((v3 & 1) == 0)
    {
      v9 = *(_BYTE *)(result + 9);
      v5[(v4 >> 6) + 8] |= 1 << v4;
      *(_BYTE *)(v5[6] + v4) = v9;
      *(_QWORD *)(v5[7] + 8 * v4) = v2;
      v10 = v5[2];
      v8 = __OFADD__(v10, 1);
      v2 = v10 + 1;
      if (v8)
      {
        __break(1u);
        return result;
      }
LABEL_15:
      v5[2] = v2;
      return result;
    }
LABEL_13:
    *(_QWORD *)(v5[7] + 8 * v4) = v2;
    return result;
  }
  if ((*(_BYTE *)(result + 8) & 1) == 0)
    goto LABEL_12;
  if ((*(_BYTE *)(result + 10) & 1) != 0)
    return specialized _NativeDictionary._delete(at:)(*(_QWORD *)(result + 24), **(_QWORD **)(result + 16));
  return result;
}

void (*specialized _NativeDictionary.subscript.modify(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void (*result)(uint64_t **);
  uint64_t v21;

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *v8 = v17;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  type metadata accessor for MOSuggestionAssetsType(0);
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *((_BYTE *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (void *)(*a1)[1]);
  swift_bridgeObjectRelease(*v1);
  free(v1);
}

{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;

  v1 = *a1;
  v2 = **a1;
  v3 = *((_BYTE *)*a1 + 10);
  if (((*a1)[1] & 1) != 0)
  {
    if ((*((_BYTE *)*a1 + 10) & 1) != 0)
    {
      v4 = v1[5];
      v5 = *(_QWORD *)v1[4];
      swift_arrayDestroy(*(_QWORD *)(v5 + 48) + 24 * v4, 1, &type metadata for MOAssetAndMediaType);
      specialized _NativeDictionary._delete(at:)(v4, v5);
    }
  }
  else
  {
    v6 = v1[5];
    v7 = *(_QWORD **)v1[4];
    if ((v3 & 1) != 0)
    {
      *(_QWORD *)(v7[7] + 8 * v6) = v2;
    }
    else
    {
      v8 = (void *)v1[2];
      specialized _NativeDictionary._insert(at:key:value:)(v6, (uint64_t)v8, v1[3], *((_BYTE *)v1 + 9) & 1, v2, v7);
      v9 = v8;
    }
  }
  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(_QWORD *a1, void *a2, Swift::UInt a3, char a4, char a5))(uint64_t **a1)
{
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  void (*result)(uint64_t **);

  v6 = v5;
  v12 = malloc(0x30uLL);
  *a1 = v12;
  v12[3] = a3;
  v12[4] = v6;
  *((_BYTE *)v12 + 9) = a4;
  v12[2] = a2;
  v13 = a4 & 1;
  v14 = *v6;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v13);
  *((_BYTE *)v12 + 10) = v15 & 1;
  v17 = *(_QWORD *)(v14 + 16);
  v18 = v15 ^ 1;
  v19 = v17 + ((v15 ^ 1) & 1);
  if (__OFADD__(v17, (v15 ^ 1) & 1))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = *(_QWORD *)(v14 + 24);
    if (v21 >= v19 && (a5 & 1) != 0)
    {
LABEL_7:
      v12[5] = v16;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v22 = *(_QWORD *)(*(_QWORD *)(*v6 + 56) + 8 * v16);
LABEL_12:
        *v12 = v22;
        *((_BYTE *)v12 + 8) = v18 & 1;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      v22 = 0;
      goto LABEL_12;
    }
    if (v21 >= v19 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a5 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v13);
    if ((v20 & 1) == (v24 & 1))
    {
      v16 = v23;
      v12[5] = v23;
      if ((v20 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MOAssetAndMediaType);
  __break(1u);
  return result;
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(_QWORD *a1))()
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t Dictionary._Variant.asNative.modifyspecialized (uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

void specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, void *a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  id v15;

  v7 = *a1;
  if (!*a1)
  {
    if ((a2 & 1) != 0)
    {
      v9 = *(_QWORD *)(*a3 + 48) + 8 * a4;
      type metadata accessor for MOSuggestionAssetsType(0);
      swift_arrayDestroy(v9, 1, v10);
      specialized _NativeDictionary._delete(at:)(a4, *a3);
    }
    goto LABEL_8;
  }
  v8 = (_QWORD *)*a3;
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)(v8[7] + 8 * a4) = v7;
LABEL_8:
    swift_bridgeObjectRetain(v7);
    return;
  }
  v8[(a4 >> 6) + 8] |= 1 << a4;
  v11 = 8 * a4;
  *(_QWORD *)(v8[6] + v11) = a5;
  *(_QWORD *)(v8[7] + v11) = v7;
  v12 = v8[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (!v13)
  {
    v8[2] = v14;
    v15 = a5;
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t specialized static MOSuggestionInterstitialListAssetViewModel.assetVisualSubTypesToCountString(_:includeCount:separator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  __int128 v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t countAndFlagsBits;
  void *v38;
  void *object;
  _QWORD *v40;
  unint64_t v41;
  char v42;
  uint64_t *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  char v48;
  uint64_t *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  id v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  void *v60;
  _QWORD *v61;
  unint64_t v62;
  char v63;
  uint64_t *v64;
  uint64_t v65;
  Swift::String v66;
  uint64_t v67;
  void *v68;
  void *v69;
  id v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  os_log_type_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  char *v99;
  unint64_t v100;
  char *v101;
  _QWORD *v102;
  void *v103;
  _QWORD *v104;
  Swift::String v105;
  Swift::String v106;

  v8 = type metadata accessor for Locale(0);
  __chkstk_darwin(v8);
  v99 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v10);
  v101 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(0xDu);
    if ((v13 & 1) != 0)
    {
      if (*(_QWORD *)(a1 + 16))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12);
        v15 = specialized __RawDictionaryStorage.find<A>(_:)(0xCu);
        if ((v16 & 1) != 0)
        {
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v15);
          v18 = __OFADD__(v17, v14);
          v19 = v17 + v14;
          if (v18)
          {
            __break(1u);
          }
          else
          {
            v20 = swift_bridgeObjectRetain(a1);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
            v102 = (_QWORD *)a1;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, 12, isUniquelyReferenced_nonNull_native);
            a1 = (uint64_t)v102;
            swift_bridgeObjectRelease(0x8000000000000000);
            v22 = specialized __RawDictionaryStorage.find<A>(_:)(0xDu);
            if ((v23 & 1) == 0)
              goto LABEL_10;
            v19 = v22;
            v24 = swift_isUniquelyReferenced_nonNull_native(a1);
            v102 = (_QWORD *)a1;
            if ((v24 & 1) != 0)
              goto LABEL_8;
          }
          specialized _NativeDictionary.copy()();
          a1 = (uint64_t)v102;
LABEL_8:
          specialized _NativeDictionary._delete(at:)(v19, a1);
          swift_bridgeObjectRelease(0x8000000000000000);
          goto LABEL_10;
        }
      }
    }
  }
  swift_bridgeObjectRetain(a1);
LABEL_10:
  v25 = swift_bridgeObjectRetain(a1);
  v26 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy16MomentsUIService30MOSuggestionAssetVisualSubTypeOSiG_AH_Sits5NeverOTg504_s16d11UIService30fghij38OSiACSiIgyydd_AC3key_Si5valuetAC_Sits5k130OIegnrzr_TR04_s16a11UIService42c16InterstitialListd17ViewModelC32assetef53TypesToCountString_07includeN09separatorSSSDyAA0cfjK4G29N36G_SbSStFZAH_SitAH_SitXEfU_Tf3nnnpf_nTf1cn_n(v25);
  swift_bridgeObjectRelease(a1);
  v102 = v26;
  swift_bridgeObjectRetain(v26);
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v102, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_bridgeObjectRelease(v26);
  v27 = (uint64_t)v102;
  v28 = v102[2];
  v29 = _swiftEmptyArrayStorage;
  if (v28)
  {
    v94 = &v92;
    v95 = a1;
    v96 = a3;
    v97 = a4;
    v104 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 0);
    v93 = v27;
    v30 = (uint64_t *)(v27 + 40);
    v29 = v104;
    v100 = 0x80000001001A90C0;
    *(_QWORD *)&v31 = 134217984;
    v98 = v31;
    v32 = v99;
    while (1)
    {
      v33 = *((unsigned __int8 *)v30 - 8);
      v34 = *v30;
      if ((a2 & 1) != 0)
      {
        v35 = v101;
        MOSuggestionAssetVisualSubType.localizableKeyWithCount(count:)(v34, *((_BYTE *)v30 - 8));
        static Locale.current.getter(v36);
        countAndFlagsBits = String.init(localized:table:bundle:locale:comment:)(v35, 0xD000000000000012, v100, 0, v32, "Asset Type Description", 22, 2);
        object = v38;
      }
      else if (v34 <= 1)
      {
        if (one-time initialization token for localizableStringKey != -1)
          swift_once(&one-time initialization token for localizableStringKey, one-time initialization function for localizableStringKey);
        v46 = static MOSuggestionAssetVisualSubType.localizableStringKey;
        if (!*((_QWORD *)static MOSuggestionAssetVisualSubType.localizableStringKey + 2)
          || (v47 = specialized __RawDictionaryStorage.find<A>(_:)(v33), (v48 & 1) == 0))
        {
          if (serverManager._connectionProperties != (NSMutableDictionary *)-1)
            swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
          v74 = type metadata accessor for Logger(0);
          v75 = __swift_project_value_buffer(v74, (uint64_t)static MOAngelLogger.assets);
          v76 = Logger.logObject.getter(v75);
          v77 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v76, v77))
          {
            v78 = swift_slowAlloc(12, -1);
            *(_DWORD *)v78 = v98;
            *(_QWORD *)(v78 + 4) = v33;
            v79 = v76;
            v80 = v77;
            v81 = "(Singular) Unknown visual subtype: %ld";
            goto LABEL_39;
          }
LABEL_40:

          countAndFlagsBits = 0;
          object = (void *)0xE000000000000000;
          goto LABEL_41;
        }
        v49 = (uint64_t *)(v46[7] + 16 * v47);
        v51 = *v49;
        v50 = (void *)v49[1];
        swift_bridgeObjectRetain(v50);
        v52 = StaticString.description.getter("Asset Type Description", 22, 2);
        v54 = v53;
        v55 = a2;
        v56 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v105._object = v54;
        v57._countAndFlagsBits = v51;
        v57._object = v50;
        v58._countAndFlagsBits = 0;
        v58._object = (void *)0xE000000000000000;
        v105._countAndFlagsBits = v52;
        v59 = NSLocalizedString(_:tableName:bundle:value:comment:)(v57, (Swift::String_optional)0, (NSBundle)v56, v58, v105);
        countAndFlagsBits = v59._countAndFlagsBits;
        object = v59._object;
        swift_bridgeObjectRelease(v50);
        v60 = v54;
        v32 = v99;
        swift_bridgeObjectRelease(v60);

        a2 = v55;
      }
      else
      {
        if (one-time initialization token for pluralLocalizableStringKey != -1)
          swift_once(&one-time initialization token for pluralLocalizableStringKey, one-time initialization function for pluralLocalizableStringKey);
        v40 = static MOSuggestionAssetVisualSubType.pluralLocalizableStringKey;
        if (*((_QWORD *)static MOSuggestionAssetVisualSubType.pluralLocalizableStringKey + 2)
          && (v41 = specialized __RawDictionaryStorage.find<A>(_:)(v33), (v42 & 1) != 0))
        {
          v43 = (uint64_t *)(v40[7] + 16 * v41);
          v45 = *v43;
          v44 = (void *)v43[1];
          swift_bridgeObjectRetain(v44);
        }
        else
        {
          if (one-time initialization token for localizableStringKey != -1)
            swift_once(&one-time initialization token for localizableStringKey, one-time initialization function for localizableStringKey);
          v61 = static MOSuggestionAssetVisualSubType.localizableStringKey;
          if (!*((_QWORD *)static MOSuggestionAssetVisualSubType.localizableStringKey + 2)
            || (v62 = specialized __RawDictionaryStorage.find<A>(_:)(v33), (v63 & 1) == 0))
          {
            if (serverManager._connectionProperties != (NSMutableDictionary *)-1)
              swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
            v82 = type metadata accessor for Logger(0);
            v83 = __swift_project_value_buffer(v82, (uint64_t)static MOAngelLogger.assets);
            v76 = Logger.logObject.getter(v83);
            v84 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v76, v84))
            {
              v78 = swift_slowAlloc(12, -1);
              *(_DWORD *)v78 = v98;
              *(_QWORD *)(v78 + 4) = v33;
              v79 = v76;
              v80 = v84;
              v81 = "(Plural) Unknown visual subtype: %ld";
LABEL_39:
              _os_log_impl((void *)&_mh_execute_header, v79, v80, v81, (uint8_t *)v78, 0xCu);
              swift_slowDealloc(v78, -1, -1);
            }
            goto LABEL_40;
          }
          v64 = (uint64_t *)(v61[7] + 16 * v62);
          v65 = v64[1];
          v102 = (_QWORD *)*v64;
          v103 = (void *)v65;
          swift_bridgeObjectRetain(v65);
          v66._countAndFlagsBits = 115;
          v66._object = (void *)0xE100000000000000;
          String.append(_:)(v66);
          v45 = (uint64_t)v102;
          v44 = v103;
        }
        v67 = StaticString.description.getter("Asset Type Description", 22, 2);
        v69 = v68;
        v70 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v106._object = v69;
        v71._countAndFlagsBits = v45;
        v71._object = v44;
        v72._countAndFlagsBits = 0;
        v72._object = (void *)0xE000000000000000;
        v106._countAndFlagsBits = v67;
        v73 = NSLocalizedString(_:tableName:bundle:value:comment:)(v71, (Swift::String_optional)0, (NSBundle)v70, v72, v106);
        countAndFlagsBits = v73._countAndFlagsBits;
        object = v73._object;
        swift_bridgeObjectRelease(v44);
        swift_bridgeObjectRelease(v69);

        v32 = v99;
      }
LABEL_41:
      v104 = v29;
      v86 = v29[2];
      v85 = v29[3];
      if (v86 >= v85 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v86 + 1, 1);
        v29 = v104;
      }
      v30 += 2;
      v29[2] = v86 + 1;
      v87 = &v29[2 * v86];
      v87[4] = countAndFlagsBits;
      v87[5] = object;
      if (!--v28)
      {
        a3 = v96;
        a4 = v97;
        a1 = v95;
        v27 = v93;
        break;
      }
    }
  }
  swift_release(v27);
  swift_bridgeObjectRelease(a1);
  v102 = v29;
  v88 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  v89 = lazy protocol witness table accessor for type [String] and conformance [A]();
  v90 = BidirectionalCollection<>.joined(separator:)(a3, a4, v88, v89);
  swift_bridgeObjectRelease(v29);
  return v90;
}

uint64_t specialized static MOSuggestionInterstitialListAssetViewModel.assetVisualSubTypesToCountString(_:includeCount:separator:)(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  unsigned __int8 v40;
  _QWORD v41[4];
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;

  v35 = a3;
  v36 = a4;
  v34 = a2;
  v5 = type metadata accessor for NSFastEnumerationIterator(0);
  v33 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1;
  NSSet.makeIterator()();
  v39 = v8;

  v9 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator, (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator, (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
  dispatch thunk of IteratorProtocol.next()(&v44, v5, v9);
  if (!v45)
  {
    v10 = &_swiftEmptyDictionarySingleton;
LABEL_19:
    (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v5);
    v30 = specialized static MOSuggestionInterstitialListAssetViewModel.assetVisualSubTypesToCountString(_:includeCount:separator:)((uint64_t)v10, v34 & 1, v35, v36);
    swift_bridgeObjectRelease(v10);
    return v30;
  }
  v10 = &_swiftEmptyDictionarySingleton;
  v11 = (char *)&type metadata for Any + 8;
  v37 = v9;
  v38 = (char *)&type metadata for Any + 8;
  while (1)
  {
    outlined init with take of Any(&v44, &v42);
    outlined init with copy of Any((uint64_t)&v42, (uint64_t)v41);
    if (!swift_dynamicCast(&v40, v41, v11, &type metadata for MOSuggestionAssetVisualSubType, 6))
      goto LABEL_5;
    v12 = v5;
    v13 = v40;
    v14 = v43;
    v15 = __swift_project_boxed_opaque_existential_1(&v42, v43);
    v16 = _bridgeAnythingToObjectiveC<A>(_:)(v15, v14);
    v17 = objc_msgSend(v39, "countForObject:", v16);
    swift_unknownObjectRelease(v16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
    v41[0] = v10;
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    v21 = v10[2];
    v22 = (v19 & 1) == 0;
    v23 = v21 + v22;
    if (__OFADD__(v21, v22))
      break;
    v24 = v19;
    if (v10[3] >= v23)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v10 = (_QWORD *)v41[0];
        if ((v19 & 1) == 0)
          goto LABEL_14;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v10 = (_QWORD *)v41[0];
        if ((v24 & 1) == 0)
          goto LABEL_14;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
      v25 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
      if ((v24 & 1) != (v26 & 1))
        goto LABEL_22;
      v20 = v25;
      v10 = (_QWORD *)v41[0];
      if ((v24 & 1) == 0)
      {
LABEL_14:
        v10[(v20 >> 6) + 8] |= 1 << v20;
        *(_BYTE *)(v10[6] + v20) = v13;
        *(_QWORD *)(v10[7] + 8 * v20) = v17;
        v27 = v10[2];
        v28 = __OFADD__(v27, 1);
        v29 = v27 + 1;
        if (v28)
          goto LABEL_21;
        v10[2] = v29;
        goto LABEL_4;
      }
    }
    *(_QWORD *)(v10[7] + 8 * v20) = v17;
LABEL_4:
    swift_bridgeObjectRelease(0x8000000000000000);
    v5 = v12;
    v9 = v37;
    v11 = v38;
LABEL_5:
    __swift_destroy_boxed_opaque_existential_1(&v42);
    dispatch thunk of IteratorProtocol.next()(&v44, v5, v9);
    if (!v45)
      goto LABEL_19;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MOSuggestionAssetVisualSubType);
  __break(1u);
  return result;
}

unint64_t specialized static MOSuggestionInterstitialListAssetViewModel.placeHolders(count:)(unint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v1 = result;
    if (result)
    {
      v2 = type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
      do
      {
        v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
        v4 = MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(0x6C6F686563616C70, 0xEB00000000726564, 0, 0, 0, 0, 0, 0, 26, 1, 1, 0);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
        v6 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v5 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v6 >= v5 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v3);
        specialized Array._endMutation()(v7);
        --v1;
      }
      while (v1);
      return (unint64_t)_swiftEmptyArrayStorage;
    }
    else
    {
      return (unint64_t)_swiftEmptyArrayStorage;
    }
  }
  return result;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD v24[2];
  char v25;
  _BYTE v26[32];
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  id v31;

  v31 = a2;
  v3 = type metadata accessor for NSFastEnumerationIterator(0);
  v21 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1;
  NSSet.makeIterator()();

  v7 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator, (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator, (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
  dispatch thunk of IteratorProtocol.next()(&v29, v3, v7);
  if (v30)
  {
    v8 = _swiftEmptyArrayStorage;
    v22 = v5;
    v23 = v3;
    do
    {
      outlined init with take of Any(&v29, &v27);
      outlined init with copy of Any((uint64_t)&v27, (uint64_t)v26);
      if (swift_dynamicCast(v24, v26, (char *)&type metadata for Any + 8, &type metadata for MOAssetAndMediaType, 6))
      {
        v9 = v24[0];
        v10 = v24[1];
        v11 = v25;
        v12 = v28;
        v13 = __swift_project_boxed_opaque_existential_1(&v27, v28);
        v14 = _bridgeAnythingToObjectiveC<A>(_:)(v13, v12);
        v15 = objc_msgSend(v31, "countForObject:", v14);
        swift_unknownObjectRelease(v14);
        __swift_destroy_boxed_opaque_existential_1(&v27);
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
        v17 = v8[2];
        v16 = v8[3];
        if (v17 >= v16 >> 1)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v8);
        v8[2] = v17 + 1;
        v18 = &v8[4 * v17];
        v18[4] = v9;
        v18[5] = v10;
        *((_BYTE *)v18 + 48) = v11;
        v18[7] = v15;
        v5 = v22;
        v3 = v23;
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1(&v27);
      }
      dispatch thunk of IteratorProtocol.next()(&v29, v3, v7);
    }
    while (v30);
  }
  else
  {
    v8 = _swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v3);
  return v8;
}

uint64_t specialized static MOSuggestionInterstitialListAssetViewModel.assetTypeDictionaryToCountString(dict:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy16MomentsUIService19MOAssetAndMediaTypeVSiG_AH_Sits5NeverOTg504_s16d11UIService19fghi38VSiACSiIggyod_AC3key_Si5valuetAC_Sits5j129OIegnrzr_TR04_s16a61UIService42MOSuggestionInterstitialListAssetViewModelC32assetf38DictionaryToCountString4dictSSSDyAA015cdE27J0M32G_tFZAG_SitAG_SitXEfU_Tf3nnnpf_nTf1cn_n(a1);
  v8 = v1;
  swift_bridgeObjectRetain(v1);
  specialized MutableCollection<>.sort(by:)(&v8);
  swift_bridgeObjectRelease(v1);
  v2 = (uint64_t)v8;
  v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay16MomentsUIService19MOAssetAndMediaTypeV_SitG_SSs5NeverOTg504_s16d11UIService19fghi21VSiSSIggyo_AC_SitSSs5j137OIegnrzr_TR04_s16a61UIService42MOSuggestionInterstitialListAssetViewModelC25assetf44SetToCountStringySSSo09NSCountedK0CFZSSAA015cdE13J0V_P16XEfU1_Tf3nnnpf_nTf1cn_n((uint64_t)v8);
  swift_release(v2);
  v8 = v3;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  v5 = lazy protocol witness table accessor for type [String] and conformance [A]();
  v6 = BidirectionalCollection<>.joined(separator:)(0x20A280E220, 0xA500000000000000, v4, v5);
  swift_bridgeObjectRelease(v3);
  return v6;
}

BOOL specialized MOSuggestionInterstitialListAssetViewModel.sameHourMin(startDate:endDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v45 = a2;
  v3 = type metadata accessor for Date(0);
  v47 = *(_QWORD *)(v3 - 8);
  v48 = v3;
  v4 = __chkstk_darwin(v3);
  v44 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v46 = (char *)&v39 - v6;
  v7 = type metadata accessor for Calendar.Component(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Calendar(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter(v13);
  v16 = enum case for Calendar.Component.hour(_:);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 104);
  v17(v10, enum case for Calendar.Component.hour(_:), v7);
  v43 = Calendar.component(_:from:)(v10, a1);
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v10, v7);
  v19 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
  v20 = v19(v15, v11);
  static Calendar.current.getter(v20);
  v41 = v17;
  v17(v10, v16, v7);
  v21 = v45;
  v22 = Calendar.component(_:from:)(v10, v45);
  v40 = v18;
  v18(v10, v7);
  v42 = v11;
  v19(v15, v11);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
  v24 = v44;
  v25 = v48;
  v23(v46, a1, v48);
  v26 = ((uint64_t (*)(char *, uint64_t, uint64_t))v23)(v24, v21, v25);
  if (v43 == v22)
  {
    static Calendar.current.getter(v26);
    v27 = enum case for Calendar.Component.minute(_:);
    v28 = v41;
    v41(v10, enum case for Calendar.Component.minute(_:), v7);
    v29 = v46;
    v45 = Calendar.component(_:from:)(v10, v46);
    v30 = v40;
    v40(v10, v7);
    v31 = v42;
    v32 = v19(v15, v42);
    static Calendar.current.getter(v32);
    v28(v10, v27, v7);
    v33 = Calendar.component(_:from:)(v10, v24);
    v30(v10, v7);
    v19(v15, v31);
    v34 = v48;
    v35 = *(void (**)(char *, uint64_t))(v47 + 8);
    v35(v24, v48);
    v35(v29, v34);
    return v45 == v33;
  }
  else
  {
    v37 = v48;
    v38 = *(void (**)(char *, uint64_t))(v47 + 8);
    v38(v24, v48);
    v38(v46, v37);
    return 0;
  }
}

uint64_t specialized MOSuggestionInterstitialListAssetViewModel.timeRangeRepresentation(startTime:endTime:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  Class isa;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  Class v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  void *v17;
  Class v18;
  id v19;

  if (!specialized MOSuggestionInterstitialListAssetViewModel.sameHourMin(startDate:endDate:)(a1, a2))
  {
    if (one-time initialization token for shortTimeFormatter != -1)
      swift_once(&one-time initialization token for shortTimeFormatter, one-time initialization function for shortTimeFormatter);
    v2 = (void *)static MODateFormatter.shortTimeFormatter;
    isa = Date._bridgeToObjectiveC()().super.isa;
    v4 = objc_msgSend(v2, "stringForObjectValue:", isa);

    if (v4)
    {
      v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      v7 = v6;

      v8 = (void *)static MODateFormatter.shortTimeFormatter;
      v9 = Date._bridgeToObjectiveC()().super.isa;
      v10 = objc_msgSend(v8, "stringForObjectValue:", v9);

      if (v10)
      {
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        v13 = v12;

        if (one-time initialization token for TIME_SEPARATOR != -1)
          swift_once(&one-time initialization token for TIME_SEPARATOR, one-time initialization function for TIME_SEPARATOR);
        v14 = (Swift::String)static MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR;
        swift_bridgeObjectRetain(v13);
        String.append(_:)(v14);
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRetain(v13);
        v15._countAndFlagsBits = v5;
        v15._object = v7;
        String.append(_:)(v15);
        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease(v13);
        return v11;
      }
      swift_bridgeObjectRelease(v7);
    }
  }
  if (one-time initialization token for shortTimeFormatter != -1)
    swift_once(&one-time initialization token for shortTimeFormatter, one-time initialization function for shortTimeFormatter);
  v17 = (void *)static MODateFormatter.shortTimeFormatter;
  v18 = Date._bridgeToObjectiveC()().super.isa;
  v19 = objc_msgSend(v17, "stringForObjectValue:", v18);

  if (!v19)
    return 0;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

  return v16;
}

uint64_t specialized MOSuggestionInterstitialListAssetViewModel.timeRangeWithSameDayRepresentation(startTime:endTime:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  Class isa;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;

  if (one-time initialization token for yearDateFormatter != -1)
    swift_once(&one-time initialization token for yearDateFormatter, one-time initialization function for yearDateFormatter);
  v4 = (void *)static MODateFormatter.yearDateFormatter;
  isa = Date._bridgeToObjectiveC()().super.isa;
  v6 = objc_msgSend(v4, "stringForObjectValue:", isa);

  if (v6)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    v10 = specialized MOSuggestionInterstitialListAssetViewModel.timeRangeRepresentation(startTime:endTime:)(a1, a2);
    if (v11)
    {
      v12 = v10;
      v13 = v11;
      swift_bridgeObjectRetain(v9);
      v14._countAndFlagsBits = 0x20A280E220;
      v14._object = (void *)0xA500000000000000;
      String.append(_:)(v14);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRetain(v9);
      v15._countAndFlagsBits = v12;
      v15._object = v13;
      String.append(_:)(v15);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v9);
      return v7;
    }
    swift_bridgeObjectRelease(v9);
  }
  return 0;
}

uint64_t specialized MOSuggestionInterstitialListAssetViewModel.singleDateRangeRepresentation(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  Class isa;
  id v15;
  uint64_t v17;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  outlined init with copy of Date?(a1 + *(int *)(v9 + 20), (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Date?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Any?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Date?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    if (specialized MOSuggestionInterstitialListAssetViewModel.sameHourMin(startDate:endDate:)(a1, (uint64_t)v8))
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    else
    {
      v10 = specialized MOSuggestionInterstitialListAssetViewModel.timeRangeWithSameDayRepresentation(startTime:endTime:)(a1, (uint64_t)v8);
      v12 = v11;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if (v12)
        return v10;
    }
  }
  if (one-time initialization token for yearDateTimeFormatter != -1)
    swift_once(&one-time initialization token for yearDateTimeFormatter, one-time initialization function for yearDateTimeFormatter);
  v13 = (void *)static MODateFormatter.yearDateTimeFormatter;
  isa = Date._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(v13, "stringForObjectValue:", isa);

  if (!v15)
    return 0;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);

  return v10;
}

uint64_t specialized MOSuggestionInterstitialListAssetViewModel.timeRangeWithDifferentDaysRepresentation(startTime:endTime:)()
{
  void *v0;
  Class isa;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  Class v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;

  if (one-time initialization token for yearDateFormatter != -1)
    swift_once(&one-time initialization token for yearDateFormatter, one-time initialization function for yearDateFormatter);
  v0 = (void *)static MODateFormatter.yearDateFormatter;
  isa = Date._bridgeToObjectiveC()().super.isa;
  v2 = objc_msgSend(v0, "stringForObjectValue:", isa);

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  v6 = (void *)static MODateFormatter.yearDateFormatter;
  v7 = Date._bridgeToObjectiveC()().super.isa;
  v8 = objc_msgSend(v6, "stringForObjectValue:", v7);

  if (!v8)
  {
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  if (one-time initialization token for TIME_SEPARATOR != -1)
    swift_once(&one-time initialization token for TIME_SEPARATOR, one-time initialization function for TIME_SEPARATOR);
  v12 = (Swift::String)static MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR;
  swift_bridgeObjectRetain(v5);
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRetain(v5);
  v13._countAndFlagsBits = v9;
  v13._object = v11;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v5);
  return v3;
}

uint64_t base witness table accessor for Equatable in MOSuggestionInterstitialListAssetViewModel()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionInterstitialListAssetViewModel and conformance MOSuggestionInterstitialListAssetViewModel, type metadata accessor for MOSuggestionInterstitialListAssetViewModel, (uint64_t)&protocol conformance descriptor for MOSuggestionInterstitialListAssetViewModel);
}

uint64_t type metadata accessor for MOSuggestionInterstitialListAssetViewModel(uint64_t a1)
{
  uint64_t result;

  result = type metadata singleton initialization cache for MOSuggestionInterstitialListAssetViewModel;
  if (!type metadata singleton initialization cache for MOSuggestionInterstitialListAssetViewModel)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MOSuggestionInterstitialListAssetViewModel);
  return result;
}

uint64_t sub_1000749A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_1000749D8(_QWORD *a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 184);
  v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t sub_100074A08@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 200))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100074A38(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 208);
  swift_bridgeObjectRetain(v3);
  return v4(v2, v3);
}

uint64_t sub_100074A7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 224))();
  *a2 = result;
  return result;
}

uint64_t sub_100074AAC(_QWORD *a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 232);
  v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t sub_100074ADC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 248))();
  *a2 = result;
  return result;
}

uint64_t sub_100074B0C(_QWORD *a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 256);
  v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t sub_100074B3C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 272))();
  *a2 = result;
  return result;
}

uint64_t sub_100074B6C(_QWORD *a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 280);
  v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t sub_100074B9C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 296))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_100074BD0(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 304))(*a1);
}

uint64_t ObjC metadata update function for MOSuggestionInterstitialListAssetViewModel()
{
  return type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
}

uint64_t type metadata completion function for MOSuggestionInterstitialListAssetViewModel(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = "\b";
  v4[1] = &unk_1001A0578;
  v4[2] = "\b";
  v4[3] = "\b";
  v4[4] = "\b";
  v4[5] = &unk_1001A0590;
  v4[6] = &unk_1001A05A8;
  v4[7] = &unk_1001A05C0;
  v4[8] = &unk_1001A0590;
  v4[9] = &unk_1001A0590;
  v4[10] = &unk_1001A0590;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[11] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 12, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t outlined init with copy of MOSuggestionSheetAssetDateRange(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of MOSuggestionSheetAssetDateRange(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

UIFont __swiftcall UIFont.bold()()
{
  void *v0;
  id v1;
  id v2;
  UIFont result;
  id v4;

  v1 = objc_msgSend(v0, "fontDescriptor");
  v2 = objc_msgSend(v1, "fontDescriptorWithSymbolicTraits:", 2);

  if (v2)
  {
    v4 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithDescriptor:size:", v2, 0.0);

    return (UIFont)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void UILabel.setLineSpacing(lineSpacing:lineHeightMultiple:baselineOffset:font:)(void *a1, double a2, double a3, double a4)
{
  void *v4;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  double v14;
  id v15;
  NSString v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t inited;
  NSString *v23;
  NSString *v24;
  id v25;
  unint64_t v26;
  Class isa;
  uint64_t v28;

  v9 = objc_msgSend(v4, "text");
  if (v9)
  {
    v10 = v9;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    v13 = objc_msgSend(objc_allocWithZone((Class)NSMutableParagraphStyle), "init");
    objc_msgSend(v13, "setLineSpacing:", a2);
    objc_msgSend(v13, "setLineBreakMode:", 4);
    objc_msgSend(v13, "setLineHeightMultiple:", a3);
    LODWORD(v14) = 0.5;
    objc_msgSend(v13, "setHyphenationFactor:", v14);
    v15 = objc_msgSend(v4, "attributedText");
    if (v15)
    {
      v16 = v15;
      swift_bridgeObjectRelease(v12);
      v17 = objc_msgSend(objc_allocWithZone((Class)NSMutableAttributedString), "initWithAttributedString:", v16);
    }
    else
    {
      v18 = objc_allocWithZone((Class)NSMutableAttributedString);
      v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v12);
      v17 = objc_msgSend(v18, "initWithString:", v16);
    }
    v19 = v17;

    if (a1)
    {
      v20 = a1;
      objc_msgSend(v19, "addAttribute:value:range:", NSFontAttributeName, v20, 0, objc_msgSend(v19, "length"));

    }
    v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
    inited = swift_initStackObject(v21, &v28);
    *(_OWORD *)(inited + 16) = xmmword_10019EEE0;
    *(_QWORD *)(inited + 32) = NSBaselineOffsetAttributeName;
    *(double *)(inited + 40) = a4;
    *(_QWORD *)(inited + 64) = &type metadata for CGFloat;
    *(_QWORD *)(inited + 72) = NSParagraphStyleAttributeName;
    *(_QWORD *)(inited + 104) = type metadata accessor for NSMutableParagraphStyle();
    *(_QWORD *)(inited + 80) = v13;
    v23 = NSBaselineOffsetAttributeName;
    v24 = NSParagraphStyleAttributeName;
    v25 = v13;
    v26 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v19, "addAttributes:range:", isa, 0, objc_msgSend(v19, "length", swift_bridgeObjectRelease(v26).n128_f64[0]));

    objc_msgSend(v4, "setAttributedText:", v19);
  }
}

UIFont __swiftcall UIFont.withWeight(_:)(UIFontWeight a1)
{
  void *v1;
  void *v2;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSString *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSString *v16;
  char isUniquelyReferenced_nonNull_native;
  NSString *v18;
  NSString *v19;
  uint64_t v20;
  char v21;
  NSString *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  Class isa;
  id v30;
  double v31;
  id v32;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v2 = v1;
  v4 = objc_msgSend(v1, "fontDescriptor");
  v5 = objc_msgSend(v4, "fontAttributes");

  type metadata accessor for UIFontDescriptorAttributeName(0);
  v7 = v6;
  v8 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorAttributeName, (uint64_t)&protocol conformance descriptor for UIFontDescriptorAttributeName);
  v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, v7, (char *)&type metadata for Any + 8, v8);

  v37 = v9;
  if (!*(_QWORD *)(v9 + 16))
  {
    v35 = 0u;
    v36 = 0u;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain(v9);
  v10 = UIFontDescriptorTraitsAttribute;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  if ((v12 & 1) == 0)
  {
    v35 = 0u;
    v36 = 0u;

    swift_bridgeObjectRelease(v9);
    goto LABEL_8;
  }
  outlined init with copy of Any(*(_QWORD *)(v9 + 56) + 32 * v11, (uint64_t)&v35);

  swift_bridgeObjectRelease(v9);
  if (!*((_QWORD *)&v36 + 1))
  {
LABEL_8:
    outlined destroy of Any?((uint64_t)&v35);
    goto LABEL_9;
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UIFontDescriptorTraitKey : Any]);
  if (!swift_dynamicCast(v34, &v35, (char *)&type metadata for Any + 8, v13, 6))
  {
LABEL_9:
    v14 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
    goto LABEL_10;
  }
  v14 = *(_QWORD *)&v34[0];
LABEL_10:
  type metadata accessor for UIFontWeight(0);
  *((_QWORD *)&v36 + 1) = v15;
  *(UIFontWeight *)&v35 = a1;
  outlined init with take of Any(&v35, v34);
  v16 = UIFontWeightTrait;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v34, v16, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease(0x8000000000000000);
  v18 = UIFontDescriptorNameAttribute;
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v18, specialized __RawDictionaryStorage.find<A>(_:), (void (*)(void))specialized _NativeDictionary.copy(), &v35);

  outlined destroy of Any?((uint64_t)&v35);
  *((_QWORD *)&v36 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UIFontDescriptorTraitKey : Any]);
  *(_QWORD *)&v35 = v14;
  outlined init with take of Any(&v35, v34);
  v19 = UIFontDescriptorTraitsAttribute;
  v20 = v37;
  v21 = swift_isUniquelyReferenced_nonNull_native(v37);
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v34, v19, v21);

  swift_bridgeObjectRelease(0x8000000000000000);
  v22 = UIFontDescriptorFamilyAttribute;
  v23 = objc_msgSend(v2, "familyName");
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v26 = v25;

  *((_QWORD *)&v36 + 1) = &type metadata for String;
  *(_QWORD *)&v35 = v24;
  *((_QWORD *)&v35 + 1) = v26;
  outlined init with take of Any(&v35, v34);
  v27 = swift_isUniquelyReferenced_nonNull_native(v20);
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v34, v22, v27);
  v37 = v20;

  swift_bridgeObjectRelease(0x8000000000000000);
  v28 = objc_allocWithZone((Class)UIFontDescriptor);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v20);
  v30 = objc_msgSend(v28, "initWithFontAttributes:", isa);

  objc_msgSend(v2, "pointSize");
  v32 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithDescriptor:size:", v30, v31);

  return (UIFont)v32;
}

Swift::Void __swiftcall UILabel.styleDateWithWeekday(weekday:)(Swift::String weekday)
{
  void *v1;
  void *v2;
  void *object;
  uint64_t countAndFlagsBits;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  Swift::String v13;
  id v14;

  v2 = v1;
  object = weekday._object;
  countAndFlagsBits = weekday._countAndFlagsBits;
  v5 = objc_msgSend(v2, "attributedText");

  if (v5)
  {
    v6 = objc_msgSend(v2, "attributedText");
    if (v6)
    {
      v7 = v6;
      v14 = objc_msgSend(objc_allocWithZone((Class)NSMutableAttributedString), "initWithAttributedString:", v6);

      v8 = objc_msgSend(v2, "font");
      if (v8)
      {
        v9 = v8;
        v10 = objc_msgSend(v8, "fontDescriptor");
        v11 = objc_msgSend(v10, "fontDescriptorWithSymbolicTraits:", 2);

        if (v11)
        {
          v12 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithDescriptor:size:", v11, 0.0);

          v13._countAndFlagsBits = countAndFlagsBits;
          v13._object = object;
          NSMutableAttributedString.setPrefixFont(font:forText:)((UIFont)v12, v13);

          objc_msgSend(v2, "setAttributedText:", v14);
          return;
        }
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_9:
    __break(1u);
  }
}

Swift::Void __swiftcall NSMutableAttributedString.setPrefixFont(font:forText:)(UIFont font, Swift::String forText)
{
  void *v2;
  id v4;
  NSString v5;
  id v6;
  void *v7;
  void *v8;
  NSAttributedStringKey v9;
  void *v10;
  Class isa;
  id v12;

  v4 = objc_msgSend(v2, "mutableString");
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "rangeOfString:options:", v5, 1);
  v8 = v7;

  if (!v6)
  {
    v9 = NSFontAttributeName;
    v10 = v2;
    isa = font.super.isa;
    v12 = v8;
LABEL_9:
    objc_msgSend(v10, "addAttribute:value:range:", v9, isa, 0, v12);
    return;
  }
  if (v6 != (id)NSNotFound.getter())
  {
    if (__OFSUB__(v6, 1))
    {
      __break(1u);
    }
    else if ((((unint64_t)v6 - 1) & 0x8000000000000000) == 0)
    {
      if (v6 != (id)0x8000000000000000)
      {
        v9 = NSFontAttributeName;
        v12 = v6;
        v10 = v2;
        isa = font.super.isa;
        goto LABEL_9;
      }
LABEL_12:
      __break(1u);
      return;
    }
    __break(1u);
    goto LABEL_12;
  }
}

Swift::String_optional __swiftcall String.firstWord()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  Swift::String_optional result;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;

  v11 = v0;
  v12 = v1;
  v10[0] = 32;
  v10[1] = 0xE100000000000000;
  v2 = lazy protocol witness table accessor for type String and conformance String();
  v3 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(v10, &type metadata for String, &type metadata for String, v2, v2);
  v4 = v3;
  if (v3[2])
  {
    v5 = v3[4];
    v6 = (void *)v3[5];
    swift_bridgeObjectRetain(v6);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  swift_bridgeObjectRelease(v4);
  v7 = v5;
  v8 = v6;
  result.value._object = v8;
  result.value._countAndFlagsBits = v7;
  return result;
}

uint64_t String.removingNumbers.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v4 = type metadata accessor for CharacterSet(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[0] = a1;
  v11[1] = a2;
  CharacterSet.init(charactersIn:)(0x3736353433323130, 0xEC0000002C2E3938);
  v8 = lazy protocol witness table accessor for type String and conformance String();
  v9 = StringProtocol.trimmingCharacters(in:)(v7, &type metadata for String, v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9;
}

Swift::Void __swiftcall NSMutableAttributedString.setColor(color:forText:)(UIColor color, Swift::String forText)
{
  NSMutableAttributedString.setColor(color:forText:)((uint64_t)color.super.isa, forText._countAndFlagsBits, (uint64_t)forText._object, &NSForegroundColorAttributeName);
}

Swift::Void __swiftcall NSMutableAttributedString.setFont(font:forText:)(UIFont font, Swift::String forText)
{
  NSMutableAttributedString.setColor(color:forText:)((uint64_t)font.super.isa, forText._countAndFlagsBits, (uint64_t)forText._object, &NSFontAttributeName);
}

id NSMutableAttributedString.setColor(color:forText:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  void *v4;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;

  v7 = objc_msgSend(v4, "mutableString");
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "rangeOfString:options:", v8, 1);
  v11 = v10;

  return objc_msgSend(v4, "addAttribute:value:range:", *a4, a1, v9, v11);
}

UIFont __swiftcall UIFont.withTraits(traits:)(UIFontDescriptorSymbolicTraits traits)
{
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  UIFont result;
  id v6;

  v2 = *(_QWORD *)&traits;
  v3 = objc_msgSend(v1, "fontDescriptor");
  v4 = objc_msgSend(v3, "fontDescriptorWithSymbolicTraits:", v2);

  if (v4)
  {
    v6 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithDescriptor:size:", v4, 0.0);

    return (UIFont)v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t type metadata accessor for NSMutableParagraphStyle()
{
  unint64_t result;
  uint64_t v1;

  result = lazy cache variable for type metadata for NSMutableParagraphStyle;
  if (!lazy cache variable for type metadata for NSMutableParagraphStyle)
  {
    v1 = objc_opt_self(NSMutableParagraphStyle);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMutableParagraphStyle);
  }
  return result;
}

id static UIFont.preferredFont(forTextStyle:design:symbolicTraits:weight:compatibleWith:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  return specialized static UIFont.preferredFont(forTextStyle:design:symbolicTraits:weight:compatibleWith:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5 & 1, a6);
}

UIFont_optional __swiftcall UIFont.withSymbolicTraits(_:)(UIFontDescriptorSymbolicTraits a1)
{
  void *v1;
  id v3;
  id v4;
  unsigned int v5;
  id v6;
  Swift::Bool v7;
  objc_class *v8;
  objc_class *v9;
  UIFont_optional result;

  v3 = objc_msgSend(v1, "fontDescriptor");
  v4 = objc_msgSend(v1, "fontDescriptor");
  v5 = objc_msgSend(v4, "symbolicTraits");

  v6 = objc_msgSend(v3, "fontDescriptorWithSymbolicTraits:", v5 | a1);
  if (v6)
  {
    v8 = (objc_class *)objc_msgSend((id)objc_opt_self(UIFont), "fontWithDescriptor:size:", v6, 0.0);

  }
  else
  {
    v8 = 0;
  }
  v9 = v8;
  result.value.super.isa = v9;
  result.is_nil = v7;
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, specialized __RawDictionaryStorage.find<A>(_:), (void (*)(void))specialized _NativeDictionary.copy(), a2);
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, void (*a3)(void)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;

  v7 = v4;
  v10 = *v7;
  swift_bridgeObjectRetain(*v7);
  v11 = a2(a1);
  LOBYTE(a1) = v12;
  swift_bridgeObjectRelease(v10);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v14 = *v7;
    v17 = *v7;
    *v7 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a3();
      v14 = v17;
    }

    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v14 + 56) + 32 * v11), a4);
    specialized _NativeDictionary._delete(at:)(v11, v14);
    v15 = *v7;
    *v7 = v14;
    swift_bridgeObjectRelease(v15);
  }
  else
  {
    result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = v1;
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v7 = *v1;
  v11 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v11;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v7);
  v9 = *v2;
  *v2 = v7;
  swift_bridgeObjectRelease(v9);
  return v8;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v7);
  specialized _NativeDictionary._delete(at:)(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v21 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v12 = v21;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    v13 = *(_QWORD *)(v12 + 56);
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    v15 = *(_QWORD *)(v14 - 8);
    outlined init with take of Date?(v13 + *(_QWORD *)(v15 + 72) * v9, a3);
    specialized _NativeDictionary._delete(at:)(v9, v12);
    v16 = *v4;
    *v4 = v12;
    v17 = swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v15 + 56))(a3, 0, 1, v14, v17);
  }
  else
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v19 - 8) + 56))(a3, 1, 1, v19, v20);
  }
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)(v23, *(_QWORD *)(a2 + 40));
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_BYTE *)(v11 + v3);
          v13 = (_BYTE *)(v11 + v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  Swift::Int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD v30[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v14 = v13;
        Hasher.init(_seed:)(v30, v10);
        v15 = v11;
        String.hash(into:)(v30, v12, v14);
        v16 = Hasher._finalize()();

        result = swift_bridgeObjectRelease(v14);
        v17 = v16 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v17 < v8)
            goto LABEL_5;
        }
        else if (v17 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v17)
        {
LABEL_11:
          v18 = *(_QWORD *)(a2 + 48);
          v19 = (_QWORD *)(v18 + 8 * v3);
          v20 = (_QWORD *)(v18 + 8 * v6);
          if (v3 != v6 || v19 >= v20 + 1)
            *v19 = *v20;
          v21 = *(_QWORD *)(a2 + 56);
          v22 = (_OWORD *)(v21 + 32 * v3);
          v23 = (_OWORD *)(v21 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v22 >= v23 + 2))
          {
            v9 = v23[1];
            *v22 = *v23;
            v22[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v25 = *v24;
    v26 = (-1 << v3) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * (result >> 6));
    v26 = *v24;
    v25 = (-1 << result) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), *v10);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 40);
        v10 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        v13 = v12;
        Hasher.init(_seed:)(v29, v9);
        v14 = v10;
        String.hash(into:)(v29, v11, v13);
        v15 = Hasher._finalize()();

        result = swift_bridgeObjectRelease(v13);
        v16 = v15 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v16 < v8)
            goto LABEL_5;
        }
        else if (v16 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v16)
        {
LABEL_11:
          v17 = *(_QWORD *)(a2 + 48);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || v18 >= v19 + 1)
            *v18 = *v19;
          v20 = *(_QWORD *)(a2 + 56);
          v21 = (_QWORD *)(v20 + 8 * v3);
          v22 = (_QWORD *)(v20 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v21 >= v22 + 1))
          {
            *v21 = *v22;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v24 = *v23;
    v25 = (-1 << v3) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    v25 = *v23;
    v24 = (-1 << result) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v27, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v9 = v20[1];
            *v19 = *v20;
            v19[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v29, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v29, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v13 < v8)
          goto LABEL_11;
LABEL_12:
        v14 = *(_QWORD *)(a2 + 48);
        v15 = (_OWORD *)(v14 + 16 * v3);
        v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1)
          *v15 = *v16;
        v17 = *(_QWORD *)(a2 + 56);
        v18 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 72);
        v19 = v18 * v3;
        result = v17 + v18 * v3;
        v20 = v18 * v6;
        v21 = v17 + v18 * v6 + v18;
        if (v19 < v20 || result >= v21)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v19 == v20)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v13 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v13)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v24 = *v23;
    v25 = (-1 << v3) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    v25 = *v23;
    v24 = (-1 << result) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void specialized _NativeDictionary._delete(at:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  Swift::UInt v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD v36[9];

  v2 = a2;
  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v33 = v4;
      v34 = (v8 + 1) & v7;
      v35 = v2;
      do
      {
        v9 = 24 * v6;
        v10 = *(_QWORD *)(v2 + 48) + 24 * v6;
        v11 = *(void **)v10;
        v12 = *(_QWORD *)(v10 + 8);
        v13 = *(unsigned __int8 *)(v10 + 16);
        Hasher.init(_seed:)(v36, *(_QWORD *)(v2 + 40));
        v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v16 = v15;
        v17 = v11;
        String.hash(into:)(v36, v14, v16);

        swift_bridgeObjectRelease(v16);
        if (v13 == 1)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v12);
        }
        v18 = Hasher._finalize()();

        v19 = v18 & v7;
        if (v3 >= (uint64_t)v34)
        {
          v2 = v35;
          if (v19 >= v34 && v3 >= v19)
          {
LABEL_15:
            v20 = *(_QWORD *)(v2 + 48);
            v21 = v20 + 24 * v3;
            v22 = (__int128 *)(v20 + v9);
            if (24 * v3 < v9 || v21 >= (unint64_t)v22 + 24 || v3 != v6)
            {
              v23 = *v22;
              *(_QWORD *)(v21 + 16) = *((_QWORD *)v22 + 2);
              *(_OWORD *)v21 = v23;
            }
            v24 = *(_QWORD *)(v2 + 56);
            v25 = (_QWORD *)(v24 + 8 * v3);
            v26 = (_QWORD *)(v24 + 8 * v6);
            v4 = v33;
            if (v3 != v6 || (v3 = v6, v25 >= v26 + 1))
            {
              *v25 = *v26;
              v3 = v6;
            }
            goto LABEL_5;
          }
        }
        else
        {
          v2 = v35;
          if (v19 >= v34 || v3 >= v19)
            goto LABEL_15;
        }
        v4 = v33;
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v27 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v28 = *v27;
    v29 = (-1 << v3) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v29 = *v27;
    v28 = (-1 << a1) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(v2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v32;
    ++*(_DWORD *)(v2 + 36);
  }
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD v32[9];

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      while (1)
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v32, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v32, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v9)
          break;
        if (v14 < v9)
          goto LABEL_11;
LABEL_12:
        v15 = *(_QWORD *)(a2 + 48);
        v16 = (_OWORD *)(v15 + 16 * v3);
        v17 = (_OWORD *)(v15 + 16 * v6);
        if (v3 != v6 || v16 >= v17 + 1)
          *v16 = *v17;
        v18 = *(_QWORD *)(a2 + 56);
        v19 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?)
                                    - 8)
                        + 72);
        v20 = v19 * v3;
        v21 = v18 + v19 * v3;
        v22 = v19 * v6;
        v23 = v18 + v19 * v6;
        v24 = v23 + v19;
        if (v20 < v22 || v21 >= v24)
        {
          swift_arrayInitWithTakeFrontToBack(v21, v23);
        }
        else
        {
          v3 = v6;
          if (v20 == v22)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront(v21, v23);
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v14 < v9)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v14)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v26 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v27 = *v26;
    v28 = (-1 << v3) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
}

double specialized UILabel.estimatedHeight(forWidth:text:ofFont:)(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  uint64_t v8;
  uint64_t inited;
  NSString *v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[48];
  CGRect v31;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, UIFont)>);
  inited = swift_initStackObject(v8, v30);
  *(_OWORD *)(inited + 16) = xmmword_10019ED20;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  *(_QWORD *)(inited + 40) = a3;
  v10 = NSFontAttributeName;
  v11 = a3;
  v12 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v28 = a1;
  v29 = a2;
  swift_bridgeObjectRetain(a2);
  String.init<A>(_:)(&v28, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v14 = v13;
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v12);
  v17 = v16;
  swift_bridgeObjectRelease(v12);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  objc_msgSend(v15, "boundingRectWithSize:options:attributes:context:", 3, isa, 0, a4, 3.40282347e38, v28, v29);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v26 = v25;

  v31.origin.x = v20;
  v31.origin.y = v22;
  v31.size.width = v24;
  v31.size.height = v26;
  return ceil(CGRectGetHeight(v31));
}

id specialized static UIFont.preferredFont(forTextStyle:design:symbolicTraits:weight:compatibleWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  NSString *v18;
  NSString *v19;
  unint64_t v20;
  unint64_t v21;
  Class isa;
  id v23;
  id v24;
  id v25;
  id v26;
  _BYTE v28[48];
  _BYTE v29[72];

  v10 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", a1, a6);
  v11 = v10;
  if ((a3 & 0x100000000) == 0)
  {
    v12 = objc_msgSend(v10, "fontDescriptorWithSymbolicTraits:", a3);
    if (v12)
    {
      v13 = v12;

      v11 = v13;
    }
  }
  if ((a5 & 1) == 0)
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIFontDescriptorAttributeName, Any)>);
    inited = swift_initStackObject(v14, v29);
    *(_OWORD *)(inited + 16) = xmmword_10019ED20;
    *(_QWORD *)(inited + 32) = UIFontDescriptorTraitsAttribute;
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIFontDescriptorTraitKey, UIFontWeight)>);
    v17 = swift_initStackObject(v16, v28);
    *(_OWORD *)(v17 + 16) = xmmword_10019ED20;
    *(_QWORD *)(v17 + 32) = UIFontWeightTrait;
    *(_QWORD *)(v17 + 40) = a4;
    v18 = UIFontDescriptorTraitsAttribute;
    v19 = UIFontWeightTrait;
    v20 = specialized Dictionary.init(dictionaryLiteral:)(v17);
    *(_QWORD *)(inited + 64) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UIFontDescriptorTraitKey : UIFontWeight]);
    *(_QWORD *)(inited + 40) = v20;
    v21 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for UIFontDescriptorAttributeName(0);
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorAttributeName, (uint64_t)&protocol conformance descriptor for UIFontDescriptorAttributeName);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v23 = objc_msgSend(v11, "fontDescriptorByAddingAttributes:", isa, swift_bridgeObjectRelease(v21).n128_f64[0]);

    v11 = v23;
  }
  if (a2)
  {
    v24 = objc_msgSend(v11, "fontDescriptorWithDesign:", a2);
    if (v24)
    {
      v25 = v24;

      v11 = v25;
    }
  }
  v26 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithDescriptor:size:", v11, 0.0);

  return v26;
}

double specialized UILabel.estimatedHeight(forWidth:text:ofSize:weight:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t inited;
  void *v12;
  NSString *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  Class isa;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[48];
  CGRect v33;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, UIFont)>);
  inited = swift_initStackObject(v10, v32);
  *(_OWORD *)(inited + 16) = xmmword_10019ED20;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  v12 = (void *)objc_opt_self(UIFont);
  v13 = NSFontAttributeName;
  *(_QWORD *)(inited + 40) = objc_msgSend(v12, "systemFontOfSize:weight:", a4, a5);
  v14 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v30 = a1;
  v31 = a2;
  swift_bridgeObjectRetain(a2);
  String.init<A>(_:)(&v30, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v16 = v15;
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v14);
  v19 = v18;
  swift_bridgeObjectRelease(v14);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v19);
  objc_msgSend(v17, "boundingRectWithSize:options:attributes:context:", 3, isa, 0, a3, 3.40282347e38, v30, v31);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v28 = v27;

  v33.origin.x = v22;
  v33.origin.y = v24;
  v33.size.width = v26;
  v33.size.height = v28;
  return ceil(CGRectGetHeight(v33));
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *MOSuggestionPrivacyTipCell.reuseIdentifier.unsafeMutableAddressor()
{
  return &static MOSuggestionPrivacyTipCell.reuseIdentifier;
}

unint64_t static MOSuggestionPrivacyTipCell.reuseIdentifier.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t MOSuggestionPrivacyTipCell.tipModel.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_tipModel);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_tipModel, v3, 0, 0);
  return swift_retain(*v1);
}

uint64_t MOSuggestionPrivacyTipCell.tipModel.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v3 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_tipModel);
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_tipModel, v7, 1, 0);
  v4 = *v3;
  *v3 = a1;
  swift_retain(a1);
  v5 = swift_release(v4);
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0xB0))(v5);
  return swift_release(a1);
}

uint64_t (*MOSuggestionPrivacyTipCell.tipModel.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_tipModel, a1, 33, 0);
  return MOSuggestionPrivacyTipCell.tipModel.modify;
}

uint64_t MOSuggestionPrivacyTipCell.tipModel.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess(a1);
  if ((a2 & 1) == 0)
    return (*(uint64_t (**)(uint64_t))((swift_isaMask & **(_QWORD **)(a1 + 24)) + 0xB0))(result);
  return result;
}

void (*variable initialization expression of MOSuggestionPrivacyTipCell.didDismiss())()
{
  return closure #1 in variable initialization expression of MOSuggestionPrivacyTipCell.didDismiss;
}

void closure #1 in variable initialization expression of MOSuggestionPrivacyTipCell.didDismiss()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(MOOnboardingManager), "sharedInstance");
  objc_msgSend(v0, "setOnboardingFlowCompletionStatus:", 3);

}

uint64_t key path setter for MOSuggestionPrivacyTipCell.didDismiss : MOSuggestionPrivacyTipCell(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t (*)(), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  v5 = swift_allocObject(&unk_1001E6DD0, 32, 7);
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((swift_isaMask & **a2) + 0xA0);
  swift_retain(v4);
  return v6(thunk for @escaping @callee_guaranteed () -> (@out ())partial apply, v5);
}

uint64_t MOSuggestionPrivacyTipCell.didDismiss.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_didDismiss);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_didDismiss, v4, 0, 0);
  v2 = *v1;
  swift_retain(v1[1]);
  return v2;
}

uint64_t MOSuggestionPrivacyTipCell.didDismiss.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_didDismiss);
  swift_beginAccess(v5, v8, 1, 0);
  v6 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return swift_release(v6);
}

uint64_t (*MOSuggestionPrivacyTipCell.didDismiss.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_didDismiss, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

void MOSuggestionPrivacyTipCell.init(coder:)()
{
  char *v0;
  void (**v1)();

  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_currentTipView]);
  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_tipModel] = 0;
  v1 = (void (**)())&v0[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_didDismiss];
  *v1 = closure #1 in variable initialization expression of MOSuggestionPrivacyTipCell.didDismiss;
  v1[1] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001A6460, "MomentsUIService/MOSuggestionSheetPrivacyTipCell.swift", 54, 2, 29, 0);
  __break(1u);
}

_QWORD *MOSuggestionPrivacyTipCell.init(frame:)()
{
  char *v0;
  void (**v1)();
  double y;
  double width;
  double height;
  _QWORD *v5;
  void (*v6)(void);
  _QWORD *v7;
  objc_super v9;

  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_currentTipView]);
  *(_QWORD *)&v0[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_tipModel] = 0;
  v1 = (void (**)())&v0[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_didDismiss];
  *v1 = closure #1 in variable initialization expression of MOSuggestionPrivacyTipCell.didDismiss;
  v1[1] = 0;
  y = CGRectZero.origin.y;
  width = CGRectZero.size.width;
  height = CGRectZero.size.height;
  v9.receiver = v0;
  v9.super_class = (Class)type metadata accessor for MOSuggestionPrivacyTipCell();
  v5 = objc_msgSendSuper2(&v9, "initWithFrame:", CGRectZero.origin.x, y, width, height);
  v6 = *(void (**)(void))((swift_isaMask & *v5) + 0xB0);
  v7 = v5;
  v6();

  return v7;
}

uint64_t type metadata accessor for MOSuggestionPrivacyTipCell()
{
  return objc_opt_self(_TtC16MomentsUIService26MOSuggestionPrivacyTipCell);
}

Swift::Void __swiftcall MOSuggestionPrivacyTipCell.setUpTip()()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v2;
  uint64_t Strong;
  void *v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  char **v27;
  int v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  id v53;
  uint64_t (*v54)(void);
  char *v55;
  uint64_t v56;
  _QWORD v57[5];
  _QWORD v58[4];
  char v59;
  char v60[8];
  uint64_t v61;

  v1 = v0;
  v2 = (char *)v0 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_currentTipView;
  Strong = swift_unknownObjectWeakLoadStrong((char *)v0 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_currentTipView);
  if (Strong)
  {
    v4 = (void *)Strong;
    swift_unknownObjectWeakAssign(v2, 0);
    objc_msgSend(v4, "removeFromSuperview");

  }
  v5 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x80);
  v6 = v5();
  if (v6)
  {
    v8 = v6;
    v9 = *(_QWORD *)(v6 + 48);
    v56 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v9);
    v7 = swift_release(v8);
  }
  else
  {
    v9 = 0xE600000000000000;
    v56 = 0x74756F79616CLL;
  }
  v10 = ((uint64_t (*)(__n128))v5)(v7);
  if (v10)
  {
    v11 = v10;
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v10 + 144))(v58);
    v12 = v58[0];
    v13 = v58[1];
    v14 = v58[2];
    v15 = v58[3];
    v16 = v59;
    swift_release(v11);
    v10 = outlined init with take of MOSuggestionPrivacyTip?((uint64_t)v58, (uint64_t)v60);
    if (v61)
    {
      swift_bridgeObjectRelease(v9);
      LOBYTE(v17) = v16 & 1;
      v9 = v13;
      goto LABEL_13;
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
  v18 = ((uint64_t (*)(uint64_t))v5)(v10);
  v17 = v18;
  if (v18)
  {
    v54 = v5;
    v55 = v2;
    v19 = *(_QWORD *)(v18 + 56);
    v20 = *(_QWORD *)(v18 + 64);
    swift_bridgeObjectRetain(v20);
    swift_release(v17);
    outlined consume of MOSuggestionPrivacyTip?(v12, v13, v14, v15);
    LOBYTE(v17) = 0;
    v14 = v19;
    v2 = v55;
    v12 = v56;
    v15 = v20;
    v5 = v54;
  }
  else
  {
    outlined consume of MOSuggestionPrivacyTip?(v12, v13, v14, v15);
    v14 = 0;
    v15 = 0;
    v12 = v56;
  }
LABEL_13:
  v57[3] = &type metadata for MOSuggestionPrivacyTip;
  v57[4] = lazy protocol witness table accessor for type MOSuggestionPrivacyTip and conformance MOSuggestionPrivacyTip();
  v21 = swift_allocObject(&unk_1001E6C68, 49, 7);
  v57[0] = v21;
  *(_QWORD *)(v21 + 16) = v12;
  *(_QWORD *)(v21 + 24) = v9;
  *(_QWORD *)(v21 + 32) = v14;
  *(_QWORD *)(v21 + 40) = v15;
  *(_BYTE *)(v21 + 48) = v17;
  v22 = swift_allocObject(&unk_1001E6C90, 24, 7);
  swift_unknownObjectWeakInit(v22 + 16);
  v23 = objc_allocWithZone((Class)type metadata accessor for TipUIView(0));
  v24 = (void *)TipUIView.init(_:arrowEdge:actionHandler:)(v57, 4, partial apply for closure #1 in MOSuggestionPrivacyTipCell.setUpTip(), v22);
  objc_msgSend(v1, "addSubview:", v24);
  swift_unknownObjectWeakAssign(v2, v24);
  v25 = v24;
  v26 = v5();
  v27 = &selRef_systemBlueColor;
  if (v26)
  {
    v28 = *(unsigned __int8 *)(v26 + 32);
    swift_release(v26);
    if (!v28)
      v27 = &selRef_systemIndigoColor;
  }
  v29 = objc_msgSend((id)objc_opt_self(UIColor), *v27);
  objc_msgSend(v25, "setTintColor:", v29);

  v30 = objc_msgSend(v25, "superview");
  if (v30)
  {
    v31 = v30;
    objc_msgSend(v25, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v32 = objc_msgSend(v25, "topAnchor");
    v33 = objc_msgSend(v31, "topAnchor");
    v34 = objc_msgSend(v32, "constraintEqualToAnchor:", v33);

    objc_msgSend(v34, "setConstant:", 0.0);
    if (v34)
    {
      v35 = v34;
      objc_msgSend(v35, "setActive:", 1);

    }
  }
  v36 = objc_msgSend(v25, "superview", v54, v55);
  if (v36)
  {
    v37 = v36;
    objc_msgSend(v25, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v38 = objc_msgSend(v25, "bottomAnchor");
    v39 = objc_msgSend(v37, "bottomAnchor");
    v40 = objc_msgSend(v38, "constraintEqualToAnchor:", v39);

    if (v40)
    {
      objc_msgSend(v40, "setConstant:", -0.0);
      v41 = v40;
      objc_msgSend(v41, "setActive:", 1);

    }
  }
  v42 = objc_msgSend(v25, "superview");
  if (v42)
  {
    v43 = v42;
    objc_msgSend(v25, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v44 = objc_msgSend(v25, "leadingAnchor");
    v45 = objc_msgSend(v43, "leadingAnchor");
    v46 = objc_msgSend(v44, "constraintEqualToAnchor:", v45);

    objc_msgSend(v46, "setConstant:", 20.0);
    if (v46)
    {
      v47 = v46;
      objc_msgSend(v47, "setActive:", 1);

    }
  }
  v48 = objc_msgSend(v25, "superview");
  if (v48)
  {
    v49 = v48;
    objc_msgSend(v25, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v50 = objc_msgSend(v25, "trailingAnchor");
    v51 = objc_msgSend(v49, "trailingAnchor");
    v52 = objc_msgSend(v50, "constraintEqualToAnchor:", v51);

    objc_msgSend(v52, "setConstant:", -20.0);
    if (v52)
    {
      v53 = v52;
      objc_msgSend(v53, "setActive:", 1);

    }
  }
  TipUIView.imageSize.setter(50.0, 50.0);

}

uint64_t outlined init with take of MOSuggestionPrivacyTip?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionPrivacyTip?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined consume of MOSuggestionPrivacyTip?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MOSuggestionPrivacyTip and conformance MOSuggestionPrivacyTip()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MOSuggestionPrivacyTip and conformance MOSuggestionPrivacyTip;
  if (!lazy protocol witness table cache variable for type MOSuggestionPrivacyTip and conformance MOSuggestionPrivacyTip)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MOSuggestionPrivacyTip, &type metadata for MOSuggestionPrivacyTip);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionPrivacyTip and conformance MOSuggestionPrivacyTip);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MOSuggestionPrivacyTip and conformance MOSuggestionPrivacyTip;
  if (!lazy protocol witness table cache variable for type MOSuggestionPrivacyTip and conformance MOSuggestionPrivacyTip)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MOSuggestionPrivacyTip, &type metadata for MOSuggestionPrivacyTip);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionPrivacyTip and conformance MOSuggestionPrivacyTip);
  }
  return result;
}

uint64_t sub_100078324()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 49, 7);
}

uint64_t sub_100078350()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void __swiftcall MOSuggestionPrivacyTip.init(clientId:clientName:wasAvailable:)(MomentsUIService::MOSuggestionPrivacyTip *__return_ptr retstr, Swift::String clientId, Swift::String_optional clientName, Swift::Bool wasAvailable)
{
  retstr->clientId = clientId;
  retstr->clientName = clientName;
  retstr->wasAvailable = wasAvailable;
}

void closure #1 in MOSuggestionPrivacyTipCell.setUpTip()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (_QWORD *)Strong;
    v6 = Tips.Action.id.getter();
    v7 = v5;
    if (v6 == 0x6F6D2D6E7261656CLL && v5 == 0xEA00000000006572)
    {
      v8 = swift_bridgeObjectRelease(0xEA00000000006572);
    }
    else
    {
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F6D2D6E7261656CLL, 0xEA00000000006572, v6, v5, 0);
      v8 = swift_bridgeObjectRelease(v7);
      if ((v9 & 1) == 0)
      {
LABEL_8:

        return;
      }
    }
    v10 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v4) + 0x80))(v8);
    if (v10)
    {
      v11 = v10;
      v12 = (void (*)(uint64_t))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 120))(v10);
      v14 = v13;
      v15 = swift_release(v11);
      v12(v15);

      swift_release(v14);
      return;
    }
    goto LABEL_8;
  }
}

void partial apply for closure #1 in MOSuggestionPrivacyTipCell.setUpTip()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in MOSuggestionPrivacyTipCell.setUpTip()(a1, v1);
}

id MOSuggestionPrivacyTipCell.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionPrivacyTipCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t MOSuggestionPrivacyTip.id.getter()
{
  Swift::String *v0;

  String.append(_:)(*v0);
  return 0xD00000000000001ALL;
}

uint64_t MOSuggestionPrivacyTip.title.getter()
{
  return specialized MOSuggestionPrivacyTip.title.getter();
}

uint64_t MOSuggestionPrivacyTip.message.getter()
{
  uint64_t v0;

  return specialized MOSuggestionPrivacyTip.message.getter(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t MOSuggestionPrivacyTip.image.getter()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id v2;

  v0 = type metadata accessor for MOSuggestionSheetOnboardingTipCell();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  return Image.init(_:bundle:)(0xD000000000000019, 0x80000001001A6210, v2);
}

uint64_t one-time initialization function for $showPrivacyOnboarding()
{
  uint64_t v0;
  id v1;
  unsigned __int8 v2;
  unsigned __int8 v4;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  __swift_allocate_value_buffer(v0, static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
  __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
  v1 = objc_msgSend((id)objc_opt_self(MOOnboardingManager), "sharedInstance");
  v2 = objc_msgSend(v1, "isOnboarded");

  v4 = v2;
  return Tips.Parameter.init<A>(_:_:_:_:)(&type metadata for MOSuggestionPrivacyTip, 0xD000000000000016, 0x80000001001A9420, &v4, _swiftEmptyArrayStorage, &type metadata for Bool, &type metadata for MOSuggestionPrivacyTip, &protocol witness table for Bool, &protocol witness table for Bool);
}

uint64_t MOSuggestionPrivacyTip.$showPrivacyOnboarding.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for $showPrivacyOnboarding != -1)
    swift_once(&one-time initialization token for $showPrivacyOnboarding, one-time initialization function for $showPrivacyOnboarding);
  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  return __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
}

uint64_t static MOSuggestionPrivacyTip.$showPrivacyOnboarding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  _BYTE v6[24];

  if (one-time initialization token for $showPrivacyOnboarding != -1)
    swift_once(&one-time initialization token for $showPrivacyOnboarding, one-time initialization function for $showPrivacyOnboarding);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
  v4 = swift_beginAccess(v3, v6, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2, v4);
}

uint64_t static MOSuggestionPrivacyTip.$showPrivacyOnboarding.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _BYTE v7[24];

  if (one-time initialization token for $showPrivacyOnboarding != -1)
    swift_once(&one-time initialization token for $showPrivacyOnboarding, one-time initialization function for $showPrivacyOnboarding);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
  v4 = swift_beginAccess(v3, v7, 33, 0);
  v5 = *(_QWORD *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v5 + 24))(v3, a1, v2, v4);
  swift_endAccess(v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v2);
}

uint64_t (*static MOSuggestionPrivacyTip.$showPrivacyOnboarding.modify(uint64_t a1))()
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for $showPrivacyOnboarding != -1)
    swift_once(&one-time initialization token for $showPrivacyOnboarding, one-time initialization function for $showPrivacyOnboarding);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
  swift_beginAccess(v3, a1, 33, 0);
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

uint64_t static MOSuggestionPrivacyTip.showPrivacyOnboarding.getter()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  _QWORD v5[3];

  if (one-time initialization token for $showPrivacyOnboarding != -1)
    swift_once(&one-time initialization token for $showPrivacyOnboarding, one-time initialization function for $showPrivacyOnboarding);
  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
  v2 = swift_beginAccess(v1, (char *)v5 + 1, 32, 0);
  Tips.Parameter.wrappedValue.getter(v5, v0, v2);
  v3 = LOBYTE(v5[0]);
  swift_endAccess((char *)v5 + 1);
  return v3;
}

uint64_t static MOSuggestionPrivacyTip.showPrivacyOnboarding.setter(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[31];
  char v6;

  if (one-time initialization token for $showPrivacyOnboarding != -1)
    swift_once(&one-time initialization token for $showPrivacyOnboarding, one-time initialization function for $showPrivacyOnboarding);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
  v6 = a1 & 1;
  swift_beginAccess(v3, v5, 33, 0);
  Tips.Parameter.wrappedValue.setter(&v6, v2);
  return swift_endAccess(v5);
}

void (*static MOSuggestionPrivacyTip.showPrivacyOnboarding.modify(_QWORD *a1))(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  char v6;

  v2 = malloc(0x30uLL);
  *a1 = v2;
  if (one-time initialization token for $showPrivacyOnboarding != -1)
    swift_once(&one-time initialization token for $showPrivacyOnboarding, one-time initialization function for $showPrivacyOnboarding);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  v2[3] = v3;
  v4 = __swift_project_value_buffer(v3, (uint64_t)static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
  v2[4] = v4;
  v5 = swift_beginAccess(v4, v2, 32, 0);
  Tips.Parameter.wrappedValue.getter((_QWORD *)((char *)v2 + 41), v3, v5);
  v6 = *((_BYTE *)v2 + 41);
  swift_endAccess(v2);
  *((_BYTE *)v2 + 40) = v6;
  return static MOSuggestionOnboardingTip.showSuggestionsOnboarding.modify;
}

uint64_t MOSuggestionPrivacyTip.rules.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _BYTE v14[24];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v14[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Tips.Rule>);
  v5 = type metadata accessor for Tips.Rule(0);
  v6 = swift_allocObject(v4, ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v5 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) | 7);
  *(_OWORD *)(v6 + 16) = xmmword_10019ED20;
  if (one-time initialization token for $showPrivacyOnboarding != -1)
    swift_once(&one-time initialization token for $showPrivacyOnboarding, one-time initialization function for $showPrivacyOnboarding);
  v7 = __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
  v8 = swift_beginAccess(v7, v14, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v1 + 16))(v3, v7, v0, v8);
  Tips.Rule.init<A>(_:_:)(v3, closure #2 in MOSuggestionOnboardingTip.rules.getter, 0, &type metadata for Bool, &protocol witness table for Bool, &protocol witness table for Bool);
  v9 = static Tips.RuleBuilder.buildExpression(_:)(v6);
  v10 = swift_bridgeObjectRelease(v6);
  v11 = static Tips.RuleBuilder.buildPartialBlock(first:)(v9, v10);
  swift_bridgeObjectRelease(v9);
  return v11;
}

uint64_t MOSuggestionAssetMediaCoverArtQueryInput.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t MOSuggestionAssetMediaCoverArtQueryInput.albumTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t MOSuggestionAssetMediaCoverArtQueryInput.albumTitle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t MOSuggestionPrivacyTip.wasAvailable.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance MOSuggestionPrivacyTip(_QWORD *a1@<X8>)
{
  Swift::String *v1;

  String.append(_:)(*v1);
  *a1 = 0xD00000000000001ALL;
  a1[1] = 0x80000001001A92F0;
}

uint64_t key path setter for MOSuggestionPrivacyTipCellModel.presentPrivacyController : MOSuggestionPrivacyTipCellModel(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t (*)(), uint64_t, __n128);
  __n128 v7;

  v3 = *a1;
  v4 = a1[1];
  v5 = swift_allocObject(&unk_1001E6D80, 32, 7);
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = *(uint64_t (**)(uint64_t (*)(), uint64_t, __n128))(**(_QWORD **)a2 + 128);
  v7 = swift_retain(v4);
  return v6(partial apply for thunk for @escaping @callee_guaranteed () -> (@out ()), v5, v7);
}

uint64_t MOSuggestionPrivacyTipCellModel.clientId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
  return v1;
}

uint64_t MOSuggestionPrivacyTipCellModel.clientName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
  return v1;
}

uint64_t MOSuggestionPrivacyTipCellModel.tip.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t result;
  _BYTE v9[24];

  swift_beginAccess(v1 + 72, v9, 0, 0);
  v3 = *(_QWORD *)(v1 + 72);
  v4 = *(_QWORD *)(v1 + 80);
  v5 = *(_QWORD *)(v1 + 88);
  v6 = *(_QWORD *)(v1 + 96);
  v7 = *(_BYTE *)(v1 + 104);
  result = outlined copy of MOSuggestionPrivacyTip?(v3, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return result;
}

uint64_t MOSuggestionPrivacyTipCellModel.tip.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(v1 + 9, v8, 1, 0);
  v3 = v1[9];
  v4 = v1[10];
  v5 = v1[11];
  v6 = v1[12];
  outlined init with take of MOSuggestionPrivacyTip?(a1, (uint64_t)(v1 + 9));
  outlined retain of MOSuggestionPrivacyTip?(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of MOSuggestionPrivacyTip?);
  outlined consume of MOSuggestionPrivacyTip?(v3, v4, v5, v6);
  return outlined retain of MOSuggestionPrivacyTip?(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of MOSuggestionPrivacyTip?);
}

uint64_t (*MOSuggestionSheetAssetViewModel.assetVisualSubType.modify(uint64_t a1))()
{
  uint64_t v1;

  swift_beginAccess(v1 + 72, a1, 33, 0);
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionPrivacyTipCellModel.__allocating_init(publicUI:clientId:clientName:presentPrivacyController:tip:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[24];

  v17 = swift_allocObject(v8, 105, 7);
  *(_OWORD *)(v17 + 88) = 0u;
  *(_BYTE *)(v17 + 104) = 0;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_BYTE *)(v17 + 32) = a1;
  *(_QWORD *)(v17 + 40) = a2;
  *(_QWORD *)(v17 + 48) = a3;
  *(_QWORD *)(v17 + 56) = a4;
  *(_QWORD *)(v17 + 64) = a5;
  *(_QWORD *)(v17 + 16) = a6;
  *(_QWORD *)(v17 + 24) = a7;
  swift_beginAccess(v17 + 72, v23, 1, 0);
  v18 = *(_QWORD *)(v17 + 72);
  v19 = *(_QWORD *)(v17 + 80);
  v20 = *(_QWORD *)(v17 + 88);
  v21 = *(_QWORD *)(v17 + 96);
  outlined init with take of MOSuggestionPrivacyTip?(a8, v17 + 72);
  outlined consume of MOSuggestionPrivacyTip?(v18, v19, v20, v21);
  return v17;
}

uint64_t MOSuggestionPrivacyTipCellModel.init(publicUI:clientId:clientName:presentPrivacyController:tip:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];

  *(_BYTE *)(v8 + 104) = 0;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_BYTE *)(v8 + 32) = a1;
  *(_QWORD *)(v8 + 40) = a2;
  *(_QWORD *)(v8 + 48) = a3;
  *(_QWORD *)(v8 + 56) = a4;
  *(_QWORD *)(v8 + 64) = a5;
  *(_QWORD *)(v8 + 16) = a6;
  *(_QWORD *)(v8 + 24) = a7;
  swift_beginAccess(v8 + 72, v15, 1, 0);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = *(_QWORD *)(v8 + 80);
  v12 = *(_QWORD *)(v8 + 88);
  v13 = *(_QWORD *)(v8 + 96);
  outlined init with take of MOSuggestionPrivacyTip?(a8, v8 + 72);
  outlined consume of MOSuggestionPrivacyTip?(v10, v11, v12, v13);
  return v8;
}

_QWORD *MOSuggestionPrivacyTipCellModel.deinit()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  outlined consume of MOSuggestionPrivacyTip?(v0[9], v0[10], v0[11], v0[12]);
  return v0;
}

double MOSuggestionPrivacyTipCellModel.__deallocating_deinit()
{
  _QWORD *v0;
  double result;

  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  outlined consume of MOSuggestionPrivacyTip?(v0[9], v0[10], v0[11], v0[12]);
  *(_QWORD *)&result = swift_deallocClassInstance(v0, 105, 7).n128_u64[0];
  return result;
}

uint64_t specialized MOSuggestionPrivacyTip.title.getter()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  unint64_t v4;
  Swift::String v6;
  Swift::String v7;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v7._countAndFlagsBits = 0xD000000000000024;
  v7._object = (void *)0x80000001001A9580;
  v1._object = (void *)0x80000001001A9560;
  v1._countAndFlagsBits = 0xD00000000000001DLL;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v7);

  v6 = v3;
  v4 = lazy protocol witness table accessor for type String and conformance String();
  return Text.init<A>(_:)(&v6, &type metadata for String, v4);
}

uint64_t specialized MOSuggestionPrivacyTip.message.getter(unint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t countAndFlagsBits;
  void *v12;
  void *object;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  unint64_t v18;
  _QWORD v20[2];
  Swift::String v21;
  Swift::String v22;

  if (a2)
  {
    v4 = (void *)objc_opt_self(NSBundle);
    swift_bridgeObjectRetain(a2);
    v5 = objc_msgSend(v4, "mainBundle");
    v21._countAndFlagsBits = 0xD00000000000003DLL;
    v21._object = (void *)0x80000001001A9520;
    v6._object = (void *)0x80000001001A94D0;
    v6._countAndFlagsBits = 0x1000000000000046;
    v7._countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v21);

    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v10 = swift_allocObject(v9, 72, 7);
    *(_OWORD *)(v10 + 16) = xmmword_10019ED20;
    *(_QWORD *)(v10 + 56) = &type metadata for String;
    *(_QWORD *)(v10 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v10 + 32) = a1;
    *(_QWORD *)(v10 + 40) = a2;
    countAndFlagsBits = static String.localizedStringWithFormat(_:_:)(v8._countAndFlagsBits, v8._object, v10);
    object = v12;
    swift_bridgeObjectRelease(v8._object);
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    v14 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v15._countAndFlagsBits = 0xD000000000000046;
    v22._object = (void *)0x80000001001A9490;
    v15._object = (void *)0x80000001001A9440;
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    v22._countAndFlagsBits = 0xD000000000000038;
    v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)a1, (NSBundle)v14, v16, v22);
    countAndFlagsBits = v17._countAndFlagsBits;
    object = v17._object;

  }
  v20[0] = countAndFlagsBits;
  v20[1] = object;
  v18 = lazy protocol witness table accessor for type String and conformance String();
  return Text.init<A>(_:)(v20, &type metadata for String, v18);
}

_QWORD *specialized MOSuggestionPrivacyTip.actions.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  unint64_t v12;
  _QWORD *v13;
  Swift::String v15;
  Swift::String v16;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Tips.Action>);
  v1 = type metadata accessor for Tips.Action(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v0, v5 + v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_10019ED20;
  v7 = v6 + v5;
  v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v16._object = (void *)0x80000001001A9400;
  v9._countAndFlagsBits = 0x6F4D206E7261654CLL;
  v9._object = (void *)0xEA00000000006572;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v16._countAndFlagsBits = 0xD00000000000001FLL;
  v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v16);

  v15 = v11;
  v12 = lazy protocol witness table accessor for type String and conformance String();
  Tips.Action.init<A>(id:title:perform:)(0x6F6D2D6E7261656CLL, 0xEA00000000006572, &v15, MOSuggestionInterstitialExpandableListViewCellConstants.init(), 0, &type metadata for String, v12);
  v13 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay6TipKit4TipsO6ActionVGG_ALs5NeverOTgq505_sSi6f4Kit4h2O6i34VAEIgynr_Si6offset_AE7elementtAEs5J94OIegnrzr_TR03_s6a4Kit4c3O13D54BuilderV16buildFinalResultySayAC0D0VGAIFZAHSi_AHtXEfU_Tf3nnnpf_nTf1cn_n(v6);
  swift_setDeallocating(v6);
  swift_arrayDestroy(v7, *(_QWORD *)(v6 + 16), v1);
  swift_deallocClassInstance(v6, 32, 7);
  return v13;
}

uint64_t outlined copy of MOSuggestionPrivacyTip?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t outlined retain of MOSuggestionPrivacyTip?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

uint64_t sub_100079670@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x80))();
  *a2 = result;
  return result;
}

uint64_t sub_1000796B0(_QWORD *a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x88);
  v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t sub_1000796F0@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x98))();
  v5 = v4;
  result = swift_allocObject(&unk_1001E6DF8, 32, 7);
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  *a2 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  a2[1] = result;
  return result;
}

uint64_t sub_100079764@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 120))();
  v5 = v4;
  result = swift_allocObject(&unk_1001E6DA8, 32, 7);
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_1000797C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v4[5];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)a1 + 144))(v4);
  return outlined init with take of MOSuggestionPrivacyTip?((uint64_t)v4, a2);
}

uint64_t sub_10007980C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(_BYTE *);
  _BYTE v5[40];

  outlined init with take of MOSuggestionPrivacyTip?(a1, (uint64_t)v5);
  v3 = *(uint64_t (**)(_BYTE *))(**(_QWORD **)a2 + 152);
  outlined retain of MOSuggestionPrivacyTip?((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of MOSuggestionPrivacyTip?);
  return v3(v5);
}

uint64_t destroy for MOSuggestionPrivacyTip(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for MOSuggestionPrivacyTip(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for MOSuggestionPrivacyTip(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MOSuggestionPrivacyTip(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MOSuggestionPrivacyTip(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MOSuggestionPrivacyTip(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MOSuggestionPrivacyTip()
{
  return &type metadata for MOSuggestionPrivacyTip;
}

uint64_t type metadata accessor for MOSuggestionPrivacyTipCellModel()
{
  return objc_opt_self(_TtC16MomentsUIService31MOSuggestionPrivacyTipCellModel);
}

uint64_t sub_100079A58()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void MOSuggestionInterstitialListAssetViewModel.__allocating_init(workoutGroupAsset:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t ObjCClassMetadata;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  id v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(char *, uint64_t, uint64_t);
  unint64_t v71;
  char *v72;
  void (*v73)(char *, unint64_t, uint64_t);
  uint64_t v74;
  void (*v75)(uint64_t, char *, uint64_t);
  uint64_t v76;
  void *v77;
  id v78;
  id v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, unint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  void (*v110)(char *, unint64_t, uint64_t);
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t);
  unint64_t v120;
  unint64_t v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t *v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  __int128 v155;
  __int128 v156;
  _QWORD *v157;
  _QWORD *v158;
  void (*v159)(char *, char *, uint64_t);
  void (*v160)(char *, unint64_t, uint64_t);
  void (*v161)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void (**v166)(char *, unint64_t, uint64_t);
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  char v178[8];
  char v179[8];
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  char v188;

  v172 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  v171 = *(_QWORD *)(v172 - 8);
  v2 = __chkstk_darwin(v172);
  v174 = (uint64_t)&v147 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v175 = (char *)&v147 - v4;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v6 = __chkstk_darwin(v5);
  v176 = (char *)&v147 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v147 - v8;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v147 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v147 - v15;
  v17 = objc_msgSend(a1, "assetType");
  v18 = MOSuggestionAssetsTypeWorkoutGroup;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v21 = v20;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  if (v19 == v22 && v21 == v23)
  {

    swift_bridgeObjectRelease_n(v21, 2);
  }
  else
  {
    v25 = v23;
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v22, v23, 0);

    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v25);
    if ((v26 & 1) == 0)
    {
LABEL_17:
      if (serverManager._clientConnections != (NSMutableDictionary *)-1)
        swift_once(&serverManager._clientConnections, one-time initialization function for shared);
      v40 = type metadata accessor for Logger(0);
      v41 = __swift_project_value_buffer(v40, (uint64_t)static MOAngelLogger.shared);
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v44 = 0;
        v45 = "[MOSuggestionInterstitialListAssetViewModel.workoutGroupAsset] Mismatched init for asset type";
        goto LABEL_30;
      }
      goto LABEL_31;
    }
  }
  ObjCClassMetadata = swift_getObjCClassMetadata(objc_msgSend(a1, "contentClassType"));
  if (ObjCClassMetadata == type metadata accessor for MOSuggestionGenericFallBackInfo())
    goto LABEL_17;
  v184 = (unint64_t)_swiftEmptyArrayStorage;
  v185 = (uint64_t)_swiftEmptyArrayStorage;
  v28 = objc_msgSend(a1, "metadata");
  v29 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v28, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v29);
  v31 = v30;
  swift_bridgeObjectRelease(v29);
  if (!v31)
  {
LABEL_25:
    swift_bridgeObjectRelease_n(_swiftEmptyArrayStorage, 2);
    goto LABEL_26;
  }
  if (!*(_QWORD *)(v31 + 16))
  {
    v186 = 0u;
    v187 = 0u;
    goto LABEL_23;
  }
  v32 = MOSuggestionAssetMetadataKeyWorkoutGroupStartDates;
  v33 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
  if ((v34 & 1) == 0)
  {
    v186 = 0u;
    v187 = 0u;

    goto LABEL_23;
  }
  outlined init with copy of Any(*(_QWORD *)(v31 + 56) + 32 * v33, (uint64_t)&v186);

  if (!*((_QWORD *)&v187 + 1))
  {
LABEL_23:
    v46 = v31;
LABEL_24:
    swift_bridgeObjectRelease(v46);
    outlined destroy of Any?((uint64_t)&v186, &demangling cache variable for type metadata for Any?);
    goto LABEL_25;
  }
  v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Date]);
  if ((swift_dynamicCast(&v182, &v186, (char *)&type metadata for Any + 8, v35, 6) & 1) == 0)
  {
LABEL_42:
    v54 = v31;
LABEL_43:
    swift_bridgeObjectRelease(v54);
    goto LABEL_25;
  }
  v36 = v182;
  if (!*(_QWORD *)(v31 + 16))
  {
    v186 = 0u;
    v187 = 0u;
LABEL_39:
    swift_bridgeObjectRelease(v36);
    goto LABEL_23;
  }
  v170 = v182;
  v37 = MOSuggestionAssetMetadataKeyWorkoutGroupEndDates;
  v38 = specialized __RawDictionaryStorage.find<A>(_:)(v37);
  if ((v39 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v31 + 56) + 32 * v38, (uint64_t)&v186);
  }
  else
  {
    v186 = 0u;
    v187 = 0u;
  }

  v36 = v170;
  if (!*((_QWORD *)&v187 + 1))
    goto LABEL_39;
  if ((swift_dynamicCast(&v182, &v186, (char *)&type metadata for Any + 8, v35, 6) & 1) == 0)
  {
    v53 = v36;
LABEL_41:
    swift_bridgeObjectRelease(v53);
    goto LABEL_42;
  }
  v49 = v182;
  if (!*(_QWORD *)(v31 + 16))
  {
    v186 = 0u;
    v187 = 0u;
LABEL_51:
    swift_bridgeObjectRelease(v49);
    swift_bridgeObjectRelease(v170);
    goto LABEL_23;
  }
  v169 = v182;
  v50 = MOSuggestionAssetMetadataKeyWorkoutGroupTypes;
  v51 = specialized __RawDictionaryStorage.find<A>(_:)(v50);
  if ((v52 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v31 + 56) + 32 * v51, (uint64_t)&v186);
  }
  else
  {
    v186 = 0u;
    v187 = 0u;
  }

  v49 = v169;
  if (!*((_QWORD *)&v187 + 1))
    goto LABEL_51;
  v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast(&v182, &v186, (char *)&type metadata for Any + 8, v55, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v49);
    v53 = v170;
    goto LABEL_41;
  }
  v168 = v182;
  if (*(_QWORD *)(v31 + 16))
  {
    v56 = MOSuggestionAssetMetadataKeyWorkoutGroupIcons;
    v57 = specialized __RawDictionaryStorage.find<A>(_:)(v56);
    if ((v58 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v31 + 56) + 32 * v57, (uint64_t)&v186);
    }
    else
    {
      v186 = 0u;
      v187 = 0u;
    }

    v49 = v169;
  }
  else
  {
    v186 = 0u;
    v187 = 0u;
  }
  swift_bridgeObjectRelease(v31);
  if (!*((_QWORD *)&v187 + 1))
  {
    swift_bridgeObjectRelease(v168);
    swift_bridgeObjectRelease(v49);
    v46 = v170;
    goto LABEL_24;
  }
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UIImage]);
  if ((swift_dynamicCast(&v182, &v186, (char *)&type metadata for Any + 8, v59, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v168);
    swift_bridgeObjectRelease(v49);
    v54 = v170;
    goto LABEL_43;
  }
  v60 = v182;
  v61 = v170;
  v62 = *(_QWORD *)(v170 + 16);
  if (v62 != *(_QWORD *)(v49 + 16))
  {
    swift_bridgeObjectRelease_n(_swiftEmptyArrayStorage, 2);
    swift_bridgeObjectRelease(v60);
    swift_bridgeObjectRelease(v168);
    swift_bridgeObjectRelease(v49);
    v120 = v61;
    goto LABEL_115;
  }
  if (v62 != *(_QWORD *)(v168 + 16))
  {
    swift_bridgeObjectRelease_n(_swiftEmptyArrayStorage, 2);
    swift_bridgeObjectRelease(v60);
    swift_bridgeObjectRelease(v168);
    v121 = v49;
    goto LABEL_114;
  }
  if (v182 >> 62)
    goto LABEL_108;
  if (v62 != *(_QWORD *)((v182 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_113;
  while (2)
  {
    v165 = v60;
    v164 = v62;
    if (!v62)
    {
      swift_bridgeObjectRelease(v170);
      v158 = _swiftEmptyArrayStorage;
      v157 = _swiftEmptyArrayStorage;
LABEL_102:
      swift_bridgeObjectRelease(v165);
      swift_bridgeObjectRelease(v168);
      swift_bridgeObjectRelease(v169);
      v122 = objc_msgSend(a1, "identifier");
      v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
      v125 = v124;

      v182 = v123;
      v183 = v125;
      v180 = 35;
      v181 = 0xE100000000000000;
      v126 = lazy protocol witness table accessor for type String and conformance String();
      v127 = &v182;
      v128 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v180, &type metadata for String, &type metadata for String, v126, v126);
      if (v128[2])
      {
        v129 = v128;
        v130 = v128[4];
        v131 = v128[5];
        swift_bridgeObjectRetain(v131);
        swift_bridgeObjectRelease(v125);
        swift_bridgeObjectRelease(v129);
        v127 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))(v173 + 344))(v130, v131, 0, 0, 0, 0, 0, 0, 266);
        swift_retain(v127);
        v132 = MOSuggestionInterstitialListAssetViewModel._groupAssetTypeAndCountDescription(with:)(0);
        v134 = v133;
        swift_beginAccess(v127 + 3, &v182, 1, 0);
        v135 = v127[4];
        v127[3] = v132;
        v127[4] = v134;
        swift_bridgeObjectRelease(v135);
        swift_beginAccess(v127 + 6, &v180, 1, 0);
        v136 = v127[6];
        v127[6] = (unint64_t)v157;
        swift_bridgeObjectRelease(v136);
        v137 = v184;
        swift_beginAccess(v127 + 7, v179, 1, 0);
        v138 = v127[7];
        v127[7] = v137;
        swift_bridgeObjectRelease(v138);
        swift_beginAccess(v127 + 5, v178, 1, 0);
        v139 = v127[5];
        v127[5] = (unint64_t)v158;
        swift_bridgeObjectRelease(v139);
        v123 = v185;
        if ((v185 & 0x8000000000000000) == 0 && (v185 & 0x4000000000000000) == 0)
        {
          v140 = v185 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v185);
LABEL_106:
          v177 = v140;
          specialized MutableCollection<>.sort(by:)(&v177);
          swift_bridgeObjectRelease(v123);

          v141 = v177;
          swift_beginAccess(v127 + 2, &v177, 1, 0);
          v142 = v127[2];
          v127[2] = v141;
          swift_release(v127);
          swift_bridgeObjectRelease(v142);
          return;
        }
      }
      else
      {
        __break(1u);
      }
      v146 = swift_bridgeObjectRetain(v123);
      v140 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v146);
      swift_bridgeObjectRelease(v123);
      goto LABEL_106;
    }
    if (v164 < 1)
    {
      __break(1u);
LABEL_119:
      __break(1u);
      swift_release(v177);
      __break(1u);
      return;
    }
    v63 = 0;
    v62 = v170;
    v163 = *(_QWORD *)(v170 + 16);
    v64 = v165;
    v162 = v165 & 0xC000000000000001;
    v60 = v168 + 40;
    v156 = xmmword_10019ED20;
    v155 = xmmword_10019EDA0;
    v158 = _swiftEmptyArrayStorage;
    v157 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (v162)
        v65 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v63, v64);
      else
        v65 = *(id *)(v64 + 8 * v63 + 32);
      v166 = (void (**)(char *, unint64_t, uint64_t))v60;
      v167 = v63;
      if (v63 >= v163)
      {
        v66 = v65;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
LABEL_89:

        v118 = (uint64_t)v9;
        goto LABEL_90;
      }
      if (v63 >= *(_QWORD *)(v62 + 16))
        break;
      v66 = v65;
      v67 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      v68 = v62 + v67;
      v69 = *(_QWORD *)(v11 + 72) * v63;
      v160 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
      v160(v9, v68 + v69, v10);
      v161 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v161(v9, 0, 1, v10);
      v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
      if (v70(v9, 1, v10) == 1)
        goto LABEL_89;
      v159 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v159(v16, v9, v10);
      if (v167 >= *(_QWORD *)(v169 + 16))
      {
        v72 = v176;
        v161(v176, 1, 1, v10);
      }
      else
      {
        v71 = v169 + v67 + v69;
        v72 = v176;
        v160(v176, v71, v10);
        v161(v72, 0, 1, v10);
        if (v70(v72, 1, v10) != 1)
        {
          v159(v14, v72, v10);
          if (v167 >= *(_QWORD *)(v168 + 16))
          {

          }
          else
          {
            v73 = *v166;
            v159 = (void (*)(char *, char *, uint64_t))*(v166 - 1);
            v74 = (uint64_t)v175;
            v75 = (void (*)(uint64_t, char *, uint64_t))v160;
            v160(v175, (unint64_t)v16, v10);
            v76 = v74 + *(int *)(v172 + 20);
            v75(v76, v14, v10);
            v161((char *)v76, 0, 1, v10);
            v77 = (void *)objc_opt_self(UIColor);
            v160 = v73;
            swift_bridgeObjectRetain(v73);
            v78 = v66;
            v79 = objc_msgSend(v77, "blackColor");
            v186 = 0u;
            v187 = 0u;
            v188 = 1;
            v80 = type metadata accessor for MOSuggestionSheetImage();
            swift_allocObject(v80, 105, 7);
            v154 = v78;
            v161 = (void (*)(char *, uint64_t, uint64_t, uint64_t))MOSuggestionSheetImage.init(image:associatedTintColor:associatedBackgroundColor:tileBackgroundColor:shouldBeRounded:squareCrop:extraMargin:)((uint64_t)v78, 0, 0, v79, 1, (uint64_t)&v186, 0, 1);
            v81 = objc_msgSend(a1, "identifier");
            v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
            v84 = v83;

            v182 = v82;
            v183 = v84;
            v180 = 35;
            v181 = 0xE100000000000000;
            v85 = lazy protocol witness table accessor for type String and conformance String();
            v86 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v180, &type metadata for String, &type metadata for String, v85, v85);
            if (!v86[2])
              goto LABEL_119;
            v87 = v86;
            v89 = v86[4];
            v88 = v86[5];
            v151 = v89;
            v150 = v88;
            swift_bridgeObjectRetain(v88);
            swift_bridgeObjectRelease(v84);
            swift_bridgeObjectRelease(v87);
            v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionSheetAssetDateRange>);
            v91 = *(unsigned __int8 *)(v171 + 80);
            v92 = (v91 + 32) & ~v91;
            v153 = *(_QWORD *)(v171 + 72);
            v93 = swift_allocObject(v90, v92 + v153, v91 | 7);
            v149 = v93;
            *(_OWORD *)(v93 + 16) = v156;
            v152 = v92;
            outlined init with copy of MOSuggestionSheetAssetDateRange((uint64_t)v175, v93 + v92);
            v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
            v95 = swift_allocObject(v94, 48, 7);
            *(_OWORD *)(v95 + 16) = v156;
            v96 = v160;
            *(_QWORD *)(v95 + 32) = v159;
            *(_QWORD *)(v95 + 40) = v96;
            v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
            v98 = swift_allocObject(v97, 40, 7);
            *(_OWORD *)(v98 + 16) = v155;
            v99 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v161;
            *(_QWORD *)(v98 + 32) = v161;
            v182 = v98;
            specialized Array._endMutation()(v98);
            v148 = v182;
            v100 = type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
            swift_allocObject(v100, *(unsigned int *)(v100 + 48), *(unsigned __int16 *)(v100 + 52));
            swift_bridgeObjectRetain(v96);
            swift_retain((void (*)(char *, uint64_t, uint64_t, uint64_t))v99);
            v101 = MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(v151, v150, 0, 0, 0, v149, v95, v148, 7, 1, 0, 0);
            *(_BYTE *)(v101 + 90) = 0;
            swift_retain(v101);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v102);
            v104 = *(_QWORD *)((v185 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v103 = *(_QWORD *)((v185 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v104 >= v103 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v103 > 1, v104 + 1, 1);
            v105 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v104, v101);
            specialized Array._endMutation()(v105);
            if ((swift_isUniquelyReferenced_nonNull_native(v157) & 1) == 0)
              v157 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v157[2] + 1, 1, v157);
            v107 = v157[2];
            v106 = v157[3];
            if (v107 >= v106 >> 1)
              v157 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v106 > 1), v107 + 1, 1, v157);
            v108 = v157;
            v157[2] = v107 + 1;
            v109 = &v108[2 * v107];
            v110 = v160;
            v109[4] = v159;
            v109[5] = v110;
            swift_retain(v161);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v111);
            v113 = *(_QWORD *)((v184 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v112 = *(_QWORD *)((v184 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v113 >= v112 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v112 > 1, v113 + 1, 1);
            v114 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v113, v161);
            specialized Array._endMutation()(v114);
            outlined init with copy of MOSuggestionSheetAssetDateRange((uint64_t)v175, v174);
            if ((swift_isUniquelyReferenced_nonNull_native(v158) & 1) == 0)
              v158 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v158[2] + 1, 1, (unint64_t)v158);
            v116 = v158[2];
            v115 = v158[3];
            if (v116 >= v115 >> 1)
              v158 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v115 > 1, v116 + 1, 1, (unint64_t)v158);
            v117 = v158;
            v158[2] = v116 + 1;
            outlined init with take of MOSuggestionSheetAssetDateRange(v174, (uint64_t)v117 + v152 + v116 * v153);

            swift_release(v161);
            swift_release(v101);
            outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v175);
          }
          v119 = *(void (**)(char *, uint64_t))(v11 + 8);
          v119(v14, v10);
          v119(v16, v10);
          goto LABEL_91;
        }
      }
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);

      v118 = (uint64_t)v72;
LABEL_90:
      outlined destroy of Any?(v118, (uint64_t *)&demangling cache variable for type metadata for Date?);
LABEL_91:
      v62 = v170;
      v63 = v167 + 1;
      v60 = (uint64_t)(v166 + 2);
      v64 = v165;
      if (v164 == v167 + 1)
      {
        swift_bridgeObjectRelease(v170);
        goto LABEL_102;
      }
    }
    __break(1u);
LABEL_108:
    v143 = v62;
    if (v60 < 0)
      v144 = v60;
    else
      v144 = v60 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v60);
    v145 = _CocoaArrayWrapper.endIndex.getter(v144);
    swift_bridgeObjectRelease(v60);
    if (v143 == v145)
    {
      swift_bridgeObjectRetain(v60);
      v62 = _CocoaArrayWrapper.endIndex.getter(v144);
      swift_bridgeObjectRelease(v60);
      continue;
    }
    break;
  }
LABEL_113:
  swift_bridgeObjectRelease_n(_swiftEmptyArrayStorage, 2);
  swift_bridgeObjectRelease(v60);
  swift_bridgeObjectRelease(v168);
  v121 = v169;
LABEL_114:
  swift_bridgeObjectRelease(v121);
  v120 = v170;
LABEL_115:
  swift_bridgeObjectRelease(v120);
LABEL_26:
  if (serverManager._clientConnections != (NSMutableDictionary *)-1)
    swift_once(&serverManager._clientConnections, one-time initialization function for shared);
  v47 = type metadata accessor for Logger(0);
  v48 = __swift_project_value_buffer(v47, (uint64_t)static MOAngelLogger.shared);
  v42 = Logger.logObject.getter(v48);
  v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    v45 = "[MOSuggestionInterstitialListAssetViewModel.workoutGroupAsset] Failed to unwrap metadata";
LABEL_30:
    _os_log_impl((void *)&_mh_execute_header, v42, v43, v45, v44, 2u);
    swift_slowDealloc(v44, -1, -1);
  }
LABEL_31:

}

unint64_t MOSuggestionCollectionViewCellViewModel.fetchListAssetsWithPlaceHolderSingleResult(previewOnly:previewMax:typeSorted:completion:)(Swift::Bool a1, Swift::Int a2, Swift::Bool typeSorted, uint64_t a4, int64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t (*v60)(__n128);
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __n128 v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __n128 v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  os_log_type_t v136;
  uint8_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  NSObject *v148;
  os_log_type_t v149;
  uint8_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _BYTE v162[24];
  uint64_t v163;

  v6 = v5;
  result = (unint64_t)MOSuggestionCollectionViewCellViewModel.prioritizedAssetReferences(previewOnly:previewMax:style:typeSorted:)(a1, a2, MomentsUIService_SuggestionCellStyle_list, typeSorted);
  if (!result)
    return result;
  v160 = result;
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1)
    goto LABEL_110;
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  __swift_project_value_buffer(v9, (uint64_t)static MOAngelLogger.assets);
  v10 = swift_bridgeObjectRetain_n(v160, 2);
  i = Logger.logObject.getter(v10);
  LOBYTE(v12) = static os_log_type_t.debug.getter();
  v13 = (unint64_t)v160 >> 62;
  if (os_log_type_enabled((os_log_t)i, (os_log_type_t)v12))
  {
    v14 = swift_slowAlloc(12, -1);
    *(_DWORD *)v14 = 134217984;
    v15 = v160 & 0xFFFFFFFFFFFFFF8;
    if (!v13)
    {
      v16 = *(_QWORD *)((v160 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_6;
    }
    goto LABEL_170;
  }

  swift_bridgeObjectRelease_n(v160, 2);
  for (i = v160; ; i = v160)
  {
    v154 = a5;
    v155 = v6;
    v161 = _swiftEmptyArrayStorage;
    v14 = i & 0xFFFFFFFFFFFFFF8;
    if (v13)
    {
      if (i >= 0)
        v12 = i & 0xFFFFFFFFFFFFFF8;
      else
        v12 = i;
      swift_bridgeObjectRetain(i);
      v17 = _CocoaArrayWrapper.endIndex.getter(v12);
      if (v17)
      {
LABEL_10:
        if (v17 >= 1)
        {
          v159 = i & 0xFFFFFFFFFFFFFF8;
          v18 = 0;
          a5 = i & 0xC000000000000001;
          while (1)
          {
            if (a5)
            {
              v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(v18, i);
            }
            else
            {
              v22 = *(_QWORD *)(i + 8 * v18 + 32);
              v23 = swift_retain(v22);
            }
            v24 = (void *)(*(uint64_t (**)(__n128))(*(_QWORD *)v22 + 120))(v23);
            v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeLivePhoto);
            v27 = v26;
            v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
            if (v25 == v28 && v27 == v29)
              break;
            v31 = v29;
            v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, v28, v29, 0);
            swift_bridgeObjectRelease(v27);
            swift_bridgeObjectRelease(v31);
            if ((v32 & 1) != 0)
              goto LABEL_31;
            v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypePhoto);
            v27 = v34;
            v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
            if (v33 == v35 && v27 == v36)
              break;
            v38 = v36;
            v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v27, v35, v36, 0);
            swift_bridgeObjectRelease(v27);
            swift_bridgeObjectRelease(v38);
            if ((v39 & 1) != 0)
              goto LABEL_31;
            v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeVideo);
            v27 = v41;
            v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
            v44 = v42;
            if (v40 == v43 && v27 == v42)
              break;
            v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v27, v43, v42, 0);
            swift_bridgeObjectRelease(v27);
            swift_bridgeObjectRelease(v44);
            v45 = v24;
            if ((v56 & 1) != 0)
              goto LABEL_31;
LABEL_32:
            v46 = v45;

            v47 = MOSuggestionAssetsTypePhoto;
            v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
            v50 = v49;
            v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
            if (v48 == v51 && v50 == v52)
            {

              v19 = swift_bridgeObjectRelease_n(v50, 2);
            }
            else
            {
              v54 = v52;
              v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v50, v51, v52, 0);

              swift_bridgeObjectRelease(v50);
              v19 = swift_bridgeObjectRelease(v54);
              if ((v55 & 1) == 0)
              {
                swift_release(v22);
                goto LABEL_14;
              }
            }
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v19);
            v20 = v161[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
            v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v22);
            specialized ContiguousArray._endMutation()(v21);
LABEL_14:
            i = v160;
            if (v17 == ++v18)
            {
              swift_bridgeObjectRelease(v160);
              v153 = (uint64_t)v161;
              v161 = _swiftEmptyArrayStorage;
              swift_bridgeObjectRetain(v160);
              v57 = 0;
              while (1)
              {
                if (a5)
                {
                  v58 = specialized _ArrayBuffer._getElementSlowPath(_:)(v57, i);
                }
                else
                {
                  v58 = *(_QWORD *)(i + 8 * v57 + 32);
                  v59 = swift_retain(v58);
                }
                v60 = *(uint64_t (**)(__n128))(*(_QWORD *)v58 + 120);
                v61 = (void *)v60(v59);
                v62 = MOSuggestionAssetsTypeMotionActivity;
                v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
                v65 = v64;
                v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
                if (v63 == v66 && v65 == v67)
                  break;
                v69 = v67;
                v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v65, v66, v67, 0);

                swift_bridgeObjectRelease(v65);
                v71 = swift_bridgeObjectRelease(v69);
                if ((v70 & 1) != 0)
                  goto LABEL_56;
                v61 = (void *)((uint64_t (*)(uint64_t))v60)(v71);
                v72 = MOSuggestionAssetsTypeGenericMap;
                v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
                v65 = v74;
                v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
                if (v73 == v75 && v65 == v76)
                  break;
                v78 = v76;
                v79 = _stringCompareWithSmolCheck(_:_:expecting:)(v73, v65, v75, v76, 0);

                swift_bridgeObjectRelease(v65);
                v71 = swift_bridgeObjectRelease(v78);
                if ((v79 & 1) != 0)
                  goto LABEL_56;
                swift_release(v58);
LABEL_57:
                i = v160;
                if (v17 == ++v57)
                {
                  swift_bridgeObjectRelease(v160);
                  v157 = (uint64_t)v161;
                  v161 = _swiftEmptyArrayStorage;
                  swift_bridgeObjectRetain(v160);
                  v82 = 0;
                  while (1)
                  {
                    if (a5)
                    {
                      v86 = specialized _ArrayBuffer._getElementSlowPath(_:)(v82, i);
                    }
                    else
                    {
                      v86 = *(_QWORD *)(i + 8 * v82 + 32);
                      v87 = swift_retain(v86);
                    }
                    v88 = (void *)(*(uint64_t (**)(__n128))(*(_QWORD *)v86 + 120))(v87);
                    v89 = MOSuggestionAssetsTypeContactPhoto;
                    v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
                    v92 = v91;
                    v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
                    if (v90 == v93 && v92 == v94)
                    {

                      v83 = swift_bridgeObjectRelease_n(v92, 2);
                    }
                    else
                    {
                      v96 = v94;
                      v97 = _stringCompareWithSmolCheck(_:_:expecting:)(v90, v92, v93, v94, 0);

                      swift_bridgeObjectRelease(v92);
                      v83 = swift_bridgeObjectRelease(v96);
                      if ((v97 & 1) == 0)
                      {
                        swift_release(v86);
                        goto LABEL_61;
                      }
                    }
                    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v83);
                    v84 = v161[2];
                    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v84);
                    v85 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v84, v86);
                    specialized ContiguousArray._endMutation()(v85);
LABEL_61:
                    i = v160;
                    if (v17 == ++v82)
                    {
                      swift_bridgeObjectRelease(v160);
                      v156 = (uint64_t)v161;
                      v161 = _swiftEmptyArrayStorage;
                      swift_bridgeObjectRetain(v160);
                      v98 = 0;
                      while (1)
                      {
                        if (a5)
                        {
                          v102 = specialized _ArrayBuffer._getElementSlowPath(_:)(v98, i);
                        }
                        else
                        {
                          v102 = *(_QWORD *)(i + 8 * v98 + 32);
                          v103 = swift_retain(v102);
                        }
                        v104 = (void *)(*(uint64_t (**)(__n128))(*(_QWORD *)v102 + 120))(v103);
                        v105 = MOSuggestionAssetsTypeMediaCoverArt;
                        v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
                        v108 = v107;
                        v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v105);
                        if (v106 == v109 && v108 == v110)
                        {

                          v99 = swift_bridgeObjectRelease_n(v108, 2);
                        }
                        else
                        {
                          v112 = v110;
                          v113 = _stringCompareWithSmolCheck(_:_:expecting:)(v106, v108, v109, v110, 0);

                          swift_bridgeObjectRelease(v108);
                          v99 = swift_bridgeObjectRelease(v112);
                          if ((v113 & 1) == 0)
                          {
                            swift_release(v102);
                            goto LABEL_74;
                          }
                        }
                        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v99);
                        v100 = v161[2];
                        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v100);
                        v101 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v100, v102);
                        specialized ContiguousArray._endMutation()(v101);
LABEL_74:
                        i = v160;
                        if (v17 == ++v98)
                        {
                          swift_bridgeObjectRelease(v160);
                          v114 = (uint64_t)v161;
                          v161 = _swiftEmptyArrayStorage;
                          swift_bridgeObjectRetain(v160);
                          v115 = 0;
                          while (1)
                          {
                            if (a5)
                            {
                              v119 = specialized _ArrayBuffer._getElementSlowPath(_:)(v115, i);
                            }
                            else
                            {
                              v119 = *(_QWORD *)(i + 8 * v115 + 32);
                              v120 = swift_retain(v119);
                            }
                            v121 = (void *)(*(uint64_t (**)(__n128))(*(_QWORD *)v119 + 120))(v120);
                            v122 = MOSuggestionAssetsTypeStateOfMindAsset;
                            v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v121);
                            v124 = v123;
                            v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
                            if (v6 == v125 && v124 == v126)
                            {

                              v116 = swift_bridgeObjectRelease_n(v124, 2);
                            }
                            else
                            {
                              v128 = v126;
                              v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v124, v125, v126, 0);

                              swift_bridgeObjectRelease(v124);
                              v116 = swift_bridgeObjectRelease(v128);
                              if ((v6 & 1) == 0)
                              {
                                swift_release(v119);
                                goto LABEL_87;
                              }
                            }
                            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v116);
                            v117 = v161[2];
                            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v117);
                            v118 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v117, v119);
                            specialized ContiguousArray._endMutation()(v118);
LABEL_87:
                            i = v160;
                            if (v17 == ++v115)
                            {
                              swift_bridgeObjectRelease(v160);
                              v129 = 0;
                              v13 = (uint64_t)v161;
                              v161 = _swiftEmptyArrayStorage;
                              while (1)
                              {
                                if (a5)
                                {
                                  v130 = specialized _ArrayBuffer._getElementSlowPath(_:)(v129, i);
                                  v131 = v129 + 1;
                                  if (__OFADD__(v129, 1))
                                  {
LABEL_107:
                                    __break(1u);
LABEL_108:
                                    v14 = (uint64_t)v161;
                                    goto LABEL_116;
                                  }
                                }
                                else
                                {
                                  if (v129 >= *(_QWORD *)(v159 + 16))
                                  {
                                    __break(1u);
LABEL_110:
                                    swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
                                    goto LABEL_3;
                                  }
                                  v130 = *(_QWORD *)(i + 8 * v129 + 32);
                                  swift_retain(v130);
                                  v131 = v129 + 1;
                                  if (__OFADD__(v129, 1))
                                    goto LABEL_107;
                                }
                                v163 = v130;
                                v132 = closure #6 in MOSuggestionCollectionViewCellViewModel.fetchListAssetsWithPlaceHolderSingleResult(previewOnly:previewMax:typeSorted:completion:)((uint64_t)&v163);
                                if ((v132 & 1) != 0)
                                {
                                  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v132);
                                  v6 = v161[2];
                                  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
                                  v133 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v130);
                                  specialized ContiguousArray._endMutation()(v133);
                                  i = v160;
                                }
                                else
                                {
                                  swift_release(v130);
                                }
                                ++v129;
                                if (v131 == v17)
                                  goto LABEL_108;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }

              v71 = swift_bridgeObjectRelease_n(v65, 2);
LABEL_56:
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v71);
              v80 = v161[2];
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v80);
              v81 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v58);
              specialized ContiguousArray._endMutation()(v81);
              goto LABEL_57;
            }
          }
          swift_bridgeObjectRelease_n(v27, 2);
LABEL_31:
          v45 = (void *)MOSuggestionAssetsTypePhoto;
          goto LABEL_32;
        }
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
        goto LABEL_169;
      }
    }
    else
    {
      v17 = *(_QWORD *)((i & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(i);
      if (v17)
        goto LABEL_10;
    }
    swift_bridgeObjectRelease(i);
    v14 = (uint64_t)_swiftEmptyArrayStorage;
    v153 = (uint64_t)_swiftEmptyArrayStorage;
    v156 = (uint64_t)_swiftEmptyArrayStorage;
    v157 = (uint64_t)_swiftEmptyArrayStorage;
    v114 = (uint64_t)_swiftEmptyArrayStorage;
    v13 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_116:
    swift_bridgeObjectRelease(i);
    if (v14 < 0 || (v14 & 0x4000000000000000) != 0)
    {
      v140 = swift_bridgeObjectRetain(v14);
      a5 = _CocoaArrayWrapper.endIndex.getter(v140);
      swift_release(v14);
    }
    else
    {
      a5 = *(_QWORD *)(v14 + 16);
    }
    v163 = a5;
    if (v153 < 0 || (v153 & 0x4000000000000000) != 0)
      break;
    v134 = *(_QWORD *)(v153 + 16);
    if (v134 > 0)
      goto LABEL_122;
LABEL_130:
    swift_release(v153);
    v6 = a5;
    v138 = v154;
    i = v155;
    v139 = v157;
    if (v157 < 0)
      goto LABEL_136;
LABEL_131:
    if ((v139 & 0x4000000000000000) != 0)
      goto LABEL_136;
    if (*(uint64_t *)(v139 + 16) >= 1)
      goto LABEL_133;
LABEL_137:
    swift_release(v139);
    v143 = v156;
    if (v156 < 0)
      goto LABEL_143;
LABEL_138:
    if ((v143 & 0x4000000000000000) != 0)
      goto LABEL_143;
    if (*(uint64_t *)(v143 + 16) >= 1)
      goto LABEL_140;
LABEL_144:
    swift_release(v143);
    if (v114 < 0)
      goto LABEL_150;
LABEL_145:
    if ((v114 & 0x4000000000000000) != 0)
      goto LABEL_150;
    v12 = *(_QWORD *)(v114 + 16);
    if (v12 >= 1)
      goto LABEL_147;
LABEL_151:
    swift_release(v114);
    if (v13 < 0)
      goto LABEL_161;
LABEL_152:
    if ((v13 & 0x4000000000000000) != 0)
      goto LABEL_161;
    v12 = *(_QWORD *)(v13 + 16);
    if (v12 < 1)
      goto LABEL_162;
LABEL_154:
    MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)(v13, v6, a4, v138);
    swift_release(v13);
    v142 = __OFADD__(v6++, 1);
    if (!v142)
    {
      v163 = v6;
      if (a5 < 1)
        goto LABEL_157;
      goto LABEL_156;
    }
LABEL_169:
    __break(1u);
LABEL_170:
    if (v160 >= 0)
      v152 = v15;
    else
      v152 = v160;
    swift_bridgeObjectRetain(v160);
    v16 = _CocoaArrayWrapper.endIndex.getter(v152);
    swift_bridgeObjectRelease(v160);
LABEL_6:
    swift_bridgeObjectRelease(v160);
    v161 = (_QWORD *)v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162, v14 + 4);
    swift_bridgeObjectRelease(v160);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)i, (os_log_type_t)v12, "[MOSuggestionCollectionViewCellViewModel.List] assetReferencesCount: %ld", (uint8_t *)v14, 0xCu);
    swift_slowDealloc(v14, -1, -1);

  }
  v141 = swift_bridgeObjectRetain(v153);
  v134 = _CocoaArrayWrapper.endIndex.getter(v141);
  swift_release(v153);
  if (v134 <= 0)
    goto LABEL_130;
LABEL_122:
  swift_retain(v153);
  v12 = Logger.logObject.getter(v135);
  v136 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled((os_log_t)v12, v136))
  {
    v137 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v137 = 134217984;
    v161 = (_QWORD *)v134;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162, v137 + 4);
    swift_release(v153);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v12, v136, "[MOSuggestionCollectionViewCellViewModel.List] photoAssetsCount=%ld", v137, 0xCu);
    swift_slowDealloc(v137, -1, -1);

  }
  else
  {

    swift_release(v153);
  }
  v138 = v154;
  i = v155;
  MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)(v153, a5, a4, v154);
  swift_release(v153);
  v6 = a5 + 1;
  if (__OFADD__(a5, 1))
    goto LABEL_165;
  v163 = a5 + 1;
  v139 = v157;
  if ((v157 & 0x8000000000000000) == 0)
    goto LABEL_131;
LABEL_136:
  swift_bridgeObjectRetain(v157);
  v144 = _CocoaArrayWrapper.endIndex.getter(v157);
  swift_release(v157);
  v139 = v157;
  if (v144 < 1)
    goto LABEL_137;
LABEL_133:
  v12 = v139;
  MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)(v139, v6, a4, v138);
  swift_release(v12);
  v142 = __OFADD__(v6++, 1);
  if (v142)
    goto LABEL_166;
  v163 = v6;
  v143 = v156;
  if ((v156 & 0x8000000000000000) == 0)
    goto LABEL_138;
LABEL_143:
  swift_bridgeObjectRetain(v156);
  v145 = _CocoaArrayWrapper.endIndex.getter(v156);
  swift_release(v156);
  v143 = v156;
  if (v145 < 1)
    goto LABEL_144;
LABEL_140:
  v12 = v143;
  MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)(v143, v6, a4, v138);
  swift_release(v12);
  v142 = __OFADD__(v6++, 1);
  if (v142)
    goto LABEL_167;
  v163 = v6;
  if ((v114 & 0x8000000000000000) == 0)
    goto LABEL_145;
LABEL_150:
  v146 = swift_bridgeObjectRetain(v114);
  v12 = _CocoaArrayWrapper.endIndex.getter(v146);
  swift_release(v114);
  if (v12 < 1)
    goto LABEL_151;
LABEL_147:
  MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)(v114, v6, a4, v138);
  swift_release(v114);
  v142 = __OFADD__(v6++, 1);
  if (v142)
    goto LABEL_168;
  v163 = v6;
  if ((v13 & 0x8000000000000000) == 0)
    goto LABEL_152;
LABEL_161:
  v151 = swift_bridgeObjectRetain(v13);
  v12 = _CocoaArrayWrapper.endIndex.getter(v151);
  swift_release(v13);
  if (v12 >= 1)
    goto LABEL_154;
LABEL_162:
  swift_release(v13);
  if (a5 >= 1)
LABEL_156:
    MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:)(v14, a4, v138);
LABEL_157:
  swift_release(v14);
  v148 = Logger.logObject.getter(v147);
  v149 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v148, v149))
  {
    v150 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v150 = 134217984;
    v161 = (_QWORD *)v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162, v150 + 4);
    _os_log_impl((void *)&_mh_execute_header, v148, v149, "[MOSuggestionCollectionViewCellViewModel.List] finalIndex: %ld", v150, 0xCu);
    swift_slowDealloc(v150, -1, -1);
  }

  swift_beginAccess(&v163, &v161, 0, 0);
  return v163;
}

uint64_t MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionViewAssetPlaceHolderSingleResult.assetViewModel.getter()
{
  _QWORD *v0;

  return swift_retain(*v0);
}

uint64_t MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionViewAssetPlaceHolderSingleResult.assetViewModel.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release(*v1);
  *v1 = a1;
  return result;
}

uint64_t MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionViewAssetPlaceHolderResult.updateIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t MOAssetAndMediaType.mediaType.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1
     + *(int *)(type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(0)
              + 24);
  return outlined init with copy of UUID?(v3, a1);
}

uint64_t MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult.uuid.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1
     + *(int *)(type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(0)
              + 24);
  return outlined assign with take of UUID?(a1, v3);
}

void (__swiftcall *MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult.uuid.modify())()
{
  type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(0);
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult.init(assetViewModel:updateIndex:uuid:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;

  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_BYTE *)(a5 + 16) = a3 & 1;
  v6 = a5
     + *(int *)(type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(0)
              + 24);
  return outlined init with take of UUID?(a4, v6);
}

uint64_t static MOSuggestionCollectionViewCellViewModel.PLACEHOLDER_LIST_RESULT.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(0x6C6F686563616C70, 0xEB00000000726564, 0, 0, 0, 0, 0, 0, 26, 1, 1, 0);
  v4 = a1
     + *(int *)(type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(0)
              + 24);
  v5 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t static MOSuggestionCollectionViewCellViewModel.fallbackResult(assetType:mediaType:motionType:updateIndex:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void *v7;
  char v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v7 = a4;
  v11 = a3 & 1;
  v12 = a4;
  LOBYTE(v7) = specialized MOSuggestionAssetVisualSubType.init(assetType:mediaType:motionActivityType:)(a1, a2, v11, v7);
  v13 = type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v14 = MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(0x6C6F686563616C70, 0xEB00000000726564, 0, 0, 0, 0, 0, 0, (char)v7, 1, 0, 1);
  v15 = a6
      + *(int *)(type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(0)
               + 24);
  v16 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  *(_QWORD *)a6 = v14;
  *(_QWORD *)(a6 + 8) = a5;
  *(_BYTE *)(a6 + 16) = 0;
  return result;
}

uint64_t closure #6 in MOSuggestionCollectionViewCellViewModel.fetchListAssetsWithPlaceHolderSingleResult(previewOnly:previewMax:typeSorted:completion:)(uint64_t a1)
{
  uint64_t (*v1)(void);
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = *(uint64_t (**)(void))(**(_QWORD **)a1 + 120);
  v2 = (void *)v1();
  v3 = (id)specialized static MOSuggestionAssetReference.consolidatedType(_:)((uint64_t)v2);

  v4 = MOSuggestionAssetsTypePhoto;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  if (v5 == v8 && v7 == v9)
    goto LABEL_13;
  v11 = v9;
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);

  swift_bridgeObjectRelease(v7);
  v13 = swift_bridgeObjectRelease(v11);
  v14 = 0;
  if ((v12 & 1) == 0)
  {
    v3 = (id)((uint64_t (*)(uint64_t))v1)(v13);
    v15 = MOSuggestionAssetsTypeMediaCoverArt;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v17;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    if (v16 == v18 && v7 == v19)
      goto LABEL_13;
    v21 = v19;
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v7, v18, v19, 0);

    swift_bridgeObjectRelease(v7);
    v23 = swift_bridgeObjectRelease(v21);
    v14 = 0;
    if ((v22 & 1) == 0)
    {
      v3 = (id)((uint64_t (*)(uint64_t))v1)(v23);
      v24 = MOSuggestionAssetsTypeMotionActivity;
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
      v7 = v26;
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v29 = v27;
      if (v25 != v28 || v7 != v27)
      {
        v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v7, v28, v27, 0);

        swift_bridgeObjectRelease(v7);
        v33 = swift_bridgeObjectRelease(v29);
        v14 = 0;
        if ((v32 & 1) != 0)
          return v14 & 1;
        v3 = (id)((uint64_t (*)(uint64_t))v1)(v33);
        v34 = MOSuggestionAssetsTypeGenericMap;
        v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
        v7 = v36;
        v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
        v39 = v37;
        if (v35 != v38 || v7 != v37)
        {
          v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v7, v38, v37, 0);

          swift_bridgeObjectRelease(v7);
          v41 = swift_bridgeObjectRelease(v39);
          v14 = 0;
          if ((v40 & 1) != 0)
            return v14 & 1;
          v3 = (id)((uint64_t (*)(uint64_t))v1)(v41);
          v42 = MOSuggestionAssetsTypeStateOfMindAsset;
          v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
          v7 = v44;
          v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
          v47 = v45;
          if (v43 != v46 || v7 != v45)
          {
            v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v7, v46, v45, 0);

            swift_bridgeObjectRelease(v7);
            v49 = swift_bridgeObjectRelease(v47);
            v14 = 0;
            if ((v48 & 1) != 0)
              return v14 & 1;
            v3 = (id)((uint64_t (*)(uint64_t))v1)(v49);
            v50 = MOSuggestionAssetsTypeContactPhoto;
            v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
            v7 = v52;
            v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
            v30 = v53;
            if (v51 == v54 && v7 == v53)
              v14 = 0;
            else
              v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v7, v54, v53, 0) ^ 1;
            goto LABEL_14;
          }
        }
      }
LABEL_13:
      v14 = 0;
      v30 = v7;
LABEL_14:

      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v30);
    }
  }
  return v14 & 1;
}

void MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, id, uint64_t, void (*)(uint64_t), _QWORD *);
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v23 = swift_allocObject(&unk_1001E6E88, 24, 7);
  *(_QWORD *)(v23 + 16) = _swiftEmptyArrayStorage;
  v22 = swift_allocObject(&unk_1001E6EB0, 24, 7);
  *(_QWORD *)(v22 + 16) = 0;
  if (!((unint64_t)a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v5)
      goto LABEL_3;
LABEL_18:
    swift_release(v22);
    swift_bridgeObjectRelease(a1);
    swift_release(v23);
    return;
  }
  if (a1 < 0)
    v16 = a1;
  else
    v16 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v16);
  if (!v5)
    goto LABEL_18;
LABEL_3:
  if (v5 >= 1)
  {
    v6 = 0;
    v17 = a1 & 0xC000000000000001;
    v24 = a1;
    v18 = v5;
    do
    {
      if (v17)
      {
        v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      }
      else
      {
        v7 = *(_QWORD *)(a1 + 8 * v6 + 32);
        swift_retain(v7);
      }
      if (one-time initialization token for shared != -1)
        swift_once(&one-time initialization token for shared, one-time initialization function for shared);
      v8 = static MOSuggestionAssetCacheManager.shared;
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v10 = swift_allocObject(v9, 40, 7);
      *(_OWORD *)(v10 + 16) = xmmword_10019EDA0;
      *(_QWORD *)(v10 + 32) = v7;
      v25 = v10;
      specialized Array._endMutation()(v10);
      v11 = swift_allocObject(&unk_1001E6ED8, 24, 7);
      swift_weakInit(v11 + 16);
      v12 = (_QWORD *)swift_allocObject(&unk_1001E6F00, 72, 7);
      v12[2] = v11;
      v12[3] = a3;
      v12[4] = a4;
      v12[5] = v22;
      v12[6] = v23;
      v12[7] = v24;
      v12[8] = a2;
      v13 = one-time initialization token for defaultQueue;
      swift_bridgeObjectRetain(v24);
      swift_retain(v7);
      swift_retain(v11);
      swift_retain(a4);
      swift_retain(v22);
      swift_retain(v23);
      if (v13 != -1)
        swift_once(&one-time initialization token for defaultQueue, one-time initialization function for defaultQueue);
      ++v6;
      v14 = *(void (**)(uint64_t, _QWORD, id, uint64_t, void (*)(uint64_t), _QWORD *))(*(_QWORD *)v8 + 232);
      v15 = (id)static MOSuggestionAssetCacheManager.defaultQueue;
      v14(v25, 0, v15, 9, partial apply for closure #1 in MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:), v12);
      swift_release(v7);
      swift_bridgeObjectRelease(v25);
      swift_release(v11);
      swift_release(v12);

      a1 = v24;
    }
    while (v18 != v6);
    goto LABEL_18;
  }
  __break(1u);
}

uint64_t MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, id, uint64_t, void (*)(uint64_t), _QWORD *);
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v21;

  v3 = a1;
  if (!((unint64_t)a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(a1);
    if (v4)
      goto LABEL_3;
    return swift_bridgeObjectRelease(v3);
  }
  if (a1 < 0)
    v16 = a1;
  else
    v16 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  result = _CocoaArrayWrapper.endIndex.getter(v16);
  v4 = result;
  if (!result)
    return swift_bridgeObjectRelease(v3);
LABEL_3:
  if (v4 >= 1)
  {
    v6 = 0;
    v17 = v3 & 0xC000000000000001;
    v18 = v3;
    do
    {
      if (v17)
      {
        v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v3);
      }
      else
      {
        v7 = *(_QWORD *)(v3 + 8 * v6 + 32);
        swift_retain(v7);
      }
      if (one-time initialization token for shared != -1)
        swift_once(&one-time initialization token for shared, one-time initialization function for shared);
      v8 = static MOSuggestionAssetCacheManager.shared;
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v10 = swift_allocObject(v9, 40, 7);
      *(_OWORD *)(v10 + 16) = xmmword_10019EDA0;
      *(_QWORD *)(v10 + 32) = v7;
      v21 = v10;
      specialized Array._endMutation()(v10);
      v11 = swift_allocObject(&unk_1001E6ED8, 24, 7);
      swift_weakInit(v11 + 16);
      v12 = (_QWORD *)swift_allocObject(&unk_1001E6F78, 56, 7);
      v12[2] = v11;
      v12[3] = a2;
      v12[4] = a3;
      v12[5] = v6;
      v12[6] = v7;
      v13 = one-time initialization token for defaultQueue;
      swift_retain_n(v7, 2);
      swift_retain(v11);
      swift_retain(a3);
      if (v13 != -1)
        swift_once(&one-time initialization token for defaultQueue, one-time initialization function for defaultQueue);
      ++v6;
      v14 = *(void (**)(uint64_t, _QWORD, id, uint64_t, void (*)(uint64_t), _QWORD *))(*(_QWORD *)v8 + 232);
      v15 = (id)static MOSuggestionAssetCacheManager.defaultQueue;
      v14(v21, 0, v15, 3, partial apply for closure #1 in MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:), v12);
      swift_release(v7);
      swift_bridgeObjectRelease(v21);
      swift_release(v11);
      swift_release(v12);

      v3 = v18;
    }
    while (v4 != v6);
    return swift_bridgeObjectRelease(v3);
  }
  __break(1u);
  return result;
}

void closure #1 in MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t Strong;
  id *v26;
  double (*v27)(char *);
  uint64_t v28;
  id v29;
  unint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  __n128 v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int64_t v57;
  int64_t v58;
  char *v59;
  char *v60;
  void (*v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  id v96;
  id v97;
  uint64_t v98;
  id v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  id v106;
  id v107;
  uint64_t v108;
  id v109;
  void *v110;
  Swift::OpaquePointer v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  void *v146;
  void *v147;
  id v148;
  id v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE v172[24];
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _BYTE v176[24];
  _QWORD aBlock[5];
  uint64_t v178;
  char v179[32];

  v167 = a8;
  v170 = a6;
  v171 = a7;
  v166 = type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(0);
  __chkstk_darwin(v166);
  v168 = (char *)&v163 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  v15 = __chkstk_darwin(v14);
  v165 = (char *)&v163 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v164 = (char *)&v163 - v17;
  v18 = (uint64_t *)type metadata accessor for DispatchWorkItemFlags(0);
  v169 = *(v18 - 1);
  __chkstk_darwin(v18);
  v20 = (char *)&v163 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchQoS(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v163 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v179, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (!Strong)
  {
    type metadata accessor for OS_dispatch_queue();
    v35 = (void *)static OS_dispatch_queue.main.getter(v34);
    v36 = swift_allocObject(&unk_1001E6F28, 32, 7);
    *(_QWORD *)(v36 + 16) = a3;
    *(_QWORD *)(v36 + 24) = a4;
    aBlock[4] = partial apply for closure #1 in closure #1 in MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:);
    v178 = v36;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_10;
    v37 = _Block_copy(aBlock);
    v38 = v178;
    swift_retain(a4);
    swift_release(v38);
    static DispatchQoS.unspecified.getter(v39);
    aBlock[0] = _swiftEmptyArrayStorage;
    v40 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    v42 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v41, v42, v18, v40);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v24, v20, v37);
    _Block_release(v37);

    (*(void (**)(char *, uint64_t *))(v169 + 8))(v20, v18);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
    return;
  }
  v26 = (id *)Strong;
  v27 = (double (*)(char *))a3;
  v28 = a5 + 16;
  swift_beginAccess(a5 + 16, aBlock, 1, 0);
  if (__OFADD__(*(_QWORD *)(a5 + 16), 1))
  {
    __break(1u);
  }
  else
  {
    a3 = v171;
    v18 = (uint64_t *)(v170 + 16);
    *(_QWORD *)v28 = *(_QWORD *)(a5 + 16) + 1;
    if (!a1)
      goto LABEL_18;
    a5 = a1 & 0xFFFFFFFFFFFFFF8;
    if (!((unint64_t)a1 >> 62))
    {
      v29 = *(id *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
      if (v29)
        goto LABEL_6;
      goto LABEL_17;
    }
  }
  if (a1 >= 0)
    v43 = a5;
  else
    v43 = a1;
  swift_bridgeObjectRetain(a1);
  v29 = (id)_CocoaArrayWrapper.endIndex.getter(v43);
  if (v29)
  {
LABEL_6:
    if ((a1 & 0xC000000000000001) != 0)
    {
      v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    }
    else
    {
      v30 = *(_QWORD *)(a5 + 16);
      if (!v30)
      {
        __break(1u);
        goto LABEL_61;
      }
      v31 = *(id *)(a1 + 32);
    }
    v32 = v31;
    swift_bridgeObjectRelease(a1);
    swift_beginAccess(v18, v176, 33, 0);
    v29 = v32;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
    a5 = *(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v30 = *(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (a5 < v30 >> 1)
    {
LABEL_10:
      a1 = (uint64_t)v18;
      v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(a5, v29);
      specialized Array._endMutation()(v33);
      swift_endAccess(v176);

      goto LABEL_18;
    }
LABEL_61:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, a5 + 1, 1);
    goto LABEL_10;
  }
LABEL_17:
  swift_bridgeObjectRelease(a1);
LABEL_18:
  swift_beginAccess(v28, v176, 0, 0);
  v44 = *(_QWORD *)v28;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v101 = a3;
    else
      v101 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    a1 = _CocoaArrayWrapper.endIndex.getter(v101);
    swift_bridgeObjectRelease(a3);
    if (v44 < a1)
      goto LABEL_20;
    swift_bridgeObjectRetain(a3);
    v45 = _CocoaArrayWrapper.endIndex.getter(v101);
    if (v45)
      goto LABEL_22;
LABEL_55:
    swift_release(v26);
    swift_bridgeObjectRelease(a3);
    return;
  }
  v45 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v44 < v45)
  {
LABEL_20:
    swift_release(v26);
    return;
  }
  swift_bridgeObjectRetain(a3);
  if (!v45)
    goto LABEL_55;
LABEL_22:
  if ((a3 & 0xC000000000000001) != 0)
  {
    v28 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a3);
  }
  else
  {
    if (!*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_64:
      v104 = _stringCompareWithSmolCheck(_:_:expecting:)(a3, v45, v46, v44, 0);

      swift_bridgeObjectRelease(v45);
      swift_bridgeObjectRelease(v44);
      if ((v104 & 1) == 0)
        goto LABEL_66;
      goto LABEL_65;
    }
    v28 = *(_QWORD *)(a3 + 32);
    swift_retain(v28);
  }
  v47 = swift_bridgeObjectRelease(a3);
  a4 = *(uint64_t (**)(void))(*(_QWORD *)v28 + 120);
  v48 = (void *)((uint64_t (*)(uint64_t))a4)(v47);
  a1 = (uint64_t)(id)specialized static MOSuggestionAssetReference.consolidatedType(_:)((uint64_t)v48);

  v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypePhoto);
  v51 = v50;
  v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v54 = v52;
  if (v49 == v53 && v51 == v52)
  {
    swift_bridgeObjectRelease_n(v51, 2);
LABEL_29:

    type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
    swift_beginAccess(v18, v172, 0, 0);
    v56 = swift_bridgeObjectRetain(*v18);
    v57 = MOSuggestionInterstitialListAssetViewModel.__allocating_init(photoAssets:)(v56);
    goto LABEL_30;
  }
  v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v51, v53, v52, 0);
  swift_bridgeObjectRelease(v51);
  swift_bridgeObjectRelease(v54);
  if ((v55 & 1) != 0)
    goto LABEL_29;
  v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeMediaCoverArt);
  v68 = v67;
  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v71 = v69;
  if (v66 == v70 && v68 == v69)
  {
    swift_bridgeObjectRelease_n(v68, 2);
LABEL_36:

    type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
    swift_beginAccess(v18, v172, 0, 0);
    v73 = swift_bridgeObjectRetain(*v18);
    v57 = MOSuggestionInterstitialListAssetViewModel.__allocating_init(mediaAssets:)(v73);
    goto LABEL_30;
  }
  v72 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v68, v70, v69, 0);
  swift_bridgeObjectRelease(v68);
  swift_bridgeObjectRelease(v71);
  if ((v72 & 1) != 0)
    goto LABEL_36;
  v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeMotionActivity);
  v76 = v75;
  v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v79 = v77;
  if (v74 == v78 && v76 == v77)
    goto LABEL_39;
  v80 = _stringCompareWithSmolCheck(_:_:expecting:)(v74, v76, v78, v77, 0);
  swift_bridgeObjectRelease(v76);
  swift_bridgeObjectRelease(v79);
  if ((v80 & 1) != 0)
    goto LABEL_41;
  v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeGenericMap);
  v76 = v83;
  v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v86 = v84;
  if (v82 == v85 && v76 == v84)
  {
LABEL_39:
    swift_bridgeObjectRelease_n(v76, 2);
LABEL_41:

    type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
    swift_beginAccess(v18, v172, 0, 0);
    v81 = swift_bridgeObjectRetain(*v18);
    v57 = (int64_t)MOSuggestionInterstitialListAssetViewModel.__allocating_init(motionAssets:)(v81);
    goto LABEL_30;
  }
  v87 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v76, v85, v84, 0);
  swift_bridgeObjectRelease(v76);
  swift_bridgeObjectRelease(v86);
  if ((v87 & 1) != 0)
    goto LABEL_41;
  v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeContactPhoto);
  v90 = v89;
  v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v93 = v91;
  if (v88 == v92 && v90 == v91)
  {
    swift_bridgeObjectRelease_n(v90, 2);
LABEL_49:

    type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
    swift_beginAccess(v18, v172, 0, 0);
    v95 = *v18;
    v96 = v26[2];
    swift_bridgeObjectRetain(*v18);
    v97 = objc_msgSend(v96, "displayStartDate");
    v98 = (uint64_t)v164;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v99 = objc_msgSend(v26[2], "displayEndDate");
    v100 = v165;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v57 = MOSuggestionInterstitialListAssetViewModel.__allocating_init(contactAssets:bundleStartDate:bundleEndDate:)(v95, v98, v100);
    goto LABEL_30;
  }
  v94 = _stringCompareWithSmolCheck(_:_:expecting:)(v88, v90, v92, v91, 0);
  swift_bridgeObjectRelease(v90);
  swift_bridgeObjectRelease(v93);
  if ((v94 & 1) != 0)
    goto LABEL_49;
  a3 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeStateOfMindAsset);
  v45 = v102;
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v44 = v103;
  if (a3 != v46 || v45 != v103)
    goto LABEL_64;

  swift_bridgeObjectRelease_n(v45, 2);
LABEL_65:
  type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
  swift_beginAccess(v18, v172, 0, 0);
  v105 = *v18;
  v106 = v26[2];
  swift_bridgeObjectRetain(*v18);
  v107 = objc_msgSend(v106, "displayStartDate");
  v108 = (uint64_t)v164;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v109 = objc_msgSend(v26[2], "displayEndDate");
  v110 = v165;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v111._rawValue = v110;
  v57 = MOSuggestionInterstitialListAssetViewModel.__allocating_init(stateOfMindAssets:bundleStartDate:bundleEndDate:)(v105, v108, v111);
LABEL_30:
  v58 = v57;
  if (!v57)
  {
LABEL_66:
    v112 = (void *)a4();
    v113 = MOSuggestionAssetsTypeMediaCoverArt;
    v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
    v116 = v115;
    v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
    v119 = v117;
    if (v114 == v118 && v116 == v117)
    {

      v120 = swift_bridgeObjectRelease_n(v116, 2);
    }
    else
    {
      v121 = _stringCompareWithSmolCheck(_:_:expecting:)(v114, v116, v118, v117, 0);

      swift_bridgeObjectRelease(v116);
      v120 = swift_bridgeObjectRelease(v119);
      if ((v121 & 1) == 0)
        goto LABEL_76;
    }
    v120 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 256))(v120);
    if (v120)
    {
      v122 = v120;
      v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("MOMediaPlayMetaDataKeyPlayerBundleID"));
      v125 = v124;
      if (*(_QWORD *)(v122 + 16)
        && (v126 = specialized __RawDictionaryStorage.find<A>(_:)(v123, v124), (v127 & 1) != 0))
      {
        v128 = *(_QWORD *)(*(_QWORD *)(v122 + 56) + 8 * v126);
        swift_unknownObjectRetain();
        swift_bridgeObjectRelease(v125);
        swift_bridgeObjectRelease(v122);
        v175 = v128;
        v120 = swift_dynamicCast(&v173, &v175, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
        if ((v120 & 1) != 0)
        {
          v129 = v174;
          v130 = specialized static MOSuggestionAssetMediaCoverArtQueryInput.typeFromBundleId(_:)(v173, v174);
          v131 = swift_bridgeObjectRelease(v129);
          v132 = (id)((uint64_t (*)(uint64_t))a4)(v131);
          v133 = specialized MOSuggestionAssetVisualSubType.init(assetType:mediaType:motionActivityType:)(v132, v130, 0, 0);
          v134 = type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
          swift_allocObject(v134, *(unsigned int *)(v134 + 48), *(unsigned __int16 *)(v134 + 52));
          v135 = MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(0x6C6F686563616C70, 0xEB00000000726564, 0, 0, 0, 0, 0, 0, v133, 1, 0, 1);
LABEL_84:
          v158 = v135;
          v159 = v168;
          v160 = &v168[*(int *)(v166 + 24)];
          v161 = type metadata accessor for UUID(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 56))(v160, 1, 1, v161);

          v162 = v167;
          *(_QWORD *)v159 = v158;
          *((_QWORD *)v159 + 1) = v162;
          v159[16] = 0;
          v27(v159);
          swift_release(v26);
          swift_release(v28);
          v155 = (uint64_t)v159;
          goto LABEL_85;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v125);
        v120 = swift_bridgeObjectRelease(v122);
      }
    }
LABEL_76:
    v136 = (void *)((uint64_t (*)(uint64_t))a4)(v120);
    v137 = MOSuggestionAssetsTypeMotionActivity;
    v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(v136);
    v140 = v139;
    v142 = static String._unconditionallyBridgeFromObjectiveC(_:)(v137);
    v143 = v141;
    if (v138 == v142 && v140 == v141)
    {

      v144 = swift_bridgeObjectRelease_n(v140, 2);
    }
    else
    {
      v145 = _stringCompareWithSmolCheck(_:_:expecting:)(v138, v140, v142, v141, 0);

      swift_bridgeObjectRelease(v140);
      v144 = swift_bridgeObjectRelease(v143);
      if ((v145 & 1) == 0)
      {
LABEL_83:
        v132 = (id)((uint64_t (*)(uint64_t))a4)(v144);
        v156 = specialized MOSuggestionAssetVisualSubType.init(assetType:mediaType:motionActivityType:)(v132, 0, 1, 0);
        v157 = type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
        swift_allocObject(v157, *(unsigned int *)(v157 + 48), *(unsigned __int16 *)(v157 + 52));
        v135 = MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(0x6C6F686563616C70, 0xEB00000000726564, 0, 0, 0, 0, 0, 0, v156, 1, 0, 1);
        goto LABEL_84;
      }
    }
    v144 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 280))(v144);
    if (v144)
    {
      v146 = (void *)v144;
      v147 = (void *)a4();
      v148 = v146;
      v149 = v147;
      LOBYTE(v147) = specialized MOSuggestionAssetVisualSubType.init(assetType:mediaType:motionActivityType:)(v149, 0, 1, v146);
      v150 = type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
      swift_allocObject(v150, *(unsigned int *)(v150 + 48), *(unsigned __int16 *)(v150 + 52));
      v151 = MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(0x6C6F686563616C70, 0xEB00000000726564, 0, 0, 0, 0, 0, 0, (char)v147, 1, 0, 1);
      v59 = v168;
      v152 = &v168[*(int *)(v166 + 24)];
      v153 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v153 - 8) + 56))(v152, 1, 1, v153);

      v154 = v167;
      *(_QWORD *)v59 = v151;
      *((_QWORD *)v59 + 1) = v154;
      v59[16] = 0;
      v27(v59);

      goto LABEL_82;
    }
    goto LABEL_83;
  }
  v59 = v168;
  v60 = &v168[*(int *)(v166 + 24)];
  v61 = (void (*)(uint64_t))*((_QWORD *)*v26 + 43);
  v62 = swift_retain_n(v57, 2);
  v61(v62);
  v63 = type metadata accessor for UUID(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v60, 0, 1, v63);
  v64 = v167;
  *(_QWORD *)v59 = v58;
  *((_QWORD *)v59 + 1) = v64;
  v59[16] = 0;
  v65.n128_f64[0] = v27(v59);
  swift_release_n(v58, 2, v65);
LABEL_82:
  swift_release(v26);
  swift_release(v28);
  v155 = (uint64_t)v59;
LABEL_85:
  outlined destroy of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(v155);
}

void closure #1 in MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, objc_class *a5, uint64_t a6)
{
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  objc_class *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Strong;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  objc_class *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  void *v33;
  _QWORD *v34;
  objc_class *v35;
  void *v36;
  void (*v37)(_QWORD);
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __n128 v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  id v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  objc_class *v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(_QWORD);
  uint64_t v79;
  uint64_t v80;
  objc_class *v81;
  uint64_t v82;
  uint64_t v83;
  void **aBlock;
  uint64_t v85;
  uint64_t (*v86)(uint64_t);
  void *v87;
  uint64_t (*v88)();
  _QWORD *v89;
  char v90[24];

  v79 = a6;
  v81 = a5;
  v82 = a4;
  v80 = type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(0);
  __chkstk_darwin(v80);
  v10 = ((char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v16 = *(objc_class **)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v90, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (!Strong)
  {
    type metadata accessor for OS_dispatch_queue();
    v46 = (void *)static OS_dispatch_queue.main.getter(v45);
    v47 = swift_allocObject(&unk_1001E6FA0, 32, 7);
    *(_QWORD *)(v47 + 16) = a3;
    v48 = v82;
    *(_QWORD *)(v47 + 24) = v82;
    v88 = partial apply for closure #1 in closure #1 in MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:);
    v89 = (_QWORD *)v47;
    aBlock = _NSConcreteStackBlock;
    v85 = 1107296256;
    v86 = thunk for @escaping @callee_guaranteed () -> ();
    v87 = &block_descriptor_22;
    v49 = _Block_copy(&aBlock);
    v50 = v89;
    swift_retain(v48);
    swift_release(v50);
    static DispatchQoS.unspecified.getter(v51);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v52 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    v54 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v53, v54, v11, v52);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v14, v49);
    _Block_release(v49);

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    (*((void (**)(uint64_t, uint64_t))v16 + 1))(v18, v15);
    return;
  }
  v20 = Strong;
  v78 = a3;
  v76 = v12;
  v21 = a1;
  if (!a1)
    goto LABEL_17;
  v75 = v15;
  v77 = Strong;
  v22 = a1 & 0xF8;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 >= 0)
      v55 = a1 & 0xFFFFFFFFFFFFFF8;
    else
      v55 = a1;
    swift_bridgeObjectRetain(a1);
    v20 = _CocoaArrayWrapper.endIndex.getter(v55);
    v24 = (uint8_t *)v11;
    if (v20)
      goto LABEL_5;
LABEL_16:
    swift_bridgeObjectRelease(a1);
    v20 = v77;
    goto LABEL_17;
  }
  v20 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  v24 = (uint8_t *)v11;
  if (!v20)
    goto LABEL_16;
LABEL_5:
  v25 = (uint64_t)v14;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    v26 = v16;
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_31;
    }
    v26 = v16;
    v27 = *(id *)(a1 + 32);
  }
  swift_bridgeObjectRelease(a1);
  specialized MOSuggestionCollectionViewCellViewModel.createListAssetViewModel(for:)(v27);
  v29 = v82;
  if (v28)
  {
    v30 = v28;
    v31 = v18;
    type metadata accessor for OS_dispatch_queue();
    v33 = (void *)static OS_dispatch_queue.main.getter(v32);
    v34 = (_QWORD *)swift_allocObject(&unk_1001E6FF0, 56, 7);
    v35 = v81;
    v34[2] = v30;
    v34[3] = v35;
    v81 = v26;
    v36 = v27;
    v38 = v77;
    v37 = v78;
    v34[4] = v77;
    v34[5] = v37;
    v34[6] = v29;
    v88 = partial apply for closure #2 in closure #1 in MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:);
    v89 = v34;
    aBlock = _NSConcreteStackBlock;
    v85 = 1107296256;
    v86 = thunk for @escaping @callee_guaranteed () -> ();
    v87 = &block_descriptor_28_0;
    v39 = _Block_copy(&aBlock);
    v40 = v89;
    swift_retain(v29);
    swift_retain(v30);
    swift_retain(v38);
    swift_release(v40);
    static DispatchQoS.unspecified.getter(v41);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v42 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    v44 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v43, v44, v24, v42);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v31, v25, v39);

    _Block_release(v39);
    swift_release(v30);
    swift_release(v38);

    (*(void (**)(uint64_t, uint8_t *))(v76 + 8))(v25, v24);
    (*((void (**)(uint64_t, uint64_t))v81 + 1))(v31, v75);
    return;
  }

  v20 = v77;
  v21 = a1;
LABEL_17:
  v56 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v79 + 120))();
  v57 = specialized MOSuggestionAssetVisualSubType.init(assetType:mediaType:motionActivityType:)(v56, 0, 1, 0);
  v58 = type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
  swift_allocObject(v58, *(unsigned int *)(v58 + 48), *(unsigned __int16 *)(v58 + 52));
  v59 = MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(0x6C6F686563616C70, 0xEB00000000726564, 0, 0, 0, 0, 0, 0, v57, 1, 0, 1);
  v60 = (char *)v10 + *(int *)(v80 + 24);
  v61 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v60, 1, 1, v61);

  v62 = v81;
  v10->isa = (Class)v59;
  v10[1].isa = v62;
  LOBYTE(v10[2].isa) = 0;
  v78(v10);
  outlined destroy of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult((uint64_t)v10);
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1)
    swift_once(&serverManager._connectionProperties, one-time initialization function for assets);
  v63 = type metadata accessor for Logger(0);
  __swift_project_value_buffer(v63, (uint64_t)static MOAngelLogger.assets);
  v64 = swift_bridgeObjectRetain_n(v21, 2);
  v10 = Logger.logObject.getter(v64);
  v22 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v10, v22))
  {

    swift_bridgeObjectRelease_n(v21, 2);
    swift_release(v20);
    return;
  }
  v24 = (uint8_t *)swift_slowAlloc(12, -1);
  v65 = (void **)swift_slowAlloc(32, -1);
  v23 = v21;
  v21 = (uint64_t)v65;
  aBlock = v65;
  *(_DWORD *)v24 = 136315138;
  v18 = v23;
  if (!v23)
  {
    v70 = 0xE300000000000000;
    v71 = 7104878;
LABEL_37:
    v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v70, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &aBlock, v24 + 4);
    swift_bridgeObjectRelease_n(v18, 2);
    swift_bridgeObjectRelease(v70);
    _os_log_impl((void *)&_mh_execute_header, v10, v22, "[MOSuggestionCollectionViewCellViewModel.List] failed to generate view model, asset=%s", v24, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v24, -1, -1);
    swift_release(v20);

    return;
  }
  v25 = v23 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)v23 >> 62))
  {
    v66 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v23);
    if (v66)
      goto LABEL_23;
LABEL_35:
    swift_bridgeObjectRelease(v18);
    v69 = 0;
    goto LABEL_36;
  }
LABEL_31:
  if (v23 >= 0)
    v72 = v25;
  else
    v72 = v23;
  swift_bridgeObjectRetain(v23);
  if (!_CocoaArrayWrapper.endIndex.getter(v72))
    goto LABEL_35;
LABEL_23:
  if ((v18 & 0xC000000000000001) != 0)
  {
    v67 = v18;
    v68 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v18);
    goto LABEL_26;
  }
  if (*(_QWORD *)(v25 + 16))
  {
    v67 = v18;
    v68 = *(id *)(v18 + 32);
LABEL_26:
    v69 = v68;
    swift_bridgeObjectRelease(v67);
LABEL_36:
    v83 = (uint64_t)v69;
    v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionAsset?);
    v71 = Optional.debugDescription.getter(v73);
    v70 = v74;

    goto LABEL_37;
  }
  __break(1u);
}

uint64_t closure #1 in closure #1 in MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)(void (*a1)(char *))
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v2 = type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(0x6C6F686563616C70, 0xEB00000000726564, 0, 0, 0, 0, 0, 0, 26, 1, 1, 0);
  v7 = &v4[*(int *)(v2 + 24)];
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(_QWORD *)v4 = v6;
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 1;
  a1(v4);
  return outlined destroy of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult((uint64_t)v4);
}

uint64_t closure #2 in closure #1 in MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void (*v13)(__n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v17;

  v8 = type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v11[*(int *)(v9 + 24)];
  v13 = *(void (**)(__n128))(*(_QWORD *)a3 + 344);
  v14 = swift_retain(a1);
  v13(v14);
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v12, 0, 1, v15);
  *(_QWORD *)v11 = a1;
  *((_QWORD *)v11 + 1) = a2;
  v11[16] = 0;
  a4(v11);
  return outlined destroy of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult((uint64_t)v11);
}

uint64_t type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1)
{
  uint64_t result;

  result = type metadata singleton initialization cache for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult;
  if (!type metadata singleton initialization cache for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult);
  return result;
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = *(int *)(a3 + 24);
    v7 = (void *)(a1 + v6);
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UUID(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v10 + 48);
    v12 = swift_retain(v4);
    if (v11(v8, 1, v9, v12))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v5;
}

uint64_t destroy for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_release(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t initializeWithCopy for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;

  v5 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = (void *)(a1 + v6);
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v10 + 48);
  v12 = swift_retain(v5);
  if (v11(v8, 1, v9, v12))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

uint64_t *assignWithCopy for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  a1[1] = v8;
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t initializeWithTake for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(int *)(a3 + 24);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t *assignWithTake for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007E56C);
}

uint64_t sub_10007E56C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007E5F8);
}

char *sub_10007E5F8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void type metadata completion function for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = "\t";
  type metadata accessor for UUID?(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void type metadata accessor for UUID?(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!lazy cache variable for type metadata for UUID?)
  {
    v2 = type metadata accessor for UUID(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for UUID?);
  }
}

uint64_t sub_10007E744()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007E768()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007E778()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007E79C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 72, 7);
}

void partial apply for closure #1 in MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(void))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_10007E7F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #1 in MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)(*(void (**)(char *))(v0 + 16));
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_10(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t outlined destroy of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void specialized MOSuggestionCollectionViewCellViewModel.createListAssetViewModel(for:)(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = objc_msgSend(a1, "assetType");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeMultiPinMap);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    swift_bridgeObjectRelease_n(v5, 2);
    goto LABEL_15;
  }
  v9 = v7;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  if ((v10 & 1) != 0)
  {
LABEL_15:

    type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
    MOSuggestionInterstitialListAssetViewModel.__allocating_init(multiPinMapAsset:)(a1);
    return;
  }
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeWorkout);
  v13 = v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v11 == v14 && v13 == v15)
  {
    swift_bridgeObjectRelease_n(v13, 2);
    goto LABEL_17;
  }
  v17 = v15;
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v14, v15, 0);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v17);
  if ((v18 & 1) != 0)
  {
LABEL_17:

    type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
    MOSuggestionInterstitialListAssetViewModel.__allocating_init(workoutAsset:)(a1);
    return;
  }
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(MOSuggestionAssetsTypeWorkoutGroup);
  v21 = v20;
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v24 = v22;
  if (v19 == v23 && v21 == v22)
  {

    swift_bridgeObjectRelease_n(v21, 2);
  }
  else
  {
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v23, v22, 0);

    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v24);
    if ((v25 & 1) == 0)
      return;
  }
  type metadata accessor for MOSuggestionInterstitialListAssetViewModel(0);
  MOSuggestionInterstitialListAssetViewModel.__allocating_init(workoutGroupAsset:)(a1);
}

void partial apply for closure #1 in MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:)(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32), *(objc_class **)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t objectdestroy_15Tm()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #2 in closure #1 in MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:)()
{
  uint64_t v0;

  return closure #2 in closure #1 in MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(char *))(v0 + 40));
}

void *MOSuggestionAssetSystemIconImageFetcherConstants.kDefaultSize.unsafeMutableAddressor()
{
  return &static MOSuggestionAssetSystemIconImageFetcherConstants.kDefaultSize;
}

uint64_t static MOSuggestionAssetSystemIconImageFetcherConstants.kDefaultSize.getter()
{
  return 6;
}

uint64_t one-time initialization function for shared()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for MOSuggestionAssetSystemIconImageProvider();
  result = swift_initStaticObject(v0, &unk_1002070C8);
  static MOSuggestionAssetSystemIconImageProvider.shared = result;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for MOSuggestionAssetSystemSymbolProvider();
  result = swift_initStaticObject(v0, &unk_1002070E0);
  static MOSuggestionAssetSystemSymbolProvider.shared = result;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for MOEventBundleStore(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = MOEventBundleStore.init()();
  static MOEventBundleStore.shared = v1;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for MOMusicPlaybackCoordinator();
  v1 = swift_allocObject(v0, 56, 7);
  result = MOMusicPlaybackCoordinator.init()();
  static MOMusicPlaybackCoordinator.shared = v1;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for MOLocationShifter();
  v1 = swift_allocObject(v0, 32, 7);
  result = MOLocationShifter.init()();
  static MOLocationShifter.shared = v1;
  return result;
}

uint64_t *MOSuggestionAssetSystemIconImageProvider.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  return &static MOSuggestionAssetSystemIconImageProvider.shared;
}

uint64_t static MOSuggestionAssetSystemIconImageProvider.shared.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for MOSuggestionAssetSystemIconImageProvider();
  return swift_initStaticObject(v0, &unk_1002070C8);
}

void MOSuggestionAssetSystemIconImageProvider.getAssetFor(workoutType:size:renderGlyph:isIndoors:completion:)(uint64_t a1, char a2, char a3, char a4, uint64_t (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t (*v16)(_QWORD);
  uint64_t v17;
  uint64_t v18;
  CGContext *v19;
  CGContext *v20;
  CGContext *v21;
  uint64_t v22;
  void *v23;
  id v24;
  CGContext *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  CGContext *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (serverManager._clientConnections != (NSMutableDictionary *)-1)
    swift_once(&serverManager._clientConnections, one-time initialization function for shared);
  v12 = type metadata accessor for Logger(0);
  v13 = __swift_project_value_buffer(v12, (uint64_t)static MOAngelLogger.shared);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v33 = a6;
    v34 = a1;
    v16 = a5;
    v17 = swift_slowAlloc(18, -1);
    *(_DWORD *)v17 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 4);
    *(_WORD *)(v17 + 12) = 1024;
    LODWORD(v34) = a4 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, (char *)&v34 + 4, v17 + 14);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "[workoutIcon] workoutType=%lu, isIndoor=%{BOOL}d", (uint8_t *)v17, 0x12u);
    v18 = v17;
    a5 = v16;
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = (CGContext *)objc_msgSend((id)objc_opt_self(FIUIWorkoutActivityType), "activityTypeWithHKWorkoutActivityTypeIdentifier:isIndoor:metadata:", a1, a4 & 1, 0);
  v20 = (CGContext *)(id)FIUIStaticScalableWorkoutIconImage();
  if (v20)
  {
    v21 = v20;
    if ((a2 - 11) < 0xF7u || (a3 & 1) != 0)
    {
      v22 = one-time initialization token for exerciseGreen;
      v21 = v20;
      if (v22 != -1)
        swift_once(&one-time initialization token for exerciseGreen, one-time initialization function for exerciseGreen);
      v23 = (void *)static MOSuggestionTheme.Colors.exerciseGreen;
      v24 = objc_msgSend((id)static MOSuggestionTheme.Colors.exerciseGreen, "colorWithAlphaComponent:", 0.18, v33);
      v25 = UIImage.fitnessTintAndPill(with:backgroundColor:symbolCenteringOffset:assetSize:)(v23, v24, a2, 0.0);

      if (v25)
      {

        v21 = v25;
      }
      else
      {
        v20 = (CGContext *)a5(0);
      }
    }
    v29 = Logger.logObject.getter(v20);
    v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "[Assets] Packed asset for system image", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    v32 = v21;
    a5(v21);

    v19 = v32;
  }
  else
  {
    v26 = Logger.logObject.getter(0);
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v28 = 134217984;
      v34 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v28 + 4);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "[Assets] Unable to fetch system image for workoutType:%lu", v28, 0xCu);
      swift_slowDealloc(v28, -1, -1);
    }

    a5(0);
  }

}

uint64_t type metadata accessor for MOSuggestionAssetSystemIconImageProvider()
{
  return objc_opt_self(_TtC16MomentsUIService40MOSuggestionAssetSystemIconImageProvider);
}

ValueMetadata *type metadata accessor for MOSuggestionAssetSystemIconImageFetcherConstants()
{
  return &type metadata for MOSuggestionAssetSystemIconImageFetcherConstants;
}

uint64_t specialized MOSuggestionAssetSystemIconImageProvider.getAssetFor(workoutType:size:renderGlyph:isIndoors:completion:)(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(id), uint8_t *a16)
{
  uint64_t v20;
  NSMutableDictionary *clientConnections;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  CGContext *v28;
  uint8_t *v29;
  CGContext *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  CGContext *v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  CGContext *v51;
  CGContext *v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  void *v65;
  id v66;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[24];

  v20 = a10;
  clientConnections = serverManager._clientConnections;
  swift_retain_n(a16);
  swift_retain_n(a6);
  swift_retain_n(a8);
  swift_retain_n(a9);
  swift_retain_n(a10);
  swift_retain_n(a12);
  swift_retain_n(a13);
  swift_retain_n(a14);
  if (clientConnections != (NSMutableDictionary *)-1)
    swift_once(&serverManager._clientConnections, one-time initialization function for shared);
  v70 = a6;
  v22 = type metadata accessor for Logger(0);
  v23 = __swift_project_value_buffer(v22, (uint64_t)static MOAngelLogger.shared);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.debug.getter();
  v69 = a8;
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc(18, -1);
    *(_DWORD *)v26 = 134218240;
    v71 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v26 + 4);
    *(_WORD *)(v26 + 12) = 1024;
    LODWORD(v71) = a4 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 4, v26 + 14);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "[workoutIcon] workoutType=%lu, isIndoor=%{BOOL}d", (uint8_t *)v26, 0x12u);
    swift_slowDealloc(v26, -1, -1);
  }

  v27 = a14;
  v66 = objc_msgSend((id)objc_opt_self(FIUIWorkoutActivityType), "activityTypeWithHKWorkoutActivityTypeIdentifier:isIndoor:metadata:", a1, a4 & 1, 0);
  v28 = (CGContext *)(id)FIUIStaticScalableWorkoutIconImage();
  v29 = a16;
  if (v28)
  {
    v30 = v28;
    if ((a2 - 11) < 0xF7u || (a3 & 1) != 0)
    {
      v44 = one-time initialization token for exerciseGreen;
      v30 = v28;
      if (v44 != -1)
        swift_once(&one-time initialization token for exerciseGreen, one-time initialization function for exerciseGreen);
      v45 = (void *)static MOSuggestionTheme.Colors.exerciseGreen;
      v46 = objc_msgSend((id)static MOSuggestionTheme.Colors.exerciseGreen, "colorWithAlphaComponent:", 0.18);
      v47 = UIImage.fitnessTintAndPill(with:backgroundColor:symbolCenteringOffset:assetSize:)(v45, v46, a2, 0.0);

      if (v47)
      {
        v31 = a12;

        v30 = v47;
      }
      else
      {
        swift_retain(a16);
        swift_retain(a6);
        swift_retain(v69);
        swift_retain(a9);
        swift_retain(a10);
        swift_retain(a12);
        swift_retain(a13);
        swift_retain(a14);
        specialized closure #1 in MOSuggestionAssetCacheManager.fetchAndCacheWorkoutObjectFromProvider(_:cacheType:completion:)(a6, a7, v69, a9, a10, a11, a12, a13, a14, a15, a16);
        swift_release(a16);
        swift_release(a14);
        swift_release(a13);
        v31 = a12;
        swift_release(a12);
        swift_release(a10);
        swift_release(a9);
        swift_release(v69);
        v29 = a16;
        swift_release(v70);
      }
    }
    else
    {
      v31 = a12;
    }
    v41 = a10;
    v48 = Logger.logObject.getter(v28);
    v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "[Assets] Packed asset for system image", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }

    swift_beginAccess(a5 + 16, &v71, 1, 0);
    v65 = *(void **)(a5 + 16);
    *(_QWORD *)(a5 + 16) = v30;
    swift_retain_n(v29);
    v51 = v30;
    v38 = v70;
    swift_retain(v70);
    v40 = v69;
    swift_retain(v69);
    v42 = a9;
    swift_retain(a9);
    swift_retain(a10);
    swift_retain(v31);
    swift_retain(a13);
    v27 = a14;
    swift_retain(a14);
    v52 = v51;

    specialized closure #1 in MOSuggestionAssetCacheManager.fetchAndCacheWorkoutObjectFromProvider(_:cacheType:completion:)(v70, a7, v69, a9, a10, a11, v31, a13, a14, a15, v29);
    swift_release(a5);

    swift_release(a14);
    swift_release(a13);
    v39 = v31;
    v43 = v70;
    v37 = (uint64_t)v29;
    v36 = (uint64_t)v29;
  }
  else
  {
    v32 = Logger.logObject.getter(0);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v34 = 134217984;
      v29 = a16;
      v71 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v34 + 4);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "[Assets] Unable to fetch system image for workoutType:%lu", v34, 0xCu);
      v35 = v34;
      v27 = a14;
      swift_slowDealloc(v35, -1, -1);
    }

    swift_retain(v29);
    v36 = a6;
    swift_retain(a6);
    v37 = v69;
    swift_retain(v69);
    v38 = a9;
    swift_retain(a9);
    swift_retain(a10);
    swift_retain(a12);
    swift_retain(a13);
    swift_retain(v27);
    specialized closure #1 in MOSuggestionAssetCacheManager.fetchAndCacheWorkoutObjectFromProvider(_:cacheType:completion:)(a6, a7, v69, a9, a10, a11, a12, a13, v27, a15, v29);
    swift_release(a5);

    v39 = (uint64_t)v29;
    v40 = a12;
    v41 = a10;
    v20 = v27;
    v42 = a13;
    v43 = a10;
  }
  swift_release(v39);
  swift_release(v20);
  swift_release(v42);
  swift_release(v40);
  swift_release(v43);
  swift_release(v38);
  v53 = swift_release(v37);
  swift_release_n(v36, v53);
  swift_release_n(v29, v54);
  swift_release_n(v70, v55);
  swift_release_n(v27, v56);
  swift_release_n(a13, v57);
  swift_release_n(a12, v58);
  swift_release_n(v41, v59);
  swift_release_n(a9, v60);
  return swift_release_n(v69, v61);
}

void specialized MOSuggestionAssetSystemIconImageProvider.getAssetFor(workoutType:size:renderGlyph:isIndoors:completion:)(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  CGContext *v21;
  CGContext *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  void *v27;
  id v28;
  CGContext *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  CGContext *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[16];

  if (serverManager._clientConnections != (NSMutableDictionary *)-1)
    swift_once(&serverManager._clientConnections, one-time initialization function for shared);
  v12 = type metadata accessor for Logger(0);
  v13 = __swift_project_value_buffer(v12, (uint64_t)static MOAngelLogger.shared);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = a2;
    v17 = a3;
    v18 = swift_slowAlloc(18, -1);
    *(_DWORD *)v18 = 134218240;
    v39 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v18 + 4);
    *(_WORD *)(v18 + 12) = 1024;
    LODWORD(v39) = a4 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, (char *)&v39 + 4, v18 + 14);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "[workoutIcon] workoutType=%lu, isIndoor=%{BOOL}d", (uint8_t *)v18, 0x12u);
    v19 = v18;
    a3 = v17;
    a2 = v16;
    swift_slowDealloc(v19, -1, -1);
  }

  v20 = objc_msgSend((id)objc_opt_self(FIUIWorkoutActivityType), "activityTypeWithHKWorkoutActivityTypeIdentifier:isIndoor:metadata:", a1, a4 & 1, 0);
  v21 = (CGContext *)(id)FIUIStaticScalableWorkoutIconImage();
  if (v21)
  {
    v22 = v21;
    if ((a2 - 11) < 0xF7u || (a3 & 1) != 0)
    {
      v26 = one-time initialization token for exerciseGreen;
      v22 = v21;
      if (v26 != -1)
        swift_once(&one-time initialization token for exerciseGreen, one-time initialization function for exerciseGreen);
      v27 = (void *)static MOSuggestionTheme.Colors.exerciseGreen;
      v28 = objc_msgSend((id)static MOSuggestionTheme.Colors.exerciseGreen, "colorWithAlphaComponent:", 0.18);
      v29 = UIImage.fitnessTintAndPill(with:backgroundColor:symbolCenteringOffset:assetSize:)(v27, v28, a2, 0.0);

      if (v29)
      {

        v22 = v29;
      }
      else
      {
        v21 = (CGContext *)closure #1 in closure #1 in closure #5 in MOSuggestionAssetCacheManager.fetchAndCacheCombinedWorkoutObjectsFromProviders(_:cacheType:completion:)(0, a5, a6);
      }
    }
    v30 = Logger.logObject.getter(v21);
    v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "[Assets] Packed asset for system image", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    swift_beginAccess(a5 + 16, &v39, 33, 0);
    v33 = v22;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v33);
    v34 = *(_QWORD *)(a5 + 16) & 0xFFFFFFFFFFFFFF8;
    v36 = *(_QWORD *)(v34 + 0x10);
    v35 = *(_QWORD *)(v34 + 24);
    if (v36 >= v35 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
    v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v33);
    specialized Array._endMutation()(v37);
    v38 = swift_endAccess(&v39);
    a6(v38);

  }
  else
  {
    v23 = Logger.logObject.getter(0);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v25 = 134217984;
      v39 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v25 + 4);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "[Assets] Unable to fetch system image for workoutType:%lu", v25, 0xCu);
      swift_slowDealloc(v25, -1, -1);
    }

    ((void (*)(void))a6)();
  }

}

