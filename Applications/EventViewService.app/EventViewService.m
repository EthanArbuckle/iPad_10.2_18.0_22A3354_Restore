uint64_t sub_100002D2C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;

  KeyPath = swift_getKeyPath(&unk_10010A010);
  v2 = swift_getKeyPath(&unk_10010A038);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_100002D90()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10010A058);
  v2 = swift_getKeyPath(&unk_10010A080);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100002E00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v4 = sub_100003E70(&qword_10015D168);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003E70(&qword_10015CFD0);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_10010A010);
  v12 = swift_getKeyPath(&unk_10010A038);
  static Published.subscript.getter(v2, KeyPath, v12);
  swift_release(KeyPath);
  v13 = swift_release(v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v5 + 48))(v10, 1, v4, v13))
  {
    sub_10000403C((uint64_t)v10);
    v14 = type metadata accessor for Venue(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
    sub_10000403C((uint64_t)v10);
    VenueSchedule.venue.getter(v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v16 = type metadata accessor for Venue(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a1, 0, 1, v16);
  }
}

uint64_t sub_100002F90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_100003E70(&qword_10015CFD0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[7] = swift_task_alloc(v4);
  v3[8] = swift_task_alloc(v4);
  v3[9] = swift_task_alloc(v4);
  v5 = type metadata accessor for MainActor(0);
  v3[10] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v3[11] = v6;
  v3[12] = v7;
  return swift_task_switch(sub_100003040, v6, v7);
}

uint64_t sub_100003040()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = v0[8];
  v1 = v0[9];
  v3 = v0[6];
  v4 = sub_100003E70(&qword_10015D168);
  v0[13] = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v0[14] = v5;
  v5(v1, 1, 1, v4);
  KeyPath = swift_getKeyPath(&unk_10010A010);
  v7 = swift_getKeyPath(&unk_10010A038);
  sub_100003FF4(v1, v2);
  swift_retain(v3);
  static Published.subscript.setter(v2, v3, KeyPath, v7);
  sub_10000403C(v1);
  v8 = swift_getKeyPath(&unk_10010A058);
  v9 = swift_getKeyPath(&unk_10010A080);
  v0[2] = 0;
  swift_retain(v3);
  static Published.subscript.setter(v0 + 2, v3, v8, v9);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to static Venue.schedule(id:)[1]);
  v0[15] = v10;
  *v10 = v0;
  v10[1] = sub_100003170;
  return static Venue.schedule(id:)(v0[7], v0[4], v0[5]);
}

uint64_t sub_100003170()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100003298;
  else
    v4 = sub_1000031D0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
}

uint64_t sub_1000031D0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v0 + 112);
  v3 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = swift_release(*(_QWORD *)(v0 + 80));
  v2(v4, 0, 1, v1, v6);
  KeyPath = swift_getKeyPath(&unk_10010A010);
  v8 = swift_getKeyPath(&unk_10010A038);
  sub_100003FF4(v4, v3);
  swift_retain(v5);
  static Published.subscript.setter(v3, v5, KeyPath, v8);
  sub_10000403C(v4);
  v9 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100003298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 80));
  KeyPath = swift_getKeyPath(&unk_10010A058);
  v4 = swift_getKeyPath(&unk_10010A080);
  *(_QWORD *)(v0 + 24) = v1;
  swift_retain(v2);
  static Published.subscript.setter(v0 + 24, v2, KeyPath, v4);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100003340()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC16EventViewService15VenueController__schedule;
  v2 = sub_100003E70(&qword_10015D110);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC16EventViewService15VenueController__error;
  v4 = sub_100003E70(&qword_10015D118);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000033C0()
{
  return type metadata accessor for VenueController(0);
}

uint64_t type metadata accessor for VenueController(uint64_t a1)
{
  uint64_t result;

  result = qword_10015CFB8;
  if (!qword_10015CFB8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for VenueController);
  return result;
}

void sub_100003404(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_1000034F0(319, &qword_10015CFC8, &qword_10015CFD0);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000034F0(319, &qword_10015CFD8, (uint64_t *)&unk_10015CFE0);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 2, v6, a1 + 80);
    }
  }
}

uint64_t sub_1000034AC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void sub_1000034F0(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_1000034AC(a3);
    v6 = type metadata accessor for Published(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void type metadata accessor for ASCAppState(uint64_t a1)
{
  sub_100004298(a1, &qword_10015D068, (uint64_t)&unk_10014C1B8);
}

__n128 initializeWithTake for Tab.Style(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_100004298(a1, &qword_10015D070, (uint64_t)&unk_10014C238);
}

void type metadata accessor for EKEventEditViewAction(uint64_t a1)
{
  sub_100004298(a1, &qword_10015D078, (uint64_t)&unk_10014C260);
}

uint64_t getEnumTagSinglePayload for ConditionalFrameModifier.Size(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConditionalFrameModifier.Size(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
  sub_100004298(a1, &qword_10015D080, (uint64_t)&unk_10014C2D8);
}

uint64_t sub_1000035E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v19 = sub_100003E70(&qword_10015D118);
  v1 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003E70(&qword_10015D110);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003E70(&qword_10015CFD0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v19 - v12;
  v14 = v0 + OBJC_IVAR____TtC16EventViewService15VenueController__schedule;
  v15 = sub_100003E70(&qword_10015D168);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v13, 1, 1, v15);
  sub_100003FF4((uint64_t)v13, (uint64_t)v11);
  Published.init(initialValue:)(v11, v8);
  sub_10000403C((uint64_t)v13);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v14, v7, v4);
  v16 = v0 + OBJC_IVAR____TtC16EventViewService15VenueController__error;
  v20 = 0;
  v17 = sub_100003E70((uint64_t *)&unk_10015CFE0);
  Published.init(initialValue:)(&v20, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v16, v3, v19);
  return v0;
}

uint64_t sub_1000037A4@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = ObservableObject<>.objectWillChange.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1000037CC(uint64_t a1, uint64_t a2)
{
  return sub_100003D4C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000037EC(uint64_t a1, uint64_t a2)
{
  return sub_100003D4C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000037FC@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100003828(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_10000389C(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100003918@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

uint64_t sub_100003958(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100003B3C(&qword_10015D218, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_10010A4E4);
  v3 = sub_100003B3C(&qword_10015D220, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_10010A444);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000039DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100003B3C(&qword_10015D228, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey, (uint64_t)&unk_10010A524);
  v3 = sub_100003B3C(&qword_10015D230, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey, (uint64_t)&unk_10010A344);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100003A60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100003B3C(&qword_10015D0A0, (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState, (uint64_t)&unk_100109BEC);
  v3 = sub_100003B3C(&qword_10015D0A8, (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState, (uint64_t)&unk_100109B8C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100003AE4()
{
  return sub_100003B3C(&qword_10015D088, (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState, (uint64_t)&unk_100109B50);
}

uint64_t sub_100003B10()
{
  return sub_100003B3C(&qword_10015D090, (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState, (uint64_t)&unk_100109B24);
}

uint64_t sub_100003B3C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100003B7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100003B3C(&qword_10015D1C0, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_10010A1AC);
  v3 = sub_100003B3C(&qword_10015D1C8, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_10010A154);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100003C00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100003B3C(&qword_10015D170, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100109F84);
  v3 = sub_100003B3C(&qword_10015D178, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100109ED8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100003C84@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100003CC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100003B3C((unint64_t *)&unk_100165350, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_100109FC8);
  v3 = sub_100003B3C(&qword_10015D180, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_100109DB8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100003D4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100003D88(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100003DC8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100003E38()
{
  return sub_100003B3C(&qword_10015D098, (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState, (uint64_t)&unk_100109BC0);
}

void *sub_100003E64()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_100003E70(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_100004298(a1, &qword_10015D120, (uint64_t)&unk_10014C300);
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
  sub_100004298(a1, &qword_10015D128, (uint64_t)&unk_10014C328);
}

void type metadata accessor for OpenExternalURLOptionsKey(uint64_t a1)
{
  sub_100004298(a1, &qword_10015D130, (uint64_t)&unk_10014C350);
}

uint64_t sub_100003EEC()
{
  return sub_100003B3C(&qword_10015D138, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_100109D7C);
}

uint64_t sub_100003F18()
{
  return sub_100003B3C(&qword_10015D140, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_100109D50);
}

uint64_t sub_100003F44()
{
  return sub_100003B3C(&qword_10015D148, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100109E9C);
}

uint64_t sub_100003F70()
{
  return sub_100003B3C(&qword_10015D150, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100109E70);
}

uint64_t sub_100003F9C()
{
  return sub_100003B3C(&qword_10015D158, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100109F0C);
}

uint64_t sub_100003FC8()
{
  return sub_100003B3C(&qword_10015D160, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_100109DEC);
}

uint64_t sub_100003FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015CFD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000403C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003E70(&qword_10015CFD0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for PaddingModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for EmptyEventsList(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000040C8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000040E8(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_100004298(a1, &qword_10015D190, (uint64_t)&unk_10014C3D0);
}

void type metadata accessor for Style(uint64_t a1)
{
  sub_100004298(a1, &qword_10015D198, (uint64_t)&unk_10014C3F8);
}

void type metadata accessor for ActivityType(uint64_t a1)
{
  sub_100004298(a1, &qword_10015D1A0, (uint64_t)&unk_10014C418);
}

uint64_t sub_100004150()
{
  return sub_100003B3C(&qword_10015D1A8, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_10010A11C);
}

uint64_t sub_10000417C()
{
  return sub_100003B3C(&qword_10015D1B0, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_10010A0F4);
}

uint64_t sub_1000041A8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100004230()
{
  return sub_100003B3C(&qword_10015D1B8, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_10010A184);
}

void type metadata accessor for DocumentAttributeKey(uint64_t a1)
{
  sub_100004298(a1, &qword_10015D1D0, (uint64_t)&unk_10014C440);
}

void type metadata accessor for DocumentReadingOptionKey(uint64_t a1)
{
  sub_100004298(a1, &qword_10015D1D8, (uint64_t)&unk_10014C468);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_100004298(a1, &qword_10015D1E0, (uint64_t)&unk_10014C4E8);
}

void sub_100004298(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1000042DC()
{
  return sub_100003B3C(&qword_10015D1E8, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey, (uint64_t)&unk_10010A30C);
}

uint64_t sub_100004308()
{
  return sub_100003B3C(&qword_10015D1F0, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey, (uint64_t)&unk_10010A2E4);
}

uint64_t sub_100004334()
{
  return sub_100003B3C(&qword_10015D1F8, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_10010A40C);
}

uint64_t sub_100004360()
{
  return sub_100003B3C(&qword_10015D200, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_10010A3E4);
}

uint64_t sub_10000438C()
{
  return sub_100003B3C(&qword_10015D208, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_10010A474);
}

uint64_t sub_1000043B8()
{
  return sub_100003B3C(&qword_10015D210, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey, (uint64_t)&unk_10010A374);
}

uint64_t sub_1000043F4()
{
  return sub_100003B3C(&qword_10015D238, (uint64_t (*)(uint64_t))&type metadata accessor for Artwork, (uint64_t)&unk_10010A800);
}

uint64_t sub_10000442C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100003B3C(&qword_10015D280, (uint64_t (*)(uint64_t))&type metadata accessor for Artist, (uint64_t)&protocol conformance descriptor for Artist);
  result = sub_100003B3C(&qword_10015D288, (uint64_t (*)(uint64_t))&type metadata accessor for Artist, (uint64_t)&protocol conformance descriptor for Artist);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for Blur()
{
  return &type metadata for Blur;
}

void *sub_100004498()
{
  return &protocol witness table for Never;
}

id sub_1000044A4()
{
  _QWORD *v0;
  id v1;
  id v2;

  v1 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", *v0);
  v2 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v1);

  return v2;
}

void sub_100004510(void *a1)
{
  _QWORD *v1;
  id v3;

  v3 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", *v1);
  objc_msgSend(a1, "setEffect:", v3);

}

uint64_t sub_100004588(uint64_t a1, char a2)
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)(a1, a2 & 1);
}

uint64_t sub_1000045C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000046EC();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100004618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000046EC();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100004668()
{
  return static View._viewListCount(inputs:)();
}

void sub_100004680(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000046EC();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_1000046A8()
{
  unint64_t result;

  result = qword_10015D290;
  if (!qword_10015D290)
  {
    result = swift_getWitnessTable(&unk_10010A5D8, &type metadata for Blur);
    atomic_store(result, (unint64_t *)&qword_10015D290);
  }
  return result;
}

unint64_t sub_1000046EC()
{
  unint64_t result;

  result = qword_10015D298;
  if (!qword_10015D298)
  {
    result = swift_getWitnessTable(&unk_10010A628, &type metadata for Blur);
    atomic_store(result, (unint64_t *)&qword_10015D298);
  }
  return result;
}

uint64_t sub_100004730()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10010A7A8);
  v2 = swift_getKeyPath(&unk_10010A7D0);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1000047A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  _QWORD v34[2];

  v33 = a6;
  v32 = a5;
  v11 = sub_100003E70(&qword_10015D3A0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)(v6 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shazamItemID);
  *v15 = 0x3534333939343832;
  v15[1] = 0xE900000000000039;
  v16 = (_QWORD *)(v6 + OBJC_IVAR____TtC16EventViewService12AppViewModel_productVariantID);
  *v16 = 0xD000000000000024;
  v16[1] = 0x8000000100115010;
  v17 = v6 + OBJC_IVAR____TtC16EventViewService12AppViewModel_subheaderTitle;
  *(_QWORD *)v17 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002ELL, 0x8000000100115040);
  *(_QWORD *)(v17 + 8) = v18;
  *(_BYTE *)(v17 + 16) = v19 & 1;
  *(_QWORD *)(v17 + 24) = v20;
  v21 = v6 + OBJC_IVAR____TtC16EventViewService12AppViewModel_descriptionTitle;
  *(_QWORD *)v21 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000030, 0x8000000100115070);
  *(_QWORD *)(v21 + 8) = v22;
  *(_BYTE *)(v21 + 16) = v23 & 1;
  *(_QWORD *)(v21 + 24) = v24;
  v25 = v6 + OBJC_IVAR____TtC16EventViewService12AppViewModel__metricsQuery;
  v34[0] = 0;
  v34[1] = 0;
  v26 = sub_100003E70((uint64_t *)&unk_100160CB0);
  Published.init(initialValue:)(v34, v26);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v25, v14, v11);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v27 = v6 + OBJC_IVAR____TtC16EventViewService12AppViewModel_eventURL;
  v28 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v27, a3, v28);
  v29 = (_QWORD *)(v6 + OBJC_IVAR____TtC16EventViewService12AppViewModel_queryAppID);
  v30 = v32;
  *v29 = a4;
  v29[1] = v30;
  *(_BYTE *)(v6 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shouldShowDiscoveryDetail) = v33;
  return v6;
}

uint64_t sub_100004988()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[24] = v0;
  v1[25] = *v0;
  v2 = type metadata accessor for URLComponents(0);
  v1[26] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[27] = v3;
  v1[28] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MainActor(0);
  v1[29] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v1[30] = v5;
  v1[31] = v6;
  return swift_task_switch(sub_100004A24, v5, v6);
}

uint64_t sub_100004A24()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(*(_QWORD *)(v0 + 200));
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v3 = objc_msgSend(v2, "bundleIdentifier");

  if (v3)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v5;

  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100163F78 + dword_100163F78);
  v7 = (_QWORD *)swift_task_alloc(unk_100163F7C);
  *(_QWORD *)(v0 + 256) = v7;
  *v7 = v0;
  v7[1] = sub_100004B0C;
  return v9(v0 + 16, v4, v6);
}

uint64_t sub_100004B0C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 256));
  return swift_task_switch(sub_100004B58, *(_QWORD *)(v1 + 240), *(_QWORD *)(v1 + 248));
}

uint64_t sub_100004B58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v1 = v0 + 16;
  swift_release(*(_QWORD *)(v0 + 232));
  sub_1000054F0(v0 + 32, v0 + 80);
  sub_1000054F0(v0 + 80, v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  if (v2 && (v3 = *(_QWORD *)(v0 + 56)) != 0)
  {
    v4 = *(_QWORD *)(v0 + 160);
    v5 = *(_QWORD *)(v0 + 48);
    v6 = sub_100003E70(&qword_10015D3B0);
    v7 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
    v8 = (_OWORD *)swift_allocObject(v6, ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ 2 * *(_QWORD *)(v7 + 72), *(unsigned __int8 *)(v7 + 80) | 7);
    v8[1] = xmmword_10010A6C0;
    if (qword_10015CEF0 != -1)
      swift_once(&qword_10015CEF0, sub_1000D5DD4);
    URLQueryItem.init(name:value:)(qword_100163F58, unk_100163F60, v4, v2);
    if (qword_10015CEF8 != -1)
      swift_once(&qword_10015CEF8, sub_1000D5DEC);
    URLQueryItem.init(name:value:)(qword_100163F68, unk_100163F70, v5, v3);
  }
  else
  {
    v8 = &_swiftEmptyArrayStorage;
  }
  v9 = *((_QWORD *)v8 + 2);
  v10 = swift_bridgeObjectRelease(v8);
  if (v9)
  {
    URLComponents.init()(v10);
    sub_1000054F0(v0 + 80, v0 + 64);
    v11 = *(_QWORD *)(v0 + 72);
    if (v11 && (v12 = *(_QWORD *)(v0 + 56)) != 0)
    {
      v27 = *(_QWORD *)(v0 + 64);
      v28 = *(_QWORD *)(v0 + 48);
      v13 = sub_100003E70(&qword_10015D3B0);
      v14 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
      v15 = (_OWORD *)swift_allocObject(v13, ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ 2 * *(_QWORD *)(v14 + 72), *(unsigned __int8 *)(v14 + 80) | 7);
      v15[1] = xmmword_10010A6C0;
      if (qword_10015CEF0 != -1)
        swift_once(&qword_10015CEF0, sub_1000D5DD4);
      URLQueryItem.init(name:value:)(qword_100163F58, unk_100163F60, v27, v11);
      v1 = v0 + 16;
      if (qword_10015CEF8 != -1)
        swift_once(&qword_10015CEF8, sub_1000D5DEC);
      URLQueryItem.init(name:value:)(qword_100163F68, unk_100163F70, v28, v12);
    }
    else
    {
      v15 = &_swiftEmptyArrayStorage;
    }
    v17 = *(_QWORD *)(v0 + 216);
    v16 = *(_QWORD *)(v0 + 224);
    v18 = *(_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 192);
    sub_1000054F0(v1, v0 + 96);
    sub_100005538(v0 + 96);
    sub_100005538(v0 + 80);
    sub_1000054F0(v0 + 48, v0 + 112);
    sub_100005538(v0 + 112);
    v20 = URLComponents.queryItems.setter(v15);
    v21 = URLComponents.percentEncodedQuery.getter(v20);
    v23 = v22;
    KeyPath = swift_getKeyPath(&unk_10010A7A8);
    v25 = swift_getKeyPath(&unk_10010A7D0);
    *(_QWORD *)(v0 + 176) = v21;
    *(_QWORD *)(v0 + 184) = v23;
    swift_retain(v19);
    static Published.subscript.setter(v0 + 176, v19, KeyPath, v25);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  else
  {
    sub_1000054F0(v0 + 16, v0 + 128);
    sub_100005538(v0 + 128);
    sub_100005538(v0 + 80);
    sub_1000054F0(v0 + 48, v0 + 144);
    sub_100005538(v0 + 144);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100004EF4(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  ValueWitnessTable *v21;
  uint64_t v22;
  char *v23;
  NSString v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  void **aBlock;
  uint64_t v30;
  Class (*v31)(uint64_t);
  ValueMetadata *v32;
  _QWORD *(*v33)();
  _QWORD *v34;
  char *v35;

  v9 = sub_100003E70(&qword_10015D3B8);
  v10 = swift_allocObject(v9, 192, 7);
  *(_OWORD *)(v10 + 16) = xmmword_10010A6D0;
  v12 = *(_QWORD *)(v4 + 16);
  v11 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v10 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v10 + 64) = &off_100162E68;
  *(_BYTE *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = v12;
  *(_QWORD *)(v10 + 48) = v11;
  *(_QWORD *)(v10 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v10 + 104) = &off_100162E40;
  *(_BYTE *)(v10 + 72) = 0;
  *(_QWORD *)(v10 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v10 + 144) = &off_100162EC8;
  *(_BYTE *)(v10 + 112) = 6;
  *(_QWORD *)(v10 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v10 + 184) = &off_100162EA0;
  *(_QWORD *)(v10 + 152) = a1;
  *(_QWORD *)(v10 + 160) = a2;
  *(_BYTE *)(v10 + 168) = a3;
  v13 = *(_QWORD *)(a4 + 72);
  if (v13)
  {
    v14 = *(_QWORD *)(a4 + 64);
    v15 = *(_QWORD *)(a4 + 72);
  }
  else
  {
    v14 = 0;
    v15 = 0xE000000000000000;
  }
  v32 = &type metadata for AnalyticsString;
  v33 = (_QWORD *(*)())&off_100162E68;
  LOBYTE(aBlock) = 1;
  v30 = v14;
  v31 = (Class (*)(uint64_t))v15;
  swift_bridgeObjectRetain(v11);
  sub_100005568(a1, a2, a3);
  v35 = (char *)v10;
  v17 = *(_QWORD *)(v10 + 16);
  v16 = *(_QWORD *)(v10 + 24);
  swift_bridgeObjectRetain(v13);
  if (v17 >= v16 >> 1)
    v35 = sub_1000F4CF4((char *)(v16 > 1), v17 + 1, 1, (char *)v10);
  v18 = sub_100005580((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v18);
  v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v21->initializeWithCopy)((uint64_t)v20, v22);
  sub_1000DAD34(v17, (uint64_t)v20, (uint64_t *)&v35, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_100162E68);
  sub_1000055A8(&aBlock);
  v23 = v35;
  v24 = String._bridgeToObjectiveC()();
  v25 = (_QWORD *)swift_allocObject(&unk_10014C6D8, 40, 7);
  v25[2] = 0xD00000000000001ELL;
  v25[3] = 0x80000001001150B0;
  v25[4] = v23;
  v33 = sub_1000055F4;
  v34 = v25;
  aBlock = _NSConcreteStackBlock;
  v30 = 1107296256;
  v31 = sub_1000DACC0;
  v32 = (ValueMetadata *)&unk_10014C6F0;
  v26 = _Block_copy(&aBlock);
  v27 = v34;
  swift_bridgeObjectRetain(v23);
  swift_release(v27);
  AnalyticsSendEventLazy(v24, v26);
  _Block_release(v26);
  swift_bridgeObjectRelease(v23);

}

uint64_t sub_100005188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC16EventViewService12AppViewModel_eventURL;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC16EventViewService12AppViewModel_queryAppID + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shazamItemID + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC16EventViewService12AppViewModel_productVariantID + 8));
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16EventViewService12AppViewModel_subheaderTitle + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC16EventViewService12AppViewModel_subheaderTitle + 24));
  swift_bridgeObjectRelease(v3);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16EventViewService12AppViewModel_descriptionTitle + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC16EventViewService12AppViewModel_descriptionTitle + 24));
  swift_bridgeObjectRelease(v4);
  v5 = v0 + OBJC_IVAR____TtC16EventViewService12AppViewModel__metricsQuery;
  v6 = sub_100003E70(&qword_10015D3A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return v0;
}

uint64_t sub_10000527C()
{
  uint64_t v0;

  sub_100005188();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000052A0()
{
  return type metadata accessor for AppViewModel(0);
}

uint64_t type metadata accessor for AppViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10015D2D0;
  if (!qword_10015D2D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppViewModel);
  return result;
}

void sub_1000052E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  v6[0] = &unk_10010A710;
  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_10010A728;
    v6[3] = &unk_10010A740;
    v6[4] = &unk_10010A710;
    v6[5] = &unk_10010A710;
    v6[6] = &unk_10010A758;
    v6[7] = &unk_10010A758;
    sub_10000539C(319);
    if (v5 <= 0x3F)
    {
      v6[8] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 9, v6, a1 + 80);
    }
  }
}

void sub_10000539C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015D2E0)
  {
    v2 = sub_1000034AC((uint64_t *)&unk_100160CB0);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10015D2E0);
  }
}

double sub_1000053F4@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010A7A8);
  v5 = swift_getKeyPath(&unk_10010A7D0);
  static Published.subscript.getter(v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_100005470(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010A7A8);
  v6 = swift_getKeyPath(&unk_10010A7D0);
  v8[0] = v3;
  v8[1] = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  return static Published.subscript.setter(v8, v4, KeyPath, v6);
}

uint64_t sub_1000054F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70((uint64_t *)&unk_100160CB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100005538(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100005568(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_100005580(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1000055A8(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000055C8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

_QWORD *sub_1000055F4()
{
  uint64_t v0;

  return sub_1000E388C(v0 + 16);
}

uint64_t sub_1000055FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000560C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10000561C(uint64_t a1)
{
  unint64_t result;

  result = sub_100005640();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100005640()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D3C0;
  if (!qword_10015D3C0)
  {
    v1 = type metadata accessor for Artwork(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Artwork, v1);
    atomic_store(result, (unint64_t *)&qword_10015D3C0);
  }
  return result;
}

unint64_t destroy for Tab(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 2)
    return swift_bridgeObjectRelease(result);
  return result;
}

_QWORD *_s16EventViewService3TabVwCP_0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;

  v3 = a2[1];
  if (v3 >= 2)
  {
    *a1 = *a2;
    a1[1] = v3;
    swift_bridgeObjectRetain(v3);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

_QWORD *assignWithCopy for Tab(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 >= 2)
  {
    if (v5 >= 2)
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease(v4);
      return a1;
    }
    sub_100005778((uint64_t)a1);
    goto LABEL_6;
  }
  if (v5 < 2)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t sub_100005778(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for String - 1) + 8))();
  return a1;
}

_QWORD *assignWithTake for Tab(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = a1[1];
  if (v4 >= 2)
  {
    v5 = a2[1];
    if (v5 >= 2)
    {
      *a1 = *a2;
      a1[1] = v5;
      swift_bridgeObjectRelease(v4);
      return a1;
    }
    sub_100005778((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for Tab(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Tab(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = a2 - 2147483646;
    *(_QWORD *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Tab()
{
  return &type metadata for Tab;
}

unint64_t sub_1000058C4()
{
  unint64_t result;

  result = qword_10015D3C8;
  if (!qword_10015D3C8)
  {
    result = swift_getWitnessTable(&unk_10010A888, &type metadata for Tab);
    atomic_store(result, (unint64_t *)&qword_10015D3C8);
  }
  return result;
}

uint64_t sub_100005908(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 7105633;
  if (a2)
    v2 = a1;
  if (a2 == 1)
    v3 = 0x4C746E6572727563;
  else
    v3 = v2;
  sub_100005FA0(a1, a2);
  return v3;
}

Swift::Int sub_100005970()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v5, 0);
  if (v2)
  {
    if (v2 != 1)
    {
      Hasher._combine(_:)(2uLL);
      String.hash(into:)(v5, v1, v2);
      return Hasher._finalize()();
    }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1000059EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  Swift::UInt v4;
  uint64_t v5;

  v3 = v1[1];
  if (!v3)
  {
    v4 = 0;
    goto LABEL_5;
  }
  if (v3 == 1)
  {
    v4 = 1;
LABEL_5:
    Hasher._combine(_:)(v4);
    return;
  }
  v5 = *v1;
  Hasher._combine(_:)(2uLL);
  String.hash(into:)(a1, v5, v3);
}

Swift::Int sub_100005A60(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;
  _QWORD v6[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v6, a1);
  if (v3)
  {
    if (v3 != 1)
    {
      Hasher._combine(_:)(2uLL);
      String.hash(into:)(v6, v2, v3);
      return Hasher._finalize()();
    }
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t sub_100005AD8()
{
  uint64_t v0;

  return sub_100005908(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t sub_100005AE0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;

  v3 = a1[1];
  v4 = a2[1];
  if (!v3)
    return !v4;
  if (v3 == 1)
    return v4 == 1;
  if (v4 < 2)
    return 0;
  v6 = *a1;
  if (v6 != *a2 || v3 != v4)
    return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v3, *a2, v4, 0);
  return 1;
}

Swift::Int sub_100005B40()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v5, 0);
  if (v2)
  {
    if (v2 != 1)
    {
      Hasher._combine(_:)(2uLL);
      swift_bridgeObjectRetain(v2);
      String.hash(into:)(v5, v1, v2);
      sub_100005CE4(v1, v2);
      return Hasher._finalize()();
    }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_100005BD0(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v3;
  Swift::UInt v4;
  uint64_t v5;

  v3 = v1[1];
  if (!v3)
  {
    v4 = 0;
    goto LABEL_5;
  }
  if (v3 == 1)
  {
    v4 = 1;
LABEL_5:
    Hasher._combine(_:)(v4);
    return;
  }
  v5 = *v1;
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v5, v3);
  sub_100005CE4(v5, v3);
}

Swift::Int sub_100005C58(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  Swift::UInt v4;
  _QWORD v6[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v6, a1);
  if (v3)
  {
    if (v3 != 1)
    {
      Hasher._combine(_:)(2uLL);
      swift_bridgeObjectRetain(v3);
      String.hash(into:)(v6, v2, v3);
      sub_100005CE4(v2, v3);
      return Hasher._finalize()();
    }
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t sub_100005CE4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRelease(a2);
  return result;
}

unint64_t destroy for Tab.Style(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s16EventViewService3TabV5StyleOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

_QWORD *assignWithCopy for Tab.Style(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for Tab.Style(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Tab.Style(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Tab.Style(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t sub_100005F0C(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_100005F28(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Tab.Style()
{
  return &type metadata for Tab.Style;
}

unint64_t sub_100005F5C()
{
  unint64_t result;

  result = qword_10015D3D0;
  if (!qword_10015D3D0)
  {
    result = swift_getWitnessTable(&unk_10010A8B8, &type metadata for Tab.Style);
    atomic_store(result, (unint64_t *)&qword_10015D3D0);
  }
  return result;
}

uint64_t sub_100005FA0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t destroy for PromotionalAssetsContentView(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

uint64_t *_s16EventViewService28PromotionalAssetsContentViewVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for PromotionalAssetsContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[2] = a2[2];
  return a1;
}

__n128 initializeWithTake for RemoteViewConfiguration.QueryItem(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for PromotionalAssetsContentView(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  a1[2] = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromotionalAssetsContentView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromotionalAssetsContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PromotionalAssetsContentView()
{
  return &type metadata for PromotionalAssetsContentView;
}

uint64_t sub_100006170(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118334, 1);
}

uint64_t sub_100006180@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  int *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD v138[4];

  v125 = a3;
  v127 = a2;
  v136 = a4;
  v123 = type metadata accessor for _TaskModifier(0);
  __chkstk_darwin(v123);
  v117 = (char *)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for TaskPriority(0);
  v119 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v122 = (char *)&v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_100003E70(&qword_10015D3D8);
  v7 = __chkstk_darwin(v135);
  v118 = (char *)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v121 = (uint64_t)&v116 - v9;
  v132 = sub_100003E70(&qword_10015D3E0);
  __chkstk_darwin(v132);
  v134 = (uint64_t)&v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_100003E70(&qword_10015D3E8);
  __chkstk_darwin(v129);
  v128 = (uint64_t *)((char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v133 = sub_100003E70(&qword_10015D3F0);
  __chkstk_darwin(v133);
  v131 = (char *)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100003E70(&qword_10015D3F8);
  v13 = __chkstk_darwin(v130);
  v15 = (char *)&v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v126 = (uint64_t)&v116 - v16;
  v17 = sub_100003E70(&qword_10015D400);
  __chkstk_darwin(v17);
  v19 = (char *)&v116 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ArtistPromotionalAssets(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v116 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v124 = (char *)&v116 - v25;
  KeyPath = swift_getKeyPath(&unk_10010A9C0);
  v138[0] = a1;
  v27 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v138, KeyPath, v27);
  swift_release(KeyPath);
  v28 = a1;
  v29 = a1 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess(a1 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets, v138, 0, 0);
  v30 = v29;
  v31 = v20;
  sub_100007ADC(v30, (uint64_t)v19, &qword_10015D400);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    v33 = v122;
    v32 = v123;
    sub_100008194((uint64_t)v19, &qword_10015D400);
    v34 = swift_getKeyPath(&unk_10010A9E8);
    v137 = v28;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v137, v34, v27);
    swift_release(v34);
    if (*(_QWORD *)(v28 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error)
      || (v35 = swift_getKeyPath(&unk_10010AA10),
          v137 = v28,
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v137, v35, v27),
          swift_release(v35),
          *(_QWORD *)(v28 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel)))
    {
      v36 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000027, 0x8000000100115120);
      v38 = v37;
      v40 = v39;
      v124 = v41;
      v42 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002ALL, 0x8000000100115150);
      v44 = v43;
      v46 = v45;
      v48 = v47;
      v49 = (_QWORD *)swift_allocObject(&unk_10014C980, 40, 7);
      v50 = v127;
      v49[2] = v28;
      v49[3] = v50;
      v49[4] = v125;
      v126 = v28;
      v52 = v128;
      v51 = v129;
      *v128 = v36;
      v52[1] = v38;
      v53 = v38;
      *((_BYTE *)v52 + 16) = v40 & 1;
      v54 = v124;
      v52[3] = (uint64_t)v124;
      v52[4] = v42;
      v52[5] = v44;
      *((_BYTE *)v52 + 48) = v46 & 1;
      v52[7] = v48;
      v52[8] = (uint64_t)sub_1000075E8;
      v52[10] = 0;
      v52[11] = 0;
      v52[9] = (uint64_t)v49;
      swift_storeEnumTagMultiPayload(v52, v51, 1);
      swift_retain(v50);
      v55 = v53;
      swift_bridgeObjectRetain(v53);
      v56 = v54;
      swift_bridgeObjectRetain(v54);
      v57 = v44;
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRetain(v48);
      swift_retain(v126);
      sub_1000075F4((uint64_t)sub_1000075E8, (uint64_t)v49);
      sub_1000075F4(0, 0);
      v58 = sub_100003E70(&qword_10015D438);
      v59 = sub_100007D40(&qword_10015D428, &qword_10015D3F8, (uint64_t)&unk_10010EFA8);
      v60 = sub_100007440();
      v61 = (uint64_t)v131;
      _ConditionalContent<>.init(storage:)(v52, v130, v58, v59, v60);
      v62 = v134;
      sub_100007ADC(v61, v134, &qword_10015D3F0);
      swift_storeEnumTagMultiPayload(v62, v132, 0);
      v63 = sub_1000073BC();
      v64 = sub_1000074F0();
      _ConditionalContent<>.init(storage:)(v62, v133, v135, v63, v64);
      sub_100008194(v61, &qword_10015D3F0);
      swift_bridgeObjectRelease(v48);
      swift_bridgeObjectRelease(v57);
      swift_bridgeObjectRelease(v56);
      swift_bridgeObjectRelease(v55);
      sub_100007604((uint64_t)sub_1000075E8, (uint64_t)v49);
      return sub_100007604(0, 0);
    }
    else
    {
      v131 = (char *)LocalizedStringKey.init(stringLiteral:)(0xD000000000000021, 0x80000001001150F0);
      v97 = v96;
      v99 = v98;
      v101 = v100;
      v102 = (_QWORD *)swift_allocObject(&unk_10014C958, 40, 7);
      v102[2] = v28;
      v103 = v127;
      v104 = v125;
      v102[3] = v127;
      v102[4] = v104;
      swift_retain(v103);
      v105 = swift_retain(v28);
      v106 = v33;
      static TaskPriority.userInitiated.getter(v105);
      v107 = v117;
      v108 = v119;
      v109 = v120;
      (*(void (**)(char *, char *, uint64_t))(v119 + 16))(&v117[*(int *)(v32 + 20)], v106, v120);
      *v107 = &unk_10015D418;
      v107[1] = v102;
      v110 = v135;
      v111 = (uint64_t)v118;
      sub_10000733C((uint64_t)v107, (uint64_t)&v118[*(int *)(v135 + 36)]);
      *(_QWORD *)v111 = v131;
      *(_QWORD *)(v111 + 8) = v97;
      *(_BYTE *)(v111 + 16) = v99 & 1;
      *(_QWORD *)(v111 + 24) = v101;
      swift_bridgeObjectRetain(v97);
      swift_bridgeObjectRetain(v101);
      sub_100007380((uint64_t)v107);
      (*(void (**)(char *, uint64_t))(v108 + 8))(v106, v109);
      swift_bridgeObjectRelease(v101);
      swift_bridgeObjectRelease(v97);
      v112 = v121;
      sub_100007A98(v111, v121, &qword_10015D3D8);
      v113 = v134;
      sub_100007ADC(v112, v134, &qword_10015D3D8);
      swift_storeEnumTagMultiPayload(v113, v132, 1);
      v114 = sub_1000073BC();
      v115 = sub_1000074F0();
      _ConditionalContent<>.init(storage:)(v113, v133, v110, v114, v115);
      return sub_100008194(v112, &qword_10015D3D8);
    }
  }
  else
  {
    v66 = v124;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v124, v19, v20);
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v24, v66, v20);
    v67 = sub_100003E70(&qword_10015D460);
    swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
    v68 = sub_1000076B4((uint64_t)v24);
    v69 = sub_100007D40(&qword_10015D468, &qword_10015D460, (uint64_t)&unk_100111F70);
    Bindable<A>.init(wrappedValue:)(v68, v67, v69);
    v70 = (int *)v130;
    v71 = &v15[*(int *)(v130 + 36)];
    v72 = sub_100003E70(&qword_10015D470);
    v73 = swift_allocObject(v72, 17, 7);
    *(_BYTE *)(v73 + 16) = 0;
    v74 = sub_100007D40(&qword_10015D478, &qword_10015D470, (uint64_t)&unk_1001101D4);
    *(_QWORD *)v71 = ObservedObject.init(wrappedValue:)(v73, v72, v74);
    *((_QWORD *)v71 + 1) = v75;
    v76 = &v15[v70[10]];
    v77 = type metadata accessor for RemoteViewConfiguration();
    v78 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    *(_QWORD *)v76 = EnvironmentObject.init()(v77, v78);
    *((_QWORD *)v76 + 1) = v79;
    v80 = &v15[v70[11]];
    *(_QWORD *)v80 = swift_getKeyPath(&unk_10010AA38);
    v81 = sub_100003E70(&qword_10015D488);
    swift_storeEnumTagMultiPayload(v80, v81, 0);
    v82 = &v15[v70[12]];
    *(_QWORD *)v82 = swift_getKeyPath(&unk_10010AA68);
    v83 = sub_100003E70(&qword_10015D490);
    swift_storeEnumTagMultiPayload(v82, v83, 0);
    v84 = &v15[v70[13]];
    *(_QWORD *)v84 = swift_getKeyPath(&unk_10010AA98);
    v85 = sub_100003E70(&qword_10015D498);
    swift_storeEnumTagMultiPayload(v84, v85, 0);
    v86 = &v15[v70[14]];
    *(_QWORD *)v86 = swift_getKeyPath(&unk_10010AAC8);
    swift_storeEnumTagMultiPayload(v86, v85, 0);
    v87 = v126;
    sub_100007A98((uint64_t)v15, v126, &qword_10015D3F8);
    v88 = v128;
    sub_100007ADC(v87, (uint64_t)v128, &qword_10015D3F8);
    swift_storeEnumTagMultiPayload(v88, v129, 0);
    v89 = sub_100003E70(&qword_10015D438);
    v90 = sub_100007D40(&qword_10015D428, &qword_10015D3F8, (uint64_t)&unk_10010EFA8);
    v91 = sub_100007440();
    v92 = (uint64_t)v131;
    _ConditionalContent<>.init(storage:)(v88, v70, v89, v90, v91);
    v93 = v134;
    sub_100007ADC(v92, v134, &qword_10015D3F0);
    swift_storeEnumTagMultiPayload(v93, v132, 0);
    v94 = sub_1000073BC();
    v95 = sub_1000074F0();
    _ConditionalContent<>.init(storage:)(v93, v133, v135, v94, v95);
    sub_100008194(v92, &qword_10015D3F0);
    sub_100008194(v87, &qword_10015D3F8);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v66, v31);
  }
}

uint64_t sub_100006C28(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(result + 32) == 1)
  {
    v4 = *(_QWORD *)(result + 24);
    if (a2)
    {
      v5 = *(_QWORD *)(result + 16);
      sub_100008214(v5, v4);
      swift_retain(a2);
      sub_1000DADAC(v5, v4, 9, a2);
      swift_release(a2);
      return sub_10000821C(v5, v4);
    }
    else
    {
      v7 = type metadata accessor for RemoteViewConfiguration();
      v8 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
      swift_bridgeObjectRetain(v4);
      result = EnvironmentObject.error()(0, a3, v7, v8);
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100006D04()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = type metadata accessor for MainActor(0);
  v0[2] = v1;
  v0[3] = static MainActor.shared.getter(v1);
  v2 = (_QWORD *)swift_task_alloc(dword_10015EEAC);
  v0[4] = v2;
  *v2 = v0;
  v2[1] = sub_100006D68;
  return sub_10003DCB8();
}

uint64_t sub_100006D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100006DD8, v2, v3);
}

uint64_t sub_100006DD8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100006E10@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100006180(*v1, v1[1], v1[2], a1);
}

uint64_t sub_100006E1C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010A9C0);
  v8[0] = v3;
  v5 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess(v3 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets, v8, 0, 0);
  return sub_100007ADC(v6, a2, &qword_10015D400);
}

uint64_t sub_100006ED4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v4 = sub_100003E70(&qword_10015D400);
  __chkstk_darwin(v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100007ADC(a1, (uint64_t)v6, &qword_10015D400);
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010A9C0);
  v12 = v7;
  v13 = v6;
  v14 = v7;
  v9 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_100008254, v11, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath);
  return sub_100008194((uint64_t)v6, &qword_10015D400);
}

uint64_t sub_100006FDC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010A9E8);
  v8 = v3;
  v5 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error);
  *a2 = v6;
  return swift_errorRetain(v6);
}

uint64_t sub_100007074(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010A9E8);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  swift_errorRetain(v2);
  v5 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10000823C, v7, (char *)&type metadata for () + 8, v5);
  swift_errorRelease(v2);
  return swift_release(KeyPath);
}

uint64_t sub_100007138@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010AA10);
  v8 = v3;
  v5 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel);
  *a2 = v6;
  return swift_retain(v6);
}

uint64_t sub_1000071D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010AA10);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100008224, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_100007294()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10015D414);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000072F4;
  return sub_100006D04();
}

uint64_t sub_1000072F4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10000733C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _TaskModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100007380(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for _TaskModifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000073BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D420;
  if (!qword_10015D420)
  {
    v1 = sub_1000034AC(&qword_10015D3F0);
    sub_100007D40(&qword_10015D428, &qword_10015D3F8, (uint64_t)&unk_10010EFA8);
    sub_100007440();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D420);
  }
  return result;
}

unint64_t sub_100007440()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D430;
  if (!qword_10015D430)
  {
    v1 = sub_1000034AC(&qword_10015D438);
    sub_1000074AC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D430);
  }
  return result;
}

unint64_t sub_1000074AC()
{
  unint64_t result;

  result = qword_10015D440;
  if (!qword_10015D440)
  {
    result = swift_getWitnessTable(&unk_10010D044, &type metadata for GenericErrorView);
    atomic_store(result, (unint64_t *)&qword_10015D440);
  }
  return result;
}

unint64_t sub_1000074F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D448;
  if (!qword_10015D448)
  {
    v1 = sub_1000034AC(&qword_10015D3D8);
    sub_100007574();
    sub_100003B3C(&qword_10015D458, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D448);
  }
  return result;
}

unint64_t sub_100007574()
{
  unint64_t result;

  result = qword_10015D450;
  if (!qword_10015D450)
  {
    result = swift_getWitnessTable(&unk_100113894, &type metadata for LoadingStateView);
    atomic_store(result, (unint64_t *)&qword_10015D450);
  }
  return result;
}

uint64_t sub_1000075BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000075E8()
{
  uint64_t *v0;

  return sub_100006C28(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000075F4(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_100007604(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_100007614()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_100007634(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100003E70(&qword_10015D4A0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007ADC(a1, (uint64_t)v4, &qword_10015D4A0);
  return EnvironmentValues.horizontalSizeClass.setter(v4);
}

_QWORD *sub_1000076B4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _OWORD *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[24];

  v2 = v1;
  v4 = sub_100003E70(&qword_10015D4A8);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_10015D4B0);
  __chkstk_darwin(v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003E70(&qword_10015D4B8);
  v42 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v39 - v14;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 112)) = 0;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 120)) = 0;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 128)) = 0;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 136)) = 0;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 144)) = 0;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 152)) = 0;
  v16 = (_OWORD *)((char *)v2 + *(_QWORD *)(*v2 + 160));
  *v16 = 0u;
  v16[1] = 0u;
  v17 = (char *)v2 + *(_QWORD *)(*v2 + 168);
  v18 = type metadata accessor for UserInterfaceSizeClass(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 176)) = 0;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 184)) = 0;
  v19 = (char *)v2 + *(_QWORD *)(*v2 + 192);
  *(_QWORD *)v19 = 0;
  v19[8] = 1;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 200)) = 0;
  v20 = (char *)v2 + *(_QWORD *)(*v2 + 208);
  v21 = type metadata accessor for PromotionalAssets.Video(0);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  ObservationRegistrar.init()(v22);
  v23 = (char *)v2 + *(_QWORD *)(*v2 + 104);
  v24 = type metadata accessor for ArtistPromotionalAssets(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 16))(v23, a1, v24);
  v27 = ArtistPromotionalAssets.eventWithPromotionalAssets.getter(v26);
  v43 = a1;
  ArtistPromotionalAssets.eventWithPromotionalAssets.getter(v27);
  v28 = sub_100003B3C(&qword_10015D4C0, (uint64_t (*)(uint64_t))&type metadata accessor for LiveMusic, (uint64_t)&protocol conformance descriptor for LiveMusic);
  Event<>.participants.getter(v10, v28);
  v29 = *(uint64_t (**)(char *, uint64_t))(v42 + 8);
  v42 = v10;
  v30 = v29(v13, v10);
  v31 = Participants<>.headliners.getter(v30);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v41);
  sub_10000DBA0(v31, (uint64_t)v9);
  swift_bridgeObjectRelease(v31);
  v32 = type metadata accessor for Artist(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v9, 1, v32) == 1)
  {
    sub_100008194((uint64_t)v9, &qword_10015D4B0);
    v34 = 0;
    v35 = 0;
  }
  else
  {
    v34 = Artist.name.getter();
    v35 = v36;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v32);
  }
  swift_beginAccess(&qword_10016F670, v44, 33, 0);
  v37 = sub_100007B20((uint64_t)v15, v34, v35, &qword_10016F670);
  swift_endAccess(v44);
  swift_bridgeObjectRelease(v35);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v43, v24);
  v29(v15, v42);
  v2[2] = v37;
  return v2;
}

uint64_t sub_100007A74()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_100007A98(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003E70(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100007ADC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003E70(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

_QWORD *sub_100007B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  _QWORD v34[5];

  v8 = sub_100003E70(&qword_10015D4B8);
  v34[3] = v8;
  v9 = sub_100007D40((unint64_t *)&qword_10015D4C8, &qword_10015D4B8, (uint64_t)&unk_10010CF80);
  v34[4] = v9;
  v10 = sub_100007D80(v34);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v10, a1, v8);
  v11 = (_QWORD *)*a4;
  if (!*a4)
    goto LABEL_8;
  v32 = a2;
  v12 = v11[5];
  v13 = v11[6];
  sub_100008170(v11 + 2, v12);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 152);
  swift_retain(v11);
  v15 = v14(v12, v13);
  v17 = v16;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 152))(v8, v9);
  if (v15 == v18 && v17 == v19)
  {
    swift_bridgeObjectRelease_n(v17, 2);
    goto LABEL_10;
  }
  v21 = v19;
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v18, v19, 0);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v21);
  if ((v22 & 1) == 0)
  {
    swift_release(v11);
    a2 = v32;
LABEL_8:
    sub_1000081D0((uint64_t)v34, (uint64_t)v33);
    v23 = type metadata accessor for SetlistController(0);
    v24 = swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    v25 = sub_100005580((uint64_t)v33, v33[3]);
    __chkstk_darwin(v25);
    v27 = (char *)&v31 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v28 + 16))(v27);
    swift_bridgeObjectRetain(a3);
    v29 = sub_100007DBC((uint64_t)v27, a2, a3, v24);
    sub_1000055A8(v33);
    swift_retain(v29);
    swift_release(v11);
    *a4 = v29;
    v11 = (_QWORD *)v29;
  }
LABEL_10:
  sub_1000055A8(v34);
  return v11;
}

uint64_t sub_100007D40(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000034AC(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_100007D80(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100007DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;

  v8 = sub_100003E70(&qword_10015D4B8);
  v45 = v8;
  v9 = sub_100007D40((unint64_t *)&qword_10015D4C8, &qword_10015D4B8, (uint64_t)&unk_10010CF80);
  v46 = v9;
  v10 = sub_100007D80(v44);
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v10, a1, v8);
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_QWORD *)(a4 + 104) = 0;
  ObservationRegistrar.init()(v11);
  sub_1000081D0((uint64_t)v44, a4 + 16);
  *(_QWORD *)(a4 + 56) = a2;
  *(_QWORD *)(a4 + 64) = a3;
  v12 = v45;
  v13 = v46;
  sub_100008170(v44, v45);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v13);
  v15 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v38 - v18;
  Event<>.setlist.getter(v17);
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    v41 = 0u;
    v42 = 0u;
    v43 = 0;
    goto LABEL_8;
  }
  *((_QWORD *)&v39 + 1) = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v13, v12, AssociatedTypeWitness, &unk_1001191E8, &unk_100119220);
  v40 = AssociatedConformanceWitness;
  v22 = sub_100007D80(&v38);
  (*(void (**)(_QWORD *, char *, uint64_t))(v20 + 32))(v22, v19, AssociatedTypeWitness);
  v23 = *((_QWORD *)&v39 + 1);
  v24 = v40;
  sub_100008170(&v38, *((uint64_t *)&v39 + 1));
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v23, v24);
  v26 = swift_getAssociatedTypeWitness(0, v24);
  v27 = sub_100003E70(&qword_10015D4E8);
  v28 = _arrayForceCast<A, B>(_:)(v25, v26, v27);
  swift_bridgeObjectRelease(v25);
  if (*(_QWORD *)(v28 + 16))
  {
    sub_1000081D0(v28 + 32, (uint64_t)&v41);
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
  }
  swift_bridgeObjectRelease(v28);
  sub_1000055A8(&v38);
  if (!*((_QWORD *)&v42 + 1))
  {
LABEL_8:
    sub_100008194((uint64_t)&v41, &qword_10015D4D0);
    sub_1000081D0((uint64_t)v44, (uint64_t)&v41);
    v30 = *((_QWORD *)&v42 + 1);
    v31 = v43;
    sub_100008170(&v41, *((uint64_t *)&v42 + 1));
    v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 240))(v30, v31);
    if (v32)
    {
      v33 = v32;
      v34 = swift_getAssociatedTypeWitness(0, v31);
      v35 = sub_100003E70(&qword_10015D4E0);
      v36 = _arrayForceCast<A, B>(_:)(v33, v34, v35);
      swift_bridgeObjectRelease(v33);
      if (*(_QWORD *)(v36 + 16))
      {
        sub_1000081D0(v36 + 32, (uint64_t)&v38);
      }
      else
      {
        v40 = 0;
        v38 = 0u;
        v39 = 0u;
      }
      swift_bridgeObjectRelease(v36);
      if (*((_QWORD *)&v39 + 1))
      {
        v29 = 1;
LABEL_16:
        sub_100008194((uint64_t)&v38, &qword_10015D4D8);
        goto LABEL_17;
      }
    }
    else
    {
      v40 = 0;
      v38 = 0u;
      v39 = 0u;
    }
    v29 = 0;
    goto LABEL_16;
  }
  sub_100008194((uint64_t)&v41, &qword_10015D4D0);
  sub_1000081D0((uint64_t)v44, (uint64_t)&v41);
  v29 = 1;
LABEL_17:
  sub_1000055A8(&v41);
  *(_BYTE *)(a4 + 113) = v29;
  *(_BYTE *)(a4 + 112) = v29;
  sub_1000055A8(v44);
  return a4;
}

_QWORD *sub_100008170(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100008194(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100003E70(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000081D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100008214(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10000821C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_100008224()
{
  uint64_t v0;

  return sub_10003E198(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10000823C()
{
  uint64_t v0;

  return sub_10003E0C8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100008254()
{
  uint64_t v0;

  return sub_10003DFC8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_100008270()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D4F0;
  if (!qword_10015D4F0)
  {
    v1 = sub_1000034AC(&qword_10015D4F8);
    sub_1000073BC();
    sub_1000074F0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D4F0);
  }
  return result;
}

__n128 initializeWithCopy for PaddingModifier(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for PaddingModifier(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PaddingModifier(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PaddingModifier()
{
  return &type metadata for PaddingModifier;
}

uint64_t sub_100008354(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118378, 1);
}

uint64_t sub_100008364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;

  v5 = sub_100003E70(&qword_10015D500);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(unsigned __int8 *)v2;
  v10 = static Edge.Set.top.getter(v6);
  v11 = ((uint64_t (*)(void))Edge.Set.init(rawValue:))();
  if (Edge.Set.init(rawValue:)(v11 & v9) == v10)
    v12 = v2[1];
  else
    v12 = 0;
  v13 = static Edge.Set.leading.getter();
  v14 = v13;
  v15 = Edge.Set.init(rawValue:)(v13);
  if (Edge.Set.init(rawValue:)(v15 & v9) == v14)
    v16 = v2[2];
  else
    v16 = 0;
  v17 = static Edge.Set.bottom.getter();
  v18 = v17;
  v19 = Edge.Set.init(rawValue:)(v17);
  if (Edge.Set.init(rawValue:)(v19 & v9) == v18)
    v20 = v2[3];
  else
    v20 = 0;
  v21 = static Edge.Set.trailing.getter();
  v22 = v21;
  v23 = Edge.Set.init(rawValue:)(v21);
  v24 = Edge.Set.init(rawValue:)(v23 & v9);
  if (v24 == v22)
    v25 = v2[4];
  else
    v25 = 0;
  v26 = static Edge.Set.all.getter(v24);
  v27 = sub_100003E70(&qword_10015D508);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v8, a1, v27);
  v28 = &v8[*(int *)(v5 + 36)];
  *v28 = v26;
  *((_QWORD *)v28 + 1) = v12;
  *((_QWORD *)v28 + 2) = v16;
  *((_QWORD *)v28 + 3) = v20;
  *((_QWORD *)v28 + 4) = v25;
  v28[40] = 0;
  return sub_10000850C((uint64_t)v8, a2);
}

uint64_t sub_1000084F0()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_10000850C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015D500);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100008558()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D510;
  if (!qword_10015D510)
  {
    v1 = sub_1000034AC(&qword_10015D500);
    sub_1000085C4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D510);
  }
  return result;
}

unint64_t sub_1000085C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D518;
  if (!qword_10015D518)
  {
    v1 = sub_1000034AC(&qword_10015D508);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D518);
  }
  return result;
}

uint64_t sub_100008614(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100003B3C(&qword_10015D520, (uint64_t (*)(uint64_t))&type metadata accessor for Setlist.Song, (uint64_t)&protocol conformance descriptor for Setlist.Song);
  result = sub_100003B3C(&qword_10015D528, (uint64_t (*)(uint64_t))&type metadata accessor for Setlist.Song, (uint64_t)&protocol conformance descriptor for Setlist.Song);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100008670()
{
  return sub_100003B3C(&qword_10015D530, (uint64_t (*)(uint64_t))&type metadata accessor for Setlist.Song, (uint64_t)&unk_10010AB70);
}

uint64_t sub_1000086A0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100003B3C(&qword_10015D570, (uint64_t (*)(uint64_t))&type metadata accessor for Setlist, (uint64_t)&protocol conformance descriptor for Setlist);
  result = sub_100003B3C(qword_10015D578, (uint64_t (*)(uint64_t))&type metadata accessor for Setlist, (uint64_t)&protocol conformance descriptor for Setlist);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100008700(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t inited;
  _QWORD v11[2];

  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  v3 = v2;
  if (v4 <= 0x3F)
  {
    v11[0] = *(_QWORD *)(v2 - 8) + 64;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(a1 + 88));
    v6 = type metadata accessor for Optional(255, AssociatedTypeWitness);
    v7 = type metadata accessor for Published(319, v6);
    v3 = v7;
    if (v8 <= 0x3F)
    {
      v11[1] = *(_QWORD *)(v7 - 8) + 64;
      inited = swift_initClassMetadata2(a1, 0, 2, v11, a1 + 96);
      if (inited)
        return inited;
      else
        return 0;
    }
  }
  return v3;
}

uint64_t sub_1000087C4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;

  KeyPath = swift_getKeyPath(&unk_10010AC68);
  v2 = swift_getKeyPath(&unk_10010ACA0);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t *sub_100008854()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(*v0 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 96), *(_QWORD *)(*v0 + 80));
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 104);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(v1 + 88));
  v4 = type metadata accessor for Optional(255, AssociatedTypeWitness);
  v5 = type metadata accessor for Published(0, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v2, v5);
  return v0;
}

uint64_t sub_1000088F0()
{
  uint64_t v0;

  sub_100008854();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for MusicController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MusicController);
}

uint64_t sub_100008920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_100008954()
{
  return 16;
}

__n128 sub_100008960(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t value<A>(iOS:iPadOS:)(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void))
{
  id v5;
  id v6;

  v5 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v6 = objc_msgSend(v5, "userInterfaceIdiom");

  if (v6 == (id)1)
    return a3();
  else
    return a1();
}

uint64_t sub_100008A04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v24;
  uint64_t TupleTypeMetadata3;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, char *, uint64_t);
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88[16];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  void *v98;
  void *v99;
  uint64_t v100;

  v86 = a2;
  v2 = *(_QWORD *)(a1 - 8);
  v83 = a1;
  v85 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin(a1);
  v84 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NavigationPath(255);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = type metadata accessor for Array(255, v6);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v9);
  v12 = sub_1000034AC(&qword_10015D6A8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, v6, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v96 = (void *)v7;
  v97 = AssociatedTypeWitness;
  v98 = (void *)v12;
  v99 = (void *)WitnessTable;
  v100 = AssociatedConformanceWitness;
  v15 = type metadata accessor for ForEach(255, &v96);
  v16 = sub_1000034AC(&qword_10015D6B0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v15, v16, 0, 0);
  v18 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v19 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v96 = &type metadata for Never;
  v97 = v18;
  v98 = &protocol witness table for Never;
  v99 = (void *)v19;
  v20 = type metadata accessor for List(255, &v96);
  v21 = type metadata accessor for PlainListStyle(255);
  v22 = swift_getWitnessTable(&protocol conformance descriptor for List<A, B>, v20);
  v96 = (void *)v20;
  v97 = v21;
  v98 = (void *)v22;
  v99 = &protocol witness table for PlainListStyle;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v96, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 0);
  v24 = sub_1000034AC(&qword_10015D6B8);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, OpaqueTypeMetadata2, &type metadata for Spacer, v24, 0, 0);
  v26 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v27 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v26);
  v28 = type metadata accessor for VStack(255, v26, v27);
  v29 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v28);
  v96 = (void *)v28;
  v97 = v29;
  v30 = swift_getOpaqueTypeMetadata2(255, &v96, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v96 = (void *)v28;
  v97 = v29;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v96, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v96 = (void *)v30;
  v97 = OpaqueTypeConformance2;
  v32 = swift_getOpaqueTypeMetadata2(255, &v96, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 0);
  v33 = sub_1000034AC(&qword_10015D6C0);
  v96 = (void *)v30;
  v97 = OpaqueTypeConformance2;
  v34 = swift_getOpaqueTypeConformance2(&v96, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v35 = sub_1000034AC(&qword_10015D6C8);
  v36 = sub_100007D40(&qword_10015D6D0, &qword_10015D6C8, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v96 = (void *)v35;
  v97 = v36;
  v37 = swift_getOpaqueTypeConformance2(&v96, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v96 = (void *)v32;
  v97 = v33;
  v98 = (void *)v34;
  v99 = (void *)v37;
  v38 = swift_getOpaqueTypeMetadata2(255, &v96, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v96 = (void *)v32;
  v97 = v33;
  v98 = (void *)v34;
  v99 = (void *)v37;
  v39 = swift_getOpaqueTypeConformance2(&v96, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v40 = type metadata accessor for NavigationStack(0, v5, v38, v39);
  v77 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v42 = (char *)&v72 - v41;
  v43 = type metadata accessor for ModifiedContent(0, v40, &type metadata for _AppearanceActionModifier);
  v81 = *(_QWORD *)(v43 - 8);
  v78 = v43;
  __chkstk_darwin(v43);
  v75 = (char *)&v72 - v44;
  v80 = type metadata accessor for ModifiedContent(0, v45, &type metadata for _AppearanceActionModifier);
  v82 = *(_QWORD *)(v80 - 8);
  v46 = __chkstk_darwin(v80);
  v76 = (char *)&v72 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v79 = (uint64_t)&v72 - v48;
  v49 = v6;
  v72 = v6;
  v89 = v6;
  v90 = v10;
  v50 = v10;
  v73 = v10;
  v51 = v87;
  v91 = v87;
  NavigationStack.init<>(root:)(sub_10000BE9C, v88, v38, v39);
  v52 = v2;
  v74 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v54 = v83;
  v53 = v84;
  v74(v84, v51, v83);
  v55 = *(unsigned __int8 *)(v52 + 80);
  v56 = (v55 + 32) & ~v55;
  v85 += v56;
  v57 = v55 | 7;
  v58 = swift_allocObject(&unk_10014CC38, v85, v55 | 7);
  *(_QWORD *)(v58 + 16) = v49;
  *(_QWORD *)(v58 + 24) = v50;
  v59 = *(void (**)(uint64_t, char *, uint64_t))(v52 + 32);
  v60 = v53;
  v59(v58 + v56, v53, v54);
  v61 = swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v40);
  v62 = v75;
  View.onAppear(perform:)(sub_10000BEAC, v58, v40, v61);
  swift_release(v58);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v42, v40);
  v74(v60, v87, v54);
  v63 = swift_allocObject(&unk_10014CC60, v85, v57);
  v64 = v73;
  *(_QWORD *)(v63 + 16) = v72;
  *(_QWORD *)(v63 + 24) = v64;
  v59(v63 + v56, v60, v54);
  v94 = v61;
  v95 = &protocol witness table for _AppearanceActionModifier;
  v65 = v78;
  v66 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v78);
  v67 = (uint64_t)v76;
  View.onDisappear(perform:)(sub_10000BEBC, v63, v65, v66);
  swift_release(v63);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v62, v65);
  v92 = v66;
  v93 = &protocol witness table for _AppearanceActionModifier;
  v68 = v80;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v80);
  v69 = v79;
  sub_1000F257C(v67, v68, v79);
  v70 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
  v70(v67, v68);
  sub_1000E3B88(v69, v68, v86);
  return ((uint64_t (*)(uint64_t, uint64_t))v70)(v69, v68);
}

uint64_t sub_1000090C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v22;
  uint64_t TupleTypeMetadata3;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t OpaqueTypeConformance2;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92[16];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96[16];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  void *v102;
  void *v103;
  uint64_t v104;

  v91 = a3;
  v85 = a1;
  v89 = a4;
  v88 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v86 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Array(255, a2);
  v8 = *(_QWORD *)(a3 + 16);
  v90 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8);
  v10 = sub_1000034AC(&qword_10015D6A8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v100 = (void *)v7;
  v101 = AssociatedTypeWitness;
  v102 = (void *)v10;
  v103 = (void *)WitnessTable;
  v104 = AssociatedConformanceWitness;
  v13 = type metadata accessor for ForEach(255, &v100);
  v14 = sub_1000034AC(&qword_10015D6B0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v13, v14, 0, 0);
  v16 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v17 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v16);
  v100 = &type metadata for Never;
  v101 = v16;
  v102 = &protocol witness table for Never;
  v103 = (void *)v17;
  v18 = type metadata accessor for List(255, &v100);
  v19 = type metadata accessor for PlainListStyle(255);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for List<A, B>, v18);
  v100 = (void *)v18;
  v101 = v19;
  v102 = (void *)v20;
  v103 = &protocol witness table for PlainListStyle;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v100, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 0);
  v22 = sub_1000034AC(&qword_10015D6B8);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, OpaqueTypeMetadata2, &type metadata for Spacer, v22, 0, 0);
  v24 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v24);
  v26 = type metadata accessor for VStack(0, v24, v25);
  v84 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v28 = (char *)&v70 - v27;
  v29 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v26);
  v100 = (void *)v26;
  v101 = v29;
  v30 = v29;
  v81 = v29;
  v31 = swift_getOpaqueTypeMetadata2(0, &v100, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v83 = *(_QWORD *)(v31 - 8);
  v32 = (void *)v31;
  __chkstk_darwin(v31);
  v80 = (char *)&v70 - v33;
  v100 = (void *)v26;
  v101 = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v100, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v100 = v32;
  v101 = OpaqueTypeConformance2;
  v35 = v32;
  v76 = v32;
  v36 = OpaqueTypeConformance2;
  v77 = OpaqueTypeConformance2;
  v37 = swift_getOpaqueTypeMetadata2(0, &v100, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 0);
  v82 = *(_QWORD *)(v37 - 8);
  v38 = (void *)v37;
  v75 = v37;
  __chkstk_darwin(v37);
  v79 = (char *)&v70 - v39;
  v40 = sub_1000034AC(&qword_10015D6C0);
  v74 = v40;
  v100 = v35;
  v101 = v36;
  v41 = swift_getOpaqueTypeConformance2(&v100, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v73 = v41;
  v42 = sub_1000034AC(&qword_10015D6C8);
  v43 = sub_100007D40(&qword_10015D6D0, &qword_10015D6C8, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v100 = (void *)v42;
  v101 = v43;
  v72 = swift_getOpaqueTypeConformance2(&v100, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v100 = v38;
  v101 = v40;
  v102 = (void *)v41;
  v103 = (void *)v72;
  v44 = swift_getOpaqueTypeMetadata2(0, &v100, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v78 = *(_QWORD *)(v44 - 8);
  v45 = __chkstk_darwin(v44);
  v47 = (char *)&v70 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __chkstk_darwin(v45);
  v71 = (uint64_t)&v70 - v49;
  v97 = v90;
  v98 = v91;
  v50 = v85;
  v99 = v85;
  v51 = static HorizontalAlignment.center.getter(v48);
  VStack.init(alignment:spacing:content:)(v51, 0, 1, sub_10000BF24, v96, v24, v25);
  v52 = v87;
  v53 = v86;
  v54 = v88;
  (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v86, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v88);
  v55 = v80;
  View.navigationBarTitleDisplayMode(_:)(v53, v26, v81);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v28, v26);
  v56 = *(_QWORD *)(v50 + 24);
  v57 = *(_QWORD *)(v50 + 32);
  v58 = *(unsigned __int8 *)(v50 + 40);
  v59 = *(_QWORD *)(v50 + 48);
  v60 = v50;
  v61 = v79;
  v62 = v76;
  View.navigationTitle(_:)(v56, v57, v58, v59, v76, v77);
  (*(void (**)(char *, void *))(v83 + 8))(v55, v62);
  v93 = v90;
  v94 = v91;
  v95 = v60;
  v63 = (void *)v75;
  v64 = v74;
  v65 = (void *)v73;
  v66 = (void *)v72;
  View.toolbar<A>(content:)(sub_10000BF30, v92, v75, v74, v73, v72);
  (*(void (**)(char *, void *))(v82 + 8))(v61, v63);
  v100 = v63;
  v101 = v64;
  v102 = v65;
  v103 = v66;
  swift_getOpaqueTypeConformance2(&v100, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v67 = v71;
  sub_1000F257C((uint64_t)v47, v44, v71);
  v68 = *(void (**)(char *, uint64_t))(v78 + 8);
  v68(v47, v44);
  sub_1000E3B88(v67, v44, v89);
  return ((uint64_t (*)(uint64_t, uint64_t))v68)(v67, v44);
}

uint64_t sub_100009744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  void *v59;
  void *v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t (*v73)(uint64_t, uint64_t);
  void *v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *OpaqueTypeConformance2;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88[16];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  void *v93;
  unint64_t v94;
  _QWORD v95[3];
  void *v96;
  uint64_t v97;
  void *v98;
  void *v99;
  uint64_t v100;
  char v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char v108;
  uint64_t v109[3];

  v82 = a3;
  v84 = a1;
  v86 = a4;
  v6 = type metadata accessor for PlainListStyle(0);
  v85 = *(_QWORD *)(v6 - 8);
  v7 = v6;
  v77 = v6;
  __chkstk_darwin(v6);
  OpaqueTypeConformance2 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void *)type metadata accessor for Array(255, a2);
  v10 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v10);
  v12 = sub_1000034AC(&qword_10015D6A8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v96 = v9;
  v97 = AssociatedTypeWitness;
  v98 = (void *)v12;
  v99 = (void *)WitnessTable;
  v100 = AssociatedConformanceWitness;
  v15 = type metadata accessor for ForEach(255, &v96);
  v16 = sub_1000034AC(&qword_10015D6B0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v15, v16, 0, 0);
  v18 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v19 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v96 = &type metadata for Never;
  v97 = v18;
  v98 = &protocol witness table for Never;
  v99 = (void *)v19;
  v20 = (_QWORD *)type metadata accessor for List(0, &v96);
  v78 = *(v20 - 1);
  __chkstk_darwin(v20);
  v22 = (char *)&v76 - v21;
  v23 = swift_getWitnessTable(&protocol conformance descriptor for List<A, B>, v20);
  v96 = v20;
  v97 = v7;
  v98 = (void *)v23;
  v99 = &protocol witness table for PlainListStyle;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v96, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 0);
  v87 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v25 = __chkstk_darwin(OpaqueTypeMetadata2);
  v27 = (char *)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v29 = (char *)&v76 - v28;
  v81 = (char *)&v76 - v28;
  v89 = a2;
  v90 = v82;
  v30 = v84;
  v91 = v84;
  v31 = List<>.init(content:)(sub_10000BFEC, v88, v18, v19);
  v32 = OpaqueTypeConformance2;
  PlainListStyle.init()(v31);
  v33 = v77;
  View.listStyle<A>(_:)(v32, v20, v77, v23, &protocol witness table for PlainListStyle);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v32, v33);
  (*(void (**)(char *, _QWORD *))(v78 + 8))(v22, v20);
  v96 = v20;
  v97 = v33;
  v98 = (void *)v23;
  v99 = &protocol witness table for PlainListStyle;
  OpaqueTypeConformance2 = (char *)swift_getOpaqueTypeConformance2(&v96, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
  v79 = v27;
  v80 = OpaqueTypeMetadata2;
  sub_1000F257C((uint64_t)v27, OpaqueTypeMetadata2, (uint64_t)v29);
  v85 = *(_QWORD *)(v87 + 8);
  ((void (*)(char *, uint64_t))v85)(v27, OpaqueTypeMetadata2);
  v34 = *(_QWORD *)(v30 + 56);
  v35 = *(_QWORD *)(v30 + 64);
  v36 = *(unsigned __int8 *)(v30 + 72);
  v37 = *(_QWORD *)(v30 + 80);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v37);
  v38 = Text.init(_:tableName:bundle:comment:)(v34, v35, v36, v37, 0, 0, 0, 0, 0, 256);
  v40 = v39;
  v42 = v41;
  v44 = v43 & 1;
  v45 = static Font.Weight.regular.getter();
  v46 = Text.fontWeight(_:)(*(_QWORD *)&v45, 0, v38, v40, v44, v42);
  v48 = v47;
  v50 = v49;
  v52 = v51 & 1;
  sub_10000BFF8(v38, v40, v44);
  v53 = swift_bridgeObjectRelease(v42);
  v54 = static Font.footnote.getter(v53);
  v55 = (void *)Text.font(_:)(v54, v46, v48, v52, v50);
  v57 = v56;
  LOBYTE(v40) = v58;
  v60 = v59;
  swift_release(v54);
  sub_10000BFF8(v46, v48, v52);
  v61 = swift_bridgeObjectRelease(v50);
  LOBYTE(v54) = static Edge.Set.bottom.getter(v61);
  v62 = EdgeInsets.init(_all:)(25.0);
  v64 = v63;
  v66 = v65;
  v68 = v67;
  v69 = (uint64_t)v79;
  v70 = v81;
  v71 = v80;
  (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v79, v81, v80);
  v107 = 0;
  v108 = 1;
  v109[0] = v69;
  v109[1] = (uint64_t)&v107;
  v96 = v55;
  v97 = v57;
  LOBYTE(v98) = v40 & 1;
  v99 = v60;
  v100 = 0x3FE0000000000000;
  v101 = v54;
  v102 = v62;
  v103 = v64;
  v104 = v66;
  v105 = v68;
  v106 = 0;
  v109[2] = (uint64_t)&v96;
  sub_10000C008((uint64_t)v55, v57, v40 & 1);
  swift_bridgeObjectRetain(v60);
  v95[0] = v71;
  v95[1] = &type metadata for Spacer;
  v95[2] = sub_100003E70(&qword_10015D6B8);
  v92 = OpaqueTypeConformance2;
  v93 = &protocol witness table for Spacer;
  v94 = sub_10000C018();
  sub_1000E4768(v109, 3uLL, (uint64_t)v95);
  sub_10000BFF8((uint64_t)v55, v57, v40 & 1);
  swift_bridgeObjectRelease(v60);
  v72 = v70;
  v73 = (uint64_t (*)(uint64_t, uint64_t))v85;
  ((void (*)(char *, uint64_t))v85)(v72, v71);
  v74 = v99;
  sub_10000BFF8((uint64_t)v96, v97, (char)v98);
  swift_bridgeObjectRelease(v74);
  return v73(v69, v71);
}

uint64_t sub_100009D7C@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, __int128 *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 *v73;
  char *v74;
  char *v75;
  void (*v76)(char *, __int128 *, uint64_t);
  uint64_t v77;
  void (*v78)(uint64_t, char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _QWORD v106[2];
  uint64_t v107[3];
  _OWORD v108[8];
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;

  v99 = a3;
  v96 = a4;
  v7 = type metadata accessor for Optional(0, a2);
  v80 = *(_QWORD *)(v7 - 8);
  v81 = v7;
  v8 = __chkstk_darwin(v7);
  v90 = (char *)&v75 - v9;
  v89 = *(_QWORD *)(a2 - 8);
  v10 = __chkstk_darwin(v8);
  v82 = v11;
  v83 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v92 = (char *)&v75 - v12;
  v93 = sub_100003E70(&qword_10015D6B0);
  v13 = __chkstk_darwin(v93);
  v95 = (uint64_t)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v94 = (char *)&v75 - v15;
  v98 = type metadata accessor for TicketView(0, a2, a3, v16);
  v17 = *(_QWORD *)(v98 - 8);
  v91 = *(char **)(v17 + 64);
  __chkstk_darwin(v98);
  v97 = (char *)&v75 - v18;
  v19 = type metadata accessor for Array(255, a2);
  v86 = v19;
  v20 = *(_QWORD *)(a3 + 16);
  v88 = v20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v20);
  v85 = AssociatedTypeWitness;
  v22 = sub_1000034AC(&qword_10015D6A8);
  v101 = v22;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v19);
  v87 = (void (*)(char *, char *, uint64_t))WitnessTable;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v20, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  *(_QWORD *)&v110 = v19;
  *((_QWORD *)&v110 + 1) = AssociatedTypeWitness;
  *(_QWORD *)&v111 = v22;
  *((_QWORD *)&v111 + 1) = WitnessTable;
  *(_QWORD *)&v112 = AssociatedConformanceWitness;
  v102 = type metadata accessor for ForEach(0, &v110);
  v100 = *(_QWORD *)(v102 - 8);
  v25 = __chkstk_darwin(v102);
  v27 = (char *)&v75 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v103 = (uint64_t)&v75 - v28;
  v29 = a1[7];
  v116 = a1[6];
  v117 = v29;
  v118 = *((_QWORD *)a1 + 16);
  v30 = a1[3];
  v112 = a1[2];
  v113 = v30;
  v31 = a1[5];
  v114 = a1[4];
  v115 = v31;
  v32 = a1[1];
  v110 = *a1;
  v111 = v32;
  v33 = v99;
  v84 = type metadata accessor for TicketViewModel(0, a2, v99, v34);
  *(_QWORD *)&v108[0] = sub_1000D995C(v84);
  v35 = v17;
  v36 = *(void (**)(char *, __int128 *, uint64_t))(v17 + 16);
  v37 = v97;
  v38 = v98;
  v76 = v36;
  v36(v97, a1, v98);
  v39 = *(unsigned __int8 *)(v35 + 80);
  v40 = (v39 + 32) & ~v39;
  v75 = &v91[v40];
  v77 = v39 | 7;
  v41 = swift_allocObject(&unk_10014CCB0, &v91[v40], v39 | 7);
  *(_QWORD *)(v41 + 16) = a2;
  *(_QWORD *)(v41 + 24) = v33;
  v42 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 32);
  v43 = a2;
  v78 = v42;
  v79 = v40;
  v42(v41 + v40, v37, v38);
  v44 = sub_100007D40(&qword_10015D700, &qword_10015D6A8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v45 = v89;
  ForEach<>.init(_:content:)(v108, sub_10000C240, v41, v86, v85, v101, v87, v44, v88);
  v107[2] = v44;
  v46 = v102;
  v88 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v102);
  sub_1000F257C((uint64_t)v27, v46, v103);
  v47 = *(void (**)(char *, uint64_t))(v100 + 8);
  v91 = v27;
  v47(v27, v46);
  v48 = a1[6];
  v49 = a1[7];
  v50 = a1[4];
  v108[5] = a1[5];
  v108[6] = v48;
  v108[7] = v49;
  v109 = *((_QWORD *)a1 + 16);
  v51 = a1[3];
  v108[2] = a1[2];
  v108[3] = v51;
  v108[4] = v50;
  v52 = a1[1];
  v108[0] = *a1;
  v108[1] = v52;
  v53 = v90;
  sub_1000D9C5C(v84);
  v54 = v53;
  v55 = v45;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v54, 1, v43) == 1)
  {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v54, v81);
    v56 = (uint64_t)v94;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 56))(v94, 1, 1);
  }
  else
  {
    v87 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    v57 = v92;
    v87(v92, v54, v43);
    v58 = v97;
    v59 = v98;
    v76(v97, a1, v98);
    v60 = v83;
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v83, v57, v43);
    v61 = *(unsigned __int8 *)(v55 + 80);
    v90 = (char *)v47;
    v62 = (unint64_t)&v75[v61] & ~v61;
    v63 = swift_allocObject(&unk_10014CCD8, v62 + v82, v77 | v61);
    v64 = v99;
    *(_QWORD *)(v63 + 16) = v43;
    *(_QWORD *)(v63 + 24) = v64;
    v78(v63 + v79, v58, v59);
    v65 = ((uint64_t (*)(unint64_t, char *, uint64_t))v87)(v63 + v62, v60, v43);
    __chkstk_darwin(v65);
    *(&v75 - 4) = (char *)v43;
    *(&v75 - 3) = (char *)v64;
    v66 = v92;
    v73 = a1;
    v74 = v92;
    v67 = sub_10000C380();
    v56 = (uint64_t)v94;
    Button.init(action:label:)(sub_10000C370, v63, sub_10000C374, &v75 - 6, &type metadata for TicketProviderRow, v67);
    v47 = (void (*)(char *, uint64_t))v90;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v101 - 8) + 56))(v56, 0, 1);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v66, v43);
  }
  v68 = (uint64_t)v91;
  v70 = v102;
  v69 = v103;
  (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v91, v103, v102);
  v107[0] = v68;
  v71 = v95;
  sub_10000C2A8(v56, v95);
  v107[1] = v71;
  v106[0] = v70;
  v106[1] = v93;
  v104 = v88;
  v105 = sub_10000C2F0();
  sub_1000E4768(v107, 2uLL, (uint64_t)v106);
  sub_100008194(v56, &qword_10015D6B0);
  v47((char *)v69, v70);
  sub_100008194(v71, &qword_10015D6B0);
  return ((uint64_t (*)(uint64_t, uint64_t))v47)(v68, v70);
}

uint64_t sub_10000A3E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v27 = a1;
  v28 = a4;
  v29 = a5;
  v8 = *(_QWORD *)(a3 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(a1);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TicketView(0, v11, v12, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v17 = (char *)&v26 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v26 - v16, a2, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  v18 = *(unsigned __int8 *)(v14 + 80);
  v19 = (v18 + 32) & ~v18;
  v20 = *(unsigned __int8 *)(v8 + 80);
  v21 = (v15 + v20 + v19) & ~v20;
  v22 = swift_allocObject(&unk_10014CD00, v21 + v9, v18 | v20 | 7);
  v23 = v28;
  *(_QWORD *)(v22 + 16) = a3;
  *(_QWORD *)(v22 + 24) = v23;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v22 + v19, v17, v13);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v22 + v21, v10, a3);
  v31 = a3;
  v32 = v23;
  v33 = v27;
  v24 = sub_10000C380();
  return Button.init(action:label:)(sub_10000C370, v22, sub_10000C620, v30, &type metadata for TicketProviderRow, v24);
}

uint64_t sub_10000A574(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v30 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OpenURLAction(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TicketView(0, a3, a4, v14);
  sub_10001D83C((uint64_t)v13);
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  OpenURLAction.callAsFunction(_:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v30);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v15 = a1[7];
  v37 = a1[6];
  v38 = v15;
  v39 = *((_QWORD *)a1 + 16);
  v16 = a1[3];
  v33 = a1[2];
  v34 = v16;
  v17 = a1[5];
  v35 = a1[4];
  v36 = v17;
  v18 = a1[1];
  v31 = *a1;
  v32 = v18;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  v22 = *((_QWORD *)a1 + 17);
  if (v22)
  {
    v23 = v19;
    v24 = v20;
    type metadata accessor for TicketViewModel(0, a3, a4, v21);
    swift_retain(v22);
    sub_1000D9A0C(v23, v24, v22);
    swift_bridgeObjectRelease(v24);
    return swift_release(v22);
  }
  else
  {
    v26 = *((_QWORD *)a1 + 18);
    v27 = type metadata accessor for RemoteViewConfiguration();
    v28 = sub_10000ACDC();
    result = EnvironmentObject.error()(0, v26, v27, v28);
    __break(1u);
  }
  return result;
}

uint64_t sub_10000A754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v7 = *(_QWORD *)(a1 + 120);
  v8 = *(_QWORD *)(a1 + 128);
  v9 = sub_100003E70(&qword_10015D718);
  v10 = swift_allocObject(v9, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_10010ACC0;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  v13 = v12;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  *(_QWORD *)(v10 + 64) = sub_10000C3C4();
  *(_QWORD *)(v10 + 32) = v11;
  *(_QWORD *)(v10 + 40) = v13;
  result = String.init(format:_:)(v7, v8, v10);
  *a4 = result;
  a4[1] = v15;
  return result;
}

uint64_t sub_10000A804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v6);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100003E70(&qword_10015D6C8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ToolbarItemPlacement.navigationBarTrailing.getter(v11);
  v19 = a2;
  v20 = a3;
  v21 = a1;
  v14 = sub_100003E70(&qword_10015D6D8);
  v15 = sub_100007D40(&qword_10015D6E0, &qword_10015D6D8, (uint64_t)&protocol conformance descriptor for Button<A>);
  ToolbarItem<>.init(placement:content:)(v8, sub_10000BF3C, v18, v14, v15);
  v16 = sub_100007D40(&qword_10015D6D0, &qword_10015D6C8, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v13, v9, v16);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_10000A960@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v19[1] = a4;
  v7 = type metadata accessor for DismissAction(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v11 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)v19 - v12;
  type metadata accessor for TicketView(0, a2, a3, v14);
  sub_10001D870((uint64_t)v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_10014CC88, v16 + v9, v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v17 + v16, v11, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  v21 = a2;
  v22 = a3;
  v23 = a1;
  return Button.init(action:label:)(sub_10000BFA8, v17, sub_10000BFE0, v20, &type metadata for Text, &protocol witness table for Text);
}

uint64_t sub_10000AAB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(unsigned __int8 *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 112);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  result = Text.init(_:tableName:bundle:comment:)(v3, v4, v5, v6, 0, 0, 0, 0, 0, 256);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = v9 & 1;
  *(_QWORD *)(a2 + 24) = v10;
  return result;
}

uint64_t sub_10000AB48(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a1 + 136);
  if (v4)
  {
    v6 = type metadata accessor for TicketViewModel(0, a2, a3, (uint64_t)a4);
    v7 = swift_retain(v4);
    a4(v7, v6);
    return swift_release(v4);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 144);
    v10 = type metadata accessor for RemoteViewConfiguration();
    v11 = sub_10000ACDC();
    result = EnvironmentObject.error()(0, v9, v10, v11);
    __break(1u);
  }
  return result;
}

uint64_t sub_10000ABF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v7 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a4 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a4 + 112) = v7;
  *(_QWORD *)(a4 + 128) = *(_QWORD *)(a1 + 128);
  v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a4 + 48) = v8;
  v9 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a4 + 80) = v9;
  v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v10;
  v11 = type metadata accessor for RemoteViewConfiguration();
  v12 = sub_10000ACDC();
  *(_QWORD *)(a4 + 136) = EnvironmentObject.init()(v11, v12);
  *(_QWORD *)(a4 + 144) = v13;
  v15 = type metadata accessor for TicketView(0, a2, a3, v14);
  v16 = (_QWORD *)(a4 + *(int *)(v15 + 40));
  *v16 = swift_getKeyPath(&unk_10010ACD0);
  v17 = sub_100003E70(&qword_10015D488);
  swift_storeEnumTagMultiPayload(v16, v17, 0);
  v18 = (_QWORD *)(a4 + *(int *)(v15 + 44));
  *v18 = swift_getKeyPath(&unk_10010AD00);
  v19 = sub_100003E70(&qword_10015D600);
  return swift_storeEnumTagMultiPayload(v18, v19, 0);
}

unint64_t sub_10000ACDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D480;
  if (!qword_10015D480)
  {
    v1 = type metadata accessor for RemoteViewConfiguration();
    result = swift_getWitnessTable(&unk_100110CE4, v1);
    atomic_store(result, (unint64_t *)&qword_10015D480);
  }
  return result;
}

uint64_t type metadata accessor for TicketView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TicketView);
}

uint64_t sub_10000AD34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v32;
  _QWORD v33[2];

  v6 = sub_100003E70(&qword_10015D728);
  __chkstk_darwin(v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[0] = a1;
  v33[1] = a2;
  v9 = sub_10000CB40();
  swift_bridgeObjectRetain(a2);
  v10 = Text.init<A>(_:)(v33, &type metadata for String, v9);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = static Font.callout.getter();
  v18 = Text.font(_:)(v17, v10, v12, v16, v14);
  v20 = v19;
  LOBYTE(a2) = v21;
  v32 = v22;
  swift_release(v17);
  LOBYTE(v17) = a2 & 1;
  sub_10000BFF8(v10, v12, v16);
  swift_bridgeObjectRelease(v14);
  v23 = Image.init(systemName:)(0xD00000000000001CLL, 0x8000000100115190);
  static SymbolRenderingMode.hierarchical.getter();
  v24 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v8, 0, 1, v24);
  v25 = Image.symbolRenderingMode(_:)(v8, v23);
  swift_release(v23);
  v26 = sub_100008194((uint64_t)v8, &qword_10015D728);
  v27 = static Color.blue.getter(v26);
  v28 = static Font.title3.getter();
  KeyPath = swift_getKeyPath(&unk_10010AE38);
  *(_QWORD *)a3 = v18;
  *(_QWORD *)(a3 + 8) = v20;
  *(_BYTE *)(a3 + 16) = v17;
  v30 = v32;
  *(_QWORD *)(a3 + 24) = v32;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = 1;
  *(_QWORD *)(a3 + 48) = v25;
  *(_QWORD *)(a3 + 56) = v27;
  *(_QWORD *)(a3 + 64) = KeyPath;
  *(_QWORD *)(a3 + 72) = v28;
  sub_10000C008(v18, v20, v17);
  swift_bridgeObjectRetain(v30);
  sub_10000BFF8(v18, v20, v17);
  return swift_bridgeObjectRelease(v30);
}

void sub_10000AF20(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[2];
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *v1;
  v3 = v1[1];
  v19 = static VerticalAlignment.center.getter();
  v5 = sub_10000AD34(v4, v3, (uint64_t)v20);
  v6 = v20[0];
  v7 = v20[1];
  v8 = v21;
  v9 = v22;
  v10 = v23;
  v11 = v24;
  v13 = v26;
  v12 = v27;
  v18 = v25;
  LOBYTE(v3) = static Edge.Set.vertical.getter(v5);
  v14 = EdgeInsets.init(_all:)(31.0);
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 72) = v18;
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v12;
  *(_BYTE *)(a1 + 104) = v3;
  *(double *)(a1 + 112) = v14;
  *(_QWORD *)(a1 + 120) = v15;
  *(_QWORD *)(a1 + 128) = v16;
  *(_QWORD *)(a1 + 136) = v17;
  *(_BYTE *)(a1 + 144) = 0;
}

uint64_t sub_10000AFFC()
{
  return EnvironmentValues.openURL.getter();
}

uint64_t sub_10000B01C(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for OpenURLAction(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.openURL.setter(v3);
}

uint64_t sub_10000B09C()
{
  return EnvironmentValues.openURL.getter();
}

uint64_t sub_10000B0C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

void sub_10000B0C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_10010AD40;
  v6[1] = &unk_10010AD58;
  sub_10000BE1C(319, (unint64_t *)&qword_10015D698, (uint64_t (*)(uint64_t))&type metadata accessor for DismissAction);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000BE1C(319, (unint64_t *)&qword_10015D6A0, (uint64_t (*)(uint64_t))&type metadata accessor for OpenURLAction);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 0, 4, v6, a1 + 32);
    }
  }
}

uint64_t sub_10000B180(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v24 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v24);
  }
  else
  {
    v6 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v6;
    v8 = a2[2];
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v7;
    v9 = a2[4];
    *(_QWORD *)(a1 + 32) = v9;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v11 = a2[6];
    v10 = a2[7];
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v10;
    v12 = a2[8];
    *(_QWORD *)(a1 + 64) = v12;
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    v14 = a2[10];
    v13 = a2[11];
    *(_QWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 88) = v13;
    v15 = a2[12];
    *(_QWORD *)(a1 + 96) = v15;
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    v17 = a2[14];
    v16 = a2[15];
    *(_QWORD *)(a1 + 112) = v17;
    *(_QWORD *)(a1 + 120) = v16;
    v18 = a2[16];
    v38 = a2[17];
    v19 = a2[18];
    *(_QWORD *)(a1 + 136) = v38;
    *(_QWORD *)(a1 + 144) = v19;
    v20 = *(int *)(a3 + 40);
    v36 = (uint64_t *)((char *)a2 + v20);
    v37 = (uint64_t *)(a1 + v20);
    *(_QWORD *)(a1 + 128) = v18;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    swift_retain(v38);
    v21 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v36, v21) == 1)
    {
      v22 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v37, v36, v22);
      v23 = 1;
    }
    else
    {
      v25 = *v36;
      *v37 = *v36;
      swift_retain(v25);
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v37, v21, v23);
    v26 = *(int *)(a3 + 44);
    v27 = (uint64_t *)(a1 + v26);
    v28 = (uint64_t *)((char *)a2 + v26);
    v29 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
    {
      v30 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
      v31 = v27;
      v32 = v29;
      v33 = 1;
    }
    else
    {
      v34 = *v28;
      *v27 = *v28;
      swift_retain(v34);
      v31 = v27;
      v32 = v29;
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v32, v33);
  }
  return a1;
}

uint64_t sub_10000B3B0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[16]);
  swift_release(a1[17]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 40));
  v5 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)((char *)a1 + *(int *)(a2 + 44));
  v8 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v7, v8) != 1)
    return swift_release(*v7);
  v9 = type metadata accessor for OpenURLAction(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
}

uint64_t sub_10000B4CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v9;
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = v12;
  v14 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v14;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 112);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v16;
  *(_QWORD *)(a1 + 120) = v15;
  v18 = *(_QWORD *)(a2 + 128);
  v17 = *(_QWORD *)(a2 + 136);
  v19 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v17;
  *(_QWORD *)(a1 + 144) = v19;
  v20 = *(int *)(a3 + 40);
  v35 = v17;
  v36 = (uint64_t *)(a1 + v20);
  v34 = (uint64_t *)(a2 + v20);
  *(_QWORD *)(a1 + 128) = v18;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v18);
  swift_retain(v35);
  v21 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v34, v21) == 1)
  {
    v22 = type metadata accessor for DismissAction(0);
    v23 = v36;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v36, v34, v22);
    v24 = 1;
  }
  else
  {
    v25 = *v34;
    v23 = v36;
    *v36 = *v34;
    swift_retain(v25);
    v24 = 0;
  }
  swift_storeEnumTagMultiPayload(v23, v21, v24);
  v26 = *(int *)(a3 + 44);
  v27 = (uint64_t *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  v29 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
    v31 = 1;
  }
  else
  {
    v32 = *v28;
    *v27 = *v28;
    swift_retain(v32);
    v31 = 0;
  }
  swift_storeEnumTagMultiPayload(v27, v29, v31);
  return a1;
}

uint64_t sub_10000B6D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v16 = *(_QWORD *)(a2 + 80);
  v17 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v18 = *(_QWORD *)(a2 + 96);
  v19 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v20 = *(_QWORD *)(a2 + 112);
  v21 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v22 = *(_QWORD *)(a2 + 128);
  v23 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = *(_QWORD *)(a1 + 136);
  v25 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v25;
  swift_retain(v25);
  swift_release(v24);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  if (a1 != a2)
  {
    v26 = *(int *)(a3 + 40);
    v27 = (uint64_t *)(a1 + v26);
    v28 = (uint64_t *)(a2 + v26);
    sub_100008194(a1 + v26, &qword_10015D488);
    v29 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
    {
      v30 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
      v31 = 1;
    }
    else
    {
      v32 = *v28;
      *v27 = *v28;
      swift_retain(v32);
      v31 = 0;
    }
    swift_storeEnumTagMultiPayload(v27, v29, v31);
    v33 = *(int *)(a3 + 44);
    v34 = (uint64_t *)(a1 + v33);
    v35 = (uint64_t *)(a2 + v33);
    sub_100008194(a1 + v33, &qword_10015D600);
    v36 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v35, v36) == 1)
    {
      v37 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v34, v35, v37);
      v38 = 1;
    }
    else
    {
      v39 = *v35;
      *v34 = *v35;
      swift_retain(v39);
      v38 = 0;
    }
    swift_storeEnumTagMultiPayload(v34, v36, v38);
  }
  return a1;
}

uint64_t sub_10000B950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(int *)(a3 + 40);
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v13 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for DismissAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
    swift_storeEnumTagMultiPayload(v11, v13, 1);
  }
  else
  {
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  v15 = *(int *)(a3 + 44);
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
    swift_storeEnumTagMultiPayload(v16, v18, 1);
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10000BAA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v9;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v15;
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_release(v20);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  if (a1 != a2)
  {
    v21 = *(int *)(a3 + 40);
    v22 = (void *)(a1 + v21);
    v23 = (const void *)(a2 + v21);
    sub_100008194(a1 + v21, &qword_10015D488);
    v24 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for DismissAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
      swift_storeEnumTagMultiPayload(v22, v24, 1);
    }
    else
    {
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    v26 = *(int *)(a3 + 44);
    v27 = (void *)(a1 + v26);
    v28 = (const void *)(a2 + v26);
    sub_100008194(a1 + v26, &qword_10015D600);
    v29 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
    {
      v30 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v27, v28, v30);
      swift_storeEnumTagMultiPayload(v27, v29, 1);
    }
    else
    {
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10000BCB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000BCC4);
}

uint64_t sub_10000BCC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003E70(&qword_10015D608);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 40);
    }
    else
    {
      v10 = sub_100003E70(qword_10015D610);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10000BD6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000BD78);
}

uint64_t sub_10000BD78(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_100003E70(&qword_10015D608);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 40);
    }
    else
    {
      v10 = sub_100003E70(qword_10015D610);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_10000BE1C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Environment.Content(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_10000BE68(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100118520, 1);
}

uint64_t sub_10000BE9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000090C8(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10000BEAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000BEC8((void (*)(uint64_t, uint64_t))sub_1000D9CC4, a2, a3, a4);
}

uint64_t sub_10000BEBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000BEC8((void (*)(uint64_t, uint64_t))sub_1000D9D0C, a2, a3, a4);
}

uint64_t sub_10000BEC8(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TicketView(0, v6, v7, a4) - 8) + 80);
  return sub_10000AB48(v4 + ((v8 + 32) & ~v8), v6, v7, a1);
}

uint64_t sub_10000BF24@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100009744(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10000BF30()
{
  uint64_t *v0;

  return sub_10000A804(v0[4], v0[2], v0[3]);
}

uint64_t sub_10000BF3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10000A960(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10000BF48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for DismissAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10000BFA8()
{
  type metadata accessor for DismissAction(0);
  DismissAction.callAsFunction()();
}

uint64_t sub_10000BFE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000AAB8(*(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_10000BFEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100009D7C(*(__int128 **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10000BFF8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_10000C008(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

unint64_t sub_10000C018()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D6E8;
  if (!qword_10015D6E8)
  {
    v1 = sub_1000034AC(&qword_10015D6B8);
    sub_10000C084();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D6E8);
  }
  return result;
}

unint64_t sub_10000C084()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D6F0;
  if (!qword_10015D6F0)
  {
    v1 = sub_1000034AC(&qword_10015D6F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D6F0);
  }
  return result;
}

uint64_t sub_10000C0EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = type metadata accessor for TicketView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8 + 128));
  swift_release(*(_QWORD *)(v4 + v8 + 136));
  v10 = (_QWORD *)(v4 + v8 + *(int *)(v5 + 40));
  v11 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (_QWORD *)(v4 + v8 + *(int *)(v5 + 44));
  v14 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  return swift_deallocObject(v4, v8 + v9, v7 | 7);
}

uint64_t sub_10000C240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TicketView(0, v6, v7, a2) - 8) + 80);
  return sub_10000A3E8(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

uint64_t sub_10000C2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015D6B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10000C2F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D708;
  if (!qword_10015D708)
  {
    v1 = sub_1000034AC(&qword_10015D6B0);
    sub_100007D40(&qword_10015D700, &qword_10015D6A8, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10015D708);
  }
  return result;
}

uint64_t sub_10000C374@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_10000A754(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_10000C380()
{
  unint64_t result;

  result = qword_10015D710;
  if (!qword_10015D710)
  {
    result = swift_getWitnessTable(&unk_10010ADE4, &type metadata for TicketProviderRow);
    atomic_store(result, (unint64_t *)&qword_10015D710);
  }
  return result;
}

unint64_t sub_10000C3C4()
{
  unint64_t result;

  result = qword_10015D720;
  if (!qword_10015D720)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10015D720);
  }
  return result;
}

uint64_t sub_10000C40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for TicketView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v22 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(v5 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 128));
  swift_release(*(_QWORD *)(v4 + v9 + 136));
  v13 = (_QWORD *)(v4 + v9 + *(int *)(v6 + 40));
  v14 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  v16 = (_QWORD *)(v4 + v9 + *(int *)(v6 + 44));
  v17 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
  }
  else
  {
    swift_release(*v16);
  }
  v19 = (v9 + v22 + v11) & ~v11;
  v20 = v19 + v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v4 + v19, v5);
  return swift_deallocObject(v4, v20, v8 | v11 | 7);
}

uint64_t sub_10000C5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(type metadata accessor for TicketView(0, v5, v6, a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  return sub_10000A574((__int128 *)(v4 + v8), v4 + ((v8 + *(_QWORD *)(v7 + 64) + v9) & ~v9), v5, v6);
}

uint64_t sub_10000C620@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v1 + 24) + 32))(*(_QWORD *)(v1 + 16));
  *a1 = result;
  a1[1] = v4;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for TicketProviderRow(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for RemoteViewConfiguration.Service(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for TicketProviderRow(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for TicketProviderRow(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewModulesConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewModulesConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TicketProviderRow()
{
  return &type metadata for TicketProviderRow;
}

uint64_t sub_10000C788(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v15;
  uint64_t TupleTypeMetadata3;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v35;
  uint64_t AssociatedTypeWitness;
  void *v37;
  void *WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v1 = *a1;
  v2 = a1[1];
  v3 = type metadata accessor for NavigationPath(255);
  v4 = type metadata accessor for Array(255, v1);
  v5 = *(_QWORD *)(v2 + 16);
  v35 = (void *)v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5);
  v37 = (void *)sub_1000034AC(&qword_10015D6A8);
  WitnessTable = (void *)swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v1, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v6 = type metadata accessor for ForEach(255, &v35);
  v7 = sub_1000034AC(&qword_10015D6B0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v6, v7, 0, 0);
  v9 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v10 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v9);
  v35 = &type metadata for Never;
  AssociatedTypeWitness = v9;
  v37 = &protocol witness table for Never;
  WitnessTable = (void *)v10;
  v11 = type metadata accessor for List(255, &v35);
  v12 = type metadata accessor for PlainListStyle(255);
  v13 = swift_getWitnessTable(&protocol conformance descriptor for List<A, B>, v11);
  v35 = (void *)v11;
  AssociatedTypeWitness = v12;
  v37 = (void *)v13;
  WitnessTable = &protocol witness table for PlainListStyle;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v35, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 0);
  v15 = sub_1000034AC(&qword_10015D6B8);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, OpaqueTypeMetadata2, &type metadata for Spacer, v15, 0, 0);
  v17 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v18 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v17);
  v19 = type metadata accessor for VStack(255, v17, v18);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v19);
  v35 = (void *)v19;
  AssociatedTypeWitness = v20;
  v21 = swift_getOpaqueTypeMetadata2(255, &v35, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v35 = (void *)v19;
  AssociatedTypeWitness = v20;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v35, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v35 = (void *)v21;
  AssociatedTypeWitness = OpaqueTypeConformance2;
  v23 = swift_getOpaqueTypeMetadata2(255, &v35, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 0);
  v24 = sub_1000034AC(&qword_10015D6C0);
  v35 = (void *)v21;
  AssociatedTypeWitness = OpaqueTypeConformance2;
  v25 = swift_getOpaqueTypeConformance2(&v35, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v26 = sub_1000034AC(&qword_10015D6C8);
  v27 = sub_100007D40(&qword_10015D6D0, &qword_10015D6C8, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v35 = (void *)v26;
  AssociatedTypeWitness = v27;
  v28 = swift_getOpaqueTypeConformance2(&v35, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v35 = (void *)v23;
  AssociatedTypeWitness = v24;
  v37 = (void *)v25;
  WitnessTable = (void *)v28;
  v29 = swift_getOpaqueTypeMetadata2(255, &v35, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v35 = (void *)v23;
  AssociatedTypeWitness = v24;
  v37 = (void *)v25;
  WitnessTable = (void *)v28;
  v30 = swift_getOpaqueTypeConformance2(&v35, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v31 = type metadata accessor for NavigationStack(255, v3, v29, v30);
  v32 = type metadata accessor for ModifiedContent(255, v31, &type metadata for _AppearanceActionModifier);
  v33 = type metadata accessor for ModifiedContent(255, v32, &type metadata for _AppearanceActionModifier);
  swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v31);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v32);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v33);
}

uint64_t sub_10000CB30(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118554, 1);
}

unint64_t sub_10000CB40()
{
  unint64_t result;

  result = qword_100164D70;
  if (!qword_100164D70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, &qword_100164D70);
  }
  return result;
}

unint64_t sub_10000CB90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D730;
  if (!qword_10015D730)
  {
    v1 = sub_1000034AC(&qword_10015D738);
    sub_100007D40(&qword_10015D740, &qword_10015D748, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D730);
  }
  return result;
}

uint64_t sub_10000CC1C()
{
  uint64_t v0;

  v0 = type metadata accessor for EventController(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return sub_100060288();
}

uint64_t sub_10000CC50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  _QWORD *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t (**v97)();
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  _QWORD *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  __int128 v160;
  __int128 v161;

  v158 = a1;
  v136 = type metadata accessor for TaskPriority(0);
  v135 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v133 = (char *)&v126 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100003E70(&qword_10015D750);
  v131 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v130 = (char *)&v126 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = sub_100003E70(&qword_10015D758);
  v4 = __chkstk_darwin(v157);
  v129 = (char *)&v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v134 = (uint64_t)&v126 - v6;
  v138 = type metadata accessor for ErrorView(0);
  v7 = __chkstk_darwin(v138);
  v139 = (uint64_t *)((char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v141 = (uint64_t)&v126 - v9;
  v153 = sub_100003E70(&qword_10015D760);
  v10 = __chkstk_darwin(v153);
  v140 = (uint64_t)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v142 = (uint64_t)&v126 - v12;
  v154 = sub_100003E70(&qword_10015D768);
  __chkstk_darwin(v154);
  v156 = (uint64_t)&v126 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_100003E70(&qword_10015D770);
  __chkstk_darwin(v149);
  v151 = (uint64_t)&v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = sub_100003E70(&qword_10015D778);
  __chkstk_darwin(v155);
  v152 = (char *)&v126 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_100003E70(&qword_10015D780);
  v16 = __chkstk_darwin(v150);
  v143 = (char *)&v126 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v137 = (uint64_t)&v126 - v18;
  v19 = sub_100003E70(&qword_10015D788);
  __chkstk_darwin(v19);
  v21 = (char *)&v126 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100003E70(&qword_10015D4B8);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(_QWORD *)(v23 + 64);
  v25 = __chkstk_darwin(v22);
  __chkstk_darwin(v25);
  v27 = (char *)&v126 - v26;
  v29 = *(_QWORD *)(v1 + 16);
  v28 = *(_QWORD *)(v1 + 24);
  v159 = (_QWORD *)v1;
  v30 = *(unsigned __int8 *)(v1 + 32);
  v31 = type metadata accessor for EventController(0);
  v32 = sub_100003B3C(&qword_10015D790, type metadata accessor for EventController, (uint64_t)&unk_10010E484);
  v146 = v29;
  v147 = v28;
  v148 = v30;
  v144 = v32;
  v145 = v31;
  v33 = StateObject.wrappedValue.getter(v29, v28, v30, v31, v32);
  KeyPath = swift_getKeyPath(&unk_10010AED8);
  v35 = swift_getKeyPath(&unk_10010AF00);
  static Published.subscript.getter(v33, KeyPath, v35);
  swift_release(v33);
  swift_release(KeyPath);
  swift_release(v35);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) != 1)
  {
    v127 = (char *)&v126 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    v128 = v23;
    v37 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v37(v27, v21, v22);
    v36 = v159;
    v38 = *v159;
    v39 = v159[1];
    v40 = sub_100007D40((unint64_t *)&qword_10015D4C8, &qword_10015D4B8, (uint64_t)&unk_10010CF80);
    v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 152))(v22, v40);
    v43 = v41;
    v44 = v27;
    if (v38 == v42 && v39 == v41)
    {
      swift_bridgeObjectRelease(v39);
      v45 = v127;
      v46 = v143;
    }
    else
    {
      v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, v42, v41, 0);
      swift_bridgeObjectRelease(v43);
      v45 = v127;
      v46 = v143;
      if ((v47 & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v128 + 8))(v44, v22);
        goto LABEL_9;
      }
    }
    v48 = v128;
    (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v45, v44, v22);
    v49 = *(unsigned __int8 *)(v48 + 80);
    v50 = (v49 + 16) & ~v49;
    v51 = swift_allocObject(&unk_10014CED8, v50 + v24, v49 | 7);
    v37((char *)(v51 + v50), v45, v22);
    *(_QWORD *)v46 = sub_10000E784;
    *((_QWORD *)v46 + 1) = v51;
    v46[16] = 0;
    *((_QWORD *)v46 + 3) = sub_1000E6B24;
    *((_QWORD *)v46 + 4) = 0;
    v46[40] = 0;
    v52 = sub_100003E70(&qword_10015D470);
    v53 = swift_allocObject(v52, 17, 7);
    *(_BYTE *)(v53 + 16) = 0;
    v54 = sub_100007D40(&qword_10015D478, &qword_10015D470, (uint64_t)&unk_1001101D4);
    *((_QWORD *)v46 + 6) = ObservedObject.init(wrappedValue:)(v53, v52, v54);
    *((_QWORD *)v46 + 7) = v55;
    *((_QWORD *)v46 + 8) = 0;
    v56 = type metadata accessor for RemoteViewConfiguration();
    v57 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    *((_QWORD *)v46 + 9) = EnvironmentObject.init()(v56, v57);
    *((_QWORD *)v46 + 10) = v58;
    v59 = v150;
    v60 = &v46[*(int *)(v150 + 52)];
    *(_QWORD *)v60 = swift_getKeyPath(&unk_10010AF68);
    v61 = sub_100003E70(&qword_10015D488);
    swift_storeEnumTagMultiPayload(v60, v61, 0);
    v62 = &v46[*(int *)(v59 + 56)];
    *(_QWORD *)v62 = swift_getKeyPath(&unk_10010AF98);
    v63 = sub_100003E70(&qword_10015D490);
    swift_storeEnumTagMultiPayload(v62, v63, 0);
    v64 = &v46[*(int *)(v59 + 60)];
    *(_QWORD *)v64 = swift_getKeyPath(&unk_10010AFC8);
    v65 = sub_100003E70(&qword_10015D498);
    swift_storeEnumTagMultiPayload(v64, v65, 0);
    v66 = (uint64_t)v46;
    v67 = v22;
    v68 = v137;
    sub_100007A98(v66, v137, &qword_10015D780);
    v69 = v151;
    sub_100007ADC(v68, v151, &qword_10015D780);
    swift_storeEnumTagMultiPayload(v69, v149, 0);
    v70 = sub_100007D40(&qword_10015D7B0, &qword_10015D780, (uint64_t)&unk_100113C68);
    v71 = sub_10000E4B8();
    v72 = (uint64_t)v152;
    _ConditionalContent<>.init(storage:)(v69, v59, v153, v70, v71);
    v73 = v156;
    sub_100007ADC(v72, v156, &qword_10015D778);
    swift_storeEnumTagMultiPayload(v73, v154, 0);
    v74 = sub_10000E434();
    v75 = sub_10000E53C();
    _ConditionalContent<>.init(storage:)(v73, v155, v157, v74, v75);
    sub_100008194(v72, &qword_10015D778);
    sub_100008194(v68, &qword_10015D780);
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v44, v67);
  }
  sub_100008194((uint64_t)v21, &qword_10015D788);
  v36 = v159;
LABEL_9:
  v78 = v146;
  v77 = v147;
  v79 = StateObject.wrappedValue.getter(v146, v147, v148, v145, v144);
  v80 = swift_getKeyPath(&unk_10010AF20);
  v81 = swift_getKeyPath(&unk_10010AF48);
  static Published.subscript.getter(v79, v80, v81);
  swift_release(v79);
  swift_release(v80);
  swift_release(v81);
  v82 = v161;
  v83 = swift_errorRelease(v161);
  if (v82)
  {
    v84 = swift_getKeyPath(&unk_10010AF68);
    v85 = (uint64_t)v139;
    *v139 = v84;
    v86 = sub_100003E70(&qword_10015D488);
    swift_storeEnumTagMultiPayload(v85, v86, 0);
    v87 = (_QWORD *)(v85 + *(int *)(v138 + 20));
    v88 = type metadata accessor for RemoteViewConfiguration();
    v89 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    *v87 = EnvironmentObject.init()(v88, v89);
    v87[1] = v90;
    v91 = v141;
    sub_10000E618(v85, v141);
    v92 = *(_OWORD *)v36;
    v160 = *(_OWORD *)(v36 + 5);
    v161 = v92;
    v93 = swift_allocObject(&unk_10014CEB0, 72, 7);
    v94 = *((_OWORD *)v36 + 1);
    *(_OWORD *)(v93 + 16) = *(_OWORD *)v36;
    *(_OWORD *)(v93 + 32) = v94;
    *(_OWORD *)(v93 + 48) = *((_OWORD *)v36 + 2);
    *(_QWORD *)(v93 + 64) = v36[6];
    v95 = v140;
    sub_10000E6A0(v91, v140);
    v96 = v153;
    v97 = (uint64_t (**)())(v95 + *(int *)(v153 + 36));
    *v97 = sub_10000E698;
    v97[1] = (uint64_t (*)())v93;
    v97[2] = 0;
    v97[3] = 0;
    sub_10000E3E4((uint64_t)&v161);
    sub_10000E0FC(v78, v77);
    sub_10000E40C(&v160);
    sub_10000E6E4(v91);
    v98 = &qword_10015D760;
    v99 = v142;
    sub_100007A98(v95, v142, &qword_10015D760);
    v100 = v151;
    sub_100007ADC(v99, v151, &qword_10015D760);
    swift_storeEnumTagMultiPayload(v100, v149, 1);
    v101 = sub_100007D40(&qword_10015D7B0, &qword_10015D780, (uint64_t)&unk_100113C68);
    v102 = sub_10000E4B8();
    v103 = (uint64_t)v152;
    _ConditionalContent<>.init(storage:)(v100, v150, v96, v101, v102);
    v104 = v156;
    sub_100007ADC(v103, v156, &qword_10015D778);
    swift_storeEnumTagMultiPayload(v104, v154, 0);
    v105 = sub_10000E434();
    v106 = sub_10000E53C();
    _ConditionalContent<>.init(storage:)(v104, v155, v157, v105, v106);
    sub_100008194(v103, &qword_10015D778);
    v107 = v99;
  }
  else
  {
    v108 = v130;
    ProgressView<>.init<>()(v83);
    v109 = *(_OWORD *)v36;
    v160 = *(_OWORD *)(v36 + 5);
    v161 = v109;
    v110 = swift_allocObject(&unk_10014CE88, 72, 7);
    v111 = *((_OWORD *)v36 + 1);
    *(_OWORD *)(v110 + 16) = *(_OWORD *)v36;
    *(_OWORD *)(v110 + 32) = v111;
    *(_OWORD *)(v110 + 48) = *((_OWORD *)v36 + 2);
    *(_QWORD *)(v110 + 64) = v36[6];
    sub_10000E0FC(v78, v77);
    sub_10000E3E4((uint64_t)&v161);
    v112 = sub_10000E40C(&v160);
    v113 = v133;
    static TaskPriority.userInitiated.getter(v112);
    v114 = v157;
    v115 = (uint64_t)v129;
    v116 = &v129[*(int *)(v157 + 36)];
    v117 = type metadata accessor for _TaskModifier(0);
    v118 = v135;
    v119 = v136;
    (*(void (**)(char *, char *, uint64_t))(v135 + 16))(&v116[*(int *)(v117 + 20)], v113, v136);
    *(_QWORD *)v116 = &unk_10015D7A0;
    *((_QWORD *)v116 + 1) = v110;
    v120 = v131;
    v121 = v132;
    (*(void (**)(uint64_t, char *, uint64_t))(v131 + 16))(v115, v108, v132);
    (*(void (**)(char *, uint64_t))(v118 + 8))(v113, v119);
    (*(void (**)(char *, uint64_t))(v120 + 8))(v108, v121);
    v98 = &qword_10015D758;
    v122 = v134;
    sub_100007A98(v115, v134, &qword_10015D758);
    v123 = v156;
    sub_100007ADC(v122, v156, &qword_10015D758);
    swift_storeEnumTagMultiPayload(v123, v154, 1);
    v124 = sub_10000E434();
    v125 = sub_10000E53C();
    _ConditionalContent<>.init(storage:)(v123, v155, v114, v124, v125);
    v107 = v122;
  }
  return sub_100008194(v107, v98);
}

_OWORD *sub_10000D894(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = sub_100003E70(&qword_10015D4B8);
  __chkstk_darwin(v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  v6 = sub_100003E70(&qword_10015D7D8);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  return sub_10000E7B4((uint64_t)v4);
}

uint64_t sub_10000D928(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = type metadata accessor for EventController(0);
  v6 = sub_100003B3C(&qword_10015D790, type metadata accessor for EventController, (uint64_t)&unk_10010E484);
  v7 = StateObject.wrappedValue.getter(v2, v3, v4, v5, v6);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = v7;
    v11 = *(_QWORD *)a1;
    v10 = *(_QWORD *)(a1 + 8);
    swift_retain(v8);
    swift_bridgeObjectRetain(v10);
    sub_1000DADAC(v11, v10, 1, v8);
    swift_release(v9);
    swift_release(v8);
    return swift_bridgeObjectRelease(v10);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 48);
    v14 = type metadata accessor for RemoteViewConfiguration();
    v15 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    result = EnvironmentObject.error()(0, v13, v14, v15);
    __break(1u);
  }
  return result;
}

uint64_t sub_10000DA28(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[2] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[3] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[4] = v3;
  v1[5] = v4;
  return swift_task_switch(sub_10000DA94, v3, v4);
}

uint64_t sub_10000DA94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[2];
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v4 = *(unsigned __int8 *)(v1 + 32);
  v5 = type metadata accessor for EventController(0);
  v6 = sub_100003B3C(&qword_10015D790, type metadata accessor for EventController, (uint64_t)&unk_10010E484);
  v0[6] = StateObject.wrappedValue.getter(v3, v2, v4, v5, v6);
  v7 = *(_QWORD *)v1;
  v8 = *(_QWORD *)(v1 + 8);
  v9 = (_QWORD *)swift_task_alloc(dword_10015FF6C);
  v0[7] = v9;
  *v9 = v0;
  v9[1] = sub_10000DB48;
  return sub_10005FD60(v7, v8);
}

uint64_t sub_10000DB48()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  swift_release(v2);
  return swift_task_switch(sub_100006DD8, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_10000DBA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  result = sub_10000ED34(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    v7 = type metadata accessor for Artist(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 1;
  }
  else
  {
    sub_10000EDD4(result, v5, a1, a2);
    v7 = type metadata accessor for Artist(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 0;
  }
  return v8(v9, v10, 1, v7);
}

uint64_t sub_10000DC40@<X0>(uint64_t a1@<X8>)
{
  return sub_10000DCF4(&qword_10015D800, &qword_10015D808, (uint64_t (*)(_QWORD))&type metadata accessor for Artist, a1);
}

uint64_t sub_10000DC5C(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_10000ED34(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = sub_10000EE68(result, v3, 0, a1);
  swift_bridgeObjectRetain(v6);
  return v5;
}

uint64_t sub_10000DCD8@<X0>(uint64_t a1@<X8>)
{
  return sub_10000DCF4(&qword_10015D820, &qword_10015D828, (uint64_t (*)(_QWORD))&type metadata accessor for Playlist, a1);
}

uint64_t sub_10000DCF4@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v12)(_QWORD *, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  uint64_t v18;

  v8 = sub_100003E70(a1);
  v9 = sub_100007D40(a2, a1, (uint64_t)&protocol conformance descriptor for MusicItemCollection<A>);
  dispatch thunk of Collection.startIndex.getter(v8, v9);
  dispatch thunk of Collection.endIndex.getter(v17, v8, v9);
  if (v18 == v17[0])
  {
    v10 = a3(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a4, 1, 1, v10);
  }
  else
  {
    v12 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v17, &v18, v8, v9);
    v14 = v13;
    v15 = a3(0);
    v16 = *(_QWORD *)(v15 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(a4, v14, v15);
    v12(v17, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(a4, 0, 1, v15);
  }
}

uint64_t sub_10000DE0C()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10000DE2C(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for ColorScheme(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.colorScheme.setter(v3);
}

uint64_t sub_10000DEA8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;

  v1 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010AED8);
  v3 = swift_getKeyPath(&unk_10010AF00);
  static Published.subscript.getter(v1, KeyPath, v3);
  swift_release(KeyPath);
  return swift_release(v3);
}

uint64_t sub_10000DF10(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v14;

  v4 = sub_100003E70(&qword_10015D788);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v14 - v8;
  sub_100007ADC(a1, (uint64_t)&v14 - v8, &qword_10015D788);
  v10 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010AED8);
  v12 = swift_getKeyPath(&unk_10010AF00);
  sub_100007ADC((uint64_t)v9, (uint64_t)v7, &qword_10015D788);
  swift_retain(v10);
  static Published.subscript.setter(v7, v10, KeyPath, v12);
  return sub_100008194((uint64_t)v9, &qword_10015D788);
}

uint64_t sub_10000E008@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010AF20);
  v5 = swift_getKeyPath(&unk_10010AF48);
  static Published.subscript.getter(v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10000E084(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010AF20);
  v5 = swift_getKeyPath(&unk_10010AF48);
  v7 = v2;
  swift_errorRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_10000E0FC(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

uint64_t destroy for EventContentView(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  sub_10000E138(a1[2], a1[3]);
  return swift_release(a1[5]);
}

uint64_t sub_10000E138(uint64_t a1, uint64_t a2)
{
  return swift_release(a2);
}

uint64_t initializeWithCopy for EventContentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v4);
  sub_10000E0FC(v5, v6);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  swift_retain(v8);
  return a1;
}

uint64_t assignWithCopy for EventContentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_10000E0FC(v6, v7);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  sub_10000E138(v9, v10);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v12;
  swift_retain(v12);
  swift_release(v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for EventContentView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for EventContentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = v6;
  sub_10000E138(v7, v8);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventContentView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EventContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EventContentView()
{
  return &type metadata for EventContentView;
}

uint64_t sub_10000E374(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118598, 1);
}

uint64_t sub_10000E398()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10015D79C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1000072F4;
  return sub_10000DA28(v0 + 16);
}

uint64_t sub_10000E3E4(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *sub_10000E40C(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

unint64_t sub_10000E434()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D7A8;
  if (!qword_10015D7A8)
  {
    v1 = sub_1000034AC(&qword_10015D778);
    sub_100007D40(&qword_10015D7B0, &qword_10015D780, (uint64_t)&unk_100113C68);
    sub_10000E4B8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D7A8);
  }
  return result;
}

unint64_t sub_10000E4B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D7B8;
  if (!qword_10015D7B8)
  {
    v1 = sub_1000034AC(&qword_10015D760);
    sub_100003B3C(&qword_10015D7C0, type metadata accessor for ErrorView, (uint64_t)&unk_100112538);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D7B8);
  }
  return result;
}

unint64_t sub_10000E53C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D7C8;
  if (!qword_10015D7C8)
  {
    v1 = sub_1000034AC(&qword_10015D758);
    sub_100007D40(&qword_10015D7D0, &qword_10015D750, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    sub_100003B3C(&qword_10015D458, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D7C8);
  }
  return result;
}

uint64_t sub_10000E5D8()
{
  return EnvironmentValues.dismiss.getter();
}

uint64_t sub_10000E5F8()
{
  return EnvironmentValues.dismiss.getter();
}

uint64_t sub_10000E618(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ErrorView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000E660()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  sub_10000E138(v0[4], v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10000E698()
{
  uint64_t v0;

  return sub_10000D928(v0 + 16);
}

uint64_t sub_10000E6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ErrorView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000E6E4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ErrorView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000E720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100003E70(&qword_10015D4B8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

_OWORD *sub_10000E784()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_100003E70(&qword_10015D4B8) - 8) + 80);
  return sub_10000D894(v0 + ((v1 + 16) & ~v1));
}

_OWORD *sub_10000E7B4(uint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD v68[2];

  v2 = v1;
  v64 = a1;
  v3 = sub_100003E70(&qword_10015D4A8);
  v66 = *(_QWORD *)(v3 - 8);
  v67 = v3;
  __chkstk_darwin(v3);
  v65 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003E70(&qword_10015D4B0);
  __chkstk_darwin(v5);
  v58 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_10015D7E0);
  v62 = *(_QWORD *)(v7 - 8);
  v63 = v7;
  __chkstk_darwin(v7);
  v61 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003E70(&qword_10015D7E8);
  v59 = *(_QWORD *)(v9 - 8);
  v60 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003E70(&qword_10015D7F0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003E70(&qword_10015D7F8);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  v20 = (char *)v2 + qword_100164918;
  *(_QWORD *)&v68[0] = 0;
  Published.init(initialValue:)(v68, &type metadata for CGFloat);
  v21 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v21(v20, v19, v16);
  v22 = (char *)v2 + qword_100164920;
  LOBYTE(v68[0]) = 0;
  Published.init(initialValue:)(v68, &type metadata for Bool);
  v23 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v23(v22, v15, v12);
  v24 = (char *)v2 + qword_100164928;
  LOBYTE(v68[0]) = 0;
  Published.init(initialValue:)(v68, &type metadata for Bool);
  v23(v24, v15, v12);
  v25 = (char *)v2 + qword_100164930;
  LOBYTE(v68[0]) = 0;
  Published.init(initialValue:)(v68, &type metadata for Bool);
  v26 = v12;
  v27 = (uint64_t)v58;
  v23(v25, v15, v26);
  v28 = (char *)v2 + qword_100164938;
  *(_QWORD *)&v68[0] = 0;
  Published.init(initialValue:)(v68, &type metadata for CGFloat);
  v21(v28, v19, v16);
  v29 = (char *)v2 + qword_100164940;
  type metadata accessor for CGSize(0);
  v68[0] = 0uLL;
  Published.init(initialValue:)(v68, v30);
  v31 = v11;
  v32 = v64;
  (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v29, v31, v60);
  v33 = (char *)v2 + qword_100164948;
  memset(v68, 0, sizeof(v68));
  v34 = v61;
  Published.init(initialValue:)(v68, &type metadata for EdgeInsets);
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v33, v34, v63);
  v35 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 + 176);
  v36 = type metadata accessor for UserInterfaceSizeClass(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
  v37 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 + 160);
  v38 = sub_100003E70(&qword_10015D4B8);
  v39 = *(_QWORD *)(v38 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v37, v32, v38);
  v40 = sub_100003B3C(&qword_10015D4C0, (uint64_t (*)(uint64_t))&type metadata accessor for LiveMusic, (uint64_t)&protocol conformance descriptor for LiveMusic);
  v41 = v65;
  v42 = Event<>.participants.getter(v38, v40);
  v43 = Participants<>.headliners.getter(v42);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v41, v67);
  sub_10000DBA0(v43, v27);
  swift_bridgeObjectRelease(v43);
  v44 = type metadata accessor for Artist(0);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v27, 1, v44);
  if (v46 == 1)
  {
    sub_100008194(v27, &qword_10015D4B0);
    v50 = sub_100007D40((unint64_t *)&qword_10015D4C8, &qword_10015D4B8, (uint64_t)&unk_10010CF80);
    v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 152))(v38, v50);
    v49 = v51;
  }
  else
  {
    v47 = Artist.id.getter();
    v49 = v48;
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v27, v44);
  }
  v52 = type metadata accessor for PromotionalAssetsController(0);
  v53 = swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
  v54 = v53 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  v55 = type metadata accessor for ArtistPromotionalAssets(0);
  v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v54, 1, 1, v55);
  *(_QWORD *)(v53 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error) = 0;
  *(_QWORD *)(v53 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  ObservationRegistrar.init()(v56);
  *(_QWORD *)(v53 + 16) = v47;
  *(_QWORD *)(v53 + 24) = v49;
  *(_BYTE *)(v53 + 32) = v46 != 1;
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v32, v38);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 + 168)) = v53;
  return v2;
}

uint64_t sub_10000ED08()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10000ED34(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_10000EDD4@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (result < 0 || (v4 = result, 1 << *(_BYTE *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v6 = *(_QWORD *)(a3 + 48);
    v7 = type metadata accessor for Artist(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v6 + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v4, v7);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10000EE68(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * result);
LABEL_8:
  __break(1u);
  return result;
}

unint64_t sub_10000EEC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D810;
  if (!qword_10015D810)
  {
    v1 = sub_1000034AC(&qword_10015D818);
    sub_10000E434();
    sub_10000E53C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D810);
  }
  return result;
}

uint64_t sub_10000EF30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  NSString v19;
  Class isa;
  uint64_t v21;
  Class v22;
  id v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a2;
  v27 = a1;
  v2 = type metadata accessor for Date(0);
  v29 = *(_QWORD *)(v2 - 8);
  v30 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DateInterval(0);
  v5 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TimeZone(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003E70(&qword_10015D830);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v26 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))((char *)&v26 - v16, 1, 1, v8);
  v18 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v19 = String._bridgeToObjectiveC()();
  objc_msgSend(v18, "setDateFormat:", v19);

  sub_100010108((uint64_t)v17, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8) == 1)
  {
    sub_100010150((uint64_t)v15);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, v8);
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v18, "setTimeZone:", isa);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  sub_100010150((uint64_t)v17);
  v21 = sub_10000F1E0(v27, v28, (uint64_t)v7);
  DateInterval.start.getter(v21);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v26);
  v22 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v30);
  v23 = objc_msgSend(v18, "stringFromDate:", v22);

  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  return v24;
}

uint64_t sub_10000F1E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t);
  char *v31;
  uint64_t result;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t (*v40)(char *, uint64_t);
  uint64_t v41;
  double v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  void (*v46)(uint64_t, uint64_t);
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  v44 = a3;
  v58 = type metadata accessor for Calendar(0);
  v53 = *(_QWORD *)(v58 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for TimeZone(0);
  v52 = *(uint64_t (**)(char *, uint64_t))(v59 - 8);
  v8 = ((uint64_t (*)(void))__chkstk_darwin)();
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v44 - v11;
  v13 = type metadata accessor for DateInterval(0);
  v57 = *(char **)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Date(0);
  v48 = *(_QWORD *)(v56 - 8);
  v16 = __chkstk_darwin(v56);
  v55 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v44 - v19;
  __chkstk_darwin(v18);
  v54 = (char *)&v44 - v21;
  v47 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  v22 = v47(a1, a2);
  DateInterval.start.getter(v22);
  v23 = (void (*)(char *, uint64_t))*((_QWORD *)v57 + 1);
  v49 = v13;
  v45 = v23;
  v23(v15, v13);
  v24 = *(void (**)(uint64_t, uint64_t))(a2 + 16);
  v50 = a1;
  v51 = v3;
  v25 = a2;
  v46 = v24;
  v24(a1, a2);
  v57 = v12;
  v26 = TimeZone.secondsFromGMT(for:)(v20);
  v27 = static Calendar.current.getter();
  Calendar.timeZone.getter(v27);
  v53 = *(_QWORD *)(v53 + 8);
  ((void (*)(char *, uint64_t))v53)(v7, v58);
  v28 = v20;
  v29 = TimeZone.secondsFromGMT(for:)(v20);
  v30 = (uint64_t (*)(char *, uint64_t))*((_QWORD *)v52 + 1);
  v31 = v10;
  result = v30(v10, v59);
  if (__OFSUB__(v26, v29))
  {
    __break(1u);
  }
  else
  {
    v33 = v28;
    Date.addingTimeInterval(_:)(result, (double)(v26 - v29));
    v30(v57, v59);
    v48 = *(_QWORD *)(v48 + 8);
    ((void (*)(char *, uint64_t))v48)(v28, v56);
    v34 = v50;
    v35 = v47(v50, v25);
    v52 = v30;
    v36 = v55;
    DateInterval.end.getter(v35);
    v45(v15, v49);
    v46(v34, v25);
    v37 = TimeZone.secondsFromGMT(for:)(v36);
    v38 = static Calendar.current.getter();
    Calendar.timeZone.getter(v38);
    ((void (*)(char *, uint64_t))v53)(v7, v58);
    v39 = v36;
    v40 = v52;
    v41 = TimeZone.secondsFromGMT(for:)(v39);
    result = v40(v31, v59);
    if (!__OFSUB__(v37, v41))
    {
      v42 = (double)(v37 - v41);
      v43 = v55;
      Date.addingTimeInterval(_:)(result, v42);
      v40(v57, v59);
      ((void (*)(char *, uint64_t))v48)(v43, v56);
      return DateInterval.init(start:end:)(v54, v33);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10000F594(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  NSString v20;
  Class isa;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  NSString v26;
  char *v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class v36;
  id v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v42 = a2;
  v41 = a1;
  v2 = type metadata accessor for Date(0);
  v44 = *(_QWORD *)(v2 - 8);
  v45 = v2;
  __chkstk_darwin(v2);
  v43 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DateInterval(0);
  v47 = *(_QWORD *)(v4 - 8);
  v48 = v4;
  __chkstk_darwin(v4);
  v46 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TimeZone(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v40 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003E70(&qword_10015D830);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v40 - v13;
  v15 = type metadata accessor for Locale(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (void *)objc_opt_self(NSDateFormatter);
  v20 = String._bridgeToObjectiveC()();
  static Locale.current.getter(v20);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v22 = objc_msgSend(v19, "dateFormatFromTemplate:options:locale:", v20, 0, isa);

  if (v22)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v24 = v23;

  }
  else
  {
    v24 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v14, 1, 1, v6);
  v25 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  if (v24)
  {
    v26 = String._bridgeToObjectiveC()();
    objc_msgSend(v25, "setDateFormat:", v26);

  }
  sub_100010108((uint64_t)v14, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    sub_100010150((uint64_t)v12);
  }
  else
  {
    v27 = v40;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v40, v12, v6);
    v28 = TimeZone._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v25, "setTimeZone:", v28);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v27, v6);
  }
  v30 = v44;
  v29 = v45;
  v31 = v43;
  v33 = v41;
  v32 = v42;
  swift_bridgeObjectRelease();
  sub_100010150((uint64_t)v14);
  v34 = v46;
  v35 = sub_10000F1E0(v33, v32, v46);
  DateInterval.start.getter(v35);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v34, v48);
  v36 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v29);
  v37 = objc_msgSend(v25, "stringFromDate:", v36);

  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  return v38;
}

uint64_t sub_10000F944(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  Class isa;
  uint64_t v21;
  Class v22;
  id v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a2;
  v27 = a1;
  v2 = type metadata accessor for Date(0);
  v29 = *(_QWORD *)(v2 - 8);
  v30 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DateInterval(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimeZone(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003E70(&qword_10015D830);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v26 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))((char *)&v26 - v17, 1, 1, v9);
  v19 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v19, "setDateStyle:", 2);
  sub_100010108((uint64_t)v18, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9) == 1)
  {
    sub_100010150((uint64_t)v16);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, v9);
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v19, "setTimeZone:", isa);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  sub_100010150((uint64_t)v18);
  v21 = sub_10000F1E0(v27, v28, (uint64_t)v8);
  DateInterval.start.getter(v21);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v22 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v30);
  v23 = objc_msgSend(v19, "stringFromDate:", v22);

  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  return v24;
}

uint64_t sub_10000FBD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  Class isa;
  uint64_t v21;
  Class v22;
  id v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a2;
  v27 = a1;
  v2 = type metadata accessor for Date(0);
  v29 = *(_QWORD *)(v2 - 8);
  v30 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DateInterval(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimeZone(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003E70(&qword_10015D830);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v26 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))((char *)&v26 - v17, 1, 1, v9);
  v19 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v19, "setDateStyle:", 3);
  sub_100010108((uint64_t)v18, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9) == 1)
  {
    sub_100010150((uint64_t)v16);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, v9);
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v19, "setTimeZone:", isa);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  sub_100010150((uint64_t)v18);
  v21 = sub_10000F1E0(v27, v28, (uint64_t)v8);
  DateInterval.start.getter(v21);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v22 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v30);
  v23 = objc_msgSend(v19, "stringFromDate:", v22);

  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  return v24;
}

uint64_t sub_10000FE6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  Class isa;
  uint64_t v21;
  Class v22;
  id v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a2;
  v27 = a1;
  v2 = type metadata accessor for Date(0);
  v29 = *(_QWORD *)(v2 - 8);
  v30 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DateInterval(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimeZone(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003E70(&qword_10015D830);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v26 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))((char *)&v26 - v17, 1, 1, v9);
  v19 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v19, "setTimeStyle:", 1);
  sub_100010108((uint64_t)v18, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9) == 1)
  {
    sub_100010150((uint64_t)v16);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, v9);
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v19, "setTimeZone:", isa);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  sub_100010150((uint64_t)v18);
  v21 = sub_10000F1E0(v27, v28, (uint64_t)v8);
  DateInterval.start.getter(v21);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v22 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v30);
  v23 = objc_msgSend(v19, "stringFromDate:", v22);

  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  return v24;
}

uint64_t sub_100010108(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015D830);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100010150(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003E70(&qword_10015D830);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100010190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_10010B120);
  v6 = v0;
  v3 = sub_100003B3C(&qword_10015D958, type metadata accessor for SetlistViewModel, (uint64_t)&unk_10010B100);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v3);
  swift_release(KeyPath);
  v4 = *(_QWORD *)(v0 + 176);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 184));
  return v4;
}

uint64_t sub_100010224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = a2;
  *(_QWORD *)(a1 + 184) = a3;
  swift_bridgeObjectRetain(a3);
  return swift_bridgeObjectRelease(v3);
}

unint64_t sub_10001025C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = *(unsigned __int8 *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  sub_100008170((_QWORD *)(v0 + 32), v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v3);
  v6 = sub_100003E70(&qword_10015D970);
  v7 = _arrayForceCast<A, B>(_:)(v4, AssociatedTypeWitness, v6);
  swift_bridgeObjectRelease(v4);
  v8 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRelease(v7);
  v9 = 4;
  if (v8 < 4)
    v9 = v8;
  if (v1)
    return v8;
  else
    return v9;
}

uint64_t sub_100010314@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  KeyPath = swift_getKeyPath(&unk_10010B170);
  v7[0] = v1;
  v4 = sub_100003B3C(&qword_10015D958, type metadata accessor for SetlistViewModel, (uint64_t)&unk_10010B100);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC16EventViewService16SetlistViewModel__formattedStandardDescription;
  swift_beginAccess(v1 + OBJC_IVAR____TtC16EventViewService16SetlistViewModel__formattedStandardDescription, v7, 0, 0);
  return sub_100007ADC(v5, a1, &qword_10015D950);
}

uint64_t sub_1000103CC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010B170);
  v8[0] = v3;
  v5 = sub_100003B3C(&qword_10015D958, type metadata accessor for SetlistViewModel, (uint64_t)&unk_10010B100);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC16EventViewService16SetlistViewModel__formattedStandardDescription;
  swift_beginAccess(v3 + OBJC_IVAR____TtC16EventViewService16SetlistViewModel__formattedStandardDescription, v8, 0, 0);
  return sub_100007ADC(v6, a2, &qword_10015D950);
}

uint64_t sub_100010484(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v4 = sub_100003E70(&qword_10015D950);
  __chkstk_darwin(v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100007ADC(a1, (uint64_t)v6, &qword_10015D950);
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010B170);
  v12 = v7;
  v13 = v6;
  v14 = v7;
  v9 = sub_100003B3C(&qword_10015D958, type metadata accessor for SetlistViewModel, (uint64_t)&unk_10010B100);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_100011C54, v11, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath);
  return sub_100008194((uint64_t)v6, &qword_10015D950);
}

uint64_t sub_10001058C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + OBJC_IVAR____TtC16EventViewService16SetlistViewModel__formattedStandardDescription;
  swift_beginAccess(a1 + OBJC_IVAR____TtC16EventViewService16SetlistViewModel__formattedStandardDescription, v5, 33, 0);
  sub_100011C0C(a2, v3);
  return swift_endAccess(v5);
}

uint64_t sub_1000105F4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  _QWORD v16[5];

  v3 = v1[7];
  v4 = v1[8];
  sub_100008170(v1 + 4, v3);
  v5 = *(void (**)(uint64_t, uint64_t))(v4 + 56);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4);
  v7 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v16[-1] - v9;
  v5(v3, v4);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v12 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    v16[3] = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v3, AssociatedTypeWitness, &unk_10011AE18, &unk_10011AE20);
    v16[4] = AssociatedConformanceWitness;
    sub_100007D80(v16);
    (*(void (**)(void))(v11 + 32))();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(100, 100, AssociatedTypeWitness, AssociatedConformanceWitness);
    return sub_1000055A8(v16);
  }
}

void sub_100010780(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = *(_QWORD **)(v2 + 200);
  KeyPath = swift_getKeyPath(&unk_10010B148);
  v29[0] = v6;
  v8 = sub_100003B3C((unint64_t *)&qword_10015D960, type metadata accessor for SetlistSongPlaybackController, (uint64_t)&unk_100112AF0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v29, KeyPath, v8);
  swift_release(KeyPath);
  swift_beginAccess(v6 + 7, &v28, 0, 0);
  sub_100007ADC((uint64_t)(v6 + 7), (uint64_t)v29, &qword_10015D968);
  v9 = v30;
  if (v30)
  {
    v10 = v31;
    sub_100008170(v29, v30);
    v11 = dispatch thunk of MusicItem.id.getter(v9, *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8));
    v9 = v12;
    sub_1000055A8(v29);
  }
  else
  {
    sub_100008194((uint64_t)v29, &qword_10015D968);
    v11 = 0;
  }
  v14 = a1[3];
  v13 = a1[4];
  sub_100008170(a1, v14);
  v15 = dispatch thunk of MusicItem.id.getter(v14, *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8));
  v17 = v16;
  if (v9)
  {
    if (v11 == v15 && v9 == v16)
    {
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v17);
      goto LABEL_18;
    }
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v9, v15, v16, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v17);
    if ((v19 & 1) != 0)
    {
LABEL_18:
      v25 = v6[5];
      v26 = v6[6];
      sub_100008170(v6 + 2, v25);
      v27 = (char *)&loc_100010A24
          + 4 * byte_10010B020[(*(unsigned __int8 (**)(uint64_t, uint64_t))(v26 + 16))(v25, v26)];
      __asm { BR              X10 }
    }
  }
  else
  {
    swift_bridgeObjectRelease(v16);
  }
  sub_1000CBA70((uint64_t)a1);
  if (qword_10015CF60 != -1)
    swift_once(&qword_10015CF60, sub_100105E80);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_100011AC4(v20, (uint64_t)qword_10016F728);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Playing new song.", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

  sub_1000DB03C(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), 8, 11, 16, 0, 3u, a2);
}

uint64_t sub_100010D10(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[20] = a1;
  v2[21] = v1;
  v3 = type metadata accessor for AttributeContainer(0);
  v2[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003E70(&qword_10015D950);
  v2[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttributedString(0);
  v2[24] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[25] = v6;
  v2[26] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v2[27] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v2[28] = v8;
  v2[29] = v9;
  return swift_task_switch(sub_100010DE8, v8, v9);
}

uint64_t sub_100010DE8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSString v7;
  unint64_t v8;
  Class isa;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD **)(v0 + 168);
  v2 = v1[7];
  v3 = v1[8];
  sub_100008170(v1 + 4, v2);
  *(_QWORD *)(v0 + 240) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(v2, v3);
  *(_QWORD *)(v0 + 248) = v4;
  if (v4)
  {
    v5 = v0 + 16;
    v6 = (void *)objc_opt_self(NSAttributedString);
    v7 = String._bridgeToObjectiveC()();
    *(_QWORD *)(v0 + 256) = v7;
    v8 = sub_100102920((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DocumentReadingOptionKey(0);
    sub_100003B3C(&qword_10015D228, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey, (uint64_t)&unk_10010A524);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 264) = isa;
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_100010F90;
    v10 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v11 = (_QWORD *)(v0 + 80);
    v11[1] = 0x40000000;
    v11[2] = sub_10001134C;
    v11[3] = &unk_10014CF68;
    v11[4] = v10;
    objc_msgSend(v6, "loadFromHTMLWithString:options:completionHandler:", v7, isa, v11);
    return swift_continuation_await(v5);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 216));
    v13 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v0 + 184);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v14);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100010F90()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 272) = v2;
  if (v2)
    return swift_task_switch(sub_1000111DC, v1[28], v1[29]);
  swift_bridgeObjectRelease(v1[31]);
  return swift_task_switch(sub_100010FF8, v1[28], v1[29]);
}

uint64_t sub_100010FF8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t KeyPath;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v20;

  v2 = *(void **)(v0 + 256);
  v1 = *(void **)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 216));
  v9 = *(void **)(v0 + 120);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));

  v20 = v9;
  AttributedString.init(_:)();
  KeyPath = swift_getKeyPath(&unk_10010B198);
  v11 = (uint64_t *)swift_task_alloc(16);
  *v11 = KeyPath;
  v12 = swift_getKeyPath(&unk_10010B1C8);
  swift_task_dealloc(v11);
  *(_QWORD *)(v0 + 144) = v7;
  v13 = sub_100011B30();
  swift_retain(v7);
  AttributedString.subscript.setter(v0 + 144, v12, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v3, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v6, 0, 1, v4);
  v14 = swift_getKeyPath(&unk_10010B170);
  v15 = swift_task_alloc(32);
  *(_QWORD *)(v15 + 16) = v8;
  *(_QWORD *)(v15 + 24) = v6;
  *(_QWORD *)(v0 + 152) = v8;
  v16 = sub_100003B3C(&qword_10015D958, type metadata accessor for SetlistViewModel, (uint64_t)&unk_10010B100);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 152, v14, sub_100011C54, v15, (char *)&type metadata for () + 8, v16);
  swift_release(v14);
  swift_task_dealloc(v15);
  sub_100008194(v6, &qword_10015D950);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  v17 = *(_QWORD *)(v0 + 176);
  v18 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v18);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000111DC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v2 = *(void **)(v0 + 264);
  v1 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = *(void **)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 184);
  v17 = *(_QWORD *)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 192);
  v8 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 176);
  v9 = swift_release(*(_QWORD *)(v0 + 216));
  swift_willThrow(v9);
  swift_errorRelease(v1);

  AttributeContainer.init()(v10);
  AttributedString.init(_:attributes:)(v5, v3, v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v6, 0, 1, v18);
  KeyPath = swift_getKeyPath(&unk_10010B170);
  v12 = swift_task_alloc(32);
  *(_QWORD *)(v12 + 16) = v8;
  *(_QWORD *)(v12 + 24) = v6;
  *(_QWORD *)(v0 + 136) = v8;
  v13 = sub_100003B3C(&qword_10015D958, type metadata accessor for SetlistViewModel, (uint64_t)&unk_10010B100);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 136, KeyPath, sub_100011AFC, v12, (char *)&type metadata for () + 8, v13);
  swift_release(KeyPath);
  swift_task_dealloc(v12);
  sub_100008194(v6, &qword_10015D950);
  v14 = *(_QWORD *)(v0 + 176);
  v15 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001134C(uint64_t result, void *a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;

  v4 = *(_QWORD *)(result + 32);
  if (a4)
  {
    v6 = sub_100003E70(&qword_10015D990);
    v7 = swift_allocError(v6, &protocol self-conformance witness table for Error, 0, 0);
    *v8 = a4;
    v9 = a4;
    return swift_continuation_throwingResumeWithError(v4, v7);
  }
  else if (a2)
  {
    type metadata accessor for DocumentAttributeKey(0);
    v13 = v12;
    v14 = sub_100003B3C(&qword_10015D218, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_10010A4E4);
    v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3, v13, (char *)&type metadata for Any + 8, v14);
    v16 = *(_QWORD **)(*(_QWORD *)(v4 + 64) + 40);
    *v16 = a2;
    v16[1] = v15;
    v17 = a2;
    return swift_continuation_throwingResume(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100011424(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  v5 = *a1;
  v6 = v2;
  v3 = sub_100003E70(&qword_10015D988);
  return dispatch thunk of static Equatable.== infix(_:_:)(&v6, &v5, v3, &protocol witness table for AnyKeyPath) & 1;
}

_QWORD *sub_10001147C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(v0[3]);
  sub_1000055A8(v0 + 4);
  v1 = v0[11];
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v1);
  v2 = v0[15];
  swift_bridgeObjectRelease(v0[17]);
  swift_bridgeObjectRelease(v2);
  v3 = v0[19];
  swift_bridgeObjectRelease(v0[21]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v0[23]);
  swift_release(v0[25]);
  sub_100008194((uint64_t)v0 + OBJC_IVAR____TtC16EventViewService16SetlistViewModel__formattedStandardDescription, &qword_10015D950);
  v4 = (char *)v0 + OBJC_IVAR____TtC16EventViewService16SetlistViewModel___observationRegistrar;
  v5 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return v0;
}

uint64_t sub_100011534()
{
  uint64_t v0;

  sub_10001147C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100011558()
{
  return type metadata accessor for SetlistViewModel(0);
}

uint64_t type metadata accessor for SetlistViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10015D870;
  if (!qword_10015D870)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SetlistViewModel);
  return result;
}

void sub_10001159C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[11];

  v6[0] = &unk_10010B088;
  v6[1] = &unk_10010B0A0;
  v6[2] = &unk_10010B0B8;
  v6[3] = &unk_10010B0D0;
  v6[4] = &unk_10010B0D0;
  v6[5] = &unk_10010B0D0;
  v6[6] = &unk_10010B0E8;
  v6[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_100011674(319);
  if (v3 <= 0x3F)
  {
    v6[9] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ObservationRegistrar(319);
    if (v5 <= 0x3F)
    {
      v6[10] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 11, v6, a1 + 80);
    }
  }
}

void sub_100011674(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015D880)
  {
    v2 = type metadata accessor for AttributedString(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10015D880);
  }
}

uint64_t sub_1000116C8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010B148);
  v7[0] = v3;
  v5 = sub_100003B3C((unint64_t *)&qword_10015D960, type metadata accessor for SetlistSongPlaybackController, (uint64_t)&unk_100112AF0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 56, v7, 0, 0);
  return sub_100007ADC(v3 + 56, a2, &qword_10015D968);
}

uint64_t sub_100011778(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[6];
  uint64_t v8;
  _BYTE v9[40];

  sub_100007ADC(a1, (uint64_t)v9, &qword_10015D968);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010B148);
  v7[2] = v3;
  v7[3] = v9;
  v8 = v3;
  v5 = sub_100003B3C((unint64_t *)&qword_10015D960, type metadata accessor for SetlistSongPlaybackController, (uint64_t)&unk_100112AF0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100011ADC, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return sub_100008194((uint64_t)v9, &qword_10015D968);
}

uint64_t sub_100011840(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a6;
  v30 = a7;
  v13 = sub_100007D80(&v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(v13, a3, a6);
  *(_QWORD *)(a5 + 80) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000022, 0x80000001001152F0);
  *(_QWORD *)(a5 + 88) = v14;
  *(_BYTE *)(a5 + 96) = v15 & 1;
  *(_QWORD *)(a5 + 104) = v16;
  *(_QWORD *)(a5 + 112) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000029, 0x8000000100115320);
  *(_QWORD *)(a5 + 120) = v17;
  *(_BYTE *)(a5 + 128) = v18 & 1;
  *(_QWORD *)(a5 + 136) = v19;
  *(_QWORD *)(a5 + 144) = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002BLL, 0x8000000100115350);
  *(_QWORD *)(a5 + 152) = v20;
  *(_BYTE *)(a5 + 160) = v21 & 1;
  *(_QWORD *)(a5 + 168) = v22;
  *(_QWORD *)(a5 + 176) = 0;
  *(_QWORD *)(a5 + 184) = 0;
  *(_QWORD *)(a5 + 192) = 0x4008000000000000;
  if (qword_10015CEC0 != -1)
    swift_once(&qword_10015CEC0, sub_1000CBB48);
  v23 = qword_10016F6B8;
  *(_QWORD *)(a5 + 200) = qword_10016F6B8;
  v24 = a5 + OBJC_IVAR____TtC16EventViewService16SetlistViewModel__formattedStandardDescription;
  v25 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  swift_retain(v23);
  ObservationRegistrar.init()(v26);
  *(_QWORD *)(a5 + 16) = a1;
  *(_QWORD *)(a5 + 24) = a2;
  sub_100011A9C(&v28, a5 + 32);
  *(_BYTE *)(a5 + 72) = a4 & 1;
  return a5;
}

uint64_t sub_1000119D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v13 = *(_QWORD *)(a6 - 8);
  __chkstk_darwin(a1);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, a6);
  return sub_100011840(a1, a2, (uint64_t)v15, a4, v17, a6, a7);
}

uint64_t sub_100011A9C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100011AC4(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_100011ADC()
{
  uint64_t v0;

  return sub_1000CBB84(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100011AFC()
{
  uint64_t v0;

  return sub_10001058C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100011B14()
{
  AttributeScopes.SwiftUIAttributes.font.getter();
  __break(1u);
}

unint64_t sub_100011B30()
{
  unint64_t result;

  result = qword_10015D980;
  if (!qword_10015D980)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.FontAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.FontAttribute);
    atomic_store(result, (unint64_t *)&qword_10015D980);
  }
  return result;
}

void sub_100011B74(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_100011B30();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_100011B98()
{
  return 8;
}

uint64_t sub_100011BA4(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_100011BAC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_100011BBC()
{
  uint64_t v0;

  v0 = sub_100003E70(&qword_10015D988);
  return dispatch thunk of Hashable.hashValue.getter(v0, &protocol witness table for AnyKeyPath);
}

_QWORD *sub_100011C00(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100011C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015D950);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100011C54()
{
  return sub_100011AFC();
}

unint64_t sub_100011C68(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v20);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_10000E0FC(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v11;
    v12 = *(int *)(a3 + 24);
    v13 = (uint64_t *)(a1 + v12);
    v14 = (uint64_t *)(a2 + v12);
    swift_retain(v10);
    v15 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v21 = *v14;
      *v13 = *v14;
      swift_retain(v21);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  return a1;
}

uint64_t sub_100011D74(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  sub_10000E138(*a1, a1[1]);
  swift_release(a1[3]);
  v4 = (uint64_t *)((char *)a1 + *(int *)(a2 + 24));
  v5 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for OpenURLAction(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
}

uint64_t sub_100011DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10000E0FC(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  v11 = *(int *)(a3 + 24);
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  swift_retain(v9);
  v14 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
    v16 = 1;
  }
  else
  {
    v17 = *v13;
    *v12 = *v13;
    swift_retain(v17);
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v14, v16);
  return a1;
}

uint64_t sub_100011ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10000E0FC(*(_QWORD *)a2, v7);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_10000E138(v9, v10);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v12;
  swift_retain(v12);
  swift_release(v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (a1 != a2)
  {
    v13 = *(int *)(a3 + 24);
    v14 = (uint64_t *)(a1 + v13);
    v15 = (uint64_t *)(a2 + v13);
    sub_100008194(a1 + v13, &qword_10015D600);
    v16 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
      v18 = 1;
    }
    else
    {
      v19 = *v15;
      *v14 = *v15;
      swift_retain(v19);
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v16, v18);
  }
  return a1;
}

uint64_t sub_100011FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10001209C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_10000E138(v7, v8);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 24);
    v11 = (void *)(a1 + v10);
    v12 = (const void *)(a2 + v10);
    sub_100008194(a1 + v10, &qword_10015D600);
    v13 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100012194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000121A0);
}

uint64_t sub_1000121A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_100003E70(qword_10015D610);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

uint64_t sub_10001222C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100012238);
}

uint64_t sub_100012238(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 24) = a2;
  }
  else
  {
    v7 = sub_100003E70(qword_10015D610);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AppModule(uint64_t a1)
{
  uint64_t result;

  result = qword_10015D9F0;
  if (!qword_10015D9F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppModule);
  return result;
}

void sub_1000122EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10010B220;
  v4[1] = &unk_10010B238;
  sub_100012368(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_100012368(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015D6A0)
  {
    v2 = type metadata accessor for OpenURLAction(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10015D6A0);
  }
}

uint64_t sub_1000123BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118658, 1);
}

uint64_t sub_1000123CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v2 = v1;
  v95 = a1;
  v3 = type metadata accessor for TaskPriority(0);
  v93 = *(_QWORD *)(v3 - 8);
  v94 = v3;
  __chkstk_darwin(v3);
  v92 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AppModule(0);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v90 = *(_QWORD *)(v5 - 8);
  v91 = v6;
  __chkstk_darwin(v5);
  v89 = (uint64_t)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003E70(&qword_10015DA30);
  __chkstk_darwin(v8);
  v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100003E70(&qword_10015DA38);
  __chkstk_darwin(v81);
  v12 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100003E70(&qword_10015DA40);
  __chkstk_darwin(v82);
  v80 = (uint64_t)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100003E70(&qword_10015DA48);
  __chkstk_darwin(v84);
  v83 = (uint64_t)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100003E70(&qword_10015DA50);
  __chkstk_darwin(v86);
  v85 = (uint64_t)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100003E70(&qword_10015DA58);
  v16 = __chkstk_darwin(v88);
  v87 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = static HorizontalAlignment.leading.getter(v16);
  v19 = *v1;
  v20 = v1[1];
  v21 = *((unsigned __int8 *)v1 + 16);
  v22 = type metadata accessor for AppViewModel(0);
  v23 = sub_100003B3C(&qword_10015DA60, type metadata accessor for AppViewModel, (uint64_t)&unk_10010A770);
  v24 = StateObject.wrappedValue.getter(v19, v20, v21, v22, v23);
  v25 = *(unsigned __int8 *)(v24 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shouldShowDiscoveryDetail);
  swift_release(v24);
  v26 = 0x4028000000000000;
  if (v25)
    v26 = 0;
  *(_QWORD *)v10 = v18;
  *((_QWORD *)v10 + 1) = v26;
  v10[16] = 0;
  v27 = sub_100003E70(&qword_10015DA68);
  v28 = sub_100012974(v2, (double *)&v10[*(int *)(v27 + 44)]);
  v29 = static Edge.Set.top.getter(v28);
  v30 = StateObject.wrappedValue.getter(v19, v20, v21, v22, v23);
  v31 = *(unsigned __int8 *)(v30 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shouldShowDiscoveryDetail);
  swift_release(v30);
  v32 = 0.0;
  if (v31)
    v32 = 24.0;
  v33 = EdgeInsets.init(_all:)(v32);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  sub_100007ADC((uint64_t)v10, (uint64_t)v12, &qword_10015DA30);
  v40 = &v12[*(int *)(v81 + 36)];
  *v40 = v29;
  *((double *)v40 + 1) = v33;
  *((_QWORD *)v40 + 2) = v35;
  *((_QWORD *)v40 + 3) = v37;
  *((_QWORD *)v40 + 4) = v39;
  v40[40] = 0;
  v41 = sub_100008194((uint64_t)v10, &qword_10015DA30);
  v42 = static Edge.Set.horizontal.getter(v41);
  v43 = v80;
  sub_100007ADC((uint64_t)v12, v80, &qword_10015DA38);
  v44 = v43 + *(int *)(v82 + 36);
  *(_BYTE *)v44 = v42;
  *(_OWORD *)(v44 + 8) = 0u;
  *(_OWORD *)(v44 + 24) = 0u;
  *(_BYTE *)(v44 + 40) = 1;
  v45 = sub_100008194((uint64_t)v12, &qword_10015DA38);
  v46 = static Edge.Set.bottom.getter(v45);
  v47 = StateObject.wrappedValue.getter(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v22, v23);
  v48 = *(unsigned __int8 *)(v47 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shouldShowDiscoveryDetail);
  swift_release(v47);
  v49 = 52.0;
  if (!v48)
    v49 = 16.0;
  v50 = EdgeInsets.init(_all:)(v49);
  v52 = v51;
  v54 = v53;
  v56 = v55;
  v57 = v83;
  sub_100007ADC(v43, v83, &qword_10015DA40);
  v58 = v57 + *(int *)(v84 + 36);
  *(_BYTE *)v58 = v46;
  *(double *)(v58 + 8) = v50;
  *(_QWORD *)(v58 + 16) = v52;
  *(_QWORD *)(v58 + 24) = v54;
  *(_QWORD *)(v58 + 32) = v56;
  *(_BYTE *)(v58 + 40) = 0;
  sub_100008194(v43, &qword_10015DA40);
  v59 = StateObject.wrappedValue.getter(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v22, v23);
  v60 = *(_BYTE *)(v59 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shouldShowDiscoveryDetail);
  v61 = swift_release(v59);
  v62 = static Alignment.center.getter(v61);
  v64 = v63;
  v65 = v85;
  sub_100007ADC(v57, v85, &qword_10015DA48);
  v66 = v65 + *(int *)(v86 + 36);
  *(_BYTE *)v66 = (v60 & 1) == 0;
  *(_QWORD *)(v66 + 8) = v62;
  *(_QWORD *)(v66 + 16) = v64;
  sub_100008194(v57, &qword_10015DA48);
  v67 = v89;
  sub_1000140A0((uint64_t)v2, v89);
  v68 = *(unsigned __int8 *)(v90 + 80);
  v69 = (v68 + 16) & ~v68;
  v70 = swift_allocObject(&unk_10014CFC8, v69 + v91, v68 | 7);
  v71 = sub_1000140E8(v67, v70 + v69);
  v72 = v92;
  static TaskPriority.userInitiated.getter(v71);
  v73 = (uint64_t)v87;
  v74 = &v87[*(int *)(v88 + 36)];
  v75 = type metadata accessor for _TaskModifier(0);
  v77 = v93;
  v76 = v94;
  (*(void (**)(char *, char *, uint64_t))(v93 + 16))(&v74[*(int *)(v75 + 20)], v72, v94);
  *(_QWORD *)v74 = &unk_10015DA78;
  *((_QWORD *)v74 + 1) = v70;
  sub_100007ADC(v65, v73, &qword_10015DA50);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v72, v76);
  sub_100008194(v65, &qword_10015DA50);
  return sub_100007A98(v73, v95, &qword_10015DA58);
}

uint64_t sub_100012974@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unsigned __int8 v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t (*v97)();
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  double v149;
  char *v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  char v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  double *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int *v199;
  uint64_t *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char v210;
  int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t (*v224)();
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  double *v231;
  char *v232;
  uint64_t v233;
  uint64_t KeyPath;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  double v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char v256;
  uint64_t v257;
  uint64_t v258;

  v231 = a2;
  v3 = type metadata accessor for AppModule(0);
  v220 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v221 = (uint64_t)&v213 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v230 = v5;
  __chkstk_darwin(v4);
  v229 = (uint64_t)&v213 - v6;
  v217 = type metadata accessor for Divider(0);
  v216 = *(_QWORD *)(v217 - 8);
  __chkstk_darwin(v217);
  v215 = (char *)&v213 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = sub_100003E70(&qword_10015DA80);
  v8 = __chkstk_darwin(v214);
  v219 = (char *)&v213 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v218 = (uint64_t)&v213 - v10;
  v11 = sub_100003E70(&qword_10015DA88);
  v12 = __chkstk_darwin(v11);
  v239 = (uint64_t *)((char *)&v213 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  v249 = (uint64_t)&v213 - v14;
  v226 = type metadata accessor for AccessibilityTraits(0);
  v225 = *(_QWORD *)(v226 - 8);
  __chkstk_darwin(v226);
  v224 = (uint64_t (*)())((char *)&v213 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v222 = sub_100003E70(&qword_10015DA90);
  v16 = __chkstk_darwin(v222);
  v223 = (char *)&v213 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v232 = (char *)&v213 - v18;
  v228 = sub_100003E70(&qword_10015DA98);
  v19 = __chkstk_darwin(v228);
  v236 = (uint64_t)&v213 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v227 = (uint64_t)&v213 - v22;
  __chkstk_darwin(v21);
  v248 = (uint64_t)&v213 - v23;
  v24 = *a1;
  v25 = a1[1];
  v26 = *((unsigned __int8 *)a1 + 16);
  v27 = type metadata accessor for AppViewModel(0);
  v28 = sub_100003B3C(&qword_10015DA60, type metadata accessor for AppViewModel, (uint64_t)&unk_10010A770);
  v29 = StateObject.wrappedValue.getter(v24, v25, v26, v27, v28);
  v30 = *(unsigned __int8 *)(v29 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shouldShowDiscoveryDetail);
  swift_release(v29);
  v238 = v27;
  v237 = v28;
  if (v30 == 1)
  {
    v31 = StateObject.wrappedValue.getter(v24, v25, v26, v27, v28);
    v32 = *(_QWORD *)(v31 + OBJC_IVAR____TtC16EventViewService12AppViewModel_subheaderTitle);
    v33 = *(_QWORD *)(v31 + OBJC_IVAR____TtC16EventViewService12AppViewModel_subheaderTitle + 8);
    v34 = *(unsigned __int8 *)(v31 + OBJC_IVAR____TtC16EventViewService12AppViewModel_subheaderTitle + 16);
    v35 = *(_QWORD *)(v31 + OBJC_IVAR____TtC16EventViewService12AppViewModel_subheaderTitle + 24);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v35);
    swift_release(v31);
    v36 = Text.init(_:tableName:bundle:comment:)(v32, v33, v34, v35, 0, 0, 0, 0, 0, 256);
    v38 = v37;
    v40 = v39;
    v42 = v41 & 1;
    v43 = static Font.footnote.getter(v36);
    static Font.Weight.semibold.getter();
    v44 = Font.weight(_:)(v43);
    swift_release(v43);
    v45 = Text.font(_:)(v44, v36, v38, v42, v40);
    v47 = v46;
    v49 = v48;
    v51 = v50;
    swift_release(v44);
    sub_10000BFF8(v36, v38, v42);
    swift_bridgeObjectRelease(v40);
    if (qword_10015CE58 != -1)
      swift_once(&qword_10015CE58, sub_1000382B4);
    v52 = qword_10016F650;
    v250 = qword_10016F650;
    swift_retain(qword_10016F650);
    v53 = v49 & 1;
    v54 = Text.foregroundStyle<A>(_:)(&v250, v45, v47, v53, v51, &type metadata for Color, &protocol witness table for Color);
    v246 = v55;
    v247 = v54;
    v235 = v56;
    v245 = v57 & 1;
    sub_10000BFF8(v45, v47, v53);
    swift_release(v52);
    swift_bridgeObjectRelease(v51);
    KeyPath = swift_getKeyPath(&unk_10010B2A0);
    v58 = static Edge.Set.bottom.getter(KeyPath);
    v24 = *a1;
    v25 = a1[1];
    v26 = *((unsigned __int8 *)a1 + 16);
    v27 = v238;
    v28 = v237;
    v59 = StateObject.wrappedValue.getter(*a1, v25, v26, v238, v237);
    LODWORD(v52) = *(unsigned __int8 *)(v59 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shouldShowDiscoveryDetail);
    swift_release(v59);
    v60 = 0.0;
    if ((_DWORD)v52)
      v60 = 3.0;
    v244 = EdgeInsets.init(_all:)(v60);
    v243 = v61;
    v241 = v62;
    v240 = v63;
    v233 = v58;
    v64 = 1;
    v65 = &v258;
  }
  else
  {
    v64 = 0;
    v245 = 0;
    v246 = 0;
    v235 = 0;
    KeyPath = 0;
    v242 = 0;
    v233 = 0;
    v244 = 0.0;
    v243 = 0;
    v241 = 0;
    v247 = 0;
    v65 = &v257;
  }
  *(v65 - 32) = v64;
  v66 = StateObject.wrappedValue.getter(v24, v25, v26, v27, v28);
  if (*(_BYTE *)(v66 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shouldShowDiscoveryDetail) == 1)
  {
    v67 = 0xD00000000000002BLL;
    v68 = 0x80000001001153F0;
  }
  else
  {
    v68 = 0x80000001001153C0;
    v67 = 0xD000000000000021;
  }
  v69 = LocalizedStringKey.init(stringLiteral:)(v67, v68);
  v71 = v70;
  v73 = v72;
  v75 = v74;
  swift_release(v66);
  LOWORD(v211) = 256;
  v76 = Text.init(_:tableName:bundle:comment:)(v69, v71, v73 & 1, v75, 0, 0, 0, 0, 0, v211);
  v78 = v77;
  v80 = v79;
  v82 = v81 & 1;
  v83 = static Font.title2.getter();
  static Font.Weight.bold.getter();
  v84 = Font.weight(_:)(v83);
  swift_release(v83);
  v85 = Text.font(_:)(v84, v76, v78, v82, v80);
  v87 = v86;
  v89 = v88;
  v91 = v90;
  swift_release(v84);
  sub_10000BFF8(v76, v78, v82);
  swift_bridgeObjectRelease(v80);
  v92 = swift_getKeyPath(&unk_10010B2A0);
  v250 = v85;
  v251 = v87;
  v252 = v89 & 1;
  v253 = v91;
  v254 = v92;
  v255 = 2;
  v256 = 0;
  v93 = sub_100003E70(&qword_10015DAA0);
  v94 = sub_100014248();
  v95 = (uint64_t)v223;
  View.accessibilityHeading(_:)(1, v93, v94);
  sub_10000BFF8(v85, v87, v89 & 1);
  swift_release(v92);
  v96 = swift_bridgeObjectRelease(v91);
  v97 = v224;
  static AccessibilityTraits.isHeader.getter(v96);
  v98 = (uint64_t)v232;
  ModifiedContent<>.accessibility(addTraits:)(v97, v222);
  (*(void (**)(uint64_t (*)(), uint64_t))(v225 + 8))(v97, v226);
  v99 = sub_100008194(v95, &qword_10015DA90);
  v100 = static Edge.Set.bottom.getter(v99);
  v101 = v238;
  v102 = v237;
  v103 = StateObject.wrappedValue.getter(*a1, a1[1], *((unsigned __int8 *)a1 + 16), v238, v237);
  LODWORD(v92) = *(unsigned __int8 *)(v103 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shouldShowDiscoveryDetail);
  swift_release(v103);
  v104 = 0.0;
  if ((_DWORD)v92)
    v104 = 7.0;
  v105 = EdgeInsets.init(_all:)(v104);
  v107 = v106;
  v109 = v108;
  v111 = v110;
  v112 = v227;
  sub_100007ADC(v98, v227, &qword_10015DA90);
  v113 = v112 + *(int *)(v228 + 36);
  *(_BYTE *)v113 = v100;
  *(double *)(v113 + 8) = v105;
  *(_QWORD *)(v113 + 16) = v107;
  *(_QWORD *)(v113 + 24) = v109;
  *(_QWORD *)(v113 + 32) = v111;
  *(_BYTE *)(v113 + 40) = 0;
  sub_100008194(v98, &qword_10015DA90);
  sub_100007A98(v112, v248, &qword_10015DA98);
  v114 = *a1;
  v115 = a1[1];
  v116 = *((unsigned __int8 *)a1 + 16);
  v117 = StateObject.wrappedValue.getter(*a1, v115, v116, v101, v102);
  LODWORD(v112) = *(unsigned __int8 *)(v117 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shouldShowDiscoveryDetail);
  swift_release(v117);
  if ((_DWORD)v112 == 1)
  {
    v118 = StateObject.wrappedValue.getter(v114, v115, v116, v101, v102);
    v119 = *(_QWORD *)(v118 + OBJC_IVAR____TtC16EventViewService12AppViewModel_descriptionTitle);
    v120 = *(_QWORD *)(v118 + OBJC_IVAR____TtC16EventViewService12AppViewModel_descriptionTitle + 8);
    v121 = *(unsigned __int8 *)(v118 + OBJC_IVAR____TtC16EventViewService12AppViewModel_descriptionTitle + 16);
    v122 = *(_QWORD *)(v118 + OBJC_IVAR____TtC16EventViewService12AppViewModel_descriptionTitle + 24);
    swift_bridgeObjectRetain(v120);
    swift_bridgeObjectRetain(v122);
    swift_release(v118);
    LOWORD(v212) = 256;
    v123 = Text.init(_:tableName:bundle:comment:)(v119, v120, v121, v122, 0, 0, 0, 0, 0, v212);
    v125 = v124;
    v127 = v126;
    v129 = v128 & 1;
    v130 = static Font.subheadline.getter();
    static Font.Weight.regular.getter();
    v131 = Font.weight(_:)(v130);
    swift_release(v130);
    v132 = Text.font(_:)(v131, v123, v125, v129, v127);
    v134 = v133;
    v136 = v135;
    v138 = v137;
    swift_release(v131);
    sub_10000BFF8(v123, v125, v129);
    swift_bridgeObjectRelease(v127);
    if (qword_10015CE58 != -1)
      swift_once(&qword_10015CE58, sub_1000382B4);
    v139 = qword_10016F650;
    v250 = qword_10016F650;
    swift_retain(qword_10016F650);
    v140 = Text.foregroundStyle<A>(_:)(&v250, v132, v134, v136 & 1, v138, &type metadata for Color, &protocol witness table for Color);
    v142 = v141;
    v232 = v143;
    LODWORD(v228) = v144 & 1;
    sub_10000BFF8(v132, v134, v136 & 1);
    swift_release(v139);
    swift_bridgeObjectRelease(v138);
    v145 = swift_getKeyPath(&unk_10010B2A0);
    LODWORD(v227) = static Edge.Set.bottom.getter(v145);
    v146 = StateObject.wrappedValue.getter(*a1, a1[1], *((unsigned __int8 *)a1 + 16), v238, v237);
    v147 = *(unsigned __int8 *)(v146 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shouldShowDiscoveryDetail);
    v148 = swift_release(v146);
    if (v147)
      v149 = 1.0;
    else
      v149 = 0.0;
    v150 = v215;
    v151 = Divider.init()(v148);
    v152 = static Edge.Set.bottom.getter(v151);
    v153 = v216;
    v154 = (uint64_t)v219;
    v155 = v217;
    (*(void (**)(char *, char *, uint64_t))(v216 + 16))(v219, v150, v217);
    v156 = v154 + *(int *)(v214 + 36);
    *(_BYTE *)v156 = v152;
    *(_OWORD *)(v156 + 8) = 0u;
    *(_OWORD *)(v156 + 24) = 0u;
    *(_BYTE *)(v156 + 40) = 1;
    (*(void (**)(char *, uint64_t))(v153 + 8))(v150, v155);
    v157 = v218;
    sub_100007A98(v154, v218, &qword_10015DA80);
    sub_100007ADC(v157, v154, &qword_10015DA80);
    v158 = v239;
    *v239 = v140;
    v158[1] = v142;
    v159 = v228;
    *((_BYTE *)v158 + 16) = v228;
    v160 = v232;
    v158[3] = (uint64_t)v232;
    v158[4] = v145;
    v158[5] = 4;
    *((_BYTE *)v158 + 48) = 0;
    *((_BYTE *)v158 + 56) = v227;
    *((_OWORD *)v158 + 4) = 0u;
    *((_OWORD *)v158 + 5) = 0u;
    *((_BYTE *)v158 + 96) = 1;
    *((double *)v158 + 13) = v149;
    v161 = sub_100003E70(&qword_10015DAD0);
    sub_100007ADC(v154, (uint64_t)v158 + *(int *)(v161 + 48), &qword_10015DA80);
    sub_10000C008(v140, v142, v159);
    swift_bridgeObjectRetain(v160);
    swift_retain(v145);
    sub_100008194(v157, &qword_10015DA80);
    sub_100008194(v154, &qword_10015DA80);
    sub_10000BFF8(v140, v142, v159);
    swift_release(v145);
    swift_bridgeObjectRelease(v160);
    v162 = sub_100003E70(&qword_10015DAC0);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v162 - 8) + 56))(v158, 0, 1, v162);
    sub_100007A98((uint64_t)v158, v249, &qword_10015DA88);
    v101 = v238;
    v102 = v237;
  }
  else
  {
    v163 = sub_100003E70(&qword_10015DAC0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v163 - 8) + 56))(v249, 1, 1, v163);
  }
  v164 = StateObject.wrappedValue.getter(*a1, a1[1], *((unsigned __int8 *)a1 + 16), v101, v102);
  v166 = *(_QWORD *)(v164 + OBJC_IVAR____TtC16EventViewService12AppViewModel_queryAppID);
  v165 = *(char **)(v164 + OBJC_IVAR____TtC16EventViewService12AppViewModel_queryAppID + 8);
  swift_bridgeObjectRetain(v165);
  swift_release(v164);
  v167 = v229;
  sub_1000140A0((uint64_t)a1, v229);
  v168 = v230;
  v232 = v165;
  if (v165)
  {
    v228 = v166;
    sub_1000142CC(v167);
  }
  else
  {
    v169 = StateObject.wrappedValue.getter(*(_QWORD *)v167, *(_QWORD *)(v167 + 8), *(unsigned __int8 *)(v167 + 16), v101, v102);
    sub_1000142CC(v167);
    v170 = *(char **)(v169 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shazamItemID + 8);
    v228 = *(_QWORD *)(v169 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shazamItemID);
    v232 = v170;
    swift_bridgeObjectRetain(v170);
    swift_release(v169);
  }
  v171 = *a1;
  v172 = a1[1];
  v173 = *((unsigned __int8 *)a1 + 16);
  v174 = v102;
  v175 = StateObject.wrappedValue.getter(*a1, v172, v173, v101, v102);
  v176 = *(_QWORD *)(v175 + OBJC_IVAR____TtC16EventViewService12AppViewModel_productVariantID + 8);
  v226 = *(_QWORD *)(v175 + OBJC_IVAR____TtC16EventViewService12AppViewModel_productVariantID);
  v229 = v176;
  swift_bridgeObjectRetain(v176);
  swift_release(v175);
  v177 = StateObject.wrappedValue.getter(v171, v172, v173, v101, v174);
  v178 = swift_getKeyPath(&unk_10010B2D0);
  v179 = swift_getKeyPath(&unk_10010B2F8);
  static Published.subscript.getter(v177, v178, v179);
  swift_release(v177);
  swift_release(v178);
  swift_release(v179);
  v225 = v250;
  v227 = v251;
  v180 = StateObject.wrappedValue.getter(*a1, a1[1], *((unsigned __int8 *)a1 + 16), v101, v174);
  v181 = (_QWORD *)(v180 + OBJC_IVAR____TtC16EventViewService12AppViewModel_queryAppID);
  v182 = *(_QWORD *)(v180 + OBJC_IVAR____TtC16EventViewService12AppViewModel_queryAppID + 8);
  if (!v182
    || (v183 = *(_QWORD *)(v180 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shazamItemID + 8),
        *v181 == *(_QWORD *)(v180 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shazamItemID))
    && v182 == v183)
  {
    swift_release(v180);
  }
  else
  {
    v210 = _stringCompareWithSmolCheck(_:_:expecting:)(*v181, v182, *(_QWORD *)(v180 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shazamItemID), v183, 0);
    swift_release(v180);
    if ((v210 & 1) == 0)
    {
      v224 = 0;
      v237 = 0;
      v184 = v221;
      v185 = v220;
      goto LABEL_29;
    }
  }
  v184 = v221;
  sub_1000140A0((uint64_t)a1, v221);
  v185 = v220;
  v186 = *(unsigned __int8 *)(v220 + 80);
  v187 = (v186 + 16) & ~v186;
  v237 = swift_allocObject(&unk_10014D018, v187 + v168, v186 | 7);
  sub_1000140E8(v184, v237 + v187);
  v224 = sub_100014488;
LABEL_29:
  sub_1000140A0((uint64_t)a1, v184);
  v188 = *(unsigned __int8 *)(v185 + 80);
  v189 = (v188 + 16) & ~v188;
  v238 = swift_allocObject(&unk_10014CFF0, v189 + v168, v188 | 7);
  sub_1000140E8(v184, v238 + v189);
  v190 = v236;
  sub_100007ADC(v248, v236, &qword_10015DA98);
  v191 = v239;
  sub_100007ADC(v249, (uint64_t)v239, &qword_10015DA88);
  v192 = v231;
  v193 = v246;
  *(_QWORD *)v231 = v247;
  *((_QWORD *)v192 + 1) = v193;
  v194 = v235;
  *((_QWORD *)v192 + 2) = v245;
  *((_QWORD *)v192 + 3) = v194;
  v195 = v242;
  *((_QWORD *)v192 + 4) = KeyPath;
  *((_QWORD *)v192 + 5) = v195;
  v196 = v233;
  v192[6] = 0.0;
  *((_QWORD *)v192 + 7) = v196;
  v197 = v243;
  v192[8] = v244;
  *((_QWORD *)v192 + 9) = v197;
  v243 = v197;
  v198 = v240;
  *((_QWORD *)v192 + 10) = v241;
  *((_QWORD *)v192 + 11) = v198;
  v240 = v198;
  *((_BYTE *)v192 + 96) = 0;
  v199 = (int *)sub_100003E70(&qword_10015DAC8);
  sub_100007ADC(v190, (uint64_t)v192 + v199[12], &qword_10015DA98);
  sub_100007ADC((uint64_t)v191, (uint64_t)v192 + v199[16], &qword_10015DA88);
  v200 = (uint64_t *)((char *)v192 + v199[20]);
  v201 = v232;
  *v200 = v228;
  v200[1] = (uint64_t)v201;
  v202 = v229;
  v200[2] = v226;
  v200[3] = v202;
  v203 = v227;
  v200[4] = v225;
  v200[5] = v203;
  v204 = (uint64_t)v224;
  v205 = v237;
  v200[6] = (uint64_t)v224;
  v200[7] = v205;
  v206 = v238;
  v200[8] = (uint64_t)sub_100014314;
  v200[9] = v206;
  v207 = v235;
  v208 = KeyPath;
  sub_100014350(v247, v246, v245, v235, KeyPath);
  swift_bridgeObjectRetain(v203);
  swift_bridgeObjectRetain(v201);
  swift_bridgeObjectRetain(v202);
  sub_1000075F4(v204, v205);
  sub_1000075F4((uint64_t)sub_100014314, v206);
  sub_100008194(v249, &qword_10015DA88);
  sub_100008194(v248, &qword_10015DA98);
  swift_bridgeObjectRelease(v203);
  swift_bridgeObjectRelease(v202);
  swift_bridgeObjectRelease(v201);
  sub_100007604(v204, v205);
  sub_100007604((uint64_t)sub_100014314, v206);
  sub_100008194((uint64_t)v239, &qword_10015DA88);
  sub_100008194(v236, &qword_10015DA98);
  return sub_10001438C(v247, v246, v245, v207, v208);
}

uint64_t sub_100013C24()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OpenURLAction(0);
  v22 = *(_QWORD *)(v6 - 8);
  v23 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AppModule(0);
  sub_10001D83C((uint64_t)v8);
  v9 = *v0;
  v10 = v1[1];
  v11 = *((unsigned __int8 *)v1 + 16);
  v12 = type metadata accessor for AppViewModel(0);
  v13 = sub_100003B3C(&qword_10015DA60, type metadata accessor for AppViewModel, (uint64_t)&unk_10010A770);
  v14 = StateObject.wrappedValue.getter(v9, v10, v11, v12, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v14 + OBJC_IVAR____TtC16EventViewService12AppViewModel_eventURL, v2);
  swift_release(v14);
  OpenURLAction.callAsFunction(_:)(v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v23);
  v15 = StateObject.wrappedValue.getter(*v1, v1[1], *((unsigned __int8 *)v1 + 16), v12, v13);
  v16 = v1[3];
  if (v16)
  {
    v17 = v15;
    swift_retain(v1[3]);
    sub_100004EF4(8, 0, 3u, v16);
    swift_release(v17);
    return swift_release(v16);
  }
  else
  {
    v19 = v1[4];
    v20 = type metadata accessor for RemoteViewConfiguration();
    v21 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    result = EnvironmentObject.error()(0, v19, v20, v21);
    __break(1u);
  }
  return result;
}

uint64_t sub_100013E24(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = ASCAppStateInstalling;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  if (v4 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2);
  }
  else
  {
    v10 = v8;
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);
    swift_bridgeObjectRelease(v6);
    result = swift_bridgeObjectRelease(v10);
    if ((v11 & 1) == 0)
      return result;
  }
  v13 = *a2;
  v14 = a2[1];
  v15 = *((unsigned __int8 *)a2 + 16);
  v16 = type metadata accessor for AppViewModel(0);
  v17 = sub_100003B3C(&qword_10015DA60, type metadata accessor for AppViewModel, (uint64_t)&unk_10010A770);
  v18 = StateObject.wrappedValue.getter(v13, v14, v15, v16, v17);
  v19 = a2[3];
  if (v19)
  {
    v20 = v18;
    swift_retain(a2[3]);
    sub_100004EF4(6, 0, 3u, v19);
    swift_release(v20);
    return swift_release(v19);
  }
  else
  {
    v21 = a2[4];
    v22 = type metadata accessor for RemoteViewConfiguration();
    v23 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    result = EnvironmentObject.error()(0, v21, v22, v23);
    __break(1u);
  }
  return result;
}

uint64_t sub_100013F90(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[2] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[3] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[4] = v3;
  v1[5] = v4;
  return swift_task_switch(sub_100013FFC, v3, v4);
}

uint64_t sub_100013FFC()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = (uint64_t *)v0[2];
  v3 = *v1;
  v2 = v1[1];
  v4 = *((unsigned __int8 *)v1 + 16);
  v5 = type metadata accessor for AppViewModel(0);
  v6 = sub_100003B3C(&qword_10015DA60, type metadata accessor for AppViewModel, (uint64_t)&unk_10010A770);
  v0[6] = StateObject.wrappedValue.getter(v3, v2, v4, v5, v6);
  v7 = (_QWORD *)swift_task_alloc(dword_10015D3AC);
  v0[7] = v7;
  *v7 = v0;
  v7[1] = sub_10000DB48;
  return sub_100004988();
}

uint64_t sub_1000140A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppModule(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000140E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppModule(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001412C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AppModule(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_10015DA74);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000072F4;
  return sub_100013F90(v3);
}

uint64_t sub_100014190@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000141C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000141F0(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_10001421C(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

unint64_t sub_100014248()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DAA8;
  if (!qword_10015DAA8)
  {
    v1 = sub_1000034AC(&qword_10015DAA0);
    sub_100007D40(&qword_10015DAB0, &qword_10015DAB8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DAA8);
  }
  return result;
}

uint64_t sub_1000142CC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AppModule(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100014314(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AppModule(0) - 8) + 80);
  return sub_100013E24(a1, (uint64_t *)(v1 + ((v3 + 16) & ~v3)));
}

uint64_t sub_100014350(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    sub_10000C008(result, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    return swift_retain(a5);
  }
  return result;
}

uint64_t sub_10001438C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    sub_10000BFF8(result, a2, a3 & 1);
    swift_release(a5);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_1000143CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for AppModule(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_10000E138(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 24));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  v7 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100014488()
{
  type metadata accessor for AppModule(0);
  return sub_100013C24();
}

unint64_t sub_1000144C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DAD8;
  if (!qword_10015DAD8)
  {
    v1 = sub_1000034AC(&qword_10015DA58);
    sub_100014548();
    sub_100003B3C(&qword_10015D458, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DAD8);
  }
  return result;
}

unint64_t sub_100014548()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DAE0;
  if (!qword_10015DAE0)
  {
    v1 = sub_1000034AC(&qword_10015DA50);
    sub_100014600(&qword_10015DAE8, &qword_10015DA48, (void (*)(void))sub_1000145E4);
    sub_100007D40(&qword_10015DB08, (uint64_t *)&unk_10015DB10, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DAE0);
  }
  return result;
}

uint64_t sub_1000145E4()
{
  return sub_100014600(&qword_10015DAF0, &qword_10015DA40, (void (*)(void))sub_10001466C);
}

uint64_t sub_100014600(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000034AC(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001466C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DAF8;
  if (!qword_10015DAF8)
  {
    v1 = sub_1000034AC(&qword_10015DA38);
    sub_100007D40(&qword_10015DB00, &qword_10015DA30, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DAF8);
  }
  return result;
}

uint64_t sub_1000146F0()
{
  return 1;
}

Swift::Int sub_1000146F8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_100014738()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_10001475C(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_1000147A8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return swift_task_switch(sub_1000147C0, 0, 0);
}

uint64_t sub_1000147C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[5];
  v2 = swift_allocObject(&unk_10014D088, 24, 7);
  v0[6] = v2;
  swift_unknownObjectWeakInit(v2 + 16, v1);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v3;
  v4 = sub_100003E70(&qword_10015DBF0);
  *v3 = v0;
  v3[1] = sub_100014884;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000011, 0x8000000100115490, sub_100015204, v2, v4);
}

uint64_t sub_100014884()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100014904;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 48));
    v4 = sub_1000148F0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000148F0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_100014904()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100014938(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t Strong;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _BYTE v13[24];
  char v14[24];

  v4 = sub_100003E70(&qword_10015DBE0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v8 = (char *)Strong;
    v9 = sub_100003E70(&qword_10015DB70);
    v10 = *(_QWORD *)(v9 - 8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v6, a1, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
    v11 = (uint64_t)&v8[OBJC_IVAR____TtC16EventViewService15LocationManager_checkedThrowingContinuation];
    swift_beginAccess(&v8[OBJC_IVAR____TtC16EventViewService15LocationManager_checkedThrowingContinuation], v13, 33, 0);
    sub_100015158((uint64_t)v6, v11);
    swift_endAccess(v13);
    v12 = *(void **)&v8[OBJC_IVAR____TtC16EventViewService15LocationManager_manager];
    objc_msgSend(v12, "setDelegate:", v8);
    objc_msgSend(v12, "setDesiredAccuracy:", kCLLocationAccuracyKilometer);
    objc_msgSend(v12, "startUpdatingLocation");

  }
}

uint64_t sub_100014A94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v11[3];
  _BYTE v12[24];

  v1 = sub_100003E70(&qword_10015DBE0);
  __chkstk_darwin(v1);
  v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003E70(&qword_10015DB70);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC16EventViewService15LocationManager_manager), "stopUpdatingLocation");
  v8 = v0 + OBJC_IVAR____TtC16EventViewService15LocationManager_checkedThrowingContinuation;
  swift_beginAccess(v0 + OBJC_IVAR____TtC16EventViewService15LocationManager_checkedThrowingContinuation, v12, 0, 0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
    v9 = sub_10001520C();
    v11[0] = swift_allocError(&type metadata for LocationManager.RequestError, v9, 0, 0);
    CheckedContinuation.resume(throwing:)(v11, v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  swift_beginAccess(v8, v11, 33, 0);
  sub_100015158((uint64_t)v3, v8);
  return swift_endAccess(v11);
}

id sub_100014CD4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100014D40()
{
  return type metadata accessor for LocationManager(0);
}

uint64_t type metadata accessor for LocationManager(uint64_t a1)
{
  uint64_t result;

  result = qword_10015DB58;
  if (!qword_10015DB58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationManager);
  return result;
}

void sub_100014D84(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100014E00(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_100014E00(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015DB68)
  {
    v2 = sub_1000034AC(&qword_10015DB70);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10015DB68);
  }
}

unint64_t sub_100014E58(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  BOOL v23;
  _BYTE v24[24];

  v5 = sub_100003E70(&qword_10015DBE0);
  __chkstk_darwin(v5);
  v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003E70(&qword_10015DB70);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(a1, "stopUpdatingLocation");
  v12 = v2 + OBJC_IVAR____TtC16EventViewService15LocationManager_checkedThrowingContinuation;
  swift_beginAccess(v2 + OBJC_IVAR____TtC16EventViewService15LocationManager_checkedThrowingContinuation, v24, 0, 0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v12, 1, v8))
    goto LABEL_16;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  if (!((unint64_t)a2 >> 62))
  {
    v13 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (v13)
      goto LABEL_4;
LABEL_14:
    swift_bridgeObjectRelease(a2);
    v18 = 0;
    v20 = 0;
    goto LABEL_15;
  }
  if (a2 < 0)
    v21 = a2;
  else
    v21 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v13 = _CocoaArrayWrapper.endIndex.getter(v21);
  if (!v13)
    goto LABEL_14;
LABEL_4:
  result = v13 - 1;
  if (__OFSUB__(v13, 1))
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_18:
    v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, a2);
    goto LABEL_9;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v15 = *(id *)(a2 + 8 * result + 32);
LABEL_9:
    v16 = v15;
    swift_bridgeObjectRelease(a2);
    objc_msgSend(v16, "coordinate");
    v18 = v17;
    v20 = v19;

LABEL_15:
    v22[0] = v18;
    v22[1] = v20;
    v23 = v13 == 0;
    CheckedContinuation.resume(returning:)(v22, v8);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
LABEL_16:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    swift_beginAccess(v12, v22, 33, 0);
    sub_100015158((uint64_t)v7, v12);
    return swift_endAccess(v22);
  }
  __break(1u);
  return result;
}

unint64_t sub_10001511C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DBD8;
  if (!qword_10015DBD8)
  {
    v1 = objc_opt_self(CLLocation);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10015DBD8);
  }
  return result;
}

uint64_t sub_100015158(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015DBE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000151A0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003E70(&qword_10015DBE0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000151E0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100015204(uint64_t a1)
{
  uint64_t v1;

  sub_100014938(a1, v1);
}

unint64_t sub_10001520C()
{
  unint64_t result;

  result = qword_10015DBF8;
  if (!qword_10015DBF8)
  {
    result = swift_getWitnessTable(&unk_10010B3C8, &type metadata for LocationManager.RequestError);
    atomic_store(result, (unint64_t *)&qword_10015DBF8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LocationManager.RequestError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for LocationManager.RequestError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000152E4 + 4 * byte_10010B320[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100015304 + 4 * byte_10010B325[v4]))();
}

_BYTE *sub_1000152E4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100015304(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10001530C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100015314(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10001531C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100015324(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_100015330()
{
  return 0;
}

ValueMetadata *type metadata accessor for LocationManager.RequestError()
{
  return &type metadata for LocationManager.RequestError;
}

unint64_t sub_10001534C()
{
  unint64_t result;

  result = qword_10015DC00;
  if (!qword_10015DC00)
  {
    result = swift_getWitnessTable(&unk_10010B3A0, &type metadata for LocationManager.RequestError);
    atomic_store(result, (unint64_t *)&qword_10015DC00);
  }
  return result;
}

void sub_100015390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD v33[5];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  char *v49;

  v33[0] = &unk_10010B468;
  v33[1] = &unk_10010B468;
  v33[2] = &unk_10010B468;
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = type metadata accessor for FilterViewModel.FilterState(255, v5, v6, a4);
  v8 = type metadata accessor for Published(319, v7);
  if (v9 <= 0x3F)
  {
    v33[3] = *(_QWORD *)(v8 - 8) + 64;
    v10 = type metadata accessor for Array(255, v5);
    v11 = type metadata accessor for Published(319, v10);
    if (v12 <= 0x3F)
    {
      v33[4] = *(_QWORD *)(v11 - 8) + 64;
      sub_100018C0C(319);
      if (v14 <= 0x3F)
      {
        v34 = *(_QWORD *)(v13 - 8) + 64;
        v35 = v34;
        sub_100018C60(319);
        if (v16 <= 0x3F)
        {
          v36 = *(_QWORD *)(v15 - 8) + 64;
          AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v6);
          v18 = type metadata accessor for Array(255, AssociatedTypeWitness);
          v19 = type metadata accessor for Published(319, v18);
          if (v20 <= 0x3F)
          {
            v37 = *(_QWORD *)(v19 - 8) + 64;
            AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v5, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
            v22 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
            v23 = type metadata accessor for Published(319, v22);
            if (v24 <= 0x3F)
            {
              v38 = *(_QWORD *)(v23 - 8) + 64;
              sub_100018CB8(319, &qword_10015DD08, (uint64_t)&type metadata for EdgeInsets);
              if (v26 <= 0x3F)
              {
                v39 = *(_QWORD *)(v25 - 8) + 64;
                sub_100018CB8(319, qword_10015DD10, (uint64_t)&type metadata for CGFloat);
                if (v29 <= 0x3F)
                {
                  v40 = *(_QWORD *)(v27 - 8) + 64;
                  v41 = v40;
                  v30 = type metadata accessor for FilterViewModel.FilterConfiguration(255, v5, v6, v28);
                  v31 = type metadata accessor for Binding(319, v30);
                  if (v32 <= 0x3F)
                  {
                    v42 = *(_QWORD *)(v31 - 8) + 64;
                    v43 = &unk_10010B480;
                    v44 = &unk_10010B468;
                    v45 = &unk_10010B480;
                    v46 = &unk_10010B480;
                    v47 = &unk_10010B480;
                    v48 = &unk_10010B480;
                    v49 = (char *)&value witness table for Builtin.BridgeObject + 64;
                    swift_initClassMetadata2(a1, 0, 21, v33, a1 + 96);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1000155DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  int *v15;
  char *v16;
  uint64_t v17;
  uint64_t result;

  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  v15 = (int *)type metadata accessor for FilterViewModel.FilterConfiguration(0, a8, a10, a4);
  v16 = (char *)a9 + v15[11];
  v17 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a4, v17);
  result = sub_10001ACF4(a5, (uint64_t)a9 + v15[12]);
  *(_QWORD *)((char *)a9 + v15[13]) = a6;
  *(_QWORD *)((char *)a9 + v15[14]) = a7;
  return result;
}

BOOL sub_100015688(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_100015698(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int sub_1000156BC(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL sub_100015700(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100015688(*a1, *a2);
}

Swift::Int sub_100015714()
{
  char *v0;

  return sub_1000156BC(*v0);
}

void sub_100015724(uint64_t a1)
{
  char *v1;

  sub_100015698(a1, *v1);
}

Swift::Int sub_100015734(uint64_t a1)
{
  char *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  sub_100015698((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

uint64_t sub_100015778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t WitnessTable;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t AssociatedConformanceWitness;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  v7 = type metadata accessor for FilterViewModel.FilterConfiguration(0, v5, v6, a4);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v35 - v9;
  v11 = type metadata accessor for Optional(0, v5);
  v38 = *(_QWORD *)(v11 - 8);
  v39 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v6);
  v15 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v36 = *(_QWORD *)(v15 - 8);
  v37 = v15;
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v35 - v17;
  sub_100015A1C(v16, v19, v20, v21);
  v22 = *((_QWORD *)v10 + 1);
  v23 = *(void (**)(char *, uint64_t, __n128))(v8 + 8);
  v24 = swift_bridgeObjectRetain(v22);
  v23(v10, v7, v24);
  v40 = v22;
  v25 = type metadata accessor for Array(0, v5);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v25);
  Collection.first.getter(v25, WitnessTable);
  swift_bridgeObjectRelease(v22);
  v27 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v13, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v39);
  }
  else
  {
    v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 216))(v5, v6);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v5);
    v40 = v28;
    v29 = type metadata accessor for Array(0, AssociatedTypeWitness);
    v30 = swift_getWitnessTable(&protocol conformance descriptor for [A], v29);
    Collection.first.getter(v29, v30);
    swift_bridgeObjectRelease(v28);
    v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v18, 1, AssociatedTypeWitness) != 1)
    {
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v5, AssociatedTypeWitness, &unk_1001191E8, &unk_100119238);
      v32 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v18, AssociatedTypeWitness);
      return v32;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v18, v37);
  }
  return 0;
}

uint64_t sub_100015A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v5 = *v4;
  v6 = type metadata accessor for FilterViewModel.FilterConfiguration(255, *(_QWORD *)(*v4 + 80), *(_QWORD *)(*v4 + 88), a4);
  v7 = type metadata accessor for Binding(0, v6);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v12 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v12 - v9, (uint64_t)v4 + *(_QWORD *)(v5 + 200), v7);
  Binding.wrappedValue.getter(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100015ACC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  unsigned __int8 v4;

  KeyPath = swift_getKeyPath(&unk_10010B7B8);
  v2 = swift_getKeyPath(&unk_10010B7F0);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100015B54()
{
  return sub_100015FD8((uint64_t)&unk_10010B600, (uint64_t)&unk_10010B638);
}

uint64_t sub_100015B68()
{
  return sub_100015C18((uint64_t)&unk_10010B708, (uint64_t)&unk_10010B740);
}

uint64_t sub_100015B7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A6C0(a1, (uint64_t)v4);
  Published.init(initialValue:)(v4, v2);
  return sub_10001A704(a1);
}

uint64_t sub_100015C04()
{
  return sub_100015C18((uint64_t)&unk_10010B760, (uint64_t)&unk_10010B798);
}

uint64_t sub_100015C18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(v2, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_100015CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  _QWORD v16[4];

  v7 = *v3;
  v8 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v8);
  v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v7 + 80);
  v11 = *(_QWORD *)(v7 + 88);
  v16[2] = v12;
  v16[3] = v11;
  KeyPath = swift_getKeyPath(a2);
  v16[0] = v12;
  v16[1] = v11;
  v14 = swift_getKeyPath(a3);
  sub_10001A6C0(a1, (uint64_t)v10);
  swift_retain(v3);
  static Published.subscript.setter(v10, v3, KeyPath, v14);
  return sub_10001A704(a1);
}

uint64_t sub_100015D78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100003E70(&qword_10015DD00);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A678(a1, (uint64_t)v4);
  Published.init(initialValue:)(v4, v2);
  return sub_100008194(a1, &qword_10015DD00);
}

uint64_t sub_100015E14()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;

  KeyPath = swift_getKeyPath(&unk_10010B6B0);
  v2 = swift_getKeyPath(&unk_10010B6E8);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_100015EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v6;

  v6 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  v4 = type metadata accessor for Array(0, AssociatedTypeWitness);
  return sub_100019814((uint64_t)&v6, v4);
}

uint64_t sub_100015F0C()
{
  return sub_100015FD8((uint64_t)&unk_10010B810, (uint64_t)&unk_10010B848);
}

uint64_t sub_100015F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v9;

  v9 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
  v7 = type metadata accessor for Set(0, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  return sub_100019814((uint64_t)&v9, v7);
}

uint64_t sub_100015FC4()
{
  return sub_100015FD8((uint64_t)&unk_10010B658, (uint64_t)&unk_10010B690);
}

uint64_t sub_100015FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_100016060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v9;

  KeyPath = swift_getKeyPath(a2);
  v7 = swift_getKeyPath(a3);
  v9 = a1;
  swift_retain(v3);
  return static Published.subscript.setter(&v9, v3, KeyPath, v7);
}

double sub_1000160EC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v4;

  KeyPath = swift_getKeyPath(&unk_10010B5A8);
  v2 = swift_getKeyPath(&unk_10010B5E0);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100016178(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v10;
  _QWORD v12[4];

  KeyPath = swift_getKeyPath(&unk_10010B5A8);
  v10 = swift_getKeyPath(&unk_10010B5E0);
  *(double *)v12 = a1;
  *(double *)&v12[1] = a2;
  *(double *)&v12[2] = a3;
  *(double *)&v12[3] = a4;
  swift_retain(v4);
  return static Published.subscript.setter(v12, v4, KeyPath, v10);
}

double sub_10001621C()
{
  return sub_100016258((uint64_t)&unk_10010B8C0, (uint64_t)&unk_10010B8F8);
}

uint64_t sub_100016230(double a1)
{
  return sub_1000162F4((uint64_t)&unk_10010B8C0, (uint64_t)&unk_10010B8F8, a1);
}

double sub_100016244()
{
  return sub_100016258((uint64_t)&unk_10010B868, (uint64_t)&unk_10010B8A0);
}

double sub_100016258(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  double v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_1000162E0(double a1)
{
  return sub_1000162F4((uint64_t)&unk_10010B868, (uint64_t)&unk_10010B8A0, a1);
}

uint64_t sub_1000162F4(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  double v9;

  KeyPath = swift_getKeyPath(a1);
  v7 = swift_getKeyPath(a2);
  v9 = a3;
  swift_retain(v3);
  return static Published.subscript.setter(&v9, v3, KeyPath, v7);
}

uint64_t sub_100016380()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (sub_100016454())
  {
    v1 = v0[6];
    v2 = v0[7];
    v3 = sub_100003E70(&qword_10015D718);
    v4 = swift_allocObject(v3, 72, 7);
    *(_OWORD *)(v4 + 16) = xmmword_10010ACC0;
    v5 = sub_100015B54();
    v6 = Array.count.getter(v5);
    swift_bridgeObjectRelease(v5);
    *(_QWORD *)(v4 + 56) = &type metadata for Int;
    *(_QWORD *)(v4 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v4 + 32) = v6;
    return String.init(format:_:)(v1, v2, v4);
  }
  else
  {
    if ((sub_1000164D0() & 1) != 0)
    {
      v7 = v0[4];
      v8 = v0[5];
    }
    else
    {
      v7 = v0[2];
      v8 = v0[3];
    }
    swift_bridgeObjectRetain(v8);
  }
  return v7;
}

BOOL sub_100016454()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t WitnessTable;
  char v4;
  uint64_t v6;

  v1 = *v0;
  v6 = sub_100015B54();
  v2 = type metadata accessor for Array(0, *(_QWORD *)(v1 + 80));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v2);
  v4 = Collection.isEmpty.getter(v2, WitnessTable);
  swift_bridgeObjectRelease(v6);
  return (v4 & 1) == 0;
}

uint64_t sub_1000164D0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;

  v1 = *v0;
  if (sub_100016F64()
    && (v9 = sub_100015B54(),
        v2 = type metadata accessor for Array(0, *(_QWORD *)(v1 + 80)),
        v3 = swift_getWitnessTable(&protocol conformance descriptor for [A], v2),
        v4 = Collection.isEmpty.getter(v2, v3),
        swift_bridgeObjectRelease(v9),
        (v4 & 1) != 0))
  {
    v5 = 1;
  }
  else if (sub_100016F64() && sub_100017054())
  {
    v10 = sub_100015B54();
    v6 = type metadata accessor for Array(0, *(_QWORD *)(v1 + 80));
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
    v5 = Collection.isEmpty.getter(v6, WitnessTable);
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

BOOL sub_1000165D8()
{
  return (sub_1000164D0() & 1) == 0;
}

uint64_t sub_1000165F4()
{
  if (sub_100016454())
    return 1;
  else
    return sub_1000164D0();
}

uint64_t sub_100016618@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  __n128 v19;
  void (*v20)(char *, char *, uint64_t, __n128);
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = v1;
  v29 = a1;
  v3 = *v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v28 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - v8;
  v27 = sub_100003E70(&qword_10015DD00);
  v10 = __chkstk_darwin(v27);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v26 - v13;
  v15 = *(_QWORD *)(v3 + 88);
  v36 = *(_QWORD *)(v3 + 80);
  v16 = v36;
  v37 = v15;
  KeyPath = swift_getKeyPath(&unk_10010B6B0);
  v34 = v16;
  v35 = v15;
  v18 = swift_getKeyPath(&unk_10010B6E8);
  static Published.subscript.getter(v2, KeyPath, v18);
  swift_release(KeyPath);
  v19 = swift_release(v18);
  v20 = *(void (**)(char *, char *, uint64_t, __n128))(v5 + 16);
  v20(v9, v14, v4, v19);
  sub_100008194((uint64_t)v14, &qword_10015DD00);
  v32 = v16;
  v33 = v15;
  v21 = swift_getKeyPath(&unk_10010B6B0);
  v30 = v16;
  v31 = v15;
  v22 = swift_getKeyPath(&unk_10010B6E8);
  static Published.subscript.getter(v2, v21, v22);
  swift_release(v21);
  v23 = swift_release(v22);
  v24 = v28;
  v20(v28, &v12[*(int *)(v27 + 36)], v4, v23);
  sub_100008194((uint64_t)v12, &qword_10015DD00);
  return DateInterval.init(start:end:)(v9, v24);
}

uint64_t sub_10001681C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v15;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v15 - v5;
  v7 = type metadata accessor for CompactDatePickerConfiguration(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v15 - v11;
  sub_100015B68();
  v13 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
  v13(v6, &v12[*(int *)(v7 + 20)], v0);
  sub_10001A704((uint64_t)v12);
  sub_100015C04();
  v13(v4, &v10[*(int *)(v7 + 20)], v0);
  sub_10001A704((uint64_t)v10);
  return DateInterval.init(start:end:)(v6, v4);
}

uint64_t sub_100016960@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  __n128 v19;
  void (*v20)(char *, char *, uint64_t, __n128);
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v24 = a1;
  v2 = *v1;
  v23 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v23);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v23 - v10;
  v12 = sub_100003E70(&qword_10015DD00);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v2 + 80);
  v15 = *(_QWORD *)(v2 + 88);
  v27 = v16;
  v28 = v15;
  KeyPath = swift_getKeyPath(&unk_10010B6B0);
  v25 = v16;
  v26 = v15;
  v18 = swift_getKeyPath(&unk_10010B6E8);
  static Published.subscript.getter(v1, KeyPath, v18);
  swift_release(KeyPath);
  v19 = swift_release(v18);
  v20 = *(void (**)(char *, char *, uint64_t, __n128))(v6 + 16);
  v20(v11, v14, v5, v19);
  sub_100008194((uint64_t)v14, &qword_10015DD00);
  sub_100015C04();
  ((void (*)(char *, char *, uint64_t))v20)(v9, &v4[*(int *)(v23 + 20)], v5);
  sub_10001A704((uint64_t)v4);
  sub_100063328((uint64_t)v11, (uint64_t)v9, v24);
  v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21(v9, v5);
  return ((uint64_t (*)(char *, uint64_t))v21)(v11, v5);
}

uint64_t sub_100016B3C@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  __n128 v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v24 = a1;
  v2 = *v1;
  v23 = sub_100003E70(&qword_10015DD00);
  __chkstk_darwin(v23);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v23 - v10;
  v12 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100015B68();
  v15 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v15(v11, &v14[*(int *)(v12 + 20)], v5);
  sub_10001A704((uint64_t)v14);
  v17 = *(_QWORD *)(v2 + 80);
  v16 = *(_QWORD *)(v2 + 88);
  v27 = v17;
  v28 = v16;
  KeyPath = swift_getKeyPath(&unk_10010B6B0);
  v25 = v17;
  v26 = v16;
  v19 = swift_getKeyPath(&unk_10010B6E8);
  static Published.subscript.getter(v1, KeyPath, v19);
  swift_release(KeyPath);
  v20 = swift_release(v19);
  ((void (*)(char *, char *, uint64_t, __n128))v15)(v9, &v4[*(int *)(v23 + 36)], v5, v20);
  sub_100008194((uint64_t)v4, &qword_10015DD00);
  sub_100063328((uint64_t)v11, (uint64_t)v9, v24);
  v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21(v9, v5);
  return ((uint64_t (*)(char *, uint64_t))v21)(v11, v5);
}

BOOL sub_100016D20()
{
  return sub_100016D38((void (*)(uint64_t))&DateInterval.start.getter);
}

BOOL sub_100016D2C()
{
  return sub_100016D38((void (*)(uint64_t))&DateInterval.end.getter);
}

BOOL sub_100016D38(void (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;

  v2 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v22 - v6;
  v8 = type metadata accessor for DateInterval(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v22 - v13;
  v15 = sub_10001681C();
  a1(v15);
  v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v14, v8);
  v17 = sub_100016618((uint64_t)v12);
  a1(v17);
  v16(v12, v8);
  v18 = sub_100003B3C(&qword_10015DE48, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v19 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v5, v2, v18);
  v20 = *(void (**)(char *, uint64_t))(v23 + 8);
  v20(v5, v2);
  v20(v7, v2);
  return (v19 & 1) == 0;
}

BOOL sub_100016ED4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  char v4;

  KeyPath = swift_getKeyPath(&unk_10010B7B8);
  v2 = swift_getKeyPath(&unk_10010B7F0);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return (v4 & 1) == 0;
}

BOOL sub_100016F64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  void (*v9)(char *, uint64_t);
  uint64_t v11;

  v0 = type metadata accessor for DateInterval(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v11 - v5;
  sub_10001681C();
  sub_100016618((uint64_t)v4);
  v7 = sub_100003B3C(&qword_10015DE40, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
  v8 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v4, v0, v7);
  v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v4, v0);
  v9(v6, v0);
  return (v8 & 1) == 0;
}

BOOL sub_100017054()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  v1 = *v0;
  v2 = sub_100015FC4();
  v5 = v1 + 80;
  v4 = *(_QWORD *)(v1 + 80);
  v3 = *(_QWORD *)(v5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v4, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
  LOBYTE(v3) = Set.isEmpty.getter(v2, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_bridgeObjectRelease(v2);
  return (v3 & 1) == 0;
}

uint64_t sub_1000170F4()
{
  uint64_t *v0;
  uint64_t v1;
  BOOL v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t result;

  v1 = *v0;
  v2 = sub_100016D38((void (*)(uint64_t))&DateInterval.start.getter);
  v3 = sub_100016D38((void (*)(uint64_t))&DateInterval.end.getter);
  v4 = 1;
  if (v2)
    v4 = 2;
  if (v3)
    v5 = v4;
  else
    v5 = v2;
  v6 = sub_100015FC4();
  v9 = v1 + 80;
  v8 = *(_QWORD *)(v1 + 80);
  v7 = *(_QWORD *)(v9 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v7);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v8, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
  v12 = Set.count.getter(v6, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_bridgeObjectRelease(v6);
  result = v12 + v5;
  if (__OFADD__(v12, v5))
    __break(1u);
  return result;
}

BOOL sub_1000171CC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t WitnessTable;
  char v5;
  uint64_t v7;

  v1 = *v0;
  v7 = sub_100015F0C();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(v1 + 88));
  v3 = type metadata accessor for Array(0, AssociatedTypeWitness);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v3);
  v5 = Collection.isEmpty.getter(v3, WitnessTable);
  swift_bridgeObjectRelease(v7);
  return (v5 & 1) == 0;
}

double sub_100017264()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  double result;
  uint64_t v4;

  v0 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100015B68();
  LOBYTE(v0) = v2[*(int *)(v0 + 24)];
  sub_10001A704((uint64_t)v2);
  result = 0.0;
  if ((v0 & 1) == 0)
    return sub_10001621C() * -0.5;
  return result;
}

void sub_1000172EC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;

  v0 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v3 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100015B68();
  sub_10001A704((uint64_t)v2);
  sub_100015C04();
  LOBYTE(v0) = v2[*(int *)(v0 + 24)];
  sub_10001A704((uint64_t)v2);
  if ((v0 & 1) == 0)
    sub_100016244();
}

uint64_t sub_1000173A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t WitnessTable;
  uint64_t v24;
  _QWORD v26[5];
  uint64_t v27;

  v5 = v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  v8 = type metadata accessor for FilterViewModel.FilterConfiguration(0, v7, v6, a4);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v26 - v10;
  v26[2] = v7;
  v26[3] = v6;
  KeyPath = swift_getKeyPath(&unk_10010B7B8);
  v26[0] = v7;
  v26[1] = v6;
  v13 = swift_getKeyPath(&unk_10010B7F0);
  LOBYTE(v27) = 0;
  swift_retain(v5);
  static Published.subscript.setter(&v27, v5, KeyPath, v13);
  v14 = static Array._allocateUninitialized(_:)(0, v7);
  v15 = sub_100016060(v14, (uint64_t)&unk_10010B600, (uint64_t)&unk_10010B638);
  sub_100015A1C(v15, v16, v17, v18);
  v19 = *((_QWORD *)v11 + 1);
  v20 = *(void (**)(char *, uint64_t, __n128))(v9 + 8);
  v21 = swift_bridgeObjectRetain(v19);
  v20(v11, v8, v21);
  v27 = v19;
  v22 = type metadata accessor for Array(0, v7);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v22);
  v24 = _ArrayProtocol.filter(_:)(sub_10001ACD8, v5, v22, WitnessTable);
  return sub_100016060(v24, (uint64_t)&unk_10010B600, (uint64_t)&unk_10010B638);
}

uint64_t sub_100017514(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *);
  unsigned int v65;
  void (*v66)(char *, uint64_t, uint64_t);
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  char *v69;
  uint64_t (*v70)(char *, uint64_t);
  uint64_t AssociatedConformanceWitness;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;

  v86 = a2;
  v87 = a1;
  v2 = *a2;
  v81 = type metadata accessor for Calendar.Component(0);
  v77 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v80 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v85);
  v79 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for Date(0);
  v78 = *(_QWORD *)(v76 - 8);
  v5 = __chkstk_darwin(v76);
  v75 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v69 = (char *)&v61 - v7;
  v8 = type metadata accessor for DateInterval(0);
  v9 = *(_QWORD *)(v8 - 8);
  v68 = v8;
  __chkstk_darwin(v8);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v2 + 80);
  v13 = *(_QWORD *)(v2 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v13);
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v17 = (char *)&v61 - v16;
  v84 = type metadata accessor for Calendar(0);
  v73 = *(_QWORD *)(v84 - 8);
  v18 = __chkstk_darwin(v84);
  v62 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter(v18);
  v72 = *(void (**)(uint64_t, uint64_t))(v13 + 200);
  v82 = v13;
  v83 = v12;
  v72(v12, v13);
  v63 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v13, v12, AssociatedTypeWitness, &unk_1001191E8, &unk_100119230);
  sub_10000F1E0(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v11);
  v70 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
  v20 = v70(v17, AssociatedTypeWitness);
  v21 = v69;
  DateInterval.start.getter(v20);
  v67 = *(void (**)(char *, uint64_t))(v9 + 8);
  v67(v11, v8);
  v22 = (uint64_t)v79;
  sub_100015B68();
  v23 = v22 + *(int *)(v85 + 20);
  v66 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
  v24 = v75;
  v25 = v76;
  v66(v75, v23, v76);
  sub_10001A704(v22);
  v65 = enum case for Calendar.Component.day(_:);
  v26 = v77;
  v64 = *(void (**)(char *))(v77 + 104);
  v27 = v80;
  v28 = v81;
  v64(v80);
  v29 = v24;
  v30 = v24;
  v31 = v27;
  v32 = v27;
  v33 = v62;
  v74 = Calendar.compare(_:to:toGranularity:)(v21, v29, v31);
  v77 = *(_QWORD *)(v26 + 8);
  ((void (*)(char *, uint64_t))v77)(v32, v28);
  v34 = *(void (**)(char *, uint64_t))(v78 + 8);
  v34(v30, v25);
  v35 = v21;
  v34(v21, v25);
  v78 = *(_QWORD *)(v73 + 8);
  v36 = ((uint64_t (*)(char *, uint64_t))v78)(v33, v84);
  static Calendar.current.getter(v36);
  v72(v83, v82);
  v37 = v11;
  v38 = (uint64_t)v11;
  v39 = v63;
  sub_10000F1E0(v63, AssociatedConformanceWitness, v38);
  v40 = v70(v17, v39);
  DateInterval.start.getter(v40);
  v67(v37, v68);
  v41 = (uint64_t)v79;
  sub_100015C04();
  v42 = v30;
  v66(v30, v41 + *(int *)(v85 + 20), v25);
  sub_10001A704(v41);
  v43 = v80;
  v44 = v81;
  ((void (*)(char *, _QWORD, uint64_t))v64)(v80, v65, v81);
  v45 = v35;
  v46 = v35;
  v47 = v43;
  v48 = Calendar.compare(_:to:toGranularity:)(v45, v42, v43);
  ((void (*)(char *, uint64_t))v77)(v47, v44);
  v34(v42, v25);
  v34(v46, v25);
  ((void (*)(char *, uint64_t))v78)(v33, v84);
  v50 = v74 < 2 && (unint64_t)(v48 + 1) < 2;
  v52 = v82;
  v51 = v83;
  v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v82 + 248))(v83, v82);
  v54 = sub_100015FC4();
  v55 = swift_getAssociatedTypeWitness(0, v52);
  v56 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v52, v51, v55, &unk_1001191E8, &unk_100119200) + 8);
  v57 = Set.intersection(_:)(v54, v53, v55, v56);
  swift_bridgeObjectRelease(v54);
  v58 = Set.isEmpty.getter(v57, v55, v56);
  swift_bridgeObjectRelease(v57);
  if (!sub_100016F64() || (v59 = v50, sub_100017054()))
  {
    v59 = v58 ^ 1;
    if (sub_100016F64() || !sub_100017054())
      v59 &= v50;
  }
  return v59 & 1;
}

uint64_t sub_100017AB0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  BOOL v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t AssociatedTypeWitness;
  uint64_t v31;
  uint64_t AssociatedConformanceWitness;
  uint64_t v33;
  void (*v34)(char *, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v1 = *v0;
  v2 = sub_100003E70(&qword_10015DD00);
  __chkstk_darwin(v2);
  v66 = (uint64_t)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v1 + 80);
  v4 = *(_QWORD *)(v1 + 88);
  v61 = type metadata accessor for FilterViewModel.FilterConfiguration(0, v5, v4, v6);
  v7 = *(_QWORD *)(v61 - 8);
  v8 = __chkstk_darwin(v61);
  v62 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v56 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v56 - v14;
  __chkstk_darwin(v13);
  v64 = (char **)((char *)&v56 - v16);
  v63 = type metadata accessor for DateInterval(0);
  v60 = *(_QWORD *)(v63 - 8);
  v17 = __chkstk_darwin(v63);
  v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v56 - v20;
  if (sub_100016ED4())
  {
    sub_10001681C();
    if (!sub_100016ED4())
      goto LABEL_3;
LABEL_6:
    v59 = sub_1000170F4();
    if (!sub_100016ED4())
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_100016618((uint64_t)v21);
  if (sub_100016ED4())
    goto LABEL_6;
LABEL_3:
  v59 = 0;
  if (!sub_100016ED4())
  {
LABEL_4:
    v22 = static Array._allocateUninitialized(_:)(0, v5);
    goto LABEL_8;
  }
LABEL_7:
  v22 = sub_100015B54();
LABEL_8:
  v58 = v22;
  v23 = sub_100016ED4();
  v67 = v5;
  v65 = v4;
  if (v23)
  {
    v24 = (void *)sub_100015FC4();
    v57 = v24;
  }
  else
  {
    v28 = v21;
    v29 = v4;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4);
    v31 = static Array._allocateUninitialized(_:)(0, AssociatedTypeWitness);
    if (Array._getCount()())
    {
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v29, v5, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
      v57 = (void *)sub_10001A9B0(v31, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
      v24 = (void *)swift_bridgeObjectRelease(v31);
    }
    else
    {
      v24 = (void *)swift_bridgeObjectRelease(v31);
      v57 = &_swiftEmptySetSingleton;
    }
    v21 = v28;
  }
  v56 = v21;
  sub_100015A1C((uint64_t)v24, v25, v26, v27);
  v33 = *((_QWORD *)v15 + 1);
  v34 = *(void (**)(char *, uint64_t, __n128))(v7 + 8);
  v35 = swift_bridgeObjectRetain(v33);
  v36 = v61;
  v34(v15, v61, v35);
  v37 = v60;
  v38 = v63;
  v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v60 + 16))(v19, v21, v63);
  sub_100015A1C(v39, v40, v41, v42);
  v43 = v66;
  sub_10001A678((uint64_t)&v12[*(int *)(v36 + 48)], v66);
  v44 = ((uint64_t (*)(char *, uint64_t))v34)(v12, v36);
  v45 = v62;
  sub_100015A1C(v44, v46, v47, v48);
  v49 = *(_QWORD *)&v45[*(int *)(v36 + 52)];
  v50 = swift_bridgeObjectRetain(v49);
  v34(v45, v36, v50);
  v51 = v64;
  sub_1000155DC(v59, v33, v58, (uint64_t)v19, v43, v49, (uint64_t)v57, v67, v64, v65);
  sub_100019B80((uint64_t)v51, v52, v53, v54);
  ((void (*)(_QWORD *, uint64_t))v34)(v51, v36);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v56, v38);
}

uint64_t sub_100017E30()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  __n128 v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_BYTE *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __n128 v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_BYTE *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t AssociatedTypeWitness;
  uint64_t v34;
  uint64_t AssociatedConformanceWitness;
  void *v36;
  uint64_t v38;
  _QWORD *v39;
  void (*v40)(uint64_t, char *, uint64_t);
  void (*v41)(char *, char *, uint64_t, __n128);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[40];

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = v6;
  v42 = sub_100003E70(&qword_10015DD00);
  __chkstk_darwin(v42);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v2 + 80);
  v10 = *(_QWORD *)(v2 + 88);
  v58 = v9;
  v59 = v10;
  KeyPath = swift_getKeyPath(&unk_10010B6B0);
  v56 = v9;
  v57 = v10;
  v12 = swift_getKeyPath(&unk_10010B6E8);
  v39 = v1;
  static Published.subscript.getter(v1, KeyPath, v12);
  swift_release(KeyPath);
  v13 = swift_release(v12);
  v41 = *(void (**)(char *, char *, uint64_t, __n128))(v4 + 16);
  v14 = v6;
  v15 = v3;
  v41(v14, v8, v3, v13);
  sub_100008194((uint64_t)v8, &qword_10015DD00);
  v54 = v9;
  v55 = v10;
  v16 = swift_getKeyPath(&unk_10010B708);
  v52 = v9;
  v53 = v10;
  v17 = swift_getKeyPath(&unk_10010B740);
  v18 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify(v60, v1, v16, v17);
  v20 = v19;
  v21 = type metadata accessor for CompactDatePickerConfiguration(0);
  v22 = v20 + *(int *)(v21 + 20);
  v40 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 40);
  v40(v22, v43, v15);
  v18(v60, 0);
  swift_release(v16);
  swift_release(v17);
  v50 = v9;
  v51 = v10;
  v23 = swift_getKeyPath(&unk_10010B6B0);
  v48 = v9;
  v49 = v10;
  v24 = swift_getKeyPath(&unk_10010B6E8);
  v25 = v39;
  static Published.subscript.getter(v39, v23, v24);
  swift_release(v23);
  v26 = swift_release(v24);
  v27 = v43;
  v41(v43, &v8[*(int *)(v42 + 36)], v15, v26);
  sub_100008194((uint64_t)v8, &qword_10015DD00);
  v46 = v9;
  v47 = v10;
  v28 = swift_getKeyPath(&unk_10010B760);
  v44 = v9;
  v45 = v10;
  v29 = swift_getKeyPath(&unk_10010B798);
  v30 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify(v60, v25, v28, v29);
  v40(v31 + *(int *)(v21 + 20), v27, v15);
  v30(v60, 0);
  swift_release(v28);
  swift_release(v29);
  v32 = static Array._allocateUninitialized(_:)(0, v9);
  sub_100016060(v32, (uint64_t)&unk_10010B600, (uint64_t)&unk_10010B638);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v10);
  v34 = static Array._allocateUninitialized(_:)(0, AssociatedTypeWitness);
  if (Array._getCount()())
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, v9, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
    v36 = (void *)sub_10001A9B0(v34, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  }
  else
  {
    v36 = &_swiftEmptySetSingleton;
  }
  swift_bridgeObjectRelease(v34);
  return sub_100016060((uint64_t)v36, (uint64_t)&unk_10010B658, (uint64_t)&unk_10010B690);
}

void sub_1000181F8(char a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  ValueWitnessTable *v25;
  uint64_t v26;
  char *v27;
  NSString v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  void **aBlock;
  uint64_t v34;
  Class (*v35)(uint64_t);
  ValueMetadata *v36;
  _QWORD *(*v37)();
  _QWORD *v38;
  char *v39;

  v10 = sub_100003E70(&qword_10015D3B8);
  v11 = swift_allocObject(v10, 192, 7);
  *(_OWORD *)(v11 + 16) = xmmword_10010A6D0;
  v15 = sub_100015778(v11, v12, v13, v14);
  *(_QWORD *)(v11 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v11 + 64) = &off_100162E68;
  *(_BYTE *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v15;
  *(_QWORD *)(v11 + 48) = v16;
  *(_QWORD *)(v11 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v11 + 104) = &off_100162E40;
  *(_BYTE *)(v11 + 72) = 7;
  *(_QWORD *)(v11 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v11 + 144) = &off_100162EC8;
  *(_BYTE *)(v11 + 112) = a1;
  *(_QWORD *)(v11 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v11 + 184) = &off_100162EA0;
  *(_QWORD *)(v11 + 152) = a2;
  *(_QWORD *)(v11 + 160) = a3;
  *(_BYTE *)(v11 + 168) = a4;
  v17 = *(_QWORD *)(a5 + 72);
  if (v17)
  {
    v18 = *(_QWORD *)(a5 + 64);
    v19 = *(_QWORD *)(a5 + 72);
  }
  else
  {
    v18 = 0;
    v19 = 0xE000000000000000;
  }
  v36 = &type metadata for AnalyticsString;
  v37 = (_QWORD *(*)())&off_100162E68;
  LOBYTE(aBlock) = 1;
  v34 = v18;
  v35 = (Class (*)(uint64_t))v19;
  sub_100005568(a2, a3, a4);
  v39 = (char *)v11;
  v20 = *(_QWORD *)(v11 + 16);
  v21 = *(_QWORD *)(v11 + 24);
  swift_bridgeObjectRetain(v17);
  if (v20 >= v21 >> 1)
    v39 = sub_1000F4CF4((char *)(v21 > 1), v20 + 1, 1, (char *)v11);
  v22 = sub_100005580((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v22);
  v24 = (char *)&v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v25->initializeWithCopy)((uint64_t)v24, v26);
  sub_1000DAD34(v20, (uint64_t)v24, (uint64_t *)&v39, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_100162E68);
  sub_1000055A8(&aBlock);
  v27 = v39;
  v28 = String._bridgeToObjectiveC()();
  v29 = (_QWORD *)swift_allocObject(&unk_10014D320, 40, 7);
  v29[2] = 0xD00000000000001ELL;
  v29[3] = 0x80000001001150B0;
  v29[4] = v27;
  v37 = sub_1000055F4;
  v38 = v29;
  aBlock = _NSConcreteStackBlock;
  v34 = 1107296256;
  v35 = sub_1000DACC0;
  v36 = (ValueMetadata *)&unk_10014D338;
  v30 = _Block_copy(&aBlock);
  v31 = v38;
  swift_bridgeObjectRetain(v27);
  swift_release(v31);
  AnalyticsSendEventLazy(v28, v30);
  _Block_release(v30);
  swift_bridgeObjectRelease(v27);

}

uint64_t sub_100018494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = sub_100015778(a1, a2, a3, a4);
  v7 = v6;
  sub_1000DADAC(v5, v6, 7, a1);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_1000184C8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  v3 = *v1;
  v4 = sub_100015FC4();
  v7 = v3 + 80;
  v6 = *(_QWORD *)(v3 + 80);
  v5 = *(_QWORD *)(v7 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v6, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
  LOBYTE(a1) = Set.contains(_:)(a1, v4, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_bridgeObjectRelease(v4);
  return a1 & 1;
}

uint64_t sub_10001856C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_BYTE *, _QWORD);
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[32];

  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v3);
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = __chkstk_darwin(AssociatedTypeWitness);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v33 - v10;
  v33 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v12 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v14 = (char *)&v33 - v13;
  v34 = v1;
  v15 = sub_1000184C8(a1);
  if ((v15 & 1) != 0)
  {
    __chkstk_darwin(v15);
    *(&v33 - 2) = v4;
    *(&v33 - 1) = v3;
    KeyPath = swift_getKeyPath(&unk_10010B658);
    __chkstk_darwin(KeyPath);
    *(&v33 - 2) = v4;
    *(&v33 - 1) = v3;
    v17 = a1;
    v18 = swift_getKeyPath(&unk_10010B690);
    v19 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify(v35, v34, KeyPath, v18);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v4, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
    v21 = type metadata accessor for Set(0, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
    Set.remove(_:)(v17, v21);
    v22 = v14;
    v23 = KeyPath;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v22, v33);
    v19(v35, 0);
  }
  else
  {
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, AssociatedTypeWitness);
    __chkstk_darwin(v24);
    *(&v33 - 2) = v4;
    *(&v33 - 1) = v3;
    v23 = swift_getKeyPath(&unk_10010B658);
    __chkstk_darwin(v23);
    *(&v33 - 2) = v4;
    *(&v33 - 1) = v3;
    v18 = swift_getKeyPath(&unk_10010B690);
    v25 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify(v35, v34, v23, v18);
    v26 = swift_getAssociatedConformanceWitness(v3, v4, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
    v27 = type metadata accessor for Set(0, AssociatedTypeWitness, *(_QWORD *)(v26 + 8));
    Set.insert(_:)(v11, v9, v27);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, AssociatedTypeWitness);
    v25(v35, 0);
  }
  swift_release(v23);
  swift_release(v18);
  return sub_1000173A0(v28, v29, v30, v31);
}

char *sub_100018878()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;

  v1 = *(_QWORD *)v0;
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 5));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 7));
  v2 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 120)];
  v3 = *(_QWORD *)(v1 + 80);
  v4 = *(_QWORD *)(v1 + 88);
  v6 = type metadata accessor for FilterViewModel.FilterState(255, v3, v4, v5);
  v7 = type metadata accessor for Published(0, v6);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v2, v7);
  v8 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 128)];
  v9 = type metadata accessor for Array(255, v3);
  v10 = type metadata accessor for Published(0, v9);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  v11 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 136)];
  v12 = sub_100003E70(&qword_10015DE28);
  v13 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v13(&v0[*(_QWORD *)(*(_QWORD *)v0 + 144)], v12);
  v14 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 152)];
  v15 = sub_100003E70(&qword_10015DE30);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 160)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4);
  v18 = type metadata accessor for Array(255, AssociatedTypeWitness);
  v19 = type metadata accessor for Published(0, v18);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v16, v19);
  v20 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 168)];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v3, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
  v22 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  v23 = type metadata accessor for Published(0, v22);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v20, v23);
  v24 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 176)];
  v25 = sub_100003E70(&qword_10015D7E0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  v26 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 184)];
  v27 = sub_100003E70(&qword_10015D7F8);
  v28 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8);
  v28(v26, v27);
  v28(&v0[*(_QWORD *)(*(_QWORD *)v0 + 192)], v27);
  v29 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 200)];
  v31 = type metadata accessor for FilterViewModel.FilterConfiguration(255, v3, v4, v30);
  v32 = type metadata accessor for Binding(0, v31);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v29, v32);
  v33 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 208)];
  v34 = *((_QWORD *)v33 + 1);
  swift_bridgeObjectRelease(*((_QWORD *)v33 + 3));
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[*(_QWORD *)(*(_QWORD *)v0 + 216) + 8]);
  v35 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 224)];
  v36 = *((_QWORD *)v35 + 1);
  swift_bridgeObjectRelease(*((_QWORD *)v35 + 3));
  swift_bridgeObjectRelease(v36);
  v37 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 232)];
  v38 = *((_QWORD *)v37 + 1);
  swift_bridgeObjectRelease(*((_QWORD *)v37 + 3));
  swift_bridgeObjectRelease(v38);
  v39 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 240)];
  v40 = *((_QWORD *)v39 + 1);
  swift_bridgeObjectRelease(*((_QWORD *)v39 + 3));
  swift_bridgeObjectRelease(v40);
  v41 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 248)];
  v42 = *((_QWORD *)v41 + 1);
  swift_bridgeObjectRelease(*((_QWORD *)v41 + 3));
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[*(_QWORD *)(*(_QWORD *)v0 + 256)]);
  return v0;
}

uint64_t sub_100018BD0()
{
  uint64_t v0;

  sub_100018878();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for FilterViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FilterViewModel);
}

uint64_t type metadata accessor for FilterViewModel.FilterState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FilterViewModel.FilterState);
}

void sub_100018C0C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015DCF0)
  {
    v2 = type metadata accessor for CompactDatePickerConfiguration(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10015DCF0);
  }
}

void sub_100018C60(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015DCF8)
  {
    v2 = sub_1000034AC(&qword_10015DD00);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10015DCF8);
  }
}

void sub_100018CB8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for Published(0, a3);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t type metadata accessor for FilterViewModel.FilterConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FilterViewModel.FilterConfiguration);
}

uint64_t sub_100018D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

void sub_100018D10(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2 = type metadata accessor for DateInterval(319);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_100019520(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 0, 7, v6, a1 + 32);
    }
  }
}

uint64_t *sub_100018DBC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[2];
    a1[2] = v8;
    v9 = a3[11];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for DateInterval(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    v14 = a3[12];
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for Date(0);
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    v18(v15, v16, v17);
    v19 = sub_100003E70(&qword_10015DD00);
    v18(&v15[*(int *)(v19 + 36)], &v16[*(int *)(v19 + 36)], v17);
    v20 = a3[13];
    v21 = a3[14];
    v22 = *(uint64_t *)((char *)a2 + v20);
    *(uint64_t *)((char *)v4 + v20) = v22;
    v23 = *(uint64_t *)((char *)a2 + v21);
    *(uint64_t *)((char *)v4 + v21) = v23;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
  }
  return v4;
}

uint64_t sub_100018EF0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = a1 + a2[11];
  v5 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[12];
  v7 = type metadata accessor for Date(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = sub_100003E70(&qword_10015DD00);
  v8(v6 + *(int *)(v9 + 36), v7);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[14]));
}

_QWORD *sub_100018FAC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[2];
  a1[2] = v7;
  v8 = a3[11];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for DateInterval(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  v13 = a3[12];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for Date(0);
  v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v17(v14, v15, v16);
  v18 = sub_100003E70(&qword_10015DD00);
  v17(&v14[*(int *)(v18 + 36)], &v15[*(int *)(v18 + 36)], v16);
  v19 = a3[13];
  v20 = a3[14];
  v21 = *(_QWORD *)((char *)a2 + v19);
  *(_QWORD *)((char *)a1 + v19) = v21;
  v22 = *(_QWORD *)((char *)a2 + v20);
  *(_QWORD *)((char *)a1 + v20) = v22;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  return a1;
}

_QWORD *sub_1000190B4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[11];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[12];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Date(0);
  v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24);
  v18(v15, v16, v17);
  v19 = sub_100003E70(&qword_10015DD00);
  v18(&v15[*(int *)(v19 + 36)], &v16[*(int *)(v19 + 36)], v17);
  v20 = a3[13];
  v21 = *(_QWORD *)((char *)a2 + v20);
  v22 = *(_QWORD *)((char *)a1 + v20);
  *(_QWORD *)((char *)a1 + v20) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = a3[14];
  v24 = *(_QWORD *)((char *)a2 + v23);
  v25 = *(_QWORD *)((char *)a1 + v23);
  *(_QWORD *)((char *)a1 + v23) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  return a1;
}

uint64_t sub_1000191E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[11];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[12];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Date(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  v15 = sub_100003E70(&qword_10015DD00);
  v14(v11 + *(int *)(v15 + 36), v12 + *(int *)(v15 + 36), v13);
  v16 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  return a1;
}

_QWORD *sub_1000192C0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  v9 = a3[11];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[12];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for Date(0);
  v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40);
  v17(v14, v15, v16);
  v18 = sub_100003E70(&qword_10015DD00);
  v17(&v14[*(int *)(v18 + 36)], &v15[*(int *)(v18 + 36)], v16);
  v19 = a3[13];
  v20 = *(_QWORD *)((char *)a1 + v19);
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  swift_bridgeObjectRelease(v20);
  v21 = a3[14];
  v22 = *(_QWORD *)((char *)a1 + v21);
  *(_QWORD *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
  swift_bridgeObjectRelease(v22);
  return a1;
}

uint64_t sub_1000193C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000193D0);
}

uint64_t sub_1000193D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DateInterval(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 44);
    }
    else
    {
      v10 = sub_100003E70(&qword_10015DD00);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_100019474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100019480);
}

uint64_t sub_100019480(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for DateInterval(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 44);
    }
    else
    {
      v10 = sub_100003E70(&qword_10015DD00);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_100019520(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_10015DD98)
  {
    v2 = type metadata accessor for Date(255);
    v3 = sub_100003B3C(qword_10015DDA0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v4 = type metadata accessor for ClosedRange(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_10015DD98);
  }
}

uint64_t sub_100019598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

_BYTE *initializeBufferWithCopyOfBuffer for RemoteViewConfiguration.Service.Name(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PhoneWallpapersWatchFacesConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_10001963C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100019688 + 4 * byte_10010B425[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000196BC + 4 * byte_10010B420[v4]))();
}

uint64_t sub_1000196BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000196C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000196CCLL);
  return result;
}

uint64_t sub_1000196D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000196E0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000196E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000196EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000196F8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100019700(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

uint64_t sub_10001970C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10010B548, a1);
}

uint64_t sub_10001971C()
{
  return sub_100015B68();
}

uint64_t sub_10001973C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100019784(a1, a2, a3, a4, (uint64_t)&unk_10010B708, (uint64_t)&unk_10010B740);
}

uint64_t sub_100019750()
{
  return sub_100015C04();
}

uint64_t sub_100019770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100019784(a1, a2, a3, a4, (uint64_t)&unk_10010B760, (uint64_t)&unk_10010B798);
}

uint64_t sub_100019784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v9 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A6C0(a1, (uint64_t)v11);
  return sub_100015CA0((uint64_t)v11, a5, a6);
}

uint64_t sub_100019814(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  Published.init(initialValue:)(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
}

uint64_t sub_1000198AC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;

  v1 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010B6B0);
  v3 = swift_getKeyPath(&unk_10010B6E8);
  static Published.subscript.getter(v1, KeyPath, v3);
  swift_release(KeyPath);
  return swift_release(v3);
}

uint64_t sub_100019940(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  _QWORD v18[4];

  v6 = *(_QWORD *)(a4 + a3 - 16);
  v7 = *(_QWORD *)(a4 + a3 - 8);
  v8 = sub_100003E70(&qword_10015DD00);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v18 - v12;
  sub_10001A678(a1, (uint64_t)v18 - v12);
  v14 = *a2;
  v18[2] = v6;
  v18[3] = v7;
  KeyPath = swift_getKeyPath(&unk_10010B6B0);
  v18[0] = v6;
  v18[1] = v7;
  v16 = swift_getKeyPath(&unk_10010B6E8);
  sub_10001A678((uint64_t)v13, (uint64_t)v11);
  swift_retain(v14);
  static Published.subscript.setter(v11, v14, KeyPath, v16);
  return sub_100008194((uint64_t)v13, &qword_10015DD00);
}

uint64_t sub_100019A54@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  char v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010B7B8);
  v5 = swift_getKeyPath(&unk_10010B7F0);
  static Published.subscript.getter(v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_100019AF0(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010B7B8);
  v5 = swift_getKeyPath(&unk_10010B7F0);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_100019B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  v6 = *v4;
  v7 = type metadata accessor for FilterViewModel.FilterConfiguration(0, *(_QWORD *)(*v4 + 80), *(_QWORD *)(*v4 + 88), a4);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v16 - v9;
  v11 = type metadata accessor for Binding(0, v7);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v16 - v13, (uint64_t)v4 + *(_QWORD *)(v6 + 200), v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  Binding.wrappedValue.setter(v10, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

Swift::String *sub_100019C80(uint64_t a1)
{
  Swift::String *v1;
  Swift::String *v2;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  id v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  id v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  char *v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  id v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  uint64_t *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  id v78;
  Swift::String v79;
  Swift::String v80;
  Swift::String v81;
  uint64_t v82;
  Swift::String *v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  Swift::String v87;
  Swift::String v88;
  Swift::String v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  _OWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  Swift::String *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _OWORD v117[2];
  _QWORD v118[2];
  Swift::String v119;
  Swift::String v120;
  Swift::String v121;
  Swift::String v122;
  Swift::String v123;
  Swift::String v124;

  v2 = v1;
  v110 = a1;
  countAndFlagsBits = v1->_countAndFlagsBits;
  v4 = sub_100003E70(&qword_10015DD00);
  __chkstk_darwin(v4);
  v113 = (uint64_t)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v112);
  v111 = (Swift::String *)((char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(countAndFlagsBits + 88);
  v115 = *(_QWORD *)(countAndFlagsBits + 80);
  v116 = v7;
  v108 = type metadata accessor for FilterViewModel.FilterConfiguration(0, v115, v7, v8);
  v114 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v109 = (char *)&v99 - v9;
  v10 = type metadata accessor for GridItem.Size(0);
  v106 = *(_QWORD *)(v10 - 8);
  v107 = v10;
  __chkstk_darwin(v10);
  v104 = (_OWORD *)((char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v105 = sub_100003E70(&qword_10015DE38);
  __chkstk_darwin(v105);
  v103 = (uint64_t *)((char *)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_100003E70(&qword_10015D7F8);
  v101 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100003E70(&qword_10015D7E0);
  v99 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v17 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (void *)objc_opt_self(NSBundle);
  v19 = objc_msgSend(v18, "mainBundle");
  v20._countAndFlagsBits = 0xD000000000000024;
  v102 = 0xD000000000000024;
  v119._object = (void *)0xE000000000000000;
  v20._object = (void *)0x80000001001156B0;
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  v119._countAndFlagsBits = 0;
  v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, (Swift::String_optional)0, (NSBundle)v19, v21, v119);

  v2[1] = v22;
  v23 = objc_msgSend(v18, "mainBundle");
  v120._object = (void *)0xE000000000000000;
  v24._object = (void *)0x80000001001156E0;
  v24._countAndFlagsBits = 0xD000000000000025;
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v120._countAndFlagsBits = 0;
  v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v120);

  v2[2] = v26;
  v27 = objc_msgSend(v18, "mainBundle");
  v28._countAndFlagsBits = 0xD00000000000002CLL;
  v121._object = (void *)0xE000000000000000;
  v28._object = (void *)0x8000000100115710;
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  v121._countAndFlagsBits = 0;
  v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v27, v29, v121);

  v2[3] = v30;
  v31 = (char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 176);
  memset(v117, 0, sizeof(v117));
  Published.init(initialValue:)(v117, &type metadata for EdgeInsets);
  (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v31, v17, v100);
  v32 = (char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 184);
  *(_QWORD *)&v117[0] = 0;
  Published.init(initialValue:)(v117, &type metadata for CGFloat);
  v33 = *(void (**)(char *, char *, uint64_t))(v101 + 32);
  v33(v32, v15, v13);
  v34 = (char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 192);
  *(_QWORD *)&v117[0] = 0;
  Published.init(initialValue:)(v117, &type metadata for CGFloat);
  v33(v34, v15, v13);
  v35 = (char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 208);
  *(_QWORD *)v35 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002DLL, 0x8000000100115740);
  *((_QWORD *)v35 + 1) = v36;
  v35[16] = v37 & 1;
  *((_QWORD *)v35 + 3) = v38;
  v39 = (uint64_t *)((char *)&v2->_countAndFlagsBits + *(_QWORD *)(v2->_countAndFlagsBits + 216));
  v40 = objc_msgSend(v18, "mainBundle");
  v41._countAndFlagsBits = 0xD000000000000030;
  v122._object = (void *)0xE000000000000000;
  v41._object = (void *)0x8000000100115770;
  v42._countAndFlagsBits = 0;
  v42._object = (void *)0xE000000000000000;
  v122._countAndFlagsBits = 0;
  v43 = NSLocalizedString(_:tableName:bundle:value:comment:)(v41, (Swift::String_optional)0, (NSBundle)v40, v42, v122);

  v117[0] = v43;
  v44 = sub_10000CB40();
  v45 = StringProtocol.localizedUppercase.getter(&type metadata for String, v44);
  v47 = v46;
  swift_bridgeObjectRelease(v43._object);
  *v39 = v45;
  v39[1] = v47;
  v48 = (char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 224);
  *(_QWORD *)v48 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002ELL, 0x80000001001157B0);
  *((_QWORD *)v48 + 1) = v49;
  v48[16] = v50 & 1;
  *((_QWORD *)v48 + 3) = v51;
  v52 = (char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 232);
  *(_QWORD *)v52 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000025, 0x80000001001157E0);
  *((_QWORD *)v52 + 1) = v53;
  v52[16] = v54 & 1;
  *((_QWORD *)v52 + 3) = v55;
  v56 = (char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 240);
  *(_QWORD *)v56 = LocalizedStringKey.init(stringLiteral:)(v102, 0x8000000100115810);
  *((_QWORD *)v56 + 1) = v57;
  v56[16] = v58 & 1;
  *((_QWORD *)v56 + 3) = v59;
  v60 = (char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 248);
  *(_QWORD *)v60 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000025, 0x8000000100115840);
  *((_QWORD *)v60 + 1) = v61;
  v60[16] = v62 & 1;
  *((_QWORD *)v60 + 3) = v63;
  v64 = *(_QWORD *)(v2->_countAndFlagsBits + 256);
  v65 = v104;
  *v104 = xmmword_10010B410;
  (*(void (**)(_OWORD *, _QWORD, uint64_t))(v106 + 104))(v65, enum case for GridItem.Size.flexible(_:), v107);
  v66 = v103;
  GridItem.init(_:spacing:alignment:)(v65, 0x4028000000000000, 0, 0, 0, 1);
  *v66 = 2;
  v67 = sub_1000F5384(v66);
  sub_100008194((uint64_t)v66, &qword_10015DE38);
  *(uint64_t *)((char *)&v2->_countAndFlagsBits + v64) = (uint64_t)v67;
  v68 = (char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 200);
  v69 = v108;
  v70 = type metadata accessor for Binding(0, v108);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v68, v110, v70);
  v71 = v109;
  Binding.wrappedValue.getter(v70);
  LOBYTE(v70) = *v71 < 1;
  swift_beginAccess((char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 120), v117, 33, 0);
  LOBYTE(v118[0]) = v70;
  v72 = v115;
  v74 = type metadata accessor for FilterViewModel.FilterState(0, v115, v116, v73);
  sub_100019814((uint64_t)v118, v74);
  swift_endAccess(v117);
  v75 = v71[2];
  swift_beginAccess((char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 128), v117, 33, 0);
  swift_bridgeObjectRetain(v75);
  v118[0] = v75;
  v76 = type metadata accessor for Array(0, v72);
  sub_100019814((uint64_t)v118, v76);
  swift_endAccess(v117);
  v77 = v18;
  v78 = objc_msgSend(v18, "mainBundle");
  v123._object = (void *)0xE000000000000000;
  v79._object = (void *)0x8000000100115870;
  v79._countAndFlagsBits = 0xD000000000000025;
  v80._countAndFlagsBits = 0;
  v80._object = (void *)0xE000000000000000;
  v123._countAndFlagsBits = 0;
  v81 = NSLocalizedString(_:tableName:bundle:value:comment:)(v79, (Swift::String_optional)0, (NSBundle)v78, v80, v123);

  v82 = v69;
  v83 = v111;
  v84 = v112;
  DateInterval.start.getter(v85);
  *v83 = v81;
  *((_BYTE *)&v83->_countAndFlagsBits + *(int *)(v84 + 24)) = 0;
  swift_beginAccess((char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 136), v117, 33, 0);
  sub_100015B7C((uint64_t)v83);
  swift_endAccess(v117);
  v86 = objc_msgSend(v77, "mainBundle");
  v87._countAndFlagsBits = 0xD000000000000023;
  v124._object = (void *)0xE000000000000000;
  v87._object = (void *)0x80000001001158A0;
  v88._countAndFlagsBits = 0;
  v88._object = (void *)0xE000000000000000;
  v124._countAndFlagsBits = 0;
  v89 = NSLocalizedString(_:tableName:bundle:value:comment:)(v87, (Swift::String_optional)0, (NSBundle)v86, v88, v124);

  DateInterval.end.getter(v90);
  *v83 = v89;
  *((_BYTE *)&v83->_countAndFlagsBits + *(int *)(v84 + 24)) = 0;
  swift_beginAccess((char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 144), v117, 33, 0);
  sub_100015B7C((uint64_t)v83);
  swift_endAccess(v117);
  v91 = v113;
  sub_10001A678((uint64_t)v71 + *(int *)(v69 + 48), v113);
  swift_beginAccess((char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 152), v117, 33, 0);
  sub_100015D78(v91);
  swift_endAccess(v117);
  v92 = *(_QWORD *)((char *)v71 + *(int *)(v69 + 52));
  swift_beginAccess((char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 160), v117, 33, 0);
  swift_bridgeObjectRetain(v92);
  v94 = v115;
  v93 = v116;
  sub_100015EA4(v95, v115, v116);
  swift_endAccess(v117);
  v96 = *(_QWORD *)((char *)v71 + *(int *)(v82 + 56));
  swift_beginAccess((char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 168), v117, 33, 0);
  swift_bridgeObjectRetain(v96);
  sub_100015F20(v97, v94, v93);
  swift_endAccess(v117);
  (*(void (**)(_QWORD *, uint64_t))(v114 + 8))(v71, v82);
  return v2;
}

Swift::String *sub_10001A640(uint64_t a1)
{
  uint64_t v1;

  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  return sub_100019C80(a1);
}

uint64_t sub_10001A678(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015DD00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001A6C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CompactDatePickerConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001A704(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CompactDatePickerConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001A740()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10001A76C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001A77C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10001A784(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = sub_1000160EC();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

uint64_t sub_10001A7B0(double *a1)
{
  return sub_100016178(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_10001A7D8()
{
  return 16;
}

__n128 sub_10001A7E4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10001A7F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100015B54();
  *a1 = result;
  return result;
}

uint64_t sub_10001A818(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001A880(a1, a2, a3, a4, (uint64_t)&unk_10010B600, (uint64_t)&unk_10010B638);
}

uint64_t sub_10001A82C()
{
  return 16;
}

__n128 sub_10001A838(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10001A844@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100015FC4();
  *a1 = result;
  return result;
}

uint64_t sub_10001A86C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001A880(a1, a2, a3, a4, (uint64_t)&unk_10010B658, (uint64_t)&unk_10010B690);
}

uint64_t sub_10001A880(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  v8 = swift_bridgeObjectRetain(*a1);
  return sub_100016060(v8, a5, a6);
}

uint64_t sub_10001A8C0()
{
  return 16;
}

__n128 sub_10001A8CC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10001A8E0()
{
  return 16;
}

__n128 sub_10001A8EC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10001A8F8()
{
  return sub_100015B68();
}

uint64_t sub_10001A918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100019784(a1, a2, a3, a4, (uint64_t)&unk_10010B708, (uint64_t)&unk_10010B740);
}

uint64_t sub_10001A93C()
{
  return 16;
}

__n128 sub_10001A948(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10001A954()
{
  return sub_100015C04();
}

uint64_t sub_10001A974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100019784(a1, a2, a3, a4, (uint64_t)&unk_10010B760, (uint64_t)&unk_10010B798);
}

uint64_t sub_10001A998()
{
  return 16;
}

__n128 sub_10001A9A4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10001A9B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  Swift::Bool IsNativeType;
  void (*v20)(char *, unint64_t, uint64_t);
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  Swift::Int v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  v5 = a1;
  v48 = *(_QWORD *)(a2 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v47 = (char *)&v40 - v10;
  v40 = v11;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v40 - v13;
  v15 = Array.count.getter(v12);
  if (v15)
  {
    v16 = v15;
    type metadata accessor for _SetStorage(0, a2, a3);
    v17 = (_QWORD *)static _SetStorage.allocate(capacity:)(v16);
  }
  else
  {
    v17 = &_swiftEmptySetSingleton;
  }
  v43 = Array._getCount()();
  if (!v43)
    return (uint64_t)v17;
  v18 = 0;
  v46 = (char *)(v17 + 7);
  v41 = v14;
  v42 = v5;
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v18, IsNativeType, v5, a2);
    if (IsNativeType)
    {
      v20 = *(void (**)(char *, unint64_t, uint64_t))(v48 + 16);
      v20(v14, v5+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(_QWORD *)(v48 + 72) * v18, a2);
      v21 = __OFADD__(v18, 1);
      v22 = v18 + 1;
      if (v21)
        goto LABEL_20;
    }
    else
    {
      result = _ArrayBuffer._getElementSlowPath(_:)(v18, v5, a2);
      if (v40 != 8)
        goto LABEL_23;
      v39 = result;
      v49 = result;
      v20 = *(void (**)(char *, unint64_t, uint64_t))(v48 + 16);
      v20(v14, (unint64_t)&v49, a2);
      swift_unknownObjectRelease(v39);
      v21 = __OFADD__(v18, 1);
      v22 = v18 + 1;
      if (v21)
      {
LABEL_20:
        __break(1u);
        return (uint64_t)v17;
      }
    }
    v23 = v48;
    v44 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
    v45 = v22;
    v44(v47, v14, a2);
    v24 = dispatch thunk of Hashable._rawHashValue(seed:)(v17[5], a2, a3);
    v25 = -1 << *((_BYTE *)v17 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    v28 = *(_QWORD *)&v46[8 * (v26 >> 6)];
    v29 = 1 << v26;
    v30 = *(_QWORD *)(v23 + 72);
    if (((1 << v26) & v28) != 0)
    {
      v31 = ~v25;
      do
      {
        v20(v8, v17[6] + v30 * v26, a2);
        v32 = a3;
        v33 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v47, a2, *(_QWORD *)(a3 + 8));
        v34 = *(void (**)(char *, uint64_t))(v48 + 8);
        v34(v8, a2);
        if ((v33 & 1) != 0)
        {
          v34(v47, a2);
          a3 = v32;
          v14 = v41;
          v5 = v42;
          goto LABEL_7;
        }
        v26 = (v26 + 1) & v31;
        v27 = v26 >> 6;
        v28 = *(_QWORD *)&v46[8 * (v26 >> 6)];
        v29 = 1 << v26;
        a3 = v32;
      }
      while ((v28 & (1 << v26)) != 0);
      v14 = v41;
      v5 = v42;
    }
    v35 = v47;
    *(_QWORD *)&v46[8 * v27] = v29 | v28;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v44)(v17[6] + v30 * v26, v35, a2);
    v37 = v17[2];
    v21 = __OFADD__(v37, 1);
    v38 = v37 + 1;
    if (v21)
      break;
    v17[2] = v38;
LABEL_7:
    v18 = v45;
    if (v45 == v43)
      return (uint64_t)v17;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_10001ACC0()
{
  return 16;
}

__n128 sub_10001ACCC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10001ACD8(uint64_t a1)
{
  _QWORD *v1;

  return sub_100017514(a1, v1) & 1;
}

uint64_t sub_10001ACF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015DD00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001AD3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100015F0C();
  *a1 = result;
  return result;
}

uint64_t sub_10001AD64(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001A880(a1, a2, a3, a4, (uint64_t)&unk_10010B810, (uint64_t)&unk_10010B848);
}

uint64_t sub_10001AD78()
{
  return 16;
}

__n128 sub_10001AD84(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10001AD98()
{
  return 16;
}

__n128 sub_10001ADA4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10001ADB8()
{
  return 16;
}

__n128 sub_10001ADC4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t destroy for SetlistLoadingView(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 16));
}

uint64_t _s16EventViewService18SetlistLoadingViewVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for SetlistLoadingView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for SetlistLoadingView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SetlistLoadingView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SetlistLoadingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SetlistLoadingView()
{
  return &type metadata for SetlistLoadingView;
}

uint64_t sub_10001AF20(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001187EC, 1);
}

uint64_t sub_10001AF30()
{
  uint64_t result;

  result = static Color.secondary.getter();
  qword_10015DE50 = result;
  return result;
}

uint64_t sub_10001AF4C()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000033, 0x8000000100115900);
  qword_10015DE58 = result;
  unk_10015DE60 = v1;
  byte_10015DE68 = v2 & 1;
  qword_10015DE70 = v3;
  return result;
}

uint64_t sub_10001AF90()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000037, 0x8000000100115940);
  qword_10015DE78 = result;
  unk_10015DE80 = v1;
  byte_10015DE88 = v2 & 1;
  qword_10015DE90 = v3;
  return result;
}

uint64_t sub_10001AFD4()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002ELL, 0x80000001001158D0);
  qword_10015DE98 = result;
  unk_10015DEA0 = v1;
  byte_10015DEA8 = v2 & 1;
  qword_10015DEB0 = v3;
  return result;
}

uint64_t sub_10001B018@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;

  v55 = a3;
  v56 = a2;
  v57 = a1;
  v58 = a4;
  v4 = sub_100003E70(&qword_10015DED0);
  v5 = __chkstk_darwin(v4);
  v59 = (uint64_t)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v54 - v7;
  v9 = sub_100003E70(&qword_10015DED8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v54 - v13;
  v15 = type metadata accessor for Divider(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100003E70(&qword_10015DA80);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v54 - v24;
  v26 = Divider.init()(v23);
  v27 = static Edge.Set.horizontal.getter(v26);
  v28 = EdgeInsets.init(_all:)(40.0);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v18, v15);
  v35 = &v22[*(int *)(v19 + 36)];
  *v35 = v27;
  *((double *)v35 + 1) = v28;
  *((_QWORD *)v35 + 2) = v30;
  *((_QWORD *)v35 + 3) = v32;
  *((_QWORD *)v35 + 4) = v34;
  v35[40] = 0;
  v36 = *(void (**)(char *, uint64_t))(v16 + 8);
  v37 = v18;
  v38 = v55;
  v39 = v56;
  v36(v37, v15);
  v40 = sub_100007A98((uint64_t)v22, (uint64_t)v25, &qword_10015DA80);
  *(_QWORD *)v14 = static VerticalAlignment.center.getter(v40);
  *((_QWORD *)v14 + 1) = 0x4018000000000000;
  v14[16] = 0;
  v41 = sub_100003E70(&qword_10015DEE0);
  LOBYTE(v19) = v57;
  sub_10001B410(v57, (uint64_t)&v14[*(int *)(v41 + 44)]);
  if ((v19 & 1) != 0)
  {
    v42 = sub_100003E70(&qword_10015DF48);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v8, 1, 1, v42);
  }
  else
  {
    v43 = swift_allocObject(&unk_10014D450, 40, 7);
    *(_BYTE *)(v43 + 16) = 0;
    *(_QWORD *)(v43 + 24) = v39;
    *(_QWORD *)(v43 + 32) = v38;
    swift_retain(v38);
    v44 = sub_100003E70(&qword_10015DEE8);
    v45 = sub_10001BD88();
    Button.init(action:label:)(sub_10001BD68, v43, sub_10001B814, 0, v44, v45);
    v46 = sub_100003E70(&qword_10015DF48);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v8, 0, 1, v46);
  }
  sub_100007ADC((uint64_t)v25, (uint64_t)v22, &qword_10015DA80);
  sub_100007ADC((uint64_t)v14, (uint64_t)v12, &qword_10015DED8);
  v47 = v59;
  sub_100007ADC((uint64_t)v8, v59, &qword_10015DED0);
  v48 = (uint64_t)v25;
  v49 = (uint64_t)v8;
  v50 = (uint64_t)v12;
  v51 = v58;
  sub_100007ADC((uint64_t)v22, v58, &qword_10015DA80);
  v52 = sub_100003E70(&qword_10015DF50);
  sub_100007ADC(v50, v51 + *(int *)(v52 + 48), &qword_10015DED8);
  sub_100007ADC(v47, v51 + *(int *)(v52 + 64), &qword_10015DED0);
  sub_100008194(v49, &qword_10015DED0);
  sub_100008194((uint64_t)v14, &qword_10015DED8);
  sub_100008194(v48, &qword_10015DA80);
  sub_100008194(v47, &qword_10015DED0);
  sub_100008194(v50, &qword_10015DED8);
  return sub_100008194((uint64_t)v22, &qword_10015DA80);
}

uint64_t sub_10001B410@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char **v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];

  v49 = a2;
  v3 = sub_100003E70(&qword_10015D750);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_10015DF78);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003E70(&qword_10015DF80);
  v12 = __chkstk_darwin(v11);
  v48 = (uint64_t)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v47 - v15;
  v17 = &selRef_city;
  if ((a1 & 1) != 0)
  {
    ProgressView<>.init<>()(v14);
    if (qword_10015CE10 != -1)
      swift_once(&qword_10015CE10, sub_10001AF30);
    v18 = qword_10015DE50;
    KeyPath = swift_getKeyPath(&unk_10010B988);
    v50[0] = v18;
    swift_retain_n(v18, 2);
    v20 = AnyShapeStyle.init<A>(_:)(v50, &type metadata for Color, &protocol witness table for Color);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v10, v6, v3);
    swift_release(v18);
    v21 = (uint64_t *)&v10[*(int *)(v7 + 36)];
    *v21 = KeyPath;
    v21[1] = v20;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100007A98((uint64_t)v10, (uint64_t)v16, &qword_10015DF78);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v16, 0, 1, v7);
    if (qword_10015CE18 != -1)
      swift_once(&qword_10015CE18, sub_10001AF4C);
    v22 = &qword_10015DE58;
    v17 = &selRef_city;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))((char *)&v47 - v15, 1, 1, v7);
    if (qword_10015CE20 != -1)
      swift_once(&qword_10015CE20, sub_10001AF90);
    v22 = &qword_10015DE78;
  }
  v23 = v22[3];
  v24 = *((unsigned __int8 *)v22 + 16);
  v26 = *v22;
  v25 = v22[1];
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v23);
  v27 = Text.init(_:tableName:bundle:comment:)(v26, v25, v24, v23, 0, 0, 0, 0, 0, 256);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  if (v17[450] != (char *)-1)
    swift_once(&qword_10015CE10, sub_10001AF30);
  v34 = v31 & 1;
  v35 = qword_10015DE50;
  v50[0] = qword_10015DE50;
  swift_retain(qword_10015DE50);
  v36 = Text.foregroundStyle<A>(_:)(v50, v27, v29, v31 & 1, v33, &type metadata for Color, &protocol witness table for Color);
  v38 = v37;
  v40 = v39;
  v42 = v41 & 1;
  sub_10000BFF8(v27, v29, v34);
  swift_release(v35);
  swift_bridgeObjectRelease(v33);
  v43 = v48;
  sub_100007ADC((uint64_t)v16, v48, &qword_10015DF80);
  v44 = v49;
  sub_100007ADC(v43, v49, &qword_10015DF80);
  v45 = v44 + *(int *)(sub_100003E70(&qword_10015DF88) + 48);
  *(_QWORD *)v45 = v36;
  *(_QWORD *)(v45 + 8) = v38;
  *(_BYTE *)(v45 + 16) = v42;
  *(_QWORD *)(v45 + 24) = v40;
  sub_10000C008(v36, v38, v42);
  swift_bridgeObjectRetain(v40);
  sub_100008194((uint64_t)v16, &qword_10015DF80);
  sub_10000BFF8(v36, v38, v42);
  swift_bridgeObjectRelease(v40);
  return sub_100008194(v43, &qword_10015DF80);
}

uint64_t sub_10001B814@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD v70[2];
  uint64_t v71;
  char v72;
  char v73;
  char v74;
  char v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _OWORD v81[3];
  uint64_t v82;

  v61 = sub_100003E70(&qword_10015DF40);
  __chkstk_darwin(v61);
  v63 = (uint64_t)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v59);
  v60 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003E70(&qword_10015DF58);
  __chkstk_darwin(v4);
  v62 = (uint64_t)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10015CE28 != -1)
    swift_once(&qword_10015CE28, sub_10001AFD4);
  v6 = qword_10015DE98;
  v7 = unk_10015DEA0;
  v8 = byte_10015DEA8;
  v9 = qword_10015DEB0;
  swift_bridgeObjectRetain(unk_10015DEA0);
  swift_bridgeObjectRetain(v9);
  v10 = Text.init(_:tableName:bundle:comment:)(v6, v7, v8, v9, 0, 0, 0, 0, 0, 256);
  v56 = v11;
  v57 = v10;
  LOBYTE(v8) = v12;
  v58 = v13;
  v14 = static Alignment.center.getter(v10);
  v16 = _FrameLayout.init(width:height:alignment:)(&v64, 0, 1, 0x403E000000000000, 0, v14, v15);
  v17 = v64;
  v18 = v65;
  v19 = v66;
  v20 = v67;
  v21 = v69;
  v55 = v68;
  v22 = static Edge.Set.horizontal.getter(v16);
  v75 = v8 & 1;
  v74 = v18;
  v73 = v20;
  v72 = 1;
  if (qword_10015CE10 != -1)
    swift_once(&qword_10015CE10, sub_10001AF30);
  v23 = qword_10015DE50;
  *(_QWORD *)&v76 = v57;
  *((_QWORD *)&v76 + 1) = v56;
  LOBYTE(v77) = v75;
  *((_QWORD *)&v77 + 1) = v58;
  *(_QWORD *)&v78 = v17;
  BYTE8(v78) = v74;
  *(_QWORD *)&v79 = v19;
  BYTE8(v79) = v73;
  *(_QWORD *)&v80 = v55;
  *((_QWORD *)&v80 + 1) = v21;
  LOBYTE(v81[0]) = v22;
  *(_OWORD *)((char *)v81 + 8) = 0u;
  *(_OWORD *)((char *)&v81[1] + 8) = 0u;
  BYTE8(v81[2]) = v72;
  v82 = qword_10015DE50;
  v24 = v60;
  v25 = &v60[*(int *)(v59 + 20)];
  v26 = enum case for RoundedCornerStyle.continuous(_:);
  v27 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v25, v26, v27);
  __asm { FMOV            V0.2D, #3.0 }
  *v24 = _Q0;
  swift_retain_n(v23, 2);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v70, 0, 0, &_swiftEmptyArrayStorage, 1.0, 10.0, 0.0);
  v33 = v62;
  sub_10001BF60((uint64_t)v24, v62);
  v34 = v33 + *(int *)(sub_100003E70(&qword_10015DF60) + 36);
  v35 = v70[1];
  *(_OWORD *)v34 = v70[0];
  *(_OWORD *)(v34 + 16) = v35;
  *(_QWORD *)(v34 + 32) = v71;
  v36 = sub_100003E70(&qword_10015DF68);
  *(_QWORD *)(v33 + *(int *)(v36 + 52)) = v23;
  *(_WORD *)(v33 + *(int *)(v36 + 56)) = 256;
  v37 = static Alignment.center.getter(v36);
  v39 = v38;
  v40 = (uint64_t *)(v33 + *(int *)(sub_100003E70(&qword_10015DF70) + 36));
  *v40 = v37;
  v40[1] = v39;
  v41 = sub_10001BFA4((uint64_t)v24);
  v42 = static Alignment.center.getter(v41);
  v44 = v43;
  v45 = v63;
  sub_100007ADC(v33, v63, &qword_10015DF58);
  v46 = (uint64_t *)(v45 + *(int *)(v61 + 36));
  *v46 = v42;
  v46[1] = v44;
  v47 = sub_100003E70(&qword_10015DEE8);
  sub_100007ADC(v45, a1 + *(int *)(v47 + 36), &qword_10015DF40);
  v48 = v81[0];
  v49 = v81[2];
  *(_OWORD *)(a1 + 96) = v81[1];
  *(_OWORD *)(a1 + 112) = v49;
  v50 = v77;
  v51 = v79;
  v52 = v80;
  *(_OWORD *)(a1 + 32) = v78;
  *(_OWORD *)(a1 + 48) = v51;
  *(_QWORD *)(a1 + 128) = v82;
  *(_OWORD *)(a1 + 64) = v52;
  *(_OWORD *)(a1 + 80) = v48;
  *(_OWORD *)a1 = v76;
  *(_OWORD *)(a1 + 16) = v50;
  sub_10001BFE0((uint64_t)&v76);
  sub_100008194(v45, &qword_10015DF40);
  sub_100008194(v33, &qword_10015DF58);
  return sub_10001C030((uint64_t)&v76);
}

uint64_t sub_10001BC34@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  _OWORD v17[3];

  v3 = sub_100003E70(&qword_10015DEB8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v9 = *((_QWORD *)v1 + 1);
  v8 = *((_QWORD *)v1 + 2);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v4);
  *((_QWORD *)v6 + 1) = 0x4035000000000000;
  v6[16] = 0;
  v10 = sub_100003E70(&qword_10015DEC0);
  v11 = sub_10001B018(v7, v9, v8, (uint64_t)&v6[*(int *)(v10 + 44)]);
  v12 = static Alignment.center.getter(v11);
  _FrameLayout.init(width:height:alignment:)(v17, 0, 1, 0x405E000000000000, 0, v12, v13);
  sub_100007ADC((uint64_t)v6, a1, &qword_10015DEB8);
  v14 = (_OWORD *)(a1 + *(int *)(sub_100003E70(&qword_10015DEC8) + 36));
  v15 = v17[1];
  *v14 = v17[0];
  v14[1] = v15;
  v14[2] = v17[2];
  return sub_100008194((uint64_t)v6, &qword_10015DEB8);
}

uint64_t sub_10001BD44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10001BD68()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

unint64_t sub_10001BD88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DEF0;
  if (!qword_10015DEF0)
  {
    v1 = sub_1000034AC(&qword_10015DEE8);
    sub_10001BE0C();
    sub_100007D40(&qword_10015DF38, &qword_10015DF40, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DEF0);
  }
  return result;
}

unint64_t sub_10001BE0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DEF8;
  if (!qword_10015DEF8)
  {
    v1 = sub_1000034AC(&qword_10015DF00);
    sub_10001BE90();
    sub_100007D40(&qword_10015DF28, &qword_10015DF30, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DEF8);
  }
  return result;
}

unint64_t sub_10001BE90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DF08;
  if (!qword_10015DF08)
  {
    v1 = sub_1000034AC(&qword_10015DF10);
    sub_10001BEFC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DF08);
  }
  return result;
}

unint64_t sub_10001BEFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DF18;
  if (!qword_10015DF18)
  {
    v1 = sub_1000034AC(&qword_10015DF20);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DF18);
  }
  return result;
}

uint64_t sub_10001BF60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001BFA4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001BFE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 128);
  sub_10000C008(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return a1;
}

uint64_t sub_10001C030(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 128);
  sub_10000BFF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_10001C080@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10001C0A8(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tint.setter(v1);
}

unint64_t sub_10001C0D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DF90;
  if (!qword_10015DF90)
  {
    v1 = sub_1000034AC(&qword_10015DEC8);
    sub_100007D40(&qword_10015DF98, &qword_10015DEB8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DF90);
  }
  return result;
}

uint64_t *sub_10001C158(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    a1[1] = a2[1];
    v6 = *(int *)(a3 + 20);
    v7 = (uint64_t *)((char *)a1 + v6);
    v8 = (uint64_t *)((char *)a2 + v6);
    swift_retain(v5);
    v9 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
    {
      v10 = type metadata accessor for UserInterfaceSizeClass(0);
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
      {
        v12 = sub_100003E70(&qword_10015D4A0);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v11 + 16))(v7, v8, v10);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      }
      v14 = v7;
      v15 = v9;
      v16 = 1;
    }
    else
    {
      v13 = *v8;
      *v7 = *v8;
      swift_retain(v13);
      v14 = v7;
      v15 = v9;
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_10001C294(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_release(*a1);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v5 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for UserInterfaceSizeClass(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v4, v6);
  return result;
}

uint64_t *sub_10001C344(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = *(int *)(a3 + 20);
  v7 = (uint64_t *)((char *)a1 + v6);
  v8 = (uint64_t *)((char *)a2 + v6);
  swift_retain(v4);
  v9 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for UserInterfaceSizeClass(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
    {
      v12 = sub_100003E70(&qword_10015D4A0);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      v13 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v11 + 16))(v7, v8, v10);
      v13 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    }
  }
  else
  {
    v14 = *v8;
    *v7 = *v8;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v13);
  return a1;
}

uint64_t *sub_10001C454(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  a1[1] = a2[1];
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    sub_100008194((uint64_t)a1 + v8, &qword_10015D498);
    v11 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for UserInterfaceSizeClass(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        v14 = sub_100003E70(&qword_10015D4A0);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        v15 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 16))(v9, v10, v12);
        v15 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
    }
    else
    {
      v16 = *v10;
      *v9 = *v10;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v15);
  }
  return a1;
}

_OWORD *sub_10001C598(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for UserInterfaceSizeClass(0);
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
    {
      v10 = sub_100003E70(&qword_10015D4A0);
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v5, v6, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
    }
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_10001C6A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  a1[1] = a2[1];
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_100008194((uint64_t)a1 + v7, &qword_10015D498);
    v10 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for UserInterfaceSizeClass(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      {
        v13 = sub_100003E70(&qword_10015D4A0);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v8, v9, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
      }
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10001C7D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001C7E4);
}

uint64_t sub_10001C7E4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_100003E70(&qword_10015DFA0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v9);
  }
}

uint64_t sub_10001C870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001C87C);
}

char *sub_10001C87C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v7 = sub_100003E70(&qword_10015DFA0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for EventRootView(uint64_t a1)
{
  uint64_t result;

  result = qword_10015E000;
  if (!qword_10015E000)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EventRootView);
  return result;
}

void sub_10001C930(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10010B9E0;
  sub_10001C9A4(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_10001C9A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015E010)
  {
    v2 = sub_1000034AC(&qword_10015D4A0);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10015E010);
  }
}

uint64_t sub_10001C9FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011883C, 1);
}

uint64_t sub_10001CA0C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  int v25;
  uint64_t *v26;
  char v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int16 v77;
  unsigned __int8 v78;

  v67 = a1;
  v2 = type metadata accessor for TaskPriority(0);
  v65 = *(_QWORD *)(v2 - 8);
  v66 = v2;
  __chkstk_darwin(v2);
  v64 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UserInterfaceSizeClass(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v52 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_10015E040);
  __chkstk_darwin(v7);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003E70(&qword_10015D4A0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v51 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v51 - v17;
  v19 = sub_100003E70(&qword_10015E048);
  v62 = *(_QWORD *)(v19 - 8);
  v63 = v19;
  __chkstk_darwin(v19);
  v68 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100003E70(&qword_10015E050);
  __chkstk_darwin(v61);
  v55 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CF64(v1);
  v69 = v70;
  v59 = v72;
  v60 = v71;
  v57 = v74;
  v58 = v73;
  v56 = v75;
  v53 = v76;
  v22 = v77;
  v54 = v78;
  type metadata accessor for EventRootView(0);
  sub_10001DADC((uint64_t)v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v16, enum case for UserInterfaceSizeClass.compact(_:), v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
  v23 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_100007ADC((uint64_t)v18, (uint64_t)v9, &qword_10015D4A0);
  sub_100007ADC((uint64_t)v16, v23, &qword_10015D4A0);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v24((uint64_t)v9, 1, v4) == 1)
  {
    sub_100008194((uint64_t)v16, &qword_10015D4A0);
    sub_100008194((uint64_t)v18, &qword_10015D4A0);
    v25 = v24(v23, 1, v4);
    if (v25 == 1)
      v26 = &qword_10015D4A0;
    else
      v26 = &qword_10015E040;
    if (v25 == 1)
      v27 = -1;
    else
      v27 = 0;
  }
  else
  {
    sub_100007ADC((uint64_t)v9, (uint64_t)v13, &qword_10015D4A0);
    if (v24(v23, 1, v4) == 1)
    {
      sub_100008194((uint64_t)v16, &qword_10015D4A0);
      sub_100008194((uint64_t)v18, &qword_10015D4A0);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
      v27 = 0;
      v26 = &qword_10015E040;
    }
    else
    {
      v28 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v52, v23, v4);
      v29 = sub_100003B3C((unint64_t *)&qword_10015E0D0, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v27 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v28, v4, v29);
      v30 = *(void (**)(char *, uint64_t))(v5 + 8);
      v30(v28, v4);
      v26 = &qword_10015D4A0;
      sub_100008194((uint64_t)v16, &qword_10015D4A0);
      sub_100008194((uint64_t)v18, &qword_10015D4A0);
      v30(v13, v4);
    }
  }
  sub_100008194((uint64_t)v9, v26);
  v32 = v59;
  v31 = v60;
  v70 = v69;
  v71 = v60;
  v34 = v57;
  v33 = v58;
  v72 = v59;
  v73 = v58;
  v35 = v56;
  v74 = v57;
  v75 = v56;
  v36 = v53;
  v76 = v53;
  v77 = v22;
  v37 = v54;
  v78 = v54;
  v38 = sub_100003E70(&qword_10015E058);
  v39 = sub_10001DD0C();
  View.statusBar(hidden:)(v27 & 1, v38, v39);
  v40 = sub_10001DF7C(v69, v31, v32, v33, v34, v35, v36, v22, v37);
  v41 = v64;
  static TaskPriority.userInitiated.getter(v40);
  v42 = (uint64_t)v55;
  v43 = &v55[*(int *)(v61 + 36)];
  v44 = type metadata accessor for _TaskModifier(0);
  v46 = v65;
  v45 = v66;
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(&v43[*(int *)(v44 + 20)], v41, v66);
  *(_QWORD *)v43 = &unk_10015E0C8;
  *((_QWORD *)v43 + 1) = 0;
  v48 = v62;
  v47 = v63;
  v49 = v68;
  (*(void (**)(uint64_t, char *, uint64_t))(v62 + 16))(v42, v68, v63);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v41, v45);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v47);
  return sub_100007A98(v42, v67, &qword_10015E050);
}

uint64_t sub_10001CF64(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (*a1)
    __asm { BR              X11 }
  v1 = a1[1];
  v2 = type metadata accessor for RemoteViewConfiguration();
  v3 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
  result = EnvironmentObject.error()(0, v1, v2, v3);
  __break(1u);
  return result;
}

uint64_t sub_10001D6E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  v0[2] = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  v0[3] = v2;
  v0[4] = v3;
  return swift_task_switch(sub_10001D748, v2, v3);
}

uint64_t sub_10001D748()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_10015CF00 != -1)
    swift_once(&qword_10015CF00, sub_1000D6E7C);
  v1 = (_QWORD *)swift_task_alloc(dword_10016412C);
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_10001D7BC;
  return sub_1000D6A08();
}

uint64_t sub_10001D7BC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  return swift_task_switch(sub_10001D808, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10001D808()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001D83C@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D8A4(&qword_10015D600, (uint64_t (*)(_QWORD))&type metadata accessor for OpenURLAction, 0x414C52556E65704FLL, 0xED00006E6F697463, a1);
}

uint64_t sub_10001D870@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D8A4(&qword_10015D488, (uint64_t (*)(_QWORD))&type metadata accessor for DismissAction, 0x417373696D736944, 0xED00006E6F697463, a1);
}

uint64_t sub_10001D8A4@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003E70(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100007ADC(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = *v17;
    v21 = static os_log_type_t.fault.getter();
    v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      v27 = a4;
      v23 = swift_slowAlloc(12, -1);
      v28 = a5;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc(32, -1);
      v31 = v25;
      *(_DWORD *)v24 = 136315138;
      v30 = sub_1000C7684(v29, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v24 + 4, v24 + 12);
      _os_log_impl((void *)&_mh_execute_header, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v14, v20);
    swift_release(v20);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_10001DADC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v12;
  os_log_type_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003E70(&qword_10015D498);
  __chkstk_darwin(v8);
  v10 = (_QWORD *)((char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100007ADC(v2, (uint64_t)v10, &qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
    return sub_100007A98((uint64_t)v10, a1, &qword_10015D4A0);
  v12 = *v10;
  v13 = static os_log_type_t.fault.getter();
  v14 = static Log.runtimeIssuesLog.getter();
  v15 = v13;
  if (os_log_type_enabled(v14, v13))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v19[1] = a1;
    v18 = v17;
    v21 = v17;
    *(_DWORD *)v16 = 136315138;
    v20 = sub_1000C7684(0xD000000000000020, 0x8000000100115980, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v16 + 4, v16 + 12);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, v12);
  swift_release(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_10001DD0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E060;
  if (!qword_10015E060)
  {
    v1 = sub_1000034AC(&qword_10015E058);
    sub_10001DE84(&qword_10015E068, &qword_10015E070, (void (*)(void))sub_10001DD90, (void (*)(void))sub_10001DF38);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E060);
  }
  return result;
}

uint64_t sub_10001DD90()
{
  return sub_10001DE84(&qword_10015E078, &qword_10015E080, (void (*)(void))sub_10001DDB4, (void (*)(void))sub_10001DE60);
}

uint64_t sub_10001DDB4()
{
  return sub_10001DE84(&qword_10015E088, &qword_10015E090, (void (*)(void))sub_10001DDD8, (void (*)(void))sub_10001DE1C);
}

unint64_t sub_10001DDD8()
{
  unint64_t result;

  result = qword_10015E098;
  if (!qword_10015E098)
  {
    result = swift_getWitnessTable(&unk_10010AE84, &type metadata for EventContentView);
    atomic_store(result, (unint64_t *)&qword_10015E098);
  }
  return result;
}

unint64_t sub_10001DE1C()
{
  unint64_t result;

  result = qword_10015E0A0;
  if (!qword_10015E0A0)
  {
    result = swift_getWitnessTable(&unk_10010BCB8, &type metadata for ArtistEventContentView);
    atomic_store(result, (unint64_t *)&qword_10015E0A0);
  }
  return result;
}

uint64_t sub_10001DE60()
{
  return sub_10001DE84(&qword_10015E0A8, &qword_10015E0B0, (void (*)(void))sub_10001DEF4, (void (*)(void))sub_10001DF38);
}

uint64_t sub_10001DE84(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_1000034AC(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001DEF4()
{
  unint64_t result;

  result = qword_10015E0B8;
  if (!qword_10015E0B8)
  {
    result = swift_getWitnessTable(&unk_10010F3C8, &type metadata for VenueEventContentView);
    atomic_store(result, (unint64_t *)&qword_10015E0B8);
  }
  return result;
}

unint64_t sub_10001DF38()
{
  unint64_t result;

  result = qword_10015E0C0;
  if (!qword_10015E0C0)
  {
    result = swift_getWitnessTable(&unk_10010A970, &type metadata for PromotionalAssetsContentView);
    atomic_store(result, (unint64_t *)&qword_10015E0C0);
  }
  return result;
}

uint64_t sub_10001DF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 a8, char a9)
{
  if ((a9 & 1) == 0)
    return sub_10001DFC0(a1, a2, a3, a4, a5, a6, a7, a8, HIBYTE(a8) & 1);
  swift_release(a1);
  return swift_release(a2);
}

uint64_t sub_10001DFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  if ((a9 & 1) != 0)
    return sub_10001E024(a1, a2, a3, a4, a5, a6, a7, a8 & 1);
  else
    return sub_10001DFD8(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10001DFD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_bridgeObjectRelease(a2);
  sub_10000E138(a3, a4);
  return swift_release(a6);
}

uint64_t sub_10001E024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v9;

  if ((a8 & 1) != 0)
  {
    swift_release(a1);
    v9 = a2;
  }
  else
  {
    v9 = a6;
    swift_bridgeObjectRelease(a2);
    sub_10000E138(a3, a4);
  }
  return swift_release(v9);
}

uint64_t sub_10001E08C@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D8A4(&qword_10015D490, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_10001E0BC(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __n128 v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_1000C7684(1819242306, 0xE400000000000000, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, a1);
  sub_10001E324(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

unint64_t sub_10001E278()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10015E0D8;
  if (!qword_10015E0D8)
  {
    v1 = sub_1000034AC(&qword_10015E050);
    v2[0] = sub_1000034AC(&qword_10015E058);
    v2[1] = sub_10001DD0C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.statusBar(hidden:)>>, 1);
    sub_100003B3C(&qword_10015D458, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E0D8);
  }
  return result;
}

uint64_t sub_10001E324(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

ValueMetadata *type metadata accessor for LightGradientBackground()
{
  return &type metadata for LightGradientBackground;
}

uint64_t sub_10001E340(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118880, 1);
}

double sub_10001E350@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double result;
  __int128 v13;
  _OWORD v14[2];
  uint64_t v15;

  v2 = sub_100003E70(&qword_10015E0E0);
  v3 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10010A6C0;
  if (qword_10015CE50 != -1)
    swift_once(&qword_10015CE50, sub_1000382A0);
  v4 = qword_10016F648;
  *(_QWORD *)(v3 + 32) = qword_10016F648;
  v5 = swift_retain(v4);
  *(_QWORD *)(v3 + 40) = static Color.clear.getter(v5);
  *(_QWORD *)&v14[0] = v3;
  specialized Array._endMutation()();
  v6 = Gradient.init(colors:)(v3);
  v7 = static UnitPoint.top.getter();
  v9 = v8;
  v10 = static UnitPoint.bottom.getter();
  LinearGradient.init(gradient:startPoint:endPoint:)(v14, v6, v7, v9, v10, v11);
  result = *(double *)v14;
  v13 = v14[1];
  *(_OWORD *)a1 = v14[0];
  *(_OWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 32) = v15;
  return result;
}

unint64_t sub_10001E444()
{
  unint64_t result;

  result = qword_10015E0E8[0];
  if (!qword_10015E0E8[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinearGradient, &type metadata for LinearGradient);
    atomic_store(result, qword_10015E0E8);
  }
  return result;
}

uint64_t sub_10001E488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  Bindable.wrappedValue.getter(&v7, v5);
  return v7;
}

uint64_t sub_10001E4C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v3 = type metadata accessor for Optional(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v8 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v8 - v5, a1, v3);
  State.init(wrappedValue:)(v6, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

uint64_t sub_10001E560(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Optional(255, *(_QWORD *)(a1 + 16));
  v4 = type metadata accessor for State(0, v3);
  return a2(v4);
}

uint64_t sub_10001E5B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t TupleTypeMetadata2;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t TupleTypeMetadata3;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98[16];
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  _QWORD *v114;

  v97 = a2;
  v3 = sub_1000034AC(&qword_10015E170);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = a1;
  v96 = a1;
  v6 = type metadata accessor for Array(255, v4);
  v7 = type metadata accessor for ScrollAsset(255);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
  v9 = *(_QWORD *)(v5 + 24);
  v10 = *(_QWORD **)(v9 + 8);
  v110 = v6;
  v111 = v4;
  v112 = v7;
  v113 = (void *)WitnessTable;
  v114 = v10;
  v11 = type metadata accessor for ForEach(255, &v110);
  v109 = sub_100003B3C(&qword_10015E178, type metadata accessor for ScrollAsset, (uint64_t)&unk_1001133C0);
  v12 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v11);
  v13 = type metadata accessor for HStack(255, v11, v12);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v13);
  v110 = v13;
  v111 = v14;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v110, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v110 = v13;
  v111 = v14;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v110, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v17 = type metadata accessor for ScrollView(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v18 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v17);
  v110 = v17;
  v111 = v18;
  v19 = swift_getOpaqueTypeMetadata2(255, &v110, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v20 = type metadata accessor for ViewAlignedScrollTargetBehavior(255);
  v110 = v17;
  v111 = v18;
  v21 = swift_getOpaqueTypeConformance2(&v110, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v110 = v19;
  v111 = v20;
  v112 = v21;
  v113 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v22 = swift_getOpaqueTypeMetadata2(255, &v110, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v110 = v19;
  v111 = v20;
  v112 = v21;
  v113 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v23 = swift_getOpaqueTypeConformance2(&v110, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v110 = v22;
  v111 = v4;
  v112 = v23;
  v113 = v10;
  v24 = swift_getOpaqueTypeMetadata2(255, &v110, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v110 = v22;
  v111 = v4;
  v112 = v23;
  v113 = v10;
  v25 = swift_getOpaqueTypeConformance2(&v110, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v110 = v24;
  v111 = v25;
  v26 = swift_getOpaqueTypeMetadata2(255, &v110, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v27 = type metadata accessor for ModifiedContent(255, v26, &type metadata for _FrameLayout);
  v28 = type metadata accessor for Optional(255, v4);
  v110 = v24;
  v111 = v25;
  v107 = swift_getOpaqueTypeConformance2(&v110, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v108 = &protocol witness table for _FrameLayout;
  v29 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v27);
  v106 = v10[1];
  v30 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v28);
  v110 = v27;
  v111 = v28;
  v112 = v29;
  v113 = (void *)v30;
  v31 = swift_getOpaqueTypeMetadata2(255, &v110, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v32 = sub_1000034AC(&qword_10015E180);
  v33 = type metadata accessor for ModifiedContent(255, v31, v32);
  v34 = sub_1000034AC(&qword_10015E188);
  v35 = type metadata accessor for ModifiedContent(255, v33, v34);
  v36 = type metadata accessor for ModifiedContent(255, v35, &type metadata for _PaddingLayout);
  v38 = type metadata accessor for PageControl(255, v4, v106, v37);
  v39 = type metadata accessor for Optional(255, v38);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v36, v39, 0, 0);
  v41 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v42 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v41);
  v43 = type metadata accessor for VStack(255, v41, v42);
  v44 = type metadata accessor for ModifiedContent(255, v43, &type metadata for _AppearanceActionModifier);
  v46 = type metadata accessor for SelectAssetButton(255, v4, v9, v45);
  v47 = type metadata accessor for Optional(255, v46);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v3, v44, v47, 0, 0);
  v49 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v50 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v49);
  v51 = type metadata accessor for VStack(0, v49, v50);
  v90 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v53 = (char *)&v90 - v52;
  v54 = type metadata accessor for ModifiedContent(0, v51, &type metadata for _PaddingLayout);
  v93 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v56 = (char *)&v90 - v55;
  v57 = sub_1000034AC((uint64_t *)&unk_10015DB10);
  v58 = type metadata accessor for ModifiedContent(0, v54, v57);
  v94 = *(_QWORD *)(v58 - 8);
  v59 = __chkstk_darwin(v58);
  v91 = (char *)&v90 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __chkstk_darwin(v59);
  v92 = (uint64_t)&v90 - v62;
  v99 = v4;
  v100 = v9;
  v101 = v95;
  v63 = static HorizontalAlignment.center.getter(v61);
  v64 = VStack.init(alignment:spacing:content:)(v63, 0, 0, sub_100021F74, v98, v49, v50);
  v65 = static Edge.Set.top.getter(v64);
  v66 = v96;
  v70 = sub_10001E488(v96, v67, v68, v69);
  LODWORD(v9) = *(unsigned __int8 *)(v70 + 136);
  swift_release(v70);
  if ((_DWORD)v9)
    v71 = 0x4042000000000000;
  else
    v71 = 0;
  v72 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v51);
  View.padding(_:_:)(v65, v71, 0, v51, v72);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v53, v51);
  v76 = sub_10001E488(v66, v73, v74, v75);
  v77 = *(_BYTE *)(v76 + 136);
  v78 = swift_release(v76);
  LOBYTE(v110) = (v77 & 1) == 0;
  v79 = static Alignment.center.getter(v78);
  v81 = v80;
  v82 = sub_100003E70(&qword_10015E190);
  v104 = v72;
  v105 = &protocol witness table for _PaddingLayout;
  v83 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v54);
  v84 = sub_100021FE8(&qword_10015E198, &qword_10015E190, (void (*)(void))sub_100021F80);
  v85 = (uint64_t)v91;
  View.background<A>(_:alignment:)(&v110, v79, v81, v54, v82, v83, v84);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v56, v54);
  v86 = sub_100007D40(&qword_10015DB08, (uint64_t *)&unk_10015DB10, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v102 = v83;
  v103 = v86;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v58);
  v87 = v92;
  sub_1000F257C(v85, v58, v92);
  v88 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
  v88(v85, v58);
  sub_1000E3B88(v87, v58, v97);
  return ((uint64_t (*)(uint64_t, uint64_t))v88)(v87, v58);
}

uint64_t sub_10001ECFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *WitnessTable;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t TupleTypeMetadata2;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t);
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t);
  uint64_t v114;
  void (*v115)(char *, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD v156[3];
  uint64_t v157[5];
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t *v166;

  v151 = a1;
  v147 = a5;
  v7 = type metadata accessor for SelectAssetButton(0, a2, a3, a4);
  v142 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v124 = (uint64_t)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v125 = (uint64_t)&v120 - v10;
  v11 = type metadata accessor for Optional(0, a2);
  v120 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v139 = (char *)&v120 - v13;
  v140 = *(_QWORD *)(a2 - 8);
  v14 = __chkstk_darwin(v12);
  v122 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v121 = (char *)&v120 - v16;
  v146 = v7;
  v145 = type metadata accessor for Optional(0, v7);
  v141 = *(_QWORD *)(v145 - 8);
  v17 = __chkstk_darwin(v145);
  v144 = (uint64_t)&v120 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v143 = (uint64_t)&v120 - v19;
  v21 = type metadata accessor for WatchFacesView(0, a2, a3, v20);
  v137 = *(_QWORD *)(v21 - 8);
  v135 = *(_QWORD *)(v137 + 64);
  __chkstk_darwin(v21);
  v136 = (char *)&v120 - v22;
  v23 = type metadata accessor for Array(255, a2);
  v24 = type metadata accessor for ScrollAsset(255);
  WitnessTable = (uint64_t *)swift_getWitnessTable(&protocol conformance descriptor for [A], v23);
  v138 = a3;
  v26 = *(uint64_t **)(a3 + 8);
  v162 = v23;
  v163 = a2;
  v164 = v24;
  v165 = WitnessTable;
  v166 = v26;
  v27 = type metadata accessor for ForEach(255, &v162);
  v161 = sub_100003B3C(&qword_10015E178, type metadata accessor for ScrollAsset, (uint64_t)&unk_1001133C0);
  v28 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v27);
  v29 = type metadata accessor for HStack(255, v27, v28);
  v30 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v29);
  v162 = v29;
  v163 = v30;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v162, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v162 = v29;
  v163 = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v162, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v33 = type metadata accessor for ScrollView(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v33);
  v162 = v33;
  v163 = v34;
  v35 = swift_getOpaqueTypeMetadata2(255, &v162, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v36 = type metadata accessor for ViewAlignedScrollTargetBehavior(255);
  v162 = v33;
  v163 = v34;
  v37 = swift_getOpaqueTypeConformance2(&v162, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v162 = v35;
  v163 = v36;
  v164 = v37;
  v165 = (uint64_t *)&protocol witness table for ViewAlignedScrollTargetBehavior;
  v38 = swift_getOpaqueTypeMetadata2(255, &v162, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v162 = v35;
  v163 = v36;
  v164 = v37;
  v165 = (uint64_t *)&protocol witness table for ViewAlignedScrollTargetBehavior;
  v39 = swift_getOpaqueTypeConformance2(&v162, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v162 = v38;
  v163 = a2;
  v164 = v39;
  v165 = v26;
  v40 = swift_getOpaqueTypeMetadata2(255, &v162, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v162 = v38;
  v163 = a2;
  v164 = v39;
  v165 = v26;
  v41 = swift_getOpaqueTypeConformance2(&v162, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v162 = v40;
  v163 = v41;
  v42 = swift_getOpaqueTypeMetadata2(255, &v162, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v43 = type metadata accessor for ModifiedContent(255, v42, &type metadata for _FrameLayout);
  v162 = v40;
  v163 = v41;
  v159 = swift_getOpaqueTypeConformance2(&v162, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v160 = &protocol witness table for _FrameLayout;
  v44 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v43);
  v158 = v26[1];
  v45 = v158;
  v46 = (uint64_t *)swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v11);
  v162 = v43;
  v163 = v11;
  v123 = v11;
  v164 = v44;
  v165 = v46;
  v47 = swift_getOpaqueTypeMetadata2(255, &v162, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v48 = sub_1000034AC(&qword_10015E180);
  v49 = type metadata accessor for ModifiedContent(255, v47, v48);
  v50 = sub_1000034AC(&qword_10015E188);
  v51 = type metadata accessor for ModifiedContent(255, v49, v50);
  v52 = type metadata accessor for ModifiedContent(255, v51, &type metadata for _PaddingLayout);
  v53 = a2;
  v55 = type metadata accessor for PageControl(255, a2, v45, v54);
  v56 = type metadata accessor for Optional(255, v55);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v52, v56, 0, 0);
  v58 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v126 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v58);
  v59 = type metadata accessor for VStack(0, v58, v126);
  v128 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v61 = (char *)&v120 - v60;
  v149 = type metadata accessor for ModifiedContent(0, v59, &type metadata for _AppearanceActionModifier);
  v133 = *(_QWORD *)(v149 - 8);
  v62 = __chkstk_darwin(v149);
  v134 = (char *)&v120 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __chkstk_darwin(v62);
  v127 = (char *)&v120 - v65;
  __chkstk_darwin(v64);
  v148 = (uint64_t)&v120 - v66;
  v150 = v21;
  v70 = sub_10001E488(v21, v67, v68, v69);
  LODWORD(v52) = *(unsigned __int8 *)(v70 + 136);
  v71 = swift_release(v70);
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  if ((_DWORD)v52 == 1)
  {
    v79 = sub_10001E488(v150, v72, v73, v74);
    v75 = *(_QWORD *)(v79 + 16);
    v76 = *(_QWORD *)(v79 + 24);
    v77 = *(unsigned __int8 *)(v79 + 32);
    v78 = *(uint64_t **)(v79 + 40);
    swift_bridgeObjectRetain(v76);
    swift_bridgeObjectRetain(v78);
    v71 = swift_release(v79);
  }
  v129 = v78;
  v130 = v77;
  v131 = v76;
  v132 = v75;
  v80 = __chkstk_darwin(v71);
  v81 = v138;
  *(&v120 - 4) = v53;
  *(&v120 - 3) = v81;
  v82 = v151;
  *(&v120 - 2) = v151;
  v83 = static HorizontalAlignment.center.getter(v80);
  VStack.init(alignment:spacing:content:)(v83, 0, 0, sub_100021FC4, &v120 - 6, v58, v126);
  v84 = v137;
  v85 = v136;
  v86 = v150;
  (*(void (**)(char *, uint64_t, uint64_t))(v137 + 16))(v136, v82, v150);
  v87 = *(unsigned __int8 *)(v84 + 80);
  v88 = (v87 + 32) & ~v87;
  v89 = swift_allocObject(&unk_10014D5A0, v88 + v135, v87 | 7);
  *(_QWORD *)(v89 + 16) = v53;
  *(_QWORD *)(v89 + 24) = v81;
  v90 = *(void (**)(uint64_t, char *, uint64_t))(v84 + 32);
  v91 = v53;
  v90(v89 + v88, v85, v86);
  v92 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v59);
  v93 = (uint64_t)v127;
  View.onAppear(perform:)(sub_100021FD4, v89, v59, v92);
  swift_release(v89);
  (*(void (**)(char *, uint64_t))(v128 + 8))(v61, v59);
  v157[3] = v92;
  v157[4] = (uint64_t)&protocol witness table for _AppearanceActionModifier;
  v94 = v149;
  v138 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v149);
  sub_1000F257C(v93, v94, v148);
  v95 = v133;
  v96 = *(void (**)(uint64_t, uint64_t))(v133 + 8);
  v96(v93, v94);
  v97 = v139;
  sub_10001E560(v86, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  v98 = v140;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v97, 1, v91) == 1)
  {
    (*(void (**)(char *, uint64_t))(v120 + 8))(v97, v123);
    v99 = v144;
    v100 = v146;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v142 + 56))(v144, 1, 1, v146);
    swift_getWitnessTable(&unk_10010BBE8, v100);
  }
  else
  {
    v101 = v121;
    (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v121, v97, v91);
    v102 = (uint64_t)v122;
    (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v122, v101, v91);
    v106 = (uint64_t *)sub_10001E488(v150, v103, v104, v105);
    v107 = v124;
    sub_1000213D0(v102, v106, v124);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v101, v91);
    v100 = v146;
    swift_getWitnessTable(&unk_10010BBE8, v146);
    v108 = v125;
    sub_1000F257C(v107, v100, v125);
    v109 = v142;
    v110 = *(void (**)(uint64_t, uint64_t))(v142 + 8);
    v110(v107, v100);
    v99 = v144;
    sub_1000E3B88(v108, v100, v144);
    v110(v108, v100);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v109 + 56))(v99, 0, 1, v100);
  }
  v111 = v143;
  sub_1000E472C(v99, v100, v143);
  v112 = v141;
  v113 = *(void (**)(uint64_t, uint64_t))(v141 + 8);
  v114 = v145;
  v113(v99, v145);
  v162 = v132;
  v163 = v131;
  v164 = v130;
  v165 = v129;
  v157[0] = (uint64_t)&v162;
  v115 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 16);
  v116 = (uint64_t)v134;
  v117 = v148;
  v118 = v149;
  v115(v134, v148, v149);
  v157[1] = v116;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 16))(v99, v111, v114);
  v157[2] = v99;
  v156[0] = sub_100003E70(&qword_10015E170);
  v156[1] = v118;
  v156[2] = v114;
  v153 = sub_100021FE8(&qword_10015E1A8, &qword_10015E170, (void (*)(void))sub_10002204C);
  v154 = v138;
  v152 = swift_getWitnessTable(&unk_10010BBE8, v100);
  v155 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v114);
  sub_1000E4768(v157, 3uLL, (uint64_t)v156);
  v113(v111, v114);
  v96(v117, v118);
  v113(v99, v114);
  v96(v116, v118);
  return sub_100022090(v162, v163, v164, (uint64_t)v165);
}

uint64_t sub_10001F8C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t WitnessTable;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BOOL8 v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(_QWORD, _QWORD);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void (*v188)(_QWORD *, uint64_t);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(uint64_t, uint64_t);
  uint64_t v193;
  void (*v194)(char *, uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t (*v197)(uint64_t, uint64_t);
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t OpaqueTypeConformance2;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  void (*v268)(_QWORD, _QWORD);
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[8];
  _QWORD v272[12];
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  _QWORD *v277;

  v267 = a1;
  v259 = a5;
  v6 = *(_QWORD **)(a3 + 8);
  v268 = (void (*)(_QWORD, _QWORD))a3;
  v262 = v6[1];
  v263 = v6;
  v7 = v6;
  v9 = type metadata accessor for PageControl(0, a2, v262, a4);
  v253 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v199 = (_QWORD **)((char *)&v199 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v200 = (uint64_t)&v199 - v12;
  v256 = v13;
  v258 = type metadata accessor for Optional(0, v13);
  v254 = *(_QWORD *)(v258 - 8);
  v14 = __chkstk_darwin(v258);
  v257 = (uint64_t)&v199 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v255 = (uint64_t)&v199 - v16;
  v266 = type metadata accessor for WatchFacesView(0, a2, a3, v17);
  v18 = *(_QWORD *)(*(_QWORD *)(v266 - 8) + 64);
  v250 = *(_QWORD *)(v266 - 8);
  v251 = v18;
  __chkstk_darwin(v266);
  v249 = (char *)&v199 - v19;
  v20 = type metadata accessor for Optional(0, a2);
  v21 = *(_QWORD *)(v20 - 8);
  v264 = v20;
  v252 = v21;
  __chkstk_darwin(v20);
  v248 = (char *)&v199 - v22;
  v24 = type metadata accessor for Binding(0, v23);
  v245 = *(_QWORD *)(v24 - 8);
  v246 = v24;
  __chkstk_darwin(v24);
  v261 = (char *)&v199 - v25;
  v26 = type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior(0);
  __chkstk_darwin(v26);
  v243 = (char *)&v199 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for ViewAlignedScrollTargetBehavior(0);
  v244 = *(_QWORD *)(v28 - 8);
  v29 = v28;
  __chkstk_darwin(v28);
  v240 = (char *)&v199 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for ContentMarginPlacement(0);
  v241 = *(_QWORD *)(v31 - 8);
  v242 = v31;
  __chkstk_darwin(v31);
  v223 = (char *)&v199 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for Array(255, a2);
  v34 = type metadata accessor for ScrollAsset(255);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v33);
  v273 = v33;
  v274 = a2;
  v275 = v34;
  v276 = (void *)WitnessTable;
  v277 = v7;
  v36 = type metadata accessor for ForEach(255, &v273);
  v272[11] = sub_100003B3C(&qword_10015E178, type metadata accessor for ScrollAsset, (uint64_t)&unk_1001133C0);
  v37 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v36);
  v38 = type metadata accessor for HStack(255, v36, v37);
  v39 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v38);
  v273 = v38;
  v274 = v39;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v273, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v216 = OpaqueTypeMetadata2;
  v273 = v38;
  v274 = v39;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v273, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v41 = type metadata accessor for ScrollView(0, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v226 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v212 = (char *)&v199 - v42;
  v43 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v41);
  v273 = v41;
  v274 = v43;
  v44 = swift_getOpaqueTypeMetadata2(0, &v273, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v228 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v213 = (char *)&v199 - v45;
  v273 = v41;
  v274 = v43;
  v46 = swift_getOpaqueTypeConformance2(&v273, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v273 = v44;
  v274 = v29;
  v209 = v29;
  v210 = v44;
  v47 = v29;
  v275 = v46;
  v276 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v48 = v46;
  v211 = v46;
  v49 = swift_getOpaqueTypeMetadata2(0, &v273, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v225 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v208 = (char *)&v199 - v50;
  v273 = v44;
  v274 = v47;
  v275 = v48;
  v276 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v51 = swift_getOpaqueTypeConformance2(&v273, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v205 = v49;
  v206 = v51;
  v273 = v49;
  v274 = a2;
  v52 = v51;
  v53 = v263;
  v275 = v51;
  v276 = v263;
  v54 = swift_getOpaqueTypeMetadata2(0, &v273, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v222 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v204 = (char *)&v199 - v55;
  v273 = v49;
  v274 = a2;
  v275 = v52;
  v276 = v53;
  v56 = swift_getOpaqueTypeConformance2(&v273, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v273 = v54;
  v274 = v56;
  v57 = v54;
  v202 = v54;
  v203 = v56;
  v58 = v56;
  v59 = swift_getOpaqueTypeMetadata2(0, &v273, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v224 = *(_QWORD *)(v59 - 8);
  v218 = v59;
  __chkstk_darwin(v59);
  v207 = (char *)&v199 - v60;
  v62 = type metadata accessor for ModifiedContent(0, v61, &type metadata for _FrameLayout);
  v233 = *(_QWORD *)(v62 - 8);
  v221 = v62;
  __chkstk_darwin(v62);
  v215 = (char *)&v199 - v63;
  v273 = v57;
  v274 = v58;
  v214 = swift_getOpaqueTypeConformance2(&v273, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v272[9] = v214;
  v272[10] = &protocol witness table for _FrameLayout;
  v64 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v62);
  v220 = v64;
  v272[8] = v262;
  v65 = v264;
  v219 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v264);
  v273 = v62;
  v274 = v65;
  v275 = v64;
  v276 = (void *)v219;
  v66 = swift_getOpaqueTypeMetadata2(0, &v273, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v232 = *(_QWORD *)(v66 - 8);
  v229 = v66;
  __chkstk_darwin(v66);
  v265 = (char *)&v199 - v67;
  v68 = sub_1000034AC(&qword_10015E180);
  v69 = type metadata accessor for ModifiedContent(0, v66, v68);
  v237 = *(_QWORD *)(v69 - 8);
  v230 = v69;
  __chkstk_darwin(v69);
  v227 = (char *)&v199 - v70;
  v71 = sub_1000034AC(&qword_10015E188);
  v72 = type metadata accessor for ModifiedContent(0, v69, v71);
  v239 = *(_QWORD *)(v72 - 8);
  v235 = v72;
  __chkstk_darwin(v72);
  v231 = (char *)&v199 - v73;
  v201 = type metadata accessor for ModifiedContent(0, v74, &type metadata for _PaddingLayout);
  v238 = *(_QWORD *)(v201 - 8);
  v75 = __chkstk_darwin(v201);
  v247 = (char *)&v199 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = __chkstk_darwin(v75);
  v234 = (char *)&v199 - v78;
  v79 = __chkstk_darwin(v77);
  v236 = (uint64_t)&v199 - v80;
  v81 = static Axis.Set.horizontal.getter(v79);
  v82 = a2;
  v271[2] = a2;
  v271[3] = v268;
  v271[4] = v267;
  v83 = v212;
  v84 = ScrollView.init(_:showsIndicators:content:)(v81, 0, sub_100022D5C, v271, v216, OpaqueTypeConformance2);
  v85 = static Edge.Set.horizontal.getter(v84);
  v86 = v266;
  v90 = sub_10001E488(v266, v87, v88, v89);
  v91 = sub_100037244();
  swift_release(v90);
  v92 = v223;
  j___s7SwiftUI22ContentMarginPlacementV9automaticACvgZ(v41, v43);
  v93 = v213;
  v94 = v85;
  v95 = v261;
  View.contentMargins(_:_:for:)(v94, *(_QWORD *)&v91, 0, v92, v41, v43);
  (*(void (**)(char *, uint64_t))(v241 + 8))(v92, v242);
  v96 = (*(uint64_t (**)(char *, uint64_t))(v226 + 8))(v83, v41);
  v97 = v243;
  static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter(v96);
  v98 = v240;
  ViewAlignedScrollTargetBehavior.init(limitBehavior:)(v97);
  v99 = v208;
  v100 = v209;
  v101 = v210;
  View.scrollTargetBehavior<A>(_:)(v98, v210, v209, v211, &protocol witness table for ViewAlignedScrollTargetBehavior);
  (*(void (**)(char *, uint64_t))(v244 + 8))(v98, v100);
  (*(void (**)(char *, uint64_t))(v228 + 8))(v93, v101);
  v102 = v267;
  sub_10001E560(v86, (uint64_t (*)(uint64_t))&State.projectedValue.getter);
  v103 = v204;
  v104 = v205;
  View.scrollPosition<A>(id:anchor:)(v95, 0, 0, 1, v205, v82, v206, v263);
  (*(void (**)(char *, uint64_t))(v245 + 8))(v95, v246);
  (*(void (**)(char *, uint64_t))(v225 + 8))(v99, v104);
  v108 = sub_10001E488(v86, v105, v106, v107);
  LOBYTE(v95) = sub_100037280();
  swift_release(v108);
  v109 = (v95 & 1) == 0;
  v110 = v207;
  v111 = v202;
  View.scrollDisabled(_:)(v109, v202, v203);
  (*(void (**)(char *, uint64_t))(v222 + 8))(v103, v111);
  v115 = sub_10001E488(v86, v112, v113, v114);
  v116 = sub_1000372A8();
  v117 = swift_release(v115);
  v118 = static Alignment.center.getter(v117);
  v119 = v215;
  v120 = v218;
  View.frame(width:height:alignment:)(0, 1, *(_QWORD *)&v116, 0, v118, v121, v218, v214);
  (*(void (**)(char *, uint64_t))(v224 + 8))(v110, v120);
  v122 = v248;
  v123 = v86;
  sub_10001E560(v86, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  v124 = v249;
  v125 = v250;
  v126 = v102;
  v127 = v123;
  (*(void (**)(char *, uint64_t, uint64_t))(v250 + 16))(v249, v126, v123);
  v128 = *(unsigned __int8 *)(v125 + 80);
  v129 = (v128 + 32) & ~v128;
  v130 = swift_allocObject(&unk_10014D5C8, v129 + v251, v128 | 7);
  v260 = v82;
  v131 = v268;
  *(_QWORD *)(v130 + 16) = v82;
  *(_QWORD *)(v130 + 24) = v131;
  (*(void (**)(uint64_t, char *, uint64_t))(v125 + 32))(v130 + v129, v124, v127);
  v133 = v220;
  v132 = v221;
  v134 = v264;
  v135 = (void *)v219;
  View.onChange<A>(of:initial:_:)(v122, 0, sub_100022D6C, v130, v221, v264, v220, v219);
  swift_release(v130);
  (*(void (**)(char *, uint64_t))(v252 + 8))(v122, v134);
  v136 = v119;
  v137 = v132;
  v138 = (*(uint64_t (**)(char *, uint64_t))(v233 + 8))(v136, v132);
  v139 = static Alignment.center.getter(v138);
  v141 = v140;
  v142 = v260;
  v270[2] = v260;
  v270[3] = v131;
  v143 = v267;
  v270[4] = v267;
  v144 = sub_100003E70(&qword_10015E1B8);
  v273 = v137;
  v274 = v134;
  v275 = v133;
  v276 = v135;
  v145 = swift_getOpaqueTypeConformance2(&v273, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v146 = sub_100022D8C();
  v147 = v227;
  v148 = v139;
  v149 = v141;
  v150 = v229;
  v151 = v265;
  View.overlay<A>(alignment:content:)(v148, v149, sub_100022D80, v270, v229, v144, v145, v146);
  v152 = (*(uint64_t (**)(char *, uint64_t))(v232 + 8))(v151, v150);
  v153 = static Alignment.center.getter(v152);
  v155 = v154;
  v269[2] = v142;
  v269[3] = v268;
  v269[4] = v143;
  v156 = sub_100003E70(&qword_10015E1D8);
  v157 = sub_100007D40(&qword_10015E1E0, &qword_10015E180, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  v272[6] = v145;
  v272[7] = v157;
  v158 = v230;
  v159 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v230);
  v160 = sub_100007D40(&qword_10015E1E8, &qword_10015E1D8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v161 = v231;
  View.background<A>(alignment:content:)(v153, v155, sub_100022E80, v269, v158, v156, v159, v160);
  v162 = (*(uint64_t (**)(char *, uint64_t))(v237 + 8))(v147, v158);
  v163 = static Edge.Set.bottom.getter(v162);
  v164 = sub_100007D40(qword_10015E1F0, &qword_10015E188, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v272[4] = v159;
  v272[5] = v164;
  v165 = v235;
  v166 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v235);
  v167 = (uint64_t)v234;
  View.padding(_:_:)(v163, 0x403E000000000000, 0, v165, v166);
  (*(void (**)(char *, uint64_t))(v239 + 8))(v161, v165);
  v272[2] = v166;
  v272[3] = &protocol witness table for _PaddingLayout;
  v168 = v238;
  v169 = v201;
  v170 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v201);
  v171 = v236;
  v265 = (char *)v170;
  sub_1000F257C(v167, v169, v236);
  v172 = v169;
  v268 = *(void (**)(_QWORD, _QWORD))(v168 + 8);
  v268(v167, v169);
  v173 = v266;
  v177 = sub_10001E488(v266, v174, v175, v176);
  LOBYTE(v169) = sub_100037280();
  swift_release(v177);
  if ((v169 & 1) != 0)
  {
    v181 = sub_10001E488(v173, v178, v179, v180);
    v182 = *(_QWORD *)(v181 + 112);
    swift_bridgeObjectRetain(v182);
    swift_release(v181);
    v183 = (uint64_t)v261;
    sub_10001E560(v173, (uint64_t (*)(uint64_t))&State.projectedValue.getter);
    v184 = v199;
    sub_1000AC494(v182, v183, v260, v262, v199);
    v185 = v256;
    swift_getWitnessTable(&unk_100111580, v256);
    v186 = v200;
    sub_1000F257C((uint64_t)v184, v185, v200);
    v187 = v253;
    v188 = *(void (**)(_QWORD *, uint64_t))(v253 + 8);
    v188(v184, v185);
    v189 = v257;
    sub_1000E3B88(v186, v185, v257);
    v188((_QWORD *)v186, v185);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v187 + 56))(v189, 0, 1, v185);
  }
  else
  {
    v185 = v256;
    v189 = v257;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v253 + 56))(v257, 1, 1, v256);
    swift_getWitnessTable(&unk_100111580, v185);
  }
  v190 = v255;
  sub_1000E472C(v189, v185, v255);
  v191 = v254;
  v192 = *(void (**)(uint64_t, uint64_t))(v254 + 8);
  v193 = v258;
  v192(v189, v258);
  v194 = *(void (**)(char *, uint64_t, uint64_t))(v168 + 16);
  v195 = (uint64_t)v247;
  v194(v247, v171, v172);
  v273 = v195;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v191 + 16))(v189, v190, v193);
  v274 = v189;
  v272[0] = v172;
  v272[1] = v193;
  v271[6] = v265;
  v271[5] = swift_getWitnessTable(&unk_100111580, v185);
  v271[7] = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v193);
  sub_1000E4768(&v273, 2uLL, (uint64_t)v272);
  v192(v190, v193);
  v196 = v171;
  v197 = (uint64_t (*)(uint64_t, uint64_t))v268;
  v268(v196, v172);
  v192(v189, v193);
  return v197(v195, v172);
}

uint64_t sub_100020880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v28 = a3;
  v29 = a1;
  v30 = a4;
  v6 = type metadata accessor for Array(255, a2);
  v7 = type metadata accessor for ScrollAsset(255);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
  v9 = *(_QWORD *)(a3 + 8);
  v36 = v6;
  v37 = a2;
  v38 = v7;
  v39 = WitnessTable;
  v40 = v9;
  v10 = type metadata accessor for ForEach(255, &v36);
  v35 = sub_100003B3C(&qword_10015E178, type metadata accessor for ScrollAsset, (uint64_t)&unk_1001133C0);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v10);
  v12 = type metadata accessor for HStack(0, v10, v11);
  v27 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - v13;
  v15 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v12);
  v36 = v12;
  v37 = v15;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v36, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v17 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v18 = __chkstk_darwin(OpaqueTypeMetadata2);
  v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v27 - v22;
  v32 = a2;
  v33 = v28;
  v34 = v29;
  v24 = static VerticalAlignment.center.getter(v21);
  HStack.init(alignment:spacing:content:)(v24, 0x3FF0000000000000, 0, sub_100022E8C, v31, v10, v11);
  View.scrollTargetLayout(isEnabled:)(1, v12, v15);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v12);
  v36 = v12;
  v37 = v15;
  swift_getOpaqueTypeConformance2(&v36, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  sub_1000F257C((uint64_t)v20, OpaqueTypeMetadata2, (uint64_t)v23);
  v25 = *(void (**)(char *, uint64_t))(v17 + 8);
  v25(v20, OpaqueTypeMetadata2);
  sub_1000E3B88((uint64_t)v23, OpaqueTypeMetadata2, v30);
  return ((uint64_t (*)(char *, uint64_t))v25)(v23, OpaqueTypeMetadata2);
}

uint64_t sub_100020AD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[5];

  v41 = a5;
  v8 = type metadata accessor for WatchFacesView(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v35 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v32 - v10;
  v12 = type metadata accessor for Array(255, a2);
  v39 = v12;
  v13 = type metadata accessor for ScrollAsset(255);
  v38 = v13;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v12);
  v36 = *(_QWORD *)(a3 + 8);
  v37 = WitnessTable;
  v45[0] = v12;
  v45[1] = a2;
  v45[2] = v13;
  v45[3] = WitnessTable;
  v45[4] = v36;
  v15 = type metadata accessor for ForEach(0, v45);
  v40 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v34 = (uint64_t)&v32 - v19;
  v23 = sub_10001E488(v8, v20, v21, v22);
  v24 = *(_QWORD *)(v23 + 112);
  swift_bridgeObjectRetain(v24);
  swift_release(v23);
  v45[0] = v24;
  v42 = a2;
  v43 = a3;
  KeyPath = swift_getKeyPath(&unk_10010BBA0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v25 = *(unsigned __int8 *)(v9 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = swift_allocObject(&unk_10014D5F0, v26 + v35, v25 | 7);
  *(_QWORD *)(v27 + 16) = a2;
  *(_QWORD *)(v27 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v27 + v26, v11, v8);
  v28 = sub_100003B3C(&qword_10015E178, type metadata accessor for ScrollAsset, (uint64_t)&unk_1001133C0);
  ForEach<>.init(_:id:content:)(v45, KeyPath, sub_100022FAC, v27, v39, v38, v37, v36, v28);
  v44 = v28;
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v15);
  v29 = v34;
  sub_1000F257C((uint64_t)v18, v15, v34);
  v30 = *(void (**)(char *, uint64_t))(v40 + 8);
  v30(v18, v15);
  sub_1000E3B88(v29, v15, v41);
  return ((uint64_t (*)(uint64_t, uint64_t))v30)(v29, v15);
}

int *sub_100020D4C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  int *result;

  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  v7 = type metadata accessor for WatchFacesView(0, a1, a2, v6);
  v11 = sub_10001E488(v7, v8, v9, v10);
  v12 = sub_1000371CC();
  swift_release(v11);
  v16 = sub_10001E488(v7, v13, v14, v15);
  v17 = sub_1000371F8();
  swift_release(v16);
  v21 = sub_10001E488(v7, v18, v19, v20);
  v22 = sub_100037218();
  swift_release(v21);
  result = (int *)type metadata accessor for ScrollAsset(0);
  *(double *)(a3 + result[5]) = v12;
  *(double *)(a3 + result[6]) = v17;
  *(double *)(a3 + result[7]) = v22;
  return result;
}

uint64_t sub_100020E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = type metadata accessor for WatchFacesView(0, a2, a3, a4);
  v9 = sub_10001E488(v5, v6, v7, v8);
  v11 = *(_QWORD *)(v9 + 96);
  v10 = *(_QWORD *)(v9 + 104);
  swift_bridgeObjectRetain(v10);
  swift_release(v9);
  v12 = (uint64_t *)(a1 + *(int *)(v5 + 40));
  v13 = *v12;
  if (*v12)
  {
    swift_retain(*v12);
    sub_1000DB03C(v11, v10, 8, 10, 27, 0, 3u, v13);
    swift_bridgeObjectRelease(v10);
    return swift_release(v13);
  }
  else
  {
    v15 = v12[1];
    v16 = type metadata accessor for RemoteViewConfiguration();
    v17 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    result = EnvironmentObject.error()(0, v15, v16, v17);
    __break(1u);
  }
  return result;
}

uint64_t sub_100020F18@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t result;

  v5 = type metadata accessor for WatchFacesView(0, a1, a2, a3);
  v9 = sub_10001E488(v5, v6, v7, v8);
  v11 = *(_QWORD *)(v9 + 48);
  v10 = *(_QWORD *)(v9 + 56);
  swift_bridgeObjectRetain(v10);
  swift_release(v9);
  v15 = sub_10001E488(v5, v12, v13, v14);
  v16 = sub_1000372AC();
  result = swift_release(v15);
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v10;
  *(double *)(a4 + 16) = v16;
  *(_BYTE *)(a4 + 24) = 0;
  return result;
}

double sub_100020FA0@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double result;
  uint64_t v43;

  v6 = type metadata accessor for Color.RGBColorSpace(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WatchFacesView(0, a1, a2, v10);
  v15 = sub_10001E488(v11, v12, v13, v14);
  v17 = *(_QWORD *)(v15 + 48);
  v16 = *(_QWORD *)(v15 + 56);
  swift_bridgeObjectRetain(v16);
  swift_release(v15);
  v21 = sub_10001E488(v11, v18, v19, v20);
  v22 = sub_1000372AC();
  swift_release(v21);
  v23 = enum case for Color.RGBColorSpace.sRGBLinear(_:);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
  v24(v9, enum case for Color.RGBColorSpace.sRGBLinear(_:), v6);
  v25 = Color.init(_:white:opacity:)(v9, 0.0, 0.33);
  v24(v9, v23, v6);
  v26 = Color.init(_:white:opacity:)(v9, 0.0, 0.33);
  v30 = sub_10001E488(v11, v27, v28, v29);
  v31 = sub_1000372CC();
  swift_release(v30);
  v35 = sub_10001E488(v11, v32, v33, v34);
  v36 = sub_1000372F8();
  swift_release(v35);
  v40 = sub_10001E488(v11, v37, v38, v39);
  v41 = sub_100037A20();
  swift_release(v40);
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v16;
  *(double *)(a3 + 16) = v22;
  *(_QWORD *)(a3 + 24) = v25;
  *(_OWORD *)(a3 + 32) = xmmword_10010BAD0;
  *(_QWORD *)(a3 + 48) = 0x4010000000000000;
  *(_QWORD *)(a3 + 56) = v26;
  result = 10.0;
  *(_OWORD *)(a3 + 64) = xmmword_10010BAE0;
  *(_OWORD *)(a3 + 80) = xmmword_10010BAF0;
  *(double *)(a3 + 96) = v31;
  *(double *)(a3 + 104) = v36;
  *(double *)(a3 + 112) = v41;
  return result;
}

uint64_t sub_100021184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  uint64_t (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t WitnessTable;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Optional(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v34 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v33 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v33 - v17;
  v20 = type metadata accessor for WatchFacesView(0, a2, a3, v19);
  v35 = a1;
  sub_10001E560(v20, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(a3) = v21(v18, 1, a2);
  v22 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  result = v22(v18, v10);
  if ((_DWORD)a3 == 1)
  {
    v33 = v8;
    v27 = sub_10001E488(v20, v24, v25, v26);
    v28 = *(_QWORD *)(v27 + 112);
    swift_bridgeObjectRetain(v28);
    swift_release(v27);
    v36 = v28;
    v29 = type metadata accessor for Array(0, a2);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v29);
    Collection.first.getter(v29, WitnessTable);
    swift_bridgeObjectRelease(v28);
    if (v21(v16, 1, a2) == 1)
    {
      return v22(v16, v10);
    }
    else
    {
      v31 = v33;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v33, v16, a2);
      v32 = (uint64_t)v34;
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v34, v31, a2);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v32, 0, 1, a2);
      sub_100022CBC(v32, v20);
      v22((char *)v32, v10);
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v31, a2);
    }
  }
  return result;
}

uint64_t sub_1000213D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v5 = *a2;
  v6 = *(_QWORD *)(*a2 + 80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  v8 = type metadata accessor for SelectAssetButton(0, v6, *(_QWORD *)(v5 + 88), v7);
  *(_QWORD *)(a3 + *(int *)(v8 + 36)) = a2;
  v9 = (uint64_t *)(a3 + *(int *)(v8 + 40));
  v10 = type metadata accessor for RemoteViewConfiguration();
  v11 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
  result = EnvironmentObject.init()(v10, v11);
  *v9 = result;
  v9[1] = v13;
  return result;
}

uint64_t sub_100021470@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v6 = *a1;
  WitnessTable = swift_getWitnessTable(&unk_10010C398, *a1);
  Bindable<A>.init(wrappedValue:)(a1, v6, WitnessTable);
  v8 = *(_QWORD *)(v6 + 80);
  v10 = type metadata accessor for WatchFacesView(0, v8, *(_QWORD *)(v6 + 88), v9);
  sub_10001E4C4(a2, v8);
  v11 = (uint64_t *)(a3 + *(int *)(v10 + 40));
  v12 = type metadata accessor for RemoteViewConfiguration();
  v13 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
  result = EnvironmentObject.init()(v12, v13);
  *v11 = result;
  v11[1] = v15;
  return result;
}

uint64_t type metadata accessor for WatchFacesView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WatchFacesView);
}

uint64_t sub_100021538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[3];

  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for WatchFacesViewModel(255, v5, *(_QWORD *)(a1 + 24), a4);
  result = type metadata accessor for Bindable(319, v6);
  if (v8 <= 0x3F)
  {
    v11[0] = *(_QWORD *)(result - 8) + 64;
    v9 = type metadata accessor for Optional(255, v5);
    result = type metadata accessor for State(319, v9);
    if (v10 <= 0x3F)
    {
      v11[1] = *(_QWORD *)(result - 8) + 64;
      v11[2] = &unk_10010BB20;
      swift_initStructMetadata(a1, 0, 3, v11, a1 + 32);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_1000215E8(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;

  v5 = a1;
  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v5 = (_QWORD *)(v16 + ((v6 + 16) & ~(unint64_t)v6));
  }
  else
  {
    v8 = *(_QWORD *)(a3 + 16);
    v9 = type metadata accessor for WatchFacesViewModel(255, v8, *(_QWORD *)(a3 + 24), a4);
    v10 = type metadata accessor for Bindable(0, v9);
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v5, a2, v10);
    v11 = *(int *)(a3 + 36);
    v12 = (char *)v5 + v11;
    v13 = &a2[v11];
    v14 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(&a2[v11], 1, v8))
    {
      v15 = type metadata accessor for Optional(0, v8);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v12, v13, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v8);
    }
    v17 = type metadata accessor for Optional(255, v8);
    v18 = *(int *)(type metadata accessor for State(0, v17) + 28);
    v19 = *(_QWORD *)&v13[v18];
    *(_QWORD *)&v12[v18] = v19;
    v20 = *(int *)(a3 + 40);
    v21 = (_QWORD *)((char *)v5 + v20);
    v22 = &a2[v20];
    v16 = *(_QWORD *)v22;
    v23 = *((_QWORD *)v22 + 1);
    *v21 = v16;
    v21[1] = v23;
    swift_retain(v19);
  }
  swift_retain(v16);
  return v5;
}

uint64_t sub_100021740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = type metadata accessor for WatchFacesViewModel(255, v6, *(_QWORD *)(a2 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  v9 = a1 + *(int *)(a2 + 36);
  v10 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v6);
  v11 = type metadata accessor for Optional(255, v6);
  v12 = type metadata accessor for State(0, v11);
  swift_release(*(_QWORD *)(v9 + *(int *)(v12 + 28)));
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 40)));
}

uint64_t sub_100021800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for WatchFacesViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a2 + v10, 1, v7))
  {
    v14 = type metadata accessor for Optional(0, v7);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v12, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v7);
  }
  v15 = type metadata accessor for Optional(255, v7);
  v16 = *(int *)(type metadata accessor for State(0, v15) + 28);
  v17 = *(_QWORD *)&v12[v16];
  *(_QWORD *)&v11[v16] = v17;
  v18 = *(int *)(a3 + 40);
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_retain(v17);
  swift_retain(v22);
  return a1;
}

uint64_t sub_100021930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for WatchFacesViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = *(_QWORD *)(v7 - 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(a1 + v10, 1, v7);
  v16 = v14((uint64_t)v12, 1, v7);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v11, v12, v7);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v7);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = type metadata accessor for Optional(0, v7);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v12, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v7);
LABEL_7:
  v18 = type metadata accessor for Optional(255, v7);
  v19 = *(int *)(type metadata accessor for State(0, v18) + 28);
  v20 = *(_QWORD *)&v11[v19];
  v21 = *(_QWORD *)&v12[v19];
  *(_QWORD *)&v11[v19] = v21;
  swift_retain(v21);
  swift_release(v20);
  v22 = *(int *)(a3 + 40);
  v23 = a1 + v22;
  v24 = (uint64_t *)(a2 + v22);
  v25 = *(_QWORD *)(a1 + v22);
  v26 = *v24;
  *(_QWORD *)(a1 + v22) = *v24;
  swift_retain(v26);
  swift_release(v25);
  *(_QWORD *)(v23 + 8) = v24[1];
  return a1;
}

uint64_t sub_100021AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for WatchFacesViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a2 + v10, 1, v7))
  {
    v14 = type metadata accessor for Optional(0, v7);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v11, v12, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v7);
  }
  v15 = type metadata accessor for Optional(255, v7);
  v16 = type metadata accessor for State(0, v15);
  *(_QWORD *)&v11[*(int *)(v16 + 28)] = *(_QWORD *)&v12[*(int *)(v16 + 28)];
  *(_OWORD *)(a1 + *(int *)(a3 + 40)) = *(_OWORD *)(a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t sub_100021BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for WatchFacesViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = *(_QWORD *)(v7 - 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(a1 + v10, 1, v7);
  v16 = v14((uint64_t)v12, 1, v7);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v11, v12, v7);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v7);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = type metadata accessor for Optional(0, v7);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v11, v12, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v7);
LABEL_7:
  v18 = type metadata accessor for Optional(255, v7);
  v19 = *(int *)(type metadata accessor for State(0, v18) + 28);
  v20 = *(_QWORD *)&v11[v19];
  *(_QWORD *)&v11[v19] = *(_QWORD *)&v12[v19];
  swift_release(v20);
  v21 = *(int *)(a3 + 40);
  v22 = a1 + v21;
  v23 = (_QWORD *)(a2 + v21);
  v24 = *(_QWORD *)(a1 + v21);
  *(_QWORD *)(a1 + v21) = *v23;
  swift_release(v24);
  *(_QWORD *)(v22 + 8) = v23[1];
  return a1;
}

uint64_t sub_100021D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100021D78);
}

uint64_t sub_100021D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  int v19;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for WatchFacesViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    v13 = a1;
    return v12(v13, a2, v11);
  }
  v14 = type metadata accessor for Optional(255, v7);
  v15 = type metadata accessor for State(0, v14);
  v16 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v16 + 84) == (_DWORD)a2)
  {
    v11 = v15;
    v13 = a1 + *(int *)(a3 + 36);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
    return v12(v13, a2, v11);
  }
  v18 = *(_QWORD *)(a1 + *(int *)(a3 + 40));
  if (v18 >= 0xFFFFFFFF)
    LODWORD(v18) = -1;
  v19 = v18 - 1;
  if (v19 < 0)
    v19 = -1;
  return (v19 + 1);
}

uint64_t sub_100021E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100021E5C);
}

uint64_t sub_100021E5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v8 = *(_QWORD *)(a4 + 16);
  v9 = type metadata accessor for WatchFacesViewModel(255, v8, *(_QWORD *)(a4 + 24), a4);
  v10 = type metadata accessor for Bindable(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    v12 = v10;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v14 = a1;
    return v13(v14, a2, a2, v12);
  }
  v15 = type metadata accessor for Optional(255, v8);
  result = type metadata accessor for State(0, v15);
  v17 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v17 + 84) == a3)
  {
    v12 = result;
    v14 = a1 + *(int *)(a4 + 36);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
    return v13(v14, a2, a2, v12);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 40)) = a2;
  return result;
}

uint64_t sub_100021F30(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100118940, 1);
}

uint64_t type metadata accessor for SelectAssetButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SelectAssetButton);
}

uint64_t sub_100021F74@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10001ECFC(v2[4], v2[2], v2[3], a1, a2);
}

unint64_t sub_100021F80()
{
  unint64_t result;

  result = qword_10015E1A0;
  if (!qword_10015E1A0)
  {
    result = swift_getWitnessTable(&unk_10010BA68, &type metadata for LightGradientBackground);
    atomic_store(result, (unint64_t *)&qword_10015E1A0);
  }
  return result;
}

uint64_t sub_100021FC4@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10001F8C4(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_100021FD4()
{
  return sub_100023BFC((uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WatchFacesView, sub_100021184);
}

uint64_t sub_100021FE8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000034AC(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002204C()
{
  unint64_t result;

  result = qword_10015E1B0;
  if (!qword_10015E1B0)
  {
    result = swift_getWitnessTable(&unk_100113370, &type metadata for AssetHeader);
    atomic_store(result, (unint64_t *)&qword_10015E1B0);
  }
  return result;
}

uint64_t sub_100022090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_1000220C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64[16];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v3 = v2;
  v63 = a2;
  v5 = type metadata accessor for PlainButtonStyle(0);
  v6 = *(_QWORD *)(v5 - 8);
  v61 = v5;
  v62 = v6;
  v7 = __chkstk_darwin(v5);
  v55 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v7);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100003E70(&qword_10015E278);
  v58 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003E70(&qword_10015E280);
  v59 = *(_QWORD *)(v14 - 8);
  v60 = v14;
  __chkstk_darwin(v14);
  v54 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100003E70(&qword_10015E288);
  __chkstk_darwin(v57);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v3, a1);
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = (v18 + 32) & ~v18;
  v20 = swift_allocObject(&unk_10014D670, v19 + v10, v18 | 7);
  v22 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v20 + 16) = v22;
  *(_QWORD *)(v20 + 24) = v21;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v20 + v19, v11, a1);
  v65 = v22;
  v66 = v21;
  v67 = v3;
  v23 = sub_100003E70(&qword_10015E290);
  v24 = sub_100023C6C();
  v25 = Button.init(action:label:)(sub_100023BE8, v20, sub_100023C60, v64, v23, v24);
  v26 = v55;
  PlainButtonStyle.init()(v25);
  v27 = sub_100007D40(&qword_10015E340, &qword_10015E278, (uint64_t)&protocol conformance descriptor for Button<A>);
  v28 = sub_100003B3C(&qword_10015E348, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v29 = v54;
  v30 = v56;
  v31 = v61;
  View.buttonStyle<A>(_:)(v26, v56, v61, v27, v28);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v26, v31);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v13, v30);
  LOBYTE(v27) = static Edge.Set.top.getter(v32);
  v33 = EdgeInsets.init(_all:)(22.0);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v41 = v59;
  v40 = v60;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v17, v29, v60);
  v42 = &v17[*(int *)(v57 + 36)];
  *v42 = v27;
  *((double *)v42 + 1) = v33;
  *((_QWORD *)v42 + 2) = v35;
  *((_QWORD *)v42 + 3) = v37;
  *((_QWORD *)v42 + 4) = v39;
  v42[40] = 0;
  v43 = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v29, v40);
  LOBYTE(v27) = static Edge.Set.horizontal.getter(v43);
  v44 = EdgeInsets.init(_all:)(20.0);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  v51 = v63;
  sub_100007ADC((uint64_t)v17, v63, &qword_10015E288);
  v52 = v51 + *(int *)(sub_100003E70(&qword_10015E350) + 36);
  *(_BYTE *)v52 = v27;
  *(double *)(v52 + 8) = v44;
  *(_QWORD *)(v52 + 16) = v46;
  *(_QWORD *)(v52 + 24) = v48;
  *(_QWORD *)(v52 + 32) = v50;
  *(_BYTE *)(v52 + 40) = 0;
  return sub_100008194((uint64_t)v17, &qword_10015E288);
}

uint64_t sub_100022444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;

  v7 = type metadata accessor for SelectAssetButton(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v11 = (char *)&v23 - v10;
  v12 = sub_100003E70(&qword_100161700);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v16 = type metadata accessor for MainActor(0);
  v17 = static MainActor.shared.getter(v16);
  v18 = *(unsigned __int8 *)(v8 + 80);
  v19 = (v18 + 48) & ~v18;
  v20 = (char *)swift_allocObject(&unk_10014D698, v19 + v9, v18 | 7);
  *((_QWORD *)v20 + 2) = v17;
  *((_QWORD *)v20 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v20 + 4) = a2;
  *((_QWORD *)v20 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v20[v19], v11, v7);
  v21 = sub_10004D47C((uint64_t)v14, (uint64_t)&unk_10015E360, (uint64_t)v20);
  return swift_release(v21);
}

uint64_t sub_1000225A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v10 = type metadata accessor for MainActor(0);
  v6[5] = v10;
  v6[6] = static MainActor.shared.getter(v10);
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10015EBA8 + dword_10015EBA8);
  v11 = (_QWORD *)swift_task_alloc(unk_10015EBAC);
  v6[7] = v11;
  *v11 = v6;
  v11[1] = sub_100022644;
  return v13(a4, a5, a6);
}

uint64_t sub_100022644()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  v5 = *(_QWORD *)(v2 + 40);
  if (v0)
  {
    v6 = dispatch thunk of Actor.unownedExecutor.getter(*(_QWORD *)(v2 + 40), &protocol witness table for MainActor);
    v8 = v7;
    v9 = sub_100014904;
  }
  else
  {
    v10 = type metadata accessor for SelectAssetButton(0, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), v4);
    *(_QWORD *)(v2 + 72) = v10;
    *(_DWORD *)(v2 + 80) = *(_DWORD *)(v10 + 36);
    v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
    v8 = v11;
    v9 = sub_100022700;
  }
  return swift_task_switch(v9, v6, v8);
}

uint64_t sub_100022700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(int *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 48));
  v4 = *(_QWORD *)(v3 + v1);
  v5 = *(_QWORD *)(v4 + 104);
  v6 = (uint64_t *)(v3 + *(int *)(v2 + 40));
  v7 = *v6;
  if (*v6)
  {
    v8 = *(_QWORD *)(v4 + 96);
    swift_bridgeObjectRetain(*(_QWORD *)(v4 + 104));
    swift_retain(v7);
    sub_1000DB03C(v8, v5, 8, 10, 7, 0, 3u, v7);
    swift_release(v7);
    swift_bridgeObjectRelease(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = v6[1];
    v11 = type metadata accessor for RemoteViewConfiguration();
    v12 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    swift_bridgeObjectRetain(v5);
    return EnvironmentObject.error()(0, v10, v11, v12);
  }
}

uint64_t sub_100022804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  char v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v49;
  void *v50;
  _BYTE v52[12];
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  int v58;
  uint64_t v59;
  uint64_t KeyPath;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  _OWORD v76[17];

  v69 = a4;
  v68 = sub_100003E70(&qword_10015E338);
  __chkstk_darwin(v68);
  v8 = &v52[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v67 = type metadata accessor for RoundedRectangle(0);
  v9 = __chkstk_darwin(v67);
  v11 = &v52[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v66 = static VerticalAlignment.center.getter(v9);
  v12 = sub_100022B64(a1, a2, a3, (uint64_t)v76);
  v64 = v76[0];
  v63 = *(_QWORD *)&v76[1];
  LOBYTE(a1) = BYTE8(v76[1]);
  v65 = *(_QWORD *)&v76[3];
  v13 = BYTE8(v76[3]);
  v62 = v76[2];
  v14 = static Font.body.getter(v12);
  static Font.Weight.semibold.getter();
  v61 = Font.weight(_:)(v14);
  swift_release(v14);
  KeyPath = swift_getKeyPath(&unk_10010BC38);
  v59 = static Color.white.getter();
  v58 = static Edge.Set.horizontal.getter(v59);
  v15 = EdgeInsets.init(_all:)(20.0);
  v56 = v16;
  v57 = v15;
  v54 = v18;
  v55 = v17;
  v73 = 0;
  v72 = a1;
  v71 = v13;
  v70 = 0;
  v53 = static Edge.Set.top.getter(v19);
  v20 = EdgeInsets.init(_all:)(14.4);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v27 = v73;
  v28 = v72;
  LOBYTE(v14) = v71;
  LOBYTE(a2) = v70;
  v74 = 0;
  v30 = static Edge.Set.bottom.getter(v29);
  v31 = EdgeInsets.init(_all:)(13.6);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  LOBYTE(a1) = v74;
  v75 = 0;
  v39 = static Color.blue.getter(v38);
  v40 = static Edge.Set.all.getter(v39);
  *(_QWORD *)&v76[0] = v66;
  *((_QWORD *)&v76[0] + 1) = 0x4010000000000000;
  LOBYTE(v76[1]) = v27;
  *(_OWORD *)((char *)&v76[1] + 8) = v64;
  *((_QWORD *)&v76[2] + 1) = v63;
  LOBYTE(v76[3]) = v28;
  *(_OWORD *)((char *)&v76[3] + 8) = v62;
  *((_QWORD *)&v76[4] + 1) = v65;
  LOBYTE(v76[5]) = v14;
  *((_QWORD *)&v76[5] + 1) = KeyPath;
  *(_QWORD *)&v76[6] = v61;
  *((_QWORD *)&v76[6] + 1) = v59;
  LOBYTE(v76[7]) = v58;
  *((double *)&v76[7] + 1) = v57;
  *(_QWORD *)&v76[8] = v56;
  *((_QWORD *)&v76[8] + 1) = v55;
  *(_QWORD *)&v76[9] = v54;
  BYTE8(v76[9]) = a2;
  LOBYTE(v76[10]) = v53;
  *((double *)&v76[10] + 1) = v20;
  *(_QWORD *)&v76[11] = v22;
  *((_QWORD *)&v76[11] + 1) = v24;
  *(_QWORD *)&v76[12] = v26;
  BYTE8(v76[12]) = a1;
  LOBYTE(v76[13]) = v30;
  *((double *)&v76[13] + 1) = v31;
  *(_QWORD *)&v76[14] = v33;
  *((_QWORD *)&v76[14] + 1) = v35;
  *(_QWORD *)&v76[15] = v37;
  BYTE8(v76[15]) = v75;
  *(_QWORD *)&v76[16] = v39;
  BYTE8(v76[16]) = v40;
  v41 = (char *)v11 + *(int *)(v67 + 20);
  v42 = enum case for RoundedCornerStyle.continuous(_:);
  v43 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v41, v42, v43);
  __asm { FMOV            V0.2D, #12.0 }
  *v11 = _Q0;
  sub_10001BF60((uint64_t)v11, (uint64_t)v8);
  *(_WORD *)&v8[*(int *)(v68 + 36)] = 256;
  v49 = sub_100003E70(&qword_10015E290);
  v50 = v69;
  sub_100007ADC((uint64_t)v8, (uint64_t)v69 + *(int *)(v49 + 36), &qword_10015E338);
  memcpy(v50, v76, 0x109uLL);
  sub_100023EEC((uint64_t)v76);
  sub_100008194((uint64_t)v8, &qword_10015E338);
  sub_10001BFA4((uint64_t)v11);
  return sub_100023F8C((uint64_t)v76);
}

uint64_t sub_100022B64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t KeyPath;

  v8 = Image.init(systemName:)(0xD000000000000014, 0x80000001001159B0);
  v10 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for SelectAssetButton(0, a2, a3, v9) + 36));
  v11 = *(_QWORD *)(v10 + 64);
  v12 = *(_QWORD *)(v10 + 72);
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = *(_QWORD *)(v10 + 88);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  v15 = Text.init(_:tableName:bundle:comment:)(v11, v12, v13, v14, 0, 0, 0, 0, 0, 256);
  v17 = v16;
  v19 = v18;
  LOBYTE(v14) = v20 & 1;
  KeyPath = swift_getKeyPath(&unk_10010BC68);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v15;
  *(_QWORD *)(a4 + 16) = v17;
  *(_BYTE *)(a4 + 24) = v14;
  *(_QWORD *)(a4 + 32) = v19;
  *(_QWORD *)(a4 + 40) = KeyPath;
  *(_QWORD *)(a4 + 48) = 1;
  *(_BYTE *)(a4 + 56) = 0;
  swift_retain(v8);
  sub_10000C008(v15, v17, v14);
  swift_bridgeObjectRetain(v19);
  swift_retain(KeyPath);
  sub_10000BFF8(v15, v17, v14);
  swift_release(v8);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v19);
}

uint64_t sub_100022CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = type metadata accessor for Optional(0, *(_QWORD *)(a2 + 16));
  __chkstk_darwin(v3);
  v5 = (char *)&v9 - v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v9 - v4, a1, v3);
  v7 = type metadata accessor for State(0, v3);
  return State.wrappedValue.setter(v5, v7);
}

uint64_t sub_100022D5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100020880(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100022D6C()
{
  return sub_100023BFC((uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WatchFacesView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100020E38);
}

uint64_t sub_100022D80@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100020F18(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

unint64_t sub_100022D8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E1C0;
  if (!qword_10015E1C0)
  {
    v1 = sub_1000034AC(&qword_10015E1B8);
    sub_100022DF8();
    sub_100022E3C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E1C0);
  }
  return result;
}

unint64_t sub_100022DF8()
{
  unint64_t result;

  result = qword_10015E1C8;
  if (!qword_10015E1C8)
  {
    result = swift_getWitnessTable(&unk_100113320, &type metadata for Bezel);
    atomic_store(result, (unint64_t *)&qword_10015E1C8);
  }
  return result;
}

unint64_t sub_100022E3C()
{
  unint64_t result;

  result = qword_10015E1D0;
  if (!qword_10015E1D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _AllowsHitTestingModifier, &type metadata for _AllowsHitTestingModifier);
    atomic_store(result, (unint64_t *)&qword_10015E1D0);
  }
  return result;
}

double sub_100022E80@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100020FA0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100022E8C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100020AD4(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_100022E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = type metadata accessor for WatchFacesView(0, v5, v6, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v13 = type metadata accessor for WatchFacesViewModel(255, v5, v6, v12);
  v14 = type metadata accessor for Bindable(0, v13);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v4 + v10, v14);
  v15 = v4 + v10 + *(int *)(v7 + 36);
  v16 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v15, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v5);
  v17 = type metadata accessor for Optional(255, v5);
  v18 = type metadata accessor for State(0, v17);
  swift_release(*(_QWORD *)(v15 + *(int *)(v18 + 28)));
  swift_release(*(_QWORD *)(v4 + v10 + *(int *)(v7 + 40)));
  return swift_deallocObject(v4, v10 + v11, v9 | 7);
}

int *sub_100022FAC@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  type metadata accessor for WatchFacesView(0, v4, v5, a1);
  return sub_100020D4C(v4, v5, a2);
}

uint64_t sub_100023014(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = &unk_10010BB20;
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_100023098(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v14 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v14 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v9 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v10 = (uint64_t *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = *v10;
    *v9 = *v10;
    v12 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = (uint64_t *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = *v13;
    *v12 = *v13;
    v12[1] = v13[1];
    swift_retain(v11);
  }
  swift_retain(v14);
  return v4;
}

uint64_t sub_100023170(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = a1 + *(_QWORD *)(v3 + 64) + 7;
  v5 = (v4 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8));
  return swift_release(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFF8));
}

uint64_t sub_1000231BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  *v7 = *v8;
  v10 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (uint64_t *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v11;
  *v10 = *v11;
  v10[1] = v11[1];
  swift_retain(v9);
  swift_retain(v12);
  return a1;
}

uint64_t sub_10002323C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (uint64_t *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  v11 = *v7;
  *v7 = v9;
  swift_retain(v9);
  swift_release(v11);
  v12 = (uint64_t *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 &= 0xFFFFFFFFFFFFFFF8;
  v13 = *v12;
  v14 = *(_QWORD *)v10;
  *v12 = *(_QWORD *)v10;
  swift_retain(v14);
  swift_release(v13);
  v12[1] = *(_QWORD *)(v10 + 8);
  return a1;
}

uint64_t sub_1000232D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_10002333C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (uint64_t *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v7;
  *v7 = *v8;
  swift_release(v9);
  v10 = (uint64_t *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (uint64_t *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v10;
  *v10 = *v11;
  swift_release(v12);
  v10[1] = v11[1];
  return a1;
}

uint64_t sub_1000233C0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_100023444 + 4 * byte_10010BB00[v10]))();
  }
}

void sub_1000234C8(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1000235C4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x100023638);
}

void sub_1000235CC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1000235D4);
  JUMPOUT(0x100023638);
}

void sub_100023614()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x100023638);
}

void sub_10002361C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x100023638);
}

uint64_t sub_100023624(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x100023638);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x100023634);
    JUMPOUT(0x100023630);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_100023650(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t TupleTypeMetadata2;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t TupleTypeMetadata3;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t *v58;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_1000034AC(&qword_10015E170);
  v4 = type metadata accessor for Array(255, v1);
  v5 = type metadata accessor for ScrollAsset(255);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  v7 = *(uint64_t **)(v2 + 8);
  v54 = v4;
  v55 = v1;
  v56 = v5;
  v57 = (void *)WitnessTable;
  v58 = v7;
  v8 = type metadata accessor for ForEach(255, &v54);
  sub_100003B3C(&qword_10015E178, type metadata accessor for ScrollAsset, (uint64_t)&unk_1001133C0);
  v9 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v8);
  v10 = type metadata accessor for HStack(255, v8, v9);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v10);
  v54 = v10;
  v55 = v11;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v54, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v54 = v10;
  v55 = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v14 = type metadata accessor for ScrollView(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v15 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v14);
  v54 = v14;
  v55 = v15;
  v16 = swift_getOpaqueTypeMetadata2(255, &v54, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v17 = type metadata accessor for ViewAlignedScrollTargetBehavior(255);
  v54 = v14;
  v55 = v15;
  v18 = swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v54 = v16;
  v55 = v17;
  v56 = v18;
  v57 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v19 = swift_getOpaqueTypeMetadata2(255, &v54, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v54 = v16;
  v55 = v17;
  v56 = v18;
  v57 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v20 = swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v54 = v19;
  v55 = v1;
  v56 = v20;
  v57 = v7;
  v21 = swift_getOpaqueTypeMetadata2(255, &v54, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v54 = v19;
  v55 = v1;
  v56 = v20;
  v57 = v7;
  v22 = swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v54 = v21;
  v55 = v22;
  v23 = swift_getOpaqueTypeMetadata2(255, &v54, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v24 = type metadata accessor for ModifiedContent(255, v23, &type metadata for _FrameLayout);
  v25 = type metadata accessor for Optional(255, v1);
  v54 = v21;
  v55 = v22;
  swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v26 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v24);
  v27 = v7[1];
  v28 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v25);
  v54 = v24;
  v55 = v25;
  v56 = v26;
  v57 = (void *)v28;
  v29 = swift_getOpaqueTypeMetadata2(255, &v54, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v30 = sub_1000034AC(&qword_10015E180);
  v31 = type metadata accessor for ModifiedContent(255, v29, v30);
  v32 = sub_1000034AC(&qword_10015E188);
  v33 = type metadata accessor for ModifiedContent(255, v31, v32);
  v34 = type metadata accessor for ModifiedContent(255, v33, &type metadata for _PaddingLayout);
  v36 = type metadata accessor for PageControl(255, v1, v27, v35);
  v37 = type metadata accessor for Optional(255, v36);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v34, v37, 0, 0);
  v39 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v40 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v39);
  v41 = type metadata accessor for VStack(255, v39, v40);
  v42 = type metadata accessor for ModifiedContent(255, v41, &type metadata for _AppearanceActionModifier);
  v44 = type metadata accessor for SelectAssetButton(255, v1, v2, v43);
  v45 = type metadata accessor for Optional(255, v44);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v3, v42, v45, 0, 0);
  v47 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v48 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v47);
  v49 = type metadata accessor for VStack(255, v47, v48);
  v50 = type metadata accessor for ModifiedContent(255, v49, &type metadata for _PaddingLayout);
  v51 = sub_1000034AC((uint64_t *)&unk_10015DB10);
  v52 = type metadata accessor for ModifiedContent(255, v50, v51);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v49);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v50);
  sub_100007D40(&qword_10015DB08, (uint64_t *)&unk_10015DB10, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v52);
}

uint64_t sub_100023B20(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100118974, 1);
}

uint64_t sub_100023B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for SelectAssetButton(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v8 | 7;
  v12 = v4 + v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v9, v5);
  swift_release(*(_QWORD *)(v12 + *(int *)(v6 + 36)));
  swift_release(*(_QWORD *)(v12 + *(int *)(v6 + 40)));
  return swift_deallocObject(v4, v10, v11);
}

uint64_t sub_100023BE8()
{
  return sub_100023BFC((uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SelectAssetButton, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100022444);
}

uint64_t sub_100023BFC(uint64_t (*a1)(_QWORD, uint64_t, uint64_t), uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1(0, v3, v4) - 8) + 80);
  return a2(v2 + ((v5 + 32) & ~v5), v3, v4);
}

uint64_t sub_100023C60@<X0>(void *a1@<X8>)
{
  uint64_t *v1;

  return sub_100022804(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_100023C6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E298;
  if (!qword_10015E298)
  {
    v1 = sub_1000034AC(&qword_10015E290);
    sub_100023CF0();
    sub_100007D40(&qword_10015E330, &qword_10015E338, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E298);
  }
  return result;
}

unint64_t sub_100023CF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E2A0;
  if (!qword_10015E2A0)
  {
    v1 = sub_1000034AC(&qword_10015E2A8);
    sub_100014600(&qword_10015E2B0, &qword_10015E2B8, (void (*)(void))sub_100023D8C);
    sub_100007D40(&qword_10015E320, &qword_10015E328, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E2A0);
  }
  return result;
}

uint64_t sub_100023D8C()
{
  return sub_100014600(&qword_10015E2C0, &qword_10015E2C8, (void (*)(void))sub_100023DA8);
}

uint64_t sub_100023DA8()
{
  return sub_100014600(&qword_10015E2D0, &qword_10015E2D8, (void (*)(void))sub_100023DC4);
}

unint64_t sub_100023DC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E2E0;
  if (!qword_10015E2E0)
  {
    v1 = sub_1000034AC(&qword_10015E2E8);
    sub_100023E48();
    sub_100007D40(&qword_10015DF28, &qword_10015DF30, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E2E0);
  }
  return result;
}

unint64_t sub_100023E48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E2F0;
  if (!qword_10015E2F0)
  {
    v1 = sub_1000034AC(&qword_10015E2F8);
    sub_100007D40(&qword_10015E300, &qword_10015E308, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100007D40(&qword_10015E310, &qword_10015E318, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E2F0);
  }
  return result;
}

uint64_t sub_100023EEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_BYTE *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 256);
  swift_retain(*(_QWORD *)(a1 + 24));
  sub_10000C008(v2, v3, v4);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t sub_100023F8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_BYTE *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 256);
  swift_release(*(_QWORD *)(a1 + 24));
  sub_10000BFF8(v2, v3, v4);
  swift_release(v10);
  swift_release(v9);
  swift_release(v7);
  swift_release(v6);
  swift_bridgeObjectRelease(v5);
  swift_release(v8);
  return a1;
}

uint64_t sub_100024034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  v5 = v4[4];
  v6 = type metadata accessor for SelectAssetButton(0, v5, v4[5], a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 48) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v8 | 7;
  swift_unknownObjectRelease(v4[2]);
  v12 = (char *)v4 + v9;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v12, v5);
  swift_release(*(_QWORD *)&v12[*(int *)(v6 + 36)]);
  swift_release(*(_QWORD *)&v12[*(int *)(v6 + 40)]);
  return swift_deallocObject(v4, v10, v11);
}

uint64_t sub_1000240D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v7 = v4[4];
  v8 = v4[5];
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SelectAssetButton(0, v7, v8, a4) - 8) + 80);
  v10 = v4[2];
  v11 = v4[3];
  v12 = (uint64_t)v4 + ((v9 + 48) & ~v9);
  v13 = (_QWORD *)swift_task_alloc(dword_10015E35C);
  *(_QWORD *)(v5 + 16) = v13;
  *v13 = v5;
  v13[1] = sub_1000072F4;
  return sub_1000225A8(a1, v10, v11, v12, v7, v8);
}

uint64_t sub_100024170()
{
  return sub_100014600(&qword_10015E368, &qword_10015E350, (void (*)(void))sub_10002419C);
}

unint64_t sub_10002419C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10015E370;
  if (!qword_10015E370)
  {
    v1 = sub_1000034AC(&qword_10015E288);
    v2[0] = sub_1000034AC(&qword_10015E278);
    v2[1] = type metadata accessor for PlainButtonStyle(255);
    v2[2] = sub_100007D40(&qword_10015E340, &qword_10015E278, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_100003B3C(&qword_10015E348, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E370);
  }
  return result;
}

uint64_t sub_10002428C()
{
  uint64_t v0;

  v0 = type metadata accessor for ArtistController(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return sub_100098FAC();
}

uint64_t sub_1000242C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(uint64_t, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t KeyPath;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD *v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t (**v110)();
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t, uint64_t);
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v151;
  char *v152;
  _OWORD *v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;
  _QWORD *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t (**v191)();
  _OWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t (**v198)();
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  void (*v212)(uint64_t, char *, uint64_t);
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  __int128 v220;

  v215 = a1;
  v181 = type metadata accessor for TaskPriority(0);
  v180 = *(_QWORD *)(v181 - 8);
  __chkstk_darwin(v181);
  v179 = (char *)&v171 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_100003E70(&qword_10015D750);
  v177 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v176 = (char *)&v171 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = sub_100003E70(&qword_10015D758);
  v4 = __chkstk_darwin(v196);
  v175 = (char *)&v171 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v182 = (uint64_t)&v171 - v6;
  v194 = sub_100003E70(&qword_10015E378);
  __chkstk_darwin(v194);
  v195 = (uint64_t)&v171 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = sub_100003E70(&qword_10015E380);
  __chkstk_darwin(v214);
  v197 = (char *)&v171 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = type metadata accessor for ErrorView(0);
  v9 = __chkstk_darwin(v183);
  v184 = (uint64_t *)((char *)&v171 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v186 = (uint64_t)&v171 - v11;
  v193 = sub_100003E70(&qword_10015D760);
  v12 = __chkstk_darwin(v193);
  v185 = (uint64_t)&v171 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v187 = (uint64_t)&v171 - v14;
  v206 = sub_100003E70(&qword_10015E388);
  v15 = __chkstk_darwin(v206);
  v198 = (uint64_t (**)())((char *)&v171 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  v199 = (uint64_t)&v171 - v17;
  v216 = sub_100003E70(&qword_10015E390);
  __chkstk_darwin(v216);
  v218 = (uint64_t)&v171 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = sub_100003E70(&qword_10015E398);
  __chkstk_darwin(v203);
  v205 = (uint64_t)&v171 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = sub_100003E70(&qword_10015E3A0);
  __chkstk_darwin(v217);
  v207 = (char *)&v171 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = sub_100003E70(&qword_10015E3A8);
  v21 = __chkstk_darwin(v204);
  v191 = (uint64_t (**)())((char *)&v171 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  v188 = (uint64_t)&v171 - v23;
  v24 = sub_100003E70(&qword_10015D4B0);
  __chkstk_darwin(v24);
  v202 = (char *)&v171 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = type metadata accessor for Artist(0);
  v200 = *(_QWORD *)(v201 - 8);
  v26 = *(_QWORD *)(v200 + 64);
  v27 = __chkstk_darwin(v201);
  v190 = (char *)&v171 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v210 = (char *)&v171 - v28;
  v29 = sub_100003E70(&qword_10015E3B0);
  __chkstk_darwin(v29);
  v31 = (char *)&v171 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100003E70(&qword_10015E3B8);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(_QWORD *)(v33 + 64);
  v35 = __chkstk_darwin(v32);
  v189 = (char *)&v171 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v37 = (char *)&v171 - v36;
  v39 = *(_QWORD *)(v1 + 16);
  v38 = *(void (**)(uint64_t, char *, uint64_t))(v1 + 24);
  v192 = (_OWORD *)v1;
  v40 = *(unsigned __int8 *)(v1 + 32);
  v41 = type metadata accessor for ArtistController(0);
  v42 = sub_100003B3C(&qword_10015E3C0, type metadata accessor for ArtistController, (uint64_t)&unk_100110284);
  v211 = v39;
  v212 = v38;
  LODWORD(v213) = v40;
  v208 = v42;
  v209 = v41;
  v43 = StateObject.wrappedValue.getter(v39, v38, v40, v41, v42);
  KeyPath = swift_getKeyPath(&unk_10010BD08);
  v45 = swift_getKeyPath(&unk_10010BD30);
  static Published.subscript.getter(v43, KeyPath, v45);
  swift_release(v43);
  swift_release(KeyPath);
  swift_release(v45);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) == 1)
  {
    v46 = &qword_10015E3B0;
    v47 = (uint64_t)v31;
  }
  else
  {
    v173 = v34;
    v48 = v202;
    v174 = v26;
    v49 = v200;
    v50 = v201;
    v51 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    v51(v37, v31, v32);
    v52 = sub_100007D40(&qword_10015E3F8, &qword_10015E3B8, (uint64_t)&unk_10010FCD0);
    v53 = v37;
    v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 40))(v32, v52);
    v55 = v54;
    if (*(_QWORD *)(v54 + 16))
    {
      v56 = (uint64_t)v48;
      (*(void (**)(char *, unint64_t, uint64_t))(v49 + 16))(v48, v54 + ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80)), v50);
      v57 = 0;
    }
    else
    {
      v57 = 1;
      v56 = (uint64_t)v48;
    }
    v58 = v210;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v56, v57, 1, v50);
    swift_bridgeObjectRelease(v55);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v56, 1, v50) != 1)
    {
      v119 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 32);
      v119(v58, v56, v50);
      v120 = v58;
      v121 = v190;
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v190, v120, v50);
      v122 = v189;
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v189, v53, v32);
      v123 = *(unsigned __int8 *)(v49 + 80);
      v212 = (void (*)(uint64_t, char *, uint64_t))v51;
      v124 = v32;
      v172 = v33;
      v213 = v53;
      v125 = (v123 + 16) & ~v123;
      v126 = *(unsigned __int8 *)(v33 + 80);
      v127 = (v174 + v126 + v125) & ~v126;
      v128 = swift_allocObject(&unk_10014D7E8, v127 + v173, v123 | v126 | 7);
      v119((char *)(v128 + v125), (uint64_t)v121, v50);
      v129 = v122;
      v130 = v124;
      v212(v128 + v127, v129, v124);
      v131 = (uint64_t)v191;
      *v191 = sub_100026B04;
      *(_QWORD *)(v131 + 8) = v128;
      *(_BYTE *)(v131 + 16) = 0;
      v132 = sub_100003E70(&qword_10015D470);
      v133 = swift_allocObject(v132, 17, 7);
      *(_BYTE *)(v133 + 16) = 0;
      v134 = sub_100007D40(&qword_10015D478, &qword_10015D470, (uint64_t)&unk_1001101D4);
      *(_QWORD *)(v131 + 24) = ObservedObject.init(wrappedValue:)(v133, v132, v134);
      *(_QWORD *)(v131 + 32) = v135;
      v136 = type metadata accessor for RemoteViewConfiguration();
      v137 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
      *(_QWORD *)(v131 + 40) = EnvironmentObject.init()(v136, v137);
      *(_QWORD *)(v131 + 48) = v138;
      v139 = v204;
      v140 = (_QWORD *)(v131 + *(int *)(v204 + 60));
      *v140 = swift_getKeyPath(&unk_10010BDE0);
      v141 = sub_100003E70(&qword_10015D488);
      swift_storeEnumTagMultiPayload(v140, v141, 0);
      v142 = v188;
      sub_100007A98(v131, v188, &qword_10015E3A8);
      v143 = v205;
      sub_100007ADC(v142, v205, &qword_10015E3A8);
      swift_storeEnumTagMultiPayload(v143, v203, 0);
      v144 = sub_100007D40(&qword_10015E3E0, &qword_10015E3A8, (uint64_t)&unk_100110010);
      v145 = sub_100007D40(&qword_10015E3E8, &qword_10015E388, (uint64_t)&unk_100110010);
      v146 = (uint64_t)v207;
      _ConditionalContent<>.init(storage:)(v143, v139, v206, v144, v145);
      v147 = v218;
      sub_100007ADC(v146, v218, &qword_10015E3A0);
      swift_storeEnumTagMultiPayload(v147, v216, 0);
      v148 = sub_10002696C();
      v149 = sub_100026A10();
      _ConditionalContent<>.init(storage:)(v147, v217, v214, v148, v149);
      sub_100008194(v146, &qword_10015E3A0);
      sub_100008194(v142, &qword_10015E3A8);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v210, v50);
      return (*(uint64_t (**)(char *, uint64_t))(v172 + 8))(v213, v130);
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v53, v32);
    v46 = &qword_10015D4B0;
    v47 = v56;
  }
  sub_100008194(v47, v46);
  v59 = v214;
  v60 = v213;
  v61 = v211;
  v62 = (uint64_t)v212;
  v64 = v208;
  v63 = v209;
  v65 = StateObject.wrappedValue.getter(v211, v212, v213, v209, v208);
  v66 = swift_getKeyPath(&unk_10010BD50);
  v67 = swift_getKeyPath(&unk_10010BD78);
  static Published.subscript.getter(v65, v66, v67);
  swift_release(v65);
  swift_release(v66);
  swift_release(v67);
  v68 = v220;
  if ((_QWORD)v220)
  {
    v69 = (uint64_t)v198;
    *v198 = sub_100026A44;
    *(_QWORD *)(v69 + 8) = v68;
    *(_BYTE *)(v69 + 16) = 0;
    v70 = sub_100003E70(&qword_10015D470);
    v71 = swift_allocObject(v70, 17, 7);
    *(_BYTE *)(v71 + 16) = 0;
    v72 = sub_100007D40(&qword_10015D478, &qword_10015D470, (uint64_t)&unk_1001101D4);
    swift_retain(v68);
    *(_QWORD *)(v69 + 24) = ObservedObject.init(wrappedValue:)(v71, v70, v72);
    *(_QWORD *)(v69 + 32) = v73;
    v74 = type metadata accessor for RemoteViewConfiguration();
    v75 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    *(_QWORD *)(v69 + 40) = EnvironmentObject.init()(v74, v75);
    *(_QWORD *)(v69 + 48) = v76;
    v77 = v206;
    v78 = (_QWORD *)(v69 + *(int *)(v206 + 60));
    *v78 = swift_getKeyPath(&unk_10010BDE0);
    v79 = sub_100003E70(&qword_10015D488);
    swift_storeEnumTagMultiPayload(v78, v79, 0);
    v80 = &qword_10015E388;
    v81 = v199;
    sub_100007A98(v69, v199, &qword_10015E388);
    v82 = v205;
    sub_100007ADC(v81, v205, &qword_10015E388);
    swift_storeEnumTagMultiPayload(v82, v203, 1);
    v83 = sub_100007D40(&qword_10015E3E0, &qword_10015E3A8, (uint64_t)&unk_100110010);
    v84 = sub_100007D40(&qword_10015E3E8, &qword_10015E388, (uint64_t)&unk_100110010);
    v85 = (uint64_t)v207;
    _ConditionalContent<>.init(storage:)(v82, v204, v77, v83, v84);
    v86 = v218;
    sub_100007ADC(v85, v218, &qword_10015E3A0);
    swift_storeEnumTagMultiPayload(v86, v216, 0);
    v87 = sub_10002696C();
    v88 = sub_100026A10();
    _ConditionalContent<>.init(storage:)(v86, v217, v59, v87, v88);
    swift_release(v68);
    sub_100008194(v85, &qword_10015E3A0);
    v89 = v81;
  }
  else
  {
    v90 = StateObject.wrappedValue.getter(v61, v62, v60, v63, v64);
    v91 = swift_getKeyPath(&unk_10010BD98);
    v92 = swift_getKeyPath(&unk_10010BDC0);
    static Published.subscript.getter(v90, v91, v92);
    swift_release(v90);
    swift_release(v91);
    swift_release(v92);
    v93 = v220;
    v94 = swift_errorRelease(v220);
    if (v93)
    {
      v95 = swift_getKeyPath(&unk_10010BDE0);
      v96 = v184;
      *v184 = v95;
      v97 = sub_100003E70(&qword_10015D488);
      swift_storeEnumTagMultiPayload(v96, v97, 0);
      v98 = (uint64_t *)((char *)v96 + *(int *)(v183 + 20));
      v99 = type metadata accessor for RemoteViewConfiguration();
      v100 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
      *v98 = EnvironmentObject.init()(v99, v100);
      v98[1] = v101;
      v102 = (uint64_t)v96;
      v103 = v186;
      sub_10000E618(v102, v186);
      v104 = v192;
      v105 = *v192;
      v219 = *(_OWORD *)((char *)v192 + 40);
      v220 = v105;
      v106 = swift_allocObject(&unk_10014D7C0, 72, 7);
      v107 = v104[1];
      *(_OWORD *)(v106 + 16) = *v104;
      *(_OWORD *)(v106 + 32) = v107;
      *(_OWORD *)(v106 + 48) = v104[2];
      *(_QWORD *)(v106 + 64) = *((_QWORD *)v104 + 6);
      v108 = v185;
      sub_100028390(v103, v185, type metadata accessor for ErrorView);
      v109 = v193;
      v110 = (uint64_t (**)())(v108 + *(int *)(v193 + 36));
      *v110 = sub_100026A3C;
      v110[1] = (uint64_t (*)())v106;
      v110[2] = 0;
      v110[3] = 0;
      sub_10000E3E4((uint64_t)&v220);
      sub_10000E0FC(v61, v62);
      sub_10000E40C(&v219);
      sub_1000283D4(v103, type metadata accessor for ErrorView);
      v80 = &qword_10015D760;
      v111 = v187;
      sub_100007A98(v108, v187, &qword_10015D760);
      v112 = v195;
      sub_100007ADC(v111, v195, &qword_10015D760);
      swift_storeEnumTagMultiPayload(v112, v194, 0);
      v113 = sub_10000E4B8();
      v114 = sub_10000E53C();
      v115 = (uint64_t)v197;
      v116 = v112;
      v117 = v109;
      v118 = v196;
    }
    else
    {
      v151 = v61;
      v152 = v176;
      ProgressView<>.init<>()(v94);
      v153 = v192;
      v154 = *v192;
      v219 = *(_OWORD *)((char *)v192 + 40);
      v220 = v154;
      v155 = swift_allocObject(&unk_10014D798, 72, 7);
      v156 = v153[1];
      *(_OWORD *)(v155 + 16) = *v153;
      *(_OWORD *)(v155 + 32) = v156;
      *(_OWORD *)(v155 + 48) = v153[2];
      *(_QWORD *)(v155 + 64) = *((_QWORD *)v153 + 6);
      sub_10000E0FC(v151, v62);
      sub_10000E3E4((uint64_t)&v220);
      v157 = sub_10000E40C(&v219);
      v158 = v179;
      static TaskPriority.userInitiated.getter(v157);
      v159 = v196;
      v160 = (uint64_t)v175;
      v161 = &v175[*(int *)(v196 + 36)];
      v162 = type metadata accessor for _TaskModifier(0);
      v163 = v180;
      v164 = v181;
      (*(void (**)(char *, char *, uint64_t))(v180 + 16))(&v161[*(int *)(v162 + 20)], v158, v181);
      *(_QWORD *)v161 = &unk_10015E3D0;
      *((_QWORD *)v161 + 1) = v155;
      v165 = v177;
      v166 = v178;
      (*(void (**)(uint64_t, char *, uint64_t))(v177 + 16))(v160, v152, v178);
      (*(void (**)(char *, uint64_t))(v163 + 8))(v158, v164);
      (*(void (**)(char *, uint64_t))(v165 + 8))(v152, v166);
      v80 = &qword_10015D758;
      v111 = v182;
      sub_100007A98(v160, v182, &qword_10015D758);
      v167 = v195;
      sub_100007ADC(v111, v195, &qword_10015D758);
      swift_storeEnumTagMultiPayload(v167, v194, 1);
      v113 = sub_10000E4B8();
      v114 = sub_10000E53C();
      v115 = (uint64_t)v197;
      v116 = v167;
      v117 = v193;
      v118 = v159;
    }
    _ConditionalContent<>.init(storage:)(v116, v117, v118, v113, v114);
    v168 = v218;
    sub_100007ADC(v115, v218, &qword_10015E380);
    swift_storeEnumTagMultiPayload(v168, v216, 1);
    v169 = sub_10002696C();
    v170 = sub_100026A10();
    _ConditionalContent<>.init(storage:)(v168, v217, v59, v169, v170);
    sub_100008194(v115, &qword_10015E380);
    v89 = v111;
  }
  return sub_100008194(v89, v80);
}

uint64_t sub_1000253B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = type metadata accessor for Artist(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  v6 = sub_100007D40(&qword_10015E3F8, &qword_10015E3B8, (uint64_t)&unk_10010FCD0);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  v8 = sub_100003E70(&qword_10015E3B8);
  v9 = v7(v8, v6);
  v10 = sub_100003E70(&qword_10015E400);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  return sub_100025E2C((uint64_t)v4, v9);
}

uint64_t sub_100025498(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = type metadata accessor for ArtistController(0);
  v6 = sub_100003B3C(&qword_10015E3C0, type metadata accessor for ArtistController, (uint64_t)&unk_100110284);
  v7 = StateObject.wrappedValue.getter(v2, v3, v4, v5, v6);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = v7;
    v11 = *(_QWORD *)a1;
    v10 = *(_QWORD *)(a1 + 8);
    swift_retain(v8);
    swift_bridgeObjectRetain(v10);
    sub_1000DADAC(v11, v10, 3, v8);
    swift_release(v9);
    swift_release(v8);
    return swift_bridgeObjectRelease(v10);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 48);
    v14 = type metadata accessor for RemoteViewConfiguration();
    v15 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    result = EnvironmentObject.error()(0, v13, v14, v15);
    __break(1u);
  }
  return result;
}

uint64_t sub_100025598(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[2] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[3] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[4] = v3;
  v1[5] = v4;
  return swift_task_switch(sub_100025604, v3, v4);
}

uint64_t sub_100025604()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[2];
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v4 = *(unsigned __int8 *)(v1 + 32);
  v5 = type metadata accessor for ArtistController(0);
  v6 = sub_100003B3C(&qword_10015E3C0, type metadata accessor for ArtistController, (uint64_t)&unk_100110284);
  v0[6] = StateObject.wrappedValue.getter(v3, v2, v4, v5, v6);
  v7 = *(_QWORD *)v1;
  v8 = *(_QWORD *)(v1 + 8);
  v9 = (_QWORD *)swift_task_alloc(dword_100161AD4);
  v0[7] = v9;
  *v9 = v0;
  v9[1] = sub_10000DB48;
  return sub_1000983C0(v7, v8);
}

uint64_t sub_1000256BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v92[2];
  _QWORD v93[3];

  v85 = a2;
  v86 = (uint64_t *)a1;
  v3 = sub_100003E70(&qword_10015E408);
  __chkstk_darwin(v3);
  v5 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100003E70(&qword_10015D4B8);
  v6 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v8 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003E70(&qword_10015D7F0);
  v89 = *(_QWORD *)(v9 - 8);
  v90 = v9;
  __chkstk_darwin(v9);
  v88 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003E70(&qword_10015E410);
  v83 = *(_QWORD *)(v11 - 8);
  v84 = v11;
  __chkstk_darwin(v11);
  v87 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100003E70(&qword_10015E418);
  v13 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v15 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003E70(&qword_10015D788);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v79 - v20;
  v22 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 136);
  v81 = v6;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))((char *)&v79 - v20, 1, 1, v91);
  sub_100007ADC((uint64_t)v21, (uint64_t)v19, &qword_10015D788);
  Published.init(initialValue:)(v19, v16);
  sub_100008194((uint64_t)v21, &qword_10015D788);
  v23 = v15;
  v24 = v85;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v22, v23, v82);
  v25 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 152);
  v93[0] = 0;
  v93[1] = 0;
  v26 = v87;
  Published.init(initialValue:)(v93, &type metadata for Tab);
  (*(void (**)(uint64_t, char *, uint64_t))(v83 + 32))(v25, v26, v84);
  v27 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 160);
  LOBYTE(v93[0]) = 0;
  v28 = v88;
  Published.init(initialValue:)(v93, &type metadata for Bool);
  (*(void (**)(uint64_t, char *, uint64_t))(v89 + 32))(v27, v28, v90);
  v29 = *(_QWORD *)(*(_QWORD *)v2 + 176);
  *(_QWORD *)(v2 + v29) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LocationManager(0)), "init");
  v30 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 184);
  *(_QWORD *)v30 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002CLL, 0x80000001001159D0);
  *(_QWORD *)(v30 + 8) = v31;
  *(_BYTE *)(v30 + 16) = v32 & 1;
  *(_QWORD *)(v30 + 24) = v33;
  v34 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 192);
  *(_QWORD *)v34 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000023, 0x8000000100115A00);
  *(_QWORD *)(v34 + 8) = v35;
  *(_BYTE *)(v34 + 16) = v36 & 1;
  *(_QWORD *)(v34 + 24) = v37;
  v38 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 200);
  *(_QWORD *)v38 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000023, 0x8000000100115A30);
  *(_QWORD *)(v38 + 8) = v39;
  *(_BYTE *)(v38 + 16) = v40 & 1;
  *(_QWORD *)(v38 + 24) = v41;
  sub_100028390((uint64_t)v86, v2 + *(_QWORD *)(*(_QWORD *)v2 + 112), type metadata accessor for AppleMusicFetcher.MusicArtist);
  v42 = *(_QWORD *)(*(_QWORD *)v2 + 120);
  v82 = v2;
  *(_QWORD *)(v2 + v42) = v24;
  v43 = *(_QWORD *)(v24 + 16);
  if (!v43)
  {
    swift_bridgeObjectRetain(v24);
    v48 = (char *)&_swiftEmptyArrayStorage;
    v63 = v82;
    v64 = v86;
    goto LABEL_18;
  }
  v80 = v25;
  v44 = sub_100007D40((unint64_t *)&qword_10015D4C8, &qword_10015D4B8, (uint64_t)&unk_10010CF80);
  v89 = *(_QWORD *)(v44 + 216);
  v90 = v44;
  v45 = v81;
  v46 = v24 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
  v47 = *(char **)(v81 + 72);
  v87 = *(char **)(v81 + 16);
  v88 = v47;
  swift_bridgeObjectRetain_n(v24, 2);
  v48 = (char *)&_swiftEmptyArrayStorage;
  do
  {
    v49 = v91;
    ((void (*)(char *, uint64_t, uint64_t))v87)(v8, v46, v91);
    v50 = ((uint64_t (*)(uint64_t, uint64_t))v89)(v49, v90);
    v51 = *(_QWORD *)(v50 + 16);
    v52 = type metadata accessor for Venue(0);
    v53 = *(_QWORD *)(v52 - 8);
    if (v51)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v53 + 16))(v5, v50 + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80)), v52);
      v54 = 0;
    }
    else
    {
      v54 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56))(v5, v54, 1, v52);
    swift_bridgeObjectRelease(v50);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v5, 1, v52) == 1)
    {
      sub_100008194((uint64_t)v5, &qword_10015E408);
LABEL_4:
      (*(void (**)(char *, uint64_t))(v45 + 8))(v8, v91);
      goto LABEL_5;
    }
    v55 = (void *)Venue.address.getter();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v5, v52);
    if (!v55)
      goto LABEL_4;
    v56 = objc_msgSend(v55, "country");

    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    v59 = v58;

    (*(void (**)(char *, uint64_t))(v45 + 8))(v8, v91);
    if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
      v48 = sub_1000F4E14(0, *((_QWORD *)v48 + 2) + 1, 1, v48);
    v61 = *((_QWORD *)v48 + 2);
    v60 = *((_QWORD *)v48 + 3);
    if (v61 >= v60 >> 1)
      v48 = sub_1000F4E14((char *)(v60 > 1), v61 + 1, 1, v48);
    *((_QWORD *)v48 + 2) = v61 + 1;
    v62 = &v48[16 * v61];
    *((_QWORD *)v62 + 4) = v57;
    *((_QWORD *)v62 + 5) = v59;
LABEL_5:
    v46 += (uint64_t)v88;
    --v43;
  }
  while (v43);
  v24 = v85;
  swift_bridgeObjectRelease(v85);
  v63 = v82;
  v64 = v86;
  v25 = v80;
LABEL_18:
  v65 = sub_1000282FC((uint64_t)v48);
  swift_bridgeObjectRelease(v48);
  *(_QWORD *)(v63 + *(_QWORD *)(*(_QWORD *)v63 + 128)) = v65;
  if (*(_QWORD *)(v65 + 16) == 1)
  {
    v66 = sub_10000DC5C(v65);
    if (v67)
    {
      v68 = v66;
      v69 = v67;
      swift_beginAccess(v25, v93, 33, 0);
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v25, v84);
      v92[0] = v68;
      v92[1] = v69;
      Published.init(initialValue:)(v92, &type metadata for Tab);
      swift_endAccess(v93);
    }
  }
  swift_beginAccess(v63 + *(_QWORD *)(*(_QWORD *)v63 + 144), v93, 33, 0);
  v92[0] = v24;
  v70 = sub_100003E70(&qword_10015E420);
  Published.init(initialValue:)(v92, v70);
  swift_endAccess(v93);
  v71 = *v64;
  v72 = v64[1];
  v73 = type metadata accessor for PromotionalAssetsController(0);
  v74 = swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
  v75 = v74 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  v76 = type metadata accessor for ArtistPromotionalAssets(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v75, 1, 1, v76);
  *(_QWORD *)(v74 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error) = 0;
  *(_QWORD *)(v74 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  v77 = swift_bridgeObjectRetain(v72);
  ObservationRegistrar.init()(v77);
  *(_QWORD *)(v74 + 16) = v71;
  *(_QWORD *)(v74 + 24) = v72;
  *(_BYTE *)(v74 + 32) = 1;
  sub_1000283D4((uint64_t)v64, type metadata accessor for AppleMusicFetcher.MusicArtist);
  *(_QWORD *)(v63 + *(_QWORD *)(*(_QWORD *)v63 + 168)) = v74;
  return v63;
}

uint64_t sub_100025E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD v98[2];
  _QWORD v99[4];

  v91 = a2;
  v92 = a1;
  v3 = sub_100003E70(&qword_10015E408);
  __chkstk_darwin(v3);
  v5 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100003E70(&qword_10015D4B8);
  v6 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v8 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003E70(&qword_10015D7F0);
  v95 = *(_QWORD *)(v9 - 8);
  v96 = v9;
  __chkstk_darwin(v9);
  v94 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003E70(&qword_10015E410);
  v89 = *(_QWORD *)(v11 - 8);
  v90 = v11;
  __chkstk_darwin(v11);
  v93 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100003E70(&qword_10015E418);
  v13 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v15 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003E70(&qword_10015D788);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v84 - v20;
  v22 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 136);
  v86 = v6;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))((char *)&v84 - v20, 1, 1, v97);
  sub_100007ADC((uint64_t)v21, (uint64_t)v19, &qword_10015D788);
  Published.init(initialValue:)(v19, v16);
  sub_100008194((uint64_t)v21, &qword_10015D788);
  v23 = v15;
  v24 = v91;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v22, v23, v88);
  v25 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 152);
  v99[0] = 0;
  v99[1] = 0;
  v26 = v93;
  Published.init(initialValue:)(v99, &type metadata for Tab);
  (*(void (**)(uint64_t, char *, uint64_t))(v89 + 32))(v25, v26, v90);
  v27 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 160);
  LOBYTE(v99[0]) = 0;
  v28 = v94;
  Published.init(initialValue:)(v99, &type metadata for Bool);
  (*(void (**)(uint64_t, char *, uint64_t))(v95 + 32))(v27, v28, v96);
  v29 = *(_QWORD *)(*(_QWORD *)v2 + 176);
  *(_QWORD *)(v2 + v29) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LocationManager(0)), "init");
  v30 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 184);
  *(_QWORD *)v30 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002CLL, 0x80000001001159D0);
  *(_QWORD *)(v30 + 8) = v31;
  *(_BYTE *)(v30 + 16) = v32 & 1;
  *(_QWORD *)(v30 + 24) = v33;
  v34 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 192);
  *(_QWORD *)v34 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000023, 0x8000000100115A00);
  *(_QWORD *)(v34 + 8) = v35;
  *(_BYTE *)(v34 + 16) = v36 & 1;
  *(_QWORD *)(v34 + 24) = v37;
  v38 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 200);
  *(_QWORD *)v38 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000023, 0x8000000100115A30);
  *(_QWORD *)(v38 + 8) = v39;
  *(_BYTE *)(v38 + 16) = v40 & 1;
  *(_QWORD *)(v38 + 24) = v41;
  v42 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 112);
  v43 = type metadata accessor for Artist(0);
  v44 = *(_QWORD *)(v43 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v42, v92, v43);
  v45 = *(_QWORD *)(*(_QWORD *)v2 + 120);
  v87 = v2;
  v88 = v44;
  *(_QWORD *)(v2 + v45) = v24;
  v46 = *(_QWORD *)(v24 + 16);
  if (!v46)
  {
    swift_bridgeObjectRetain(v24);
    v51 = (char *)&_swiftEmptyArrayStorage;
    v66 = v87;
    v67 = v92;
    goto LABEL_18;
  }
  v84 = v43;
  v85 = v25;
  v47 = sub_100007D40((unint64_t *)&qword_10015D4C8, &qword_10015D4B8, (uint64_t)&unk_10010CF80);
  v95 = *(_QWORD *)(v47 + 216);
  v96 = v47;
  v48 = v86;
  v49 = v24 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
  v50 = *(char **)(v86 + 72);
  v93 = *(char **)(v86 + 16);
  v94 = v50;
  swift_bridgeObjectRetain_n(v24, 2);
  v51 = (char *)&_swiftEmptyArrayStorage;
  do
  {
    v52 = v97;
    ((void (*)(char *, uint64_t, uint64_t))v93)(v8, v49, v97);
    v53 = ((uint64_t (*)(uint64_t, uint64_t))v95)(v52, v96);
    v54 = *(_QWORD *)(v53 + 16);
    v55 = type metadata accessor for Venue(0);
    v56 = *(_QWORD *)(v55 - 8);
    if (v54)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v56 + 16))(v5, v53 + ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80)), v55);
      v57 = 0;
    }
    else
    {
      v57 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v5, v57, 1, v55);
    swift_bridgeObjectRelease(v53);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v5, 1, v55) == 1)
    {
      sub_100008194((uint64_t)v5, &qword_10015E408);
LABEL_4:
      (*(void (**)(char *, uint64_t))(v48 + 8))(v8, v97);
      goto LABEL_5;
    }
    v58 = (void *)Venue.address.getter();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v5, v55);
    if (!v58)
      goto LABEL_4;
    v59 = objc_msgSend(v58, "country");

    v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    v62 = v61;

    (*(void (**)(char *, uint64_t))(v48 + 8))(v8, v97);
    if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
      v51 = sub_1000F4E14(0, *((_QWORD *)v51 + 2) + 1, 1, v51);
    v64 = *((_QWORD *)v51 + 2);
    v63 = *((_QWORD *)v51 + 3);
    if (v64 >= v63 >> 1)
      v51 = sub_1000F4E14((char *)(v63 > 1), v64 + 1, 1, v51);
    *((_QWORD *)v51 + 2) = v64 + 1;
    v65 = &v51[16 * v64];
    *((_QWORD *)v65 + 4) = v60;
    *((_QWORD *)v65 + 5) = v62;
LABEL_5:
    v49 += (uint64_t)v94;
    --v46;
  }
  while (v46);
  v24 = v91;
  swift_bridgeObjectRelease(v91);
  v66 = v87;
  v67 = v92;
  v43 = v84;
  v25 = v85;
LABEL_18:
  v68 = sub_1000282FC((uint64_t)v51);
  swift_bridgeObjectRelease(v51);
  *(_QWORD *)(v66 + *(_QWORD *)(*(_QWORD *)v66 + 128)) = v68;
  if (*(_QWORD *)(v68 + 16) == 1)
  {
    v69 = sub_10000DC5C(v68);
    if (v70)
    {
      v71 = v69;
      v72 = v70;
      swift_beginAccess(v25, v99, 33, 0);
      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v25, v90);
      v98[0] = v71;
      v98[1] = v72;
      Published.init(initialValue:)(v98, &type metadata for Tab);
      swift_endAccess(v99);
    }
  }
  swift_beginAccess(v66 + *(_QWORD *)(*(_QWORD *)v66 + 144), v99, 33, 0);
  v98[0] = v24;
  v73 = sub_100003E70(&qword_10015E420);
  Published.init(initialValue:)(v98, v73);
  v74 = swift_endAccess(v99);
  v75 = Artist.id.getter(v74);
  v77 = v76;
  v78 = type metadata accessor for PromotionalAssetsController(0);
  v79 = swift_allocObject(v78, *(unsigned int *)(v78 + 48), *(unsigned __int16 *)(v78 + 52));
  v80 = v79 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  v81 = type metadata accessor for ArtistPromotionalAssets(0);
  v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v80, 1, 1, v81);
  *(_QWORD *)(v79 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error) = 0;
  *(_QWORD *)(v79 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  ObservationRegistrar.init()(v82);
  *(_QWORD *)(v79 + 16) = v75;
  *(_QWORD *)(v79 + 24) = v77;
  *(_BYTE *)(v79 + 32) = 1;
  (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v67, v43);
  *(_QWORD *)(v66 + *(_QWORD *)(*(_QWORD *)v66 + 168)) = v79;
  return v66;
}

uint64_t sub_1000265B4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;

  v1 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010BD08);
  v3 = swift_getKeyPath(&unk_10010BD30);
  static Published.subscript.getter(v1, KeyPath, v3);
  swift_release(KeyPath);
  return swift_release(v3);
}

uint64_t sub_10002661C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v14;

  v4 = sub_100003E70(&qword_10015E3B0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v14 - v8;
  sub_100007ADC(a1, (uint64_t)&v14 - v8, &qword_10015E3B0);
  v10 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010BD08);
  v12 = swift_getKeyPath(&unk_10010BD30);
  sub_100007ADC((uint64_t)v9, (uint64_t)v7, &qword_10015E3B0);
  swift_retain(v10);
  static Published.subscript.setter(v7, v10, KeyPath, v12);
  return sub_100008194((uint64_t)v9, &qword_10015E3B0);
}

uint64_t sub_100026714@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000267B4(a1, (uint64_t)&unk_10010BD98, (uint64_t)&unk_10010BDC0, a2);
}

uint64_t sub_100026728(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010BD98);
  v5 = swift_getKeyPath(&unk_10010BDC0);
  v7 = v2;
  swift_errorRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1000267A0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000267B4(a1, (uint64_t)&unk_10010BD50, (uint64_t)&unk_10010BD78, a2);
}

uint64_t sub_1000267B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_10002682C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010BD50);
  v5 = swift_getKeyPath(&unk_10010BD78);
  v7 = v2;
  swift_retain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

ValueMetadata *type metadata accessor for ArtistEventContentView()
{
  return &type metadata for ArtistEventContentView;
}

uint64_t sub_1000268B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001189C4, 1);
}

uint64_t sub_1000268CC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000267B4(a1, (uint64_t)&unk_10010BD50, (uint64_t)&unk_10010BD78, a2);
}

uint64_t sub_1000268F4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000267B4(a1, (uint64_t)&unk_10010BD98, (uint64_t)&unk_10010BDC0, a2);
}

uint64_t sub_100026920()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10015E3CC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1000072F4;
  return sub_100025598(v0 + 16);
}

unint64_t sub_10002696C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E3D8;
  if (!qword_10015E3D8)
  {
    v1 = sub_1000034AC(&qword_10015E3A0);
    sub_100007D40(&qword_10015E3E0, &qword_10015E3A8, (uint64_t)&unk_100110010);
    sub_100007D40(&qword_10015E3E8, &qword_10015E388, (uint64_t)&unk_100110010);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E3D8);
  }
  return result;
}

uint64_t sub_100026A10()
{
  return sub_10001DE84(&qword_10015E3F0, &qword_10015E380, (void (*)(void))sub_10000E4B8, (void (*)(void))sub_10000E53C);
}

uint64_t sub_100026A3C()
{
  uint64_t v0;

  return sub_100025498(v0 + 16);
}

uint64_t sub_100026A44()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100026A4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for Artist(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = sub_100003E70(&qword_10015E3B8);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100026B04()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = type metadata accessor for Artist(0);
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  sub_100003E70(&qword_10015E3B8);
  return sub_1000253B8(v0 + v2);
}

Swift::Int sub_100026B68(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100003E70(&qword_10015E428);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

void sub_100026E44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t, __n128);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;

  v2 = v1;
  v4 = type metadata accessor for Genre(0);
  v41 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100003E70(&qword_10015E440);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v40 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v38 = v2;
  v39 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  v15 = swift_retain(v7);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return;
    }
    if (v20 >= v39)
      goto LABEL_35;
    v21 = v40[v20];
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v39)
        goto LABEL_35;
      v21 = v40[v16];
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v39)
          goto LABEL_35;
        v21 = v40[v16];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = v7;
    v24 = *(_QWORD *)(v7 + 48);
    v25 = *(_QWORD *)(v41 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v41 + 32);
    v26(v6, v24 + v25 * v19, v4, v15);
    v27 = *(_QWORD *)(v9 + 40);
    v28 = sub_100003B3C(&qword_10015E430, (uint64_t (*)(uint64_t))&type metadata accessor for Genre, (uint64_t)&protocol conformance descriptor for Genre);
    v29 = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28);
    v30 = -1 << *(_BYTE *)(v9 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v14 + 8 * (v31 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v14 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v14 + 8 * v32);
      }
      while (v36 == -1);
      v17 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    ((void (*)(unint64_t, char *, uint64_t))v26)(*(_QWORD *)(v9 + 48) + v17 * v25, v6, v4);
    ++*(_QWORD *)(v9 + 16);
    v7 = v23;
  }
  v22 = v20 + 3;
  if (v22 < v39)
  {
    v21 = v40[v22];
    if (!v21)
    {
      while (1)
      {
        v16 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_41;
        if (v16 >= v39)
          goto LABEL_35;
        v21 = v40[v16];
        ++v22;
        if (v21)
          goto LABEL_25;
      }
    }
    v16 = v22;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v38;
  v37 = 1 << *(_BYTE *)(v7 + 32);
  if (v37 > 63)
    bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v40 = -1 << v37;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  swift_release(v7);
  *v2 = v9;
}

uint64_t sub_1000271B0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_1000275B8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10002735C(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for Genre(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100003B3C(&qword_10015E430, v12, (uint64_t)&protocol conformance descriptor for Genre);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100003B3C(&qword_10015E438, (uint64_t (*)(uint64_t))&type metadata accessor for Genre, (uint64_t)&protocol conformance descriptor for Genre);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_100027750((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_1000275B8(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100026B68(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_100027954();
      goto LABEL_22;
    }
    sub_100027D28(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

uint64_t sub_100027750(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for Genre(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100026E44(v12);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100027B04();
      goto LABEL_12;
    }
    sub_100027FD4(v12);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100003B3C(&qword_10015E430, (uint64_t (*)(uint64_t))&type metadata accessor for Genre, (uint64_t)&protocol conformance descriptor for Genre);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100003B3C(&qword_10015E438, (uint64_t (*)(uint64_t))&type metadata accessor for Genre, (uint64_t)&protocol conformance descriptor for Genre);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void *sub_100027954()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100003E70(&qword_10015E428);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_100027B04()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = type metadata accessor for Genre(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003E70(&qword_10015E440);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    swift_release(v6);
LABEL_30:
    *v1 = v8;
    return;
  }
  v25 = v1;
  v9 = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)v9 >= v6 + 56 + 8 * v11)
    memmove(v9, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    swift_release(v6);
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
}

Swift::Int sub_100027D28(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100003E70(&qword_10015E428);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_100027FD4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;

  v2 = v1;
  v4 = type metadata accessor for Genre(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100003E70(&qword_10015E440);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    swift_release(v8);
LABEL_37:
    *v2 = v10;
    return;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v36 = v2;
  v37 = v8 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v38 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  v16 = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_26;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v38)
      goto LABEL_35;
    v22 = *(_QWORD *)(v37 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v38)
        goto LABEL_35;
      v22 = *(_QWORD *)(v37 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v38)
          goto LABEL_35;
        v22 = *(_QWORD *)(v37 + 8 * v17);
        if (!v22)
          break;
      }
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_26:
    v24 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v24 * v20, v4, v16);
    v25 = *(_QWORD *)(v10 + 40);
    v26 = sub_100003B3C(&qword_10015E430, (uint64_t (*)(uint64_t))&type metadata accessor for Genre, (uint64_t)&protocol conformance descriptor for Genre);
    v27 = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v4, v26);
    v28 = -1 << *(_BYTE *)(v10 + 32);
    v29 = v27 & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v18 * v24, v7, v4);
    ++*(_QWORD *)(v10 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v38)
  {
LABEL_35:
    swift_release_n(v8, 2);
    v2 = v36;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v37 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v38)
      goto LABEL_35;
    v22 = *(_QWORD *)(v37 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
}

uint64_t sub_1000282FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_1000271B0(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_100028390(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000283D4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100028410(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for Genre(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v16 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  v11 = sub_100003B3C(&qword_10015E430, v10, (uint64_t)&protocol conformance descriptor for Genre);
  result = Set.init(minimumCapacity:)(v9, v2, v11);
  v17 = result;
  if (v9)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v15(v6, v13, v2);
      sub_10002735C((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v13 += v14;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t sub_100028538()
{
  return sub_10001DE84(&qword_10015E448, &qword_10015E450, (void (*)(void))sub_10002696C, (void (*)(void))sub_100026A10);
}

uint64_t sub_100028574(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1000285C0(&qword_10015E458, (uint64_t)&protocol conformance descriptor for Ticket);
  result = sub_1000285C0(&qword_10015E460, (uint64_t)&protocol conformance descriptor for Ticket);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000285C0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Ticket(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_100028600(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v8 = a2[1];
    v9 = a2[2];
    a1[1] = v8;
    a1[2] = v9;
    a1[3] = a2[3];
    v10 = *(int *)(a3 + 24);
    v11 = (uint64_t *)((char *)a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    swift_retain(v5);
    swift_retain(v8);
    swift_retain(v9);
    v13 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
    v17 = *(int *)(a3 + 28);
    v18 = (uint64_t *)((char *)a1 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for UserInterfaceSizeClass(0);
      v22 = *(_QWORD *)(v21 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21))
      {
        v23 = sub_100003E70(&qword_10015D4A0);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v22 + 16))(v18, v19, v21);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
      }
      v25 = v18;
      v26 = v20;
      v27 = 1;
    }
    else
    {
      v24 = *v19;
      *v18 = *v19;
      swift_retain(v24);
      v25 = v18;
      v26 = v20;
      v27 = 0;
    }
    swift_storeEnumTagMultiPayload(v25, v26, v27);
  }
  return a1;
}

uint64_t sub_1000287D8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  v5 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)((char *)a1 + *(int *)(a2 + 28));
  v8 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v7, v8) != 1)
    return swift_release(*v7);
  v9 = type metadata accessor for UserInterfaceSizeClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8))(v7, v9);
  return result;
}

uint64_t *sub_1000288E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *a2;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v9 = a2[2];
  v8 = a2[3];
  a1[2] = v9;
  a1[3] = v8;
  v10 = *(int *)(a3 + 24);
  v11 = (uint64_t *)((char *)a1 + v10);
  v12 = (uint64_t *)((char *)a2 + v10);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v9);
  v13 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
    v15 = 1;
  }
  else
  {
    v16 = *v12;
    *v11 = *v12;
    swift_retain(v16);
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v13, v15);
  v17 = *(int *)(a3 + 28);
  v18 = (uint64_t *)((char *)a1 + v17);
  v19 = (uint64_t *)((char *)a2 + v17);
  v20 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for UserInterfaceSizeClass(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21))
    {
      v23 = sub_100003E70(&qword_10015D4A0);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      v24 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v22 + 16))(v18, v19, v21);
      v24 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
    }
  }
  else
  {
    v25 = *v19;
    *v18 = *v19;
    swift_retain(v25);
    v24 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v20, v24);
  return a1;
}

uint64_t *sub_100028A94(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a1[1];
  v9 = a2[1];
  a1[1] = v9;
  swift_retain(v9);
  swift_release(v8);
  v10 = a1[2];
  v11 = a2[2];
  a1[2] = v11;
  swift_retain(v11);
  swift_release(v10);
  a1[3] = a2[3];
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 24);
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_100008194((uint64_t)a1 + v12, &qword_10015D600);
    v15 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = 1;
    }
    else
    {
      v18 = *v14;
      *v13 = *v14;
      swift_retain(v18);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v17);
    v19 = *(int *)(a3 + 28);
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    sub_100008194((uint64_t)a1 + v19, &qword_10015D498);
    v22 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for UserInterfaceSizeClass(0);
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v24 + 48))(v21, 1, v23))
      {
        v25 = sub_100003E70(&qword_10015D4A0);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        v26 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v24 + 16))(v20, v21, v23);
        v26 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v20, 0, 1, v23);
      }
    }
    else
    {
      v27 = *v21;
      *v20 = *v21;
      swift_retain(v27);
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v26);
  }
  return a1;
}

_OWORD *sub_100028C8C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for UserInterfaceSizeClass(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
    {
      v18 = sub_100003E70(&qword_10015D4A0);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v13, v14, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
    }
    swift_storeEnumTagMultiPayload(v13, v15, 1);
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_100028E14(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_release(v8);
  a1[3] = a2[3];
  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    sub_100008194((uint64_t)a1 + v9, &qword_10015D600);
    v12 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload(v10, v12, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    v14 = *(int *)(a3 + 28);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    sub_100008194((uint64_t)a1 + v14, &qword_10015D498);
    v17 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for UserInterfaceSizeClass(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18))
      {
        v20 = sub_100003E70(&qword_10015D4A0);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v15, v16, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
      }
      swift_storeEnumTagMultiPayload(v15, v17, 1);
    }
    else
    {
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100028FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100029000);
}

uint64_t sub_100029000(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003E70(qword_10015D610);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_100003E70(&qword_10015DFA0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_1000290A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000290B4);
}

char *sub_1000290B4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_100003E70(qword_10015D610);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_100003E70(&qword_10015DFA0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for SetlistView(uint64_t a1)
{
  return sub_10002F744(a1, qword_10015E4D0, (uint64_t)&nominal type descriptor for SetlistView);
}

void sub_10002916C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_10010BE80;
  v6[1] = &unk_10010BE98;
  sub_10000BE1C(319, (unint64_t *)&qword_10015D6A0, (uint64_t (*)(uint64_t))&type metadata accessor for OpenURLAction);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001C9A4(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t sub_100029214(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118A94, 1);
}

uint64_t sub_100029224@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010BF60);
  v8 = v3;
  v5 = sub_100003B3C(&qword_10015D958, type metadata accessor for SetlistViewModel, (uint64_t)&unk_10010B100);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 184);
  *a2 = *(_QWORD *)(v3 + 176);
  a2[1] = v6;
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_1000292B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[7];
  uint64_t v9;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010BF60);
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v2;
  v9 = v4;
  v6 = sub_100003B3C(&qword_10015D958, type metadata accessor for SetlistViewModel, (uint64_t)&unk_10010B100);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10002F930, v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100029370(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v4 = type metadata accessor for GridItem(0);
      v5 = (char *)static Array._allocateBufferUninitialized(minimumCapacity:)(a2, v4);
      *((_QWORD *)v5 + 2) = a2;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      v8 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      v8(&v5[v7], a1, v4);
      v9 = a2 - 1;
      if (a2 != 1)
      {
        v10 = *(_QWORD *)(v6 + 72);
        v11 = &v5[v10 + v7];
        do
        {
          v8(v11, a1, v4);
          v11 += v10;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
      v5 = (char *)&_swiftEmptyArrayStorage;
    }
    v12 = type metadata accessor for GridItem(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_1000294A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v0 = type metadata accessor for UserInterfaceSizeClass(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003E70(&qword_10015E040);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_10015D4A0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v22 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v22 - v14;
  type metadata accessor for SetlistView(0);
  sub_10001DADC((uint64_t)v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v13, enum case for UserInterfaceSizeClass.regular(_:), v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v13, 0, 1, v0);
  v16 = (uint64_t)&v6[*(int *)(v4 + 48)];
  sub_100007ADC((uint64_t)v15, (uint64_t)v6, &qword_10015D4A0);
  sub_100007ADC((uint64_t)v13, v16, &qword_10015D4A0);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v17((uint64_t)v6, 1, v0) == 1)
  {
    sub_100008194((uint64_t)v13, &qword_10015D4A0);
    sub_100008194((uint64_t)v15, &qword_10015D4A0);
    if (v17(v16, 1, v0) == 1)
    {
      sub_100008194((uint64_t)v6, &qword_10015D4A0);
      return 2;
    }
    goto LABEL_6;
  }
  sub_100007ADC((uint64_t)v6, (uint64_t)v10, &qword_10015D4A0);
  if (v17(v16, 1, v0) == 1)
  {
    sub_100008194((uint64_t)v13, &qword_10015D4A0);
    sub_100008194((uint64_t)v15, &qword_10015D4A0);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
LABEL_6:
    sub_100008194((uint64_t)v6, &qword_10015E040);
    return 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v16, v0);
  v18 = sub_100003B3C((unint64_t *)&qword_10015E0D0, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  v19 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v3, v0, v18);
  v20 = *(void (**)(char *, uint64_t))(v1 + 8);
  v20(v3, v0);
  sub_100008194((uint64_t)v13, &qword_10015D4A0);
  sub_100008194((uint64_t)v15, &qword_10015D4A0);
  v20(v10, v0);
  sub_100008194((uint64_t)v6, &qword_10015D4A0);
  if ((v19 & 1) != 0)
    return 2;
  return 1;
}

uint64_t sub_1000297B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;

  v2 = v1;
  v4 = type metadata accessor for TaskPriority(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SetlistView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = sub_100003E70(&qword_10015E510);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v14 = static HorizontalAlignment.leading.getter(v12);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 0;
  v15 = sub_100003E70(&qword_10015E518);
  sub_10002998C(v2, &v14[*(int *)(v15 + 44)]);
  sub_100028390((uint64_t)v2, (uint64_t)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SetlistView);
  v16 = *(unsigned __int8 *)(v9 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = swift_allocObject(&unk_10014D8A0, v17 + v10, v16 | 7);
  v19 = sub_100030810((uint64_t)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, type metadata accessor for SetlistView);
  static TaskPriority.userInitiated.getter(v19);
  v20 = (char *)(a1 + *(int *)(sub_100003E70(&qword_10015E530) + 36));
  v21 = type metadata accessor for _TaskModifier(0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(&v20[*(int *)(v21 + 20)], v7, v4);
  *(_QWORD *)v20 = &unk_10015E528;
  *((_QWORD *)v20 + 1) = v18;
  sub_100007ADC((uint64_t)v14, a1, &qword_10015E510);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_100008194((uint64_t)v14, &qword_10015E510);
}

uint64_t sub_10002998C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t OpaqueTypeConformance2;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t (*v153)(char *, uint64_t);
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  double v168;
  double v169;
  double v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  double v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  double v217;
  double v218;
  double v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  double v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned __int8 v250;
  unsigned __int8 v251;
  unsigned __int8 v252;
  uint64_t v253;
  void (*v254)(char *, char *, uint64_t);
  int v255;
  uint64_t v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  char *v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void (*v272)(char *, uint64_t);
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  uint64_t v290;
  uint64_t *v291;
  char *v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  char *v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  int v317;
  uint64_t v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  uint64_t KeyPath;
  int v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  char *v332;
  uint64_t v333;
  _QWORD v334[4];
  _DWORD v335[2];
  _DWORD v336[2];
  _DWORD v337[2];
  _DWORD v338[2];
  _DWORD v339[2];
  _DWORD v340[2];
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  char v351;
  __int128 v352;
  __int128 v353;
  uint64_t v354;
  uint64_t v355;
  char v356;
  _BYTE v357[7];
  uint64_t v358;
  char v359;
  _BYTE v360[7];
  char v361;
  _BYTE v362[7];
  double v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  char v367;
  _BYTE v368[7];
  char v369;
  _BYTE v370[7];
  double v371;
  char *v372;
  uint64_t v373;
  uint64_t v374;
  char v375;
  _QWORD v376[3];
  unsigned __int8 v377;
  _BYTE v378[7];
  _BYTE v379[7];
  unsigned __int8 v380;
  _BYTE v381[7];
  _BYTE v382[7];
  _BYTE v383[7];
  unsigned __int8 v384;
  unsigned __int8 v385;

  v319 = a2;
  v3 = sub_100003E70(&qword_10015E540);
  __chkstk_darwin(v3);
  v280 = (uint64_t *)((char *)&v274 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v279 = sub_100003E70(&qword_10015E548);
  __chkstk_darwin(v279);
  v282 = (uint64_t)&v274 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v288 = sub_100003E70(&qword_10015E550);
  v6 = __chkstk_darwin(v288);
  v281 = (uint64_t)&v274 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v283 = (uint64_t)&v274 - v8;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v320 = v9;
  v321 = v10;
  __chkstk_darwin(v9);
  v284 = (char *)&v274 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v286 = sub_100003E70(&qword_10015E558);
  __chkstk_darwin(v286);
  v287 = (uint64_t)&v274 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003E70(&qword_10015E560);
  __chkstk_darwin(v13);
  v275 = (uint64_t *)((char *)&v274 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v274 = sub_100003E70(&qword_10015E568);
  __chkstk_darwin(v274);
  v277 = (uint64_t)&v274 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v285 = sub_100003E70(&qword_10015E570);
  v16 = __chkstk_darwin(v285);
  v276 = (uint64_t)&v274 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v278 = (uint64_t)&v274 - v18;
  v19 = sub_100003E70(&qword_100165370);
  v20 = __chkstk_darwin(v19);
  v289 = (char *)&v274 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v316 = (char *)&v274 - v22;
  v23 = sub_100003E70(&qword_10015E578);
  v24 = __chkstk_darwin(v23);
  v322 = (uint64_t)&v274 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v290 = (uint64_t)&v274 - v26;
  v27 = type metadata accessor for SetlistView(0);
  v28 = *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64);
  v314 = *(_QWORD *)(v27 - 8);
  v315 = v28;
  __chkstk_darwin(v27);
  v313 = (uint64_t)&v274 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior(0);
  __chkstk_darwin(v30);
  v302 = (char *)&v274 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for ViewAlignedScrollTargetBehavior(0);
  v33 = *(_QWORD *)(v32 - 8);
  v305 = v32;
  v306 = v33;
  __chkstk_darwin(v32);
  v301 = (char *)&v274 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v298 = type metadata accessor for ContentMarginPlacement(0);
  v296 = *(_QWORD *)(v298 - 8);
  __chkstk_darwin(v298);
  v36 = (char *)&v274 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100003E70(&qword_10015E580);
  v38 = *(_QWORD *)(v37 - 8);
  v294 = v37;
  v295 = v38;
  __chkstk_darwin(v37);
  v40 = (char *)&v274 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v297 = sub_100003E70(&qword_10015E588);
  v300 = *(_QWORD *)(v297 - 8);
  __chkstk_darwin(v297);
  v292 = (char *)&v274 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100003E70(&qword_10015E590);
  v43 = *(_QWORD *)(v42 - 8);
  v303 = v42;
  v304 = v43;
  __chkstk_darwin(v42);
  v293 = (char *)&v274 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100003E70(&qword_10015E598);
  v46 = *(_QWORD *)(v45 - 8);
  v308 = v45;
  v309 = v46;
  __chkstk_darwin(v45);
  v299 = (char *)&v274 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100003E70(&qword_10015E5A0);
  v49 = *(_QWORD *)(v48 - 8);
  v311 = v48;
  v312 = v49;
  __chkstk_darwin(v48);
  v307 = (char *)&v274 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100003E70(&qword_10015E5A8);
  v329 = *(_QWORD *)(v51 - 8);
  v330 = v51;
  v52 = __chkstk_darwin(v51);
  v332 = (char *)&v274 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __chkstk_darwin(v52);
  v310 = (char *)&v274 - v55;
  __chkstk_darwin(v54);
  v331 = (char *)&v274 - v56;
  v57 = a1[1];
  *(_QWORD *)&v352 = *a1;
  *((_QWORD *)&v352 + 1) = v57;
  *(double *)&v333 = COERCE_DOUBLE(sub_100003E70(&qword_10015E538));
  State.wrappedValue.getter(&v341, v333);
  v58 = v341;
  v60 = *(_QWORD *)(v341 + 80);
  v59 = *(_QWORD *)(v341 + 88);
  v61 = *(unsigned __int8 *)(v341 + 96);
  v62 = *(_QWORD *)(v341 + 104);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v62);
  swift_release(v58);
  v63 = Text.init(_:tableName:bundle:comment:)(v60, v59, v61, v62, 0, 0, 0, 0, 0, 256);
  v65 = v64;
  v67 = v66;
  v69 = v68 & 1;
  v70 = static Font.title2.getter();
  static Font.Weight.bold.getter();
  v71 = Font.weight(_:)(v70);
  swift_release(v70);
  v72 = Text.font(_:)(v71, v63, v65, v69, v67);
  v327 = v73;
  v328 = v72;
  LODWORD(v70) = v74;
  v318 = v75;
  swift_release(v71);
  sub_10000BFF8(v63, v65, v69);
  swift_bridgeObjectRelease(v67);
  KeyPath = swift_getKeyPath(&unk_10010BF00);
  v324 = swift_getKeyPath(&unk_10010BF30);
  v326 = static Edge.Set.bottom.getter(v324);
  v76 = EdgeInsets.init(_all:)(13.0);
  v78 = v77;
  v80 = v79;
  v82 = v81;
  v323 = ((uint64_t (*)(void))static Edge.Set.leading.getter)();
  v83 = EdgeInsets.init(_all:)(20.0);
  v85 = v84;
  v87 = v86;
  v89 = v88;
  v317 = v70;
  v385 = v70 & 1;
  v384 = 0;
  v380 = 0;
  v377 = 0;
  v91 = static Axis.Set.horizontal.getter(v90);
  v334[2] = a1;
  v92 = sub_100003E70(&qword_10015E5B0);
  v93 = sub_1000034AC(&qword_10015E5B8);
  v94 = sub_100007D40(&qword_10015E5C0, &qword_10015E5B8, (uint64_t)&protocol conformance descriptor for LazyHGrid<A>);
  *(_QWORD *)&v352 = v93;
  *((_QWORD *)&v352 + 1) = v94;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v352, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v96 = ScrollView.init(_:showsIndicators:content:)(v91, 0, sub_10002F2A0, v334, v92, OpaqueTypeConformance2);
  v97 = static Edge.Set.horizontal.getter(v96);
  v98 = v36;
  static ContentMarginPlacement.automatic.getter();
  v99 = sub_100007D40(&qword_10015E5C8, &qword_10015E580, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
  v100 = v292;
  v101 = v294;
  View.contentMargins(_:_:for:)(v97, 0x4034000000000000, 0, v98, v294, v99);
  (*(void (**)(char *, uint64_t))(v296 + 8))(v98, v298);
  v102 = (*(uint64_t (**)(char *, uint64_t))(v295 + 8))(v40, v101);
  v103 = v302;
  static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter(v102);
  v104 = v301;
  ViewAlignedScrollTargetBehavior.init(limitBehavior:)(v103);
  *(_QWORD *)&v352 = v101;
  *((_QWORD *)&v352 + 1) = v99;
  v105 = swift_getOpaqueTypeConformance2(&v352, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v106 = v293;
  v107 = v297;
  v108 = v305;
  View.scrollTargetBehavior<A>(_:)(v104, v297, v305, v105, &protocol witness table for ViewAlignedScrollTargetBehavior);
  v109 = v104;
  v110 = v108;
  (*(void (**)(char *, uint64_t))(v306 + 8))(v109, v108);
  v111 = v100;
  v112 = v107;
  (*(void (**)(char *, uint64_t))(v300 + 8))(v111, v107);
  v113 = a1[1];
  v114 = a1;
  *(_QWORD *)&v352 = *a1;
  *((_QWORD *)&v352 + 1) = v113;
  v115 = v333;
  State.wrappedValue.getter(&v341, v333);
  v116 = *(unsigned __int8 *)(v341 + 72);
  swift_release(v341);
  *(_QWORD *)&v352 = v112;
  *((_QWORD *)&v352 + 1) = v110;
  *(_QWORD *)&v353 = v105;
  *((_QWORD *)&v353 + 1) = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v117 = swift_getOpaqueTypeConformance2(&v352, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v118 = v299;
  v119 = v303;
  View.scrollDisabled(_:)(v116, v303, v117);
  (*(void (**)(char *, uint64_t))(v304 + 8))(v106, v119);
  v291 = v114;
  v120 = v114[1];
  *(_QWORD *)&v341 = *v114;
  *((_QWORD *)&v341 + 1) = v120;
  State.projectedValue.getter(v115);
  v121 = v352;
  v122 = v353;
  v123 = swift_getKeyPath(&unk_10010BF60);
  v341 = v121;
  *(_QWORD *)&v342 = v122;
  v124 = sub_100003E70(&qword_10015E5D0);
  Binding.subscript.getter(&v352, v123, v124);
  swift_release(v122);
  swift_release(*((_QWORD *)&v121 + 1));
  swift_release(v123);
  swift_release(v121);
  v125 = v352;
  v126 = *((_QWORD *)&v353 + 1);
  v341 = v352;
  v342 = v353;
  v376[0] = v119;
  v376[1] = v117;
  v127 = swift_getOpaqueTypeConformance2(v376, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v128 = sub_10002F2B0();
  v129 = v307;
  v130 = v308;
  View.scrollPosition<A>(id:anchor:)(&v341, 0, 0, 1, v308, &type metadata for MusicItemID, v127, v128);
  swift_release(*((_QWORD *)&v125 + 1));
  swift_release(v125);
  swift_bridgeObjectRelease(v126);
  v131 = v130;
  (*(void (**)(char *, uint64_t))(v309 + 8))(v118, v130);
  v132 = v291;
  v133 = v291[1];
  *(_QWORD *)&v352 = *v291;
  *((_QWORD *)&v352 + 1) = v133;
  State.wrappedValue.getter(&v341, v333);
  v134 = v341;
  v135 = swift_getKeyPath(&unk_10010BF60);
  *(_QWORD *)&v352 = v134;
  v136 = sub_100003B3C(&qword_10015D958, type metadata accessor for SetlistViewModel, (uint64_t)&unk_10010B100);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v352, v135, v136);
  swift_release(v135);
  v138 = *(_QWORD *)(v134 + 176);
  v137 = *(_QWORD *)(v134 + 184);
  swift_bridgeObjectRetain(v137);
  swift_release(v134);
  *(_QWORD *)&v341 = v138;
  *((_QWORD *)&v341 + 1) = v137;
  v139 = v313;
  sub_100028390((uint64_t)v132, v313, type metadata accessor for SetlistView);
  v140 = *(unsigned __int8 *)(v314 + 80);
  v141 = (v140 + 16) & ~v140;
  v142 = swift_allocObject(&unk_10014D8C8, v141 + v315, v140 | 7);
  sub_100030810(v139, v142 + v141, type metadata accessor for SetlistView);
  v143 = sub_100003E70(&qword_10015E5E0);
  *(_QWORD *)&v352 = v131;
  *((_QWORD *)&v352 + 1) = &type metadata for MusicItemID;
  *(_QWORD *)&v353 = v127;
  *((_QWORD *)&v353 + 1) = v128;
  v144 = swift_getOpaqueTypeConformance2(&v352, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v145 = sub_10002F440();
  v147 = v310;
  v146 = v311;
  View.onChange<A>(of:initial:_:)(&v341, 0, sub_10002F42C, v142, v311, v143, v144, v145);
  swift_release(v142);
  swift_bridgeObjectRelease(*((_QWORD *)&v341 + 1));
  (*(void (**)(char *, uint64_t))(v312 + 8))(v129, v146);
  (*(void (**)(char *, char *, uint64_t))(v329 + 32))(v331, v147, v330);
  v148 = v132[1];
  *(_QWORD *)&v352 = *v132;
  *((_QWORD *)&v352 + 1) = v148;
  State.wrappedValue.getter(&v341, v333);
  v149 = (_QWORD *)v341;
  v150 = *(_QWORD *)(v341 + 56);
  v151 = *(_QWORD *)(v341 + 64);
  sub_100008170((_QWORD *)(v341 + 32), v150);
  v152 = v316;
  (*(void (**)(uint64_t, uint64_t))(v151 + 64))(v150, v151);
  v153 = *(uint64_t (**)(char *, uint64_t))(v321 + 48);
  v154 = v152;
  v155 = (uint64_t)v152;
  v156 = v320;
  LODWORD(v143) = v153(v154, 1);
  sub_100008194(v155, &qword_100165370);
  if ((_DWORD)v143 == 1)
  {
    swift_release(v149);
    v157 = v132;
  }
  else
  {
    v158 = v149[7];
    v159 = v149[8];
    sub_100008170(v149 + 4, v158);
    (*(void (**)(uint64_t, uint64_t))(v159 + 40))(v158, v159);
    v161 = v160;
    swift_release(v149);
    v157 = v132;
    if (v161)
    {
      v162 = swift_bridgeObjectRelease(v161);
      v163 = static HorizontalAlignment.center.getter(v162);
      v164 = (uint64_t)v275;
      *v275 = v163;
      *(_QWORD *)(v164 + 8) = 0x4026000000000000;
      *(_BYTE *)(v164 + 16) = 0;
      v165 = sub_100003E70(&qword_10015E640);
      v166 = sub_10002BB98(v132, (char *)(v164 + *(int *)(v165 + 44)));
      v167 = static Edge.Set.leading.getter(v166);
      v168 = EdgeInsets.init(_all:)(20.0);
      *(double *)&v333 = v83;
      v169 = v76;
      v170 = v168;
      v315 = v87;
      v316 = v85;
      v171 = v78;
      v173 = v172;
      v174 = v80;
      v176 = v175;
      v314 = v89;
      v177 = v82;
      v179 = v178;
      v180 = v277;
      sub_100007ADC(v164, v277, &qword_10015E560);
      v181 = v180 + *(int *)(v274 + 36);
      *(_BYTE *)v181 = v167;
      *(double *)(v181 + 8) = v170;
      *(_QWORD *)(v181 + 16) = v173;
      *(_QWORD *)(v181 + 24) = v176;
      *(_QWORD *)(v181 + 32) = v179;
      *(_BYTE *)(v181 + 40) = 0;
      v182 = sub_100008194(v164, &qword_10015E560);
      v183 = static Edge.Set.top.getter(v182);
      v184 = EdgeInsets.init(_all:)(12.5);
      v186 = v185;
      v188 = v187;
      v190 = v189;
      v191 = v276;
      sub_100007ADC(v180, v276, &qword_10015E568);
      v192 = v285;
      v193 = v191 + *(int *)(v285 + 36);
      *(_BYTE *)v193 = v183;
      *(double *)(v193 + 8) = v184;
      *(_QWORD *)(v193 + 16) = v186;
      v76 = v169;
      v83 = *(double *)&v333;
      v78 = v171;
      *(_QWORD *)(v193 + 24) = v188;
      *(_QWORD *)(v193 + 32) = v190;
      v80 = v174;
      v87 = v315;
      v85 = v316;
      v82 = v177;
      v89 = v314;
      *(_BYTE *)(v193 + 40) = 0;
      sub_100008194(v180, &qword_10015E568);
      v194 = v278;
      sub_100007A98(v191, v278, &qword_10015E570);
      v195 = v287;
      sub_100007ADC(v194, v287, &qword_10015E570);
      swift_storeEnumTagMultiPayload(v195, v286, 0);
      v196 = sub_10002F598();
      v197 = sub_10002F624();
      v198 = v322;
      _ConditionalContent<>.init(storage:)(v195, v192, v288, v196, v197);
      sub_100008194(v194, &qword_10015E570);
      v199 = sub_100003E70(&qword_10015E5F8);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v199 - 8) + 56))(v198, 0, 1, v199);
      v200 = v290;
      sub_100007A98(v198, v290, &qword_10015E578);
      goto LABEL_8;
    }
  }
  v201 = v157[1];
  *(_QWORD *)&v352 = *v157;
  *((_QWORD *)&v352 + 1) = v201;
  State.wrappedValue.getter(&v341, v333);
  v202 = v341;
  v203 = *(_QWORD *)(v341 + 56);
  v204 = *(_QWORD *)(v341 + 64);
  sub_100008170((_QWORD *)(v341 + 32), v203);
  v205 = (uint64_t)v289;
  (*(void (**)(uint64_t, uint64_t))(v204 + 64))(v203, v204);
  swift_release(v202);
  v206 = v156;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v153)(v205, 1, v156) == 1)
  {
    sub_100008194(v205, &qword_100165370);
    v207 = sub_100003E70(&qword_10015E5F8);
    v200 = v290;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v207 - 8) + 56))(v290, 1, 1, v207);
    v198 = v322;
  }
  else
  {
    v208 = v321;
    v209 = v205;
    v210 = (uint64_t)v284;
    v211 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v321 + 32))(v284, v209, v206);
    v212 = static HorizontalAlignment.leading.getter(v211);
    v213 = (uint64_t)v280;
    *v280 = v212;
    *(_QWORD *)(v213 + 8) = 0x4026000000000000;
    *(_BYTE *)(v213 + 16) = 0;
    v214 = sub_100003E70(&qword_10015E608);
    v215 = sub_10002BEE4((uint64_t)v157, v210, (char *)(v213 + *(int *)(v214 + 44)));
    v216 = static Edge.Set.leading.getter(v215);
    v217 = EdgeInsets.init(_all:)(20.0);
    *(double *)&v333 = v83;
    v218 = v76;
    v219 = v217;
    v315 = v87;
    v316 = v85;
    v220 = v78;
    v222 = v221;
    v223 = v80;
    v225 = v224;
    v314 = v89;
    v226 = v82;
    v228 = v227;
    v229 = v282;
    sub_100007ADC(v213, v282, &qword_10015E540);
    v230 = v229 + *(int *)(v279 + 36);
    *(_BYTE *)v230 = v216;
    *(double *)(v230 + 8) = v219;
    *(_QWORD *)(v230 + 16) = v222;
    *(_QWORD *)(v230 + 24) = v225;
    *(_QWORD *)(v230 + 32) = v228;
    *(_BYTE *)(v230 + 40) = 0;
    v231 = sub_100008194(v213, &qword_10015E540);
    v232 = static Edge.Set.top.getter(v231);
    v233 = EdgeInsets.init(_all:)(12.5);
    v235 = v234;
    v237 = v236;
    v239 = v238;
    v240 = v281;
    sub_100007ADC(v229, v281, &qword_10015E548);
    v241 = v288;
    v242 = v240 + *(int *)(v288 + 36);
    *(_BYTE *)v242 = v232;
    *(double *)(v242 + 8) = v233;
    *(_QWORD *)(v242 + 16) = v235;
    v76 = v218;
    v83 = *(double *)&v333;
    v78 = v220;
    *(_QWORD *)(v242 + 24) = v237;
    *(_QWORD *)(v242 + 32) = v239;
    v80 = v223;
    v87 = v315;
    v85 = v316;
    v82 = v226;
    v89 = v314;
    *(_BYTE *)(v242 + 40) = 0;
    sub_100008194(v229, &qword_10015E548);
    v243 = v283;
    sub_100007A98(v240, v283, &qword_10015E550);
    v244 = v287;
    sub_100007ADC(v243, v287, &qword_10015E550);
    swift_storeEnumTagMultiPayload(v244, v286, 1);
    v245 = sub_10002F598();
    v246 = sub_10002F624();
    v198 = v322;
    _ConditionalContent<>.init(storage:)(v244, v285, v241, v245, v246);
    sub_100008194(v243, &qword_10015E550);
    v247 = sub_100003E70(&qword_10015E5F8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v247 - 8) + 56))(v198, 0, 1, v247);
    v248 = v290;
    sub_100007A98(v198, v290, &qword_10015E578);
    v249 = v210;
    v200 = v248;
    (*(void (**)(uint64_t, uint64_t))(v208 + 8))(v249, v320);
  }
LABEL_8:
  v250 = v385;
  LODWORD(v333) = v385;
  v340[0] = v376[0];
  *(_DWORD *)((char *)v340 + 3) = *(_DWORD *)((char *)v376 + 3);
  v251 = v384;
  LODWORD(v321) = v384;
  v339[0] = *(_DWORD *)v383;
  *(_DWORD *)((char *)v339 + 3) = *(_DWORD *)&v383[3];
  *(_DWORD *)((char *)v338 + 3) = *(_DWORD *)&v382[3];
  v338[0] = *(_DWORD *)v382;
  *(_DWORD *)((char *)v337 + 3) = *(_DWORD *)&v381[3];
  v337[0] = *(_DWORD *)v381;
  v252 = v380;
  LODWORD(v320) = v380;
  *(_DWORD *)((char *)v336 + 3) = *(_DWORD *)&v379[3];
  v336[0] = *(_DWORD *)v379;
  *(_DWORD *)((char *)v335 + 3) = *(_DWORD *)&v378[3];
  v335[0] = *(_DWORD *)v378;
  v253 = v330;
  v254 = *(void (**)(char *, char *, uint64_t))(v329 + 16);
  v255 = v377;
  v254(v332, v331, v330);
  sub_100007ADC(v200, v198, &qword_10015E578);
  *(_QWORD *)&v341 = v328;
  *((_QWORD *)&v341 + 1) = v327;
  LOBYTE(v342) = v250;
  *(_DWORD *)((char *)&v342 + 1) = v376[0];
  DWORD1(v342) = *(_DWORD *)((char *)v376 + 3);
  v256 = v318;
  *((_QWORD *)&v342 + 1) = v318;
  *(_QWORD *)&v343 = KeyPath;
  *((_QWORD *)&v343 + 1) = 2;
  LOBYTE(v344) = v251;
  *(_DWORD *)((char *)&v344 + 1) = *(_DWORD *)v383;
  DWORD1(v344) = *(_DWORD *)&v383[3];
  *((_QWORD *)&v344 + 1) = v324;
  LOBYTE(v345) = 0;
  DWORD1(v345) = *(_DWORD *)&v382[3];
  *(_DWORD *)((char *)&v345 + 1) = *(_DWORD *)v382;
  BYTE8(v345) = v326;
  *(_DWORD *)((char *)&v345 + 9) = *(_DWORD *)v381;
  HIDWORD(v345) = *(_DWORD *)&v381[3];
  *(double *)&v346 = v76;
  *((_QWORD *)&v346 + 1) = v78;
  *(_QWORD *)&v347 = v80;
  *((_QWORD *)&v347 + 1) = v82;
  LOBYTE(v348) = v252;
  *(_DWORD *)((char *)&v348 + 1) = *(_DWORD *)v379;
  DWORD1(v348) = *(_DWORD *)&v379[3];
  BYTE8(v348) = v323;
  HIDWORD(v348) = *(_DWORD *)&v378[3];
  *(_DWORD *)((char *)&v348 + 9) = *(_DWORD *)v378;
  *(double *)&v349 = v83;
  *((_QWORD *)&v349 + 1) = v85;
  *(_QWORD *)&v350 = v87;
  *((_QWORD *)&v350 + 1) = v89;
  LODWORD(v316) = v255;
  v351 = v255;
  v257 = v349;
  v258 = v350;
  v259 = v198;
  v260 = v319;
  v319[160] = v255;
  *((_OWORD *)v260 + 8) = v257;
  *((_OWORD *)v260 + 9) = v258;
  v261 = v342;
  *(_OWORD *)v260 = v341;
  *((_OWORD *)v260 + 1) = v261;
  v262 = v343;
  v263 = v344;
  v264 = v348;
  *((_OWORD *)v260 + 6) = v347;
  *((_OWORD *)v260 + 7) = v264;
  v265 = v346;
  *((_OWORD *)v260 + 4) = v345;
  *((_OWORD *)v260 + 5) = v265;
  *((_OWORD *)v260 + 2) = v262;
  *((_OWORD *)v260 + 3) = v263;
  v266 = sub_100003E70(&qword_10015E600);
  v254(&v260[*(int *)(v266 + 48)], v332, v253);
  sub_100007ADC(v259, (uint64_t)&v260[*(int *)(v266 + 64)], &qword_10015E578);
  sub_10002F4E8((uint64_t)&v341);
  LOBYTE(v266) = v317 & 1;
  v267 = v327;
  v268 = v328;
  sub_10000C008(v328, v327, v317 & 1);
  swift_bridgeObjectRetain(v256);
  v269 = KeyPath;
  swift_retain(KeyPath);
  v270 = v324;
  swift_retain(v324);
  sub_100008194(v200, &qword_10015E578);
  v271 = v330;
  v272 = *(void (**)(char *, uint64_t))(v329 + 8);
  v272(v331, v330);
  sub_10000BFF8(v268, v267, v266);
  swift_release(v270);
  swift_release(v269);
  swift_bridgeObjectRelease(v256);
  sub_100008194(v322, &qword_10015E578);
  v272(v332, v271);
  *(_QWORD *)&v352 = v268;
  *((_QWORD *)&v352 + 1) = v267;
  LOBYTE(v353) = v333;
  *(_DWORD *)((char *)&v353 + 1) = v340[0];
  DWORD1(v353) = *(_DWORD *)((char *)v340 + 3);
  *((_QWORD *)&v353 + 1) = v256;
  v354 = v269;
  v355 = 2;
  v356 = v321;
  *(_DWORD *)v357 = v339[0];
  *(_DWORD *)&v357[3] = *(_DWORD *)((char *)v339 + 3);
  v358 = v270;
  v359 = 0;
  *(_DWORD *)&v360[3] = *(_DWORD *)((char *)v338 + 3);
  *(_DWORD *)v360 = v338[0];
  v361 = v326;
  *(_DWORD *)&v362[3] = *(_DWORD *)((char *)v337 + 3);
  *(_DWORD *)v362 = v337[0];
  v363 = v76;
  v364 = v78;
  v365 = v80;
  v366 = v82;
  v367 = v320;
  *(_DWORD *)&v368[3] = *(_DWORD *)((char *)v336 + 3);
  *(_DWORD *)v368 = v336[0];
  v369 = v323;
  *(_DWORD *)&v370[3] = *(_DWORD *)((char *)v335 + 3);
  *(_DWORD *)v370 = v335[0];
  v371 = v83;
  v372 = v85;
  v373 = v87;
  v374 = v89;
  v375 = (char)v316;
  return sub_10002F540((uint64_t)&v352);
}

uint64_t sub_10002AF6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  _BYTE v29[16];
  _QWORD *v30;
  _QWORD v31[2];
  uint64_t v32;

  v28[1] = a2;
  v3 = type metadata accessor for PinnedScrollableViews(0);
  __chkstk_darwin(v3);
  v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for GridItem.Size(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (_OWORD *)((char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for GridItem(0);
  __chkstk_darwin(v10);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003E70(&qword_10015E5B8);
  v28[0] = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[1];
  v31[0] = *a1;
  v31[1] = v16;
  v17 = sub_100003E70(&qword_10015E538);
  State.wrappedValue.getter(&v32, v17);
  v18 = v32;
  *v9 = xmmword_10010B410;
  (*(void (**)(_OWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for GridItem.Size.flexible(_:), v6);
  GridItem.init(_:spacing:alignment:)(v9, 0x4008000000000000, 0, 0, 0, 1);
  v19 = sub_10001025C();
  v20 = sub_100029370((uint64_t)v12, v19);
  v21 = swift_release(v18);
  v30 = a1;
  v22 = static VerticalAlignment.center.getter(v21);
  LODWORD(v31[0]) = 0;
  v23 = sub_100003B3C(&qword_10015E668, (uint64_t (*)(uint64_t))&type metadata accessor for PinnedScrollableViews, (uint64_t)&protocol conformance descriptor for PinnedScrollableViews);
  dispatch thunk of OptionSet.init(rawValue:)(v31, v3, v23);
  v24 = sub_100003E70(&qword_10015E670);
  v25 = sub_10002F954();
  LazyHGrid.init(rows:alignment:spacing:pinnedViews:content:)(v20, v22, 0x4024000000000000, 0, v5, sub_10002F94C, v29, v24, v25);
  v26 = sub_100007D40(&qword_10015E5C0, &qword_10015E5B8, (uint64_t)&protocol conformance descriptor for LazyHGrid<A>);
  View.scrollTargetLayout(isEnabled:)(1, v13, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v28[0] + 8))(v15, v13);
}

uint64_t sub_10002B1F4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v32 = a2;
  v3 = type metadata accessor for SetlistView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = a1[1];
  v33 = *a1;
  v34 = v6;
  v7 = sub_100003E70(&qword_10015E538);
  State.wrappedValue.getter(&v37, v7);
  v8 = v37;
  v9 = v37[7];
  v10 = v37[8];
  sub_100008170(v37 + 4, v9);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 48))(v9, v10);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v10);
  v13 = sub_100003E70(&qword_10015D970);
  v14 = _arrayForceCast<A, B>(_:)(v11, AssociatedTypeWitness, v13);
  swift_release(v8);
  swift_bridgeObjectRelease(v11);
  v37 = (_QWORD *)v14;
  KeyPath = swift_getKeyPath(&unk_10010BFE8);
  sub_100028390((uint64_t)a1, (uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SetlistView);
  v15 = *(unsigned __int8 *)(v4 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_10014D918, v16 + v5, v15 | 7);
  sub_100030810((uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, type metadata accessor for SetlistView);
  v18 = sub_100003E70(&qword_10015E698);
  v19 = sub_100003E70(&qword_10015E6A0);
  v20 = sub_100007D40(&qword_10015E6A8, &qword_10015E698, (uint64_t)&protocol conformance descriptor for [A]);
  v21 = sub_10002F2B0();
  v22 = sub_1000034AC(&qword_10015E680);
  v23 = sub_1000034AC(&qword_10015E688);
  v24 = type metadata accessor for PlainButtonStyle(255);
  v25 = sub_100007D40(&qword_10015E690, &qword_10015E688, (uint64_t)&protocol conformance descriptor for Button<A>);
  v26 = sub_100003B3C(&qword_10015E348, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v33 = v23;
  v34 = v24;
  v35 = v25;
  v36 = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v33 = v22;
  v34 = OpaqueTypeConformance2;
  v28 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  return ForEach<>.init(_:id:content:)(&v37, KeyPath, sub_10002FAB0, v17, v18, v19, v20, v21, v28);
}

uint64_t sub_10002B488@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t OpaqueTypeConformance2;
  char *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54[16];
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;

  v53 = a3;
  v45 = type metadata accessor for PlainButtonStyle(0);
  v47 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SetlistView(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003E70(&qword_10015E688);
  v46 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003E70(&qword_10015E680);
  v51 = *(_QWORD *)(v14 - 8);
  v52 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003E70(&qword_10015E6A0);
  v49 = *(_QWORD *)(v17 - 8);
  v50 = v17;
  __chkstk_darwin(v17);
  v48 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100028390((uint64_t)a2, (uint64_t)v10, type metadata accessor for SetlistView);
  v19 = a1;
  sub_1000081D0(a1, (uint64_t)&v60);
  v20 = *(unsigned __int8 *)(v8 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = (v9 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_10014D940, v22 + 40, v20 | 7);
  sub_100030810((uint64_t)v10, v23 + v21, type metadata accessor for SetlistView);
  v24 = v23 + v22;
  v25 = v45;
  sub_100011A9C(&v60, v24);
  v55 = a2;
  v56 = v19;
  v26 = sub_100003E70(&qword_10015E6B0);
  v27 = sub_10002FC94();
  v28 = Button.init(action:label:)(sub_10002FC4C, v23, sub_10002FC8C, v54, v26, v27);
  PlainButtonStyle.init()(v28);
  v29 = sub_100007D40(&qword_10015E690, &qword_10015E688, (uint64_t)&protocol conformance descriptor for Button<A>);
  v30 = sub_100003B3C(&qword_10015E348, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  View.buttonStyle<A>(_:)(v6, v11, v25, v29, v30);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v6, v25);
  v31 = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v13, v11);
  v32 = static Axis.Set.horizontal.getter(v31);
  v33 = a2[1];
  v57 = *a2;
  v58 = v33;
  v34 = sub_100003E70(&qword_10015E538);
  State.wrappedValue.getter(&v59, v34);
  LOBYTE(v13) = *(_BYTE *)(v59 + 72);
  v35 = swift_release(v59);
  if ((v13 & 1) != 0)
  {
    v36 = 1;
  }
  else
  {
    v35 = sub_1000294A0();
    v36 = v35;
  }
  v37 = static Alignment.center.getter(v35);
  v39 = v38;
  *(_QWORD *)&v60 = v11;
  *((_QWORD *)&v60 + 1) = v25;
  v61 = v29;
  v62 = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v60, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v41 = v48;
  v42 = v52;
  View.containerRelativeFrame(_:count:span:spacing:alignment:)(v32, v36, 1, v37, v39, v52, OpaqueTypeConformance2, 10.0);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v16, v42);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v53, v41, v50);
}

uint64_t sub_10002B820(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = sub_100003E70(&qword_10015E538);
  State.wrappedValue.getter(&v11, v4);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = v11;
    swift_retain(*(_QWORD *)(a1 + 16));
    sub_100010780(a2, v5);
    swift_release(v6);
    return swift_release(v5);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = type metadata accessor for RemoteViewConfiguration();
    v10 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    result = EnvironmentObject.error()(0, v8, v9, v10);
    __break(1u);
  }
  return result;
}

uint64_t sub_10002B8E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  __int128 v26[2];

  v6 = type metadata accessor for SetlistSongRowView(0);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = a1[1];
  *(_QWORD *)&v26[0] = *a1;
  v9 = *(_QWORD *)&v26[0];
  *((_QWORD *)&v26[0] + 1) = v10;
  v11 = sub_100003E70(&qword_10015E538);
  State.wrappedValue.getter(v24, v11);
  v12 = v24[0];
  v13 = *(_QWORD *)(v24[0] + 16);
  v14 = *(_QWORD *)(v24[0] + 24);
  swift_bridgeObjectRetain(v14);
  swift_release(v12);
  sub_1000081D0(a2, (uint64_t)v26);
  v24[0] = v9;
  v24[1] = v10;
  State.wrappedValue.getter(&v25, v11);
  v15 = v25;
  v16 = type metadata accessor for SetlistSongRowViewModel(0);
  v17 = (_QWORD *)swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  ObservationRegistrar.init()(v17);
  v17[2] = v13;
  v17[3] = v14;
  sub_100011A9C(v26, (uint64_t)(v17 + 5));
  v17[4] = v15;
  *v8 = v17;
  v18 = type metadata accessor for RemoteViewConfiguration();
  v19 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
  v8[1] = EnvironmentObject.init()(v18, v19);
  v8[2] = v20;
  v21 = (_QWORD *)((char *)v8 + *(int *)(v6 + 24));
  *v21 = swift_getKeyPath(&unk_10010BF88);
  v22 = sub_100003E70(&qword_10015D600);
  swift_storeEnumTagMultiPayload(v21, v22, 0);
  sub_100028390((uint64_t)v8, a3, type metadata accessor for SetlistSongRowView);
  *(_BYTE *)(a3 + *(int *)(sub_100003E70(&qword_10015E6B0) + 36)) = 0;
  return sub_1000283D4((uint64_t)v8, type metadata accessor for SetlistSongRowView);
}

uint64_t sub_10002BAAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = sub_100003E70(&qword_10015E538);
  State.wrappedValue.getter(&v11, v2);
  v3 = v11;
  v5 = *(_QWORD *)(v11 + 16);
  v4 = *(_QWORD *)(v11 + 24);
  swift_bridgeObjectRetain(v4);
  swift_release(v3);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    swift_retain(*(_QWORD *)(a1 + 16));
    sub_1000DB03C(v5, v4, 8, 11, 24, 0, 3u, v6);
    swift_bridgeObjectRelease(v4);
    return swift_release(v6);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = type metadata accessor for RemoteViewConfiguration();
    v10 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    result = EnvironmentObject.error()(0, v8, v9, v10);
    __break(1u);
  }
  return result;
}

uint64_t sub_10002BB98@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v46 = a2;
  v3 = type metadata accessor for SetlistDetailSection(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003E70(&qword_10015E648);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v46 - v10;
  v12 = type metadata accessor for Divider(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v46 - v18;
  Divider.init()(v17);
  v20 = a1[1];
  v48 = *a1;
  v49 = v20;
  v21 = sub_100003E70(&qword_10015E538);
  State.wrappedValue.getter(&v47, v21);
  v22 = type metadata accessor for SetlistViewModel(0);
  State.init(wrappedValue:)(&v47, v22);
  v23 = v49;
  *(_QWORD *)v5 = v48;
  *((_QWORD *)v5 + 1) = v23;
  LOBYTE(v47) = 0;
  State.init(wrappedValue:)(&v47, &type metadata for Bool);
  v24 = v49;
  v5[16] = v48;
  *((_QWORD *)v5 + 3) = v24;
  v25 = type metadata accessor for RemoteViewConfiguration();
  v26 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
  *((_QWORD *)v5 + 4) = EnvironmentObject.init()(v25, v26);
  *((_QWORD *)v5 + 5) = v27;
  v28 = &v5[*(int *)(v3 + 28)];
  *(_QWORD *)v28 = swift_getKeyPath(&unk_10010BF88);
  v29 = sub_100003E70(&qword_10015D600);
  swift_storeEnumTagMultiPayload(v28, v29, 0);
  v30 = &v5[*(int *)(v3 + 32)];
  *(_QWORD *)v30 = swift_getKeyPath(&unk_10010BFB8);
  v31 = sub_100003E70(&qword_10015D490);
  v32 = swift_storeEnumTagMultiPayload(v30, v31, 0);
  LOBYTE(v30) = static Edge.Set.trailing.getter(v32);
  v33 = EdgeInsets.init(_all:)(20.0);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  sub_100028390((uint64_t)v5, (uint64_t)v9, type metadata accessor for SetlistDetailSection);
  v40 = &v9[*(int *)(v6 + 36)];
  *v40 = (char)v30;
  *((double *)v40 + 1) = v33;
  *((_QWORD *)v40 + 2) = v35;
  *((_QWORD *)v40 + 3) = v37;
  *((_QWORD *)v40 + 4) = v39;
  v40[40] = 0;
  sub_1000283D4((uint64_t)v5, type metadata accessor for SetlistDetailSection);
  sub_100007A98((uint64_t)v9, (uint64_t)v11, &qword_10015E648);
  v41 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v41(v16, v19, v12);
  sub_100007ADC((uint64_t)v11, (uint64_t)v9, &qword_10015E648);
  v42 = v46;
  v41(v46, v16, v12);
  v43 = sub_100003E70(&qword_10015E650);
  sub_100007ADC((uint64_t)v9, (uint64_t)&v42[*(int *)(v43 + 48)], &qword_10015E648);
  sub_100008194((uint64_t)v11, &qword_10015E648);
  v44 = *(void (**)(char *, uint64_t))(v13 + 8);
  v44(v19, v12);
  sub_100008194((uint64_t)v9, &qword_10015E648);
  return ((uint64_t (*)(char *, uint64_t))v44)(v16, v12);
}

uint64_t sub_10002BEE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53[16];
  uint64_t v54;

  v48 = a2;
  v52 = a3;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SetlistView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003E70(&qword_10015E658);
  v13 = *(_QWORD *)(v12 - 8);
  v50 = v12;
  v51 = v13;
  v14 = __chkstk_darwin(v12);
  v49 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v47 = (char *)&v43 - v16;
  v17 = type metadata accessor for Divider(0);
  v46 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v45 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v43 - v21;
  v44 = (char *)&v43 - v21;
  Divider.init()(v20);
  sub_100028390(a1, (uint64_t)v11, type metadata accessor for SetlistView);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v48, v4);
  v23 = *(unsigned __int8 *)(v9 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = *(unsigned __int8 *)(v5 + 80);
  v26 = (v10 + v25 + v24) & ~v25;
  v27 = swift_allocObject(&unk_10014D8F0, v26 + v6, v23 | v25 | 7);
  sub_100030810((uint64_t)v11, v27 + v24, type metadata accessor for SetlistView);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v27 + v26, v7, v4);
  v54 = a1;
  v28 = sub_100003E70(&qword_10015DAA0);
  v29 = sub_100014248();
  v30 = v47;
  Button.init(action:label:)(sub_10002F914, v27, sub_10002F928, v53, v28, v29);
  v31 = v45;
  v32 = v46;
  v33 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v33(v45, v22, v17);
  v34 = v50;
  v35 = v51;
  v36 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  v37 = v49;
  v36(v49, v30, v50);
  v38 = v52;
  v33(v52, v31, v17);
  v39 = sub_100003E70(&qword_10015E660);
  v36(&v38[*(int *)(v39 + 48)], v37, v34);
  v40 = *(void (**)(char *, uint64_t))(v35 + 8);
  v40(v30, v34);
  v41 = *(void (**)(char *, uint64_t))(v32 + 8);
  v41(v44, v17);
  v40(v37, v34);
  return ((uint64_t (*)(char *, uint64_t))v41)(v31, v17);
}

uint64_t sub_10002C1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v3 = type metadata accessor for OpenURLAction(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SetlistView(0);
  sub_10001D83C((uint64_t)v6);
  OpenURLAction.callAsFunction(_:)(a2);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10002C270@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  _QWORD v35[2];
  uint64_t v36;

  v3 = a1[1];
  v35[0] = *a1;
  v35[1] = v3;
  v4 = sub_100003E70(&qword_10015E538);
  State.wrappedValue.getter(&v36, v4);
  v5 = v36;
  v6 = *(_QWORD *)(v36 + 112);
  v7 = *(_QWORD *)(v36 + 120);
  v8 = *(unsigned __int8 *)(v36 + 128);
  v9 = *(_QWORD *)(v36 + 136);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_release(v5);
  v10 = Text.init(_:tableName:bundle:comment:)(v6, v7, v8, v9, 0, 0, 0, 0, 0, 256);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = static Font.body.getter(v10);
  static Font.Weight.regular.getter();
  v18 = Font.weight(_:)(v17);
  swift_release(v17);
  v19 = Text.font(_:)(v18, v10, v12, v16, v14);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  swift_release(v18);
  LOBYTE(v18) = v23 & 1;
  sub_10000BFF8(v10, v12, v16);
  v26 = swift_bridgeObjectRelease(v14);
  v27 = static Color.blue.getter(v26);
  v35[0] = v27;
  v28 = Text.foregroundStyle<A>(_:)(v35, v19, v21, v23 & 1, v25, &type metadata for Color, &protocol witness table for Color);
  v30 = v29;
  LOBYTE(v16) = v31;
  v33 = v32;
  sub_10000BFF8(v19, v21, v18);
  swift_release(v27);
  swift_bridgeObjectRelease(v25);
  result = swift_getKeyPath(&unk_10010BF00);
  *(_QWORD *)a2 = v28;
  *(_QWORD *)(a2 + 8) = v30;
  *(_BYTE *)(a2 + 16) = v16 & 1;
  *(_QWORD *)(a2 + 24) = v33;
  *(_QWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 0;
  return result;
}

uint64_t sub_10002C434(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 40) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 48) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_10002C4A0, v3, v4);
}

uint64_t sub_10002C4A0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD **)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 48));
  v2 = v1[1];
  *(_QWORD *)(v0 + 16) = *v1;
  *(_QWORD *)(v0 + 24) = v2;
  v3 = sub_100003E70(&qword_10015E538);
  State.wrappedValue.getter((_QWORD *)(v0 + 32), v3);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD **)(v4 + 200);
  v6 = v5[5];
  v7 = v5[6];
  sub_100008170(v5 + 2, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 48))(v6, v7);
  swift_release(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002C53C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SetlistView(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_10015E524);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000072F4;
  return sub_10002C434(v3);
}

uint64_t sub_10002C5A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = static Color.black.getter();
  v1 = Color.opacity(_:)(0.1);
  result = swift_release(v0);
  qword_10015E468 = v1;
  return result;
}

uint64_t sub_10002C5E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  v1 = Font.weight(_:)(v0);
  result = swift_release(v0);
  qword_10015E470 = v1;
  return result;
}

uint64_t sub_10002C620@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t OpaqueTypeConformance2;
  char *v94;
  uint64_t v95;
  __n128 v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __n128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  double v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  _QWORD *v199;
  uint64_t v200;

  v191 = a2;
  v3 = type metadata accessor for PlainButtonStyle(0);
  v189 = *(_QWORD *)(v3 - 8);
  v190 = v3;
  __chkstk_darwin(v3);
  v188 = (char *)&v153 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v5);
  v176 = (char *)&v153 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_100003E70(&qword_10015E7C0);
  v177 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v175 = (char *)&v153 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = sub_100003E70(&qword_10015E7C8);
  __chkstk_darwin(v181);
  v182 = (char *)&v153 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_100003E70(&qword_10015E7D0);
  v184 = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186);
  v183 = (char *)&v153 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_100003E70(&qword_10015E7D8);
  v10 = __chkstk_darwin(v180);
  v187 = (uint64_t)&v153 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v179 = (char *)&v153 - v13;
  __chkstk_darwin(v12);
  v185 = (uint64_t)&v153 - v14;
  v15 = type metadata accessor for SetlistDetailSection(0);
  v171 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v172 = v16;
  v173 = (uint64_t)&v153 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = type metadata accessor for Text.Suffix(0);
  v157 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v156 = (char *)&v153 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = sub_100003E70(&qword_10015E7E0);
  v160 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v159 = (char *)&v153 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = sub_100003E70(&qword_10015E7E8);
  v165 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166);
  v164 = (char *)&v153 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_100003E70(&qword_10015E7F0);
  v169 = *(_QWORD *)(v170 - 8);
  v20 = __chkstk_darwin(v170);
  v163 = (char *)&v153 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v161 = (uint64_t)&v153 - v22;
  v23 = sub_100003E70(&qword_10015D950);
  __chkstk_darwin(v23);
  v25 = (char *)&v153 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for AttributedString(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v153 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v167 = (char *)&v153 - v31;
  v32 = sub_100003E70(&qword_10015E7F8);
  v33 = __chkstk_darwin(v32);
  v174 = (uint64_t)&v153 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v36 = (char *)&v153 - v35;
  v37 = *(_QWORD *)(a1 + 8);
  v192 = *(_QWORD *)a1;
  v193 = v37;
  v168 = sub_100003E70(&qword_10015E538);
  State.wrappedValue.getter(&v200, v168);
  v38 = v200;
  KeyPath = swift_getKeyPath(&unk_10010C078);
  v192 = v38;
  v40 = sub_100003B3C(&qword_10015D958, type metadata accessor for SetlistViewModel, (uint64_t)&unk_10010B100);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v192, KeyPath, v40);
  swift_release(KeyPath);
  v41 = v38 + OBJC_IVAR____TtC16EventViewService16SetlistViewModel__formattedStandardDescription;
  swift_beginAccess(v38 + OBJC_IVAR____TtC16EventViewService16SetlistViewModel__formattedStandardDescription, &v200, 0, 0);
  sub_100007ADC(v41, (uint64_t)v25, &qword_10015D950);
  v42 = swift_release(v38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v27 + 48))(v25, 1, v26, v42) == 1)
  {
    sub_100008194((uint64_t)v25, &qword_10015D950);
    v43 = 1;
    v44 = v173;
    v45 = v190;
    v46 = v172;
    v47 = v171;
    v48 = v170;
  }
  else
  {
    v155 = v36;
    v49 = v167;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v167, v25, v26);
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v30, v49, v26);
    v50 = Text.init(_:)(v30);
    v154 = v26;
    v153 = v27;
    v51 = v50;
    v53 = v52;
    v55 = v54;
    v57 = v56;
    if (qword_10015CE38 != -1)
      swift_once(&qword_10015CE38, sub_10002C5E0);
    v58 = v55 & 1;
    v59 = Text.font(_:)(qword_10015E470, v51, v53, v55 & 1, v57);
    v61 = v60;
    v63 = v62;
    v65 = v64 & 1;
    sub_10000BFF8(v51, v53, v58);
    v66 = swift_bridgeObjectRelease(v57);
    LODWORD(v192) = static HierarchicalShapeStyle.secondary.getter(v66);
    v67 = Text.foregroundStyle<A>(_:)(&v192, v59, v61, v65, v63, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v69 = v68;
    v71 = v70;
    v73 = v72;
    sub_10000BFF8(v59, v61, v65);
    swift_bridgeObjectRelease(v63);
    v74 = *(_QWORD *)(a1 + 24);
    LOBYTE(v192) = *(_BYTE *)(a1 + 16);
    v193 = v74;
    v75 = sub_100003E70(&qword_10015E858);
    State.wrappedValue.getter(&v199, v75);
    v76 = (char)v199;
    if ((_BYTE)v199)
      v77 = 0;
    else
      v77 = 2;
    v78 = swift_getKeyPath(&unk_10010BF00);
    v192 = v67;
    v193 = v69;
    v194 = v71 & 1;
    v195 = v73;
    v196 = v78;
    v197 = v77;
    v198 = v76;
    v79 = sub_10002D370();
    v81 = v80;
    v83 = v82;
    v85 = v84 & 1;
    v86 = v156;
    static Text.Suffix.truncated(_:)();
    sub_10000BFF8(v79, v81, v85);
    swift_bridgeObjectRelease(v83);
    v87 = sub_100003E70(&qword_10015DAA0);
    v88 = sub_100014248();
    v89 = v159;
    View.textSuffix(_:)(v86, v87, v88);
    (*(void (**)(char *, uint64_t))(v157 + 8))(v86, v158);
    sub_10000BFF8(v192, v193, v194);
    swift_bridgeObjectRelease(v195);
    swift_release(v196);
    v44 = v173;
    sub_100028390(a1, v173, type metadata accessor for SetlistDetailSection);
    v47 = v171;
    v90 = *(unsigned __int8 *)(v171 + 80);
    v91 = (v90 + 16) & ~v90;
    v46 = v172;
    v92 = swift_allocObject(&unk_10014D9B8, v91 + v172, v90 | 7);
    sub_100030810(v44, v92 + v91, type metadata accessor for SetlistDetailSection);
    v192 = v87;
    v193 = v88;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v192, &opaque type descriptor for <<opaque return type of View.textSuffix(_:)>>, 1);
    v94 = v164;
    v95 = v162;
    View.onTapGesture(count:perform:)(1, sub_100030BD0, v92, v162, OpaqueTypeConformance2);
    v96 = swift_release(v92);
    v97 = (*(uint64_t (**)(char *, uint64_t, __n128))(v160 + 8))(v89, v95, v96);
    LOBYTE(v95) = static Edge.Set.top.getter(v97);
    v98 = EdgeInsets.init(_all:)(11.0);
    v100 = v99;
    v102 = v101;
    v104 = v103;
    v105 = v165;
    v106 = (uint64_t)v163;
    v107 = v166;
    (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v163, v94, v166);
    v48 = v170;
    v108 = v106 + *(int *)(v170 + 36);
    *(_BYTE *)v108 = v95;
    *(double *)(v108 + 8) = v98;
    *(_QWORD *)(v108 + 16) = v100;
    *(_QWORD *)(v108 + 24) = v102;
    *(_QWORD *)(v108 + 32) = v104;
    *(_BYTE *)(v108 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v105 + 8))(v94, v107);
    (*(void (**)(char *, uint64_t))(v153 + 8))(v167, v154);
    v109 = v161;
    sub_100007A98(v106, v161, &qword_10015E7F0);
    v110 = v109;
    v36 = v155;
    sub_100007A98(v110, (uint64_t)v155, &qword_10015E7F0);
    v43 = 0;
    v45 = v190;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v169 + 56))(v36, v43, 1, v48);
  sub_100028390(a1, v44, type metadata accessor for SetlistDetailSection);
  v111 = *(unsigned __int8 *)(v47 + 80);
  v112 = (uint64_t)v36;
  v113 = (v111 + 16) & ~v111;
  v114 = swift_allocObject(&unk_10014D990, v113 + v46, v111 | 7);
  v115 = sub_100030810(v44, v114 + v113, type metadata accessor for SetlistDetailSection);
  __chkstk_darwin(v115);
  *(&v153 - 2) = a1;
  v116 = sub_100003E70(&qword_10015E800);
  v117 = sub_100030A40();
  v118 = v175;
  Button.init(action:label:)(sub_1000309E4, v114, sub_100030A38, &v153 - 4, v116, v117);
  v119 = *(_QWORD *)(a1 + 8);
  v192 = *(_QWORD *)a1;
  v193 = v119;
  State.wrappedValue.getter(&v199, v168);
  v120 = v199;
  v121 = v199[7];
  v122 = v199[8];
  sub_100008170(v199 + 4, v121);
  v123 = (uint64_t)v176;
  (*(void (**)(uint64_t, uint64_t))(v122 + 64))(v121, v122);
  v124 = type metadata accessor for URL(0);
  LOBYTE(v114) = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v124 - 8) + 48))(v123, 1, v124) != 1;
  sub_100008194(v123, &qword_100165370);
  v125 = swift_release(v120);
  v126 = v177;
  v127 = (uint64_t)v182;
  v128 = v178;
  (*(void (**)(char *, char *, uint64_t, __n128))(v177 + 16))(v182, v118, v178, v125);
  v129 = v181;
  *(_BYTE *)(v127 + *(int *)(v181 + 36)) = v114;
  v130 = (*(uint64_t (**)(char *, uint64_t))(v126 + 8))(v118, v128);
  v131 = v188;
  PlainButtonStyle.init()(v130);
  v132 = sub_100030B48();
  v133 = sub_100003B3C(&qword_10015E348, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v134 = v183;
  View.buttonStyle<A>(_:)(v131, v129, v45, v132, v133);
  (*(void (**)(char *, uint64_t))(v189 + 8))(v131, v45);
  v135 = sub_100008194(v127, &qword_10015E7C8);
  LOBYTE(v132) = static Edge.Set.top.getter(v135);
  v136 = EdgeInsets.init(_all:)(24.0);
  v138 = v137;
  v140 = v139;
  v142 = v141;
  v143 = v184;
  v144 = (uint64_t)v179;
  v145 = v186;
  (*(void (**)(char *, char *, uint64_t))(v184 + 16))(v179, v134, v186);
  v146 = v144 + *(int *)(v180 + 36);
  *(_BYTE *)v146 = v132;
  *(double *)(v146 + 8) = v136;
  *(_QWORD *)(v146 + 16) = v138;
  *(_QWORD *)(v146 + 24) = v140;
  *(_QWORD *)(v146 + 32) = v142;
  *(_BYTE *)(v146 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v143 + 8))(v134, v145);
  v147 = v185;
  sub_100007A98(v144, v185, &qword_10015E7D8);
  v148 = v174;
  sub_100007ADC(v112, v174, &qword_10015E7F8);
  v149 = v187;
  sub_100007ADC(v147, v187, &qword_10015E7D8);
  v150 = v191;
  sub_100007ADC(v148, v191, &qword_10015E7F8);
  v151 = sub_100003E70(&qword_10015E850);
  sub_100007ADC(v149, v150 + *(int *)(v151 + 48), &qword_10015E7D8);
  sub_100008194(v147, &qword_10015E7D8);
  sub_100008194(v112, &qword_10015E7F8);
  sub_100008194(v149, &qword_10015E7D8);
  return sub_100008194(v148, &qword_10015E7F8);
}

uint64_t sub_10002D370()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;

  v1 = v0[1];
  v28[0] = *v0;
  v28[1] = v1;
  v2 = sub_100003E70(&qword_10015E538);
  State.wrappedValue.getter(&v29, v2);
  v3 = v29;
  v4 = *(_QWORD *)(v29 + 144);
  v5 = *(_QWORD *)(v29 + 152);
  v6 = *(unsigned __int8 *)(v29 + 160);
  v7 = *(_QWORD *)(v29 + 168);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_release(v3);
  v8 = Text.init(_:tableName:bundle:comment:)(v4, v5, v6, v7, 0, 0, 0, 0, 0, 256);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  v16 = Font.weight(_:)(v15);
  swift_release(v15);
  v17 = Text.font(_:)(v16, v8, v10, v14, v12);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  swift_release(v16);
  sub_10000BFF8(v8, v10, v14);
  v24 = swift_bridgeObjectRelease(v12);
  v25 = static Color.blue.getter(v24);
  v28[0] = v25;
  v26 = Text.foregroundStyle<A>(_:)(v28, v17, v19, v21 & 1, v23, &type metadata for Color, &protocol witness table for Color);
  sub_10000BFF8(v17, v19, v21 & 1);
  swift_release(v25);
  swift_bridgeObjectRelease(v23);
  return v26;
}

void sub_10002D518(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a1[3];
  LOBYTE(v14) = *((_BYTE *)a1 + 16);
  v15 = v2;
  LOBYTE(v13) = 1;
  v3 = sub_100003E70(&qword_10015E858);
  State.wrappedValue.setter(&v13, v3);
  v4 = a1[1];
  v14 = *a1;
  v15 = v4;
  v5 = sub_100003E70(&qword_10015E538);
  State.wrappedValue.getter(&v13, v5);
  v6 = v13;
  v8 = *(_QWORD *)(v13 + 16);
  v7 = *(_QWORD *)(v13 + 24);
  swift_bridgeObjectRetain(v7);
  swift_release(v6);
  v9 = a1[4];
  if (v9)
  {
    swift_retain(a1[4]);
    sub_1000DB03C(v8, v7, 8, 12, 22, 0, 3u, v9);
    swift_bridgeObjectRelease(v7);
    swift_release(v9);
  }
  else
  {
    v10 = a1[5];
    v11 = type metadata accessor for RemoteViewConfiguration();
    v12 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v10, v11, v12);
    __break(1u);
  }
}

uint64_t sub_10002D638(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v2 = type metadata accessor for OpenURLAction(0);
  v26 = *(_QWORD *)(v2 - 8);
  v27 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v28 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[1];
  v29 = *a1;
  v30 = v11;
  v12 = sub_100003E70(&qword_10015E538);
  State.wrappedValue.getter(&v31, v12);
  v13 = v31;
  v15 = v31[7];
  v14 = v31[8];
  sub_100008170(v31 + 4, v15);
  (*(void (**)(uint64_t, uint64_t))(v14 + 64))(v15, v14);
  swift_release(v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_100008194((uint64_t)v7, &qword_100165370);
  v17 = v28;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v28, v7, v8);
  type metadata accessor for SetlistDetailSection(0);
  sub_10001D83C((uint64_t)v4);
  OpenURLAction.callAsFunction(_:)(v17);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v4, v27);
  v18 = a1[1];
  v29 = *a1;
  v30 = v18;
  State.wrappedValue.getter(&v31, v12);
  v19 = v31;
  v21 = v31[2];
  v20 = v31[3];
  swift_bridgeObjectRetain(v20);
  swift_release(v19);
  v22 = a1[4];
  if (v22)
  {
    swift_retain(a1[4]);
    sub_1000DB03C(v21, v20, 8, 12, 13, 0, 3u, v22);
    swift_bridgeObjectRelease(v20);
    swift_release(v22);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v17, v8);
  }
  else
  {
    v23 = a1[5];
    v24 = type metadata accessor for RemoteViewConfiguration();
    v25 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    result = EnvironmentObject.error()(0, v23, v24, v25);
    __break(1u);
  }
  return result;
}

uint64_t sub_10002D8C4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD v31[4];
  char v32;

  v4 = sub_100003E70(&qword_10015E828);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)&v31[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100003E70(&qword_10015E818);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v31[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v6 = static Alignment.leading.getter(v8);
  v6[1] = v11;
  v12 = sub_100003E70(&qword_10015E860);
  v13 = (char *)v6 + *(int *)(v12 + 44);
  *(_QWORD *)v13 = static VerticalAlignment.center.getter(v12);
  *((_QWORD *)v13 + 1) = 0x4030000000000000;
  v13[16] = 0;
  v14 = sub_100003E70(&qword_10015E868);
  v15 = sub_10002DAAC(a1, (uint64_t)&v13[*(int *)(v14 + 44)]);
  v16 = static Edge.Set.all.getter(v15);
  v31[0] = EdgeInsets.init(_all:)(16.0);
  v31[1] = v17;
  v31[2] = v18;
  v31[3] = v19;
  v32 = 0;
  sub_100003E70(&qword_10015E870);
  v20 = SafeAreaPaddingModifier.init(edges:insets:)(v16, v31);
  v21 = static Alignment.leading.getter(v20);
  sub_1000E4A6C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v10, 0.0, 1, 0.0, 1, v21, v22);
  v23 = sub_100008194((uint64_t)v6, &qword_10015E828);
  v24 = static Alignment.center.getter(v23);
  v26 = v25;
  v27 = a2 + *(int *)(sub_100003E70(&qword_10015E800) + 36);
  sub_10002EC24((uint64_t)a1, v27);
  v28 = (uint64_t *)(v27 + *(int *)(sub_100003E70(&qword_10015E838) + 36));
  *v28 = v24;
  v28[1] = v26;
  return sub_100007A98((uint64_t)v10, a2, &qword_10015E818);
}

uint64_t sub_10002DAAC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[3];

  v57 = a2;
  v3 = sub_100003E70(&qword_10015E888);
  v4 = __chkstk_darwin(v3);
  v56 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v51 - v6;
  v55 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v55);
  v9 = (_OWORD *)((char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v10);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003E70(&qword_10015E890);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100003E70(&qword_10015E898);
  __chkstk_darwin(v51);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100003E70(&qword_10015E8A0);
  v19 = __chkstk_darwin(v52);
  v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v53 = (uint64_t)&v51 - v22;
  v54 = a1;
  v23 = a1[1];
  *(_QWORD *)&v59[0] = *a1;
  *((_QWORD *)&v59[0] + 1) = v23;
  v24 = sub_100003E70(&qword_10015E538);
  State.wrappedValue.getter(&v58, v24);
  v25 = v58;
  sub_1000105F4((uint64_t)v12);
  swift_release(v25);
  v26 = static Animation.spring(response:dampingFraction:blendDuration:)(0.5, 1.0, 0.0);
  v27 = Transaction.init(animation:)(v26);
  v28 = sub_100003E70(&qword_10015E8A8);
  v29 = sub_100030BE4();
  v30 = AsyncImage.init(url:scale:transaction:content:)(v12, v27, sub_10002DF08, 0, v28, v29, 1.0);
  v31 = static Alignment.center.getter(v30);
  _FrameLayout.init(width:height:alignment:)(v59, 0x4051800000000000, 0, 0x4051800000000000, 0, v31, v32);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v18, v16, v13);
  v33 = &v18[*(int *)(v51 + 36)];
  v34 = v59[1];
  *(_OWORD *)v33 = v59[0];
  *((_OWORD *)v33 + 1) = v34;
  *((_OWORD *)v33 + 2) = v59[2];
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v35 = (char *)v9 + *(int *)(v55 + 20);
  v36 = enum case for RoundedCornerStyle.continuous(_:);
  v37 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v35, v36, v37);
  __asm { FMOV            V0.2D, #5.0 }
  *v9 = _Q0;
  v43 = (uint64_t)&v21[*(int *)(v52 + 36)];
  sub_100028390((uint64_t)v9, v43, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v43 + *(int *)(sub_100003E70(&qword_10015E338) + 36)) = 256;
  sub_100007ADC((uint64_t)v18, (uint64_t)v21, &qword_10015E898);
  sub_1000283D4((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_100008194((uint64_t)v18, &qword_10015E898);
  v44 = v53;
  v45 = sub_100007A98((uint64_t)v21, v53, &qword_10015E8A0);
  *(_QWORD *)v7 = static HorizontalAlignment.leading.getter(v45);
  *((_QWORD *)v7 + 1) = 0x4008000000000000;
  v7[16] = 0;
  v46 = sub_100003E70(&qword_10015E8D0);
  sub_10002E124(v54, (uint64_t)&v7[*(int *)(v46 + 44)]);
  sub_100007ADC(v44, (uint64_t)v21, &qword_10015E8A0);
  v47 = v56;
  sub_100007ADC((uint64_t)v7, v56, &qword_10015E888);
  v48 = v57;
  sub_100007ADC((uint64_t)v21, v57, &qword_10015E8A0);
  v49 = sub_100003E70(&qword_10015E8D8);
  sub_100007ADC(v47, v48 + *(int *)(v49 + 48), &qword_10015E888);
  sub_100008194((uint64_t)v7, &qword_10015E888);
  sub_100008194(v44, &qword_10015E8A0);
  sub_100008194(v47, &qword_10015E888);
  return sub_100008194((uint64_t)v21, &qword_10015E8A0);
}

uint64_t sub_10002DF08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;

  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AsyncImagePhase(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v9 + 88))(v11, v8) == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v11, v8);
    v12 = *v11;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    v13 = Image.resizable(capInsets:resizingMode:)(v7, v12, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v21 = v13;
    v22 = 0;
    swift_retain_n(v13, 2);
    v14 = sub_100003E70(&qword_10015E8C0);
    v15 = sub_100030C50();
    _ConditionalContent<>.init(storage:)(&v21, &type metadata for Image, v14, &protocol witness table for Image, v15);
    swift_release_n(v13, 2);
    result = swift_release(v12);
    v17 = v23;
    v18 = v24;
  }
  else
  {
    v21 = static Color.gray.getter();
    v22 = 1;
    v19 = sub_100003E70(&qword_10015E8C0);
    v20 = sub_100030C50();
    _ConditionalContent<>.init(storage:)(&v21, &type metadata for Image, v19, &protocol witness table for Image, v20);
    v17 = v23;
    v18 = v24;
    result = (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
  }
  *(_QWORD *)a2 = v17;
  *(_BYTE *)(a2 + 8) = v18;
  return result;
}

uint64_t sub_10002E124@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t KeyPath;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t, uint64_t);
  char *v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, char *, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v112;
  int v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  char *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD v138[2];

  v125 = a2;
  v3 = type metadata accessor for SetlistDetailSection(0);
  v117 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v118 = v4;
  v119 = (uint64_t)&v114 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003E70(&qword_10015D6D8);
  v123 = *(_QWORD *)(v5 - 8);
  v124 = v5;
  __chkstk_darwin(v5);
  v120 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v7);
  v132 = (char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v133 = *(_QWORD *)(v9 - 8);
  v134 = v9;
  v10 = __chkstk_darwin(v9);
  v115 = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = v11;
  __chkstk_darwin(v10);
  v116 = (char *)&v114 - v12;
  v13 = sub_100003E70(&qword_10015E8E0);
  v14 = __chkstk_darwin(v13);
  v122 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v121 = (char *)&v114 - v16;
  v131 = sub_100003E70(&qword_10015E8E8);
  __chkstk_darwin(v131);
  v129 = (uint64_t *)((char *)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_100003E70(&qword_10015E8F0);
  __chkstk_darwin(v18);
  v127 = (char *)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_100003E70(&qword_10015E8F8);
  v20 = __chkstk_darwin(v128);
  v22 = (char *)&v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v135 = (uint64_t)&v114 - v23;
  v126 = a1;
  v24 = a1[1];
  v136 = *a1;
  v137 = v24;
  v130 = sub_100003E70(&qword_10015E538);
  State.wrappedValue.getter(v138, v130);
  v25 = v138[0];
  v26 = *(_QWORD *)(v138[0] + 80);
  v27 = *(_QWORD *)(v138[0] + 88);
  v28 = *(unsigned __int8 *)(v138[0] + 96);
  v29 = *(_QWORD *)(v138[0] + 104);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v29);
  swift_release(v25);
  LOWORD(v113) = 256;
  v30 = Text.init(_:tableName:bundle:comment:)(v26, v27, v28, v29, 0, 0, 0, 0, 0, v113);
  v32 = v31;
  v34 = v33;
  v36 = v35 & 1;
  v37 = static Font.caption2.getter();
  static Font.Weight.semibold.getter();
  v38 = Font.weight(_:)(v37);
  swift_release(v37);
  v39 = Text.font(_:)(v38, v30, v32, v36, v34);
  v41 = v40;
  LOBYTE(v37) = v42;
  v44 = v43;
  swift_release(v38);
  LOBYTE(v38) = v37 & 1;
  sub_10000BFF8(v30, v32, v36);
  v45 = swift_bridgeObjectRelease(v34);
  LODWORD(v136) = static HierarchicalShapeStyle.secondary.getter(v45);
  v46 = Text.foregroundStyle<A>(_:)(&v136, v39, v41, v37 & 1, v44, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v48 = v47;
  v50 = v49;
  LOBYTE(v37) = v51 & 1;
  v52 = v41;
  v53 = v126;
  sub_10000BFF8(v39, v52, v38);
  swift_bridgeObjectRelease(v44);
  v54 = enum case for Text.Case.uppercase(_:);
  v55 = type metadata accessor for Text.Case(0);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = (uint64_t)v127;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 104))(v127, v54, v55);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v56 + 56))(v57, 0, 1, v55);
  KeyPath = swift_getKeyPath(&unk_10010C0A0);
  v59 = v129;
  sub_100007ADC(v57, (uint64_t)v129 + *(int *)(v131 + 28), &qword_10015E8F0);
  *v59 = KeyPath;
  sub_100007ADC((uint64_t)v59, (uint64_t)&v22[*(int *)(v128 + 36)], &qword_10015E8E8);
  *(_QWORD *)v22 = v46;
  *((_QWORD *)v22 + 1) = v48;
  v22[16] = v37;
  *((_QWORD *)v22 + 3) = v50;
  swift_bridgeObjectRetain(v50);
  sub_10000C008(v46, v48, v37);
  sub_100008194((uint64_t)v59, &qword_10015E8E8);
  sub_100008194(v57, &qword_10015E8F0);
  sub_10000BFF8(v46, v48, v37);
  swift_bridgeObjectRelease(v50);
  v129 = (uint64_t *)v22;
  sub_100007A98((uint64_t)v22, v135, &qword_10015E8F8);
  v60 = *v53;
  v61 = v53[1];
  v62 = (uint64_t)v53;
  v63 = v130;
  v136 = v60;
  v137 = v61;
  State.wrappedValue.getter(v138, v130);
  v64 = v138[0];
  v65 = *(_QWORD *)(v138[0] + 56);
  v66 = *(_QWORD *)(v138[0] + 64);
  sub_100008170((_QWORD *)(v138[0] + 32), v65);
  v67 = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 40))(v65, v66);
  v69 = v68;
  swift_release(v64);
  if (v69)
  {
    v136 = v67;
    v137 = v69;
    v70 = sub_10000CB40();
    v71 = Text.init<A>(_:)(&v136, &type metadata for String, v70);
    v73 = v72;
    v128 = v74;
    v131 = v75 & 1;
  }
  else
  {
    v71 = 0;
    v73 = 0;
    v131 = 0;
    v128 = 0;
  }
  v136 = v60;
  v137 = v61;
  State.wrappedValue.getter(v138, v63);
  v76 = v138[0];
  v77 = *(_QWORD *)(v138[0] + 56);
  v78 = *(_QWORD *)(v138[0] + 64);
  sub_100008170((_QWORD *)(v138[0] + 32), v77);
  v79 = (uint64_t)v132;
  (*(void (**)(uint64_t, uint64_t))(v78 + 64))(v77, v78);
  swift_release(v76);
  v81 = v133;
  v80 = v134;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v79, 1, v134) == 1)
  {
    sub_100008194(v79, &qword_100165370);
    v82 = 1;
    v83 = v124;
    v84 = v125;
    v86 = (uint64_t)v122;
    v85 = v123;
    v87 = (uint64_t)v121;
  }
  else
  {
    v88 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 32);
    v130 = v71;
    v89 = v116;
    v88(v116, v79, v80);
    v90 = v62;
    v91 = v119;
    sub_100028390(v62, v119, type metadata accessor for SetlistDetailSection);
    v92 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
    v132 = v73;
    v93 = v115;
    v92(v115, v89, v80);
    v94 = *(unsigned __int8 *)(v117 + 80);
    v95 = (v94 + 16) & ~v94;
    v96 = *(unsigned __int8 *)(v81 + 80);
    v97 = (v118 + v96 + v95) & ~v96;
    v98 = swift_allocObject(&unk_10014D9E0, v97 + v114, v94 | v96 | 7);
    sub_100030810(v91, v98 + v95, type metadata accessor for SetlistDetailSection);
    v99 = v93;
    v73 = v132;
    v100 = ((uint64_t (*)(uint64_t, char *, uint64_t))v88)(v98 + v97, v99, v80);
    __chkstk_darwin(v100);
    v112 = v90;
    v101 = v120;
    Button.init(action:label:)(sub_100030EF8, v98, sub_100030F80, &v114 - 4, &type metadata for Text, &protocol witness table for Text);
    v102 = v89;
    v71 = v130;
    (*(void (**)(char *, uint64_t))(v81 + 8))(v102, v80);
    v85 = v123;
    v83 = v124;
    v87 = (uint64_t)v121;
    (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v121, v101, v124);
    v82 = 0;
    v84 = v125;
    v86 = (uint64_t)v122;
  }
  v104 = v128;
  v103 = (uint64_t)v129;
  v105 = v135;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v87, v82, 1, v83);
  sub_100007ADC(v105, v103, &qword_10015E8F8);
  sub_100007ADC(v87, v86, &qword_10015E8E0);
  sub_100007ADC(v103, v84, &qword_10015E8F8);
  v106 = sub_100003E70(&qword_10015E900);
  v107 = (uint64_t *)(v84 + *(int *)(v106 + 48));
  v108 = v71;
  *v107 = v71;
  v107[1] = (uint64_t)v73;
  v109 = (uint64_t)v73;
  v110 = v131;
  v107[2] = v131;
  v107[3] = v104;
  sub_100007ADC(v86, v84 + *(int *)(v106 + 64), &qword_10015E8E0);
  sub_100030D20(v108, v109, v110, v104);
  sub_100008194(v87, &qword_10015E8E0);
  sub_100008194(v105, &qword_10015E8F8);
  sub_100008194(v86, &qword_10015E8E0);
  sub_100030D50(v108, v109, v110, v104);
  return sub_100008194(v103, &qword_10015E8F8);
}

uint64_t sub_10002E9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v3 = type metadata accessor for OpenURLAction(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SetlistDetailSection(0);
  sub_10001D83C((uint64_t)v6);
  OpenURLAction.callAsFunction(_:)(a2);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10002EA78@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  _QWORD v35[2];
  uint64_t v36;

  v3 = a1[1];
  v35[0] = *a1;
  v35[1] = v3;
  v4 = sub_100003E70(&qword_10015E538);
  State.wrappedValue.getter(&v36, v4);
  v5 = v36;
  v6 = *(_QWORD *)(v36 + 112);
  v7 = *(_QWORD *)(v36 + 120);
  v8 = *(unsigned __int8 *)(v36 + 128);
  v9 = *(_QWORD *)(v36 + 136);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_release(v5);
  v10 = Text.init(_:tableName:bundle:comment:)(v6, v7, v8, v9, 0, 0, 0, 0, 0, 256);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  v18 = Font.weight(_:)(v17);
  swift_release(v17);
  v19 = Text.font(_:)(v18, v10, v12, v16, v14);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  swift_release(v18);
  LOBYTE(v18) = v23 & 1;
  sub_10000BFF8(v10, v12, v16);
  v26 = swift_bridgeObjectRelease(v14);
  v27 = static Color.blue.getter(v26);
  v35[0] = v27;
  v28 = Text.foregroundStyle<A>(_:)(v35, v19, v21, v23 & 1, v25, &type metadata for Color, &protocol witness table for Color);
  v30 = v29;
  LOBYTE(v16) = v31;
  v33 = v32;
  sub_10000BFF8(v19, v21, v18);
  swift_release(v27);
  result = swift_bridgeObjectRelease(v25);
  *(_QWORD *)a2 = v28;
  *(_QWORD *)(a2 + 8) = v30;
  *(_BYTE *)(a2 + 16) = v16 & 1;
  *(_QWORD *)(a2 + 24) = v33;
  return result;
}

uint64_t sub_10002EC24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;

  v31[1] = a1;
  v33 = a2;
  v2 = type metadata accessor for ColorScheme(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)v31 - v7;
  v9 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v9);
  v11 = (_OWORD *)((char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_100003E70(&qword_10015E878);
  __chkstk_darwin(v12);
  v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100003E70(&qword_10015E880);
  __chkstk_darwin(v32);
  v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (char *)v11 + *(int *)(v9 + 20);
  v18 = enum case for RoundedCornerStyle.continuous(_:);
  v19 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v17, v18, v19);
  __asm { FMOV            V0.2D, #10.0 }
  *v11 = _Q0;
  type metadata accessor for SetlistDetailSection(0);
  sub_10001E08C((uint64_t)v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for ColorScheme.light(_:), v2);
  LOBYTE(v17) = static ColorScheme.== infix(_:_:)(v8, v6);
  v25 = *(void (**)(char *, uint64_t))(v3 + 8);
  v25(v6, v2);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v8, v2);
  if ((v17 & 1) != 0)
  {
    v27 = static Color.white.getter(v26);
  }
  else
  {
    if (qword_10015CE50 != -1)
      swift_once(&qword_10015CE50, sub_1000382A0);
    v27 = qword_10016F648;
    swift_retain(qword_10016F648);
  }
  sub_100028390((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_QWORD *)&v14[*(int *)(v12 + 36)] = v27;
  sub_1000283D4((uint64_t)v11, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  if (qword_10015CE30 != -1)
    swift_once(&qword_10015CE30, sub_10002C5A0);
  v28 = qword_10015E468;
  sub_100007ADC((uint64_t)v14, (uint64_t)v16, &qword_10015E878);
  v29 = &v16[*(int *)(v32 + 36)];
  *(_QWORD *)v29 = v28;
  *(_OWORD *)(v29 + 8) = xmmword_10010BE50;
  *((_QWORD *)v29 + 3) = 0x4010000000000000;
  swift_retain(v28);
  sub_100008194((uint64_t)v14, &qword_10015E878);
  return sub_100007A98((uint64_t)v16, v33, &qword_10015E880);
}

uint64_t sub_10002EF18(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[6] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[7] = v3;
  v1[8] = v4;
  return swift_task_switch(sub_10002EF84, v3, v4);
}

uint64_t sub_10002EF84()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = (uint64_t *)v0[5];
  v3 = *v1;
  v2 = v1[1];
  v0[2] = v3;
  v0[3] = v2;
  v4 = sub_100003E70(&qword_10015E538);
  State.wrappedValue.getter(v0 + 4, v4);
  v0[9] = v0[4];
  if (qword_10015CE38 != -1)
    swift_once(&qword_10015CE38, sub_10002C5E0);
  v5 = qword_10015E470;
  v6 = (_QWORD *)swift_task_alloc(dword_10015D97C);
  v0[10] = v6;
  *v6 = v0;
  v6[1] = sub_10002F034;
  return sub_100010D10(v5);
}

uint64_t sub_10002F034()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_release(v2);
  return swift_task_switch(sub_10002F088, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_10002F088()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002F0B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v4 = v2;
  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v8);
  v13 = sub_100003E70(&qword_10015E798);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v16 = static HorizontalAlignment.center.getter(v14);
  *((_QWORD *)v16 + 1) = 0;
  v16[16] = 1;
  v17 = sub_100003E70(&qword_10015E7A0);
  sub_10002C620(v4, (uint64_t)&v16[*(int *)(v17 + 44)]);
  sub_100028390(v4, (uint64_t)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SetlistDetailSection);
  v18 = *(unsigned __int8 *)(v11 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = swift_allocObject(&unk_10014D968, v19 + v12, v18 | 7);
  v21 = sub_100030810((uint64_t)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v20 + v19, type metadata accessor for SetlistDetailSection);
  static TaskPriority.userInitiated.getter(v21);
  v22 = (char *)(a2 + *(int *)(sub_100003E70(&qword_10015E7B8) + 36));
  v23 = type metadata accessor for _TaskModifier(0);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v22[*(int *)(v23 + 20)], v10, v6);
  *(_QWORD *)v22 = &unk_10015E7B0;
  *((_QWORD *)v22 + 1) = v20;
  sub_100007ADC((uint64_t)v16, a2, &qword_10015E798);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return sub_100008194((uint64_t)v16, &qword_10015E798);
}

uint64_t sub_10002F2A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002AF6C(*(_QWORD **)(v1 + 16), a1);
}

unint64_t sub_10002F2B0()
{
  unint64_t result;

  result = qword_10015E5D8;
  if (!qword_10015E5D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MusicItemID, &type metadata for MusicItemID);
    atomic_store(result, (unint64_t *)&qword_10015E5D8);
  }
  return result;
}

uint64_t sub_10002F2F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for SetlistView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  v7 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 28));
  v10 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for UserInterfaceSizeClass(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10002F42C()
{
  return sub_1000309F8(type metadata accessor for SetlistView, sub_10002BAAC);
}

unint64_t sub_10002F440()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E5E8;
  if (!qword_10015E5E8)
  {
    v1 = sub_1000034AC(&qword_10015E5E0);
    sub_10002F4A4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10015E5E8);
  }
  return result;
}

unint64_t sub_10002F4A4()
{
  unint64_t result;

  result = qword_10015E5F0;
  if (!qword_10015E5F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MusicItemID, &type metadata for MusicItemID);
    atomic_store(result, (unint64_t *)&qword_10015E5F0);
  }
  return result;
}

uint64_t sub_10002F4E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  sub_10000C008(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t sub_10002F540(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  sub_10000BFF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_10002F598()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E610;
  if (!qword_10015E610)
  {
    v1 = sub_1000034AC(&qword_10015E570);
    sub_10002F6B0(&qword_10015E618, &qword_10015E568, &qword_10015E620, &qword_10015E560);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E610);
  }
  return result;
}

unint64_t sub_10002F624()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E628;
  if (!qword_10015E628)
  {
    v1 = sub_1000034AC(&qword_10015E550);
    sub_10002F6B0(&qword_10015E630, &qword_10015E548, &qword_10015E638, &qword_10015E540);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E628);
  }
  return result;
}

uint64_t sub_10002F6B0(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_1000034AC(a2);
    sub_100007D40(a3, a4, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for SetlistDetailSection(uint64_t a1)
{
  return sub_10002F744(a1, (uint64_t *)&unk_10015E738, (uint64_t)&nominal type descriptor for SetlistDetailSection);
}

uint64_t sub_10002F744(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_10002F788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v1 = type metadata accessor for SetlistView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v20 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  v9 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  v10 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 28));
  v13 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for UserInterfaceSizeClass(0);
    v15 = *(_QWORD *)(v14 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14))
      (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v12, v14);
  }
  else
  {
    v16 = swift_release(*v12);
  }
  v17 = (v4 + v20 + v7) & ~v7;
  v18 = v17 + v8;
  (*(void (**)(uint64_t, uint64_t, __n128))(v6 + 8))(v0 + v17, v5, v16);
  return swift_deallocObject(v0, v18, v3 | v7 | 7);
}

uint64_t sub_10002F914()
{
  return sub_100030F0C(type metadata accessor for SetlistView, (uint64_t (*)(unint64_t, unint64_t))sub_10002C1D0);
}

uint64_t sub_10002F928@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002C270(*(_QWORD **)(v1 + 16), a1);
}

uint64_t sub_10002F930()
{
  uint64_t *v0;

  return sub_100010224(v0[2], v0[3], v0[4]);
}

uint64_t sub_10002F94C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002B1F4(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_10002F954()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = qword_10015E678;
  if (!qword_10015E678)
  {
    v1 = sub_1000034AC(&qword_10015E670);
    v2 = sub_1000034AC(&qword_10015E680);
    v4 = sub_1000034AC(&qword_10015E688);
    v5 = type metadata accessor for PlainButtonStyle(255);
    v6 = sub_100007D40(&qword_10015E690, &qword_10015E688, (uint64_t)&protocol conformance descriptor for Button<A>);
    v7 = sub_100003B3C(&qword_10015E348, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E678);
  }
  return result;
}

uint64_t sub_10002FA64@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = a1[3];
  v3 = a1[4];
  sub_100008170(a1, v4);
  result = dispatch thunk of MusicItem.id.getter(v4, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8));
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_10002FAB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SetlistView(0) - 8) + 80);
  return sub_10002B488(a1, (_QWORD *)(v2 + ((v5 + 16) & ~v5)), a2);
}

uint64_t sub_10002FAFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = type metadata accessor for SetlistView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  v7 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 28));
  v10 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for UserInterfaceSizeClass(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 40;
  sub_1000055A8((_QWORD *)(v0 + v13));
  return swift_deallocObject(v0, v14, v3 | 7);
}

uint64_t sub_10002FC4C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for SetlistView(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_10002B820(v0 + v2, (_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10002FC8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002B8E4(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_10002FC94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E6B8;
  if (!qword_10015E6B8)
  {
    v1 = sub_1000034AC(&qword_10015E6B0);
    sub_100003B3C(&qword_10015E6C0, type metadata accessor for SetlistSongRowView, (uint64_t)&unk_100112B90);
    sub_100007D40(&qword_10015E6C8, &qword_10015E6D0, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E6B8);
  }
  return result;
}

uint64_t sub_10002FD30(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v8 = a2[1];
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v9 = a2[3];
    v10 = a2[4];
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v10;
    v11 = *(int *)(a3 + 28);
    v12 = (uint64_t *)(a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    *(_QWORD *)(a1 + 40) = a2[5];
    swift_retain(v5);
    swift_retain(v8);
    swift_retain(v9);
    swift_retain(v10);
    v14 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = 1;
    }
    else
    {
      v17 = *v13;
      *v12 = *v13;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v16);
    v18 = *(int *)(a3 + 32);
    v19 = (uint64_t *)(a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
      v23 = v19;
      v24 = v21;
      v25 = 1;
    }
    else
    {
      v26 = *v20;
      *v19 = *v20;
      swift_retain(v26);
      v23 = v19;
      v24 = v21;
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v23, v24, v25);
  }
  return a1;
}

double sub_10002FEC8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[3]);
  swift_release(a1[4]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 28));
  v5 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)((char *)a1 + *(int *)(a2 + 32));
  v8 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v7).n128_u64[0];
  }
  return result;
}

uint64_t sub_10002FFB4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  v11 = *(int *)(a3 + 28);
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)((char *)a2 + v11);
  *(_QWORD *)(a1 + 24) = v8;
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v14 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
    v16 = 1;
  }
  else
  {
    v17 = *v13;
    *v12 = *v13;
    swift_retain(v17);
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v14, v16);
  v18 = *(int *)(a3 + 32);
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)((char *)a2 + v18);
  v21 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
    v23 = 1;
  }
  else
  {
    v24 = *v20;
    *v19 = *v20;
    swift_retain(v24);
    v23 = 0;
  }
  swift_storeEnumTagMultiPayload(v19, v21, v23);
  return a1;
}

uint64_t *sub_100030118(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a1[1];
  v9 = a2[1];
  a1[1] = v9;
  swift_retain(v9);
  swift_release(v8);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v10 = a1[3];
  v11 = a2[3];
  a1[3] = v11;
  swift_retain(v11);
  swift_release(v10);
  v12 = a1[4];
  v13 = a2[4];
  a1[4] = v13;
  swift_retain(v13);
  swift_release(v12);
  a1[5] = a2[5];
  if (a1 != a2)
  {
    v14 = *(int *)(a3 + 28);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    sub_100008194((uint64_t)a1 + v14, &qword_10015D600);
    v17 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = 1;
    }
    else
    {
      v20 = *v16;
      *v15 = *v16;
      swift_retain(v20);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v19);
    v21 = *(int *)(a3 + 32);
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    sub_100008194((uint64_t)a1 + v21, &qword_10015D490);
    v24 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
      v26 = 1;
    }
    else
    {
      v27 = *v23;
      *v22 = *v23;
      swift_retain(v27);
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v24, v26);
  }
  return a1;
}

_OWORD *sub_1000302D0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = *(int *)(a3 + 32);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
    swift_storeEnumTagMultiPayload(v13, v15, 1);
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_100030408(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v8 = a1[3];
  a1[3] = a2[3];
  swift_release(v8);
  v9 = a1[4];
  a1[4] = a2[4];
  swift_release(v9);
  a1[5] = a2[5];
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 28);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    sub_100008194((uint64_t)a1 + v10, &qword_10015D600);
    v13 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    v15 = *(int *)(a3 + 32);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    sub_100008194((uint64_t)a1 + v15, &qword_10015D490);
    v18 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000305A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000305B4);
}

uint64_t sub_1000305B4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003E70(qword_10015D610);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = sub_100003E70(&qword_10015E6D8);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_10003065C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100030668);
}

char *sub_100030668(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_100003E70(qword_10015D610);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = sub_100003E70(&qword_10015E6D8);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_10003070C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_10010BE80;
  v6[1] = &unk_10010BE98;
  v6[2] = &unk_10010BE98;
  sub_10000BE1C(319, (unint64_t *)&qword_10015D6A0, (uint64_t (*)(uint64_t))&type metadata accessor for OpenURLAction);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000BE1C(319, (unint64_t *)&qword_10015E748, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

uint64_t sub_1000307C8()
{
  return sub_100030FBC(&qword_10015E788, &qword_10015E530, &qword_10015E790, &qword_10015E510);
}

uint64_t sub_1000307FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118ABC, 1);
}

uint64_t sub_100030810(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100030854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SetlistDetailSection(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_10015E7AC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100031054;
  return sub_10002EF18(v3);
}

uint64_t sub_1000308C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for SetlistDetailSection(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_release(*(_QWORD *)(v0 + v4 + 32));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 28));
  v7 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 32));
  v10 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000309E4()
{
  return sub_1000309F8(type metadata accessor for SetlistDetailSection, (uint64_t (*)(uint64_t))sub_10002D638);
}

uint64_t sub_1000309F8(uint64_t (*a1)(_QWORD), uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return a2(v2 + ((v3 + 16) & ~v3));
}

uint64_t sub_100030A38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002D8C4(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_100030A40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E808;
  if (!qword_10015E808)
  {
    v1 = sub_1000034AC(&qword_10015E800);
    sub_100030AC4();
    sub_100007D40(&qword_10015E830, &qword_10015E838, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E808);
  }
  return result;
}

unint64_t sub_100030AC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E810;
  if (!qword_10015E810)
  {
    v1 = sub_1000034AC(&qword_10015E818);
    sub_100007D40(&qword_10015E820, &qword_10015E828, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E810);
  }
  return result;
}

unint64_t sub_100030B48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E840;
  if (!qword_10015E840)
  {
    v1 = sub_1000034AC(&qword_10015E7C8);
    sub_100007D40(&qword_10015E848, &qword_10015E7C0, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100022E3C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E840);
  }
  return result;
}

uint64_t sub_100030BD0()
{
  return sub_1000309F8(type metadata accessor for SetlistDetailSection, (uint64_t (*)(uint64_t))sub_10002D518);
}

unint64_t sub_100030BE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E8B0;
  if (!qword_10015E8B0)
  {
    v1 = sub_1000034AC(&qword_10015E8A8);
    sub_100030C50();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E8B0);
  }
  return result;
}

unint64_t sub_100030C50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E8B8;
  if (!qword_10015E8B8)
  {
    v1 = sub_1000034AC(&qword_10015E8C0);
    sub_100030CD4();
    sub_100007D40(&qword_10015DF28, &qword_10015DF30, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E8B8);
  }
  return result;
}

unint64_t sub_100030CD4()
{
  unint64_t result;

  result = qword_10015E8C8;
  if (!qword_10015E8C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    atomic_store(result, (unint64_t *)&qword_10015E8C8);
  }
  return result;
}

uint64_t sub_100030D20(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10000C008(result, a2, a3 & 1);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_100030D50(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10000BFF8(result, a2, a3 & 1);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_100030D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = type metadata accessor for SetlistDetailSection(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v19 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_release(*(_QWORD *)(v0 + v4 + 32));
  v9 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 28));
  v10 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 32));
  v13 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  else
  {
    v15 = swift_release(*v12);
  }
  v16 = (v4 + v19 + v7) & ~v7;
  v17 = v16 + v8;
  (*(void (**)(uint64_t, uint64_t, __n128))(v6 + 8))(v0 + v16, v5, v15);
  return swift_deallocObject(v0, v17, v3 | v7 | 7);
}

uint64_t sub_100030EF8()
{
  return sub_100030F0C(type metadata accessor for SetlistDetailSection, (uint64_t (*)(unint64_t, unint64_t))sub_10002E9D8);
}

uint64_t sub_100030F0C(uint64_t (*a1)(_QWORD), uint64_t (*a2)(unint64_t, unint64_t))
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  return a2(v2 + v4, v2 + ((v4 + v5 + v6) & ~v6));
}

uint64_t sub_100030F80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002EA78(*(_QWORD **)(v1 + 16), a1);
}

uint64_t sub_100030F88()
{
  return sub_100030FBC(&qword_10015E908, &qword_10015E7B8, qword_10015E910, &qword_10015E798);
}

uint64_t sub_100030FBC(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_1000034AC(a2);
    sub_100007D40(a3, a4, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_100003B3C(&qword_10015D458, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

void sub_100031058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[4];

  v5 = type metadata accessor for MusicViewModel(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v6 <= 0x3F)
  {
    v11[0] = *(_QWORD *)(v5 - 8) + 64;
    sub_10000BE1C(319, (unint64_t *)&qword_10015E748, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v8 <= 0x3F)
    {
      v11[1] = *(_QWORD *)(v7 - 8) + 64;
      sub_10000BE1C(319, (unint64_t *)&qword_10015D6A0, (uint64_t (*)(uint64_t))&type metadata accessor for OpenURLAction);
      if (v10 <= 0x3F)
      {
        v11[2] = *(_QWORD *)(v9 - 8) + 64;
        v11[3] = &unk_10010C0E0;
        swift_initStructMetadata(a1, 0, 4, v11, a1 + 32);
      }
    }
  }
}

_QWORD *sub_100031124(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  char *__dst;
  uint64_t v43;

  v5 = (_QWORD *)a1;
  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v19 = *a2;
    *v5 = *a2;
    v5 = (_QWORD *)(v19 + ((v6 + 16) & ~(unint64_t)v6));
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v9 = a2[3];
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v8;
    v10 = a2[5];
    *(_QWORD *)(a1 + 40) = v10;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v12 = a2[7];
    v11 = a2[8];
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = v11;
    v13 = type metadata accessor for MusicViewModel(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
    v14 = *(int *)(v13 + 44);
    __dst = (char *)v5 + v14;
    v43 = v13;
    v15 = (char *)a2 + v14;
    v16 = type metadata accessor for URL(0);
    v17 = *(_QWORD *)(v16 - 8);
    v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v11);
    if (v41(v15, 1, v16))
    {
      v18 = sub_100003E70(&qword_100165370);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    v20 = *(int *)(v43 + 48);
    v21 = *(uint64_t *)((char *)a2 + v20);
    *(_QWORD *)((char *)v5 + v20) = v21;
    v22 = *(int *)(a3 + 36);
    v23 = (_QWORD *)((char *)v5 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    swift_bridgeObjectRetain(v21);
    v25 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
    {
      v26 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
      v27 = 1;
    }
    else
    {
      v28 = *v24;
      *v23 = *v24;
      swift_retain(v28);
      v27 = 0;
    }
    swift_storeEnumTagMultiPayload(v23, v25, v27);
    v29 = *(int *)(a3 + 40);
    v30 = (_QWORD *)((char *)v5 + v29);
    v31 = (uint64_t *)((char *)a2 + v29);
    v32 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
    {
      v33 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v30, v31, v33);
      v34 = 1;
    }
    else
    {
      v35 = *v31;
      *v30 = *v31;
      swift_retain(v35);
      v34 = 0;
    }
    swift_storeEnumTagMultiPayload(v30, v32, v34);
    v36 = *(int *)(a3 + 44);
    v37 = (_QWORD *)((char *)v5 + v36);
    v38 = (uint64_t *)((char *)a2 + v36);
    v19 = *v38;
    v39 = v38[1];
    *v37 = v19;
    v37[1] = v39;
  }
  swift_retain(v19);
  return v5;
}

double sub_1000313A8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  double result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[8]);
  v5 = type metadata accessor for MusicViewModel(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v4);
  v6 = (char *)a1 + *(int *)(v5 + 44);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(v5 + 48)));
  v9 = (_QWORD *)((char *)a1 + *(int *)(a2 + 36));
  v10 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (_QWORD *)((char *)a1 + *(int *)(a2 + 40));
  v13 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  else
  {
    swift_release(*v12);
  }
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 44))).n128_u64[0];
  return result;
}

uint64_t sub_100031504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v40)(const void *, uint64_t, uint64_t);
  void *__dst;
  uint64_t v42;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v7;
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  v12 = type metadata accessor for MusicViewModel(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v13 = *(int *)(v12 + 44);
  __dst = (void *)(a1 + v13);
  v42 = v12;
  v14 = (const void *)(a2 + v13);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v40 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  if (v40(v14, 1, v15))
  {
    v17 = sub_100003E70(&qword_100165370);
    memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(__dst, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  v18 = *(int *)(v42 + 48);
  v19 = *(_QWORD *)(a2 + v18);
  *(_QWORD *)(a1 + v18) = v19;
  v20 = *(int *)(a3 + 36);
  v21 = (uint64_t *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  swift_bridgeObjectRetain(v19);
  v23 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
    v25 = 1;
  }
  else
  {
    v26 = *v22;
    *v21 = *v22;
    swift_retain(v26);
    v25 = 0;
  }
  swift_storeEnumTagMultiPayload(v21, v23, v25);
  v27 = *(int *)(a3 + 40);
  v28 = (uint64_t *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v30 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
  {
    v31 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
    v32 = 1;
  }
  else
  {
    v33 = *v29;
    *v28 = *v29;
    swift_retain(v33);
    v32 = 0;
  }
  swift_storeEnumTagMultiPayload(v28, v30, v32);
  v34 = *(int *)(a3 + 44);
  v35 = (_QWORD *)(a1 + v34);
  v36 = (uint64_t *)(a2 + v34);
  v37 = *v36;
  v38 = v36[1];
  *v35 = v37;
  v35[1] = v38;
  swift_retain(v37);
  return a1;
}

uint64_t sub_100031760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v17 = type metadata accessor for MusicViewModel(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v16);
  v18 = *(int *)(v17 + 44);
  v19 = (void *)(a1 + v18);
  v20 = (void *)(a2 + v18);
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    v26 = sub_100003E70(&qword_100165370);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v22 + 24))(v19, v20, v21);
LABEL_7:
  v27 = *(int *)(v17 + 48);
  v28 = *(_QWORD *)(a2 + v27);
  v29 = *(_QWORD *)(a1 + v27);
  *(_QWORD *)(a1 + v27) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  if (a1 != a2)
  {
    v30 = *(int *)(a3 + 36);
    v31 = (uint64_t *)(a1 + v30);
    v32 = (uint64_t *)(a2 + v30);
    sub_100008194(a1 + v30, &qword_10015D490);
    v33 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
    {
      v34 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v31, v32, v34);
      v35 = 1;
    }
    else
    {
      v36 = *v32;
      *v31 = *v32;
      swift_retain(v36);
      v35 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v33, v35);
    v37 = *(int *)(a3 + 40);
    v38 = (uint64_t *)(a1 + v37);
    v39 = (uint64_t *)(a2 + v37);
    sub_100008194(a1 + v37, &qword_10015D600);
    v40 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
    {
      v41 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v38, v39, v41);
      v42 = 1;
    }
    else
    {
      v43 = *v39;
      *v38 = *v39;
      swift_retain(v43);
      v42 = 0;
    }
    swift_storeEnumTagMultiPayload(v38, v40, v42);
  }
  v44 = *(int *)(a3 + 44);
  v45 = a1 + v44;
  v46 = (uint64_t *)(a2 + v44);
  v47 = *(_QWORD *)(a1 + v44);
  v48 = *v46;
  *(_QWORD *)(a1 + v44) = *v46;
  swift_retain(v48);
  swift_release(v47);
  *(_QWORD *)(v45 + 8) = v46[1];
  return a1;
}

uint64_t sub_100031A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;

  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v9 = type metadata accessor for MusicViewModel(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v10 = *(int *)(v9 + 44);
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_100003E70(&qword_100165370);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(_QWORD *)(a1 + *(int *)(v9 + 48)) = *(_QWORD *)(a2 + *(int *)(v9 + 48));
  v16 = *(int *)(a3 + 36);
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  v21 = *(int *)(a3 + 40);
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  v24 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v25 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
    swift_storeEnumTagMultiPayload(v22, v24, 1);
  }
  else
  {
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 44)) = *(_OWORD *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t sub_100031C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v12);
  v14 = type metadata accessor for MusicViewModel(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v13);
  v15 = *(int *)(v14 + 44);
  v16 = (void *)(a1 + v15);
  v17 = (void *)(a2 + v15);
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    v23 = sub_100003E70(&qword_100165370);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v16, v17, v18);
LABEL_7:
  v24 = *(int *)(v14 + 48);
  v25 = *(_QWORD *)(a1 + v24);
  *(_QWORD *)(a1 + v24) = *(_QWORD *)(a2 + v24);
  swift_bridgeObjectRelease(v25);
  if (a1 != a2)
  {
    v26 = *(int *)(a3 + 36);
    v27 = (void *)(a1 + v26);
    v28 = (const void *)(a2 + v26);
    sub_100008194(a1 + v26, &qword_10015D490);
    v29 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
    {
      v30 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v27, v28, v30);
      swift_storeEnumTagMultiPayload(v27, v29, 1);
    }
    else
    {
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    v31 = *(int *)(a3 + 40);
    v32 = (void *)(a1 + v31);
    v33 = (const void *)(a2 + v31);
    sub_100008194(a1 + v31, &qword_10015D600);
    v34 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
    {
      v35 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v32, v33, v35);
      swift_storeEnumTagMultiPayload(v32, v34, 1);
    }
    else
    {
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
  }
  v36 = *(int *)(a3 + 44);
  v37 = a1 + v36;
  v38 = (_QWORD *)(a2 + v36);
  v39 = *(_QWORD *)(a1 + v36);
  *(_QWORD *)(a1 + v36) = *v38;
  swift_release(v39);
  *(_QWORD *)(v37 + 8) = v38[1];
  return a1;
}

uint64_t sub_100031F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100031F40);
}

uint64_t sub_100031F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  int v18;

  v7 = type metadata accessor for MusicViewModel(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
  {
    v9 = v7;
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    v11 = a1;
    return v10(v11, a2, v9);
  }
  v12 = sub_100003E70(&qword_10015E6D8);
  v13 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v13 + 84) == (_DWORD)a2)
  {
    v9 = v12;
    v14 = *(int *)(a3 + 36);
LABEL_7:
    v11 = a1 + v14;
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    return v10(v11, a2, v9);
  }
  v15 = sub_100003E70(qword_10015D610);
  v13 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v13 + 84) == (_DWORD)a2)
  {
    v9 = v15;
    v14 = *(int *)(a3 + 40);
    goto LABEL_7;
  }
  v17 = *(_QWORD *)(a1 + *(int *)(a3 + 44));
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  v18 = v17 - 1;
  if (v18 < 0)
    v18 = -1;
  return (v18 + 1);
}

uint64_t sub_100032024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100032030);
}

uint64_t sub_100032030(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = type metadata accessor for MusicViewModel(0, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a4);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_100003E70(&qword_10015E6D8);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = *(int *)(a4 + 36);
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = sub_100003E70(qword_10015D610);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = *(int *)(a4 + 40);
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 44)) = a2;
  return result;
}

uint64_t type metadata accessor for MusicModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MusicModule);
}

uint64_t sub_100032110(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100118B20, 1);
}

uint64_t sub_100032144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[16];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t AssociatedTypeWitness;
  uint64_t v58;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v47 = a2;
  v3 = sub_1000034AC(&qword_10015E998);
  v4 = sub_1000034AC(&qword_10015E9A0);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for Array(255, v5);
  v45 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(v45 + 24);
  v56 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7);
  v58 = sub_1000034AC(&qword_10015E9A8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v5, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v8 = type metadata accessor for ForEach(255, &v56);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v4, v8, 0, 0);
  v10 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v10);
  v12 = type metadata accessor for VStack(255, v10, v11);
  v13 = type metadata accessor for ModifiedContent(255, v12, &type metadata for _PaddingLayout);
  v14 = type metadata accessor for ModifiedContent(255, v13, &type metadata for _PaddingLayout);
  v15 = sub_1000034AC(&qword_10015E9B0);
  v16 = type metadata accessor for ModifiedContent(255, v14, v15);
  v17 = swift_getTupleTypeMetadata2(255, v3, v16, 0, 0);
  v18 = type metadata accessor for TupleView(255, v17);
  v19 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v20 = type metadata accessor for VStack(0, v18, v19);
  v42 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v22 = (char *)&v42 - v21;
  v23 = type metadata accessor for ModifiedContent(0, v20, &type metadata for _PaddingLayout);
  v43 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v25 = (char *)&v42 - v24;
  v26 = type metadata accessor for ModifiedContent(0, v23, &type metadata for _PaddingLayout);
  v44 = *(_QWORD *)(v26 - 8);
  v27 = __chkstk_darwin(v26);
  v29 = (char *)&v42 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v27);
  v32 = (char *)&v42 - v31;
  v33 = static HorizontalAlignment.leading.getter(v30);
  v49 = v5;
  v50 = v45;
  v51 = v46;
  v34 = VStack.init(alignment:spacing:content:)(v33, 0x4030000000000000, 0, sub_1000344D0, v48, v18, v19);
  v35 = static Edge.Set.horizontal.getter(v34);
  v36 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v20);
  View.padding(_:_:)(v35, 0, 1, v20, v36);
  v37 = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v22, v20);
  v38 = static Edge.Set.bottom.getter(v37);
  v54 = v36;
  v55 = &protocol witness table for _PaddingLayout;
  v39 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v23);
  View.padding(_:_:)(v38, 0, 1, v23, v39);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v25, v23);
  v52 = v39;
  v53 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v26);
  sub_1000F257C((uint64_t)v29, v26, (uint64_t)v32);
  v40 = *(void (**)(char *, uint64_t))(v44 + 8);
  v40(v29, v26);
  sub_1000E3B88((uint64_t)v32, v26, v47);
  return ((uint64_t (*)(char *, uint64_t))v40)(v32, v26);
}

uint64_t sub_100032544@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t KeyPath;
  uint64_t v88;
  _OWORD *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t *v100;
  __n128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char v174[8];
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  _QWORD v180[2];
  uint64_t v181[8];
  __int128 v182;
  __int128 v183;
  uint64_t v184;

  v153 = a3;
  v170 = a4;
  v7 = sub_100003E70(&qword_10015DF58);
  __chkstk_darwin(v7);
  v169 = (uint64_t)&v140 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_100003E70(&qword_10015E338);
  __chkstk_darwin(v156);
  v159 = (uint64_t)&v140 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v160);
  v165 = (char *)&v140 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_100003E70(&qword_10015E9B8);
  __chkstk_darwin(v154);
  v166 = (uint64_t *)((char *)&v140 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v168 = sub_100003E70(&qword_10015E9C0);
  __chkstk_darwin(v168);
  v167 = (char *)&v140 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000034AC(&qword_10015E9A0);
  v14 = type metadata accessor for Array(255, a2);
  v15 = *(_QWORD *)(a3 + 24);
  v151 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v15);
  v17 = sub_1000034AC(&qword_10015E9A8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v14);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v15, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  *(_QWORD *)&v182 = v14;
  *((_QWORD *)&v182 + 1) = AssociatedTypeWitness;
  *(_QWORD *)&v183 = v17;
  *((_QWORD *)&v183 + 1) = WitnessTable;
  v184 = AssociatedConformanceWitness;
  v20 = type metadata accessor for ForEach(255, &v182);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v13, v20, 0, 0);
  v22 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v148 = v22;
  v147 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v22);
  v23 = type metadata accessor for VStack(0, v22, v147);
  v150 = *(_QWORD *)(v23 - 8);
  v146 = v23;
  __chkstk_darwin(v23);
  v145 = (char *)&v140 - v24;
  v26 = type metadata accessor for ModifiedContent(0, v25, &type metadata for _PaddingLayout);
  *(_QWORD *)&v152 = *(_QWORD *)(v26 - 8);
  v149 = v26;
  __chkstk_darwin(v26);
  v144 = (char *)&v140 - v27;
  v29 = type metadata accessor for ModifiedContent(0, v28, &type metadata for _PaddingLayout);
  v157 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v171 = (char *)&v140 - v30;
  v31 = sub_1000034AC(&qword_10015E9B0);
  v158 = v29;
  v164 = type metadata accessor for ModifiedContent(0, v29, v31);
  v161 = *(_QWORD *)(v164 - 8);
  v32 = __chkstk_darwin(v164);
  v163 = (char *)&v140 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v162 = (uint64_t)&v140 - v34;
  v143 = type metadata accessor for AccessibilityTraits(0);
  v142 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v36 = (char *)&v140 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = sub_100003E70(&qword_10015E998);
  v37 = __chkstk_darwin(v155);
  v173 = (uint64_t)&v140 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v172 = (uint64_t)&v140 - v39;
  v141 = a1;
  v40 = *a1;
  v41 = a1[1];
  v42 = *((unsigned __int8 *)a1 + 16);
  v43 = a1[3];
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v43);
  v44 = Text.init(_:tableName:bundle:comment:)(v40, v41, v42, v43, 0, 0, 0, 0, 0, 256);
  v46 = v45;
  v48 = v47;
  v50 = v49 & 1;
  v51 = static Font.Weight.bold.getter();
  v52 = Text.fontWeight(_:)(*(_QWORD *)&v51, 0, v44, v46, v50, v48);
  v54 = v53;
  v56 = v55;
  v58 = v57 & 1;
  sub_10000BFF8(v44, v46, v50);
  v59 = swift_bridgeObjectRelease(v48);
  v60 = static Font.title2.getter(v59);
  v61 = Text.font(_:)(v60, v52, v54, v58, v56);
  v63 = v62;
  LOBYTE(v50) = v64;
  v66 = v65;
  swift_release(v60);
  sub_10000BFF8(v52, v54, v58);
  swift_bridgeObjectRelease(v56);
  v67 = Text.accessibilityHeading(_:)(1, v61, v63, v50 & 1, v66);
  v69 = v68;
  LOBYTE(v52) = v70;
  v72 = v71;
  sub_10000BFF8(v61, v63, v50 & 1);
  v73 = swift_bridgeObjectRelease(v66);
  *(_QWORD *)&v182 = v67;
  *((_QWORD *)&v182 + 1) = v69;
  LOBYTE(v183) = v52 & 1;
  *((_QWORD *)&v183 + 1) = v72;
  static AccessibilityTraits.isHeader.getter(v73);
  v74 = v173;
  View.accessibility(addTraits:)(v36, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v142 + 8))(v36, v143);
  sub_10000BFF8(v182, *((uint64_t *)&v182 + 1), v183);
  swift_bridgeObjectRelease(*((_QWORD *)&v183 + 1));
  v75 = sub_100007A98(v74, v172, &qword_10015E998);
  v175 = v151;
  v176 = v153;
  v177 = v141;
  v76 = static HorizontalAlignment.center.getter(v75);
  v77 = v145;
  v78 = VStack.init(alignment:spacing:content:)(v76, 0, 1, sub_1000344DC, v174, v148, v147);
  v79 = static Edge.Set.horizontal.getter(v78);
  v80 = v146;
  v81 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v146);
  v82 = v144;
  View.padding(_:_:)(v79, 0, 1, v80, v81);
  v83 = (*(uint64_t (**)(char *, uint64_t))(v150 + 8))(v77, v80);
  v84 = static Edge.Set.top.getter(v83);
  v181[6] = v81;
  v181[7] = (uint64_t)&protocol witness table for _PaddingLayout;
  v85 = v149;
  v153 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v149);
  View.padding(_:_:)(v84, 0, 1, v85, v153);
  (*(void (**)(char *, uint64_t))(v152 + 8))(v82, v85);
  if (qword_10015CE68 != -1)
    swift_once(&qword_10015CE68, sub_1000382DC);
  v86 = qword_10016F660;
  KeyPath = swift_getKeyPath(&unk_10010C158);
  v88 = v160;
  v89 = v165;
  v90 = &v165[*(int *)(v160 + 20)];
  v91 = enum case for RoundedCornerStyle.continuous(_:);
  v92 = type metadata accessor for RoundedCornerStyle(0);
  v93 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 104);
  v93(v90, v91, v92);
  __asm { FMOV            V0.2D, #12.0 }
  v152 = _Q0;
  *v89 = _Q0;
  v99 = v159;
  sub_10001BF60((uint64_t)v89, v159);
  *(_WORD *)(v99 + *(int *)(v156 + 36)) = 256;
  v100 = v166;
  sub_100007ADC(v99, (uint64_t)v166 + *(int *)(v154 + 36), &qword_10015E338);
  *v100 = KeyPath;
  v100[1] = v86;
  swift_retain_n(v86, 2);
  swift_retain(KeyPath);
  sub_100008194(v99, &qword_10015E338);
  sub_10001BFA4((uint64_t)v89);
  swift_release(v86);
  v101 = swift_release(KeyPath);
  v102 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v93)((char *)v89 + *(int *)(v88 + 20), v91, v92, v101);
  *v89 = v152;
  v103 = static Color.black.getter(v102);
  v104 = Color.opacity(_:)(0.1);
  swift_release(v103);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v182, 0, 0, &_swiftEmptyArrayStorage, 0.5, 10.0, 0.0);
  v105 = v169;
  sub_10001BF60((uint64_t)v89, v169);
  v106 = v105 + *(int *)(sub_100003E70(&qword_10015DF60) + 36);
  v107 = v183;
  *(_OWORD *)v106 = v182;
  *(_OWORD *)(v106 + 16) = v107;
  *(_QWORD *)(v106 + 32) = v184;
  v108 = sub_100003E70(&qword_10015DF68);
  *(_QWORD *)(v105 + *(int *)(v108 + 52)) = v104;
  *(_WORD *)(v105 + *(int *)(v108 + 56)) = 256;
  v109 = static Alignment.center.getter(v108);
  v111 = v110;
  v112 = (uint64_t *)(v105 + *(int *)(sub_100003E70(&qword_10015DF70) + 36));
  *v112 = v109;
  v112[1] = v111;
  v113 = sub_10001BFA4((uint64_t)v89);
  v114 = static Alignment.center.getter(v113);
  v116 = v115;
  v117 = v168;
  v118 = (uint64_t)v167;
  v119 = (uint64_t)&v167[*(int *)(v168 + 36)];
  sub_100007ADC(v105, v119, &qword_10015DF58);
  v120 = (uint64_t *)(v119 + *(int *)(sub_100003E70(&qword_10015E9C8) + 36));
  *v120 = v114;
  v120[1] = v116;
  sub_100007ADC((uint64_t)v100, v118, &qword_10015E9B8);
  sub_100008194(v105, &qword_10015DF58);
  v121 = sub_100008194((uint64_t)v100, &qword_10015E9B8);
  v122 = static Alignment.center.getter(v121);
  v124 = v123;
  v181[4] = v153;
  v181[5] = (uint64_t)&protocol witness table for _PaddingLayout;
  v125 = v158;
  v126 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v158);
  v127 = sub_1000344F0();
  v128 = (uint64_t)v163;
  v129 = v124;
  v130 = v171;
  View.background<A>(_:alignment:)(v118, v122, v129, v125, v117, v126, v127);
  sub_100008194(v118, &qword_10015E9C0);
  (*(void (**)(char *, uint64_t))(v157 + 8))(v130, v125);
  v131 = sub_100007D40(&qword_10015EA08, &qword_10015E9B0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v181[2] = v126;
  v181[3] = v131;
  v132 = v164;
  v133 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v164);
  v134 = v162;
  sub_1000F257C(v128, v132, v162);
  v135 = v161;
  v136 = *(void (**)(uint64_t, uint64_t))(v161 + 8);
  v136(v128, v132);
  v137 = v172;
  v138 = v173;
  sub_100007ADC(v172, v173, &qword_10015E998);
  v181[0] = v138;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v135 + 16))(v128, v134, v132);
  v181[1] = v128;
  v180[0] = v155;
  v180[1] = v132;
  v178 = sub_10003467C();
  v179 = v133;
  sub_1000E4768(v181, 2uLL, (uint64_t)v180);
  v136(v134, v132);
  sub_100008194(v137, &qword_10015E998);
  v136(v128, v132);
  return sub_100008194(v138, &qword_10015E998);
}

uint64_t sub_100033188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v56 = a5;
  v8 = type metadata accessor for MusicModule(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v54 = v8;
  v55 = v10;
  __chkstk_darwin(v8);
  v51 = (char *)&v44 - v11;
  v12 = type metadata accessor for Array(255, a2);
  v49 = v12;
  v50 = *(_QWORD *)(a3 + 24);
  v13 = v50;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v50);
  v48 = AssociatedTypeWitness;
  v15 = sub_1000034AC(&qword_10015E9A8);
  v47 = v15;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v12);
  v46 = WitnessTable;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v13, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v60 = v12;
  v61 = (char *)AssociatedTypeWitness;
  v62 = v15;
  v63 = WitnessTable;
  v64 = AssociatedConformanceWitness;
  v18 = type metadata accessor for ForEach(0, &v60);
  v53 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v45 = (uint64_t)&v44 - v22;
  v52 = sub_100003E70(&qword_10015E9A0);
  v23 = __chkstk_darwin(v52);
  v44 = (uint64_t)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v44 - v26;
  *(_QWORD *)v27 = static VerticalAlignment.center.getter(v25);
  *((_QWORD *)v27 + 1) = 0;
  v27[16] = 1;
  v28 = sub_100003E70(&qword_10015EA20);
  sub_100033544(a1, a2, a3, v29, (uint64_t)&v27[*(int *)(v28 + 44)]);
  v31 = type metadata accessor for MusicViewModel(0, a2, a3, v30);
  v60 = sub_100050218(v31);
  v32 = v51;
  v33 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v51, a1, v54);
  v34 = *(unsigned __int8 *)(v9 + 80);
  v35 = (v34 + 32) & ~v34;
  v36 = swift_allocObject(&unk_10014DAC0, v35 + v55, v34 | 7);
  *(_QWORD *)(v36 + 16) = a2;
  *(_QWORD *)(v36 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v36 + v35, v32, v33);
  v37 = sub_100034918();
  ForEach<>.init(_:content:)(&v60, sub_1000348B0, v36, v49, v48, v47, v46, v37, v50);
  v59[2] = v37;
  v38 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v18);
  v39 = v45;
  sub_1000F257C((uint64_t)v21, v18, v45);
  v40 = v53;
  v41 = *(void (**)(char *, uint64_t))(v53 + 8);
  v41(v21, v18);
  v42 = v44;
  sub_100007ADC((uint64_t)v27, v44, &qword_10015E9A0);
  v60 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v21, v39, v18);
  v61 = v21;
  v59[0] = v52;
  v59[1] = v18;
  v57 = sub_100007D40(&qword_10015EA48, &qword_10015E9A0, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v58 = v38;
  sub_1000E4768(&v60, 2uLL, (uint64_t)v59);
  v41((char *)v39, v18);
  sub_100008194((uint64_t)v27, &qword_10015E9A0);
  v41(v21, v18);
  return sub_100008194(v42, &qword_10015E9A0);
}

double sub_100033544@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double result;
  _QWORD v69[6];
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[2];
  unsigned __int8 v105;
  uint64_t v106;
  unsigned __int8 v107;
  uint64_t v108;
  unsigned __int8 v109;
  uint64_t v110;
  unsigned __int8 v111;
  uint64_t v112;
  unsigned __int8 v113;
  uint64_t v114;
  unsigned __int8 v115;
  uint64_t v116;
  uint64_t v117;

  v97 = a3;
  v103 = a2;
  v7 = type metadata accessor for MusicModule(0, a2, a3, a4);
  v81 = *(_QWORD *)(v7 - 8);
  v78 = *(_QWORD *)(v81 + 64);
  __chkstk_darwin(v7);
  v79 = (char *)&v70 - v8;
  v9 = sub_100003E70(&qword_10015D6D8);
  v101 = *(_QWORD *)(v9 - 8);
  v102 = v9;
  __chkstk_darwin(v9);
  v82 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v11);
  v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v77 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = v17;
  __chkstk_darwin(v16);
  v99 = (char *)&v70 - v18;
  v19 = sub_100003E70(&qword_10015E8E0);
  v20 = __chkstk_darwin(v19);
  v100 = (uint64_t)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v98 = (char *)&v70 - v22;
  v23 = type metadata accessor for ColorScheme(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v70 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v29 = (char *)&v70 - v28;
  v80 = v7;
  sub_10001E08C((uint64_t)&v70 - v28);
  (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v27, enum case for ColorScheme.light(_:), v23);
  LOBYTE(v7) = static ColorScheme.== infix(_:_:)(v29, v27);
  v30 = *(void (**)(char *, uint64_t))(v24 + 8);
  v30(v27, v23);
  v30(v29, v23);
  v31 = "appleMusicLogoWhite";
  if ((v7 & 1) != 0)
    v31 = "appleMusicLogoBlack";
  v32 = Image.init(_:bundle:)(0xD000000000000013, (unint64_t)(v31 - 32) | 0x8000000000000000, 0);
  v33 = static Alignment.leading.getter(v32);
  sub_1000E4AC4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v104, 0.0, 1, 0.0, 1, v33, v34, v32);
  swift_release(v32);
  v35 = v104[0];
  v96 = v104[1];
  v95 = v105;
  v94 = v106;
  v93 = v107;
  v92 = v108;
  v91 = v109;
  v90 = v110;
  v89 = v111;
  v88 = v112;
  v87 = v113;
  v86 = v114;
  v85 = v115;
  v84 = v116;
  v83 = v117;
  v36 = v97;
  v38 = type metadata accessor for MusicViewModel(0, v103, v97, v37);
  v39 = a1;
  sub_1000500F8(v38, (uint64_t)v13);
  v40 = v15;
  v41 = v14;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_100008194((uint64_t)v13, &qword_100165370);
    v42 = 1;
    v44 = v101;
    v43 = v102;
    v45 = (uint64_t)v98;
  }
  else
  {
    v72 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v74 = v15;
    v46 = v99;
    v71 = v14;
    v72(v99, v13, v14);
    v75 = v35;
    v47 = v79;
    v48 = v81;
    v49 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 16);
    v73 = v39;
    v50 = v80;
    v49(v79, v39, v80);
    v51 = v77;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v77, v46, v41);
    v52 = *(unsigned __int8 *)(v48 + 80);
    v53 = (v52 + 32) & ~v52;
    v54 = *(unsigned __int8 *)(v40 + 80);
    v55 = (v78 + v54 + v53) & ~v54;
    v56 = swift_allocObject(&unk_10014DB10, v55 + v76, v52 | v54 | 7);
    v57 = v103;
    *(_QWORD *)(v56 + 16) = v103;
    *(_QWORD *)(v56 + 24) = v36;
    v58 = v47;
    v35 = v75;
    (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v56 + v53, v58, v50);
    v59 = v71;
    v60 = ((uint64_t (*)(uint64_t, char *, uint64_t))v72)(v56 + v55, v51, v71);
    __chkstk_darwin(v60);
    v69[2] = v57;
    v69[3] = v36;
    v69[4] = v73;
    v61 = v82;
    Button.init(action:label:)(sub_100034CD8, v56, sub_100034D68, v69, &type metadata for Text, &protocol witness table for Text);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v99, v59);
    v63 = v101;
    v62 = v102;
    v45 = (uint64_t)v98;
    (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v98, v61, v102);
    v42 = 0;
    v43 = v62;
    v44 = v63;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v45, v42, 1, v43);
  v64 = v100;
  sub_100007ADC(v45, v100, &qword_10015E8E0);
  v65 = v96;
  *(_QWORD *)a5 = v35;
  *(_QWORD *)(a5 + 8) = v65;
  *(_BYTE *)(a5 + 16) = v95;
  *(_QWORD *)(a5 + 24) = v94;
  *(_BYTE *)(a5 + 32) = v93;
  *(_QWORD *)(a5 + 40) = v92;
  *(_BYTE *)(a5 + 48) = v91;
  *(_QWORD *)(a5 + 56) = v90;
  *(_BYTE *)(a5 + 64) = v89;
  *(_QWORD *)(a5 + 72) = v88;
  *(_BYTE *)(a5 + 80) = v87;
  *(_QWORD *)(a5 + 88) = v86;
  *(_BYTE *)(a5 + 96) = v85;
  v66 = v83;
  *(_QWORD *)(a5 + 104) = v84;
  *(_QWORD *)(a5 + 112) = v66;
  v67 = sub_100003E70(&qword_10015EA60);
  sub_100007ADC(v64, a5 + *(int *)(v67 + 48), &qword_10015E8E0);
  swift_retain(v35);
  sub_100008194(v45, &qword_10015E8E0);
  sub_100008194(v64, &qword_10015E8E0);
  *(_QWORD *)&result = swift_release(v35).n128_u64[0];
  return result;
}

uint64_t sub_100033C4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(unsigned __int8 *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  result = Text.init(_:tableName:bundle:comment:)(v3, v4, v5, v6, 0, 0, 0, 0, 0, 256);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = v9 & 1;
  *(_QWORD *)(a2 + 24) = v10;
  return result;
}

uint64_t sub_100033CDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  void (*v67)(char *, char *, uint64_t);
  char *v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t AssociatedTypeWitness;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _BYTE v99[25];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[25];
  char v104;

  v95 = a5;
  v92 = type metadata accessor for MusicModule(0, a3, a4, a4);
  v91 = *(_QWORD *)(v92 - 8);
  v81 = *(_QWORD *)(v91 + 64);
  __chkstk_darwin(v92);
  v88 = (char *)&v70 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4);
  v79 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v78 = *(_QWORD *)(v79 - 8);
  v10 = __chkstk_darwin(v79);
  v83 = (char *)&v70 - v11;
  v12 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v10);
  v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100003E70(&qword_10015EA50);
  v93 = *(_QWORD *)(v94 - 8);
  v15 = __chkstk_darwin(v94);
  v90 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v89 = (char *)&v70 - v17;
  v18 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v18);
  v20 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v85 = (char *)&v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v70 - v25;
  v80 = type metadata accessor for MusicViewModel(0, a3, a4, v27);
  v86 = a2;
  sub_1000502C8(v80, (uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_100008194((uint64_t)v20, &qword_100165370);
    v28 = 1;
    v29 = v95;
    v30 = v94;
    v31 = v93;
  }
  else
  {
    v87 = v22;
    v32 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    v77 = v21;
    v32(v26, v20, v21);
    v72 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
    v71 = v33;
    v34 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 64))(a3, a4);
    v36 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
    v37 = a1;
    if (v36)
    {
      v74 = v36;
      v75 = v34;
    }
    else
    {
      v75 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
      v74 = v38;
    }
    v39 = AssociatedTypeWitness;
    v40 = v83;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a3);
    (*(void (**)(uint64_t, uint64_t))(a4 + 72))(a3, a4);
    v41 = *(_QWORD *)(v39 - 8);
    v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48))(v40, 1, v39);
    v76 = (void (*)(uint64_t, char *, uint64_t))v32;
    v43 = v26;
    if (v42 == 1)
    {
      (*(void (**)(char *, uint64_t))(v78 + 8))(v40, v79);
      *(_QWORD *)&v98 = 0;
      v96 = 0u;
      v97 = 0u;
    }
    else
    {
      *((_QWORD *)&v97 + 1) = v39;
      *(_QWORD *)&v98 = swift_getAssociatedConformanceWitness(a4, a3, v39, &unk_10011B208, &unk_10011B228);
      v44 = sub_100007D80(&v96);
      (*(void (**)(_QWORD *, char *, uint64_t))(v41 + 32))(v44, v40, v39);
    }
    v45 = v81;
    v46 = v72;
    v47 = v71;
    v48 = v86;
    v49 = sub_1000503E8(v37, v80);
    *(_QWORD *)&v100 = v46;
    *((_QWORD *)&v100 + 1) = v47;
    *(_QWORD *)&v101 = v75;
    *((_QWORD *)&v101 + 1) = v74;
    sub_100007A98((uint64_t)&v96, (uint64_t)&v102, &qword_10015EA58);
    v103[24] = v49 & 1;
    v98 = v102;
    *(_OWORD *)v99 = *(_OWORD *)v103;
    v96 = v100;
    v97 = v101;
    *(_OWORD *)&v99[9] = *(_OWORD *)&v103[9];
    sub_100034A6C((uint64_t)&v96, (uint64_t)&v100);
    v104 = 0;
    sub_100034AA8(&v96);
    v50 = v91;
    v51 = v88;
    v52 = v48;
    v53 = v92;
    (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v88, v52, v92);
    v54 = v87;
    v55 = *(void (**)(char *, char *, uint64_t))(v87 + 16);
    v56 = v85;
    v73 = v43;
    v57 = v43;
    v58 = v77;
    v55(v85, v57, v77);
    v59 = *(unsigned __int8 *)(v50 + 80);
    v60 = (v59 + 32) & ~v59;
    v61 = *(unsigned __int8 *)(v54 + 80);
    v62 = (v45 + v61 + v60) & ~v61;
    v63 = swift_allocObject(&unk_10014DAE8, v62 + v82, v59 | v61 | 7);
    *(_QWORD *)(v63 + 16) = a3;
    *(_QWORD *)(v63 + 24) = a4;
    (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v63 + v60, v51, v53);
    v76(v63 + v62, v56, v58);
    v64 = sub_100003E70(&qword_10015EA30);
    v65 = sub_1000349A4();
    v66 = v90;
    View.onTapGesture(count:perform:)(1, sub_100034AE0, v63, v64, v65);
    swift_release(v63);
    sub_100008194((uint64_t)&v100, &qword_10015EA30);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v73, v58);
    v31 = v93;
    v67 = *(void (**)(char *, char *, uint64_t))(v93 + 32);
    v68 = v89;
    v30 = v94;
    v67(v89, v66, v94);
    v29 = v95;
    v67(v95, v68, v30);
    v28 = 0;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v29, v28, 1, v30);
}

void sub_100034384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = type metadata accessor for OpenURLAction(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for MusicModule(0, a3, a4, v14);
  sub_10001D83C((uint64_t)v13);
  OpenURLAction.callAsFunction(_:)(a2);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v16 = (_QWORD *)(a1 + *(int *)(v15 + 44));
  v17 = (_QWORD *)*v16;
  if (*v16)
  {
    swift_retain(*v16);
    sub_10005074C(a5, 0, 3u, v17);
    swift_release(v17);
  }
  else
  {
    v18 = v16[1];
    v19 = type metadata accessor for RemoteViewConfiguration();
    v20 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v18, v19, v20);
    __break(1u);
  }
}

uint64_t sub_1000344D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100032544(*(uint64_t **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000344DC@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100033188(v2[4], v2[2], v2[3], a1, a2);
}

unint64_t sub_1000344F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E9D0;
  if (!qword_10015E9D0)
  {
    v1 = sub_1000034AC(&qword_10015E9C0);
    sub_100034574();
    sub_100007D40(&qword_10015EA00, &qword_10015E9C8, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E9D0);
  }
  return result;
}

unint64_t sub_100034574()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E9D8;
  if (!qword_10015E9D8)
  {
    v1 = sub_1000034AC(&qword_10015E9B8);
    sub_1000345F8();
    sub_100007D40(&qword_10015E330, &qword_10015E338, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E9D8);
  }
  return result;
}

unint64_t sub_1000345F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E9E0;
  if (!qword_10015E9E0)
  {
    v1 = sub_1000034AC(&qword_10015E9E8);
    sub_100030CD4();
    sub_100007D40(&qword_10015E9F0, &qword_10015E9F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E9E0);
  }
  return result;
}

unint64_t sub_10003467C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EA10;
  if (!qword_10015EA10)
  {
    v1 = sub_1000034AC(&qword_10015E998);
    sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EA10);
  }
  return result;
}

uint64_t sub_100034700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = (int *)type metadata accessor for MusicModule(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = v4 + v10;
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v10 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v10 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v10 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v10 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v10 + 64));
  v14 = type metadata accessor for MusicViewModel(0, v5, v6, v13);
  v15 = v4 + v10 + *(int *)(v14 + 44);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + *(int *)(v14 + 48)));
  v18 = (_QWORD *)(v12 + v7[9]);
  v19 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  }
  else
  {
    swift_release(*v18);
  }
  v21 = (_QWORD *)(v12 + v7[10]);
  v22 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v21, v23);
  }
  else
  {
    swift_release(*v21);
  }
  swift_release(*(_QWORD *)(v12 + v7[11]));
  return swift_deallocObject(v4, v10 + v11, v9 | 7);
}

uint64_t sub_1000348B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MusicModule(0, v6, v7, a2) - 8) + 80);
  return sub_100033CDC(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

unint64_t sub_100034918()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10015EA28;
  if (!qword_10015EA28)
  {
    v1 = sub_1000034AC(&qword_10015E9A8);
    v2[0] = sub_1000034AC(&qword_10015EA30);
    v2[1] = sub_1000349A4();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10015EA28);
  }
  return result;
}

unint64_t sub_1000349A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EA38;
  if (!qword_10015EA38)
  {
    v1 = sub_1000034AC(&qword_10015EA30);
    sub_100034A28();
    sub_100007D40(&qword_10015E6C8, &qword_10015E6D0, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EA38);
  }
  return result;
}

unint64_t sub_100034A28()
{
  unint64_t result;

  result = qword_10015EA40;
  if (!qword_10015EA40)
  {
    result = swift_getWitnessTable(&unk_10010F5EC, &type metadata for SongRow);
    atomic_store(result, (unint64_t *)&qword_10015EA40);
  }
  return result;
}

uint64_t sub_100034A6C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SongRowViewModel(a2, a1);
  return a2;
}

_QWORD *sub_100034AA8(_QWORD *a1)
{
  destroy for SongRowViewModel(a1);
  return a1;
}

void sub_100034AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100034CE0(14, a2, a3, a4);
}

uint64_t sub_100034AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v28;
  uint64_t v29;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = (int *)type metadata accessor for MusicModule(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v29 = *(_QWORD *)(v8 + 64);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v28 = *(_QWORD *)(v12 + 64);
  v14 = v4 + v10;
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v10 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v10 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v10 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v10 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v10 + 64));
  v16 = type metadata accessor for MusicViewModel(0, v5, v6, v15);
  v17 = v4 + v10 + *(int *)(v16 + 44);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v17, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v17, v11);
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + *(int *)(v16 + 48)));
  v18 = (_QWORD *)(v14 + v7[9]);
  v19 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  }
  else
  {
    swift_release(*v18);
  }
  v21 = (_QWORD *)(v14 + v7[10]);
  v22 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v21, v23);
  }
  else
  {
    swift_release(*v21);
  }
  v24 = v9 | v13 | 7;
  v25 = (v10 + v29 + v13) & ~v13;
  v26 = swift_release(*(_QWORD *)(v14 + v7[11]));
  (*(void (**)(uint64_t, uint64_t, __n128))(v12 + 8))(v4 + v25, v11, v26);
  return swift_deallocObject(v4, v25 + v28, v24);
}

void sub_100034CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100034CE0(12, a2, a3, a4);
}

void sub_100034CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(_QWORD *)(type metadata accessor for MusicModule(0, v6, v7, a4) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  sub_100034384(v4 + v9, v4 + ((v9 + v10 + v11) & ~v11), v6, v7, a1);
}

uint64_t sub_100034D68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100033C4C(*(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_100034D74(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t AssociatedTypeWitness;
  uint64_t v25;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_1000034AC(&qword_10015E998);
  v4 = sub_1000034AC(&qword_10015E9A0);
  v5 = type metadata accessor for Array(255, v1);
  v6 = *(_QWORD *)(v2 + 24);
  v23 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v6);
  v25 = sub_1000034AC(&qword_10015E9A8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v1, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v7 = type metadata accessor for ForEach(255, &v23);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v4, v7, 0, 0);
  v9 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v10 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v9);
  v11 = type metadata accessor for VStack(255, v9, v10);
  v12 = type metadata accessor for ModifiedContent(255, v11, &type metadata for _PaddingLayout);
  v13 = type metadata accessor for ModifiedContent(255, v12, &type metadata for _PaddingLayout);
  v14 = sub_1000034AC(&qword_10015E9B0);
  v15 = type metadata accessor for ModifiedContent(255, v13, v14);
  v16 = swift_getTupleTypeMetadata2(255, v3, v15, 0, 0);
  v17 = type metadata accessor for TupleView(255, v16);
  v18 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v17);
  v19 = type metadata accessor for VStack(255, v17, v18);
  v20 = type metadata accessor for ModifiedContent(255, v19, &type metadata for _PaddingLayout);
  v21 = type metadata accessor for ModifiedContent(255, v20, &type metadata for _PaddingLayout);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v19);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v20);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v21);
}

uint64_t sub_100034FB8()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v1 = objc_msgSend(v0, "_remoteViewControllerProxy");
  if (v1)
  {
    v2 = v1;
    _bridgeAnyObjectToAny(_:)(v6);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100036358((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_100003E70(&qword_10015EAB0);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_100008194((uint64_t)v7, (uint64_t *)&unk_100161740);
    return 0;
  }
}

void sub_100035080(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  double v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void (*v58)(void);
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD v63[5];
  __int128 v64;
  __int128 v65;

  v6 = type metadata accessor for EventRootView(0);
  v7 = __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v11 = (char *)&v55 - v10;
  v12 = sub_100003E70(&qword_10015EAC8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v55 - v16;
  if (!a1)
  {
    __break(1u);
    goto LABEL_30;
  }
  v18 = objc_msgSend(a1, "userInfo");
  if (!v18)
  {
    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_100011AC4(v29, (uint64_t)qword_10016F728);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Remote alert view configuration missing user info", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    if (a2)
      goto LABEL_22;
    __break(1u);
    goto LABEL_16;
  }
  v19 = v18;
  v60 = a3;
  v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v18, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v61 = 0xD000000000000013;
  v62 = 0x8000000100115B80;
  AnyHashable.init<A>(_:)(v63, &v61, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v20 + 16) && (v21 = sub_1000905D0((uint64_t)v63), (v22 & 1) != 0))
  {
    sub_100036668(*(_QWORD *)(v20 + 56) + 32 * v21, (uint64_t)&v64);
  }
  else
  {
    v64 = 0u;
    v65 = 0u;
  }
  swift_bridgeObjectRelease(v20);
  sub_100036508((uint64_t)v63);
  if (!*((_QWORD *)&v65 + 1))
  {
LABEL_16:
    sub_100008194((uint64_t)&v64, (uint64_t *)&unk_100161740);
LABEL_17:
    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_100011AC4(v34, (uint64_t)qword_10016F728);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Remote alert view configuration missing a route type", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    if (a2)
    {
LABEL_22:
      a2();
      return;
    }
LABEL_30:
    __break(1u);
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if ((swift_dynamicCast(&v61, &v64, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
    goto LABEL_17;
  v58 = a2;
  v24 = v61;
  v23 = v62;
  v25 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v26 = JSONDecoder.init()();
  v27 = type metadata accessor for RemoteViewConfiguration();
  v28 = sub_100003B3C(&qword_10015EAD0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CBC);
  v56 = v23;
  v57 = v24;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v63, v27, v24, v23, v27, v28);
  *(_QWORD *)&v39 = swift_release(v26).n128_u64[0];
  v55 = v63[0];
  v40 = objc_msgSend(v59, "view", v39);
  if (!v40)
    goto LABEL_31;
  v41 = v40;
  v42 = objc_msgSend(v40, "window");

  if (!v42)
    goto LABEL_27;
  v43 = objc_msgSend(v42, "_rootSheetPresentationController");

  if (v43)
  {
    objc_msgSend(v43, "_setShouldScaleDownBehindDescendantSheets:", 0);

LABEL_27:
    v44 = v59;
    objc_msgSend(v59, "setNeedsStatusBarAppearanceUpdate");
    sub_100035E48();
    v45 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    *v9 = EnvironmentObject.init()(v27, v45);
    v9[1] = v46;
    v47 = (_QWORD *)((char *)v9 + *(int *)(v6 + 20));
    *v47 = swift_getKeyPath(&unk_10010C1C0);
    v48 = sub_100003E70(&qword_10015D498);
    swift_storeEnumTagMultiPayload(v47, v48, 0);
    sub_1000365A4((uint64_t)v9, (uint64_t)v11);
    v49 = static ObservableObject.environmentStore.getter(v27, v45);
    sub_1000365E8((uint64_t)v11, (uint64_t)v17);
    v50 = (uint64_t *)&v17[*(int *)(v12 + 36)];
    v51 = v55;
    *v50 = v49;
    v50[1] = v51;
    swift_retain(v51);
    sub_10003662C((uint64_t)v11);
    v52 = (char *)objc_allocWithZone((Class)sub_100003E70(&qword_10015EAD8));
    *(_QWORD *)&v52[*(_QWORD *)(qword_10016F680 + (swift_isaMask & *(_QWORD *)v52) + 16) + 8] = 0;
    swift_unknownObjectWeakInit();
    sub_100007ADC((uint64_t)v17, (uint64_t)v15, &qword_10015EAC8);
    v53 = (_QWORD *)UIHostingController.init(rootView:)(v15);
    sub_100008194((uint64_t)v17, &qword_10015EAC8);
    *(_QWORD *)((char *)v53 + *(_QWORD *)(qword_10016F680 + (swift_isaMask & *v53) + 16) + 8) = &off_10014DB70;
    swift_unknownObjectWeakAssign();
    v54 = objc_msgSend(v44, "presentViewController:animated:completion:", v53, 1, 0);
    if (v58)
    {
      ((void (*)(id))v58)(v54);
      swift_release(v51);

      sub_10003653C(v57, v56);
      return;
    }
    goto LABEL_32;
  }
LABEL_33:
  __break(1u);
}

void sub_1000358B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __objc2_prot **v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  void *v57;
  _QWORD aBlock[5];
  uint64_t v59;
  _QWORD v60[6];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v53 = *(_QWORD *)(v2 - 8);
  v54 = v2;
  __chkstk_darwin(v2);
  v52 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  __chkstk_darwin(v4);
  v49 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      if (a1 >= 0)
        v6 = a1 & 0xFFFFFFFFFFFFFF8;
      else
        v6 = a1;
      swift_bridgeObjectRetain(a1);
      v7 = __CocoaSet.makeIterator()(v6);
      v8 = sub_1000363A0(0, &qword_10015EAB8, SBUIRemoteAlertButtonAction_ptr);
      v9 = sub_1000363D8();
      v10 = Set.Iterator.init(_cocoa:)(v60, v7, v8, v9);
      a1 = v60[0];
      v48 = v60[1];
      v11 = v60[2];
      v12 = v60[3];
      v13 = v60[4];
    }
    else
    {
      v14 = -1 << *(_BYTE *)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 56);
      v48 = a1 + 56;
      v16 = ~v14;
      v17 = -v14;
      if (v17 < 64)
        v18 = ~(-1 << v17);
      else
        v18 = -1;
      v13 = v18 & v15;
      v10 = (_QWORD *)swift_bridgeObjectRetain(a1);
      v11 = v16;
      v12 = 0;
    }
    v46 = a1 & 0x7FFFFFFFFFFFFFFFLL;
    v44 = v11;
    v47 = (unint64_t)(v11 + 64) >> 6;
    v19 = &off_10015B000;
    v45 = (char *)&type metadata for Swift.AnyObject + 8;
    v20 = v52;
    v21 = v54;
    if ((a1 & 0x8000000000000000) == 0)
      goto LABEL_17;
LABEL_14:
    v34 = __CocoaSet.Iterator.next()(v10);
    if (v34)
    {
      v35 = v34;
      v57 = (void *)v34;
      v36 = sub_1000363A0(0, &qword_10015EAB8, SBUIRemoteAlertButtonAction_ptr);
      swift_unknownObjectRetain(v35);
      swift_dynamicCast(aBlock, &v57, v45, v36, 7);
      v37 = (id)aBlock[0];
      swift_unknownObjectRelease(v35);
      v38 = v12;
      v39 = v13;
      while (v37)
      {
        if ((objc_msgSend(v37, (SEL)v19[488], v44) & 0x10) != 0)
        {
          sub_1000363A0(0, (unint64_t *)&qword_10015EA90, OS_dispatch_queue_ptr);
          v56 = v39;
          v22 = (void *)static OS_dispatch_queue.main.getter();
          v23 = swift_allocObject(&unk_10014DBE0, 24, 7);
          v24 = v55;
          *(_QWORD *)(v23 + 16) = v55;
          aBlock[4] = sub_1000366AC;
          v59 = v23;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_10003616C;
          aBlock[3] = &unk_10014DBF8;
          v25 = _Block_copy(aBlock);
          v26 = v24;
          v27 = a1;
          v28 = v49;
          static DispatchQoS.unspecified.getter(v26);
          v57 = &_swiftEmptyArrayStorage;
          v29 = sub_100003B3C(&qword_10015EA98, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v30 = sub_100003E70(&qword_10015EAA0);
          v31 = sub_10003630C();
          dispatch thunk of SetAlgebra.init<A>(_:)(&v57, v30, v31, v21, v29);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v28, v20, v25);
          _Block_release(v25);

          (*(void (**)(char *, uint64_t))(v53 + 8))(v20, v21);
          v32 = v28;
          a1 = v27;
          v19 = &off_10015B000;
          (*(void (**)(char *, uint64_t))(v50 + 8))(v32, v51);
          v33 = v59;

          swift_release(v33);
          v12 = v38;
          v13 = v56;
          if (a1 < 0)
            goto LABEL_14;
        }
        else
        {

          v12 = v38;
          v13 = v39;
          if (a1 < 0)
            goto LABEL_14;
        }
LABEL_17:
        if (v13)
        {
          v39 = (v13 - 1) & v13;
          v40 = __clz(__rbit64(v13)) | (v12 << 6);
          v38 = v12;
        }
        else
        {
          v41 = v12 + 1;
          if (__OFADD__(v12, 1))
          {
            __break(1u);
            goto LABEL_39;
          }
          if (v41 >= v47)
            break;
          v42 = *(_QWORD *)(v48 + 8 * v41);
          v38 = v12 + 1;
          if (!v42)
          {
            v38 = v12 + 2;
            if (v12 + 2 >= v47)
              break;
            v42 = *(_QWORD *)(v48 + 8 * v38);
            if (!v42)
            {
              v38 = v12 + 3;
              if (v12 + 3 >= v47)
                break;
              v42 = *(_QWORD *)(v48 + 8 * v38);
              if (!v42)
              {
                v38 = v12 + 4;
                if (v12 + 4 >= v47)
                  break;
                v42 = *(_QWORD *)(v48 + 8 * v38);
                if (!v42)
                {
                  v43 = v12 + 5;
                  while (v47 != v43)
                  {
                    v42 = *(_QWORD *)(v48 + 8 * v43++);
                    if (v42)
                    {
                      v38 = v43 - 1;
                      goto LABEL_32;
                    }
                  }
                  break;
                }
              }
            }
          }
LABEL_32:
          v39 = (v42 - 1) & v42;
          v40 = __clz(__rbit64(v42)) + (v38 << 6);
        }
        v37 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v40);
      }
    }
    sub_100036430(a1);
  }
  else
  {
LABEL_39:
    __break(1u);
  }
}

void *sub_100035E48()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *result;
  void *v9;

  v0 = (void *)sub_100034FB8();
  if (v0)
  {
    v1 = v0;
    objc_msgSend(v0, "setAllowsMenuButtonDismissal:", 1);
    swift_unknownObjectRelease(v1);
  }
  v2 = (void *)sub_100034FB8();
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, "setAllowsSiri:", 1);
    swift_unknownObjectRelease(v3);
  }
  v4 = (void *)sub_100034FB8();
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, "setDesiredHardwareButtonEvents:", 16);
    swift_unknownObjectRelease(v5);
  }
  v6 = (void *)sub_100034FB8();
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v6, "setDismissalAnimationStyle:", 2);
    swift_unknownObjectRelease(v7);
  }
  result = (void *)sub_100034FB8();
  if (result)
  {
    v9 = result;
    objc_msgSend(result, "setSwipeDismissalStyle:", 1);
    return (void *)swift_unknownObjectRelease(v9);
  }
  return result;
}

double sub_100035F1C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double result;
  uint64_t v15;
  void *v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v15 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000363A0(0, (unint64_t *)&qword_10015EA90, OS_dispatch_queue_ptr);
  v8 = (void *)static OS_dispatch_queue.main.getter();
  v9 = swift_allocObject(&unk_10014DB90, 24, 7);
  *(_QWORD *)(v9 + 16) = v0;
  aBlock[4] = sub_1000362EC;
  v18 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003616C;
  aBlock[3] = &unk_10014DBA8;
  v10 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  v16 = &_swiftEmptyArrayStorage;
  v11 = sub_100003B3C(&qword_10015EA98, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v12 = sub_100003E70(&qword_10015EAA0);
  v13 = sub_10003630C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v10);
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v15 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(_QWORD *)&result = swift_release(v18).n128_u64[0];
  return result;
}

void *sub_100036114(void *a1)
{
  void *result;
  void *v2;

  objc_msgSend(a1, "dismissViewControllerAnimated:completion:", 1, 0);
  result = (void *)sub_100034FB8();
  if (result)
  {
    v2 = result;
    objc_msgSend(result, "invalidate");
    return (void *)swift_unknownObjectRelease(v2);
  }
  return result;
}

uint64_t sub_10003616C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

id sub_100036278()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemoteViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RemoteViewController()
{
  return objc_opt_self(_TtC16EventViewService20RemoteViewController);
}

uint64_t sub_1000362C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void *sub_1000362EC()
{
  uint64_t v0;

  return sub_100036114(*(void **)(v0 + 16));
}

uint64_t sub_1000362F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100036304(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10003630C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EAA8;
  if (!qword_10015EAA8)
  {
    v1 = sub_1000034AC(&qword_10015EAA0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10015EAA8);
  }
  return result;
}

uint64_t sub_100036358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70((uint64_t *)&unk_100161740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000363A0(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_1000363D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EAC0;
  if (!qword_10015EAC0)
  {
    v1 = sub_1000363A0(255, &qword_10015EAB8, SBUIRemoteAlertButtonAction_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10015EAC0);
  }
  return result;
}

uint64_t sub_100036430(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100036438()
{
  return EnvironmentValues.verticalSizeClass.getter();
}

uint64_t sub_100036458(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100003E70(&qword_10015D4A0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007ADC(a1, (uint64_t)v4, &qword_10015D4A0);
  return EnvironmentValues.verticalSizeClass.setter(v4);
}

uint64_t sub_1000364D8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000364FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_100036508(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_10003653C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100036580()
{
  return EnvironmentValues.verticalSizeClass.getter();
}

uint64_t sub_1000365A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventRootView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000365E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventRootView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003662C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for EventRootView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100036668(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t destroy for EmptyEventsList(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for EmptyEventsList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for EmptyEventsList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for EmptyEventsList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for EmptyEventsList(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmptyEventsList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EmptyEventsList()
{
  return &type metadata for EmptyEventsList;
}

uint64_t sub_100036870(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118BC4, 1);
}

uint64_t sub_100036880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  __int128 v76;
  char v77;
  char v78;
  char v79;
  char v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;

  v61 = sub_100003E70(&qword_10015E9C8);
  __chkstk_darwin(v61);
  v63 = (uint64_t)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v60);
  v59 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003E70(&qword_10015DF58);
  v13 = __chkstk_darwin(v12);
  v62 = (uint64_t)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static VerticalAlignment.center.getter(v13);
  v16 = sub_100036C9C(a1, a2, a3, a4, (uint64_t)&v81);
  v17 = v81;
  v58 = v81;
  v18 = v82;
  v19 = v83;
  LOBYTE(a3) = v84;
  v20 = *((_QWORD *)&v84 + 1);
  v21 = static Edge.Set.all.getter(v16);
  v80 = 0;
  v79 = a3;
  v78 = 1;
  v66 = v15;
  v67 = 0x402E000000000000;
  v68 = 0;
  v69 = v17;
  v70 = v18;
  v71 = v19;
  v72 = a3;
  v73 = v20;
  v74 = v21;
  v75 = 0u;
  v76 = 0u;
  v77 = 1;
  v22 = static Alignment.leading.getter(v21);
  sub_1000E4C6C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v81, 0.0, 1, 0.0, 1, v22, v23);
  v24 = v59;
  swift_release(*((_QWORD *)&v17 + 1));
  swift_release(v58);
  swift_release(v18);
  sub_10000BFF8(v19, *((uint64_t *)&v19 + 1), a3);
  swift_bridgeObjectRelease(v20);
  v25 = (char *)v24 + *(int *)(v60 + 20);
  v26 = enum case for RoundedCornerStyle.continuous(_:);
  v27 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v25, v26, v27);
  __asm { FMOV            V0.2D, #12.0 }
  *v24 = _Q0;
  if (qword_10015CE50 != -1)
    swift_once(&qword_10015CE50, sub_1000382A0);
  v33 = qword_10016F648;
  swift_retain(qword_10016F648);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v64, 0, 0, &_swiftEmptyArrayStorage, 1.0, 10.0, 0.0);
  v34 = v62;
  sub_10001BF60((uint64_t)v24, v62);
  v35 = v34 + *(int *)(sub_100003E70(&qword_10015DF60) + 36);
  v36 = v64[1];
  *(_OWORD *)v35 = v64[0];
  *(_OWORD *)(v35 + 16) = v36;
  *(_QWORD *)(v35 + 32) = v65;
  v37 = sub_100003E70(&qword_10015DF68);
  *(_QWORD *)(v34 + *(int *)(v37 + 52)) = v33;
  *(_WORD *)(v34 + *(int *)(v37 + 56)) = 256;
  v38 = static Alignment.center.getter(v37);
  v40 = v39;
  v41 = (uint64_t *)(v34 + *(int *)(sub_100003E70(&qword_10015DF70) + 36));
  *v41 = v38;
  v41[1] = v40;
  v42 = sub_10001BFA4((uint64_t)v24);
  v43 = static Alignment.center.getter(v42);
  v45 = v44;
  v46 = v63;
  sub_100007ADC(v34, v63, &qword_10015DF58);
  v47 = (uint64_t *)(v46 + *(int *)(v61 + 36));
  *v47 = v43;
  v47[1] = v45;
  v48 = sub_100003E70(&qword_10015EAE0);
  sub_100007ADC(v46, a5 + *(int *)(v48 + 36), &qword_10015E9C8);
  v49 = v94;
  *(_OWORD *)(a5 + 192) = v93;
  *(_OWORD *)(a5 + 208) = v49;
  *(_OWORD *)(a5 + 224) = v95;
  *(_QWORD *)(a5 + 240) = v96;
  v50 = v90;
  *(_OWORD *)(a5 + 128) = v89;
  *(_OWORD *)(a5 + 144) = v50;
  v51 = v92;
  *(_OWORD *)(a5 + 160) = v91;
  *(_OWORD *)(a5 + 176) = v51;
  v52 = v86;
  *(_OWORD *)(a5 + 64) = v85;
  *(_OWORD *)(a5 + 80) = v52;
  v53 = v88;
  *(_OWORD *)(a5 + 96) = v87;
  *(_OWORD *)(a5 + 112) = v53;
  v54 = v82;
  *(_OWORD *)a5 = v81;
  *(_OWORD *)(a5 + 16) = v54;
  v55 = v84;
  *(_OWORD *)(a5 + 32) = v83;
  *(_OWORD *)(a5 + 48) = v55;
  sub_100036EA0((uint64_t)&v81);
  sub_100008194(v46, &qword_10015E9C8);
  sub_100008194(v34, &qword_10015DF58);
  return sub_100036F18((uint64_t)&v81);
}

uint64_t sub_100036C9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t KeyPath;
  uint64_t v36;
  uint64_t v37;

  v37 = Image.init(systemName:)(0xD000000000000012, 0x8000000100115BA0);
  v36 = static Font.title2.getter(v37);
  KeyPath = swift_getKeyPath(&unk_10010C258);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v10 = Text.init(_:tableName:bundle:comment:)(a1, a2, a3, a4, 0, 0, 0, 0, 0, 256);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = static Font.subheadline.getter();
  v18 = Text.font(_:)(v17, v10, v12, v16, v14);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  swift_release(v17);
  v25 = v22 & 1;
  sub_10000BFF8(v10, v12, v16);
  v26 = swift_bridgeObjectRelease(v14);
  v27 = static Font.Weight.medium.getter(v26);
  v28 = Text.fontWeight(_:)(*(_QWORD *)&v27, 0, v18, v20, v25, v24);
  v30 = v29;
  v32 = v31;
  LOBYTE(v16) = v33 & 1;
  sub_10000BFF8(v18, v20, v25);
  swift_bridgeObjectRelease(v24);
  *(_QWORD *)a5 = v37;
  *(_QWORD *)(a5 + 8) = KeyPath;
  *(_QWORD *)(a5 + 16) = v36;
  *(_QWORD *)(a5 + 24) = 0x3FE6666666666666;
  *(_QWORD *)(a5 + 32) = v28;
  *(_QWORD *)(a5 + 40) = v30;
  *(_BYTE *)(a5 + 48) = v16;
  *(_QWORD *)(a5 + 56) = v32;
  swift_retain(v37);
  swift_retain(KeyPath);
  swift_retain(v36);
  sub_10000C008(v28, v30, v16);
  swift_bridgeObjectRetain(v32);
  sub_10000BFF8(v28, v30, v16);
  swift_release(v36);
  swift_release(KeyPath);
  swift_release(v37);
  return swift_bridgeObjectRelease(v32);
}

uint64_t sub_100036E90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100036880(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100036EA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_BYTE *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  swift_retain(*(_QWORD *)(a1 + 40));
  swift_retain(v2);
  swift_retain(v3);
  sub_10000C008(v4, v5, v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_100036F18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_BYTE *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  swift_release(*(_QWORD *)(a1 + 32));
  swift_release(v2);
  swift_release(v3);
  sub_10000BFF8(v4, v5, v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

unint64_t sub_100036F9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EAE8;
  if (!qword_10015EAE8)
  {
    v1 = sub_1000034AC(&qword_10015EAE0);
    sub_100037020();
    sub_100007D40(&qword_10015EA00, &qword_10015E9C8, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EAE8);
  }
  return result;
}

unint64_t sub_100037020()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EAF0;
  if (!qword_10015EAF0)
  {
    v1 = sub_1000034AC(&qword_10015EAF8);
    sub_10003708C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EAF0);
  }
  return result;
}

unint64_t sub_10003708C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EB00;
  if (!qword_10015EB00)
  {
    v1 = sub_1000034AC(&qword_10015EB08);
    sub_100007D40(&qword_10015EB10, &qword_10015EB18, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EB00);
  }
  return result;
}

uint64_t sub_100037110(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = " ";
  v4[2] = &unk_10010C340;
  v4[3] = " ";
  v4[4] = &unk_10010C340;
  v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = &unk_10010C358;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[9] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 10, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

double sub_1000371CC()
{
  return sub_100037398() * 0.6136 * 0.74;
}

double sub_1000371F8()
{
  return sub_100037398() * 0.56;
}

double sub_100037218()
{
  return sub_100037398() * 0.56 * 0.18;
}

double sub_100037244()
{
  double v0;

  v0 = sub_1000374E0();
  return (v0 + sub_100037398() * -0.6136) * 0.5;
}

BOOL sub_100037280()
{
  uint64_t v0;

  return Array.count.getter(*(_QWORD *)(v0 + 112)) > 1;
}

double sub_1000372AC()
{
  return sub_100037398() * -0.015;
}

double sub_1000372CC()
{
  return sub_100037398() * 0.6136 * 0.8;
}

double sub_1000372F8()
{
  return sub_100037398() * 0.6;
}

uint64_t sub_10003731C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v13;

  v13 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  sub_1000375AC(a1, a2, a3, a4, a5, a6);
  return v13;
}

double sub_100037398()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_10010C3B8);
  sub_1000373E8(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + 120);
}

uint64_t sub_1000373E8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t WitnessTable;
  uint64_t v5;

  WitnessTable = swift_getWitnessTable(&unk_10010C398, *v1);
  return ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, a1, WitnessTable);
}

uint64_t sub_100037448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t WitnessTable;
  uint64_t v11;

  WitnessTable = swift_getWitnessTable(&unk_10010C398, *v4);
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, a1, a2, a3, a4, WitnessTable);
}

double sub_1000374E0()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_10010C3F0);
  sub_1000373E8(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + 128);
}

void sub_100037530(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  double v9;
  __int128 v10;

  v10 = *(_OWORD *)(*(_QWORD *)v3 + 80);
  KeyPath = swift_getKeyPath(a1);
  v8 = v3;
  v9 = a3;
  sub_100037448(KeyPath, a2, (uint64_t)&v7, (uint64_t)&type metadata for () + 8);
  swift_release(KeyPath);
}

uint64_t sub_1000375AC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  *(_QWORD *)(v6 + 16) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000025, 0x8000000100115C40);
  *(_QWORD *)(v6 + 24) = v13;
  *(_BYTE *)(v6 + 32) = v14 & 1;
  *(_QWORD *)(v6 + 40) = v15;
  *(_QWORD *)(v6 + 48) = 0x7A65426863746177;
  *(_QWORD *)(v6 + 56) = 0xEA00000000006C65;
  *(_QWORD *)(v6 + 64) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000023, 0x8000000100115C70);
  *(_QWORD *)(v6 + 72) = v16;
  *(_BYTE *)(v6 + 80) = v17 & 1;
  *(_QWORD *)(v6 + 88) = v18;
  ObservationRegistrar.init()();
  *(_QWORD *)(v6 + 96) = a1;
  *(_QWORD *)(v6 + 104) = a2;
  *(_QWORD *)(v6 + 112) = a3;
  *(double *)(v6 + 120) = a5;
  *(double *)(v6 + 128) = a6;
  *(_BYTE *)(v6 + 136) = a4;
  return v6;
}

_QWORD *sub_100037690()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v1 = v0[3];
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v0[7]);
  v2 = v0[9];
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[14]);
  v3 = (char *)v0 + qword_10015EB20;
  v4 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t sub_100037714()
{
  uint64_t v0;

  sub_100037690();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for WatchFacesViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WatchFacesViewModel);
}

void sub_100037744(double *a1@<X8>)
{
  *a1 = sub_100037398();
}

void sub_10003776C(double *a1)
{
  sub_100037530((uint64_t)&unk_10010C3B8, (uint64_t)sub_1000377B8, *a1);
}

uint64_t sub_1000377A0()
{
  return 16;
}

__n128 sub_1000377AC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000377B8()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + 120) = result;
  return result;
}

void sub_1000377C8(double *a1@<X8>)
{
  *a1 = sub_1000374E0();
}

void sub_1000377F0(double *a1)
{
  sub_100037530((uint64_t)&unk_10010C3F0, (uint64_t)sub_10003783C, *a1);
}

uint64_t sub_100037824()
{
  return 16;
}

__n128 sub_100037830(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_10003783C()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + 128) = result;
  return result;
}

uint64_t sub_10003784C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[10] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[11] = v5;
  v3[12] = v6;
  return swift_task_switch(sub_1000378BC, v5, v6);
}

uint64_t sub_1000378BC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  __int128 v5;

  v1 = *(_QWORD *)(v0 + 56);
  v5 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 40) = v5;
  v2 = sub_100007D80((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v2, v1);
  v3 = (_QWORD *)swift_task_alloc(dword_10015ED94);
  *(_QWORD *)(v0 + 104) = v3;
  *v3 = v0;
  v3[1] = sub_100037940;
  return sub_10003BBF4(v0 + 16);
}

uint64_t sub_100037940()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[11];
    v5 = v2[12];
    v6 = sub_1000379E0;
  }
  else
  {
    sub_1000055A8(v2 + 2);
    v4 = v2[11];
    v5 = v2[12];
    v6 = sub_1000379AC;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1000379AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000379E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  sub_1000055A8((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

ValueMetadata *type metadata accessor for CalendarController()
{
  return &type metadata for CalendarController;
}

id sub_100037A34(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  id v24;
  void (*v25)(uint64_t, char *);
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSString v29;
  uint64_t (*v30)(uint64_t, char *);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  id v37;
  Class isa;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t WitnessTable;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t AssociatedConformanceWitness;
  id v48;
  id v49;
  void *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  Class v59;
  uint64_t v60;
  uint64_t v61;
  Class v62;
  id v63;
  uint64_t v64;
  char *v65;
  char *v66;
  Class v67;
  id v68;
  id v69;
  uint64_t (*v70)(uint64_t, char *);
  id v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSString v76;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  void (*v81)(uint64_t, uint64_t);
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t AssociatedTypeWitness;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v8 = type metadata accessor for URL(0);
  v95 = *(_QWORD *)(v8 - 8);
  v96 = v8;
  __chkstk_darwin(v8);
  v94 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TimeZone(0);
  v91 = *(_QWORD *)(v10 - 8);
  v92 = v10;
  __chkstk_darwin(v10);
  v90 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for Date(0);
  v84 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v88 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for DateInterval(0);
  v83 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v85 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4);
  v98 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v82 = (char *)&v78 - v14;
  v15 = swift_getAssociatedTypeWitness(255, a4);
  v79 = type metadata accessor for Optional(0, v15);
  v78 = *(_QWORD *)(v79 - 8);
  v16 = __chkstk_darwin(v79);
  v97 = (char *)&v78 - v17;
  v81 = (void (*)(uint64_t, uint64_t))v15;
  v99 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v16);
  v80 = (char *)&v78 - v18;
  v19 = type metadata accessor for String.Encoding(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (void *)objc_opt_self(EKEvent);
  v93 = a2;
  v24 = objc_msgSend(v23, "eventWithEventStore:", a2);
  v25 = (void (*)(uint64_t, char *))*((_QWORD *)a4 + 20);
  v26 = v24;
  v25(a3, a4);
  v28 = v27;
  v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  objc_msgSend(v26, "setTitle:", v29);

  v30 = (uint64_t (*)(uint64_t, char *))*((_QWORD *)a4 + 19);
  v100 = a3;
  v101 = a1;
  v31 = v30(a3, a4);
  v33 = v32;
  static String.Encoding.utf8.getter();
  v34 = String.data(using:allowLossyConversion:)(v22, 0, v31, v33);
  v36 = v35;
  swift_bridgeObjectRelease(v33);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  if (v36 >> 60 != 15)
  {
    v37 = v26;
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v37, "setStructuredData:", isa);

    sub_1000381E0(v34, v36);
  }
  v39 = v100;
  v40 = (*((uint64_t (**)(uint64_t, char *))a4 + 27))(v100, a4);
  v102 = v40;
  v41 = (uint64_t)v81;
  v42 = type metadata accessor for Array(0, v81);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v42);
  v44 = v97;
  Collection.first.getter(v42, WitnessTable);
  swift_bridgeObjectRelease(v40);
  v45 = v99;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v44, 1, v41) == 1)
  {
    (*(void (**)(char *, uint64_t))(v78 + 8))(v44, v79);
  }
  else
  {
    v46 = v80;
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v80, v44, v41);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, v39, v41, &unk_1001191E8, &unk_100119238);
    v48 = sub_100105818(v41, AssociatedConformanceWitness);
    v49 = objc_msgSend((id)objc_opt_self(EKStructuredLocation), "locationWithMapItem:", v48);

    objc_msgSend(v26, "setStructuredLocation:", v49);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v41);
  }
  v50 = v26;
  v99 = *((_QWORD *)a4 + 25);
  v51 = v82;
  ((void (*)(uint64_t, char *))v99)(v39, a4);
  v52 = AssociatedTypeWitness;
  v53 = swift_getAssociatedConformanceWitness(a4, v39, AssociatedTypeWitness, &unk_1001191E8, &unk_100119230);
  v97 = a4;
  v54 = v53;
  v81 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
  v55 = v85;
  v81(v52, v53);
  v98 = *(_QWORD *)(v98 + 8);
  v56 = ((uint64_t (*)(char *, uint64_t))v98)(v51, v52);
  v57 = v88;
  DateInterval.start.getter(v56);
  v83 = *(_QWORD *)(v83 + 8);
  v58 = v86;
  ((void (*)(char *, uint64_t))v83)(v55, v86);
  v59 = Date._bridgeToObjectiveC()().super.isa;
  v84 = *(_QWORD *)(v84 + 8);
  v60 = v89;
  ((void (*)(char *, uint64_t))v84)(v57, v89);
  objc_msgSend(v50, "setStartDate:", v59);

  ((void (*)(uint64_t, char *))v99)(v100, v97);
  v81(v52, v54);
  v61 = ((uint64_t (*)(char *, uint64_t))v98)(v51, v52);
  DateInterval.end.getter(v61);
  ((void (*)(char *, uint64_t))v83)(v55, v58);
  v62 = Date._bridgeToObjectiveC()().super.isa;
  ((void (*)(char *, uint64_t))v84)(v57, v60);
  objc_msgSend(v50, "setEndDate:", v62);

  v63 = v50;
  v64 = v100;
  v65 = v97;
  ((void (*)(uint64_t, char *))v99)(v100, v97);
  v66 = v90;
  (*(void (**)(uint64_t, uint64_t))(v54 + 16))(v52, v54);
  ((void (*)(char *, uint64_t))v98)(v51, v52);
  v67 = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v91 + 8))(v66, v92);
  objc_msgSend(v63, "setTimeZone:", v67);

  v68 = v63;
  v69 = objc_msgSend(v93, "defaultCalendarForNewEvents");
  objc_msgSend(v68, "setCalendar:", v69);

  v70 = (uint64_t (*)(uint64_t, char *))*((_QWORD *)v65 + 22);
  v71 = v68;
  v72 = v94;
  v73 = v70(v64, v65);
  URL.absoluteString.getter(v73);
  v75 = v74;
  (*(void (**)(char *, uint64_t))(v95 + 8))(v72, v96);
  v76 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v75);
  objc_msgSend(v71, "setNotes:", v76);

  return v71;
}

uint64_t sub_1000381E0(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10003653C(result, a2);
  return result;
}

uint64_t sub_1000381F4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v0 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v3 + 104))(v2, enum case for Color.RGBColorSpace.sRGB(_:));
  result = Color.init(_:red:green:blue:opacity:)(v2, 0.996078431, 0.231372549, 0.22745098, 1.0);
  qword_10016F638 = result;
  return result;
}

uint64_t sub_10003828C(uint64_t a1)
{
  return sub_100038304(a1, (SEL *)&selRef_systemBackgroundColor, &qword_10016F640);
}

uint64_t sub_1000382A0(uint64_t a1)
{
  return sub_100038304(a1, (SEL *)&selRef_secondarySystemBackgroundColor, &qword_10016F648);
}

uint64_t sub_1000382B4(uint64_t a1)
{
  return sub_100038304(a1, (SEL *)&selRef_secondaryLabelColor, &qword_10016F650);
}

uint64_t sub_1000382C8(uint64_t a1)
{
  return sub_100038304(a1, (SEL *)&selRef_secondarySystemFillColor, &qword_10016F658);
}

uint64_t sub_1000382DC(uint64_t a1)
{
  return sub_100038304(a1, (SEL *)&selRef_secondarySystemGroupedBackgroundColor, &qword_10016F660);
}

uint64_t sub_1000382F0(uint64_t a1)
{
  return sub_100038304(a1, (SEL *)&selRef_tertiarySystemFillColor, &qword_10016F668);
}

uint64_t sub_100038304(uint64_t a1, SEL *a2, uint64_t *a3)
{
  id v4;
  uint64_t result;

  v4 = objc_msgSend((id)objc_opt_self(UIColor), *a2);
  result = Color.init(_:)(v4);
  *a3 = result;
  return result;
}

uint64_t destroy for TourPhotosTitleView(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for TourPhotosTitleView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v7;
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for TourPhotosTitleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

__n128 initializeWithTake for TourPhotosTitleView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for TourPhotosTitleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for TourPhotosTitleView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TourPhotosTitleView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TourPhotosTitleView()
{
  return &type metadata for TourPhotosTitleView;
}

uint64_t sub_10003862C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118C80, 1);
}

uint64_t sub_10003863C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a1;
  v1 = type metadata accessor for AccessibilityChildBehavior(0);
  v27 = *(_QWORD *)(v1 - 8);
  v28 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for BlendMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003E70(&qword_10015EBB0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003E70(&qword_10015EBB8);
  __chkstk_darwin(v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100003E70(&qword_10015EBC0);
  v14 = *(_QWORD *)(v25 - 8);
  v15 = __chkstk_darwin(v25);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = static HorizontalAlignment.center.getter(v15);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 0;
  v18 = sub_100003E70(&qword_10015EBC8);
  sub_1000388B4(v26, (uint64_t)&v10[*(int *)(v18 + 44)]);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for BlendMode.plusLighter(_:), v4);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(&v13[*(int *)(v11 + 36)], v7, v4);
  sub_100007ADC((uint64_t)v10, (uint64_t)v13, &qword_10015EBB0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v19 = sub_100008194((uint64_t)v10, &qword_10015EBB0);
  static AccessibilityChildBehavior.combine.getter(v19);
  v20 = sub_10003942C();
  View.accessibilityElement(children:)(v3, v11, v20);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v3, v28);
  sub_100008194((uint64_t)v13, &qword_10015EBB8);
  v21 = v29;
  v22 = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v29, v17, v25);
  *(_BYTE *)(v21 + *(int *)(sub_100003E70(&qword_10015EBE0) + 36)) = 1;
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v22);
}

uint64_t sub_1000388B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE v115[4];
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  uint64_t v123;
  _BYTE *v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t KeyPath;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD v135[5];

  v123 = a2;
  v3 = sub_100003E70(&qword_10015EBE8);
  __chkstk_darwin(v3);
  v5 = &v115[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100003E70(&qword_10015EBF0);
  __chkstk_darwin(v6);
  v8 = &v115[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100003E70(&qword_10015EBF8);
  v10 = __chkstk_darwin(v9);
  v12 = &v115[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __chkstk_darwin(v10);
  v15 = &v115[-v14];
  *(_QWORD *)v5 = static VerticalAlignment.center.getter(v13);
  *((_QWORD *)v5 + 1) = 0x4010000000000000;
  v5[16] = 0;
  v16 = sub_100003E70(&qword_10015EC00);
  v17 = sub_10003900C((uint64_t *)a1, (uint64_t)&v5[*(int *)(v16 + 44)]);
  v18 = static Color.white.getter(v17);
  v19 = Color.opacity(_:)(0.6);
  swift_release(v18);
  sub_100007ADC((uint64_t)v5, (uint64_t)v8, &qword_10015EBE8);
  *(_QWORD *)&v8[*(int *)(v6 + 36)] = v19;
  v20 = sub_100008194((uint64_t)v5, &qword_10015EBE8);
  v21 = static Edge.Set.bottom.getter(v20);
  v22 = EdgeInsets.init(_all:)(10.0);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  sub_100007ADC((uint64_t)v8, (uint64_t)v12, &qword_10015EBF0);
  v29 = (double *)&v12[*(int *)(v9 + 36)];
  *(_BYTE *)v29 = v21;
  v29[1] = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  *((_BYTE *)v29 + 40) = 0;
  sub_100008194((uint64_t)v8, &qword_10015EBF0);
  v124 = v15;
  v125 = v12;
  sub_1000394E4((uint64_t)v12, (uint64_t)v15);
  v30 = *(_QWORD *)(a1 + 72);
  if (v30)
  {
    v135[0] = *(_QWORD *)(a1 + 64);
    v135[1] = v30;
    v31 = sub_10000CB40();
    swift_bridgeObjectRetain(v30);
    v32 = Text.init<A>(_:)(v135, &type metadata for String, v31);
    v34 = v33;
    v36 = v35;
    v38 = v37 & 1;
    v39 = static Font.largeTitle.getter();
    static Font.Weight.bold.getter();
    v40 = Font.weight(_:)(v39);
    swift_release(v39);
    v41 = Text.font(_:)(v40, v32, v34, v38, v36);
    v43 = v42;
    v45 = v44;
    v47 = v46;
    swift_release(v40);
    v48 = v45 & 1;
    sub_10000BFF8(v32, v34, v38);
    v49 = swift_bridgeObjectRelease(v36);
    v50 = static Color.white.getter(v49);
    v51 = Color.opacity(_:)(0.95);
    swift_release(v50);
    v135[0] = v51;
    v52 = Text.foregroundStyle<A>(_:)(v135, v41, v43, v48, v47, &type metadata for Color, &protocol witness table for Color);
    v133 = v53;
    v134 = v52;
    v131 = v54 & 1;
    v132 = v55;
    sub_10000BFF8(v41, v43, v48);
    swift_release(v51);
    swift_bridgeObjectRelease(v47);
    KeyPath = swift_getKeyPath(&unk_10010C4C8);
    v129 = swift_getKeyPath(&unk_10010C4F8);
    LOBYTE(v48) = static Edge.Set.bottom.getter(v129);
    v122 = EdgeInsets.init(_all:)(4.0);
    v121 = v56;
    v120 = v57;
    v119 = v58;
    v126 = v48;
    v127 = 1;
    v128 = 2;
  }
  else
  {
    v133 = 0;
    v134 = 0;
    v131 = 0;
    v132 = 0;
    v129 = 0;
    KeyPath = 0;
    v127 = 0;
    v128 = 0;
    v126 = 0;
    v122 = 0.0;
    v121 = 0;
    v120 = 0;
    v119 = 0;
  }
  v59 = *(_QWORD *)(a1 + 32);
  v60 = *(_QWORD *)(a1 + 40);
  v61 = *(unsigned __int8 *)(a1 + 48);
  v62 = *(_QWORD *)(a1 + 56);
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v62);
  v63 = Text.init(_:tableName:bundle:comment:)(v59, v60, v61, v62, 0, 0, 0, 0, 0, 256);
  v65 = v64;
  v67 = v66;
  v69 = v68 & 1;
  v70 = static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  v71 = Font.weight(_:)(v70);
  swift_release(v70);
  v72 = Text.font(_:)(v71, v63, v65, v69, v67);
  v74 = v73;
  v76 = v75;
  v78 = v77;
  swift_release(v71);
  v79 = v76 & 1;
  sub_10000BFF8(v63, v65, v69);
  v80 = swift_bridgeObjectRelease(v67);
  v81 = static Color.white.getter(v80);
  v82 = Color.opacity(_:)(0.6);
  swift_release(v81);
  v135[0] = v82;
  v83 = Text.foregroundStyle<A>(_:)(v135, v72, v74, v79, v78, &type metadata for Color, &protocol witness table for Color);
  v117 = v84;
  v118 = v85;
  v116 = v86 & 1;
  sub_10000BFF8(v72, v74, v79);
  swift_release(v82);
  swift_bridgeObjectRelease(v78);
  v87 = swift_getKeyPath(&unk_10010C4C8);
  v88 = swift_getKeyPath(&unk_10010C4F8);
  v89 = (uint64_t)v125;
  sub_100007ADC((uint64_t)v124, (uint64_t)v125, &qword_10015EBF8);
  v90 = v89;
  v91 = v123;
  sub_100007ADC(v90, v123, &qword_10015EBF8);
  v92 = sub_100003E70(&qword_10015EC08);
  v93 = v91 + *(int *)(v92 + 48);
  v94 = v133;
  v95 = v134;
  *(_QWORD *)v93 = v134;
  *(_QWORD *)(v93 + 8) = v94;
  v133 = v94;
  v134 = v95;
  v96 = v94;
  v97 = v131;
  *(_QWORD *)(v93 + 16) = v131;
  v98 = v97;
  v131 = v97;
  v99 = v132;
  *(_QWORD *)(v93 + 24) = v132;
  v100 = v99;
  v132 = v99;
  v101 = KeyPath;
  *(_QWORD *)(v93 + 32) = KeyPath;
  v102 = v101;
  KeyPath = v101;
  v103 = v128;
  *(_QWORD *)(v93 + 40) = v128;
  *(_QWORD *)(v93 + 48) = 0;
  v104 = v103;
  v128 = v103;
  v105 = v129;
  *(_QWORD *)(v93 + 56) = v129;
  v106 = v105;
  v129 = v105;
  v107 = v127;
  *(_QWORD *)(v93 + 64) = v127;
  v127 = v107;
  v108 = v126;
  *(_QWORD *)(v93 + 72) = v126;
  v126 = v108;
  v109 = v121;
  *(double *)(v93 + 80) = v122;
  *(_QWORD *)(v93 + 88) = v109;
  v110 = v119;
  *(_QWORD *)(v93 + 96) = v120;
  *(_QWORD *)(v93 + 104) = v110;
  *(_BYTE *)(v93 + 112) = 0;
  v111 = v91 + *(int *)(v92 + 64);
  v112 = v117;
  *(_QWORD *)v111 = v83;
  *(_QWORD *)(v111 + 8) = v112;
  LOBYTE(v79) = v116;
  *(_BYTE *)(v111 + 16) = v116;
  v113 = v118;
  *(_QWORD *)(v111 + 24) = v118;
  *(_QWORD *)(v111 + 32) = v87;
  *(_QWORD *)(v111 + 40) = 2;
  *(_BYTE *)(v111 + 48) = 0;
  *(_QWORD *)(v111 + 56) = v88;
  *(_BYTE *)(v111 + 64) = 1;
  sub_10003953C(v95, v96, v98, v100, v102, v104, 0, v106);
  sub_10000C008(v83, v112, v79);
  swift_bridgeObjectRetain(v113);
  swift_retain(v87);
  swift_retain(v88);
  sub_100008194((uint64_t)v124, &qword_10015EBF8);
  sub_10000BFF8(v83, v112, v79);
  swift_release(v88);
  swift_release(v87);
  swift_bridgeObjectRelease(v113);
  sub_10003958C(v134, v133, v131, v132, KeyPath, v128, 0, v129);
  return sub_100008194((uint64_t)v125, &qword_10015EBF8);
}

uint64_t sub_10003900C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  __int128 v62;

  v51 = a2;
  v3 = type metadata accessor for Image.ResizingMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_10015EC10);
  __chkstk_darwin(v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003E70(&qword_10015EC18);
  v11 = __chkstk_darwin(v10);
  v50 = (uint64_t)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v50 - v13;
  v15 = Image.init(_:bundle:)(0xD00000000000001FLL, 0x8000000100115CA0, 0);
  v16 = enum case for Image.TemplateRenderingMode.template(_:);
  v17 = type metadata accessor for Image.TemplateRenderingMode(0);
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v9, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v9, 0, 1, v17);
  v19 = Image.renderingMode(_:)(v9, v15);
  swift_release(v15);
  sub_100008194((uint64_t)v9, &qword_10015EC10);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Image.ResizingMode.stretch(_:), v3);
  v20 = Image.resizable(capInsets:resizingMode:)(v6, v19, 0.0, 0.0, 0.0, 0.0);
  v21 = swift_release(v19);
  v22 = (*(uint64_t (**)(char *, uint64_t, __n128))(v4 + 8))(v6, v3, v21);
  v23 = static Alignment.center.getter(v22);
  _FrameLayout.init(width:height:alignment:)(&v58, 0x4031000000000000, 0, 0x4030000000000000, 0, v23, v24);
  v52 = v20;
  v53 = v58;
  v54 = v59;
  v55 = v60;
  v56 = v61;
  v57 = v62;
  v25 = sub_100003E70(&qword_10015EC20);
  v26 = sub_1000395DC();
  View.accessibilityHidden(_:)(1, v25, v26);
  swift_release(v20);
  v27 = *a1;
  v28 = a1[1];
  v29 = *((unsigned __int8 *)a1 + 16);
  v30 = a1[3];
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v30);
  v31 = Text.init(_:tableName:bundle:comment:)(v27, v28, v29, v30, 0, 0, 0, 0, 0, 256);
  v33 = v32;
  v35 = v34;
  v37 = v36 & 1;
  v38 = static Font.caption2.getter();
  static Font.Weight.semibold.getter();
  v39 = Font.weight(_:)(v38);
  swift_release(v38);
  v40 = Text.font(_:)(v39, v31, v33, v37, v35);
  v42 = v41;
  LOBYTE(v4) = v43;
  v45 = v44;
  swift_release(v39);
  LOBYTE(v4) = v4 & 1;
  sub_10000BFF8(v31, v33, v37);
  swift_bridgeObjectRelease(v35);
  v46 = v50;
  sub_100007ADC((uint64_t)v14, v50, &qword_10015EC18);
  v47 = v51;
  sub_100007ADC(v46, v51, &qword_10015EC18);
  v48 = v47 + *(int *)(sub_100003E70(&qword_10015EC30) + 48);
  *(_QWORD *)v48 = v40;
  *(_QWORD *)(v48 + 8) = v42;
  *(_BYTE *)(v48 + 16) = v4;
  *(_QWORD *)(v48 + 24) = v45;
  sub_10000C008(v40, v42, v4);
  swift_bridgeObjectRetain(v45);
  sub_100008194((uint64_t)v14, &qword_10015EC18);
  sub_10000BFF8(v40, v42, v4);
  swift_bridgeObjectRelease(v45);
  return sub_100008194(v46, &qword_10015EC18);
}

uint64_t sub_1000393EC@<X0>(uint64_t a1@<X8>)
{
  return sub_10003863C(a1);
}

unint64_t sub_10003942C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EBD0;
  if (!qword_10015EBD0)
  {
    v1 = sub_1000034AC(&qword_10015EBB8);
    sub_100039498();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EBD0);
  }
  return result;
}

unint64_t sub_100039498()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EBD8;
  if (!qword_10015EBD8)
  {
    v1 = sub_1000034AC(&qword_10015EBB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EBD8);
  }
  return result;
}

uint64_t sub_1000394E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015EBF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_10003953C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;

  if (a4)
  {
    sub_10000C008(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    swift_retain(a5);
    *(_QWORD *)&result = swift_retain(a8).n128_u64[0];
  }
  return result;
}

uint64_t sub_10003958C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a4)
  {
    sub_10000BFF8(result, a2, a3 & 1);
    swift_release(a8);
    swift_release(a5);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

unint64_t sub_1000395DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EC28;
  if (!qword_10015EC28)
  {
    v1 = sub_1000034AC(&qword_10015EC20);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EC28);
  }
  return result;
}

unint64_t sub_100039644()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10015EC38;
  if (!qword_10015EC38)
  {
    v1 = sub_1000034AC(&qword_10015EBE0);
    v2[0] = sub_1000034AC(&qword_10015EBB8);
    v2[1] = sub_10003942C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_1000396D8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EC38);
  }
  return result;
}

unint64_t sub_1000396D8()
{
  unint64_t result;

  result = qword_10015EC40[0];
  if (!qword_10015EC40[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _AccessibilityIgnoresInvertColorsViewModifier, &type metadata for _AccessibilityIgnoresInvertColorsViewModifier);
    atomic_store(result, qword_10015EC40);
  }
  return result;
}

uint64_t sub_10003971C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = *(_QWORD *)(a1 - 8);
  v2 = __chkstk_darwin(a1);
  v31 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v9 = (char *)&v27 - v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v5, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v11 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v12 = type metadata accessor for Optional(0, v11);
  v28 = *(_QWORD *)(v12 - 8);
  v29 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - v13;
  v15 = *(void (**)(uint64_t, uint64_t))(v4 + 208);
  v30 = v5;
  v15(v5, v4);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  v34 = v16;
  v17 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v11, &unk_1001199D4, &unk_1001199DC);
  v18 = type metadata accessor for Set(0, v11, *(_QWORD *)(v17 + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v18);
  Collection.first.getter(v18, WitnessTable);
  swift_bridgeObjectRelease(v16);
  v20 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v14, 1, v11) == 1)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v29);
    v22 = v31;
    v21 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v31, v33, a1);
LABEL_4:
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 160))(v30, v4);
    goto LABEL_5;
  }
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 48))(v11, v17);
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v11);
  v22 = v31;
  v21 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v31, v33, a1);
  if (!v25)
    goto LABEL_4;
LABEL_5:
  (*(void (**)(char *, uint64_t))(v21 + 8))(v22, a1);
  return v23;
}

uint64_t sub_1000399E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  char *v17;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char v44[64];

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1);
  v4 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  __chkstk_darwin(v4);
  v42 = (char *)&v40 - v5;
  v6 = swift_getAssociatedTypeWitness(0, v1);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - v8;
  v10 = sub_100003E70(&qword_10015ECD8);
  inited = swift_initStackObject(v10, v44);
  *(_OWORD *)(inited + 16) = xmmword_10010A6C0;
  (*(void (**)(uint64_t, uint64_t))(v1 + 200))(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, v6, &unk_1001191E8, &unk_100119230);
  v13 = sub_10000F594(v6, AssociatedConformanceWitness);
  v15 = v14;
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17 = v42;
  v16(v9, v6);
  *(_QWORD *)(inited + 32) = v13;
  *(_QWORD *)(inited + 40) = v15;
  v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 216))(v2, v1);
  v18 = type metadata accessor for Array(0, AssociatedTypeWitness);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v18);
  Collection.first.getter(v18, WitnessTable);
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v17, v41);
  }
  else
  {
    v21 = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119238);
    v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 48))(AssociatedTypeWitness, v21);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, AssociatedTypeWitness);
    if (v22)
    {
      v23 = objc_msgSend(v22, "city");

      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      *(_QWORD *)(inited + 48) = v24;
      *(_QWORD *)(inited + 56) = v26;
      v27 = *(_QWORD *)(inited + 40);
      if (v27)
        goto LABEL_8;
LABEL_5:
      v28 = (char *)_swiftEmptyArrayStorage;
      if (!v26)
        goto LABEL_16;
      goto LABEL_11;
    }
  }
  v26 = 0;
  v24 = 0;
  *(_QWORD *)(inited + 48) = 0;
  *(_QWORD *)(inited + 56) = 0;
  v27 = *(_QWORD *)(inited + 40);
  if (!v27)
    goto LABEL_5;
LABEL_8:
  v29 = *(_QWORD *)(inited + 32);
  swift_bridgeObjectRetain(v27);
  v28 = sub_1000F4E14(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v31 = *((_QWORD *)v28 + 2);
  v30 = *((_QWORD *)v28 + 3);
  if (v31 >= v30 >> 1)
    v28 = sub_1000F4E14((char *)(v30 > 1), v31 + 1, 1, v28);
  *((_QWORD *)v28 + 2) = v31 + 1;
  v32 = &v28[16 * v31];
  *((_QWORD *)v32 + 4) = v29;
  *((_QWORD *)v32 + 5) = v27;
  v24 = *(_QWORD *)(inited + 48);
  v26 = *(_QWORD *)(inited + 56);
  if (v26)
  {
LABEL_11:
    swift_bridgeObjectRetain(v26);
    if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
      v28 = sub_1000F4E14(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
    v34 = *((_QWORD *)v28 + 2);
    v33 = *((_QWORD *)v28 + 3);
    if (v34 >= v33 >> 1)
      v28 = sub_1000F4E14((char *)(v33 > 1), v34 + 1, 1, v28);
    *((_QWORD *)v28 + 2) = v34 + 1;
    v35 = &v28[16 * v34];
    *((_QWORD *)v35 + 4) = v24;
    *((_QWORD *)v35 + 5) = v26;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  v43 = (uint64_t)v28;
  v36 = sub_100003E70(&qword_10015ECC8);
  v37 = sub_10003B4BC();
  v38 = BidirectionalCollection<>.joined(separator:)(0x20A280E220, 0xA500000000000000, v36, v37);
  swift_bridgeObjectRelease();
  return v38;
}

BOOL sub_100039DDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 24);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 192))(*(_QWORD *)(a1 + 16), v1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1);
  v3 = type metadata accessor for Array(0, AssociatedTypeWitness);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v3);
  LOBYTE(v3) = Collection.isEmpty.getter(v3, WitnessTable);
  swift_bridgeObjectRelease(v6);
  return (v3 & 1) == 0;
}

BOOL sub_100039E8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 192))(*(_QWORD *)(a1 + 16), v1);
  swift_getAssociatedTypeWitness(0, v1);
  v3 = Array.count.getter(v2);
  swift_bridgeObjectRelease(v2);
  return v3 == 1;
}

uint64_t sub_100039F0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 24);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 192))(*(_QWORD *)(a1 + 16), v1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1);
  v3 = type metadata accessor for Array(0, AssociatedTypeWitness);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v3);
  Collection.first.getter(v3, WitnessTable);
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_100039FC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2);
  v5 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v55 = *(_QWORD *)(v5 - 8);
  v56 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v54 - v6;
  v8 = swift_getAssociatedTypeWitness(0, v2);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v54 - v10;
  v58 = xmmword_10010A6D0;
  v59 = sub_10003A4C4(a1);
  v60 = v12;
  v61 = sub_10003971C(a1);
  v62 = v13;
  (*(void (**)(uint64_t, uint64_t))(v2 + 200))(v3, v2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, v8, &unk_1001191E8, &unk_100119230);
  v15 = sub_10000FBD8(v8, AssociatedConformanceWitness);
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v63 = v15;
  v64 = v17;
  v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 216))(v3, v2);
  v18 = type metadata accessor for Array(0, AssociatedTypeWitness);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v18);
  Collection.first.getter(v18, WitnessTable);
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v55 + 8))(v7, v56);
  }
  else
  {
    v21 = swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &unk_1001191E8, &unk_100119238);
    v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 48))(AssociatedTypeWitness, v21);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v7, AssociatedTypeWitness);
    if (v22)
    {
      v23 = objc_msgSend(v22, "city");

      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      v65 = v24;
      v66 = v26;
      v27 = v60;
      if (v60)
        goto LABEL_8;
LABEL_5:
      v28 = (char *)_swiftEmptyArrayStorage;
      v29 = v62;
      if (!v62)
        goto LABEL_16;
      goto LABEL_11;
    }
  }
  v65 = 0;
  v66 = 0;
  v27 = v60;
  if (!v60)
    goto LABEL_5;
LABEL_8:
  v30 = v59;
  swift_bridgeObjectRetain(v27);
  v28 = sub_1000F4E14(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v32 = *((_QWORD *)v28 + 2);
  v31 = *((_QWORD *)v28 + 3);
  if (v32 >= v31 >> 1)
    v28 = sub_1000F4E14((char *)(v31 > 1), v32 + 1, 1, v28);
  *((_QWORD *)v28 + 2) = v32 + 1;
  v33 = &v28[16 * v32];
  *((_QWORD *)v33 + 4) = v30;
  *((_QWORD *)v33 + 5) = v27;
  v29 = v62;
  if (v62)
  {
LABEL_11:
    v34 = v61;
    swift_bridgeObjectRetain(v29);
    if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
      v28 = sub_1000F4E14(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
    v36 = *((_QWORD *)v28 + 2);
    v35 = *((_QWORD *)v28 + 3);
    if (v36 >= v35 >> 1)
      v28 = sub_1000F4E14((char *)(v35 > 1), v36 + 1, 1, v28);
    *((_QWORD *)v28 + 2) = v36 + 1;
    v37 = &v28[16 * v36];
    *((_QWORD *)v37 + 4) = v34;
    *((_QWORD *)v37 + 5) = v29;
  }
LABEL_16:
  v38 = v64;
  if (v64)
  {
    v39 = v63;
    swift_bridgeObjectRetain(v64);
    if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
      v28 = sub_1000F4E14(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
    v41 = *((_QWORD *)v28 + 2);
    v40 = *((_QWORD *)v28 + 3);
    if (v41 >= v40 >> 1)
      v28 = sub_1000F4E14((char *)(v40 > 1), v41 + 1, 1, v28);
    *((_QWORD *)v28 + 2) = v41 + 1;
    v42 = &v28[16 * v41];
    *((_QWORD *)v42 + 4) = v39;
    *((_QWORD *)v42 + 5) = v38;
  }
  v43 = v66;
  if (v66)
  {
    v44 = v65;
    swift_bridgeObjectRetain(v66);
    if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
      v28 = sub_1000F4E14(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
    v46 = *((_QWORD *)v28 + 2);
    v45 = *((_QWORD *)v28 + 3);
    if (v46 >= v45 >> 1)
      v28 = sub_1000F4E14((char *)(v45 > 1), v46 + 1, 1, v28);
    *((_QWORD *)v28 + 2) = v46 + 1;
    v47 = &v28[16 * v46];
    *((_QWORD *)v47 + 4) = v44;
    *((_QWORD *)v47 + 5) = v43;
  }
  v48 = v58;
  v49 = sub_100003E70((uint64_t *)&unk_100160CB0);
  swift_arrayDestroy(&v59, v48, v49);
  v57 = (uint64_t)v28;
  v50 = sub_100003E70(&qword_10015ECC8);
  v51 = sub_10003B4BC();
  v52 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v50, v51);
  swift_bridgeObjectRelease();
  return v52;
}

uint64_t sub_10003A4C4(uint64_t a1)
{
  char v1;
  id v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t countAndFlagsBits;
  unint64_t v9;

  v1 = sub_100046A84(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if ((v1 & 1) != 0)
  {
    v9 = 0xE000000000000000;
    v3 = 0x8000000100115D20;
    v4 = 0xD00000000000001FLL;
  }
  else
  {
    v4 = 0xD000000000000023;
    v9 = 0xE000000000000000;
    v3 = 0x8000000100115CF0;
  }
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v4, (Swift::String_optional)0, (NSBundle)v2, v5, *(Swift::String *)(&v9 - 1))._countAndFlagsBits;

  return countAndFlagsBits;
}

double sub_10003A5A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  double result;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 40));
  v3 = *v2;
  v4 = v2[1];
  v5 = *((_BYTE *)v2 + 16);
  swift_retain(*v2);
  swift_retain(v4);
  v6 = sub_100003E70(&qword_100160CA0);
  Binding.wrappedValue.getter(v6);
  v9 = v3;
  v10 = v4;
  v11 = v5;
  v8 = (v12 & 1) == 0;
  Binding.wrappedValue.setter(&v8, v6);
  swift_release(v4);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

void sub_10003A650(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  ValueWitnessTable *v14;
  uint64_t v15;
  char *v16;
  NSString v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  void **aBlock;
  uint64_t v23;
  Class (*v24)(uint64_t);
  ValueMetadata *v25;
  _QWORD *(*v26)();
  _QWORD *v27;
  char *v28;

  v4 = sub_100003E70(&qword_10015D3B8);
  v5 = swift_allocObject(v4, 192, 7);
  *(_OWORD *)(v5 + 16) = xmmword_10010A6D0;
  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + 24) + 152))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(v5 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v5 + 64) = &off_100162E68;
  *(_QWORD *)(v5 + 40) = v6;
  *(_QWORD *)(v5 + 48) = v7;
  *(_BYTE *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v5 + 104) = &off_100162E40;
  *(_BYTE *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v5 + 144) = &off_100162EC8;
  *(_BYTE *)(v5 + 112) = 1;
  *(_QWORD *)(v5 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v5 + 184) = &off_100162EA0;
  *(_OWORD *)(v5 + 152) = xmmword_10010C530;
  *(_BYTE *)(v5 + 168) = 3;
  v8 = *(_QWORD *)(a1 + 72);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v9 = 0;
    v10 = 0xE000000000000000;
  }
  v25 = &type metadata for AnalyticsString;
  v26 = (_QWORD *(*)())&off_100162E68;
  LOBYTE(aBlock) = 1;
  v23 = v9;
  v24 = (Class (*)(uint64_t))v10;
  swift_bridgeObjectRetain(v8);
  v28 = sub_1000F4CF4((char *)1, 5, 1, (char *)v5);
  v11 = sub_100005580((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v14->initializeWithCopy)((uint64_t)v13, v15);
  sub_1000DAD34(4, (uint64_t)v13, (uint64_t *)&v28, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_100162E68);
  sub_1000055A8(&aBlock);
  v16 = v28;
  v17 = String._bridgeToObjectiveC()();
  v18 = (_QWORD *)swift_allocObject(&unk_10014DF90, 40, 7);
  v18[2] = 0xD00000000000001ELL;
  v18[3] = 0x80000001001150B0;
  v18[4] = v16;
  v26 = sub_10003B510;
  v27 = v18;
  aBlock = _NSConcreteStackBlock;
  v23 = 1107296256;
  v24 = sub_1000DACC0;
  v25 = (ValueMetadata *)&unk_10014DFA8;
  v19 = _Block_copy(&aBlock);
  v20 = v27;
  swift_bridgeObjectRetain(v16);
  swift_release(v20);
  AnalyticsSendEventLazy(v17, v19);
  _Block_release(v19);
  swift_bridgeObjectRelease();

}

void sub_10003A8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  ValueWitnessTable *v18;
  uint64_t v19;
  char *v20;
  NSString v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  void **aBlock;
  uint64_t v27;
  Class (*v28)(uint64_t);
  ValueMetadata *v29;
  _QWORD *(*v30)();
  _QWORD *v31;
  char *v32;

  v8 = sub_100003E70(&qword_10015D3B8);
  v9 = swift_allocObject(v8, 192, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10010A6D0;
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a4 + 24) + 152))(*(_QWORD *)(a4 + 16));
  *(_QWORD *)(v9 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v9 + 64) = &off_100162E68;
  *(_BYTE *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = v11;
  *(_QWORD *)(v9 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v9 + 104) = &off_100162E40;
  *(_BYTE *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v9 + 144) = &off_100162EC8;
  *(_BYTE *)(v9 + 112) = 1;
  *(_QWORD *)(v9 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v9 + 184) = &off_100162EA0;
  *(_QWORD *)(v9 + 152) = a1;
  *(_QWORD *)(v9 + 160) = a2;
  *(_BYTE *)(v9 + 168) = 1;
  v12 = *(_QWORD *)(a3 + 72);
  if (v12)
  {
    v13 = *(_QWORD *)(a3 + 64);
    v14 = *(_QWORD *)(a3 + 72);
  }
  else
  {
    v13 = 0;
    v14 = 0xE000000000000000;
  }
  v29 = &type metadata for AnalyticsString;
  v30 = (_QWORD *(*)())&off_100162E68;
  LOBYTE(aBlock) = 1;
  v27 = v13;
  v28 = (Class (*)(uint64_t))v14;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v12);
  v32 = sub_1000F4CF4((char *)1, 5, 1, (char *)v9);
  v15 = sub_100005580((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v15);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v18->initializeWithCopy)((uint64_t)v17, v19);
  sub_1000DAD34(4, (uint64_t)v17, (uint64_t *)&v32, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_100162E68);
  sub_1000055A8(&aBlock);
  v20 = v32;
  v21 = String._bridgeToObjectiveC()();
  v22 = (_QWORD *)swift_allocObject(&unk_10014DF40, 40, 7);
  v22[2] = 0xD00000000000001ELL;
  v22[3] = 0x80000001001150B0;
  v22[4] = v20;
  v30 = sub_1000055F4;
  v31 = v22;
  aBlock = _NSConcreteStackBlock;
  v27 = 1107296256;
  v28 = sub_1000DACC0;
  v29 = (ValueMetadata *)&unk_10014DF58;
  v23 = _Block_copy(&aBlock);
  v24 = v31;
  swift_bridgeObjectRetain(v20);
  swift_release(v24);
  AnalyticsSendEventLazy(v21, v23);
  _Block_release(v23);
  swift_bridgeObjectRelease();

}

uint64_t sub_10003AB28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  int *v14;
  char *v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  uint64_t v20;

  *(_QWORD *)a8 = a1;
  v14 = (int *)type metadata accessor for EventDetailViewModel(0, a6, a7, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(&a8[v14[9]], a2, a6);
  v15 = &a8[v14[10]];
  *(_QWORD *)v15 = a3;
  *((_QWORD *)v15 + 1) = a4;
  v15[16] = a5;
  v16 = &a8[v14[11]];
  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000029, 0x8000000100115CC0);
  *(_QWORD *)v16 = result;
  *((_QWORD *)v16 + 1) = v18;
  v16[16] = v19 & 1;
  *((_QWORD *)v16 + 3) = v20;
  return result;
}

uint64_t type metadata accessor for EventDetailViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventDetailViewModel);
}

uint64_t sub_10003ABF4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_10010C568;
    v4[3] = &unk_10010C580;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_10003AC84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 8) & ~v5) + 31) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain(v9);
  }
  else
  {
    *a1 = *a2;
    v10 = ((unint64_t)a1 + v5 + 8) & ~v5;
    v11 = ((unint64_t)a2 + v5 + 8) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    v12 = v10 + v6;
    v13 = (v10 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v14 = (v11 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v15 = *(_QWORD *)v14;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v16 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)(v13 + 8) = v16;
    *(_BYTE *)(v13 + 16) = *(_BYTE *)(v14 + 16);
    v17 = (v12 + 31) & 0xFFFFFFFFFFFFFFF8;
    v18 = (v11 + v6 + 31) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v19 = *(_QWORD *)(v18 + 8);
    *(_QWORD *)(v17 + 8) = v19;
    *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
    v20 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v17 + 24) = v20;
    swift_retain(v15);
    swift_retain(v16);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
  }
  return v3;
}

uint64_t sub_10003ADC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = (a1 + *(unsigned __int8 *)(v2 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v3);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = (_QWORD *)((v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*v5);
  swift_release(v5[1]);
  v6 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
}

_QWORD *sub_10003AE30(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = v6 + v8;
  v10 = v7 + v8;
  v11 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v12;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v14 = *(_QWORD *)(v12 + 8);
  *(_QWORD *)(v11 + 8) = v14;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  v15 = (v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v17 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v15 + 8) = v17;
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v18 = *(_QWORD *)(v16 + 24);
  *(_QWORD *)(v15 + 24) = v18;
  swift_retain(v13);
  swift_retain(v14);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  return a1;
}

_QWORD *sub_10003AF10(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = v6 + v8;
  v10 = v7 + v8;
  v11 = (v6 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v11;
  v14 = *(_QWORD *)v12;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_retain(v14);
  swift_release(v13);
  v15 = *(_QWORD *)(v12 + 8);
  v16 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v11 + 8) = v15;
  swift_retain(v15);
  swift_release(v16);
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  v17 = (v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = *(_QWORD *)(v18 + 8);
  v20 = *(_QWORD *)(v17 + 8);
  *(_QWORD *)(v17 + 8) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
  v21 = *(_QWORD *)(v18 + 24);
  v22 = *(_QWORD *)(v17 + 24);
  *(_QWORD *)(v17 + 24) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  return a1;
}

_QWORD *sub_10003B01C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = v6 + v8;
  v10 = v7 + v8;
  v11 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  *(_OWORD *)v11 = v13;
  v14 = (_OWORD *)((v9 + 31) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_OWORD *)((v10 + 31) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  return a1;
}

_QWORD *sub_10003B0C0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = v6 + v8;
  v10 = v7 + v8;
  v11 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v11;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_release(v13);
  v14 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
  swift_release(v14);
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  v15 = (v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v17 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v18 = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v15 + 24) = *(_QWORD *)(v16 + 24);
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t sub_10003B1AC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    v13 = (a1 + v7 + 8) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)(((v8 + v13 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v13);
    }
  }
  else
  {
    if (((((v8 + ((v7 + 8) & ~v7) + 31) & 0xFFFFFFFFFFFFFFF8) + 32) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_10003B238 + 4 * byte_10010C540[v11]))();
  }
}

void sub_10003B2CC(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 8) & ~(_DWORD)v7) + 31) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 8) & ~(_DWORD)v7) + 31) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + ((v7 + 8) & ~v7) + 31) & 0xFFFFFFFFFFFFFFF8) + 32);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_10003B3D4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x10003B458);
}

void sub_10003B3DC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x10003B3E4);
  JUMPOUT(0x10003B458);
}

void sub_10003B430()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x10003B458);
}

void sub_10003B438()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x10003B458);
}

uint64_t sub_10003B440@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)(v8 + v9) = 0;
  if (!a1)
    goto LABEL_6;
  v3 = (v8 + v7 + 8) & a3;
  if (a2 < 0x7FFFFFFF)
  {
    if (a1 < 0)
      JUMPOUT(0x10003B44CLL);
    *(_QWORD *)(((v6 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a1 - 1);
LABEL_6:
    JUMPOUT(0x10003B458);
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 56))(v3);
}

uint64_t sub_10003B474(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003B484(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10003B490()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

unint64_t sub_10003B4BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015ECD0;
  if (!qword_10015ECD0)
  {
    v1 = sub_1000034AC(&qword_10015ECC8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10015ECD0);
  }
  return result;
}

uint64_t sub_10003B514(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_10010C5E8;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = &unk_10010C600;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 4, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10003B5A4()
{
  uint64_t v0;

  v0 = sub_10003B9EC();
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10003B5B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v8 = *(_OWORD *)(*(_QWORD *)v1 + 80);
  KeyPath = swift_getKeyPath(&unk_10010C660);
  v6 = v1;
  v7 = a1;
  sub_10003B698(KeyPath, (uint64_t)sub_10003BAA4, (uint64_t)&v5, (uint64_t)&type metadata for () + 8);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10003B638(uint64_t a1)
{
  _QWORD *v1;
  uint64_t WitnessTable;
  uint64_t v5;

  WitnessTable = swift_getWitnessTable(&unk_10010C640, *v1);
  return ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, a1, WitnessTable);
}

uint64_t sub_10003B698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t WitnessTable;
  uint64_t v11;

  WitnessTable = swift_getWitnessTable(&unk_10010C640, *v4);
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, a1, a2, a3, a4, WitnessTable);
}

uint64_t sub_10003B730()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_10010C698);
  sub_10003B638(KeyPath);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 40);
}

double sub_10003B780(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  double result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  v8 = *(_OWORD *)(*(_QWORD *)v1 + 80);
  KeyPath = swift_getKeyPath(&unk_10010C698);
  v6 = v1;
  v7 = a1;
  sub_10003B698(KeyPath, (uint64_t)sub_10003BB44, (uint64_t)&v5, (uint64_t)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10003B7FC()
{
  unint64_t v0;
  unint64_t v1;

  if (sub_10003B85C())
  {
    v0 = 0xD000000000000029;
    v1 = 0x8000000100115DB0;
  }
  else
  {
    v1 = 0x8000000100115D80;
    v0 = 0xD000000000000027;
  }
  return LocalizedStringKey.init(stringLiteral:)(v0, v1);
}

BOOL sub_10003B85C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_10003B9EC();
  swift_bridgeObjectRetain(v0);
  v2 = Array.count.getter(v1);
  swift_bridgeObjectRelease();
  return v2 > 1;
}

BOOL sub_10003B8AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_10003B9EC();
  swift_bridgeObjectRetain(v0);
  v2 = Array.count.getter(v1);
  swift_bridgeObjectRelease();
  return v2 == 1;
}

uint64_t sub_10003B8FC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  ObservationRegistrar.init()();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  *(_QWORD *)(v9 + 32) = a3;
  *(_BYTE *)(v9 + 40) = a4;
  return v9;
}

uint64_t sub_10003B968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  v1 = v0 + qword_10015ECE0;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10003B9BC()
{
  uint64_t v0;

  sub_10003B968();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for FeaturedVideosViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeaturedVideosViewModel);
}

uint64_t sub_10003B9EC()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_10010C660);
  sub_10003B638(KeyPath);
  swift_release(KeyPath);
  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_10003BA3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  v2 = sub_10003B9EC();
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10003BA64(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_bridgeObjectRetain(*a1);
  return sub_10003B5B8(v1);
}

uint64_t sub_10003BA8C()
{
  return 16;
}

__n128 sub_10003BA98(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10003BAA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10003BADC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10003B730();
  *a1 = result & 1;
  return result;
}

double sub_10003BB08(char *a1)
{
  return sub_10003B780(*a1);
}

uint64_t sub_10003BB2C()
{
  return 16;
}

__n128 sub_10003BB38(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_10003BB44()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 40) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_10003BB58(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10003BBA4(&qword_10015ED68, (uint64_t)&protocol conformance descriptor for PromotionalAssets.PhoneWallpaper);
  result = sub_10003BBA4(&qword_10015ED70, (uint64_t)&protocol conformance descriptor for PromotionalAssets.PhoneWallpaper);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10003BBA4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for PromotionalAssets.PhoneWallpaper(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for WallpaperWatchFaceController()
{
  return &type metadata for WallpaperWatchFaceController;
}

uint64_t sub_10003BBF4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = type metadata accessor for URL(0);
  v1[15] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[16] = v4;
  v5 = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[17] = v5;
  v6 = (_QWORD *)swift_task_alloc(dword_10015ED9C);
  v1[18] = v6;
  *v6 = v1;
  v6[1] = sub_10003BC74;
  return sub_10003BF28(v5, a1);
}

uint64_t sub_10003BC74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10003BE6C;
  else
    v3 = sub_10003BCD8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10003BCD8()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  NSURL *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0 + 2;
  v2 = objc_msgSend(objc_allocWithZone((Class)CLKWatchFaceLibrary), "init");
  v0[20] = v2;
  URL._bridgeToObjectiveC()(v3);
  v5 = v4;
  v0[21] = v4;
  v0[2] = v0;
  v0[3] = sub_10003BD9C;
  v6 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v7 = v0 + 10;
  v7[1] = 0x40000000;
  v7[2] = sub_10003C538;
  v7[3] = &unk_10014E158;
  v7[4] = v6;
  objc_msgSend(v2, "addWatchFaceAtURL:completionHandler:", v5, v7);
  return swift_continuation_await(v1);
}

uint64_t sub_10003BD9C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 176) = v1;
  if (v1)
    v2 = sub_10003BEA0;
  else
    v2 = sub_10003BDFC;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10003BDFC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 120);

  sub_10003D4BC(v2, "Failed to remove file at %s possibly does not exist");
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003BE6C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003BEA0(__n128 a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(void **)(v1 + 168);
  v3 = *(void **)(v1 + 160);
  v5 = *(_QWORD *)(v1 + 128);
  v4 = *(_QWORD *)(v1 + 136);
  v6 = *(_QWORD *)(v1 + 120);
  swift_willThrow(a1);

  sub_10003D4BC(v4, "Failed to remove file at %s possibly does not exist");
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc(*(_QWORD *)(v1 + 136));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10003BF28(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[4] = a1;
  v2[5] = a2;
  v3 = type metadata accessor for URL(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[8] = swift_task_alloc(v5);
  v2[9] = swift_task_alloc(v5);
  v2[10] = swift_task_alloc(v5);
  return swift_task_switch(sub_10003BFD0, 0, 0);
}

uint64_t sub_10003BFD0()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (_QWORD *)v0[5];
  v2 = objc_msgSend((id)objc_opt_self(NSURLSessionConfiguration), "defaultSessionConfiguration");
  v0[11] = objc_msgSend((id)objc_opt_self(NSURLSession), "sessionWithConfiguration:", v2);

  v3 = v1[3];
  v4 = v1[4];
  sub_100008170(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.download(from:delegate:)[1]);
  v0[12] = v5;
  *v5 = v0;
  v5[1] = sub_10003C0E8;
  return NSURLSession.download(from:delegate:)(v0[10], v0[9], 0);
}

uint64_t sub_10003C0E8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  void (*v10)(uint64_t, uint64_t);

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 96);
  *(_QWORD *)(*(_QWORD *)v2 + 104) = v1;
  swift_task_dealloc(v5);
  v6 = v4[9];
  v7 = v4[6];
  v8 = v4[7];
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD))(v8 + 8))(v4[9], v4[6]);
    v9 = sub_10003C4B4;
  }
  else
  {

    v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v4[14] = v10;
    v10(v6, v7);
    v9 = sub_10003C1DC;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_10003C1DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  void *v11;
  id v12;
  NSURL *v13;
  void *v14;
  void *v15;
  NSURL *v16;
  void *v17;
  void *v18;
  unsigned int v19;
  void *v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  __n128 v30;
  id v31;
  NSURL *v32;
  void *v33;
  void *v34;
  unsigned int v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  id v42;
  __n128 v43;
  id v44;
  __n128 v45;

  v1 = *(_QWORD *)(v0 + 104);
  sub_10003D2B8(*(_QWORD *)(v0 + 64));
  v2 = v1;
  v3 = *(_QWORD *)(v0 + 48);
  if (v2)
  {
    v4 = *(void **)(v0 + 88);
    (*(void (**)(_QWORD, _QWORD))(v0 + 112))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 48));

  }
  else
  {
    v9 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
    v10 = *(_QWORD *)(v0 + 64);
    URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001ALL, 0x8000000100115E30, 0);
    v9(v10, v3);
    v11 = (void *)objc_opt_self(NSFileManager);
    v12 = objc_msgSend(v11, "defaultManager");
    URL._bridgeToObjectiveC()(v13);
    v15 = v14;
    URL._bridgeToObjectiveC()(v16);
    v18 = v17;
    *(_QWORD *)(v0 + 16) = 0;
    v19 = objc_msgSend(v12, "copyItemAtURL:toURL:error:", v15, v17, v0 + 16);

    v20 = *(void **)(v0 + 16);
    if (v19)
    {
      v21 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
      v22 = *(_QWORD *)(v0 + 80);
      v23 = *(void **)(v0 + 88);
      v25 = *(_QWORD *)(v0 + 64);
      v24 = *(_QWORD *)(v0 + 72);
      v26 = *(_QWORD *)(v0 + 48);
      v27 = v20;
      v21(v22, v26);

      swift_task_dealloc(v22);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      v7 = *(uint64_t (**)(void))(v0 + 8);
      return v7();
    }
    v28 = v20;
    v29 = _convertNSErrorToError(_:)(v20);

    swift_willThrow(v30);
    v31 = objc_msgSend(v11, "defaultManager");
    URL._bridgeToObjectiveC()(v32);
    v34 = v33;
    *(_QWORD *)(v0 + 24) = 0;
    v35 = objc_msgSend(v31, "removeItemAtURL:error:", v33, v0 + 24);

    v36 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
    v37 = *(_QWORD *)(v0 + 80);
    v38 = *(void **)(v0 + 88);
    v39 = *(_QWORD *)(v0 + 48);
    v40 = *(void **)(v0 + 24);
    v41 = *(_QWORD *)(v0 + 32);
    if (v35)
    {
      v42 = v40;
      swift_willThrow(v43);

    }
    else
    {
      v44 = v40;
      _convertNSErrorToError(_:)(v40);

      swift_willThrow(v45);
      swift_errorRelease(v29);
    }
    v36(v41, v39);
    v36(v37, v39);
  }
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10003C4B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003C538(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (!a2)
    return swift_continuation_throwingResume(*(_QWORD *)(a1 + 32));
  v4 = sub_100003E70(&qword_10015D990);
  v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0, 0);
  *v6 = a2;
  v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t sub_10003C5AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[5] = a1;
  v2 = type metadata accessor for URL(0);
  v1[6] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[7] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[8] = swift_task_alloc(v4);
  v1[9] = swift_task_alloc(v4);
  v1[10] = swift_task_alloc(v4);
  v1[11] = swift_task_alloc(v4);
  v1[12] = swift_task_alloc(v4);
  v1[13] = swift_task_alloc(v4);
  return swift_task_switch(sub_10003C678, 0, 0);
}

uint64_t sub_10003C678()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;

  v1 = (_QWORD *)v0[5];
  v2 = objc_msgSend((id)objc_opt_self(NSURLSessionConfiguration), "defaultSessionConfiguration");
  v0[14] = objc_msgSend((id)objc_opt_self(NSURLSession), "sessionWithConfiguration:", v2);

  v3 = v1[3];
  v0[15] = v3;
  v4 = v1[4];
  v0[16] = v4;
  v0[17] = sub_100008170(v1, v3);
  v5 = *(void (**)(uint64_t, uint64_t))(v4 + 24);
  v0[18] = v5;
  v5(v3, v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.download(from:delegate:)[1]);
  v0[19] = v6;
  *v6 = v0;
  v6[1] = sub_10003C7A4;
  return NSURLSession.download(from:delegate:)(v0[13], v0[12], 0);
}

uint64_t sub_10003C7A4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  void (*v10)(uint64_t, uint64_t);

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 152);
  *(_QWORD *)(*(_QWORD *)v2 + 160) = v1;
  swift_task_dealloc(v5);
  v6 = v4[12];
  v7 = v4[6];
  v8 = v4[7];
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD))(v8 + 8))(v4[12], v4[6]);
    v9 = sub_10003D208;
  }
  else
  {

    v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v4[21] = v10;
    v10(v6, v7);
    v9 = sub_10003C898;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_10003C898()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  NSURL *v20;
  void *v21;
  void *v22;
  NSURL *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  __n128 v33;
  id v34;
  NSURL *v35;
  void *v36;
  void *v37;
  unsigned int v38;
  void *v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  __n128 v46;
  id v47;
  __n128 v48;
  uint64_t v49;
  unint64_t v50;
  id v51;
  Class isa;
  id v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint8_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v1 = *(_QWORD *)(v0 + 160);
  sub_10003D2B8(*(_QWORD *)(v0 + 80));
  if (v1)
  {
    v2 = *(void **)(v0 + 112);
    (*(void (**)(_QWORD, _QWORD))(v0 + 168))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 48));

LABEL_3:
    v3 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  v10 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
  v11 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 48);
  v14 = (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 144))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  v15 = URL.lastPathComponent.getter(v14);
  v17 = v16;
  v10(v12, v13);
  URL.appendingPathComponent(_:isDirectory:)(v15, v17, 0);
  swift_bridgeObjectRelease();
  v10(v11, v13);
  v18 = (void *)objc_opt_self(NSFileManager);
  *(_QWORD *)(v0 + 176) = v18;
  v19 = objc_msgSend(v18, "defaultManager");
  URL._bridgeToObjectiveC()(v20);
  v22 = v21;
  URL._bridgeToObjectiveC()(v23);
  v25 = v24;
  *(_QWORD *)(v0 + 16) = 0;
  LODWORD(v12) = objc_msgSend(v19, "copyItemAtURL:toURL:error:", v22, v24, v0 + 16);

  v26 = *(void **)(v0 + 16);
  if (!(_DWORD)v12)
  {
    v31 = v26;
    v32 = _convertNSErrorToError(_:)(v26);

    swift_willThrow(v33);
    v34 = objc_msgSend(*(id *)(v0 + 176), "defaultManager");
    URL._bridgeToObjectiveC()(v35);
    v37 = v36;
    *(_QWORD *)(v0 + 24) = 0;
    v38 = objc_msgSend(v34, "removeItemAtURL:error:", v36, v0 + 24);

    v39 = *(void **)(v0 + 24);
    v40 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    v41 = *(_QWORD *)(v0 + 104);
    v42 = *(void **)(v0 + 112);
    v43 = *(_QWORD *)(v0 + 88);
    v44 = *(_QWORD *)(v0 + 48);
    if (v38)
    {
      v45 = v39;
      swift_willThrow(v46);

    }
    else
    {
      v47 = v39;
      _convertNSErrorToError(_:)(v39);

      swift_willThrow(v48);
      swift_errorRelease(v32);
    }
    v40(v43, v44);
    v40(v41, v44);
    goto LABEL_3;
  }
  v27 = *(_QWORD *)(v0 + 88);
  v28 = v26;
  v29 = Data.init(contentsOf:options:)(v27, 0);
  *(_QWORD *)(v0 + 184) = v29;
  *(_QWORD *)(v0 + 192) = v30;
  v49 = v29;
  v50 = v30;
  v51 = objc_allocWithZone((Class)UIImage);
  sub_10003D7AC(v49, v50);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v53 = objc_msgSend(v51, "initWithData:", isa);
  *(_QWORD *)(v0 + 200) = v53;
  sub_10003653C(v49, v50);

  if (!v53)
  {
    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v55 = *(_QWORD *)(v0 + 88);
    v57 = *(_QWORD *)(v0 + 56);
    v56 = *(_QWORD *)(v0 + 64);
    v58 = *(_QWORD *)(v0 + 48);
    v59 = type metadata accessor for Logger(0);
    sub_100011AC4(v59, (uint64_t)qword_10016F728);
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v56, v55, v58);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.error.getter();
    v63 = os_log_type_enabled(v61, v62);
    v64 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    v65 = *(_QWORD *)(v0 + 64);
    v66 = *(_QWORD *)(v0 + 48);
    if (v63)
    {
      v67 = (uint8_t *)swift_slowAlloc(12, -1);
      v80 = swift_slowAlloc(32, -1);
      v81 = v80;
      *(_DWORD *)v67 = 136315138;
      v68 = sub_10003D8AC();
      v69 = dispatch thunk of CustomStringConvertible.description.getter(v66, v68);
      *(_QWORD *)(v0 + 32) = sub_1000C7684(v69, v70, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v67 + 4, v67 + 12);
      swift_bridgeObjectRelease();
      v64(v65, v66);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Failed to create image from %s", v67, 0xCu);
      swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1, -1);
      swift_slowDealloc(v67, -1, -1);

      sub_10003653C(v49, v50);
    }
    else
    {
      sub_10003653C(v49, v50);
      v64(v65, v66);

    }
    v71 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    v72 = *(_QWORD *)(v0 + 104);
    v73 = *(void **)(v0 + 112);
    v75 = *(_QWORD *)(v0 + 88);
    v74 = *(_QWORD *)(v0 + 96);
    v77 = *(_QWORD *)(v0 + 72);
    v76 = *(_QWORD *)(v0 + 80);
    v78 = *(_QWORD *)(v0 + 64);
    v79 = *(_QWORD *)(v0 + 48);
    sub_10003D4BC(v75, "Failed to delete wallpaper at %s");

    v71(v75, v79);
    v71(v72, v79);
    swift_task_dealloc(v72);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  v54 = (_QWORD *)swift_task_alloc(dword_10015ED8C);
  *(_QWORD *)(v0 + 208) = v54;
  *v54 = v0;
  v54[1] = sub_10003CEB4;
  v54[16] = v53;
  return swift_task_switch(sub_10003D90C, 0, 0);
}

uint64_t sub_10003CEB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10003D060;
  else
    v3 = sub_10003CF5C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10003CF5C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 184);

  sub_10003653C(v2, v1);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(void **)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 48);
  sub_10003D4BC(v7, "Failed to delete wallpaper at %s");

  v3(v7, v11);
  v3(v4, v11);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003D060()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSURL *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  void *v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  __n128 v17;
  id v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 88);

  sub_10003653C(v2, v1);
  sub_10003D4BC(v3, "Failed to delete wallpaper at %s");
  v4 = *(_QWORD *)(v0 + 216);
  v5 = objc_msgSend(*(id *)(v0 + 176), "defaultManager");
  URL._bridgeToObjectiveC()(v6);
  v8 = v7;
  *(_QWORD *)(v0 + 24) = 0;
  v9 = objc_msgSend(v5, "removeItemAtURL:error:", v7, v0 + 24);

  v10 = *(void **)(v0 + 24);
  v11 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
  v12 = *(_QWORD *)(v0 + 104);
  v13 = *(void **)(v0 + 112);
  v14 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 48);
  if (v9)
  {
    v16 = v10;
    swift_willThrow(v17);

  }
  else
  {
    v18 = v10;
    _convertNSErrorToError(_:)(v10);

    swift_willThrow(v19);
    swift_errorRelease(v4);
  }
  v11(v14, v15);
  v11(v12, v15);
  v20 = *(_QWORD *)(v0 + 96);
  v22 = *(_QWORD *)(v0 + 80);
  v21 = *(_QWORD *)(v0 + 88);
  v24 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003D208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10003D2B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  id v16;
  NSURL *v17;
  void *v18;
  void *v19;
  id v20;
  id v22;
  id v23;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v23 - v8;
  static URL.temporaryDirectory.getter(v7);
  v10 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v11 = objc_msgSend(v10, "globallyUniqueString");

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  URL.appendingPathComponent(_:isDirectory:)(v12, v14, 1);
  swift_bridgeObjectRelease(v14);
  v15 = *(void (**)(char *, uint64_t))(v3 + 8);
  v15(v6, v2);
  v16 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v17);
  v19 = v18;
  v23 = 0;
  LOBYTE(v11) = objc_msgSend(v16, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v18, 1, 0, &v23);

  v20 = v23;
  if ((v11 & 1) != 0)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v9, v2);
    return v20;
  }
  else
  {
    v22 = v23;
    _convertNSErrorToError(_:)(v20);

    swift_willThrow();
    return (id)((uint64_t (*)(char *, uint64_t))v15)(v9, v2);
  }
}

void sub_10003D4BC(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  NSURL *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  id v13;
  id v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void *v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v9);
  v11 = v10;
  v33 = 0;
  v12 = objc_msgSend(v8, "removeItemAtURL:error:", v10, &v33);

  if (v12)
  {
    v13 = v33;
  }
  else
  {
    v30 = (uint64_t)v33;
    v14 = v33;
    v15 = _convertNSErrorToError(_:)(v30);

    swift_willThrow(v16);
    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v17 = type metadata accessor for Logger(0);
    sub_100011AC4(v17, (uint64_t)qword_10016F728);
    v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = (void *)swift_slowAlloc(32, -1);
      v29 = a2;
      v23 = v22;
      v33 = v22;
      *(_DWORD *)v21 = 136315138;
      v30 = v15;
      v24 = sub_10003D8AC();
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v4, v24);
      v27 = v26;
      v31 = sub_1000C7684(v25, v26, (uint64_t *)&v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v27);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, v29, v21, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v21, -1, -1);
      v28 = v30;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v28 = v15;
    }
    swift_errorRelease(v28);

  }
}

uint64_t sub_10003D7AC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_10003D7F0(uint64_t a1)
{

}

uint64_t sub_10003D830(uint64_t result, int a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(result + 32);
  if (a2)
    return swift_continuation_throwingResume(*(_QWORD *)(result + 32));
  if (a3)
  {
    v5 = sub_100003E70(&qword_10015D990);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_10003D8AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015ED80;
  if (!qword_10015ED80)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, &qword_10015ED80);
  }
  return result;
}

uint64_t sub_10003D8F4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = a1;
  return swift_task_switch(sub_10003D90C, 0, 0);
}

uint64_t sub_10003D90C()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;

  v1 = (void *)v0[16];
  v2 = objc_msgSend((id)objc_opt_self(PHPhotoLibrary), "sharedPhotoLibrary");
  v0[17] = v2;
  v3 = swift_allocObject(&unk_10014E100, 24, 7);
  *(_QWORD *)(v3 + 16) = v1;
  v0[14] = sub_10003DB54;
  v0[15] = v3;
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 1107296256;
  v0[12] = sub_10003616C;
  v0[13] = &unk_10014E118;
  v4 = _Block_copy(v0 + 10);
  v0[18] = v4;
  v5 = v0[15];
  v6 = v1;
  swift_release(v5);
  v0[2] = v0;
  v0[3] = sub_10003DA48;
  v7 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10003D830;
  v0[13] = &unk_10014E140;
  v0[14] = v7;
  objc_msgSend(v2, "performChanges:completionHandler:", v4, v0 + 10);
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_10003DA48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 152) = v1;
  if (v1)
    v2 = sub_10003DAE4;
  else
    v2 = sub_10003DAA8;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10003DAA8()
{
  uint64_t v0;
  const void *v1;

  v1 = *(const void **)(v0 + 144);

  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003DAE4()
{
  uint64_t v0;
  const void *v1;
  void *v2;

  v1 = *(const void **)(v0 + 144);
  v2 = *(void **)(v0 + 136);
  swift_willThrow();

  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003DB30()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10003DB54()
{
  uint64_t v0;

  sub_10003D7F0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10003DB5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003DB6C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10003DB7C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10003DBC8(&qword_10015EDA0, (uint64_t)&protocol conformance descriptor for PromotionalAssets.WatchFace);
  result = sub_10003DBC8(&qword_10015EDA8, (uint64_t)&protocol conformance descriptor for PromotionalAssets.WatchFace);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10003DBC8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for PromotionalAssets.WatchFace(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003DC08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  KeyPath = swift_getKeyPath(&unk_10010C808);
  v7[0] = v1;
  v4 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess(v1 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets, v7, 0, 0);
  return sub_10003F4F8(v5, a1);
}

uint64_t sub_10003DCB8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[6] = v0;
  v2 = sub_100003E70(&qword_10015D400);
  v1[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MainActor(0);
  v1[8] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v1[9] = v4;
  v1[10] = v5;
  return swift_task_switch(sub_10003DD48, v4, v5);
}

uint64_t sub_10003DD48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  KeyPath = swift_getKeyPath(&unk_10010C808);
  *(_QWORD *)(v0 + 40) = v2;
  v4 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 40, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v2 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess(v2 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets, v0 + 16, 0, 0);
  sub_10003F4F8(v5, v1);
  v6 = type metadata accessor for ArtistPromotionalAssets(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v1, 1, v6) == 1)
  {
    v7 = *(_QWORD *)(v0 + 48);
    sub_100008194(*(_QWORD *)(v0 + 56), &qword_10015D400);
    v9 = *(_QWORD *)(v7 + 16);
    v8 = *(_QWORD *)(v7 + 24);
    if ((*(_BYTE *)(v7 + 32) & 1) != 0)
    {
      v10 = (_QWORD *)swift_task_alloc(dword_10015EEB4);
      *(_QWORD *)(v0 + 96) = v10;
      *v10 = v0;
      v10[1] = sub_10003DF7C;
      return sub_10003E590(v9, v8);
    }
    else
    {
      v13 = (_QWORD *)swift_task_alloc(dword_10015EEBC);
      *(_QWORD *)(v0 + 88) = v13;
      *v13 = v0;
      v13[1] = sub_10003DEF8;
      return sub_10003E1D8(v9, v8);
    }
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 56);
    swift_release(*(_QWORD *)(v0 + 64));
    sub_100008194(v12, &qword_10015D400);
    swift_task_dealloc(*(_QWORD *)(v0 + 56));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10003DEF8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  return swift_task_switch(sub_10003DF44, *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
}

uint64_t sub_10003DF44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003DF7C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 96));
  return swift_task_switch(sub_10003F718, *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
}

uint64_t sub_10003DFC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess(a1 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets, v5, 33, 0);
  sub_10003F55C(a2, v3);
  return swift_endAccess(v5);
}

uint64_t sub_10003E030()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_10010C830);
  v5 = v0;
  v2 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error);
  swift_errorRetain(v3);
  return v3;
}

uint64_t sub_10003E0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error) = a2;
  swift_errorRetain(a2);
  return swift_errorRelease(v2);
}

double sub_10003E108()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10010C858);
  v4 = v0;
  v2 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v0
                                              + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel)).n128_u64[0];
  return result;
}

uint64_t sub_10003E198(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel) = a2;
  swift_retain(a2);
  return swift_release(v2);
}

uint64_t sub_10003E1D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = sub_100003E70(&qword_10015D400);
  v3[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003E70(&qword_10015D4B8);
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v3[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v3[11] = static MainActor.shared.getter();
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v3[12] = v8;
  v3[13] = v9;
  return swift_task_switch(sub_10003E298, v8, v9);
}

uint64_t sub_10003E298()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[5];
  sub_10003EFC8();
  v2 = async function pointer to Event<>.init(id:)[1];
  swift_bridgeObjectRetain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[14] = v3;
  *v3 = v0;
  v3[1] = sub_10003E300;
  return Event<>.init(id:)(v0[10], v0[4], v0[5]);
}

uint64_t sub_10003E300()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10003E488;
  else
    v4 = sub_10003E360;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
}

uint64_t sub_10003E360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = swift_release(*(_QWORD *)(v0 + 88));
  Event<>.artistPromotionalAssets.getter(v5);
  KeyPath = swift_getKeyPath(&unk_10010C808);
  v7 = swift_task_alloc(32);
  *(_QWORD *)(v7 + 16) = v3;
  *(_QWORD *)(v7 + 24) = v4;
  *(_QWORD *)(v0 + 24) = v3;
  v8 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 24, KeyPath, sub_100008254, v7, (char *)&type metadata for () + 8, v8);
  swift_release(KeyPath);
  swift_task_dealloc(v7);
  sub_100008194(v4, &qword_10015D400);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v11);
  v9 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003E488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 88));
  KeyPath = swift_getKeyPath(&unk_10010C830);
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  *(_QWORD *)(v0 + 16) = v2;
  swift_errorRetain(v1);
  v5 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, KeyPath, sub_10003F548, v4, (char *)&type metadata for () + 8, v5);
  swift_errorRelease(v1);
  swift_release(KeyPath);
  swift_errorRelease(v1);
  swift_task_dealloc(v4);
  v6 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003E590(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v4 = sub_100003E70(&qword_10015EEC0);
  v3[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[12] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[13] = swift_task_alloc(v7);
  v3[14] = swift_task_alloc(v7);
  v8 = type metadata accessor for EventsError(0);
  v3[15] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[16] = v9;
  v3[17] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003E70(&qword_10015D400);
  v3[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MainActor(0);
  v3[19] = v11;
  v3[20] = static MainActor.shared.getter(v11);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  v3[21] = v12;
  v3[22] = v13;
  return swift_task_switch(sub_10003E6AC, v12, v13);
}

uint64_t sub_10003E6AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[8];
  sub_10003EFC8();
  v2 = async function pointer to ArtistPromotionalAssets.init(artistID:)[1];
  swift_bridgeObjectRetain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[23] = v3;
  *v3 = v0;
  v3[1] = sub_10003E714;
  return ArtistPromotionalAssets.init(artistID:)(v0[18], v0[7], v0[8]);
}

uint64_t sub_10003E714()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10003E890;
  else
    v4 = sub_10003E774;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 168), *(_QWORD *)(v2 + 176));
}

uint64_t sub_10003E774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 160));
  KeyPath = swift_getKeyPath(&unk_10010C808);
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  *(_QWORD *)(v0 + 48) = v2;
  v5 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 48, KeyPath, sub_10003F704, v4, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  swift_task_dealloc(v4);
  sub_100008194(v1, &qword_10015D400);
  v6 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 112);
  v9 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003E890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 192);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  swift_errorRetain(v1);
  v4 = sub_100003E70(&qword_10015D990);
  if (swift_dynamicCast(v2, v0 + 16, v4, v3, 0))
  {
    v5 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 88))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    *(_DWORD *)(v0 + 224) = v5;
    if (v5 == enum case for EventsError.missingData(_:))
    {
      v6 = swift_errorRelease(*(_QWORD *)(v0 + 192));
      *(_QWORD *)(v0 + 200) = static MainActor.shared.getter(v6);
      v7 = (_QWORD *)swift_task_alloc(dword_10015FA94);
      *(_QWORD *)(v0 + 208) = v7;
      *v7 = v0;
      v7[1] = sub_10003EAA4;
      return sub_100050AD8(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
    }
    v10 = *(_QWORD *)(v0 + 128);
    v9 = *(_QWORD *)(v0 + 136);
    v11 = *(_QWORD *)(v0 + 120);
    swift_release(*(_QWORD *)(v0 + 160));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 160));
  }
  v12 = *(_QWORD *)(v0 + 192);
  v13 = *(_QWORD *)(v0 + 72);
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  KeyPath = swift_getKeyPath(&unk_10010C830);
  v15 = swift_task_alloc(32);
  *(_QWORD *)(v15 + 16) = v13;
  *(_QWORD *)(v15 + 24) = v12;
  *(_QWORD *)(v0 + 24) = v13;
  swift_errorRetain(v12);
  v16 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 24, KeyPath, sub_10003F548, v15, (char *)&type metadata for () + 8, v16);
  swift_errorRelease(v12);
  swift_release(KeyPath);
  swift_errorRelease(v12);
  swift_task_dealloc(v15);
  v17 = *(_QWORD *)(v0 + 136);
  v19 = *(_QWORD *)(v0 + 104);
  v18 = *(_QWORD *)(v0 + 112);
  v20 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003EAA4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  *(_QWORD *)(*v1 + 216) = v0;
  swift_task_dealloc(v3);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(*(_QWORD *)(v2 + 152), &protocol witness table for MainActor);
  if (v0)
    v6 = sub_10003EDF0;
  else
    v6 = sub_10003EB2C;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_10003EB2C()
{
  _QWORD *v0;

  swift_release(v0[25]);
  return swift_task_switch(sub_10003EB64, v0[21], v0[22]);
}

uint64_t sub_10003EB64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 160));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = *(unsigned int *)(v0 + 224);
    v5 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 128);
    v7 = *(_QWORD *)(v0 + 72);
    sub_100008194(*(_QWORD *)(v0 + 80), &qword_10015EEC0);
    v8 = sub_100003B3C((unint64_t *)&qword_10015EEC8, (uint64_t (*)(uint64_t))&type metadata accessor for EventsError, (uint64_t)&protocol conformance descriptor for EventsError);
    v9 = swift_allocError(v5, v8, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v10, v4, v5);
    KeyPath = swift_getKeyPath(&unk_10010C830);
    v12 = swift_task_alloc(32);
    *(_QWORD *)(v12 + 16) = v7;
    *(_QWORD *)(v12 + 24) = v9;
    *(_QWORD *)(v0 + 32) = v7;
    v13 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 32, KeyPath, sub_10003F548, v12, (char *)&type metadata for () + 8, v13);
    swift_errorRelease(v9);
    swift_release(KeyPath);
    swift_task_dealloc(v12);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 112);
    v16 = *(_QWORD *)(v0 + 72);
    sub_10003F600(*(_QWORD *)(v0 + 80), v14);
    sub_10003F644(v14, v15);
    v17 = sub_100003E70(&qword_10015EED0);
    swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    v18 = sub_1000256BC(v15, (uint64_t)&_swiftEmptyArrayStorage);
    v19 = swift_getKeyPath(&unk_10010C858);
    v20 = swift_task_alloc(32);
    *(_QWORD *)(v20 + 16) = v16;
    *(_QWORD *)(v20 + 24) = v18;
    *(_QWORD *)(v0 + 40) = v16;
    v21 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 40, v19, sub_10003F5AC, v20, (char *)&type metadata for () + 8, v21);
    swift_release(v18);
    swift_release(v19);
    swift_task_dealloc(v20);
    sub_10003F6C8(v14);
  }
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  v22 = *(_QWORD *)(v0 + 136);
  v24 = *(_QWORD *)(v0 + 104);
  v23 = *(_QWORD *)(v0 + 112);
  v25 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003EDF0()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[27];
  swift_release(v0[25]);
  swift_errorRelease(v1);
  return swift_task_switch(sub_10003EE34, v0[21], v0[22]);
}

uint64_t sub_10003EE34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 160));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v1);
  v4 = *(unsigned int *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 72);
  sub_100008194(*(_QWORD *)(v0 + 80), &qword_10015EEC0);
  v8 = sub_100003B3C((unint64_t *)&qword_10015EEC8, (uint64_t (*)(uint64_t))&type metadata accessor for EventsError, (uint64_t)&protocol conformance descriptor for EventsError);
  v9 = swift_allocError(v5, v8, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v10, v4, v5);
  KeyPath = swift_getKeyPath(&unk_10010C830);
  v12 = swift_task_alloc(32);
  *(_QWORD *)(v12 + 16) = v7;
  *(_QWORD *)(v12 + 24) = v9;
  *(_QWORD *)(v0 + 32) = v7;
  v13 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 32, KeyPath, sub_10003F548, v12, (char *)&type metadata for () + 8, v13);
  swift_errorRelease(v9);
  swift_release(KeyPath);
  swift_task_dealloc(v12);
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  v14 = *(_QWORD *)(v0 + 136);
  v16 = *(_QWORD *)(v0 + 104);
  v15 = *(_QWORD *)(v0 + 112);
  v17 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003EFC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[16];
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;

  v1 = sub_100003E70(&qword_10015D400);
  __chkstk_darwin(v1);
  v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for ArtistPromotionalAssets(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  KeyPath = swift_getKeyPath(&unk_10010C808);
  v17 = v0;
  v18 = v3;
  v19 = v0;
  v6 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v19, KeyPath, sub_10003F704, v16, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  sub_100008194((uint64_t)v3, &qword_10015D400);
  v7 = swift_getKeyPath(&unk_10010C858);
  v14 = v0;
  v15 = 0;
  v19 = v0;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v19, v7, sub_10003F5AC, v13, (char *)&type metadata for () + 8, v6);
  swift_release(v7);
  v8 = swift_getKeyPath(&unk_10010C830);
  v11 = v0;
  v12 = 0;
  v19 = v0;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v19, v8, sub_10003F548, v10, (char *)&type metadata for () + 8, v6);
  return swift_release(v8);
}

uint64_t sub_10003F16C()
{
  uint64_t *v0;
  char *v1;
  uint64_t v2;

  sub_10000821C(v0[2], v0[3]);
  sub_100008194((uint64_t)v0 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets, &qword_10015D400);
  swift_errorRelease(*(uint64_t *)((char *)v0 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error));
  swift_release(*(uint64_t *)((char *)v0
                           + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel));
  v1 = (char *)v0 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10003F200()
{
  return type metadata accessor for PromotionalAssetsController(0);
}

uint64_t type metadata accessor for PromotionalAssetsController(uint64_t a1)
{
  uint64_t result;

  result = qword_10015EDF8;
  if (!qword_10015EDF8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PromotionalAssetsController);
  return result;
}

void sub_10003F244(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_10010C7A0;
  sub_10003F2E4(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_10010C7B8;
    v6[3] = &unk_10010C7B8;
    v4 = type metadata accessor for ObservationRegistrar(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 5, v6, a1 + 80);
    }
  }
}

void sub_10003F2E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015EE08)
  {
    v2 = type metadata accessor for ArtistPromotionalAssets(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10015EE08);
  }
}

uint64_t destroy for PromotionalAssetsController.PromotionalAssetsType(uint64_t *a1)
{
  return sub_10000821C(*a1, a1[1]);
}

uint64_t _s16EventViewService27PromotionalAssetsControllerC21PromotionalAssetsTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100008214(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PromotionalAssetsController.PromotionalAssetsType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100008214(*(_QWORD *)a2, v4);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_10000821C(v6, v7);
  return a1;
}

__n128 initializeWithTake for PromotionalAssetsController.PromotionalAssetsType(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PromotionalAssetsController.PromotionalAssetsType(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_10000821C(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromotionalAssetsController.PromotionalAssetsType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PromotionalAssetsController.PromotionalAssetsType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_10003F4CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_10003F4D4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PromotionalAssetsController.PromotionalAssetsType()
{
  return &type metadata for PromotionalAssetsController.PromotionalAssetsType;
}

uint64_t sub_10003F4F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015D400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003F548()
{
  return sub_10003F5C0();
}

uint64_t sub_10003F55C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015D400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003F5AC()
{
  return sub_10003F688();
}

uint64_t sub_10003F5C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error) = v1;
  swift_errorRetain(v1);
  return swift_errorRelease(v3);
}

uint64_t sub_10003F600(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003F644(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003F688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

uint64_t sub_10003F6C8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003F704()
{
  return sub_100008254();
}

unint64_t sub_10003F720(uint64_t a1)
{
  unint64_t result;

  result = sub_10003F744();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003F744()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EED8[0];
  if (!qword_10015EED8[0])
  {
    v1 = type metadata accessor for Playlist(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Playlist, v1);
    atomic_store(result, qword_10015EED8);
  }
  return result;
}

void sub_10003F78C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[12];

  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v15[0] = *(_QWORD *)(v2 - 8) + 64;
    v15[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v15[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4 = *(_QWORD *)(a1 + 88);
    v5 = type metadata accessor for Optional(255, v4);
    v6 = type metadata accessor for Published(319, v5);
    if (v7 <= 0x3F)
    {
      v15[3] = *(_QWORD *)(v6 - 8) + 64;
      v8 = type metadata accessor for Array(255, v4);
      v9 = type metadata accessor for Published(319, v8);
      if (v10 <= 0x3F)
      {
        v15[4] = *(_QWORD *)(v9 - 8) + 64;
        sub_100018CB8(319, &qword_10015EF60, (uint64_t)&type metadata for Tab);
        if (v12 <= 0x3F)
        {
          v15[5] = *(_QWORD *)(v11 - 8) + 64;
          sub_100018CB8(319, &qword_10015EF68, (uint64_t)&type metadata for Bool);
          if (v14 <= 0x3F)
          {
            v15[6] = *(_QWORD *)(v13 - 8) + 64;
            v15[7] = (char *)&value witness table for Builtin.NativeObject + 64;
            v15[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
            v15[9] = " ";
            v15[10] = " ";
            v15[11] = " ";
            swift_initClassMetadata2(a1, 0, 12, v15, a1 + 112);
          }
        }
      }
    }
  }
}

uint64_t sub_10003F8E4()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  if (v1 == (id)1)
    return 200;
  else
    return 100;
}

uint64_t sub_10003F944()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;

  KeyPath = swift_getKeyPath(&unk_10010C9B8);
  v2 = swift_getKeyPath(&unk_10010C9F0);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_10003F9E8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10010CA10);
  v2 = swift_getKeyPath(&unk_10010CA48);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10003FA84(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10010CA10);
  v4 = swift_getKeyPath(&unk_10010CA48);
  v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

uint64_t sub_10003FB24()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10010CA68);
  v2 = swift_getKeyPath(&unk_10010CAA0);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10003FBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  KeyPath = swift_getKeyPath(&unk_10010CA68);
  v6 = swift_getKeyPath(&unk_10010CAA0);
  v8[0] = a1;
  v8[1] = a2;
  swift_retain(v2);
  return static Published.subscript.setter(v8, v2, KeyPath, v6);
}

uint64_t sub_10003FC64()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  unsigned __int8 v4;

  KeyPath = swift_getKeyPath(&unk_10010C960);
  v2 = swift_getKeyPath(&unk_10010C998);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10003FD00(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  char v6;

  KeyPath = swift_getKeyPath(&unk_10010C960);
  v4 = swift_getKeyPath(&unk_10010C998);
  v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

uint64_t sub_10003FDA0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 96) + 48))(*(_QWORD *)(*(_QWORD *)v0 + 80));
}

uint64_t sub_10003FDD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3);
  v6 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v16 - v8;
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v4, v3);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v11 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
  else
  {
    v13 = sub_10003F8E4();
    v14 = sub_10003F8E4();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v4, AssociatedTypeWitness, &unk_100118198, &unk_1001181B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v13, v14, AssociatedTypeWitness, AssociatedConformanceWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v9, AssociatedTypeWitness);
  }
}

BOOL sub_10003FF78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t WitnessTable;

  v1 = type metadata accessor for Array(0, *(_QWORD *)(*(_QWORD *)v0 + 88));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
  return (Collection.isEmpty.getter(v1, WitnessTable) & 1) == 0;
}

uint64_t sub_10003FFE0()
{
  return sub_10003FD00(1);
}

_QWORD *sub_10003FFE8(char a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;

  v3 = *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 128));
  swift_bridgeObjectRetain_n(v3, 2);
  v4 = sub_1000F5520(v3);
  swift_bridgeObjectRelease();
  v19 = v4;
  sub_1000410A0((uint64_t *)&v19);
  swift_bridgeObjectRelease();
  v5 = v19;
  v6 = _swiftEmptyArrayStorage;
  if (*(_QWORD *)(v3 + 16) == 1)
  {
    if ((a1 & 1) == 0)
      goto LABEL_3;
LABEL_10:
    if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      v6 = sub_1000F4F20(0, v6[2] + 1, 1, v6);
    v17 = v6[2];
    v16 = v6[3];
    if (v17 >= v16 >> 1)
      v6 = sub_1000F4F20((_QWORD *)(v16 > 1), v17 + 1, 1, v6);
    v6[2] = v17 + 1;
    *(_OWORD *)&v6[2 * v17 + 4] = xmmword_10010C8C0;
    v7 = v5[2];
    if (v7)
      goto LABEL_4;
LABEL_15:
    swift_release(v5);
    v8 = _swiftEmptyArrayStorage;
    goto LABEL_16;
  }
  v15 = sub_100003E70(qword_10015EF80);
  v6 = (_QWORD *)swift_allocObject(v15, 48, 7);
  *((_OWORD *)v6 + 1) = xmmword_10010ACC0;
  v6[4] = 0;
  v6[5] = 0;
  if ((a1 & 1) != 0)
    goto LABEL_10;
LABEL_3:
  v7 = v5[2];
  if (!v7)
    goto LABEL_15;
LABEL_4:
  v19 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v6);
  sub_10005430C(0, v7, 0);
  v8 = v19;
  v9 = v5 + 5;
  do
  {
    v11 = *(v9 - 1);
    v10 = *v9;
    v19 = v8;
    v13 = v8[2];
    v12 = v8[3];
    swift_bridgeObjectRetain(v10);
    if (v13 >= v12 >> 1)
    {
      sub_10005430C(v12 > 1, v13 + 1, 1);
      v8 = v19;
    }
    v9 += 2;
    v8[2] = v13 + 1;
    v14 = &v8[2 * v13];
    v14[4] = v11;
    v14[5] = v10;
    --v7;
  }
  while (v7);
  swift_release(v5);
  swift_bridgeObjectRelease();
LABEL_16:
  v19 = v6;
  sub_10007F8A8((uint64_t)v8);
  return v19;
}

uint64_t sub_10004020C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v3[6] = *v2;
  v4 = type metadata accessor for MainActor(0);
  v3[7] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[8] = v5;
  v3[9] = v6;
  return swift_task_switch(sub_100040284, v5, v6);
}

uint64_t sub_100040284()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 32);
  sub_100014A94();
  if (v1)
  {
    if (v1 == 1)
    {
      v2 = (_QWORD *)swift_task_alloc(dword_10015EF7C);
      *(_QWORD *)(v0 + 80) = v2;
      *v2 = v0;
      v2[1] = sub_100040410;
      return sub_100040528();
    }
    v6 = *(_QWORD **)(v0 + 48);
    v8 = *(_QWORD *)(v0 + 32);
    v7 = *(_QWORD *)(v0 + 40);
    v9 = *(_QWORD *)(v0 + 24);
    swift_release(*(_QWORD *)(v0 + 56));
    v10 = *(_QWORD *)(v7 + *(_QWORD *)(*(_QWORD *)v7 + 120));
    *(_QWORD *)(v0 + 16) = v10;
    v11 = (_QWORD *)swift_task_alloc(64);
    v11[2] = v6[10];
    v12 = v6[11];
    v11[3] = v12;
    v11[4] = v6[12];
    v11[5] = v6[13];
    v11[6] = v9;
    v11[7] = v8;
    v13 = type metadata accessor for Array(0, v12);
    swift_bridgeObjectRetain(v10);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v13);
    v15 = _ArrayProtocol.filter(_:)(sub_100041DDC, v11, v13, WitnessTable);
    swift_task_dealloc(v11);
    v5 = v15;
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 40);
    swift_release(*(_QWORD *)(v0 + 56));
    swift_bridgeObjectRetain(*(_QWORD *)(v4 + *(_QWORD *)(*(_QWORD *)v4 + 120)));
  }
  sub_10003FA84(v5);
  v16 = *(_QWORD *)(v0 + 32);
  v17 = *(_QWORD *)(v0 + 24);
  sub_100005FA0(v17, v16);
  sub_10003FBC0(v17, v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100040410(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  *(_QWORD *)(*(_QWORD *)v2 + 88) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[8];
    v7 = v4[9];
    v8 = sub_1000404EC;
  }
  else
  {
    v4[12] = a1;
    v6 = v4[8];
    v7 = v4[9];
    v8 = sub_100040484;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100040484()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 56));
  sub_10003FA84(v1);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 24);
  sub_100005FA0(v3, v2);
  sub_10003FBC0(v3, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000404EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 56));
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100040528()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[3] = v0;
  v1[4] = *v0;
  v2 = type metadata accessor for MainActor(0);
  v1[5] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[6] = v3;
  v1[7] = v4;
  return swift_task_switch(sub_10004059C, v3, v4);
}

uint64_t sub_10004059C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10015DBEC);
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = sub_1000405F0;
  return sub_1000147A8();
}

uint64_t sub_1000405F0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 64);
  *(_QWORD *)(v6 + 72) = a1;
  *(_QWORD *)(v6 + 80) = a2;
  *(_QWORD *)(v6 + 88) = v3;
  swift_task_dealloc(v7);
  if (v3)
  {
    v8 = *(_QWORD *)(v6 + 48);
    v9 = *(_QWORD *)(v6 + 56);
    v10 = sub_10004077C;
  }
  else
  {
    *(_BYTE *)(v6 + 96) = a3;
    v8 = *(_QWORD *)(v6 + 48);
    v9 = *(_QWORD *)(v6 + 56);
    v10 = sub_100040670;
  }
  return swift_task_switch(v10, v8, v9);
}

uint64_t sub_100040670()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;

  v1 = *(_BYTE *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 40));
  if ((v1 & 1) != 0)
  {
    v10 = static Array._allocateUninitialized(_:)(0, *(_QWORD *)(*(_QWORD *)(v0 + 32) + 88));
  }
  else
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + *(_QWORD *)(**(_QWORD **)(v0 + 24) + 120));
    *(_QWORD *)(v0 + 16) = v2;
    v3 = *(_QWORD *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD **)(v0 + 32);
    v6 = (_QWORD *)swift_task_alloc(64);
    v6[2] = v5[10];
    v7 = v5[11];
    v6[3] = v7;
    v6[4] = v5[12];
    v6[5] = v5[13];
    v6[6] = v4;
    v6[7] = v3;
    v8 = type metadata accessor for Array(0, v7);
    swift_bridgeObjectRetain(v2);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
    v10 = _ArrayProtocol.filter(_:)(sub_100041E00, v6, v8, WitnessTable);
    swift_task_dealloc(v6);
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v10);
}

uint64_t sub_10004077C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000407B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a3;
  v30 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a7);
  v10 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - v12;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 216))(a5, a7);
  v32 = v14;
  v15 = type metadata accessor for Array(0, AssociatedTypeWitness);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v15);
  Collection.first.getter(v15, WitnessTable);
  swift_bridgeObjectRelease(v14);
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v18 = 0;
  }
  else
  {
    v20 = v30;
    v19 = v31;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a7, a5, AssociatedTypeWitness, &unk_1001191E8, &unk_100119238);
    v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v13, AssociatedTypeWitness);
    if (v22)
    {
      v23 = objc_msgSend(v22, "country");

      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      if (v24 == v20 && v26 == v19)
      {
        swift_bridgeObjectRelease(v19);
        v18 = 1;
      }
      else
      {
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, v20, v19, 0);
        swift_bridgeObjectRelease(v26);
      }
    }
    else
    {
      v18 = 0;
    }
  }
  return v18 & 1;
}

BOOL sub_1000409C0(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t v19;
  uint64_t AssociatedConformanceWitness;
  double v22;
  double v23;
  double v24;
  id v25;
  id v26;
  double v27;
  double v28;
  _QWORD v29[8];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a7);
  v12 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v29 - v14;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 216))(a5, a7);
  v29[7] = v16;
  v17 = type metadata accessor for Array(0, AssociatedTypeWitness);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v17);
  Collection.first.getter(v17, WitnessTable);
  swift_bridgeObjectRelease(v16);
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v15, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return 0;
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a7, a5, AssociatedTypeWitness, &unk_1001191E8, &unk_100119238);
    v22 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
    v24 = v23;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, AssociatedTypeWitness);
    v25 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v22, v24);
    v26 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", a1, a2);
    objc_msgSend(v26, "distanceFromLocation:", v25);
    v28 = v27;

    return v28 <= 161000.0;
  }
}

uint64_t sub_100040BCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 96) + 40))(*(_QWORD *)(*(_QWORD *)v1 + 80));
  sub_1000DADAC(v3, v4, 2, a1);
  return swift_bridgeObjectRelease();
}

void sub_100040C18(char a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  ValueWitnessTable *v24;
  uint64_t v25;
  char *v26;
  NSString v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  void **aBlock;
  uint64_t v33;
  Class (*v34)(uint64_t);
  ValueMetadata *v35;
  _QWORD *(*v36)();
  _QWORD *v37;
  char *v38;

  v11 = *v5;
  v12 = sub_100003E70(&qword_10015D3B8);
  v13 = swift_allocObject(v12, 192, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10010A6D0;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v11 + 96) + 40))(*(_QWORD *)(v11 + 80));
  *(_QWORD *)(v13 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v13 + 64) = &off_100162E68;
  *(_BYTE *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = v14;
  *(_QWORD *)(v13 + 48) = v15;
  *(_QWORD *)(v13 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v13 + 104) = &off_100162E40;
  *(_BYTE *)(v13 + 72) = 2;
  *(_QWORD *)(v13 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v13 + 144) = &off_100162EC8;
  *(_BYTE *)(v13 + 112) = a1;
  *(_QWORD *)(v13 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v13 + 184) = &off_100162EA0;
  *(_QWORD *)(v13 + 152) = a2;
  *(_QWORD *)(v13 + 160) = a3;
  *(_BYTE *)(v13 + 168) = a4;
  v16 = *(_QWORD *)(a5 + 72);
  if (v16)
  {
    v17 = *(_QWORD *)(a5 + 64);
    v18 = *(_QWORD *)(a5 + 72);
  }
  else
  {
    v17 = 0;
    v18 = 0xE000000000000000;
  }
  v35 = &type metadata for AnalyticsString;
  v36 = (_QWORD *(*)())&off_100162E68;
  LOBYTE(aBlock) = 1;
  v33 = v17;
  v34 = (Class (*)(uint64_t))v18;
  sub_100005568(a2, a3, a4);
  v38 = (char *)v13;
  v19 = *(_QWORD *)(v13 + 16);
  v20 = *(_QWORD *)(v13 + 24);
  swift_bridgeObjectRetain(v16);
  if (v19 >= v20 >> 1)
    v38 = sub_1000F4CF4((char *)(v20 > 1), v19 + 1, 1, (char *)v13);
  v21 = sub_100005580((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v21);
  v23 = (char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v24->initializeWithCopy)((uint64_t)v23, v25);
  sub_1000DAD34(v19, (uint64_t)v23, (uint64_t *)&v38, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_100162E68);
  sub_1000055A8(&aBlock);
  v26 = v38;
  v27 = String._bridgeToObjectiveC()();
  v28 = (_QWORD *)swift_allocObject(&unk_10014E328, 40, 7);
  v28[2] = 0xD00000000000001ELL;
  v28[3] = 0x80000001001150B0;
  v28[4] = v26;
  v36 = sub_1000055F4;
  v37 = v28;
  aBlock = _NSConcreteStackBlock;
  v33 = 1107296256;
  v34 = sub_1000DACC0;
  v35 = (ValueMetadata *)&unk_10014E340;
  v29 = _Block_copy(&aBlock);
  v30 = v37;
  swift_bridgeObjectRetain(v26);
  swift_release(v30);
  AnalyticsSendEventLazy(v27, v29);
  _Block_release(v29);
  swift_bridgeObjectRelease();

}

uint64_t *sub_100040EC4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *v0;
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*v0 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 112));
  swift_bridgeObjectRelease(*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 120)));
  swift_bridgeObjectRelease(*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 128)));
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 136);
  v3 = *(_QWORD *)(v1 + 88);
  v4 = type metadata accessor for Optional(255, v3);
  v5 = type metadata accessor for Published(0, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v2, v5);
  v6 = (uint64_t)v0 + *(_QWORD *)(*v0 + 144);
  v7 = type metadata accessor for Array(255, v3);
  v8 = type metadata accessor for Published(0, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  v9 = (uint64_t)v0 + *(_QWORD *)(*v0 + 152);
  v10 = sub_100003E70(&qword_10015E410);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (uint64_t)v0 + *(_QWORD *)(*v0 + 160);
  v12 = sub_100003E70(&qword_10015D7F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_release(*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 168)));

  v13 = (uint64_t)v0 + *(_QWORD *)(*v0 + 184);
  v14 = *(_QWORD *)(v13 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + 24));
  swift_bridgeObjectRelease(v14);
  v15 = (uint64_t)v0 + *(_QWORD *)(*v0 + 192);
  v16 = *(_QWORD *)(v15 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v15 + 24));
  swift_bridgeObjectRelease(v16);
  v17 = (uint64_t)v0 + *(_QWORD *)(*v0 + 200);
  v18 = *(_QWORD *)(v17 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v17 + 24));
  swift_bridgeObjectRelease(v18);
  return v0;
}

uint64_t sub_100041070()
{
  uint64_t v0;

  sub_100040EC4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for ArtistEventViewModel(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for ArtistEventViewModel);
}

Swift::Int sub_1000410A0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_100081898(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_100041108(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_100041108(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  Swift::Int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  _QWORD *v107;
  Swift::Int v108;
  Swift::Int v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_133;
    if (v3)
      return sub_10004182C(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_141;
  v108 = result;
  v116 = v1;
  v105 = a1;
  if (v3 < 2)
  {
    v8 = (char *)_swiftEmptyArrayStorage;
    v110 = (char *)&_swiftEmptyArrayStorage[4];
    v107 = _swiftEmptyArrayStorage;
    if (v3 != 1)
    {
      v11 = _swiftEmptyArrayStorage[2];
LABEL_99:
      if (v11 >= 2)
      {
        v98 = *v105;
        do
        {
          v99 = v11 - 2;
          if (v11 < 2)
            goto LABEL_128;
          if (!v98)
            goto LABEL_140;
          v100 = *(_QWORD *)&v8[16 * v99 + 32];
          v101 = *(_QWORD *)&v8[16 * v11 + 24];
          v102 = v116;
          sub_100041920((char *)(v98 + 16 * v100), (char *)(v98 + 16 * *(_QWORD *)&v8[16 * v11 + 16]), v98 + 16 * v101, v110);
          v116 = v102;
          if (v102)
            break;
          if (v101 < v100)
            goto LABEL_129;
          if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
            v8 = sub_100081884((uint64_t)v8);
          if (v99 >= *((_QWORD *)v8 + 2))
            goto LABEL_130;
          v103 = &v8[16 * v99 + 32];
          *(_QWORD *)v103 = v100;
          *((_QWORD *)v103 + 1) = v101;
          v104 = *((_QWORD *)v8 + 2);
          if (v11 > v104)
            goto LABEL_131;
          memmove(&v8[16 * v11 + 16], &v8[16 * v11 + 32], 16 * (v104 - v11));
          *((_QWORD *)v8 + 2) = v104 - 1;
          v11 = v104 - 1;
        }
        while (v104 > 2);
      }
LABEL_110:
      swift_bridgeObjectRelease();
      v107[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for String);
    *(_QWORD *)(v7 + 16) = v6;
    v107 = (_QWORD *)v7;
    v110 = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v106 = *a1 + 24;
  v8 = (char *)_swiftEmptyArrayStorage;
  v109 = v3;
LABEL_15:
  v12 = v9++;
  if (v9 >= v3)
    goto LABEL_32;
  v13 = (uint64_t *)(v10 + 16 * v9);
  v15 = *v13;
  v14 = v13[1];
  v16 = (uint64_t *)(v10 + 16 * v12);
  v18 = *v16;
  v17 = v16[1];
  v114 = v15;
  v115 = v14;
  v112 = v18;
  v113 = v17;
  v19 = sub_10000CB40();
  v20 = StringProtocol.localizedStandardCompare<A>(_:)(&v112, &type metadata for String, &type metadata for String, v19, v19);
  v9 = v12 + 2;
  if (v12 + 2 >= v3)
    goto LABEL_21;
  v21 = (_QWORD *)(v106 + 16 * v12);
  v22 = v21;
  do
  {
    v23 = v22[2];
    v22 += 2;
    v24 = v21[1];
    v26 = *(v21 - 1);
    v25 = *v21;
    v114 = v24;
    v115 = v23;
    v112 = v26;
    v113 = v25;
    if ((v20 == -1) == (StringProtocol.localizedStandardCompare<A>(_:)(&v112, &type metadata for String, &type metadata for String, v19, v19) != -1))
    {
      v3 = v109;
      if (v20 == -1)
        goto LABEL_24;
LABEL_32:
      if (v9 < v3)
      {
        if (__OFSUB__(v9, v12))
          goto LABEL_132;
        if (v9 - v12 < v108)
        {
          if (__OFADD__(v12, v108))
            goto LABEL_134;
          if (v12 + v108 >= v3)
            v34 = v3;
          else
            v34 = v12 + v108;
          if (v34 < v12)
          {
LABEL_135:
            __break(1u);
            goto LABEL_136;
          }
          if (v9 != v34)
          {
            v35 = sub_10000CB40();
            v36 = (_QWORD *)(v10 + 16 * v9);
            do
            {
              v37 = (uint64_t *)(v10 + 16 * v9);
              v38 = *v37;
              v39 = v37[1];
              v40 = v12;
              v41 = v36;
              do
              {
                v42 = *(v41 - 2);
                v43 = *(v41 - 1);
                v114 = v38;
                v115 = v39;
                v112 = v42;
                v113 = v43;
                if (StringProtocol.localizedStandardCompare<A>(_:)(&v112, &type metadata for String, &type metadata for String, v35, v35) != -1)break;
                if (!v10)
                  goto LABEL_137;
                v38 = *v41;
                v39 = v41[1];
                *(_OWORD *)v41 = *((_OWORD *)v41 - 1);
                *(v41 - 1) = v39;
                *(v41 - 2) = v38;
                v41 -= 2;
                ++v40;
              }
              while (v9 != v40);
              ++v9;
              v36 += 2;
            }
            while (v9 != v34);
            v9 = v34;
          }
        }
      }
      if (v9 < v12)
        goto LABEL_127;
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        v8 = sub_1000815D8(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
      v45 = *((_QWORD *)v8 + 2);
      v44 = *((_QWORD *)v8 + 3);
      v11 = v45 + 1;
      if (v45 >= v44 >> 1)
        v8 = sub_1000815D8((char *)(v44 > 1), v45 + 1, 1, v8);
      *((_QWORD *)v8 + 2) = v11;
      v111 = v8 + 32;
      v46 = &v8[16 * v45 + 32];
      *(_QWORD *)v46 = v12;
      *((_QWORD *)v46 + 1) = v9;
      if (v45)
      {
        v47 = v8 + 32;
        while (1)
        {
          v48 = v11 - 1;
          if (v11 >= 4)
          {
            v53 = &v47[16 * v11];
            v54 = *((_QWORD *)v53 - 8);
            v55 = *((_QWORD *)v53 - 7);
            v59 = __OFSUB__(v55, v54);
            v56 = v55 - v54;
            if (v59)
              goto LABEL_116;
            v58 = *((_QWORD *)v53 - 6);
            v57 = *((_QWORD *)v53 - 5);
            v59 = __OFSUB__(v57, v58);
            v51 = v57 - v58;
            v52 = v59;
            if (v59)
              goto LABEL_117;
            v60 = v11 - 2;
            v61 = &v47[16 * v11 - 32];
            v63 = *(_QWORD *)v61;
            v62 = *((_QWORD *)v61 + 1);
            v59 = __OFSUB__(v62, v63);
            v64 = v62 - v63;
            if (v59)
              goto LABEL_119;
            v59 = __OFADD__(v51, v64);
            v65 = v51 + v64;
            if (v59)
              goto LABEL_122;
            if (v65 >= v56)
            {
              v83 = &v47[16 * v48];
              v85 = *(_QWORD *)v83;
              v84 = *((_QWORD *)v83 + 1);
              v59 = __OFSUB__(v84, v85);
              v86 = v84 - v85;
              if (v59)
                goto LABEL_126;
              v76 = v51 < v86;
              goto LABEL_87;
            }
          }
          else
          {
            if (v11 != 3)
            {
              v77 = *((_QWORD *)v8 + 4);
              v78 = *((_QWORD *)v8 + 5);
              v59 = __OFSUB__(v78, v77);
              v70 = v78 - v77;
              v71 = v59;
              goto LABEL_81;
            }
            v50 = *((_QWORD *)v8 + 4);
            v49 = *((_QWORD *)v8 + 5);
            v59 = __OFSUB__(v49, v50);
            v51 = v49 - v50;
            v52 = v59;
          }
          if ((v52 & 1) != 0)
            goto LABEL_118;
          v60 = v11 - 2;
          v66 = &v47[16 * v11 - 32];
          v68 = *(_QWORD *)v66;
          v67 = *((_QWORD *)v66 + 1);
          v69 = __OFSUB__(v67, v68);
          v70 = v67 - v68;
          v71 = v69;
          if (v69)
            goto LABEL_121;
          v72 = &v47[16 * v48];
          v74 = *(_QWORD *)v72;
          v73 = *((_QWORD *)v72 + 1);
          v59 = __OFSUB__(v73, v74);
          v75 = v73 - v74;
          if (v59)
            goto LABEL_124;
          if (__OFADD__(v70, v75))
            goto LABEL_125;
          if (v70 + v75 >= v51)
          {
            v76 = v51 < v75;
LABEL_87:
            if (v76)
              v48 = v60;
            goto LABEL_89;
          }
LABEL_81:
          if ((v71 & 1) != 0)
            goto LABEL_120;
          v79 = &v47[16 * v48];
          v81 = *(_QWORD *)v79;
          v80 = *((_QWORD *)v79 + 1);
          v59 = __OFSUB__(v80, v81);
          v82 = v80 - v81;
          if (v59)
            goto LABEL_123;
          if (v82 < v70)
            goto LABEL_14;
LABEL_89:
          v87 = v48 - 1;
          if (v48 - 1 >= v11)
          {
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
            goto LABEL_135;
          }
          v88 = v10;
          if (!v10)
            goto LABEL_138;
          v89 = v8;
          v90 = &v47[16 * v87];
          v91 = v47;
          v92 = *(_QWORD *)v90;
          v93 = &v91[16 * v48];
          v94 = *((_QWORD *)v93 + 1);
          v95 = v88;
          v96 = v116;
          sub_100041920((char *)(v88 + 16 * *(_QWORD *)v90), (char *)(v88 + 16 * *(_QWORD *)v93), v88 + 16 * v94, v110);
          v116 = v96;
          if (v96)
            goto LABEL_110;
          if (v94 < v92)
            goto LABEL_113;
          if (v48 > *((_QWORD *)v89 + 2))
            goto LABEL_114;
          *(_QWORD *)v90 = v92;
          v47 = v111;
          *(_QWORD *)&v111[16 * v87 + 8] = v94;
          v97 = *((_QWORD *)v89 + 2);
          if (v48 >= v97)
            goto LABEL_115;
          v8 = v89;
          v11 = v97 - 1;
          memmove(v93, v93 + 16, 16 * (v97 - 1 - v48));
          *((_QWORD *)v89 + 2) = v97 - 1;
          v10 = v95;
          if (v97 <= 2)
            goto LABEL_14;
        }
      }
      v11 = 1;
LABEL_14:
      v3 = v109;
      if (v9 >= v109)
        goto LABEL_99;
      goto LABEL_15;
    }
    ++v9;
    v21 = v22;
    v3 = v109;
  }
  while (v109 != v9);
  v9 = v109;
LABEL_21:
  if (v20 != -1)
    goto LABEL_32;
LABEL_24:
  if (v9 >= v12)
  {
    if (v12 < v9)
    {
      v27 = 16 * v9;
      v28 = 16 * v12;
      v29 = v9;
      v30 = v12;
      while (1)
      {
        if (v30 != --v29)
        {
          if (!v10)
            goto LABEL_139;
          v31 = v10 + v27;
          v32 = *(_QWORD *)(v10 + v28);
          v33 = *(_QWORD *)(v10 + v28 + 8);
          *(_OWORD *)(v10 + v28) = *(_OWORD *)(v10 + v27 - 16);
          *(_QWORD *)(v31 - 16) = v32;
          *(_QWORD *)(v31 - 8) = v33;
        }
        ++v30;
        v27 -= 16;
        v28 += 16;
        if (v30 >= v29)
          goto LABEL_32;
      }
    }
    goto LABEL_32;
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_10004182C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];
  uint64_t v17;

  v17 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = sub_10000CB40();
    v7 = (_QWORD *)(v5 + 16 * v4);
LABEL_5:
    v8 = (uint64_t *)(v5 + 16 * v4);
    v9 = *v8;
    v10 = v8[1];
    v11 = v17;
    v12 = v7;
    while (1)
    {
      v13 = *(v12 - 2);
      v14 = *(v12 - 1);
      v16[2] = v9;
      v16[3] = v10;
      v16[0] = v13;
      v16[1] = v14;
      result = StringProtocol.localizedStandardCompare<A>(_:)(v16, &type metadata for String, &type metadata for String, v6, v6);
      if (result != -1)
      {
LABEL_4:
        ++v4;
        v7 += 2;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v5)
        break;
      v9 = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = v9;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100041920(char *__src, char *a2, unint64_t a3, char *a4)
{
  char *v5;
  char *v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  char v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;

  v5 = a2;
  v6 = __src;
  v7 = a2 - __src;
  v8 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v8 = a2 - __src;
  v9 = v8 >> 4;
  v10 = a3 - (_QWORD)a2;
  v11 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v11 = a3 - (_QWORD)a2;
  v12 = v11 >> 4;
  v36 = __src;
  v35 = a4;
  if (v9 >= v11 >> 4)
  {
    if (v10 >= -15)
    {
      if (a4 != a2 || &a2[16 * v12] <= a4)
        memmove(a4, a2, 16 * v12);
      v19 = &a4[16 * v12];
      v34 = v19;
      v36 = v5;
      if (v6 < v5 && v10 >= 16)
      {
        v20 = sub_10000CB40();
        v21 = (char *)(a3 - 16);
        v22 = v5;
        do
        {
          v23 = v21 + 16;
          v24 = *((_QWORD *)v19 - 1);
          v25 = *((_QWORD *)v22 - 2);
          v26 = *((_QWORD *)v22 - 1);
          v22 -= 16;
          v32 = *((_QWORD *)v19 - 2);
          v33 = v24;
          v30 = v25;
          v31 = v26;
          if (StringProtocol.localizedStandardCompare<A>(_:)(&v30, &type metadata for String, &type metadata for String, v20, v20) == -1)
          {
            if (v23 != v5 || v21 >= v5)
              *(_OWORD *)v21 = *(_OWORD *)v22;
            v36 = v22;
          }
          else
          {
            v34 = v19 - 16;
            if (v23 < v19 || v21 >= v19 || v23 != v19)
              *(_OWORD *)v21 = *((_OWORD *)v19 - 1);
            v22 = v5;
            v19 -= 16;
          }
          if (v22 <= v6)
            break;
          v21 -= 16;
          v5 = v22;
        }
        while (v19 > a4);
      }
      goto LABEL_43;
    }
  }
  else if (v7 >= -15)
  {
    v13 = a4;
    if (a4 != __src || &__src[16 * v9] <= a4)
      memmove(a4, __src, 16 * v9);
    v34 = &a4[16 * v9];
    if ((unint64_t)v5 < a3 && v7 >= 16)
    {
      v14 = sub_10000CB40();
      do
      {
        v15 = *((_QWORD *)v5 + 1);
        v16 = *(_QWORD *)v13;
        v17 = *((_QWORD *)v13 + 1);
        v32 = *(_QWORD *)v5;
        v33 = v15;
        v30 = v16;
        v31 = v17;
        if (StringProtocol.localizedStandardCompare<A>(_:)(&v30, &type metadata for String, &type metadata for String, v14, v14) == -1)
        {
          v18 = v5 + 16;
          if (v6 < v5 || v6 >= v18 || v6 != v5)
            *(_OWORD *)v6 = *(_OWORD *)v5;
        }
        else
        {
          if (v6 != v13)
            *(_OWORD *)v6 = *(_OWORD *)v13;
          v13 += 16;
          v35 = v13;
          v18 = v5;
        }
        v6 += 16;
        if (v13 >= &a4[16 * v9])
          break;
        v5 = v18;
      }
      while ((unint64_t)v18 < a3);
      v36 = v6;
    }
LABEL_43:
    sub_1000816D0((void **)&v36, (const void **)&v35, &v34);
    return 1;
  }
  v28 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v28, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100041BFC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100041C28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100041C38(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100041C48()
{
  return 32;
}

__n128 sub_100041C54(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100041C60(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  _QWORD v15[4];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v5 = type metadata accessor for Optional(0, v4);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v15 - v7;
  v16 = v3[10];
  v9 = v16;
  v17 = v4;
  v11 = v3[13];
  v18 = v3[12];
  v10 = v18;
  v19 = v11;
  KeyPath = swift_getKeyPath(&unk_10010C9B8);
  v15[0] = v9;
  v15[1] = v4;
  v15[2] = v10;
  v15[3] = v11;
  v13 = swift_getKeyPath(&unk_10010C9F0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  swift_retain(v1);
  return static Published.subscript.setter(v8, v1, KeyPath, v13);
}

uint64_t sub_100041D5C()
{
  return 32;
}

__n128 sub_100041D68(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100041D74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10003F9E8();
  *a1 = result;
  return result;
}

uint64_t sub_100041D9C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_bridgeObjectRetain(*a1);
  return sub_10003FA84(v1);
}

uint64_t sub_100041DC4()
{
  return 32;
}

__n128 sub_100041DD0(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100041DDC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000407B0(a1, v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]) & 1;
}

BOOL sub_100041E00(uint64_t a1)
{
  uint64_t v1;

  return sub_1000409C0(*(double *)(v1 + 48), *(double *)(v1 + 56), a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100041E24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10003FB24();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100041E4C(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  sub_100005FA0(*a1, v2);
  return sub_10003FBC0(v1, v2);
}

uint64_t sub_100041E8C()
{
  return 32;
}

__n128 sub_100041E98(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100041EA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  NSString v11;
  Class isa;
  Class v13;
  id v14;
  uint64_t v15;
  uint64_t v17;

  v0 = type metadata accessor for TimeZone(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003E70(&qword_10015D830);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v17 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))((char *)&v17 - v8, 1, 1, v0);
  v10 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "setDateFormat:", v11);

  sub_100010108((uint64_t)v9, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v7, 1, v0) == 1)
  {
    sub_100010150((uint64_t)v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v7, v0);
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v10, "setTimeZone:", isa);

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  sub_100010150((uint64_t)v9);
  v13 = Date._bridgeToObjectiveC()().super.isa;
  v14 = objc_msgSend(v10, "stringFromDate:", v13);

  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  return v15;
}

uint64_t sub_100042098@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[16];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t AssociatedTypeWitness;
  ValueMetadata *v49;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v37 = a2;
  v3 = sub_1000034AC(&qword_10015F008);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for Array(255, v4);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(v6 + 16);
  v47 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7);
  v49 = &type metadata for ArtistItem;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v4, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v8 = type metadata accessor for ForEach(255, &v47);
  v46 = sub_1000430D4();
  v9 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v8);
  v10 = type metadata accessor for HStack(255, v8, v9);
  v11 = type metadata accessor for ModifiedContent(255, v10, &type metadata for _PaddingLayout);
  v44 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v10);
  v45 = &protocol witness table for _PaddingLayout;
  v12 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v13 = type metadata accessor for ScrollView(255, v11, v12);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v3, v13, 0, 0);
  v15 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v16 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v15);
  v17 = type metadata accessor for VStack(0, v15, v16);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v34 - v19;
  v21 = type metadata accessor for ModifiedContent(0, v17, &type metadata for _PaddingLayout);
  v35 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v34 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v34 - v26;
  v28 = static HorizontalAlignment.leading.getter(v25);
  v39 = v4;
  v40 = v6;
  v41 = v36;
  v29 = VStack.init(alignment:spacing:content:)(v28, 0x4024000000000000, 0, sub_100043118, v38, v15, v16);
  v30 = static Edge.Set.vertical.getter(v29);
  v31 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v17);
  View.padding(_:_:)(v30, 0, 1, v17, v31);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v42 = v31;
  v43 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v21);
  sub_1000F257C((uint64_t)v24, v21, (uint64_t)v27);
  v32 = *(void (**)(char *, uint64_t))(v35 + 8);
  v32(v24, v21);
  sub_1000E3B88((uint64_t)v27, v21, v37);
  return ((uint64_t (*)(char *, uint64_t))v32)(v27, v21);
}

uint64_t sub_1000423DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84[16];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD v90[2];
  uint64_t v91;
  uint64_t AssociatedTypeWitness;
  ValueMetadata *v93;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  __int128 v96;
  __int128 v97;
  char v98;
  uint64_t v99;
  void *v100;
  unint64_t v101;

  v82 = a3;
  v83 = a4;
  v7 = type metadata accessor for Array(255, a2);
  v8 = *(_QWORD *)(a3 + 16);
  v81 = a2;
  v91 = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8);
  v93 = &type metadata for ArtistItem;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v9 = type metadata accessor for ForEach(255, &v91);
  v101 = sub_1000430D4();
  v10 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v9);
  v11 = type metadata accessor for HStack(255, v9, v10);
  v12 = type metadata accessor for ModifiedContent(255, v11, &type metadata for _PaddingLayout);
  v99 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v11);
  v100 = &protocol witness table for _PaddingLayout;
  v79 = v12;
  v78 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  v13 = type metadata accessor for ScrollView(0, v12, v78);
  v80 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v76 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v77 = (uint64_t)&v68 - v16;
  v75 = type metadata accessor for AccessibilityTraits(0);
  v74 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v73 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100003E70(&qword_10015F008);
  v18 = __chkstk_darwin(v72);
  v68 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v69 = (char *)&v68 - v21;
  __chkstk_darwin(v20);
  v70 = (uint64_t)&v68 - v22;
  v71 = a1;
  v24 = *(_QWORD *)(a1 + 8);
  v23 = *(_QWORD *)(a1 + 16);
  v25 = *(_QWORD *)(a1 + 32);
  v26 = *(_BYTE *)(a1 + 24) & 1;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v25);
  v27 = Text.init(_:tableName:bundle:comment:)(v24, v23, v26, v25, 0, 0, 0, 0, 0, 256);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v34 = static Font.Weight.bold.getter();
  v35 = Text.fontWeight(_:)(*(_QWORD *)&v34, 0, v27, v29, v33, v31);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  sub_10000BFF8(v27, v29, v33);
  v42 = swift_bridgeObjectRelease(v31);
  v43 = static Font.title2.getter(v42);
  v44 = Text.font(_:)(v43, v35, v37, v41, v39);
  v46 = v45;
  LOBYTE(v29) = v47;
  v49 = v48;
  swift_release(v43);
  sub_10000BFF8(v35, v37, v41);
  v50 = swift_bridgeObjectRelease(v39);
  v51 = static Edge.Set.leading.getter(v50);
  v91 = v44;
  AssociatedTypeWitness = v46;
  LOBYTE(v93) = v29 & 1;
  WitnessTable = v49;
  LOBYTE(AssociatedConformanceWitness) = v51;
  v96 = 0u;
  v97 = 0u;
  v98 = 1;
  v52 = sub_100003E70(&qword_10015F018);
  v53 = sub_100043124();
  v54 = (uint64_t)v68;
  View.accessibilityHeading(_:)(1, v52, v53);
  sub_10000BFF8(v44, v46, v29 & 1);
  v55 = swift_bridgeObjectRelease(v49);
  v56 = v73;
  static AccessibilityTraits.isHeader.getter(v55);
  v57 = (uint64_t)v69;
  v58 = v72;
  ModifiedContent<>.accessibility(addTraits:)(v56, v72);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v56, v75);
  sub_100043188(v54);
  v59 = v70;
  v60 = sub_1000431C8(v57, v70);
  v61 = static Axis.Set.horizontal.getter(v60);
  v85 = v81;
  v86 = v82;
  v87 = v71;
  v62 = (uint64_t)v76;
  ScrollView.init(_:showsIndicators:content:)(v61, 0, sub_100043210, v84, v79, v78);
  v63 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v13);
  v64 = v77;
  sub_1000F257C(v62, v13, v77);
  v65 = v80;
  v66 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
  v66(v62, v13);
  sub_10004321C(v59, v57);
  v91 = v57;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v62, v64, v13);
  AssociatedTypeWitness = v62;
  v90[0] = v58;
  v90[1] = v13;
  v88 = sub_100043264();
  v89 = v63;
  sub_1000E4768(&v91, 2uLL, (uint64_t)v90);
  v66(v64, v13);
  sub_100043188(v59);
  v66(v62, v13);
  return sub_100043188(v57);
}

uint64_t sub_1000429AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t AssociatedTypeWitness;
  ValueMetadata *v40;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v30 = a4;
  v7 = type metadata accessor for Array(255, a2);
  v8 = *(_QWORD *)(a3 + 16);
  v38 = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8);
  v40 = &type metadata for ArtistItem;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v9 = type metadata accessor for ForEach(255, &v38);
  v37 = sub_1000430D4();
  v10 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v9);
  v11 = type metadata accessor for HStack(0, v9, v10);
  v28 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - v12;
  v14 = type metadata accessor for ModifiedContent(0, v11, &type metadata for _PaddingLayout);
  v29 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v27 - v19;
  v32 = a2;
  v33 = a3;
  v34 = a1;
  v21 = static VerticalAlignment.center.getter(v18);
  v22 = HStack.init(alignment:spacing:content:)(v21, 0x4034000000000000, 0, sub_100043318, v31, v9, v10);
  v23 = static Edge.Set.horizontal.getter(v22);
  v24 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v11);
  View.padding(_:_:)(v23, 0, 1, v11, v24);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v11);
  v35 = v24;
  v36 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  sub_1000F257C((uint64_t)v17, v14, (uint64_t)v20);
  v25 = *(void (**)(char *, uint64_t))(v29 + 8);
  v25(v17, v14);
  sub_1000E3B88((uint64_t)v20, v14, v30);
  return ((uint64_t (*)(char *, uint64_t))v25)(v20, v14);
}

uint64_t sub_100042C38@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t WitnessTable;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[5];

  v25 = a3;
  v26 = a4;
  v7 = type metadata accessor for Array(255, a2);
  v8 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  v28[0] = v7;
  v28[1] = AssociatedTypeWitness;
  v28[2] = &type metadata for ArtistItem;
  v28[3] = WitnessTable;
  v28[4] = swift_getAssociatedConformanceWitness(v8, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v10 = type metadata accessor for ForEach(0, v28);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v23 - v15;
  v17 = *a1;
  v28[0] = v17;
  v18 = swift_allocObject(&unk_10014E400, 32, 7);
  v19 = v25;
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = v19;
  v20 = sub_1000430D4();
  swift_bridgeObjectRetain(v17);
  ForEach<>.init(_:content:)(v28, sub_100043334, v18, v7, AssociatedTypeWitness, &type metadata for ArtistItem, WitnessTable, v20, v8);
  v27 = v20;
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v10);
  sub_1000F257C((uint64_t)v14, v10, (uint64_t)v16);
  v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  v21(v14, v10);
  sub_1000E3B88((uint64_t)v16, v10, v26);
  return ((uint64_t (*)(char *, uint64_t))v21)(v16, v10);
}

__n128 sub_100042E30@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 v5;

  result = *a1;
  v3 = a1[1].n128_u64[0];
  v4 = a1[2].n128_u64[0];
  v5 = a1[1].n128_u8[8] & 1;
  *a2 = *a1;
  a2[1].n128_u64[0] = v3;
  a2[1].n128_u8[8] = v5;
  a2[2].n128_u64[0] = v4;
  return result;
}

uint64_t sub_100042E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_100042E60(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t sub_100042E90(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v6 = a2[4];
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *sub_100042EEC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t *sub_100042F70(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  v7 = a1[4];
  a1[4] = a2[4];
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareSheet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareSheet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for LineupModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LineupModule);
}

uint64_t sub_100043068(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100118F54, 1);
}

uint64_t sub_10004309C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100042098(a1, a2);
}

unint64_t sub_1000430D4()
{
  unint64_t result;

  result = qword_10015F010;
  if (!qword_10015F010)
  {
    result = swift_getWitnessTable(&unk_10010CB54, &type metadata for ArtistItem);
    atomic_store(result, (unint64_t *)&qword_10015F010);
  }
  return result;
}

uint64_t sub_100043118@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000423DC(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_100043124()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F020;
  if (!qword_10015F020)
  {
    v1 = sub_1000034AC(&qword_10015F018);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F020);
  }
  return result;
}

uint64_t sub_100043188(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003E70(&qword_10015F008);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000431C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015F008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100043210@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000429AC(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10004321C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015F008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100043264()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F028;
  if (!qword_10015F028)
  {
    v1 = sub_1000034AC(&qword_10015F008);
    sub_100043124();
    sub_1000432D0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F028);
  }
  return result;
}

unint64_t sub_1000432D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EA18;
  if (!qword_10015EA18)
  {
    v1 = type metadata accessor for AccessibilityAttachmentModifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AccessibilityAttachmentModifier, v1);
    atomic_store(result, (unint64_t *)&qword_10015EA18);
  }
  return result;
}

uint64_t sub_100043318@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100042C38(*(uint64_t **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100043324()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100043334@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v1 + 24) + 48))(*(_QWORD *)(v1 + 16));
  *a1 = result;
  a1[1] = v4;
  return result;
}

ValueMetadata *type metadata accessor for ArtistItem()
{
  return &type metadata for ArtistItem;
}

uint64_t sub_100043378(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  ValueMetadata *v20;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_1000034AC(&qword_10015F008);
  v4 = type metadata accessor for Array(255, v1);
  v5 = *(_QWORD *)(v2 + 16);
  v18 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5);
  v20 = &type metadata for ArtistItem;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v1, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v6 = type metadata accessor for ForEach(255, &v18);
  sub_1000430D4();
  v7 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v6);
  v8 = type metadata accessor for HStack(255, v6, v7);
  v9 = type metadata accessor for ModifiedContent(255, v8, &type metadata for _PaddingLayout);
  swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v8);
  v10 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
  v11 = type metadata accessor for ScrollView(255, v9, v10);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v3, v11, 0, 0);
  v13 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v13);
  v15 = type metadata accessor for VStack(255, v13, v14);
  v16 = type metadata accessor for ModifiedContent(255, v15, &type metadata for _PaddingLayout);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v15);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
}

uint64_t sub_100043568(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118F88, 1);
}

uint64_t sub_100043578@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  _QWORD v43[2];
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;

  if (qword_10015CE70 != -1)
    swift_once(&qword_10015CE70, sub_1000382F0);
  v6 = qword_10016F668;
  v41 = qword_10016F668;
  KeyPath = swift_getKeyPath(&unk_10010CBA8);
  swift_retain(v6);
  v8 = static Alignment.center.getter(v7);
  _FrameLayout.init(width:height:alignment:)(&v44, 0x4058000000000000, 0, 0x4058000000000000, 0, v8, v9);
  v40 = v44;
  v39 = v45;
  v38 = v46;
  v37 = v47;
  v35 = v49;
  v36 = v48;
  v43[0] = a1;
  v43[1] = a2;
  v10 = sub_10000CB40();
  swift_bridgeObjectRetain(a2);
  v11 = Text.init<A>(_:)(v43, &type metadata for String, v10);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = static Font.Weight.medium.getter(v11);
  v19 = Text.fontWeight(_:)(*(_QWORD *)&v18, 0, v11, v13, v17, v15);
  v21 = v20;
  v23 = v22;
  v25 = v24 & 1;
  sub_10000BFF8(v11, v13, v17);
  v26 = swift_bridgeObjectRelease(v15);
  v27 = static Font.subheadline.getter(v26);
  v28 = Text.font(_:)(v27, v19, v21, v25, v23);
  v30 = v29;
  LOBYTE(v6) = v31;
  v33 = v32;
  swift_release(v27);
  LOBYTE(v6) = v6 & 1;
  sub_10000BFF8(v19, v21, v25);
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)a3 = KeyPath;
  *(_QWORD *)(a3 + 8) = v41;
  *(_QWORD *)(a3 + 16) = v40;
  *(_BYTE *)(a3 + 24) = v39;
  *(_QWORD *)(a3 + 32) = v38;
  *(_BYTE *)(a3 + 40) = v37;
  *(_QWORD *)(a3 + 48) = v36;
  *(_QWORD *)(a3 + 56) = v35;
  *(_QWORD *)(a3 + 64) = v28;
  *(_QWORD *)(a3 + 72) = v30;
  *(_BYTE *)(a3 + 80) = v6;
  *(_QWORD *)(a3 + 88) = v33;
  swift_retain(KeyPath);
  swift_retain(v41);
  sub_10000C008(v28, v30, v6);
  swift_bridgeObjectRetain(v33);
  sub_10000BFF8(v28, v30, v6);
  swift_release(v41);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v33);
}

__n128 sub_1000437C0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __n128 v17;
  char v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;

  v5 = *v2;
  v4 = v2[1];
  v6 = static HorizontalAlignment.center.getter(a1);
  sub_100043578(v5, v4, (uint64_t)&v16);
  v7 = v16;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v23;
  v12 = v24;
  result = v17;
  v14 = v21;
  v15 = v22;
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = v7;
  *(__n128 *)(a2 + 32) = result;
  *(_BYTE *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 56) = v9;
  *(_BYTE *)(a2 + 64) = v10;
  *(_OWORD *)(a2 + 72) = v14;
  *(_OWORD *)(a2 + 88) = v15;
  *(_BYTE *)(a2 + 104) = v11;
  *(_QWORD *)(a2 + 112) = v12;
  return result;
}

unint64_t sub_100043864()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F030;
  if (!qword_10015F030)
  {
    v1 = sub_1000034AC(&qword_10015F038);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F030);
  }
  return result;
}

uint64_t sub_1000438BC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100043908(&qword_10015F040, (uint64_t)&protocol conformance descriptor for PromotionalAssets.Video);
  result = sub_100043908(&qword_10015F048, (uint64_t)&protocol conformance descriptor for PromotionalAssets.Video);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100043908(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for PromotionalAssets.Video(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

double sub_100043948()
{
  return 0.0;
}

uint64_t destroy for SongRowViewModel(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  result = swift_bridgeObjectRelease(a1[3]);
  if (a1[7])
    return sub_1000055A8(a1 + 4);
  return result;
}

uint64_t initializeWithCopy for SongRowViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2 + 32;
  v7 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v7;
    *(_QWORD *)(a1 + 64) = v8;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 32, v6, v7);
  }
  else
  {
    v9 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v6 + 32);
  }
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t assignWithCopy for SongRowViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 56) = v8;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 32, a2 + 32);
      goto LABEL_8;
    }
LABEL_7:
    v9 = *(_OWORD *)(a2 + 32);
    v10 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 32) = v9;
    *(_OWORD *)(a1 + 48) = v10;
    goto LABEL_8;
  }
  if (!v8)
  {
    sub_1000055A8((_QWORD *)(a1 + 32));
    goto LABEL_7;
  }
  sub_100043B0C((_QWORD *)(a1 + 32), (_QWORD *)(a2 + 32));
LABEL_8:
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

_QWORD *sub_100043B0C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for SongRowViewModel(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SongRowViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  if (*(_QWORD *)(a1 + 56))
    sub_1000055A8((_QWORD *)(a1 + 32));
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for SongRowViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SongRowViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SongRowViewModel()
{
  return &type metadata for SongRowViewModel;
}

uint64_t sub_100043DBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[3];

  KeyPath = swift_getKeyPath(&unk_10010CD80);
  v6[0] = v1;
  v4 = sub_100003B3C(&qword_10015F150, type metadata accessor for SetlistController, (uint64_t)&unk_10010CD38);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v6, KeyPath, v4);
  swift_release(KeyPath);
  swift_beginAccess(v1 + 72, v6, 0, 0);
  return sub_100045370(v1 + 72, a1);
}

uint64_t sub_100043E64@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010CD80);
  v7[0] = v3;
  v5 = sub_100003B3C(&qword_10015F150, type metadata accessor for SetlistController, (uint64_t)&unk_10010CD38);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 72, v7, 0, 0);
  return sub_100045370(v3 + 72, a2);
}

uint64_t sub_100043F0C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[6];
  uint64_t v8;
  _BYTE v9[40];

  sub_100045370(a1, (uint64_t)v9);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010CD80);
  v7[2] = v3;
  v7[3] = v9;
  v8 = v3;
  v5 = sub_100003B3C(&qword_10015F150, type metadata accessor for SetlistController, (uint64_t)&unk_10010CD38);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000453CC, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return sub_100008194((uint64_t)v9, &qword_10015F138);
}

uint64_t sub_100043FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + 72;
  swift_beginAccess(a1 + 72, v5, 33, 0);
  sub_100045328(a2, v3);
  return swift_endAccess(v5);
}

uint64_t sub_10004402C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10010CD58);
  v4 = v0;
  v2 = sub_100003B3C(&qword_10015F150, type metadata accessor for SetlistController, (uint64_t)&unk_10010CD38);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 112);
}

void sub_1000440B0(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010CD58);
  v6 = v3;
  v5 = sub_100003B3C(&qword_10015F150, type metadata accessor for SetlistController, (uint64_t)&unk_10010CD38);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 112);
}

double sub_10004413C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010CD58);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100003B3C(&qword_10015F150, type metadata accessor for SetlistController, (uint64_t)&unk_10010CD38);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000453B8, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_1000441E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1[27] = v0;
  v2 = sub_100003E70(&qword_10015F148);
  v1[28] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AppleMusicSetlist(0);
  v1[29] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[30] = v4;
  v1[31] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MainActor(0);
  v1[32] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v1[33] = v6;
  v1[34] = v7;
  return swift_task_switch(sub_10004429C, v6, v7);
}

uint64_t sub_10004429C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  _QWORD *v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t);
  uint64_t v63;

  v1 = *(_QWORD **)(v0 + 216);
  KeyPath = swift_getKeyPath(&unk_10010CD58);
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 24) = 1;
  *(_QWORD *)(v0 + 200) = v1;
  *(_QWORD *)(v0 + 280) = OBJC_IVAR____TtC16EventViewService17SetlistController___observationRegistrar;
  v4 = sub_100003B3C(&qword_10015F150, type metadata accessor for SetlistController, (uint64_t)&unk_10010CD38);
  *(_QWORD *)(v0 + 288) = v4;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 200, KeyPath, sub_100045234, v3, (char *)&type metadata for () + 8, v4);
  *(_QWORD *)(v0 + 296) = 0;
  swift_release(KeyPath);
  swift_task_dealloc(v3);
  v5 = v1[5];
  v6 = v1[6];
  sub_100008170(v1 + 2, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 240))(v5, v6);
  if (v7)
  {
    v8 = v7;
    v9 = (_QWORD *)(v0 + 56);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6);
    v11 = sub_100003E70(&qword_10015D4E0);
    v12 = _arrayForceCast<A, B>(_:)(v8, AssociatedTypeWitness, v11);
    swift_bridgeObjectRelease(v8);
    if (*(_QWORD *)(v12 + 16))
    {
      sub_1000081D0(v12 + 32, v0 + 56);
    }
    else
    {
      *(_QWORD *)(v0 + 88) = 0;
      *(_OWORD *)v9 = 0u;
      *(_OWORD *)(v0 + 72) = 0u;
    }
    swift_bridgeObjectRelease(v12);
    v13 = *(_QWORD *)(v0 + 80);
    if (v13)
    {
      v14 = *(_QWORD *)(v0 + 216);
      v15 = *(_QWORD *)(v0 + 88);
      sub_100008170(v9, *(_QWORD *)(v0 + 80));
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v13, v15);
      v18 = v17;
      *(_QWORD *)(v0 + 304) = v17;
      sub_1000055A8(v9);
      v19 = *(_QWORD *)(v14 + 56);
      v20 = *(_QWORD *)(v14 + 64);
      v21 = (_QWORD *)swift_task_alloc(dword_10015FB0C);
      *(_QWORD *)(v0 + 312) = v21;
      *v21 = v0;
      v21[1] = sub_1000448D4;
      return sub_100051284(*(_QWORD *)(v0 + 224), v16, v18, v19, v20);
    }
    sub_100008194(v0 + 56, &qword_10015D4D8);
  }
  v23 = *(_QWORD **)(v0 + 216);
  v24 = v23[5];
  v25 = v23[6];
  sub_100008170(v23 + 2, v24);
  v26 = *(void (**)(uint64_t, uint64_t))(v25 + 232);
  v27 = swift_getAssociatedTypeWitness(255, v25);
  v28 = type metadata accessor for Optional(0, v27);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = swift_task_alloc((*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v26(v24, v25);
  v31 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v30, 1, v27) == 1)
  {
    v32 = *(_QWORD *)(v0 + 256);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v28);
    swift_release(v32);
    swift_task_dealloc(v30);
    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v33 = *(_QWORD *)(v0 + 216);
    v34 = type metadata accessor for Logger(0);
    sub_100011AC4(v34, (uint64_t)qword_10016F728);
    swift_retain_n(v33, 2);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.debug.getter();
    v38 = os_log_type_enabled(v36, v37);
    v39 = *(_QWORD **)(v0 + 216);
    if (v38)
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v63 = v41;
      *(_DWORD *)v40 = 136315138;
      v42 = v39[5];
      v43 = v39[6];
      sub_100008170(v39 + 2, v42);
      v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 152))(v42, v43);
      v46 = v45;
      *(_QWORD *)(v0 + 176) = sub_1000C7684(v44, v45, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease(v46);
      swift_release_n(v39, 2);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "No set list items with eventID: %s", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      swift_release_n(*(_QWORD *)(v0 + 216), 2);
    }

    v56 = *(_QWORD *)(v0 + 288);
    v57 = *(_QWORD *)(v0 + 248);
    v59 = *(_QWORD *)(v0 + 216);
    v58 = *(_QWORD *)(v0 + 224);
    v60 = swift_getKeyPath(&unk_10010CD58);
    v61 = swift_task_alloc(32);
    *(_QWORD *)(v61 + 16) = v59;
    *(_BYTE *)(v61 + 24) = 0;
    *(_QWORD *)(v0 + 184) = v59;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 184, v60, sub_1000453B8, v61, (char *)&type metadata for () + 8, v56);
    swift_release(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 120) = v27;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v25, v24, v27, &unk_1001191E8, &unk_100119220);
    *(_QWORD *)(v0 + 128) = AssociatedConformanceWitness;
    v48 = sub_100007D80((_QWORD *)(v0 + 96));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v31 + 32))(v48, v30, v27);
    swift_task_dealloc(v30);
    v49 = *(_QWORD *)(v0 + 120);
    v50 = *(_QWORD *)(v0 + 128);
    sub_100008170((_QWORD *)(v0 + 96), v49);
    v51 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v49, v50);
    v52 = swift_getAssociatedTypeWitness(0, v50);
    v53 = sub_100003E70(&qword_10015D4E8);
    v54 = _arrayForceCast<A, B>(_:)(v51, v52, v53);
    *(_QWORD *)(v0 + 320) = v54;
    swift_bridgeObjectRelease(v51);
    sub_1000055A8((_QWORD *)(v0 + 96));
    v62 = (uint64_t (*)(uint64_t))((char *)&dword_10015FB70 + dword_10015FB70);
    v55 = (_QWORD *)swift_task_alloc(unk_10015FB74);
    *(_QWORD *)(v0 + 328) = v55;
    *v55 = v0;
    v55[1] = sub_100044E70;
    return v62(v54);
  }
}

uint64_t sub_1000448D4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 304);
  swift_task_dealloc(*(_QWORD *)(*v0 + 312));
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_100044928, *(_QWORD *)(v1 + 264), *(_QWORD *)(v1 + 272));
}

uint64_t sub_100044928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  _QWORD *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 224);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 240) + 48))(v2, 1, v1) == 1)
  {
    sub_100008194(v2, &qword_10015F148);
    v3 = *(_QWORD **)(v0 + 216);
    v4 = v3[5];
    v5 = v3[6];
    sub_100008170(v3 + 2, v4);
    v6 = *(void (**)(uint64_t, uint64_t))(v5 + 232);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5);
    v8 = type metadata accessor for Optional(0, AssociatedTypeWitness);
    v9 = *(_QWORD *)(v8 - 8);
    v10 = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    v6(v4, v5);
    v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) != 1)
    {
      *(_QWORD *)(v0 + 120) = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v4, AssociatedTypeWitness, &unk_1001191E8, &unk_100119220);
      *(_QWORD *)(v0 + 128) = AssociatedConformanceWitness;
      v34 = sub_100007D80((_QWORD *)(v0 + 96));
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 32))(v34, v10, AssociatedTypeWitness);
      swift_task_dealloc(v10);
      v35 = *(_QWORD *)(v0 + 120);
      v36 = *(_QWORD *)(v0 + 128);
      sub_100008170((_QWORD *)(v0 + 96), v35);
      v37 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v35, v36);
      v38 = swift_getAssociatedTypeWitness(0, v36);
      v39 = sub_100003E70(&qword_10015D4E8);
      v40 = _arrayForceCast<A, B>(_:)(v37, v38, v39);
      *(_QWORD *)(v0 + 320) = v40;
      swift_bridgeObjectRelease(v37);
      sub_1000055A8((_QWORD *)(v0 + 96));
      v49 = (uint64_t (*)(uint64_t))((char *)&dword_10015FB70 + dword_10015FB70);
      v41 = (_QWORD *)swift_task_alloc(unk_10015FB74);
      *(_QWORD *)(v0 + 328) = v41;
      *v41 = v0;
      v41[1] = sub_100044E70;
      return v49(v40);
    }
    v12 = *(_QWORD *)(v0 + 256);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
    swift_release(v12);
    swift_task_dealloc(v10);
    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v13 = *(_QWORD *)(v0 + 216);
    v14 = type metadata accessor for Logger(0);
    sub_100011AC4(v14, (uint64_t)qword_10016F728);
    swift_retain_n(v13, 2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.debug.getter();
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(_QWORD **)(v0 + 216);
    if (v18)
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v50 = v21;
      *(_DWORD *)v20 = 136315138;
      v22 = v19[5];
      v23 = v19[6];
      sub_100008170(v19 + 2, v22);
      v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 152))(v22, v23);
      v26 = v25;
      *(_QWORD *)(v0 + 176) = sub_1000C7684(v24, v25, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v26);
      swift_release_n(v19, 2);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "No set list items with eventID: %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      swift_release_n(*(_QWORD *)(v0 + 216), 2);
    }

  }
  else
  {
    v27 = *(_QWORD *)(v0 + 288);
    v28 = *(_QWORD *)(v0 + 248);
    v29 = *(_QWORD *)(v0 + 216);
    swift_release(*(_QWORD *)(v0 + 256));
    sub_100045264(v2, v28);
    *(_QWORD *)(v0 + 40) = v1;
    *(_QWORD *)(v0 + 48) = sub_100003B3C(&qword_10015F158, type metadata accessor for AppleMusicSetlist, (uint64_t)&unk_1001122B0);
    v30 = sub_100007D80((_QWORD *)(v0 + 16));
    sub_1000452A8(v28, (uint64_t)v30);
    KeyPath = swift_getKeyPath(&unk_10010CD80);
    v32 = swift_task_alloc(32);
    *(_QWORD *)(v32 + 16) = v29;
    *(_QWORD *)(v32 + 24) = v0 + 16;
    *(_QWORD *)(v0 + 208) = v29;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 208, KeyPath, sub_1000453CC, v32, (char *)&type metadata for () + 8, v27);
    swift_release(KeyPath);
    swift_task_dealloc(v32);
    sub_100008194(v0 + 16, &qword_10015F138);
    sub_1000452EC(v28);
  }
  v43 = *(_QWORD *)(v0 + 288);
  v44 = *(_QWORD *)(v0 + 248);
  v46 = *(_QWORD *)(v0 + 216);
  v45 = *(_QWORD *)(v0 + 224);
  v47 = swift_getKeyPath(&unk_10010CD58);
  v48 = swift_task_alloc(32);
  *(_QWORD *)(v48 + 16) = v46;
  *(_BYTE *)(v48 + 24) = 0;
  *(_QWORD *)(v0 + 184) = v46;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 184, v47, sub_1000453B8, v48, (char *)&type metadata for () + 8, v43);
  swift_release(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100044E70(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 320);
  v3 = *(_QWORD *)(*v1 + 328);
  *(_QWORD *)(*v1 + 336) = a1;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  return swift_task_switch(sub_100044ED0, *(_QWORD *)(v2 + 264), *(_QWORD *)(v2 + 272));
}

uint64_t sub_100044ED0()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 336);
  v21 = *(_QWORD *)(v0 + 288);
  v2 = *(int **)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 216);
  swift_release(*(_QWORD *)(v0 + 256));
  v4 = *(_QWORD *)(v3 + 56);
  v5 = *(_QWORD *)(v3 + 64);
  *(_QWORD *)(v0 + 160) = v2;
  *(_QWORD *)(v0 + 168) = sub_100003B3C(&qword_10015F158, type metadata accessor for AppleMusicSetlist, (uint64_t)&unk_1001122B0);
  v6 = sub_100007D80((_QWORD *)(v0 + 136));
  v7 = (char *)v6 + v2[6];
  v8 = type metadata accessor for Artwork(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (char *)v6 + v2[7];
  v10 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *v6 = v4;
  v6[1] = v5;
  v6[2] = v1;
  v11 = (_QWORD *)((char *)v6 + v2[8]);
  *v11 = 0;
  v11[1] = 0;
  KeyPath = swift_getKeyPath(&unk_10010CD80);
  v13 = swift_task_alloc(32);
  *(_QWORD *)(v13 + 16) = v3;
  *(_QWORD *)(v13 + 24) = v0 + 136;
  *(_QWORD *)(v0 + 192) = v3;
  swift_bridgeObjectRetain(v5);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 192, KeyPath, sub_10004524C, v13, (char *)&type metadata for () + 8, v21);
  swift_release(KeyPath);
  swift_task_dealloc(v13);
  sub_100008194(v0 + 136, &qword_10015F138);
  v14 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 248);
  v17 = *(_QWORD *)(v0 + 216);
  v16 = *(_QWORD *)(v0 + 224);
  v18 = swift_getKeyPath(&unk_10010CD58);
  v19 = swift_task_alloc(32);
  *(_QWORD *)(v19 + 16) = v17;
  *(_BYTE *)(v19 + 24) = 0;
  *(_QWORD *)(v0 + 184) = v17;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 184, v18, sub_1000453B8, v19, (char *)&type metadata for () + 8, v14);
  swift_release(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000450D4()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_1000055A8(v0 + 2);
  swift_bridgeObjectRelease(v0[8]);
  sub_100008194((uint64_t)(v0 + 9), &qword_10015F138);
  v1 = (char *)v0 + OBJC_IVAR____TtC16EventViewService17SetlistController___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100045144()
{
  return type metadata accessor for SetlistController(0);
}

uint64_t type metadata accessor for SetlistController(uint64_t a1)
{
  uint64_t result;

  result = qword_10015F080;
  if (!qword_10015F080)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SetlistController);
  return result;
}

uint64_t sub_100045188(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = "(";
  v4[2] = &unk_10010CCF0;
  v4[3] = &unk_10010CD08;
  v4[4] = &unk_10010CD20;
  v4[5] = &unk_10010CD20;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_100045234()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 112) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_10004524C()
{
  uint64_t v0;

  return sub_100043FCC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100045264(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppleMusicSetlist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000452A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppleMusicSetlist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000452EC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AppleMusicSetlist(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100045328(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015F138);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100045370(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015F138);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000453B8()
{
  sub_100045234();
}

uint64_t sub_1000453CC()
{
  return sub_10004524C();
}

void sub_1000453E0()
{
  id v0;
  id v1;
  uint64_t v2;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  v2 = 750;
  if (v1 == (id)1)
    v2 = 1410;
  qword_10016F678 = v2;
}

uint64_t destroy for ShareSheet(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  result = swift_bridgeObjectRelease(a1[2]);
  if (a1[3])
    return swift_release(a1[4]);
  return result;
}

_QWORD *initializeWithCopy for ShareSheet(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[2];
  a1[2] = v6;
  v8 = a2 + 3;
  v7 = a2[3];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (v7)
  {
    v9 = a2[4];
    a1[3] = v7;
    a1[4] = v9;
    swift_retain(v9);
  }
  else
  {
    *(_OWORD *)(a1 + 3) = *v8;
  }
  return a1;
}

_QWORD *assignWithCopy for ShareSheet(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  v8 = a1[2];
  v9 = a2[2];
  a1[2] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  v10 = a2[3];
  if (!a1[3])
  {
    if (v10)
    {
      v13 = a2[4];
      a1[3] = v10;
      a1[4] = v13;
      swift_retain(v13);
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    return a1;
  }
  if (!v10)
  {
    swift_release(a1[4]);
    goto LABEL_7;
  }
  v11 = a2[4];
  v12 = a1[4];
  a1[3] = v10;
  a1[4] = v11;
  swift_retain(v11);
  swift_release(v12);
  return a1;
}

_QWORD *assignWithTake for ShareSheet(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  if (!a1[3])
  {
    if (v6)
    {
      v9 = *(_QWORD *)(a2 + 32);
      a1[3] = v6;
      a1[4] = v9;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
    return a1;
  }
  if (!v6)
  {
    swift_release(a1[4]);
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(a2 + 32);
  v8 = a1[4];
  a1[3] = v6;
  a1[4] = v7;
  swift_release(v8);
  return a1;
}

ValueMetadata *type metadata accessor for ShareSheet()
{
  return &type metadata for ShareSheet;
}

unint64_t sub_100045694()
{
  unint64_t result;

  result = qword_10015F160;
  if (!qword_10015F160)
  {
    result = swift_getWitnessTable(&unk_10010CE34, &type metadata for ShareSheet);
    atomic_store(result, (unint64_t *)&qword_10015F160);
  }
  return result;
}

id sub_1000456D8()
{
  uint64_t *v0;
  uint64_t v1;
  NSArray v2;
  NSArray v3;
  id v4;
  Class isa;
  double v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v11[5];
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;

  v1 = *v0;
  sub_100007A98((uint64_t)(v0 + 1), (uint64_t)&v14, &qword_10015F170);
  swift_bridgeObjectRetain(v1);
  sub_100045AC4(&v14);
  v2.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v1);
  sub_100007A98((uint64_t)&v14, (uint64_t)&v15, &qword_10015F170);
  if (v15)
  {
    sub_100045B04();
    v3.super.isa = Array._bridgeToObjectiveC()().super.isa;
    sub_100045B40(&v14);
  }
  else
  {
    v3.super.isa = 0;
  }
  v4 = objc_msgSend(objc_allocWithZone((Class)UIActivityViewController), "initWithActivityItems:applicationActivities:", v2.super.isa, v3.super.isa);

  sub_100007A98((uint64_t)(v0 + 2), (uint64_t)v13, &qword_10015F178);
  sub_100007A98((uint64_t)v13, (uint64_t)&v16, &qword_10015F178);
  isa = v16;
  if (v16)
  {
    type metadata accessor for ActivityType(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
  }
  objc_msgSend(v4, "setExcludedActivityTypes:", isa);

  if (v0[3])
  {
    v7 = v0[4];
    v11[4] = v0[3];
    v12 = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_10004589C;
    v11[3] = &unk_10014E650;
    v8 = _Block_copy(v11);
    v9 = v12;
    swift_retain(v7);
    *(_QWORD *)&v6 = swift_release(v9).n128_u64[0];
  }
  else
  {
    v8 = 0;
  }
  objc_msgSend(v4, "setCompletionWithItemsHandler:", v8, v6);
  _Block_release(v8);
  return v4;
}

uint64_t sub_10004589C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  void (*v9)(void *, uint64_t, uint64_t, void *);
  uint64_t v10;
  id v11;
  id v12;

  v9 = *(void (**)(void *, uint64_t, uint64_t, void *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (a4)
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a4, (char *)&type metadata for Any + 8);
  else
    v10 = 0;
  swift_retain(v8);
  v11 = a2;
  v12 = a5;
  v9(a2, a3, v10, a5);
  swift_release(v8);

  return swift_bridgeObjectRelease(v10);
}

id sub_100045940()
{
  return sub_1000456D8();
}

uint64_t sub_100045984(uint64_t a1, char a2)
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)(a1, a2 & 1);
}

uint64_t sub_1000459BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100045A80();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100045A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100045A80();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100045A5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100045A80();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_100045A80()
{
  unint64_t result;

  result = qword_10015F168;
  if (!qword_10015F168)
  {
    result = swift_getWitnessTable(&unk_10010CDBC, &type metadata for ShareSheet);
    atomic_store(result, (unint64_t *)&qword_10015F168);
  }
  return result;
}

_QWORD *sub_100045AC4(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_100045AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100045AFC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100045B04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F180;
  if (!qword_10015F180)
  {
    v1 = objc_opt_self(UIActivity);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10015F180);
  }
  return result;
}

_QWORD *sub_100045B40(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

_QWORD *initializeWithCopy for CalendarIcon(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for CalendarIcon(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for CalendarIcon(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for CalendarIcon()
{
  return &type metadata for CalendarIcon;
}

uint64_t sub_100045C64(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100119138, 1);
}

uint64_t sub_100045C74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD v81[3];
  _OWORD v82[2];
  uint64_t v83;

  v73 = a2;
  *(_QWORD *)&v74 = a3;
  v72 = a1;
  v80 = a5;
  v6 = sub_100003E70(&qword_10015DF58);
  __chkstk_darwin(v6);
  v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100003E70(&qword_10015E338);
  __chkstk_darwin(v76);
  v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RoundedRectangle(0);
  v71 = v11;
  __chkstk_darwin(v11);
  v13 = (_OWORD *)((char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v75 = sub_100003E70(&qword_10015E9B8);
  __chkstk_darwin(v75);
  v15 = (uint64_t *)((char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v79 = sub_100003E70(&qword_10015E9C0);
  __chkstk_darwin(v79);
  v78 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003E70(&qword_10015F188);
  __chkstk_darwin(v17);
  v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003E70(&qword_10015F190);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = v23;
  *(_QWORD *)v19 = static HorizontalAlignment.center.getter(v21);
  *((_QWORD *)v19 + 1) = 0;
  v19[16] = 0;
  v24 = sub_100003E70(&qword_10015F198);
  v25 = sub_1000461AC(v72, v73, v74, a4, (uint64_t)&v19[*(int *)(v24 + 44)]);
  v26 = static Alignment.center.getter(v25);
  _FrameLayout.init(width:height:alignment:)(v81, 0x4044000000000000, 0, 0x4044000000000000, 0, v26, v27);
  sub_100007ADC((uint64_t)v19, (uint64_t)v23, &qword_10015F188);
  v28 = &v23[*(int *)(v20 + 36)];
  v29 = v81[1];
  *(_OWORD *)v28 = v81[0];
  *((_OWORD *)v28 + 1) = v29;
  *((_OWORD *)v28 + 2) = v81[2];
  v30 = sub_100008194((uint64_t)v19, &qword_10015F188);
  v31 = static Color.white.getter(v30);
  KeyPath = swift_getKeyPath(&unk_10010CEF0);
  v33 = (char *)v13 + *(int *)(v11 + 20);
  v34 = enum case for RoundedCornerStyle.continuous(_:);
  v35 = type metadata accessor for RoundedCornerStyle(0);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104);
  v36(v33, v34, v35);
  __asm { FMOV            V0.2D, #9.0 }
  v74 = _Q0;
  *v13 = _Q0;
  sub_10001BF60((uint64_t)v13, (uint64_t)v10);
  *(_WORD *)&v10[*(int *)(v76 + 36)] = 256;
  sub_100007ADC((uint64_t)v10, (uint64_t)v15 + *(int *)(v75 + 36), &qword_10015E338);
  *v15 = KeyPath;
  v15[1] = v31;
  swift_retain(KeyPath);
  swift_retain(v31);
  sub_100008194((uint64_t)v10, &qword_10015E338);
  sub_10001BFA4((uint64_t)v13);
  swift_release(v31);
  v42 = swift_release(KeyPath);
  v43 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v36)((char *)v13 + *(int *)(v71 + 20), v34, v35, v42);
  *v13 = v74;
  v44 = static Color.primary.getter(v43);
  v45 = Color.opacity(_:)(0.1);
  swift_release(v44);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v82, 0, 0, &_swiftEmptyArrayStorage, 0.5, 10.0, 0.0);
  sub_10001BF60((uint64_t)v13, (uint64_t)v8);
  v46 = &v8[*(int *)(sub_100003E70(&qword_10015DF60) + 36)];
  v47 = v82[1];
  *(_OWORD *)v46 = v82[0];
  *((_OWORD *)v46 + 1) = v47;
  *((_QWORD *)v46 + 4) = v83;
  v48 = sub_100003E70(&qword_10015DF68);
  *(_QWORD *)&v8[*(int *)(v48 + 52)] = v45;
  *(_WORD *)&v8[*(int *)(v48 + 56)] = 256;
  v49 = static Alignment.center.getter(v48);
  v51 = v50;
  v52 = (uint64_t *)&v8[*(int *)(sub_100003E70(&qword_10015DF70) + 36)];
  *v52 = v49;
  v52[1] = v51;
  v53 = sub_10001BFA4((uint64_t)v13);
  v54 = static Alignment.center.getter(v53);
  v56 = v55;
  v57 = (uint64_t)v78;
  v58 = (uint64_t)&v78[*(int *)(v79 + 36)];
  sub_100007ADC((uint64_t)v8, v58, &qword_10015DF58);
  v59 = (uint64_t *)(v58 + *(int *)(sub_100003E70(&qword_10015E9C8) + 36));
  *v59 = v54;
  v59[1] = v56;
  sub_100007ADC((uint64_t)v15, v57, &qword_10015E9B8);
  sub_100008194((uint64_t)v8, &qword_10015DF58);
  v60 = sub_100008194((uint64_t)v15, &qword_10015E9B8);
  v61 = static Alignment.center.getter(v60);
  v63 = v62;
  v64 = sub_100003E70(&qword_10015F1A0);
  v65 = v80;
  v66 = v80 + *(int *)(v64 + 36);
  sub_100007ADC(v57, v66, &qword_10015E9C0);
  v67 = (uint64_t *)(v66 + *(int *)(sub_100003E70(&qword_10015E9B0) + 36));
  *v67 = v61;
  v67[1] = v63;
  v68 = (uint64_t)v77;
  sub_100007ADC((uint64_t)v77, v65, &qword_10015F190);
  sub_100008194(v57, &qword_10015E9C0);
  return sub_100008194(v68, &qword_10015F190);
}

uint64_t sub_1000461AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v90 = a3;
  v91 = a4;
  v93 = a5;
  v83 = sub_100003E70(&qword_10015E8E8);
  __chkstk_darwin(v83);
  v8 = (uint64_t *)((char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100003E70(&qword_10015E8F0);
  __chkstk_darwin(v9);
  v11 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100003E70(&qword_10015E8F8);
  __chkstk_darwin(v82);
  v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100003E70(&qword_10015F1A8);
  __chkstk_darwin(v84);
  v85 = (uint64_t)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100003E70(&qword_10015F1B0);
  __chkstk_darwin(v86);
  v89 = (uint64_t)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100003E70(&qword_10015F1B8);
  v16 = __chkstk_darwin(v87);
  v92 = (uint64_t)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v94 = (uint64_t)&v82 - v18;
  v95 = a1;
  v96 = a2;
  v19 = sub_10000CB40();
  swift_bridgeObjectRetain(a2);
  v88 = v19;
  v20 = Text.init<A>(_:)(&v95, &type metadata for String, v19);
  v22 = v21;
  v24 = v23;
  v26 = v25 & 1;
  v27 = enum case for Text.Case.uppercase(_:);
  v28 = type metadata accessor for Text.Case(0);
  v29 = *(_QWORD *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 104))(v11, v27, v28);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v11, 0, 1, v28);
  KeyPath = swift_getKeyPath(&unk_10010CF20);
  sub_100007ADC((uint64_t)v11, (uint64_t)v8 + *(int *)(v83 + 28), &qword_10015E8F0);
  *v8 = KeyPath;
  sub_100007ADC((uint64_t)v8, (uint64_t)&v13[*(int *)(v82 + 36)], &qword_10015E8E8);
  *(_QWORD *)v13 = v20;
  *((_QWORD *)v13 + 1) = v22;
  v13[16] = v26;
  *((_QWORD *)v13 + 3) = v24;
  sub_10000C008(v20, v22, v26);
  swift_bridgeObjectRetain(v24);
  sub_100008194((uint64_t)v8, &qword_10015E8E8);
  sub_100008194((uint64_t)v11, &qword_10015E8F0);
  sub_10000BFF8(v20, v22, v26);
  swift_bridgeObjectRelease(v24);
  if (qword_10015CEA0 != -1)
    swift_once(&qword_10015CEA0, sub_10009F200);
  v31 = qword_10016F6A8;
  static Font.Weight.bold.getter();
  v32 = Font.weight(_:)(v31);
  v33 = swift_getKeyPath(&unk_10010CF50);
  v34 = v85;
  sub_100007ADC((uint64_t)v13, v85, &qword_10015E8F8);
  v35 = (uint64_t *)(v34 + *(int *)(v84 + 36));
  *v35 = v33;
  v35[1] = v32;
  sub_100008194((uint64_t)v13, &qword_10015E8F8);
  v36 = v34;
  if (qword_10015CE40 != -1)
    swift_once(&qword_10015CE40, sub_1000381F4);
  v37 = qword_10016F638;
  v38 = swift_getKeyPath(&unk_10010CEF0);
  v39 = v34;
  v40 = v89;
  sub_100007ADC(v39, v89, &qword_10015F1A8);
  v41 = (uint64_t *)(v40 + *(int *)(v86 + 36));
  *v41 = v38;
  v41[1] = v37;
  swift_retain(v37);
  v42 = sub_100008194(v36, &qword_10015F1A8);
  LOBYTE(v37) = static Edge.Set.top.getter(v42);
  v43 = EdgeInsets.init(_all:)(2.0);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  v50 = v92;
  sub_100007ADC(v40, v92, &qword_10015F1B0);
  v51 = v50 + *(int *)(v87 + 36);
  *(_BYTE *)v51 = v37;
  *(double *)(v51 + 8) = v43;
  *(_QWORD *)(v51 + 16) = v45;
  *(_QWORD *)(v51 + 24) = v47;
  *(_QWORD *)(v51 + 32) = v49;
  *(_BYTE *)(v51 + 40) = 0;
  sub_100008194(v40, &qword_10015F1B0);
  sub_10004680C(v50, v94);
  v95 = v90;
  v96 = v91;
  swift_bridgeObjectRetain(v91);
  v52 = Text.init<A>(_:)(&v95, &type metadata for String, v88);
  v54 = v53;
  v56 = v55;
  v58 = v57;
  if (qword_10015CEA8 != -1)
    swift_once(&qword_10015CEA8, sub_10009F210);
  v59 = v56 & 1;
  v60 = qword_10016F6B0;
  static Font.Weight.light.getter();
  v61 = Font.weight(_:)(v60);
  v62 = Text.font(_:)(v61, v52, v54, v59, v58);
  v64 = v63;
  v66 = v65;
  v68 = v67;
  swift_release(v61);
  LOBYTE(v61) = v66 & 1;
  sub_10000BFF8(v52, v54, v59);
  v69 = swift_bridgeObjectRelease(v58);
  v70 = static Color.black.getter(v69);
  v71 = Text.foregroundColor(_:)(v70, v62, v64, v66 & 1, v68);
  v73 = v72;
  v75 = v74;
  v77 = v76;
  swift_release(v70);
  sub_10000BFF8(v62, v64, v61);
  swift_bridgeObjectRelease(v68);
  v78 = v94;
  sub_100007ADC(v94, v50, &qword_10015F1B8);
  v79 = v93;
  sub_100007ADC(v50, v93, &qword_10015F1B8);
  v80 = v79 + *(int *)(sub_100003E70(&qword_10015F1C0) + 48);
  *(_QWORD *)v80 = v71;
  *(_QWORD *)(v80 + 8) = v73;
  *(_BYTE *)(v80 + 16) = v75 & 1;
  *(_QWORD *)(v80 + 24) = v77;
  sub_10000C008(v71, v73, v75 & 1);
  swift_bridgeObjectRetain(v77);
  sub_100008194(v78, &qword_10015F1B8);
  sub_10000BFF8(v71, v73, v75 & 1);
  swift_bridgeObjectRelease(v77);
  return sub_100008194(v50, &qword_10015F1B8);
}

uint64_t sub_1000467E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100045C74(*v1, v1[1], v1[2], v1[3], a1);
}

uint64_t sub_10004680C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015F1B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100046858()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F1C8;
  if (!qword_10015F1C8)
  {
    v1 = sub_1000034AC(&qword_10015F1A0);
    sub_1000468DC();
    sub_100007D40(&qword_10015EA08, &qword_10015E9B0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F1C8);
  }
  return result;
}

unint64_t sub_1000468DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F1D0;
  if (!qword_10015F1D0)
  {
    v1 = sub_1000034AC(&qword_10015F190);
    sub_100007D40(&qword_10015F1D8, &qword_10015F188, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F1D0);
  }
  return result;
}

uint64_t sub_100046960()
{
  return sub_100003B3C(&qword_10015F1E0, (uint64_t (*)(uint64_t))&type metadata accessor for Genre, (uint64_t)&unk_100113060);
}

uint64_t sub_10004698C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011930C, 1);
}

uint64_t sub_10004699C()
{
  return sub_100003B3C(&qword_10015F1E8, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist, (uint64_t)&unk_10010C880);
}

uint64_t sub_1000469C8()
{
  return sub_100003B3C((unint64_t *)&qword_10015F1F0, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets, (uint64_t)&unk_10010FB20);
}

uint64_t sub_1000469F4()
{
  return sub_100003B3C(&qword_10015F1F8, (uint64_t (*)(uint64_t))&type metadata accessor for Setlist, (uint64_t)&unk_10010AB8C);
}

uint64_t sub_100046A20()
{
  return sub_100003B3C(&qword_10015F200, (uint64_t (*)(uint64_t))&type metadata accessor for Ticket, (uint64_t)&unk_10010BE10);
}

_UNKNOWN **sub_100046A4C()
{
  return &off_10014CF50;
}

uint64_t sub_100046A58()
{
  return sub_100003B3C(&qword_10015F208, (uint64_t (*)(uint64_t))&type metadata accessor for Venue, (uint64_t)&unk_10010FBA0);
}

uint64_t sub_100046A84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for Date(0);
  v27 = *(_QWORD *)(v4 - 8);
  v28 = v4;
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v25 - v8;
  v26 = type metadata accessor for DateInterval(0);
  v10 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a2);
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v16 = (char *)&v25 - v15;
  (*(void (**)(uint64_t, uint64_t))(a2 + 200))(a1, a2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, &unk_1001191E8, &unk_100119230);
  sub_10000F1E0(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v12);
  v18 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  DateInterval.end.getter(v18);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v26);
  static Date.now.getter(v19);
  v20 = static Date.< infix(_:_:)(v9, v7);
  v21 = *(void (**)(char *, uint64_t))(v27 + 8);
  v22 = v7;
  v23 = v28;
  v21(v22, v28);
  v21(v9, v23);
  return v20 & 1;
}

uint64_t sub_100046C6C(uint64_t a1)
{
  return Event<>.tickets.getter(a1, &protocol witness table for LiveMusic);
}

uint64_t sub_100046C7C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003B3C(&qword_10015D4C0, (uint64_t (*)(uint64_t))&type metadata accessor for LiveMusic, (uint64_t)&protocol conformance descriptor for LiveMusic);
  return Event<>.participants.getter(a1, v2);
}

uint64_t sub_100046CCC(uint64_t a1)
{
  return Event<>.venues.getter(a1, &protocol witness table for LiveMusic);
}

uint64_t sub_100046CE4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100007D40(&qword_10015F310, &qword_10015D4B8, (uint64_t)&protocol conformance descriptor for Event<A>);
  result = sub_100007D40(&qword_10015F318, &qword_10015D4B8, (uint64_t)&protocol conformance descriptor for Event<A>);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100046D40()
{
  return sub_100007D40(&qword_10015F320, &qword_10015D4A8, (uint64_t)&unk_10010E980);
}

uint64_t destroy for GenericErrorView(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for GenericErrorView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for GenericErrorView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

__n128 initializeWithTake for GenericErrorView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for GenericErrorView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericErrorView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericErrorView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericErrorView()
{
  return &type metadata for GenericErrorView;
}

uint64_t sub_100046FF4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011935C, 1);
}

uint64_t sub_100047004@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  int v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63[16];

  v4 = *a1;
  v5 = a1[1];
  v6 = *((unsigned __int8 *)a1 + 16);
  v7 = a1[3];
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  v8 = Text.init(_:tableName:bundle:comment:)(v4, v5, v6, v7, 0, 0, 0, 0, 0, 256);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = static Font.title.getter();
  static Font.Weight.bold.getter();
  v16 = Font.weight(_:)(v15);
  swift_release(v15);
  v17 = Text.font(_:)(v16, v8, v10, v14, v12);
  v19 = v18;
  v21 = v20;
  v58 = v22;
  swift_release(v16);
  sub_10000BFF8(v8, v10, v14);
  swift_bridgeObjectRelease(v12);
  if (qword_10015CE58 != -1)
    swift_once(&qword_10015CE58, sub_1000382B4);
  v23 = qword_10016F650;
  *(_QWORD *)v63 = qword_10016F650;
  swift_retain(qword_10016F650);
  v24 = Text.foregroundStyle<A>(_:)(v63, v17, v19, v21 & 1, v58, &type metadata for Color, &protocol witness table for Color);
  v60 = v25;
  v61 = v24;
  v62 = v26;
  v59 = v27 & 1;
  sub_10000BFF8(v17, v19, v21 & 1);
  swift_release(v23);
  swift_bridgeObjectRelease(v58);
  v28 = a1[4];
  v29 = a1[5];
  v30 = *((unsigned __int8 *)a1 + 48);
  v31 = a1[7];
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v31);
  LOWORD(v57) = 256;
  v32 = Text.init(_:tableName:bundle:comment:)(v28, v29, v30, v31, 0, 0, 0, 0, 0, v57);
  v34 = v33;
  v36 = v35;
  v38 = v37 & 1;
  v39 = static Font.subheadline.getter(v32);
  static Font.Weight.regular.getter();
  v40 = Font.weight(_:)(v39);
  swift_release(v39);
  v41 = Text.font(_:)(v40, v32, v34, v38, v36);
  v43 = v42;
  v45 = v44;
  v47 = v46;
  swift_release(v40);
  v48 = v45 & 1;
  sub_10000BFF8(v32, v34, v38);
  swift_bridgeObjectRelease(v36);
  v49 = qword_10016F650;
  *(_QWORD *)v63 = qword_10016F650;
  swift_retain(qword_10016F650);
  v50 = Text.foregroundStyle<A>(_:)(v63, v41, v43, v48, v47, &type metadata for Color, &protocol witness table for Color);
  v52 = v51;
  v54 = v53;
  LOBYTE(v38) = v55 & 1;
  sub_10000BFF8(v41, v43, v48);
  swift_release(v49);
  swift_bridgeObjectRelease(v47);
  v63[0] = v59;
  *(_QWORD *)a2 = v61;
  *(_QWORD *)(a2 + 8) = v60;
  *(_BYTE *)(a2 + 16) = v59;
  *(_QWORD *)(a2 + 24) = v62;
  *(_QWORD *)(a2 + 32) = v50;
  *(_QWORD *)(a2 + 40) = v52;
  *(_BYTE *)(a2 + 48) = v38;
  *(_QWORD *)(a2 + 56) = v54;
  sub_10000C008(v61, v60, v59);
  swift_bridgeObjectRetain(v62);
  sub_10000C008(v50, v52, v38);
  swift_bridgeObjectRetain(v54);
  sub_10000BFF8(v50, v52, v38);
  swift_bridgeObjectRelease(v54);
  sub_10000BFF8(v61, v60, v63[0]);
  return swift_bridgeObjectRelease(v62);
}

__n128 sub_100047364@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;
  __n128 v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  _OWORD v19[4];

  v4 = v2[1];
  v19[0] = *v2;
  v19[1] = v4;
  v5 = v2[3];
  v19[2] = v2[2];
  v19[3] = v5;
  v6 = static HorizontalAlignment.center.getter(a1);
  sub_100047004((uint64_t *)v19, (uint64_t)&v13);
  v7 = v14;
  v8 = v15;
  v9 = v17;
  v10 = v18;
  result = v13;
  v12 = v16;
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = 0x4018000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  *(__n128 *)(a2 + 24) = result;
  *(_BYTE *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  *(_OWORD *)(a2 + 56) = v12;
  *(_BYTE *)(a2 + 72) = v9;
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

unint64_t sub_1000473EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F328;
  if (!qword_10015F328)
  {
    v1 = sub_1000034AC(&qword_10015F330);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F328);
  }
  return result;
}

void sub_100047438()
{
  qword_10015F338 = 0x7473696C70;
  unk_10015F340 = 0xE500000000000000;
}

unint64_t sub_100047458(char a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  unint64_t v13;
  NSString v14;
  NSString v15;
  id v16;
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  Class isa;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v44;
  _QWORD v45[3];
  char v46[8];
  uint64_t v47;
  uint64_t v48;
  id v49[4];

  v2 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v2);
  v4 = (char *)&v45[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v45[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v45[-1] - v10;
  v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if (a1)
  {
    if (a1 == 1)
      v13 = 0x8000000100116100;
    else
      v13 = 0x80000001001160E0;
  }
  else
  {
    v13 = 0x8000000100116120;
  }
  v44 = v11;
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  if (qword_10015CE80 != -1)
    swift_once(&qword_10015CE80, sub_100047438);
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v12, "URLForResource:withExtension:", v14, v15);

  if (!v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_22;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v16);

  v17 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v17(v4, v9, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_22:
    sub_100008194((uint64_t)v4, &qword_100165370);
    return sub_10010293C((uint64_t)&_swiftEmptyArrayStorage);
  }
  v18 = v44;
  v17(v44, v4, v5);
  v28 = Data.init(contentsOf:options:)(v18, 0);
  v30 = v29;
  v31 = (void *)objc_opt_self(NSPropertyListSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v49[0] = 0;
  v33 = objc_msgSend(v31, "propertyListWithData:options:format:error:", isa, 0, 0, v49);

  v34 = v49[0];
  if (v33)
  {
    v35 = v49[0];
    _bridgeAnyObjectToAny(_:)(v49);
    swift_unknownObjectRelease(v33);
    v36 = sub_100003E70(qword_10015F348);
    if (swift_dynamicCast(&v47, v49, (char *)&type metadata for Any + 8, v36, 6))
      v27 = v47;
    else
      v27 = sub_10010293C((uint64_t)&_swiftEmptyArrayStorage);
    sub_10003653C(v28, v30);
  }
  else
  {
    v37 = v49[0];
    v38 = _convertNSErrorToError(_:)(v34);

    swift_willThrow(v39);
    sub_10003653C(v28, v30);
    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v19 = type metadata accessor for Logger(0);
    sub_100011AC4(v19, (uint64_t)qword_10016F728);
    swift_errorRetain(v38);
    v20 = swift_errorRetain(v38);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(22, -1);
      v24 = (void *)swift_slowAlloc(64, -1);
      v49[0] = v24;
      *(_DWORD *)v23 = 136315394;
      if (a1)
      {
        if (a1 == 1)
          v25 = 0xD000000000000019;
        else
          v25 = 0xD000000000000014;
        if (a1 == 1)
          v26 = 0x8000000100116100;
        else
          v26 = 0x80000001001160E0;
      }
      else
      {
        v25 = 0xD000000000000016;
        v26 = 0x8000000100116120;
      }
      v47 = sub_1000C7684(v25, v26, (uint64_t *)v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v23 + 12) = 2080;
      swift_getErrorValue(v38, v46, v45);
      v40 = Error.localizedDescription.getter(v45[1], v45[2]);
      v42 = v41;
      v47 = sub_1000C7684(v40, v41, (uint64_t *)v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v23 + 14, v23 + 22);
      swift_bridgeObjectRelease(v42);
      swift_errorRelease(v38);
      swift_errorRelease(v38);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error fetching allow list for %s %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      swift_errorRelease(v38);
      v18 = v44;
    }
    else
    {
      swift_errorRelease(v38);
      swift_errorRelease(v38);
      swift_errorRelease(v38);

    }
    v27 = sub_10010293C((uint64_t)&_swiftEmptyArrayStorage);
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v5);
  return v27;
}

unint64_t sub_100047A5C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v4 = sub_100047458(2);
  if (!*(_QWORD *)(v4 + 16) || (v5 = sub_100090568(0xD000000000000032, 0x80000001001160A0), (v6 & 1) == 0))
  {
    v14 = 0u;
    v15 = 0u;
    swift_bridgeObjectRelease(v4);
    goto LABEL_10;
  }
  sub_100036668(*(_QWORD *)(v4 + 56) + 32 * v5, (uint64_t)&v14);
  swift_bridgeObjectRelease(v4);
  if (!*((_QWORD *)&v15 + 1))
  {
LABEL_10:
    sub_100008194((uint64_t)&v14, (uint64_t *)&unk_100161740);
LABEL_11:
    v14 = 0u;
    v15 = 0u;
LABEL_12:
    sub_100008194((uint64_t)&v14, (uint64_t *)&unk_100161740);
    return sub_10010293C((uint64_t)&_swiftEmptyArrayStorage);
  }
  v7 = sub_100003E70(qword_10015F348);
  if ((swift_dynamicCast(&v13, &v14, (char *)&type metadata for Any + 8, v7, 6) & 1) == 0)
    goto LABEL_11;
  v8 = v13;
  if (!v13)
    goto LABEL_11;
  if (*(_QWORD *)(v13 + 16))
  {
    swift_bridgeObjectRetain(a2);
    v9 = sub_100090568(a1, a2);
    if ((v10 & 1) != 0)
    {
      sub_100036668(*(_QWORD *)(v8 + 56) + 32 * v9, (uint64_t)&v14);
    }
    else
    {
      v14 = 0u;
      v15 = 0u;
    }
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
  }
  swift_bridgeObjectRelease(v8);
  if (!*((_QWORD *)&v15 + 1))
    goto LABEL_12;
  v12 = sub_100003E70(qword_10015F348);
  if (swift_dynamicCast(&v13, &v14, (char *)&type metadata for Any + 8, v12, 6))
    return v13;
  return sub_10010293C((uint64_t)&_swiftEmptyArrayStorage);
}

uint64_t sub_100047BEC(uint64_t a1)
{
  void *v2;

  v2 = &unk_10010D0F8;
  return swift_initClassMetadata2(a1, 0, 1, &v2, qword_10016F680 + a1 + 16);
}

uint64_t sub_100047C38(uint64_t a1)
{
  objc_class *v1;
  objc_class *v2;
  id v4;
  uint64_t v5;

  v2 = v1;
  v4 = objc_allocWithZone(v1);
  v5 = sub_10004805C(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)((char *)v2 + qword_10016F680) - 8) + 8))(a1);
  return v5;
}

uint64_t sub_100047C98()
{
  _QWORD *v0;

  return swift_unknownObjectWeakLoadStrong((char *)v0 + *(_QWORD *)(qword_10016F680 + (swift_isaMask & *v0) + 16));
}

uint64_t sub_100047CE4(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v6;
  uint64_t result;
  uint64_t v8;
  objc_super v9;

  v6 = (objc_class *)type metadata accessor for RemoteHostingController(0, *(_QWORD *)((swift_isaMask & *v4) + qword_10016F680), *(_QWORD *)((swift_isaMask & *v4) + qword_10016F680 + 8), a4);
  v9.receiver = v4;
  v9.super_class = v6;
  objc_msgSendSuper2(&v9, "viewDidDisappear:", a1 & 1);
  result = swift_unknownObjectWeakLoadStrong((char *)v4 + *(_QWORD *)(qword_10016F680 + (swift_isaMask & *v4) + 16));
  if (result)
  {
    v8 = result;
    sub_100035F1C();
    return swift_unknownObjectRelease(v8);
  }
  return result;
}

void sub_100047D88(void *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;

  v6 = a1;
  sub_100047CE4(a3, (uint64_t)v6, v4, v5);

}

void *sub_100047DC8(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return sub_100047E08(a1, a2);
}

void *sub_100047E08(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void (*v12)(uint64_t, uint64_t);
  id v13;
  uint64_t v15;

  v5 = (uint64_t *)((swift_isaMask & *v2) + qword_10016F680);
  v6 = *v5;
  v7 = *(_QWORD *)(*v5 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v15 - v8;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v10 + 16) + 8) = 0;
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  v11 = (void *)UIHostingController.init(coder:rootView:)(a1, v9);
  v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v13 = v11;
  v12(a2, v6);
  if (v11)

  return v11;
}

id sub_100047EE4(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  id v6;
  objc_super v8;

  v3 = swift_isaMask & *v1;
  *(_QWORD *)((char *)v1 + *(_QWORD *)(qword_10016F680 + v3 + 16) + 8) = 0;
  swift_unknownObjectWeakInit();
  v5 = (objc_class *)type metadata accessor for RemoteHostingController(0, *(_QWORD *)(v3 + qword_10016F680), *(_QWORD *)(v3 + qword_10016F680 + 8), v4);
  v8.receiver = v1;
  v8.super_class = v5;
  v6 = objc_msgSendSuper2(&v8, "initWithCoder:", a1);

  return v6;
}

id sub_100047F7C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100047EE4(a3);
}

uint64_t sub_100047FA0()
{
  _QWORD *v0;

  return sub_100048108((uint64_t)v0 + *(_QWORD *)(qword_10016F680 + (swift_isaMask & *v0) + 16));
}

id sub_100047FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for RemoteHostingController(0, *(_QWORD *)((swift_isaMask & *v4) + qword_10016F680), *(_QWORD *)((swift_isaMask & *v4) + qword_10016F680 + 8), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

uint64_t sub_100048024(_QWORD *a1)
{
  return sub_100048108((uint64_t)a1 + *(_QWORD *)(qword_10016F680 + (swift_isaMask & *a1) + 16));
}

uint64_t type metadata accessor for RemoteHostingController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RemoteHostingController);
}

uint64_t sub_10004805C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = (uint64_t *)((swift_isaMask & *v1) + qword_10016F680);
  v4 = *v3;
  v5 = *(_QWORD *)(*v3 - 8);
  __chkstk_darwin(a1);
  v7 = (char *)&v10 - v6;
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v8 + 16) + 8) = 0;
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  return UIHostingController.init(rootView:)(v7);
}

uint64_t sub_100048108(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for ViewModulesConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for ViewModulesConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for ViewModulesConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration()
{
  return &type metadata for ViewModulesConfiguration;
}

void sub_1000481E8(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_100048240()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x746E657665, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_1000482C4(char a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if ((a1 & 1) != 0)
    v2 = 0x6449707061;
  else
    v2 = 0x7972746E756F63;
  if ((a1 & 1) != 0)
    v3 = 0xE500000000000000;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_100048340(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if ((a1 & 1) != 0)
    v2 = 0xD000000000000011;
  else
    v2 = 0x73656C75646F6DLL;
  if ((a1 & 1) != 0)
    v3 = 0x8000000100114CD0;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_1000483C4(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = 8 * a1;
  v3 = *(_QWORD *)((char *)&unk_10010D880 + v2);
  String.hash(into:)(v5, *(_QWORD *)&aDefault_2[v2], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_10004842C(char a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if ((a1 & 1) != 0)
    v2 = 7368801;
  else
    v2 = 0x6C61646F6DLL;
  if ((a1 & 1) != 0)
    v3 = 0xE300000000000000;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_1000484A0(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = 8 * a1;
  v3 = *(_QWORD *)&aCalendar_1[v2 + 8];
  String.hash(into:)(v5, *(_QWORD *)&aLocationmusic[v2], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_100048508(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = 8 * a1;
  v3 = *(_QWORD *)((char *)&unk_10010D7D8 + v2);
  String.hash(into:)(v5, *(_QWORD *)((char *)&unk_10010D7B0 + v2), v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100048570(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)((char *)&unk_10010D7D8 + v2);
  String.hash(into:)(a1, *(_QWORD *)((char *)&unk_10010D7B0 + v2), v3);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_1000485B0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)&aCalendar_1[v2 + 8];
  String.hash(into:)(a1, *(_QWORD *)&aLocationmusic[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_1000485F0(uint64_t a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v3 = 7368801;
  else
    v3 = 0x6C61646F6DLL;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE300000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10004863C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)((char *)&unk_10010D880 + v2);
  String.hash(into:)(a1, *(_QWORD *)&aDefault_2[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10004867C(uint64_t a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v3 = 0xD000000000000011;
  else
    v3 = 0x73656C75646F6DLL;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0x8000000100114CD0;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1000486D8(uint64_t a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v3 = 0x6449707061;
  else
    v3 = 0x7972746E756F63;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE500000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

void sub_10004872C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100048770(uint64_t a1)
{
  String.hash(into:)(a1, 0x746E657665, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_1000487D8(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_10004882C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x746E657665, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_1000488B0(uint64_t a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 0x6449707061;
  else
    v3 = 0x7972746E756F63;
  if ((a2 & 1) != 0)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_100048928(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 0xD000000000000011;
  else
    v3 = 0x73656C75646F6DLL;
  if ((a2 & 1) != 0)
    v4 = 0x8000000100114CD0;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_1000489A8(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)((char *)&unk_10010D880 + v3);
  String.hash(into:)(v6, *(_QWORD *)&aDefault_2[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_100048A0C(uint64_t a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 7368801;
  else
    v3 = 0x6C61646F6DLL;
  if ((a2 & 1) != 0)
    v4 = 0xE300000000000000;
  else
    v4 = 0xE500000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_100048A7C(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)&aCalendar_1[v3 + 8];
  String.hash(into:)(v6, *(_QWORD *)&aLocationmusic[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_100048AE0(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)((char *)&unk_10010D7D8 + v3);
  String.hash(into:)(v6, *(_QWORD *)((char *)&unk_10010D7B0 + v3), v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100048B44(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000011;
  else
    return 0x73656C75646F6DLL;
}

uint64_t sub_100048B80(char *a1, char *a2)
{
  return sub_1000F4A40(*a1, *a2);
}

Swift::Int sub_100048B8C()
{
  char *v0;

  return sub_100048340(*v0);
}

uint64_t sub_100048B94(uint64_t a1)
{
  char *v1;

  return sub_10004867C(a1, *v1);
}

Swift::Int sub_100048B9C(uint64_t a1)
{
  char *v1;

  return sub_100048928(a1, *v1);
}

uint64_t sub_100048BA4@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10014B9D0;
  return sub_100048EBC(v2, a1, a2);
}

uint64_t sub_100048BB0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100048B44(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100048BD8()
{
  char *v0;

  return sub_100048B44(*v0);
}

uint64_t sub_100048BE0@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10014B9D0, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_100048C40()
{
  return 0;
}

void sub_100048C4C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100048C58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004992C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100048C80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004992C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100048CA8(char a1)
{
  return *(_QWORD *)&aLocationmusic[8 * a1];
}

uint64_t sub_100048CC8(char a1)
{
  return *(_QWORD *)&aDefault_2[8 * a1];
}

uint64_t sub_100048CE8(char a1)
{
  if ((a1 & 1) != 0)
    return 7368801;
  else
    return 0x6C61646F6DLL;
}

uint64_t sub_100048D14(char *a1, char *a2)
{
  return sub_1000F48A4(*a1, *a2);
}

Swift::Int sub_100048D20()
{
  char *v0;

  return sub_1000484A0(*v0);
}

uint64_t sub_100048D28(uint64_t a1)
{
  char *v1;

  return sub_1000485B0(a1, *v1);
}

Swift::Int sub_100048D30(uint64_t a1)
{
  char *v1;

  return sub_100048A7C(a1, *v1);
}

unint64_t sub_100048D38@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000495CC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100048D64@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100048CA8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100048D8C(char *a1, char *a2)
{
  return sub_1000F49BC(*a1, *a2);
}

Swift::Int sub_100048D98()
{
  char *v0;

  return sub_1000483C4(*v0);
}

uint64_t sub_100048DA0(uint64_t a1)
{
  char *v1;

  return sub_10004863C(a1, *v1);
}

Swift::Int sub_100048DA8(uint64_t a1)
{
  char *v1;

  return sub_1000489A8(a1, *v1);
}

unint64_t sub_100048DB0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100049614(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100048DDC@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100048CC8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100048E08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10004965C(a1, a2);
  *a3 = result & 1;
  return result;
}

void sub_100048E30(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100048E3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004A100();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100048E64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004A100();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100048E8C(char *a1, char *a2)
{
  return sub_1000F4928(*a1, *a2);
}

Swift::Int sub_100048E98()
{
  char *v0;

  return sub_10004842C(*v0);
}

uint64_t sub_100048EA0(uint64_t a1)
{
  char *v1;

  return sub_1000485F0(a1, *v1);
}

Swift::Int sub_100048EA8(uint64_t a1)
{
  char *v1;

  return sub_100048A0C(a1, *v1);
}

uint64_t sub_100048EB0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10014BB50;
  return sub_100048EBC(v2, a1, a2);
}

uint64_t sub_100048EBC@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, char *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;
  char v8;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

uint64_t sub_100048F14@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100048CE8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100048F3C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  unint64_t result;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __n128 v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;

  v4 = type metadata accessor for DecodingError.Context(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = (void *)a1[1];
  swift_bridgeObjectRetain(v9);
  v20._countAndFlagsBits = v8;
  v20._object = v9;
  result = sub_1000495CC(v20);
  if (result == 6)
  {
    v18 = 0;
    v19 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease(v19);
    v18 = 0xD000000000000018;
    v19 = 0x80000001001161C0;
    v11._countAndFlagsBits = v8;
    v11._object = v9;
    String.append(_:)(v11);
    v12._countAndFlagsBits = 0x6F6E2073656F6420;
    v12._object = (void *)0xEF74736978652074;
    String.append(_:)(v12);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(&_swiftEmptyArrayStorage, v18, v19, 0);
    v13 = type metadata accessor for DecodingError(0);
    swift_allocError(v13, &protocol witness table for DecodingError, 0, 0);
    v15 = v14;
    v16 = (char *)v14 + *(int *)(sub_100003E70(&qword_10015F408) + 48);
    *v15 = &type metadata for ViewModulesConfiguration.Name;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v16, v7, v4);
    v17.n128_f64[0] = (*(double (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v15, enum case for DecodingError.valueNotFound(_:), v13);
    swift_willThrow(v17);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000490F8(_QWORD *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;

  v7 = sub_100003E70(&qword_10015F410);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_100008170(a1, v11);
  v13 = sub_10004992C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ViewModulesConfiguration.CodingKeys, &type metadata for ViewModulesConfiguration.CodingKeys, v13, v11, v12);
  v22 = a3;
  v21 = 0;
  v14 = sub_100003E70(&qword_10015F418);
  v15 = sub_100049AA8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v7, v14, v15);
  if (!v3)
  {
    v20 = a2 & 1;
    v19 = 1;
    v16 = sub_100049B9C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v7, &type metadata for ViewModulesConfiguration.PresentationStyle, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

_QWORD *sub_100049250@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_100049704(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result & 1;
    *(_QWORD *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_100049280(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000490F8(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8));
}

uint64_t sub_10004929C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100049BE0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000492F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100049BE0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100049344(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v4 = sub_100003E70(&qword_10015F460);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100008170(a1, v8);
  v10 = sub_10004A100();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys, &type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys, v10, v8, v9);
  v15 = a2;
  v11 = sub_10004A188();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v4, &type metadata for ViewModulesConfiguration.ModuleSettings.Appearance, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_10004943C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_100049FE0(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_100049464(_QWORD *a1)
{
  char *v1;

  return sub_100049344(a1, *v1);
}

uint64_t sub_10004947C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10004A1CC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000494D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10004A1CC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100049524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10004A210();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100049580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10004A210();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_1000495CC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10014BA20, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

unint64_t sub_100049614(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10014BAD0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_10004965C(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x6E61726165707061 && a2 == 0xEA00000000006563)
  {
    swift_bridgeObjectRelease(a2);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E61726165707061, 0xEA00000000006563, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_1000496E8()
{
  return 0x6E61726165707061;
}

_QWORD *sub_100049704(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = sub_100003E70(&qword_10015F3D0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_100008170(a1, v7);
  v10 = sub_10004992C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ViewModulesConfiguration.CodingKeys, &type metadata for ViewModulesConfiguration.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_1000055A8(a1);
  }
  else
  {
    v11 = sub_100003E70(&qword_10015F3E0);
    HIBYTE(v18) = 0;
    v12 = sub_100049970();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, v11, (char *)&v18 + 7, v3, v11, v12);
    v13 = v19;
    v14 = sub_100049A20();
    v16 = Dictionary.mapKeys<A>(_:)(sub_100048F3C, 0, v13, &type metadata for String, &type metadata for ViewModulesConfiguration.ModuleSettings, &type metadata for ViewModulesConfiguration.Name, &protocol witness table for String, v14);
    swift_bridgeObjectRelease(v13);
    BYTE5(v18) = 1;
    v17 = sub_100049A64();
    swift_bridgeObjectRetain(v16);
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v18 + 6), &type metadata for ViewModulesConfiguration.PresentationStyle, (char *)&v18 + 5, v3, &type metadata for ViewModulesConfiguration.PresentationStyle, v17);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = (_QWORD *)BYTE6(v18);
    sub_1000055A8(a1);
    swift_bridgeObjectRelease(v16);
  }
  return v9;
}

unint64_t sub_10004992C()
{
  unint64_t result;

  result = qword_10015F3D8;
  if (!qword_10015F3D8)
  {
    result = swift_getWitnessTable(&unk_10010D75C, &type metadata for ViewModulesConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F3D8);
  }
  return result;
}

unint64_t sub_100049970()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F3E8;
  if (!qword_10015F3E8)
  {
    v1 = sub_1000034AC(&qword_10015F3E0);
    sub_1000499DC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10015F3E8);
  }
  return result;
}

unint64_t sub_1000499DC()
{
  unint64_t result;

  result = qword_10015F3F0;
  if (!qword_10015F3F0)
  {
    result = swift_getWitnessTable(&unk_10010D274, &type metadata for ViewModulesConfiguration.ModuleSettings);
    atomic_store(result, (unint64_t *)&qword_10015F3F0);
  }
  return result;
}

unint64_t sub_100049A20()
{
  unint64_t result;

  result = qword_10015F3F8;
  if (!qword_10015F3F8)
  {
    result = swift_getWitnessTable(&unk_10010D71C, &type metadata for ViewModulesConfiguration.Name);
    atomic_store(result, (unint64_t *)&qword_10015F3F8);
  }
  return result;
}

unint64_t sub_100049A64()
{
  unint64_t result;

  result = qword_10015F400;
  if (!qword_10015F400)
  {
    result = swift_getWitnessTable(&unk_10010D1D4, &type metadata for ViewModulesConfiguration.PresentationStyle);
    atomic_store(result, (unint64_t *)&qword_10015F400);
  }
  return result;
}

unint64_t sub_100049AA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F420;
  if (!qword_10015F420)
  {
    v1 = sub_1000034AC(&qword_10015F418);
    sub_100049B14();
    sub_100049B58();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10015F420);
  }
  return result;
}

unint64_t sub_100049B14()
{
  unint64_t result;

  result = qword_10015F428;
  if (!qword_10015F428)
  {
    result = swift_getWitnessTable(&unk_10010D29C, &type metadata for ViewModulesConfiguration.Name);
    atomic_store(result, (unint64_t *)&qword_10015F428);
  }
  return result;
}

unint64_t sub_100049B58()
{
  unint64_t result;

  result = qword_10015F430;
  if (!qword_10015F430)
  {
    result = swift_getWitnessTable(&unk_10010D24C, &type metadata for ViewModulesConfiguration.ModuleSettings);
    atomic_store(result, (unint64_t *)&qword_10015F430);
  }
  return result;
}

unint64_t sub_100049B9C()
{
  unint64_t result;

  result = qword_10015F438;
  if (!qword_10015F438)
  {
    result = swift_getWitnessTable(&unk_10010D1AC, &type metadata for ViewModulesConfiguration.PresentationStyle);
    atomic_store(result, (unint64_t *)&qword_10015F438);
  }
  return result;
}

unint64_t sub_100049BE0()
{
  unint64_t result;

  result = qword_10015F440;
  if (!qword_10015F440)
  {
    result = swift_getWitnessTable(&unk_10010D6E4, &type metadata for ViewModulesConfiguration.Name);
    atomic_store(result, (unint64_t *)&qword_10015F440);
  }
  return result;
}

uint64_t sub_100049C24(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  void *v5;
  Class isa;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v28[3];
  _BYTE v29[8];
  uint64_t v30;
  uint64_t v31;
  id v32;

  if (!a2)
    return 0;
  swift_bridgeObjectRetain(a2);
  v4 = sub_100047A5C(a1, a2);
  v5 = (void *)objc_opt_self(NSPropertyListSerialization);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  v32 = 0;
  v7 = objc_msgSend(v5, "dataWithPropertyList:format:options:error:", isa, 100, 0, &v32);

  v8 = v32;
  if (v7)
  {
    v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

    v12 = type metadata accessor for PropertyListDecoder(0);
    swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v13 = PropertyListDecoder.init()();
    v14 = sub_10004A254();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&v32, &type metadata for ViewModulesConfiguration, v9, v11, &type metadata for ViewModulesConfiguration, v14);
    swift_release(v13);
    sub_10003653C(v9, v11);
    swift_bridgeObjectRelease(a2);
    return v32;
  }
  else
  {
    v15 = v8;
    v16 = _convertNSErrorToError(_:)(v8);

    swift_willThrow(v17);
    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v18 = type metadata accessor for Logger(0);
    sub_100011AC4(v18, (uint64_t)qword_10016F728);
    swift_errorRetain(v16);
    swift_bridgeObjectRetain(a2);
    v19 = swift_errorRetain(v16);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(22, -1);
      v23 = (void *)swift_slowAlloc(64, -1);
      v32 = v23;
      *(_DWORD *)v22 = 136315394;
      swift_bridgeObjectRetain(a2);
      v30 = sub_1000C7684(a1, a2, (uint64_t *)&v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v22 + 12) = 2080;
      swift_getErrorValue(v16, v29, v28);
      v24 = Error.localizedDescription.getter(v28[1], v28[2]);
      v26 = v25;
      v30 = sub_1000C7684(v24, v25, (uint64_t *)&v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease(v26);
      swift_errorRelease(v16);
      swift_errorRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Empty or invalid view module configuration for ID: %s. Error: %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);

      swift_errorRelease(v16);
    }
    else
    {
      swift_errorRelease(v16);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_errorRelease(v16);
      swift_errorRelease(v16);

    }
    return 0;
  }
}

unint64_t sub_100049FE0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v3 = sub_100003E70(&qword_10015F448);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = (unint64_t)sub_100008170(a1, v7);
  v10 = sub_10004A100();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys, &type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_1000055A8(a1);
  }
  else
  {
    v11 = sub_10004A144();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v15, &type metadata for ViewModulesConfiguration.ModuleSettings.Appearance, v12, v3, &type metadata for ViewModulesConfiguration.ModuleSettings.Appearance, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v15;
    sub_1000055A8(a1);
  }
  return v9;
}

unint64_t sub_10004A100()
{
  unint64_t result;

  result = qword_10015F450;
  if (!qword_10015F450)
  {
    result = swift_getWitnessTable(&unk_10010D694, &type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F450);
  }
  return result;
}

unint64_t sub_10004A144()
{
  unint64_t result;

  result = qword_10015F458;
  if (!qword_10015F458)
  {
    result = swift_getWitnessTable(&unk_10010D224, &type metadata for ViewModulesConfiguration.ModuleSettings.Appearance);
    atomic_store(result, (unint64_t *)&qword_10015F458);
  }
  return result;
}

unint64_t sub_10004A188()
{
  unint64_t result;

  result = qword_10015F468;
  if (!qword_10015F468)
  {
    result = swift_getWitnessTable(&unk_10010D1FC, &type metadata for ViewModulesConfiguration.ModuleSettings.Appearance);
    atomic_store(result, (unint64_t *)&qword_10015F468);
  }
  return result;
}

unint64_t sub_10004A1CC()
{
  unint64_t result;

  result = qword_10015F470;
  if (!qword_10015F470)
  {
    result = swift_getWitnessTable(&unk_10010D65C, &type metadata for ViewModulesConfiguration.ModuleSettings.Appearance);
    atomic_store(result, (unint64_t *)&qword_10015F470);
  }
  return result;
}

unint64_t sub_10004A210()
{
  unint64_t result;

  result = qword_10015F478;
  if (!qword_10015F478)
  {
    result = swift_getWitnessTable(&unk_10010D624, &type metadata for ViewModulesConfiguration.PresentationStyle);
    atomic_store(result, (unint64_t *)&qword_10015F478);
  }
  return result;
}

unint64_t sub_10004A254()
{
  unint64_t result;

  result = qword_10015F480;
  if (!qword_10015F480)
  {
    result = swift_getWitnessTable(&unk_10010D314, &type metadata for ViewModulesConfiguration);
    atomic_store(result, (unint64_t *)&qword_10015F480);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ViewModulesConfiguration.ModuleSettings.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10004A2D8 + 4 * byte_10010D15F[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10004A2F8 + 4 * byte_10010D164[v4]))();
}

_BYTE *sub_10004A2D8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10004A2F8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10004A300(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10004A308(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10004A310(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10004A318(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.ModuleSettings.CodingKeys()
{
  return &type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.CodingKeys()
{
  return &type metadata for ViewModulesConfiguration.CodingKeys;
}

_BYTE *sub_10004A354(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.ModuleSettings.Appearance()
{
  return &type metadata for ViewModulesConfiguration.ModuleSettings.Appearance;
}

uint64_t getEnumTagSinglePayload for NavigationButton.Style(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s16EventViewService24ViewModulesConfigurationV14ModuleSettingsV10AppearanceOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10004A448 + 4 * byte_10010D16E[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10004A47C + 4 * byte_10010D169[v4]))();
}

uint64_t sub_10004A47C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004A484(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004A48CLL);
  return result;
}

uint64_t sub_10004A498(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004A4A0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10004A4A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004A4AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.ModuleSettings()
{
  return &type metadata for ViewModulesConfiguration.ModuleSettings;
}

uint64_t getEnumTagSinglePayload for ViewModulesConfiguration.Name(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewModulesConfiguration.Name(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10004A5A4 + 4 * byte_10010D178[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10004A5D8 + 4 * byte_10010D173[v4]))();
}

uint64_t sub_10004A5D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004A5E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004A5E8);
  return result;
}

uint64_t sub_10004A5F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004A5FCLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10004A600(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004A608(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.Name()
{
  return &type metadata for ViewModulesConfiguration.Name;
}

uint64_t _s16EventViewService24ViewModulesConfigurationV17PresentationStyleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10004A670 + 4 * byte_10010D182[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10004A6A4 + 4 * byte_10010D17D[v4]))();
}

uint64_t sub_10004A6A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004A6AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004A6B4);
  return result;
}

uint64_t sub_10004A6C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004A6C8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10004A6CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004A6D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.PresentationStyle()
{
  return &type metadata for ViewModulesConfiguration.PresentationStyle;
}

unint64_t sub_10004A6F4()
{
  unint64_t result;

  result = qword_10015F488;
  if (!qword_10015F488)
  {
    result = swift_getWitnessTable(&unk_10010D3C4, &type metadata for ViewModulesConfiguration.PresentationStyle);
    atomic_store(result, (unint64_t *)&qword_10015F488);
  }
  return result;
}

unint64_t sub_10004A73C()
{
  unint64_t result;

  result = qword_10015F490;
  if (!qword_10015F490)
  {
    result = swift_getWitnessTable(&unk_10010D454, &type metadata for ViewModulesConfiguration.ModuleSettings.Appearance);
    atomic_store(result, (unint64_t *)&qword_10015F490);
  }
  return result;
}

unint64_t sub_10004A784()
{
  unint64_t result;

  result = qword_10015F498;
  if (!qword_10015F498)
  {
    result = swift_getWitnessTable(&unk_10010D544, &type metadata for ViewModulesConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F498);
  }
  return result;
}

unint64_t sub_10004A7CC()
{
  unint64_t result;

  result = qword_10015F4A0;
  if (!qword_10015F4A0)
  {
    result = swift_getWitnessTable(&unk_10010D5FC, &type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F4A0);
  }
  return result;
}

unint64_t sub_10004A814()
{
  unint64_t result;

  result = qword_10015F4A8;
  if (!qword_10015F4A8)
  {
    result = swift_getWitnessTable(&unk_10010D56C, &type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F4A8);
  }
  return result;
}

unint64_t sub_10004A85C()
{
  unint64_t result;

  result = qword_10015F4B0;
  if (!qword_10015F4B0)
  {
    result = swift_getWitnessTable(&unk_10010D594, &type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F4B0);
  }
  return result;
}

unint64_t sub_10004A8A4()
{
  unint64_t result;

  result = qword_10015F4B8;
  if (!qword_10015F4B8)
  {
    result = swift_getWitnessTable(&unk_10010D3EC, &type metadata for ViewModulesConfiguration.Name);
    atomic_store(result, (unint64_t *)&qword_10015F4B8);
  }
  return result;
}

unint64_t sub_10004A8EC()
{
  unint64_t result;

  result = qword_10015F4C0;
  if (!qword_10015F4C0)
  {
    result = swift_getWitnessTable(&unk_10010D47C, &type metadata for ViewModulesConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F4C0);
  }
  return result;
}

unint64_t sub_10004A934()
{
  unint64_t result;

  result = qword_10015F4C8;
  if (!qword_10015F4C8)
  {
    result = swift_getWitnessTable(&unk_10010D4A4, &type metadata for ViewModulesConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F4C8);
  }
  return result;
}

uint64_t sub_10004A988(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v22 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v22 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v22);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    v6 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v6;
    v7 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v7;
    v9 = (void *)a2[8];
    v8 = a2[9];
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v8;
    v10 = a2[10];
    *(_QWORD *)(a1 + 80) = v10;
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    v11 = a2[12];
    v12 = a2[13];
    *(_QWORD *)(a1 + 96) = v11;
    *(_QWORD *)(a1 + 104) = v12;
    v13 = *(int *)(a3 + 24);
    v14 = (uint64_t *)((char *)a2 + v13);
    v15 = (uint64_t *)(a1 + v13);
    *(_QWORD *)(a1 + 112) = a2[14];
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    v16 = v9;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_retain(v12);
    v17 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v14, v17) == 1)
    {
      v18 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v14, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v23 = *v14;
      *v15 = *v14;
      swift_retain(v23);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
  }
  return a1;
}

double sub_10004AAE8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
  swift_release(*(_QWORD *)(a1 + 104));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v5 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

uint64_t sub_10004AB90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v8 = *(void **)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v7;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v9;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v10 = *(_QWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 104) = v11;
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t *)(a2 + v12);
  v14 = (uint64_t *)(a1 + v12);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v15 = v8;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v11);
  v16 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v13, v16) == 1)
  {
    v17 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v13, v17);
    v18 = 1;
  }
  else
  {
    v19 = *v13;
    *v14 = *v13;
    swift_retain(v19);
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v16, v18);
  return a1;
}

uint64_t sub_10004ACBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(void **)(a1 + 64);
  v13 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v13;
  v14 = v13;

  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 80);
  v16 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v17 = *(_QWORD *)(a2 + 96);
  v18 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(a1 + 104);
  v20 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v20;
  swift_retain(v20);
  swift_release(v19);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  if (a1 != a2)
  {
    v21 = *(int *)(a3 + 24);
    v22 = (uint64_t *)(a1 + v21);
    v23 = (uint64_t *)(a2 + v21);
    sub_100008194(a1 + v21, &qword_10015D600);
    v24 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
      v26 = 1;
    }
    else
    {
      v27 = *v23;
      *v22 = *v23;
      swift_retain(v27);
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v24, v26);
  }
  return a1;
}

uint64_t sub_10004AE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v10 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10004AF24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);

  v13 = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v13;
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release(v16);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  if (a1 != a2)
  {
    v17 = *(int *)(a3 + 24);
    v18 = (void *)(a1 + v17);
    v19 = (const void *)(a2 + v17);
    sub_100008194(a1 + v17, &qword_10015D600);
    v20 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
      swift_storeEnumTagMultiPayload(v18, v20, 1);
    }
    else
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10004B06C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004B078);
}

uint64_t sub_10004B078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003E70(qword_10015D610);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_10004B0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004B104);
}

uint64_t sub_10004B104(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100003E70(qword_10015D610);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for LocationModule(uint64_t a1)
{
  uint64_t result;

  result = qword_10015F528;
  if (!qword_10015F528)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationModule);
  return result;
}

void sub_10004B1B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "h";
  v4[1] = &unk_10010D8C8;
  sub_100012368(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_10004B234(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100119574, 1);
}

uint64_t sub_10004B244@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t KeyPath;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t *v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  __int128 v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  _OWORD v76[2];
  uint64_t v77;

  v2 = v1;
  v75 = a1;
  v3 = sub_100003E70(&qword_10015DF58);
  __chkstk_darwin(v3);
  v71 = (uint64_t)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100003E70(&qword_10015E338);
  __chkstk_darwin(v69);
  v6 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v7);
  v9 = (__int128 *)((char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100003E70(&qword_10015E9B8);
  __chkstk_darwin(v10);
  v70 = (uint64_t *)((char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = sub_100003E70(&qword_10015E9C0);
  __chkstk_darwin(v72);
  v74 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003E70(&qword_10015F568);
  __chkstk_darwin(v13);
  v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003E70(&qword_10015F570);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v15 = static HorizontalAlignment.leading.getter(v17);
  *((_QWORD *)v15 + 1) = 0x4030000000000000;
  v15[16] = 0;
  v20 = sub_100003E70(&qword_10015F578);
  v21 = sub_10004B7A0(v2, (uint64_t)&v15[*(int *)(v20 + 44)]);
  v22 = static Edge.Set.all.getter(v21);
  sub_100007ADC((uint64_t)v15, (uint64_t)v19, &qword_10015F568);
  v23 = *(int *)(v16 + 36);
  v73 = v19;
  v24 = &v19[v23];
  *v24 = v22;
  *(_OWORD *)(v24 + 8) = 0u;
  *(_OWORD *)(v24 + 24) = 0u;
  v24[40] = 1;
  sub_100008194((uint64_t)v15, &qword_10015F568);
  if (qword_10015CE68 != -1)
    swift_once(&qword_10015CE68, sub_1000382DC);
  v25 = qword_10016F660;
  KeyPath = swift_getKeyPath(&unk_10010D930);
  v27 = (char *)v9 + *(int *)(v7 + 20);
  v28 = enum case for RoundedCornerStyle.continuous(_:);
  v29 = type metadata accessor for RoundedCornerStyle(0);
  v30 = v7;
  v31 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104);
  v31(v27, v28, v29);
  __asm { FMOV            V0.2D, #12.0 }
  v68 = _Q0;
  *v9 = _Q0;
  sub_100028390((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v6[*(int *)(v69 + 36)] = 256;
  v37 = *(int *)(v10 + 36);
  v38 = v70;
  sub_100007ADC((uint64_t)v6, (uint64_t)v70 + v37, &qword_10015E338);
  *v38 = KeyPath;
  v38[1] = v25;
  swift_retain_n(v25, 2);
  swift_retain(KeyPath);
  sub_100008194((uint64_t)v6, &qword_10015E338);
  sub_10001BFA4((uint64_t)v9);
  swift_release(v25);
  v39 = swift_release(KeyPath);
  v40 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v31)((char *)v9 + *(int *)(v30 + 20), v28, v29, v39);
  *v9 = v68;
  v41 = static Color.black.getter(v40);
  v42 = Color.opacity(_:)(0.1);
  swift_release(v41);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v76, 0, 0, &_swiftEmptyArrayStorage, 0.5, 10.0, 0.0);
  v43 = v71;
  sub_100028390((uint64_t)v9, v71, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v44 = v43 + *(int *)(sub_100003E70(&qword_10015DF60) + 36);
  v45 = v76[1];
  *(_OWORD *)v44 = v76[0];
  *(_OWORD *)(v44 + 16) = v45;
  *(_QWORD *)(v44 + 32) = v77;
  v46 = sub_100003E70(&qword_10015DF68);
  *(_QWORD *)(v43 + *(int *)(v46 + 52)) = v42;
  *(_WORD *)(v43 + *(int *)(v46 + 56)) = 256;
  v47 = static Alignment.center.getter(v46);
  v49 = v48;
  v50 = (uint64_t *)(v43 + *(int *)(sub_100003E70(&qword_10015DF70) + 36));
  *v50 = v47;
  v50[1] = v49;
  v51 = sub_10001BFA4((uint64_t)v9);
  v52 = static Alignment.center.getter(v51);
  v54 = v53;
  v55 = (uint64_t)v74;
  v56 = (uint64_t)&v74[*(int *)(v72 + 36)];
  sub_100007ADC(v43, v56, &qword_10015DF58);
  v57 = (uint64_t *)(v56 + *(int *)(sub_100003E70(&qword_10015E9C8) + 36));
  *v57 = v52;
  v57[1] = v54;
  sub_100007ADC((uint64_t)v38, v55, &qword_10015E9B8);
  sub_100008194(v43, &qword_10015DF58);
  v58 = sub_100008194((uint64_t)v38, &qword_10015E9B8);
  v59 = static Alignment.center.getter(v58);
  v61 = v60;
  v62 = sub_100003E70(&qword_10015F580);
  v63 = v75;
  v64 = v75 + *(int *)(v62 + 36);
  sub_100007ADC(v55, v64, &qword_10015E9C0);
  v65 = (uint64_t *)(v64 + *(int *)(sub_100003E70(&qword_10015E9B0) + 36));
  *v65 = v59;
  v65[1] = v61;
  v66 = (uint64_t)v73;
  sub_100007ADC((uint64_t)v73, v63, &qword_10015F570);
  sub_100008194(v55, &qword_10015E9C0);
  return sub_100008194(v66, &qword_10015F570);
}

uint64_t sub_10004B7A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v75 = a2;
  v3 = type metadata accessor for LocationModule(0);
  v66 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v66 + 64);
  __chkstk_darwin(v3);
  v5 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003E70(&qword_10015F588);
  v69 = *(_QWORD *)(v6 - 8);
  v70 = v6;
  __chkstk_darwin(v6);
  v67 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003E70(&qword_10015F590);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v73 = (uint64_t)&v64 - v12;
  v74 = type metadata accessor for Divider(0);
  v71 = *(_QWORD *)(v74 - 8);
  v13 = __chkstk_darwin(v74);
  v72 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v68 = (char *)&v64 - v15;
  v16 = sub_100003E70(&qword_10015F598);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v64 - v20;
  v22 = sub_100003E70(&qword_10015F5A0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v64 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v64 - v27;
  v29 = __chkstk_darwin(v26);
  v31 = (char *)&v64 - v30;
  *(_QWORD *)v28 = static HorizontalAlignment.leading.getter(v29);
  *((_QWORD *)v28 + 1) = 0x4024000000000000;
  v28[16] = 0;
  v32 = sub_100003E70(&qword_10015F5A8);
  sub_10004BD90(a1, (uint64_t)&v28[*(int *)(v32 + 44)]);
  sub_100007A98((uint64_t)v28, (uint64_t)v31, &qword_10015F5A0);
  v33 = *(_QWORD *)(a1 + 104);
  if (v33)
  {
    swift_retain(*(_QWORD *)(a1 + 104));
    v34 = sub_1001064FC();
    swift_release(v33);
    if ((v34 & 1) != 0)
    {
      v36 = sub_100003E70(&qword_10015F5D0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v21, 1, 1, v36);
    }
    else
    {
      v64 = v25;
      v65 = v21;
      v37 = v68;
      Divider.init()(v35);
      sub_100028390(a1, (uint64_t)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LocationModule);
      v38 = *(unsigned __int8 *)(v66 + 80);
      v39 = (v38 + 16) & ~v38;
      v40 = swift_allocObject(&unk_10014EE90, v39 + v4, v38 | 7);
      v41 = sub_10004D2D8((uint64_t)v5, v40 + v39);
      __chkstk_darwin(v41);
      *(&v64 - 2) = (char *)a1;
      v42 = sub_100003E70(&qword_10015F5B0);
      v43 = sub_100007D40(&qword_10015F5B8, &qword_10015F5B0, (uint64_t)&protocol conformance descriptor for HStack<A>);
      v44 = v67;
      Button.init(action:label:)(sub_10004D31C, v40, sub_10004D348, &v64 - 4, v42, v43);
      if (qword_10015CF48 != -1)
        swift_once(&qword_10015CF48, sub_100105DF8);
      v45 = qword_10016F6F8;
      v46 = unk_10016F700;
      v47 = sub_100007D40(&qword_10015F5C0, &qword_10015F588, (uint64_t)&protocol conformance descriptor for Button<A>);
      v48 = v45;
      v49 = v70;
      View.accessibilityIdentifier(_:)(v48, v46, v70, v47);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v44, v49);
      v50 = v73;
      sub_100007A98((uint64_t)v11, v73, &qword_10015F590);
      v51 = v71;
      v52 = v72;
      v53 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
      v54 = v74;
      v53(v72, v37, v74);
      sub_100007ADC(v50, (uint64_t)v11, &qword_10015F590);
      v53(v19, v52, v54);
      v55 = sub_100003E70(&qword_10015F5C8);
      sub_100007ADC((uint64_t)v11, (uint64_t)&v19[*(int *)(v55 + 48)], &qword_10015F590);
      sub_100008194(v50, &qword_10015F590);
      v56 = *(void (**)(char *, uint64_t))(v51 + 8);
      v56(v37, v54);
      sub_100008194((uint64_t)v11, &qword_10015F590);
      v56(v52, v54);
      v57 = sub_100003E70(&qword_10015F5D0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v19, 0, 1, v57);
      v21 = v65;
      sub_100007A98((uint64_t)v19, (uint64_t)v65, &qword_10015F598);
      v25 = v64;
    }
    sub_100007ADC((uint64_t)v31, (uint64_t)v25, &qword_10015F5A0);
    sub_100007ADC((uint64_t)v21, (uint64_t)v19, &qword_10015F598);
    v58 = v75;
    sub_100007ADC((uint64_t)v25, v75, &qword_10015F5A0);
    v59 = sub_100003E70(&qword_10015F5D8);
    sub_100007ADC((uint64_t)v19, v58 + *(int *)(v59 + 48), &qword_10015F598);
    sub_100008194((uint64_t)v21, &qword_10015F598);
    sub_100008194((uint64_t)v31, &qword_10015F5A0);
    sub_100008194((uint64_t)v19, &qword_10015F598);
    return sub_100008194((uint64_t)v25, &qword_10015F5A0);
  }
  else
  {
    v61 = *(_QWORD *)(a1 + 112);
    v62 = type metadata accessor for RemoteViewConfiguration();
    v63 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    result = EnvironmentObject.error()(0, v61, v62, v63);
    __break(1u);
  }
  return result;
}

uint64_t sub_10004BD90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t KeyPath;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD *v94;
  __int128 v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(char *, char *, uint64_t);
  uint64_t v145;
  uint64_t v146;
  void (*v147)(char *, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _OWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  _OWORD v195[3];
  _OWORD v196[6];
  uint64_t v197;

  v188 = a2;
  v183 = type metadata accessor for EnabledTextSelectability(0);
  v182 = *(_QWORD *)(v183 - 8);
  __chkstk_darwin(v183);
  v181 = (char *)&v149 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = sub_100003E70(&qword_10015F5E0);
  v185 = *(_QWORD *)(v187 - 8);
  v4 = __chkstk_darwin(v187);
  v186 = (char *)&v149 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v184 = (char *)&v149 - v6;
  v178 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v178);
  v8 = (_OWORD *)((char *)&v149 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for MapInteractionModes(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v177 = (char *)&v149 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003E70(&qword_10015F5E8);
  __chkstk_darwin(v12);
  v175 = (char *)&v149 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MapCamera(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v165 = (char *)&v149 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = type metadata accessor for MapCameraPosition(0);
  v164 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166);
  v163 = (char *)&v149 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003E70(&qword_10015F5F0);
  __chkstk_darwin(v18);
  v167 = (char *)&v149 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_100003E70(&qword_10015F5F8);
  v171 = *(_QWORD *)(v172 - 8);
  __chkstk_darwin(v172);
  v170 = (char *)&v149 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_100003E70(&qword_10015F600);
  __chkstk_darwin(v168);
  v176 = (char *)&v149 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_100003E70(&qword_10015F608);
  __chkstk_darwin(v169);
  v174 = (char *)&v149 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = sub_100003E70(&qword_10015F610);
  v23 = __chkstk_darwin(v173);
  v190 = (uint64_t)&v149 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v180 = (uint64_t)&v149 - v25;
  v26 = sub_100003E70(&qword_10015E8E8);
  __chkstk_darwin(v26);
  v159 = (uint64_t *)((char *)&v149 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = sub_100003E70(&qword_10015E8F0);
  __chkstk_darwin(v28);
  v30 = (char *)&v149 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_100003E70(&qword_10015E8F8);
  __chkstk_darwin(v156);
  v32 = (char *)&v149 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_100003E70(&qword_10015F1A8);
  __chkstk_darwin(v158);
  v160 = (uint64_t)&v149 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_100003E70(&qword_10015F618);
  v162 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v157 = (uint64_t)&v149 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100003E70(&qword_10015F620);
  v36 = __chkstk_darwin(v35);
  v179 = (uint64_t)&v149 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v39 = (char *)&v149 - v38;
  v40 = *(void **)(a1 + 64);
  v189 = (char *)&v149 - v38;
  if (v40)
  {
    v41 = objc_msgSend(v40, "city");
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v153 = v9;
    v43 = v42;
    v155 = a1;
    v45 = v44;

    *(_QWORD *)&v196[0] = v43;
    *((_QWORD *)&v196[0] + 1) = v45;
    v46 = sub_10000CB40();
    v47 = Text.init<A>(_:)(v196, &type metadata for String, v46);
    v49 = v48;
    v150 = v26;
    v51 = v50;
    LOBYTE(v41) = v52 & 1;
    v151 = v15;
    v53 = enum case for Text.Case.uppercase(_:);
    v54 = type metadata accessor for Text.Case(0);
    v154 = v8;
    v55 = v54;
    v152 = v14;
    v56 = v10;
    v57 = *(_QWORD *)(v54 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 104))(v30, v53, v54);
    v58 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56);
    v10 = v56;
    v58(v30, 0, 1, v55);
    KeyPath = swift_getKeyPath(&unk_10010D990);
    v60 = v159;
    sub_100007ADC((uint64_t)v30, (uint64_t)v159 + *(int *)(v150 + 28), &qword_10015E8F0);
    *v60 = KeyPath;
    sub_100007ADC((uint64_t)v60, (uint64_t)&v32[*(int *)(v156 + 36)], &qword_10015E8E8);
    *(_QWORD *)v32 = v47;
    *((_QWORD *)v32 + 1) = v49;
    v32[16] = (char)v41;
    *((_QWORD *)v32 + 3) = v51;
    sub_10000C008(v47, v49, (char)v41);
    swift_bridgeObjectRetain(v51);
    v8 = v154;
    sub_100008194((uint64_t)v60, &qword_10015E8E8);
    v15 = v151;
    sub_100008194((uint64_t)v30, &qword_10015E8F0);
    v61 = v47;
    a1 = v155;
    sub_10000BFF8(v61, v49, (char)v41);
    v62 = swift_bridgeObjectRelease(v51);
    v63 = static Font.subheadline.getter(v62);
    v64 = swift_getKeyPath(&unk_10010D9C0);
    v65 = v160;
    sub_100007ADC((uint64_t)v32, v160, &qword_10015E8F8);
    v66 = (uint64_t *)(v65 + *(int *)(v158 + 36));
    *v66 = v64;
    v66[1] = v63;
    v14 = v152;
    v9 = v153;
    sub_100008194((uint64_t)v32, &qword_10015E8F8);
    v67 = v157;
    sub_100007ADC(v65, v157, &qword_10015F1A8);
    v68 = v161;
    *(_QWORD *)(v67 + *(int *)(v161 + 36)) = 0x3FE0000000000000;
    v39 = v189;
    sub_100008194(v65, &qword_10015F1A8);
    sub_100007A98(v67, (uint64_t)v39, &qword_10015F618);
    v69 = 0;
    v70 = v68;
  }
  else
  {
    v69 = 1;
    v70 = v161;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v162 + 56))(v39, v69, 1, v70);
  v71 = v165;
  MapCamera.init(centerCoordinate:distance:heading:pitch:)(*(double *)(a1 + 16), *(double *)(a1 + 24), 1000.0, 0.0, 60.0);
  v72 = v163;
  static MapCameraPosition.camera(_:)(v71);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v71, v14);
  v73 = v167;
  v74 = v166;
  static Binding.constant(_:)(v72, v166);
  (*(void (**)(char *, uint64_t))(v164 + 8))(v72, v74);
  v75 = type metadata accessor for MapCameraBounds(0);
  v76 = v175;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v175, 1, 1, v75);
  v77 = sub_100003E70(&qword_10015F628);
  v78 = swift_allocObject(v77, ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ 2 * *(_QWORD *)(v10 + 72), *(unsigned __int8 *)(v10 + 80) | 7);
  *(_OWORD *)(v78 + 16) = xmmword_10010A6C0;
  v79 = static MapInteractionModes.zoom.getter();
  static MapInteractionModes.pitch.getter(v79);
  *(_QWORD *)&v196[0] = v78;
  v80 = sub_100003B3C(&qword_10015F630, (uint64_t (*)(uint64_t))&type metadata accessor for MapInteractionModes, (uint64_t)&protocol conformance descriptor for MapInteractionModes);
  v81 = sub_100003E70(&qword_10015F638);
  v82 = sub_100007D40(&qword_10015F640, &qword_10015F638, (uint64_t)&protocol conformance descriptor for [A]);
  v83 = v177;
  v84 = dispatch thunk of SetAlgebra.init<A>(_:)(v196, v81, v82, v9, v80);
  __chkstk_darwin(v84);
  v85 = sub_100003E70(&qword_10015F648);
  v86 = sub_100007D40(&qword_10015F650, &qword_10015F648, (uint64_t)&protocol conformance descriptor for Marker<A>);
  v87 = v170;
  v88 = Map.init<A>(position:bounds:interactionModes:scope:content:)(v73, v76, v83, 0, 1, sub_10004D358, &v149 - 4, v85, v86);
  v89 = static Alignment.center.getter(v88);
  _FrameLayout.init(width:height:alignment:)(v195, 0, 1, 0x4069000000000000, 0, v89, v90);
  v91 = v171;
  v92 = (uint64_t)v176;
  v93 = v172;
  (*(void (**)(char *, char *, uint64_t))(v171 + 16))(v176, v87, v172);
  v94 = (_OWORD *)(v92 + *(int *)(v168 + 36));
  v95 = v195[1];
  *v94 = v195[0];
  v94[1] = v95;
  v94[2] = v195[2];
  (*(void (**)(char *, uint64_t))(v91 + 8))(v87, v93);
  v96 = (char *)v8 + *(int *)(v178 + 20);
  v97 = enum case for RoundedCornerStyle.continuous(_:);
  v98 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 104))(v96, v97, v98);
  __asm { FMOV            V0.2D, #10.0 }
  *v8 = _Q0;
  v104 = (uint64_t)v174;
  v105 = (uint64_t)&v174[*(int *)(v169 + 36)];
  sub_100028390((uint64_t)v8, v105, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v105 + *(int *)(sub_100003E70(&qword_10015E338) + 36)) = 256;
  sub_100007ADC(v92, v104, &qword_10015F600);
  sub_10001BFA4((uint64_t)v8);
  sub_100008194(v92, &qword_10015F600);
  v106 = v190;
  sub_100007ADC(v104, v190, &qword_10015F608);
  *(_BYTE *)(v106 + *(int *)(v173 + 36)) = 1;
  sub_100008194(v104, &qword_10015F608);
  v107 = v180;
  sub_100007A98(v106, v180, &qword_10015F610);
  v108 = *(_OWORD *)(a1 + 80);
  v196[4] = *(_OWORD *)(a1 + 64);
  v196[5] = v108;
  v197 = *(_QWORD *)(a1 + 96);
  v109 = *(_OWORD *)(a1 + 16);
  v196[0] = *(_OWORD *)a1;
  v196[1] = v109;
  v110 = *(_OWORD *)(a1 + 48);
  v196[2] = *(_OWORD *)(a1 + 32);
  v196[3] = v110;
  v191 = sub_100105F2C();
  v192 = v111;
  v112 = sub_10000CB40();
  v113 = Text.init<A>(_:)(&v191, &type metadata for String, v112);
  v115 = v114;
  v117 = v116;
  v119 = v118 & 1;
  v120 = static Font.headline.getter();
  v121 = Text.font(_:)(v120, v113, v115, v119, v117);
  v123 = v122;
  LOBYTE(v87) = v124;
  v126 = v125;
  swift_release(v120);
  sub_10000BFF8(v113, v115, v119);
  v127 = swift_bridgeObjectRelease(v117);
  v128 = static Font.Weight.medium.getter(v127);
  v129 = Text.fontWeight(_:)(*(_QWORD *)&v128, 0, v121, v123, v87 & 1, v126);
  v131 = v130;
  LOBYTE(v117) = v132;
  v134 = v133;
  sub_10000BFF8(v121, v123, v87 & 1);
  v135 = swift_bridgeObjectRelease(v126);
  v191 = v129;
  v192 = v131;
  v193 = v117 & 1;
  v194 = v134;
  v136 = v181;
  EnabledTextSelectability.init()(v135);
  v137 = v186;
  v138 = v183;
  View.textSelection<A>(_:)(v136, &type metadata for Text, v183, &protocol witness table for Text, &protocol witness table for EnabledTextSelectability);
  (*(void (**)(char *, uint64_t))(v182 + 8))(v136, v138);
  sub_10000BFF8(v191, v192, v193);
  swift_bridgeObjectRelease(v194);
  v139 = v185;
  v140 = v184;
  v141 = v187;
  (*(void (**)(char *, char *, uint64_t))(v185 + 32))(v184, v137, v187);
  v142 = v179;
  sub_100007ADC((uint64_t)v189, v179, &qword_10015F620);
  v143 = v190;
  sub_100007ADC(v107, v190, &qword_10015F610);
  v144 = *(void (**)(char *, char *, uint64_t))(v139 + 16);
  v144(v137, v140, v141);
  v145 = v188;
  sub_100007ADC(v142, v188, &qword_10015F620);
  v146 = sub_100003E70(&qword_10015F658);
  sub_100007ADC(v143, v145 + *(int *)(v146 + 48), &qword_10015F610);
  v144((char *)(v145 + *(int *)(v146 + 64)), v137, v141);
  v147 = *(void (**)(char *, uint64_t))(v139 + 8);
  v147(v140, v141);
  sub_100008194(v107, &qword_10015F610);
  sub_100008194((uint64_t)v189, &qword_10015F620);
  v147(v137, v141);
  sub_100008194(v190, &qword_10015F610);
  return sub_100008194(v142, &qword_10015F620);
}

uint64_t sub_10004CC3C(double *a1)
{
  uint64_t v1;
  double v2;
  double v3;
  unint64_t v4;
  _QWORD v6[2];

  v1 = *((_QWORD *)a1 + 5);
  *(double *)v6 = a1[4];
  v6[1] = v1;
  v2 = a1[2];
  v3 = a1[3];
  v4 = sub_10000CB40();
  swift_bridgeObjectRetain(v1);
  return Marker.init<A>(_:systemImage:coordinate:)(v6, 0x662E74656B636974, 0xEB000000006C6C69, &type metadata for String, v4, v2, v3);
}

uint64_t sub_10004CCC8(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t result;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[6];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v2 = type metadata accessor for OpenURLAction(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v6);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[5];
  v32 = a1[4];
  v33 = v13;
  v34 = *((_QWORD *)a1 + 12);
  v14 = a1[1];
  v28 = *a1;
  v29 = v14;
  v15 = a1[3];
  v30 = a1[2];
  v31 = v15;
  sub_100105FBC();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100008194((uint64_t)v8, &qword_100165370);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  type metadata accessor for LocationModule(0);
  sub_10001D83C((uint64_t)v5);
  OpenURLAction.callAsFunction(_:)(v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v17 = *((_QWORD *)a1 + 13);
  v27 = *((_QWORD *)a1 + 12);
  v18 = a1[5];
  v26[4] = a1[4];
  v26[5] = v18;
  v19 = a1[1];
  v26[0] = *a1;
  v26[1] = v19;
  v20 = a1[2];
  v26[3] = a1[3];
  v26[2] = v20;
  if (v17)
  {
    swift_retain(v17);
    sub_1001061F0(v21);
    v22 = swift_release(v17);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v10 + 8))(v12, v9, v22);
  }
  else
  {
    v23 = *((_QWORD *)a1 + 14);
    v24 = type metadata accessor for RemoteViewConfiguration();
    v25 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    result = EnvironmentObject.error()(0, v23, v24, v25);
    __break(1u);
  }
  return result;
}

double sub_10004CEFC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;
  _OWORD v10[8];
  char v11;
  _BYTE v12[136];

  v4 = static VerticalAlignment.center.getter(a1);
  sub_10004CFE0(a1, (uint64_t)v10);
  *(_OWORD *)&v12[103] = v10[6];
  *(_OWORD *)&v12[87] = v10[5];
  *(_OWORD *)&v12[39] = v10[2];
  *(_OWORD *)&v12[23] = v10[1];
  *(_OWORD *)&v12[119] = v10[7];
  v12[135] = v11;
  *(_OWORD *)&v12[55] = v10[3];
  *(_OWORD *)&v12[71] = v10[4];
  *(_OWORD *)&v12[7] = v10[0];
  v5 = *(_OWORD *)&v12[64];
  *(_OWORD *)(a2 + 97) = *(_OWORD *)&v12[80];
  v6 = *(_OWORD *)&v12[112];
  *(_OWORD *)(a2 + 113) = *(_OWORD *)&v12[96];
  *(_OWORD *)(a2 + 129) = v6;
  v7 = *(_OWORD *)v12;
  *(_OWORD *)(a2 + 33) = *(_OWORD *)&v12[16];
  result = *(double *)&v12[32];
  v9 = *(_OWORD *)&v12[48];
  *(_OWORD *)(a2 + 49) = *(_OWORD *)&v12[32];
  *(_OWORD *)(a2 + 65) = v9;
  *(_OWORD *)(a2 + 81) = v5;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0x4022000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 145) = *(_QWORD *)&v12[128];
  *(_OWORD *)(a2 + 17) = v7;
  return result;
}

uint64_t sub_10004CFE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v31 = Image.init(systemName:)(0x637269632E70616DLL, 0xEF6C6C69662E656CLL);
  v30 = static Edge.Set.all.getter(v31);
  v4 = EdgeInsets.init(_all:)(8.0);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  if (qword_10015CE70 != -1)
    swift_once(&qword_10015CE70, sub_1000382F0);
  v11 = qword_10016F668;
  KeyPath = swift_getKeyPath(&unk_10010D930);
  swift_retain(v11);
  v29 = static Alignment.center.getter(v13);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  v18 = *(unsigned __int8 *)(a1 + 88);
  v19 = *(_QWORD *)(a1 + 96);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v19);
  v20 = Text.init(_:tableName:bundle:comment:)(v16, v17, v18, v19, 0, 0, 0, 0, 0, 256);
  v22 = v21;
  v24 = v23;
  v26 = v25 & 1;
  v27 = swift_getKeyPath(&unk_10010D960);
  *(_QWORD *)a2 = v31;
  *(_BYTE *)(a2 + 8) = v30;
  *(double *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v10;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = KeyPath;
  *(_QWORD *)(a2 + 64) = v11;
  *(_QWORD *)(a2 + 72) = v29;
  *(_QWORD *)(a2 + 80) = v15;
  *(_QWORD *)(a2 + 88) = v20;
  *(_QWORD *)(a2 + 96) = v22;
  *(_BYTE *)(a2 + 104) = v26;
  *(_QWORD *)(a2 + 112) = v24;
  *(_QWORD *)(a2 + 120) = v27;
  *(_BYTE *)(a2 + 128) = 0;
  swift_retain(v31);
  swift_retain(KeyPath);
  swift_retain(v11);
  sub_10000C008(v20, v22, v26);
  swift_bridgeObjectRetain(v24);
  swift_retain(v27);
  sub_10000BFF8(v20, v22, v26);
  swift_release(v11);
  swift_release(KeyPath);
  swift_release(v31);
  swift_release(v27);
  return swift_bridgeObjectRelease(v24);
}

uint64_t sub_10004D1F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for LocationModule(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 56));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 96));
  swift_release(*(_QWORD *)(v0 + v4 + 104));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  v7 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10004D2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationModule(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004D31C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LocationModule(0) - 8) + 80);
  return sub_10004CCC8((__int128 *)(v0 + ((v1 + 16) & ~v1)));
}

double sub_10004D348@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10004CEFC(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10004D358()
{
  uint64_t v0;

  return sub_10004CC3C(*(double **)(v0 + 16));
}

unint64_t sub_10004D374()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F660;
  if (!qword_10015F660)
  {
    v1 = sub_1000034AC(&qword_10015F580);
    sub_10004D3F8();
    sub_100007D40(&qword_10015EA08, &qword_10015E9B0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F660);
  }
  return result;
}

unint64_t sub_10004D3F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F668;
  if (!qword_10015F668)
  {
    v1 = sub_1000034AC(&qword_10015F570);
    sub_100007D40(qword_10015F670, &qword_10015F568, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F668);
  }
  return result;
}

uint64_t sub_10004D47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100008194(a1, &qword_100161700);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      v15 = 0;
      return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v9);
  swift_unknownObjectRetain(v9);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  v14 = v13;
  swift_unknownObjectRelease(v9);
  if (!(v14 | v12))
    goto LABEL_6;
  v18[0] = 0;
  v18[1] = 0;
  v15 = v18;
  v18[2] = v12;
  v18[3] = v14;
  return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_10004D5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t WitnessTable;

  v8 = type metadata accessor for CalendarViewModel(0, a5, a6, a4);
  WitnessTable = swift_getWitnessTable(&unk_10010FC38, v8);
  return ObservedObject.projectedValue.getter(a1, a2, v8, WitnessTable);
}

uint64_t sub_10004D60C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t *v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t WitnessTable;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  __int128 v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD v111[2];
  unsigned __int8 v112;
  _OWORD v113[2];
  uint64_t v114;

  v108 = a5;
  v109 = a4;
  v110 = a3;
  v107 = a7;
  v10 = sub_100003E70(&qword_10015DF58);
  __chkstk_darwin(v10);
  v97 = (uint64_t)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100003E70(&qword_10015E338);
  __chkstk_darwin(v95);
  v13 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v98);
  v15 = (__int128 *)((char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_100003E70(&qword_10015E9B8);
  __chkstk_darwin(v16);
  v96 = (uint64_t *)((char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v99 = sub_100003E70(&qword_10015E9C0);
  __chkstk_darwin(v99);
  v101 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100003E70(&qword_10015F6F8);
  __chkstk_darwin(v19);
  v21 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100003E70(&qword_10015F700);
  __chkstk_darwin(v22);
  v24 = (char *)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100003E70(&qword_10015F708);
  v25 = __chkstk_darwin(v102);
  v103 = (char *)&v94 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v21 = static HorizontalAlignment.leading.getter(v25);
  *((_QWORD *)v21 + 1) = 0x4030000000000000;
  v21[16] = 0;
  v27 = (uint64_t)&v21[*(int *)(sub_100003E70(&qword_10015F710) + 44)];
  v104 = a1;
  v105 = a6;
  v106 = a2;
  v28 = sub_10004DD30(a1, a2, v110, v109, v108, a6, v27);
  LOBYTE(a2) = static Edge.Set.all.getter(v28);
  sub_100007ADC((uint64_t)v21, (uint64_t)v24, &qword_10015F6F8);
  v29 = *(int *)(v22 + 36);
  v100 = v24;
  v30 = &v24[v29];
  *v30 = a2;
  *(_OWORD *)(v30 + 8) = 0u;
  *(_OWORD *)(v30 + 24) = 0u;
  v30[40] = 1;
  sub_100008194((uint64_t)v21, &qword_10015F6F8);
  if (qword_10015CE68 != -1)
    swift_once(&qword_10015CE68, sub_1000382DC);
  v31 = qword_10016F660;
  KeyPath = swift_getKeyPath(&unk_10010DA78);
  v33 = v98;
  v34 = (char *)v15 + *(int *)(v98 + 20);
  v35 = enum case for RoundedCornerStyle.continuous(_:);
  v36 = type metadata accessor for RoundedCornerStyle(0);
  v37 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104);
  v37(v34, v35, v36);
  __asm { FMOV            V0.2D, #12.0 }
  v94 = _Q0;
  *v15 = _Q0;
  sub_10001BF60((uint64_t)v15, (uint64_t)v13);
  *(_WORD *)&v13[*(int *)(v95 + 36)] = 256;
  v43 = *(int *)(v16 + 36);
  v44 = v96;
  sub_100007ADC((uint64_t)v13, (uint64_t)v96 + v43, &qword_10015E338);
  *v44 = KeyPath;
  v44[1] = v31;
  swift_retain_n(v31, 2);
  swift_retain(KeyPath);
  sub_100008194((uint64_t)v13, &qword_10015E338);
  sub_10001BFA4((uint64_t)v15);
  swift_release(v31);
  v45 = swift_release(KeyPath);
  v46 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v37)((char *)v15 + *(int *)(v33 + 20), v35, v36, v45);
  *v15 = v94;
  v47 = static Color.black.getter(v46);
  v48 = Color.opacity(_:)(0.1);
  swift_release(v47);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v113, 0, 0, &_swiftEmptyArrayStorage, 0.5, 10.0, 0.0);
  v49 = v97;
  sub_10001BF60((uint64_t)v15, v97);
  v50 = v49 + *(int *)(sub_100003E70(&qword_10015DF60) + 36);
  v51 = v113[1];
  *(_OWORD *)v50 = v113[0];
  *(_OWORD *)(v50 + 16) = v51;
  *(_QWORD *)(v50 + 32) = v114;
  v52 = sub_100003E70(&qword_10015DF68);
  *(_QWORD *)(v49 + *(int *)(v52 + 52)) = v48;
  *(_WORD *)(v49 + *(int *)(v52 + 56)) = 256;
  v53 = static Alignment.center.getter(v52);
  v55 = v54;
  v56 = (uint64_t *)(v49 + *(int *)(sub_100003E70(&qword_10015DF70) + 36));
  *v56 = v53;
  v56[1] = v55;
  v57 = sub_10001BFA4((uint64_t)v15);
  v58 = static Alignment.center.getter(v57);
  v60 = v59;
  v61 = (uint64_t)v101;
  v62 = (uint64_t)&v101[*(int *)(v99 + 36)];
  sub_100007ADC(v49, v62, &qword_10015DF58);
  v63 = (uint64_t *)(v62 + *(int *)(sub_100003E70(&qword_10015E9C8) + 36));
  *v63 = v58;
  v63[1] = v60;
  sub_100007ADC((uint64_t)v44, v61, &qword_10015E9B8);
  sub_100008194(v49, &qword_10015DF58);
  v64 = sub_100008194((uint64_t)v44, &qword_10015E9B8);
  v65 = static Alignment.center.getter(v64);
  v67 = v66;
  v69 = v102;
  v68 = (uint64_t)v103;
  v70 = (uint64_t)&v103[*(int *)(v102 + 36)];
  sub_100007ADC(v61, v70, &qword_10015E9C0);
  v71 = (uint64_t *)(v70 + *(int *)(sub_100003E70(&qword_10015E9B0) + 36));
  *v71 = v65;
  v71[1] = v67;
  v72 = (uint64_t)v100;
  sub_100007ADC((uint64_t)v100, v68, &qword_10015F700);
  sub_100008194(v61, &qword_10015E9C0);
  sub_100008194(v72, &qword_10015F700);
  v74 = v104;
  v73 = v105;
  v75 = v106;
  v76 = v108;
  v79 = sub_10004D5B0(v104, v106, v77, v78, v108, v105);
  __chkstk_darwin(v79);
  v80 = swift_getKeyPath(&unk_10010DAA8);
  v82 = type metadata accessor for CalendarViewModel(255, v76, v73, v81);
  WitnessTable = swift_getWitnessTable(&unk_10010FC38, v82);
  ObservedObject.Wrapper.subscript.getter(v111, v80, v79, WitnessTable);
  swift_release(v80);
  swift_release(v79);
  v84 = v111[0];
  v85 = v111[1];
  v86 = v112;
  v87 = (_QWORD *)swift_allocObject(&unk_10014EF68, 64, 7);
  v87[2] = v76;
  v87[3] = v73;
  v87[4] = v74;
  v87[5] = v75;
  v89 = v109;
  v88 = v110;
  v87[6] = v110;
  v87[7] = v89;
  swift_retain(v88);
  swift_retain(v75);
  v90 = sub_100003E70(&qword_10015F718);
  v91 = sub_10004F348();
  v92 = sub_10004F450();
  View.sheet<A>(isPresented:onDismiss:content:)(v84, v85, v86, 0, 0, sub_10004F338, v87, v69, v90, v91, v92);
  swift_release(v85);
  swift_release(v87);
  swift_release(v84);
  return sub_100008194(v68, &qword_10015F708);
}

uint64_t sub_10004DD30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (**v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t OpaqueTypeConformance2;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (**v108)(char *, uint64_t);
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;

  v113 = a5;
  v114 = a6;
  v115 = a4;
  v116 = a3;
  v112 = a7;
  v105 = sub_100003E70(&qword_10015F588);
  v103 = *(_QWORD *)(v105 - 8);
  v9 = __chkstk_darwin(v105);
  v104 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v101 = (char *)&v98 - v11;
  v102 = type metadata accessor for Divider(0);
  v99 = *(_QWORD *)(v102 - 8);
  v12 = __chkstk_darwin(v102);
  v100 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v109 = (char *)&v98 - v14;
  v15 = sub_100003E70(&qword_10015F740);
  v16 = __chkstk_darwin(v15);
  v110 = (char *)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v111 = (uint64_t)&v98 - v18;
  v19 = type metadata accessor for AccessibilityChildBehavior(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100003E70(&qword_10015F748);
  __chkstk_darwin(v23);
  v25 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100003E70(&qword_10015F750);
  __chkstk_darwin(v106);
  v27 = (char *)&v98 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100003E70(&qword_10015F758);
  v29 = *(_QWORD *)(v28 - 8);
  v107 = v28;
  v108 = (void (**)(char *, uint64_t))v29;
  __chkstk_darwin(v28);
  v31 = (char *)&v98 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100003E70(&qword_10015F760);
  v33 = __chkstk_darwin(v32);
  v35 = (void (**)(char *, uint64_t))((char *)&v98 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = __chkstk_darwin(v33);
  v117 = (uint64_t)&v98 - v37;
  *(_QWORD *)v25 = static HorizontalAlignment.leading.getter(v36);
  *((_QWORD *)v25 + 1) = 0x4014000000000000;
  v25[16] = 0;
  v38 = (uint64_t)&v25[*(int *)(sub_100003E70(&qword_10015F768) + 44)];
  v98 = a1;
  v39 = sub_10004E450(a2, v38);
  v40 = static Alignment.leading.getter(v39);
  sub_1000E4E34(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v27, 0.0, 1, 0.0, 1, v40, v41);
  v42 = sub_100008194((uint64_t)v25, &qword_10015F748);
  static AccessibilityChildBehavior.ignore.getter(v42);
  v43 = sub_10004F530();
  v44 = v106;
  View.accessibilityElement(children:)(v22, v106, v43);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  sub_100008194((uint64_t)v27, &qword_10015F750);
  swift_retain(a2);
  v45 = sub_10008C75C();
  v47 = v46;
  swift_release(a2);
  v118 = v45;
  v119 = v47;
  v48 = sub_10000CB40();
  v49 = Text.init<A>(_:)(&v118, &type metadata for String, v48);
  v51 = v50;
  v53 = v52;
  v55 = v54 & 1;
  v118 = v44;
  v119 = v43;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v118, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v57 = v107;
  View.accessibility(label:)(v49, v51, v55, v53, v107, OpaqueTypeConformance2);
  sub_10000BFF8(v49, v51, v55);
  swift_bridgeObjectRelease(v53);
  v108[1](v31, v57);
  v108 = v35;
  sub_100007A98((uint64_t)v35, v117, &qword_10015F760);
  swift_retain(a2);
  LOBYTE(v55) = sub_10008C8FC();
  swift_release(a2);
  if ((v55 & 1) != 0)
  {
    v59 = v109;
    Divider.init()(v58);
    v60 = (_QWORD *)swift_allocObject(&unk_10014EFB8, 64, 7);
    v61 = v114;
    v60[2] = v113;
    v60[3] = v61;
    v60[4] = v98;
    v60[5] = a2;
    v63 = v115;
    v62 = v116;
    v60[6] = v116;
    v60[7] = v63;
    v64 = __chkstk_darwin(v62);
    v92 = v66;
    v93 = v65;
    v94 = v67;
    v95 = a2;
    v96 = v64;
    v97 = v68;
    swift_retain(v64);
    swift_retain(a2);
    v69 = sub_100003E70(&qword_10015F5B0);
    v70 = sub_100007D40(&qword_10015F5B8, &qword_10015F5B0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v71 = v101;
    Button.init(action:label:)(sub_10004F5E4, v60, sub_10004F5F4, &v98 - 8, v69, v70);
    v72 = v99;
    v73 = *(void (**)(char *, char *, uint64_t))(v99 + 16);
    v74 = v100;
    v75 = v102;
    v73(v100, v59, v102);
    v77 = v103;
    v76 = v104;
    v78 = *(void (**)(char *, char *, uint64_t))(v103 + 16);
    v79 = v105;
    v78(v104, v71, v105);
    v80 = (uint64_t)v110;
    v73(v110, v74, v75);
    v81 = sub_100003E70(&qword_10015F790);
    v78((char *)(v80 + *(int *)(v81 + 48)), v76, v79);
    v82 = *(void (**)(char *, uint64_t))(v77 + 8);
    v82(v71, v79);
    v83 = *(void (**)(char *, uint64_t))(v72 + 8);
    v83(v109, v75);
    v82(v76, v79);
    v83(v74, v75);
    v84 = sub_100003E70(&qword_10015F780);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v80, 0, 1, v84);
    v85 = v111;
    sub_100007A98(v80, v111, &qword_10015F740);
  }
  else
  {
    v86 = sub_100003E70(&qword_10015F780);
    v85 = v111;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 56))(v111, 1, 1, v86);
    v80 = (uint64_t)v110;
  }
  v87 = v117;
  v88 = (uint64_t)v108;
  sub_100007ADC(v117, (uint64_t)v108, &qword_10015F760);
  sub_100007ADC(v85, v80, &qword_10015F740);
  v89 = v112;
  sub_100007ADC(v88, v112, &qword_10015F760);
  v90 = sub_100003E70(&qword_10015F788);
  sub_100007ADC(v80, v89 + *(int *)(v90 + 48), &qword_10015F740);
  sub_100008194(v85, &qword_10015F740);
  sub_100008194(v87, &qword_10015F760);
  sub_100008194(v80, &qword_10015F740);
  return sub_100008194(v88, &qword_10015F760);
}

uint64_t sub_10004E450@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v74 = a2;
  v68 = sub_100003E70(&qword_10015E8E8);
  __chkstk_darwin(v68);
  v4 = (uint64_t *)((char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100003E70(&qword_10015E8F0);
  __chkstk_darwin(v5);
  v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100003E70(&qword_10015E8F8);
  __chkstk_darwin(v66);
  v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100003E70(&qword_10015F1A8);
  __chkstk_darwin(v73);
  v69 = (uint64_t)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100003E70(&qword_10015F618);
  v11 = __chkstk_darwin(v72);
  v75 = (uint64_t)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v71 = (uint64_t)&v66 - v13;
  v67 = a1;
  swift_retain(a1);
  v14 = sub_10008C4E8();
  v16 = v15;
  swift_release(a1);
  v76 = v14;
  v77 = v16;
  v70 = sub_10000CB40();
  v17 = Text.init<A>(_:)(&v76, &type metadata for String, v70);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = enum case for Text.Case.uppercase(_:);
  v25 = type metadata accessor for Text.Case(0);
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 104))(v7, v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v7, 0, 1, v25);
  KeyPath = swift_getKeyPath(&unk_10010DB10);
  sub_100007ADC((uint64_t)v7, (uint64_t)v4 + *(int *)(v68 + 28), &qword_10015E8F0);
  *v4 = KeyPath;
  sub_100007ADC((uint64_t)v4, (uint64_t)&v9[*(int *)(v66 + 36)], &qword_10015E8E8);
  *(_QWORD *)v9 = v17;
  *((_QWORD *)v9 + 1) = v19;
  v9[16] = v23;
  *((_QWORD *)v9 + 3) = v21;
  sub_10000C008(v17, v19, v23);
  swift_bridgeObjectRetain(v21);
  sub_100008194((uint64_t)v4, &qword_10015E8E8);
  sub_100008194((uint64_t)v7, &qword_10015E8F0);
  sub_10000BFF8(v17, v19, v23);
  v28 = swift_bridgeObjectRelease(v21);
  v29 = static Font.subheadline.getter(v28);
  v30 = swift_getKeyPath(&unk_10010DB40);
  v31 = v69;
  sub_100007ADC((uint64_t)v9, v69, &qword_10015E8F8);
  v32 = (uint64_t *)(v31 + *(int *)(v73 + 36));
  *v32 = v30;
  v32[1] = v29;
  sub_100008194((uint64_t)v9, &qword_10015E8F8);
  v33 = v75;
  sub_100007ADC(v31, v75, &qword_10015F1A8);
  *(_QWORD *)(v33 + *(int *)(v72 + 36)) = 0x3FD999999999999ALL;
  sub_100008194(v31, &qword_10015F1A8);
  v34 = v71;
  sub_100007A98(v33, v71, &qword_10015F618);
  v35 = v67;
  swift_retain(v67);
  v36 = sub_10008C5DC();
  v38 = v37;
  swift_release(v35);
  v76 = v36;
  v77 = v38;
  v39 = Text.init<A>(_:)(&v76, &type metadata for String, v70);
  v41 = v40;
  v43 = v42;
  v45 = v44 & 1;
  v46 = static Font.body.getter(v39);
  v47 = Text.font(_:)(v46, v39, v41, v45, v43);
  v49 = v48;
  v51 = v50;
  v53 = v52;
  swift_release(v46);
  sub_10000BFF8(v39, v41, v45);
  v54 = swift_bridgeObjectRelease(v43);
  v55 = static Font.Weight.medium.getter(v54);
  v56 = Text.fontWeight(_:)(*(_QWORD *)&v55, 0, v47, v49, v51 & 1, v53);
  v58 = v57;
  v60 = v59;
  LOBYTE(v45) = v61 & 1;
  sub_10000BFF8(v47, v49, v51 & 1);
  swift_bridgeObjectRelease(v53);
  v62 = v75;
  sub_100007ADC(v34, v75, &qword_10015F618);
  v63 = v74;
  sub_100007ADC(v62, v74, &qword_10015F618);
  v64 = v63 + *(int *)(sub_100003E70(qword_10015F7A8) + 48);
  *(_QWORD *)v64 = v56;
  *(_QWORD *)(v64 + 8) = v58;
  *(_BYTE *)(v64 + 16) = v45;
  *(_QWORD *)(v64 + 24) = v60;
  sub_10000C008(v56, v58, v45);
  swift_bridgeObjectRetain(v60);
  sub_100008194(v34, &qword_10015F618);
  sub_10000BFF8(v56, v58, v45);
  swift_bridgeObjectRelease(v60);
  return sub_100008194(v62, &qword_10015F618);
}

double sub_10004E94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  double result;
  uint64_t v21;

  v12 = sub_100003E70(&qword_100161700);
  __chkstk_darwin(v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  type metadata accessor for MainActor(0);
  swift_retain(a3);
  swift_retain(a2);
  v17 = static MainActor.shared.getter(v16);
  v18 = (_QWORD *)swift_allocObject(&unk_10014EFE0, 80, 7);
  v18[2] = v17;
  v18[3] = &protocol witness table for MainActor;
  v18[4] = a5;
  v18[5] = a6;
  v18[6] = a1;
  v18[7] = a2;
  v18[8] = a3;
  v18[9] = a4;
  v19 = sub_10004D47C((uint64_t)v14, (uint64_t)&unk_10015F7A0, (uint64_t)v18);
  *(_QWORD *)&result = swift_release(v19).n128_u64[0];
  return result;
}

uint64_t sub_10004EA5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[3] = a6;
  v7[4] = a7;
  v7[2] = a5;
  v8 = type metadata accessor for MainActor(0);
  v7[5] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v7[6] = v9;
  v7[7] = v10;
  return swift_task_switch(sub_10004EAD0, v9, v10);
}

uint64_t sub_10004EAD0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = dword_1001614BC;
  swift_retain(*(_QWORD *)(v0 + 16));
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = sub_10004EB24;
  return sub_10008C930();
}

uint64_t sub_10004EB24()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[6];
    v5 = v2[7];
    v6 = sub_10004EC44;
  }
  else
  {
    swift_release(v2[2]);
    v4 = v2[6];
    v5 = v2[7];
    v6 = sub_10004EB90;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10004EB90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 40));
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 16);
    v2 = *(_QWORD *)(v0 + 24);
    swift_retain(v3);
    swift_retain(v2);
    sub_10008C9F4(v4);
    swift_release(v2);
    v5 = swift_release(v3);
    return (*(uint64_t (**)(__n128))(v0 + 8))(v5);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 32);
    v8 = *(_QWORD *)(v0 + 16);
    v9 = type metadata accessor for RemoteViewConfiguration();
    v10 = sub_10000ACDC();
    swift_retain(v8);
    return EnvironmentObject.error()(0, v7, v9, v10);
  }
}

uint64_t sub_10004EC44()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_10004EC84@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  double result;
  __int128 v10;
  _OWORD v11[8];
  char v12;
  _BYTE v13[136];

  v5 = static VerticalAlignment.center.getter(a1);
  sub_10004EDA0(a2, (uint64_t)v11);
  *(_OWORD *)&v13[103] = v11[6];
  *(_OWORD *)&v13[87] = v11[5];
  *(_OWORD *)&v13[39] = v11[2];
  *(_OWORD *)&v13[23] = v11[1];
  *(_OWORD *)&v13[119] = v11[7];
  v13[135] = v12;
  *(_OWORD *)&v13[55] = v11[3];
  *(_OWORD *)&v13[71] = v11[4];
  *(_OWORD *)&v13[7] = v11[0];
  v6 = *(_OWORD *)&v13[64];
  *(_OWORD *)(a3 + 97) = *(_OWORD *)&v13[80];
  v7 = *(_OWORD *)&v13[112];
  *(_OWORD *)(a3 + 113) = *(_OWORD *)&v13[96];
  *(_OWORD *)(a3 + 129) = v7;
  v8 = *(_OWORD *)v13;
  *(_OWORD *)(a3 + 33) = *(_OWORD *)&v13[16];
  result = *(double *)&v13[32];
  v10 = *(_OWORD *)&v13[48];
  *(_OWORD *)(a3 + 49) = *(_OWORD *)&v13[32];
  *(_OWORD *)(a3 + 65) = v10;
  *(_OWORD *)(a3 + 81) = v6;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = 0x4022000000000000;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 145) = *(_QWORD *)&v13[128];
  *(_OWORD *)(a3 + 17) = v8;
  return result;
}

uint64_t sub_10004EDA0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v32 = Image.init(systemName:)(0xD000000000000013, 0x80000001001161E0);
  v31 = static Edge.Set.all.getter(v32);
  v4 = EdgeInsets.init(_all:)(8.0);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  if (qword_10015CE70 != -1)
    swift_once(&qword_10015CE70, sub_1000382F0);
  v11 = qword_10016F668;
  KeyPath = swift_getKeyPath(&unk_10010DA78);
  swift_retain(v11);
  v30 = static Alignment.center.getter(v13);
  v15 = v14;
  v16 = (uint64_t *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 120));
  v17 = *v16;
  v18 = v16[1];
  v19 = *((unsigned __int8 *)v16 + 16);
  v20 = v16[3];
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v20);
  v21 = Text.init(_:tableName:bundle:comment:)(v17, v18, v19, v20, 0, 0, 0, 0, 0, 256);
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  v28 = swift_getKeyPath(&unk_10010DAE0);
  *(_QWORD *)a2 = v32;
  *(_BYTE *)(a2 + 8) = v31;
  *(double *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v10;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = KeyPath;
  *(_QWORD *)(a2 + 64) = v11;
  *(_QWORD *)(a2 + 72) = v30;
  *(_QWORD *)(a2 + 80) = v15;
  *(_QWORD *)(a2 + 88) = v21;
  *(_QWORD *)(a2 + 96) = v23;
  *(_BYTE *)(a2 + 104) = v27;
  *(_QWORD *)(a2 + 112) = v25;
  *(_QWORD *)(a2 + 120) = v28;
  *(_BYTE *)(a2 + 128) = 0;
  swift_retain(v32);
  swift_retain(KeyPath);
  swift_retain(v11);
  sub_10000C008(v21, v23, v27);
  swift_bridgeObjectRetain(v25);
  swift_retain(v28);
  sub_10000BFF8(v21, v23, v27);
  swift_release(v11);
  swift_release(KeyPath);
  swift_release(v32);
  swift_release(v28);
  return swift_bridgeObjectRelease(v25);
}

uint64_t sub_10004EFB0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10008CC58();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10004EFDC(char *a1)
{
  return sub_10008CCE0(*a1);
}

uint64_t sub_10004F000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  id v14;
  void *v15;
  _QWORD *v16;
  id v17;
  __n128 v18;
  uint64_t v19;
  uint64_t result;

  swift_retain(a2);
  v14 = sub_10008CD6C();
  swift_release(a2);
  v15 = *(void **)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 112));
  v16 = (_QWORD *)swift_allocObject(&unk_10014EF90, 64, 7);
  v16[2] = a5;
  v16[3] = a6;
  v16[4] = a1;
  v16[5] = a2;
  v16[6] = a3;
  v16[7] = a4;
  swift_retain(a3);
  v17 = v15;
  v18 = swift_retain(a2);
  v19 = static SafeAreaRegions.all.getter(v18);
  result = static Edge.Set.all.getter(v19);
  *(_QWORD *)a7 = v14;
  *(_QWORD *)(a7 + 8) = v17;
  *(_QWORD *)(a7 + 16) = sub_10004F504;
  *(_QWORD *)(a7 + 24) = v16;
  *(_QWORD *)(a7 + 32) = v19;
  *(_BYTE *)(a7 + 40) = result;
  return result;
}

uint64_t sub_10004F0D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t WitnessTable;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *a1;
  WitnessTable = swift_getWitnessTable(&unk_10010FC38, *a1);
  v4 = ObservedObject.init(wrappedValue:)(a1, v2, WitnessTable);
  v5 = type metadata accessor for RemoteViewConfiguration();
  v6 = sub_10000ACDC();
  EnvironmentObject.init()(v5, v6);
  return v4;
}

uint64_t destroy for ConditionalFontModifier(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 16));
}

_QWORD *sub_10004F17C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v5 = a2[2];
  v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  swift_retain(v3);
  swift_retain(v5);
  return a1;
}

_QWORD *sub_10004F1B8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  return a1;
}

_QWORD *sub_10004F224(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_release(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  a1[3] = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t type metadata accessor for CalendarModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CalendarModule);
}

uint64_t sub_10004F27C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1001195D8, 1);
}

uint64_t sub_10004F2B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10004D60C(*v2, v2[1], v2[2], v2[3], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_10004F2CC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10008CC58();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10004F2F8(char *a1)
{
  return sub_10008CCE0(*a1);
}

uint64_t sub_10004F31C()
{
  return 16;
}

__n128 sub_10004F328(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10004F338@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10004F000(v1[4], v1[5], v1[6], v1[7], v1[2], v1[3], a1);
}

unint64_t sub_10004F348()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F720;
  if (!qword_10015F720)
  {
    v1 = sub_1000034AC(&qword_10015F708);
    sub_10004F3CC();
    sub_100007D40(&qword_10015EA08, &qword_10015E9B0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F720);
  }
  return result;
}

unint64_t sub_10004F3CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F728;
  if (!qword_10015F728)
  {
    v1 = sub_1000034AC(&qword_10015F700);
    sub_100007D40(&qword_10015F730, &qword_10015F6F8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F728);
  }
  return result;
}

unint64_t sub_10004F450()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F738;
  if (!qword_10015F738)
  {
    v1 = sub_1000034AC(&qword_10015F718);
    sub_10004F4BC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F738);
  }
  return result;
}

unint64_t sub_10004F4BC()
{
  unint64_t result;

  result = qword_100162550;
  if (!qword_100162550)
  {
    result = swift_getWitnessTable(&unk_1001112B8, &type metadata for CalendarSheet);
    atomic_store(result, (unint64_t *)&qword_100162550);
  }
  return result;
}

double sub_10004F504()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + 40);
  swift_retain(v1);
  sub_10008CD84();
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

unint64_t sub_10004F530()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F770;
  if (!qword_10015F770)
  {
    v1 = sub_1000034AC(&qword_10015F750);
    sub_100007D40(&qword_10015F778, &qword_10015F748, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F770);
  }
  return result;
}

uint64_t sub_10004F5B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

double sub_10004F5E4()
{
  uint64_t *v0;

  return sub_10004E94C(v0[4], v0[5], v0[6], v0[7], v0[2], v0[3]);
}

double sub_10004F5F4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10004EC84(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_10004F60C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10004F640(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[6];
  v7 = v1[7];
  v9 = v1[8];
  v8 = v1[9];
  v10 = (_QWORD *)swift_task_alloc(dword_10015F79C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1000072F4;
  return sub_10004EA5C(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_10004F6F0()
{
  _QWORD v1[4];

  v1[0] = sub_1000034AC(&qword_10015F708);
  v1[1] = sub_1000034AC(&qword_10015F718);
  v1[2] = sub_10004F348();
  v1[3] = sub_10004F450();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
}

uint64_t sub_10004F760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

void sub_10004F768(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = " ";
  v4[1] = " ";
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_1000500A4(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 0, 5, v4, a1 + 32);
  }
}

_QWORD *sub_10004F7EC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int (*v23)(const void *, uint64_t, uint64_t, __n128);
  void *__dst;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v9 = a2[3];
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v8;
    v10 = a2[5];
    *(_QWORD *)(a1 + 40) = v10;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v12 = a2[7];
    v11 = a2[8];
    v13 = *(int *)(a3 + 44);
    __dst = (void *)(a1 + v13);
    v14 = (char *)a2 + v13;
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = v11;
    v15 = type metadata accessor for URL(0);
    v22 = *(_QWORD *)(v15 - 8);
    v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v22 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v12);
    v16 = swift_bridgeObjectRetain(v11);
    if (v23(v14, 1, v15, v16))
    {
      v17 = sub_100003E70(&qword_100165370);
      memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v22 + 16))(__dst, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v15);
    }
    v19 = *(int *)(a3 + 48);
    v20 = *(uint64_t *)((char *)a2 + v19);
    *(_QWORD *)((char *)v4 + v19) = v20;
    swift_bridgeObjectRetain(v20);
  }
  return v4;
}

uint64_t sub_10004F96C(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[8]);
  v4 = (char *)a1 + *(int *)(a2 + 44);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 48)));
}

uint64_t sub_10004FA0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v20)(const void *, uint64_t, uint64_t, __n128);
  void *__dst;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v6;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  v11 = *(int *)(a3 + 44);
  __dst = (void *)(a1 + v11);
  v12 = (const void *)(a2 + v11);
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v9;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v14 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  v15 = swift_bridgeObjectRetain(v9);
  if (v20(v12, 1, v13, v15))
  {
    v16 = sub_100003E70(&qword_100165370);
    memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(__dst, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  v17 = *(int *)(a3 + 48);
  v18 = *(_QWORD *)(a2 + v17);
  *(_QWORD *)(a1 + v17) = v18;
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t sub_10004FB58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(int *)(a3 + 44);
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v17, v18, v19);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    v24 = sub_100003E70(&qword_100165370);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_7:
  v25 = *(int *)(a3 + 48);
  v26 = *(_QWORD *)(a2 + v25);
  v27 = *(_QWORD *)(a1 + v25);
  *(_QWORD *)(a1 + v25) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  return a1;
}

uint64_t sub_10004FD1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v8 = *(int *)(a3 + 44);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100003E70(&qword_100165370);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 48)) = *(_QWORD *)(a2 + *(int *)(a3 + 48));
  return a1;
}

uint64_t sub_10004FE04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v12);
  v13 = *(int *)(a3 + 44);
  v14 = (void *)(a1 + v13);
  v15 = (void *)(a2 + v13);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v14, v15, v16);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v21 = sub_100003E70(&qword_100165370);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v14, v15, v16);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_7:
  v22 = *(int *)(a3 + 48);
  v23 = *(_QWORD *)(a1 + v22);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);
  swift_bridgeObjectRelease(v23);
  return a1;
}

uint64_t sub_10004FF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004FF94);
}

uint64_t sub_10004FF94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003E70(&qword_100165370);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t sub_100050014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100050020);
}

uint64_t sub_100050020(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100003E70(&qword_100165370);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MusicViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MusicViewModel);
}

void sub_1000500A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015F830)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10015F830);
  }
}

uint64_t sub_1000500F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  v9 = v2 + *(int *)(a1 + 44);
  if (!*(_QWORD *)(v8 + 16))
    return sub_100050A64(v9, a2);
  sub_100050A64(v9, (uint64_t)v7);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10) == 1)
  {
    sub_100050A24((uint64_t)v7);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a2, 1, 1, v10);
  }
  else
  {
    URL.appending(queryItems:)(v8);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v10);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(a2, 0, 1, v10);
  }
}

uint64_t sub_100050218(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[2];
  _OWORD v9[2];

  *(_QWORD *)&v8[0] = *(_QWORD *)(v1 + 64);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = type metadata accessor for Array(0, v2);
  swift_bridgeObjectRetain(*(_QWORD *)&v8[0]);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v3);
  Collection.prefix(_:)(v9, 5, v3, WitnessTable);
  v8[0] = v9[0];
  v8[1] = v9[1];
  v5 = type metadata accessor for ArraySlice(0, v2);
  v6 = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v5);
  return Array.init<A>(_:)(v8, v2, v5, v6);
}

uint64_t sub_1000502C8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 80);
  if (!*(_QWORD *)(v8 + 16))
    return v10(v9);
  v10(v9);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v7, 1, v11) == 1)
  {
    sub_100050A24((uint64_t)v7);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, 1, 1, v11);
  }
  else
  {
    URL.appending(queryItems:)(v8);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v11);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
  }
}

uint64_t sub_1000503E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t WitnessTable;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(char *, uint64_t);
  char v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t);
  void (*v35)(char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v40 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Optional(255, v4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v7, v7, 0, 0);
  v43 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v9 = __chkstk_darwin(TupleTypeMetadata2);
  v11 = (char *)&v37 - v10;
  v45 = *(_QWORD *)(v7 - 8);
  v12 = __chkstk_darwin(v9);
  v42 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v37 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v37 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v37 - v17, a1, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v18, 0, 1, v4);
  v39 = a2;
  v19 = sub_100050218(a2);
  v46 = v19;
  v20 = type metadata accessor for Array(0, v4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v20);
  BidirectionalCollection.last.getter(v20, WitnessTable);
  swift_bridgeObjectRelease(v19);
  v44 = TupleTypeMetadata2;
  v22 = *(int *)(TupleTypeMetadata2 + 48);
  v23 = v45;
  v24 = &v11[v22];
  v25 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
  v25(v11, v18, v7);
  v25(v24, v16, v7);
  v41 = v5;
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v26(v11, 1, v4) != 1)
  {
    v38 = v18;
    v29 = v42;
    v25(v42, v11, v7);
    if (v26(v24, 1, v4) != 1)
    {
      v31 = v40;
      v32 = v41;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v40, v24, v4);
      v33 = dispatch thunk of static Equatable.== infix(_:_:)(v29, v31, v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 24) + 16) + 8));
      v34 = *(void (**)(char *, uint64_t))(v32 + 8);
      v34(v31, v4);
      v35 = *(void (**)(char *, uint64_t))(v45 + 8);
      v35(v16, v7);
      v35(v38, v7);
      v34(v29, v4);
      v35(v11, v7);
      v28 = v33 ^ 1;
      return v28 & 1;
    }
    v30 = *(void (**)(char *, uint64_t))(v45 + 8);
    v30(v16, v7);
    v30(v38, v7);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v4);
    goto LABEL_6;
  }
  v27 = *(void (**)(char *, uint64_t))(v23 + 8);
  v27(v16, v7);
  v27(v18, v7);
  if (v26(v24, 1, v4) != 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v44);
    v28 = 1;
    return v28 & 1;
  }
  v27(v11, v7);
  v28 = 0;
  return v28 & 1;
}

void sub_10005074C(uint64_t a1, uint64_t a2, unsigned __int8 a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  ValueWitnessTable *v20;
  uint64_t v21;
  char *v22;
  NSString v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  void **aBlock;
  uint64_t v29;
  Class (*v30)(uint64_t);
  ValueMetadata *v31;
  _QWORD *(*v32)();
  _QWORD *v33;
  char *v34;

  v8 = sub_100003E70(&qword_10015D3B8);
  v9 = swift_allocObject(v8, 192, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10010A6D0;
  v11 = a4[2];
  v10 = a4[3];
  *(_QWORD *)(v9 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v9 + 64) = &off_100162E68;
  *(_BYTE *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v11;
  *(_QWORD *)(v9 + 48) = v10;
  *(_QWORD *)(v9 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v9 + 104) = &off_100162E40;
  *(_BYTE *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v9 + 144) = &off_100162EC8;
  *(_BYTE *)(v9 + 112) = 9;
  *(_QWORD *)(v9 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v9 + 184) = &off_100162EA0;
  *(_QWORD *)(v9 + 152) = a1;
  *(_QWORD *)(v9 + 160) = a2;
  *(_BYTE *)(v9 + 168) = a3;
  v12 = a4[9];
  if (v12)
  {
    v13 = a4[8];
    v14 = a4[9];
  }
  else
  {
    v13 = 0;
    v14 = 0xE000000000000000;
  }
  v31 = &type metadata for AnalyticsString;
  v32 = (_QWORD *(*)())&off_100162E68;
  LOBYTE(aBlock) = 1;
  v29 = v13;
  v30 = (Class (*)(uint64_t))v14;
  swift_bridgeObjectRetain(v10);
  sub_100005568(a1, a2, a3);
  v34 = (char *)v9;
  v15 = *(_QWORD *)(v9 + 16);
  v16 = *(_QWORD *)(v9 + 24);
  swift_bridgeObjectRetain(v12);
  if (v15 >= v16 >> 1)
    v34 = sub_1000F4CF4((char *)(v16 > 1), v15 + 1, 1, (char *)v9);
  v17 = sub_100005580((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v17);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v20->initializeWithCopy)((uint64_t)v19, v21);
  sub_1000DAD34(v15, (uint64_t)v19, (uint64_t *)&v34, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_100162E68);
  sub_1000055A8(&aBlock);
  v22 = v34;
  v23 = String._bridgeToObjectiveC()();
  v24 = (_QWORD *)swift_allocObject(&unk_10014F0C0, 40, 7);
  v24[2] = 0xD00000000000001ELL;
  v24[3] = 0x80000001001150B0;
  v24[4] = v22;
  v32 = sub_1000055F4;
  v33 = v24;
  aBlock = _NSConcreteStackBlock;
  v29 = 1107296256;
  v30 = sub_1000DACC0;
  v31 = (ValueMetadata *)&unk_10014F0D8;
  v25 = _Block_copy(&aBlock);
  v26 = v33;
  swift_bridgeObjectRetain(v22);
  swift_release(v26);
  AnalyticsSendEventLazy(v23, v25);
  _Block_release(v25);
  swift_bridgeObjectRelease(v22);

}

uint64_t sub_1000509E0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100050A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100050A1C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100050A24(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003E70(&qword_100165370);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100050A64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_100165370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100050AAC()
{
  return sub_100003B3C(&qword_10015F838, (uint64_t (*)(uint64_t))&type metadata accessor for Artwork, (uint64_t)&unk_10010DBEC);
}

uint64_t sub_100050AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  v4 = sub_100003E70(&qword_10015D800);
  v3[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[12] = v5;
  v3[13] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003E70(&qword_10015FA98);
  v3[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_10015FAA0);
  v3[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[16] = v8;
  v3[17] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003E70(&qword_10015FAA8);
  v3[18] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[19] = v10;
  v3[20] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MusicDataRequest.ExecutionMethod(0);
  v3[21] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[22] = v12;
  v3[23] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MusicAuthorization.Status(0);
  v3[24] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v3[25] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[26] = swift_task_alloc(v15);
  v3[27] = swift_task_alloc(v15);
  return swift_task_switch(sub_100050C1C, 0, 0);
}

uint64_t sub_100050C1C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[23];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[22] + 104))(v1, enum case for MusicDataRequest.ExecutionMethod.firstParty(_:), v0[21]);
  static MusicDataRequest.preferredExecutionMethod.setter(v1);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to static MusicAuthorization.request()[1]);
  v0[28] = v2;
  *v2 = v0;
  v2[1] = sub_100050C94;
  return static MusicAuthorization.request()(v0[27]);
}

uint64_t sub_100050C94()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  return swift_task_switch(sub_100050CE8, 0, 0);
}

uint64_t sub_100050CE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  char v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 192);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 200) + 104))(*(_QWORD *)(v0 + 208), enum case for MusicAuthorization.Status.authorized(_:), v1);
  v2 = sub_100003B3C(&qword_10015FAB0, (uint64_t (*)(uint64_t))&type metadata accessor for MusicAuthorization.Status, (uint64_t)&protocol conformance descriptor for MusicAuthorization.Status);
  dispatch thunk of RawRepresentable.rawValue.getter(v1, v2);
  dispatch thunk of RawRepresentable.rawValue.getter(v1, v2);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 192);
  v10 = *(_QWORD *)(v0 + 200);
  if (v3 == v5 && v4 == v6)
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 24), 2);
    v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v11(v8, v9);
    v11(v7, v9);
LABEL_5:
    v14 = *(_QWORD *)(v0 + 144);
    v16 = *(_QWORD *)(v0 + 72);
    v15 = *(_QWORD *)(v0 + 80);
    KeyPath = swift_getKeyPath(&unk_10010DD40);
    swift_bridgeObjectRetain(v15);
    *(_QWORD *)(v0 + 48) = MusicItemID.init(_:)(v16, v15);
    *(_QWORD *)(v0 + 56) = v18;
    v19 = type metadata accessor for Artist(0);
    *(_QWORD *)(v0 + 232) = v19;
    v20 = sub_100003B3C(&qword_10015FAB8, (uint64_t (*)(uint64_t))&type metadata accessor for Artist, (uint64_t)&protocol conformance descriptor for Artist);
    MusicCatalogResourceRequest.init<A>(matching:equalTo:)(KeyPath, v0 + 48, v19, &protocol witness table for Artist, v20);
    v21 = sub_100003E70(&qword_10015FAC0);
    v22 = swift_allocObject(v21, 40, 7);
    *(_OWORD *)(v22 + 16) = xmmword_10010DBB0;
    sub_100003E70(&qword_10015FAC8);
    *(_QWORD *)(v22 + 32) = static PartialMusicProperty<A>.topSongs.getter();
    specialized Array._endMutation()();
    MusicCatalogResourceRequest.properties.setter(v22, v14);
    v23 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
    *(_QWORD *)(v0 + 240) = v23;
    *v23 = v0;
    v23[1] = sub_100050FDC;
    return MusicCatalogResourceRequest.response()(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
  }
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, *(_QWORD *)(v0 + 24), v5, *(_QWORD *)(v0 + 40), 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v4);
  v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v13(v8, v9);
  v13(v7, v9);
  if ((v12 & 1) != 0)
    goto LABEL_5;
  v25 = *(_QWORD *)(v0 + 208);
  v26 = *(_QWORD *)(v0 + 216);
  v27 = *(_QWORD *)(v0 + 184);
  v28 = *(_QWORD *)(v0 + 160);
  v29 = *(_QWORD *)(v0 + 136);
  v31 = *(_QWORD *)(v0 + 104);
  v30 = *(_QWORD *)(v0 + 112);
  v32 = *(_QWORD *)(v0 + 64);
  v33 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
  swift_task_dealloc(v26);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100050FDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000511E8;
  else
    v3 = sub_100051040;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100051040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 88);
  MusicCatalogResourceResponse.items.getter(*(_QWORD *)(v0 + 120));
  sub_10000DC40(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v1 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v1) == 1)
  {
    v8 = *(_QWORD *)(v0 + 152);
    v7 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 112);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    sub_100008194(v10, &qword_10015FA98);
    v11 = 1;
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 232);
    v14 = *(_QWORD *)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 160);
    v16 = *(_QWORD *)(v0 + 136);
    v15 = *(_QWORD *)(v0 + 144);
    v17 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 128);
    v19 = *(_QWORD *)(v0 + 112);
    sub_100052AFC(*(uint64_t **)(v0 + 64));
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v19, v12);
    v11 = 0;
  }
  v21 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 216);
  v22 = *(_QWORD *)(v0 + 184);
  v23 = *(_QWORD *)(v0 + 160);
  v24 = *(_QWORD *)(v0 + 136);
  v26 = *(_QWORD *)(v0 + 104);
  v25 = *(_QWORD *)(v0 + 112);
  v27 = *(_QWORD *)(v0 + 64);
  v28 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, v11, 1, v28);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000511E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 112);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(v4, *(_QWORD *)(v0 + 144));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100051284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  v5[15] = a1;
  v6 = sub_100003E70(&qword_100165370);
  v5[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_10015F8D0);
  v5[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003E70(&qword_10015FB10);
  v5[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Song(0);
  v5[23] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[24] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[25] = swift_task_alloc(v11);
  v5[26] = swift_task_alloc(v11);
  v5[27] = swift_task_alloc(v11);
  v12 = type metadata accessor for Track(0);
  v5[28] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[29] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[30] = swift_task_alloc(v14);
  v5[31] = swift_task_alloc(v14);
  v5[32] = swift_task_alloc(v14);
  v15 = sub_100003E70(&qword_10015FB18);
  v5[33] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v5[34] = v16;
  v5[35] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003E70(&qword_10015FB20);
  v5[36] = v17;
  v5[37] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003E70(&qword_10015FB28);
  v5[38] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100003E70(&qword_10015FB30);
  v5[39] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003E70(&qword_10015D820);
  v5[40] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v5[41] = v21;
  v5[42] = swift_task_alloc((*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Playlist(0);
  v5[43] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v5[44] = v23;
  v5[45] = swift_task_alloc((*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100003E70(&qword_10015FB38);
  v5[46] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v5[47] = v25;
  v5[48] = swift_task_alloc((*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100003E70(&qword_10015FB40);
  v5[49] = v26;
  v27 = *(_QWORD *)(v26 - 8);
  v5[50] = v27;
  v5[51] = swift_task_alloc((*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for MusicDataRequest.ExecutionMethod(0);
  v5[52] = v28;
  v29 = *(_QWORD *)(v28 - 8);
  v5[53] = v29;
  v5[54] = swift_task_alloc((*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for MusicAuthorization.Status(0);
  v5[55] = v30;
  v31 = *(_QWORD *)(v30 - 8);
  v5[56] = v31;
  v32 = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[57] = swift_task_alloc(v32);
  v5[58] = swift_task_alloc(v32);
  return swift_task_switch(sub_100051560, 0, 0);
}

uint64_t sub_100051560()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[54];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[53] + 104))(v1, enum case for MusicDataRequest.ExecutionMethod.firstParty(_:), v0[52]);
  static MusicDataRequest.preferredExecutionMethod.setter(v1);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to static MusicAuthorization.request()[1]);
  v0[59] = v2;
  *v2 = v0;
  v2[1] = sub_1000515D8;
  return static MusicAuthorization.request()(v0[58]);
}

uint64_t sub_1000515D8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 472));
  return swift_task_switch(sub_10005162C, 0, 0);
}

uint64_t sub_10005162C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  char v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = *(_QWORD *)(v0 + 440);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 448) + 104))(*(_QWORD *)(v0 + 456), enum case for MusicAuthorization.Status.authorized(_:), v1);
  v2 = sub_100003B3C(&qword_10015FAB0, (uint64_t (*)(uint64_t))&type metadata accessor for MusicAuthorization.Status, (uint64_t)&protocol conformance descriptor for MusicAuthorization.Status);
  dispatch thunk of RawRepresentable.rawValue.getter(v1, v2);
  dispatch thunk of RawRepresentable.rawValue.getter(v1, v2);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 456);
  v7 = *(_QWORD *)(v0 + 464);
  v9 = *(_QWORD *)(v0 + 440);
  v10 = *(_QWORD *)(v0 + 448);
  if (v3 == v5 && v4 == v6)
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 88), 2);
    v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v11(v8, v9);
    v11(v7, v9);
LABEL_5:
    v14 = *(_QWORD *)(v0 + 392);
    v15 = *(_QWORD *)(v0 + 344);
    v17 = *(_QWORD *)(v0 + 128);
    v16 = *(_QWORD *)(v0 + 136);
    KeyPath = swift_getKeyPath(&unk_10010DD68);
    swift_bridgeObjectRetain(v16);
    *(_QWORD *)(v0 + 64) = MusicItemID.init(_:)(v17, v16);
    *(_QWORD *)(v0 + 72) = v19;
    v20 = sub_100003B3C(&qword_10015FB48, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist, (uint64_t)&protocol conformance descriptor for Playlist);
    MusicCatalogResourceRequest.init<A>(matching:equalTo:)(KeyPath, v0 + 64, v15, &protocol witness table for Playlist, v20);
    v21 = sub_100003E70(&qword_10015FAC0);
    v22 = swift_allocObject(v21, 40, 7);
    *(_OWORD *)(v22 + 16) = xmmword_10010DBB0;
    sub_100003E70(&qword_10015FB50);
    *(_QWORD *)(v22 + 32) = static PartialMusicProperty<A>.tracks.getter();
    specialized Array._endMutation()(v23);
    MusicCatalogResourceRequest.properties.setter(v22, v14);
    v24 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
    *(_QWORD *)(v0 + 480) = v24;
    *v24 = v0;
    v24[1] = sub_100051A68;
    return MusicCatalogResourceRequest.response()(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392));
  }
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, *(_QWORD *)(v0 + 88), v5, *(_QWORD *)(v0 + 56), 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v4);
  v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v13(v8, v9);
  v13(v7, v9);
  if ((v12 & 1) != 0)
    goto LABEL_5;
  if (qword_10015CF60 != -1)
    swift_once(&qword_10015CF60, sub_100105E80);
  v26 = type metadata accessor for Logger(0);
  v27 = sub_100011AC4(v26, (uint64_t)qword_10016F728);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Authorization Error fetching playlist.", v30, 2u);
    swift_slowDealloc(v30, -1, -1);
  }
  v31 = *(_QWORD *)(v0 + 120);

  v32 = type metadata accessor for AppleMusicSetlist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  v33 = *(_QWORD *)(v0 + 456);
  v34 = *(_QWORD *)(v0 + 432);
  v35 = *(_QWORD *)(v0 + 408);
  v36 = *(_QWORD *)(v0 + 384);
  v37 = *(_QWORD *)(v0 + 360);
  v38 = *(_QWORD *)(v0 + 336);
  v40 = *(_QWORD *)(v0 + 304);
  v39 = *(_QWORD *)(v0 + 312);
  v41 = *(_QWORD *)(v0 + 296);
  v42 = *(_QWORD *)(v0 + 280);
  v43 = *(_QWORD *)(v0 + 256);
  v44 = *(_QWORD *)(v0 + 248);
  v45 = *(_QWORD *)(v0 + 240);
  v46 = *(_QWORD *)(v0 + 216);
  v47 = *(_QWORD *)(v0 + 208);
  v48 = *(_QWORD *)(v0 + 200);
  v49 = *(_QWORD *)(v0 + 176);
  v50 = *(_QWORD *)(v0 + 168);
  v51 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100051A68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 480);
  *(_QWORD *)(*(_QWORD *)v1 + 488) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100052380;
  else
    v3 = sub_100051ACC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100051ACC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, _QWORD);
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t, uint64_t);
  void (*v83)(_QWORD, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, uint64_t);
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v109 = (_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 344);
  v1 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 320);
  MusicCatalogResourceResponse.items.getter(*(_QWORD *)(v0 + 368));
  sub_10000DCD8(v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v6, 1, v2) == 1)
  {
    sub_100008194(*(_QWORD *)(v0 + 312), &qword_10015FB30);
    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v7 = *(_QWORD *)(v0 + 136);
    v8 = type metadata accessor for Logger(0);
    sub_100011AC4(v8, (uint64_t)qword_10016F728);
    v9 = swift_bridgeObjectRetain_n(v7, 2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter();
    v12 = os_log_type_enabled(v10, v11);
    v14 = *(_QWORD *)(v0 + 400);
    v13 = *(_QWORD *)(v0 + 408);
    v16 = *(_QWORD *)(v0 + 384);
    v15 = *(_QWORD *)(v0 + 392);
    v17 = *(_QWORD *)(v0 + 368);
    v18 = *(_QWORD *)(v0 + 376);
    v19 = *(_QWORD *)(v0 + 136);
    if (v12)
    {
      v122 = *(_QWORD *)(v0 + 408);
      v20 = *(_QWORD *)(v0 + 128);
      v115 = *(_QWORD *)(v0 + 384);
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v112 = v14;
      v22 = swift_slowAlloc(32, -1);
      v129 = v22;
      *(_DWORD *)v21 = 136315138;
      swift_bridgeObjectRetain(v19);
      *(_QWORD *)(v0 + 96) = sub_1000C7684(v20, v19, &v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v109, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease_n(v19, 3);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Could not find playlist for id %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v115, v17);
      (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v122, v15);
    }
    else
    {

      swift_bridgeObjectRelease_n(v19, 2);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    }
    v28 = *(_QWORD *)(v0 + 120);
    v29 = type metadata accessor for AppleMusicSetlist(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 304);
    v25 = *(_QWORD *)(v0 + 264);
    v24 = *(_QWORD *)(v0 + 272);
    v26 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 32))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 344));
    Playlist.tracks.getter(v26);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v23, 1, v25) == 1)
    {
      v27 = sub_100008194(*(_QWORD *)(v0 + 304), &qword_10015FB28);
      v113 = _swiftEmptyArrayStorage;
    }
    else
    {
      v30 = *(_QWORD *)(v0 + 288);
      v31 = *(_QWORD *)(v0 + 296);
      v32 = *(_QWORD *)(v0 + 264);
      v106 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 272) + 16);
      v106(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 304), v32);
      v33 = sub_100007D40(&qword_10015FB60, &qword_10015FB18, (uint64_t)&protocol conformance descriptor for MusicItemCollection<A>);
      dispatch thunk of Sequence.makeIterator()(v32, v33);
      v126 = (_QWORD *)(v31 + *(int *)(v30 + 36));
      v34 = *v126;
      v35 = sub_100007D40(&qword_10015FB68, &qword_10015FB18, (uint64_t)&protocol conformance descriptor for MusicItemCollection<A>);
      dispatch thunk of Collection.endIndex.getter(v109, v32, v35);
      if (v34 == *(_QWORD *)(v0 + 104))
      {
        v113 = _swiftEmptyArrayStorage;
      }
      else
      {
        v100 = *(_QWORD *)(v0 + 272);
        v102 = v0 + 16;
        v64 = *(_QWORD *)(v0 + 232);
        v97 = enum case for Track.song(_:);
        v113 = _swiftEmptyArrayStorage;
        v65 = v126;
        v105 = v35;
        v98 = *(_QWORD *)(v0 + 192);
        do
        {
          v67 = *(_QWORD *)(v0 + 296);
          v68 = *(_QWORD *)(v0 + 280);
          v70 = *(_QWORD *)(v0 + 256);
          v69 = *(_QWORD *)(v0 + 264);
          v121 = *(_QWORD *)(v0 + 248);
          v125 = *(_QWORD *)(v0 + 240);
          v71 = *(_QWORD *)(v0 + 224);
          v72 = dispatch thunk of Collection.subscript.read(v102, v65, v69, v35);
          v73 = v35;
          v74 = (void (*)(uint64_t, _QWORD))v72;
          v118 = *(void (**)(uint64_t))(v64 + 16);
          v118(v70);
          v74(v102, 0);
          v106(v68, v67, v69);
          dispatch thunk of Collection.formIndex(after:)(v126, v69, v73);
          (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v68, v69);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32))(v121, v70, v71);
          ((void (*)(uint64_t, uint64_t, uint64_t))v118)(v125, v121, v71);
          v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 88))(v125, v71);
          v76 = *(_QWORD *)(v0 + 240);
          v77 = *(_QWORD *)(v0 + 224);
          if (v75 == v97)
          {
            v78 = *(_QWORD *)(v0 + 208);
            v80 = *(_QWORD *)(v0 + 176);
            v79 = *(_QWORD *)(v0 + 184);
            (*(void (**)(_QWORD, uint64_t))(v64 + 96))(*(_QWORD *)(v0 + 240), v77);
            v81 = v98;
            v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 32);
            v82(v78, v76, v79);
            v82(v80, v78, v79);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v98 + 56))(v80, 0, 1, v79);
            v83 = *(void (**)(_QWORD, uint64_t))(v64 + 8);
          }
          else
          {
            v85 = *(_QWORD *)(v0 + 176);
            v84 = *(_QWORD *)(v0 + 184);
            v83 = *(void (**)(_QWORD, uint64_t))(v64 + 8);
            v83(*(_QWORD *)(v0 + 240), v77);
            v81 = v98;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 56))(v85, 1, 1, v84);
          }
          v86 = *(_QWORD *)(v0 + 176);
          v87 = *(_QWORD *)(v0 + 184);
          v83(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 224));
          v65 = v126;
          v35 = v105;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v86, 1, v87) == 1)
          {
            sub_100008194(*(_QWORD *)(v0 + 176), &qword_10015FB10);
          }
          else
          {
            v88 = *(_QWORD *)(v0 + 216);
            v89 = *(_QWORD *)(v0 + 200);
            v90 = *(_QWORD *)(v0 + 184);
            v91 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 32);
            v91(v88, *(_QWORD *)(v0 + 176), v90);
            v91(v89, v88, v90);
            if ((swift_isUniquelyReferenced_nonNull_native(v113) & 1) != 0)
              v92 = (unint64_t)v113;
            else
              v92 = sub_1000F502C(0, v113[2] + 1, 1, (unint64_t)v113);
            v94 = *(_QWORD *)(v92 + 16);
            v93 = *(_QWORD *)(v92 + 24);
            if (v94 >= v93 >> 1)
              v92 = sub_1000F502C(v93 > 1, v94 + 1, 1, v92);
            v95 = *(_QWORD *)(v0 + 200);
            v96 = *(_QWORD *)(v0 + 184);
            *(_QWORD *)(v92 + 16) = v94 + 1;
            v113 = (_QWORD *)v92;
            v91(v92+ ((*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80))+ *(_QWORD *)(v81 + 72) * v94, v95, v96);
            v35 = v105;
          }
          v66 = *v126;
          dispatch thunk of Collection.endIndex.getter(v109, *(_QWORD *)(v0 + 264), v35);
        }
        while (v66 != *(_QWORD *)(v0 + 104));
      }
      v36 = *(_QWORD *)(v0 + 304);
      v37 = *(_QWORD *)(v0 + 264);
      v38 = *(_QWORD *)(v0 + 272);
      sub_100008194(*(_QWORD *)(v0 + 296), &qword_10015FB20);
      v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
    }
    v116 = *(_QWORD *)(v0 + 392);
    v119 = *(_QWORD *)(v0 + 408);
    v39 = *(_QWORD *)(v0 + 376);
    v103 = *(_QWORD *)(v0 + 384);
    v40 = *(_QWORD *)(v0 + 360);
    v41 = *(_QWORD *)(v0 + 368);
    v43 = *(_QWORD *)(v0 + 344);
    v42 = *(_QWORD *)(v0 + 352);
    v45 = *(_QWORD *)(v0 + 160);
    v44 = *(_QWORD *)(v0 + 168);
    v46 = *(_QWORD *)(v0 + 152);
    v107 = *(_QWORD *)(v0 + 144);
    v110 = *(_QWORD *)(v0 + 400);
    v47 = *(_QWORD **)(v0 + 120);
    v48 = Playlist.artwork.getter(v27);
    v49 = Playlist.url.getter(v48);
    v50 = Playlist.standardDescription.getter(v49);
    v123 = v51;
    v127 = v50;
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v43);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v103, v41);
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v119, v116);
    *v47 = v107;
    v47[1] = v46;
    v47[2] = v113;
    v52 = (int *)type metadata accessor for AppleMusicSetlist(0);
    sub_100007A98(v44, (uint64_t)v47 + v52[6], &qword_10015F8D0);
    sub_100007A98(v45, (uint64_t)v47 + v52[7], &qword_100165370);
    v53 = (_QWORD *)((char *)v47 + v52[8]);
    *v53 = v127;
    v53[1] = v123;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(*((_QWORD *)v52 - 1) + 56))(v47, 0, 1, v52);
    swift_bridgeObjectRetain(v46);
  }
  v54 = *(_QWORD *)(v0 + 456);
  v55 = *(_QWORD *)(v0 + 432);
  v56 = *(_QWORD *)(v0 + 408);
  v57 = *(_QWORD *)(v0 + 384);
  v58 = *(_QWORD *)(v0 + 360);
  v59 = *(_QWORD *)(v0 + 336);
  v61 = *(_QWORD *)(v0 + 304);
  v60 = *(_QWORD *)(v0 + 312);
  v62 = *(_QWORD *)(v0 + 296);
  v99 = *(_QWORD *)(v0 + 280);
  v101 = *(_QWORD *)(v0 + 256);
  v104 = *(_QWORD *)(v0 + 248);
  v108 = *(_QWORD *)(v0 + 240);
  v111 = *(_QWORD *)(v0 + 216);
  v114 = *(_QWORD *)(v0 + 208);
  v117 = *(_QWORD *)(v0 + 200);
  v120 = *(_QWORD *)(v0 + 176);
  v124 = *(_QWORD *)(v0 + 168);
  v128 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v99);
  swift_task_dealloc(v101);
  swift_task_dealloc(v104);
  swift_task_dealloc(v108);
  swift_task_dealloc(v111);
  swift_task_dealloc(v114);
  swift_task_dealloc(v117);
  swift_task_dealloc(v120);
  swift_task_dealloc(v124);
  swift_task_dealloc(v128);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100052380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (qword_10015CF60 != -1)
    swift_once(&qword_10015CF60, sub_100105E80);
  v1 = *(_QWORD *)(v0 + 488);
  v2 = type metadata accessor for Logger(0);
  sub_100011AC4(v2, (uint64_t)qword_10016F728);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 488);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 112) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error fetching apple music setlist. Error: %@", v8, 0xCu);
    v11 = sub_100003E70(&qword_10015FB58);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }
  v13 = *(_QWORD *)(v0 + 400);
  v12 = *(_QWORD *)(v0 + 408);
  v14 = *(_QWORD *)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 120);
  swift_errorRelease(*(_QWORD *)(v0 + 488));
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  v16 = type metadata accessor for AppleMusicSetlist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = *(_QWORD *)(v0 + 456);
  v18 = *(_QWORD *)(v0 + 432);
  v19 = *(_QWORD *)(v0 + 408);
  v20 = *(_QWORD *)(v0 + 384);
  v21 = *(_QWORD *)(v0 + 360);
  v22 = *(_QWORD *)(v0 + 336);
  v24 = *(_QWORD *)(v0 + 304);
  v23 = *(_QWORD *)(v0 + 312);
  v25 = *(_QWORD *)(v0 + 296);
  v27 = *(_QWORD *)(v0 + 280);
  v28 = *(_QWORD *)(v0 + 256);
  v29 = *(_QWORD *)(v0 + 248);
  v30 = *(_QWORD *)(v0 + 240);
  v31 = *(_QWORD *)(v0 + 216);
  v32 = *(_QWORD *)(v0 + 208);
  v33 = *(_QWORD *)(v0 + 200);
  v34 = *(_QWORD *)(v0 + 176);
  v35 = *(_QWORD *)(v0 + 168);
  v36 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10005267C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::UInt v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v38 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v7);
  v40 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Artwork(0);
  v39 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v37 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003E70(&qword_10015F8D0);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v1;
  v15 = v2[1];
  swift_bridgeObjectRetain(v15);
  String.hash(into:)(a1, v14, v15);
  swift_bridgeObjectRelease(v15);
  v16 = v2[2];
  v17 = v2[3];
  swift_bridgeObjectRetain(v17);
  String.hash(into:)(a1, v16, v17);
  swift_bridgeObjectRelease(v17);
  v18 = v2[4];
  v19 = *(_QWORD *)(v18 + 16);
  Hasher._combine(_:)(v19);
  if (v19)
  {
    v35 = v5;
    v36 = v4;
    v20 = type metadata accessor for Song(0);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = v18 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v23 = *(_QWORD *)(v21 + 72);
    v24 = sub_100003B3C(&qword_10015F8B8, (uint64_t (*)(uint64_t))&type metadata accessor for Song, (uint64_t)&protocol conformance descriptor for Song);
    v25 = swift_bridgeObjectRetain(v18);
    do
    {
      dispatch thunk of Hashable.hash(into:)(a1, v20, v24, v25);
      v22 += v23;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease(v18);
    v5 = v35;
    v4 = v36;
  }
  v26 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  sub_100007ADC((uint64_t)v2 + *(int *)(v26 + 28), (uint64_t)v13, &qword_10015F8D0);
  v27 = v39;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v13, 1, v9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v28 = v37;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v37, v13, v9);
    Hasher._combine(_:)(1u);
    v29 = sub_100003B3C(&qword_10015F8C8, (uint64_t (*)(uint64_t))&type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
    dispatch thunk of Hashable.hash(into:)(a1, v9, v29, v30);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v9);
  }
  v31 = v40;
  sub_100007ADC((uint64_t)v2 + *(int *)(v26 + 32), v40, &qword_100165370);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v31, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v32 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v38, v31, v4);
    Hasher._combine(_:)(1u);
    v33 = sub_100003B3C(&qword_10015FA40, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v33, v34);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v32, v4);
  }
}

uint64_t sub_1000529F4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_100052A20()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t sub_100052A4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100007ADC(v2 + *(int *)(a1 + 28), a2, &qword_10015F8D0);
}

Swift::Int sub_100052A74()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_10005267C((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100052AB4(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_10005267C((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_100052AEC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100052AFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_BYTE *, _QWORD);
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[32];
  char v53[8];
  unint64_t *v54;

  v2 = v1;
  v4 = sub_100003E70(&qword_10015F8D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for Song(0);
  v44 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003E70(&qword_10015FAD0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = Artist.id.getter(v9);
  v49 = v13;
  v14 = Artist.name.getter();
  v47 = v15;
  v48 = v14;
  Artist.topSongs.getter();
  v16 = sub_100003E70(&qword_10015FAD8);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v11, 1, v16);
  v50 = v12;
  if (v18 == 1)
  {
    sub_100008194((uint64_t)v11, &qword_10015FAD0);
    v19 = (unint64_t *)&_swiftEmptyArrayStorage;
LABEL_12:
    v35 = v48;
    v34 = v49;
    v36 = v47;
    v37 = sub_100003E70(&qword_10015FAE0);
    swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    v38 = MusicAttributeProperty.init(_:)(0x6B726F77747261, 0xE700000000000000);
    Artist.subscript.getter();
    swift_release(v38);
    v39 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
    Artist.url.getter();
    *a1 = v50;
    a1[1] = v34;
    a1[2] = v35;
    a1[3] = v36;
    a1[4] = (uint64_t)v19;
    return sub_100007A98((uint64_t)v6, (uint64_t)a1 + *(int *)(v39 + 28), &qword_10015F8D0);
  }
  v41 = v17;
  v42 = v6;
  v43 = v2;
  v20 = sub_100007D40(&qword_10015FAE8, &qword_10015FAD8, (uint64_t)&protocol conformance descriptor for MusicItemCollection<A>);
  v21 = dispatch thunk of Collection.count.getter(v16, v20);
  v19 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (!v21)
  {
    v23 = v11;
    v24 = v16;
LABEL_11:
    (*(void (**)(char *, uint64_t))(v41 + 8))(v23, v24);
    v6 = v42;
    goto LABEL_12;
  }
  v22 = v21;
  v54 = (unint64_t *)&_swiftEmptyArrayStorage;
  sub_1000542E0(0, v21 & ~(v21 >> 63), 0);
  v19 = v54;
  v23 = v11;
  v24 = v16;
  v51 = v20;
  result = dispatch thunk of Collection.startIndex.getter(v16, v20);
  if ((v22 & 0x8000000000000000) == 0)
  {
    v26 = v22;
    v40 = a1;
    v27 = v45;
    v28 = v46;
    v29 = v51;
    v30 = v44;
    do
    {
      v31 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v52, v53, v24, v29);
      (*(void (**)(char *))(v30 + 16))(v27);
      v31(v52, 0);
      v54 = v19;
      v33 = v19[2];
      v32 = v19[3];
      if (v33 >= v32 >> 1)
      {
        sub_1000542E0(v32 > 1, v33 + 1, 1);
        v19 = v54;
      }
      v19[2] = v33 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))((unint64_t)v19+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(_QWORD *)(v30 + 72) * v33, v27, v28);
      v29 = v51;
      dispatch thunk of Collection.formIndex(after:)(v53, v24, v51);
      --v26;
    }
    while (v26);
    a1 = v40;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100052EBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = sub_100003E70(&qword_10015FA88);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = Song.previewAssets.getter(v3);
  if (!v6)
    goto LABEL_7;
  v7 = v6;
  v8 = *(_QWORD *)(v6 + 16);
  v9 = type metadata accessor for PreviewAsset(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (v8)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v5, v7 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), v9);
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v5, v11, 1, v9);
  swift_bridgeObjectRelease(v7);
  type metadata accessor for PreviewAsset(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    sub_100008194((uint64_t)v5, &qword_10015FA88);
LABEL_7:
    v12 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  PreviewAsset.url.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v5, v9);
}

uint64_t sub_100053008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t *v20;
  char v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v0 = type metadata accessor for ContentRating(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003E70(&qword_10015FA70);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_10015FA78);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v25 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v25 - v15;
  Song.contentRating.getter(v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v13, enum case for ContentRating.explicit(_:), v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v13, 0, 1, v0);
  v17 = (uint64_t)&v6[*(int *)(v4 + 48)];
  sub_100007ADC((uint64_t)v16, (uint64_t)v6, &qword_10015FA78);
  sub_100007ADC((uint64_t)v13, v17, &qword_10015FA78);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v18((uint64_t)v6, 1, v0) == 1)
  {
    sub_100008194((uint64_t)v13, &qword_10015FA78);
    sub_100008194((uint64_t)v16, &qword_10015FA78);
    v19 = v18(v17, 1, v0);
    if (v19 == 1)
      v20 = &qword_10015FA78;
    else
      v20 = &qword_10015FA70;
    if (v19 == 1)
      v21 = -1;
    else
      v21 = 0;
  }
  else
  {
    sub_100007ADC((uint64_t)v6, (uint64_t)v10, &qword_10015FA78);
    if (v18(v17, 1, v0) == 1)
    {
      sub_100008194((uint64_t)v13, &qword_10015FA78);
      sub_100008194((uint64_t)v16, &qword_10015FA78);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
      v21 = 0;
      v20 = &qword_10015FA70;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v17, v0);
      v22 = sub_100003B3C(&qword_10015FA80, (uint64_t (*)(uint64_t))&type metadata accessor for ContentRating, (uint64_t)&protocol conformance descriptor for ContentRating);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v3, v0, v22);
      v23 = *(void (**)(char *, uint64_t))(v1 + 8);
      v23(v3, v0);
      v20 = &qword_10015FA78;
      sub_100008194((uint64_t)v13, &qword_10015FA78);
      sub_100008194((uint64_t)v16, &qword_10015FA78);
      v23(v10, v0);
    }
  }
  sub_100008194((uint64_t)v6, v20);
  return v21 & 1;
}

uint64_t sub_100053308()
{
  return Song.duration.getter();
}

uint64_t sub_100053328(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 16) = sub_100003B3C(&qword_10015F8B8, (uint64_t (*)(uint64_t))&type metadata accessor for Song, (uint64_t)&protocol conformance descriptor for Song);
  result = sub_100003B3C(&qword_10015F8C0, (uint64_t (*)(uint64_t))&type metadata accessor for Song, (uint64_t)&protocol conformance descriptor for Song);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_10005338C(uint64_t a1)
{
  uint64_t result;

  result = sub_100003B3C(&qword_10015F8C8, (uint64_t (*)(uint64_t))&type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for AppleMusicFetcher()
{
  return &type metadata for AppleMusicFetcher;
}

uint64_t *sub_1000533D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[4];
    v10 = *(int *)(a3 + 28);
    __dst = (char *)a1 + v10;
    v11 = (char *)a2 + v10;
    a1[4] = v9;
    v12 = type metadata accessor for Artwork(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v13 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v15 = swift_bridgeObjectRetain(v9);
    if (v14(v11, 1, v12, v15))
    {
      v16 = sub_100003E70(&qword_10015F8D0);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v18 = *(int *)(a3 + 32);
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for URL(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_100003E70(&qword_100165370);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
  }
  return v4;
}

uint64_t sub_100053594(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for Artwork(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v7 = (char *)a1 + *(int *)(a2 + 32);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  return result;
}

_QWORD *sub_10005366C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[4];
  a1[4] = v7;
  v8 = *(int *)(a3 + 28);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Artwork(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v14 = swift_bridgeObjectRetain(v7);
  if (v13(v10, 1, v11, v14))
  {
    v15 = sub_100003E70(&qword_10015F8D0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v16 = *(int *)(a3 + 32);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = sub_100003E70(&qword_100165370);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

_QWORD *sub_1000537F8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[4];
  v11 = a1[4];
  a1[4] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Artwork(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = sub_100003E70(&qword_10015F8D0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  v21 = *(int *)(a3 + 32);
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for URL(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 24))(v22, v23, v24);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    v29 = sub_100003E70(&qword_100165370);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

uint64_t sub_100053A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 28);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Artwork(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100003E70(&qword_10015F8D0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = *(int *)(a3 + 32);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_100003E70(&qword_100165370);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

_QWORD *sub_100053B80(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a1[4];
  a1[4] = a2[4];
  swift_bridgeObjectRelease(v10);
  v11 = *(int *)(a3 + 28);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Artwork(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    v19 = sub_100003E70(&qword_10015F8D0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
LABEL_7:
  v20 = *(int *)(a3 + 32);
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = type metadata accessor for URL(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v21, v22, v23);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    v28 = sub_100003E70(&qword_100165370);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t sub_100053D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100053D94);
}

uint64_t sub_100053D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003E70(&qword_10015F8D0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = sub_100003E70(&qword_100165370);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_100053E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100053E48);
}

uint64_t sub_100053E48(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_100003E70(&qword_10015F8D0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = sub_100003E70(&qword_100165370);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for AppleMusicFetcher.MusicArtist(uint64_t a1)
{
  uint64_t result;

  result = qword_10015F930;
  if (!qword_10015F930)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppleMusicFetcher.MusicArtist);
  return result;
}

void sub_100053F28(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_10010DC30;
  v6[1] = &unk_10010DC30;
  v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100053FE8(319, (unint64_t *)&unk_10015F940, (uint64_t (*)(uint64_t))&type metadata accessor for Artwork);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_100053FE8(319, (unint64_t *)&qword_10015F830, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

void sub_100053FE8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void *sub_100054034()
{
  return &protocol witness table for String;
}

uint64_t sub_100054040()
{
  return sub_100003B3C(&qword_10015F980, type metadata accessor for AppleMusicFetcher.MusicArtist, (uint64_t)&unk_10010DC48);
}

uint64_t sub_10005406C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100003B3C(&qword_10015F9C8, type metadata accessor for AppleMusicFetcher.MusicArtist, (uint64_t)&unk_10010DCA8);
  result = sub_100003B3C(&qword_10015F9D0, type metadata accessor for AppleMusicFetcher.MusicArtist, (uint64_t)&unk_10010DC70);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000540C8()
{
  return sub_100003B3C(&qword_10015F9D8, (uint64_t (*)(uint64_t))&type metadata accessor for Song, (uint64_t)&unk_10010DBD0);
}

uint64_t sub_1000540F4(uint64_t a1)
{
  uint64_t result;

  result = sub_100003B3C(&qword_10015FA10, type metadata accessor for AppleMusicFetcher.MusicArtist, (uint64_t)&unk_10010DCE8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100054130()
{
  return sub_100003B3C(&qword_10015FA18, type metadata accessor for AppleMusicFetcher.MusicArtist, (uint64_t)&unk_10010DD04);
}

uint64_t sub_10005415C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  BOOL v21;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for Song(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v23 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v18 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v23 = *(_QWORD *)(v8 + 72);
      v24 = v8;
      v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      v14 = v11 - 1;
      do
      {
        v15 = a1;
        v13(v10, a1 + v12, v4);
        v16 = a2;
        v13(v7, a2 + v12, v4);
        v17 = sub_100003B3C(&qword_10015FA68, (uint64_t (*)(uint64_t))&type metadata accessor for Song, (uint64_t)&protocol conformance descriptor for Song);
        v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v4, v17);
        v19 = *(void (**)(char *, uint64_t))(v24 + 8);
        v19(v7, v4);
        v19(v10, v4);
        v21 = v14-- != 0;
        if ((v18 & 1) == 0)
          break;
        v12 += v23;
        a2 = v16;
        a1 = v15;
      }
      while (v21);
    }
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_1000542E0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100054790(a1, a2, a3, (_QWORD *)*v3, &qword_10015FAF0, (uint64_t (*)(_QWORD))&type metadata accessor for Song);
  *v3 = result;
  return result;
}

uint64_t sub_10005430C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100054344(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100054328(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100054614(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100054344(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003E70(qword_10015EF80);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000544AC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003E70(&qword_10015FB00);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100054614(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003E70(&qword_10015FB98);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10005477C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100054790(a1, a2, a3, a4, &qword_10015FAF8, (uint64_t (*)(_QWORD))&type metadata accessor for Genre);
}

uint64_t sub_100054790(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100003E70(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24, v25);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

BOOL sub_100054970(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _BOOL8 result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  void (*v48)(_BYTE *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  char v61;
  void (*v62)(_BYTE *, uint64_t);
  _BYTE v63[4];
  int v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  _BYTE *v75;

  v4 = type metadata accessor for URL(0);
  v74 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v68 = &v63[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v71 = sub_100003E70(&qword_10015FA48);
  __chkstk_darwin(v71);
  v75 = &v63[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100003E70(&qword_100165370);
  v8 = __chkstk_darwin(v7);
  v69 = &v63[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v8);
  v72 = &v63[-v11];
  __chkstk_darwin(v10);
  v73 = &v63[-v12];
  v13 = type metadata accessor for Artwork(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v70 = &v63[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = sub_100003E70(&qword_10015FA50);
  __chkstk_darwin(v16);
  v18 = &v63[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = sub_100003E70(&qword_10015F8D0);
  v20 = __chkstk_darwin(v19);
  v22 = &v63[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = __chkstk_darwin(v20);
  v25 = &v63[-v24];
  __chkstk_darwin(v23);
  v27 = &v63[-v26];
  v28 = a1[1];
  v29 = a2[1];
  if (*a1 == *a2 && v28 == v29
    || (v30 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v28, *a2, v29, 0), result = 0, (v30 & 1) != 0))
  {
    if ((v32 = a1[2], v33 = a1[3], v34 = a2[2], v35 = a2[3], v32 == v34) && v33 == v35
      || (v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v34, v35, 0), result = 0, (v36 & 1) != 0))
    {
      if ((sub_10005415C(a1[4], a2[4]) & 1) != 0)
      {
        v66 = v4;
        v67 = v22;
        v37 = v14;
        v38 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
        sub_100007ADC((uint64_t)a1 + *(int *)(v38 + 28), (uint64_t)v27, &qword_10015F8D0);
        v65 = v38;
        v39 = *(int *)(v38 + 28);
        v40 = v37;
        sub_100007ADC((uint64_t)a2 + v39, (uint64_t)v25, &qword_10015F8D0);
        v41 = (uint64_t)&v18[*(int *)(v16 + 48)];
        sub_100007ADC((uint64_t)v27, (uint64_t)v18, &qword_10015F8D0);
        sub_100007ADC((uint64_t)v25, v41, &qword_10015F8D0);
        v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
        if (v42((uint64_t)v18, 1, v13) == 1)
        {
          sub_100008194((uint64_t)v25, &qword_10015F8D0);
          sub_100008194((uint64_t)v27, &qword_10015F8D0);
          if (v42(v41, 1, v13) == 1)
          {
            sub_100008194((uint64_t)v18, &qword_10015F8D0);
LABEL_15:
            v49 = v65;
            v50 = (uint64_t)a1 + *(int *)(v65 + 32);
            v51 = v73;
            sub_100007ADC(v50, (uint64_t)v73, &qword_100165370);
            v52 = v72;
            sub_100007ADC((uint64_t)a2 + *(int *)(v49 + 32), (uint64_t)v72, &qword_100165370);
            v53 = v75;
            v54 = (uint64_t)&v75[*(int *)(v71 + 48)];
            sub_100007ADC((uint64_t)v51, (uint64_t)v75, &qword_100165370);
            sub_100007ADC((uint64_t)v52, v54, &qword_100165370);
            v55 = v74;
            v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
            v57 = v66;
            if (v56((uint64_t)v53, 1, v66) == 1)
            {
              sub_100008194((uint64_t)v52, &qword_100165370);
              sub_100008194((uint64_t)v51, &qword_100165370);
              if (v56(v54, 1, v57) == 1)
              {
                sub_100008194((uint64_t)v53, &qword_100165370);
                return 1;
              }
            }
            else
            {
              v58 = v69;
              sub_100007ADC((uint64_t)v53, (uint64_t)v69, &qword_100165370);
              if (v56(v54, 1, v57) != 1)
              {
                v59 = v68;
                (*(void (**)(_BYTE *, uint64_t, uint64_t))(v55 + 32))(v68, v54, v57);
                v60 = sub_100003B3C(&qword_10015FA58, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
                v61 = dispatch thunk of static Equatable.== infix(_:_:)(v58, v59, v57, v60);
                v62 = *(void (**)(_BYTE *, uint64_t))(v55 + 8);
                v62(v59, v57);
                sub_100008194((uint64_t)v52, &qword_100165370);
                sub_100008194((uint64_t)v51, &qword_100165370);
                v62(v58, v57);
                sub_100008194((uint64_t)v53, &qword_100165370);
                return (v61 & 1) != 0;
              }
              sub_100008194((uint64_t)v52, &qword_100165370);
              sub_100008194((uint64_t)v51, &qword_100165370);
              (*(void (**)(_BYTE *, uint64_t))(v55 + 8))(v58, v57);
            }
            v44 = &qword_10015FA48;
            v45 = (uint64_t)v53;
            goto LABEL_21;
          }
LABEL_13:
          v44 = &qword_10015FA50;
          v45 = (uint64_t)v18;
LABEL_21:
          sub_100008194(v45, v44);
          return 0;
        }
        v43 = (uint64_t)v67;
        sub_100007ADC((uint64_t)v18, (uint64_t)v67, &qword_10015F8D0);
        if (v42(v41, 1, v13) == 1)
        {
          sub_100008194((uint64_t)v25, &qword_10015F8D0);
          sub_100008194((uint64_t)v27, &qword_10015F8D0);
          (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v43, v13);
          goto LABEL_13;
        }
        v46 = v70;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v40 + 32))(v70, v41, v13);
        v47 = sub_100003B3C(&qword_10015FA60, (uint64_t (*)(uint64_t))&type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
        v64 = dispatch thunk of static Equatable.== infix(_:_:)(v43, v46, v13, v47);
        v48 = *(void (**)(_BYTE *, uint64_t))(v40 + 8);
        v48(v46, v13);
        sub_100008194((uint64_t)v25, &qword_10015F8D0);
        sub_100008194((uint64_t)v27, &qword_10015F8D0);
        v48((_BYTE *)v43, v13);
        sub_100008194((uint64_t)v18, &qword_10015F8D0);
        if ((v64 & 1) != 0)
          goto LABEL_15;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_100054FD8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100055A08(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of ArtistFilter.id.getter, a2);
}

uint64_t sub_100054FE8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100055A08(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of PlaylistFilter.id.getter, a2);
}

uint64_t sub_100054FF4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1[12] = a1;
  v2 = sub_100003E70(&qword_10015FAD8);
  v1[13] = v2;
  v1[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100003E70(&qword_10015FB78);
  v1[15] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[16] = v4;
  v1[17] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003E70(&qword_10015FB80);
  v1[18] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[19] = v6;
  v1[20] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MusicDataRequest.ExecutionMethod(0);
  v1[21] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[22] = v8;
  v1[23] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MusicAuthorization.Status(0);
  v1[24] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v1[25] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[26] = swift_task_alloc(v11);
  v1[27] = swift_task_alloc(v11);
  return swift_task_switch(sub_10005510C, 0, 0);
}

uint64_t sub_10005510C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[23];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[22] + 104))(v1, enum case for MusicDataRequest.ExecutionMethod.firstParty(_:), v0[21]);
  static MusicDataRequest.preferredExecutionMethod.setter(v1);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to static MusicAuthorization.request()[1]);
  v0[28] = v2;
  *v2 = v0;
  v2[1] = sub_100055184;
  return static MusicAuthorization.request()(v0[27]);
}

uint64_t sub_100055184()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  return swift_task_switch(sub_1000551D8, 0, 0);
}

uint64_t sub_1000551D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  char v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = *(_QWORD *)(v0 + 192);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 200) + 104))(*(_QWORD *)(v0 + 208), enum case for MusicAuthorization.Status.authorized(_:), v1);
  v2 = sub_100003B3C(&qword_10015FAB0, (uint64_t (*)(uint64_t))&type metadata accessor for MusicAuthorization.Status, (uint64_t)&protocol conformance descriptor for MusicAuthorization.Status);
  dispatch thunk of RawRepresentable.rawValue.getter(v1, v2);
  dispatch thunk of RawRepresentable.rawValue.getter(v1, v2);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 192);
  v10 = *(_QWORD *)(v0 + 200);
  if (v3 == v5 && v4 == v6)
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 64), 2);
    v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v11(v8, v9);
    v11(v7, v9);
    goto LABEL_5;
  }
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, *(_QWORD *)(v0 + 64), v5, *(_QWORD *)(v0 + 80), 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v4);
  v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v13(v8, v9);
  v13(v7, v9);
  if ((v12 & 1) != 0)
  {
LABEL_5:
    v14 = *(_QWORD *)(v0 + 96);
    KeyPath = swift_getKeyPath(&unk_10010DD90);
    v16 = *(_QWORD *)(v14 + 16);
    if (v16)
    {
      v17 = *(_QWORD *)(v0 + 96);
      v18 = v17 + 32;
      swift_bridgeObjectRetain(v17);
      v19 = (char *)_swiftEmptyArrayStorage;
      do
      {
        sub_1000081D0(v18, v0 + 16);
        v21 = *(_QWORD *)(v0 + 40);
        v22 = *(_QWORD *)(v0 + 48);
        sub_100008170((_QWORD *)(v0 + 16), v21);
        v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 24))(v21, v22);
        v25 = v24;
        sub_1000055A8((_QWORD *)(v0 + 16));
        if (v25)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
            v19 = sub_1000F4E14(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
          v27 = *((_QWORD *)v19 + 2);
          v26 = *((_QWORD *)v19 + 3);
          if (v27 >= v26 >> 1)
            v19 = sub_1000F4E14((char *)(v26 > 1), v27 + 1, 1, v19);
          *((_QWORD *)v19 + 2) = v27 + 1;
          v20 = &v19[16 * v27];
          *((_QWORD *)v20 + 4) = v23;
          *((_QWORD *)v20 + 5) = v25;
        }
        v18 += 40;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
      v28 = *((_QWORD *)v19 + 2);
      if (!v28)
        goto LABEL_21;
    }
    else
    {
      v19 = (char *)_swiftEmptyArrayStorage;
      v28 = _swiftEmptyArrayStorage[2];
      if (!v28)
      {
LABEL_21:
        swift_bridgeObjectRelease(v19);
        v38 = type metadata accessor for Song(0);
        v39 = sub_100003B3C(&qword_10015FB88, (uint64_t (*)(uint64_t))&type metadata accessor for Song, (uint64_t)&protocol conformance descriptor for Song);
        MusicCatalogResourceRequest.init<A>(matching:memberOf:)(KeyPath, _swiftEmptyArrayStorage, v38, &protocol witness table for Song, v39);
        v40 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
        *(_QWORD *)(v0 + 232) = v40;
        *v40 = v0;
        v40[1] = sub_100055678;
        return MusicCatalogResourceRequest.response()(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
      }
    }
    sub_100054328(0, v28, 0);
    v29 = v19 + 40;
    do
    {
      v30 = *(v29 - 1);
      v31 = *v29;
      swift_bridgeObjectRetain(*v29);
      v32 = MusicItemID.init(_:)(v30, v31);
      v34 = v33;
      v36 = _swiftEmptyArrayStorage[2];
      v35 = _swiftEmptyArrayStorage[3];
      if (v36 >= v35 >> 1)
        sub_100054328(v35 > 1, v36 + 1, 1);
      _swiftEmptyArrayStorage[2] = v36 + 1;
      v37 = (char *)&_swiftEmptyArrayStorage[2 * v36];
      *((_QWORD *)v37 + 4) = v32;
      *((_QWORD *)v37 + 5) = v34;
      v29 += 2;
      --v28;
    }
    while (v28);
    goto LABEL_21;
  }
  if (qword_10015CF60 != -1)
    swift_once(&qword_10015CF60, sub_100105E80);
  v42 = type metadata accessor for Logger(0);
  v43 = sub_100011AC4(v42, (uint64_t)qword_10016F728);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v46 = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Authorization Error fetching songs.", v46, 2u);
    swift_slowDealloc(v46, -1, -1);
  }

  v47 = *(_QWORD *)(v0 + 208);
  v48 = *(_QWORD *)(v0 + 184);
  v49 = *(_QWORD *)(v0 + 160);
  v50 = *(_QWORD *)(v0 + 136);
  v51 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_100055678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000557D8;
  else
    v3 = sub_1000556DC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000556DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 104);
  MusicCatalogResourceResponse.items.getter(v5);
  v8 = sub_100007D40(&qword_10015FB90, &qword_10015FAD8, (uint64_t)&protocol conformance descriptor for MusicItemCollection<A>);
  v9 = dispatch thunk of Sequence._copyToContiguousArray()(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v10 = *(_QWORD *)(v0 + 208);
  v11 = *(_QWORD *)(v0 + 184);
  v12 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
}

uint64_t sub_1000557D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (qword_10015CF60 != -1)
    swift_once(&qword_10015CF60, sub_100105E80);
  v1 = *(_QWORD *)(v0 + 240);
  v2 = type metadata accessor for Logger(0);
  sub_100011AC4(v2, (uint64_t)qword_10016F728);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 240);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 88) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error fetching songs for setlists. Error: %@", v8, 0xCu);
    v11 = sub_100003E70(&qword_10015FB58);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 240));
    swift_errorRelease(v7);
  }
  v12 = *(_QWORD *)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 144);

  swift_errorRelease(v12);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  v16 = *(_QWORD *)(v0 + 208);
  v17 = *(_QWORD *)(v0 + 184);
  v18 = *(_QWORD *)(v0 + 160);
  v19 = *(_QWORD *)(v0 + 136);
  v20 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void *))(v0 + 8))(&_swiftEmptyArrayStorage);
}

uint64_t sub_1000559FC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100055A08(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of SongFilter.id.getter, a2);
}

uint64_t sub_100055A08@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = a1[3];
  v6 = a1[4];
  sub_100008170(a1, v5);
  result = a2(v5, v6);
  *a3 = result;
  a3[1] = v8;
  return result;
}

uint64_t sub_100055A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for RemoteViewConfiguration.Service(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for RemoteViewConfiguration.Service(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for TourPhotosDefaultView(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TourPhotosDefaultView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TourPhotosDefaultView()
{
  return &type metadata for TourPhotosDefaultView;
}

uint64_t sub_100055BE0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001196A8, 1);
}

void sub_100055BF0(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;

  v7 = static Alignment.bottom.getter();
  v55 = v8;
  v56 = v7;
  sub_100055E48((uint64_t)&v58);
  v10 = v60;
  v11 = v61;
  v12 = v63;
  v53 = v64;
  v54 = v62;
  v13 = v65;
  v51 = v67;
  v52 = v66;
  if ((a3 & 1) != 0)
    v14 = -36.0;
  else
    v14 = 0.0;
  v49 = v58;
  v50 = v59;
  v15 = static Alignment.center.getter(v9);
  v17 = _FrameLayout.init(width:height:alignment:)(&v58, 0, 1, 0x4072800000000000, 0, v15, v16);
  v18 = BYTE8(v58);
  v44 = v59;
  v45 = v58;
  v19 = BYTE8(v59);
  v42 = v61;
  v43 = v60;
  v20 = static Alignment.center.getter(v17);
  v47 = v21;
  v48 = v20;
  swift_bridgeObjectRetain(a2);
  v22 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100116250);
  v40 = v23;
  v41 = v22;
  v25 = v24;
  v39 = v26;
  v27 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002ELL, 0x8000000100116280);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v38 = static Edge.Set.bottom.getter(v27);
  v34 = EdgeInsets.init(_all:)(v14);
  *(_QWORD *)a4 = v56;
  *(_QWORD *)(a4 + 8) = v55;
  *(_OWORD *)(a4 + 16) = v49;
  *(_OWORD *)(a4 + 32) = v50;
  *(_QWORD *)(a4 + 48) = v10;
  *(_QWORD *)(a4 + 56) = v11;
  *(_QWORD *)(a4 + 64) = v54;
  *(_BYTE *)(a4 + 72) = v12;
  *(_QWORD *)(a4 + 80) = v53;
  *(_BYTE *)(a4 + 88) = v13;
  *(_QWORD *)(a4 + 96) = v52;
  *(_QWORD *)(a4 + 104) = v51;
  *(_QWORD *)(a4 + 112) = v45;
  *(_BYTE *)(a4 + 120) = v18;
  *(_QWORD *)(a4 + 128) = v44;
  *(_BYTE *)(a4 + 136) = v19;
  *(_QWORD *)(a4 + 144) = v43;
  *(_QWORD *)(a4 + 152) = v42;
  *(_QWORD *)(a4 + 160) = v41;
  *(_QWORD *)(a4 + 168) = v40;
  *(_BYTE *)(a4 + 176) = v25 & 1;
  *(_QWORD *)(a4 + 184) = v39;
  *(_QWORD *)(a4 + 192) = v27;
  *(_QWORD *)(a4 + 200) = v29;
  *(_BYTE *)(a4 + 208) = v31 & 1;
  *(_QWORD *)(a4 + 216) = v33;
  *(_QWORD *)(a4 + 224) = a1;
  *(_QWORD *)(a4 + 232) = a2;
  *(_QWORD *)(a4 + 240) = v48;
  *(_QWORD *)(a4 + 248) = v47;
  *(_BYTE *)(a4 + 256) = v38;
  *(double *)(a4 + 264) = v34;
  *(_QWORD *)(a4 + 272) = v35;
  *(_QWORD *)(a4 + 280) = v36;
  *(_QWORD *)(a4 + 288) = v37;
  *(_BYTE *)(a4 + 296) = 0;
}

double sub_100055E48@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  double result;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  __int128 v42;

  v2 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v5 + 104))(v4, enum case for Color.RGBColorSpace.sRGB(_:));
  v6 = Color.init(_:red:green:blue:opacity:)(v4, 0.109803922, 0.109803922, 0.117647059, 1.0);
  v7 = sub_100003E70(&qword_10015E0E0);
  v8 = swift_allocObject(v7, 48, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10010A6C0;
  v9 = static Color.clear.getter(v8);
  *(_QWORD *)(v8 + 32) = v9;
  v10 = static Color.white.getter(v9);
  v11 = Color.opacity(_:)(0.1);
  v12 = swift_release(v10);
  *(_QWORD *)(v8 + 40) = v11;
  v38 = v8;
  v13 = specialized Array._endMutation()(v12);
  v14 = v38;
  v15 = static UnitPoint.top.getter(v13);
  v17 = v16;
  v18 = static UnitPoint.bottom.getter();
  v20 = v19;
  Gradient.init(colors:)(v14);
  v22 = LinearGradient.init(gradient:startPoint:endPoint:)(&v34, v21, v15, v17, v18, v20);
  v23 = v34;
  v33 = v35;
  v24 = v36;
  v25 = v37;
  v26 = static Alignment.center.getter(v22);
  _FrameLayout.init(width:height:alignment:)(&v38, 0, 1, 0x4062800000000000, 0, v26, v27);
  v28 = v38;
  v29 = v39;
  v30 = v40;
  v31 = v41;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v23;
  *(_OWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 32) = v24;
  *(_QWORD *)(a1 + 40) = v25;
  *(_QWORD *)(a1 + 48) = v28;
  *(_BYTE *)(a1 + 56) = v29;
  *(_QWORD *)(a1 + 64) = v30;
  *(_BYTE *)(a1 + 72) = v31;
  result = *(double *)&v42;
  *(_OWORD *)(a1 + 80) = v42;
  return result;
}

void sub_100056014(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100055BF0(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), a1);
}

unint64_t sub_100056024()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015FBA0;
  if (!qword_10015FBA0)
  {
    v1 = sub_1000034AC(&qword_10015FBA8);
    sub_100056090();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015FBA0);
  }
  return result;
}

unint64_t sub_100056090()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015FBB0;
  if (!qword_10015FBB0)
  {
    v1 = sub_1000034AC(&qword_10015FBB8);
    sub_100056114();
    sub_100007D40(&qword_10015FBE0, qword_10015FBE8, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015FBB0);
  }
  return result;
}

unint64_t sub_100056114()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015FBC0;
  if (!qword_10015FBC0)
  {
    v1 = sub_1000034AC(&qword_10015FBC8);
    sub_100007D40(&qword_10015FBD0, &qword_10015FBD8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015FBC0);
  }
  return result;
}

uint64_t sub_100056198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

void sub_1000561A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_10010DE40;
  v4[1] = &unk_10010DE58;
  v4[2] = &unk_10010DE70;
  sub_1000569B8(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_10010DE88;
    swift_initStructMetadata(a1, 0, 5, v4, a1 + 48);
  }
}

unint64_t sub_100056230(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_10000E0FC(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v10;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v12 = *(int *)(a3 + 60);
    v13 = (uint64_t *)(a1 + v12);
    v14 = (uint64_t *)(a2 + v12);
    *(_QWORD *)(a1 + 48) = v11;
    swift_retain(v10);
    swift_retain(v11);
    v15 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = 1;
    }
    else
    {
      v19 = *v14;
      *v13 = *v14;
      swift_retain(v19);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v17);
    v20 = *(int *)(a3 + 64);
    v21 = (uint64_t *)(a1 + v20);
    v22 = (uint64_t *)(a2 + v20);
    v18 = *v22;
    v23 = v22[1];
    *v21 = v18;
    v21[1] = v23;
  }
  swift_retain(v18);
  return a1;
}

double sub_100056368(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  sub_10000E138(*a1, a1[1]);
  swift_release(a1[4]);
  swift_release(a1[6]);
  v4 = (uint64_t *)((char *)a1 + *(int *)(a2 + 60));
  v5 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  *(_QWORD *)&result = swift_release(*(uint64_t *)((char *)a1 + *(int *)(a2 + 64))).n128_u64[0];
  return result;
}

uint64_t sub_100056408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10000E0FC(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v11 = *(int *)(a3 + 60);
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  *(_QWORD *)(a1 + 48) = v10;
  swift_retain(v9);
  swift_retain(v10);
  v14 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
    v16 = 1;
  }
  else
  {
    v17 = *v13;
    *v12 = *v13;
    swift_retain(v17);
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v14, v16);
  v18 = *(int *)(a3 + 64);
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  v22 = v20[1];
  *v19 = v21;
  v19[1] = v22;
  swift_retain(v21);
  return a1;
}

uint64_t sub_100056518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10000E0FC(*(_QWORD *)a2, v7);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_10000E138(v9, v10);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  swift_retain(v11);
  swift_release(v12);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v14;
  swift_retain(v14);
  swift_release(v13);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  if (a1 != a2)
  {
    v15 = *(int *)(a3 + 60);
    v16 = (uint64_t *)(a1 + v15);
    v17 = (uint64_t *)(a2 + v15);
    sub_100008194(a1 + v15, &qword_10015D488);
    v18 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
      v20 = 1;
    }
    else
    {
      v21 = *v17;
      *v16 = *v17;
      swift_retain(v21);
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v18, v20);
  }
  v22 = *(int *)(a3 + 64);
  v23 = a1 + v22;
  v24 = (uint64_t *)(a2 + v22);
  v25 = *(_QWORD *)(a1 + v22);
  v26 = *v24;
  *(_QWORD *)(a1 + v22) = *v24;
  swift_retain(v26);
  swift_release(v25);
  *(_QWORD *)(v23 + 8) = v24[1];
  return a1;
}

uint64_t sub_10005667C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(int *)(a3 + 60);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for DismissAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 64)) = *(_OWORD *)(a2 + *(int *)(a3 + 64));
  return a1;
}

uint64_t sub_100056760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_10000E138(v7, v8);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v9;
  swift_release(v10);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 60);
    v13 = (void *)(a1 + v12);
    v14 = (const void *)(a2 + v12);
    sub_100008194(a1 + v12, &qword_10015D488);
    v15 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for DismissAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
      swift_storeEnumTagMultiPayload(v13, v15, 1);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  v17 = *(int *)(a3 + 64);
  v18 = a1 + v17;
  v19 = (_QWORD *)(a2 + v17);
  v20 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = *v19;
  swift_release(v20);
  *(_QWORD *)(v18 + 8) = v19[1];
  return a1;
}

uint64_t sub_10005689C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000568A8);
}

uint64_t sub_1000568A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003E70(&qword_10015D608);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 60), a2, v8);
  }
}

uint64_t sub_100056928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100056934);
}

uint64_t sub_100056934(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = sub_100003E70(&qword_10015D608);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 60), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for VenueEventView(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for VenueEventView);
}

void sub_1000569B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015D698)
  {
    v2 = type metadata accessor for DismissAction(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10015D698);
  }
}

uint64_t sub_100056A0C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v4[2];

  v2 = *(_OWORD *)(a2 + 32);
  v4[0] = *(_OWORD *)(a2 + 16);
  v4[1] = v2;
  return swift_getOpaqueTypeConformance2(v4, &unk_10011973C, 1);
}

void sub_100056A40(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_100056A50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_BYTE *)(*(_QWORD *)(v1 + 32) + 16);
  (*(void (**)(char *))(v3 + 16))(v5);
  if ((v6 & 1) != 0)
  {
    v7 = 1;
  }
  else
  {
    v8 = sub_100056B14(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    v9 = sub_10005E20C();
    swift_release(v8);
    v7 = !v9;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a1);
  return v7 & 1;
}

uint64_t sub_100056B14(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t WitnessTable;
  _OWORD v11[2];

  v4 = *v2;
  v5 = v2[1];
  v6 = *((unsigned __int8 *)v2 + 16);
  v7 = *(_OWORD *)(a1 + 32);
  v11[0] = *(_OWORD *)(a1 + 16);
  v11[1] = v7;
  v8 = type metadata accessor for VenueEventViewModel(0, (uint64_t)v11);
  WitnessTable = swift_getWitnessTable(&unk_10010E1D0, v8);
  return a2(v4, v5, v6, v8, WitnessTable);
}

uint64_t sub_100056B90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __n128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t KeyPath;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  __n128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __n128 v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(char *, uint64_t, uint64_t);
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(uint64_t, char *, uint64_t);
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  __n128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  __n128 v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  __n128 v183;
  uint64_t v184;
  void (*v185)(char *, uint64_t, uint64_t);
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  void (*v192)(char *, char *, uint64_t);
  uint64_t v193;
  char *v194;
  __n128 v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  char *v204;
  __n128 v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __n128 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void (*v223)(uint64_t, uint64_t);
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  char *v267;
  uint64_t v268;
  char *v269;
  char *v270;
  char *v271;
  char *v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  void (*v281)(char *, uint64_t, uint64_t);
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  uint64_t v305;
  void *v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  void *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  void *v319;
  uint64_t v320;
  void *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;

  v265 = a2;
  v2 = *(_QWORD *)(a1 + 24);
  v4 = type metadata accessor for Optional(255, v2);
  v5 = type metadata accessor for Binding(0, v4);
  v263 = *(_QWORD *)(v5 - 8);
  v264 = v5;
  v6 = __chkstk_darwin(v5);
  v262 = (uint64_t *)((char *)&v225 - v7);
  v8 = *(_QWORD *)(a1 - 8);
  v284 = a1;
  v275 = v8;
  v282 = *(_QWORD *)(v8 + 64);
  v9 = __chkstk_darwin(v6);
  v274 = (char *)&v225 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v276 = (char *)&v225 - v11;
  v12 = type metadata accessor for CoordinateSpace(0);
  v280 = *(_QWORD *)(v12 - 8);
  v281 = (void (*)(char *, uint64_t, uint64_t))v12;
  __chkstk_darwin(v12);
  v279 = (uint64_t)&v225 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v283 = type metadata accessor for NavigationPath(255);
  v14 = sub_1000034AC(&qword_10015FC70);
  sub_1000034AC(&qword_10015FC78);
  v15 = type metadata accessor for Array(255, v2);
  v285 = *(_QWORD *)(a1 + 40);
  v268 = *(_QWORD *)(v285 + 16);
  v16 = v268;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v268);
  v18 = sub_1000034AC(&qword_10015FC80);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v15);
  v20 = v16;
  v21 = v2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v20, v2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v307 = v15;
  v308 = (_QWORD *)AssociatedTypeWitness;
  v309 = v18;
  v310 = (void *)WitnessTable;
  v311 = AssociatedConformanceWitness;
  v23 = type metadata accessor for ForEach(255, &v307);
  v24 = type metadata accessor for _ConditionalContent(255);
  v25 = type metadata accessor for Group(255, v24);
  v26 = type metadata accessor for ModifiedContent(255, v25, &type metadata for _PaddingLayout);
  v27 = type metadata accessor for Section(255, v14, v26, &type metadata for EmptyView);
  v28 = sub_10005C954(&qword_10015FC88, &qword_10015FC70, (void (*)(void))sub_10005C930);
  v29 = sub_10005C954(&qword_10015FCA8, &qword_10015FC78, (void (*)(void))sub_10005CA00);
  v325 = sub_10005CA44();
  v30 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v23);
  v323 = v29;
  v324 = v30;
  v322 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v24);
  v320 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v25);
  v321 = &protocol witness table for _PaddingLayout;
  v31 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v26);
  v317 = v28;
  v318 = v31;
  v319 = &protocol witness table for EmptyView;
  v32 = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v27);
  v33 = type metadata accessor for LazyVGrid(255, v27, v32);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v33);
  v36 = type metadata accessor for ObservableScrollView(255, v33, v34, v35);
  v37 = swift_getWitnessTable(&unk_1001103F0, v36);
  v307 = v36;
  v308 = (_QWORD *)v37;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v307, &opaque type descriptor for <<opaque return type of View.scrollDismissesKeyboard(_:)>>, 0);
  v307 = v36;
  v308 = (_QWORD *)v37;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v307, &opaque type descriptor for <<opaque return type of View.scrollDismissesKeyboard(_:)>>, 1);
  v307 = OpaqueTypeMetadata2;
  v308 = (_QWORD *)OpaqueTypeConformance2;
  v40 = swift_getOpaqueTypeMetadata2(255, &v307, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v41 = sub_1000034AC(&qword_10015FCD8);
  v307 = OpaqueTypeMetadata2;
  v308 = (_QWORD *)OpaqueTypeConformance2;
  v42 = swift_getOpaqueTypeConformance2(&v307, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v43 = sub_1000034AC(&qword_10015FCE0);
  v44 = sub_100007D40(&qword_10015FCE8, &qword_10015FCE0, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v307 = v43;
  v308 = (_QWORD *)v44;
  v45 = swift_getOpaqueTypeConformance2(&v307, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v307 = v40;
  v308 = (_QWORD *)v41;
  v309 = v42;
  v310 = (void *)v45;
  v46 = swift_getOpaqueTypeMetadata2(255, &v307, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v232 = v46;
  v307 = v40;
  v308 = (_QWORD *)v41;
  v309 = v42;
  v310 = (void *)v45;
  v231 = swift_getOpaqueTypeConformance2(&v307, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v47 = type metadata accessor for NavigationStack(0, v283, v46, v231);
  v236 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v228 = (char *)&v225 - v48;
  v49 = sub_1000034AC(&qword_10015FCF0);
  v227 = v47;
  v50 = type metadata accessor for ModifiedContent(0, v47, v49);
  v238 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v266 = (uint64_t *)((char *)&v225 - v51);
  v52 = sub_1000034AC(&qword_10015FCF8);
  v230 = v50;
  v53 = type metadata accessor for ModifiedContent(0, v50, v52);
  v243 = *(_QWORD *)(v53 - 8);
  v54 = v53;
  __chkstk_darwin(v53);
  v267 = (char *)&v225 - v55;
  v56 = (_QWORD *)v21;
  v57 = v285;
  v59 = type metadata accessor for EventView(255, v21, v285, v58);
  v60 = swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v47);
  v226 = v60;
  v61 = sub_100007D40(&qword_10015FD00, &qword_10015FCF0, (uint64_t)&unk_10010F810);
  v315 = v60;
  v316 = v61;
  v62 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v50);
  v229 = v62;
  v63 = sub_100007D40(&qword_10015FD08, &qword_10015FCF8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v313 = v62;
  v314 = v63;
  v64 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v54);
  v65 = v59;
  v66 = swift_getWitnessTable(&unk_100113C68, v59);
  v307 = v54;
  v308 = v56;
  v237 = v54;
  v67 = (uint64_t)v56;
  v278 = v56;
  v309 = v65;
  v310 = (void *)v64;
  v68 = v65;
  v233 = v65;
  v234 = v66;
  v235 = v64;
  v69 = v268;
  v311 = v268;
  v312 = v66;
  v70 = swift_getOpaqueTypeMetadata2(0, &v307, &opaque type descriptor for <<opaque return type of View.sheet<A, B>(item:onDismiss:content:)>>, 0);
  v246 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v271 = (char *)&v225 - v71;
  v73 = type metadata accessor for FilterView(255, v67, v57, v72);
  v307 = v54;
  v308 = (_QWORD *)v67;
  v309 = v68;
  v310 = (void *)v64;
  v311 = v69;
  v312 = v66;
  v74 = swift_getOpaqueTypeConformance2(&v307, &opaque type descriptor for <<opaque return type of View.sheet<A, B>(item:onDismiss:content:)>>, 1);
  v75 = swift_getWitnessTable(&unk_10010EAA0, v73);
  v241 = v74;
  v242 = v70;
  v307 = v70;
  v308 = (_QWORD *)v73;
  v76 = (_QWORD *)v73;
  v239 = v73;
  v240 = v75;
  v309 = v74;
  v310 = (void *)v75;
  v77 = v74;
  v78 = (void *)v75;
  v79 = swift_getOpaqueTypeMetadata2(0, &v307, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v248 = *(_QWORD *)(v79 - 8);
  v80 = v79;
  __chkstk_darwin(v79);
  v269 = (char *)&v225 - v81;
  v307 = v70;
  v308 = v76;
  v309 = v77;
  v310 = v78;
  v82 = swift_getOpaqueTypeConformance2(&v307, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v307 = v80;
  v308 = &type metadata for String;
  v83 = v80;
  v244 = v80;
  v309 = v82;
  v310 = &protocol witness table for String;
  v84 = v82;
  v245 = v82;
  v85 = swift_getOpaqueTypeMetadata2(0, &v307, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v252 = *(_QWORD *)(v85 - 8);
  v86 = v85;
  v247 = v85;
  __chkstk_darwin(v85);
  v270 = (char *)&v225 - v87;
  v307 = v83;
  v308 = &type metadata for String;
  v309 = v84;
  v310 = &protocol witness table for String;
  v273 = swift_getOpaqueTypeConformance2(&v307, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v307 = v86;
  v308 = &type metadata for Bool;
  v309 = v273;
  v310 = &protocol witness table for Bool;
  v88 = swift_getOpaqueTypeMetadata2(0, &v307, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v253 = *(_QWORD *)(v88 - 8);
  v251 = v88;
  __chkstk_darwin(v88);
  v272 = (char *)&v225 - v89;
  v91 = type metadata accessor for ModifiedContent(0, v90, &type metadata for _AppearanceActionModifier);
  v92 = *(_QWORD *)(v91 - 8);
  v254 = v91;
  v255 = v92;
  __chkstk_darwin(v91);
  v249 = (char *)&v225 - v93;
  v95 = type metadata accessor for ModifiedContent(0, v94, &type metadata for _AppearanceActionModifier);
  v257 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v250 = (char *)&v225 - v96;
  v97 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v259 = v95;
  v98 = type metadata accessor for ModifiedContent(0, v95, v97);
  v260 = *(_QWORD *)(v98 - 8);
  v261 = v98;
  v99 = __chkstk_darwin(v98);
  v256 = (char *)&v225 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v99);
  v258 = (uint64_t)&v225 - v101;
  v296 = *(_QWORD *)(v284 + 16);
  v102 = v296;
  v103 = v278;
  v297 = v278;
  v277 = *(_QWORD *)(v284 + 32);
  v298 = v277;
  v104 = v286;
  v299 = v285;
  v300 = v286;
  v105 = v228;
  NavigationStack.init<>(root:)(sub_10005CB8C, &v295, v232, v231);
  v106 = sub_10005CB98();
  v107 = v279;
  v109 = v226;
  v108 = v227;
  v232 = v106;
  sub_1000E69A0(v279);
  sub_10008B0F0((uint64_t)&type metadata for NavigationBarWidthPreferenceKey, v107, (uint64_t)sub_10005C0B8, 0, v108, (uint64_t)&type metadata for NavigationBarWidthPreferenceKey, v109, v106, (uint64_t)v266);
  (*(void (**)(uint64_t, void (*)(char *, uint64_t, uint64_t)))(v280 + 8))(v107, v281);
  (*(void (**)(char *, uint64_t))(v236 + 8))(v105, v108);
  v111 = v275;
  v110 = v276;
  v281 = *(void (**)(char *, uint64_t, uint64_t))(v275 + 16);
  v112 = v284;
  v281(v276, v104, v284);
  v113 = *(unsigned __int8 *)(v111 + 80);
  v279 = ((v113 + 48) & ~v113) + v282;
  v280 = (v113 + 48) & ~v113;
  v114 = v280;
  v282 = v113 | 7;
  v115 = (_QWORD *)swift_allocObject(&unk_10014F300, v279, v113 | 7);
  v116 = v102;
  v115[2] = v102;
  v115[3] = v103;
  v117 = v277;
  v118 = v285;
  v115[4] = v277;
  v115[5] = v118;
  v275 = *(_QWORD *)(v111 + 32);
  ((void (*)(char *, char *, uint64_t))v275)((char *)v115 + v114, v110, v112);
  v119 = sub_100003B3C(&qword_10015FD18, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  v120 = (uint64_t)v266;
  v121 = v230;
  View.onPreferenceChange<A>(_:perform:)(&type metadata for NavigationBarWidthPreferenceKey, sub_10005CBE0, v115, v230, &type metadata for NavigationBarWidthPreferenceKey, v229, v232, v119);
  v122 = swift_release(v115);
  (*(void (**)(uint64_t, uint64_t, __n128))(v238 + 8))(v120, v121, v122);
  v123 = sub_100056B14(v112, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  v291 = v116;
  v292 = v103;
  v124 = v117;
  v293 = v117;
  v294 = v118;
  KeyPath = swift_getKeyPath(&unk_10010DF00);
  v307 = v116;
  v308 = v103;
  v283 = v116;
  v309 = v117;
  v310 = (void *)v118;
  v126 = type metadata accessor for VenueEventViewModel(255, (uint64_t)&v307);
  v266 = (_QWORD *)swift_getWitnessTable(&unk_10010E1D0, v126);
  v127 = v262;
  ObservedObject.Wrapper.subscript.getter(v262, KeyPath, v123, v266);
  swift_release(v123);
  swift_release(KeyPath);
  v128 = (_QWORD *)swift_allocObject(&unk_10014F328, 48, 7);
  v128[2] = v116;
  v128[3] = v103;
  v128[4] = v117;
  v128[5] = v118;
  v129 = swift_checkMetadataState(0, v233);
  v130 = v237;
  v131 = v267;
  View.sheet<A, B>(item:onDismiss:content:)(v127, 0, 0, sub_10005CCC0, v128, v237, v103, v129, v235, v268, v234);
  v132 = swift_release(v128);
  (*(void (**)(_QWORD *, uint64_t, __n128))(v263 + 8))(v127, v264, v132);
  (*(void (**)(char *, uint64_t))(v243 + 8))(v131, v130);
  v133 = v284;
  v134 = v286;
  v135 = sub_100056B14(v284, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  v136 = v283;
  v287 = v283;
  v288 = v103;
  v137 = v124;
  v289 = v124;
  v290 = v118;
  v138 = swift_getKeyPath(&unk_10010DF38);
  ObservedObject.Wrapper.subscript.getter(&v307, v138, v135, v266);
  swift_release(v138);
  v139 = swift_release(v135);
  v268 = v307;
  v266 = v308;
  LODWORD(v267) = v309;
  v140 = v276;
  v141 = v134;
  v142 = v134;
  v143 = v281;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v281)(v276, v142, v133, v139);
  v144 = v279;
  v145 = (_QWORD *)swift_allocObject(&unk_10014F350, v279, v282);
  v145[2] = v136;
  v145[3] = v103;
  v146 = v103;
  v147 = v137;
  v145[4] = v137;
  v148 = v285;
  v145[5] = v285;
  v149 = v280;
  v150 = v140;
  v151 = v284;
  ((void (*)(char *, char *, uint64_t))v275)((char *)v145 + v280, v150, v284);
  v143(v274, v141, v151);
  v152 = v144;
  v153 = v282;
  v154 = (_QWORD *)swift_allocObject(&unk_10014F378, v152, v282);
  v154[2] = v283;
  v154[3] = v146;
  v154[4] = v147;
  v154[5] = v148;
  v155 = v151;
  v156 = v151;
  v157 = (void (*)(uint64_t, char *, uint64_t))v275;
  ((void (*)(char *, char *, uint64_t))v275)((char *)v154 + v149, v274, v155);
  v158 = swift_checkMetadataState(0, v239);
  v159 = v268;
  v160 = (uint64_t)v266;
  v161 = v242;
  v162 = v271;
  View.sheet<A>(isPresented:onDismiss:content:)(v268, v266, v267, sub_10005CD38, v145, sub_10005CD48, v154, v242, v158, v241, v240);
  swift_release(v160);
  swift_release(v145);
  swift_release(v154);
  v163 = swift_release(v159);
  (*(void (**)(char *, uint64_t, __n128))(v246 + 8))(v162, v161, v163);
  v164 = v286;
  v165 = sub_100056B14(v156, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v166 = sub_10005E5FC();
  v168 = v167;
  v169 = swift_release(v165);
  v307 = v166;
  v308 = v168;
  v170 = v276;
  v171 = v156;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v281)(v276, v164, v156, v169);
  v172 = v279;
  v173 = swift_allocObject(&unk_10014F3A0, v279, v153);
  v174 = v283;
  v175 = v277;
  v176 = v278;
  *(_QWORD *)(v173 + 16) = v283;
  *(_QWORD *)(v173 + 24) = v176;
  v177 = v285;
  *(_QWORD *)(v173 + 32) = v175;
  *(_QWORD *)(v173 + 40) = v177;
  v178 = v170;
  v157(v173 + v280, v170, v171);
  v179 = v269;
  v180 = v244;
  View.onChange<A>(of:initial:_:)(&v307, 0, sub_10005CDC4, v173, v244, &type metadata for String, v245, &protocol witness table for String);
  swift_release(v173);
  swift_bridgeObjectRelease(v308);
  (*(void (**)(char *, uint64_t))(v248 + 8))(v179, v180);
  v181 = v286;
  v182 = sub_100056B14(v171, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(v173) = sub_10005E5E8();
  v183 = swift_release(v182);
  LOBYTE(v307) = v173 & 1;
  v184 = v171;
  v185 = v281;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v281)(v178, v181, v171, v183);
  v186 = (_QWORD *)swift_allocObject(&unk_10014F3C8, v172, v282);
  v186[2] = v174;
  v186[3] = v176;
  v187 = v277;
  v188 = v285;
  v186[4] = v277;
  v186[5] = v188;
  v189 = v280;
  v190 = v178;
  v191 = v178;
  v192 = (void (*)(char *, char *, uint64_t))v275;
  ((void (*)(char *, char *, uint64_t))v275)((char *)v186 + v280, v190, v184);
  v193 = v247;
  v194 = v270;
  View.onChange<A>(of:initial:_:)(&v307, 0, sub_10005CDD4, v186, v247, &type metadata for Bool, v273, &protocol witness table for Bool);
  v195 = swift_release(v186);
  (*(void (**)(char *, uint64_t, __n128))(v252 + 8))(v194, v193, v195);
  v196 = v284;
  v185(v191, v286, v284);
  v197 = v282;
  v198 = (char *)swift_allocObject(&unk_10014F3F0, v279, v282);
  v199 = v278;
  *((_QWORD *)v198 + 2) = v283;
  *((_QWORD *)v198 + 3) = v199;
  *((_QWORD *)v198 + 4) = v187;
  *((_QWORD *)v198 + 5) = v188;
  v200 = v196;
  v192(&v198[v189], v191, v196);
  v307 = v193;
  v308 = &type metadata for Bool;
  v309 = v273;
  v310 = &protocol witness table for Bool;
  v201 = swift_getOpaqueTypeConformance2(&v307, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v202 = v249;
  v203 = v251;
  v204 = v272;
  View.onAppear(perform:)(sub_10005CE60, v198, v251, v201);
  v205 = swift_release(v198);
  (*(void (**)(char *, uint64_t, __n128))(v253 + 8))(v204, v203, v205);
  v206 = v191;
  v207 = v191;
  v208 = v250;
  v281(v207, v286, v200);
  v209 = (char *)swift_allocObject(&unk_10014F418, v279, v197);
  v210 = v278;
  *((_QWORD *)v209 + 2) = v283;
  *((_QWORD *)v209 + 3) = v210;
  v211 = v285;
  *((_QWORD *)v209 + 4) = v277;
  *((_QWORD *)v209 + 5) = v211;
  v192(&v209[v280], v206, v200);
  v305 = v201;
  v306 = &protocol witness table for _AppearanceActionModifier;
  v212 = v254;
  v213 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v254);
  View.onDisappear(perform:)(sub_10005CE70, v209, v212, v213);
  v214 = swift_release(v209);
  (*(void (**)(char *, uint64_t, __n128))(v255 + 8))(v202, v212, v214);
  if (qword_10015CF40 != -1)
    swift_once(&qword_10015CF40, sub_100105DD0);
  v215 = qword_10016F6E8;
  v216 = unk_10016F6F0;
  v303 = v213;
  v304 = &protocol witness table for _AppearanceActionModifier;
  v217 = v259;
  v218 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v259);
  v219 = (uint64_t)v256;
  View.accessibilityIdentifier(_:)(v215, v216, v217, v218);
  (*(void (**)(char *, uint64_t))(v257 + 8))(v208, v217);
  v220 = sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v301 = v218;
  v302 = v220;
  v221 = v261;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v261);
  v222 = v258;
  sub_1000F257C(v219, v221, v258);
  v223 = *(void (**)(uint64_t, uint64_t))(v260 + 8);
  v223(v219, v221);
  sub_1000E3B88(v222, v221, v265);
  return ((uint64_t (*)(uint64_t, uint64_t))v223)(v222, v221);
}

uint64_t sub_100057E7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v37;
  uint64_t v38;
  uint64_t OpaqueTypeConformance2;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  double v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119[8];
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125[8];
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v117 = a4;
  v116 = a2;
  v118 = a1;
  v114 = a6;
  v113 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v112 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v111 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for ScrollDismissesKeyboardMode(0);
  v109 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v108 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = a2;
  v141 = a3;
  v142 = a4;
  v143 = a5;
  v103 = a5;
  v106 = type metadata accessor for VenueEventView(0, (uint64_t)&v140);
  v105 = *(_QWORD *)(v106 - 8);
  v107 = *(_QWORD *)(v105 + 64);
  __chkstk_darwin(v106);
  v104 = (char *)&v83 - v12;
  v13 = sub_1000034AC(&qword_10015FC70);
  sub_1000034AC(&qword_10015FC78);
  v14 = type metadata accessor for Array(255, a3);
  v15 = *(_QWORD *)(a5 + 16);
  v115 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v15);
  v17 = sub_1000034AC(&qword_10015FC80);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v14);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v15, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v140 = v14;
  v141 = AssociatedTypeWitness;
  v142 = v17;
  v143 = WitnessTable;
  v144 = AssociatedConformanceWitness;
  v20 = type metadata accessor for ForEach(255, &v140);
  v21 = type metadata accessor for _ConditionalContent(255);
  v22 = type metadata accessor for Group(255, v21);
  v23 = type metadata accessor for ModifiedContent(255, v22, &type metadata for _PaddingLayout);
  v24 = type metadata accessor for Section(255, v13, v23, &type metadata for EmptyView);
  v25 = sub_10005C954(&qword_10015FC88, &qword_10015FC70, (void (*)(void))sub_10005C930);
  v26 = sub_10005C954(&qword_10015FCA8, &qword_10015FC78, (void (*)(void))sub_10005CA00);
  v139 = sub_10005CA44();
  v27 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v20);
  v137 = v26;
  v138 = v27;
  v136 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v21);
  v134 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v22);
  v135 = &protocol witness table for _PaddingLayout;
  v28 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v23);
  v131 = v25;
  v132 = v28;
  v133 = &protocol witness table for EmptyView;
  v29 = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v24);
  v30 = type metadata accessor for LazyVGrid(255, v24, v29);
  v98 = v30;
  v99 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v30);
  v32 = type metadata accessor for ObservableScrollView(0, v30, v99, v31);
  v102 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v97 = (uint64_t)&v83 - v33;
  v34 = swift_getWitnessTable(&unk_1001103F0, v32);
  v140 = v32;
  v141 = v34;
  v95 = v32;
  v35 = v34;
  v96 = v34;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v140, &opaque type descriptor for <<opaque return type of View.scrollDismissesKeyboard(_:)>>, 0);
  v101 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v37 = OpaqueTypeMetadata2;
  __chkstk_darwin(OpaqueTypeMetadata2);
  v94 = (char *)&v83 - v38;
  v140 = v32;
  v141 = v35;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v140, &opaque type descriptor for <<opaque return type of View.scrollDismissesKeyboard(_:)>>, 1);
  v140 = v37;
  v141 = OpaqueTypeConformance2;
  v40 = v37;
  v90 = v37;
  v41 = OpaqueTypeConformance2;
  v91 = OpaqueTypeConformance2;
  v42 = swift_getOpaqueTypeMetadata2(0, &v140, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v100 = *(_QWORD *)(v42 - 8);
  v43 = v42;
  v89 = v42;
  __chkstk_darwin(v42);
  v92 = (char *)&v83 - v44;
  v45 = sub_1000034AC(&qword_10015FCD8);
  v88 = v45;
  v140 = v40;
  v141 = v41;
  v46 = swift_getOpaqueTypeConformance2(&v140, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v87 = v46;
  v47 = sub_1000034AC(&qword_10015FCE0);
  v48 = sub_100007D40(&qword_10015FCE8, &qword_10015FCE0, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v140 = v47;
  v141 = v48;
  v86 = swift_getOpaqueTypeConformance2(&v140, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v140 = v43;
  v141 = v45;
  v142 = v46;
  v143 = v86;
  v49 = swift_getOpaqueTypeMetadata2(0, &v140, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v93 = *(_QWORD *)(v49 - 8);
  v50 = __chkstk_darwin(v49);
  v84 = (char *)&v83 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  v85 = (uint64_t)&v83 - v52;
  v53 = v116;
  v54 = v115;
  v126 = v116;
  v127 = v115;
  v55 = v117;
  v56 = v103;
  v128 = v117;
  v129 = v103;
  v130 = v118;
  v57 = v105;
  v58 = v104;
  v59 = v106;
  (*(void (**)(char *))(v105 + 16))(v104);
  v60 = *(unsigned __int8 *)(v57 + 80);
  v61 = (v60 + 48) & ~v60;
  v62 = (char *)swift_allocObject(&unk_10014F490, v61 + v107, v60 | 7);
  *((_QWORD *)v62 + 2) = v53;
  *((_QWORD *)v62 + 3) = v54;
  *((_QWORD *)v62 + 4) = v55;
  *((_QWORD *)v62 + 5) = v56;
  v63 = (*(uint64_t (**)(char *, char *, uint64_t))(v57 + 32))(&v62[v61], v58, v59);
  v64 = static Axis.Set.vertical.getter(v63);
  v65 = v97;
  v66 = sub_100099298(v64, 0, (void (*)(__n128))sub_10005CF88, (uint64_t)v125, (uint64_t)sub_10005CF98, (uint64_t)v62, v98, v99, v97);
  v67 = v108;
  static ScrollDismissesKeyboardMode.immediately.getter(v66);
  v68 = v94;
  v69 = v95;
  View.scrollDismissesKeyboard(_:)(v67, v95, v96);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v67, v110);
  (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v65, v69);
  v70 = v112;
  v71 = v111;
  v72 = v113;
  (*(void (**)(char *, _QWORD, uint64_t))(v112 + 104))(v111, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v113);
  v73 = v92;
  v74 = v90;
  View.navigationBarTitleDisplayMode(_:)(v71, v90, v91);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v72);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v68, v74);
  v120 = v116;
  v121 = v115;
  v122 = v117;
  v123 = v56;
  v124 = v118;
  v75 = (uint64_t)v84;
  v76 = v89;
  v77 = v88;
  v78 = v87;
  v79 = v86;
  View.toolbar<A>(content:)(sub_10005D018, v119, v89, v88, v87, v86);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v73, v76);
  v140 = v76;
  v141 = v77;
  v142 = v78;
  v143 = v79;
  swift_getOpaqueTypeConformance2(&v140, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v80 = v85;
  sub_1000F257C(v75, v49, v85);
  v81 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
  v81(v75, v49);
  sub_1000E3B88(v80, v49, v114);
  return ((uint64_t (*)(uint64_t, uint64_t))v81)(v80, v49);
}

uint64_t sub_100058778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[16];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD v67[6];

  v44 = a5;
  v50 = a4;
  v48 = a2;
  v49 = a1;
  v51 = a6;
  v8 = type metadata accessor for PinnedScrollableViews(0);
  __chkstk_darwin(v8);
  v47 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for GridItem.Size(0);
  v45 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v11 = (_OWORD *)((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_1000034AC(&qword_10015FC70);
  sub_1000034AC(&qword_10015FC78);
  v13 = type metadata accessor for Array(255, a3);
  v14 = *(_QWORD *)(a5 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v14);
  v16 = sub_1000034AC(&qword_10015FC80);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v13);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v14, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v67[0] = v13;
  v67[1] = AssociatedTypeWitness;
  v67[2] = v16;
  v67[3] = WitnessTable;
  v67[4] = AssociatedConformanceWitness;
  v19 = type metadata accessor for ForEach(255, v67);
  v20 = type metadata accessor for _ConditionalContent(255);
  v21 = type metadata accessor for Group(255, v20);
  v22 = type metadata accessor for ModifiedContent(255, v21, &type metadata for _PaddingLayout);
  v23 = type metadata accessor for Section(255, v12, v22, &type metadata for EmptyView);
  v24 = sub_10005C954(&qword_10015FC88, &qword_10015FC70, (void (*)(void))sub_10005C930);
  v25 = sub_10005C954(&qword_10015FCA8, &qword_10015FC78, (void (*)(void))sub_10005CA00);
  v66 = sub_10005CA44();
  v26 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v19);
  v64 = v25;
  v65 = v26;
  v63 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v20);
  v61 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v21);
  v62 = &protocol witness table for _PaddingLayout;
  v27 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v22);
  v58 = v24;
  v59 = v27;
  v60 = &protocol witness table for EmptyView;
  v28 = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v23);
  v29 = type metadata accessor for LazyVGrid(0, v23, v28);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v44 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v35 = (char *)&v44 - v34;
  v36 = sub_100003E70(&qword_10015FDF8);
  v37 = type metadata accessor for GridItem(0);
  v38 = swift_allocObject(v36, ((*(unsigned __int8 *)(*(_QWORD *)(v37 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v37 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v37 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v37 - 8) + 80) | 7);
  *(_OWORD *)(v38 + 16) = xmmword_10010ACC0;
  *v11 = xmmword_10010B410;
  (*(void (**)(_OWORD *, _QWORD, uint64_t))(v45 + 104))(v11, enum case for GridItem.Size.flexible(_:), v46);
  v39 = GridItem.init(_:spacing:alignment:)(v11, 0, 0, 0, 0, 1);
  v53 = v48;
  v54 = a3;
  v55 = v50;
  v56 = v44;
  v57 = v49;
  v40 = static HorizontalAlignment.center.getter(v39);
  v41 = v47;
  sub_100091BC0();
  LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)(v38, v40, 0, 0, v41, sub_10005D5D4, v52, v23, v28);
  swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v29);
  sub_1000F257C((uint64_t)v33, v29, (uint64_t)v35);
  v42 = *(void (**)(char *, uint64_t))(v30 + 8);
  v42(v33, v29);
  sub_1000E3B88((uint64_t)v35, v29, v51);
  return ((uint64_t (*)(char *, uint64_t))v42)(v35, v29);
}

uint64_t sub_100058C30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[16];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t AssociatedTypeWitness;
  uint64_t v55;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v29 = a4;
  v27 = a2;
  v28 = a1;
  v31 = a6;
  v26 = sub_1000034AC(&qword_10015FC70);
  sub_1000034AC(&qword_10015FC78);
  v8 = type metadata accessor for Array(255, a3);
  v9 = *(_QWORD *)(a5 + 16);
  v53 = v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v9);
  v55 = sub_1000034AC(&qword_10015FC80);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v10 = type metadata accessor for ForEach(255, &v53);
  v11 = type metadata accessor for _ConditionalContent(255);
  v12 = type metadata accessor for Group(255, v11);
  v13 = type metadata accessor for ModifiedContent(255, v12, &type metadata for _PaddingLayout);
  v14 = type metadata accessor for Section(0, v26, v13, &type metadata for EmptyView);
  v30 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v26 - v18;
  v39 = v27;
  v40 = a3;
  v41 = v29;
  v42 = a5;
  v43 = v28;
  v33 = v27;
  v34 = a3;
  v35 = v29;
  v36 = a5;
  v37 = v28;
  v20 = sub_10005C954(&qword_10015FC88, &qword_10015FC70, (void (*)(void))sub_10005C930);
  v21 = sub_10005C954(&qword_10015FCA8, &qword_10015FC78, (void (*)(void))sub_10005CA00);
  v52 = sub_10005CA44();
  v22 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v10);
  v50 = v21;
  v51 = v22;
  v49 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v11);
  v47 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v12);
  v48 = &protocol witness table for _PaddingLayout;
  v23 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  sub_10005A3B4((uint64_t)sub_10005D5E0, (uint64_t)v38, (uint64_t)sub_10005D5EC, (uint64_t)v32, v26, v13, v20, v23);
  v44 = v20;
  v45 = v23;
  v46 = &protocol witness table for EmptyView;
  swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v14);
  sub_1000F257C((uint64_t)v17, v14, (uint64_t)v19);
  v24 = *(void (**)(char *, uint64_t))(v30 + 8);
  v24(v17, v14);
  sub_1000E3B88((uint64_t)v19, v14, v31);
  return ((uint64_t (*)(char *, uint64_t))v24)(v19, v14);
}

uint64_t sub_100058FB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[16];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t AssociatedTypeWitness;
  uint64_t v55;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v37 = a4;
  v36 = a1;
  v40 = a6;
  sub_1000034AC(&qword_10015FC78);
  v9 = type metadata accessor for Array(255, a3);
  v10 = *(_QWORD *)(a5 + 16);
  v53 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v10);
  v55 = sub_1000034AC(&qword_10015FC80);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v11 = type metadata accessor for ForEach(255, &v53);
  v12 = type metadata accessor for _ConditionalContent(255);
  v13 = type metadata accessor for Group(0, v12);
  v38 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v35 - v14;
  v16 = type metadata accessor for ModifiedContent(0, v13, &type metadata for _PaddingLayout);
  v39 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v35 - v20;
  v42 = a2;
  v43 = a3;
  v44 = v37;
  v45 = a5;
  v46 = v36;
  v22 = sub_10005C954(&qword_10015FCA8, &qword_10015FC78, (void (*)(void))sub_10005CA00);
  v52 = sub_10005CA44();
  v23 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v11);
  v50 = v22;
  v51 = v23;
  v24 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v12);
  v25 = Group<A>.init(content:)(sub_10005D5FC, v41, v12, v24);
  v26 = static Edge.Set.leading.getter(v25);
  v27 = v26;
  v28 = static Edge.Set.trailing.getter(v26);
  v29 = Edge.Set.init(rawValue:)(0);
  v30 = Edge.Set.init(rawValue:)(v29);
  if (Edge.Set.init(rawValue:)(v30 & v27) != v27)
    v29 = Edge.Set.init(rawValue:)(v29 | v27);
  v31 = Edge.Set.init(rawValue:)(v29);
  if (Edge.Set.init(rawValue:)(v31 & v28) != v28)
    v29 = Edge.Set.init(rawValue:)(v29 | v28);
  v49 = v24;
  v32 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v13);
  View.padding(_:_:)(v29, 0, 1, v13, v32);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v13);
  v47 = v32;
  v48 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  sub_1000F257C((uint64_t)v19, v16, (uint64_t)v21);
  v33 = *(void (**)(char *, uint64_t))(v39 + 8);
  v33(v19, v16);
  sub_1000E3B88((uint64_t)v21, v16, v40);
  return ((uint64_t (*)(char *, uint64_t))v33)(v21, v16);
}

uint64_t sub_100059328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;

  v68 = a1;
  v73 = a6;
  v65 = a2;
  v75 = a2;
  v76 = a3;
  v66 = a4;
  v77 = a4;
  v78 = a5;
  v8 = type metadata accessor for VenueEventView(0, (uint64_t)&v75);
  v63 = *(_QWORD *)(v8 - 8);
  v58 = *(_QWORD *)(v63 + 64);
  __chkstk_darwin(v8);
  v62 = (char *)&v56 - v9;
  v10 = type metadata accessor for Array(255, a3);
  v67 = a5;
  v11 = *(_QWORD *)(a5 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v11);
  v13 = sub_1000034AC(&qword_10015FC80);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  v61 = v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v75 = v10;
  v76 = AssociatedTypeWitness;
  v60 = AssociatedTypeWitness;
  v59 = v13;
  v77 = v13;
  v78 = WitnessTable;
  v57 = WitnessTable;
  v79 = AssociatedConformanceWitness;
  v16 = type metadata accessor for ForEach(0, &v75);
  v56 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v64 = (uint64_t)&v56 - v20;
  v69 = sub_1000034AC(&qword_10015FC78);
  v21 = type metadata accessor for _ConditionalContent(0);
  v71 = *(_QWORD *)(v21 - 8);
  v72 = v21;
  __chkstk_darwin(v21);
  v70 = (char *)&v56 - v22;
  v23 = v68;
  v24 = sub_100056B14(v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v25 = sub_10005E238();
  swift_release(v24);
  v75 = v25;
  v26 = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  LOBYTE(v13) = Collection.isEmpty.getter(v10, v26);
  swift_bridgeObjectRelease(v25);
  v27 = sub_100056B14(v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v28 = v27;
  if ((v13 & 1) != 0)
  {
    v29 = v27 + *(_QWORD *)(*(_QWORD *)v27 + 192);
    v31 = *(_QWORD *)v29;
    v30 = *(_QWORD *)(v29 + 8);
    v32 = *(_BYTE *)(v29 + 16);
    v33 = *(_QWORD *)(v29 + 24);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v33);
    swift_release(v28);
    v35 = static Edge.Set.top.getter(v34);
    v75 = v31;
    v76 = v30;
    LOBYTE(v77) = v32;
    v78 = v33;
    LOBYTE(v79) = v35;
    v80 = 0u;
    v81 = 0u;
    v82 = 1;
    v36 = sub_10005C954(&qword_10015FCA8, &qword_10015FC78, (void (*)(void))sub_10005CA00);
    v74 = sub_10005CA44();
    v37 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v16);
    v38 = (uint64_t)v70;
    sub_1000E3BA0((uint64_t)&v75, v69, v16, v36, v37);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v30);
  }
  else
  {
    v39 = sub_10005E238();
    v40 = swift_release(v28);
    v75 = v39;
    v41 = v63;
    v42 = v62;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v63 + 16))(v62, v23, v8, v40);
    v43 = *(unsigned __int8 *)(v41 + 80);
    v44 = (v43 + 48) & ~v43;
    v45 = (char *)swift_allocObject(&unk_10014F558, v44 + v58, v43 | 7);
    *((_QWORD *)v45 + 2) = v65;
    *((_QWORD *)v45 + 3) = a3;
    v46 = v67;
    *((_QWORD *)v45 + 4) = v66;
    *((_QWORD *)v45 + 5) = v46;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(&v45[v44], v42, v8);
    v47 = sub_10005CA44();
    ForEach<>.init(_:content:)(&v75, sub_10005D718, v45, v10, v60, v59, v57, v47, v61);
    v86 = v47;
    v48 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v16);
    v49 = v64;
    sub_1000F257C((uint64_t)v19, v16, v64);
    v50 = *(void (**)(char *, uint64_t))(v56 + 8);
    v50(v19, v16);
    sub_1000E3B88(v49, v16, (uint64_t)v19);
    v51 = sub_10005C954(&qword_10015FCA8, &qword_10015FC78, (void (*)(void))sub_10005CA00);
    v38 = (uint64_t)v70;
    sub_1000E3C64((uint64_t)v19, v69, v16, v51, v48);
    v50(v19, v16);
    v50((char *)v49, v16);
  }
  v52 = sub_10005C954(&qword_10015FCA8, &qword_10015FC78, (void (*)(void))sub_10005CA00);
  v85 = sub_10005CA44();
  v53 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v16);
  v83 = v52;
  v84 = v53;
  v54 = v72;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v72);
  sub_1000E3B88(v38, v54, v73);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 8))(v38, v54);
}

uint64_t sub_1000598B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t KeyPath;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  uint64_t AssociatedConformanceWitness;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  void (*v94)(uint64_t, uint64_t);
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD v129[4];

  v127 = a3;
  v128 = a5;
  v118 = a2;
  v125 = a7;
  v10 = *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64);
  v123 = *(_QWORD *)(a4 - 8);
  v124 = v10;
  __chkstk_darwin(a1);
  v122 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129[0] = v12;
  v129[1] = v13;
  v129[2] = v14;
  v129[3] = v15;
  v113 = type metadata accessor for VenueEventView(0, (uint64_t)v129);
  v16 = *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64);
  v120 = *(_QWORD *)(v113 - 8);
  v121 = v16;
  __chkstk_darwin(v113);
  v119 = (char *)&v89 - v17;
  v18 = type metadata accessor for Date(0);
  v116 = *(_QWORD *)(v18 - 8);
  v117 = v18;
  __chkstk_darwin(v18);
  v110 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for DateInterval(0);
  v109 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v105 = (uint64_t)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a6);
  v102 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v22 = __chkstk_darwin(AssociatedTypeWitness);
  v106 = (char *)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v95 = (char *)&v89 - v24;
  v25 = swift_getAssociatedTypeWitness(0, a6);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = __chkstk_darwin(v25);
  v101 = (char *)&v89 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v30 = (char *)&v89 - v29;
  v107 = type metadata accessor for EventRowViewModel(0);
  v31 = __chkstk_darwin(v107);
  v108 = (uint64_t)&v89 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v34 = (uint64_t *)((char *)&v89 - v33);
  v35 = type metadata accessor for EventRow(0);
  __chkstk_darwin(v35);
  v104 = (char *)&v89 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_100003E70(&qword_10015FCC0);
  __chkstk_darwin(v126);
  v103 = (uint64_t)&v89 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100003E70(qword_10015FE00);
  v114 = *(_QWORD *)(v38 - 8);
  v115 = v38;
  __chkstk_darwin(v38);
  v112 = (char *)&v89 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = *(void (**)(uint64_t, uint64_t))(a6 + 200);
  v94(a4, a6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a6, a4, v25, &unk_1001191E8, &unk_100119230);
  v100 = sub_10000F944(v25, AssociatedConformanceWitness);
  v99 = v40;
  v89 = *(void (**)(char *, uint64_t))(v26 + 8);
  v89(v30, v25);
  v93 = *(void (**)(uint64_t, uint64_t))(a6 + 208);
  v41 = v95;
  v42 = a1;
  v93(a4, a6);
  v43 = a4;
  v90 = swift_getAssociatedConformanceWitness(a6, a4, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v97 = sub_100064328(AssociatedTypeWitness, v90);
  v96 = v44;
  v45 = *(void (**)(char *, uint64_t))(v102 + 8);
  v45(v41, AssociatedTypeWitness);
  v46 = v101;
  v94(a4, a6);
  v47 = v105;
  sub_10000F1E0(v25, AssociatedConformanceWitness, v105);
  v48 = ((uint64_t (*)(char *, uint64_t))v89)(v46, v25);
  v49 = v110;
  DateInterval.start.getter(v48);
  (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v47, v111);
  v50 = v106;
  v92 = v42;
  v98 = a6;
  v93(v43, a6);
  sub_1000644FC(AssociatedTypeWitness, v90, (uint64_t)v129);
  v45(v50, AssociatedTypeWitness);
  v51 = v113;
  v52 = v118;
  v53 = sub_100056B14(v113, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v54 = v43;
  v55 = sub_10005F6B0(v42, v127, v43, v128, a6);
  v56 = swift_release(v53);
  v57 = v99;
  *v34 = v100;
  v34[1] = v57;
  v58 = v96;
  v34[2] = v97;
  v34[3] = v58;
  v59 = (int *)v107;
  (*(void (**)(char *, char *, uint64_t, __n128))(v116 + 32))((char *)v34 + *(int *)(v107 + 24), v49, v117, v56);
  sub_100007A98((uint64_t)v129, (uint64_t)v34 + v59[7], &qword_10015EA58);
  *((_BYTE *)v34 + v59[8]) = 1;
  *(uint64_t *)((char *)v34 + v59[9]) = v55;
  v60 = v108;
  sub_100028390((uint64_t)v34, v108, type metadata accessor for EventRowViewModel);
  v61 = v104;
  State.init(wrappedValue:)(v60, v59);
  sub_1000283D4((uint64_t)v34, type metadata accessor for EventRowViewModel);
  v62 = (uint64_t)v61;
  v63 = (uint64_t)v61;
  v64 = v103;
  sub_100028390(v62, v103, type metadata accessor for EventRow);
  *(_BYTE *)(v64 + *(int *)(v126 + 36)) = 0;
  sub_1000283D4(v63, type metadata accessor for EventRow);
  v66 = v119;
  v65 = v120;
  v67 = v52;
  v68 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v120 + 16))(v119, v67, v51);
  v70 = v122;
  v69 = v123;
  (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v122, v92, v54);
  v71 = *(unsigned __int8 *)(v65 + 80);
  v72 = v65;
  v73 = (v71 + 48) & ~v71;
  v74 = *(unsigned __int8 *)(v69 + 80);
  v75 = v69;
  v76 = (v121 + v74 + v73) & ~v74;
  v77 = (char *)swift_allocObject(&unk_10014F580, v76 + v124, v71 | v74 | 7);
  *((_QWORD *)v77 + 2) = v127;
  *((_QWORD *)v77 + 3) = v54;
  v78 = v98;
  *((_QWORD *)v77 + 4) = v128;
  *((_QWORD *)v77 + 5) = v78;
  (*(void (**)(char *, char *, uint64_t))(v72 + 32))(&v77[v73], v66, v68);
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(&v77[v76], v70, v54);
  v79 = sub_10005CAF0();
  v80 = v112;
  View.onTapGesture(count:perform:)(1, sub_10005D8F0, v77, v126, v79);
  swift_release(v77);
  v81 = sub_100008194(v64, &qword_10015FCC0);
  v82 = static Color.primary.getter(v81);
  KeyPath = swift_getKeyPath(&unk_10010E018);
  v85 = v114;
  v84 = v115;
  v86 = v125;
  (*(void (**)(uint64_t, char *, uint64_t))(v114 + 16))(v125, v80, v115);
  v87 = (uint64_t *)(v86 + *(int *)(sub_100003E70(&qword_10015FC80) + 36));
  *v87 = KeyPath;
  v87[1] = v82;
  return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v80, v84);
}

void sub_10005A0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];

  v12 = type metadata accessor for Optional(0, a4);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v26 - v14;
  v26[0] = a3;
  v26[1] = a4;
  v26[2] = a5;
  v26[3] = a6;
  v16 = type metadata accessor for VenueEventView(0, (uint64_t)v26);
  v17 = sub_100056B14(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v18 = *(_QWORD *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v15, a2, a4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, a4);
  sub_10005F974((uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  swift_release(v17);
  v19 = sub_100056B14(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v20 = (uint64_t *)(a1 + *(int *)(v16 + 64));
  v21 = *v20;
  if (*v20)
  {
    v22 = v19;
    swift_retain(*v20);
    sub_10005E2D4(8, 10, 0, 3u, v21);
    swift_release(v22);
    swift_release(v21);
  }
  else
  {
    v23 = v20[1];
    v24 = type metadata accessor for RemoteViewConfiguration();
    v25 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v23, v24, v25);
    __break(1u);
  }
}

double sub_10005A264@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  double result;
  uint64_t v25;
  _QWORD v26[4];

  v26[0] = a1;
  v26[1] = a2;
  v26[2] = a3;
  v26[3] = a4;
  v6 = type metadata accessor for VenueEventView(0, (uint64_t)v26);
  v7 = sub_100056B14(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v25 = sub_10005E580();
  v9 = v8;
  swift_release(v7);
  v10 = sub_100056B14(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v11 = v10 + *(_QWORD *)(*(_QWORD *)v10 + 184);
  v13 = *(_QWORD *)v11;
  v12 = *(_QWORD *)(v11 + 8);
  v14 = *(_BYTE *)(v11 + 16);
  v15 = *(_QWORD *)(v11 + 24);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v15);
  swift_release(v10);
  v16 = sub_100056B14(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10005E5B4();
  v18 = v17;
  v20 = v19;
  swift_release(v16);
  v22 = static Edge.Set.horizontal.getter(v21);
  LOBYTE(v16) = v22;
  v23 = static Edge.Set.vertical.getter(v22);
  *(_QWORD *)a5 = v25;
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)(a5 + 16) = v13;
  *(_QWORD *)(a5 + 24) = v12;
  *(_BYTE *)(a5 + 32) = v14;
  *(_QWORD *)(a5 + 40) = v15;
  *(_BYTE *)(a5 + 48) = 0;
  *(_QWORD *)(a5 + 56) = v18;
  *(_QWORD *)(a5 + 64) = v20;
  *(_BYTE *)(a5 + 72) = v16;
  result = 0.0;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_BYTE *)(a5 + 112) = 1;
  *(_BYTE *)(a5 + 120) = v23;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_BYTE *)(a5 + 160) = 1;
  return result;
}

uint64_t sub_10005A3B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(uint64_t);
  uint64_t v19;

  v14 = __chkstk_darwin(a1);
  v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17(v14);
  return Section<>.init(header:content:)(v16, a1, a2, a5, a6, a7, a8);
}

double sub_10005A468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v6;
  double result;
  _QWORD v8[10];

  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v8[5] = a5;
  v8[6] = a1;
  *(double *)&v8[7] = a6;
  v6 = static Animation.default.getter();
  withAnimation<A>(_:_:)(v6, sub_10005D5B0, v8, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

void sub_10005A4D0(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 32);
  if (a2 < -50.0 != *(_BYTE *)(v3 + 16))
  {
    v4 = sub_100003E70(&qword_10015D470);
    sub_100007D40(&qword_10015D478, &qword_10015D470, (uint64_t)&unk_1001101D4);
    v5 = ObservableObject<>.objectWillChange.getter(v4);
    ObservableObjectPublisher.send()();
    swift_release(v5);
  }
  *(_BYTE *)(v3 + 16) = a2 < -50.0;
}

uint64_t sub_10005A584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v23[1] = a6;
  v11 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v11);
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003E70(&qword_10015FCE0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.principal.getter(v16);
  v25 = a2;
  v26 = a3;
  v27 = a4;
  v28 = a5;
  v29 = a1;
  v19 = sub_100003E70(&qword_10015FD28);
  v20 = sub_10005D030();
  ToolbarItem<>.init(placement:content:)(v13, sub_10005D024, v24, v19, v20);
  v21 = sub_100007D40(&qword_10015FCE8, &qword_10015FCE0, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v18, v14, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t sub_10005A6D4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)()@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  char v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (**v62)();
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;

  v110 = a6;
  v11 = sub_100003E70(&qword_10015FDB0);
  __chkstk_darwin(v11);
  v13 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100003E70(&qword_10015FDA0);
  __chkstk_darwin(v100);
  v103 = (uint64_t)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100003E70(&qword_10015FD90);
  v15 = __chkstk_darwin(v109);
  v102 = (uint64_t)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v104 = (uint64_t)&v94 - v17;
  v107 = sub_100003E70(&qword_10015FDB8);
  __chkstk_darwin(v107);
  v108 = (uint64_t)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100003E70(&qword_10015FD80);
  __chkstk_darwin(v19);
  v21 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100003E70(&qword_10015FD70);
  __chkstk_darwin(v94);
  v23 = (char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100003E70(&qword_10015FD60);
  __chkstk_darwin(v95);
  v99 = (uint64_t)&v94 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100003E70(&qword_10015FD50);
  __chkstk_darwin(v96);
  v98 = (uint64_t)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100003E70(&qword_10015FD40);
  v26 = __chkstk_darwin(v106);
  v97 = (uint64_t)&v94 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v101 = (uint64_t)&v94 - v28;
  v29 = a2;
  *(_QWORD *)&v111 = a2;
  *((_QWORD *)&v111 + 1) = a3;
  v30 = a3;
  v31 = a4;
  *(_QWORD *)&v112 = a4;
  *((_QWORD *)&v112 + 1) = a5;
  v32 = a5;
  v105 = type metadata accessor for VenueEventView(0, (uint64_t)&v111);
  v33 = a1;
  v34 = sub_100056B14(v105, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(a4) = sub_10005E5E8();
  swift_release(v34);
  v36 = static VerticalAlignment.center.getter(v35);
  if ((a4 & 1) != 0)
  {
    *(_QWORD *)v21 = v36;
    *((_QWORD *)v21 + 1) = 0x4010000000000000;
    v21[16] = 0;
    v37 = sub_100003E70(&qword_10015FDC8);
    v38 = sub_10005AE30(v33, (uint64_t)v29, v30, v31, v32, &v21[*(int *)(v37 + 44)]);
    v39 = static Edge.Set.leading.getter(v38);
    sub_100007ADC((uint64_t)v21, (uint64_t)v23, &qword_10015FD80);
    v40 = &v23[*(int *)(v94 + 36)];
    *v40 = v39;
    *(_OWORD *)(v40 + 8) = 0u;
    *(_OWORD *)(v40 + 24) = 0u;
    v40[40] = 1;
    v41 = sub_100008194((uint64_t)v21, &qword_10015FD80);
    v42 = static Edge.Set.trailing.getter(v41);
    v43 = EdgeInsets.init(_all:)(8.0);
    v45 = v44;
    v47 = v46;
    v49 = v48;
    v50 = v99;
    sub_100007ADC((uint64_t)v23, v99, &qword_10015FD70);
    v51 = v50 + *(int *)(v95 + 36);
    *(_BYTE *)v51 = v42;
    *(double *)(v51 + 8) = v43;
    *(_QWORD *)(v51 + 16) = v45;
    *(_QWORD *)(v51 + 24) = v47;
    *(_QWORD *)(v51 + 32) = v49;
    *(_BYTE *)(v51 + 40) = 0;
    sub_100008194((uint64_t)v23, &qword_10015FD70);
    v52 = sub_100056B14(v105, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    v53 = sub_10005E8CC();
    swift_release(v52);
    v55 = static Alignment.center.getter(v54);
    _FrameLayout.init(width:height:alignment:)(&v111, *(_QWORD *)&v53, 0, 0, 1, v55, v56);
    v57 = v98;
    sub_100007ADC(v50, v98, &qword_10015FD60);
    v58 = (_OWORD *)(v57 + *(int *)(v96 + 36));
    v59 = v112;
    *v58 = v111;
    v58[1] = v59;
    v58[2] = v113;
    sub_100008194(v50, &qword_10015FD60);
    v60 = v97;
    sub_100007ADC(v57, v97, &qword_10015FD50);
    v61 = v106;
    v62 = (uint64_t (**)())(v60 + *(int *)(v106 + 36));
    *v62 = sub_10005B414;
    v62[1] = 0;
    sub_100008194(v57, &qword_10015FD50);
    v63 = &qword_10015FD40;
    v64 = v101;
    sub_100007A98(v60, v101, &qword_10015FD40);
    v65 = v108;
    sub_100007ADC(v64, v108, &qword_10015FD40);
    swift_storeEnumTagMultiPayload(v65, v107, 0);
    v66 = sub_10005C954(&qword_10015FD38, &qword_10015FD40, (void (*)(void))sub_10005D0BC);
    v67 = sub_10005D1EC();
    v68 = v109;
    v69 = v65;
    v70 = v61;
  }
  else
  {
    *(_QWORD *)v13 = v36;
    *((_QWORD *)v13 + 1) = 0x4010000000000000;
    v13[16] = 0;
    v71 = sub_100003E70(&qword_10015FDC0);
    v72 = sub_10005B438(v33, v29, v30, v31, v32, (uint64_t)&v13[*(int *)(v71 + 44)]);
    v73 = static Edge.Set.horizontal.getter(v72);
    v74 = EdgeInsets.init(_all:)(8.0);
    v76 = v75;
    v78 = v77;
    v80 = v79;
    v81 = v103;
    sub_100007ADC((uint64_t)v13, v103, &qword_10015FDB0);
    v82 = v81 + *(int *)(v100 + 36);
    *(_BYTE *)v82 = v73;
    *(double *)(v82 + 8) = v74;
    *(_QWORD *)(v82 + 16) = v76;
    *(_QWORD *)(v82 + 24) = v78;
    *(_QWORD *)(v82 + 32) = v80;
    *(_BYTE *)(v82 + 40) = 0;
    sub_100008194((uint64_t)v13, &qword_10015FDB0);
    v83 = sub_100056B14(v105, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    v84 = sub_10005E8CC();
    swift_release(v83);
    v86 = static Alignment.center.getter(v85);
    _FrameLayout.init(width:height:alignment:)(&v111, *(_QWORD *)&v84, 0, 0, 1, v86, v87);
    v88 = v102;
    sub_100007ADC(v81, v102, &qword_10015FDA0);
    v89 = v109;
    v90 = (_OWORD *)(v88 + *(int *)(v109 + 36));
    v91 = v112;
    *v90 = v111;
    v90[1] = v91;
    v90[2] = v113;
    sub_100008194(v81, &qword_10015FDA0);
    v63 = &qword_10015FD90;
    v64 = v104;
    sub_100007A98(v88, v104, &qword_10015FD90);
    v92 = v108;
    sub_100007ADC(v64, v108, &qword_10015FD90);
    swift_storeEnumTagMultiPayload(v92, v107, 1);
    v66 = sub_10005C954(&qword_10015FD38, &qword_10015FD40, (void (*)(void))sub_10005D0BC);
    v67 = sub_10005D1EC();
    v69 = v92;
    v70 = v106;
    v68 = v89;
  }
  _ConditionalContent<>.init(storage:)(v69, v70, v68, v66, v67);
  return sub_100008194(v64, v63);
}

uint64_t sub_10005AE30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t WitnessTable;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  void (*v76)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 v122;

  v96 = a6;
  v111 = a2;
  v112 = a3;
  v113 = a4;
  v114 = a5;
  v11 = type metadata accessor for VenueEventView(0, (uint64_t)&v111);
  v89 = *(_QWORD *)(v11 - 8);
  v91 = *(_QWORD *)(v89 + 64);
  __chkstk_darwin(v11);
  v87 = (char *)&v78 - v12;
  v95 = sub_100003E70(&qword_10015D6D8);
  v94 = *(_QWORD *)(v95 - 8);
  v13 = __chkstk_darwin(v95);
  v93 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v99 = (char *)&v78 - v15;
  v92 = sub_100003E70(&qword_10015FDD0);
  v90 = *(_QWORD *)(v92 - 8);
  v16 = __chkstk_darwin(v92);
  v88 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v98 = (char *)&v78 - v18;
  v19 = sub_100056B14(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  v20 = a2;
  v97 = a2;
  v104 = a2;
  v105 = a3;
  v21 = a3;
  v22 = a4;
  v106 = a4;
  v107 = a5;
  KeyPath = swift_getKeyPath(&unk_10010DFA8);
  v111 = v20;
  v112 = v21;
  v84 = v21;
  v113 = v22;
  v114 = a5;
  v24 = v22;
  v85 = v22;
  v86 = a5;
  v25 = type metadata accessor for VenueEventViewModel(255, (uint64_t)&v111);
  WitnessTable = swift_getWitnessTable(&unk_10010E1D0, v25);
  ObservedObject.Wrapper.subscript.getter(&v111, KeyPath, v19, WitnessTable);
  swift_release(KeyPath);
  swift_release(v19);
  v27 = v111;
  v80 = v112;
  v81 = v113;
  v79 = v114;
  v83 = v11;
  v28 = sub_100056B14(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  v100 = v97;
  v101 = v21;
  v102 = v24;
  v103 = a5;
  v29 = swift_getKeyPath(&unk_10010DFE0);
  ObservedObject.Wrapper.subscript.getter(&v120, v29, v28, WitnessTable);
  swift_release(v29);
  swift_release(v28);
  v30 = v120;
  v31 = v121;
  v82 = v120;
  LOBYTE(KeyPath) = v122;
  v32 = sub_100056B14(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v33 = (uint64_t *)(v32 + *(_QWORD *)(*(_QWORD *)v32 + 208));
  v34 = *v33;
  v35 = v33[1];
  swift_bridgeObjectRetain(v35);
  swift_release(v32);
  v36 = v27;
  v111 = v27;
  v37 = v80;
  v112 = v80;
  v113 = v81;
  v38 = v79;
  v114 = v79;
  v115 = v30;
  v116 = v31;
  v117 = KeyPath;
  v118 = v34;
  v119 = v35;
  v39 = *(_QWORD *)(a1 + 48);
  v40 = *(_BYTE *)(a1 + 56);
  v108 = *(_BYTE *)(a1 + 40);
  v109 = v39;
  v110 = v40;
  v41 = sub_100003E70(&qword_10015FD20);
  FocusState.projectedValue.getter(&v120, v41);
  v42 = v120;
  v43 = v121;
  v44 = v122;
  v45 = sub_10005D2B8();
  View.focused(_:)(v42, v43, v44, &type metadata for SearchBar, v45);
  swift_bridgeObjectRelease(v35);
  swift_release(v31);
  swift_bridgeObjectRelease(v38);
  swift_release(v37);
  swift_release(v43);
  swift_release(v42);
  swift_release(v36);
  swift_release(v82);
  v46 = v83;
  v47 = sub_100056B14(v83, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v48 = v47 + *(_QWORD *)(*(_QWORD *)v47 + 200);
  v49 = *(_QWORD *)v48;
  v50 = *(_QWORD *)(v48 + 8);
  v51 = *(unsigned __int8 *)(v48 + 16);
  v52 = *(_QWORD *)(v48 + 24);
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v52);
  v53 = swift_release(v47);
  v54 = v89;
  v55 = v87;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v89 + 16))(v87, a1, v46, v53);
  v56 = *(unsigned __int8 *)(v54 + 80);
  v57 = v54;
  v58 = (v56 + 48) & ~v56;
  v59 = (char *)swift_allocObject(&unk_10014F4B8, v58 + v91, v56 | 7);
  v60 = v84;
  *((_QWORD *)v59 + 2) = v97;
  *((_QWORD *)v59 + 3) = v60;
  v61 = v86;
  *((_QWORD *)v59 + 4) = v85;
  *((_QWORD *)v59 + 5) = v61;
  (*(void (**)(char *, char *, uint64_t))(v57 + 32))(&v59[v58], v55, v46);
  v62 = v99;
  Button<>.init(_:action:)(v49, v50, v51, v52, sub_10005D300, v59);
  v63 = v90;
  v64 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
  v65 = v88;
  v66 = v98;
  v67 = v92;
  v64(v88, v98, v92);
  v68 = v94;
  v69 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
  v70 = v93;
  v71 = v62;
  v72 = v95;
  v69(v93, v71, v95);
  v73 = v96;
  v64(v96, v65, v67);
  v74 = sub_100003E70(&qword_10015FDD8);
  v69(&v73[*(int *)(v74 + 48)], v70, v72);
  v75 = *(void (**)(char *, uint64_t))(v68 + 8);
  v75(v99, v72);
  v76 = *(void (**)(char *, uint64_t))(v63 + 8);
  v76(v66, v67);
  v75(v70, v72);
  return ((uint64_t (*)(char *, uint64_t))v76)(v65, v67);
}

uint64_t sub_10005B414()
{
  return Transaction.animation.setter(0);
}

uint64_t sub_10005B438@<X0>(uint64_t a1@<X0>, uint64_t (*a2)()@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t (*v96)();
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)();
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int *v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t result;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(char *, char *, uint64_t);
  uint64_t v148;
  uint64_t v149;
  void (*v150)(char *, uint64_t, uint64_t, __n128);
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t (*v167)();
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _OWORD v173[11];
  uint64_t v174;
  _OWORD v175[11];
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  double v205;
  double v206;
  uint64_t v207;
  uint64_t v208;
  char v209;

  v171 = a5;
  v168 = a3;
  v169 = a4;
  v166 = a6;
  v167 = a2;
  v11 = type metadata accessor for DismissAction(0);
  v156 = *(_QWORD *)(v11 - 8);
  v157 = v11;
  v12 = __chkstk_darwin(v11);
  v155 = (char *)&v147 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = v13;
  __chkstk_darwin(v12);
  v154 = (uint64_t)&v147 - v14;
  *(_QWORD *)&v189 = a2;
  *((_QWORD *)&v189 + 1) = a3;
  *(_QWORD *)&v190 = a4;
  *((_QWORD *)&v190 + 1) = a5;
  v15 = type metadata accessor for VenueEventView(0, (uint64_t)&v189);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15);
  v19 = (char *)&v147 - v18;
  v20 = sub_100003E70(&qword_10015D6D8);
  v163 = *(_QWORD *)(v20 - 8);
  v164 = v20;
  __chkstk_darwin(v20);
  v160 = (char *)&v147 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = sub_100003E70(&qword_10015FDE0);
  __chkstk_darwin(v162);
  v23 = (char *)&v147 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_100003E70(&qword_10015FDE8);
  v24 = __chkstk_darwin(v165);
  v170 = (uint64_t)&v147 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v161 = (uint64_t)&v147 - v27;
  __chkstk_darwin(v26);
  v172 = (uint64_t)&v147 - v28;
  v29 = sub_100056B14(v15, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v33 = sub_10005E968(v29, v30, v31, v32);
  v35 = v34;
  v36 = swift_release(v29);
  *(_QWORD *)&v189 = v33;
  *((_QWORD *)&v189 + 1) = v35;
  v37 = a1;
  v150 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16);
  v150(v19, a1, v15, v36);
  v38 = *(unsigned __int8 *)(v16 + 80);
  v39 = (v38 + 48) & ~v38;
  v148 = v38 | 7;
  v149 = v39 + v17;
  v40 = (char *)swift_allocObject(&unk_10014F4E0, v39 + v17, v38 | 7);
  v41 = v168;
  *((_QWORD *)v40 + 2) = v167;
  *((_QWORD *)v40 + 3) = v41;
  v42 = v171;
  *((_QWORD *)v40 + 4) = v169;
  *((_QWORD *)v40 + 5) = v42;
  v151 = v39;
  v152 = v19;
  v147 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v147(&v40[v39], v19, v15);
  v43 = sub_10000CB40();
  v44 = v160;
  v45 = Button<>.init<A>(_:action:)(&v189, sub_10005D38C, v40, &type metadata for String, v43);
  v46 = static Color.blue.getter(v45);
  KeyPath = swift_getKeyPath(&unk_10010E018);
  v49 = v163;
  v48 = v164;
  (*(void (**)(char *, char *, uint64_t))(v163 + 16))(v23, v44, v164);
  v50 = (uint64_t *)&v23[*(int *)(v162 + 36)];
  *v50 = KeyPath;
  v50[1] = v46;
  (*(void (**)(char *, uint64_t))(v49 + 8))(v44, v48);
  v158 = v37;
  v159 = v15;
  v51 = sub_100056B14(v15, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(KeyPath) = sub_10005E20C();
  swift_release(v51);
  v52 = 0.0;
  v53 = 1.0;
  if ((KeyPath & 1) != 0)
    v54 = 1.0;
  else
    v54 = 0.0;
  v55 = v161;
  sub_100007ADC((uint64_t)v23, v161, &qword_10015FDE0);
  *(double *)(v55 + *(int *)(v165 + 36)) = v54;
  sub_100008194((uint64_t)v23, &qword_10015FDE0);
  sub_100007A98(v55, v172, &qword_10015FDE8);
  v56 = sub_100056B14(v15, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v57 = sub_10005E580();
  v59 = v58;
  swift_release(v56);
  *(_QWORD *)&v189 = v57;
  *((_QWORD *)&v189 + 1) = v59;
  v60 = Text.init<A>(_:)(&v189, &type metadata for String, v43);
  v62 = v61;
  v64 = v63;
  v66 = v65 & 1;
  v67 = static Font.Weight.semibold.getter();
  v68 = Text.fontWeight(_:)(*(_QWORD *)&v67, 0, v60, v62, v66, v64);
  v70 = v69;
  v72 = v71;
  v74 = v73 & 1;
  sub_10000BFF8(v60, v62, v66);
  v75 = swift_bridgeObjectRelease(v64);
  v76 = static Font.subheadline.getter(v75);
  v77 = Text.font(_:)(v76, v68, v70, v74, v72);
  v79 = v78;
  v81 = v80;
  v83 = v82;
  swift_release(v76);
  v84 = v81 & 1;
  sub_10000BFF8(v68, v70, v74);
  swift_bridgeObjectRelease(v72);
  v85 = v159;
  if (!*(_BYTE *)(*(_QWORD *)(v158 + 32) + 16))
    v53 = 0.0;
  v86 = v158;
  if ((sub_100056A50(v159) & 1) == 0)
    v52 = 22.0;
  v87 = swift_getKeyPath(&unk_10010E048);
  v201 = v77;
  v202 = v79;
  v203 = v84;
  v204 = v83;
  v205 = v53;
  v206 = v52;
  v207 = 0;
  v208 = v87;
  v209 = 1;
  v88 = static Alignment.center.getter(v87);
  sub_1000E5058(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v189, 0.0, 1, 0.0, 1, v88, v89);
  v90 = v79;
  v91 = v86;
  sub_10000BFF8(v77, v90, v84);
  v92 = v87;
  v93 = v85;
  swift_release(v92);
  swift_bridgeObjectRelease(v83);
  v185 = v197;
  v186 = v198;
  v187 = v199;
  v188 = v200;
  v181 = v193;
  v182 = v194;
  v183 = v195;
  v184 = v196;
  v177 = v189;
  v178 = v190;
  v179 = v191;
  v180 = v192;
  v94 = sub_100056A50(v85);
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  if ((v94 & 1) == 0)
  {
    v100 = v152;
    ((void (*)(char *, uint64_t, uint64_t))v150)(v152, v91, v93);
    v97 = (_QWORD *)swift_allocObject(&unk_10014F508, v149, v148);
    v101 = v168;
    v97[2] = v167;
    v97[3] = v101;
    v102 = v171;
    v97[4] = v169;
    v97[5] = v102;
    v103 = ((uint64_t (*)(char *, char *, uint64_t))v147)((char *)v97 + v151, v100, v93);
    v99 = static Font.title2.getter(v103);
    v98 = swift_getKeyPath(&unk_10010E078);
    v96 = sub_10005D3AC;
    v95 = 3;
  }
  v171 = v95;
  v104 = (_QWORD *)(v91 + *(int *)(v93 + 64));
  v105 = *v104;
  if (*v104)
  {
    swift_retain(*v104);
    v106 = sub_1000A3BEC();
    v108 = v107;
    swift_release(v105);
    v168 = v98;
    v169 = v99;
    v167 = v96;
    if (v108 && (swift_bridgeObjectRelease(v108), (v106 & 1) != 0))
    {
      v143 = _stringCompareWithSmolCheck(_:_:expecting:)(7368801, 0xE300000000000000, 0x6C61646F6DLL, 0xE500000000000000, 0);
      swift_bridgeObjectRelease(0xE300000000000000);
      if ((v143 & 1) == 0)
      {
        v109 = (uint64_t)v97;
        v119 = 0;
        v118 = 0;
        v116 = 0;
        v164 = 0;
        v165 = 0;
        goto LABEL_15;
      }
    }
    else
    {
      swift_bridgeObjectRelease(0xE500000000000000);
    }
    v109 = (uint64_t)v97;
    v110 = v154;
    sub_10001D870(v154);
    v112 = v155;
    v111 = v156;
    v113 = v157;
    (*(void (**)(char *, uint64_t, uint64_t))(v156 + 16))(v155, v110, v157);
    v114 = *(unsigned __int8 *)(v111 + 80);
    v115 = (v114 + 16) & ~v114;
    v116 = swift_allocObject(&unk_10014F530, v115 + v153, v114 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v111 + 32))(v116 + v115, v112, v113);
    v117 = (*(uint64_t (**)(uint64_t, uint64_t))(v111 + 8))(v110, v113);
    v165 = static Font.title2.getter(v117);
    v164 = swift_getKeyPath(&unk_10010E078);
    v118 = sub_10000BFA8;
    v119 = 1;
LABEL_15:
    v120 = v170;
    sub_100007ADC(v172, v170, &qword_10015FDE8);
    v121 = v166;
    sub_100007ADC(v120, v166, &qword_10015FDE8);
    v122 = (int *)sub_100003E70(&qword_10015FDF0);
    v123 = v122[12];
    v124 = v186;
    v173[8] = v185;
    v173[9] = v186;
    v125 = v187;
    v173[10] = v187;
    v126 = v181;
    v127 = v182;
    v173[4] = v181;
    v173[5] = v182;
    v128 = v183;
    v129 = v184;
    v173[6] = v183;
    v173[7] = v184;
    v130 = v177;
    v131 = v178;
    v173[0] = v177;
    v173[1] = v178;
    v132 = v179;
    v133 = v180;
    v173[2] = v179;
    v173[3] = v180;
    v134 = v121 + v123;
    *(_OWORD *)(v134 + 128) = v185;
    *(_OWORD *)(v134 + 144) = v124;
    *(_OWORD *)(v134 + 160) = v125;
    *(_OWORD *)(v134 + 64) = v126;
    *(_OWORD *)(v134 + 80) = v127;
    *(_OWORD *)(v134 + 96) = v128;
    *(_OWORD *)(v134 + 112) = v129;
    *(_OWORD *)v134 = v130;
    *(_OWORD *)(v134 + 16) = v131;
    v174 = v188;
    *(_QWORD *)(v134 + 176) = v188;
    *(_OWORD *)(v134 + 32) = v132;
    *(_OWORD *)(v134 + 48) = v133;
    v135 = (_QWORD *)(v121 + v122[16]);
    v137 = (uint64_t)v167;
    v136 = v168;
    *v135 = v171;
    v135[1] = v137;
    v135[2] = v109;
    v135[3] = v136;
    v138 = v169;
    v135[4] = v169;
    v139 = (uint64_t *)(v121 + v122[20]);
    *v139 = v119;
    v139[1] = (uint64_t)v118;
    v140 = v164;
    v141 = v165;
    v139[2] = v116;
    v139[3] = v140;
    v139[4] = v141;
    sub_10005D438((uint64_t)v173);
    sub_10005D488(v171, v137, v109, v136, v138);
    sub_10005D488(v119, (uint64_t)v118, v116, v140, v141);
    sub_100008194(v172, &qword_10015FDE8);
    sub_10005D4C4(v119, (uint64_t)v118, v116, v140, v141);
    sub_10005D4C4(v171, v137, v109, v136, v138);
    v175[8] = v185;
    v175[9] = v186;
    v175[10] = v187;
    v176 = v188;
    v175[4] = v181;
    v175[5] = v182;
    v175[6] = v183;
    v175[7] = v184;
    v175[0] = v177;
    v175[1] = v178;
    v175[2] = v179;
    v175[3] = v180;
    sub_10005D500((uint64_t)v175);
    return sub_100008194(v170, &qword_10015FDE8);
  }
  v144 = v104[1];
  v145 = type metadata accessor for RemoteViewConfiguration();
  v146 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
  result = EnvironmentObject.error()(0, v144, v145, v146);
  __break(1u);
  return result;
}

void sub_10005BE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  void (*v10)(_QWORD *, _QWORD);
  BOOL *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];

  v19[0] = a2;
  v19[1] = a3;
  v19[2] = a4;
  v19[3] = a5;
  v6 = type metadata accessor for VenueEventView(0, (uint64_t)v19);
  v7 = sub_100056B14(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  KeyPath = swift_getKeyPath(&unk_10010DF38);
  v9 = swift_getKeyPath(&unk_10010E0A8);
  v10 = (void (*)(_QWORD *, _QWORD))static Published.subscript.modify(v19, v7, KeyPath, v9);
  *v11 = !*v11;
  v10(v19, 0);
  swift_release(v7);
  swift_release(KeyPath);
  swift_release(v9);
  v12 = sub_100056B14(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v13 = (uint64_t *)(a1 + *(int *)(v6 + 64));
  v14 = *v13;
  if (*v13)
  {
    v15 = v12;
    swift_retain(*v13);
    sub_10005E2D4(0, 11, 0, 3u, v14);
    swift_release(v15);
    swift_release(v14);
  }
  else
  {
    v16 = v13[1];
    v17 = type metadata accessor for RemoteViewConfiguration();
    v18 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v16, v17, v18);
    __break(1u);
  }
}

void sub_10005BFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];

  v15[0] = a2;
  v15[1] = a3;
  v15[2] = a4;
  v15[3] = a5;
  v6 = type metadata accessor for VenueEventView(0, (uint64_t)v15);
  v7 = sub_100056B14(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10005EB58();
  swift_release(v7);
  v8 = sub_100056B14(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v9 = (uint64_t *)(a1 + *(int *)(v6 + 64));
  v10 = *v9;
  if (*v9)
  {
    v11 = v8;
    swift_retain(*v9);
    sub_10005E2D4(0, 0, 0, 3u, v10);
    swift_release(v11);
    swift_release(v10);
  }
  else
  {
    v12 = v9[1];
    v13 = type metadata accessor for RemoteViewConfiguration();
    v14 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v12, v13, v14);
    __break(1u);
  }
}

void sub_10005C0B8(double *a1@<X8>, double a2@<D2>, double a3@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
}

void sub_10005C0C0(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  v6 = *a1;
  v9[0] = a3;
  v9[1] = a4;
  v9[2] = a5;
  v9[3] = a6;
  v7 = type metadata accessor for VenueEventView(0, (uint64_t)v9);
  v8 = sub_100056B14(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10005EB80(v6);
  swift_release(v8);
}

uint64_t sub_10005C124()
{
  return sub_10005EC20();
}

uint64_t sub_10005C144(uint64_t a1)
{
  return sub_10005F974(a1);
}

uint64_t sub_10005C164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v25 = a2;
  v26 = a4;
  v28 = a6;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(a1);
  v14 = type metadata accessor for EventView(0, v11, v13, v12);
  v27 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v25 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3);
  v20 = *(unsigned __int8 *)(v9 + 80);
  v21 = (v20 + 48) & ~v20;
  v22 = (char *)swift_allocObject(&unk_10014F468, v21 + v10, v20 | 7);
  *((_QWORD *)v22 + 2) = v25;
  *((_QWORD *)v22 + 3) = a3;
  *((_QWORD *)v22 + 4) = v26;
  *((_QWORD *)v22 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v22[v21], (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  sub_1000E491C((uint64_t)sub_10005CF68, (uint64_t)v22, (uint64_t)sub_1000E6B24, 0, a3, a5, (uint64_t)v17);
  swift_getWitnessTable(&unk_100113C68, v14);
  sub_1000F257C((uint64_t)v17, v14, (uint64_t)v19);
  v23 = *(void (**)(char *, uint64_t))(v27 + 8);
  v23(v17, v14);
  sub_1000E3B88((uint64_t)v19, v14, v28);
  return ((uint64_t (*)(char *, uint64_t))v23)(v19, v14);
}

uint64_t sub_10005C324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EventViewModel(0, v8, v10, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
  return sub_1000E1564((uint64_t)v7);
}

uint64_t sub_10005C3B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10005EC34();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10005C3E4(char *a1)
{
  return sub_10005ECE4(*a1);
}

double sub_10005C408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v7;
  uint64_t v8;
  double result;
  _QWORD v10[4];

  v10[0] = a2;
  v10[1] = a3;
  v10[2] = a4;
  v10[3] = a5;
  v7 = type metadata accessor for VenueEventView(0, (uint64_t)v10);
  v8 = sub_100056B14(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  a6();
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

uint64_t sub_10005C460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];

  v26 = a2;
  v27 = a4;
  v29 = a6;
  v30[0] = a2;
  v30[1] = a3;
  v30[2] = a4;
  v30[3] = a5;
  v9 = type metadata accessor for VenueEventView(0, (uint64_t)v30);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v13 = (char *)&v26 - v12;
  v15 = type metadata accessor for FilterView(0, a3, a5, v14);
  v28 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v26 - v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  v21 = *(unsigned __int8 *)(v10 + 80);
  v22 = (v21 + 48) & ~v21;
  v23 = (char *)swift_allocObject(&unk_10014F440, v22 + v11, v21 | 7);
  *((_QWORD *)v23 + 2) = v26;
  *((_QWORD *)v23 + 3) = a3;
  *((_QWORD *)v23 + 4) = v27;
  *((_QWORD *)v23 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v23[v22], v13, v9);
  sub_10006482C((uint64_t)sub_10005CE80, (uint64_t)v23, a3, a5, (uint64_t)v18);
  swift_getWitnessTable(&unk_10010EAA0, v15);
  sub_1000F257C((uint64_t)v18, v15, (uint64_t)v20);
  v24 = *(void (**)(char *, uint64_t))(v28 + 8);
  v24(v18, v15);
  sub_1000E3B88((uint64_t)v20, v15, v29);
  return ((uint64_t (*)(char *, uint64_t))v24)(v20, v15);
}

Swift::String *sub_10005C62C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t WitnessTable;
  Swift::String *v20;
  _QWORD v22[4];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v9 = type metadata accessor for FilterViewModel.FilterConfiguration(255, a3, a5, a4);
  v10 = type metadata accessor for Binding(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (_QWORD *)((char *)v22 - v12);
  type metadata accessor for FilterViewModel(0, a3, a5, v14);
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = a5;
  v15 = type metadata accessor for VenueEventView(0, (uint64_t)&v23);
  v16 = sub_100056B14(v15, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  v22[0] = a2;
  v22[1] = a3;
  v22[2] = a4;
  v22[3] = a5;
  KeyPath = swift_getKeyPath(&unk_10010DF70);
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = a5;
  v18 = type metadata accessor for VenueEventViewModel(255, (uint64_t)&v23);
  WitnessTable = swift_getWitnessTable(&unk_10010E1D0, v18);
  ObservedObject.Wrapper.subscript.getter(v13, KeyPath, v16, WitnessTable);
  swift_release(v16);
  swift_release(KeyPath);
  v20 = sub_10001A640((uint64_t)v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  return v20;
}

void sub_10005C788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];

  v15[0] = a2;
  v15[1] = a3;
  v15[2] = a4;
  v15[3] = a5;
  v6 = type metadata accessor for VenueEventView(0, (uint64_t)v15);
  v7 = sub_100056B14(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v8 = (_QWORD *)(a1 + *(int *)(v6 + 64));
  v9 = *v8;
  if (*v8)
  {
    v10 = v7;
    swift_retain(*v8);
    sub_10005EF5C(v11);
    swift_release(v10);
    swift_release(v9);
  }
  else
  {
    v12 = v8[1];
    v13 = type metadata accessor for RemoteViewConfiguration();
    v14 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v12, v13, v14);
    __break(1u);
  }
}

void sub_10005C850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a4;
  v14[3] = a5;
  v6 = type metadata accessor for VenueEventView(0, (uint64_t)v14);
  v7 = sub_100056B14(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v8 = (uint64_t *)(a1 + *(int *)(v6 + 64));
  v9 = *v8;
  if (*v8)
  {
    v10 = v7;
    swift_retain(*v8);
    sub_10005E2D4(0, 2, 0, 3u, v9);
    swift_release(v10);
    swift_release(v9);
  }
  else
  {
    v11 = v8[1];
    v12 = type metadata accessor for RemoteViewConfiguration();
    v13 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v11, v12, v13);
    __break(1u);
  }
}

uint64_t sub_10005C930()
{
  return sub_10005C954(&qword_10015FC90, &qword_10015FC98, (void (*)(void))sub_10005C9BC);
}

uint64_t sub_10005C954(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000034AC(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10005C9BC()
{
  unint64_t result;

  result = qword_10015FCA0;
  if (!qword_10015FCA0)
  {
    result = swift_getWitnessTable(&unk_100112DD8, &type metadata for VenueEventListHeader);
    atomic_store(result, (unint64_t *)&qword_10015FCA0);
  }
  return result;
}

unint64_t sub_10005CA00()
{
  unint64_t result;

  result = qword_10015FCB0;
  if (!qword_10015FCB0)
  {
    result = swift_getWitnessTable(&unk_10010C204, &type metadata for EmptyEventsList);
    atomic_store(result, (unint64_t *)&qword_10015FCB0);
  }
  return result;
}

unint64_t sub_10005CA44()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10015FCB8;
  if (!qword_10015FCB8)
  {
    v1 = sub_1000034AC(&qword_10015FC80);
    v2[0] = sub_1000034AC(&qword_10015FCC0);
    v2[1] = sub_10005CAF0();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
    sub_100007D40(&qword_10015E9F0, &qword_10015E9F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015FCB8);
  }
  return result;
}

unint64_t sub_10005CAF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015FCC8;
  if (!qword_10015FCC8)
  {
    v1 = sub_1000034AC(&qword_10015FCC0);
    sub_100003B3C(&qword_10015FCD0, type metadata accessor for EventRow, (uint64_t)&unk_10011067C);
    sub_100007D40(&qword_10015E6C8, &qword_10015E6D0, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015FCC8);
  }
  return result;
}

uint64_t sub_10005CB8C()
{
  return sub_10005D608((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100057E7C);
}

unint64_t sub_10005CB98()
{
  unint64_t result;

  result = qword_10015FD10;
  if (!qword_10015FD10)
  {
    result = swift_getWitnessTable(&unk_10010E10C, &type metadata for NavigationBarWidthPreferenceKey);
    atomic_store(result, (unint64_t *)&qword_10015FD10);
  }
  return result;
}

void sub_10005CBE0(double *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v8[0] = v1[2];
  v3 = v8[0];
  v8[1] = v4;
  v8[2] = v5;
  v8[3] = v6;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for VenueEventView(0, (uint64_t)v8) - 8) + 80);
  sub_10005C0C0(a1, (uint64_t)v1 + ((v7 + 48) & ~v7), v3, v4, v5, v6);
}

uint64_t sub_10005CC58()
{
  return sub_10005EC20();
}

uint64_t sub_10005CC78(uint64_t a1)
{
  return sub_10005F974(a1);
}

uint64_t sub_10005CC98()
{
  return 32;
}

__n128 sub_10005CCA4(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10005CCB0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10005CCC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10005C164(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_10005CCCC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10005EC34();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10005CCF8(char *a1)
{
  return sub_10005ECE4(*a1);
}

uint64_t sub_10005CD1C()
{
  return 32;
}

__n128 sub_10005CD28(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

double sub_10005CD38()
{
  return sub_10005D30C((void (*)(void))sub_10005ED98);
}

uint64_t sub_10005CD48@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v9[0] = v1[2];
  v3 = v9[0];
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for VenueEventView(0, (uint64_t)v9) - 8) + 80);
  return sub_10005C460((uint64_t)v1 + ((v7 + 48) & ~v7), v3, v4, v5, v6, a1);
}

double sub_10005CDC4()
{
  return sub_10005D30C((void (*)(void))sub_10005EE9C);
}

uint64_t sub_10005CDD4(uint64_t a1, char *a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  char v14;

  v4 = *(_OWORD *)(v2 + 32);
  v12 = *(_OWORD *)(v2 + 16);
  v13 = v4;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for VenueEventView(0, (uint64_t)&v12) - 8) + 80);
  v6 = v2 + ((v5 + 48) & ~v5);
  v7 = *a2;
  v8 = *(_BYTE *)(v6 + 40);
  v9 = *(_QWORD *)(v6 + 48);
  LOBYTE(v6) = *(_BYTE *)(v6 + 56);
  LOBYTE(v12) = v8;
  *((_QWORD *)&v12 + 1) = v9;
  LOBYTE(v13) = v6;
  v14 = v7;
  v10 = sub_100003E70(&qword_10015FD20);
  return FocusState.wrappedValue.setter(&v14, v10);
}

uint64_t sub_10005CE60()
{
  return sub_10005D3B8((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10005C788);
}

uint64_t sub_10005CE70()
{
  return sub_10005D3B8((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10005C850);
}

Swift::String *sub_10005CE80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v7[0] = v0[2];
  v1 = v7[0];
  v7[1] = v2;
  v7[2] = v3;
  v7[3] = v4;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for VenueEventView(0, (uint64_t)v7) - 8) + 80);
  return sub_10005C62C((uint64_t)v0 + ((v5 + 48) & ~v5), v1, v2, v3, v4);
}

uint64_t sub_10005CEF8()
{
  return 32;
}

__n128 sub_10005CF04(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10005CF10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 48) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10005CF68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return sub_10005C324(v0 + ((v2 + 48) & ~v2), *(_QWORD *)(v0 + 16), v1);
}

uint64_t sub_10005CF88()
{
  return sub_10005D608((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100058778);
}

double sub_10005CF98(double a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v9[0] = v1[2];
  v3 = v9[0];
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for VenueEventView(0, (uint64_t)v9) - 8) + 80);
  return sub_10005A468((uint64_t)v1 + ((v7 + 48) & ~v7), v3, v4, v5, v6, a1);
}

uint64_t sub_10005D018()
{
  return sub_10005D608((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10005A584);
}

uint64_t sub_10005D024()
{
  return sub_10005D608((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10005A6D4);
}

unint64_t sub_10005D030()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015FD30;
  if (!qword_10015FD30)
  {
    v1 = sub_1000034AC(&qword_10015FD28);
    sub_10005C954(&qword_10015FD38, &qword_10015FD40, (void (*)(void))sub_10005D0BC);
    sub_10005D1EC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015FD30);
  }
  return result;
}

uint64_t sub_10005D0BC()
{
  return sub_10005C954(&qword_10015FD48, &qword_10015FD50, (void (*)(void))sub_10005D0E0);
}

unint64_t sub_10005D0E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015FD58;
  if (!qword_10015FD58)
  {
    v1 = sub_1000034AC(&qword_10015FD60);
    sub_10005D16C(&qword_10015FD68, &qword_10015FD70, &qword_10015FD78, &qword_10015FD80);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015FD58);
  }
  return result;
}

uint64_t sub_10005D16C(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_1000034AC(a2);
    sub_100007D40(a3, a4, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10005D1EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015FD88;
  if (!qword_10015FD88)
  {
    v1 = sub_1000034AC(&qword_10015FD90);
    sub_10005D16C(&qword_10015FD98, &qword_10015FDA0, &qword_10015FDA8, &qword_10015FDB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015FD88);
  }
  return result;
}

uint64_t sub_10005D280()
{
  return 32;
}

__n128 sub_10005D28C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10005D2A0()
{
  return 32;
}

__n128 sub_10005D2AC(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

unint64_t sub_10005D2B8()
{
  unint64_t result;

  result = qword_100160C90;
  if (!qword_100160C90)
  {
    result = swift_getWitnessTable(&unk_10010F58C, &type metadata for SearchBar);
    atomic_store(result, (unint64_t *)&qword_100160C90);
  }
  return result;
}

double sub_10005D300()
{
  return sub_10005D30C(sub_10005E800);
}

double sub_10005D30C(void (*a1)(void))
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v9[0] = v1[2];
  v3 = v9[0];
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for VenueEventView(0, (uint64_t)v9) - 8) + 80);
  return sub_10005C408((uint64_t)v1 + ((v7 + 48) & ~v7), v3, v4, v5, v6, a1);
}

uint64_t sub_10005D38C()
{
  return sub_10005D3B8((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10005BE1C);
}

uint64_t sub_10005D3AC()
{
  return sub_10005D3B8((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10005BFB8);
}

uint64_t sub_10005D3B8(uint64_t (*a1)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v9[4];

  v3 = *((_QWORD *)v1 + 3);
  v4 = *((_QWORD *)v1 + 4);
  v5 = *((_QWORD *)v1 + 5);
  v9[0] = *((_QWORD *)v1 + 2);
  v2 = v9[0];
  v9[1] = v3;
  v9[2] = v4;
  v9[3] = v5;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for VenueEventView(0, (uint64_t)v9) - 8) + 80);
  return a1(&v1[(v6 + 48) & ~v6], v2, v3, v4, v5);
}

uint64_t sub_10005D438(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 56);
  sub_10000C008(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return a1;
}

uint64_t sub_10005D488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a2)
  {
    swift_retain(a5);
    swift_retain(a3);
    return swift_retain(a4);
  }
  return result;
}

uint64_t sub_10005D4C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a2)
  {
    swift_release(a3);
    swift_release(a4);
    return swift_release(a5);
  }
  return result;
}

uint64_t sub_10005D500(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 56);
  sub_10000BFF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_10005D550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for DismissAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10005D5B0()
{
  uint64_t v0;

  sub_10005A4D0(*(_QWORD *)(v0 + 48), *(double *)(v0 + 56));
}

uint64_t sub_10005D5D4()
{
  return sub_10005D608((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100058C30);
}

uint64_t sub_10005D5E0()
{
  return sub_10005D608((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100058FB0);
}

double sub_10005D5EC@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10005A264(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_10005D5FC()
{
  return sub_10005D608((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100059328);
}

uint64_t sub_10005D608(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10005D620()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[2];

  v1 = *(_OWORD *)(v0 + 32);
  v11[0] = *(_OWORD *)(v0 + 16);
  v11[1] = v1;
  v2 = type metadata accessor for VenueEventView(0, (uint64_t)v11);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 48) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  sub_10000E138(*(_QWORD *)(v0 + v5), *(_QWORD *)(v0 + v5 + 8));
  swift_release(*(_QWORD *)(v0 + v5 + 32));
  swift_release(*(_QWORD *)(v0 + v5 + 48));
  v7 = (_QWORD *)(v0 + v5 + *(int *)(v2 + 60));
  v8 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  swift_release(*(_QWORD *)(v0 + v5 + *(int *)(v2 + 64)));
  return swift_deallocObject(v0, v5 + v6, v4 | 7);
}

uint64_t sub_10005D718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];

  v6 = v2[3];
  v7 = v2[4];
  v8 = v2[5];
  v11[0] = v2[2];
  v5 = v11[0];
  v11[1] = v6;
  v11[2] = v7;
  v11[3] = v8;
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for VenueEventView(0, (uint64_t)v11) - 8) + 80);
  return sub_1000598B4(a1, (uint64_t)v2 + ((v9 + 48) & ~v9), v5, v6, v7, v8, a2);
}

uint64_t sub_10005D7A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 40);
  v18 = *(_QWORD *)(v0 + 16);
  v19 = *(_OWORD *)(v0 + 24);
  v16 = v19;
  v20 = v1;
  v2 = type metadata accessor for VenueEventView(0, (uint64_t)&v18);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 48) & ~v4;
  v17 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(v16 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v0 + v5;
  sub_10000E138(*(_QWORD *)(v0 + v5), *(_QWORD *)(v0 + v5 + 8));
  swift_release(*(_QWORD *)(v0 + v5 + 32));
  swift_release(*(_QWORD *)(v0 + v5 + 48));
  v10 = (_QWORD *)(v0 + v5 + *(int *)(v2 + 60));
  v11 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (v5 + v17 + v7) & ~v7;
  v14 = swift_release(*(_QWORD *)(v9 + *(int *)(v2 + 64)));
  (*(void (**)(uint64_t, uint64_t, __n128))(v6 + 8))(v0 + v13, v16, v14);
  return swift_deallocObject(v0, v13 + v8, v4 | v7 | 7);
}

void sub_10005D8F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v8[0] = v0[2];
  v1 = v8[0];
  v8[1] = v2;
  v8[2] = v3;
  v8[3] = v4;
  v5 = *(_QWORD *)(type metadata accessor for VenueEventView(0, (uint64_t)v8) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  sub_10005A0BC((uint64_t)v0 + v6, (uint64_t)v0 + ((v6 + *(_QWORD *)(v5 + 64) + v7) & ~v7), v1, v2, v3, v4);
}

ValueMetadata *type metadata accessor for NavigationBarWidthPreferenceKey()
{
  return &type metadata for NavigationBarWidthPreferenceKey;
}

uint64_t sub_10005D98C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *AssociatedTypeWitness;
  uint64_t v63;
  void *WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  v59 = v2;
  v58 = type metadata accessor for NavigationPath(255);
  v3 = sub_1000034AC(&qword_10015FC70);
  sub_1000034AC(&qword_10015FC78);
  v4 = type metadata accessor for Array(255, v1);
  v60 = *(_QWORD *)(v2 + 16);
  v61 = v4;
  AssociatedTypeWitness = (_QWORD *)swift_getAssociatedTypeWitness(255, v60);
  v63 = sub_1000034AC(&qword_10015FC80);
  WitnessTable = (void *)swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v60, v1, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v5 = type metadata accessor for ForEach(255, &v61);
  v6 = type metadata accessor for _ConditionalContent(255);
  v7 = type metadata accessor for Group(255, v6);
  v8 = type metadata accessor for ModifiedContent(255, v7, &type metadata for _PaddingLayout);
  v9 = type metadata accessor for Section(255, v3, v8, &type metadata for EmptyView);
  v10 = sub_10005C954(&qword_10015FC88, &qword_10015FC70, (void (*)(void))sub_10005C930);
  v11 = sub_10005C954(&qword_10015FCA8, &qword_10015FC78, (void (*)(void))sub_10005CA00);
  v79 = sub_10005CA44();
  v12 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v5);
  v77 = v11;
  v78 = v12;
  v76 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v6);
  v74 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v7);
  v75 = &protocol witness table for _PaddingLayout;
  v13 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
  v71 = v10;
  v72 = v13;
  v73 = &protocol witness table for EmptyView;
  v14 = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v9);
  v15 = type metadata accessor for LazyVGrid(255, v9, v14);
  v16 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v15);
  v18 = type metadata accessor for ObservableScrollView(255, v15, v16, v17);
  v19 = swift_getWitnessTable(&unk_1001103F0, v18);
  v61 = v18;
  AssociatedTypeWitness = (_QWORD *)v19;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v61, &opaque type descriptor for <<opaque return type of View.scrollDismissesKeyboard(_:)>>, 0);
  v61 = v18;
  AssociatedTypeWitness = (_QWORD *)v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v61, &opaque type descriptor for <<opaque return type of View.scrollDismissesKeyboard(_:)>>, 1);
  v61 = OpaqueTypeMetadata2;
  AssociatedTypeWitness = (_QWORD *)OpaqueTypeConformance2;
  v22 = swift_getOpaqueTypeMetadata2(255, &v61, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v23 = sub_1000034AC(&qword_10015FCD8);
  v61 = OpaqueTypeMetadata2;
  AssociatedTypeWitness = (_QWORD *)OpaqueTypeConformance2;
  v24 = swift_getOpaqueTypeConformance2(&v61, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v25 = sub_1000034AC(&qword_10015FCE0);
  v26 = sub_100007D40(&qword_10015FCE8, &qword_10015FCE0, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v61 = v25;
  AssociatedTypeWitness = (_QWORD *)v26;
  v27 = swift_getOpaqueTypeConformance2(&v61, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v61 = v22;
  AssociatedTypeWitness = (_QWORD *)v23;
  v63 = v24;
  WitnessTable = (void *)v27;
  v28 = swift_getOpaqueTypeMetadata2(255, &v61, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v61 = v22;
  AssociatedTypeWitness = (_QWORD *)v23;
  v63 = v24;
  WitnessTable = (void *)v27;
  v29 = swift_getOpaqueTypeConformance2(&v61, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v30 = type metadata accessor for NavigationStack(255, v58, v28, v29);
  v31 = sub_1000034AC(&qword_10015FCF0);
  v32 = type metadata accessor for ModifiedContent(255, v30, v31);
  v33 = sub_1000034AC(&qword_10015FCF8);
  v34 = type metadata accessor for ModifiedContent(255, v32, v33);
  v36 = type metadata accessor for EventView(255, v1, v59, v35);
  v37 = swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v30);
  v38 = sub_100007D40(&qword_10015FD00, &qword_10015FCF0, (uint64_t)&unk_10010F810);
  v69 = v37;
  v70 = v38;
  v39 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v32);
  v40 = sub_100007D40(&qword_10015FD08, &qword_10015FCF8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v67 = v39;
  v68 = v40;
  v41 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v34);
  v42 = swift_getWitnessTable(&unk_100113C68, v36);
  v61 = v34;
  AssociatedTypeWitness = (_QWORD *)v1;
  v63 = v36;
  WitnessTable = (void *)v41;
  AssociatedConformanceWitness = v60;
  v66 = v42;
  v43 = swift_getOpaqueTypeMetadata2(255, &v61, &opaque type descriptor for <<opaque return type of View.sheet<A, B>(item:onDismiss:content:)>>, 0);
  v45 = type metadata accessor for FilterView(255, v1, v59, v44);
  v61 = v34;
  AssociatedTypeWitness = (_QWORD *)v1;
  v63 = v36;
  WitnessTable = (void *)v41;
  AssociatedConformanceWitness = v60;
  v66 = v42;
  v46 = swift_getOpaqueTypeConformance2(&v61, &opaque type descriptor for <<opaque return type of View.sheet<A, B>(item:onDismiss:content:)>>, 1);
  v47 = swift_getWitnessTable(&unk_10010EAA0, v45);
  v61 = v43;
  AssociatedTypeWitness = (_QWORD *)v45;
  v63 = v46;
  WitnessTable = (void *)v47;
  v48 = swift_getOpaqueTypeMetadata2(255, &v61, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v61 = v43;
  AssociatedTypeWitness = (_QWORD *)v45;
  v63 = v46;
  WitnessTable = (void *)v47;
  v49 = swift_getOpaqueTypeConformance2(&v61, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v61 = v48;
  AssociatedTypeWitness = &type metadata for String;
  v63 = v49;
  WitnessTable = &protocol witness table for String;
  v50 = swift_getOpaqueTypeMetadata2(255, &v61, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v61 = v48;
  AssociatedTypeWitness = &type metadata for String;
  v63 = v49;
  WitnessTable = &protocol witness table for String;
  v51 = swift_getOpaqueTypeConformance2(&v61, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v61 = v50;
  AssociatedTypeWitness = &type metadata for Bool;
  v63 = v51;
  WitnessTable = &protocol witness table for Bool;
  v52 = swift_getOpaqueTypeMetadata2(255, &v61, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v53 = type metadata accessor for ModifiedContent(255, v52, &type metadata for _AppearanceActionModifier);
  v54 = type metadata accessor for ModifiedContent(255, v53, &type metadata for _AppearanceActionModifier);
  v55 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v56 = type metadata accessor for ModifiedContent(255, v54, v55);
  v61 = v50;
  AssociatedTypeWitness = &type metadata for Bool;
  v63 = v51;
  WitnessTable = &protocol witness table for Bool;
  swift_getOpaqueTypeConformance2(&v61, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v53);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v54);
  sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v56);
}

unint64_t sub_10005E040(uint64_t a1)
{
  unint64_t result;

  result = sub_10005CB98();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_10005E064(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v22[13];

  v2 = swift_checkMetadataState(319, a1[10]);
  if (v3 <= 0x3F)
  {
    v22[0] = *(_QWORD *)(v2 - 8) + 64;
    v22[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_100018CB8(319, &qword_10015EF68, (uint64_t)&type metadata for Bool);
    if (v5 <= 0x3F)
    {
      v6 = *(_QWORD *)(v4 - 8) + 64;
      v22[2] = v6;
      v7 = a1[11];
      v8 = type metadata accessor for Optional(255, v7);
      v9 = type metadata accessor for Published(319, v8);
      if (v10 <= 0x3F)
      {
        v22[3] = *(_QWORD *)(v9 - 8) + 64;
        sub_100018CB8(319, &qword_10015FE88, (uint64_t)&type metadata for String);
        if (v12 <= 0x3F)
        {
          v22[4] = *(_QWORD *)(v11 - 8) + 64;
          v22[5] = v6;
          sub_100018CB8(319, qword_10015DD10, (uint64_t)&type metadata for CGFloat);
          if (v15 <= 0x3F)
          {
            v22[6] = *(_QWORD *)(v13 - 8) + 64;
            v16 = type metadata accessor for FilterViewModel.FilterConfiguration(255, v7, a1[13], v14);
            v17 = type metadata accessor for Published(319, v16);
            if (v18 <= 0x3F)
            {
              v22[7] = *(_QWORD *)(v17 - 8) + 64;
              v19 = type metadata accessor for Array(255, v7);
              v20 = type metadata accessor for Published(319, v19);
              if (v21 <= 0x3F)
              {
                v22[8] = *(_QWORD *)(v20 - 8) + 64;
                v22[9] = " ";
                v22[10] = " ";
                v22[11] = " ";
                v22[12] = &unk_10010E190;
                swift_initClassMetadata2(a1, 0, 13, v22, a1 + 14);
              }
            }
          }
        }
      }
    }
  }
}

BOOL sub_10005E20C()
{
  uint64_t v0;

  return Array.count.getter(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120))) > 5;
}

uint64_t sub_10005E238()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10010E260);
  v2 = swift_getKeyPath(&unk_10010E298);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

void sub_10005E2D4(char a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  ValueWitnessTable *v24;
  uint64_t v25;
  char *v26;
  NSString v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  void **aBlock;
  uint64_t v33;
  Class (*v34)(uint64_t);
  ValueMetadata *v35;
  _QWORD *(*v36)();
  _QWORD *v37;
  char *v38;

  v11 = *v5;
  v12 = sub_100003E70(&qword_10015D3B8);
  v13 = swift_allocObject(v12, 192, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10010A6D0;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v11 + 96) + 16))(*(_QWORD *)(v11 + 80));
  *(_QWORD *)(v13 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v13 + 64) = &off_100162E68;
  *(_BYTE *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = v14;
  *(_QWORD *)(v13 + 48) = v15;
  *(_QWORD *)(v13 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v13 + 104) = &off_100162E40;
  *(_BYTE *)(v13 + 72) = 4;
  *(_QWORD *)(v13 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v13 + 144) = &off_100162EC8;
  *(_BYTE *)(v13 + 112) = a1;
  *(_QWORD *)(v13 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v13 + 184) = &off_100162EA0;
  *(_QWORD *)(v13 + 152) = a2;
  *(_QWORD *)(v13 + 160) = a3;
  *(_BYTE *)(v13 + 168) = a4;
  v16 = *(_QWORD *)(a5 + 72);
  if (v16)
  {
    v17 = *(_QWORD *)(a5 + 64);
    v18 = *(_QWORD *)(a5 + 72);
  }
  else
  {
    v17 = 0;
    v18 = 0xE000000000000000;
  }
  v35 = &type metadata for AnalyticsString;
  v36 = (_QWORD *(*)())&off_100162E68;
  LOBYTE(aBlock) = 1;
  v33 = v17;
  v34 = (Class (*)(uint64_t))v18;
  sub_100005568(a2, a3, a4);
  v38 = (char *)v13;
  v19 = *(_QWORD *)(v13 + 16);
  v20 = *(_QWORD *)(v13 + 24);
  swift_bridgeObjectRetain(v16);
  if (v19 >= v20 >> 1)
    v38 = sub_1000F4CF4((char *)(v20 > 1), v19 + 1, 1, (char *)v13);
  v21 = sub_100005580((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v21);
  v23 = (char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v24->initializeWithCopy)((uint64_t)v23, v25);
  sub_1000DAD34(v19, (uint64_t)v23, (uint64_t *)&v38, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_100162E68);
  sub_1000055A8(&aBlock);
  v26 = v38;
  v27 = String._bridgeToObjectiveC()();
  v28 = (_QWORD *)swift_allocObject(&unk_10014F728, 40, 7);
  v28[2] = 0xD00000000000001ELL;
  v28[3] = 0x80000001001150B0;
  v28[4] = v26;
  v36 = sub_1000055F4;
  v37 = v28;
  aBlock = _NSConcreteStackBlock;
  v33 = 1107296256;
  v34 = sub_1000DACC0;
  v35 = (ValueMetadata *)&unk_10014F740;
  v29 = _Block_copy(&aBlock);
  v30 = v37;
  swift_bridgeObjectRetain(v26);
  swift_release(v30);
  AnalyticsSendEventLazy(v27, v29);
  _Block_release(v29);
  swift_bridgeObjectRelease(v26);

}

uint64_t sub_10005E580()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 96) + 24))(*(_QWORD *)(*(_QWORD *)v0 + 80));
}

uint64_t sub_10005E5B4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 96) + 32))(*(_QWORD *)(*(_QWORD *)v0 + 80));
}

uint64_t sub_10005E5E8()
{
  return sub_10005EC48((uint64_t)&unk_10010E208, (uint64_t)&unk_10010E240);
}

uint64_t sub_10005E5FC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10010E310);
  v2 = swift_getKeyPath(&unk_10010E348);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10005E698@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10005E5FC();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10005E6C0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain(v2);
  return sub_10005E6FC(v1, v2);
}

uint64_t sub_10005E6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  KeyPath = swift_getKeyPath(&unk_10010E310);
  v6 = swift_getKeyPath(&unk_10010E348);
  v8[0] = a1;
  v8[1] = a2;
  swift_retain(v2);
  return static Published.subscript.setter(v8, v2, KeyPath, v6);
}

uint64_t sub_10005E7A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10005E5E8();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10005E7CC(char *a1)
{
  return sub_10005ECF8(*a1, (uint64_t)&unk_10010E208, (uint64_t)&unk_10010E240);
}

void sub_10005E800()
{
  void *v0;
  void *v1;
  _QWORD v2[6];

  sub_10005E6FC(0, 0xE000000000000000);
  sub_10005ECF8(0, (uint64_t)&unk_10010E208, (uint64_t)&unk_10010E240);
  v0 = (void *)objc_opt_self(UIView);
  v2[4] = sub_10008C10C;
  v2[5] = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 1107296256;
  v2[2] = sub_10003616C;
  v2[3] = &unk_10014F768;
  v1 = _Block_copy(v2);
  objc_msgSend(v0, "animateWithDuration:delay:options:animations:completion:", 0, v1, 0, 0.3, 0.0);
  _Block_release(v1);
}

double sub_10005E8CC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v4;

  KeyPath = swift_getKeyPath(&unk_10010E418);
  v2 = swift_getKeyPath(&unk_10010E450);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10005E968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t countAndFlagsBits;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  void *object;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;

  v5 = type metadata accessor for FilterViewModel.FilterConfiguration(0, *(_QWORD *)(*(_QWORD *)v4 + 88), *(_QWORD *)(*(_QWORD *)v4 + 104), a4);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v32 - v7);
  v9 = (void *)objc_opt_self(NSBundle);
  v10 = objc_msgSend(v9, "mainBundle");
  v11._countAndFlagsBits = 0xD00000000000002DLL;
  v33._object = (void *)0xE000000000000000;
  v11._object = (void *)0x8000000100116390;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v33._countAndFlagsBits = 0;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v33);

  v14 = objc_msgSend(v9, "mainBundle");
  v34._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001001157E0;
  v15._countAndFlagsBits = 0xD000000000000025;
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v34._countAndFlagsBits = 0;
  v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v34);

  v18 = sub_100003E70(&qword_10015D718);
  v19 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_10010ACC0;
  sub_10005EDAC();
  v20 = *v8;
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)(v19 + 56) = &type metadata for Int;
  *(_QWORD *)(v19 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v19 + 32) = v20;
  countAndFlagsBits = String.init(format:_:)(v13._countAndFlagsBits, v13._object, v19);
  v23 = v22;
  v24 = swift_bridgeObjectRelease(v13._object);
  v28 = sub_10005EFA8(v24, v25, v26, v27);
  v29 = !v28;
  if (v28)
    object = v17._object;
  else
    object = v23;
  if (v29)
    countAndFlagsBits = v17._countAndFlagsBits;
  swift_bridgeObjectRelease(object);
  return countAndFlagsBits;
}

uint64_t sub_10005EB58()
{
  return sub_10005ECF8(1, (uint64_t)&unk_10010E208, (uint64_t)&unk_10010E240);
}

uint64_t sub_10005EB80(double a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  double v6;

  KeyPath = swift_getKeyPath(&unk_10010E418);
  v4 = swift_getKeyPath(&unk_10010E450);
  v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

uint64_t sub_10005EC20()
{
  return sub_10005EDC0((uint64_t)&unk_10010E3C0, (uint64_t)&unk_10010E3F8);
}

uint64_t sub_10005EC34()
{
  return sub_10005EC48((uint64_t)&unk_10010E368, (uint64_t)&unk_10010E3A0);
}

uint64_t sub_10005EC48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  unsigned __int8 v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_10005ECE4(char a1)
{
  return sub_10005ECF8(a1, (uint64_t)&unk_10010E368, (uint64_t)&unk_10010E3A0);
}

uint64_t sub_10005ECF8(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  char v9;

  KeyPath = swift_getKeyPath(a2);
  v7 = swift_getKeyPath(a3);
  v9 = a1;
  swift_retain(v3);
  return static Published.subscript.setter(&v9, v3, KeyPath, v7);
}

uint64_t sub_10005ED98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = sub_10005F030(a1, a2, a3, a4);
  return sub_10005F0DC(v4);
}

uint64_t sub_10005EDAC()
{
  return sub_10005EDC0((uint64_t)&unk_10010E2B8, (uint64_t)&unk_10010E2F0);
}

uint64_t sub_10005EDC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(v2, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_10005EE5C()
{
  return sub_10005EDAC();
}

uint64_t sub_10005EE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10005FA68(a1, a2, a3, a4);
}

uint64_t sub_10005EE9C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;

  v1 = v0;
  v2 = *v0;
  v3 = sub_10005E5FC();
  v5 = v4;
  v6 = swift_bridgeObjectRelease(v4);
  if ((v5 & 0x2000000000000000) != 0)
    v10 = HIBYTE(v5) & 0xF;
  else
    v10 = v3 & 0xFFFFFFFFFFFFLL;
  v11 = sub_10005F030(v6, v7, v8, v9);
  if (v10)
  {
    v12 = type metadata accessor for Array(0, *(_QWORD *)(v2 + 88));
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v12);
    v11 = _ArrayProtocol.filter(_:)(sub_10005F5D4, v1, v12, WitnessTable);
  }
  return sub_10005F0DC(v11);
}

uint64_t sub_10005EF5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 96) + 16))(*(_QWORD *)(*(_QWORD *)v1 + 80));
  v5 = v4;
  sub_1000DADAC(v3, v4, 4, a1);
  return swift_bridgeObjectRelease(v5);
}

BOOL sub_10005EFA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = type metadata accessor for FilterViewModel.FilterConfiguration(0, *(_QWORD *)(*(_QWORD *)v4 + 88), *(_QWORD *)(*(_QWORD *)v4 + 104), a4);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v11 - v7);
  sub_10005EDAC();
  v9 = *v8;
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  return v9 > 0;
}

uint64_t sub_10005F030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, __n128);
  __n128 v15;
  uint64_t v17;

  v5 = type metadata accessor for FilterViewModel.FilterConfiguration(0, *(_QWORD *)(*(_QWORD *)v4 + 88), *(_QWORD *)(*(_QWORD *)v4 + 104), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v17 - v8;
  if (sub_10005EFA8(v7, v10, v11, v12))
  {
    sub_10005EDAC();
    v13 = *((_QWORD *)v9 + 2);
    v14 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
    v15 = swift_bridgeObjectRetain(v13);
    v14(v9, v5, v15);
  }
  else
  {
    v13 = *(_QWORD *)(v4 + *(_QWORD *)(*(_QWORD *)v4 + 120));
    swift_bridgeObjectRetain(v13);
  }
  return v13;
}

uint64_t sub_10005F0DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10010E260);
  v4 = swift_getKeyPath(&unk_10010E298);
  v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

uint64_t sub_10005F17C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v17[4];

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 104);
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2);
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v7 = (char *)v17 - v6;
  (*(void (**)(uint64_t, uint64_t))(v2 + 208))(v3, v2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v9 = sub_100064328(AssociatedTypeWitness, AssociatedConformanceWitness);
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  v17[2] = v9;
  v17[3] = v11;
  v12 = sub_10005E5FC();
  v14 = v13;
  v17[0] = v12;
  v17[1] = v13;
  v15 = sub_10000CB40();
  LOBYTE(v9) = StringProtocol.localizedStandardContains<A>(_:)(v17, &type metadata for String, &type metadata for String, v15, v15);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v14);
  return v9 & 1;
}

uint64_t *sub_10005F2D0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *v0;
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*v0 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 112));
  swift_bridgeObjectRelease(*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 120)));
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 128);
  v3 = sub_100003E70(&qword_10015D7F0);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(v2, v3);
  v5 = (uint64_t)v0 + *(_QWORD *)(*v0 + 136);
  v6 = *(_QWORD *)(v1 + 88);
  v7 = type metadata accessor for Optional(255, v6);
  v8 = type metadata accessor for Published(0, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v5, v8);
  v9 = (uint64_t)v0 + *(_QWORD *)(*v0 + 144);
  v10 = sub_100003E70(&qword_10015FE90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v4((uint64_t)v0 + *(_QWORD *)(*v0 + 152), v3);
  v11 = (uint64_t)v0 + *(_QWORD *)(*v0 + 160);
  v12 = sub_100003E70(&qword_10015D7F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = (uint64_t)v0 + *(_QWORD *)(*v0 + 168);
  v15 = type metadata accessor for FilterViewModel.FilterConfiguration(255, v6, *(_QWORD *)(v1 + 104), v14);
  v16 = type metadata accessor for Published(0, v15);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v13, v16);
  v17 = (uint64_t)v0 + *(_QWORD *)(*v0 + 176);
  v18 = type metadata accessor for Array(255, v6);
  v19 = type metadata accessor for Published(0, v18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
  v20 = (uint64_t)v0 + *(_QWORD *)(*v0 + 184);
  v21 = *(_QWORD *)(v20 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v20 + 24));
  swift_bridgeObjectRelease(v21);
  v22 = (uint64_t)v0 + *(_QWORD *)(*v0 + 192);
  v23 = *(_QWORD *)(v22 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v22 + 24));
  swift_bridgeObjectRelease(v23);
  v24 = (uint64_t)v0 + *(_QWORD *)(*v0 + 200);
  v25 = *(_QWORD *)(v24 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v24 + 24));
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 208) + 8));
  return v0;
}

uint64_t sub_10005F4E8()
{
  uint64_t v0;

  sub_10005F2D0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for VenueEventViewModel(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for VenueEventViewModel);
}

uint64_t sub_10005F518()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10005F544(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005F554(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10005F55C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10005E5E8();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10005F588(char *a1)
{
  return sub_10005ECF8(*a1, (uint64_t)&unk_10010E208, (uint64_t)&unk_10010E240);
}

uint64_t sub_10005F5BC()
{
  return 32;
}

__n128 sub_10005F5C8(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10005F5D4(uint64_t a1)
{
  uint64_t v1;

  return sub_10005F17C(a1, v1) & 1;
}

uint64_t sub_10005F5F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10005E238();
  *a1 = result;
  return result;
}

uint64_t sub_10005F618(_QWORD *a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain(*a1);
  return sub_10005F0DC(v1);
}

uint64_t sub_10005F640()
{
  return 32;
}

__n128 sub_10005F64C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10005F658()
{
  return sub_10005EDAC();
}

uint64_t sub_10005F678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10005FA68(a1, a2, a3, a4);
}

uint64_t sub_10005F698()
{
  return 32;
}

__n128 sub_10005F6A4(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10005F6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t WitnessTable;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v11 = (char *)&v34 - v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v13 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v14 = type metadata accessor for Optional(0, v13);
  v34 = *(_QWORD *)(v14 - 8);
  v35 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v34 - v15;
  v17 = *(void (**)(uint64_t, uint64_t))(a5 + 208);
  v36 = a1;
  v17(a3, a5);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  v37 = v18;
  v19 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v13, &unk_1001199D4, &unk_1001199DC);
  v20 = type metadata accessor for Set(0, v13, *(_QWORD *)(v19 + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v20);
  Collection.first.getter(v20, WitnessTable);
  swift_bridgeObjectRelease(v18);
  v22 = *(_QWORD *)(v13 - 8);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v16, 1, v13);
  if (v23 == 1)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v35);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 152))(a3, a5);
    v26 = v27;
  }
  else
  {
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 40))(v13, v19);
    v26 = v25;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v13);
  }
  v28 = type metadata accessor for PromotionalAssetsController(0);
  v29 = swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v30 = v29 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  v31 = type metadata accessor for ArtistPromotionalAssets(0);
  v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  *(_QWORD *)(v29 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error) = 0;
  *(_QWORD *)(v29 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  ObservationRegistrar.init()(v32);
  *(_QWORD *)(v29 + 16) = v24;
  *(_QWORD *)(v29 + 24) = v26;
  *(_BYTE *)(v29 + 32) = v23 != 1;
  return v29;
}

uint64_t sub_10005F974(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  _QWORD v15[4];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v5 = type metadata accessor for Optional(0, v4);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v15 - v7;
  v16 = v3[10];
  v9 = v16;
  v17 = v4;
  v11 = v3[13];
  v18 = v3[12];
  v10 = v18;
  v19 = v11;
  KeyPath = swift_getKeyPath(&unk_10010E3C0);
  v15[0] = v9;
  v15[1] = v4;
  v15[2] = v10;
  v15[3] = v11;
  v13 = swift_getKeyPath(&unk_10010E3F8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  swift_retain(v1);
  return static Published.subscript.setter(v8, v1, KeyPath, v13);
}

uint64_t sub_10005FA68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  _QWORD v18[4];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 88);
  v8 = *(_QWORD *)(*v4 + 104);
  v9 = type metadata accessor for FilterViewModel.FilterConfiguration(0, v7, v8, a4);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v18 - v11;
  v19 = *(_QWORD *)(v6 + 80);
  v13 = v19;
  v20 = v7;
  v21 = *(_QWORD *)(v6 + 96);
  v14 = v21;
  v22 = v8;
  KeyPath = swift_getKeyPath(&unk_10010E2B8);
  v18[0] = v13;
  v18[1] = v7;
  v18[2] = v14;
  v18[3] = v8;
  v16 = swift_getKeyPath(&unk_10010E2F0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  swift_retain(v4);
  return static Published.subscript.setter(v12, v4, KeyPath, v16);
}

uint64_t sub_10005FB64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10005E5FC();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10005FB8C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain(v2);
  return sub_10005E6FC(v1, v2);
}

uint64_t sub_10005FBC8()
{
  return 32;
}

__n128 sub_10005FBD4(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10005FBE8()
{
  return 32;
}

__n128 sub_10005FBF4(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10005FC08()
{
  return 32;
}

__n128 sub_10005FC14(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_10005FC20(double *a1@<X8>)
{
  *a1 = sub_10005E8CC();
}

uint64_t sub_10005FC48(double *a1)
{
  return sub_10005EB80(*a1);
}

uint64_t sub_10005FC6C()
{
  return 32;
}

__n128 sub_10005FC78(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10005FC8C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;

  KeyPath = swift_getKeyPath(&unk_10010E4C0);
  v2 = swift_getKeyPath(&unk_10010E4E8);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_10005FCF0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10010E508);
  v2 = swift_getKeyPath(&unk_10010E530);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10005FD60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_100003E70(&qword_10015D788) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[7] = swift_task_alloc(v4);
  v3[8] = swift_task_alloc(v4);
  v3[9] = swift_task_alloc(v4);
  v5 = type metadata accessor for MainActor(0);
  v3[10] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v3[11] = v6;
  v3[12] = v7;
  return swift_task_switch(sub_10005FE10, v6, v7);
}

uint64_t sub_10005FE10()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = v0[8];
  v1 = v0[9];
  v4 = v0[5];
  v3 = v0[6];
  v5 = sub_100003E70(&qword_10015D4B8);
  v0[13] = v5;
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v0[14] = v6;
  v6(v1, 1, 1, v5);
  KeyPath = swift_getKeyPath(&unk_10010E4C0);
  v8 = swift_getKeyPath(&unk_10010E4E8);
  sub_100060448(v1, v2);
  swift_retain(v3);
  static Published.subscript.setter(v2, v3, KeyPath, v8);
  sub_100060490(v1);
  v9 = swift_getKeyPath(&unk_10010E508);
  v10 = swift_getKeyPath(&unk_10010E530);
  v0[2] = 0;
  swift_retain(v3);
  static Published.subscript.setter(v0 + 2, v3, v9, v10);
  v11 = async function pointer to Event<>.init(id:)[1];
  swift_bridgeObjectRetain(v4);
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[15] = v12;
  *v12 = v0;
  v12[1] = sub_10005FF4C;
  return Event<>.init(id:)(v0[7], v0[4], v0[5]);
}

uint64_t sub_10005FF4C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100060074;
  else
    v4 = sub_10005FFAC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
}

uint64_t sub_10005FFAC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 112);
  v3 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 80));
  v2(v4, 0, 1, v1);
  KeyPath = swift_getKeyPath(&unk_10010E4C0);
  v7 = swift_getKeyPath(&unk_10010E4E8);
  sub_100060448(v4, v3);
  swift_retain(v5);
  static Published.subscript.setter(v3, v5, KeyPath, v7);
  sub_100060490(v4);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100060074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 80));
  KeyPath = swift_getKeyPath(&unk_10010E508);
  v4 = swift_getKeyPath(&unk_10010E530);
  *(_QWORD *)(v0 + 24) = v1;
  swift_retain(v2);
  static Published.subscript.setter(v0 + 24, v2, KeyPath, v4);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006011C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC16EventViewService15EventController__event;
  v2 = sub_100003E70(&qword_10015E418);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC16EventViewService15EventController__error;
  v4 = sub_100003E70(&qword_10015D118);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10006019C()
{
  return type metadata accessor for EventController(0);
}

uint64_t type metadata accessor for EventController(uint64_t a1)
{
  uint64_t result;

  result = qword_10015FED0;
  if (!qword_10015FED0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EventController);
  return result;
}

void sub_1000601E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_1000034F0(319, (unint64_t *)&unk_10015FEE0, &qword_10015D788);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000034F0(319, &qword_10015CFD8, (uint64_t *)&unk_10015CFE0);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 2, v6, a1 + 80);
    }
  }
}

uint64_t sub_100060288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v19 = sub_100003E70(&qword_10015D118);
  v1 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003E70(&qword_10015E418);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003E70(&qword_10015D788);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v19 - v12;
  v14 = v0 + OBJC_IVAR____TtC16EventViewService15EventController__event;
  v15 = sub_100003E70(&qword_10015D4B8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v13, 1, 1, v15);
  sub_100060448((uint64_t)v13, (uint64_t)v11);
  Published.init(initialValue:)(v11, v8);
  sub_100060490((uint64_t)v13);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v14, v7, v4);
  v16 = v0 + OBJC_IVAR____TtC16EventViewService15EventController__error;
  v20 = 0;
  v17 = sub_100003E70((uint64_t *)&unk_10015CFE0);
  Published.init(initialValue:)(&v20, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v16, v3, v19);
  return v0;
}

uint64_t sub_100060448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100060490(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003E70(&qword_10015D788);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000604E0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 152))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_1000604EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 24);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 216))(*(_QWORD *)(a1 + 16), v1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1);
  v3 = type metadata accessor for Array(0, AssociatedTypeWitness);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v3);
  Collection.first.getter(v3, WitnessTable);
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_100060598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a4, a1, a2);
  v8 = a4 + *(int *)(type metadata accessor for GuideViewModel(0, a2, a3, v7) + 36);
  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000020, 0x8000000100116400);
  *(_QWORD *)v8 = result;
  *(_QWORD *)(v8 + 8) = v10;
  *(_BYTE *)(v8 + 16) = v11 & 1;
  *(_QWORD *)(v8 + 24) = v12;
  return result;
}

uint64_t type metadata accessor for GuideViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GuideViewModel);
}

uint64_t sub_10006062C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = " ";
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_1000606A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain(v9);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v12 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v10 + 8) = v12;
    *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v10 + 24) = v13;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
  }
  return v4;
}

uint64_t sub_100060774(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(v4 + 24));
}

uint64_t sub_1000607BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  v9 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v7 + 8) = v9;
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  v10 = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v7 + 24) = v10;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_10006083C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(_QWORD *)(v7 + 8);
  *(_QWORD *)(v7 + 8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  v11 = *(_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)(v7 + 24) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_1000608D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  return a1;
}

uint64_t sub_10006092C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  v9 = *(_QWORD *)(v7 + 8);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_1000609B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 32) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_100060A2C + 4 * byte_10010E550[v10]))();
  }
}

void sub_100060AB0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 32);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_100060BA4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x100060C20);
}

void sub_100060BAC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x100060BB4);
  JUMPOUT(0x100060C20);
}

void sub_100060BF8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x100060C20);
}

void sub_100060C00()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x100060C20);
}

uint64_t sub_100060C08(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x100060C14);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x100060C20);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t sub_100060C38(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_10010E5C8;
    v4[4] = &unk_10010E5E0;
    v4[5] = &unk_10010E5F8;
    result = swift_initClassMetadata2(a1, 0, 6, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

double sub_100060CD8()
{
  uint64_t v0;
  double v2;

  v0 = sub_100003E70(&qword_100160070);
  Binding.wrappedValue.getter(v0);
  return v2;
}

uint64_t sub_100060D30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v4, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v7 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v8 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v7, &unk_1001199D4, &unk_1001199DC);
  v9 = swift_getAssociatedTypeWitness(255, v8);
  v10 = type metadata accessor for Optional(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v19 - v12;
  sub_100060F44((uint64_t)&v19 - v12);
  v14 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v15 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 1, 1, v15);
  }
  else
  {
    if (qword_10015CE78 != -1)
      swift_once(&qword_10015CE78, sub_1000453E0);
    v17 = qword_10016F678;
    v18 = swift_getAssociatedConformanceWitness(v8, v7, v9, &unk_100118198, &unk_1001181B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 40))(v17, v17, v9, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v13, v9);
  }
}

uint64_t sub_100060F44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2);
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v7 = (char *)&v20 - v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v9 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v10 = type metadata accessor for Optional(0, v9);
  v20 = *(_QWORD *)(v10 - 8);
  v21 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v20 - v11;
  (*(void (**)(uint64_t, uint64_t))(v2 + 208))(v3, v2);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  v23 = v13;
  v14 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v9, &unk_1001199D4, &unk_1001199DC);
  v15 = type metadata accessor for Set(0, v9, *(_QWORD *)(v14 + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v15);
  Collection.first.getter(v15, WitnessTable);
  swift_bridgeObjectRelease(v13);
  v17 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v12, v21);
    v18 = swift_getAssociatedTypeWitness(0, v14);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v22, 1, 1, v18);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v14 + 56))(v9, v14);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v12, v9);
  }
}

id sub_1000611A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v16;
  id v17;
  uint64_t v18;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v5 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v6 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v5, &unk_1001199D4, &unk_1001199DC);
  v7 = swift_getAssociatedTypeWitness(255, v6);
  v8 = type metadata accessor for Optional(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - v10;
  sub_100060F44((uint64_t)&v18 - v10);
  v12 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    v13 = swift_getAssociatedConformanceWitness(v6, v5, v7, &unk_100118198, &unk_1001181B0);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v7, v13);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v7);
    if (v14)
      return (id)v14;
  }
  v16 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v17 = objc_msgSend(v16, "CGColor");

  return v17;
}

double sub_10006139C()
{
  double v0;
  double result;

  v0 = sub_100060CD8();
  result = 0.0;
  if (v0 <= 0.0)
    return sub_100060CD8() * 0.125;
  return result;
}

double sub_1000613CC()
{
  uint64_t v0;
  double v1;
  double result;

  v1 = sub_100060CD8();
  result = 1.0;
  if (v1 > 0.0)
    return sub_100060CD8() * (1.0 / *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112))) + 1.0;
  return result;
}

char *sub_100061410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, _OWORD *a8, double a9, double a10)
{
  uint64_t v10;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;

  v21 = (char *)swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v22 = *(_QWORD *)v21;
  *((_QWORD *)v21 + 2) = a1;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v22 + 80) - 8) + 32))(&v21[*(_QWORD *)(v22 + 104)], a2);
  *(double *)&v21[*(_QWORD *)(*(_QWORD *)v21 + 112)] = a9;
  v23 = &v21[*(_QWORD *)(*(_QWORD *)v21 + 120)];
  *(_QWORD *)v23 = a3;
  *((_QWORD *)v23 + 1) = a4;
  *((double *)v23 + 2) = a10;
  v24 = &v21[*(_QWORD *)(*(_QWORD *)v21 + 128)];
  *(_QWORD *)v24 = a5;
  *((_QWORD *)v24 + 1) = a6;
  v24[16] = a7;
  v25 = &v21[*(_QWORD *)(*(_QWORD *)v21 + 136)];
  v26 = a8[1];
  *(_OWORD *)v25 = *a8;
  *((_OWORD *)v25 + 1) = v26;
  *((_OWORD *)v25 + 2) = a8[2];
  return v21;
}

uint64_t sub_100061504()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104));
  v1 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  v2 = *v1;
  swift_release(v1[1]);
  swift_release(v2);
  v3 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
  v4 = *v3;
  swift_release(v3[1]);
  swift_release(v4);
  v5 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136));
  v6 = *v5;
  swift_release(v5[1]);
  swift_release(v6);
  return v0;
}

uint64_t sub_100061590()
{
  uint64_t v0;

  sub_100061504();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for HeroImageLandscapeModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HeroImageLandscapeModel);
}

uint64_t sub_1000615C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for NavigationButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for NavigationButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v3);
  return a1;
}

ValueMetadata *type metadata accessor for NavigationButton()
{
  return &type metadata for NavigationButton;
}

uint64_t sub_100061688(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100119934, 1);
}

BOOL sub_1000616A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000616B4()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000616F8()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100061720(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100061760(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _BYTE v29[24];
  uint64_t v30;
  uint64_t v31;

  v6 = a1;
  v24[1] = a4;
  v7 = a1 >> 8;
  v8 = type metadata accessor for BorderlessButtonStyle(0);
  v25 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003E70(&qword_100160078);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100003E70(&qword_100160080);
  v24[0] = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003E70(&qword_100160088);
  __chkstk_darwin(v17);
  v26 = (char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[16] = v6;
  v29[17] = v7;
  v30 = a2;
  v31 = a3;
  swift_retain(a3);
  v19 = sub_100003E70(&qword_100160090);
  v20 = sub_100061BA4();
  v21 = Button.init(action:label:)(a2, a3, sub_100061B98, v29, v19, v20);
  BorderlessButtonStyle.init()(v21);
  v22 = sub_100007D40(&qword_1001600A8, &qword_100160078, (uint64_t)&protocol conformance descriptor for Button<A>);
  v23 = sub_100003B3C(&qword_1001600B0, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
  v27 = v16;
  View.buttonStyle<A>(_:)(v10, v11, v8, v22, v23);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  __asm { BR              X10 }
}

uint64_t sub_100061980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t OpaqueTypeConformance2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000026, 0x8000000100116510);
  v6 = *(_QWORD *)(v4 - 224);
  v7 = *(_QWORD *)(v4 - 216);
  v8 = v0;
  v12 = Text.init(_:tableName:bundle:comment:)(v5, v10, v9 & 1, v11, 0, 0, 0, 0, 0, 256);
  v14 = v13;
  v16 = v15;
  *(_QWORD *)(v4 - 120) = v1;
  *(_QWORD *)(v4 - 112) = v8;
  v18 = v17 & 1;
  *(_QWORD *)(v4 - 104) = v2;
  *(_QWORD *)(v4 - 96) = v3;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v4 - 120, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v21 = *(_QWORD *)(v4 - 200);
  v20 = *(_QWORD *)(v4 - 192);
  v22 = *(_QWORD *)(v4 - 184);
  View.accessibility(label:)(v12, v14, v18, v16, v22, OpaqueTypeConformance2);
  sub_10000BFF8(v12, v14, v18);
  swift_bridgeObjectRelease(v16);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v20, v22);
  return sub_100007A98(v21, v7, &qword_100160088);
}

void sub_100061AC4(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_100061B10(unsigned int a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t result;

  v2 = a1 >> 8;
  v3 = ((uint64_t (*)(unint64_t, unint64_t))Image.init(systemName:))(0xD000000000000011, 0x8000000100116580);
  result = swift_getKeyPath(&unk_10010E6F8);
  *(_QWORD *)v1 = v3;
  *(_BYTE *)(v1 + 8) = v2;
  *(_QWORD *)(v1 + 16) = result;
  *(_BYTE *)(v1 + 24) = 0;
  return result;
}

void sub_100061B8C(uint64_t a1@<X8>)
{
  unsigned __int16 *v1;

  sub_100061760(*v1, *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2), a1);
}

void sub_100061B98()
{
  uint64_t v0;

  sub_100061AC4(*(_WORD *)(v0 + 16));
}

unint64_t sub_100061BA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160098;
  if (!qword_100160098)
  {
    v1 = sub_1000034AC(&qword_100160090);
    sub_100061C10();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160098);
  }
  return result;
}

unint64_t sub_100061C10()
{
  unint64_t result;

  result = qword_1001600A0;
  if (!qword_1001600A0)
  {
    result = swift_getWitnessTable(&unk_10010E828, &type metadata for NavigationImageStyle);
    atomic_store(result, (unint64_t *)&qword_1001600A0);
  }
  return result;
}

uint64_t sub_100061C54@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v111 = a2;
  v118 = a1;
  v119 = a5;
  v112 = sub_100003E70(&qword_1001600D0);
  __chkstk_darwin(v112);
  v114 = (uint64_t)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_100003E70(&qword_1001600D8);
  __chkstk_darwin(v108);
  v109 = (uint64_t)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100003E70(&qword_1001600E0);
  __chkstk_darwin(v113);
  v110 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_100003E70(&qword_1001600E8);
  v10 = __chkstk_darwin(v107);
  v105 = (uint64_t)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v106 = (uint64_t)&v102 - v12;
  v117 = sub_100003E70(&qword_1001600F0);
  __chkstk_darwin(v117);
  v115 = (char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_100003E70(&qword_1001600F8);
  __chkstk_darwin(v116);
  v15 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003E70(&qword_10015D728);
  __chkstk_darwin(v16);
  v18 = (char *)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100003E70(&qword_100160100);
  __chkstk_darwin(v19);
  v21 = (char *)&v102 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100003E70(&qword_100160108);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v102 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v102 - v26;
  a4 &= 1u;
  sub_100062664(a3, a4);
  v28 = sub_10001E0BC(a3, a4);
  v29 = sub_10001E324(a3, a4);
  if ((v28 & 1) != 0)
  {
    static SymbolRenderingMode.palette.getter(v29);
    v30 = type metadata accessor for SymbolRenderingMode(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v18, 0, 1, v30);
    KeyPath = swift_getKeyPath(&unk_10010E878);
    v32 = (uint64_t *)&v21[*(int *)(v19 + 36)];
    v33 = sub_100003E70(&qword_100160110);
    sub_100007ADC((uint64_t)v18, (uint64_t)v32 + *(int *)(v33 + 28), &qword_10015D728);
    *v32 = KeyPath;
    v34 = sub_100003E70(&qword_100160118);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v21, v118, v34);
    v35 = sub_100008194((uint64_t)v18, &qword_10015D728);
    v36 = static Color.white.getter(v35);
    v37 = static Color.gray.getter();
    sub_100007ADC((uint64_t)v21, (uint64_t)v25, &qword_100160100);
    v38 = (uint64_t *)&v25[*(int *)(v22 + 36)];
    *v38 = v36;
    v38[1] = v37;
    sub_100008194((uint64_t)v21, &qword_100160100);
    sub_100007A98((uint64_t)v25, (uint64_t)v27, &qword_100160108);
    sub_100007ADC((uint64_t)v27, (uint64_t)v15, &qword_100160108);
    swift_storeEnumTagMultiPayload(v15, v116, 0);
    v39 = sub_100062D44();
    v40 = sub_100062DC8();
    _ConditionalContent<>.init(storage:)(v15, v22, v117, v39, v40);
    v41 = (uint64_t)v27;
    v42 = &qword_100160108;
  }
  else
  {
    v103 = v22;
    v104 = v15;
    v43 = v118;
    if ((_BYTE)v111)
    {
      if (v111 == 1)
      {
        static SymbolRenderingMode.palette.getter(v29);
        v44 = type metadata accessor for SymbolRenderingMode(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v18, 0, 1, v44);
        v45 = swift_getKeyPath(&unk_10010E878);
        v46 = (uint64_t *)&v21[*(int *)(v19 + 36)];
        v47 = sub_100003E70(&qword_100160110);
        sub_100007ADC((uint64_t)v18, (uint64_t)v46 + *(int *)(v47 + 28), &qword_10015D728);
        *v46 = v45;
        v48 = sub_100003E70(&qword_100160118);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v21, v43, v48);
        v49 = sub_100008194((uint64_t)v18, &qword_10015D728);
        v50 = static Color.white.getter(v49);
        v51 = static Color.white.getter(v50);
        v52 = Color.opacity(_:)(0.2);
        swift_release(v51);
        sub_100007ADC((uint64_t)v21, (uint64_t)v25, &qword_100160100);
        v53 = v103;
        v54 = (uint64_t *)&v25[*(int *)(v103 + 36)];
        *v54 = v50;
        v54[1] = v52;
        sub_100008194((uint64_t)v21, &qword_100160100);
        v55 = v27;
        sub_100007A98((uint64_t)v25, (uint64_t)v27, &qword_100160108);
        v56 = (uint64_t)v27;
        v57 = v109;
        sub_100007ADC(v56, v109, &qword_100160108);
        swift_storeEnumTagMultiPayload(v57, v108, 1);
        v58 = sub_100062C24();
        v59 = sub_100062D44();
        v60 = (uint64_t)v110;
        _ConditionalContent<>.init(storage:)(v57, v107, v53, v58, v59);
        v61 = v114;
        sub_100007ADC(v60, v114, &qword_1001600E0);
        swift_storeEnumTagMultiPayload(v61, v112, 0);
        v62 = sub_100062C00();
        v63 = (uint64_t)v115;
        _ConditionalContent<>.init(storage:)(v61, v113, v53, v62, v59);
        sub_100008194(v60, &qword_1001600E0);
        v64 = (uint64_t)v55;
      }
      else
      {
        static SymbolRenderingMode.palette.getter(v29);
        v81 = type metadata accessor for SymbolRenderingMode(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v18, 0, 1, v81);
        v82 = swift_getKeyPath(&unk_10010E878);
        v83 = (uint64_t *)&v21[*(int *)(v19 + 36)];
        v84 = sub_100003E70(&qword_100160110);
        sub_100007ADC((uint64_t)v18, (uint64_t)v83 + *(int *)(v84 + 28), &qword_10015D728);
        *v83 = v82;
        v85 = sub_100003E70(&qword_100160118);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 16))(v21, v43, v85);
        v86 = sub_100008194((uint64_t)v18, &qword_10015D728);
        v87 = static Color.white.getter(v86);
        v88 = static Color.primary.getter(v87);
        v89 = Color.opacity(_:)(0.2);
        swift_release(v88);
        sub_100007ADC((uint64_t)v21, (uint64_t)v25, &qword_100160100);
        v53 = v103;
        v90 = (uint64_t *)&v25[*(int *)(v103 + 36)];
        *v90 = v87;
        v90[1] = v89;
        sub_100008194((uint64_t)v21, &qword_100160100);
        v91 = v27;
        sub_100007A98((uint64_t)v25, (uint64_t)v27, &qword_100160108);
        v92 = (uint64_t)v27;
        v93 = v114;
        sub_100007ADC(v92, v114, &qword_100160108);
        swift_storeEnumTagMultiPayload(v93, v112, 1);
        v94 = sub_100062C00();
        v95 = sub_100062D44();
        v63 = (uint64_t)v115;
        _ConditionalContent<>.init(storage:)(v93, v113, v53, v94, v95);
        v64 = (uint64_t)v91;
      }
      v80 = &qword_100160108;
    }
    else
    {
      static SymbolRenderingMode.hierarchical.getter(v29);
      v65 = type metadata accessor for SymbolRenderingMode(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v18, 0, 1, v65);
      v66 = swift_getKeyPath(&unk_10010E878);
      v67 = (uint64_t *)&v21[*(int *)(v19 + 36)];
      v68 = sub_100003E70(&qword_100160110);
      sub_100007ADC((uint64_t)v18, (uint64_t)v67 + *(int *)(v68 + 28), &qword_10015D728);
      *v67 = v66;
      v69 = sub_100003E70(&qword_100160118);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v21, v43, v69);
      sub_100008194((uint64_t)v18, &qword_10015D728);
      if (qword_10015CE58 != -1)
        swift_once(&qword_10015CE58, sub_1000382B4);
      v70 = qword_10016F650;
      v71 = v105;
      sub_100007ADC((uint64_t)v21, v105, &qword_100160100);
      v72 = v107;
      *(_QWORD *)(v71 + *(int *)(v107 + 36)) = v70;
      swift_retain(v70);
      sub_100008194((uint64_t)v21, &qword_100160100);
      v73 = v106;
      sub_100007A98(v71, v106, &qword_1001600E8);
      v74 = v109;
      sub_100007ADC(v73, v109, &qword_1001600E8);
      swift_storeEnumTagMultiPayload(v74, v108, 0);
      v75 = sub_100062C24();
      v76 = sub_100062D44();
      v77 = (uint64_t)v110;
      v53 = v103;
      _ConditionalContent<>.init(storage:)(v74, v72, v103, v75, v76);
      v78 = v114;
      sub_100007ADC(v77, v114, &qword_1001600E0);
      swift_storeEnumTagMultiPayload(v78, v112, 0);
      v79 = sub_100062C00();
      v63 = (uint64_t)v115;
      _ConditionalContent<>.init(storage:)(v78, v113, v53, v79, v76);
      sub_100008194(v77, &qword_1001600E0);
      v64 = v73;
      v80 = &qword_1001600E8;
    }
    sub_100008194(v64, v80);
    v96 = v116;
    v97 = v117;
    v98 = (uint64_t)v104;
    sub_100007ADC(v63, (uint64_t)v104, &qword_1001600F0);
    swift_storeEnumTagMultiPayload(v98, v96, 1);
    v99 = sub_100062D44();
    v100 = sub_100062DC8();
    _ConditionalContent<>.init(storage:)(v98, v53, v97, v99, v100);
    v41 = v63;
    v42 = &qword_1001600F0;
  }
  return sub_100008194(v41, v42);
}

uint64_t sub_100062634@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accessibilityReduceTransparency.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100062664(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t destroy for NavigationImageStyle(uint64_t a1)
{
  return sub_10001E324(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s16EventViewService20NavigationImageStyleVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  sub_100062664(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for NavigationImageStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  sub_100062664(v3, v4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  sub_10001E324(v5, v6);
  return a1;
}

uint64_t assignWithTake for NavigationImageStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  sub_10001E324(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for NavigationImageStyle()
{
  return &type metadata for NavigationImageStyle;
}

uint64_t getEnumTagSinglePayload for NavigationButton.ColorScheme(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationButton.ColorScheme(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100062854 + 4 * byte_10010E67D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100062888 + 4 * byte_10010E678[v4]))();
}

uint64_t sub_100062888(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100062890(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100062898);
  return result;
}

uint64_t sub_1000628A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000628ACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000628B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000628B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NavigationButton.ColorScheme()
{
  return &type metadata for NavigationButton.ColorScheme;
}

uint64_t storeEnumTagSinglePayload for NavigationButton.Style(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100062920 + 4 * byte_10010E687[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100062954 + 4 * byte_10010E682[v4]))();
}

uint64_t sub_100062954(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006295C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100062964);
  return result;
}

uint64_t sub_100062970(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100062978);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10006297C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100062984(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NavigationButton.Style()
{
  return &type metadata for NavigationButton.Style;
}

unint64_t sub_1000629A4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1001600B8;
  if (!qword_1001600B8)
  {
    v1 = sub_1000034AC(&qword_100160088);
    v2[0] = sub_1000034AC(&qword_100160078);
    v2[1] = type metadata accessor for BorderlessButtonStyle(255);
    v2[2] = sub_100007D40(&qword_1001600A8, &qword_100160078, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_100003B3C(&qword_1001600B0, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001600B8);
  }
  return result;
}

unint64_t sub_100062AB0()
{
  unint64_t result;

  result = qword_1001600C0;
  if (!qword_1001600C0)
  {
    result = swift_getWitnessTable(&unk_10010E798, &type metadata for NavigationButton.Style);
    atomic_store(result, (unint64_t *)&qword_1001600C0);
  }
  return result;
}

unint64_t sub_100062AF8()
{
  unint64_t result;

  result = qword_1001600C8;
  if (!qword_1001600C8)
  {
    result = swift_getWitnessTable(&unk_10010E800, &type metadata for NavigationButton.ColorScheme);
    atomic_store(result, (unint64_t *)&qword_1001600C8);
  }
  return result;
}

uint64_t sub_100062B3C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011995C, 1);
}

uint64_t sub_100062B4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;

  return sub_100061C54(a1, *v2, *((_QWORD *)v2 + 1), v2[16], a2);
}

uint64_t sub_100062B5C()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t sub_100062B7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100003E70(&qword_10015D728);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007ADC(a1, (uint64_t)v4, &qword_10015D728);
  return EnvironmentValues.symbolRenderingMode.setter(v4);
}

uint64_t sub_100062C00()
{
  return sub_10001DE84(&qword_100160120, &qword_1001600E0, (void (*)(void))sub_100062C24, (void (*)(void))sub_100062D44);
}

unint64_t sub_100062C24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160128;
  if (!qword_100160128)
  {
    v1 = sub_1000034AC(&qword_1001600E8);
    sub_100062CA8();
    sub_100007D40(&qword_10015DF28, &qword_10015DF30, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160128);
  }
  return result;
}

unint64_t sub_100062CA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160130;
  if (!qword_100160130)
  {
    v1 = sub_1000034AC(&qword_100160100);
    sub_100007D40(&qword_100160138, &qword_100160118, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_100007D40(&qword_100160140, &qword_100160110, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160130);
  }
  return result;
}

unint64_t sub_100062D44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160148;
  if (!qword_100160148)
  {
    v1 = sub_1000034AC(&qword_100160108);
    sub_100062CA8();
    sub_100007D40(&qword_100160150, &qword_100160158, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier2<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160148);
  }
  return result;
}

uint64_t sub_100062DC8()
{
  return sub_10001DE84(&qword_100160160, &qword_1001600F0, (void (*)(void))sub_100062C00, (void (*)(void))sub_100062D44);
}

uint64_t sub_100062DEC()
{
  return sub_10001DE84(&qword_100160168, &qword_100160170, (void (*)(void))sub_100062D44, (void (*)(void))sub_100062DC8);
}

_QWORD *sub_100062E28(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    *((_BYTE *)v4 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_100062EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_100062F28(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_100062FB4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_100063044(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_1000630BC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10006313C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100063148);
}

uint64_t sub_100063148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1000631C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000631D0);
}

uint64_t sub_1000631D0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CompactDatePickerConfiguration(uint64_t a1)
{
  uint64_t result;

  result = qword_1001601D0;
  if (!qword_1001601D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CompactDatePickerConfiguration);
  return result;
}

uint64_t sub_100063280(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10010E8E0;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_10010E8F8;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000632FC()
{
  return sub_100003B3C(&qword_100160210, type metadata accessor for CompactDatePickerConfiguration, (uint64_t)&unk_10010E950);
}

uint64_t sub_100063328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;

  v29 = a3;
  v5 = sub_100003E70(&qword_100160220);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v28 - v9;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD **)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v28 - v16;
  sub_100063544(a1, (uint64_t)&v28 - v16);
  sub_100063544(a2, (uint64_t)v15);
  v18 = sub_100003B3C(qword_10015DDA0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v17, v15, v11, v18);
  if ((result & 1) != 0)
  {
    v20 = &v10[*(int *)(v5 + 48)];
    v21 = (void (*)(char *, char *, uint64_t))v12[4];
    v21(v10, v17, v11);
    v21(v20, v15, v11);
    v22 = &v8[*(int *)(v5 + 48)];
    v23 = (void (*)(char *, char *, uint64_t))v12[2];
    v23(v8, v10, v11);
    v23(v22, v20, v11);
    v24 = v29;
    v21(v29, v8, v11);
    v25 = (void (*)(char *, uint64_t))v12[1];
    v25(v22, v11);
    v26 = &v8[*(int *)(v5 + 48)];
    v21(v8, v10, v11);
    v21(v26, v20, v11);
    v27 = sub_100003E70(&qword_10015DD00);
    v21(&v24[*(int *)(v27 + 36)], v26, v11);
    return ((uint64_t (*)(char *, uint64_t))v25)(v8, v11);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100063544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD, uint64_t);
  void *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v32 = a1;
  v35 = a2;
  v2 = type metadata accessor for DateComponents(0);
  v33 = *(_QWORD *)(v2 - 8);
  v34 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar(0);
  v30 = *(_QWORD *)(v5 - 8);
  v31 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v30 - v9;
  v11 = sub_100003E70(&qword_100160228);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static Calendar.current.getter(v12);
  static Calendar.current.getter(v15);
  v16 = sub_100003E70(&qword_100160230);
  v17 = type metadata accessor for Calendar.Component(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 72);
  v20 = *(unsigned __int8 *)(v18 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(v16, v21 + 6 * v19, v20 | 7);
  *(_OWORD *)(v22 + 16) = xmmword_10010E8B0;
  v23 = *(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104);
  v23(v22 + v21, enum case for Calendar.Component.year(_:), v17);
  v23(v22 + v21 + v19, enum case for Calendar.Component.month(_:), v17);
  v23(v22 + v21 + 2 * v19, enum case for Calendar.Component.day(_:), v17);
  v23(v22 + v21 + 3 * v19, enum case for Calendar.Component.hour(_:), v17);
  v23(v22 + v21 + 4 * v19, enum case for Calendar.Component.minute(_:), v17);
  v23(v22 + v21 + 5 * v19, enum case for Calendar.Component.second(_:), v17);
  v24 = sub_100063AFC(v22);
  swift_setDeallocating(v22);
  swift_arrayDestroy(v22 + v21, 6, v17);
  swift_deallocClassInstance(v22, 32, 7);
  Calendar.dateComponents(_:from:)(v24, v32);
  swift_bridgeObjectRelease(v24);
  v25 = v31;
  v26 = *(void (**)(char *, uint64_t))(v30 + 8);
  v26(v8, v31);
  Calendar.date(from:)(v4);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v34);
  v26(v10, v25);
  v27 = type metadata accessor for Date(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v14, 1, v27) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v35, v14, v27);
  Date.init()();
  return sub_100063D64((uint64_t)v14);
}

Swift::Int sub_100063844(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  _QWORD v10[9];

  v3 = v1;
  Hasher.init(_seed:)(v10, 0);
  v4 = *v1;
  v5 = v3[1];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v10, v4, v5);
  swift_bridgeObjectRelease(v5);
  v6 = type metadata accessor for Date(0);
  v7 = sub_100003B3C(&qword_100160218, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v10, v6, v7, v8);
  Hasher._combine(_:)(*((_BYTE *)v3 + *(int *)(a1 + 24)));
  return Hasher._finalize()();
}

void sub_100063900(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;

  v4 = v2;
  v6 = *v2;
  v7 = v4[1];
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v6, v7);
  swift_bridgeObjectRelease(v7);
  v8 = type metadata accessor for Date(0);
  v9 = sub_100003B3C(&qword_100160218, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v8, v9, v10);
  Hasher._combine(_:)(*((_BYTE *)v4 + *(int *)(a2 + 24)));
}

Swift::Int sub_1000639AC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  _QWORD v11[9];

  v4 = v2;
  Hasher.init(_seed:)(v11, a1);
  v5 = *v2;
  v6 = v4[1];
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v11, v5, v6);
  swift_bridgeObjectRelease(v6);
  v7 = type metadata accessor for Date(0);
  v8 = sub_100003B3C(&qword_100160218, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v11, v7, v8, v9);
  Hasher._combine(_:)(*((_BYTE *)v4 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

uint64_t sub_100063A64(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  char v9;
  uint64_t v10;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), v9 = 0, (v8 & 1) != 0))
  {
    v10 = type metadata accessor for CompactDatePickerConfiguration(0);
    if ((static Date.== infix(_:_:)((char *)a1 + *(int *)(v10 + 20), (char *)a2 + *(int *)(v10 + 20)) & 1) != 0)
      v9 = *((_BYTE *)a1 + *(int *)(v10 + 24)) ^ *((_BYTE *)a2 + *(int *)(v10 + 24)) ^ 1;
    else
      v9 = 0;
  }
  return v9 & 1;
}

void *sub_100063AFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100003E70(&qword_100160238);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100003B3C(&qword_100160240, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100003B3C(&qword_100160248, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_100063D64(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003E70(&qword_100160228);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_100063DA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for PresentationDetent(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100003E70(&qword_100160250);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100003B3C(&qword_100160258, (uint64_t (*)(uint64_t))&type metadata accessor for PresentationDetent, (uint64_t)&protocol conformance descriptor for PresentationDetent);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100003B3C(&qword_100160260, (uint64_t (*)(uint64_t))&type metadata accessor for PresentationDetent, (uint64_t)&protocol conformance descriptor for PresentationDetent);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_10006400C()
{
  return sub_100003B3C((unint64_t *)&qword_100160268, (uint64_t (*)(uint64_t))&type metadata accessor for Artist, (uint64_t)&unk_10010A570);
}

uint64_t sub_100064038(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t result;
  Swift::Int v29;
  void (*v30)(_BYTE *, _QWORD);
  void (*v31)(char *);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *);
  uint64_t v48;
  char *v49;
  Swift::Int v50;
  uint64_t v51;
  _BYTE v52[32];
  uint64_t v53;

  v39 = a5;
  v40 = a8;
  v47 = a1;
  v48 = a2;
  v38 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v49 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v13 + 8));
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = __chkstk_darwin(AssociatedTypeWitness);
  v18 = (char *)&v38 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_getAssociatedTypeWitness(0, a6);
  v41 = *(_QWORD *)(v21 - 8);
  v42 = v21;
  __chkstk_darwin(v21);
  v23 = (char *)&v38 - v22;
  v24 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v24)
    return static Array._allocateUninitialized(_:)(0, a4);
  v45 = AssociatedTypeWitness;
  v25 = v8;
  v26 = a4;
  v27 = v24;
  v53 = ContiguousArray.init()(v26);
  v43 = type metadata accessor for ContiguousArray(0, v26);
  ContiguousArray.reserveCapacity(_:)(v27);
  v46 = v25;
  result = dispatch thunk of Collection.startIndex.getter(a3, a6);
  if ((v27 & 0x8000000000000000) == 0)
  {
    v29 = v27;
    v44 = v20;
    while (v29)
    {
      v50 = v29;
      v30 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v52, v23, a3, a6);
      v31 = *(void (**)(char *))(v15 + 16);
      v32 = v15;
      v33 = v45;
      v31(v18);
      v30(v52, 0);
      v34 = v23;
      v35 = v18;
      v36 = v44;
      v37 = v51;
      v47(v35, v49);
      if (v37)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v34, v42);
        swift_release(v53);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v38 + 32))(v40, v49, v39);
      }
      v51 = 0;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
      ContiguousArray.append(_:)(v36, v43);
      result = dispatch thunk of Collection.formIndex(after:)(v34, a3, a6);
      v29 = v50 - 1;
      v15 = v32;
      v18 = v35;
      v23 = v34;
      if (v50 == 1)
      {
        (*(void (**)(char *, uint64_t))(v41 + 8))(v34, v42);
        return v53;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100064328(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v19[5];
  uint64_t v20;

  v20 = (*(uint64_t (**)(void))(a2 + 40))();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, &unk_1001199D4, &unk_1001199DC);
  v6 = type metadata accessor for Set(0, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v6);
  v8 = Array.init<A>(_:)(&v20, AssociatedTypeWitness, v6, WitnessTable);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  v9 = Array.init<A>(_:)(&v20, AssociatedTypeWitness, v6, WitnessTable);
  v10 = static Array.+ infix(_:_:)(v8, v9, AssociatedTypeWitness);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  v20 = v10;
  v19[2] = a1;
  v19[3] = a2;
  v11 = type metadata accessor for Array(0, AssociatedTypeWitness);
  v12 = swift_getWitnessTable(&protocol conformance descriptor for [A], v11);
  v14 = sub_100064038((void (*)(char *, char *))sub_100064810, (uint64_t)v19, v11, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Never, v12, (uint64_t)&protocol witness table for Never, v13);
  swift_bridgeObjectRelease(v10);
  v20 = v14;
  v15 = sub_100003E70(&qword_10015ECC8);
  v16 = sub_10003B4BC();
  v17 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v15, v16);
  swift_bridgeObjectRelease(v14);
  return v17;
}

uint64_t sub_1000644FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t WitnessTable;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  _OWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a2);
  v6 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, &unk_1001199D4, &unk_1001199DC);
  v11 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v12 = type metadata accessor for Optional(0, v11);
  v24 = *(_QWORD *)(v12 - 8);
  v25 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v24 - v13;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  v27 = v15;
  v16 = type metadata accessor for Set(0, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v16);
  Collection.first.getter(v16, WitnessTable);
  swift_bridgeObjectRelease(v15);
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v9, 1, AssociatedTypeWitness) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_5:
    v21 = (_OWORD *)v26;
    *(_QWORD *)(v26 + 32) = 0;
    *v21 = 0u;
    v21[1] = 0u;
    return result;
  }
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v9, AssociatedTypeWitness);
  v20 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v14, 1, v11) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v25);
    goto LABEL_5;
  }
  v22 = (_QWORD *)v26;
  *(_QWORD *)(v26 + 24) = v11;
  v22[4] = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v11, &unk_100118198, &unk_1001181B0);
  v23 = sub_100007D80(v22);
  return (*(uint64_t (**)(_QWORD *, char *, uint64_t))(v20 + 32))(v23, v14, v11);
}

uint64_t sub_100064760@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, &unk_1001199D4, &unk_1001199DC);
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
  v9 = swift_checkMetadataState(0, AssociatedTypeWitness);
  result = v8(v9, AssociatedConformanceWitness);
  *a3 = result;
  a3[1] = v11;
  return result;
}

uint64_t sub_100064810@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100064760(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10006482C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  *(_QWORD *)a5 = sub_100064938(a1, a2, a3, a4);
  *(_QWORD *)(a5 + 8) = v8;
  *(_BYTE *)(a5 + 16) = v9 & 1;
  v11 = (int *)type metadata accessor for FilterView(0, a3, a4, v10);
  v12 = (_QWORD *)(a5 + v11[9]);
  *v12 = swift_getKeyPath(&unk_10010E9F0);
  v13 = sub_100003E70(&qword_10015D490);
  swift_storeEnumTagMultiPayload(v12, v13, 0);
  v14 = (_QWORD *)(a5 + v11[10]);
  *v14 = swift_getKeyPath(&unk_10010EA20);
  v15 = sub_100003E70(&qword_10015D488);
  swift_storeEnumTagMultiPayload(v14, v15, 0);
  v16 = (uint64_t *)(a5 + v11[11]);
  v17 = type metadata accessor for RemoteViewConfiguration();
  v18 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
  result = EnvironmentObject.init()(v17, v18);
  *v16 = result;
  v16[1] = v20;
  return result;
}

double sub_100064924@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void sub_100064930(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100064938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t WitnessTable;

  v6 = type metadata accessor for FilterViewModel(0, a3, a4, a4);
  WitnessTable = swift_getWitnessTable(&unk_10010B570, v6);
  return StateObject.init(wrappedValue:)(a1, a2, v6, WitnessTable);
}

uint64_t type metadata accessor for FilterView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FilterView);
}

uint64_t sub_1000649B0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;

  v5 = *v4;
  v6 = v4[1];
  v7 = *((unsigned __int8 *)v4 + 16);
  v8 = type metadata accessor for FilterViewModel(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  WitnessTable = swift_getWitnessTable(&unk_10010B570, v8);
  return a2(v5, v6, v7, v8, WitnessTable);
}

uint64_t sub_100064A1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t TupleTypeMetadata3;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t TupleTypeMetadata;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  void (*v75)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE v83[16];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v82 = a2;
  v80 = type metadata accessor for NavigationPath(255);
  v105 = sub_1000034AC(&qword_10015DA80);
  v3 = sub_1000034AC(&qword_100160330);
  v77 = sub_1000034AC(&qword_100160338);
  v4 = *(_QWORD *)(a1 + 16);
  v79 = *(_QWORD *)(a1 + 24);
  v78 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v79);
  v6 = type metadata accessor for Array(255, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v79, v4, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
  v8 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  v9 = swift_getAssociatedTypeWitness(255, v8);
  v10 = sub_1000034AC(&qword_100160340);
  v11 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v11);
  v12 = type metadata accessor for _AnimationModifier(255, v11);
  v13 = type metadata accessor for ModifiedContent(255, v10, v12);
  v14 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v12);
  v15 = type metadata accessor for ModifiedContent(255, v14, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v13, v15, 0, 0);
  v17 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v17);
  v19 = type metadata accessor for ZStack(255, v17, WitnessTable);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v19);
  v21 = type metadata accessor for Button(255, v19, v20);
  v22 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v23 = type metadata accessor for ModifiedContent(255, v21, v22);
  v100 = v6;
  v101 = v9;
  v102 = v23;
  v103 = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
  v104 = swift_getAssociatedConformanceWitness(v8, AssociatedTypeWitness, v9, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v24 = type metadata accessor for ForEach(255, &v100);
  v98 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v21);
  v99 = sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v97 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v23);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v24);
  v26 = type metadata accessor for LazyVGrid(255, v24, v25);
  v27 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v26);
  v28 = type metadata accessor for ScrollView(255, v26, v27);
  v29 = type metadata accessor for ModifiedContent(255, v28, &type metadata for _PaddingLayout);
  v30 = swift_getTupleTypeMetadata2(255, v3, v29, 0, 0);
  v31 = type metadata accessor for TupleView(255, v30);
  v32 = type metadata accessor for Optional(255, v31);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v3, v77, v32, 0, 0);
  v34 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v35 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v34);
  v36 = type metadata accessor for VStack(255, v34, v35);
  v37 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v36);
  v38 = type metadata accessor for ScrollView(255, v36, v37);
  v39 = type metadata accessor for ModifiedContent(255, v38, &type metadata for PaddingModifier);
  v40 = type metadata accessor for ModifiedContent(255, v39, &type metadata for _PaddingLayout);
  v41 = sub_1000034AC(&qword_10015E328);
  v106 = type metadata accessor for ModifiedContent(255, v40, v41);
  v107 = type metadata accessor for Divider(255);
  v108 = sub_1000034AC(&qword_100160348);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 4);
  v43 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  v44 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v43);
  v45 = type metadata accessor for VStack(255, v43, v44);
  v46 = type metadata accessor for ModifiedContent(255, v45, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v47 = type metadata accessor for CompactDatePickerConfiguration(255);
  v95 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v45);
  v96 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  v48 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v46);
  v49 = sub_100003B3C(&qword_100160210, type metadata accessor for CompactDatePickerConfiguration, (uint64_t)&unk_10010E950);
  v100 = v46;
  v101 = v47;
  v102 = v48;
  v103 = v49;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v100, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v100 = v46;
  v101 = v47;
  v102 = v48;
  v103 = v49;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v100, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v100 = OpaqueTypeMetadata2;
  v101 = v47;
  v102 = OpaqueTypeConformance2;
  v103 = v49;
  v52 = swift_getOpaqueTypeMetadata2(255, &v100, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v100 = OpaqueTypeMetadata2;
  v101 = v47;
  v102 = OpaqueTypeConformance2;
  v103 = v49;
  v53 = swift_getOpaqueTypeConformance2(&v100, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v100 = v52;
  v101 = v53;
  v54 = swift_getOpaqueTypeMetadata2(255, &v100, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v100 = v52;
  v101 = v53;
  v55 = swift_getOpaqueTypeConformance2(&v100, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v100 = v54;
  v101 = v55;
  v56 = swift_getOpaqueTypeMetadata2(255, &v100, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:)>>, 0);
  v57 = sub_1000034AC(&qword_100160350);
  v100 = v54;
  v101 = v55;
  v58 = swift_getOpaqueTypeConformance2(&v100, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:)>>, 1);
  v59 = sub_100007D40(&qword_100160358, &qword_100160350, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v100 = v56;
  v101 = v57;
  v102 = v58;
  v103 = v59;
  v60 = swift_getOpaqueTypeMetadata2(255, &v100, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v61 = sub_1000034AC(&qword_100160360);
  v62 = type metadata accessor for ModifiedContent(255, v60, v61);
  v63 = sub_1000034AC(&qword_100160368);
  v64 = type metadata accessor for ModifiedContent(255, v62, v63);
  v65 = type metadata accessor for ModifiedContent(255, v64, &type metadata for _AppearanceActionModifier);
  v66 = type metadata accessor for ModifiedContent(255, v65, &type metadata for _AppearanceActionModifier);
  v100 = v56;
  v101 = v57;
  v102 = v58;
  v103 = v59;
  v93 = swift_getOpaqueTypeConformance2(&v100, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v94 = sub_100007D40(&qword_100160370, &qword_100160360, (uint64_t)&unk_1001134C0);
  v91 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v62);
  v92 = sub_100007D40(&qword_100160378, &qword_100160368, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v89 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v64);
  v90 = &protocol witness table for _AppearanceActionModifier;
  v87 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v65);
  v88 = &protocol witness table for _AppearanceActionModifier;
  v67 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v66);
  v68 = type metadata accessor for NavigationStack(0, v80, v66, v67);
  v69 = *(_QWORD *)(v68 - 8);
  v70 = __chkstk_darwin(v68);
  v72 = (char *)&v77 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v70);
  v74 = (char *)&v77 - v73;
  v84 = v78;
  v85 = v79;
  v86 = v81;
  NavigationStack.init<>(root:)(sub_10006FE0C, v83, v66, v67);
  swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v68);
  sub_1000F257C((uint64_t)v72, v68, (uint64_t)v74);
  v75 = *(void (**)(char *, uint64_t))(v69 + 8);
  v75(v72, v68);
  sub_1000E3B88((uint64_t)v74, v68, v82);
  return ((uint64_t (*)(char *, uint64_t))v75)(v74, v68);
}

uint64_t sub_1000652B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  uint64_t WitnessTable;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t TupleTypeMetadata3;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t TupleTypeMetadata;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v67;
  uint64_t v68;
  uint64_t OpaqueTypeConformance2;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __n128 v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, char *, uint64_t);
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __n128 v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __n128 v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  char *v184;
  __n128 v185;
  uint64_t v186;
  char *v187;
  void (*v188)(char *, uint64_t, uint64_t);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  __n128 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __n128 v204;
  uint64_t v205;
  uint64_t v206;
  void (*v207)(uint64_t, uint64_t);
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  char *v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void (*v257)(uint64_t, char *, uint64_t);
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD v265[6];
  _QWORD v266[18];
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;

  v264 = a1;
  v250 = a4;
  v6 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v248 = *(_QWORD *)(v6 - 8);
  v249 = v6;
  __chkstk_darwin(v6);
  v247 = (char *)&v209 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v263 = a3;
  v260 = type metadata accessor for FilterView(0, a2, a3, v8);
  v246 = *(_QWORD *)(v260 - 8);
  v257 = *(void (**)(uint64_t, char *, uint64_t))(v246 + 64);
  __chkstk_darwin(v260);
  v261 = (char *)&v209 - v9;
  v259 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v259);
  v245 = (char *)&v209 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v272 = sub_1000034AC(&qword_10015DA80);
  v11 = sub_1000034AC(&qword_100160330);
  v258 = sub_1000034AC(&qword_100160338);
  v262 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  v13 = type metadata accessor for Array(255, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
  v15 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  v16 = swift_getAssociatedTypeWitness(255, v15);
  v17 = sub_1000034AC(&qword_100160340);
  v18 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v18);
  v19 = type metadata accessor for _AnimationModifier(255, v18);
  v20 = type metadata accessor for ModifiedContent(255, v17, v19);
  v21 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v19);
  v22 = type metadata accessor for ModifiedContent(255, v21, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v20, v22, 0, 0);
  v24 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v24);
  v26 = type metadata accessor for ZStack(255, v24, WitnessTable);
  v27 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v26);
  v28 = type metadata accessor for Button(255, v26, v27);
  v29 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v30 = type metadata accessor for ModifiedContent(255, v28, v29);
  v31 = swift_getWitnessTable(&protocol conformance descriptor for [A], v13);
  v32 = swift_getAssociatedConformanceWitness(v15, AssociatedTypeWitness, v16, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v267 = v13;
  v268 = v16;
  v269 = v30;
  v270 = v31;
  v271 = v32;
  v33 = type metadata accessor for ForEach(255, &v267);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v28);
  v35 = sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v266[16] = v34;
  v266[17] = v35;
  v266[15] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v30);
  v36 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v33);
  v37 = type metadata accessor for LazyVGrid(255, v33, v36);
  v38 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v37);
  v39 = type metadata accessor for ScrollView(255, v37, v38);
  v40 = type metadata accessor for ModifiedContent(255, v39, &type metadata for _PaddingLayout);
  v41 = swift_getTupleTypeMetadata2(255, v11, v40, 0, 0);
  v42 = type metadata accessor for TupleView(255, v41);
  v43 = type metadata accessor for Optional(255, v42);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v11, v258, v43, 0, 0);
  v45 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v46 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v45);
  v47 = type metadata accessor for VStack(255, v45, v46);
  v48 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v47);
  v49 = type metadata accessor for ScrollView(255, v47, v48);
  v50 = type metadata accessor for ModifiedContent(255, v49, &type metadata for PaddingModifier);
  v51 = type metadata accessor for ModifiedContent(255, v50, &type metadata for _PaddingLayout);
  v52 = sub_1000034AC(&qword_10015E328);
  v273 = type metadata accessor for ModifiedContent(255, v51, v52);
  v274 = type metadata accessor for Divider(255);
  v275 = sub_1000034AC(&qword_100160348);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 4);
  v54 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  v256 = v54;
  v255 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v54);
  v55 = type metadata accessor for VStack(0, v54, v255);
  v258 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v57 = (char *)&v209 - v56;
  v58 = type metadata accessor for ModifiedContent(0, v55, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v229 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v209 = (char *)&v209 - v59;
  v254 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v55);
  v266[13] = v254;
  v266[14] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  v60 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v58);
  v61 = sub_100003B3C(&qword_100160210, type metadata accessor for CompactDatePickerConfiguration, (uint64_t)&unk_10010E950);
  v267 = v58;
  v62 = v58;
  v211 = v58;
  v212 = v60;
  v63 = v259;
  v268 = v259;
  v269 = v60;
  v64 = v60;
  v270 = v61;
  v65 = v61;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v267, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v233 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v67 = OpaqueTypeMetadata2;
  __chkstk_darwin(OpaqueTypeMetadata2);
  v251 = (char *)&v209 - v68;
  v267 = v62;
  v268 = v63;
  v269 = v64;
  v270 = v65;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v267, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v267 = v67;
  v268 = v63;
  v70 = v67;
  v218 = v67;
  v219 = OpaqueTypeConformance2;
  v71 = v63;
  v269 = OpaqueTypeConformance2;
  v270 = v65;
  v72 = OpaqueTypeConformance2;
  v210 = v65;
  v73 = swift_getOpaqueTypeMetadata2(0, &v267, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v231 = *(_QWORD *)(v73 - 8);
  v74 = v73;
  __chkstk_darwin(v73);
  v214 = (char *)&v209 - v75;
  v267 = v70;
  v268 = v71;
  v269 = v72;
  v270 = v65;
  v76 = swift_getOpaqueTypeConformance2(&v267, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v216 = v74;
  v217 = v76;
  v267 = v74;
  v268 = v76;
  v77 = v76;
  v78 = swift_getOpaqueTypeMetadata2(0, &v267, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v234 = *(_QWORD *)(v78 - 8);
  v79 = v78;
  __chkstk_darwin(v78);
  v215 = (char *)&v209 - v80;
  v267 = v74;
  v268 = v77;
  v81 = swift_getOpaqueTypeConformance2(&v267, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v267 = v79;
  v268 = v81;
  v82 = v79;
  v220 = v79;
  v221 = v81;
  v83 = v81;
  v84 = swift_getOpaqueTypeMetadata2(0, &v267, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:)>>, 0);
  v232 = *(_QWORD *)(v84 - 8);
  v85 = v84;
  v224 = v84;
  __chkstk_darwin(v84);
  v222 = (char *)&v209 - v86;
  v87 = sub_1000034AC(&qword_100160350);
  v223 = v87;
  v267 = v82;
  v268 = v83;
  v88 = swift_getOpaqueTypeConformance2(&v267, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:)>>, 1);
  v226 = v88;
  v225 = sub_100007D40(&qword_100160358, &qword_100160350, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v267 = v85;
  v268 = v87;
  v269 = v88;
  v270 = v225;
  v89 = swift_getOpaqueTypeMetadata2(0, &v267, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v90 = *(_QWORD *)(v89 - 8);
  v227 = v89;
  v228 = v90;
  __chkstk_darwin(v89);
  v213 = (char *)&v209 - v91;
  v92 = sub_1000034AC(&qword_100160360);
  v93 = type metadata accessor for ModifiedContent(0, v89, v92);
  v236 = *(_QWORD *)(v93 - 8);
  v230 = v93;
  __chkstk_darwin(v93);
  v252 = (char *)&v209 - v94;
  v95 = sub_1000034AC(&qword_100160368);
  v96 = type metadata accessor for ModifiedContent(0, v93, v95);
  v97 = *(_QWORD *)(v96 - 8);
  v237 = v96;
  v239 = v97;
  __chkstk_darwin(v96);
  v253 = (char *)&v209 - v98;
  v100 = type metadata accessor for ModifiedContent(0, v99, &type metadata for _AppearanceActionModifier);
  v101 = *(_QWORD *)(v100 - 8);
  v240 = v100;
  v243 = v101;
  __chkstk_darwin(v100);
  v235 = (char *)&v209 - v102;
  v242 = type metadata accessor for ModifiedContent(0, v103, &type metadata for _AppearanceActionModifier);
  v244 = *(_QWORD *)(v242 - 8);
  v104 = __chkstk_darwin(v242);
  v238 = (char *)&v209 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = __chkstk_darwin(v104);
  v241 = (uint64_t)&v209 - v107;
  v108 = static HorizontalAlignment.leading.getter(v106);
  v109 = v262;
  v110 = v263;
  v266[2] = v262;
  v266[3] = v263;
  v111 = v264;
  v266[4] = v264;
  VStack.init(alignment:spacing:content:)(v108, 0, 0, sub_10006FE18, v266, v256, v255);
  v113 = static SafeAreaRegions.all.getter(v112);
  v114 = static Edge.Set.all.getter(v113);
  View.ignoresSafeArea(_:edges:)(v113, v114, v55, v254);
  (*(void (**)(char *, uint64_t))(v258 + 8))(v57, v55);
  v115 = v260;
  v118 = sub_1000649B0(v260, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v116, v117);
  v119 = (uint64_t)v245;
  sub_100015B68();
  v120 = swift_release(v118);
  v121 = v246;
  v258 = *(_QWORD *)(v246 + 16);
  v122 = v261;
  v123 = v115;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v258)(v261, v111, v115, v120);
  v124 = *(unsigned __int8 *)(v121 + 80);
  v255 = (uint64_t)v257 + ((v124 + 32) & ~v124);
  v256 = (v124 + 32) & ~v124;
  v125 = v256;
  v254 = v124 | 7;
  v126 = swift_allocObject(&unk_10014FCB0, v255, v124 | 7);
  *(_QWORD *)(v126 + 16) = v109;
  *(_QWORD *)(v126 + 24) = v110;
  v127 = *(void (**)(uint64_t, char *, uint64_t))(v121 + 32);
  v128 = v122;
  v129 = v123;
  v127(v126 + v125, v128, v123);
  v257 = v127;
  v130 = v211;
  v131 = v209;
  v132 = v210;
  View.onChange<A>(of:initial:_:)(v119, 0, sub_10006FE28, v126, v211, v259, v212, v210);
  swift_release(v126);
  sub_1000283D4(v119, type metadata accessor for CompactDatePickerConfiguration);
  (*(void (**)(char *, uint64_t))(v229 + 8))(v131, v130);
  v133 = v264;
  v136 = sub_1000649B0(v129, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v134, v135);
  sub_100015C04();
  v137 = swift_release(v136);
  v138 = v261;
  v139 = v129;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v258)(v261, v133, v129, v137);
  v140 = swift_allocObject(&unk_10014FCD8, v255, v254);
  v141 = v263;
  *(_QWORD *)(v140 + 16) = v262;
  *(_QWORD *)(v140 + 24) = v141;
  v127(v140 + v256, v138, v129);
  v142 = v214;
  v143 = v218;
  v144 = v251;
  View.onChange<A>(of:initial:_:)(v119, 0, sub_10006FE28, v140, v218, v259, v219, v132);
  swift_release(v140);
  sub_1000283D4(v119, type metadata accessor for CompactDatePickerConfiguration);
  (*(void (**)(char *, uint64_t))(v233 + 8))(v144, v143);
  v146 = v247;
  v145 = v248;
  v147 = v249;
  (*(void (**)(char *, _QWORD, uint64_t))(v248 + 104))(v247, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v249);
  v149 = v215;
  v148 = v216;
  View.navigationBarTitleDisplayMode(_:)(v146, v216, v217);
  (*(void (**)(char *, uint64_t))(v145 + 8))(v146, v147);
  (*(void (**)(char *, uint64_t))(v231 + 8))(v142, v148);
  v150 = v264;
  v153 = sub_1000649B0(v139, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v151, v152);
  v154 = v153 + *(_QWORD *)(*(_QWORD *)v153 + 232);
  v155 = *(_QWORD *)v154;
  v156 = *(_QWORD *)(v154 + 8);
  v157 = *(unsigned __int8 *)(v154 + 16);
  v158 = *(_QWORD *)(v154 + 24);
  swift_bridgeObjectRetain(v156);
  swift_bridgeObjectRetain(v158);
  v159 = swift_release(v153);
  v160 = v222;
  v161 = v155;
  v162 = v220;
  View.navigationBarTitle(_:)(v161, v156, v157, v158, v220, v221, v159);
  swift_bridgeObjectRelease(v158);
  swift_bridgeObjectRelease(v156);
  (*(void (**)(char *, uint64_t))(v234 + 8))(v149, v162);
  v163 = v263;
  v265[2] = v262;
  v265[3] = v263;
  v265[4] = v150;
  v164 = v150;
  v165 = v213;
  v167 = v223;
  v166 = v224;
  v169 = v225;
  v168 = v226;
  View.toolbar<A>(content:)(sub_10006FECC, v265, v224, v223, v226, v225);
  (*(void (**)(char *, uint64_t))(v232 + 8))(v160, v166);
  v267 = v166;
  v268 = v167;
  v269 = v168;
  v270 = v169;
  v170 = swift_getOpaqueTypeConformance2(&v267, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v259 = sub_10006FED8();
  v171 = v227;
  v172 = sub_10008B254((uint64_t)&type metadata for FilterViewSafeAreaPreferenceKey, (uint64_t)sub_10006C87C, 0, v227, (uint64_t)&type metadata for FilterViewSafeAreaPreferenceKey, v170, v259);
  (*(void (**)(char *, uint64_t, double))(v228 + 8))(v165, v171, v172);
  v174 = v260;
  v173 = v261;
  ((void (*)(char *, uint64_t, uint64_t))v258)(v261, v164, v260);
  v176 = v254;
  v175 = v255;
  v177 = swift_allocObject(&unk_10014FD00, v255, v254);
  v178 = v262;
  *(_QWORD *)(v177 + 16) = v262;
  *(_QWORD *)(v177 + 24) = v163;
  v179 = v256;
  v257(v177 + v256, v173, v174);
  v180 = sub_100007D40(&qword_100160370, &qword_100160360, (uint64_t)&unk_1001134C0);
  v266[11] = v170;
  v266[12] = v180;
  v181 = v230;
  v182 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v230);
  v183 = sub_10006FF78();
  v184 = v252;
  View.onPreferenceChange<A>(_:perform:)(&type metadata for FilterViewSafeAreaPreferenceKey, sub_10006FF20, v177, v181, &type metadata for FilterViewSafeAreaPreferenceKey, v182, v259, v183);
  v185 = swift_release(v177);
  (*(void (**)(char *, uint64_t, __n128))(v236 + 8))(v184, v181, v185);
  v186 = v260;
  v187 = v261;
  v188 = (void (*)(char *, uint64_t, uint64_t))v258;
  ((void (*)(char *, uint64_t, uint64_t))v258)(v261, v264, v260);
  v189 = swift_allocObject(&unk_10014FD28, v175, v176);
  v190 = v263;
  *(_QWORD *)(v189 + 16) = v178;
  *(_QWORD *)(v189 + 24) = v190;
  v191 = v189 + v179;
  v192 = v186;
  v257(v191, v187, v186);
  v193 = sub_100007D40(&qword_100160378, &qword_100160368, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v266[9] = v182;
  v266[10] = v193;
  v194 = v237;
  v195 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v237);
  v196 = v235;
  v197 = v253;
  View.onAppear(perform:)(sub_10006FFC0, v189, v194, v195);
  v198 = swift_release(v189);
  (*(void (**)(char *, uint64_t, __n128))(v239 + 8))(v197, v194, v198);
  v188(v187, v264, v192);
  v199 = swift_allocObject(&unk_10014FD50, v255, v254);
  v200 = v263;
  *(_QWORD *)(v199 + 16) = v262;
  *(_QWORD *)(v199 + 24) = v200;
  v257(v199 + v256, v187, v192);
  v266[7] = v195;
  v266[8] = &protocol witness table for _AppearanceActionModifier;
  v201 = v240;
  v202 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v240);
  v203 = (uint64_t)v238;
  View.onDisappear(perform:)(sub_100070030, v199, v201, v202);
  v204 = swift_release(v199);
  (*(void (**)(char *, uint64_t, __n128))(v243 + 8))(v196, v201, v204);
  v266[5] = v202;
  v266[6] = &protocol witness table for _AppearanceActionModifier;
  v205 = v242;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v242);
  v206 = v241;
  sub_1000F257C(v203, v205, v241);
  v207 = *(void (**)(uint64_t, uint64_t))(v244 + 8);
  v207(v203, v205);
  sub_1000E3B88(v206, v205, v250);
  return ((uint64_t (*)(uint64_t, uint64_t))v207)(v206, v205);
}

uint64_t sub_100066364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedTypeWitness;
  uint64_t v27;
  uint64_t AssociatedConformanceWitness;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t TupleTypeMetadata2;
  uint64_t v38;
  uint64_t WitnessTable;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t TupleTypeMetadata3;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  void (*v103)(char *, uint64_t);
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  void (*v140)(char *, uint64_t);
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  __n128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t KeyPath;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  __n128 v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  _OWORD *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  unsigned int v204;
  unsigned int v205;
  uint64_t v206;
  int v207;
  int v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  double v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  void (*v237)(char *, uint64_t);
  void (*v238)(char *, uint64_t);
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  void (*v256)(char *, char *, uint64_t);
  void (*v257)(char *, uint64_t);
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  char *v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  char *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char v300[8];
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  char *v305;
  uint64_t v306;
  unint64_t v307;
  _QWORD v308[13];
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;

  v251 = a1;
  v290 = a4;
  v289 = type metadata accessor for AccessibilityTraits(0);
  v288 = *(_QWORD *)(v289 - 8);
  __chkstk_darwin(v289);
  v287 = (char *)&v240 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v278 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v278);
  v279 = (char *)&v240 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v299 = type metadata accessor for FilterView(0, a2, a3, v8);
  v265 = *(_QWORD *)(v299 - 8);
  v263 = *(_QWORD *)(v265 + 64);
  __chkstk_darwin(v299);
  v264 = (char *)&v240 - v9;
  v269 = sub_100003E70(&qword_1001603C0);
  v268 = *(_QWORD *)(v269 - 8);
  __chkstk_darwin(v269);
  v267 = (char *)&v240 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v266 = sub_100003E70(&qword_1001603C8);
  __chkstk_darwin(v266);
  v272 = (char *)&v240 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v270 = sub_100003E70(&qword_1001603D0);
  __chkstk_darwin(v270);
  v275 = (uint64_t)&v240 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v271 = sub_100003E70(&qword_1001603D8);
  __chkstk_darwin(v271);
  v276 = (char *)&v240 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v273 = sub_100003E70(&qword_1001603E0);
  __chkstk_darwin(v273);
  v277 = (uint64_t)&v240 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v274 = sub_100003E70(&qword_1001603E8);
  __chkstk_darwin(v274);
  v281 = (char *)&v240 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v282 = sub_100003E70(&qword_1001603F0);
  __chkstk_darwin(v282);
  v283 = (uint64_t)&v240 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v284 = sub_100003E70(&qword_100160348);
  v17 = __chkstk_darwin(v284);
  v286 = (uint64_t)&v240 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v280 = (char *)&v240 - v20;
  __chkstk_darwin(v19);
  v285 = (uint64_t)&v240 - v21;
  v255 = type metadata accessor for ColorScheme(0);
  v254 = *(_QWORD *)(v255 - 8);
  v22 = __chkstk_darwin(v255);
  v253 = (char *)&v240 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v252 = (uint64_t)&v240 - v24;
  v25 = sub_1000034AC(&qword_100160330);
  v296 = sub_1000034AC(&qword_100160338);
  v298 = a3;
  v297 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  v27 = type metadata accessor for Array(255, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
  v29 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  v30 = swift_getAssociatedTypeWitness(255, v29);
  v31 = sub_1000034AC(&qword_100160340);
  v32 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v32);
  v33 = type metadata accessor for _AnimationModifier(255, v32);
  v34 = type metadata accessor for ModifiedContent(255, v31, v33);
  v35 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v33);
  v36 = type metadata accessor for ModifiedContent(255, v35, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v34, v36, 0, 0);
  v38 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v38);
  v40 = type metadata accessor for ZStack(255, v38, WitnessTable);
  v41 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v40);
  v42 = type metadata accessor for Button(255, v40, v41);
  v43 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v44 = type metadata accessor for ModifiedContent(255, v42, v43);
  v45 = swift_getWitnessTable(&protocol conformance descriptor for [A], v27);
  v46 = swift_getAssociatedConformanceWitness(v29, AssociatedTypeWitness, v30, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v309 = v27;
  v310 = v30;
  v311 = v44;
  v312 = v45;
  v313 = v46;
  v47 = type metadata accessor for ForEach(255, &v309);
  v48 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v42);
  v49 = sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v308[11] = v48;
  v308[12] = v49;
  v308[10] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v44);
  v50 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v47);
  v51 = type metadata accessor for LazyVGrid(255, v47, v50);
  v52 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v51);
  v53 = type metadata accessor for ScrollView(255, v51, v52);
  v54 = type metadata accessor for ModifiedContent(255, v53, &type metadata for _PaddingLayout);
  v55 = swift_getTupleTypeMetadata2(255, v25, v54, 0, 0);
  v56 = type metadata accessor for TupleView(255, v55);
  v57 = type metadata accessor for Optional(255, v56);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v25, v296, v57, 0, 0);
  v59 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v60 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v59);
  v61 = type metadata accessor for VStack(255, v59, v60);
  v242 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v61);
  v62 = type metadata accessor for ScrollView(0, v61, v242);
  v243 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v241 = (char *)&v240 - v63;
  v244 = v64;
  v65 = type metadata accessor for ModifiedContent(0, v64, &type metadata for PaddingModifier);
  v246 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v245 = (char *)&v240 - v66;
  v247 = v67;
  v68 = type metadata accessor for ModifiedContent(0, v67, &type metadata for _PaddingLayout);
  v249 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v291 = (char *)&v240 - v69;
  v70 = sub_1000034AC(&qword_10015E328);
  v250 = v68;
  v296 = type metadata accessor for ModifiedContent(0, v68, v70);
  v292 = *(_QWORD *)(v296 - 8);
  v71 = __chkstk_darwin(v296);
  v262 = (char *)&v240 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = __chkstk_darwin(v71);
  v248 = (char *)&v240 - v74;
  __chkstk_darwin(v73);
  v295 = (uint64_t)&v240 - v75;
  v76 = type metadata accessor for Divider(0);
  v77 = *(_QWORD *)(v76 - 8);
  v78 = __chkstk_darwin(v76);
  v294 = (char *)&v240 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v78);
  v81 = (char *)&v240 - v80;
  v82 = sub_100003E70(&qword_10015DA80);
  v83 = __chkstk_darwin(v82);
  v85 = (char *)&v240 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = __chkstk_darwin(v83);
  v88 = (char *)&v240 - v87;
  v89 = Divider.init()(v86);
  LOBYTE(v42) = static Edge.Set.top.getter(v89);
  v90 = v251;
  v93 = sub_1000649B0(v299, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v91, v92);
  v94 = sub_1000160EC();
  swift_release(v93);
  v95 = EdgeInsets.init(_all:)(v94);
  v97 = v96;
  v99 = v98;
  v101 = v100;
  v256 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
  v256(v85, v81, v76);
  v258 = v82;
  v102 = &v85[*(int *)(v82 + 36)];
  *v102 = v42;
  *((double *)v102 + 1) = v95;
  *((_QWORD *)v102 + 2) = v97;
  *((_QWORD *)v102 + 3) = v99;
  *((_QWORD *)v102 + 4) = v101;
  v102[40] = 0;
  v103 = *(void (**)(char *, uint64_t))(v77 + 8);
  v260 = v81;
  v104 = v81;
  v105 = v241;
  v261 = v76;
  v257 = v103;
  v103(v104, v76);
  v259 = v85;
  v293 = v88;
  v106 = sub_100007A98((uint64_t)v85, (uint64_t)v88, &qword_10015DA80);
  v301 = v297;
  v302 = v298;
  v303 = v90;
  v107 = static Axis.Set.vertical.getter(v106);
  v108 = ScrollView.init(_:showsIndicators:content:)(v107, 0, sub_10007013C, v300, v61, v242);
  v109 = static Edge.Set.leading.getter(v108);
  v110 = v109;
  v111 = static Edge.Set.trailing.getter(v109);
  v112 = Edge.Set.init(rawValue:)(0);
  v113 = Edge.Set.init(rawValue:)(v112);
  if (Edge.Set.init(rawValue:)(v113 & v110) != v110)
    v112 = Edge.Set.init(rawValue:)(v112 | v110);
  v114 = Edge.Set.init(rawValue:)(v112);
  if (Edge.Set.init(rawValue:)(v114 & v111) != v111)
    LOBYTE(v112) = Edge.Set.init(rawValue:)(v112 | v111);
  v117 = (uint64_t)v272;
  v118 = v299;
  v119 = sub_1000649B0(v299, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v115, v116);
  v120 = sub_1000160EC();
  v122 = v121;
  v124 = v123;
  v126 = v125;
  swift_release(v119);
  v127 = v244;
  v128 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v244);
  v129 = v245;
  sub_10008B21C(v112, v127, v128, v120, v122, v124, v126);
  v130 = (*(uint64_t (**)(char *, uint64_t))(v243 + 8))(v105, v127);
  v131 = static Edge.Set.horizontal.getter(v130);
  v132 = sub_100070148();
  v308[8] = v128;
  v308[9] = v132;
  v133 = v247;
  v134 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v247);
  View.padding(_:_:)(v131, 0, 1, v133, v134);
  v135 = v118;
  (*(void (**)(char *, uint64_t))(v246 + 8))(v129, v133);
  v136 = v252;
  sub_10001E08C(v252);
  v137 = v254;
  v138 = v253;
  v139 = v255;
  (*(void (**)(char *, _QWORD, uint64_t))(v254 + 104))(v253, enum case for ColorScheme.light(_:), v255);
  LOBYTE(v131) = static ColorScheme.== infix(_:_:)(v136, v138);
  v140 = *(void (**)(char *, uint64_t))(v137 + 8);
  v140(v138, v139);
  v140((char *)v136, v139);
  if ((v131 & 1) != 0)
  {
    v141 = (uint64_t)v281;
    if (qword_10015CE70 != -1)
      swift_once(&qword_10015CE70, sub_1000382F0);
    v142 = &qword_10016F668;
  }
  else
  {
    v141 = (uint64_t)v281;
    if (qword_10015CE48 != -1)
      swift_once(&qword_10015CE48, sub_10003828C);
    v142 = &qword_10016F640;
  }
  v143 = *v142;
  swift_retain(*v142);
  v309 = v143;
  v145 = static Edge.Set.all.getter(v144);
  v308[6] = v134;
  v308[7] = &protocol witness table for _PaddingLayout;
  v146 = v250;
  v147 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v250);
  v148 = (uint64_t)v248;
  v149 = v145;
  v150 = v291;
  View.background<A>(_:ignoresSafeAreaEdges:)(&v309, v149, v146, &type metadata for Color, v147, &protocol witness table for Color);
  v151 = swift_release(v143);
  (*(void (**)(char *, uint64_t, __n128))(v249 + 8))(v150, v146, v151);
  v152 = sub_100007D40(&qword_10015E320, &qword_10015E328, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
  v308[4] = v147;
  v308[5] = v152;
  v153 = v296;
  v281 = (char *)swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v296);
  sub_1000F257C(v148, v153, v295);
  v291 = *(char **)(v292 + 8);
  v154 = ((uint64_t (*)(uint64_t, uint64_t))v291)(v148, v153);
  Divider.init()(v154);
  v155 = v265;
  v156 = v264;
  (*(void (**)(char *, uint64_t, uint64_t))(v265 + 16))(v264, v90, v135);
  v157 = *(unsigned __int8 *)(v155 + 80);
  v158 = (v157 + 32) & ~v157;
  v159 = swift_allocObject(&unk_10014FDF0, v158 + v263, v157 | 7);
  v160 = v297;
  v161 = v298;
  *(_QWORD *)(v159 + 16) = v297;
  *(_QWORD *)(v159 + 24) = v161;
  v162 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v155 + 32))(v159 + v158, v156, v135);
  __chkstk_darwin(v162);
  *(&v240 - 4) = v160;
  *(&v240 - 3) = v161;
  *(&v240 - 2) = v90;
  v163 = sub_100003E70(&qword_100160400);
  v164 = sub_1000701A8();
  v165 = v267;
  Button.init(action:label:)(sub_100070190, v159, sub_10007019C, &v240 - 6, v163, v164);
  v168 = sub_1000649B0(v135, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v166, v167);
  LOBYTE(v163) = sub_1000165D8();
  swift_release(v168);
  KeyPath = swift_getKeyPath(&unk_10010EAF0);
  v170 = swift_allocObject(&unk_10014FE18, 17, 7);
  *(_BYTE *)(v170 + 16) = (v163 & 1) == 0;
  v171 = v268;
  v172 = v269;
  (*(void (**)(uint64_t, char *, uint64_t))(v268 + 16))(v117, v165, v269);
  v173 = (uint64_t *)(v117 + *(int *)(v266 + 36));
  *v173 = KeyPath;
  v173[1] = (uint64_t)sub_100073254;
  v173[2] = v170;
  (*(void (**)(char *, uint64_t))(v171 + 8))(v165, v172);
  v176 = sub_1000649B0(v135, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v174, v175);
  LOBYTE(v159) = sub_1000165D8();
  v178 = swift_release(v176);
  if ((v159 & 1) != 0)
    v179 = static Color.blue.getter(v177);
  else
    v179 = static Color.gray.getter(v178);
  v180 = v179;
  v181 = static Edge.Set.all.getter(v179);
  v182 = v275;
  sub_100007ADC(v117, v275, &qword_1001603C8);
  v183 = v182 + *(int *)(v270 + 36);
  *(_QWORD *)v183 = v180;
  *(_BYTE *)(v183 + 8) = v181;
  sub_100008194(v117, &qword_1001603C8);
  v184 = v279;
  v185 = &v279[*(int *)(v278 + 20)];
  v186 = enum case for RoundedCornerStyle.continuous(_:);
  v187 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v187 - 8) + 104))(v185, v186, v187);
  __asm { FMOV            V0.2D, #8.0 }
  *v184 = _Q0;
  v193 = (uint64_t)v276;
  v194 = (uint64_t)&v276[*(int *)(v271 + 36)];
  sub_100028390((uint64_t)v184, v194, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v194 + *(int *)(sub_100003E70(&qword_10015E338) + 36)) = 256;
  sub_100007ADC(v182, v193, &qword_1001603D0);
  sub_1000283D4((uint64_t)v184, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v195 = sub_100008194(v182, &qword_1001603D0);
  LOBYTE(v194) = static Edge.Set.vertical.getter(v195);
  v196 = v277;
  sub_100007ADC(v193, v277, &qword_1001603D8);
  v197 = v196 + *(int *)(v273 + 36);
  *(_BYTE *)v197 = v194;
  *(_OWORD *)(v197 + 8) = 0u;
  *(_OWORD *)(v197 + 24) = 0u;
  *(_BYTE *)(v197 + 40) = 1;
  v198 = sub_100008194(v193, &qword_1001603D8);
  LOBYTE(v194) = static Edge.Set.horizontal.getter(v198);
  sub_100007ADC(v196, v141, &qword_1001603E0);
  v199 = v141 + *(int *)(v274 + 36);
  *(_BYTE *)v199 = v194;
  *(_OWORD *)(v199 + 8) = 0u;
  *(_OWORD *)(v199 + 24) = 0u;
  *(_BYTE *)(v199 + 40) = 1;
  v200 = sub_100008194(v196, &qword_1001603E0);
  v201 = static Edge.Set.leading.getter(v200);
  v202 = v201;
  v203 = static Edge.Set.trailing.getter(v201);
  v204 = v203;
  v205 = static Edge.Set.bottom.getter(v203);
  v206 = Edge.Set.init(rawValue:)(0);
  v207 = Edge.Set.init(rawValue:)(v206);
  if (Edge.Set.init(rawValue:)(v207 & v202) != v202)
    v206 = Edge.Set.init(rawValue:)(v206 | v202);
  v208 = Edge.Set.init(rawValue:)(v206);
  if (Edge.Set.init(rawValue:)(v208 & v204) != v204)
    v206 = Edge.Set.init(rawValue:)(v206 | v204);
  v209 = Edge.Set.init(rawValue:)(v206);
  if (Edge.Set.init(rawValue:)(v209 & v205) != v205)
    LOBYTE(v206) = Edge.Set.init(rawValue:)(v206 | v205);
  v212 = sub_1000649B0(v135, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v210, v211);
  v213 = sub_1000160EC();
  v215 = v214;
  v217 = v216;
  v219 = v218;
  swift_release(v212);
  v220 = v283;
  sub_100007ADC(v141, v283, &qword_1001603E8);
  v221 = v282;
  v222 = v220 + *(int *)(v282 + 36);
  *(_BYTE *)v222 = v206;
  *(double *)(v222 + 8) = v213;
  *(_QWORD *)(v222 + 16) = v215;
  *(_QWORD *)(v222 + 24) = v217;
  *(_QWORD *)(v222 + 32) = v219;
  v223 = sub_100008194(v141, &qword_1001603E8);
  v224 = v287;
  static AccessibilityTraits.isHeader.getter(v223);
  v225 = sub_10007023C();
  v226 = (uint64_t)v280;
  View.accessibilityAddTraits(_:)(v224, v221, v225);
  (*(void (**)(char *, uint64_t))(v288 + 8))(v224, v289);
  sub_100008194(v220, &qword_1001603F0);
  v227 = v285;
  sub_100007A98(v226, v285, &qword_100160348);
  v228 = (uint64_t)v259;
  sub_100007ADC((uint64_t)v293, (uint64_t)v259, &qword_10015DA80);
  v309 = v228;
  v229 = v262;
  v230 = v295;
  v231 = v296;
  (*(void (**)(char *, uint64_t, uint64_t))(v292 + 16))(v262, v295, v296);
  v310 = (uint64_t)v229;
  v232 = v260;
  v233 = v294;
  v234 = v261;
  v256(v260, v294, v261);
  v311 = (uint64_t)v232;
  v235 = v286;
  sub_100007ADC(v227, v286, &qword_100160348);
  v312 = v235;
  v308[0] = v258;
  v308[1] = v231;
  v308[2] = v234;
  v308[3] = v284;
  v304 = sub_100070490();
  v305 = v281;
  v306 = sub_100003B3C(&qword_100160450, (uint64_t (*)(uint64_t))&type metadata accessor for Divider, (uint64_t)&protocol conformance descriptor for Divider);
  v307 = sub_100070514();
  sub_1000E4768(&v309, 4uLL, (uint64_t)v308);
  sub_100008194(v227, &qword_100160348);
  v236 = v233;
  v237 = v257;
  v257(v236, v234);
  v238 = (void (*)(char *, uint64_t))v291;
  ((void (*)(uint64_t, uint64_t))v291)(v230, v231);
  sub_100008194((uint64_t)v293, &qword_10015DA80);
  sub_100008194(v235, &qword_100160348);
  v237(v232, v234);
  v238(v229, v231);
  return sub_100008194(v228, &qword_10015DA80);
}

uint64_t sub_100067910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t TupleTypeMetadata3;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[16];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[5];

  v50 = a1;
  v51 = a4;
  v48 = sub_1000034AC(&qword_100160330);
  v49 = sub_1000034AC(&qword_100160338);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  v7 = type metadata accessor for Array(255, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
  v9 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  v10 = swift_getAssociatedTypeWitness(255, v9);
  v11 = sub_1000034AC(&qword_100160340);
  v12 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v12);
  v13 = type metadata accessor for _AnimationModifier(255, v12);
  v14 = type metadata accessor for ModifiedContent(255, v11, v13);
  v15 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v13);
  v16 = type metadata accessor for ModifiedContent(255, v15, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v14, v16, 0, 0);
  v18 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v20 = type metadata accessor for ZStack(255, v18, WitnessTable);
  v21 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v20);
  v22 = type metadata accessor for Button(255, v20, v21);
  v23 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v24 = type metadata accessor for ModifiedContent(255, v22, v23);
  v59[0] = v7;
  v59[1] = v10;
  v59[2] = v24;
  v59[3] = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  v59[4] = swift_getAssociatedConformanceWitness(v9, AssociatedTypeWitness, v10, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v25 = type metadata accessor for ForEach(255, v59);
  v57 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v22);
  v58 = sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v56 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v24);
  v26 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v25);
  v27 = type metadata accessor for LazyVGrid(255, v25, v26);
  v28 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v27);
  v29 = type metadata accessor for ScrollView(255, v27, v28);
  v30 = type metadata accessor for ModifiedContent(255, v29, &type metadata for _PaddingLayout);
  v31 = swift_getTupleTypeMetadata2(255, v48, v30, 0, 0);
  v32 = type metadata accessor for TupleView(255, v31);
  v33 = type metadata accessor for Optional(255, v32);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v48, v49, v33, 0, 0);
  v35 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v36 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v35);
  v37 = type metadata accessor for VStack(0, v35, v36);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = __chkstk_darwin(v37);
  v41 = (char *)&v48 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v39);
  v44 = (char *)&v48 - v43;
  v45 = static HorizontalAlignment.leading.getter(v42);
  v53 = a2;
  v54 = a3;
  v55 = v50;
  VStack.init(alignment:spacing:content:)(v45, 0x4030000000000000, 0, sub_100070598, v52, v35, v36);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v37);
  sub_1000F257C((uint64_t)v41, v37, (uint64_t)v44);
  v46 = *(void (**)(char *, uint64_t))(v38 + 8);
  v46(v41, v37);
  sub_1000E3B88((uint64_t)v44, v37, v51);
  return ((uint64_t (*)(char *, uint64_t))v46)(v44, v37);
}

uint64_t sub_100067D64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(char *, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  double v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  double v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void (*v198)(uint64_t, uint64_t);
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v204;
  int v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD v246[9];
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  _OWORD v256[3];
  char v257;
  _BYTE v258[7];
  _BYTE v259[7];
  char v260;
  _BYTE v261[7];
  char v262;
  _BYTE v263[7];
  char v264;
  char v265;
  _BYTE v266[7];
  _BYTE v267[7];
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  _OWORD v281[3];
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char v286;
  uint64_t v287;
  char v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char v292;
  uint64_t v293;
  char v294;
  uint64_t v295;
  uint64_t v296;
  char v297;
  _BYTE v298[7];
  _BYTE v299[7];
  char v300;
  _BYTE v301[7];
  char v302;
  _BYTE v303[7];
  char v304;
  char v305;
  _BYTE v306[7];
  _BYTE v307[7];
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  _OWORD v317[3];

  v241 = a1;
  v233 = a4;
  v243 = a2;
  v244 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  v7 = type metadata accessor for Array(255, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
  v9 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  v10 = swift_getAssociatedTypeWitness(255, v9);
  v11 = sub_1000034AC(&qword_100160340);
  v12 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v12);
  v13 = type metadata accessor for _AnimationModifier(255, v12);
  v14 = type metadata accessor for ModifiedContent(255, v11, v13);
  v15 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v13);
  v16 = type metadata accessor for ModifiedContent(255, v15, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v14, v16, 0, 0);
  v18 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v20 = type metadata accessor for ZStack(255, v18, WitnessTable);
  v21 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v20);
  v22 = type metadata accessor for Button(255, v20, v21);
  v23 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v24 = type metadata accessor for ModifiedContent(255, v22, v23);
  *(_QWORD *)&v308 = v7;
  *((_QWORD *)&v308 + 1) = v10;
  *(_QWORD *)&v309 = v24;
  *((_QWORD *)&v309 + 1) = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  *(_QWORD *)&v310 = swift_getAssociatedConformanceWitness(v9, AssociatedTypeWitness, v10, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v25 = type metadata accessor for ForEach(255, &v308);
  v283 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v22);
  v284 = sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v282 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v24);
  v26 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v25);
  v27 = type metadata accessor for LazyVGrid(255, v25, v26);
  v208 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v27);
  v209 = v27;
  v28 = type metadata accessor for ScrollView(0, v27, v208);
  v211 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v210 = (char *)&v206 - v29;
  v212 = v30;
  v31 = type metadata accessor for ModifiedContent(0, v30, &type metadata for _PaddingLayout);
  v213 = *(_QWORD *)(v31 - 8);
  v32 = __chkstk_darwin(v31);
  v215 = (char *)&v206 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v214 = (uint64_t)&v206 - v34;
  v245 = sub_1000034AC(&qword_100160330);
  v216 = v31;
  v35 = swift_getTupleTypeMetadata2(255, v245, v31, 0, 0);
  v229 = type metadata accessor for TupleView(255, v35);
  v232 = type metadata accessor for Optional(0, v229);
  v240 = *(_QWORD *)(v232 - 8);
  v36 = __chkstk_darwin(v232);
  v231 = (char *)&v206 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v230 = (uint64_t)&v206 - v38;
  v227 = sub_100003E70(&qword_100160460);
  __chkstk_darwin(v227);
  v223 = (uint64_t)&v206 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100003E70(&qword_100160468);
  v225 = *(_QWORD *)(v40 - 8);
  v226 = v40;
  __chkstk_darwin(v40);
  v224 = (char *)&v206 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = sub_100003E70(&qword_100160338);
  v42 = __chkstk_darwin(v238);
  v228 = (uint64_t)&v206 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __chkstk_darwin(v42);
  v222 = (char *)&v206 - v45;
  __chkstk_darwin(v44);
  v239 = (uint64_t)&v206 - v46;
  v235 = type metadata accessor for AccessibilityTraits(0);
  v220 = *(_QWORD *)(v235 - 8);
  v47 = __chkstk_darwin(v235);
  v234 = (char *)&v206 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __chkstk_darwin(v47);
  v207 = (char *)&v206 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __chkstk_darwin(v49);
  v236 = (char *)&v206 - v52;
  v53 = __chkstk_darwin(v51);
  v242 = (uint64_t)&v206 - v54;
  __chkstk_darwin(v53);
  v237 = (uint64_t)&v206 - v55;
  v221 = type metadata accessor for FilterView(0, v243, v244, v56);
  v59 = sub_1000649B0(v221, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v57, v58);
  v60 = v59 + *(_QWORD *)(*(_QWORD *)v59 + 208);
  v61 = *(_QWORD *)v60;
  v62 = *(_QWORD *)(v60 + 8);
  v63 = *(unsigned __int8 *)(v60 + 16);
  v64 = *(_QWORD *)(v60 + 24);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v64);
  swift_release(v59);
  LOWORD(v205) = 256;
  v65 = Text.init(_:tableName:bundle:comment:)(v61, v62, v63, v64, 0, 0, 0, 0, 0, v205);
  v67 = v66;
  v69 = v68;
  v71 = v70 & 1;
  v72 = static Font.Weight.semibold.getter();
  v73 = Text.fontWeight(_:)(*(_QWORD *)&v72, 0, v65, v67, v71, v69);
  v75 = v74;
  v77 = v76;
  v79 = v78 & 1;
  sub_10000BFF8(v65, v67, v71);
  v80 = swift_bridgeObjectRelease(v69);
  v81 = static Font.title2.getter(v80);
  v82 = Text.font(_:)(v81, v73, v75, v79, v77);
  v218 = v83;
  v219 = v82;
  LOBYTE(v10) = v84;
  v217 = v85;
  swift_release(v81);
  sub_10000BFF8(v73, v75, v79);
  v86 = swift_bridgeObjectRelease(v77);
  v87 = static Alignment.leading.getter(v86);
  v89 = _FrameLayout.init(width:height:alignment:)(&v285, 0, 1, 0, 1, v87, v88);
  v90 = v285;
  LOBYTE(v75) = v286;
  v91 = v287;
  LOBYTE(v67) = v288;
  v92 = v289;
  v93 = v290;
  LOBYTE(v81) = static Edge.Set.top.getter(v89);
  v94 = EdgeInsets.init(_all:)(28.0);
  v96 = v95;
  v98 = v97;
  v100 = v99;
  v304 = v10 & 1;
  v302 = v75;
  v300 = v67;
  v297 = 0;
  LOBYTE(v75) = static Edge.Set.bottom.getter(v101);
  v102 = EdgeInsets.init(_all:)(4.0);
  *(_DWORD *)((char *)&v273 + 1) = *(_DWORD *)v303;
  DWORD1(v273) = *(_DWORD *)&v303[3];
  *(_DWORD *)((char *)&v274 + 9) = *(_DWORD *)v301;
  HIDWORD(v274) = *(_DWORD *)&v301[3];
  *(_DWORD *)((char *)&v275 + 9) = *(_DWORD *)v299;
  HIDWORD(v275) = *(_DWORD *)&v299[3];
  *(_DWORD *)((char *)&v277 + 1) = *(_DWORD *)v298;
  DWORD1(v277) = *(_DWORD *)&v298[3];
  v305 = 0;
  *(_QWORD *)&v272 = v219;
  *((_QWORD *)&v272 + 1) = v218;
  LOBYTE(v273) = v304;
  *((_QWORD *)&v273 + 1) = v217;
  *(_QWORD *)&v274 = v90;
  v103 = v242;
  BYTE8(v274) = v302;
  *(_QWORD *)&v275 = v91;
  BYTE8(v275) = v300;
  *(_QWORD *)&v276 = v92;
  *((_QWORD *)&v276 + 1) = v93;
  LOBYTE(v277) = v81;
  *((double *)&v277 + 1) = v94;
  *(_QWORD *)&v278 = v96;
  *((_QWORD *)&v278 + 1) = v98;
  *(_QWORD *)&v279 = v100;
  BYTE8(v279) = v297;
  HIDWORD(v279) = *(_DWORD *)&v307[3];
  *(_DWORD *)((char *)&v279 + 9) = *(_DWORD *)v307;
  LOBYTE(v280) = v75;
  DWORD1(v280) = *(_DWORD *)&v306[3];
  *(_DWORD *)((char *)&v280 + 1) = *(_DWORD *)v306;
  *((double *)&v280 + 1) = v102;
  *(_QWORD *)&v281[0] = v104;
  *((_QWORD *)&v281[0] + 1) = v105;
  *(_QWORD *)&v281[1] = v106;
  BYTE8(v281[1]) = 0;
  v107 = v234;
  static AccessibilityTraits.isHeader.getter(v108);
  v109 = sub_100003E70(&qword_100160470);
  v110 = sub_10005C954(&qword_100160478, &qword_100160470, (void (*)(void))sub_10001BE90);
  v111 = (uint64_t)v236;
  v219 = v110;
  View.accessibilityAddTraits(_:)(v107, v109, v110);
  v220 = *(_QWORD *)(v220 + 8);
  ((void (*)(char *, uint64_t))v220)(v107, v235);
  v316 = v280;
  v317[0] = v281[0];
  *(_OWORD *)((char *)v317 + 9) = *(_OWORD *)((char *)v281 + 9);
  v312 = v276;
  v313 = v277;
  v315 = v279;
  v314 = v278;
  v308 = v272;
  v309 = v273;
  v311 = v275;
  v310 = v274;
  sub_100070600((uint64_t)&v308);
  ModifiedContent<>.accessibilityHeading(_:)(1, v245);
  sub_100008194(v111, &qword_100160330);
  sub_100007A98(v103, v237, &qword_100160330);
  v246[2] = v243;
  v246[3] = v244;
  v246[4] = v241;
  v112 = v223;
  sub_100069D88(v243, v244, v223);
  v113 = sub_100003E70(&qword_100160480);
  v114 = sub_100070648();
  v115 = sub_100070814();
  v116 = v224;
  v117 = Section<>.init(header:content:)(v112, sub_10007063C, v246, v227, v113, v114, v115);
  LOBYTE(v114) = static Edge.Set.bottom.getter(v117);
  v119 = v225;
  v118 = v226;
  v120 = (uint64_t)v222;
  (*(void (**)(char *, char *, uint64_t))(v225 + 16))(v222, v116, v226);
  v121 = v120 + *(int *)(v238 + 36);
  *(_BYTE *)v121 = v114;
  *(_OWORD *)(v121 + 8) = 0u;
  *(_OWORD *)(v121 + 24) = 0u;
  *(_BYTE *)(v121 + 40) = 1;
  v122 = *(void (**)(char *, uint64_t))(v119 + 8);
  v123 = v221;
  v122(v116, v118);
  sub_100007A98(v120, v239, &qword_100160338);
  v126 = sub_1000649B0(v123, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v124, v125);
  LOBYTE(v114) = sub_1000171CC();
  swift_release(v126);
  if ((v114 & 1) != 0)
  {
    v129 = sub_1000649B0(v123, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v127, v128);
    v130 = v129 + *(_QWORD *)(*(_QWORD *)v129 + 224);
    v131 = *(_QWORD *)v130;
    v132 = *(_QWORD *)(v130 + 8);
    v133 = *(unsigned __int8 *)(v130 + 16);
    v134 = *(_QWORD *)(v130 + 24);
    swift_bridgeObjectRetain(v132);
    swift_bridgeObjectRetain(v134);
    swift_release(v129);
    LOWORD(v205) = 256;
    v135 = Text.init(_:tableName:bundle:comment:)(v131, v132, v133, v134, 0, 0, 0, 0, 0, v205);
    v137 = v136;
    v139 = v138;
    v141 = v140 & 1;
    v142 = static Font.Weight.semibold.getter();
    v143 = Text.fontWeight(_:)(*(_QWORD *)&v142, 0, v135, v137, v141, v139);
    v145 = v144;
    v147 = v146;
    v227 = v109;
    v149 = v148 & 1;
    sub_10000BFF8(v135, v137, v141);
    v150 = swift_bridgeObjectRelease(v139);
    v151 = static Font.title2.getter(v150);
    v152 = Text.font(_:)(v151, v143, v145, v149, v147);
    v225 = v153;
    v226 = v152;
    LOBYTE(v141) = v154;
    v224 = v155;
    swift_release(v151);
    sub_10000BFF8(v143, v145, v149);
    v156 = swift_bridgeObjectRelease(v147);
    v157 = static Alignment.leading.getter(v156);
    v159 = _FrameLayout.init(width:height:alignment:)(&v291, 0, 1, 0, 1, v157, v158);
    v160 = v291;
    LOBYTE(v151) = v292;
    v161 = v293;
    LOBYTE(v139) = v294;
    v162 = v295;
    v163 = v296;
    LOBYTE(v143) = static Edge.Set.bottom.getter(v159);
    v164 = EdgeInsets.init(_all:)(4.0);
    v166 = v165;
    v168 = v167;
    v170 = v169;
    v264 = v141 & 1;
    v262 = v151;
    v260 = v139;
    v257 = 0;
    LOBYTE(v151) = static Edge.Set.top.getter(v171);
    v172 = EdgeInsets.init(_all:)(4.0);
    *(_DWORD *)((char *)&v248 + 1) = *(_DWORD *)v263;
    DWORD1(v248) = *(_DWORD *)&v263[3];
    *(_DWORD *)((char *)&v249 + 9) = *(_DWORD *)v261;
    HIDWORD(v249) = *(_DWORD *)&v261[3];
    *(_DWORD *)((char *)&v250 + 9) = *(_DWORD *)v259;
    HIDWORD(v250) = *(_DWORD *)&v259[3];
    *(_DWORD *)((char *)&v252 + 1) = *(_DWORD *)v258;
    DWORD1(v252) = *(_DWORD *)&v258[3];
    v265 = 0;
    *(_QWORD *)&v247 = v226;
    *((_QWORD *)&v247 + 1) = v225;
    LOBYTE(v248) = v264;
    *((_QWORD *)&v248 + 1) = v224;
    *(_QWORD *)&v249 = v160;
    BYTE8(v249) = v262;
    *(_QWORD *)&v250 = v161;
    v103 = v242;
    BYTE8(v250) = v260;
    *(_QWORD *)&v251 = v162;
    *((_QWORD *)&v251 + 1) = v163;
    LOBYTE(v252) = v143;
    *((double *)&v252 + 1) = v164;
    *(_QWORD *)&v253 = v166;
    *((_QWORD *)&v253 + 1) = v168;
    *(_QWORD *)&v254 = v170;
    BYTE8(v254) = v257;
    HIDWORD(v254) = *(_DWORD *)&v267[3];
    *(_DWORD *)((char *)&v254 + 9) = *(_DWORD *)v267;
    LOBYTE(v255) = v151;
    DWORD1(v255) = *(_DWORD *)&v266[3];
    *(_DWORD *)((char *)&v255 + 1) = *(_DWORD *)v266;
    *((double *)&v255 + 1) = v172;
    *(_QWORD *)&v256[0] = v173;
    *((_QWORD *)&v256[0] + 1) = v174;
    *(_QWORD *)&v256[1] = v175;
    BYTE8(v256[1]) = 0;
    v176 = v234;
    static AccessibilityTraits.isHeader.getter(v177);
    v178 = (uint64_t)v207;
    View.accessibilityAddTraits(_:)(v176, v227, v219);
    ((void (*)(char *, uint64_t))v220)(v176, v235);
    v280 = v255;
    v281[0] = v256[0];
    *(_OWORD *)((char *)v281 + 9) = *(_OWORD *)((char *)v256 + 9);
    v276 = v251;
    v277 = v252;
    v278 = v253;
    v279 = v254;
    v272 = v247;
    v273 = v248;
    v274 = v249;
    v275 = v250;
    sub_100070600((uint64_t)&v272);
    v179 = (uint64_t)v236;
    ModifiedContent<>.accessibilityHeading(_:)(1, v245);
    sub_100008194(v178, &qword_100160330);
    v180 = sub_100007A98(v179, v103, &qword_100160330);
    v181 = __chkstk_darwin(v180);
    v182 = v244;
    *(&v206 - 4) = v243;
    *(&v206 - 3) = v182;
    v204 = v241;
    v183 = static Axis.Set.vertical.getter(v181);
    v184 = v210;
    v185 = ScrollView.init(_:showsIndicators:content:)(v183, 0, sub_1000709B4, &v206 - 6, v209, v208);
    v186 = static Edge.Set.bottom.getter(v185);
    v187 = v212;
    v188 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v212);
    v189 = (uint64_t)v215;
    View.padding(_:_:)(v186, 0, 1, v187, v188);
    (*(void (**)(char *, uint64_t))(v211 + 8))(v184, v187);
    v246[7] = v188;
    v246[8] = &protocol witness table for _PaddingLayout;
    v190 = v216;
    v191 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v216);
    v192 = v214;
    sub_1000F257C(v189, v190, v214);
    v193 = v213;
    v194 = *(void (**)(uint64_t, uint64_t))(v213 + 8);
    v194(v189, v190);
    sub_100007ADC(v103, v179, &qword_100160330);
    *(_QWORD *)&v247 = v179;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v193 + 16))(v189, v192, v190);
    *((_QWORD *)&v247 + 1) = v189;
    v269 = v245;
    v270 = v190;
    v246[5] = sub_100070898();
    v246[6] = v191;
    v195 = (uint64_t)v231;
    sub_1000E4768((uint64_t *)&v247, 2uLL, (uint64_t)&v269);
    v194(v192, v190);
    sub_100008194(v103, &qword_100160330);
    v194(v189, v190);
    sub_100008194(v179, &qword_100160330);
    v196 = v229;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v229 - 8) + 56))(v195, 0, 1, v229);
  }
  else
  {
    v196 = v229;
    v195 = (uint64_t)v231;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v229 - 8) + 56))(v231, 1, 1, v229);
  }
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v196);
  v197 = v230;
  sub_1000E472C(v195, v196, v230);
  v198 = *(void (**)(uint64_t, uint64_t))(v240 + 8);
  v199 = v232;
  v198(v195, v232);
  v200 = v237;
  sub_100007ADC(v237, v103, &qword_100160330);
  *(_QWORD *)&v272 = v103;
  v201 = v239;
  v202 = v228;
  sub_100007ADC(v239, v228, &qword_100160338);
  *((_QWORD *)&v272 + 1) = v202;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v240 + 16))(v195, v197, v199);
  *(_QWORD *)&v273 = v195;
  *(_QWORD *)&v247 = v245;
  *((_QWORD *)&v247 + 1) = v238;
  *(_QWORD *)&v248 = v199;
  v269 = sub_100070898();
  v270 = sub_10005C954(&qword_1001604D0, &qword_100160338, (void (*)(void))sub_10007093C);
  v268 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v196);
  v271 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v199);
  sub_1000E4768((uint64_t *)&v272, 3uLL, (uint64_t)&v247);
  v198(v197, v199);
  sub_100008194(v201, &qword_100160338);
  sub_100008194(v200, &qword_100160330);
  v198(v195, v199);
  sub_100008194(v202, &qword_100160338);
  return sub_100008194(v242, &qword_100160330);
}

uint64_t sub_100068E8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v8 = sub_100003E70(&qword_1001604C0);
  v9 = __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v11 = static Alignment.center.getter(v9);
  v11[1] = v12;
  v13 = sub_100003E70(&qword_100160538);
  v14 = sub_100068FA0(a1, a2, a3, (uint64_t)v11 + *(int *)(v13 + 44));
  LOBYTE(a3) = static Edge.Set.top.getter(v14);
  v15 = EdgeInsets.init(_all:)(-8.0);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  sub_100007ADC((uint64_t)v11, a4, &qword_1001604C0);
  v22 = a4 + *(int *)(sub_100003E70(&qword_100160480) + 36);
  *(_BYTE *)v22 = a3;
  *(double *)(v22 + 8) = v15;
  *(_QWORD *)(v22 + 16) = v17;
  *(_QWORD *)(v22 + 24) = v19;
  *(_QWORD *)(v22 + 32) = v21;
  *(_BYTE *)(v22 + 40) = 0;
  return sub_100008194((uint64_t)v11, &qword_1001604C0);
}

uint64_t sub_100068FA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t *v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v67 = a3;
  v75 = a1;
  v76 = a2;
  v74 = a4;
  v4 = sub_100003E70(&qword_100160540);
  __chkstk_darwin(v4);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100003E70(&qword_100160548);
  __chkstk_darwin(v69);
  v72 = (uint64_t)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100003E70(&qword_100160550);
  v8 = __chkstk_darwin(v71);
  v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v73 = (uint64_t)&v65 - v11;
  v12 = type metadata accessor for ColorScheme(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v65 - v17;
  v19 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v19);
  v21 = (_OWORD *)((char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v66 = sub_100003E70(&qword_100160558);
  v22 = __chkstk_darwin(v66);
  v70 = (uint64_t)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v65 - v25;
  __chkstk_darwin(v24);
  v68 = (uint64_t)&v65 - v27;
  v28 = (char *)v21 + *(int *)(v19 + 20);
  v29 = enum case for RoundedCornerStyle.continuous(_:);
  v30 = type metadata accessor for RoundedCornerStyle(0);
  v31 = v29;
  v32 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v28, v31, v30);
  __asm { FMOV            V0.2D, #8.0 }
  *v21 = _Q0;
  type metadata accessor for FilterView(0, v76, v32, v38);
  sub_10001E08C((uint64_t)v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for ColorScheme.light(_:), v12);
  LOBYTE(v28) = static ColorScheme.== infix(_:_:)(v18, v16);
  v39 = *(void (**)(char *, uint64_t))(v13 + 8);
  v39(v16, v12);
  v39(v18, v12);
  if ((v28 & 1) != 0)
  {
    if (qword_10015CE48 != -1)
      swift_once(&qword_10015CE48, sub_10003828C);
    v40 = &qword_10016F640;
  }
  else
  {
    if (qword_10015CE70 != -1)
      swift_once(&qword_10015CE70, sub_1000382F0);
    v40 = &qword_10016F668;
  }
  v41 = *v40;
  swift_retain(*v40);
  KeyPath = swift_getKeyPath(&unk_10010EB50);
  sub_100028390((uint64_t)v21, (uint64_t)v26, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v43 = (uint64_t *)&v26[*(int *)(v66 + 36)];
  *v43 = KeyPath;
  v43[1] = v41;
  sub_1000283D4((uint64_t)v21, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v44 = (uint64_t)v26;
  v45 = v68;
  v46 = sub_100007A98(v44, v68, &qword_100160558);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v46);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v47 = sub_100003E70(&qword_100160560);
  v48 = sub_1000694DC(v76, v32, (uint64_t)&v6[*(int *)(v47 + 44)]);
  LOBYTE(v41) = static Edge.Set.horizontal.getter(v48);
  v49 = v72;
  sub_100007ADC((uint64_t)v6, v72, &qword_100160540);
  v50 = v49 + *(int *)(v69 + 36);
  *(_BYTE *)v50 = v41;
  *(_OWORD *)(v50 + 8) = 0u;
  *(_OWORD *)(v50 + 24) = 0u;
  *(_BYTE *)(v50 + 40) = 1;
  v51 = sub_100008194((uint64_t)v6, &qword_100160540);
  LOBYTE(v41) = static Edge.Set.vertical.getter(v51);
  v52 = EdgeInsets.init(_all:)(4.0);
  v54 = v53;
  v56 = v55;
  v58 = v57;
  sub_100007ADC(v49, (uint64_t)v10, &qword_100160548);
  v59 = &v10[*(int *)(v71 + 36)];
  *v59 = v41;
  *((double *)v59 + 1) = v52;
  *((_QWORD *)v59 + 2) = v54;
  *((_QWORD *)v59 + 3) = v56;
  *((_QWORD *)v59 + 4) = v58;
  v59[40] = 0;
  sub_100008194(v49, &qword_100160548);
  v60 = v73;
  sub_100007A98((uint64_t)v10, v73, &qword_100160550);
  v61 = v70;
  sub_100007ADC(v45, v70, &qword_100160558);
  sub_100007ADC(v60, (uint64_t)v10, &qword_100160550);
  v62 = v74;
  sub_100007ADC(v61, v74, &qword_100160558);
  v63 = sub_100003E70(&qword_100160568);
  sub_100007ADC((uint64_t)v10, v62 + *(int *)(v63 + 48), &qword_100160550);
  sub_100008194(v60, &qword_100160550);
  sub_100008194(v45, &qword_100160558);
  sub_100008194((uint64_t)v10, &qword_100160550);
  return sub_100008194(v61, &qword_100160558);
}

uint64_t sub_1000694DC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  uint64_t WitnessTable;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, char *, uint64_t);
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  char *v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v120 = a3;
  v119 = type metadata accessor for Divider(0);
  v118 = *(_QWORD *)(v119 - 8);
  v5 = __chkstk_darwin(v119);
  v117 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v123 = (char *)&v109 - v7;
  v8 = sub_100003E70(&qword_100160570);
  v9 = __chkstk_darwin(v8);
  v124 = (uint64_t *)((char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __chkstk_darwin(v9);
  v126 = (uint64_t *)((char *)&v109 - v12);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v109 - v13);
  v121 = (uint64_t *)((char *)&v109 - v13);
  v15 = (int *)type metadata accessor for CompactDatePicker(0);
  v16 = __chkstk_darwin(v15);
  v116 = (uint64_t)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v122 = (uint64_t)&v109 - v19;
  v20 = __chkstk_darwin(v18);
  v115 = (char *)&v109 - v21;
  __chkstk_darwin(v20);
  v125 = (uint64_t)&v109 - v22;
  v24 = type metadata accessor for FilterView(0, a1, a2, v23);
  v27 = sub_1000649B0(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v25, v26);
  v141 = a1;
  v142 = a2;
  KeyPath = swift_getKeyPath(&unk_10010EB80);
  v30 = type metadata accessor for FilterViewModel(255, a1, a2, v29);
  WitnessTable = swift_getWitnessTable(&unk_10010B570, v30);
  ObservedObject.Wrapper.subscript.getter(v14, KeyPath, v27, WitnessTable);
  swift_release(v27);
  swift_release(KeyPath);
  v34 = sub_1000649B0(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v32, v33);
  v139 = a1;
  v140 = a2;
  v35 = a1;
  v36 = swift_getKeyPath(&unk_10010EBB8);
  ObservedObject.Wrapper.subscript.getter(v126, v36, v34, WitnessTable);
  swift_release(v34);
  swift_release(v36);
  v39 = sub_1000649B0(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v37, v38);
  v137 = a1;
  v138 = a2;
  v113 = a2;
  v40 = swift_getKeyPath(&unk_10010EB80);
  v41 = v124;
  v112 = WitnessTable;
  ObservedObject.Wrapper.subscript.getter(v124, v40, v39, WitnessTable);
  swift_release(v39);
  swift_release(v40);
  v44 = sub_1000649B0(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v42, v43);
  v135 = v35;
  v136 = a2;
  v45 = swift_getKeyPath(&unk_10010EBF0);
  ObservedObject.Wrapper.subscript.getter(&v143, v45, v44, WitnessTable);
  swift_release(v45);
  swift_release(v44);
  v111 = v143;
  v110 = v144;
  v46 = v145;
  v49 = sub_1000649B0(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v47, v48);
  v50 = v125;
  sub_100016960((char *)(v125 + v15[8]));
  swift_release(v49);
  v53 = sub_1000649B0(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v51, v52);
  v54 = sub_100017264();
  swift_release(v53);
  v57 = sub_1000649B0(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v55, v56);
  LOBYTE(v45) = sub_100016D20();
  swift_release(v57);
  v58 = v121;
  sub_100007A98((uint64_t)v121, v50, &qword_100160570);
  v59 = v126;
  sub_100007A98((uint64_t)v126, v50 + v15[5], &qword_100160570);
  v60 = sub_100007A98((uint64_t)v41, v50 + v15[6], &qword_100160570);
  v114 = v15;
  v61 = (_QWORD *)(v50 + v15[7]);
  v62 = v110;
  *v61 = v111;
  v61[1] = v62;
  v61[2] = v46;
  *(double *)(v50 + v15[9]) = v54;
  *(_BYTE *)(v50 + v15[10]) = v45 & 1;
  Divider.init()(v60);
  v65 = sub_1000649B0(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v63, v64);
  v66 = v113;
  v133 = v35;
  v134 = v113;
  v67 = swift_getKeyPath(&unk_10010EB80);
  v68 = v112;
  ObservedObject.Wrapper.subscript.getter(v58, v67, v65, v112);
  swift_release(v65);
  swift_release(v67);
  v71 = sub_1000649B0(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v69, v70);
  v131 = v35;
  v132 = v66;
  v72 = swift_getKeyPath(&unk_10010EBB8);
  ObservedObject.Wrapper.subscript.getter(v59, v72, v71, v68);
  swift_release(v71);
  swift_release(v72);
  v75 = sub_1000649B0(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v73, v74);
  v129 = v35;
  v130 = v66;
  v76 = swift_getKeyPath(&unk_10010EBB8);
  ObservedObject.Wrapper.subscript.getter(v124, v76, v75, v68);
  swift_release(v75);
  swift_release(v76);
  v79 = sub_1000649B0(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v77, v78);
  v127 = v35;
  v128 = v66;
  v80 = swift_getKeyPath(&unk_10010EC28);
  ObservedObject.Wrapper.subscript.getter(&v143, v80, v79, v68);
  swift_release(v80);
  swift_release(v79);
  v81 = v143;
  v82 = v144;
  v83 = v145;
  v86 = sub_1000649B0(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v84, v85);
  v87 = v114;
  v88 = (uint64_t)v115;
  sub_100016B3C(&v115[v114[8]]);
  swift_release(v86);
  v91 = sub_1000649B0(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v89, v90);
  sub_1000172EC();
  v93 = v92;
  swift_release(v91);
  v96 = sub_1000649B0(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v94, v95);
  LOBYTE(v80) = sub_100016D2C();
  swift_release(v96);
  sub_100007A98((uint64_t)v121, v88, &qword_100160570);
  sub_100007A98((uint64_t)v126, v88 + v87[5], &qword_100160570);
  sub_100007A98((uint64_t)v124, v88 + v87[6], &qword_100160570);
  v97 = (_QWORD *)(v88 + v87[7]);
  *v97 = v81;
  v97[1] = v82;
  v97[2] = v83;
  *(_QWORD *)(v88 + v87[9]) = v93;
  *(_BYTE *)(v88 + v87[10]) = v80 & 1;
  v98 = v122;
  sub_100028390(v125, v122, type metadata accessor for CompactDatePicker);
  v99 = v118;
  v100 = *(void (**)(char *, char *, uint64_t))(v118 + 16);
  v101 = v117;
  v102 = v123;
  v103 = v119;
  v100(v117, v123, v119);
  v104 = v116;
  sub_100028390(v88, v116, type metadata accessor for CompactDatePicker);
  v105 = v120;
  sub_100028390(v98, v120, type metadata accessor for CompactDatePicker);
  v106 = sub_100003E70(&qword_100160578);
  v100((char *)(v105 + *(int *)(v106 + 48)), v101, v103);
  sub_100028390(v104, v105 + *(int *)(v106 + 64), type metadata accessor for CompactDatePicker);
  sub_1000283D4(v88, type metadata accessor for CompactDatePicker);
  v107 = *(void (**)(char *, uint64_t))(v99 + 8);
  v107(v102, v103);
  sub_1000283D4(v125, type metadata accessor for CompactDatePicker);
  sub_1000283D4(v104, type metadata accessor for CompactDatePicker);
  v107(v101, v103);
  return sub_1000283D4(v122, type metadata accessor for CompactDatePicker);
}

void sub_100069CF0(double *a1@<X8>)
{
  *a1 = sub_10001621C();
}

uint64_t sub_100069D18(double *a1)
{
  return sub_100016230(*a1);
}

void sub_100069D3C(double *a1@<X8>)
{
  *a1 = sub_100016244();
}

uint64_t sub_100069D64(double *a1)
{
  return sub_1000162E0(*a1);
}

uint64_t sub_100069D88@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t KeyPath;
  double v37;
  double v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  _BYTE v46[4];
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v53 = a3;
  v54 = type metadata accessor for AccessibilityTraits(0);
  v52 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v51 = &v46[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v50 = sub_100003E70(&qword_100160530);
  v49 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v7 = &v46[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for FilterView(0, a1, a2, v8);
  v12 = sub_1000649B0(v9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v10, v11);
  v13 = (uint64_t *)(v12 + *(_QWORD *)(*(_QWORD *)v12 + 216));
  v14 = *v13;
  v15 = v13[1];
  swift_bridgeObjectRetain(v15);
  swift_release(v12);
  v55 = v14;
  v56 = v15;
  v16 = sub_10000CB40();
  v17 = Text.init<A>(_:)(&v55, &type metadata for String, v16);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v24 = static Edge.Set.bottom.getter(v17);
  v25 = EdgeInsets.init(_all:)(-16.0);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  if (qword_10015CE58 != -1)
    swift_once(&qword_10015CE58, sub_1000382B4);
  v32 = v21 & 1;
  v47 = v32;
  v33 = qword_10016F650;
  v34 = swift_retain(qword_10016F650);
  v35 = static Font.caption.getter(v34);
  KeyPath = swift_getKeyPath(&unk_10010EB20);
  v55 = v17;
  v56 = v19;
  v57 = v32;
  v58 = v23;
  v59 = v24;
  v60 = v25;
  v61 = v27;
  v62 = v29;
  v63 = v31;
  v64 = 0;
  v65 = v33;
  v66 = KeyPath;
  v67 = v35;
  v37 = static Font.Weight.semibold.getter();
  v48 = v23;
  v38 = v37;
  v39 = sub_100003E70(&qword_100160490);
  v40 = sub_1000706F4();
  View.fontWeight(_:)(*(_QWORD *)&v38, 0, v39, v40);
  sub_10000BFF8(v17, v19, v47);
  swift_release(v35);
  swift_release(KeyPath);
  swift_release(v33);
  v41 = swift_bridgeObjectRelease(v48);
  v42 = v51;
  static AccessibilityTraits.isHeader.getter(v41);
  v55 = v39;
  v56 = v40;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v55, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
  v44 = v50;
  View.accessibilityRemoveTraits(_:)(v42, v50, OpaqueTypeConformance2);
  (*(void (**)(_BYTE *, uint64_t))(v52 + 8))(v42, v54);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v49 + 8))(v7, v44);
}

uint64_t sub_10006A070@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t WitnessTable;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _BYTE v55[16];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[5];

  v52 = a1;
  v54 = a4;
  v6 = type metadata accessor for PinnedScrollableViews(0);
  __chkstk_darwin(v6);
  v53 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  v9 = type metadata accessor for Array(255, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
  v11 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  v12 = swift_getAssociatedTypeWitness(255, v11);
  v13 = sub_1000034AC(&qword_100160340);
  v14 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v14);
  v15 = type metadata accessor for _AnimationModifier(255, v14);
  v16 = type metadata accessor for ModifiedContent(255, v13, v15);
  v17 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v15);
  v18 = type metadata accessor for ModifiedContent(255, v17, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v16, v18, 0, 0);
  v20 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v20);
  v22 = type metadata accessor for ZStack(255, v20, WitnessTable);
  v23 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v22);
  v24 = type metadata accessor for Button(255, v22, v23);
  v25 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v26 = type metadata accessor for ModifiedContent(255, v24, v25);
  v27 = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  v28 = swift_getAssociatedConformanceWitness(v11, AssociatedTypeWitness, v12, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v62[0] = v9;
  v62[1] = v12;
  v62[2] = v26;
  v62[3] = v27;
  v62[4] = v28;
  v29 = type metadata accessor for ForEach(255, v62);
  v30 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v24);
  v31 = sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v60 = v30;
  v61 = v31;
  v59 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v26);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v29);
  v33 = type metadata accessor for LazyVGrid(0, v29, v32);
  v51 = *(_QWORD *)(v33 - 8);
  v34 = __chkstk_darwin(v33);
  v36 = (char *)&v51 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v38 = (char *)&v51 - v37;
  v40 = type metadata accessor for FilterView(0, a2, a3, v39);
  v41 = v52;
  v44 = sub_1000649B0(v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v42, v43);
  v45 = *(_QWORD *)(v44 + *(_QWORD *)(*(_QWORD *)v44 + 256));
  swift_bridgeObjectRetain(v45);
  swift_release(v44);
  v56 = a2;
  v57 = a3;
  v58 = v41;
  v47 = static HorizontalAlignment.center.getter(v46);
  v48 = v53;
  sub_100091BC0();
  LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)(v45, v47, 0x4030000000000000, 0, v48, sub_1000709C0, v55, v29, v32);
  swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v33);
  sub_1000F257C((uint64_t)v36, v33, (uint64_t)v38);
  v49 = *(void (**)(char *, uint64_t))(v51 + 8);
  v49(v36, v33);
  sub_1000E3B88((uint64_t)v38, v33, v54);
  return ((uint64_t (*)(char *, uint64_t))v49)(v38, v33);
}

uint64_t sub_10006A494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t WitnessTable;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[6];

  v63 = a3;
  v64 = a1;
  v67 = a5;
  v62 = a2;
  v61 = type metadata accessor for FilterView(0, a2, a3, a4);
  v7 = *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64);
  v65 = *(_QWORD *)(v61 - 8);
  v66 = v7;
  __chkstk_darwin(v61);
  v9 = (char *)&v55 - v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  v11 = type metadata accessor for Array(255, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
  v13 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  v59 = v13;
  v14 = swift_getAssociatedTypeWitness(255, v13);
  v15 = sub_1000034AC(&qword_100160340);
  v16 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v16);
  v17 = type metadata accessor for _AnimationModifier(255, v16);
  v18 = type metadata accessor for ModifiedContent(255, v15, v17);
  v19 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v17);
  v20 = type metadata accessor for ModifiedContent(255, v19, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v18, v20, 0, 0);
  v22 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v22);
  v24 = type metadata accessor for ZStack(255, v22, WitnessTable);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v24);
  v26 = type metadata accessor for Button(255, v24, v25);
  v27 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v28 = type metadata accessor for ModifiedContent(255, v26, v27);
  v58 = v11;
  v29 = swift_getWitnessTable(&protocol conformance descriptor for [A], v11);
  v56 = v29;
  v57 = v14;
  v30 = swift_getAssociatedConformanceWitness(v13, AssociatedTypeWitness, v14, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v71[0] = v11;
  v71[1] = v14;
  v71[2] = v28;
  v71[3] = v29;
  v71[4] = v30;
  v31 = type metadata accessor for ForEach(0, v71);
  v60 = *(_QWORD *)(v31 - 8);
  v32 = __chkstk_darwin(v31);
  v34 = (char *)&v55 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v36 = (char *)&v55 - v35;
  v37 = v61;
  v38 = v64;
  v41 = sub_1000649B0(v61, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v39, v40);
  v42 = sub_100015F0C();
  v43 = swift_release(v41);
  v71[0] = v42;
  v44 = v65;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v65 + 16))(v9, v38, v37, v43);
  v45 = *(unsigned __int8 *)(v44 + 80);
  v46 = v44;
  v47 = (v45 + 32) & ~v45;
  v48 = swift_allocObject(&unk_10014FE40, v47 + v66, v45 | 7);
  v49 = v63;
  *(_QWORD *)(v48 + 16) = v62;
  *(_QWORD *)(v48 + 24) = v49;
  (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v48 + v47, v9, v37);
  v50 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v26);
  v51 = sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v69 = v50;
  v70 = v51;
  v52 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v28);
  ForEach<>.init(_:content:)(v71, sub_100070AF4, v48, v58, v57, v28, v56, v52, v59);
  v68 = v52;
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v31);
  sub_1000F257C((uint64_t)v34, v31, (uint64_t)v36);
  v53 = *(void (**)(char *, uint64_t))(v60 + 8);
  v53(v34, v31);
  sub_1000E3B88((uint64_t)v36, v31, v67);
  return ((uint64_t (*)(char *, uint64_t))v53)(v36, v31);
}

uint64_t sub_10006A8D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t TupleTypeMetadata2;
  uint64_t v27;
  uint64_t WitnessTable;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char v94[16];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[4];

  v80 = a2;
  v82 = a1;
  v91 = a5;
  v7 = type metadata accessor for AccessibilityTraits(0);
  v88 = *(_QWORD *)(v7 - 8);
  v89 = v7;
  __chkstk_darwin(v7);
  v90 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4);
  v92 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = AssociatedTypeWitness;
  v79 = *(_QWORD *)(v92 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  v78 = (char *)&v72 - v11;
  v77 = a4;
  v13 = type metadata accessor for FilterView(0, a3, a4, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v17 = (char *)&v72 - v16;
  v74 = (char *)&v72 - v16;
  v18 = sub_1000034AC(&qword_100160340);
  v19 = a3;
  v20 = *(_QWORD *)(swift_getAssociatedConformanceWitness(a4, a3, v10, &unk_1001191E8, &unk_100119200) + 8);
  v73 = v10;
  v21 = type metadata accessor for Set(255, v10, v20);
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v21);
  v22 = type metadata accessor for _AnimationModifier(255, v21);
  v23 = type metadata accessor for ModifiedContent(255, v18, v22);
  v24 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v22);
  v25 = type metadata accessor for ModifiedContent(255, v24, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v23, v25, 0, 0);
  v27 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v27);
  v29 = type metadata accessor for ZStack(255, v27, WitnessTable);
  v76 = v29;
  v75 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v29);
  v30 = type metadata accessor for Button(0, v29, v75);
  v84 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v93 = (char *)&v72 - v31;
  v32 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v83 = v30;
  v81 = type metadata accessor for ModifiedContent(0, v30, v32);
  v87 = *(_QWORD *)(v81 - 8);
  v33 = __chkstk_darwin(v81);
  v85 = (char *)&v72 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v86 = (uint64_t)&v72 - v35;
  v36 = v14;
  v37 = v80;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v80, v13);
  v38 = v92;
  v39 = v78;
  v40 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v78, v82, v10);
  v41 = *(unsigned __int8 *)(v36 + 80);
  v42 = v36;
  v43 = (v41 + 32) & ~v41;
  v44 = *(unsigned __int8 *)(v38 + 80);
  v45 = (v15 + v43 + v44) & ~v44;
  v46 = swift_allocObject(&unk_10014FE68, v45 + v79, v41 | v44 | 7);
  v47 = v19;
  *(_QWORD *)(v46 + 16) = v19;
  v48 = v77;
  *(_QWORD *)(v46 + 24) = v77;
  (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v46 + v43, v74, v13);
  (*(void (**)(uint64_t, char *, uint64_t))(v92 + 32))(v46 + v45, v39, v73);
  v95 = v47;
  v96 = v48;
  v97 = v37;
  v98 = v40;
  Button.init(action:label:)(sub_100070CF0, v46, sub_100070D84, v94, v76, v75);
  v51 = sub_1000649B0(v13, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v49, v50);
  LOBYTE(v46) = sub_1000184C8(v40);
  v52 = swift_release(v51);
  if ((v46 & 1) != 0)
  {
    v53 = sub_100003E70(&qword_1001604E0);
    v54 = v88;
    v55 = swift_allocObject(v53, ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))+ 2 * *(_QWORD *)(v88 + 72), *(unsigned __int8 *)(v88 + 80) | 7);
    *(_OWORD *)(v55 + 16) = xmmword_10010A6C0;
    v56 = static AccessibilityTraits.isToggle.getter((__n128)xmmword_10010A6C0);
    static AccessibilityTraits.isSelected.getter(v56);
    v99[0] = v55;
    v57 = sub_100003B3C(&qword_1001604E8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v58 = sub_100003E70(&qword_1001604F0);
    v59 = sub_100007D40(&qword_1001604F8, &qword_1001604F0, (uint64_t)&protocol conformance descriptor for [A]);
    v60 = v89;
    v61 = v90;
    dispatch thunk of SetAlgebra.init<A>(_:)(v99, v58, v59, v89, v57);
    v62 = v54;
  }
  else
  {
    v61 = v90;
    static AccessibilityTraits.isToggle.getter(v52);
    v62 = v88;
    v60 = v89;
  }
  v63 = v83;
  v64 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v83);
  v65 = (uint64_t)v85;
  v66 = v93;
  View.accessibilityAddTraits(_:)(v61, v63, v64);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v60);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v66, v63);
  v67 = sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v99[1] = v64;
  v99[2] = v67;
  v68 = v81;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v81);
  v69 = v86;
  sub_1000F257C(v65, v68, v86);
  v70 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
  v70(v65, v68);
  sub_1000E3B88(v69, v68, v91);
  return ((uint64_t (*)(uint64_t, uint64_t))v70)(v69, v68);
}

void sub_10006AEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for FilterView(0, a3, a4, a4);
  v9 = sub_1000649B0(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v7, v8);
  sub_10001856C(a2);
  swift_release(v9);
  v12 = sub_1000649B0(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v10, v11);
  v13 = (uint64_t *)(a1 + *(int *)(v6 + 44));
  v14 = *v13;
  if (*v13)
  {
    v15 = v12;
    swift_retain(*v13);
    sub_1000181F8(7, 0x65726E6567, 0xE500000000000000, 2u, v14);
    swift_release(v15);
    swift_release(v14);
  }
  else
  {
    v16 = v13[1];
    v17 = type metadata accessor for RemoteViewConfiguration();
    v18 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v16, v17, v18);
    __break(1u);
  }
}

uint64_t sub_10006AFF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v32 = a5;
  v9 = sub_1000034AC(&qword_100160340);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
  v12 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v12);
  v13 = type metadata accessor for _AnimationModifier(255, v12);
  v14 = type metadata accessor for ModifiedContent(255, v9, v13);
  v15 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v13);
  v16 = type metadata accessor for ModifiedContent(255, v15, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v14, v16, 0, 0);
  v18 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v20 = type metadata accessor for ZStack(0, v18, WitnessTable);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v31 - v26;
  v33 = a3;
  v34 = a4;
  v35 = a1;
  v36 = a2;
  v28 = static Alignment.center.getter(v25);
  ZStack.init(alignment:content:)(v28);
  swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v20);
  sub_1000F257C((uint64_t)v24, v20, (uint64_t)v27);
  v29 = *(void (**)(char *, uint64_t))(v21 + 8);
  v29(v24, v20);
  sub_1000E3B88((uint64_t)v27, v20, v32);
  return ((uint64_t (*)(char *, uint64_t))v29)(v27, v20);
}

uint64_t sub_10006B224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  double v51;
  uint64_t v52;
  void (*v53)(_QWORD, _QWORD);
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  __n128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __n128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __n128 v140;
  uint64_t (*v141)(uint64_t, uint64_t, __n128);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __n128 v145;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t AssociatedConformanceWitness;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t WitnessTable;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD v172[4];
  uint64_t v173;
  uint64_t *v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  __int128 v180;
  __int128 v181;
  char v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  __int128 v192;
  __int128 v193;
  char v194;
  uint64_t v195;
  uint64_t *v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  __int128 v202;
  __int128 v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  _OWORD v207[2];
  uint64_t v208;

  v168 = a2;
  v169 = a1;
  v160 = a5;
  v153 = sub_100003E70(&qword_100160500);
  __chkstk_darwin(v153);
  v154 = (uint64_t)&v147 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ColorScheme(0);
  v149 = *(_QWORD *)(v8 - 8);
  v150 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v147 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v147 - v12;
  v167 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v167);
  v15 = (_OWORD *)((char *)&v147 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v151 = sub_100003E70(&qword_100160508);
  __chkstk_darwin(v151);
  v17 = (char *)&v147 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003E70(&qword_100160340);
  __chkstk_darwin(v18);
  v156 = (uint64_t *)((char *)&v147 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v148 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4);
  v21 = a4;
  v22 = a3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v21, a3, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
  v158 = AssociatedTypeWitness;
  v23 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v23);
  v162 = v23;
  v24 = type metadata accessor for _AnimationModifier(255, v23);
  v155 = v18;
  v163 = v24;
  v166 = type metadata accessor for ModifiedContent(0, v18, v24);
  v164 = *(_QWORD *)(v166 - 8);
  v25 = __chkstk_darwin(v166);
  v159 = (char *)&v147 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v152 = (char *)&v147 - v28;
  __chkstk_darwin(v27);
  v165 = (uint64_t)&v147 - v29;
  v30 = (char *)v15 + *(int *)(v167 + 20);
  v31 = enum case for RoundedCornerStyle.continuous(_:);
  v32 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v30, v31, v32);
  __asm { FMOV            V0.2D, #8.0 }
  *v15 = _Q0;
  v167 = type metadata accessor for FilterView(0, v22, v148, v38);
  sub_10001E08C((uint64_t)v13);
  v39 = v149;
  v40 = v150;
  (*(void (**)(char *, _QWORD, uint64_t))(v149 + 104))(v11, enum case for ColorScheme.light(_:), v150);
  LOBYTE(v30) = static ColorScheme.== infix(_:_:)(v13, v11);
  v41 = *(void (**)(char *, uint64_t))(v39 + 8);
  v41(v11, v40);
  v41(v13, v40);
  if ((v30 & 1) != 0)
  {
    if (qword_10015CE48 != -1)
      swift_once(&qword_10015CE48, sub_10003828C);
    v42 = &qword_10016F640;
  }
  else
  {
    if (qword_10015CE70 != -1)
      swift_once(&qword_10015CE70, sub_1000382F0);
    v42 = &qword_10016F668;
  }
  v43 = *v42;
  swift_retain(*v42);
  sub_100028390((uint64_t)v15, (uint64_t)v17, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v44 = v151;
  *(_QWORD *)&v17[*(int *)(v151 + 52)] = v43;
  *(_WORD *)&v17[*(int *)(v44 + 56)] = 256;
  v45 = sub_1000283D4((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v46 = static Color.blue.getter(v45);
  v49 = sub_1000649B0(v167, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v47, v48);
  v50 = sub_1000184C8(v168);
  swift_release(v49);
  v51 = 0.0;
  if ((v50 & 1) != 0)
    v51 = 1.0;
  v52 = Color.opacity(_:)(v51);
  swift_release(v46);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v207, 0, 0, &_swiftEmptyArrayStorage, 1.0, 10.0, 0.0);
  v53 = (void (*)(_QWORD, _QWORD))v156;
  sub_100028390((uint64_t)v17, (uint64_t)v156, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v54 = *(double *)v207 * 0.5;
  v55 = v154;
  sub_100028390((uint64_t)v17, v154, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(double *)(v55 + *(int *)(type metadata accessor for RoundedRectangle._Inset(0) + 20)) = v54;
  v56 = sub_100003E70(&qword_100160510);
  v57 = v55 + *(int *)(v56 + 36);
  v58 = v207[1];
  *(_OWORD *)v57 = v207[0];
  *(_OWORD *)(v57 + 16) = v58;
  *(_QWORD *)(v57 + 32) = v208;
  v59 = v153;
  *(_QWORD *)(v55 + *(int *)(v153 + 52)) = v52;
  *(_WORD *)(v55 + *(int *)(v59 + 56)) = 256;
  v60 = static Alignment.center.getter(v56);
  v62 = v61;
  v63 = v155;
  v64 = (uint64_t)v53 + *(int *)(v155 + 68);
  v65 = v64 + *(int *)(sub_100003E70(&qword_100160518) + 36);
  sub_100007ADC((uint64_t)v17, v65, &qword_100160508);
  v66 = (uint64_t *)(v65 + *(int *)(sub_100003E70(&qword_100160520) + 36));
  *v66 = v60;
  v66[1] = v62;
  sub_100007A98(v55, v64, &qword_100160500);
  sub_100008194((uint64_t)v17, &qword_100160508);
  v67 = v167;
  v70 = sub_1000649B0(v167, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v68, v69);
  LOBYTE(v62) = sub_1000184C8(v168);
  v71 = swift_release(v70);
  if ((v62 & 1) != 0)
    v71.n128_f64[0] = 0.2;
  else
    v71.n128_f64[0] = 0.1;
  v72 = static Animation.easeInOut(duration:)(v71);
  v75 = sub_1000649B0(v67, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v73, v74);
  v76 = sub_100015FC4();
  swift_release(v75);
  v195 = v76;
  v77 = sub_100007D40(&qword_100160528, &qword_100160340, (uint64_t)&protocol conformance descriptor for StrokeBorderShapeView<A, B, C>);
  v78 = (uint64_t)v152;
  View.animation<A>(_:value:)(v72, &v195, v63, v162, v77, WitnessTable);
  swift_bridgeObjectRelease(v76);
  swift_release(v72);
  sub_100008194((uint64_t)v53, &qword_100160340);
  v79 = swift_getWitnessTable(&protocol conformance descriptor for _AnimationModifier<A>, v163);
  v205 = v77;
  v206 = v79;
  v154 = v79;
  v80 = v166;
  v155 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v166);
  sub_1000F257C(v78, v80, v165);
  v156 = *(uint64_t **)(v164 + 8);
  ((void (*)(uint64_t, uint64_t))v156)(v78, v80);
  v81 = v168;
  v195 = (*(uint64_t (**)(uint64_t))(AssociatedConformanceWitness + 32))(v158);
  v196 = (uint64_t *)v82;
  v83 = sub_10000CB40();
  v84 = Text.init<A>(_:)(&v195, &type metadata for String, v83);
  v86 = v85;
  v88 = v87;
  v90 = v89;
  v91 = sub_1000649B0(v67, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v87, v89);
  LOBYTE(v77) = sub_1000184C8(v81);
  swift_release(v91);
  if ((v77 & 1) != 0)
    v93 = static Color.blue.getter(v92);
  else
    v93 = static Color.primary.getter(v92);
  v94 = v93;
  v95 = v88 & 1;
  v96 = Text.foregroundColor(_:)(v93, v84, v86, v88 & 1, v90);
  v98 = v97;
  v100 = v99;
  v102 = v101;
  swift_release(v94);
  v103 = v100 & 1;
  sub_10000BFF8(v84, v86, v95);
  swift_bridgeObjectRelease(v90);
  v185 = v96;
  v186 = (uint64_t *)v98;
  v187 = v103;
  v188 = v102;
  v104 = v167;
  v107 = sub_1000649B0(v167, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v105, v106);
  v108 = sub_1000184C8(v168);
  v109 = swift_release(v107);
  if ((v108 & 1) != 0)
    v109.n128_f64[0] = 0.1;
  else
    v109.n128_f64[0] = 0.2;
  v110 = static Animation.easeInOut(duration:)(v109);
  v113 = sub_1000649B0(v104, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v111, v112);
  v114 = sub_100015FC4();
  swift_release(v113);
  v173 = v114;
  View.animation<A>(_:value:)(v110, &v173, &type metadata for Text, v162, &protocol witness table for Text, WitnessTable);
  swift_bridgeObjectRelease(v114);
  swift_release(v110);
  sub_10000BFF8(v96, v98, v103);
  swift_bridgeObjectRelease(v102);
  v115 = v195;
  v116 = (uint64_t)v196;
  v117 = v197;
  v119 = v198;
  v118 = v199;
  v120 = v200;
  v173 = v195;
  v174 = v196;
  v175 = v197;
  v176 = v198;
  v177 = v199;
  v178 = v200;
  v121 = type metadata accessor for ModifiedContent(0, &type metadata for Text, v163);
  v183 = &protocol witness table for Text;
  v184 = v154;
  v122 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v121);
  View.padding(_:)(&v185, v121, v122, 15.0);
  sub_10000BFF8(v115, v116, v117);
  swift_bridgeObjectRelease(v120);
  swift_bridgeObjectRelease(v119);
  swift_release(v118);
  v123 = v185;
  v124 = (uint64_t)v186;
  LOBYTE(v119) = v187;
  v126 = v188;
  v125 = v189;
  v127 = v190;
  v173 = v185;
  v174 = v186;
  v175 = v187;
  v176 = v188;
  v177 = v189;
  v178 = v190;
  v179 = v191;
  v180 = v192;
  v181 = v193;
  v182 = v194;
  v128 = type metadata accessor for ModifiedContent(0, v121, &type metadata for _PaddingLayout);
  v172[2] = v122;
  v172[3] = &protocol witness table for _PaddingLayout;
  v129 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v128);
  sub_1000F257C((uint64_t)&v173, v128, (uint64_t)&v195);
  sub_10000BFF8(v123, v124, v119);
  swift_bridgeObjectRelease(v127);
  swift_bridgeObjectRelease(v126);
  v130 = swift_release(v125);
  v131 = v165;
  v132 = (uint64_t)v159;
  v133 = v166;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v164 + 16))(v159, v165, v166, v130);
  v134 = v198;
  v135 = v199;
  v136 = v200;
  v185 = v195;
  v186 = v196;
  v187 = v197;
  v188 = v198;
  v189 = v199;
  v190 = v200;
  v191 = v201;
  v192 = v202;
  v193 = v203;
  v194 = v204;
  v173 = v132;
  v174 = &v185;
  sub_10000C008(v195, (uint64_t)v196, v197);
  swift_retain(v135);
  swift_bridgeObjectRetain(v136);
  swift_bridgeObjectRetain(v134);
  v172[0] = v133;
  v172[1] = v128;
  v170 = v155;
  v171 = v129;
  sub_1000E4768(&v173, 2uLL, (uint64_t)v172);
  v137 = v198;
  v138 = v199;
  v139 = v200;
  sub_10000BFF8(v195, (uint64_t)v196, v197);
  swift_bridgeObjectRelease(v139);
  swift_bridgeObjectRelease(v137);
  v140 = swift_release(v138);
  v141 = (uint64_t (*)(uint64_t, uint64_t, __n128))v156;
  ((void (*)(uint64_t, uint64_t, __n128))v156)(v131, v133, v140);
  v142 = v188;
  v143 = v189;
  v144 = v190;
  sub_10000BFF8(v185, (uint64_t)v186, v187);
  swift_bridgeObjectRelease(v144);
  swift_bridgeObjectRelease(v142);
  v145 = swift_release(v143);
  return v141(v132, v133, v145);
}

uint64_t sub_10006BD1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for DismissAction(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FilterView(0, a2, a3, v10);
  v14 = sub_1000649B0(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v12, v13);
  sub_100017AB0();
  swift_release(v14);
  v17 = sub_1000649B0(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v15, v16);
  v18 = (uint64_t *)(a1 + *(int *)(v11 + 44));
  v19 = *v18;
  if (*v18)
  {
    v20 = v17;
    swift_retain(*v18);
    sub_1000181F8(7, 21, 0, 3u, v19);
    swift_release(v20);
    swift_release(v19);
    sub_10001D870((uint64_t)v9);
    DismissAction.callAsFunction()();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    v22 = v18[1];
    v23 = type metadata accessor for RemoteViewConfiguration();
    v24 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    result = EnvironmentObject.error()(0, v22, v23, v24);
    __break(1u);
  }
  return result;
}

double sub_10006BE8C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  double result;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[12];
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;

  v5 = type metadata accessor for FilterView(0, a1, a2, a3);
  v8 = sub_1000649B0(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v6, v7);
  v9 = sub_100016380();
  v11 = v10;
  swift_release(v8);
  *(_QWORD *)&v70 = v9;
  *((_QWORD *)&v70 + 1) = v11;
  v12 = sub_10000CB40();
  v13 = Text.init<A>(_:)(&v70, &type metadata for String, v12);
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  v20 = static Font.Weight.semibold.getter();
  v21 = Text.fontWeight(_:)(*(_QWORD *)&v20, 0, v13, v15, v19, v17);
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  sub_10000BFF8(v13, v15, v19);
  v28 = swift_bridgeObjectRelease(v17);
  v29 = static Font.headline.getter(v28);
  v30 = Text.font(_:)(v29, v21, v23, v27, v25);
  v32 = v31;
  LOBYTE(v17) = v33;
  v57 = v34;
  swift_release(v29);
  LOBYTE(v29) = v17 & 1;
  sub_10000BFF8(v21, v23, v27);
  v35 = swift_bridgeObjectRelease(v25);
  v36 = static Color.white.getter(v35);
  v37 = Text.foregroundColor(_:)(v36, v30, v32, v17 & 1, v57);
  v58 = v38;
  LOBYTE(v27) = v39;
  v41 = v40;
  swift_release(v36);
  sub_10000BFF8(v30, v32, v29);
  v42 = swift_bridgeObjectRelease(v57);
  v60 = v37;
  v61 = v58;
  v62 = v27 & 1;
  v63 = v41;
  v64 = static Edge.Set.all.getter(v42);
  v65 = EdgeInsets.init(_all:)(16.0);
  v66 = v43;
  v67 = v44;
  v68 = v45;
  v69 = 0;
  v47 = static Alignment.center.getter(v46);
  sub_1000E5210(0, 1, 0.0, 1, INFINITY, 0, 0, 1, v59, v49, 0.0, 1, 0.0, 1, v47, v48);
  sub_10000BFF8(v37, v58, v27 & 1);
  swift_bridgeObjectRelease(v41);
  v78 = v59[10];
  v79 = v59[11];
  v74 = v59[4];
  v75 = v59[5];
  v76 = v59[6];
  v77 = v59[7];
  v70 = v59[0];
  v71 = v59[1];
  v72 = v59[2];
  v73 = v59[3];
  v50 = v59[9];
  a4[8] = v59[8];
  a4[9] = v50;
  v51 = v79;
  a4[10] = v78;
  a4[11] = v51;
  v52 = v75;
  a4[4] = v74;
  a4[5] = v52;
  v53 = v77;
  a4[6] = v76;
  a4[7] = v53;
  v54 = v71;
  *a4 = v70;
  a4[1] = v54;
  result = *(double *)&v72;
  v56 = v73;
  a4[2] = v72;
  a4[3] = v56;
  return result;
}

uint64_t sub_10006C110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37[16];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41[16];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v36 = a4;
  v35 = sub_100003E70(&qword_100160390);
  __chkstk_darwin(v35);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003E70(&qword_100160398);
  v33 = *(_QWORD *)(v9 - 8);
  v34 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100003E70(&qword_10015D6C8);
  v15 = *(_QWORD *)(v32 - 8);
  v16 = __chkstk_darwin(v32);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.navigationBarLeading.getter(v16);
  v42 = a2;
  v43 = a3;
  v44 = a1;
  v19 = sub_100003E70(&qword_10015D6D8);
  v20 = sub_100007D40(&qword_10015D6E0, &qword_10015D6D8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v21 = ToolbarItem<>.init(placement:content:)(v14, sub_10007003C, v41, v19, v20);
  static ToolbarItemPlacement.navigationBarTrailing.getter(v21);
  v38 = a2;
  v39 = a3;
  v40 = a1;
  v22 = sub_100003E70(&qword_1001603A0);
  v23 = sub_100070054();
  ToolbarItem<>.init(placement:content:)(v14, sub_100070048, v37, v22, v23);
  v24 = v35;
  v25 = &v8[*(int *)(v35 + 48)];
  v26 = v32;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v8, v18, v32);
  v27 = v33;
  v28 = v25;
  v29 = v34;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v28, v11, v34);
  TupleToolbarContent.init(_:)(v8, v24);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v26);
}

uint64_t sub_10006C35C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a5;
  v8 = type metadata accessor for FilterView(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v25 - v12;
  v16 = sub_1000649B0(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v14, v15);
  v17 = v16 + *(_QWORD *)(*(_QWORD *)v16 + 248);
  v18 = *(_QWORD *)(v17 + 8);
  v27 = *(_QWORD *)v17;
  v26 = *(unsigned __int8 *)(v17 + 16);
  v19 = *(_QWORD *)(v17 + 24);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  v20 = swift_release(v16);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v13, a1, v8, v20);
  v21 = *(unsigned __int8 *)(v9 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = swift_allocObject(&unk_10014FDC8, v22 + v10, v21 | 7);
  *(_QWORD *)(v23 + 16) = a2;
  *(_QWORD *)(v23 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v23 + v22, v13, v8);
  return Button<>.init(_:action:)(v27, v18, v26, v19, sub_100070130, v23);
}

uint64_t sub_10006C49C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = type metadata accessor for DismissAction(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FilterView(0, a2, a3, v9);
  sub_10001D870((uint64_t)v8);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10006C544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _BYTE v35[12];
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v38 = a2;
  v39 = a3;
  v42 = a5;
  v6 = type metadata accessor for FilterView(0, a2, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v10 = &v35[-v9];
  v11 = sub_100003E70(&qword_10015D6D8);
  v40 = *(_QWORD *)(v11 - 8);
  v41 = v11;
  __chkstk_darwin(v11);
  v13 = &v35[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = sub_1000649B0(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v14, v15);
  v17 = v16 + *(_QWORD *)(*(_QWORD *)v16 + 240);
  v18 = *(_QWORD *)(v17 + 8);
  v37 = *(_QWORD *)v17;
  v36 = *(unsigned __int8 *)(v17 + 16);
  v19 = *(_QWORD *)(v17 + 24);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  v20 = swift_release(v16);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v7 + 16))(v10, a1, v6, v20);
  v21 = *(unsigned __int8 *)(v7 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = swift_allocObject(&unk_10014FD78, v22 + v8, v21 | 7);
  v24 = v39;
  *(_QWORD *)(v23 + 16) = v38;
  *(_QWORD *)(v23 + 24) = v24;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(v23 + v22, v10, v6);
  Button<>.init(_:action:)(v37, v18, v36, v19, sub_1000700F4, v23);
  v27 = sub_1000649B0(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v25, v26);
  LOBYTE(v19) = sub_1000165F4();
  swift_release(v27);
  KeyPath = swift_getKeyPath(&unk_10010EAF0);
  v29 = swift_allocObject(&unk_10014FDA0, 17, 7);
  *(_BYTE *)(v29 + 16) = (v19 & 1) == 0;
  v31 = v40;
  v30 = v41;
  v32 = v42;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v40 + 16))(v42, v13, v41);
  v33 = (uint64_t *)(v32 + *(int *)(sub_100003E70(&qword_1001603A0) + 36));
  *v33 = KeyPath;
  v33[1] = (uint64_t)sub_100070124;
  v33[2] = v29;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v31 + 8))(v13, v30);
}

void sub_10006C774(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12 = type metadata accessor for FilterView(0, a2, a3, (uint64_t)a4);
  v15 = sub_1000649B0(v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v13, v14);
  a4();
  swift_release(v15);
  v18 = sub_1000649B0(v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v16, v17);
  v19 = (uint64_t *)(a1 + *(int *)(v12 + 44));
  v20 = *v19;
  if (*v19)
  {
    v21 = v18;
    swift_retain(*v19);
    sub_1000181F8(7, a5, a6, a7, v20);
    swift_release(v21);
    swift_release(v20);
  }
  else
  {
    v22 = v19[1];
    v23 = type metadata accessor for RemoteViewConfiguration();
    v24 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v22, v23, v24);
    __break(1u);
  }
}

void sub_10006C87C(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

double sub_10006C888(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = type metadata accessor for FilterView(0, a3, a4, a4);
  v11 = sub_1000649B0(v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v9, v10);
  sub_100016178(v4, v5, v6, v7);
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

void sub_10006C8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = type metadata accessor for FilterView(0, a2, a3, a4);
  v8 = sub_1000649B0(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v6, v7);
  v9 = (_QWORD *)(a1 + *(int *)(v5 + 44));
  v10 = *v9;
  if (*v9)
  {
    v11 = v8;
    swift_retain(*v9);
    sub_100018494(v12, v13, v14, v15);
    swift_release(v11);
    swift_release(v10);
  }
  else
  {
    v16 = v9[1];
    v17 = type metadata accessor for RemoteViewConfiguration();
    v18 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v16, v17, v18);
    __break(1u);
  }
}

void sub_10006C9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = type metadata accessor for FilterView(0, a2, a3, a4);
  v8 = sub_1000649B0(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v6, v7);
  v9 = (uint64_t *)(a1 + *(int *)(v5 + 44));
  v10 = *v9;
  if (*v9)
  {
    v11 = v8;
    swift_retain(*v9);
    sub_1000181F8(7, 2, 0, 3u, v10);
    swift_release(v11);
    swift_release(v10);
  }
  else
  {
    v12 = v9[1];
    v13 = type metadata accessor for RemoteViewConfiguration();
    v14 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v12, v13, v14);
    __break(1u);
  }
}

uint64_t sub_10006CA70()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  Class isa;
  uint64_t v17;
  uint64_t v18;
  Class v19;
  id v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = type metadata accessor for Date(0);
  v0 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v2 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v24);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TimeZone(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003E70(&qword_10015D830);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v23 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))((char *)&v23 - v13, 1, 1, v5);
  v15 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v15, "setDateStyle:", 2);
  sub_100007ADC((uint64_t)v14, (uint64_t)v12, &qword_10015D830);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5) == 1)
  {
    sub_100008194((uint64_t)v12, &qword_10015D830);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v5);
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v15, "setTimeZone:", isa);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  sub_100008194((uint64_t)v14, &qword_10015D830);
  type metadata accessor for CompactDatePicker(0);
  v17 = sub_100003E70(&qword_100160570);
  Binding.wrappedValue.getter(v17);
  v18 = v25;
  (*(void (**)(char *, char *, uint64_t))(v0 + 16))(v2, &v4[*(int *)(v24 + 20)], v25);
  sub_1000283D4((uint64_t)v4, type metadata accessor for CompactDatePickerConfiguration);
  v19 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v18);
  v20 = objc_msgSend(v15, "stringFromDate:", v19);

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  return v21;
}

uint64_t sub_10006CD44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  v36 = a2;
  v3 = sub_100003E70(&qword_100160638);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v35 - v7;
  v9 = sub_100003E70(&qword_100160640);
  __chkstk_darwin(v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003E70(&qword_100160648);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v35 - v17;
  *(_QWORD *)v11 = static VerticalAlignment.center.getter(v16);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  v19 = sub_100003E70(&qword_100160650);
  v20 = sub_10006CFCC(a1, (uint64_t)&v11[*(int *)(v19 + 44)]);
  v21 = static Edge.Set.vertical.getter(v20);
  v22 = EdgeInsets.init(_all:)(8.0);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  sub_100007ADC((uint64_t)v11, (uint64_t)v15, &qword_100160640);
  v29 = &v15[*(int *)(v12 + 36)];
  *v29 = v21;
  *((double *)v29 + 1) = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  v29[40] = 0;
  sub_100008194((uint64_t)v11, &qword_100160640);
  v30 = sub_100007A98((uint64_t)v15, (uint64_t)v18, &qword_100160648);
  *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v30);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v31 = sub_100003E70(&qword_100160658);
  sub_10006DDE4(a1, &v8[*(int *)(v31 + 44)]);
  sub_100007ADC((uint64_t)v18, (uint64_t)v15, &qword_100160648);
  sub_100007ADC((uint64_t)v8, (uint64_t)v6, &qword_100160638);
  v32 = v36;
  sub_100007ADC((uint64_t)v15, v36, &qword_100160648);
  v33 = sub_100003E70(&qword_100160660);
  sub_100007ADC((uint64_t)v6, v32 + *(int *)(v33 + 48), &qword_100160638);
  sub_100008194((uint64_t)v8, &qword_100160638);
  sub_100008194((uint64_t)v18, &qword_100160648);
  sub_100008194((uint64_t)v6, &qword_100160638);
  return sub_100008194((uint64_t)v15, &qword_100160648);
}

uint64_t sub_10006CFCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88[16];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;

  v68 = a1;
  v87 = a2;
  v84 = type metadata accessor for DatePickerButtonStyle(0);
  __chkstk_darwin(v84);
  v81 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CompactDatePicker(0);
  v76 = *(_QWORD *)(v4 - 8);
  v5 = v4;
  v74 = v4;
  v77 = *(_QWORD *)(v76 + 64);
  __chkstk_darwin(v4);
  v75 = (uint64_t)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100003E70(&qword_100160718);
  v86 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v78 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100003E70(&qword_100160720);
  v83 = *(_QWORD *)(v85 - 8);
  v8 = __chkstk_darwin(v85);
  v79 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v80 = (char *)&v66 - v10;
  v71 = type metadata accessor for AccessibilityTraits(0);
  v70 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v69 = sub_100003E70(&qword_10015E998);
  v16 = __chkstk_darwin(v69);
  v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v66 = (char *)&v66 - v20;
  __chkstk_darwin(v19);
  v67 = (uint64_t)&v66 - v21;
  v73 = a1 + *(int *)(v5 + 24);
  v72 = sub_100003E70(&qword_100160570);
  Binding.wrappedValue.getter(v72);
  v23 = *v15;
  v22 = v15[1];
  swift_bridgeObjectRetain(v22);
  sub_1000283D4((uint64_t)v15, type metadata accessor for CompactDatePickerConfiguration);
  v90 = v23;
  v91 = v22;
  v24 = sub_10000CB40();
  v25 = Text.init<A>(_:)(&v90, &type metadata for String, v24);
  v27 = v26;
  v29 = v28;
  v31 = v30 & 1;
  v32 = static Font.Weight.regular.getter();
  v33 = Text.fontWeight(_:)(*(_QWORD *)&v32, 0, v25, v27, v31, v29);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  sub_10000BFF8(v25, v27, v31);
  v40 = swift_bridgeObjectRelease(v29);
  v90 = v33;
  v91 = v35;
  v92 = v37 & 1;
  v93 = v39;
  static AccessibilityTraits.isHeader.getter(v40);
  View.accessibilityAddTraits(_:)(v12, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v12, v71);
  sub_10000BFF8(v90, v91, v92);
  swift_bridgeObjectRelease(v93);
  v41 = (uint64_t)v66;
  v42 = v69;
  ModifiedContent<>.accessibilityHeading(_:)(2, v69);
  sub_100008194((uint64_t)v18, &qword_10015E998);
  v43 = v67;
  sub_100007A98(v41, v67, &qword_10015E998);
  v44 = v68;
  v45 = v75;
  sub_100028390(v68, v75, type metadata accessor for CompactDatePicker);
  v46 = *(unsigned __int8 *)(v76 + 80);
  v47 = (v46 + 16) & ~v46;
  v48 = swift_allocObject(&unk_10014FEE8, v47 + v77, v46 | 7);
  sub_1000726E0(v45, v48 + v47);
  v89 = v44;
  v49 = sub_10003467C();
  v50 = v78;
  Button.init(action:label:)(sub_100072904, v48, sub_100072930, v88, v42, v49);
  LOBYTE(v48) = *(_BYTE *)(v44 + *(int *)(v74 + 40));
  v51 = v84;
  v52 = v81;
  Binding.wrappedValue.getter(v72);
  *v52 = v48;
  *(_QWORD *)&v52[*(int *)(v51 + 24)] = 0x3FD3333333333333;
  v53 = sub_100007D40(&qword_100160728, &qword_100160718, (uint64_t)&protocol conformance descriptor for Button<A>);
  v54 = sub_100003B3C(&qword_100160730, type metadata accessor for DatePickerButtonStyle, (uint64_t)&unk_10010EE6C);
  v55 = v79;
  v56 = v82;
  View.buttonStyle<A>(_:)(v52, v82, v51, v53, v54);
  sub_1000283D4((uint64_t)v52, type metadata accessor for DatePickerButtonStyle);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v50, v56);
  v57 = v83;
  v58 = v80;
  v59 = v85;
  (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v80, v55, v85);
  sub_100007ADC(v43, v41, &qword_10015E998);
  v60 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  v60(v55, v58, v59);
  v61 = v87;
  sub_100007ADC(v41, v87, &qword_10015E998);
  v62 = sub_100003E70(&qword_100160738);
  v63 = v61 + *(int *)(v62 + 48);
  *(_QWORD *)v63 = 0;
  *(_BYTE *)(v63 + 8) = 1;
  v60((char *)(v61 + *(int *)(v62 + 64)), v55, v59);
  v64 = *(void (**)(char *, uint64_t))(v57 + 8);
  v64(v58, v59);
  sub_100008194(v43, &qword_10015E998);
  v64(v55, v59);
  return sub_100008194(v41, &qword_10015E998);
}

double sub_10006D5EC(uint64_t a1, __n128 a2)
{
  uint64_t v3;
  double result;
  _QWORD v5[4];

  a2.n128_u64[0] = 0x3FD3333333333333;
  v3 = static Animation.easeInOut(duration:)(a2);
  v5[2] = a1;
  withAnimation<A>(_:_:)(v3, sub_100072938, v5, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

double sub_10006D658(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  char *v23;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  int v32;
  char *v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  double result;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _BYTE v51[2];

  v2 = sub_100003E70(&qword_100160570);
  __chkstk_darwin(v2);
  v43 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CompactDatePickerConfiguration(0);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __chkstk_darwin(v5);
  v10 = (uint64_t *)((char *)&v40 - v9);
  v11 = __chkstk_darwin(v8);
  v42 = (char *)&v40 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v40 - v14);
  __chkstk_darwin(v13);
  v17 = (uint64_t *)((char *)&v40 - v16);
  v44 = &a1[*(int *)(type metadata accessor for CompactDatePicker(0) + 24)];
  Binding.wrappedValue.getter(v2);
  Binding.wrappedValue.getter(v2);
  v18 = v17[1];
  v19 = v15[1];
  v20 = *v17 == *v15 && v18 == v19;
  if ((v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, *v15, v19, 0) & 1) != 0)
    && (static Date.== infix(_:_:)((char *)v17 + *(int *)(v4 + 20), (char *)v15 + *(int *)(v4 + 20)) & 1) != 0)
  {
    v21 = *(int *)(v4 + 24);
    v22 = *((unsigned __int8 *)v17 + v21);
    v41 = v4;
    v23 = a1;
    v24 = *((unsigned __int8 *)v15 + v21);
    sub_1000283D4((uint64_t)v15, type metadata accessor for CompactDatePickerConfiguration);
    sub_1000283D4((uint64_t)v17, type metadata accessor for CompactDatePickerConfiguration);
    v20 = v22 == v24;
    a1 = v23;
    v4 = v41;
    v25 = (uint64_t)v43;
    if (v20)
    {
      v26 = v42;
      Binding.wrappedValue.getter(v2);
      v26[*(int *)(v4 + 24)] = 0;
      Binding.wrappedValue.setter(v26, v2);
    }
  }
  else
  {
    sub_1000283D4((uint64_t)v15, type metadata accessor for CompactDatePickerConfiguration);
    sub_1000283D4((uint64_t)v17, type metadata accessor for CompactDatePickerConfiguration);
    v25 = (uint64_t)v43;
  }
  Binding.wrappedValue.getter(v2);
  Binding.wrappedValue.getter(v2);
  v27 = v10[1];
  v28 = v7[1];
  v29 = *v10 == *v7 && v27 == v28;
  if ((v29 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v27, *v7, v28, 0) & 1) != 0)
    && (static Date.== infix(_:_:)((char *)v10 + *(int *)(v4 + 20), (char *)v7 + *(int *)(v4 + 20)) & 1) != 0)
  {
    v43 = a1;
    v30 = *(int *)(v4 + 24);
    v31 = *((unsigned __int8 *)v10 + v30);
    v32 = *((unsigned __int8 *)v7 + v30);
    sub_1000283D4((uint64_t)v7, type metadata accessor for CompactDatePickerConfiguration);
    sub_1000283D4((uint64_t)v10, type metadata accessor for CompactDatePickerConfiguration);
    if (v31 == v32)
    {
      v33 = v42;
      Binding.wrappedValue.getter(v2);
      v33[*(int *)(v4 + 24)] = 0;
      Binding.wrappedValue.setter(v33, v2);
    }
  }
  else
  {
    sub_1000283D4((uint64_t)v7, type metadata accessor for CompactDatePickerConfiguration);
    sub_1000283D4((uint64_t)v10, type metadata accessor for CompactDatePickerConfiguration);
  }
  sub_100007ADC((uint64_t)v44, v25, &qword_100160570);
  KeyPath = swift_getKeyPath(&unk_10010EDA0);
  Binding.subscript.getter(&v48, KeyPath, v2);
  swift_release(KeyPath);
  sub_100008194(v25, &qword_100160570);
  v35 = v48;
  v36 = v49;
  v37 = v50;
  v45 = v48;
  v46 = v49;
  v47 = v50;
  v38 = sub_100003E70(&qword_100160CA0);
  Binding.wrappedValue.getter(v38);
  v45 = v35;
  v46 = v36;
  v47 = v37;
  v51[0] = (v51[1] & 1) == 0;
  Binding.wrappedValue.setter(v51, v38);
  swift_release(v36);
  *(_QWORD *)&result = swift_release(v35).n128_u64[0];
  return result;
}

uint64_t sub_10006DA20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;

  v43 = a1;
  v1 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AccessibilityTraits(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100003E70(&qword_10015E998);
  v8 = __chkstk_darwin(v41);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v42 = (char *)&v39 - v11;
  v45 = sub_10006CA70();
  v46 = v12;
  v13 = sub_10000CB40();
  v45 = Text.init<A>(_:)(&v45, &type metadata for String, v13);
  v46 = v14;
  v47 = v15 & 1;
  v48 = v16;
  type metadata accessor for CompactDatePicker(0);
  v17 = sub_100003E70(&qword_100160570);
  Binding.wrappedValue.getter(v17);
  v40 = v1;
  v18 = v3[*(int *)(v1 + 24)];
  sub_1000283D4((uint64_t)v3, type metadata accessor for CompactDatePickerConfiguration);
  if (v18 == 1)
  {
    v19 = sub_100003E70(&qword_1001604E0);
    v20 = swift_allocObject(v19, ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72), *(unsigned __int8 *)(v5 + 80) | 7);
    *(_OWORD *)(v20 + 16) = xmmword_10010ACC0;
    static AccessibilityTraits.isSelected.getter(v20);
    v44 = (void *)v20;
    v21 = sub_100003B3C(&qword_1001604E8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v22 = sub_100003E70(&qword_1001604F0);
    v23 = sub_100007D40(&qword_1001604F8, &qword_1001604F0, (uint64_t)&protocol conformance descriptor for [A]);
    v24 = v22;
    v25 = v4;
    v26 = v21;
  }
  else
  {
    v44 = &_swiftEmptyArrayStorage;
    v27 = sub_100003B3C(&qword_1001604E8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v28 = sub_100003E70(&qword_1001604F0);
    v23 = sub_100007D40(&qword_1001604F8, &qword_1001604F0, (uint64_t)&protocol conformance descriptor for [A]);
    v24 = v28;
    v25 = v4;
    v26 = v27;
  }
  dispatch thunk of SetAlgebra.init<A>(_:)(&v44, v24, v23, v25, v26);
  View.accessibilityAddTraits(_:)(v7, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_10000BFF8(v45, v46, v47);
  swift_bridgeObjectRelease(v48);
  Binding.wrappedValue.getter(v17);
  v29 = v3[*(int *)(v40 + 24)];
  sub_1000283D4((uint64_t)v3, type metadata accessor for CompactDatePickerConfiguration);
  if (v29 == 1)
  {
    v30 = 0xD00000000000003FLL;
    v31 = 0x8000000100116600;
  }
  else
  {
    v31 = 0x80000001001165C0;
    v30 = 0xD00000000000003ELL;
  }
  v32 = LocalizedStringKey.init(stringLiteral:)(v30, v31);
  v34 = v33;
  v36 = v35;
  v37 = (uint64_t)v42;
  ModifiedContent<>.accessibilityHint(_:)(v32);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v34);
  sub_100008194((uint64_t)v10, &qword_10015E998);
  return sub_100007A98(v37, v43, &qword_10015E998);
}

uint64_t sub_10006DDE4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t KeyPath;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void (**v79)(CGFloat *@<X8>, double@<D0>);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (**v87)(uint64_t *);
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  void (*v104)(char *, char *, uint64_t);
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t);
  _QWORD v112[3];
  uint64_t v113;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;

  v151 = a2;
  v3 = type metadata accessor for CompactDatePicker(0);
  v148 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v149 = v4;
  v150 = (uint64_t)&v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CoordinateSpace(0);
  v145 = *(_QWORD *)(v5 - 8);
  v146 = v5;
  __chkstk_darwin(v5);
  v144 = (char *)&v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for GraphicalDatePickerStyle(0);
  v141 = *(_QWORD *)(v7 - 8);
  v142 = v7;
  __chkstk_darwin(v7);
  v140 = (char *)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DatePickerComponents(0);
  __chkstk_darwin(v9);
  v124 = (char *)&v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003E70(&qword_10015DD00);
  __chkstk_darwin(v11);
  v120 = (uint64_t)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003E70(&qword_100160668);
  __chkstk_darwin(v13);
  v116 = (uint64_t *)((char *)&v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_100003E70(&qword_100160570);
  __chkstk_darwin(v15);
  v115 = (char *)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_100003E70(&qword_100160670);
  v119 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121);
  v117 = (char *)&v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100003E70(&qword_100160678);
  __chkstk_darwin(v122);
  v123 = (char *)&v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_100003E70(&qword_100160680);
  v126 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v125 = (char *)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100003E70(&qword_100160688);
  __chkstk_darwin(v118);
  v132 = (char *)&v113 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_100003E70(&qword_100160690);
  __chkstk_darwin(v128);
  v131 = (uint64_t)&v113 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100003E70(&qword_100160698);
  __chkstk_darwin(v127);
  v134 = (uint64_t)&v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100003E70(&qword_1001606A0);
  __chkstk_darwin(v130);
  v138 = (uint64_t)&v113 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100003E70(&qword_1001606A8);
  __chkstk_darwin(v24);
  v137 = (uint64_t)&v113 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_100003E70(&qword_1001606B0);
  v26 = __chkstk_darwin(v136);
  v143 = (uint64_t)&v113 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v135 = (uint64_t)&v113 - v29;
  __chkstk_darwin(v28);
  v139 = (uint64_t)&v113 - v30;
  v31 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v31);
  v33 = (char *)&v113 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for Divider(0);
  v114 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v36 = (char *)&v113 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100003E70(&qword_1001606B8);
  v155 = *(_QWORD *)(v37 - 8);
  v156 = v37;
  v38 = __chkstk_darwin(v37);
  v133 = (char *)&v113 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v38);
  v42 = (char *)&v113 - v41;
  v43 = __chkstk_darwin(v40);
  v154 = (char *)&v113 - v44;
  Divider.init()(v43);
  v157 = v3;
  v45 = a1 + *(int *)(v3 + 24);
  v147 = v15;
  v152 = v45;
  Binding.wrappedValue.getter(v15);
  v153 = v31;
  LOBYTE(v3) = v33[*(int *)(v31 + 24)];
  v46 = sub_1000283D4((uint64_t)v33, type metadata accessor for CompactDatePickerConfiguration);
  v47 = static Animation.linear(duration:)(v46, 0.09);
  v48 = v47;
  if ((v3 & 1) == 0)
  {
    v49 = Animation.delay(_:)(v47, 0.21);
    swift_release(v48);
    v48 = v49;
  }
  __chkstk_darwin(v47);
  v112[2] = a1;
  v50 = sub_100003E70(&qword_1001606C0);
  v113 = a1;
  v51 = v50;
  v52 = sub_100003B3C(&qword_100160450, (uint64_t (*)(uint64_t))&type metadata accessor for Divider, (uint64_t)&protocol conformance descriptor for Divider);
  v53 = sub_10005C954(&qword_1001606C8, &qword_1001606C0, (void (*)(void))sub_1000725BC);
  View.animation<A>(_:body:)(v48, sub_1000725B4, v112, v34, v51, v52, v53);
  v54 = swift_release(v48);
  (*(void (**)(char *, uint64_t, __n128))(v114 + 8))(v36, v34, v54);
  (*(void (**)(char *, char *, uint64_t))(v155 + 32))(v154, v42, v156);
  v55 = (uint64_t)v115;
  v56 = v147;
  Binding.projectedValue.getter(v147);
  KeyPath = swift_getKeyPath(&unk_10010ED80);
  v58 = v116;
  Binding.subscript.getter(v116, KeyPath, v56);
  swift_release(KeyPath);
  sub_100008194(v55, &qword_100160570);
  v59 = v113;
  v60 = v120;
  v61 = sub_100007ADC(v113 + *(int *)(v157 + 32), v120, &qword_10015DD00);
  v62 = v124;
  static DatePickerComponents.date.getter(v61);
  v63 = v117;
  DatePicker.init(selection:in:displayedComponents:label:)(v58, v60, v62, nullsub_1, 0, &type metadata for EmptyView, &protocol witness table for EmptyView);
  Binding.wrappedValue.getter(v56);
  LOBYTE(v60) = v33[*(int *)(v153 + 24)];
  sub_1000283D4((uint64_t)v33, type metadata accessor for CompactDatePickerConfiguration);
  v64 = sub_100007D40(&qword_1001606F0, &qword_100160670, (uint64_t)&protocol conformance descriptor for DatePicker<A>);
  v65 = (uint64_t)v123;
  v66 = v121;
  View.accessibilityHidden(_:isEnabled:)(1, (v60 & 1) == 0, v121, v64);
  v67 = (*(uint64_t (**)(char *, uint64_t))(v119 + 8))(v63, v66);
  v68 = v140;
  GraphicalDatePickerStyle.init()(v67);
  v69 = sub_100072640();
  v70 = sub_100003B3C(&qword_100160700, (uint64_t (*)(uint64_t))&type metadata accessor for GraphicalDatePickerStyle, (uint64_t)&protocol conformance descriptor for GraphicalDatePickerStyle);
  v71 = v125;
  v72 = v142;
  View.datePickerStyle<A>(_:)(v68, v122, v142, v69, v70);
  (*(void (**)(char *, uint64_t))(v141 + 8))(v68, v72);
  sub_100008194(v65, &qword_100160678);
  v74 = v144;
  v73 = v145;
  v75 = v146;
  (*(void (**)(char *, _QWORD, uint64_t))(v145 + 104))(v144, enum case for CoordinateSpace.local(_:), v146);
  v76 = (uint64_t)v132;
  v77 = &v132[*(int *)(v118 + 36)];
  v78 = sub_100003E70(&qword_100160708);
  (*(void (**)(char *, char *, uint64_t))(v73 + 16))(&v77[*(int *)(v78 + 36)], v74, v75);
  *(_QWORD *)v77 = &type metadata for FilterViewStartDatePickerHeightPreferenceKey;
  v79 = (void (**)(CGFloat *@<X8>, double@<D0>))&v77[*(int *)(v78 + 40)];
  *v79 = sub_10006ECD8;
  v79[1] = 0;
  v80 = v126;
  v81 = v129;
  (*(void (**)(uint64_t, char *, uint64_t))(v126 + 16))(v76, v71, v129);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v75);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v71, v81);
  v82 = v150;
  sub_100028390(v59, v150, type metadata accessor for CompactDatePicker);
  v83 = *(unsigned __int8 *)(v148 + 80);
  v84 = (v83 + 16) & ~v83;
  v85 = swift_allocObject(&unk_10014FEC0, v84 + v149, v83 | 7);
  sub_1000726E0(v82, v85 + v84);
  v86 = v131;
  sub_100007ADC(v76, v131, &qword_100160688);
  v87 = (uint64_t (**)(uint64_t *))(v86 + *(int *)(v128 + 36));
  *v87 = sub_100072724;
  v87[1] = (uint64_t (*)(uint64_t *))v85;
  sub_100008194(v76, &qword_100160688);
  v88 = *(_QWORD *)(v59 + *(int *)(v157 + 36));
  v89 = v134;
  sub_100007ADC(v86, v134, &qword_100160690);
  v90 = (_QWORD *)(v89 + *(int *)(v127 + 36));
  *v90 = 0;
  v90[1] = v88;
  sub_100008194(v86, &qword_100160690);
  Binding.wrappedValue.getter(v56);
  v91 = v153;
  LODWORD(v71) = v33[*(int *)(v153 + 24)];
  sub_1000283D4((uint64_t)v33, type metadata accessor for CompactDatePickerConfiguration);
  if ((_DWORD)v71)
    v92 = 1.0;
  else
    v92 = 0.5;
  v93 = v138;
  sub_100007ADC(v89, v138, &qword_100160698);
  *(double *)(v93 + *(int *)(v130 + 36)) = v92;
  sub_100008194(v89, &qword_100160698);
  Binding.wrappedValue.getter(v56);
  v94 = v33[*(int *)(v91 + 24)];
  v95 = sub_1000283D4((uint64_t)v33, type metadata accessor for CompactDatePickerConfiguration);
  if (v94)
    v96 = INFINITY;
  else
    v96 = 0.0;
  v97 = static Alignment.center.getter(v95);
  v98 = v137;
  sub_1000E53BC(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v137, 0.0, 1, v96, 0, v97, v99);
  sub_100008194(v93, &qword_1001606A0);
  v100 = v135;
  sub_100007ADC(v98, v135, &qword_1001606A8);
  *(_WORD *)(v100 + *(int *)(v136 + 36)) = 0;
  sub_100008194(v98, &qword_1001606A8);
  v101 = v139;
  sub_100007A98(v100, v139, &qword_1001606B0);
  v103 = v154;
  v102 = v155;
  v104 = *(void (**)(char *, char *, uint64_t))(v155 + 16);
  v105 = v133;
  v106 = v156;
  v104(v133, v154, v156);
  v107 = v143;
  sub_100007ADC(v101, v143, &qword_1001606B0);
  v108 = v151;
  v104(v151, v105, v106);
  v109 = sub_100003E70(&qword_100160710);
  sub_100007ADC(v107, (uint64_t)&v108[*(int *)(v109 + 48)], &qword_1001606B0);
  sub_100008194(v101, &qword_1001606B0);
  v110 = *(void (**)(char *, uint64_t))(v102 + 8);
  v110(v103, v106);
  sub_100008194(v107, &qword_1001606B0);
  return ((uint64_t (*)(char *, uint64_t))v110)(v105, v106);
}

uint64_t sub_10006EAB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  double v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v23 = a2;
  v3 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003E70(&qword_1001606D8);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003E70(&qword_1001606C0);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CompactDatePicker(0);
  v12 = sub_100003E70(&qword_100160570);
  Binding.wrappedValue.getter(v12);
  v13 = v5[*(int *)(v3 + 24)];
  sub_1000283D4((uint64_t)v5, type metadata accessor for CompactDatePickerConfiguration);
  if (v13)
    v14 = 1.0;
  else
    v14 = 0.0;
  v15 = sub_100003E70(&qword_1001606E8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v8, a1, v15);
  *(double *)&v8[*(int *)(v6 + 36)] = v14;
  Binding.wrappedValue.getter(v12);
  v16 = v5[*(int *)(v3 + 24)];
  v17 = sub_1000283D4((uint64_t)v5, type metadata accessor for CompactDatePickerConfiguration);
  if (v16)
    v18 = INFINITY;
  else
    v18 = 0.0;
  v19 = static Alignment.center.getter(v17);
  sub_1000E5414(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v11, 0.0, 1, v18, 0, v19, v20);
  sub_100008194((uint64_t)v8, &qword_1001606D8);
  return sub_100007A98((uint64_t)v11, v23, &qword_1001606C0);
}

void sub_10006ECD8(CGFloat *a1@<X8>, double a2@<D0>)
{
  *a1 = CGRectGetHeight(*(CGRect *)&a2);
}

uint64_t sub_10006ECFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v2 = *a1;
  v3 = (_QWORD *)(a2 + *(int *)(type metadata accessor for CompactDatePicker(0) + 28));
  v4 = v3[1];
  v5 = v3[2];
  v8[1] = *v3;
  v8[2] = v4;
  v8[3] = v5;
  v8[0] = v2;
  v6 = sub_100003E70(&qword_100160070);
  return Binding.wrappedValue.setter(v8, v6);
}

uint64_t sub_10006ED6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = sub_100003E70(&qword_100160630);
  return sub_10006CD44(v2, a2 + *(int *)(v4 + 44));
}

uint64_t sub_10006EDB0@<X0>(uint64_t a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  __n128 v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  _BYTE *v83;
  uint64_t v84;

  v84 = a1;
  v81 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v81);
  v82 = (char *)&v70 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v3 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v5 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100003E70(&qword_1001607F0);
  __chkstk_darwin(v70);
  v7 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100003E70(&qword_1001607F8);
  __chkstk_darwin(v71);
  v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100003E70(&qword_100160800);
  __chkstk_darwin(v72);
  v11 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100003E70(&qword_100160808);
  __chkstk_darwin(v76);
  v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100003E70(&qword_100160810);
  __chkstk_darwin(v77);
  v73 = (uint64_t)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100003E70(&qword_100160818);
  __chkstk_darwin(v78);
  v75 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100003E70(&qword_100160820);
  v16 = __chkstk_darwin(v79);
  v80 = (uint64_t)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = ButtonStyleConfiguration.label.getter(v16);
  v83 = v1;
  if (*v1 == 1)
    v19 = static Color.blue.getter(v18);
  else
    v19 = static Color.primary.getter(v18);
  v20 = v19;
  KeyPath = swift_getKeyPath(&unk_10010EB50);
  v22 = v74;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v5, v74);
  v23 = (uint64_t *)&v7[*(int *)(v70 + 36)];
  *v23 = KeyPath;
  v23[1] = v20;
  v24 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v22);
  if ((ButtonStyleConfiguration.isPressed.getter(v24) & 1) != 0)
    v25 = 0.3;
  else
    v25 = 1.0;
  sub_100007ADC((uint64_t)v7, (uint64_t)v9, &qword_1001607F0);
  *(double *)&v9[*(int *)(v71 + 36)] = v25;
  v26 = sub_100008194((uint64_t)v7, &qword_1001607F0);
  v27 = static Edge.Set.horizontal.getter(v26);
  v28 = EdgeInsets.init(_all:)(20.0);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  sub_100007ADC((uint64_t)v9, (uint64_t)v11, &qword_1001607F8);
  v35 = &v11[*(int *)(v72 + 36)];
  *v35 = v27;
  *((double *)v35 + 1) = v28;
  *((_QWORD *)v35 + 2) = v30;
  *((_QWORD *)v35 + 3) = v32;
  *((_QWORD *)v35 + 4) = v34;
  v35[40] = 0;
  v36 = sub_100008194((uint64_t)v9, &qword_1001607F8);
  v37 = static Edge.Set.vertical.getter(v36);
  v38 = EdgeInsets.init(_all:)(8.0);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  sub_100007ADC((uint64_t)v11, (uint64_t)v13, &qword_100160800);
  v45 = &v13[*(int *)(v76 + 36)];
  *v45 = v37;
  *((double *)v45 + 1) = v38;
  *((_QWORD *)v45 + 2) = v40;
  *((_QWORD *)v45 + 3) = v42;
  *((_QWORD *)v45 + 4) = v44;
  v45[40] = 0;
  sub_100008194((uint64_t)v11, &qword_100160800);
  if (qword_10015CE70 != -1)
    swift_once(&qword_10015CE70, sub_1000382F0);
  v46 = qword_10016F668;
  swift_retain(qword_10016F668);
  v48 = static Edge.Set.all.getter(v47);
  v49 = v73;
  sub_100007ADC((uint64_t)v13, v73, &qword_100160808);
  v50 = v49 + *(int *)(v77 + 36);
  *(_QWORD *)v50 = v46;
  *(_BYTE *)(v50 + 8) = v48;
  sub_100008194((uint64_t)v13, &qword_100160808);
  v51 = v82;
  v52 = &v82[*(int *)(v81 + 20)];
  v53 = enum case for RoundedCornerStyle.continuous(_:);
  v54 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 104))(v52, v53, v54);
  __asm { FMOV            V0.2D, #7.0 }
  *v51 = _Q0;
  v60 = (uint64_t)v75;
  v61 = (uint64_t)&v75[*(int *)(v78 + 36)];
  sub_100028390((uint64_t)v51, v61, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v61 + *(int *)(sub_100003E70(&qword_10015E338) + 36)) = 256;
  sub_100007ADC(v49, v60, &qword_100160810);
  sub_1000283D4((uint64_t)v51, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_100008194(v49, &qword_100160810);
  v62 = type metadata accessor for DatePickerButtonStyle(0);
  v63 = v83;
  v64.n128_u64[0] = *(_QWORD *)&v83[*(int *)(v62 + 24)];
  v65 = static Animation.easeInOut(duration:)(v64);
  v66 = &v63[*(int *)(v62 + 20)];
  LOBYTE(v63) = v66[*(int *)(type metadata accessor for CompactDatePickerConfiguration(0) + 24)];
  v67 = v80;
  sub_100007ADC(v60, v80, &qword_100160818);
  v68 = v67 + *(int *)(v79 + 36);
  *(_QWORD *)v68 = v65;
  *(_BYTE *)(v68 + 8) = (_BYTE)v63;
  sub_100008194(v60, &qword_100160818);
  return sub_100007A98(v67, v84, &qword_100160820);
}

void sub_10006F368(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_10010EA60;
  sub_100071DB0(319, (unint64_t *)&qword_10015E748, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_100071DB0(319, (unint64_t *)&qword_10015D698, (uint64_t (*)(uint64_t))&type metadata accessor for DismissAction, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_10010EA78;
      swift_initStructMetadata(a1, 0, 4, v6, a1 + 32);
    }
  }
}

unint64_t sub_10006F430(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_10000E0FC(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = a3[9];
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    v13 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v17 = *v12;
      *v11 = *v12;
      swift_retain(v17);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
    v18 = a3[10];
    v19 = (uint64_t *)(a1 + v18);
    v20 = (uint64_t *)(a2 + v18);
    v21 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
      v23 = 1;
    }
    else
    {
      v24 = *v20;
      *v19 = *v20;
      swift_retain(v24);
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v21, v23);
    v25 = a3[11];
    v26 = (uint64_t *)(a1 + v25);
    v27 = (uint64_t *)(a2 + v25);
    v16 = *v27;
    v28 = v27[1];
    *v26 = v16;
    v26[1] = v28;
  }
  swift_retain(v16);
  return a1;
}

double sub_10006F5B0(uint64_t *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  sub_10000E138(*a1, a1[1]);
  v4 = (uint64_t *)((char *)a1 + a2[9]);
  v5 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (uint64_t *)((char *)a1 + a2[10]);
  v8 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  *(_QWORD *)&result = swift_release(*(uint64_t *)((char *)a1 + a2[11])).n128_u64[0];
  return result;
}

uint64_t sub_10006F690(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10000E0FC(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = a3[9];
  v10 = (uint64_t *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v12 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
    v14 = 1;
  }
  else
  {
    v15 = *v11;
    *v10 = *v11;
    swift_retain(v15);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v12, v14);
  v16 = a3[10];
  v17 = (uint64_t *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v19 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
    v21 = 1;
  }
  else
  {
    v22 = *v18;
    *v17 = *v18;
    swift_retain(v22);
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v19, v21);
  v23 = a3[11];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = *v25;
  v27 = v25[1];
  *v24 = v26;
  v24[1] = v27;
  swift_retain(v26);
  return a1;
}

uint64_t sub_10006F7E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10000E0FC(*(_QWORD *)a2, v7);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_10000E138(v9, v10);
  if (a1 != a2)
  {
    v11 = a3[9];
    v12 = (uint64_t *)(a1 + v11);
    v13 = (uint64_t *)(a2 + v11);
    sub_100008194(a1 + v11, &qword_10015D490);
    v14 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = 1;
    }
    else
    {
      v17 = *v13;
      *v12 = *v13;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v16);
    v18 = a3[10];
    v19 = (uint64_t *)(a1 + v18);
    v20 = (uint64_t *)(a2 + v18);
    sub_100008194(a1 + v18, &qword_10015D488);
    v21 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
      v23 = 1;
    }
    else
    {
      v24 = *v20;
      *v19 = *v20;
      swift_retain(v24);
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v21, v23);
  }
  v25 = a3[11];
  v26 = a1 + v25;
  v27 = (uint64_t *)(a2 + v25);
  v28 = *(_QWORD *)(a1 + v25);
  v29 = *v27;
  *(_QWORD *)(a1 + v25) = *v27;
  swift_retain(v29);
  swift_release(v28);
  *(_QWORD *)(v26 + 8) = v27[1];
  return a1;
}

uint64_t sub_10006F988(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[9];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[10];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for DismissAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_10006FACC(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_10000E138(v7, v8);
  if (a1 != a2)
  {
    v9 = a3[9];
    v10 = (void *)(a1 + v9);
    v11 = (const void *)(a2 + v9);
    sub_100008194(a1 + v9, &qword_10015D490);
    v12 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload(v10, v12, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    v14 = a3[10];
    v15 = (void *)(a1 + v14);
    v16 = (const void *)(a2 + v14);
    sub_100008194(a1 + v14, &qword_10015D488);
    v17 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for DismissAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
      swift_storeEnumTagMultiPayload(v15, v17, 1);
    }
    else
    {
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
  }
  v19 = a3[11];
  v20 = a1 + v19;
  v21 = (_QWORD *)(a2 + v19);
  v22 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *v21;
  swift_release(v22);
  *(_QWORD *)(v20 + 8) = v21[1];
  return a1;
}

uint64_t sub_10006FC60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006FC6C);
}

uint64_t sub_10006FC6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  int v13;

  v6 = sub_100003E70(&qword_10015E6D8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_100003E70(&qword_10015D608);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[11]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  v13 = v12 - 1;
  if (v13 < 0)
    v13 = -1;
  return (v13 + 1);
}

uint64_t sub_10006FD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006FD30);
}

uint64_t sub_10006FD30(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_100003E70(&qword_10015E6D8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_100003E70(&qword_10015D608);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[11]) = a2;
  return result;
}

uint64_t sub_10006FDD8(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100119AA4, 1);
}

uint64_t sub_10006FE0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000652B8(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10006FE18@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100066364(v1[4], v1[2], v1[3], a1);
}

void sub_10006FE28()
{
  sub_10006FE48((void (*)(void))sub_1000173A0, 1702125924, 0xE400000000000000, 2);
}

void sub_10006FE48(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = a4;
  v9 = *(_QWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FilterView(0, v9, v10, a4) - 8) + 80);
  sub_10006C774(v4 + ((v11 + 32) & ~v11), v9, v10, a1, a2, a3, v5);
}

uint64_t sub_10006FECC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10006C110(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_10006FED8()
{
  unint64_t result;

  result = qword_100160380;
  if (!qword_100160380)
  {
    result = swift_getWitnessTable(&unk_10010ED34, &type metadata for FilterViewSafeAreaPreferenceKey);
    atomic_store(result, (unint64_t *)&qword_100160380);
  }
  return result;
}

double sub_10006FF20(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FilterView(0, v6, v7, a4) - 8) + 80);
  return sub_10006C888(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

unint64_t sub_10006FF78()
{
  unint64_t result;

  result = qword_100160388;
  if (!qword_100160388)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EdgeInsets, &type metadata for EdgeInsets);
    atomic_store(result, (unint64_t *)&qword_100160388);
  }
  return result;
}

uint64_t sub_10006FFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006FFCC((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10006C8F4, a2, a3, a4);
}

uint64_t sub_10006FFCC(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FilterView(0, v5, v6, a4) - 8) + 80);
  return a1(v4 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t sub_100070030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006FFCC((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10006C9A4, a2, a3, a4);
}

uint64_t sub_10007003C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10006C35C(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_100070048@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10006C544(v2[4], v2[2], v2[3], a1, a2);
}

unint64_t sub_100070054()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001603A8;
  if (!qword_1001603A8)
  {
    v1 = sub_1000034AC(&qword_1001603A0);
    sub_100007D40(&qword_10015D6E0, &qword_10015D6D8, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100007D40(&qword_1001603B0, &qword_1001603B8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001603A8);
  }
  return result;
}

void sub_1000700F4()
{
  sub_10006FE48((void (*)(void))sub_100017E30, 18, 0, 3);
}

uint64_t sub_100070114()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_100070124(_BYTE *a1)
{
  uint64_t v1;

  return sub_1000D4DE8(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_100070130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006FFCC(sub_10006C49C, a2, a3, a4);
}

uint64_t sub_10007013C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100067910(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_100070148()
{
  unint64_t result;

  result = qword_1001603F8;
  if (!qword_1001603F8)
  {
    result = swift_getWitnessTable(&unk_10010AB14, &type metadata for PaddingModifier);
    atomic_store(result, (unint64_t *)&qword_1001603F8);
  }
  return result;
}

uint64_t sub_100070190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006FFCC(sub_10006BD1C, a2, a3, a4);
}

double sub_10007019C@<D0>(uint64_t a1@<X3>, _OWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_10006BE8C(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

unint64_t sub_1000701A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160408;
  if (!qword_100160408)
  {
    v1 = sub_1000034AC(&qword_100160400);
    sub_1000705A4((unint64_t *)&qword_10015F020, &qword_10015F018);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160408);
  }
  return result;
}

uint64_t sub_10007022C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_10007023C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160410;
  if (!qword_100160410)
  {
    v1 = sub_1000034AC(&qword_1001603F0);
    sub_10005C954(&qword_100160418, &qword_1001603E8, (void (*)(void))sub_1000702C8);
    sub_100070148();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160410);
  }
  return result;
}

uint64_t sub_1000702C8()
{
  return sub_10005C954(&qword_100160420, &qword_1001603E0, (void (*)(void))sub_1000702EC);
}

unint64_t sub_1000702EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160428;
  if (!qword_100160428)
  {
    v1 = sub_1000034AC(&qword_1001603D8);
    sub_100070370();
    sub_100007D40(&qword_10015E330, &qword_10015E338, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160428);
  }
  return result;
}

unint64_t sub_100070370()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160430;
  if (!qword_100160430)
  {
    v1 = sub_1000034AC(&qword_1001603D0);
    sub_1000703F4();
    sub_100007D40(&qword_10015E320, &qword_10015E328, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160430);
  }
  return result;
}

unint64_t sub_1000703F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160438;
  if (!qword_100160438)
  {
    v1 = sub_1000034AC(&qword_1001603C8);
    sub_100007D40(&qword_100160440, &qword_1001603C0, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100007D40(&qword_1001603B0, &qword_1001603B8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160438);
  }
  return result;
}

unint64_t sub_100070490()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160448;
  if (!qword_100160448)
  {
    v1 = sub_1000034AC(&qword_10015DA80);
    sub_100003B3C(&qword_100160450, (uint64_t (*)(uint64_t))&type metadata accessor for Divider, (uint64_t)&protocol conformance descriptor for Divider);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160448);
  }
  return result;
}

unint64_t sub_100070514()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160458;
  if (!qword_100160458)
  {
    v1 = sub_1000034AC(&qword_100160348);
    sub_10007023C();
    sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160458);
  }
  return result;
}

uint64_t sub_100070598@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100067D64(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000705A4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1000034AC(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100070600(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  sub_10000BFF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_10007063C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100068E8C(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_100070648()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100160488;
  if (!qword_100160488)
  {
    v1 = sub_1000034AC(&qword_100160460);
    v2[0] = sub_1000034AC(&qword_100160490);
    v2[1] = sub_1000706F4();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160488);
  }
  return result;
}

unint64_t sub_1000706F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160498;
  if (!qword_100160498)
  {
    v1 = sub_1000034AC(&qword_100160490);
    sub_100070778();
    sub_100007D40(&qword_10015E310, &qword_10015E318, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160498);
  }
  return result;
}

unint64_t sub_100070778()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001604A0;
  if (!qword_1001604A0)
  {
    v1 = sub_1000034AC(&qword_1001604A8);
    sub_1000705A4((unint64_t *)&qword_10015F020, &qword_10015F018);
    sub_100007D40(&qword_10015DF28, &qword_10015DF30, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001604A0);
  }
  return result;
}

unint64_t sub_100070814()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001604B0;
  if (!qword_1001604B0)
  {
    v1 = sub_1000034AC(&qword_100160480);
    sub_100007D40(&qword_1001604B8, &qword_1001604C0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001604B0);
  }
  return result;
}

unint64_t sub_100070898()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001604C8;
  if (!qword_1001604C8)
  {
    v1 = sub_1000034AC(&qword_100160330);
    sub_10005C954(&qword_100160478, &qword_100160470, (void (*)(void))sub_10001BE90);
    sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001604C8);
  }
  return result;
}

unint64_t sub_10007093C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001604D8;
  if (!qword_1001604D8)
  {
    v1 = sub_1000034AC(&qword_100160468);
    sub_100070648();
    sub_100070814();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1001604D8);
  }
  return result;
}

uint64_t sub_1000709B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10006A070(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000709C0@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10006A494(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_1000709D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = (int *)type metadata accessor for FilterView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = v4 + v8;
  sub_10000E138(*(_QWORD *)(v4 + v8), *(_QWORD *)(v4 + v8 + 8));
  v11 = (_QWORD *)(v4 + v8 + v5[9]);
  v12 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = (_QWORD *)(v10 + v5[10]);
  v15 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  swift_release(*(_QWORD *)(v10 + v5[11]));
  return swift_deallocObject(v4, v8 + v9, v7 | 7);
}

uint64_t sub_100070AF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FilterView(0, v6, v7, a2) - 8) + 80);
  return sub_10006A8D8(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

uint64_t sub_100070B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v24;

  v5 = *(_QWORD *)(v4 + 24);
  v6 = (int *)type metadata accessor for FilterView(0, *(_QWORD *)(v4 + 16), v5, a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v24 = *(_QWORD *)(v7 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v5);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 64);
  v14 = v4 + v9;
  sub_10000E138(*(_QWORD *)(v4 + v9), *(_QWORD *)(v4 + v9 + 8));
  v15 = (_QWORD *)(v4 + v9 + v6[9]);
  v16 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
  }
  else
  {
    swift_release(*v15);
  }
  v18 = (_QWORD *)(v14 + v6[10]);
  v19 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  }
  else
  {
    swift_release(*v18);
  }
  v21 = (v9 + v24 + v12) & ~v12;
  v22 = swift_release(*(_QWORD *)(v14 + v6[11]));
  (*(void (**)(uint64_t, uint64_t, __n128))(v11 + 8))(v4 + v21, AssociatedTypeWitness, v22);
  return swift_deallocObject(v4, v21 + v13, v8 | v12 | 7);
}

void sub_100070CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(type metadata accessor for FilterView(0, v5, v6, a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness(0, v6) - 8) + 80);
  sub_10006AEE8(v4 + v8, v4 + ((v8 + v9 + v10) & ~v10), v5, v6);
}

uint64_t sub_100070D84@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10006AFF0(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t sub_100070D90@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10006B224(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t type metadata accessor for CompactDatePicker(uint64_t a1)
{
  return sub_10002F744(a1, (uint64_t *)&unk_1001605D8, (uint64_t)&nominal type descriptor for CompactDatePicker);
}

uint64_t sub_100070DC8()
{
  return 16;
}

__n128 sub_100070DD4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100070DE8()
{
  return 16;
}

__n128 sub_100070DF4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_100070E00(double *a1@<X8>)
{
  *a1 = sub_10001621C();
}

uint64_t sub_100070E28(double *a1)
{
  return sub_100016230(*a1);
}

uint64_t sub_100070E4C()
{
  return 16;
}

__n128 sub_100070E58(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_100070E64(double *a1@<X8>)
{
  *a1 = sub_100016244();
}

uint64_t sub_100070E8C(double *a1)
{
  return sub_1000162E0(*a1);
}

uint64_t sub_100070EB0()
{
  return 16;
}

__n128 sub_100070EBC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for FilterViewSafeAreaPreferenceKey()
{
  return &type metadata for FilterViewSafeAreaPreferenceKey;
}

_QWORD *sub_100070ED8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __n128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  void (*v59)(char *, char *, uint64_t, __n128);
  uint64_t v60;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v7 = a2[1];
    a1[1] = v7;
    swift_retain(v5);
    swift_retain(v7);
    v60 = sub_100003E70(&qword_100160570);
    v8 = *(int *)(v60 + 32);
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)((char *)a2 + v8 + 8);
    *v9 = *(_QWORD *)((char *)a2 + v8);
    v9[1] = v11;
    v12 = type metadata accessor for CompactDatePickerConfiguration(0);
    v13 = *(int *)(v12 + 20);
    v14 = (char *)v9 + v13;
    v15 = &v10[v13];
    v16 = type metadata accessor for Date(0);
    v17 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v16 - 8) + 16);
    v59 = v17;
    v18 = swift_bridgeObjectRetain(v11);
    v17(v14, v15, v16, v18);
    *((_BYTE *)v9 + *(int *)(v12 + 24)) = v10[*(int *)(v12 + 24)];
    v19 = a3[5];
    v20 = (_QWORD *)((char *)a1 + v19);
    v21 = (_QWORD *)((char *)a2 + v19);
    v22 = *v21;
    v23 = v21[1];
    *v20 = *v21;
    v20[1] = v23;
    v24 = *(int *)(v60 + 32);
    v25 = (uint64_t *)((char *)v20 + v24);
    v26 = (char *)v21 + v24;
    v27 = *(uint64_t *)((char *)v21 + v24 + 8);
    *v25 = *(uint64_t *)((char *)v21 + v24);
    v25[1] = v27;
    v28 = *(int *)(v12 + 20);
    v29 = (char *)v20 + v24 + v28;
    v30 = &v26[v28];
    swift_retain(v22);
    swift_retain(v23);
    v31 = swift_bridgeObjectRetain(v27);
    v59(v29, v30, v16, v31);
    *((_BYTE *)v25 + *(int *)(v12 + 24)) = v26[*(int *)(v12 + 24)];
    v32 = a3[6];
    v33 = (_QWORD *)((char *)a1 + v32);
    v34 = (_QWORD *)((char *)a2 + v32);
    v35 = *v34;
    v36 = v34[1];
    *v33 = *v34;
    v33[1] = v36;
    v37 = *(int *)(v60 + 32);
    v38 = (uint64_t *)((char *)v33 + v37);
    v39 = (char *)v34 + v37;
    v40 = *(uint64_t *)((char *)v34 + v37 + 8);
    *v38 = *(uint64_t *)((char *)v34 + v37);
    v38[1] = v40;
    v41 = *(int *)(v12 + 20);
    v42 = (char *)v33 + v37 + v41;
    v43 = &v39[v41];
    swift_retain(v35);
    swift_retain(v36);
    v44 = swift_bridgeObjectRetain(v40);
    v59(v42, v43, v16, v44);
    *((_BYTE *)v38 + *(int *)(v12 + 24)) = v39[*(int *)(v12 + 24)];
    v45 = a3[7];
    v46 = a3[8];
    v47 = (_QWORD *)((char *)a1 + v45);
    v48 = (_QWORD *)((char *)a2 + v45);
    v50 = v48[1];
    v49 = v48[2];
    v47[1] = v50;
    v47[2] = v49;
    v51 = *v48;
    *v47 = *v48;
    v52 = (char *)a1 + v46;
    v53 = (char *)a2 + v46;
    swift_retain(v51);
    v54 = swift_retain(v50);
    v59(v52, v53, v16, v54);
    v55 = sub_100003E70(&qword_10015DD00);
    ((void (*)(char *, char *, uint64_t))v59)(&v52[*(int *)(v55 + 36)], &v53[*(int *)(v55 + 36)], v16);
    v56 = a3[10];
    *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
    *((_BYTE *)a1 + v56) = *((_BYTE *)a2 + v56);
  }
  return a1;
}

uint64_t sub_100071130(_QWORD *a1, int *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  __n128 v14;
  char *v15;
  char *v16;
  void (*v18)(char *, uint64_t);

  swift_release(*a1);
  swift_release(a1[1]);
  v4 = sub_100003E70(&qword_100160570);
  v5 = (char *)a1 + *(int *)(v4 + 32);
  swift_bridgeObjectRelease(*((_QWORD *)v5 + 1));
  v6 = type metadata accessor for CompactDatePickerConfiguration(0);
  v7 = &v5[*(int *)(v6 + 20)];
  v8 = type metadata accessor for Date(0);
  v18 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v18(v7, v8);
  v9 = (_QWORD *)((char *)a1 + a2[5]);
  swift_release(*v9);
  swift_release(v9[1]);
  v10 = (char *)v9 + *(int *)(v4 + 32);
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
  v18(&v10[*(int *)(v6 + 20)], v8);
  v11 = (_QWORD *)((char *)a1 + a2[6]);
  swift_release(*v11);
  swift_release(v11[1]);
  v12 = (char *)v11 + *(int *)(v4 + 32);
  swift_bridgeObjectRelease(*((_QWORD *)v12 + 1));
  v18(&v12[*(int *)(v6 + 20)], v8);
  v13 = (_QWORD *)((char *)a1 + a2[7]);
  swift_release(*v13);
  v14 = swift_release(v13[1]);
  v15 = (char *)a1 + a2[8];
  ((void (*)(char *, uint64_t, __n128))v18)(v15, v8, v14);
  v16 = &v15[*(int *)(sub_100003E70(&qword_10015DD00) + 36)];
  return ((uint64_t (*)(char *, uint64_t))v18)(v16, v8);
}

_QWORD *sub_100071298(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t, __n128);
  __n128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __n128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t, __n128);

  v5 = *a2;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain(v5);
  swift_retain(v6);
  v57 = sub_100003E70(&qword_100160570);
  v7 = *(int *)(v57 + 32);
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (char *)a2 + v7;
  v10 = *(_QWORD *)((char *)a2 + v7 + 8);
  *v8 = *(_QWORD *)((char *)a2 + v7);
  v8[1] = v10;
  v11 = type metadata accessor for CompactDatePickerConfiguration(0);
  v12 = *(int *)(v11 + 20);
  v13 = (char *)v8 + v12;
  v14 = &v9[v12];
  v15 = type metadata accessor for Date(0);
  v16 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v15 - 8) + 16);
  v58 = v16;
  v17 = swift_bridgeObjectRetain(v10);
  v16(v13, v14, v15, v17);
  *((_BYTE *)v8 + *(int *)(v11 + 24)) = v9[*(int *)(v11 + 24)];
  v18 = a3[5];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v21 = *v20;
  v22 = v20[1];
  *v19 = *v20;
  v19[1] = v22;
  v23 = *(int *)(v57 + 32);
  v24 = (uint64_t *)((char *)v19 + v23);
  v25 = (char *)v20 + v23;
  v26 = *(uint64_t *)((char *)v20 + v23 + 8);
  *v24 = *(uint64_t *)((char *)v20 + v23);
  v24[1] = v26;
  v27 = *(int *)(v11 + 20);
  v28 = (char *)v19 + v23 + v27;
  v29 = &v25[v27];
  swift_retain(v21);
  swift_retain(v22);
  v30 = swift_bridgeObjectRetain(v26);
  v58(v28, v29, v15, v30);
  *((_BYTE *)v24 + *(int *)(v11 + 24)) = v25[*(int *)(v11 + 24)];
  v31 = a3[6];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  v34 = *v33;
  v35 = v33[1];
  *v32 = *v33;
  v32[1] = v35;
  v36 = *(int *)(v57 + 32);
  v37 = (uint64_t *)((char *)v32 + v36);
  v38 = (char *)v33 + v36;
  v39 = *(uint64_t *)((char *)v33 + v36 + 8);
  *v37 = *(uint64_t *)((char *)v33 + v36);
  v37[1] = v39;
  v40 = *(int *)(v11 + 20);
  v41 = (char *)v32 + v36 + v40;
  v42 = &v38[v40];
  swift_retain(v34);
  swift_retain(v35);
  v43 = swift_bridgeObjectRetain(v39);
  v58(v41, v42, v15, v43);
  *((_BYTE *)v37 + *(int *)(v11 + 24)) = v38[*(int *)(v11 + 24)];
  v44 = a3[7];
  v45 = a3[8];
  v46 = (_QWORD *)((char *)a1 + v44);
  v47 = (_QWORD *)((char *)a2 + v44);
  v49 = v47[1];
  v48 = v47[2];
  v46[1] = v49;
  v46[2] = v48;
  v50 = *v47;
  *v46 = *v47;
  v51 = (char *)a1 + v45;
  v52 = (char *)a2 + v45;
  swift_retain(v50);
  v53 = swift_retain(v49);
  v58(v51, v52, v15, v53);
  v54 = sub_100003E70(&qword_10015DD00);
  ((void (*)(char *, char *, uint64_t))v58)(&v51[*(int *)(v54 + 36)], &v52[*(int *)(v54 + 36)], v15);
  v55 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *((_BYTE *)a1 + v55) = *((_BYTE *)a2 + v55);
  return a1;
}

char *sub_1000714C8(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;

  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain(v6);
  swift_release(v5);
  v7 = *((_QWORD *)a2 + 1);
  v8 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v7;
  swift_retain(v7);
  swift_release(v8);
  v9 = sub_100003E70(&qword_100160570);
  v10 = *(int *)(v9 + 32);
  v11 = &a1[v10];
  v12 = &a2[v10];
  *(_QWORD *)v11 = *(_QWORD *)&a2[v10];
  v13 = *(_QWORD *)&a2[v10 + 8];
  v14 = *(_QWORD *)&a1[v10 + 8];
  *((_QWORD *)v11 + 1) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = type metadata accessor for CompactDatePickerConfiguration(0);
  v16 = *(int *)(v15 + 20);
  v17 = &v11[v16];
  v18 = &v12[v16];
  v19 = type metadata accessor for Date(0);
  v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 24);
  v20(v17, v18, v19);
  v11[*(int *)(v15 + 24)] = v12[*(int *)(v15 + 24)];
  v21 = a3[5];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = *(_QWORD *)&a1[v21];
  v25 = *(_QWORD *)&a2[v21];
  *(_QWORD *)&a1[v21] = v25;
  swift_retain(v25);
  swift_release(v24);
  v26 = *((_QWORD *)v23 + 1);
  v27 = *((_QWORD *)v22 + 1);
  *((_QWORD *)v22 + 1) = v26;
  swift_retain(v26);
  swift_release(v27);
  v28 = *(int *)(v9 + 32);
  v29 = &v22[v28];
  v30 = &v23[v28];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v31 = *((_QWORD *)v30 + 1);
  v32 = *((_QWORD *)v29 + 1);
  *((_QWORD *)v29 + 1) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v20(&v29[*(int *)(v15 + 20)], &v30[*(int *)(v15 + 20)], v19);
  v29[*(int *)(v15 + 24)] = v30[*(int *)(v15 + 24)];
  v33 = a3[6];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = *(_QWORD *)&a1[v33];
  v37 = *(_QWORD *)&a2[v33];
  *(_QWORD *)&a1[v33] = v37;
  swift_retain(v37);
  swift_release(v36);
  v38 = *((_QWORD *)v35 + 1);
  v39 = *((_QWORD *)v34 + 1);
  *((_QWORD *)v34 + 1) = v38;
  swift_retain(v38);
  swift_release(v39);
  v40 = *(int *)(v9 + 32);
  v41 = &v34[v40];
  v42 = &v35[v40];
  *(_QWORD *)v41 = *(_QWORD *)&v35[v40];
  v43 = *(_QWORD *)&v35[v40 + 8];
  v44 = *((_QWORD *)v41 + 1);
  *((_QWORD *)v41 + 1) = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  v20(&v41[*(int *)(v15 + 20)], &v42[*(int *)(v15 + 20)], v19);
  v41[*(int *)(v15 + 24)] = v42[*(int *)(v15 + 24)];
  v45 = a3[7];
  v46 = &a1[v45];
  v47 = &a2[v45];
  v48 = *(_QWORD *)&a1[v45];
  v49 = *(_QWORD *)&a2[v45];
  *(_QWORD *)&a1[v45] = v49;
  swift_retain(v49);
  swift_release(v48);
  v50 = *((_QWORD *)v47 + 1);
  v51 = *((_QWORD *)v46 + 1);
  *((_QWORD *)v46 + 1) = v50;
  swift_retain(v50);
  swift_release(v51);
  *((_QWORD *)v46 + 2) = *((_QWORD *)v47 + 2);
  v52 = a3[8];
  v53 = &a1[v52];
  v54 = &a2[v52];
  v20(&a1[v52], &a2[v52], v19);
  v55 = sub_100003E70(&qword_10015DD00);
  v20(&v53[*(int *)(v55 + 36)], &v54[*(int *)(v55 + 36)], v19);
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

char *sub_100071778(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  v39 = sub_100003E70(&qword_100160570);
  v7 = *(int *)(v39 + 32);
  v8 = &a1[v7];
  v9 = &a2[v7];
  *(_OWORD *)&a1[v7] = *(_OWORD *)&a2[v7];
  v10 = type metadata accessor for CompactDatePickerConfiguration(0);
  v11 = *(int *)(v10 + 20);
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(v12, v13, v14);
  v8[*(int *)(v10 + 24)] = v9[*(int *)(v10 + 24)];
  v16 = a3[5];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *((_QWORD *)v18 + 1);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = v19;
  v20 = *(int *)(v39 + 32);
  v21 = &v17[v20];
  v22 = &v18[v20];
  *(_OWORD *)&v17[v20] = *(_OWORD *)&v18[v20];
  v15(&v17[v20 + *(int *)(v10 + 20)], &v18[v20 + *(int *)(v10 + 20)], v14);
  v21[*(int *)(v10 + 24)] = v22[*(int *)(v10 + 24)];
  v23 = a3[6];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *((_QWORD *)v24 + 1) = v26;
  v27 = *(int *)(v39 + 32);
  v28 = &v24[v27];
  v29 = &v25[v27];
  *(_OWORD *)&v24[v27] = *(_OWORD *)&v25[v27];
  v15(&v24[v27 + *(int *)(v10 + 20)], &v25[v27 + *(int *)(v10 + 20)], v14);
  v28[*(int *)(v10 + 24)] = v29[*(int *)(v10 + 24)];
  v30 = a3[7];
  v31 = a3[8];
  v32 = &a1[v30];
  v33 = &a2[v30];
  *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
  *(_OWORD *)v32 = *(_OWORD *)v33;
  v34 = &a1[v31];
  v35 = &a2[v31];
  v15(&a1[v31], &a2[v31], v14);
  v36 = sub_100003E70(&qword_10015DD00);
  v15(&v34[*(int *)(v36 + 36)], &v35[*(int *)(v36 + 36)], v14);
  v37 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  a1[v37] = a2[v37];
  return a1;
}

char *sub_100071938(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release(v5);
  v6 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_release(v6);
  v7 = sub_100003E70(&qword_100160570);
  v8 = *(int *)(v7 + 32);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)&a2[v8 + 8];
  v12 = *(_QWORD *)&a1[v8 + 8];
  *(_QWORD *)v9 = *(_QWORD *)&a2[v8];
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = type metadata accessor for CompactDatePickerConfiguration(0);
  v14 = *(int *)(v13 + 20);
  v15 = &v9[v14];
  v16 = &v10[v14];
  v17 = type metadata accessor for Date(0);
  v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 40);
  v18(v15, v16, v17);
  v9[*(int *)(v13 + 24)] = v10[*(int *)(v13 + 24)];
  v19 = a3[5];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *(_QWORD *)&a1[v19];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];
  swift_release(v22);
  v23 = *((_QWORD *)v20 + 1);
  *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
  swift_release(v23);
  v24 = *(int *)(v7 + 32);
  v25 = &v20[v24];
  v26 = &v21[v24];
  v27 = *((_QWORD *)v26 + 1);
  v28 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *((_QWORD *)v25 + 1) = v27;
  swift_bridgeObjectRelease(v28);
  v18(&v25[*(int *)(v13 + 20)], &v26[*(int *)(v13 + 20)], v17);
  v25[*(int *)(v13 + 24)] = v26[*(int *)(v13 + 24)];
  v29 = a3[6];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = *(_QWORD *)&a1[v29];
  *(_QWORD *)&a1[v29] = *(_QWORD *)&a2[v29];
  swift_release(v32);
  v33 = *((_QWORD *)v30 + 1);
  *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
  swift_release(v33);
  v34 = *(int *)(v7 + 32);
  v35 = &v30[v34];
  v36 = &v31[v34];
  v37 = *(_QWORD *)&v31[v34 + 8];
  v38 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v35 = *(_QWORD *)&v31[v34];
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRelease(v38);
  v18(&v35[*(int *)(v13 + 20)], &v36[*(int *)(v13 + 20)], v17);
  v35[*(int *)(v13 + 24)] = v36[*(int *)(v13 + 24)];
  v39 = a3[7];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v42 = *(_QWORD *)&a1[v39];
  *(_QWORD *)&a1[v39] = *(_QWORD *)&a2[v39];
  swift_release(v42);
  v43 = *((_QWORD *)v40 + 1);
  *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
  swift_release(v43);
  *((_QWORD *)v40 + 2) = *((_QWORD *)v41 + 2);
  v44 = a3[8];
  v45 = &a1[v44];
  v46 = &a2[v44];
  v18(&a1[v44], &a2[v44], v17);
  v47 = sub_100003E70(&qword_10015DD00);
  v18(&v45[*(int *)(v47 + 36)], &v46[*(int *)(v47 + 36)], v17);
  v48 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  a1[v48] = a2[v48];
  return a1;
}

uint64_t sub_100071B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100071B80);
}

uint64_t sub_100071B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_100003E70(&qword_100160570);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_100003E70(&qword_10015DD00);
    v10 = a1 + *(int *)(a3 + 32);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_100071C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100071C40);
}

uint64_t sub_100071C40(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_100003E70(&qword_100160570);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
      return result;
    }
    v10 = sub_100003E70(&qword_10015DD00);
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100071CF0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  sub_100071DB0(319, (unint64_t *)&unk_1001605E8, type metadata accessor for CompactDatePickerConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = v6[0];
    v6[2] = v6[0];
    v6[3] = &unk_10010EC98;
    sub_100019520(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      v6[5] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[6] = &unk_10010ECB0;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

void sub_100071DB0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_100071E08(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t WitnessTable;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t TupleTypeMetadata3;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t TupleTypeMetadata;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v1 = *a1;
  v2 = a1[1];
  v70 = type metadata accessor for NavigationPath(255);
  v76 = sub_1000034AC(&qword_10015DA80);
  v3 = sub_1000034AC(&qword_100160330);
  v69 = sub_1000034AC(&qword_100160338);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2);
  v5 = type metadata accessor for Array(255, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &unk_1001191E8, &unk_100119200);
  v7 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  v8 = swift_getAssociatedTypeWitness(255, v7);
  v9 = sub_1000034AC(&qword_100160340);
  v10 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v10);
  v11 = type metadata accessor for _AnimationModifier(255, v10);
  v12 = type metadata accessor for ModifiedContent(255, v9, v11);
  v13 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v11);
  v14 = type metadata accessor for ModifiedContent(255, v13, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v12, v14, 0, 0);
  v16 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v16);
  v18 = type metadata accessor for ZStack(255, v16, WitnessTable);
  v19 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v18);
  v20 = type metadata accessor for Button(255, v18, v19);
  v21 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v22 = type metadata accessor for ModifiedContent(255, v20, v21);
  v71 = v5;
  v72 = v8;
  v73 = v22;
  v74 = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  v75 = swift_getAssociatedConformanceWitness(v7, AssociatedTypeWitness, v8, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v23 = type metadata accessor for ForEach(255, &v71);
  swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v20);
  sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v22);
  v24 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v23);
  v25 = type metadata accessor for LazyVGrid(255, v23, v24);
  v26 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v25);
  v27 = type metadata accessor for ScrollView(255, v25, v26);
  v28 = type metadata accessor for ModifiedContent(255, v27, &type metadata for _PaddingLayout);
  v29 = swift_getTupleTypeMetadata2(255, v3, v28, 0, 0);
  v30 = type metadata accessor for TupleView(255, v29);
  v31 = type metadata accessor for Optional(255, v30);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v3, v69, v31, 0, 0);
  v33 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v33);
  v35 = type metadata accessor for VStack(255, v33, v34);
  v36 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v35);
  v37 = type metadata accessor for ScrollView(255, v35, v36);
  v38 = type metadata accessor for ModifiedContent(255, v37, &type metadata for PaddingModifier);
  v39 = type metadata accessor for ModifiedContent(255, v38, &type metadata for _PaddingLayout);
  v40 = sub_1000034AC(&qword_10015E328);
  v77 = type metadata accessor for ModifiedContent(255, v39, v40);
  v78 = type metadata accessor for Divider(255);
  v79 = sub_1000034AC(&qword_100160348);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 4);
  v42 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  v43 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v42);
  v44 = type metadata accessor for VStack(255, v42, v43);
  v45 = type metadata accessor for ModifiedContent(255, v44, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v46 = type metadata accessor for CompactDatePickerConfiguration(255);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v44);
  v47 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v45);
  v48 = sub_100003B3C(&qword_100160210, type metadata accessor for CompactDatePickerConfiguration, (uint64_t)&unk_10010E950);
  v71 = v45;
  v72 = v46;
  v73 = v47;
  v74 = v48;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v71, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v71 = v45;
  v72 = v46;
  v73 = v47;
  v74 = v48;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v71 = OpaqueTypeMetadata2;
  v72 = v46;
  v73 = OpaqueTypeConformance2;
  v74 = v48;
  v51 = swift_getOpaqueTypeMetadata2(255, &v71, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v71 = OpaqueTypeMetadata2;
  v72 = v46;
  v73 = OpaqueTypeConformance2;
  v74 = v48;
  v52 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v71 = v51;
  v72 = v52;
  v53 = swift_getOpaqueTypeMetadata2(255, &v71, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v71 = v51;
  v72 = v52;
  v54 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v71 = v53;
  v72 = v54;
  v55 = swift_getOpaqueTypeMetadata2(255, &v71, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:)>>, 0);
  v56 = sub_1000034AC(&qword_100160350);
  v71 = v53;
  v72 = v54;
  v57 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:)>>, 1);
  v58 = sub_100007D40(&qword_100160358, &qword_100160350, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v71 = v55;
  v72 = v56;
  v73 = v57;
  v74 = v58;
  v59 = swift_getOpaqueTypeMetadata2(255, &v71, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v60 = sub_1000034AC(&qword_100160360);
  v61 = type metadata accessor for ModifiedContent(255, v59, v60);
  v62 = sub_1000034AC(&qword_100160368);
  v63 = type metadata accessor for ModifiedContent(255, v61, v62);
  v64 = type metadata accessor for ModifiedContent(255, v63, &type metadata for _AppearanceActionModifier);
  v65 = type metadata accessor for ModifiedContent(255, v64, &type metadata for _AppearanceActionModifier);
  v71 = v55;
  v72 = v56;
  v73 = v57;
  v74 = v58;
  swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  sub_100007D40(&qword_100160370, &qword_100160360, (uint64_t)&unk_1001134C0);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v61);
  sub_100007D40(&qword_100160378, &qword_100160368, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v63);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v64);
  v66 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v65);
  v67 = type metadata accessor for NavigationStack(255, v70, v65, v66);
  return swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v67);
}

uint64_t sub_100072580(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100119B2C, 1);
}

unint64_t sub_100072590(uint64_t a1)
{
  unint64_t result;

  result = sub_10006FED8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000725B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10006EAB8(a1, a2);
}

unint64_t sub_1000725BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001606D0;
  if (!qword_1001606D0)
  {
    v1 = sub_1000034AC(&qword_1001606D8);
    sub_100007D40(&qword_1001606E0, &qword_1001606E8, (uint64_t)&protocol conformance descriptor for PlaceholderContentView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001606D0);
  }
  return result;
}

unint64_t sub_100072640()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001606F8;
  if (!qword_1001606F8)
  {
    v1 = sub_1000034AC(&qword_100160678);
    sub_100007D40(&qword_1001606F0, &qword_100160670, (uint64_t)&protocol conformance descriptor for DatePicker<A>);
    sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001606F8);
  }
  return result;
}

uint64_t sub_1000726E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CompactDatePicker(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100072724(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CompactDatePicker(0) - 8) + 80);
  return sub_10006ECFC(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t type metadata accessor for DatePickerButtonStyle(uint64_t a1)
{
  return sub_10002F744(a1, qword_100160798, (uint64_t)&nominal type descriptor for DatePickerButtonStyle);
}

uint64_t sub_100072778()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;

  v1 = (int *)type metadata accessor for CompactDatePicker(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v7 + 8));
  v8 = sub_100003E70(&qword_100160570);
  v9 = v7 + *(int *)(v8 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
  v10 = type metadata accessor for CompactDatePickerConfiguration(0);
  v11 = v9 + *(int *)(v10 + 20);
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v14 = (_QWORD *)(v7 + v1[5]);
  swift_release(*v14);
  swift_release(v14[1]);
  v15 = (char *)v14 + *(int *)(v8 + 32);
  swift_bridgeObjectRelease(*((_QWORD *)v15 + 1));
  v13((uint64_t)&v15[*(int *)(v10 + 20)], v12);
  v16 = (_QWORD *)(v7 + v1[6]);
  swift_release(*v16);
  swift_release(v16[1]);
  v17 = (char *)v16 + *(int *)(v8 + 32);
  swift_bridgeObjectRelease(*((_QWORD *)v17 + 1));
  v13((uint64_t)&v17[*(int *)(v10 + 20)], v12);
  v18 = (_QWORD *)(v7 + v1[7]);
  swift_release(*v18);
  v19 = swift_release(v18[1]);
  v20 = v7 + v1[8];
  ((void (*)(uint64_t, uint64_t, __n128))v13)(v20, v12, v19);
  v21 = sub_100003E70(&qword_10015DD00);
  v13(v20 + *(int *)(v21 + 36), v12);
  return swift_deallocObject(v0, v5, v6);
}

double sub_100072904()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CompactDatePicker(0) - 8) + 80);
  return sub_10006D5EC(v0 + ((v1 + 16) & ~v1), v2);
}

uint64_t sub_100072930@<X0>(uint64_t a1@<X8>)
{
  return sub_10006DA20(a1);
}

double sub_100072938()
{
  uint64_t v0;

  return sub_10006D658(*(char **)(v0 + 16));
}

ValueMetadata *type metadata accessor for FilterViewStartDatePickerHeightPreferenceKey()
{
  return &type metadata for FilterViewStartDatePickerHeightPreferenceKey;
}

uint64_t *sub_100072960(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  char *v19;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (uint64_t *)((char *)a1 + v7);
    v9 = (char *)a2 + v7;
    v10 = *(uint64_t *)((char *)a2 + v7 + 8);
    *v8 = *(uint64_t *)((char *)a2 + v7);
    v8[1] = v10;
    v11 = type metadata accessor for CompactDatePickerConfiguration(0);
    v12 = *(int *)(v11 + 20);
    v19 = (char *)v8 + v12;
    v13 = &v9[v12];
    v14 = type metadata accessor for Date(0);
    v15 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v14 - 8) + 16);
    v16 = swift_bridgeObjectRetain(v10);
    v15(v19, v13, v14, v16);
    *((_BYTE *)v8 + *(int *)(v11 + 24)) = v9[*(int *)(v11 + 24)];
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_100072A58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 8));
  v3 = v2 + *(int *)(type metadata accessor for CompactDatePickerConfiguration(0) + 20);
  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

_BYTE *sub_100072AA8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  void (*v14)(char *, _BYTE *, uint64_t, __n128);
  __n128 v15;

  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = &a1[v5];
  v7 = &a2[v5];
  v8 = *(_QWORD *)&a2[v5 + 8];
  *v6 = *(_QWORD *)&a2[v5];
  v6[1] = v8;
  v9 = type metadata accessor for CompactDatePickerConfiguration(0);
  v10 = *(int *)(v9 + 20);
  v11 = (char *)v6 + v10;
  v12 = &v7[v10];
  v13 = type metadata accessor for Date(0);
  v14 = *(void (**)(char *, _BYTE *, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
  v15 = swift_bridgeObjectRetain(v8);
  v14(v11, v12, v13, v15);
  *((_BYTE *)v6 + *(int *)(v9 + 24)) = v7[*(int *)(v9 + 24)];
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *sub_100072B74(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  *v7 = *(_QWORD *)&a2[v6];
  v9 = *(_QWORD *)&a2[v6 + 8];
  v10 = v7[1];
  v7[1] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = type metadata accessor for CompactDatePickerConfiguration(0);
  v12 = *(int *)(v11 + 20);
  v13 = (char *)v7 + v12;
  v14 = &v8[v12];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  *((_BYTE *)v7 + *(int *)(v11 + 24)) = v8[*(int *)(v11 + 24)];
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *sub_100072C38(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  *(_OWORD *)&a1[v6] = *(_OWORD *)&a2[v6];
  v9 = type metadata accessor for CompactDatePickerConfiguration(0);
  v10 = *(int *)(v9 + 20);
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *sub_100072CE4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a2[v6 + 8];
  v10 = *(_QWORD *)&a1[v6 + 8];
  *v7 = *(_QWORD *)&a2[v6];
  v7[1] = v9;
  swift_bridgeObjectRelease(v10);
  v11 = type metadata accessor for CompactDatePickerConfiguration(0);
  v12 = *(int *)(v11 + 20);
  v13 = (char *)v7 + v12;
  v14 = &v8[v12];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  *((_BYTE *)v7 + *(int *)(v11 + 24)) = v8[*(int *)(v11 + 24)];
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_100072D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100072DA4);
}

uint64_t sub_100072DA4(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for CompactDatePickerConfiguration(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v10);
  }
}

uint64_t sub_100072E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100072E2C);
}

_BYTE *sub_100072E2C(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for CompactDatePickerConfiguration(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100072E9C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10010ECB0;
  result = type metadata accessor for CompactDatePickerConfiguration(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100072F1C()
{
  return sub_100007D40(&qword_1001607D8, &qword_1001607E0, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

unint64_t sub_100072F48(uint64_t a1)
{
  unint64_t result;

  result = sub_100072F6C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100072F6C()
{
  unint64_t result;

  result = qword_1001607E8;
  if (!qword_1001607E8)
  {
    result = swift_getWitnessTable(&unk_10010EE08, &type metadata for FilterViewStartDatePickerHeightPreferenceKey);
    atomic_store(result, (unint64_t *)&qword_1001607E8);
  }
  return result;
}

uint64_t sub_100072FB0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100119B54, 1);
}

unint64_t sub_100072FC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160828;
  if (!qword_100160828)
  {
    v1 = sub_1000034AC(&qword_100160820);
    sub_100073048();
    sub_100007D40(&qword_100160868, qword_100160870, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160828);
  }
  return result;
}

unint64_t sub_100073048()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160830;
  if (!qword_100160830)
  {
    v1 = sub_1000034AC(&qword_100160818);
    sub_1000730CC();
    sub_100007D40(&qword_10015E330, &qword_10015E338, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160830);
  }
  return result;
}

unint64_t sub_1000730CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160838;
  if (!qword_100160838)
  {
    v1 = sub_1000034AC(&qword_100160810);
    sub_10005C954(&qword_100160840, &qword_100160808, (void (*)(void))sub_100073170);
    sub_100007D40(&qword_10015E320, &qword_10015E328, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160838);
  }
  return result;
}

uint64_t sub_100073170()
{
  return sub_10005C954(&qword_100160848, &qword_100160800, (void (*)(void))sub_100073194);
}

uint64_t sub_100073194()
{
  return sub_10005C954(&qword_100160850, &qword_1001607F8, (void (*)(void))sub_1000731B8);
}

unint64_t sub_1000731B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160858;
  if (!qword_100160858)
  {
    v1 = sub_1000034AC(&qword_1001607F0);
    sub_100003B3C(&qword_100160860, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    sub_100007D40(&qword_10015E9F0, &qword_10015E9F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160858);
  }
  return result;
}

uint64_t sub_100073258(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  v5[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = &unk_10010EED8;
    v5[3] = &unk_10010EEF0;
    v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for ObservationRegistrar(319);
    if (v4 <= 0x3F)
    {
      v5[5] = *(_QWORD *)(result - 8) + 64;
      result = swift_initClassMetadata2(a1, 0, 6, v5, a1 + 96);
      if (!result)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_100073314()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v1 = *v0;
  swift_bridgeObjectRelease(v0[2]);
  v2 = (char *)v0 + *(_QWORD *)(*v0 + 104);
  v3 = type metadata accessor for Optional(0, *(_QWORD *)(v1 + 80));
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  v4 = (char *)v0 + *(_QWORD *)(*v0 + 120);
  v5 = *((_QWORD *)v4 + 1);
  swift_bridgeObjectRelease(*((_QWORD *)v4 + 3));
  swift_bridgeObjectRelease(v5);
  v6 = (char *)v0 + *(_QWORD *)(*v0 + 136);
  v7 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return v0;
}

uint64_t sub_1000733B8()
{
  uint64_t v0;

  sub_100073314();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for UpcomingEventsViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UpcomingEventsViewModel);
}

void sub_1000733E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[5];
  uint64_t v15;
  uint64_t v16;

  v5 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v6 = type metadata accessor for Bindable(319, v5);
  if (v7 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v6 - 8) + 64;
    v14[1] = &unk_10010EF68;
    v14[2] = &unk_10010EF80;
    sub_10000BE1C(319, (unint64_t *)&qword_10015D698, (uint64_t (*)(uint64_t))&type metadata accessor for DismissAction);
    if (v9 <= 0x3F)
    {
      v14[3] = *(_QWORD *)(v8 - 8) + 64;
      sub_10000BE1C(319, (unint64_t *)&qword_10015E748, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
      if (v11 <= 0x3F)
      {
        v14[4] = *(_QWORD *)(v10 - 8) + 64;
        sub_10001C9A4(319);
        if (v13 <= 0x3F)
        {
          v15 = *(_QWORD *)(v12 - 8) + 64;
          v16 = v15;
          swift_initStructMetadata(a1, 0, 7, v14, a1 + 32);
        }
      }
    }
  }
}

uint64_t *sub_1000734E8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;

  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v25);
  }
  else
  {
    v8 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
    v9 = type metadata accessor for Bindable(0, v8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    v10 = *(int *)(a3 + 36);
    v11 = *(int *)(a3 + 40);
    v12 = (uint64_t *)((char *)a1 + v10);
    v13 = (uint64_t *)((char *)a2 + v10);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    v15 = (uint64_t *)((char *)a1 + v11);
    v16 = (uint64_t *)((char *)a2 + v11);
    v18 = *v16;
    v17 = v16[1];
    *v15 = v18;
    v15[1] = v17;
    v19 = *(int *)(a3 + 44);
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    swift_retain(v14);
    swift_retain(v18);
    v22 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v24 = 1;
    }
    else
    {
      v26 = *v21;
      *v20 = *v21;
      swift_retain(v26);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v24);
    v27 = *(int *)(a3 + 48);
    v28 = (uint64_t *)((char *)a1 + v27);
    v29 = (uint64_t *)((char *)a2 + v27);
    v30 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
    {
      v31 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
      v32 = v28;
      v33 = v30;
      v34 = 1;
    }
    else
    {
      v35 = *v29;
      *v28 = *v29;
      swift_retain(v35);
      v32 = v28;
      v33 = v30;
      v34 = 0;
    }
    swift_storeEnumTagMultiPayload(v32, v33, v34);
    v36 = *(int *)(a3 + 52);
    v37 = (uint64_t *)((char *)a1 + v36);
    v38 = (uint64_t *)((char *)a2 + v36);
    v39 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v38, v39) == 1)
    {
      v40 = type metadata accessor for UserInterfaceSizeClass(0);
      v41 = *(_QWORD *)(v40 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v41 + 48))(v38, 1, v40))
      {
        v42 = sub_100003E70(&qword_10015D4A0);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v41 + 16))(v37, v38, v40);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v37, 0, 1, v40);
      }
      v44 = v37;
      v45 = v39;
      v46 = 1;
    }
    else
    {
      v43 = *v38;
      *v37 = *v38;
      swift_retain(v43);
      v44 = v37;
      v45 = v39;
      v46 = 0;
    }
    swift_storeEnumTagMultiPayload(v44, v45, v46);
    v47 = *(int *)(a3 + 56);
    v48 = (uint64_t *)((char *)a1 + v47);
    v49 = (uint64_t *)((char *)a2 + v47);
    if (swift_getEnumCaseMultiPayload(v49, v39) == 1)
    {
      v50 = type metadata accessor for UserInterfaceSizeClass(0);
      v51 = *(_QWORD *)(v50 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      {
        v52 = sub_100003E70(&qword_10015D4A0);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v51 + 16))(v48, v49, v50);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
      }
      v54 = v48;
      v55 = v39;
      v56 = 1;
    }
    else
    {
      v53 = *v49;
      *v48 = *v49;
      swift_retain(v53);
      v54 = v48;
      v55 = v39;
      v56 = 0;
    }
    swift_storeEnumTagMultiPayload(v54, v55, v56);
  }
  return a1;
}

void sub_10007383C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v7 = type metadata accessor for Bindable(0, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 36) + 8));
  swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 40)));
  v8 = (_QWORD *)(a1 + *(int *)(a2 + 44));
  v9 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  v11 = (_QWORD *)(a1 + *(int *)(a2 + 48));
  v12 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = (_QWORD *)(a1 + *(int *)(a2 + 52));
  v15 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for UserInterfaceSizeClass(0);
    v17 = *(_QWORD *)(v16 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
      (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  v18 = (_QWORD *)(a1 + *(int *)(a2 + 56));
  if (swift_getEnumCaseMultiPayload(v18, v15) == 1)
  {
    v19 = type metadata accessor for UserInterfaceSizeClass(0);
    v20 = *(_QWORD *)(v19 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v18, v19);
  }
  else
  {
    swift_release(*v18);
  }
}

uint64_t sub_100073A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;

  v7 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
  v9 = *(int *)(a3 + 36);
  v10 = *(int *)(a3 + 40);
  v11 = (_QWORD *)(a1 + v9);
  v12 = (_QWORD *)(a2 + v9);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = (_QWORD *)(a1 + v10);
  v15 = (uint64_t *)(a2 + v10);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  v18 = *(int *)(a3 + 44);
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  swift_retain(v13);
  swift_retain(v17);
  v21 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
    v23 = 1;
  }
  else
  {
    v24 = *v20;
    *v19 = *v20;
    swift_retain(v24);
    v23 = 0;
  }
  swift_storeEnumTagMultiPayload(v19, v21, v23);
  v25 = *(int *)(a3 + 48);
  v26 = (uint64_t *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v28 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
  {
    v29 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
    v30 = v26;
    v31 = v28;
    v32 = 1;
  }
  else
  {
    v33 = *v27;
    *v26 = *v27;
    swift_retain(v33);
    v30 = v26;
    v31 = v28;
    v32 = 0;
  }
  swift_storeEnumTagMultiPayload(v30, v31, v32);
  v34 = *(int *)(a3 + 52);
  v35 = (uint64_t *)(a1 + v34);
  v36 = (uint64_t *)(a2 + v34);
  v37 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
  {
    v38 = type metadata accessor for UserInterfaceSizeClass(0);
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v39 + 48))(v36, 1, v38))
    {
      v40 = sub_100003E70(&qword_10015D4A0);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v39 + 16))(v35, v36, v38);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v35, 0, 1, v38);
    }
    v42 = v35;
    v43 = v37;
    v44 = 1;
  }
  else
  {
    v41 = *v36;
    *v35 = *v36;
    swift_retain(v41);
    v42 = v35;
    v43 = v37;
    v44 = 0;
  }
  swift_storeEnumTagMultiPayload(v42, v43, v44);
  v45 = *(int *)(a3 + 56);
  v46 = (uint64_t *)(a1 + v45);
  v47 = (uint64_t *)(a2 + v45);
  if (swift_getEnumCaseMultiPayload(v47, v37) == 1)
  {
    v48 = type metadata accessor for UserInterfaceSizeClass(0);
    v49 = *(_QWORD *)(v48 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    {
      v50 = sub_100003E70(&qword_10015D4A0);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v49 + 16))(v46, v47, v48);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    v52 = v46;
    v53 = v37;
    v54 = 1;
  }
  else
  {
    v51 = *v47;
    *v46 = *v47;
    swift_retain(v51);
    v52 = v46;
    v53 = v37;
    v54 = 0;
  }
  swift_storeEnumTagMultiPayload(v52, v53, v54);
  return a1;
}

uint64_t sub_100073D6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;

  v7 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(a1, a2, v8);
  v9 = *(int *)(a3 + 36);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  *v10 = *v11;
  v12 = v11[1];
  v13 = v10[1];
  v10[1] = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = *(int *)(a3 + 40);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_QWORD *)(a1 + v14);
  v18 = *(_QWORD *)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v18;
  swift_retain(v18);
  swift_release(v17);
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  if (a1 != a2)
  {
    v19 = *(int *)(a3 + 44);
    v20 = (uint64_t *)(a1 + v19);
    v21 = (uint64_t *)(a2 + v19);
    sub_100008194(a1 + v19, &qword_10015D488);
    v22 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v24 = 1;
    }
    else
    {
      v25 = *v21;
      *v20 = *v21;
      swift_retain(v25);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v24);
    v26 = *(int *)(a3 + 48);
    v27 = (uint64_t *)(a1 + v26);
    v28 = (uint64_t *)(a2 + v26);
    sub_100008194(a1 + v26, &qword_10015D490);
    v29 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
    {
      v30 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
      v31 = v27;
      v32 = v29;
      v33 = 1;
    }
    else
    {
      v34 = *v28;
      *v27 = *v28;
      swift_retain(v34);
      v31 = v27;
      v32 = v29;
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v32, v33);
    v35 = *(int *)(a3 + 52);
    v36 = (uint64_t *)(a1 + v35);
    v37 = (uint64_t *)(a2 + v35);
    sub_100008194(a1 + v35, &qword_10015D498);
    v38 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v37, v38) == 1)
    {
      v39 = type metadata accessor for UserInterfaceSizeClass(0);
      v40 = *(_QWORD *)(v39 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v40 + 48))(v37, 1, v39))
      {
        v41 = sub_100003E70(&qword_10015D4A0);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v40 + 16))(v36, v37, v39);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v36, 0, 1, v39);
      }
      v43 = v36;
      v44 = v38;
      v45 = 1;
    }
    else
    {
      v42 = *v37;
      *v36 = *v37;
      swift_retain(v42);
      v43 = v36;
      v44 = v38;
      v45 = 0;
    }
    swift_storeEnumTagMultiPayload(v43, v44, v45);
    v46 = *(int *)(a3 + 56);
    v47 = (uint64_t *)(a1 + v46);
    v48 = (uint64_t *)(a2 + v46);
    sub_100008194(a1 + v46, &qword_10015D498);
    v49 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v48, v49) == 1)
    {
      v50 = type metadata accessor for UserInterfaceSizeClass(0);
      v51 = *(_QWORD *)(v50 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v51 + 48))(v48, 1, v50))
      {
        v52 = sub_100003E70(&qword_10015D4A0);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v51 + 16))(v47, v48, v50);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v47, 0, 1, v50);
      }
      v54 = v47;
      v55 = v49;
      v56 = 1;
    }
    else
    {
      v53 = *v48;
      *v47 = *v48;
      swift_retain(v53);
      v54 = v47;
      v55 = v49;
      v56 = 0;
    }
    swift_storeEnumTagMultiPayload(v54, v55, v56);
  }
  return a1;
}

uint64_t sub_100074114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v7 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
  v9 = *(int *)(a3 + 40);
  *(_OWORD *)(a1 + *(int *)(a3 + 36)) = *(_OWORD *)(a2 + *(int *)(a3 + 36));
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  v10 = *(int *)(a3 + 44);
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for DismissAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
    swift_storeEnumTagMultiPayload(v11, v13, 1);
  }
  else
  {
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  v15 = *(int *)(a3 + 48);
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
    swift_storeEnumTagMultiPayload(v16, v18, 1);
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  v20 = *(int *)(a3 + 52);
  v21 = (void *)(a1 + v20);
  v22 = (const void *)(a2 + v20);
  v23 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for UserInterfaceSizeClass(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
    {
      v26 = sub_100003E70(&qword_10015D4A0);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v21, v22, v24);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
    }
    swift_storeEnumTagMultiPayload(v21, v23, 1);
  }
  else
  {
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  v27 = *(int *)(a3 + 56);
  v28 = (void *)(a1 + v27);
  v29 = (const void *)(a2 + v27);
  if (swift_getEnumCaseMultiPayload(v29, v23) == 1)
  {
    v30 = type metadata accessor for UserInterfaceSizeClass(0);
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      v32 = sub_100003E70(&qword_10015D4A0);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v31 + 32))(v28, v29, v30);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    swift_storeEnumTagMultiPayload(v28, v23, 1);
  }
  else
  {
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100074418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v7 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(a1, a2, v8);
  v9 = *(int *)(a3 + 36);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v13 = *v11;
  v12 = v11[1];
  v14 = v10[1];
  *v10 = v13;
  v10[1] = v12;
  swift_release(v14);
  v15 = *(int *)(a3 + 40);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_QWORD *)(a1 + v15);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  swift_release(v18);
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  if (a1 != a2)
  {
    v19 = *(int *)(a3 + 44);
    v20 = (void *)(a1 + v19);
    v21 = (const void *)(a2 + v19);
    sub_100008194(a1 + v19, &qword_10015D488);
    v22 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for DismissAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload(v20, v22, 1);
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    v24 = *(int *)(a3 + 48);
    v25 = (void *)(a1 + v24);
    v26 = (const void *)(a2 + v24);
    sub_100008194(a1 + v24, &qword_10015D490);
    v27 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v25, v26, v28);
      swift_storeEnumTagMultiPayload(v25, v27, 1);
    }
    else
    {
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    v29 = *(int *)(a3 + 52);
    v30 = (void *)(a1 + v29);
    v31 = (const void *)(a2 + v29);
    sub_100008194(a1 + v29, &qword_10015D498);
    v32 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
    {
      v33 = type metadata accessor for UserInterfaceSizeClass(0);
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48))(v31, 1, v33))
      {
        v35 = sub_100003E70(&qword_10015D4A0);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v34 + 32))(v30, v31, v33);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v30, 0, 1, v33);
      }
      swift_storeEnumTagMultiPayload(v30, v32, 1);
    }
    else
    {
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    v36 = *(int *)(a3 + 56);
    v37 = (void *)(a1 + v36);
    v38 = (const void *)(a2 + v36);
    sub_100008194(a1 + v36, &qword_10015D498);
    v39 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v38, v39) == 1)
    {
      v40 = type metadata accessor for UserInterfaceSizeClass(0);
      v41 = *(_QWORD *)(v40 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48))(v38, 1, v40))
      {
        v42 = sub_100003E70(&qword_10015D4A0);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v41 + 32))(v37, v38, v40);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v37, 0, 1, v40);
      }
      swift_storeEnumTagMultiPayload(v37, v39, 1);
    }
    else
    {
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000747A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000747AC);
}

uint64_t sub_1000747AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v12 = a1;
    return v11(v12, a2, v10);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v15 = sub_100003E70(&qword_10015D608);
    v16 = *(_QWORD *)(v15 - 8);
    if (*(_DWORD *)(v16 + 84) == (_DWORD)a2)
    {
      v10 = v15;
      v17 = *(int *)(a3 + 44);
    }
    else
    {
      v18 = sub_100003E70(&qword_10015E6D8);
      v16 = *(_QWORD *)(v18 - 8);
      if (*(_DWORD *)(v16 + 84) == (_DWORD)a2)
      {
        v10 = v18;
        v17 = *(int *)(a3 + 48);
      }
      else
      {
        v10 = sub_100003E70(&qword_10015DFA0);
        v16 = *(_QWORD *)(v10 - 8);
        v17 = *(int *)(a3 + 52);
      }
    }
    v12 = a1 + v17;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
    return v11(v12, a2, v10);
  }
  v13 = *(_QWORD *)(a1 + *(int *)(a3 + 36) + 8);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  return (v13 + 1);
}

uint64_t sub_1000748BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000748C8);
}

uint64_t sub_1000748C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a4);
  result = type metadata accessor for Bindable(0, v8);
  v10 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    v11 = result;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v13 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 36) + 8) = (a2 - 1);
      return result;
    }
    v14 = sub_100003E70(&qword_10015D608);
    v15 = *(_QWORD *)(v14 - 8);
    if (*(_DWORD *)(v15 + 84) == a3)
    {
      v11 = v14;
      v16 = *(int *)(a4 + 44);
    }
    else
    {
      v17 = sub_100003E70(&qword_10015E6D8);
      v15 = *(_QWORD *)(v17 - 8);
      if (*(_DWORD *)(v15 + 84) == a3)
      {
        v11 = v17;
        v16 = *(int *)(a4 + 48);
      }
      else
      {
        v11 = sub_100003E70(&qword_10015DFA0);
        v15 = *(_QWORD *)(v11 - 8);
        v16 = *(int *)(a4 + 52);
      }
    }
    v13 = a1 + v16;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
  }
  return v12(v13, a2, a2, v11);
}

uint64_t type metadata accessor for PromotionalAssetsView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PromotionalAssetsView);
}

uint64_t sub_1000749E0(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100119CA4, 1);
}

uint64_t sub_100074A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  Bindable.wrappedValue.getter(&v7, v5);
  return v7;
}

uint64_t sub_100074A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  return Bindable.projectedValue.getter(v5);
}

uint64_t sub_100074A88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t TupleTypeMetadata2;
  uint64_t v50;
  uint64_t TupleTypeMetadata;
  uint64_t v52;
  uint64_t WitnessTable;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t OpaqueTypeConformance2;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  __n128 v146;
  char *v147;
  uint64_t v148;
  double v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  __n128 v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t KeyPath;
  uint64_t v166;
  __n128 v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  __n128 v179;
  char *v180;
  void (*v181)(char *, uint64_t, uint64_t);
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void (*v186)(uint64_t, char *, uint64_t);
  char *v187;
  uint64_t v188;
  char *v189;
  __n128 v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  __n128 v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  void (*v204)(uint64_t, char *, uint64_t);
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  __n128 v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  __n128 v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  __n128 v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void (*v238)(uint64_t, uint64_t);
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  char *v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  char *v268;
  char *v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  char *v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  void (*v317)(char *, uint64_t, uint64_t);
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD v322[32];
  _QWORD v323[4];
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;

  v304 = a2;
  v309 = sub_100003E70(&qword_10015D4A0);
  __chkstk_darwin(v309);
  v303 = (uint64_t)&v240 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TaskPriority(0);
  v301 = *(_QWORD *)(v4 - 8);
  v302 = v4;
  __chkstk_darwin(v4);
  v300 = (char *)&v240 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = a1;
  v310 = a1;
  v9 = v6;
  v10 = v7;
  v12 = type metadata accessor for PromotionalAssetsViewModel(255, v6, v7, v11);
  v13 = type metadata accessor for Bindable(0, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v298 = v13;
  v299 = v14;
  v15 = __chkstk_darwin(v13);
  v297 = (char *)&v240 - v16;
  v311 = *(_QWORD *)(v8 - 8);
  v316 = *(_QWORD *)(v311 + 64);
  __chkstk_darwin(v15);
  v314 = (char *)&v240 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v317 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for CoordinateSpace(0);
  v313 = *((_QWORD *)v317 - 1);
  __chkstk_darwin(v317);
  v312 = (uint64_t)&v240 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v308 = (char *)type metadata accessor for NavigationPath(255);
  v319 = v10;
  v318 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v10);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, v9, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
  v21 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v22 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v21, &unk_10011A038, &unk_10011A048);
  v23 = swift_getAssociatedTypeWitness(255, v22);
  v24 = swift_getAssociatedConformanceWitness(v22, v21, v23, &unk_10011B5EC, &unk_10011B604);
  type metadata accessor for TourPhotosView(255, v23, v24, v25);
  v26 = type metadata accessor for _ConditionalContent(255);
  v27 = type metadata accessor for Group(255, v26);
  v28 = sub_1000034AC(&qword_100160978);
  v29 = type metadata accessor for ModifiedContent(255, v27, v28);
  v30 = sub_1000034AC(&qword_100160980);
  v324 = type metadata accessor for ModifiedContent(255, v29, v30);
  v31 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v32 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v31, &unk_10011A038, &unk_10011A050);
  v34 = type metadata accessor for FeaturedVideosView(255, v31, v32, v33);
  v35 = sub_1000034AC(&qword_100160988);
  v36 = type metadata accessor for ModifiedContent(255, v34, v35);
  v37 = sub_1000034AC(&qword_100160990);
  v38 = type metadata accessor for ModifiedContent(255, v36, v37);
  v325 = type metadata accessor for Optional(255, v38);
  v326 = sub_1000034AC(&qword_100160998);
  v39 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v40 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v41 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v39, &unk_10011A038, &unk_10011A040);
  v42 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v40, &unk_10011A038, &unk_10011A058);
  v323[0] = v39;
  v323[1] = v40;
  v323[2] = v41;
  v323[3] = v42;
  type metadata accessor for PhoneWallpapersWatchFacesView(255, (uint64_t)v323);
  v44 = type metadata accessor for PhoneWallpaperView(255, v39, v41, v43);
  v45 = type metadata accessor for Optional(255, v44);
  v47 = type metadata accessor for WatchFacesView(255, v40, v42, v46);
  v48 = type metadata accessor for Optional(255, v47);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v45, v48, 0, 0);
  type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v50 = type metadata accessor for _ConditionalContent(255);
  v327 = type metadata accessor for Optional(255, v50);
  v328 = type metadata accessor for AppModule(255);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 5);
  v52 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v52);
  v54 = type metadata accessor for VStack(255, v52, WitnessTable);
  v55 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v54);
  v57 = type metadata accessor for ObservableScrollView(255, v54, v55, v56);
  v58 = type metadata accessor for ModifiedContent(255, v57, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v322[30] = swift_getWitnessTable(&unk_1001103F0, v57);
  v322[31] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  v59 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v58);
  v324 = v58;
  v325 = v59;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v324, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 0);
  v61 = sub_1000034AC(&qword_1001609A0);
  v62 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v61);
  v63 = sub_1000034AC(&qword_1001609A8);
  v64 = type metadata accessor for ModifiedContent(255, v62, v63);
  v324 = v58;
  v325 = v59;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v324, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
  v66 = sub_100007D40(&qword_1001609B0, &qword_1001609A0, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  v322[28] = OpaqueTypeConformance2;
  v322[29] = v66;
  v67 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v62);
  v68 = sub_100007D40(&qword_1001609B8, &qword_1001609A8, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
  v322[26] = v67;
  v322[27] = v68;
  v257 = v64;
  v258 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v64);
  v69 = type metadata accessor for NavigationStack(0, v308, v64, v258);
  v262 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v254 = (char *)&v240 - v70;
  v71 = sub_1000034AC(&qword_1001609C0);
  v242 = v69;
  v72 = type metadata accessor for ModifiedContent(0, v69, v71);
  v273 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v305 = (unint64_t)&v240 - v73;
  v74 = sub_1000034AC(&qword_1001609C8);
  v249 = v72;
  v75 = type metadata accessor for ModifiedContent(0, v72, v74);
  v272 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v260 = (char *)&v240 - v76;
  v77 = sub_1000034AC(&qword_1001609D0);
  v250 = v75;
  v78 = type metadata accessor for ModifiedContent(0, v75, v77);
  v284 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v261 = (char *)&v240 - v79;
  v80 = sub_1000034AC(&qword_1001609D8);
  v255 = v78;
  v81 = type metadata accessor for ModifiedContent(0, v78, v80);
  v294 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v308 = (char *)&v240 - v82;
  v83 = sub_1000034AC(&qword_1001609E0);
  v84 = swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v69);
  v241 = v84;
  v85 = sub_100007D40(&qword_1001609E8, &qword_1001609C0, (uint64_t)&unk_10010F810);
  v322[24] = v84;
  v322[25] = v85;
  v86 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v72);
  v246 = v86;
  v87 = sub_100007D40(&qword_1001609F0, &qword_1001609C8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v322[22] = v86;
  v322[23] = v87;
  v88 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v75);
  v248 = v88;
  v89 = sub_100007D40(&qword_1001609F8, &qword_1001609D0, (uint64_t)&unk_1001134C0);
  v322[20] = v88;
  v322[21] = v89;
  v90 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v78);
  v251 = v90;
  v91 = sub_100007D40(&qword_100160A00, &qword_1001609D8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v322[18] = v90;
  v322[19] = v91;
  v92 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v81);
  v93 = sub_1000034AC(&qword_100160A08);
  v94 = sub_10005C954(&qword_100160A10, &qword_100160A08, (void (*)(void))sub_100045694);
  v324 = v93;
  v325 = v94;
  v307 = swift_getOpaqueTypeConformance2(&v324, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 1);
  v324 = v81;
  v325 = v83;
  v244 = v83;
  v245 = v81;
  v326 = v92;
  v327 = v307;
  v243 = v92;
  v95 = swift_getOpaqueTypeMetadata2(0, &v324, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v275 = *(_QWORD *)(v95 - 8);
  v266 = v95;
  __chkstk_darwin(v95);
  v306 = (char *)&v240 - v96;
  v98 = type metadata accessor for ModifiedContent(0, v97, &type metadata for _AppearanceActionModifier);
  v283 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v263 = (char *)&v240 - v99;
  v253 = v98;
  v100 = type metadata accessor for ModifiedContent(0, v98, &type metadata for _AppearanceActionModifier);
  v291 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v268 = (char *)&v240 - v101;
  v102 = type metadata accessor for _TaskModifier(255);
  v259 = v100;
  v103 = type metadata accessor for ModifiedContent(0, v100, v102);
  v293 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v279 = (char *)&v240 - v104;
  v265 = v103;
  v105 = type metadata accessor for ModifiedContent(0, v103, &type metadata for _AppearanceActionModifier);
  v295 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v286 = (char *)&v240 - v106;
  v278 = v105;
  v107 = type metadata accessor for ModifiedContent(0, v105, &type metadata for _AppearanceActionModifier);
  v296 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v292 = (char *)&v240 - v108;
  v324 = v81;
  v325 = v83;
  v326 = v92;
  v327 = v307;
  v247 = swift_getOpaqueTypeConformance2(&v324, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v322[16] = v247;
  v322[17] = &protocol witness table for _AppearanceActionModifier;
  v252 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v98);
  v322[14] = v252;
  v322[15] = &protocol witness table for _AppearanceActionModifier;
  v109 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v100);
  v256 = v109;
  v110 = sub_100003B3C(&qword_10015D458, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
  v322[12] = v109;
  v322[13] = v110;
  v264 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v103);
  v322[10] = v264;
  v322[11] = &protocol witness table for _AppearanceActionModifier;
  v277 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v105);
  v322[8] = v277;
  v322[9] = &protocol witness table for _AppearanceActionModifier;
  v111 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v107);
  v112 = sub_10007B5F4();
  v271 = v107;
  v113 = v309;
  v324 = v107;
  v325 = v309;
  v326 = v111;
  v327 = v112;
  v114 = v111;
  v274 = v111;
  v115 = v112;
  v116 = swift_getOpaqueTypeMetadata2(0, &v324, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v289 = *(_QWORD *)(v116 - 8);
  v117 = v116;
  v281 = v116;
  __chkstk_darwin(v116);
  v270 = (char *)&v240 - v118;
  v324 = v107;
  v325 = v113;
  v326 = v114;
  v327 = v115;
  v267 = v115;
  v280 = swift_getOpaqueTypeConformance2(&v324, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v324 = v117;
  v325 = v113;
  v326 = v280;
  v327 = v115;
  v119 = swift_getOpaqueTypeMetadata2(0, &v324, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v288 = *(_QWORD *)(v119 - 8);
  v282 = v119;
  __chkstk_darwin(v119);
  v269 = (char *)&v240 - v120;
  v121 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v287 = type metadata accessor for ModifiedContent(0, v119, v121);
  v290 = *(_QWORD *)(v287 - 8);
  v122 = __chkstk_darwin(v287);
  v276 = (char *)&v240 - ((v123 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v122);
  v285 = (uint64_t)&v240 - v124;
  v125 = v318;
  v322[2] = v318;
  v126 = v319;
  v322[3] = v319;
  v127 = v315;
  v322[4] = v315;
  v128 = v254;
  NavigationStack.init<>(root:)(sub_10007B670, v322, v257, v258);
  v129 = sub_10007B67C();
  v130 = v312;
  v132 = v241;
  v131 = v242;
  sub_1000E69A0(v312);
  sub_10008B0F0((uint64_t)&type metadata for PromotionalAssetsViewSizePreferenceKey, v130, (uint64_t)sub_10007D238, 0, v131, (uint64_t)&type metadata for PromotionalAssetsViewSizePreferenceKey, v132, v129, v305);
  (*(void (**)(uint64_t, void (*)(char *, uint64_t, uint64_t)))(v313 + 8))(v130, v317);
  (*(void (**)(char *, uint64_t))(v262 + 8))(v128, v131);
  v133 = v311;
  v317 = *(void (**)(char *, uint64_t, uint64_t))(v311 + 16);
  v134 = v314;
  v135 = v127;
  v136 = v310;
  v317(v314, v127, v310);
  v137 = *(unsigned __int8 *)(v133 + 80);
  v138 = v133;
  v316 += (v137 + 32) & ~v137;
  v139 = (v137 + 32) & ~v137;
  v313 = v139;
  v312 = v137 | 7;
  v140 = swift_allocObject(&unk_100150128, v316, v137 | 7);
  *(_QWORD *)(v140 + 16) = v125;
  *(_QWORD *)(v140 + 24) = v126;
  v311 = *(_QWORD *)(v138 + 32);
  v141 = v136;
  ((void (*)(uint64_t, char *, uint64_t))v311)(v140 + v139, v134, v136);
  v142 = sub_100003B3C(&qword_10015FD18, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  v143 = v260;
  v144 = v249;
  v145 = v305;
  View.onPreferenceChange<A>(_:perform:)(&type metadata for PromotionalAssetsViewSizePreferenceKey, sub_10007B6C4, v140, v249, &type metadata for PromotionalAssetsViewSizePreferenceKey, v246, v129, v142);
  v146 = swift_release(v140);
  (*(void (**)(unint64_t, uint64_t, __n128))(v273 + 8))(v145, v144, v146);
  v305 = sub_10007B71C();
  v147 = v261;
  v148 = v250;
  v149 = sub_10008B254((uint64_t)&type metadata for PromotionalAssetsViewSafeAreaPreferenceKey, (uint64_t)sub_10006C87C, 0, v250, (uint64_t)&type metadata for PromotionalAssetsViewSafeAreaPreferenceKey, v248, v305);
  (*(void (**)(char *, uint64_t, double))(v272 + 8))(v143, v148, v149);
  v150 = v134;
  v151 = v134;
  v152 = v135;
  v153 = v141;
  v317(v151, v135, v141);
  v154 = swift_allocObject(&unk_100150150, v316, v312);
  v155 = v318;
  v156 = v319;
  *(_QWORD *)(v154 + 16) = v318;
  *(_QWORD *)(v154 + 24) = v156;
  ((void (*)(uint64_t, char *, uint64_t))v311)(v154 + v313, v150, v141);
  v157 = sub_10006FF78();
  v158 = v255;
  View.onPreferenceChange<A>(_:perform:)(&type metadata for PromotionalAssetsViewSafeAreaPreferenceKey, sub_10007B764, v154, v255, &type metadata for PromotionalAssetsViewSafeAreaPreferenceKey, v251, v305, v157);
  v159 = swift_release(v154);
  (*(void (**)(char *, uint64_t, __n128))(v284 + 8))(v147, v158, v159);
  v160 = v297;
  sub_100074A50(v141, v161, v162, v163);
  v320 = v155;
  v164 = v155;
  v321 = v156;
  KeyPath = swift_getKeyPath(&unk_10010EFF8);
  v166 = v298;
  Bindable<A>.subscript.getter(&v324, KeyPath, v298);
  v167 = swift_release(KeyPath);
  (*(void (**)(char *, uint64_t, __n128))(v299 + 8))(v160, v166, v167);
  v168 = v324;
  v169 = v325;
  LODWORD(v305) = v326;
  v170 = v314;
  v171 = v152;
  v172 = v153;
  v317(v314, v171, v153);
  v173 = v316;
  v174 = v312;
  v175 = swift_allocObject(&unk_100150178, v316, v312);
  *(_QWORD *)(v175 + 16) = v164;
  *(_QWORD *)(v175 + 24) = v156;
  v176 = v313;
  ((void (*)(uint64_t, char *, uint64_t))v311)(v175 + v313, v170, v172);
  v177 = v245;
  v178 = v308;
  View.sheet<A>(isPresented:onDismiss:content:)(v168, v169, v305, 0, 0, sub_10007B828, v175, v245, v244, v243, v307);
  swift_release(v169);
  swift_release(v175);
  v179 = swift_release(v168);
  (*(void (**)(char *, uint64_t, __n128))(v294 + 8))(v178, v177, v179);
  v180 = v314;
  v181 = v317;
  v317(v314, v315, v172);
  v182 = swift_allocObject(&unk_1001501A0, v173, v174);
  v183 = v319;
  *(_QWORD *)(v182 + 16) = v318;
  *(_QWORD *)(v182 + 24) = v183;
  v184 = v172;
  v185 = v172;
  v186 = (void (*)(uint64_t, char *, uint64_t))v311;
  ((void (*)(uint64_t, char *, uint64_t))v311)(v182 + v176, v180, v184);
  v187 = v263;
  v188 = v266;
  v189 = v306;
  View.onAppear(perform:)(sub_10007B884, v182, v266, v247);
  v190 = swift_release(v182);
  (*(void (**)(char *, uint64_t, __n128))(v275 + 8))(v189, v188, v190);
  v191 = v180;
  v192 = v315;
  v193 = v185;
  v181(v180, v315, v185);
  v194 = swift_allocObject(&unk_1001501C8, v316, v312);
  v195 = v318;
  v196 = v319;
  *(_QWORD *)(v194 + 16) = v318;
  *(_QWORD *)(v194 + 24) = v196;
  v197 = v313;
  v186(v194 + v313, v191, v193);
  v198 = v268;
  v199 = v253;
  View.onDisappear(perform:)(sub_10007B894, v194, v253, v252);
  v200 = swift_release(v194);
  (*(void (**)(char *, uint64_t, __n128))(v283 + 8))(v187, v199, v200);
  v201 = v314;
  v202 = v310;
  v317(v314, v192, v310);
  v203 = swift_allocObject(&unk_1001501F0, v316, v312);
  *(_QWORD *)(v203 + 16) = v195;
  *(_QWORD *)(v203 + 24) = v196;
  v204 = (void (*)(uint64_t, char *, uint64_t))v311;
  ((void (*)(uint64_t, char *, uint64_t))v311)(v203 + v197, v201, v202);
  v205 = v300;
  v206 = v259;
  v207 = v256;
  j___sScP13userInitiatedScPvgZ(v259);
  v208 = v279;
  View.task(priority:_:)(v205, &unk_100160A38, v203, v206, v207);
  v209 = swift_release(v203);
  (*(void (**)(char *, uint64_t, __n128))(v301 + 8))(v205, v302, v209);
  (*(void (**)(char *, uint64_t))(v291 + 8))(v198, v206);
  v210 = v314;
  v211 = v192;
  v212 = v310;
  v317(v314, v211, v310);
  v213 = v312;
  v214 = swift_allocObject(&unk_100150218, v316, v312);
  v215 = v319;
  *(_QWORD *)(v214 + 16) = v318;
  *(_QWORD *)(v214 + 24) = v215;
  v204(v214 + v313, v210, v212);
  v216 = v286;
  v217 = v265;
  View.onAppear(perform:)(sub_10007B928, v214, v265, v264);
  v218 = swift_release(v214);
  (*(void (**)(char *, uint64_t, __n128))(v293 + 8))(v208, v217, v218);
  v317(v210, v315, v212);
  v219 = swift_allocObject(&unk_100150240, v316, v213);
  v220 = v319;
  *(_QWORD *)(v219 + 16) = v318;
  *(_QWORD *)(v219 + 24) = v220;
  v204(v219 + v313, v210, v212);
  v221 = v292;
  v222 = v278;
  View.onDisappear(perform:)(sub_10007B938, v219, v278, v277);
  v223 = swift_release(v219);
  (*(void (**)(char *, uint64_t, __n128))(v295 + 8))(v216, v222, v223);
  v224 = v303;
  sub_10001DADC(v303);
  v225 = v270;
  v226 = v271;
  v227 = v309;
  v228 = v267;
  View.onChange<A>(of:initial:_:)(v224, 0, sub_10007B590, 0, v271, v309, v274, v267);
  sub_100008194(v224, &qword_10015D4A0);
  (*(void (**)(char *, uint64_t))(v296 + 8))(v221, v226);
  sub_10001DADC(v224);
  v229 = v269;
  v231 = v280;
  v230 = v281;
  View.onChange<A>(of:initial:_:)(v224, 0, sub_10007B590, 0, v281, v227, v280, v228);
  sub_100008194(v224, &qword_10015D4A0);
  (*(void (**)(char *, uint64_t))(v289 + 8))(v225, v230);
  v324 = v230;
  v325 = v227;
  v326 = v231;
  v327 = v228;
  v232 = swift_getOpaqueTypeConformance2(&v324, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v233 = (uint64_t)v276;
  v234 = v282;
  View.accessibilityIdentifier(_:)(0xD000000000000017, 0x80000001001166B0, v282, v232);
  (*(void (**)(char *, uint64_t))(v288 + 8))(v229, v234);
  v235 = sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v322[6] = v232;
  v322[7] = v235;
  v236 = v287;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v287);
  v237 = v285;
  sub_1000F257C(v233, v236, v285);
  v238 = *(void (**)(uint64_t, uint64_t))(v290 + 8);
  v238(v233, v236);
  sub_1000E3B88(v237, v236, v304);
  return ((uint64_t (*)(uint64_t, uint64_t))v238)(v237, v236);
}

uint64_t sub_1000760E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t TupleTypeMetadata2;
  uint64_t v41;
  uint64_t TupleTypeMetadata;
  uint64_t v43;
  uint64_t WitnessTable;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  char *v96;
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t OpaqueTypeConformance2;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  char v141[16];
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  _QWORD v151[4];
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;

  v128 = a3;
  v135 = a2;
  v137 = a1;
  v133 = a4;
  v132 = sub_100003E70(&qword_10015D4A0);
  __chkstk_darwin(v132);
  v131 = (uint64_t)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = type metadata accessor for PromotionalAssetsView(0, a2, a3, v7);
  v8 = *(_QWORD *)(v136 - 8);
  v130 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v136);
  v129 = (char *)&v114 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
  v12 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v13 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v12, &unk_10011A038, &unk_10011A048);
  v14 = swift_getAssociatedTypeWitness(255, v13);
  v15 = swift_getAssociatedConformanceWitness(v13, v12, v14, &unk_10011B5EC, &unk_10011B604);
  type metadata accessor for TourPhotosView(255, v14, v15, v16);
  v17 = type metadata accessor for _ConditionalContent(255);
  v18 = type metadata accessor for Group(255, v17);
  v19 = sub_1000034AC(&qword_100160978);
  v20 = type metadata accessor for ModifiedContent(255, v18, v19);
  v21 = sub_1000034AC(&qword_100160980);
  v152 = type metadata accessor for ModifiedContent(255, v20, v21);
  v22 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v23 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v22, &unk_10011A038, &unk_10011A050);
  v25 = type metadata accessor for FeaturedVideosView(255, v22, v23, v24);
  v26 = sub_1000034AC(&qword_100160988);
  v27 = type metadata accessor for ModifiedContent(255, v25, v26);
  v28 = sub_1000034AC(&qword_100160990);
  v29 = type metadata accessor for ModifiedContent(255, v27, v28);
  v153 = type metadata accessor for Optional(255, v29);
  v154 = sub_1000034AC(&qword_100160998);
  v30 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v31 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v32 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v30, &unk_10011A038, &unk_10011A040);
  v33 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v31, &unk_10011A038, &unk_10011A058);
  v151[0] = v30;
  v151[1] = v31;
  v151[2] = v32;
  v151[3] = v33;
  type metadata accessor for PhoneWallpapersWatchFacesView(255, (uint64_t)v151);
  v35 = type metadata accessor for PhoneWallpaperView(255, v30, v32, v34);
  v36 = type metadata accessor for Optional(255, v35);
  v38 = type metadata accessor for WatchFacesView(255, v31, v33, v37);
  v39 = type metadata accessor for Optional(255, v38);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v36, v39, 0, 0);
  type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v41 = type metadata accessor for _ConditionalContent(255);
  v155 = type metadata accessor for Optional(255, v41);
  v156 = type metadata accessor for AppModule(255);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 5);
  v43 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v43);
  v45 = type metadata accessor for VStack(255, v43, WitnessTable);
  v116 = v45;
  v115 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v45);
  v47 = type metadata accessor for ObservableScrollView(0, v45, v115, v46);
  v117 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v49 = (char *)&v114 - v48;
  v50 = type metadata accessor for ModifiedContent(0, v47, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v123 = *(_QWORD *)(v50 - 8);
  v120 = v50;
  __chkstk_darwin(v50);
  v134 = (char *)&v114 - v51;
  v114 = swift_getWitnessTable(&unk_1001103F0, v47);
  v149 = v114;
  v150 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  v119 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v50);
  v152 = v50;
  v153 = v119;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v152, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 0);
  v53 = sub_1000034AC(&qword_1001609A0);
  v54 = type metadata accessor for ModifiedContent(0, OpaqueTypeMetadata2, v53);
  v126 = *(_QWORD *)(v54 - 8);
  v122 = v54;
  __chkstk_darwin(v54);
  v118 = (uint64_t)&v114 - v55;
  v56 = sub_1000034AC(&qword_1001609A8);
  v125 = type metadata accessor for ModifiedContent(0, v54, v56);
  v127 = *(_QWORD *)(v125 - 8);
  v57 = __chkstk_darwin(v125);
  v121 = (char *)&v114 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v57);
  v124 = (uint64_t)&v114 - v59;
  v61 = v135;
  v60 = v136;
  v63 = v128;
  v62 = v129;
  v142 = v135;
  v143 = v128;
  v144 = v137;
  v64 = v8;
  (*(void (**)(char *))(v8 + 16))(v129);
  v65 = *(unsigned __int8 *)(v8 + 80);
  v66 = (v65 + 32) & ~v65;
  v67 = swift_allocObject(&unk_100150290, v66 + v130, v65 | 7);
  *(_QWORD *)(v67 + 16) = v61;
  *(_QWORD *)(v67 + 24) = v63;
  v68 = v63;
  v69 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v64 + 32))(v67 + v66, v62, v60);
  v70 = static Axis.Set.vertical.getter(v69);
  sub_100099298(v70, 0, (void (*)(__n128))sub_10007B9C8, (uint64_t)v141, (uint64_t)sub_10007B9D8, v67, v116, v115, (uint64_t)v49);
  v72 = static Edge.Set.bottom.getter(v71);
  v74 = static SafeAreaRegions.all.getter(v73);
  View.ignoresSafeArea(_:edges:)(v74, v72, v47, v114);
  (*(void (**)(char *, uint64_t))(v117 + 8))(v49, v47);
  v75 = *(int *)(v60 + 36);
  v76 = v137;
  v77 = (uint64_t *)(v137 + v75);
  v79 = *v77;
  v78 = v77[1];
  type metadata accessor for MainActor(0);
  swift_retain(v78);
  v81 = static MainActor.shared.getter(v80);
  v82 = (_QWORD *)swift_allocObject(&unk_1001502B8, 48, 7);
  v82[2] = v81;
  v82[3] = &protocol witness table for MainActor;
  v82[4] = v79;
  v82[5] = v78;
  swift_retain(v78);
  v84 = static MainActor.shared.getter(v83);
  v85 = (_QWORD *)swift_allocObject(&unk_1001502E0, 48, 7);
  v85[2] = v84;
  v85[3] = &protocol witness table for MainActor;
  v85[4] = v79;
  v85[5] = v78;
  Binding.init(get:set:)(&v152, sub_10007BA3C, v82, sub_10007BA78, v85, &type metadata for Bool);
  v86 = v152;
  v87 = v153;
  LODWORD(v84) = v154;
  v140[2] = v135;
  v140[3] = v68;
  v140[4] = v76;
  v139[2] = v135;
  v139[3] = v68;
  v139[4] = v76;
  v138[2] = v135;
  v138[3] = v68;
  v138[4] = v76;
  v88 = sub_100003E70(&qword_100160A58);
  v89 = sub_100003E70(&qword_100160A60);
  v90 = sub_10005C954(&qword_100160A68, &qword_100160A58, (void (*)(void))sub_10007BAA8);
  v91 = sub_10007BB70();
  v92 = v119;
  v113 = v88;
  v112 = v88;
  v93 = v120;
  v94 = v118;
  v95 = v84;
  v96 = v134;
  sub_10008B2F8(v86, v87, v95, (uint64_t)sub_10007BA84, (uint64_t)v140, (uint64_t (*)(uint64_t))sub_10007BA90, (uint64_t)v139, (uint64_t)sub_10007BA9C, v118, (uint64_t)v138, v120, v112, v89, v113, v119, v90, v91, v90);
  swift_release(v87);
  v97 = swift_release(v86);
  v98 = (*(uint64_t (**)(char *, uint64_t, __n128))(v123 + 8))(v96, v93, v97);
  v99 = static Animation.easeInOut.getter(v98);
  v100 = v131;
  sub_10001DADC(v131);
  v152 = v93;
  v153 = v92;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v152, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
  v102 = sub_100007D40(&qword_1001609B0, &qword_1001609A0, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  v147 = OpaqueTypeConformance2;
  v148 = v102;
  v103 = v122;
  v104 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v122);
  v105 = sub_10007B5F4();
  v106 = (uint64_t)v121;
  View.animation<A>(_:value:)(v99, v100, v103, v132, v104, v105);
  swift_release(v99);
  sub_100008194(v100, &qword_10015D4A0);
  (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v94, v103);
  v107 = sub_100007D40(&qword_1001609B8, &qword_1001609A8, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
  v145 = v104;
  v146 = v107;
  v108 = v125;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v125);
  v109 = v124;
  sub_1000F257C(v106, v108, v124);
  v110 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
  v110(v106, v108);
  sub_1000E3B88(v109, v108, v133);
  return ((uint64_t (*)(uint64_t, uint64_t))v110)(v109, v108);
}

uint64_t sub_100076AAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t TupleTypeMetadata2;
  uint64_t v38;
  uint64_t TupleTypeMetadata;
  uint64_t v40;
  uint64_t WitnessTable;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[16];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[9];

  v54 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
  v9 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v10 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v9, &unk_10011A038, &unk_10011A048);
  v11 = swift_getAssociatedTypeWitness(255, v10);
  v12 = swift_getAssociatedConformanceWitness(v10, v9, v11, &unk_10011B5EC, &unk_10011B604);
  type metadata accessor for TourPhotosView(255, v11, v12, v13);
  v14 = type metadata accessor for _ConditionalContent(255);
  v15 = type metadata accessor for Group(255, v14);
  v16 = sub_1000034AC(&qword_100160978);
  v17 = type metadata accessor for ModifiedContent(255, v15, v16);
  v18 = sub_1000034AC(&qword_100160980);
  v59[4] = type metadata accessor for ModifiedContent(255, v17, v18);
  v19 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v20 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v19, &unk_10011A038, &unk_10011A050);
  v22 = type metadata accessor for FeaturedVideosView(255, v19, v20, v21);
  v23 = sub_1000034AC(&qword_100160988);
  v24 = type metadata accessor for ModifiedContent(255, v22, v23);
  v25 = sub_1000034AC(&qword_100160990);
  v26 = type metadata accessor for ModifiedContent(255, v24, v25);
  v59[5] = type metadata accessor for Optional(255, v26);
  v59[6] = sub_1000034AC(&qword_100160998);
  v27 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v28 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v29 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v27, &unk_10011A038, &unk_10011A040);
  v30 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v28, &unk_10011A038, &unk_10011A058);
  v59[0] = v27;
  v59[1] = v28;
  v59[2] = v29;
  v59[3] = v30;
  type metadata accessor for PhoneWallpapersWatchFacesView(255, (uint64_t)v59);
  v32 = type metadata accessor for PhoneWallpaperView(255, v27, v29, v31);
  v33 = type metadata accessor for Optional(255, v32);
  v35 = type metadata accessor for WatchFacesView(255, v28, v30, v34);
  v36 = type metadata accessor for Optional(255, v35);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v33, v36, 0, 0);
  type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v38 = type metadata accessor for _ConditionalContent(255);
  v59[7] = type metadata accessor for Optional(255, v38);
  v59[8] = type metadata accessor for AppModule(255);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 5);
  v40 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v40);
  v42 = type metadata accessor for VStack(0, v40, WitnessTable);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = __chkstk_darwin(v42);
  v46 = (char *)&v53 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __chkstk_darwin(v44);
  v49 = (char *)&v53 - v48;
  v50 = static HorizontalAlignment.leading.getter(v47);
  v56 = a2;
  v57 = a3;
  v58 = a1;
  VStack.init(alignment:spacing:content:)(v50, 0x4042000000000000, 0, sub_10007BCF0, v55, v40, WitnessTable);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v42);
  sub_1000F257C((uint64_t)v46, v42, (uint64_t)v49);
  v51 = *(void (**)(char *, uint64_t))(v43 + 8);
  v51(v46, v42);
  sub_1000E3B88((uint64_t)v49, v42, v54);
  return ((uint64_t (*)(char *, uint64_t))v51)(v49, v42);
}

uint64_t sub_100076F34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t WitnessTable;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void (*v134)(uint64_t, _QWORD *);
  void (*v135)(uint64_t, char *, uint64_t);
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(uint64_t, char *, uint64_t);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  __n128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (**v154)(char *, uint64_t, __n128);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __n128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  BOOL v179;
  _QWORD *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t KeyPath;
  _QWORD *v188;
  uint64_t v189;
  __n128 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  __n128 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void (*v210)(uint64_t, uint64_t);
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void (*v216)(uint64_t, uint64_t);
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  BOOL v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t OpaqueTypeConformance2;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  uint64_t v277;
  char v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  __n128 v284;
  void (*v285)(char *, uint64_t, uint64_t);
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t (*v291)(uint64_t, char *, uint64_t);
  uint64_t v292;
  uint64_t v293;
  char *v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  id v309;
  id v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  int *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  double v352;
  double v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  double v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  BOOL v363;
  _QWORD *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  double v382;
  double v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  double v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  BOOL v393;
  uint64_t v394;
  _QWORD *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  void (*v400)(uint64_t, uint64_t);
  uint64_t v401;
  uint64_t v402;
  char v403;
  uint64_t v404;
  __n128 v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  double v424;
  double v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  double v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  BOOL v435;
  uint64_t v436;
  _QWORD *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  void (*v443)(uint64_t, uint64_t);
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  char v449;
  uint64_t v450;
  __n128 v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  double v470;
  double v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  double v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  BOOL v481;
  _QWORD *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  void (*v488)(uint64_t, uint64_t);
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  void (*v492)(uint64_t, uint64_t);
  uint64_t v493;
  void (*v494)(uint64_t, uint64_t);
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  void (*v499)(uint64_t, uint64_t);
  void (*v500)(uint64_t, uint64_t);
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  char *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  void (*v515)(_QWORD, _QWORD);
  _QWORD *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  int *v530;
  void (*v531)(uint64_t, uint64_t);
  void (**v532)(char *, uint64_t, __n128);
  uint64_t result;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  char *v537;
  uint64_t v538;
  uint64_t v539;
  char *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  char *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  _QWORD *v558;
  char *v559;
  uint64_t v560;
  char *v561;
  uint64_t v562;
  char *v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  char *v569;
  char *v570;
  uint64_t v571;
  uint64_t v572;
  char *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  char *v580;
  uint64_t v581;
  void (*v582)(uint64_t, _QWORD *);
  uint64_t v583;
  char *v584;
  char *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  _QWORD *v590;
  char *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  char *v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  char *v604;
  void (**v605)(char *, uint64_t, __n128);
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  int *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t (**v612)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v613)(uint64_t, uint64_t);
  void (*v614)(uint64_t, char *, uint64_t);
  uint64_t v615;
  void (*v616)(char *, uint64_t, uint64_t);
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  char *v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  char *v638;
  uint64_t v639;
  char *v640;
  uint64_t v641;
  uint64_t v642;
  _QWORD v643[21];
  uint64_t v644;
  uint64_t v645;
  unint64_t v646;
  uint64_t v647;
  uint64_t v648;
  __int128 v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  unint64_t v670;

  v641 = a3;
  v640 = (char *)a2;
  v642 = a1;
  v611 = a4;
  v609 = (int *)type metadata accessor for AppModule(0);
  v6 = __chkstk_darwin(v609);
  v612 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v537 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v610 = (uint64_t)&v537 - v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
  v11 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v632 = AssociatedTypeWitness;
  v12 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v11, &unk_10011A038, &unk_10011A040);
  v14 = type metadata accessor for PhoneWallpaperView(255, v11, v12, v13);
  v15 = type metadata accessor for Optional(255, v14);
  v629 = AssociatedConformanceWitness;
  v16 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v17 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v16, &unk_10011A038, &unk_10011A058);
  v19 = type metadata accessor for WatchFacesView(255, v16, v17, v18);
  v20 = type metadata accessor for Optional(255, v19);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v15, v20, 0, 0);
  v22 = type metadata accessor for TupleView(0, TupleTypeMetadata2);
  v552 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v551 = (char *)&v537 - v23;
  v24 = type metadata accessor for Optional(0, v16);
  v25 = __chkstk_darwin(v24);
  v540 = (char *)&v537 - v26;
  v550 = v19;
  v547 = *(_QWORD *)(v19 - 8);
  v27 = __chkstk_darwin(v25);
  v541 = (uint64_t)&v537 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v542 = (uint64_t)&v537 - v30;
  v553 = v20;
  v548 = *(_QWORD *)(v20 - 8);
  v31 = __chkstk_darwin(v29);
  v549 = (uint64_t)&v537 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v577 = (uint64_t)&v537 - v33;
  v34 = type metadata accessor for Optional(0, v11);
  v35 = __chkstk_darwin(v34);
  v537 = (char *)&v537 - v36;
  v578 = v14;
  v543 = *(_QWORD *)(v14 - 8);
  v37 = __chkstk_darwin(v35);
  v538 = (uint64_t)&v537 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v37);
  v539 = (uint64_t)&v537 - v40;
  v579 = v15;
  v575 = *(_QWORD *)(v15 - 8);
  v41 = __chkstk_darwin(v39);
  v576 = (uint64_t)&v537 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  v597 = (uint64_t)&v537 - v43;
  v554 = v12;
  v555 = v11;
  v653 = v11;
  v654 = v16;
  v556 = v17;
  v557 = v16;
  v655 = v12;
  v656 = v17;
  v44 = type metadata accessor for PhoneWallpapersWatchFacesView(0, (uint64_t)&v653);
  v544 = *(_QWORD *)(v44 - 8);
  v45 = __chkstk_darwin(v44);
  v546 = (uint64_t)&v537 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v545 = (uint64_t)&v537 - v47;
  v627 = v48;
  v631 = v22;
  v49 = type metadata accessor for _ConditionalContent(0);
  v607 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v580 = (char *)&v537 - v50;
  v636 = v51;
  v608 = type metadata accessor for Optional(0, v51);
  v626 = *(_QWORD *)(v608 - 8);
  v52 = __chkstk_darwin(v608);
  v628 = (uint64_t)&v537 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  v637 = (uint64_t)&v537 - v54;
  v568 = type metadata accessor for _TaskModifier(0);
  __chkstk_darwin(v568);
  v573 = (char *)&v537 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for TaskPriority(0);
  v571 = *(_QWORD *)(v56 - 8);
  v572 = v56;
  __chkstk_darwin(v56);
  v570 = (char *)&v537 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v601 = sub_100003E70(&qword_100160AB0);
  v58 = __chkstk_darwin(v601);
  v569 = (char *)&v537 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v58);
  v574 = (uint64_t)&v537 - v60;
  v599 = sub_100003E70(&qword_100160AB8);
  __chkstk_darwin(v599);
  v600 = (uint64_t)&v537 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v562 = type metadata accessor for AccessibilityChildBehavior(0);
  v560 = *(_QWORD *)(v562 - 8);
  __chkstk_darwin(v562);
  v559 = (char *)&v537 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v564 = type metadata accessor for SetlistView(0);
  __chkstk_darwin(v564);
  v558 = (char **)((char *)&v537 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0));
  v64 = sub_100003E70(&qword_100160AC0);
  v565 = *(_QWORD *)(v64 - 8);
  v566 = v64;
  __chkstk_darwin(v64);
  v563 = (char *)&v537 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v598 = sub_100003E70(&qword_100160AC8);
  v66 = __chkstk_darwin(v598);
  v561 = (char *)&v537 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v66);
  v567 = (uint64_t)&v537 - v68;
  v606 = sub_100003E70(&qword_100160998);
  v69 = __chkstk_darwin(v606);
  v630 = (uint64_t)&v537 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v69);
  v635 = (uint64_t)&v537 - v71;
  v72 = v629;
  v73 = v632;
  v74 = swift_getAssociatedTypeWitness(255, v629);
  v75 = type metadata accessor for Optional(0, v74);
  __chkstk_darwin(v75);
  v591 = (char *)&v537 - v76;
  v78 = type metadata accessor for Binding(0, v77);
  __chkstk_darwin(v78);
  v590 = (char **)((char *)&v537 - v79);
  v80 = (uint64_t)v640;
  v81 = v641;
  v83 = type metadata accessor for PromotionalAssetsViewModel(255, (uint64_t)v640, v641, v82);
  v84 = type metadata accessor for Bindable(0, v83);
  v586 = *(_QWORD *)(v84 - 8);
  v587 = v84;
  __chkstk_darwin(v84);
  v585 = (char *)&v537 - v85;
  v86 = swift_getAssociatedConformanceWitness(v72, v73, v74, &unk_10011A038, &unk_10011A050);
  v592 = v74;
  v583 = v86;
  v88 = type metadata accessor for FeaturedVideosView(0, v74, v86, v87);
  v589 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v588 = (uint64_t)&v537 - v89;
  v90 = sub_1000034AC(&qword_100160988);
  v624 = v88;
  v91 = type metadata accessor for ModifiedContent(0, v88, v90);
  v594 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v593 = (uint64_t)&v537 - v92;
  v93 = sub_1000034AC(&qword_100160990);
  v623 = v91;
  v94 = type metadata accessor for ModifiedContent(0, v91, v93);
  v603 = *(_QWORD *)(v94 - 8);
  v95 = __chkstk_darwin(v94);
  v595 = (char *)&v537 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v95);
  v596 = (uint64_t)&v537 - v97;
  v622 = v98;
  v625 = type metadata accessor for Optional(0, v98);
  v619 = *(_QWORD *)(v625 - 8);
  v99 = __chkstk_darwin(v625);
  v634 = (uint64_t)&v537 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v99);
  v633 = (uint64_t)&v537 - v101;
  v102 = v80;
  v639 = type metadata accessor for PromotionalAssetsView(0, v80, v81, v103);
  v614 = *(void (**)(uint64_t, char *, uint64_t))(v639 - 8);
  v615 = *((_QWORD *)v614 + 8);
  __chkstk_darwin(v639);
  v638 = (char *)&v537 - v104;
  v613 = (void (*)(uint64_t, uint64_t))type metadata accessor for CoordinateSpace(0);
  v617 = *((_QWORD *)v613 - 1);
  __chkstk_darwin(v613);
  v106 = (char *)&v537 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = v73;
  v108 = swift_getAssociatedTypeWitness(255, v72);
  v109 = swift_getAssociatedConformanceWitness(v72, v107, v108, &unk_10011A038, &unk_10011A048);
  v110 = swift_getAssociatedTypeWitness(255, v109);
  v111 = swift_getAssociatedConformanceWitness(v109, v108, v110, &unk_10011B5EC, &unk_10011B604);
  v113 = type metadata accessor for TourPhotosView(255, v110, v111, v112);
  v114 = type metadata accessor for _ConditionalContent(255);
  v115 = type metadata accessor for Group(0, v114);
  v629 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v117 = (char *)&v537 - v116;
  v118 = sub_1000034AC(&qword_100160978);
  v119 = type metadata accessor for ModifiedContent(0, v115, v118);
  v605 = *(void (***)(char *, uint64_t, __n128))(v119 - 8);
  __chkstk_darwin(v119);
  v121 = (char *)&v537 - v120;
  v604 = (char *)&v537 - v120;
  v122 = sub_1000034AC(&qword_100160980);
  v621 = type metadata accessor for ModifiedContent(0, v119, v122);
  v618 = *(_QWORD *)(v621 - 8);
  v123 = __chkstk_darwin(v621);
  v620 = (char *)&v537 - ((v124 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = __chkstk_darwin(v123);
  v602 = (uint64_t)&v537 - v126;
  __chkstk_darwin(v125);
  v632 = (uint64_t)&v537 - v127;
  v643[2] = v102;
  v643[3] = v641;
  v128 = v642;
  v643[4] = v642;
  WitnessTable = swift_getWitnessTable(&unk_100111398, v113);
  v130 = sub_10007BD08();
  v669 = WitnessTable;
  v670 = v130;
  v131 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v114);
  Group<A>.init(content:)(sub_10007BCFC, v643, v114, v131);
  v668 = v131;
  v132 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v115);
  v133 = sub_10007BD4C();
  sub_1000E69A0((uint64_t)v106);
  sub_10008B0F0((uint64_t)&type metadata for TourPhotosViewSizePreferenceKey, (uint64_t)v106, (uint64_t)sub_10005C0B8, 0, v115, (uint64_t)&type metadata for TourPhotosViewSizePreferenceKey, v132, v133, (uint64_t)v121);
  v134 = *(void (**)(uint64_t, _QWORD *))(v617 + 8);
  v584 = v106;
  v582 = v134;
  v134((uint64_t)v106, v613);
  (*(void (**)(char *, uint64_t))(v629 + 8))(v117, v115);
  v135 = v614;
  v136 = v638;
  v137 = v639;
  v616 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v614 + 2);
  v616(v638, v128, v639);
  v138 = *((unsigned __int8 *)v135 + 80);
  v139 = (v138 + 32) & ~v138;
  v615 += v139;
  v629 = v138 | 7;
  v140 = swift_allocObject(&unk_100150358, v615, v138 | 7);
  v141 = v641;
  *(_QWORD *)(v140 + 16) = v640;
  *(_QWORD *)(v140 + 24) = v141;
  v142 = (void (*)(uint64_t, char *, uint64_t))v135[4];
  v142(v140 + v139, v136, v137);
  v143 = sub_100007D40(&qword_100160AE0, &qword_100160978, (uint64_t)&unk_10010F810);
  v666 = v132;
  v667 = v143;
  v144 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v119);
  v145 = sub_100003B3C(&qword_10015FD18, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  v146 = v602;
  v147 = v133;
  v148 = v137;
  v581 = v145;
  v149 = v604;
  View.onPreferenceChange<A>(_:perform:)(&type metadata for TourPhotosViewSizePreferenceKey, sub_10007BD94, v140, v119, &type metadata for TourPhotosViewSizePreferenceKey, v144, v147, v145);
  v150 = swift_release(v140);
  v605[1](v149, v119, v150);
  v151 = sub_100007D40(&qword_100160AE8, &qword_100160980, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v664 = v144;
  v665 = v151;
  v152 = v621;
  v153 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v621);
  sub_1000F257C(v146, v152, v632);
  v154 = *(void (***)(char *, uint64_t, __n128))(v618 + 8);
  ((void (*)(uint64_t, uint64_t))v154)(v146, v152);
  v158 = sub_100074A14(v148, v155, v156, v157);
  LOBYTE(v152) = sub_1000BBEE0();
  v160 = swift_release(v158);
  v617 = v139;
  v614 = v142;
  v605 = v154;
  v604 = (char *)v153;
  if ((v152 & 1) != 0)
  {
    v161 = v592;
    type metadata accessor for FeaturedVideosViewModel(0, v592, v583, v159);
    v162 = v642;
    v166 = sub_100074A14(v148, v163, v164, v165);
    v167 = sub_1000BB590();
    v169 = v168;
    swift_release(v166);
    v173 = sub_100074A14(v148, v170, v171, v172);
    v174 = sub_1000BBFCC();
    swift_release(v173);
    v178 = sub_100074A14(v639, v175, v176, v177);
    v179 = sub_1000BC164();
    swift_release(v178);
    v180 = (_QWORD *)sub_10003B8FC(v167, v169, v174, v179);
    v181 = v585;
    v185 = sub_100074A50(v639, v182, v183, v184);
    __chkstk_darwin(v185);
    v186 = v641;
    *(&v537 - 2) = v640;
    *(&v537 - 1) = (char *)v186;
    KeyPath = swift_getKeyPath(&unk_10010F0C0);
    v188 = v590;
    v189 = v587;
    Bindable<A>.subscript.getter(v590, KeyPath, v587);
    v190 = swift_release(KeyPath);
    (*(void (**)(char *, uint64_t, __n128))(v586 + 8))(v181, v189, v190);
    v191 = (uint64_t)v591;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 56))(v591, 1, 1, v161);
    v192 = v588;
    sub_1000B6098(v180, (uint64_t)v188, v191, v588);
    v193 = v624;
    v194 = swift_getWitnessTable(&unk_100111DC0, v624);
    v195 = sub_10007C214();
    v196 = (uint64_t)v584;
    sub_1000E69A0((uint64_t)v584);
    v197 = v593;
    sub_10008B0F0((uint64_t)&type metadata for FeaturedVideosViewSizePreferenceKey, v196, (uint64_t)sub_10007D238, 0, v193, (uint64_t)&type metadata for FeaturedVideosViewSizePreferenceKey, v194, v195, v593);
    v582(v196, v613);
    (*(void (**)(uint64_t, uint64_t))(v589 + 8))(v192, v193);
    v198 = v638;
    v616(v638, v162, v639);
    v199 = swift_allocObject(&unk_1001503F8, v615, v629);
    v200 = v641;
    *(_QWORD *)(v199 + 16) = v640;
    *(_QWORD *)(v199 + 24) = v200;
    v614(v199 + v617, v198, v639);
    v201 = sub_100007D40(&qword_100160AF0, &qword_100160988, (uint64_t)&unk_10010F810);
    v643[7] = v194;
    v643[8] = v201;
    v202 = v623;
    v203 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v623);
    v204 = (uint64_t)v595;
    View.onPreferenceChange<A>(_:perform:)(&type metadata for FeaturedVideosViewSizePreferenceKey, sub_10007C48C, v199, v202, &type metadata for FeaturedVideosViewSizePreferenceKey, v203, v195, v581);
    v205 = swift_release(v199);
    (*(void (**)(uint64_t, uint64_t, __n128))(v594 + 8))(v197, v202, v205);
    v206 = sub_100007D40(&qword_100160AF8, &qword_100160990, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
    v643[5] = v203;
    v643[6] = v206;
    v148 = v639;
    v207 = v622;
    swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v622);
    v208 = v596;
    sub_1000F257C(v204, v207, v596);
    v209 = v603;
    v210 = *(void (**)(uint64_t, uint64_t))(v603 + 8);
    v210(v204, v207);
    v211 = v634;
    sub_1000E3B88(v208, v207, v634);
    v210(v208, v207);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v209 + 56))(v211, 0, 1, v207);
  }
  else
  {
    v211 = v634;
    v207 = v622;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v603 + 56))(v634, 1, 1, v622, v160);
    v212 = swift_getWitnessTable(&unk_100111DC0, v624);
    v213 = sub_100007D40(&qword_100160AF0, &qword_100160988, (uint64_t)&unk_10010F810);
    v662 = v212;
    v663 = v213;
    v214 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v623);
    v215 = sub_100007D40(&qword_100160AF8, &qword_100160990, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
    v660 = v214;
    v661 = v215;
    swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v207);
  }
  sub_1000E472C(v211, v207, v633);
  v216 = *(void (**)(uint64_t, uint64_t))(v619 + 8);
  v216(v211, v625);
  v220 = sub_100074A14(v148, v217, v218, v219);
  v221 = sub_1000BC2B8();
  swift_release(v220);
  v225 = v631;
  v226 = v638;
  v613 = v216;
  if (v221)
  {
    v227 = sub_100074A14(v148, v222, v223, v224);
    sub_1000BC3A8((uint64_t)&v649);
    swift_release(v227);
    if (v651)
    {
      sub_100011A9C(&v649, (uint64_t)&v653);
      v228 = type metadata accessor for SetlistViewModel(0);
      v232 = sub_100074A14(v148, v229, v230, v231);
      v233 = sub_1000BB590();
      v235 = v234;
      swift_release(v232);
      sub_1000081D0((uint64_t)&v653, (uint64_t)&v649);
      v239 = sub_100074A14(v148, v236, v237, v238);
      v240 = sub_1000BC458();
      swift_release(v239);
      v241 = v651;
      v242 = v652;
      v243 = sub_100005580((uint64_t)&v649, v651);
      v244 = sub_1000119D4(v233, v235, v243, v240 & 1, v228, v241, v242);
      sub_1000055A8(&v649);
      v644 = v244;
      State.init(wrappedValue:)(&v644, v228);
      v245 = *((_QWORD *)&v649 + 1);
      v246 = v558;
      *v558 = v649;
      v246[1] = v245;
      v247 = type metadata accessor for RemoteViewConfiguration();
      v248 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
      v246[2] = EnvironmentObject.init()(v247, v248);
      v246[3] = v249;
      v250 = v564;
      v251 = (_QWORD *)((char *)v246 + *(int *)(v564 + 24));
      *v251 = swift_getKeyPath(&unk_10010F060);
      v252 = sub_100003E70(&qword_10015D600);
      swift_storeEnumTagMultiPayload(v251, v252, 0);
      v253 = (_QWORD *)((char *)v246 + *(int *)(v250 + 28));
      *v253 = swift_getKeyPath(&unk_10010F090);
      v254 = sub_100003E70(&qword_10015D498);
      v255 = swift_storeEnumTagMultiPayload(v253, v254, 0);
      v256 = v559;
      static AccessibilityChildBehavior.contain.getter(v255);
      v257 = sub_100003B3C(&qword_100160B20, type metadata accessor for SetlistView, (uint64_t)&unk_10010BEB0);
      v258 = v563;
      View.accessibilityElement(children:)(v256, v250, v257);
      (*(void (**)(char *, uint64_t))(v560 + 8))(v256, v562);
      sub_1000283D4((uint64_t)v246, type metadata accessor for SetlistView);
      if (qword_10015CF58 != -1)
        swift_once(&qword_10015CF58, sub_100105E50);
      v259 = qword_10016F718;
      v260 = unk_10016F720;
      *(_QWORD *)&v649 = v250;
      *((_QWORD *)&v649 + 1) = v257;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v649, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
      v262 = (uint64_t)v561;
      v263 = v566;
      View.accessibilityIdentifier(_:)(v259, v260, v566, OpaqueTypeConformance2);
      (*(void (**)(char *, uint64_t))(v565 + 8))(v258, v263);
      v264 = v567;
      sub_100007A98(v262, v567, &qword_100160AC8);
      v265 = v600;
      sub_100007ADC(v264, v600, &qword_100160AC8);
      swift_storeEnumTagMultiPayload(v265, v599, 0);
      v266 = sub_10007BF38();
      v267 = sub_10007BFF8();
      v268 = v630;
      _ConditionalContent<>.init(storage:)(v265, v598, v601, v266, v267);
      sub_100008194(v264, &qword_100160AC8);
      sub_1000055A8(&v653);
      v269 = sub_100003E70(&qword_100160B00);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v269 - 8) + 56))(v268, 0, 1, v269);
      sub_100007A98(v268, v635, &qword_100160998);
      v148 = v639;
      goto LABEL_14;
    }
    sub_100008194((uint64_t)&v649, &qword_10015F138);
  }
  v273 = v642;
  v274 = sub_100074A14(v148, v222, v223, v224);
  v275 = (_QWORD *)(v273 + *(int *)(v148 + 40));
  v276 = *v275;
  if (!*v275)
  {
    v534 = v275[1];
    v535 = type metadata accessor for RemoteViewConfiguration();
    v536 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    result = EnvironmentObject.error()(0, v534, v535, v536);
    __break(1u);
    return result;
  }
  v277 = v274;
  swift_retain(*v275);
  v278 = sub_1000BC4A4();
  swift_release(v277);
  swift_release(v276);
  if ((v278 & 1) != 0)
  {
    v282 = v642;
    v283 = sub_100074A14(v148, v279, v280, v281);
    LODWORD(v603) = sub_1000BC5A4();
    v284 = swift_release(v283);
    v285 = v616;
    ((void (*)(char *, uint64_t, uint64_t, __n128))v616)(v226, v282, v148, v284);
    v286 = v615;
    v287 = swift_allocObject(&unk_1001503A8, v615, v629);
    v288 = (uint64_t)v640;
    v289 = v641;
    *(_QWORD *)(v287 + 16) = v640;
    *(_QWORD *)(v287 + 24) = v289;
    v290 = v617;
    v291 = (uint64_t (*)(uint64_t, char *, uint64_t))v614;
    v614(v287 + v617, v226, v148);
    v285(v226, v642, v148);
    v292 = swift_allocObject(&unk_1001503D0, v286, v629);
    *(_QWORD *)(v292 + 16) = v288;
    *(_QWORD *)(v292 + 24) = v289;
    v293 = v291(v292 + v290, v226, v148);
    v294 = v570;
    static TaskPriority.userInitiated.getter(v293);
    v296 = v572;
    v295 = v573;
    v297 = v571;
    (*(void (**)(char *, char *, uint64_t))(v571 + 16))(&v573[*(int *)(v568 + 20)], v294, v572);
    *v295 = &unk_100160B48;
    v295[1] = v292;
    v298 = v601;
    v299 = (uint64_t)v569;
    sub_100028390((uint64_t)v295, (uint64_t)&v569[*(int *)(v601 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _TaskModifier);
    *(_BYTE *)v299 = v603 & 1;
    *(_QWORD *)(v299 + 8) = sub_10007C0C4;
    *(_QWORD *)(v299 + 16) = v287;
    swift_retain(v287);
    sub_1000283D4((uint64_t)v295, (uint64_t (*)(_QWORD))&type metadata accessor for _TaskModifier);
    (*(void (**)(char *, uint64_t))(v297 + 8))(v294, v296);
    swift_release(v287);
    v300 = v574;
    sub_100007A98(v299, v574, &qword_100160AB0);
    v301 = v600;
    sub_100007ADC(v300, v600, &qword_100160AB0);
    swift_storeEnumTagMultiPayload(v301, v599, 1);
    v302 = sub_10007BF38();
    v303 = sub_10007BFF8();
    v304 = v630;
    v305 = v301;
    v225 = v631;
    _ConditionalContent<>.init(storage:)(v305, v598, v298, v302, v303);
    sub_100008194(v300, &qword_100160AB0);
    v306 = sub_100003E70(&qword_100160B00);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v306 - 8) + 56))(v304, 0, 1, v306);
    sub_100007A98(v304, v635, &qword_100160998);
  }
  else
  {
    v307 = sub_100003E70(&qword_100160B00);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v307 - 8) + 56))(v635, 1, 1, v307);
  }
LABEL_14:
  v308 = sub_100074A14(v148, v270, v271, v272);
  v309 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v310 = objc_msgSend(v309, "userInterfaceIdiom");
  swift_release(v308);

  if (v310)
  {
    v314 = v628;
    v315 = v636;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v607 + 56))(v628, 1, 1, v636);
    v316 = swift_getWitnessTable(&unk_100112968, v627);
    v317 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v225);
    v658 = v316;
    v659 = v317;
    swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v315);
    v318 = v609;
    v319 = v641;
    v320 = v634;
    v321 = (uint64_t)v640;
  }
  else
  {
    v322 = sub_100074A14(v148, v311, v312, v313);
    v323 = sub_1000BC72C();
    swift_release(v322);
    v327 = sub_100074A14(v148, v324, v325, v326);
    if ((v323 & 1) != 0)
    {
      v603 = sub_1000BB590();
      v602 = v328;
      swift_release(v327);
      v332 = sub_100074A14(v148, v329, v330, v331);
      v333 = sub_1000BB944();
      v600 = v334;
      v601 = v333;
      swift_release(v332);
      type metadata accessor for PhoneWallpaperViewModel(0, v555, v554, v335);
      v339 = sub_100074A14(v148, v336, v337, v338);
      v340 = sub_1000BB590();
      v342 = v341;
      swift_release(v339);
      v346 = sub_100074A14(v148, v343, v344, v345);
      v347 = sub_1000BC788();
      swift_release(v346);
      v351 = sub_100074A14(v148, v348, v349, v350);
      sub_1000BC920();
      v353 = v352;
      swift_release(v351);
      v357 = sub_100074A14(v148, v354, v355, v356);
      v358 = sub_1000BBB04();
      swift_release(v357);
      v362 = sub_100074A14(v148, v359, v360, v361);
      v363 = sub_1000BCAEC();
      swift_release(v362);
      v364 = (_QWORD *)sub_100104CCC(v340, v342, v347, v363, v353, v358);
      type metadata accessor for WatchFacesViewModel(0, v557, v556, v365);
      v369 = sub_100074A14(v148, v366, v367, v368);
      v370 = sub_1000BB590();
      v372 = v371;
      swift_release(v369);
      v376 = sub_100074A14(v148, v373, v374, v375);
      v377 = sub_1000BCB08();
      swift_release(v376);
      v381 = sub_100074A14(v148, v378, v379, v380);
      sub_1000BC920();
      v383 = v382;
      swift_release(v381);
      v387 = sub_100074A14(v148, v384, v385, v386);
      v388 = sub_1000BBB04();
      swift_release(v387);
      v392 = sub_100074A14(v148, v389, v390, v391);
      v393 = sub_1000BCAEC();
      swift_release(v392);
      v394 = v631;
      v395 = (_QWORD *)sub_10003731C(v370, v372, v377, v393, v383, v388);
      v396 = v546;
      sub_1000C8208(v603, v602, v601, v600, v364, v395, v546);
      v397 = v627;
      v398 = swift_getWitnessTable(&unk_100112968, v627);
      v399 = v545;
      sub_1000F257C(v396, v397, v545);
      v400 = *(void (**)(uint64_t, uint64_t))(v544 + 8);
      v400(v396, v397);
      sub_1000E3B88(v399, v397, v396);
      v401 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v394);
      v402 = (uint64_t)v580;
      sub_1000E3BA0(v396, v397, v394, v398, v401);
      v400(v396, v397);
      v400(v399, v397);
    }
    else
    {
      v403 = sub_1000BCCA0();
      v405 = swift_release(v327);
      if ((v403 & 1) != 0)
      {
        v406 = v555;
        type metadata accessor for PhoneWallpaperViewModel(0, v555, v554, v404);
        v410 = sub_100074A14(v148, v407, v408, v409);
        v411 = sub_1000BB590();
        v413 = v412;
        swift_release(v410);
        v417 = sub_100074A14(v148, v414, v415, v416);
        v418 = v148;
        v419 = sub_1000BC788();
        swift_release(v417);
        v423 = sub_100074A14(v418, v420, v421, v422);
        sub_1000BC920();
        v425 = v424;
        swift_release(v423);
        v429 = sub_100074A14(v418, v426, v427, v428);
        v430 = sub_1000BBB04();
        swift_release(v429);
        v434 = sub_100074A14(v418, v431, v432, v433);
        v435 = sub_1000BCAEC();
        swift_release(v434);
        v436 = v419;
        v148 = v418;
        v437 = (_QWORD *)sub_100104CCC(v411, v413, v436, v435, v425, v430);
        v438 = (uint64_t)v537;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v406 - 8) + 56))(v537, 1, 1, v406);
        v439 = v538;
        sub_1000FB8F4(v437, v438, v538);
        v440 = v578;
        swift_getWitnessTable(&unk_100114860, v578);
        v441 = v539;
        sub_1000F257C(v439, v440, v539);
        v442 = v543;
        v443 = *(void (**)(uint64_t, uint64_t))(v543 + 8);
        v443(v439, v440);
        v444 = v576;
        sub_1000E3B88(v441, v440, v576);
        v443(v441, v440);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v442 + 56))(v444, 0, 1, v440);
      }
      else
      {
        v444 = v576;
        v440 = v578;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v543 + 56))(v576, 1, 1, v578, v405);
        swift_getWitnessTable(&unk_100114860, v440);
      }
      sub_1000E472C(v444, v440, v597);
      v603 = *(_QWORD *)(v575 + 8);
      ((void (*)(uint64_t, uint64_t))v603)(v444, v579);
      v448 = sub_100074A14(v148, v445, v446, v447);
      v449 = sub_1000BCE4C();
      v451 = swift_release(v448);
      if ((v449 & 1) != 0)
      {
        v452 = v557;
        type metadata accessor for WatchFacesViewModel(0, v557, v556, v450);
        v456 = sub_100074A14(v148, v453, v454, v455);
        v457 = sub_1000BB590();
        v459 = v458;
        swift_release(v456);
        v463 = sub_100074A14(v148, v460, v461, v462);
        v464 = v148;
        v465 = sub_1000BCB08();
        swift_release(v463);
        v469 = sub_100074A14(v464, v466, v467, v468);
        sub_1000BC920();
        v471 = v470;
        swift_release(v469);
        v475 = sub_100074A14(v464, v472, v473, v474);
        v476 = sub_1000BBB04();
        swift_release(v475);
        v480 = sub_100074A14(v464, v477, v478, v479);
        v481 = sub_1000BCAEC();
        swift_release(v480);
        v482 = (_QWORD *)sub_10003731C(v457, v459, v465, v481, v471, v476);
        v483 = (uint64_t)v540;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v452 - 8) + 56))(v540, 1, 1, v452);
        v484 = v541;
        sub_100021470(v482, v483, v541);
        v485 = v550;
        swift_getWitnessTable(&unk_10010BB48, v550);
        v486 = v542;
        sub_1000F257C(v484, v485, v542);
        v487 = v547;
        v488 = *(void (**)(uint64_t, uint64_t))(v547 + 8);
        v488(v484, v485);
        v489 = v549;
        sub_1000E3B88(v486, v485, v549);
        v488(v486, v485);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v487 + 56))(v489, 0, 1, v485);
      }
      else
      {
        v489 = v549;
        v485 = v550;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v547 + 56))(v549, 1, 1, v550, v451);
        swift_getWitnessTable(&unk_10010BB48, v485);
      }
      v490 = v577;
      sub_1000E472C(v489, v485, v577);
      v491 = v548;
      v492 = *(void (**)(uint64_t, uint64_t))(v548 + 8);
      v493 = v553;
      v492(v489, v553);
      v494 = v492;
      v495 = v576;
      v496 = v489;
      v497 = v579;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v575 + 16))(v576, v597, v579);
      v653 = v495;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v491 + 16))(v496, v490, v493);
      v654 = v496;
      *(_QWORD *)&v649 = v497;
      *((_QWORD *)&v649 + 1) = v493;
      v643[12] = swift_getWitnessTable(&unk_100114860, v578);
      v644 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v497);
      v643[11] = swift_getWitnessTable(&unk_10010BB48, v485);
      v645 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v493);
      v498 = (uint64_t)v551;
      sub_1000E4768(&v653, 2uLL, (uint64_t)&v649);
      v499 = v494;
      v494(v496, v493);
      v500 = (void (*)(uint64_t, uint64_t))v603;
      ((void (*)(uint64_t, uint64_t))v603)(v495, v497);
      v397 = v627;
      v501 = swift_getWitnessTable(&unk_100112968, v627);
      v502 = v631;
      v503 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v631);
      v402 = (uint64_t)v580;
      sub_1000E3C64(v498, v397, v502, v501, v503);
      (*(void (**)(uint64_t, uint64_t))(v552 + 8))(v498, v502);
      v499(v577, v493);
      v500(v597, v497);
      v394 = v502;
    }
    v504 = swift_getWitnessTable(&unk_100112968, v397);
    v505 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v394);
    v643[9] = v504;
    v643[10] = v505;
    v506 = v636;
    swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v636);
    v314 = v628;
    sub_1000E3B88(v402, v506, v628);
    v507 = v607;
    (*(void (**)(uint64_t, uint64_t))(v607 + 8))(v402, v506);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v507 + 56))(v314, 0, 1, v506);
    v321 = (uint64_t)v640;
    v320 = v634;
    v148 = v639;
    v318 = v609;
    v319 = v641;
  }
  sub_1000E472C(v314, v636, v637);
  v609 = *(int **)(v626 + 8);
  v508 = v608;
  ((void (*)(uint64_t, uint64_t))v609)(v314, v608);
  v509 = v638;
  v616(v638, v642, v148);
  v510 = swift_allocObject(&unk_100150380, v615, v629);
  *(_QWORD *)(v510 + 16) = v321;
  *(_QWORD *)(v510 + 24) = v319;
  v614(v510 + v617, v509, v148);
  v511 = (uint64_t)v612;
  *v612 = sub_10007BE10;
  *(_QWORD *)(v511 + 8) = v510;
  *(_BYTE *)(v511 + 16) = 0;
  v512 = type metadata accessor for RemoteViewConfiguration();
  v513 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
  *(_QWORD *)(v511 + 24) = EnvironmentObject.init()(v512, v513);
  *(_QWORD *)(v511 + 32) = v514;
  v515 = (void (*)(_QWORD, _QWORD))v318;
  v516 = (_QWORD *)(v511 + v318[6]);
  *v516 = swift_getKeyPath(&unk_10010F060);
  v517 = sub_100003E70(&qword_10015D600);
  swift_storeEnumTagMultiPayload(v516, v517, 0);
  v518 = v610;
  sub_1000140E8(v511, v610);
  v519 = (uint64_t)v620;
  v520 = v621;
  (*(void (**)(char *, uint64_t, uint64_t))(v618 + 16))(v620, v632, v621);
  v653 = v519;
  v521 = v625;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v619 + 16))(v320, v633, v625);
  v654 = v320;
  v522 = v630;
  sub_100007ADC(v635, v630, &qword_100160998);
  v655 = v522;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v626 + 16))(v314, v637, v508);
  v656 = v314;
  v523 = v518;
  sub_100028390(v518, v511, type metadata accessor for AppModule);
  v657 = v511;
  *(_QWORD *)&v649 = v520;
  *((_QWORD *)&v649 + 1) = v521;
  v650 = v606;
  v651 = v508;
  v652 = (uint64_t)v515;
  v644 = (uint64_t)v604;
  v524 = swift_getWitnessTable(&unk_100111DC0, v624);
  v525 = sub_100007D40(&qword_100160AF0, &qword_100160988, (uint64_t)&unk_10010F810);
  v643[19] = v524;
  v643[20] = v525;
  v526 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v623);
  v527 = sub_100007D40(&qword_100160AF8, &qword_100160990, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v643[17] = v526;
  v643[18] = v527;
  v643[16] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v622);
  v645 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v521);
  v646 = sub_10007BE68();
  v528 = swift_getWitnessTable(&unk_100112968, v627);
  v529 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v631);
  v643[14] = v528;
  v643[15] = v529;
  v643[13] = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v636);
  v647 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v508);
  v648 = sub_100003B3C(&qword_100160B38, type metadata accessor for AppModule, (uint64_t)&unk_10010B250);
  sub_1000E4768(&v653, 5uLL, (uint64_t)&v649);
  sub_1000283D4(v523, type metadata accessor for AppModule);
  v530 = v609;
  ((void (*)(uint64_t, uint64_t))v609)(v637, v508);
  sub_100008194(v635, &qword_100160998);
  v531 = v613;
  v613(v633, v521);
  v532 = v605;
  ((void (*)(uint64_t, uint64_t))v605)(v632, v520);
  sub_1000283D4(v511, type metadata accessor for AppModule);
  ((void (*)(uint64_t, uint64_t))v530)(v628, v508);
  sub_100008194(v630, &qword_100160998);
  v531(v634, v521);
  return ((uint64_t (*)(char *, uint64_t))v532)(v620, v520);
}

uint64_t sub_1000796D8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t KeyPath;
  uint64_t v72;
  __n128 v73;
  void (*v74)(uint64_t, uint64_t, __n128);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  uint64_t WitnessTable;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116[3];
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 v120;
  uint64_t v121;
  unint64_t v122;

  v115 = a4;
  v6 = type metadata accessor for PromotionalAssetsViewModel(255, a1, a2, a3);
  v111 = type metadata accessor for Bindable(0, v6);
  v108 = *(_QWORD *)(v111 - 8);
  v7 = __chkstk_darwin(v111);
  v110 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v106 = (uint64_t)&v102 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
  v12 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v13 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v12, &unk_10011A038, &unk_10011A048);
  v14 = swift_getAssociatedTypeWitness(255, v13);
  v15 = swift_getAssociatedConformanceWitness(v13, v12, v14, &unk_10011B5EC, &unk_10011B604);
  v17 = type metadata accessor for TourPhotosView(0, v14, v15, v16);
  v107 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v102 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v109 = (uint64_t)&v102 - v21;
  v22 = type metadata accessor for _ConditionalContent(0);
  v113 = *(_QWORD *)(v22 - 8);
  v114 = v22;
  __chkstk_darwin(v22);
  v112 = (char *)&v102 - v23;
  v25 = type metadata accessor for PromotionalAssetsView(0, a1, a2, v24);
  v29 = sub_100074A14(v25, v26, v27, v28);
  v30 = sub_1000BB45C();
  swift_release(v29);
  if (v30)
  {
    v105 = (_QWORD *)type metadata accessor for TourPhotosViewModel(0, v14, v15, v33);
    v37 = sub_100074A14(v25, v34, v35, v36);
    v104 = sub_1000BB590();
    v103 = v38;
    swift_release(v37);
    v42 = sub_100074A14(v25, v39, v40, v41);
    v102 = sub_1000BB688();
    swift_release(v42);
    v46 = sub_100074A14(v25, v43, v44, v45);
    v47 = sub_1000BB944();
    v49 = v48;
    swift_release(v46);
    v53 = sub_100074A14(v25, v50, v51, v52);
    v54 = sub_1000BBB04();
    swift_release(v53);
    v58 = sub_100074A14(v25, v55, v56, v57);
    sub_1000BBB5C();
    v60 = v59;
    swift_release(v58);
    v64 = sub_100074A14(v25, v61, v62, v63);
    v65 = sub_1000BBD18();
    swift_release(v64);
    v105 = (_QWORD *)sub_1000D7FF4(v104, v103, v102, v47, v49, v65 & 1, v54, v60);
    v66 = v106;
    v70 = sub_100074A50(v25, v67, v68, v69);
    __chkstk_darwin(v70);
    *(&v102 - 2) = a1;
    *(&v102 - 1) = a2;
    KeyPath = swift_getKeyPath(&unk_10010F0F8);
    v72 = v111;
    Bindable<A>.subscript.getter(&v117, KeyPath, v111);
    v73 = swift_release(KeyPath);
    v74 = *(void (**)(uint64_t, uint64_t, __n128))(v108 + 8);
    v74(v66, v72, v73);
    v108 = v117;
    v106 = v118;
    v104 = v119;
    LODWORD(v103) = v120;
    v75 = v110;
    v79 = sub_100074A50(v25, v76, v77, v78);
    __chkstk_darwin(v79);
    *(&v102 - 2) = a1;
    *(&v102 - 1) = a2;
    v80 = swift_getKeyPath(&unk_10010F130);
    Bindable<A>.subscript.getter(v116, v80, v72);
    v81 = swift_release(v80);
    v74((uint64_t)v75, v72, v81);
    sub_1000A6534(v105, v108, v106, v104, v103, v116[0], v116[1], (uint64_t)v20, *(double *)&v116[2]);
    WitnessTable = swift_getWitnessTable(&unk_100111398, v17);
    v83 = v109;
    sub_1000F257C((uint64_t)v20, v17, v109);
    v84 = *(void (**)(char *, uint64_t))(v107 + 8);
    v84(v20, v17);
    sub_1000E3B88(v83, v17, (uint64_t)v20);
    v85 = sub_10007BD08();
    v86 = (uint64_t)v112;
    sub_1000E3BA0((uint64_t)v20, v17, (uint64_t)&type metadata for TourPhotosDefaultView, WitnessTable, v85);
    v84(v20, v17);
    v84((char *)v83, v17);
  }
  else
  {
    v87 = sub_100074A14(v25, v31, v32, v33);
    v88 = sub_1000BB944();
    v90 = v89;
    swift_release(v87);
    v94 = sub_100074A14(v25, v91, v92, v93);
    v95 = sub_1000BBD18();
    swift_release(v94);
    v117 = v88;
    v118 = v90;
    LOBYTE(v119) = v95 & 1;
    v96 = swift_getWitnessTable(&unk_100111398, v17);
    v97 = sub_10007BD08();
    v86 = (uint64_t)v112;
    sub_1000E3C64((uint64_t)&v117, v17, (uint64_t)&type metadata for TourPhotosDefaultView, v96, v97);
    swift_bridgeObjectRelease(v90);
  }
  v98 = swift_getWitnessTable(&unk_100111398, v17);
  v99 = sub_10007BD08();
  v121 = v98;
  v122 = v99;
  v100 = v114;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v114);
  sub_1000E3B88(v86, v100, v115);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v113 + 8))(v86, v100);
}

uint64_t sub_100079D48@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1000BBD7C();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

double sub_100079D78(uint64_t a1)
{
  return sub_1000BBDDC(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

void sub_100079DA8(double *a1@<X8>)
{
  *a1 = sub_1000BBE60();
}

void sub_100079DD0(double *a1)
{
  sub_1000BBEB8(*a1);
}

uint64_t sub_100079DF4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC19C(a1);
}

double sub_100079E14(uint64_t a1)
{
  return sub_1000BE510(a1);
}

double sub_100079E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(double))
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v6 = *(double *)(a1 + 8);
  v7 = type metadata accessor for PromotionalAssetsView(0, a3, a4, a4);
  v11 = sub_100074A14(v7, v8, v9, v10);
  a5(v6);
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

double sub_100079E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double result;
  uint64_t v23;

  v7 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v11 = (char *)&v23 - v10;
  v12 = sub_100003E70(&qword_100161700);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v16 = type metadata accessor for MainActor(0);
  v17 = static MainActor.shared.getter(v16);
  v18 = *(unsigned __int8 *)(v8 + 80);
  v19 = (v18 + 48) & ~v18;
  v20 = (char *)swift_allocObject(&unk_100150420, v19 + v9, v18 | 7);
  *((_QWORD *)v20 + 2) = v17;
  *((_QWORD *)v20 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v20 + 4) = a2;
  *((_QWORD *)v20 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v20[v19], v11, v7);
  v21 = sub_1000F7C84((uint64_t)v14, (uint64_t)&unk_100160B60, (uint64_t)v20);
  *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  return result;
}

uint64_t sub_100079FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for MainActor(0);
  v6[5] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v6[6] = v8;
  v6[7] = v9;
  return swift_task_switch(sub_10007A058, v8, v9);
}

uint64_t sub_10007A058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;

  v5 = type metadata accessor for PromotionalAssetsView(0, v4[3], v4[4], a4);
  v4[8] = sub_100074A14(v5, v6, v7, v8);
  v9 = (uint64_t **)swift_task_alloc(dword_1001630BC);
  v4[9] = (uint64_t)v9;
  *v9 = v4;
  v9[1] = (uint64_t *)sub_10007A0B8;
  return sub_1000BC628();
}

uint64_t sub_10007A0B8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  swift_release(v2);
  return swift_task_switch(sub_10007D234, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_10007A10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[5] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[6] = v5;
  v3[7] = v6;
  return swift_task_switch(sub_10007A17C, v5, v6);
}

uint64_t sub_10007A17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;

  v5 = type metadata accessor for PromotionalAssetsView(0, v4[3], v4[4], a4);
  v4[8] = sub_100074A14(v5, v6, v7, v8);
  v9 = (uint64_t **)swift_task_alloc(dword_1001630BC);
  v4[9] = (uint64_t)v9;
  *v9 = v4;
  v9[1] = (uint64_t *)sub_10007A1DC;
  return sub_1000BC628();
}

uint64_t sub_10007A1DC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  swift_release(v2);
  return swift_task_switch(sub_10007A230, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_10007A230()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007A260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;

  v6 = type metadata accessor for URL(0);
  __chkstk_darwin(v6);
  v50 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = __chkstk_darwin(AssociatedTypeWitness);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v49 - v13;
  v16 = type metadata accessor for PromotionalAssetsView(0, a2, a3, v15);
  v20 = sub_100074A14(v16, v17, v18, v19);
  sub_1000BCFF8();
  swift_release(v20);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DF4);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 152))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v24 = v23;
  v25 = *(void (**)(char *, uint64_t))(v9 + 8);
  v26 = v14;
  v27 = (uint64_t)v50;
  v25(v26, AssociatedTypeWitness);
  v31 = sub_100074A14(v16, v28, v29, v30);
  sub_1000BCFF8();
  v32 = swift_release(v31);
  (*(void (**)(uint64_t, uint64_t, __n128))(AssociatedConformanceWitness + 176))(AssociatedTypeWitness, AssociatedConformanceWitness, v32);
  v25(v12, AssociatedTypeWitness);
  v36 = sub_100074A14(v16, v33, v34, v35);
  v37 = (_QWORD *)(a1 + *(int *)(v16 + 40));
  v38 = *v37;
  if (*v37)
  {
    v39 = v36;
    swift_retain(*v37);
    v41 = sub_1000BE65C(v40);
    v43 = v42;
    swift_release(v39);
    swift_release(v38);
    v44 = type metadata accessor for AppViewModel(0);
    swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
    return sub_1000047A0(v22, v24, v27, v41, v43, 1);
  }
  else
  {
    v46 = v37[1];
    v47 = type metadata accessor for RemoteViewConfiguration();
    v48 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    result = EnvironmentObject.error()(0, v46, v47, v48);
    __break(1u);
  }
  return result;
}

double sub_10007A4D4(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  double result;
  _QWORD v6[8];

  v6[2] = a2;
  v6[3] = a3;
  v6[4] = a1;
  *(double *)&v6[5] = a4;
  v4 = static Animation.default.getter();
  withAnimation<A>(_:_:)(v4, sub_10007BCA0, v6, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  return result;
}

void sub_10007A538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = v5;
  v9 = sub_100074A14(a1, a2, a3, a4);
  sub_1000BD330(a5);
  swift_release(v9);
  v13 = sub_100074A14(a1, v10, v11, v12);
  v14 = sub_1000BD344();
  swift_release(v13);
  v15 = *(_QWORD *)(v6 + *(int *)(a1 + 36) + 8);
  if (v14 != *(unsigned __int8 *)(v15 + 16))
  {
    v16 = sub_100003E70(&qword_10015D470);
    sub_100007D40(&qword_10015D478, &qword_10015D470, (uint64_t)&unk_1001101D4);
    v17 = ObservableObject<>.objectWillChange.getter(v16);
    ObservableObjectPublisher.send()();
    swift_release(v17);
  }
  *(_BYTE *)(v15 + 16) = v14;
}

double sub_10007A60C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  char v23;
  double result;
  uint64_t v25;

  v9 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v25 - v13;
  if (*(_BYTE *)(*(_QWORD *)(a1 + *(int *)(v12 + 36) + 8) + 16))
    v15 = 2;
  else
    v15 = 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, a1, v9);
  v16 = *(unsigned __int8 *)(v10 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = swift_allocObject(&unk_100150330, v17 + v11, v16 | 7);
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a3;
  v19 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v18 + v17, v14, v9);
  v20 = static Font.title.getter(v19);
  static Font.Weight.medium.getter(v20);
  v21 = Font.weight(_:)(v20);
  swift_release(v20);
  KeyPath = swift_getKeyPath(&unk_10010F030);
  v23 = static Edge.Set.horizontal.getter(KeyPath);
  *(_BYTE *)a5 = 2;
  *(_BYTE *)(a5 + 1) = v15;
  *(_QWORD *)(a5 + 8) = sub_10007BC94;
  *(_QWORD *)(a5 + 16) = v18;
  *(_QWORD *)(a5 + 24) = KeyPath;
  *(_QWORD *)(a5 + 32) = v21;
  *(_BYTE *)(a5 + 40) = v23;
  result = 0.0;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_BYTE *)(a5 + 80) = 1;
  return result;
}

void sub_10007A760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v9 = sub_100074A14(v5, v6, v7, v8);
  sub_1000BD028();
  swift_release(v9);
  v13 = sub_100074A14(v5, v10, v11, v12);
  v14 = sub_1000BB590();
  v16 = v15;
  swift_release(v13);
  v17 = (uint64_t *)(a1 + *(int *)(v5 + 40));
  v18 = *v17;
  if (*v17)
  {
    swift_retain(*v17);
    sub_1000DB03C(v14, v16, 8, 0, 1, 0, 3u, v18);
    swift_bridgeObjectRelease(v16);
    swift_release(v18);
  }
  else
  {
    v19 = v17[1];
    v20 = type metadata accessor for RemoteViewConfiguration();
    v21 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v19, v20, v21);
    __break(1u);
  }
}

uint64_t sub_10007A860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v42;
  _OWORD v43[9];
  _OWORD v44[9];
  double v45;
  _QWORD v46[20];

  v7 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v11 = sub_100074A14(v7, v8, v9, v10);
  v12 = sub_1000BB944();
  v14 = v13;
  swift_release(v11);
  if (v14)
  {
    v46[0] = v12;
    v46[1] = v14;
    v15 = sub_10000CB40();
    v16 = Text.init<A>(_:)(v46, &type metadata for String, v15);
    v18 = v17;
    v20 = v19;
    v22 = v21 & 1;
    v23 = static Font.Weight.semibold.getter();
    v24 = Text.fontWeight(_:)(*(_QWORD *)&v23, 0, v16, v18, v22, v20);
    v26 = v25;
    v28 = v27;
    v42 = a5;
    v30 = v29 & 1;
    sub_10000BFF8(v16, v18, v22);
    v31 = swift_bridgeObjectRelease(v20);
    v32 = static Alignment.center.getter(v31);
    sub_1000E546C(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v43, v34, 0.0, 1, 0.0, 1, v32, v33, v24, v26, v30, v28);
    v35 = v30;
    a5 = v42;
    sub_10000BFF8(v24, v26, v35);
    swift_bridgeObjectRelease(v28);
    v40 = 0.0;
    if (*(_BYTE *)(*(_QWORD *)(a1 + *(int *)(v7 + 36) + 8) + 16))
      v40 = 1.0;
    v44[6] = v43[6];
    v44[7] = v43[7];
    v44[8] = v43[8];
    v44[2] = v43[2];
    v44[3] = v43[3];
    v44[4] = v43[4];
    v44[5] = v43[5];
    v44[0] = v43[0];
    v44[1] = v43[1];
    v45 = v40;
    nullsub_1(v44, v36, v37, v38, v39);
  }
  else
  {
    sub_10007BC70((uint64_t)v44);
  }
  sub_100007A98((uint64_t)v44, (uint64_t)v46, &qword_100160A60);
  return sub_100007A98((uint64_t)v46, a5, &qword_100160A60);
}

double sub_10007AA48@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  char v23;
  double result;
  uint64_t v25;

  v9 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v25 - v13;
  if (*(_BYTE *)(*(_QWORD *)(a1 + *(int *)(v12 + 36) + 8) + 16))
    v15 = 2;
  else
    v15 = 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, a1, v9);
  v16 = *(unsigned __int8 *)(v10 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = swift_allocObject(&unk_100150308, v17 + v11, v16 | 7);
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a3;
  v19 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v18 + v17, v14, v9);
  v20 = static Font.title.getter(v19);
  static Font.Weight.medium.getter(v20);
  v21 = Font.weight(_:)(v20);
  swift_release(v20);
  KeyPath = swift_getKeyPath(&unk_10010F030);
  v23 = static Edge.Set.horizontal.getter(KeyPath);
  *(_BYTE *)a5 = 1;
  *(_BYTE *)(a5 + 1) = v15;
  *(_QWORD *)(a5 + 8) = sub_10007BC5C;
  *(_QWORD *)(a5 + 16) = v18;
  *(_QWORD *)(a5 + 24) = KeyPath;
  *(_QWORD *)(a5 + 32) = v21;
  *(_BYTE *)(a5 + 40) = v23;
  result = 0.0;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_BYTE *)(a5 + 80) = 1;
  return result;
}

uint64_t sub_10007AB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = type metadata accessor for DismissAction(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PromotionalAssetsView(0, a2, a3, v9);
  sub_10001D870((uint64_t)v8);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_10007AC40(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v7 = sub_100003E70(&qword_10015D4A0);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = a1[1];
  v13 = type metadata accessor for PromotionalAssetsView(0, a3, a4, v12);
  v17 = sub_100074A14(v13, v14, v15, v16);
  sub_1000BD030(v10);
  swift_release(v17);
  v21 = sub_100074A14(v13, v18, v19, v20);
  sub_1000BD044(v11);
  swift_release(v21);
  v25 = sub_100074A14(v13, v22, v23, v24);
  sub_10001DADC((uint64_t)v9);
  sub_1000BD058((uint64_t)v9);
  swift_release(v25);
}

double sub_10007AD44(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = type metadata accessor for PromotionalAssetsView(0, a3, a4, a4);
  v12 = sub_100074A14(v8, v9, v10, v11);
  sub_1000BD0E0(v4, v5, v6, v7);
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

uint64_t sub_10007ADA8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000BD17C();
  *a1 = result & 1;
  return result;
}

double sub_10007ADD4(char *a1)
{
  return sub_1000BD1D4(*a1);
}

uint64_t sub_10007ADF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  void (*v20)(uint64_t, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double (*v52)(uint64_t, char, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char v55;

  v43 = a1;
  v48 = a5;
  v7 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v47 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v46 = (char *)&v42 - v9;
  v44 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3);
  v45 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v12 = (char *)&v42 - v11;
  v13 = sub_100003E70(&qword_100160A48);
  v14 = swift_allocObject(v13, 64, 7);
  *(_OWORD *)(v14 + 16) = xmmword_10010ACC0;
  v18 = sub_100074A14(v7, v15, v16, v17);
  sub_1000BCFF8();
  swift_release(v18);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DF4);
  v20 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 176);
  *(_QWORD *)(v14 + 56) = type metadata accessor for URL(0);
  sub_100007D80((_QWORD *)(v14 + 32));
  v20(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v12, AssociatedTypeWitness);
  v21 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v46, v43, v7);
  v22 = *(unsigned __int8 *)(v8 + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = swift_allocObject(&unk_100150268, v23 + v47, v22 | 7);
  v25 = v44;
  *(_QWORD *)(v24 + 16) = a2;
  *(_QWORD *)(v24 + 24) = v25;
  v26.n128_f64[0] = (*(double (**)(uint64_t, char *, uint64_t))(v8 + 32))(v24 + v23, v21, v7);
  v27 = static SafeAreaRegions.all.getter(v26);
  v28 = static Edge.Set.all.getter(v27);
  v29 = v14;
  v49 = v14;
  v50 = 0;
  v51 = 0;
  v52 = sub_10007B948;
  v53 = v24;
  v54 = v27;
  v55 = v28;
  v30 = sub_100003E70(&qword_100160A50);
  v31 = type metadata accessor for PresentationDetent(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(_QWORD *)(v32 + 72);
  v34 = *(unsigned __int8 *)(v32 + 80);
  v35 = (v34 + 32) & ~v34;
  v36 = swift_allocObject(v30, v35 + 2 * v33, v34 | 7);
  *(_OWORD *)(v36 + 16) = xmmword_10010A6C0;
  v37 = static PresentationDetent.medium.getter();
  static PresentationDetent.large.getter(v37);
  v38 = sub_100063DA4(v36);
  swift_setDeallocating(v36);
  swift_arrayDestroy(v36 + v35, 2, v31);
  swift_deallocClassInstance(v36, 32, 7);
  v39 = sub_100003E70(&qword_100160A08);
  v40 = sub_10005C954(&qword_100160A10, &qword_100160A08, (void (*)(void))sub_100045694);
  View.presentationDetents(_:)(v38, v39, v40);
  swift_release(v24);
  swift_bridgeObjectRelease(v29);
  return swift_bridgeObjectRelease(v38);
}

double sub_10007B108(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  if ((a2 & 1) != 0)
  {
    v7 = type metadata accessor for PromotionalAssetsView(0, a6, a7, a4);
    v11 = sub_100074A14(v7, v8, v9, v10);
    sub_1000BD250();
    *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  }
  return result;
}

void sub_10007B14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v9 = sub_100074A14(v5, v6, v7, v8);
  v10 = sub_1000BB590();
  v12 = v11;
  swift_release(v9);
  v13 = (uint64_t *)(a1 + *(int *)(v5 + 40));
  v14 = *v13;
  if (*v13)
  {
    swift_retain(*v13);
    sub_1000DADAC(v10, v12, 8, v14);
    swift_bridgeObjectRelease(v12);
    swift_release(v14);
  }
  else
  {
    v15 = v13[1];
    v16 = type metadata accessor for RemoteViewConfiguration();
    v17 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v15, v16, v17);
    __break(1u);
  }
}

void sub_10007B220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v9 = sub_100074A14(v5, v6, v7, v8);
  v10 = sub_1000BB590();
  v12 = v11;
  swift_release(v9);
  v13 = (uint64_t *)(a1 + *(int *)(v5 + 40));
  v14 = *v13;
  if (*v13)
  {
    swift_retain(*v13);
    sub_1000DB03C(v10, v12, 8, 0, 2, 0, 3u, v14);
    swift_bridgeObjectRelease(v12);
    swift_release(v14);
  }
  else
  {
    v15 = v13[1];
    v16 = type metadata accessor for RemoteViewConfiguration();
    v17 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v15, v16, v17);
    __break(1u);
  }
}

uint64_t sub_10007B304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[5] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[6] = v5;
  v3[7] = v6;
  return swift_task_switch(sub_10007B374, v5, v6);
}

uint64_t sub_10007B374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for PromotionalAssetsView(0, *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), a4);
  v10 = sub_100074A14(v6, v7, v8, v9);
  v11 = (_QWORD *)(v5 + *(int *)(v6 + 40));
  v12 = *v11;
  if (*v11)
  {
    v13 = v10;
    swift_retain(*v11);
    v14 = sub_1000BC4A4();
    swift_release(v12);
    swift_release(v13);
    if ((v14 & 1) != 0)
    {
      *(_QWORD *)(v4 + 64) = sub_100074A14(v6, v15, v16, v17);
      v18 = (_QWORD *)swift_task_alloc(dword_1001630BC);
      *(_QWORD *)(v4 + 72) = v18;
      *v18 = v4;
      v18[1] = sub_10007A1DC;
      return sub_1000BC628();
    }
    else
    {
      v23 = swift_release(*(_QWORD *)(v4 + 40));
      return (*(uint64_t (**)(__n128))(v4 + 8))(v23);
    }
  }
  else
  {
    v20 = v11[1];
    v21 = type metadata accessor for RemoteViewConfiguration();
    v22 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    return EnvironmentObject.error()(0, v20, v21, v22);
  }
}

double sub_10007B498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v4 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v8 = sub_100074A14(v4, v5, v6, v7);
  sub_1000BD258();
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

double sub_10007B4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  double result;
  void *v13;
  _BYTE v14[40];

  v4 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v8 = sub_100074A14(v4, v5, v6, v7);
  if (qword_10015CEC0 != -1)
    swift_once(&qword_10015CEC0, sub_1000CBB48);
  sub_1000081D0(qword_10016F6B8 + 16, (uint64_t)v14);
  v9 = sub_100003E70(&qword_100160A40);
  v10 = type metadata accessor for MusicPreviewPlayer(0);
  if (swift_dynamicCast(&v13, v14, v9, v10, 6))
  {
    v11 = v13;
    sub_1000C5C74();
    swift_release(v8);

  }
  else
  {
    *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  }
  return result;
}

uint64_t sub_10007B590()
{
  return sub_10007B59C((uint64_t)nullsub_1);
}

uint64_t sub_10007B59C(uint64_t a1)
{
  uint64_t v2;

  v2 = static Animation.default.getter();
  withAnimation<A>(_:_:)(v2, a1, 0, (char *)&type metadata for () + 8);
  return swift_release(v2);
}

unint64_t sub_10007B5F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160A18;
  if (!qword_100160A18)
  {
    v1 = sub_1000034AC(&qword_10015D4A0);
    sub_100003B3C((unint64_t *)&qword_10015E0D0, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100160A18);
  }
  return result;
}

uint64_t sub_10007B670@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000760E0(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_10007B67C()
{
  unint64_t result;

  result = qword_100160A20;
  if (!qword_100160A20)
  {
    result = swift_getWitnessTable(&unk_10010F368, &type metadata for PromotionalAssetsViewSizePreferenceKey);
    atomic_store(result, (unint64_t *)&qword_100160A20);
  }
  return result;
}

void sub_10007B6C4(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v6, v7, a4) - 8) + 80);
  sub_10007AC40(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

unint64_t sub_10007B71C()
{
  unint64_t result;

  result = qword_100160A28;
  if (!qword_100160A28)
  {
    result = swift_getWitnessTable(&unk_10010F320, &type metadata for PromotionalAssetsViewSafeAreaPreferenceKey);
    atomic_store(result, &qword_100160A28);
  }
  return result;
}

double sub_10007B764(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v6, v7, a4) - 8) + 80);
  return sub_10007AD44(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

uint64_t sub_10007B7BC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000BD17C();
  *a1 = result & 1;
  return result;
}

double sub_10007B7E8(char *a1)
{
  return sub_1000BD1D4(*a1);
}

uint64_t sub_10007B80C()
{
  return 16;
}

__n128 sub_10007B818(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10007B828@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v4, v5, a1) - 8) + 80);
  return sub_10007ADF8(v2 + ((v6 + 32) & ~v6), v4, v5, v7, a2);
}

uint64_t sub_10007B884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007C0D0((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10007B14C, a2, a3, a4);
}

uint64_t sub_10007B894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007C0D0((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10007B220, a2, a3, a4);
}

uint64_t sub_10007B8A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v6, v7, a4) - 8) + 80);
  v9 = v4 + ((v8 + 32) & ~v8);
  v10 = (_QWORD *)swift_task_alloc(dword_100160A34);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_100031054;
  return sub_10007B304(v9, v6, v7);
}

uint64_t sub_10007B928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007C0D0((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10007B498, a2, a3, a4);
}

uint64_t sub_10007B938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007C0D0((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10007B4CC, a2, a3, a4);
}

double sub_10007B948(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *(_QWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v9, v10, a4) - 8) + 80);
  return sub_10007B108(a1, a2, a3, a4, v4 + ((v11 + 32) & ~v11), v9, v10);
}

uint64_t sub_10007B9C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100076AAC(v1[4], v1[2], v1[3], a1);
}

double sub_10007B9D8(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v7, v8, a5) - 8) + 80);
  return sub_10007A4D4(v5 + ((v9 + 32) & ~v9), v7, v8, a1);
}

void sub_10007BA3C(_BYTE *a1@<X8>)
{
  uint64_t v1;

  sub_1000F0828(*(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_10007BA4C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_10007BA78(unsigned __int8 *a1)
{
  uint64_t *v1;

  sub_1000F0834(a1, v1[2], v1[3], v1[4], v1[5]);
}

double sub_10007BA84@<D0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10007A60C(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_10007BA90@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10007A860(v2[4], v2[2], v2[3], a1, a2);
}

double sub_10007BA9C@<D0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10007AA48(v2[4], v2[2], v2[3], a1, a2);
}

unint64_t sub_10007BAA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160A70;
  if (!qword_100160A70)
  {
    v1 = sub_1000034AC(&qword_100160A78);
    sub_10007BB2C();
    sub_100007D40(&qword_10015E310, &qword_10015E318, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160A70);
  }
  return result;
}

unint64_t sub_10007BB2C()
{
  unint64_t result;

  result = qword_100160A80;
  if (!qword_100160A80)
  {
    result = swift_getWitnessTable(&unk_10010E6A4, &type metadata for NavigationButton);
    atomic_store(result, (unint64_t *)&qword_100160A80);
  }
  return result;
}

unint64_t sub_10007BB70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160A88;
  if (!qword_100160A88)
  {
    v1 = sub_1000034AC(&qword_100160A60);
    sub_10005C954((unint64_t *)&qword_100160A90, &qword_100160A98, (void (*)(void))sub_10007BBF4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100160A88);
  }
  return result;
}

unint64_t sub_10007BBF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160AA0;
  if (!qword_100160AA0)
  {
    v1 = sub_1000034AC(&qword_100160AA8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160AA0);
  }
  return result;
}

uint64_t sub_10007BC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007C0D0(sub_10007AB98, a2, a3, a4);
}

double sub_10007BC70(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_10007BC94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007C0D0((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10007A760, a2, a3, a4);
}

void sub_10007BCA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *((double *)v4 + 5);
  v6 = type metadata accessor for PromotionalAssetsView(0, v4[2], v4[3], a4);
  sub_10007A538(v6, v7, v8, v9, v5);
}

uint64_t sub_10007BCF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100076F34(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10007BCFC@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000796D8(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

unint64_t sub_10007BD08()
{
  unint64_t result;

  result = qword_100160AD0;
  if (!qword_100160AD0)
  {
    result = swift_getWitnessTable(&unk_10010DDD8, &type metadata for TourPhotosDefaultView);
    atomic_store(result, (unint64_t *)&qword_100160AD0);
  }
  return result;
}

unint64_t sub_10007BD4C()
{
  unint64_t result;

  result = qword_100160AD8;
  if (!qword_100160AD8)
  {
    result = swift_getWitnessTable(&unk_10010F2D8, &type metadata for TourPhotosViewSizePreferenceKey);
    atomic_store(result, (unint64_t *)&qword_100160AD8);
  }
  return result;
}

double sub_10007BD94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007BDA0(a1, sub_1000BBECC, a3, a4);
}

double sub_10007BDA0(uint64_t a1, void (*a2)(double), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v7, v8, a4) - 8) + 80);
  return sub_100079E34(a1, v4 + ((v9 + 32) & ~v9), v7, v8, a2);
}

uint64_t sub_10007BE10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v5, v6, a4) - 8) + 80);
  return sub_10007A260(v4 + ((v7 + 32) & ~v7), v5, v6);
}

unint64_t sub_10007BE68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160B08;
  if (!qword_100160B08)
  {
    v1 = sub_1000034AC(&qword_100160998);
    sub_10007BECC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100160B08);
  }
  return result;
}

unint64_t sub_10007BECC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160B10;
  if (!qword_100160B10)
  {
    v1 = sub_1000034AC(&qword_100160B00);
    sub_10007BF38();
    sub_10007BFF8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160B10);
  }
  return result;
}

unint64_t sub_10007BF38()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100160B18;
  if (!qword_100160B18)
  {
    v1 = sub_1000034AC(&qword_100160AC8);
    v2[0] = type metadata accessor for SetlistView(255);
    v2[1] = sub_100003B3C(&qword_100160B20, type metadata accessor for SetlistView, (uint64_t)&unk_10010BEB0);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160B18);
  }
  return result;
}

unint64_t sub_10007BFF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160B28;
  if (!qword_100160B28)
  {
    v1 = sub_1000034AC(&qword_100160AB0);
    sub_10007C07C();
    sub_100003B3C(&qword_10015D458, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160B28);
  }
  return result;
}

unint64_t sub_10007C07C()
{
  unint64_t result;

  result = qword_100160B30;
  if (!qword_100160B30)
  {
    result = swift_getWitnessTable(&unk_10010B934, &type metadata for SetlistLoadingView);
    atomic_store(result, (unint64_t *)&qword_100160B30);
  }
  return result;
}

uint64_t sub_10007C0C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007C0D0((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100079E84, a2, a3, a4);
}

uint64_t sub_10007C0D0(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v5, v6, a4) - 8) + 80);
  return a1(v4 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t sub_10007C134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v6, v7, a4) - 8) + 80);
  v9 = v4 + ((v8 + 32) & ~v8);
  v10 = (_QWORD *)swift_task_alloc(dword_100160B44);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_1000072F4;
  return sub_10007A10C(v9, v6, v7);
}

uint64_t sub_10007C1BC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC19C(a1);
}

double sub_10007C1DC(uint64_t a1)
{
  return sub_1000BE510(a1);
}

uint64_t sub_10007C1FC()
{
  return 16;
}

__n128 sub_10007C208(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_10007C214()
{
  unint64_t result;

  result = qword_100160B50;
  if (!qword_100160B50)
  {
    result = swift_getWitnessTable(&unk_10010F290, &type metadata for FeaturedVideosViewSizePreferenceKey);
    atomic_store(result, &qword_100160B50);
  }
  return result;
}

uint64_t sub_10007C25C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = (int *)type metadata accessor for PromotionalAssetsView(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = v4 + v10;
  v14 = type metadata accessor for PromotionalAssetsViewModel(255, v5, v6, v13);
  v15 = type metadata accessor for Bindable(0, v14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v4 + v10, v15);
  swift_release(*(_QWORD *)(v4 + v10 + v7[9] + 8));
  swift_release(*(_QWORD *)(v4 + v10 + v7[10]));
  v16 = (_QWORD *)(v4 + v10 + v7[11]);
  v17 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
  }
  else
  {
    swift_release(*v16);
  }
  v19 = (_QWORD *)(v12 + v7[12]);
  v20 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v19, v21);
  }
  else
  {
    swift_release(*v19);
  }
  v22 = (_QWORD *)(v12 + v7[13]);
  v23 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for UserInterfaceSizeClass(0);
    v25 = *(_QWORD *)(v24 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
      (*(void (**)(_QWORD *, uint64_t))(v25 + 8))(v22, v24);
  }
  else
  {
    swift_release(*v22);
  }
  v26 = (_QWORD *)(v12 + v7[14]);
  if (swift_getEnumCaseMultiPayload(v26, v23) == 1)
  {
    v27 = type metadata accessor for UserInterfaceSizeClass(0);
    v28 = *(_QWORD *)(v27 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      (*(void (**)(_QWORD *, uint64_t))(v28 + 8))(v26, v27);
  }
  else
  {
    swift_release(*v26);
  }
  return swift_deallocObject(v4, v10 + v11, v9 | 7);
}

double sub_10007C48C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007BDA0(a1, sub_1000BC2A4, a3, a4);
}

uint64_t sub_10007C498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *((_QWORD *)v4 + 4);
  v6 = *((_QWORD *)v4 + 5);
  v7 = (int *)type metadata accessor for PromotionalAssetsView(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 48) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  swift_unknownObjectRelease(*((_QWORD *)v4 + 2));
  v12 = &v4[v10];
  v14 = type metadata accessor for PromotionalAssetsViewModel(255, v5, v6, v13);
  v15 = type metadata accessor for Bindable(0, v14);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(&v4[v10], v15);
  swift_release(*(_QWORD *)&v4[v10 + 8 + v7[9]]);
  swift_release(*(_QWORD *)&v4[v10 + v7[10]]);
  v16 = &v4[v10 + v7[11]];
  v17 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for DismissAction(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
  }
  else
  {
    swift_release(*(_QWORD *)v16);
  }
  v19 = &v12[v7[12]];
  v20 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v19, v21);
  }
  else
  {
    swift_release(*(_QWORD *)v19);
  }
  v22 = &v12[v7[13]];
  v23 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for UserInterfaceSizeClass(0);
    v25 = *(_QWORD *)(v24 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
      (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
  }
  else
  {
    swift_release(*(_QWORD *)v22);
  }
  v26 = &v12[v7[14]];
  if (swift_getEnumCaseMultiPayload(v26, v23) == 1)
  {
    v27 = type metadata accessor for UserInterfaceSizeClass(0);
    v28 = *(_QWORD *)(v27 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      (*(void (**)(char *, uint64_t))(v28 + 8))(v26, v27);
  }
  else
  {
    swift_release(*(_QWORD *)v26);
  }
  return swift_deallocObject(v4, v10 + v11, v9 | 7);
}

uint64_t sub_10007C6D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v7 = v4[4];
  v8 = v4[5];
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v7, v8, a4) - 8) + 80);
  v10 = v4[2];
  v11 = v4[3];
  v12 = (uint64_t)v4 + ((v9 + 48) & ~v9);
  v13 = (_QWORD *)swift_task_alloc(dword_100160B5C);
  *(_QWORD *)(v5 + 16) = v13;
  *v13 = v5;
  v13[1] = sub_100031054;
  return sub_100079FE8(a1, v10, v11, v12, v7, v8);
}

uint64_t sub_10007C770@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1000BBD7C();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

double sub_10007C7A0(uint64_t a1)
{
  return sub_1000BBDDC(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_10007C7D0()
{
  return 16;
}

__n128 sub_10007C7DC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_10007C7E8(double *a1@<X8>)
{
  *a1 = sub_1000BBE60();
}

void sub_10007C810(double *a1)
{
  sub_1000BBEB8(*a1);
}

uint64_t sub_10007C834()
{
  return 16;
}

__n128 sub_10007C840(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for PromotionalAssetsViewSafeAreaPreferenceKey()
{
  return &type metadata for PromotionalAssetsViewSafeAreaPreferenceKey;
}

ValueMetadata *type metadata accessor for PromotionalAssetsViewSizePreferenceKey()
{
  return &type metadata for PromotionalAssetsViewSizePreferenceKey;
}

ValueMetadata *type metadata accessor for FeaturedVideosViewSizePreferenceKey()
{
  return &type metadata for FeaturedVideosViewSizePreferenceKey;
}

ValueMetadata *type metadata accessor for TourPhotosViewSizePreferenceKey()
{
  return &type metadata for TourPhotosViewSizePreferenceKey;
}

uint64_t sub_10007C88C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t TupleTypeMetadata2;
  uint64_t v35;
  uint64_t TupleTypeMetadata;
  uint64_t v37;
  uint64_t WitnessTable;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t OpaqueTypeConformance2;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v81[4];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v1 = *a1;
  v2 = a1[1];
  v3 = type metadata accessor for NavigationPath(255);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
  v6 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v7 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v6, &unk_10011A038, &unk_10011A048);
  v8 = swift_getAssociatedTypeWitness(255, v7);
  v9 = swift_getAssociatedConformanceWitness(v7, v6, v8, &unk_10011B5EC, &unk_10011B604);
  type metadata accessor for TourPhotosView(255, v8, v9, v10);
  v11 = type metadata accessor for _ConditionalContent(255);
  v12 = type metadata accessor for Group(255, v11);
  v13 = sub_1000034AC(&qword_100160978);
  v14 = type metadata accessor for ModifiedContent(255, v12, v13);
  v15 = sub_1000034AC(&qword_100160980);
  v82 = type metadata accessor for ModifiedContent(255, v14, v15);
  v16 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v17 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v16, &unk_10011A038, &unk_10011A050);
  v19 = type metadata accessor for FeaturedVideosView(255, v16, v17, v18);
  v20 = sub_1000034AC(&qword_100160988);
  v21 = type metadata accessor for ModifiedContent(255, v19, v20);
  v22 = sub_1000034AC(&qword_100160990);
  v23 = type metadata accessor for ModifiedContent(255, v21, v22);
  v83 = type metadata accessor for Optional(255, v23);
  v84 = sub_1000034AC(&qword_100160998);
  v24 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v25 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v26 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v24, &unk_10011A038, &unk_10011A040);
  v27 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v25, &unk_10011A038, &unk_10011A058);
  v81[0] = v24;
  v81[1] = v25;
  v81[2] = v26;
  v81[3] = v27;
  type metadata accessor for PhoneWallpapersWatchFacesView(255, (uint64_t)v81);
  v29 = type metadata accessor for PhoneWallpaperView(255, v24, v26, v28);
  v30 = type metadata accessor for Optional(255, v29);
  v32 = type metadata accessor for WatchFacesView(255, v25, v27, v31);
  v33 = type metadata accessor for Optional(255, v32);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v30, v33, 0, 0);
  type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v35 = type metadata accessor for _ConditionalContent(255);
  v85 = type metadata accessor for Optional(255, v35);
  v86 = type metadata accessor for AppModule(255);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 5);
  v37 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v37);
  v39 = type metadata accessor for VStack(255, v37, WitnessTable);
  v40 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v39);
  v42 = type metadata accessor for ObservableScrollView(255, v39, v40, v41);
  v43 = type metadata accessor for ModifiedContent(255, v42, &type metadata for _SafeAreaRegionsIgnoringLayout);
  swift_getWitnessTable(&unk_1001103F0, v42);
  v44 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v43);
  v82 = v43;
  v83 = v44;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v82, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 0);
  v46 = sub_1000034AC(&qword_1001609A0);
  v47 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v46);
  v48 = sub_1000034AC(&qword_1001609A8);
  v49 = type metadata accessor for ModifiedContent(255, v47, v48);
  v82 = v43;
  v83 = v44;
  swift_getOpaqueTypeConformance2(&v82, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
  sub_100007D40(&qword_1001609B0, &qword_1001609A0, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v47);
  sub_100007D40(&qword_1001609B8, &qword_1001609A8, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
  v50 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v49);
  v51 = type metadata accessor for NavigationStack(255, v3, v49, v50);
  v52 = sub_1000034AC(&qword_1001609C0);
  v53 = type metadata accessor for ModifiedContent(255, v51, v52);
  v54 = sub_1000034AC(&qword_1001609C8);
  v55 = type metadata accessor for ModifiedContent(255, v53, v54);
  v56 = sub_1000034AC(&qword_1001609D0);
  v57 = type metadata accessor for ModifiedContent(255, v55, v56);
  v58 = sub_1000034AC(&qword_1001609D8);
  v59 = type metadata accessor for ModifiedContent(255, v57, v58);
  v60 = sub_1000034AC(&qword_1001609E0);
  swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v51);
  sub_100007D40(&qword_1001609E8, &qword_1001609C0, (uint64_t)&unk_10010F810);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v53);
  sub_100007D40(&qword_1001609F0, &qword_1001609C8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v55);
  sub_100007D40(&qword_1001609F8, &qword_1001609D0, (uint64_t)&unk_1001134C0);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v57);
  sub_100007D40(&qword_100160A00, &qword_1001609D8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v61 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v59);
  v62 = sub_1000034AC(&qword_100160A08);
  v63 = sub_10005C954(&qword_100160A10, &qword_100160A08, (void (*)(void))sub_100045694);
  v82 = v62;
  v83 = v63;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v82, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 1);
  v82 = v59;
  v83 = v60;
  v84 = v61;
  v85 = OpaqueTypeConformance2;
  v65 = swift_getOpaqueTypeMetadata2(255, &v82, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v66 = type metadata accessor for ModifiedContent(255, v65, &type metadata for _AppearanceActionModifier);
  v67 = type metadata accessor for ModifiedContent(255, v66, &type metadata for _AppearanceActionModifier);
  v68 = type metadata accessor for _TaskModifier(255);
  v69 = type metadata accessor for ModifiedContent(255, v67, v68);
  v70 = type metadata accessor for ModifiedContent(255, v69, &type metadata for _AppearanceActionModifier);
  v71 = type metadata accessor for ModifiedContent(255, v70, &type metadata for _AppearanceActionModifier);
  v72 = sub_1000034AC(&qword_10015D4A0);
  v82 = v59;
  v83 = v60;
  v84 = v61;
  v85 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2(&v82, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v66);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v67);
  sub_100003B3C(&qword_10015D458, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v69);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v70);
  v73 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v71);
  v74 = sub_10007B5F4();
  v82 = v71;
  v83 = v72;
  v84 = v73;
  v85 = v74;
  v75 = swift_getOpaqueTypeMetadata2(255, &v82, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v82 = v71;
  v83 = v72;
  v84 = v73;
  v85 = v74;
  v76 = swift_getOpaqueTypeConformance2(&v82, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v82 = v75;
  v83 = v72;
  v84 = v76;
  v85 = v74;
  v77 = swift_getOpaqueTypeMetadata2(255, &v82, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v78 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v79 = type metadata accessor for ModifiedContent(255, v77, v78);
  v82 = v75;
  v83 = v72;
  v84 = v76;
  v85 = v74;
  swift_getOpaqueTypeConformance2(&v82, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v79);
}

unint64_t sub_10007D1A4(uint64_t a1)
{
  unint64_t result;

  result = sub_10007BD4C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10007D1C8(uint64_t a1)
{
  unint64_t result;

  result = sub_10007C214();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10007D1EC(uint64_t a1)
{
  unint64_t result;

  result = sub_10007B67C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10007D210(uint64_t a1)
{
  unint64_t result;

  result = sub_10007B71C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10007D23C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t);
  uint64_t result;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  char *v35;
  _QWORD v36[2];
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v36[1] = a1;
  v45 = type metadata accessor for Calendar(0);
  v41 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v2 = (char *)v36 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for TimeZone(0);
  v40 = *(_QWORD *)(v46 - 8);
  v3 = __chkstk_darwin(v46);
  v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)v36 - v6;
  v8 = type metadata accessor for DateInterval(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for Date(0);
  v38 = *(_QWORD *)(v44 - 8);
  v12 = __chkstk_darwin(v44);
  v43 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)v36 - v15;
  __chkstk_darwin(v14);
  v42 = (char *)v36 - v17;
  v18 = sub_100003E70(&qword_100160BC0);
  v19 = ((uint64_t (*)(void))Event.Time.dateInterval.getter)();
  DateInterval.start.getter(v19);
  v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v39 = v8;
  v37 = v20;
  v20(v11, v8);
  Event.Time.timeZone.getter(v18);
  v21 = TimeZone.secondsFromGMT(for:)(v16);
  v22 = static Calendar.current.getter(v21);
  Calendar.timeZone.getter(v22);
  v41 = *(_QWORD *)(v41 + 8);
  ((void (*)(char *, uint64_t))v41)(v2, v45);
  v23 = TimeZone.secondsFromGMT(for:)(v16);
  v24 = *(uint64_t (**)(char *, uint64_t))(v40 + 8);
  result = v24(v5, v46);
  if (__OFSUB__(v21, v23))
  {
    __break(1u);
  }
  else
  {
    Date.addingTimeInterval(_:)(result, (double)(v21 - v23));
    v24(v7, v46);
    v40 = *(_QWORD *)(v38 + 8);
    ((void (*)(char *, uint64_t))v40)(v16, v44);
    v26 = Event.Time.dateInterval.getter(v18);
    v27 = v5;
    v28 = v2;
    v29 = v7;
    v30 = v43;
    DateInterval.end.getter(v26);
    v37(v11, v39);
    Event.Time.timeZone.getter(v18);
    v31 = TimeZone.secondsFromGMT(for:)(v30);
    v32 = static Calendar.current.getter(v31);
    Calendar.timeZone.getter(v32);
    ((void (*)(char *, uint64_t))v41)(v28, v45);
    v33 = TimeZone.secondsFromGMT(for:)(v30);
    result = v24(v27, v46);
    if (!__OFSUB__(v31, v33))
    {
      v34 = (double)(v31 - v33);
      v35 = v43;
      Date.addingTimeInterval(_:)(result, v34);
      v24(v29, v46);
      ((void (*)(char *, uint64_t))v40)(v35, v44);
      return DateInterval.init(start:end:)(v42, v16);
    }
  }
  __break(1u);
  return result;
}

void sub_10007D5A4(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(char *, uint64_t, uint64_t, __n128);
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t, uint64_t);
  char *v122;
  char *v123;
  char *v124;
  int *v125;
  _QWORD *v126;
  char *v127;
  uint64_t v128;
  void (*v129)(char *, uint64_t);
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  unint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  _QWORD v166[2];

  v3 = v2;
  v160 = a1;
  v161 = a2;
  v137 = sub_100003E70(&qword_100160BB8);
  v4 = __chkstk_darwin(v137);
  v136 = (uint64_t)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v135 = (char *)&v130 - v6;
  v7 = sub_100003E70(&qword_10015DD00);
  __chkstk_darwin(v7);
  v159 = (char *)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = type metadata accessor for DateInterval(0);
  v154 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v150 = (uint64_t)&v130 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = sub_100003E70(&qword_100160BC0);
  v156 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153);
  v152 = (char *)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003E70(&qword_10015D4B8);
  v162 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v130 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v131 = (char *)&v130 - v16;
  __chkstk_darwin(v15);
  v130 = (char *)&v130 - v17;
  v18 = sub_100003E70(&qword_100160228);
  v19 = __chkstk_darwin(v18);
  v132 = (char *)&v130 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v155 = (char *)&v130 - v21;
  v157 = type metadata accessor for Date(0);
  v163 = *(_QWORD *)(v157 - 8);
  v22 = __chkstk_darwin(v157);
  v134 = (char *)&v130 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v133 = (char *)&v130 - v25;
  v26 = __chkstk_darwin(v24);
  v158 = (char *)&v130 - v27;
  __chkstk_darwin(v26);
  v164 = (char *)&v130 - v28;
  v29 = type metadata accessor for Locale(0);
  __chkstk_darwin(v29);
  v149 = (char *)&v130 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v31);
  v148 = (char *)&v130 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_100003E70(&qword_10015D7F8);
  v146 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v145 = (char *)&v130 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100003E70(&qword_10015FE90);
  v143 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v142 = (char *)&v130 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100003E70(&qword_10015E418);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v36 = (char *)&v130 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = sub_100003E70(&qword_10015D788);
  v37 = __chkstk_darwin(v139);
  v39 = (char *)&v130 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v41 = (char *)&v130 - v40;
  v42 = sub_100003E70(&qword_10015D7F0);
  v43 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v45 = (char *)&v130 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 128)];
  LOBYTE(v166[0]) = 0;
  Published.init(initialValue:)(v166, &type metadata for Bool);
  v138 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  v138(v46, v45, v42);
  v47 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 136)];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v162 + 56))(v41, 1, 1, v11);
  sub_100007ADC((uint64_t)v41, (uint64_t)v39, &qword_10015D788);
  Published.init(initialValue:)(v39, v139);
  sub_100008194((uint64_t)v41, &qword_10015D788);
  (*(void (**)(char *, char *, uint64_t))(v140 + 32))(v47, v36, v141);
  v48 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 144)];
  v166[0] = 0;
  v166[1] = 0xE000000000000000;
  v49 = v142;
  Published.init(initialValue:)(v166, &type metadata for String);
  (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v48, v49, v144);
  v50 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 152)];
  LOBYTE(v166[0]) = 0;
  Published.init(initialValue:)(v166, &type metadata for Bool);
  v138(v50, v45, v42);
  v51 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 160)];
  v166[0] = 0;
  v52 = v145;
  Published.init(initialValue:)(v166, &type metadata for CGFloat);
  (*(void (**)(char *, char *, uint64_t))(v146 + 32))(v51, v52, v147);
  v53 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 184)];
  *(_QWORD *)v53 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002CLL, 0x80000001001159D0);
  *((_QWORD *)v53 + 1) = v54;
  v53[16] = v55 & 1;
  *((_QWORD *)v53 + 3) = v56;
  v57 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 192)];
  *(_QWORD *)v57 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000030, 0x80000001001166D0);
  *((_QWORD *)v57 + 1) = v58;
  v57[16] = v59 & 1;
  *((_QWORD *)v57 + 3) = v60;
  v61 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 200)];
  *(_QWORD *)v61 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000025, 0x8000000100115840);
  *((_QWORD *)v61 + 1) = v62;
  v61[16] = v63 & 1;
  *((_QWORD *)v61 + 3) = v64;
  v65 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 208)];
  v66 = v148;
  v67 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ALL, 0x8000000100116710);
  v68 = v149;
  static Locale.current.getter(v67);
  *(_QWORD *)v65 = String.init(localized:table:bundle:locale:comment:)(v66, 0, 0, 0, v68, 0, 0, 256);
  *((_QWORD *)v65 + 1) = v69;
  v70 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 112)];
  v71 = type metadata accessor for Venue(0);
  v147 = *(_QWORD *)(v71 - 8);
  v72 = *(void (**)(char *, uint64_t))(v147 + 16);
  v148 = (char *)v71;
  v72(v70, v160);
  v73 = v161;
  *(_QWORD *)&v3[*(_QWORD *)(*(_QWORD *)v3 + 120)] = v161;
  v74 = *(_QWORD *)(*(_QWORD *)v3 + 176);
  v149 = v3;
  v75 = &v3[v74];
  v76 = v73;
  swift_beginAccess(v75, v166, 33, 0);
  v165 = v76;
  swift_bridgeObjectRetain_n(v76, 2);
  v77 = sub_100003E70(&qword_10015E420);
  Published.init(initialValue:)(&v165, v77);
  swift_endAccess(v166);
  v78 = *(_QWORD *)(v76 + 16);
  if (v78)
  {
    v79 = v76 + ((*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80));
    v80 = v162;
    v81 = v130;
    (*(void (**)(char *, uint64_t, uint64_t))(v162 + 16))(v130, v79, v11);
    v82 = sub_100007D40((unint64_t *)&qword_10015D4C8, &qword_10015D4B8, (uint64_t)&unk_10010CF80);
    v83 = v152;
    (*(void (**)(uint64_t, uint64_t))(v82 + 200))(v11, v82);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v11);
    v84 = v150;
    sub_10007D23C(v150);
    v85 = (*(uint64_t (**)(char *, uint64_t))(v156 + 8))(v83, v153);
    v86 = v155;
    DateInterval.start.getter(v85);
    v87 = v151;
    (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v84, v151);
    v88 = v163;
    v89 = v157;
    v146 = *(_QWORD *)(v163 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v146)(v86, 0, 1, v157);
    v90 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v89);
    v91 = v88;
    v92 = v84;
    v93 = v156;
    if (v90 != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v164, v155, v89);
      goto LABEL_8;
    }
    v94 = (uint64_t)v155;
  }
  else
  {
    v94 = (uint64_t)v155;
    v89 = v157;
    v146 = *(_QWORD *)(v163 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v146)(v155, 1, 1, v157);
    v92 = v150;
    v87 = v151;
    v93 = v156;
  }
  ((void (*)(void))Date.init())();
  sub_100008194(v94, &qword_100160228);
  if (!v78)
  {
    v95 = (uint64_t)v132;
    v96 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v146)(v132, 1, 1, v89);
    v97 = v163;
    goto LABEL_10;
  }
LABEL_8:
  if (v78 <= *(_QWORD *)(v161 + 16))
  {
    v98 = v162;
    v156 = (*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
    v99 = v87;
    v100 = v131;
    (*(void (**)(char *, unint64_t, uint64_t))(v162 + 16))(v131, v161 + v156 + *(_QWORD *)(v162 + 72) * (v78 - 1), v11);
    v101 = sub_100007D40((unint64_t *)&qword_10015D4C8, &qword_10015D4B8, (uint64_t)&unk_10010CF80);
    v102 = v152;
    (*(void (**)(uint64_t, uint64_t))(v101 + 200))(v11, v101);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v100, v11);
    sub_10007D23C(v92);
    v103 = (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v102, v153);
    v95 = (uint64_t)v132;
    DateInterval.start.getter(v103);
    (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v92, v99);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v146)(v95, 0, 1, v89);
    v97 = v163;
    v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v163 + 48))(v95, 1, v89);
    if ((_DWORD)v96 != 1)
    {
      v108 = (uint64_t)v158;
      (*(void (**)(char *, uint64_t, uint64_t))(v97 + 32))(v158, v95, v89);
      sub_100063328((uint64_t)v164, v108, v159);
      v166[0] = _swiftEmptyArrayStorage;
      v105 = v161;
      v106 = v162;
      v107 = v156;
      goto LABEL_13;
    }
LABEL_10:
    v104 = (uint64_t)v158;
    Date.init()(v96);
    sub_100008194(v95, &qword_100160228);
    sub_100063328((uint64_t)v164, v104, v159);
    v166[0] = _swiftEmptyArrayStorage;
    if (!v78)
    {
      v115 = _swiftEmptyArrayStorage;
      v105 = v161;
LABEL_17:
      v116 = v105;
      v117 = sub_100028410((uint64_t)v115);
      swift_bridgeObjectRelease(v115);
      swift_bridgeObjectRetain(v117);
      v119 = sub_1000F5604(v118);
      swift_bridgeObjectRelease(v117);
      v166[0] = v119;
      sub_10007F828(v166);
      swift_bridgeObjectRelease(v117);
      v120 = v166[0];
      v121 = *(void (**)(char *, uint64_t, uint64_t))(v97 + 16);
      v122 = v133;
      v121(v133, (uint64_t)v164, v89);
      v123 = v134;
      v124 = v158;
      v121(v134, (uint64_t)v158, v89);
      v125 = (int *)v137;
      v126 = v135;
      DateInterval.init(start:end:)(v122, v123);
      *v126 = 0;
      v126[1] = v116;
      v126[2] = _swiftEmptyArrayStorage;
      v127 = v159;
      sub_100007ADC((uint64_t)v159, (uint64_t)v126 + v125[12], &qword_10015DD00);
      *(_QWORD *)((char *)v126 + v125[13]) = v120;
      *(_QWORD *)((char *)v126 + v125[14]) = &_swiftEmptySetSingleton;
      swift_beginAccess(&v149[*(_QWORD *)(*(_QWORD *)v149 + 168)], v166, 33, 0);
      v128 = v136;
      sub_100007ADC((uint64_t)v126, v136, &qword_100160BB8);
      Published.init(initialValue:)(v128, v125);
      sub_100008194((uint64_t)v126, &qword_100160BB8);
      swift_endAccess(v166);
      (*(void (**)(uint64_t, char *))(v147 + 8))(v160, v148);
      sub_100008194((uint64_t)v127, &qword_10015DD00);
      v129 = *(void (**)(char *, uint64_t))(v163 + 8);
      v129(v124, v89);
      v129(v164, v89);
      return;
    }
    v105 = v161;
    v106 = v162;
    v107 = (*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
LABEL_13:
    v109 = v105 + v107;
    v110 = *(_QWORD *)(v106 + 72);
    v111 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v106 + 16);
    v112 = swift_bridgeObjectRetain(v105);
    do
    {
      v113 = v111(v14, v109, v11, v112);
      v114 = Event<>.genres.getter(v113);
      (*(void (**)(char *, uint64_t))(v106 + 8))(v14, v11);
      sub_10007F9FC(v114);
      v109 += v110;
      --v78;
    }
    while (v78);
    swift_bridgeObjectRelease(v105);
    v115 = (_QWORD *)v166[0];
    v89 = v157;
    v97 = v163;
    goto LABEL_17;
  }
  __break(1u);
  swift_release(v166[0]);
  __break(1u);
}

uint64_t sub_10007E378()
{
  uint64_t v0;

  v0 = type metadata accessor for VenueController(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return sub_1000035E4();
}

ValueMetadata *type metadata accessor for VenueEventContentView()
{
  return &type metadata for VenueEventContentView;
}

uint64_t sub_10007E3BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100119CF4, 1);
}

uint64_t sub_10007E3CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t, __n128);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (**v75)();
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  _OWORD *v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  _QWORD *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v106;
  void (*v107)(char *, uint64_t, uint64_t);
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(char *, char *, uint64_t);
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  void (**v147)();
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  _OWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  __int128 v180;
  __int128 v181;

  v178 = a1;
  v156 = type metadata accessor for TaskPriority(0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v153 = (char *)&v140 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_100003E70(&qword_10015D750);
  v151 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v150 = (char *)&v140 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_100003E70(&qword_10015D758);
  v4 = __chkstk_darwin(v177);
  v149 = (char *)&v140 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v154 = (uint64_t)&v140 - v6;
  v157 = type metadata accessor for ErrorView(0);
  v7 = __chkstk_darwin(v157);
  v158 = (uint64_t *)((char *)&v140 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v160 = (uint64_t)&v140 - v9;
  v170 = sub_100003E70(&qword_10015D760);
  v10 = __chkstk_darwin(v170);
  v159 = (uint64_t)&v140 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v161 = (uint64_t)&v140 - v12;
  v174 = sub_100003E70(&qword_100160B68);
  __chkstk_darwin(v174);
  v176 = (uint64_t)&v140 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = sub_100003E70(&qword_100160B70);
  __chkstk_darwin(v166);
  v168 = (uint64_t)&v140 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_100003E70(&qword_100160B78);
  __chkstk_darwin(v175);
  v169 = (char *)&v140 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_100003E70(&qword_100160B80);
  v16 = __chkstk_darwin(v167);
  v147 = (void (**)())((char *)&v140 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v148 = (uint64_t)&v140 - v18;
  v19 = sub_100003E70(&qword_10015E408);
  __chkstk_darwin(v19);
  v162 = (uint64_t)&v140 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Venue(0);
  v164 = *(_QWORD *)(v21 - 8);
  v165 = v21;
  v22 = __chkstk_darwin(v21);
  v146 = (char *)&v140 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = v23;
  __chkstk_darwin(v22);
  v163 = (char *)&v140 - v24;
  v25 = sub_100003E70(&qword_10015CFD0);
  __chkstk_darwin(v25);
  v27 = (char *)&v140 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100003E70(&qword_10015D168);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28);
  v144 = (char *)&v140 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = v31;
  __chkstk_darwin(v30);
  v179 = (char *)&v140 - v32;
  v34 = *(_QWORD *)(v1 + 16);
  v33 = *(_QWORD *)(v1 + 24);
  v171 = (_OWORD *)v1;
  v35 = *(unsigned __int8 *)(v1 + 32);
  v36 = type metadata accessor for VenueController(0);
  v172 = sub_100003B3C(&qword_100160B88, type metadata accessor for VenueController, (uint64_t)&unk_100109C7C);
  v173 = v34;
  v37 = StateObject.wrappedValue.getter(v34, v33, v35, v36, v172);
  KeyPath = swift_getKeyPath(&unk_10010F418);
  v39 = swift_getKeyPath(&unk_10010F440);
  static Published.subscript.getter(v37, KeyPath, v39);
  swift_release(v37);
  swift_release(KeyPath);
  v40 = swift_release(v39);
  v41 = v29;
  v42 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v29 + 48);
  v43 = v28;
  if (v42(v27, 1, v28, v40) == 1)
  {
    v44 = v36;
    v45 = v35;
    v46 = v33;
    sub_100008194((uint64_t)v27, &qword_10015CFD0);
    v47 = v172;
    v48 = v173;
  }
  else
  {
    v49 = v41;
    v142 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    v142(v179, v27, v43);
    v48 = v173;
    v46 = v33;
    v45 = v35;
    v44 = v36;
    v50 = v36;
    v47 = v172;
    v51 = StateObject.wrappedValue.getter(v173, v33, v35, v50, v172);
    v52 = v162;
    sub_100002E00(v162);
    v53 = swift_release(v51);
    v54 = v164;
    v55 = v165;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v164 + 48))(v52, 1, v165, v53) != 1)
    {
      v106 = v54;
      v107 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 32);
      v108 = v163;
      v107(v163, v52, v55);
      v109 = v146;
      (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v146, v108, v55);
      v110 = v144;
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v144, v179, v43);
      v111 = *(unsigned __int8 *)(v106 + 80);
      v112 = v49;
      v141 = v49;
      v113 = (v111 + 16) & ~v111;
      v114 = *(unsigned __int8 *)(v112 + 80);
      v115 = v55;
      v116 = (v145 + v114 + v113) & ~v114;
      v117 = swift_allocObject(&unk_100150678, v116 + v143, v111 | v114 | 7);
      v107((char *)(v117 + v113), (uint64_t)v109, v115);
      v142((char *)(v117 + v116), v110, v43);
      v118 = (uint64_t)v147;
      *v147 = sub_10007F7C4;
      *(_QWORD *)(v118 + 8) = v117;
      *(_BYTE *)(v118 + 16) = 0;
      v119 = sub_100003E70(&qword_10015D470);
      v120 = swift_allocObject(v119, 17, 7);
      *(_BYTE *)(v120 + 16) = 0;
      v121 = sub_100007D40(&qword_10015D478, &qword_10015D470, (uint64_t)&unk_1001101D4);
      *(_QWORD *)(v118 + 24) = ObservedObject.init(wrappedValue:)(v120, v119, v121);
      *(_QWORD *)(v118 + 32) = v122;
      *(_BYTE *)(v118 + 40) = FocusState.init<>()() & 1;
      *(_QWORD *)(v118 + 48) = v123;
      *(_BYTE *)(v118 + 56) = v124 & 1;
      v125 = v167;
      v126 = (_QWORD *)(v118 + *(int *)(v167 + 60));
      *v126 = swift_getKeyPath(&unk_10010F4A8);
      v127 = sub_100003E70(&qword_10015D488);
      swift_storeEnumTagMultiPayload(v126, v127, 0);
      v128 = (_QWORD *)(v118 + *(int *)(v125 + 64));
      v129 = type metadata accessor for RemoteViewConfiguration();
      v130 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
      *v128 = EnvironmentObject.init()(v129, v130);
      v128[1] = v131;
      v132 = v148;
      sub_100007A98(v118, v148, &qword_100160B80);
      v133 = v168;
      sub_100007ADC(v132, v168, &qword_100160B80);
      swift_storeEnumTagMultiPayload(v133, v166, 0);
      v134 = sub_100007D40(&qword_100160BA8, &qword_100160B80, (uint64_t)&unk_10010DEB0);
      v135 = sub_10000E4B8();
      v136 = (uint64_t)v169;
      _ConditionalContent<>.init(storage:)(v133, v125, v170, v134, v135);
      v137 = v176;
      sub_100007ADC(v136, v176, &qword_100160B78);
      swift_storeEnumTagMultiPayload(v137, v174, 0);
      v138 = sub_10007F678();
      v139 = sub_10000E53C();
      _ConditionalContent<>.init(storage:)(v137, v175, v177, v138, v139);
      sub_100008194(v136, &qword_100160B78);
      sub_100008194(v132, &qword_100160B80);
      (*(void (**)(char *, uint64_t))(v106 + 8))(v163, v115);
      return (*(uint64_t (**)(char *, uint64_t))(v141 + 8))(v179, v43);
    }
    (*(void (**)(char *, uint64_t))(v49 + 8))(v179, v43);
    sub_100008194(v52, &qword_10015E408);
  }
  v56 = StateObject.wrappedValue.getter(v48, v46, v45, v44, v47);
  v57 = swift_getKeyPath(&unk_10010F460);
  v58 = swift_getKeyPath(&unk_10010F488);
  static Published.subscript.getter(v56, v57, v58);
  swift_release(v56);
  swift_release(v57);
  swift_release(v58);
  v59 = v181;
  v60 = swift_errorRelease(v181);
  if (v59)
  {
    v61 = swift_getKeyPath(&unk_10010F4A8);
    v62 = (uint64_t)v158;
    *v158 = v61;
    v63 = sub_100003E70(&qword_10015D488);
    swift_storeEnumTagMultiPayload(v62, v63, 0);
    v64 = (_QWORD *)(v62 + *(int *)(v157 + 20));
    v65 = type metadata accessor for RemoteViewConfiguration();
    v66 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    *v64 = EnvironmentObject.init()(v65, v66);
    v64[1] = v67;
    v68 = v160;
    sub_10000E618(v62, v160);
    v69 = v171;
    v70 = *v171;
    v180 = *(_OWORD *)((char *)v171 + 40);
    v181 = v70;
    v71 = swift_allocObject(&unk_100150650, 72, 7);
    v72 = v69[1];
    *(_OWORD *)(v71 + 16) = *v69;
    *(_OWORD *)(v71 + 32) = v72;
    *(_OWORD *)(v71 + 48) = v69[2];
    *(_QWORD *)(v71 + 64) = *((_QWORD *)v69 + 6);
    v73 = v159;
    sub_10000E6A0(v68, v159);
    v74 = v170;
    v75 = (uint64_t (**)())(v73 + *(int *)(v170 + 36));
    *v75 = sub_10007F704;
    v75[1] = (uint64_t (*)())v71;
    v75[2] = 0;
    v75[3] = 0;
    sub_10000E3E4((uint64_t)&v181);
    sub_10000E0FC(v48, v46);
    sub_10000E40C(&v180);
    sub_10000E6E4(v68);
    v76 = &qword_10015D760;
    v77 = v161;
    sub_100007A98(v73, v161, &qword_10015D760);
    v78 = v168;
    sub_100007ADC(v77, v168, &qword_10015D760);
    swift_storeEnumTagMultiPayload(v78, v166, 1);
    v79 = sub_100007D40(&qword_100160BA8, &qword_100160B80, (uint64_t)&unk_10010DEB0);
    v80 = sub_10000E4B8();
    v81 = (uint64_t)v169;
    _ConditionalContent<>.init(storage:)(v78, v167, v74, v79, v80);
    v82 = v176;
    sub_100007ADC(v81, v176, &qword_100160B78);
    swift_storeEnumTagMultiPayload(v82, v174, 0);
    v83 = sub_10007F678();
    v84 = sub_10000E53C();
    _ConditionalContent<>.init(storage:)(v82, v175, v177, v83, v84);
    sub_100008194(v81, &qword_100160B78);
    v85 = v77;
  }
  else
  {
    v86 = v150;
    ProgressView<>.init<>()(v60);
    v87 = v171;
    v88 = *v171;
    v180 = *(_OWORD *)((char *)v171 + 40);
    v181 = v88;
    v89 = swift_allocObject(&unk_100150628, 72, 7);
    v90 = v87[1];
    *(_OWORD *)(v89 + 16) = *v87;
    *(_OWORD *)(v89 + 32) = v90;
    *(_OWORD *)(v89 + 48) = v87[2];
    *(_QWORD *)(v89 + 64) = *((_QWORD *)v87 + 6);
    sub_10000E0FC(v48, v46);
    sub_10000E3E4((uint64_t)&v181);
    v91 = sub_10000E40C(&v180);
    v92 = v153;
    static TaskPriority.userInitiated.getter(v91);
    v93 = v177;
    v94 = (uint64_t)v149;
    v95 = &v149[*(int *)(v177 + 36)];
    v96 = type metadata accessor for _TaskModifier(0);
    v97 = v155;
    v98 = v156;
    (*(void (**)(char *, char *, uint64_t))(v155 + 16))(&v95[*(int *)(v96 + 20)], v92, v156);
    *(_QWORD *)v95 = &unk_100160B98;
    *((_QWORD *)v95 + 1) = v89;
    v99 = v151;
    v100 = v152;
    (*(void (**)(uint64_t, char *, uint64_t))(v151 + 16))(v94, v86, v152);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v92, v98);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v86, v100);
    v76 = &qword_10015D758;
    v101 = v154;
    sub_100007A98(v94, v154, &qword_10015D758);
    v102 = v176;
    sub_100007ADC(v101, v176, &qword_10015D758);
    swift_storeEnumTagMultiPayload(v102, v174, 1);
    v103 = sub_10007F678();
    v104 = sub_10000E53C();
    _ConditionalContent<>.init(storage:)(v102, v175, v93, v103, v104);
    v85 = v101;
  }
  return sub_100008194(v85, v76);
}

void sub_10007F0F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = type metadata accessor for Venue(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  v6 = sub_100003E70(&qword_10015D168);
  v7 = VenueSchedule.events.getter(v6);
  v8 = sub_100003E70(&qword_100160BB0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  sub_10007D5A4((uint64_t)v4, v7);
}

uint64_t sub_10007F1A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = type metadata accessor for VenueController(0);
  v6 = sub_100003B3C(&qword_100160B88, type metadata accessor for VenueController, (uint64_t)&unk_100109C7C);
  v7 = StateObject.wrappedValue.getter(v2, v3, v4, v5, v6);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = v7;
    v11 = *(_QWORD *)a1;
    v10 = *(_QWORD *)(a1 + 8);
    swift_retain(v8);
    swift_bridgeObjectRetain(v10);
    sub_1000DADAC(v11, v10, 5, v8);
    swift_release(v9);
    swift_release(v8);
    return swift_bridgeObjectRelease(v10);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 48);
    v14 = type metadata accessor for RemoteViewConfiguration();
    v15 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    result = EnvironmentObject.error()(0, v13, v14, v15);
    __break(1u);
  }
  return result;
}

uint64_t sub_10007F2A0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[2] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[3] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[4] = v3;
  v1[5] = v4;
  return swift_task_switch(sub_10007F30C, v3, v4);
}

uint64_t sub_10007F30C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[2];
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v4 = *(unsigned __int8 *)(v1 + 32);
  v5 = type metadata accessor for VenueController(0);
  v6 = sub_100003B3C(&qword_100160B88, type metadata accessor for VenueController, (uint64_t)&unk_100109C7C);
  v0[6] = StateObject.wrappedValue.getter(v3, v2, v4, v5, v6);
  v7 = *(_QWORD *)v1;
  v8 = *(_QWORD *)(v1 + 8);
  v9 = (_QWORD *)swift_task_alloc(dword_10015D18C);
  v0[7] = v9;
  *v9 = v0;
  v9[1] = sub_10000DB48;
  return sub_100002F90(v7, v8);
}

uint64_t sub_10007F3C4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;

  v1 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010F418);
  v3 = swift_getKeyPath(&unk_10010F440);
  static Published.subscript.getter(v1, KeyPath, v3);
  swift_release(KeyPath);
  return swift_release(v3);
}

uint64_t sub_10007F430(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v14;

  v4 = sub_100003E70(&qword_10015CFD0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v14 - v8;
  sub_100007ADC(a1, (uint64_t)&v14 - v8, &qword_10015CFD0);
  v10 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010F418);
  v12 = swift_getKeyPath(&unk_10010F440);
  sub_100007ADC((uint64_t)v9, (uint64_t)v7, &qword_10015CFD0);
  swift_retain(v10);
  static Published.subscript.setter(v7, v10, KeyPath, v12);
  return sub_100008194((uint64_t)v9, &qword_10015CFD0);
}

uint64_t sub_10007F52C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010F460);
  v5 = swift_getKeyPath(&unk_10010F488);
  static Published.subscript.getter(v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10007F5AC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010F460);
  v5 = swift_getKeyPath(&unk_10010F488);
  v7 = v2;
  swift_errorRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_10007F62C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_100160B94);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1000072F4;
  return sub_10007F2A0(v0 + 16);
}

unint64_t sub_10007F678()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160BA0;
  if (!qword_100160BA0)
  {
    v1 = sub_1000034AC(&qword_100160B78);
    sub_100007D40(&qword_100160BA8, &qword_100160B80, (uint64_t)&unk_10010DEB0);
    sub_10000E4B8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160BA0);
  }
  return result;
}

uint64_t sub_10007F704()
{
  uint64_t v0;

  return sub_10007F1A0(v0 + 16);
}

uint64_t sub_10007F70C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for Venue(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = sub_100003E70(&qword_10015D168);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

void sub_10007F7C4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = type metadata accessor for Venue(0);
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  sub_100003E70(&qword_10015D168);
  sub_10007F0F0(v0 + v2);
}

Swift::Int sub_10007F828(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for Genre(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_1000818AC(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_10008019C(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_10007F8A8(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_1000F4F20(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10007F9FC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  int isUniquelyReferenced_nonNull_native;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t result;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  void (*v51)(_QWORD, _QWORD, _QWORD);
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  char *v57;
  char *v58;
  uint64_t (*v59)(unint64_t, char *, uint64_t);
  int64_t v60;
  unint64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  unint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t, uint64_t);
  int64_t v70;
  void (*v71)(_QWORD, _QWORD, _QWORD);
  unint64_t v72;
  unint64_t v73;
  unsigned int (*v74)(uint64_t, uint64_t, uint64_t);
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;

  v3 = type metadata accessor for Genre(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v79 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003E70(&qword_100160BD0);
  v7 = __chkstk_darwin(v6);
  v80 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v68 - v10;
  __chkstk_darwin(v9);
  v16 = (char *)&v68 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *v1;
  v19 = *(_QWORD *)(*v1 + 16);
  v20 = v19 + v17;
  if (__OFADD__(v19, v17))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v18;
  v78 = v11;
  if (!isUniquelyReferenced_nonNull_native || (v22 = *(_QWORD *)(v18 + 24) >> 1, v22 < v20))
  {
    if (v19 <= v20)
      v23 = v19 + v17;
    else
      v23 = v19;
    v18 = sub_1000F5040(isUniquelyReferenced_nonNull_native, v23, 1, v18);
    *v1 = v18;
    v22 = *(_QWORD *)(v18 + 24) >> 1;
  }
  v24 = *(_QWORD *)(v18 + 16);
  v19 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v20 = *(_QWORD *)(v4 + 72);
  v25 = v22 - v24;
  v26 = sub_1000F5C48(&v81, v18 + v19 + v20 * v24, v22 - v24, a1);
  if (v26 < v17)
    goto LABEL_15;
  if (v26)
  {
    v28 = *(_QWORD *)(v18 + 16);
    v29 = __OFADD__(v28, v26);
    v30 = v28 + v26;
    if (v29)
    {
      __break(1u);
LABEL_20:
      v35 = a1 + 1;
      if (__OFADD__(a1, 1))
      {
        __break(1u);
      }
      else
      {
        v36 = (v27 + 64) >> 6;
        v77 = a1;
        if (v35 >= v36)
          goto LABEL_41;
        v37 = *(_QWORD *)(v18 + 8 * v35);
        if (v37)
        {
LABEL_23:
          v32 = (v37 - 1) & v37;
          v33 = __clz(__rbit64(v37)) + (v35 << 6);
          a1 = v35;
          goto LABEL_18;
        }
        v38 = a1 + 2;
        v77 = a1 + 1;
        if (a1 + 2 >= v36)
          goto LABEL_41;
        v14 = v19;
        v13 = v25;
        v12 = v17;
        v37 = *(_QWORD *)(v18 + 8 * v38);
        if (v37)
        {
LABEL_26:
          v35 = v38;
          goto LABEL_23;
        }
        v77 = a1 + 2;
        v18 = v76;
        if (a1 + 3 >= v36)
          goto LABEL_41;
        v37 = *(_QWORD *)(v76 + 8 * (a1 + 3));
        if (v37)
        {
          v35 = a1 + 3;
          goto LABEL_23;
        }
        v38 = a1 + 4;
        v77 = a1 + 3;
        v18 = v76;
        if (a1 + 4 >= v36)
          goto LABEL_41;
        v37 = *(_QWORD *)(v76 + 8 * v38);
        if (v37)
          goto LABEL_26;
        v35 = a1 + 5;
        v77 = a1 + 4;
        v18 = v76;
        if (a1 + 5 >= v36)
        {
LABEL_41:
          v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
          v69(v16, 1, 1, v3);
          v34 = 0;
          a1 = v77;
          goto LABEL_42;
        }
        v37 = *(_QWORD *)(v76 + 8 * v35);
        if (v37)
          goto LABEL_23;
        v77 = v36 - 1;
        v39 = a1 + 6;
        while (v36 != v39)
        {
          v37 = *(_QWORD *)(v76 + 8 * v39++);
          if (v37)
          {
            v35 = v39 - 1;
            goto LABEL_23;
          }
        }
      }
      v17 = v12;
      v25 = v13;
      v18 = v76;
      v19 = v14;
      goto LABEL_41;
    }
    *(_QWORD *)(v18 + 16) = v30;
  }
  if (v26 != v25)
    return sub_100036430(v81);
LABEL_16:
  v25 = *(_QWORD *)(v18 + 16);
  v17 = v81;
  v18 = v82;
  v27 = v83;
  a1 = v84;
  v76 = v82;
  v73 = v83;
  if (!v85)
    goto LABEL_20;
  v32 = (v85 - 1) & v85;
  v33 = __clz(__rbit64(v85)) | (v84 << 6);
LABEL_18:
  (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v16, *(_QWORD *)(v17 + 48) + v33 * v20, v3);
  v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v69(v16, 0, 1, v3);
  v34 = v32;
  v18 = v76;
LABEL_42:
  v75 = v34;
  v77 = a1;
  v81 = v17;
  v82 = v18;
  v83 = v73;
  v84 = a1;
  v85 = v34;
  v40 = v17;
  v41 = (uint64_t)v78;
  sub_100007ADC((uint64_t)v16, (uint64_t)v78, &qword_100160BD0);
  v42 = v41;
  v43 = v40;
  v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v74(v42, 1, v3) == 1)
  {
LABEL_82:
    sub_100008194((uint64_t)v16, &qword_100160BD0);
    sub_100036430(v43);
    return sub_100008194((uint64_t)v78, &qword_100160BD0);
  }
  v44 = (uint64_t)v78;
  v45 = v79;
  v70 = v19;
  while (1)
  {
    sub_100008194(v44, &qword_100160BD0);
    v46 = *(_QWORD *)(*v1 + 24);
    v47 = v46 >> 1;
    if ((uint64_t)(v46 >> 1) < v25 + 1)
    {
      v53 = sub_1000F5040(v46 > 1, v25 + 1, 1, *v1);
      *v1 = v53;
      v77 = v53;
      v47 = *(_QWORD *)(v53 + 24) >> 1;
    }
    else
    {
      v77 = *v1;
    }
    v48 = v80;
    sub_100007ADC((uint64_t)v16, v80, &qword_100160BD0);
    if (v74(v48, 1, v3) != 1)
      break;
    v49 = v80;
LABEL_50:
    sub_100008194(v49, &qword_100160BD0);
    v50 = v25;
LABEL_45:
    *(_QWORD *)(*v1 + 16) = v50;
    v44 = (uint64_t)v78;
    sub_100007ADC((uint64_t)v16, (uint64_t)v78, &qword_100160BD0);
    if (v74(v44, 1, v3) == 1)
    {
      v43 = v81;
      v77 = v84;
      v75 = v85;
      goto LABEL_82;
    }
  }
  v72 = v77 + v19;
  v51 = *(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 32);
  if (v25 <= v47)
    v52 = v47;
  else
    v52 = v25;
  v73 = v52;
  v49 = v80;
  v71 = v51;
  while (1)
  {
    v57 = v45;
    v58 = v45;
    v59 = (uint64_t (*)(unint64_t, char *, uint64_t))v51;
    v51(v57, v49, v3);
    v50 = v73;
    if (v25 == v73)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v58, v3);
      v25 = v50;
      v45 = v58;
      v19 = v70;
      goto LABEL_45;
    }
    sub_100008194((uint64_t)v16, &qword_100160BD0);
    v77 = v25;
    result = v59(v72 + v25 * v20, v58, v3);
    v55 = v81;
    v60 = v84;
    v75 = v83;
    v76 = v82;
    if (v85)
    {
      v54 = (v85 - 1) & v85;
      v61 = __clz(__rbit64(v85)) | (v84 << 6);
      v19 = v70;
      goto LABEL_62;
    }
    v68 = v81;
    v63 = v84 + 1;
    v19 = v70;
    if (__OFADD__(v84, 1))
      break;
    v64 = (v83 + 64) >> 6;
    v62 = v84;
    if (v63 < v64)
    {
      v65 = *(_QWORD *)(v82 + 8 * v63);
      if (v65)
        goto LABEL_66;
      v66 = v84 + 2;
      v62 = v84 + 1;
      if (v84 + 2 < v64)
      {
        v65 = *(_QWORD *)(v82 + 8 * v66);
        if (v65)
          goto LABEL_69;
        v62 = v84 + 2;
        if (v84 + 3 < v64)
        {
          v65 = *(_QWORD *)(v82 + 8 * (v84 + 3));
          if (v65)
          {
            v63 = v84 + 3;
            goto LABEL_66;
          }
          v66 = v84 + 4;
          v62 = v84 + 3;
          if (v84 + 4 < v64)
          {
            v65 = *(_QWORD *)(v82 + 8 * v66);
            if (v65)
            {
LABEL_69:
              v63 = v66;
              goto LABEL_66;
            }
            v63 = v84 + 5;
            v62 = v84 + 4;
            if (v84 + 5 < v64)
            {
              v65 = *(_QWORD *)(v82 + 8 * v63);
              if (!v65)
              {
                v62 = v64 - 1;
                v67 = v84 + 6;
                do
                {
                  if (v64 == v67)
                  {
                    v19 = v70;
                    goto LABEL_57;
                  }
                  v65 = *(_QWORD *)(v82 + 8 * v67++);
                }
                while (!v65);
                v63 = v67 - 1;
                v19 = v70;
              }
LABEL_66:
              v54 = (v65 - 1) & v65;
              v61 = __clz(__rbit64(v65)) + (v63 << 6);
              v60 = v63;
              v55 = v68;
LABEL_62:
              (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v16, *(_QWORD *)(v55 + 48) + v61 * v20, v3);
              v69(v16, 0, 1, v3);
              v62 = v60;
              goto LABEL_58;
            }
          }
        }
      }
    }
LABEL_57:
    v69(v16, 1, 1, v3);
    v54 = 0;
    v55 = v68;
LABEL_58:
    v25 = v77 + 1;
    v81 = v55;
    v82 = v76;
    v83 = v75;
    v84 = v62;
    v85 = v54;
    v49 = v80;
    sub_100007ADC((uint64_t)v16, v80, &qword_100160BD0);
    v56 = v74(v49, 1, v3);
    v45 = v79;
    v51 = v71;
    if (v56 == 1)
      goto LABEL_50;
  }
  __break(1u);
  return result;
}

Swift::Int sub_10008019C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  Swift::Int result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  Swift::Int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  char *v90;
  void (*v91)(char *, uint64_t, uint64_t);
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  char v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  unint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  Swift::Int v153;
  char *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  Swift::Int v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;

  v2 = v1;
  v4 = type metadata accessor for Genre(0);
  v173 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v160 = (char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v167 = (char *)&v152 - v8;
  v9 = __chkstk_darwin(v7);
  v169 = (char *)&v152 - v10;
  v11 = __chkstk_darwin(v9);
  v168 = (char *)&v152 - v12;
  v13 = __chkstk_darwin(v11);
  v156 = (char *)&v152 - v14;
  v15 = __chkstk_darwin(v13);
  v163 = (char *)&v152 - v16;
  v17 = __chkstk_darwin(v15);
  v158 = (char *)&v152 - v18;
  __chkstk_darwin(v17);
  v157 = (char *)&v152 - v19;
  v172 = a1;
  v20 = a1[1];
  result = _minimumMergeRunLength(_:)(v20);
  if (result >= v20)
  {
    if (v20 < 0)
      goto LABEL_150;
    if (v20)
      return sub_100080D34(0, v20, 1, v172);
    return result;
  }
  if (v20 >= 0)
    v22 = v20;
  else
    v22 = v20 + 1;
  if (v20 < -1)
    goto LABEL_158;
  v153 = result;
  if (v20 < 2)
  {
    v27 = (char *)_swiftEmptyArrayStorage;
    v26 = (char *)_swiftEmptyArrayStorage
        + ((*(unsigned __int8 *)(v173 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80));
    v152 = _swiftEmptyArrayStorage;
    if (v20 != 1)
    {
      v29 = _swiftEmptyArrayStorage[2];
LABEL_116:
      if (v29 >= 2)
      {
        v144 = *v172;
        do
        {
          v145 = v29 - 2;
          if (v29 < 2)
            goto LABEL_145;
          if (!v144)
            goto LABEL_157;
          v146 = *(_QWORD *)&v27[16 * v145 + 32];
          v147 = *(_QWORD *)&v27[16 * v29 + 24];
          v148 = v26;
          sub_100080FFC(v144 + *(_QWORD *)(v173 + 72) * v146, v144 + *(_QWORD *)(v173 + 72) * *(_QWORD *)&v27[16 * v29 + 16], v144 + *(_QWORD *)(v173 + 72) * v147, (unint64_t)v26);
          if (v2)
            break;
          if (v147 < v146)
            goto LABEL_146;
          if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
            v27 = sub_100081884((uint64_t)v27);
          if (v145 >= *((_QWORD *)v27 + 2))
            goto LABEL_147;
          v149 = &v27[16 * v145 + 32];
          *(_QWORD *)v149 = v146;
          *((_QWORD *)v149 + 1) = v147;
          v150 = *((_QWORD *)v27 + 2);
          if (v29 > v150)
            goto LABEL_148;
          memmove(&v27[16 * v29 + 16], &v27[16 * v29 + 32], 16 * (v150 - v29));
          *((_QWORD *)v27 + 2) = v150 - 1;
          v29 = v150 - 1;
          v26 = v148;
        }
        while (v150 > 2);
      }
LABEL_127:
      swift_bridgeObjectRelease(v27);
      v151 = v152;
      v152[2] = 0;
      return swift_bridgeObjectRelease(v151);
    }
  }
  else
  {
    v23 = v22 >> 1;
    v24 = static Array._allocateBufferUninitialized(minimumCapacity:)(v22 >> 1, v4);
    *(_QWORD *)(v24 + 16) = v23;
    v25 = *(unsigned __int8 *)(v173 + 80);
    v152 = (_QWORD *)v24;
    v26 = (char *)(v24 + ((v25 + 32) & ~v25));
  }
  v28 = 0;
  v27 = (char *)_swiftEmptyArrayStorage;
  v162 = v26;
  v166 = v4;
  while (1)
  {
    v30 = v28;
    v31 = v28 + 1;
    if (v28 + 1 >= v20)
    {
      v42 = v28 + 1;
      goto LABEL_67;
    }
    v170 = v20;
    v32 = *v172;
    v33 = *(_QWORD *)(v173 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v173 + 16);
    v34(v157, *v172 + v33 * v31, v4);
    v161 = v30;
    v159 = v32;
    v171 = v33;
    v35 = ((uint64_t (*)(char *, uint64_t, uint64_t))v34)(v158, v32 + v33 * v30, v4);
    v36 = Genre.name.getter(v35);
    v38 = v37;
    v40 = Genre.name.getter(v36);
    v41 = v39;
    if (v36 == v40 && v38 == v39)
    {
      LODWORD(v165) = 0;
      v41 = v38;
    }
    else
    {
      LODWORD(v165) = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v40, v39, 1);
    }
    v43 = v156;
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v41);
    v44 = *(void (**)(char *, uint64_t))(v173 + 8);
    v45 = v166;
    v44(v158, v166);
    v44(v157, v45);
    v42 = v161 + 2;
    if (v161 + 2 < v170)
    {
      v154 = v27;
      v155 = v2;
      v164 = v171 * v31;
      v46 = v159;
      v47 = v171 * v42;
      while (1)
      {
        v48 = v166;
        v34(v163, v46 + v47, v166);
        v49 = ((uint64_t (*)(char *, uint64_t, uint64_t))v34)(v43, v46 + v164, v48);
        v50 = Genre.name.getter(v49);
        v52 = v51;
        v54 = Genre.name.getter(v50);
        v55 = v53;
        if (v50 == v54 && v52 == v53)
        {
          v56 = 0;
          v55 = v52;
        }
        else
        {
          v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v52, v54, v53, 1);
        }
        swift_bridgeObjectRelease(v52);
        swift_bridgeObjectRelease(v55);
        v57 = v166;
        v44(v43, v166);
        v44(v163, v57);
        if (((v165 ^ v56) & 1) != 0)
          break;
        ++v42;
        v46 += v171;
        if (v170 == v42)
        {
          v58 = v170;
          v42 = v170;
          v27 = v154;
          v2 = v155;
          goto LABEL_32;
        }
      }
      v27 = v154;
      v2 = v155;
    }
    v58 = v170;
LABEL_32:
    v30 = v161;
    v59 = v159;
    if ((v165 & 1) == 0)
      break;
    if (v42 < v161)
      goto LABEL_151;
    if (v161 >= v42)
      break;
    v154 = v27;
    v155 = v2;
    v60 = 0;
    v61 = v171 * (v42 - 1);
    v62 = v42 * v171;
    v63 = v161;
    v64 = v161 * v171;
    do
    {
      if (v63 != v42 + v60 - 1)
      {
        if (!v59)
          goto LABEL_156;
        v68 = v42;
        v69 = v59 + v64;
        v70 = v59 + v61;
        v165 = *(_QWORD *)(v173 + 32);
        ((void (*)(char *, uint64_t, uint64_t))v165)(v160, v59 + v64, v166);
        if (v64 < v61 || v69 >= v59 + v62)
        {
          v65 = v59 + v64;
          v66 = v59 + v61;
          v67 = v166;
          swift_arrayInitWithTakeFrontToBack(v65, v66, 1, v166);
        }
        else
        {
          v67 = v166;
          if (v64 != v61)
            swift_arrayInitWithTakeBackToFront(v69, v70);
        }
        ((void (*)(uint64_t, char *, uint64_t))v165)(v70, v160, v67);
        v42 = v68;
        v59 = v159;
      }
      ++v63;
      --v60;
      v61 -= v171;
      v62 -= v171;
      v64 += v171;
    }
    while (v63 < v42 + v60);
    v27 = v154;
    v2 = v155;
    v71 = v166;
    v30 = v161;
    v58 = v170;
    if (v42 < v170)
      goto LABEL_48;
LABEL_67:
    if (v42 < v30)
      goto LABEL_144;
    if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
      v27 = sub_1000815D8(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
    v93 = *((_QWORD *)v27 + 2);
    v92 = *((_QWORD *)v27 + 3);
    v29 = v93 + 1;
    v26 = v162;
    v171 = v42;
    if (v93 >= v92 >> 1)
    {
      v143 = sub_1000815D8((char *)(v92 > 1), v93 + 1, 1, v27);
      v26 = v162;
      v27 = v143;
    }
    *((_QWORD *)v27 + 2) = v29;
    v94 = v27 + 32;
    v95 = &v27[16 * v93 + 32];
    v96 = v171;
    *(_QWORD *)v95 = v30;
    *((_QWORD *)v95 + 1) = v96;
    if (v93)
    {
      while (1)
      {
        v97 = v29 - 1;
        if (v29 >= 4)
        {
          v102 = &v94[16 * v29];
          v103 = *((_QWORD *)v102 - 8);
          v104 = *((_QWORD *)v102 - 7);
          v108 = __OFSUB__(v104, v103);
          v105 = v104 - v103;
          if (v108)
            goto LABEL_133;
          v107 = *((_QWORD *)v102 - 6);
          v106 = *((_QWORD *)v102 - 5);
          v108 = __OFSUB__(v106, v107);
          v100 = v106 - v107;
          v101 = v108;
          if (v108)
            goto LABEL_134;
          v109 = v29 - 2;
          v110 = &v94[16 * v29 - 32];
          v112 = *(_QWORD *)v110;
          v111 = *((_QWORD *)v110 + 1);
          v108 = __OFSUB__(v111, v112);
          v113 = v111 - v112;
          if (v108)
            goto LABEL_136;
          v108 = __OFADD__(v100, v113);
          v114 = v100 + v113;
          if (v108)
            goto LABEL_139;
          if (v114 >= v105)
          {
            v132 = &v94[16 * v97];
            v134 = *(_QWORD *)v132;
            v133 = *((_QWORD *)v132 + 1);
            v108 = __OFSUB__(v133, v134);
            v135 = v133 - v134;
            if (v108)
              goto LABEL_143;
            v125 = v100 < v135;
            goto LABEL_104;
          }
        }
        else
        {
          if (v29 != 3)
          {
            v126 = *((_QWORD *)v27 + 4);
            v127 = *((_QWORD *)v27 + 5);
            v108 = __OFSUB__(v127, v126);
            v119 = v127 - v126;
            v120 = v108;
            goto LABEL_98;
          }
          v99 = *((_QWORD *)v27 + 4);
          v98 = *((_QWORD *)v27 + 5);
          v108 = __OFSUB__(v98, v99);
          v100 = v98 - v99;
          v101 = v108;
        }
        if ((v101 & 1) != 0)
          goto LABEL_135;
        v109 = v29 - 2;
        v115 = &v94[16 * v29 - 32];
        v117 = *(_QWORD *)v115;
        v116 = *((_QWORD *)v115 + 1);
        v118 = __OFSUB__(v116, v117);
        v119 = v116 - v117;
        v120 = v118;
        if (v118)
          goto LABEL_138;
        v121 = &v94[16 * v97];
        v123 = *(_QWORD *)v121;
        v122 = *((_QWORD *)v121 + 1);
        v108 = __OFSUB__(v122, v123);
        v124 = v122 - v123;
        if (v108)
          goto LABEL_141;
        if (__OFADD__(v119, v124))
          goto LABEL_142;
        if (v119 + v124 >= v100)
        {
          v125 = v100 < v124;
LABEL_104:
          if (v125)
            v97 = v109;
          goto LABEL_106;
        }
LABEL_98:
        if ((v120 & 1) != 0)
          goto LABEL_137;
        v128 = &v94[16 * v97];
        v130 = *(_QWORD *)v128;
        v129 = *((_QWORD *)v128 + 1);
        v108 = __OFSUB__(v129, v130);
        v131 = v129 - v130;
        if (v108)
          goto LABEL_140;
        if (v131 < v119)
          goto LABEL_14;
LABEL_106:
        v136 = v97 - 1;
        if (v97 - 1 >= v29)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
        if (!*v172)
          goto LABEL_155;
        v137 = v27;
        v138 = &v94[16 * v136];
        v139 = *(_QWORD *)v138;
        v140 = &v94[16 * v97];
        v141 = *((_QWORD *)v140 + 1);
        sub_100080FFC(*v172 + *(_QWORD *)(v173 + 72) * *(_QWORD *)v138, *v172 + *(_QWORD *)(v173 + 72) * *(_QWORD *)v140, *v172 + *(_QWORD *)(v173 + 72) * v141, (unint64_t)v26);
        if (v2)
        {
          v27 = v137;
          goto LABEL_127;
        }
        if (v141 < v139)
          goto LABEL_130;
        if (v97 > *((_QWORD *)v137 + 2))
          goto LABEL_131;
        *(_QWORD *)v138 = v139;
        *(_QWORD *)&v94[16 * v136 + 8] = v141;
        v142 = *((_QWORD *)v137 + 2);
        if (v97 >= v142)
          goto LABEL_132;
        v27 = v137;
        v29 = v142 - 1;
        memmove(&v94[16 * v97], v140 + 16, 16 * (v142 - 1 - v97));
        *((_QWORD *)v137 + 2) = v142 - 1;
        v26 = v162;
        if (v142 <= 2)
          goto LABEL_14;
      }
    }
    v29 = 1;
LABEL_14:
    v20 = v172[1];
    v28 = v171;
    v4 = v166;
    if (v171 >= v20)
      goto LABEL_116;
  }
  v71 = v166;
  if (v42 >= v58)
    goto LABEL_67;
LABEL_48:
  if (__OFSUB__(v42, v30))
    goto LABEL_149;
  if (v42 - v30 >= v153)
    goto LABEL_67;
  if (__OFADD__(v30, v153))
    goto LABEL_152;
  if (v30 + v153 >= v58)
    v72 = v58;
  else
    v72 = v30 + v153;
  if (v72 >= v30)
  {
    if (v42 != v72)
    {
      v161 = v30;
      v154 = v27;
      v155 = v2;
      v73 = *(_QWORD *)(v173 + 72);
      v164 = *(_QWORD *)(v173 + 16);
      v165 = v73;
      v170 = v42 * v73;
      v171 = v73 * (v42 - 1);
      v159 = v72;
      do
      {
        v75 = 0;
        v76 = v161;
        while (1)
        {
          v77 = *v172;
          v78 = (uint64_t (*)(char *, uint64_t, uint64_t))v164;
          ((void (*)(char *, Swift::Int, uint64_t))v164)(v168, v170 + v75 + *v172, v71);
          v79 = v78(v169, v171 + v75 + v77, v71);
          v80 = Genre.name.getter(v79);
          v82 = v81;
          v84 = Genre.name.getter(v80);
          v85 = v83;
          if (v80 == v84 && v82 == v83)
            break;
          v86 = _stringCompareWithSmolCheck(_:_:expecting:)(v80, v82, v84, v83, 1);
          swift_bridgeObjectRelease(v82);
          swift_bridgeObjectRelease(v85);
          v87 = *(void (**)(char *, uint64_t))(v173 + 8);
          v71 = v166;
          v87(v169, v166);
          v87(v168, v71);
          if ((v86 & 1) == 0)
            goto LABEL_58;
          v88 = *v172;
          if (!*v172)
            goto LABEL_154;
          v89 = v88 + v170 + v75;
          v90 = (char *)(v88 + v171 + v75);
          v91 = *(void (**)(char *, uint64_t, uint64_t))(v173 + 32);
          v91(v167, v89, v71);
          swift_arrayInitWithTakeFrontToBack(v89, v90, 1, v71);
          v91(v90, (uint64_t)v167, v71);
          v75 -= v165;
          if (v42 == ++v76)
            goto LABEL_58;
        }
        swift_bridgeObjectRelease_n(v82, 2);
        v74 = *(void (**)(char *, uint64_t))(v173 + 8);
        v71 = v166;
        v74(v169, v166);
        v74(v168, v71);
LABEL_58:
        ++v42;
        v171 += v165;
        v170 += v165;
      }
      while (v42 != v159);
      v42 = v159;
      v27 = v154;
      v2 = v155;
      v30 = v161;
    }
    goto LABEL_67;
  }
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_100080D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  _QWORD *v42;
  char *v43;
  char *v44;
  uint64_t v45;

  v41 = a4;
  v35 = a1;
  v6 = type metadata accessor for Genre(0);
  v42 = *(_QWORD **)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v40 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v44 = (char *)&v33 - v10;
  result = __chkstk_darwin(v9);
  v43 = (char *)&v33 - v12;
  v39 = a3;
  v34 = a2;
  if (a3 != a2)
  {
    v13 = v42[9];
    v36 = (uint64_t (*)(char *, uint64_t, uint64_t))v42[2];
    v37 = v13;
    v14 = v13 * (v39 - 1);
    v45 = v13 * v39;
LABEL_6:
    v16 = 0;
    v17 = v35;
    v38 = v14;
    while (1)
    {
      v18 = *v41;
      v19 = v36;
      v36(v43, v45 + v16 + *v41, v6);
      v20 = v19(v44, v14 + v16 + v18, v6);
      v21 = Genre.name.getter(v20);
      v23 = v22;
      v25 = Genre.name.getter(v21);
      v26 = v24;
      if (v21 == v25 && v23 == v24)
      {
        swift_bridgeObjectRelease_n(v23, 2);
        v15 = (void (*)(char *, uint64_t))v42[1];
        v15(v44, v6);
        result = ((uint64_t (*)(char *, uint64_t))v15)(v43, v6);
        v14 = v38;
LABEL_5:
        v14 += v37;
        v45 += v37;
        if (++v39 == v34)
          return result;
        goto LABEL_6;
      }
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v25, v24, 1);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v26);
      v28 = (void (*)(char *, uint64_t))v42[1];
      v28(v44, v6);
      result = ((uint64_t (*)(char *, uint64_t))v28)(v43, v6);
      v14 = v38;
      if ((v27 & 1) == 0)
        goto LABEL_5;
      v29 = *v41;
      if (!*v41)
        break;
      v30 = v29 + v45 + v16;
      v31 = v29 + v38 + v16;
      v32 = (void (*)(char *, uint64_t, uint64_t))v42[4];
      v32(v40, v30, v6);
      swift_arrayInitWithTakeFrontToBack(v30, v31, 1, v6);
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v32)(v31, v40, v6);
      v16 -= v37;
      if (v39 == ++v17)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100080FFC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  char v35;
  void (*v36)(char *, uint64_t);
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v42;
  unint64_t v43;
  uint64_t (*v44)(char *, unint64_t, uint64_t);
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void (*v54)(char *, uint64_t);
  BOOL v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t result;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;

  v8 = type metadata accessor for Genre(0);
  v9 = __chkstk_darwin(v8);
  v65 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v64 = (char *)&v61 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v61 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v61 - v16;
  v19 = *(_QWORD *)(v18 + 72);
  v66 = v18;
  v67 = v19;
  if (!v19)
  {
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (a2 - a1 == 0x8000000000000000 && v67 == -1)
    goto LABEL_69;
  v20 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v67 == -1)
    goto LABEL_70;
  v21 = (uint64_t)(a2 - a1) / v67;
  v70 = a1;
  v69 = a4;
  v22 = v20 / v67;
  if (v21 >= v20 / v67)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      v24 = v22 * v67;
      if (a4 < a2 || a2 + v24 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v22, v8);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v40 = a4 + v24;
      v68 = a4 + v24;
      v70 = a2;
      if (v24 >= 1 && a1 < a2)
      {
        v42 = -v67;
        v67 = *(_QWORD *)(v66 + 16);
        v62 = a4;
        v63 = a1;
        do
        {
          v43 = a3;
          v44 = (uint64_t (*)(char *, unint64_t, uint64_t))v67;
          ((void (*)(char *, unint64_t, uint64_t))v67)(v64, v40 + v42, v8);
          v45 = a2 + v42;
          v46 = v44(v65, a2 + v42, v8);
          v47 = Genre.name.getter(v46);
          v49 = v48;
          v51 = Genre.name.getter(v47);
          v52 = v50;
          if (v47 == v51 && v49 == v50)
          {
            v53 = 0;
            v52 = v49;
          }
          else
          {
            v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v49, v51, v50, 1);
          }
          swift_bridgeObjectRelease(v49);
          swift_bridgeObjectRelease(v52);
          a3 += v42;
          v54 = *(void (**)(char *, uint64_t))(v66 + 8);
          v54(v65, v8);
          v54(v64, v8);
          if ((v53 & 1) != 0)
          {
            if (v43 < a2 || a3 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v43 + v42, a2 + v42, 1, v8);
              v56 = v62;
              v57 = v63;
            }
            else
            {
              v55 = v43 == a2;
              v56 = v62;
              v57 = v63;
              if (!v55)
                swift_arrayInitWithTakeBackToFront(a3, a2 + v42);
            }
            v70 += v42;
          }
          else
          {
            v58 = v68;
            v59 = v68 + v42;
            v68 += v42;
            if (v43 < v58 || a3 >= v58)
            {
              swift_arrayInitWithTakeFrontToBack(v43 + v42, v59, 1, v8);
              v45 = a2;
              v56 = v62;
              v57 = v63;
            }
            else
            {
              v57 = v63;
              if (v43 != v58)
                swift_arrayInitWithTakeBackToFront(v43 + v42, v59);
              v45 = a2;
              v56 = v62;
            }
          }
          v40 = v68;
          if (v68 <= v56)
            break;
          a2 = v45;
        }
        while (v45 > v57);
      }
LABEL_67:
      sub_100081778(&v70, &v69, (uint64_t *)&v68);
      return 1;
    }
  }
  else if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21 * v67;
    if (a4 < a1 || a1 + v23 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v21, v8);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v65 = (char *)(a4 + v23);
    v68 = a4 + v23;
    if (v23 >= 1 && a2 < a3)
    {
      v26 = *(void (**)(char *, unint64_t, uint64_t))(v66 + 16);
      while (1)
      {
        v26(v17, a2, v8);
        v27 = ((uint64_t (*)(char *, unint64_t, uint64_t))v26)(v15, a4, v8);
        v28 = Genre.name.getter(v27);
        v30 = v29;
        v32 = Genre.name.getter(v28);
        v33 = v31;
        if (v28 == v32 && v30 == v31)
          break;
        v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v32, v31, 1);
        swift_bridgeObjectRelease(v30);
        swift_bridgeObjectRelease(v33);
        v36 = *(void (**)(char *, uint64_t))(v66 + 8);
        v36(v15, v8);
        v36(v17, v8);
        if ((v35 & 1) == 0)
          goto LABEL_31;
        v37 = v70;
        v38 = a2 + v67;
        if (v70 < a2 || v70 >= v38)
        {
          swift_arrayInitWithTakeFrontToBack(v70, a2, 1, v8);
        }
        else if (v70 == a2)
        {
          v37 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront(v70, a2);
        }
LABEL_37:
        v70 = v37 + v67;
        a4 = v69;
        if (v69 < (unint64_t)v65)
        {
          a2 = v38;
          if (v38 < a3)
            continue;
        }
        goto LABEL_67;
      }
      swift_bridgeObjectRelease_n(v30, 2);
      v34 = *(void (**)(char *, uint64_t))(v66 + 8);
      v34(v15, v8);
      v34(v17, v8);
LABEL_31:
      v37 = v70;
      v39 = v69 + v67;
      if (v70 < v69 || v70 >= v39)
      {
        swift_arrayInitWithTakeFrontToBack(v70, v69, 1, v8);
      }
      else if (v70 != v69)
      {
        swift_arrayInitWithTakeBackToFront(v70, v69);
      }
      v69 = v39;
      v38 = a2;
      goto LABEL_37;
    }
    goto LABEL_67;
  }
LABEL_71:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_1000815D8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003E70(&qword_100160BC8);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1000816D0(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

uint64_t sub_100081778(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for Genre(0);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  v10 = v8 / v7;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v10 * v7)
    return swift_arrayInitWithTakeFrontToBack(v3, v4, v10, result);
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront(v3, v4);
  return result;
}

char *sub_100081884(uint64_t a1)
{
  return sub_1000815D8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100081898(uint64_t a1)
{
  return sub_1000544AC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000818AC(_QWORD *a1)
{
  return sub_10005477C(0, a1[2], 0, a1);
}

unint64_t sub_1000818C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160BD8;
  if (!qword_100160BD8)
  {
    v1 = sub_1000034AC((uint64_t *)&unk_100160BE0);
    sub_10007F678();
    sub_10000E53C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160BD8);
  }
  return result;
}

id sub_100081930()
{
  __int128 *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  objc_class *v8;
  char *v9;
  char *v10;
  char *v11;
  objc_super v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0[1];
  v14 = *v0;
  v15 = v1;
  v2 = sub_100003E70(&qword_100160C88);
  Binding.projectedValue.getter(v2);
  v3 = v17;
  v4 = v18;
  v14 = v0[2];
  LOBYTE(v15) = *((_BYTE *)v0 + 48);
  v5 = sub_100003E70(&qword_100160CA0);
  Binding.projectedValue.getter(v5);
  v6 = v16;
  v7 = v17;
  v8 = (objc_class *)type metadata accessor for SearchBar.Coordinator();
  v9 = (char *)objc_allocWithZone(v8);
  v10 = &v9[OBJC_IVAR____TtCV16EventViewService9SearchBar11Coordinator__text];
  *(_OWORD *)v10 = v16;
  *((_QWORD *)v10 + 2) = v3;
  *((_QWORD *)v10 + 3) = v4;
  v11 = &v9[OBJC_IVAR____TtCV16EventViewService9SearchBar11Coordinator__isSearching];
  *(_OWORD *)v11 = v6;
  v11[16] = v7;
  v13.receiver = v9;
  v13.super_class = v8;
  return objc_msgSendSuper2(&v13, "init");
}

id sub_100081A0C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  void *v4;
  NSString v5;
  _BYTE v7[16];
  _QWORD v8[2];

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)UISearchBar), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v3 = sub_100003E70(&qword_100160CA8);
  UIViewRepresentableContext.coordinator.getter(v8, v3);
  v4 = (void *)v8[0];
  objc_msgSend(v2, "setDelegate:", v8[0]);

  objc_msgSend(v2, "setSearchBarStyle:", 2);
  sub_1000054F0(v1 + 56, (uint64_t)v7);
  sub_1000054F0((uint64_t)v7, (uint64_t)v8);
  if (v8[1])
    v5 = String._bridgeToObjectiveC()();
  else
    v5 = 0;
  objc_msgSend(v2, "setPlaceholder:", v5);

  objc_msgSend(v2, "setReturnKeyType:", 0);
  objc_msgSend(v2, "setShowsCancelButton:animated:", 0, 0);
  return v2;
}

uint64_t type metadata accessor for SearchBar.Coordinator()
{
  return objc_opt_self(_TtCV16EventViewService9SearchBar11Coordinator);
}

id sub_100081D10()
{
  return sub_100081A0C();
}

void sub_100081D50(void *a1)
{
  __int128 *v1;
  uint64_t v3;
  NSString v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *v1;
  v6 = *((_QWORD *)v1 + 2);
  v7 = *((_QWORD *)v1 + 3);
  v3 = sub_100003E70(&qword_100160C88);
  Binding.wrappedValue.getter(v3);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(a1, "setText:", v4, v5, v6, v7);

}

id sub_100081DD4@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_100081930();
  *a1 = result;
  return result;
}

uint64_t sub_100081DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000821C8();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100081E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000821C8();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100081E98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000821C8();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_100081EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100081ECC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t destroy for SearchBar(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_release(a1[4]);
  swift_release(a1[5]);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for SearchBar(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2[4];
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v8 = a2[8];
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_QWORD *)(a1 + 64) = v8;
  swift_retain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t *assignWithCopy for SearchBar(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a1[4];
  v11 = a2[4];
  a1[4] = v11;
  swift_retain(v11);
  swift_release(v10);
  v12 = a2[5];
  v13 = a1[5];
  a1[5] = v12;
  swift_retain(v12);
  swift_release(v13);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  a1[7] = a2[7];
  v14 = a2[8];
  v15 = a1[8];
  a1[8] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

__n128 initializeWithTake for SearchBar(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SearchBar(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v5);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v6);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchBar(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchBar(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchBar()
{
  return &type metadata for SearchBar;
}

unint64_t sub_1000821C8()
{
  unint64_t result;

  result = qword_100160C98;
  if (!qword_100160C98)
  {
    result = swift_getWitnessTable(&unk_10010F4FC, &type metadata for SearchBar);
    atomic_store(result, (unint64_t *)&qword_100160C98);
  }
  return result;
}

ValueMetadata *type metadata accessor for SongRow()
{
  return &type metadata for SongRow;
}

uint64_t sub_10008221C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100119D90, 1);
}

void sub_10008222C()
{
  qword_100160D20 = 0x6F6E2E636973756DLL;
  *(_QWORD *)algn_100160D28 = 0xEA00000000006574;
}

uint64_t sub_100082254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;

  v1 = type metadata accessor for AccessibilityChildBehavior(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003E70(&qword_100160D30);
  __chkstk_darwin(v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003E70(&qword_100160D38);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v7 = static VerticalAlignment.center.getter(v9);
  *((_QWORD *)v7 + 1) = 0x4024000000000000;
  v7[16] = 0;
  v12 = sub_100003E70(&qword_100160D40);
  v13 = sub_1000823FC(v0, (uint64_t)&v7[*(int *)(v12 + 44)]);
  v14 = static Edge.Set.top.getter(v13);
  sub_100007ADC((uint64_t)v7, (uint64_t)v11, &qword_100160D30);
  v15 = &v11[*(int *)(v8 + 36)];
  *v15 = v14;
  *(_OWORD *)(v15 + 8) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  v15[40] = 1;
  v16 = sub_100008194((uint64_t)v7, &qword_100160D30);
  static AccessibilityChildBehavior.ignore.getter(v16);
  v17 = sub_1000838C4();
  View.accessibilityElement(children:)(v4, v8, v17);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_100008194((uint64_t)v11, &qword_100160D38);
}

uint64_t sub_1000823FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v57 = a2;
  v3 = sub_100003E70(&qword_100160D58);
  v4 = __chkstk_darwin(v3);
  v58 = (uint64_t)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v49 - v6;
  v8 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003E70(&qword_100160D60);
  v53 = *(_QWORD *)(v11 - 8);
  v54 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100003E70(&qword_100160D68);
  __chkstk_darwin(v50);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100003E70(&qword_100160D70);
  __chkstk_darwin(v52);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100003E70(&qword_100160D78);
  v18 = __chkstk_darwin(v51);
  v55 = (uint64_t)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v49 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v49 - v23;
  v56 = a1;
  sub_100007ADC(a1 + 32, (uint64_t)&v59, &qword_10015EA58);
  v25 = *((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v26 = v61;
    sub_100008170(&v59, *((uint64_t *)&v60 + 1));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 40))(100, 100, v25, v26);
    v27 = sub_1000055A8(&v59);
  }
  else
  {
    sub_100008194((uint64_t)&v59, &qword_10015EA58);
    v28 = type metadata accessor for URL(0);
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v10, 1, 1, v28);
  }
  v29 = static Animation.easeInOut.getter(v27);
  v30 = Transaction.init(animation:)(v29);
  v31 = sub_100003E70(&qword_100160D80);
  v32 = sub_100083948();
  v33 = AsyncImage.init(url:scale:transaction:content:)(v10, v30, sub_100082898, 0, v31, v32, 1.0);
  v34 = static Alignment.center.getter(v33);
  _FrameLayout.init(width:height:alignment:)(&v59, 0x4048000000000000, 0, 0x4048000000000000, 0, v34, v35);
  v37 = v53;
  v36 = v54;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v15, v13, v54);
  v38 = &v15[*(int *)(v50 + 36)];
  v39 = v60;
  *(_OWORD *)v38 = v59;
  *((_OWORD *)v38 + 1) = v39;
  *((_OWORD *)v38 + 2) = v61;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v36);
  sub_100007ADC((uint64_t)v15, (uint64_t)v17, &qword_100160D68);
  v17[*(int *)(v52 + 36)] = 1;
  v40 = sub_100008194((uint64_t)v15, &qword_100160D68);
  LOBYTE(v36) = static Edge.Set.bottom.getter(v40);
  sub_100007ADC((uint64_t)v17, (uint64_t)v22, &qword_100160D70);
  v41 = &v22[*(int *)(v51 + 36)];
  *v41 = v36;
  *(_OWORD *)(v41 + 8) = 0u;
  *(_OWORD *)(v41 + 24) = 0u;
  v41[40] = 1;
  sub_100008194((uint64_t)v17, &qword_100160D70);
  v42 = sub_100007A98((uint64_t)v22, (uint64_t)v24, &qword_100160D78);
  *(_QWORD *)v7 = static HorizontalAlignment.leading.getter(v42);
  *((_QWORD *)v7 + 1) = 0x4030000000000000;
  v7[16] = 0;
  v43 = sub_100003E70(&qword_100160DD0);
  sub_100083250(v56, &v7[*(int *)(v43 + 44)]);
  v44 = v55;
  sub_100007ADC((uint64_t)v24, v55, &qword_100160D78);
  v45 = v58;
  sub_100007ADC((uint64_t)v7, v58, &qword_100160D58);
  v46 = v57;
  sub_100007ADC(v44, v57, &qword_100160D78);
  v47 = sub_100003E70(&qword_100160DD8);
  sub_100007ADC(v45, v46 + *(int *)(v47 + 48), &qword_100160D58);
  sub_100008194((uint64_t)v7, &qword_100160D58);
  sub_100008194((uint64_t)v24, &qword_100160D78);
  sub_100008194(v45, &qword_100160D58);
  return sub_100008194(v44, &qword_100160D78);
}

uint64_t sub_100082898@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v65 = a1;
  v72 = a2;
  v71 = sub_100003E70(&qword_100160DC8);
  __chkstk_darwin(v71);
  v61 = (uint64_t *)((char *)&v61 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v69 = sub_100003E70(&qword_100160DF0);
  __chkstk_darwin(v69);
  v70 = (uint64_t)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100003E70(&qword_100160DF8);
  __chkstk_darwin(v64);
  v66 = (uint64_t)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100003E70(&qword_100160D98);
  __chkstk_darwin(v67);
  v68 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003E70(&qword_100160DB8);
  __chkstk_darwin(v6);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v9);
  v11 = (_OWORD *)((char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for Image.ResizingMode(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100003E70(&qword_100160DA8);
  v16 = __chkstk_darwin(v63);
  v18 = (uint64_t *)((char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v62 = (uint64_t)&v61 - v19;
  v20 = type metadata accessor for AsyncImagePhase(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (uint64_t **)((char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v21 + 16))(v23, v65, v20);
  v24 = (*(uint64_t (**)(_QWORD *, uint64_t))(v21 + 88))(v23, v20);
  if ((_DWORD)v24 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v21 + 96))(v23, v20);
    v25 = *v23;
    (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for Image.ResizingMode.stretch(_:), v12);
    v26 = Image.resizable(capInsets:resizingMode:)(v15, v25, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v27 = (char *)v11 + *(int *)(v9 + 20);
    v28 = enum case for RoundedCornerStyle.continuous(_:);
    v29 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v27, v28, v29);
    __asm { FMOV            V0.2D, #4.0 }
    *v11 = _Q0;
    sub_10001BF60((uint64_t)v11, (uint64_t)v8);
    v35 = v63;
    sub_100007ADC((uint64_t)v8, (uint64_t)v18 + *(int *)(v63 + 36), &qword_100160DB8);
    *v18 = v26;
    swift_retain(v26);
    sub_100008194((uint64_t)v8, &qword_100160DB8);
    sub_10001BFA4((uint64_t)v11);
    swift_release(v26);
    v36 = v62;
    sub_100007A98((uint64_t)v18, v62, &qword_100160DA8);
    v37 = v66;
    sub_100007ADC(v36, v66, &qword_100160DA8);
    swift_storeEnumTagMultiPayload(v37, v64, 0);
    v38 = sub_100083A38();
    v39 = sub_100007D40(&qword_100160DC0, &qword_100160DC8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v40 = (uint64_t)v68;
    _ConditionalContent<>.init(storage:)(v37, v35, v71, v38, v39);
    v41 = v70;
    sub_100007ADC(v40, v70, &qword_100160D98);
    swift_storeEnumTagMultiPayload(v41, v69, 0);
    v42 = sub_1000839B4();
    _ConditionalContent<>.init(storage:)(v41, v67, &type metadata for EmptyView, v42, &protocol witness table for EmptyView);
    swift_release(v25);
    sub_100008194(v40, &qword_100160D98);
    v43 = v36;
    v44 = &qword_100160DA8;
  }
  else
  {
    v45 = v66;
    v46 = v67;
    v47 = v70;
    v48 = v71;
    v50 = (uint64_t)v68;
    v49 = v69;
    if ((_DWORD)v24 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v21 + 96))(v23, v20);
      v24 = swift_errorRelease(*v23);
    }
    else if ((_DWORD)v24 != enum case for AsyncImagePhase.empty(_:))
    {
      swift_storeEnumTagMultiPayload(v70, v69, 1);
      v60 = sub_1000839B4();
      _ConditionalContent<>.init(storage:)(v47, v46, &type metadata for EmptyView, v60, &protocol witness table for EmptyView);
      return (*(uint64_t (**)(_QWORD *, uint64_t))(v21 + 8))(v23, v20);
    }
    v51 = static Alignment.center.getter(v24);
    v52 = (uint64_t)v61;
    *v61 = v51;
    *(_QWORD *)(v52 + 8) = v53;
    v54 = sub_100003E70(&qword_100160E00);
    sub_100082ED0(v52 + *(int *)(v54 + 44));
    sub_100007ADC(v52, v45, &qword_100160DC8);
    swift_storeEnumTagMultiPayload(v45, v64, 1);
    v55 = v45;
    v56 = sub_100083A38();
    v57 = sub_100007D40(&qword_100160DC0, &qword_100160DC8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    _ConditionalContent<>.init(storage:)(v55, v63, v48, v56, v57);
    sub_100007ADC(v50, v47, &qword_100160D98);
    swift_storeEnumTagMultiPayload(v47, v49, 0);
    v58 = sub_1000839B4();
    _ConditionalContent<>.init(storage:)(v47, v46, &type metadata for EmptyView, v58, &protocol witness table for EmptyView);
    sub_100008194(v50, &qword_100160D98);
    v43 = v52;
    v44 = &qword_100160DC8;
  }
  return sub_100008194(v43, v44);
}

uint64_t sub_100082ED0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v45[12];
  int v46;
  _BYTE *v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;

  v50 = a1;
  v1 = type metadata accessor for Image.ResizingMode(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v45[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v5);
  v7 = &v45[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100003E70(&qword_100160558);
  v9 = __chkstk_darwin(v8);
  v11 = &v45[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v45[-v12];
  v14 = (char *)v7 + *(int *)(v5 + 20);
  v15 = enum case for RoundedCornerStyle.continuous(_:);
  v16 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v14, v15, v16);
  __asm { FMOV            V0.2D, #4.0 }
  *v7 = _Q0;
  if (qword_10015CE60 != -1)
    swift_once(&qword_10015CE60, sub_1000382C8);
  v22 = qword_10016F658;
  KeyPath = swift_getKeyPath(&unk_10010F670);
  sub_10001BF60((uint64_t)v7, (uint64_t)v11);
  v24 = (uint64_t *)&v11[*(int *)(v8 + 36)];
  *v24 = KeyPath;
  v24[1] = v22;
  swift_retain(v22);
  sub_10001BFA4((uint64_t)v7);
  sub_100007A98((uint64_t)v11, (uint64_t)v13, &qword_100160558);
  v49 = v13;
  if (qword_10015CE88 != -1)
    swift_once(&qword_10015CE88, sub_10008222C);
  v25 = qword_100160D20;
  v26 = *(_QWORD *)algn_100160D28;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100160D28);
  v27 = Image.init(systemName:)(v25, v26);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for Image.ResizingMode.stretch(_:), v1);
  v48 = Image.resizable(capInsets:resizingMode:)(v4, v27, 0.0, 0.0, 0.0, 0.0);
  v28 = swift_release(v27);
  v29 = (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v2 + 8))(v4, v1, v28);
  v30 = static Color.white.getter(v29);
  v31 = swift_getKeyPath(&unk_10010F670);
  v32 = static Alignment.center.getter(v31);
  _FrameLayout.init(width:height:alignment:)(&v51, 0x4038000000000000, 0, 0x4038000000000000, 0, v32, v33);
  v34 = v51;
  v35 = v52;
  v36 = v53;
  v46 = v54;
  v37 = v55;
  v38 = v56;
  v39 = (uint64_t)v49;
  sub_100007ADC((uint64_t)v49, (uint64_t)v11, &qword_100160558);
  v40 = (uint64_t)v11;
  v47 = v11;
  v41 = v50;
  sub_100007ADC(v40, v50, &qword_100160558);
  v42 = v41 + *(int *)(sub_100003E70(&qword_100160E08) + 48);
  v43 = v48;
  *(_QWORD *)v42 = v48;
  *(_QWORD *)(v42 + 8) = 0;
  *(_WORD *)(v42 + 16) = 1;
  *(_QWORD *)(v42 + 24) = v31;
  *(_QWORD *)(v42 + 32) = v30;
  *(_QWORD *)(v42 + 40) = v34;
  *(_BYTE *)(v42 + 48) = v35;
  *(_QWORD *)(v42 + 56) = v36;
  *(_BYTE *)(v42 + 64) = v46;
  *(_QWORD *)(v42 + 72) = v37;
  *(_QWORD *)(v42 + 80) = v38;
  swift_retain(v43);
  swift_retain(v31);
  swift_retain(v30);
  sub_100008194(v39, &qword_100160558);
  swift_release(v30);
  swift_release(v31);
  swift_release(v43);
  return sub_100008194((uint64_t)v47, &qword_100160558);
}

uint64_t sub_100083250@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  char v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  _BYTE v66[7];
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unsigned __int8 v71;
  _BYTE v72[7];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  unsigned __int8 v82;
  char v83;
  unsigned __int8 v84;
  char v85;
  _BYTE v86[7];
  _BYTE v87[7];
  _BYTE v88[7];
  _DWORD v89[3];

  v48 = type metadata accessor for Divider(0);
  v4 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100003E70(&qword_100160DE0);
  v7 = __chkstk_darwin(v39);
  v45 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v36 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v36 - v13;
  v49 = static HorizontalAlignment.leading.getter(v12);
  v15 = sub_10008363C((uint64_t *)a1, (uint64_t)&v63);
  v50 = v64;
  v51 = v63;
  v16 = v65;
  v54 = v67;
  v37 = v68;
  v53 = v70;
  v52 = v71;
  v43 = v73;
  v17 = v74;
  v42 = v75;
  v40 = *((_QWORD *)&v69 + 1);
  v41 = v76;
  v38 = v77;
  v85 = 0;
  v84 = v65;
  v83 = v69;
  v82 = v71;
  v81 = v77;
  v18 = v69;
  v46 = v65;
  v47 = v69;
  Divider.init()(v15);
  if (*(_BYTE *)(a1 + 72))
    v19 = 1.0;
  else
    v19 = 0.0;
  v20 = v48;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v11, v6, v48);
  *(double *)&v11[*(int *)(v39 + 36)] = v19;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v20);
  v44 = v14;
  sub_100007A98((uint64_t)v11, (uint64_t)v14, &qword_100160DE0);
  v21 = v45;
  sub_100007ADC((uint64_t)v14, v45, &qword_100160DE0);
  *(_QWORD *)&v55 = v49;
  *((_QWORD *)&v55 + 1) = 0x4014000000000000;
  LOBYTE(v56) = 0;
  *(_DWORD *)((char *)&v56 + 1) = v89[0];
  DWORD1(v56) = *(_DWORD *)((char *)v89 + 3);
  *((_QWORD *)&v56 + 1) = v51;
  *(_QWORD *)&v57 = v50;
  BYTE8(v57) = v16;
  *(_DWORD *)((char *)&v57 + 9) = *(_DWORD *)v88;
  HIDWORD(v57) = *(_DWORD *)&v88[3];
  v58 = v54;
  v22 = v37;
  *(_QWORD *)&v59 = v37;
  BYTE8(v59) = v18;
  *(_DWORD *)((char *)&v59 + 9) = *(_DWORD *)v87;
  HIDWORD(v59) = *(_DWORD *)&v87[3];
  v24 = v40;
  v23 = v41;
  *(_QWORD *)&v60 = v40;
  *((_QWORD *)&v60 + 1) = v53;
  LOBYTE(v61) = v52;
  *(_DWORD *)((char *)&v61 + 1) = *(_DWORD *)v86;
  DWORD1(v61) = *(_DWORD *)&v86[3];
  v26 = v42;
  v25 = v43;
  *((_QWORD *)&v61 + 1) = v43;
  *(_QWORD *)&v62[0] = v17;
  *((_QWORD *)&v62[0] + 1) = v42;
  *(_QWORD *)&v62[1] = v41;
  v27 = v38;
  BYTE8(v62[1]) = v38;
  v28 = v55;
  v29 = v56;
  v30 = v54;
  a2[2] = v57;
  a2[3] = v30;
  *a2 = v28;
  a2[1] = v29;
  v31 = v59;
  v32 = v60;
  *(_OWORD *)((char *)a2 + 121) = *(_OWORD *)((char *)v62 + 9);
  v33 = v62[0];
  a2[6] = v61;
  a2[7] = v33;
  a2[4] = v31;
  a2[5] = v32;
  v34 = (uint64_t)a2 + *(int *)(sub_100003E70(&qword_100160DE8) + 48);
  sub_100007ADC(v21, v34, &qword_100160DE0);
  sub_100083ABC((uint64_t)&v55);
  sub_100008194((uint64_t)v44, &qword_100160DE0);
  sub_100008194(v21, &qword_100160DE0);
  v63 = v49;
  v64 = 0x4014000000000000;
  v65 = 0;
  *(_DWORD *)v66 = v89[0];
  *(_DWORD *)&v66[3] = *(_DWORD *)((char *)v89 + 3);
  *(_QWORD *)&v67 = v51;
  *((_QWORD *)&v67 + 1) = v50;
  LOBYTE(v68) = v46;
  *(_DWORD *)((char *)&v68 + 1) = *(_DWORD *)v88;
  HIDWORD(v68) = *(_DWORD *)&v88[3];
  v69 = v54;
  v70 = v22;
  v71 = v47;
  *(_DWORD *)&v72[3] = *(_DWORD *)&v87[3];
  *(_DWORD *)v72 = *(_DWORD *)v87;
  v73 = v24;
  v74 = v53;
  LOBYTE(v75) = v52;
  *(_DWORD *)((char *)&v75 + 1) = *(_DWORD *)v86;
  HIDWORD(v75) = *(_DWORD *)&v86[3];
  v76 = v25;
  v77 = v17;
  v78 = v26;
  v79 = v23;
  v80 = v27;
  return sub_100083B48((uint64_t)&v63);
}

uint64_t sub_10008363C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = a1[1];
  v49 = *a1;
  v50 = v4;
  v48 = sub_10000CB40();
  swift_bridgeObjectRetain(v4);
  v5 = Text.init<A>(_:)(&v49, &type metadata for String, v48);
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  v12 = static Font.Weight.semibold.getter();
  v13 = Text.fontWeight(_:)(*(_QWORD *)&v12, 0, v5, v7, v11, v9);
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  sub_10000BFF8(v5, v7, v11);
  v20 = swift_bridgeObjectRelease();
  v21 = static Font.headline.getter(v20);
  v22 = Text.font(_:)(v21, v13, v15, v19, v17);
  v45 = v23;
  v46 = v22;
  LOBYTE(v11) = v24;
  v47 = v25;
  swift_release(v21);
  v44 = v11 & 1;
  sub_10000BFF8(v13, v15, v19);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_10010F640);
  v26 = a1[3];
  v49 = a1[2];
  v50 = v26;
  swift_bridgeObjectRetain(v26);
  v27 = Text.init<A>(_:)(&v49, &type metadata for String, v48);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v34 = static Font.subheadline.getter(v27);
  v35 = Text.font(_:)(v34, v27, v29, v33, v31);
  v37 = v36;
  LOBYTE(v21) = v38;
  v40 = v39;
  swift_release(v34);
  LOBYTE(v34) = v21 & 1;
  sub_10000BFF8(v27, v29, v33);
  swift_bridgeObjectRelease();
  v41 = swift_getKeyPath(&unk_10010F640);
  LOBYTE(v49) = v44;
  *(_QWORD *)a2 = v46;
  *(_QWORD *)(a2 + 8) = v45;
  *(_BYTE *)(a2 + 16) = v44;
  *(_QWORD *)(a2 + 24) = v47;
  *(_QWORD *)(a2 + 32) = KeyPath;
  *(_QWORD *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v35;
  *(_QWORD *)(a2 + 64) = v37;
  *(_BYTE *)(a2 + 72) = v34;
  *(_QWORD *)(a2 + 80) = v40;
  *(_QWORD *)(a2 + 88) = 0x3FE6666666666666;
  *(_QWORD *)(a2 + 96) = v41;
  *(_QWORD *)(a2 + 104) = 1;
  *(_BYTE *)(a2 + 112) = 0;
  sub_10000C008(v46, v45, v44);
  swift_bridgeObjectRetain(v47);
  swift_retain(KeyPath);
  sub_10000C008(v35, v37, v34);
  swift_bridgeObjectRetain(v40);
  swift_retain(v41);
  sub_10000BFF8(v35, v37, v34);
  swift_release(v41);
  swift_bridgeObjectRelease();
  sub_10000BFF8(v46, v45, v49);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease();
}

unint64_t sub_1000838C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160D48;
  if (!qword_100160D48)
  {
    v1 = sub_1000034AC(&qword_100160D38);
    sub_100007D40(&qword_100160D50, &qword_100160D30, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160D48);
  }
  return result;
}

unint64_t sub_100083948()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160D88;
  if (!qword_100160D88)
  {
    v1 = sub_1000034AC(&qword_100160D80);
    sub_1000839B4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160D88);
  }
  return result;
}

unint64_t sub_1000839B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160D90;
  if (!qword_100160D90)
  {
    v1 = sub_1000034AC(&qword_100160D98);
    sub_100083A38();
    sub_100007D40(&qword_100160DC0, &qword_100160DC8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160D90);
  }
  return result;
}

unint64_t sub_100083A38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160DA0;
  if (!qword_100160DA0)
  {
    v1 = sub_1000034AC(&qword_100160DA8);
    sub_100007D40(&qword_100160DB0, &qword_100160DB8, (uint64_t)&protocol conformance descriptor for _MaskEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160DA0);
  }
  return result;
}

uint64_t sub_100083ABC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_BYTE *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 120);
  sub_10000C008(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  sub_10000C008(v4, v5, v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  return a1;
}

uint64_t sub_100083B48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_BYTE *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 120);
  sub_10000BFF8(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(v2);
  swift_bridgeObjectRelease();
  sub_10000BFF8(v3, v4, v5);
  swift_release(v6);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100083BE4()
{
  _QWORD v1[2];

  v1[0] = sub_1000034AC(&qword_100160D38);
  v1[1] = sub_1000838C4();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

uint64_t sub_100083C30()
{
  return sub_100007D40((unint64_t *)&qword_10015D4C8, &qword_10015D4B8, (uint64_t)&unk_10010CF80);
}

unint64_t sub_100083C60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F1F0;
  if (!qword_10015F1F0)
  {
    v1 = type metadata accessor for PromotionalAssets(255);
    result = swift_getWitnessTable(&unk_10010FB20, v1);
    atomic_store(result, (unint64_t *)&qword_10015F1F0);
  }
  return result;
}

uint64_t sub_100083CA8()
{
  return sub_100007D40(&qword_10015E3F8, &qword_10015E3B8, (uint64_t)&unk_10010FCD0);
}

double sub_100083CDC()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10010F7C8);
  v4 = v0;
  v2 = sub_100084028();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(double *)(v0 + 112);
}

uint64_t sub_100083D48(uint64_t result, double a2)
{
  *(double *)(result + 112) = a2;
  return result;
}

double sub_100083D50()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10010F7A0);
  v4 = v0;
  v2 = sub_100084028();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(double *)(v0 + 120);
}

uint64_t sub_100083DBC(uint64_t result, double a2)
{
  *(double *)(result + 120) = a2;
  return result;
}

uint64_t sub_100083DC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  *(_QWORD *)(v1 + 16) = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100116250);
  *(_QWORD *)(v1 + 24) = v3;
  *(_BYTE *)(v1 + 32) = v4 & 1;
  *(_QWORD *)(v1 + 40) = v5;
  *(_QWORD *)(v1 + 48) = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002FLL, 0x8000000100116830);
  *(_QWORD *)(v1 + 56) = v6;
  *(_BYTE *)(v1 + 64) = v7 & 1;
  *(_QWORD *)(v1 + 72) = v8;
  v9 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002ELL, 0x8000000100116860);
  *(_QWORD *)(v1 + 80) = v9;
  *(_QWORD *)(v1 + 88) = v10;
  *(_BYTE *)(v1 + 96) = v11 & 1;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 104) = v12;
  ObservationRegistrar.init()(v9);
  sub_100084078(a1, v1 + OBJC_IVAR____TtC16EventViewService36PromotionalAssetsPhotoEntryViewModel_photoURL);
  return v1;
}

uint64_t sub_100083E98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100050A24(v0 + OBJC_IVAR____TtC16EventViewService36PromotionalAssetsPhotoEntryViewModel_photoURL);
  v1 = v0 + OBJC_IVAR____TtC16EventViewService36PromotionalAssetsPhotoEntryViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100083F34()
{
  return type metadata accessor for PromotionalAssetsPhotoEntryViewModel(0);
}

uint64_t type metadata accessor for PromotionalAssetsPhotoEntryViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100160E90;
  if (!qword_100160E90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PromotionalAssetsPhotoEntryViewModel);
  return result;
}

void sub_100083F78(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = " ";
  v6[1] = " ";
  v6[2] = " ";
  v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_1000500A4(319);
  if (v3 <= 0x3F)
  {
    v6[5] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ObservationRegistrar(319);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 7, v6, a1 + 80);
    }
  }
}

unint64_t sub_100084028()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160F48[0];
  if (!qword_100160F48[0])
  {
    v1 = type metadata accessor for PromotionalAssetsPhotoEntryViewModel(255);
    result = swift_getWitnessTable(&unk_10010F780, v1);
    atomic_store(result, qword_100160F48);
  }
  return result;
}

uint64_t sub_100084078(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_100165370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000840C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[4];

  v46 = a1;
  v47 = a3;
  v4 = *(_QWORD *)(a2 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  WitnessTable = swift_getWitnessTable(&unk_10010F810, v7);
  v9 = type metadata accessor for _ViewModifier_Content(255, a2, WitnessTable);
  v38 = v9;
  v10 = sub_1000034AC(&qword_10015E9E8);
  v11 = *(_QWORD *)(a2 + 16);
  v42 = *(_QWORD *)(a2 + 24);
  v43 = v11;
  v12 = type metadata accessor for _PreferenceWritingModifier(255, v11, v42);
  v13 = type metadata accessor for ModifiedContent(255, v10, v12);
  v14 = sub_1000345F8();
  v15 = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v12);
  v50[2] = v14;
  v50[3] = v15;
  v39 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v16 = type metadata accessor for GeometryReader(255, v13, v39);
  v40 = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v16);
  v41 = type metadata accessor for _BackgroundModifier(255, v16, v40);
  v17 = type metadata accessor for ModifiedContent(0, v9, v41);
  v44 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v38 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v45, a2);
  v23 = *(unsigned __int8 *)(v4 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = swift_allocObject(&unk_100150990, v24 + v5, v23 | 7);
  v26 = v42;
  *(_QWORD *)(v25 + 16) = v43;
  *(_QWORD *)(v25 + 24) = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v25 + v24, v6, a2);
  v27 = GeometryReader.init(content:)(sub_100084BD0, v25, v13, v39);
  v29 = v28;
  v50[0] = v27;
  v50[1] = v28;
  v30 = static Alignment.center.getter(v27);
  v32 = v31;
  v33 = v38;
  v34 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v38);
  View.background<A>(_:alignment:)(v50, v30, v32, v33, v16, v34, v40);
  swift_release(v29);
  v35 = swift_getWitnessTable(&protocol conformance descriptor for _BackgroundModifier<A>, v41);
  v48 = v34;
  v49 = v35;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v17);
  sub_1000F257C((uint64_t)v20, v17, (uint64_t)v22);
  v36 = *(void (**)(char *, uint64_t))(v44 + 8);
  v36(v20, v17);
  sub_1000E3B88((uint64_t)v22, v17, v47);
  return ((uint64_t (*)(char *, uint64_t))v36)(v22, v17);
}

uint64_t sub_1000843A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  unint64_t v25;
  uint64_t WitnessTable;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;

  v31 = a1;
  v36 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4);
  v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v34 = AssociatedTypeWitness;
  __chkstk_darwin(AssociatedTypeWitness);
  v10 = (char *)&v29 - v9;
  v11 = sub_1000034AC(&qword_10015E9E8);
  v30 = v11;
  v32 = type metadata accessor for _PreferenceWritingModifier(255, a3, a4);
  v12 = type metadata accessor for ModifiedContent(0, v11, v32);
  v35 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v29 - v17;
  v19 = static Color.clear.getter(v16);
  KeyPath = swift_getKeyPath(&unk_10010F860);
  v40 = v19;
  v20 = *a2;
  v22 = type metadata accessor for SizeModifier(0, a3, a4, v21);
  v23 = *(void (**)(uint64_t))((char *)a2 + *(int *)(v22 + 40));
  v24 = GeometryProxy.frame(in:)((char *)a2 + *(int *)(v22 + 36));
  v23(v24);
  v25 = sub_1000345F8();
  View.preference<A>(key:value:)(v20, v10, v30, a3, v25, a4);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34);
  swift_release(KeyPath);
  swift_release(v40);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v32);
  v37 = v25;
  v38 = WitnessTable;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  sub_1000F257C((uint64_t)v15, v12, (uint64_t)v18);
  v27 = *(void (**)(char *, uint64_t))(v35 + 8);
  v27(v15, v12);
  sub_1000E3B88((uint64_t)v18, v12, v36);
  return ((uint64_t (*)(char *, uint64_t))v27)(v18, v12);
}

uint64_t sub_1000845D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;

  *a7 = a1;
  v11 = type metadata accessor for SizeModifier(0, a5, a6, a4);
  v12 = (char *)a7 + *(int *)(v11 + 36);
  v13 = type metadata accessor for CoordinateSpace(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a2, v13);
  v15 = (_QWORD *)((char *)a7 + *(int *)(v11 + 40));
  *v15 = a3;
  v15[1] = a4;
  return result;
}

uint64_t type metadata accessor for SizeModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SizeModifier);
}

uint64_t sub_100084668(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.NativeObject.Type + 64;
  result = type metadata accessor for CoordinateSpace(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_1000846EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    v8 = *(int *)(a3 + 36);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for CoordinateSpace(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 40);
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v5 = v14[1];
    *v13 = *v14;
    v13[1] = v5;
  }
  swift_retain(v5);
  return a1;
}

uint64_t sub_100084790(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 40) + 8));
}

_QWORD *sub_1000847E8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 40);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain(v13);
  return a1;
}

_QWORD *sub_10008486C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 40);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = v12[1];
  v14 = v11[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain(v13);
  swift_release(v14);
  return a1;
}

_QWORD *sub_1000848FC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 40)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 40));
  return a1;
}

_QWORD *sub_100084974(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 40);
  v11 = *(_QWORD *)((char *)a1 + v10 + 8);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  swift_release(v11);
  return a1;
}

uint64_t sub_1000849F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100084A04);
}

uint64_t sub_100084A04(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for CoordinateSpace(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 36)], a2, v8);
  }
}

uint64_t sub_100084A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100084A8C);
}

char *sub_100084A8C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for CoordinateSpace(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 36)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100084B00(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100119EE0, 1);
}

uint64_t sub_100084B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = type metadata accessor for SizeModifier(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = v8 + *(_QWORD *)(v6 + 64);
  v10 = v7 | 7;
  v11 = v4 + v8;
  v12 = v4 + v8 + *(int *)(v5 + 36);
  v13 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_release(*(_QWORD *)(v11 + *(int *)(v5 + 40) + 8));
  return swift_deallocObject(v4, v9, v10);
}

uint64_t sub_100084BD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SizeModifier(0, v6, v7, a2) - 8) + 80);
  return sub_1000843A4(a1, (uint64_t *)(v3 + ((v8 + 32) & ~v8)), v6, v7, a3);
}

uint64_t sub_100084C40(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for SizeModifier(255, *a1, v5, a4);
  WitnessTable = swift_getWitnessTable(&unk_10010F810, v6);
  v8 = type metadata accessor for _ViewModifier_Content(255, v6, WitnessTable);
  v9 = sub_1000034AC(&qword_10015E9E8);
  v10 = type metadata accessor for _PreferenceWritingModifier(255, v4, v5);
  v11 = type metadata accessor for ModifiedContent(255, v9, v10);
  sub_1000345F8();
  swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v10);
  v12 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v13 = type metadata accessor for GeometryReader(255, v11, v12);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v13);
  v15 = type metadata accessor for _BackgroundModifier(255, v13, v14);
  v16 = type metadata accessor for ModifiedContent(255, v8, v15);
  swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v8);
  swift_getWitnessTable(&protocol conformance descriptor for _BackgroundModifier<A>, v15);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
}

uint64_t *sub_100084D94(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    swift_retain(v5);
    v9 = sub_100003E70(&qword_100160FD0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return a1;
}

uint64_t sub_100084E1C(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = sub_100003E70(&qword_100160FD0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_100084E68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  swift_retain(v4);
  v8 = sub_100003E70(&qword_100160FD0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

uint64_t *sub_100084ECC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_100003E70(&qword_100160FD0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_QWORD *sub_100084F44(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_100003E70(&qword_100160FD0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_100084FA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_100003E70(&qword_100160FD0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_100085014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100085020);
}

uint64_t sub_100085020(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003E70(&qword_100160FD0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1000850A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000850AC);
}

char *sub_1000850AC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_100003E70(&qword_100160FD0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CircularProgressViewStyle(uint64_t a1)
{
  uint64_t result;

  result = qword_100161030;
  if (!qword_100161030)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CircularProgressViewStyle);
  return result;
}

void sub_100085160(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1000851D8(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_1000851D8(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100161040)
  {
    v2 = sub_100085230();
    v3 = type metadata accessor for ScaledMetric(a1, &type metadata for Double, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100161040);
  }
}

unint64_t sub_100085230()
{
  unint64_t result;

  result = qword_100161048;
  if (!qword_100161048)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_100161048);
  }
  return result;
}

uint64_t sub_100085274(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100119F3C, 1);
}

uint64_t sub_100085284@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v21;
  _OWORD v22[14];
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38;

  v2 = v1;
  v4 = sub_100003E70(&qword_100161078);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for LayoutDirection(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100085494(v2, (uint64_t)v22);
  v36 = v22[12];
  v37 = v22[13];
  v38 = v23;
  v32 = v22[8];
  v33 = v22[9];
  v34 = v22[10];
  v35 = v22[11];
  v28 = v22[4];
  v29 = v22[5];
  v30 = v22[6];
  v31 = v22[7];
  v24 = v22[0];
  v25 = v22[1];
  v26 = v22[2];
  v27 = v22[3];
  KeyPath = swift_getKeyPath(&unk_10010F8E8);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for LayoutDirection.leftToRight(_:), v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)v6 + *(int *)(v4 + 28), v10, v7);
  *v6 = KeyPath;
  v12 = sub_100003E70(&qword_100161080);
  sub_1000858FC((uint64_t)v6, a1 + *(int *)(v12 + 36));
  v13 = v37;
  *(_OWORD *)(a1 + 192) = v36;
  *(_OWORD *)(a1 + 208) = v13;
  *(_BYTE *)(a1 + 224) = v38;
  v14 = v33;
  *(_OWORD *)(a1 + 128) = v32;
  *(_OWORD *)(a1 + 144) = v14;
  v15 = v35;
  *(_OWORD *)(a1 + 160) = v34;
  *(_OWORD *)(a1 + 176) = v15;
  v16 = v29;
  *(_OWORD *)(a1 + 64) = v28;
  *(_OWORD *)(a1 + 80) = v16;
  v17 = v31;
  *(_OWORD *)(a1 + 96) = v30;
  *(_OWORD *)(a1 + 112) = v17;
  v18 = v25;
  *(_OWORD *)a1 = v24;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = v27;
  *(_OWORD *)(a1 + 32) = v26;
  *(_OWORD *)(a1 + 48) = v19;
  sub_1000859E4((uint64_t)&v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100085944);
  sub_1000859A4((uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return sub_1000859E4((uint64_t)v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100085A60);
}

__n128 sub_100085494@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  double v11;
  char v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __n128 result;
  _OWORD v31[8];
  uint64_t v32;
  char v33;
  _BYTE v34[209];
  _QWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  double v52;
  uint64_t v53;
  _OWORD v54[14];
  char v55;

  *(double *)&v4 = COERCE_DOUBLE(ProgressViewStyleConfiguration.fractionCompleted.getter());
  if ((v5 & 1) != 0)
  {
    sub_100085AC0((uint64_t)v35);
  }
  else
  {
    v6 = *(double *)&v4;
    v7 = static Alignment.center.getter(v4);
    v9 = v8;
    sub_1000856CC(a1, (uint64_t)v31, v6);
    type metadata accessor for CircularProgressViewStyle(0);
    sub_100003E70(&qword_100160FD0);
    v10 = ScaledMetric.wrappedValue.getter(v54);
    v11 = *(double *)v54 * 0.5;
    v12 = static Edge.Set.all.getter(v10);
    v13 = EdgeInsets.init(_all:)(v11);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    v33 = 0;
    v20 = static UnitPoint.center.getter();
    v35[0] = v7;
    v35[1] = v9;
    v42 = v31[6];
    v43 = v31[7];
    v44 = v32;
    v38 = v31[2];
    v39 = v31[3];
    v40 = v31[4];
    v41 = v31[5];
    v36 = v31[0];
    v37 = v31[1];
    v45 = v12;
    v46 = v13;
    v47 = v15;
    v48 = v17;
    v49 = v19;
    v50 = v33;
    v51 = 0xBFF921FB54442D18;
    v52 = v20;
    v53 = v21;
    sub_100085C04((uint64_t)v35);
  }
  sub_100085ACC((uint64_t)v35, (uint64_t)v34);
  v22 = sub_100003E70(&qword_100161090);
  v23 = sub_100085B14();
  _ConditionalContent<>.init(storage:)(v34, v22, &type metadata for EmptyView, v23, &protocol witness table for EmptyView);
  v24 = v54[13];
  *(_OWORD *)(a2 + 192) = v54[12];
  *(_OWORD *)(a2 + 208) = v24;
  *(_BYTE *)(a2 + 224) = v55;
  v25 = v54[9];
  *(_OWORD *)(a2 + 128) = v54[8];
  *(_OWORD *)(a2 + 144) = v25;
  v26 = v54[11];
  *(_OWORD *)(a2 + 160) = v54[10];
  *(_OWORD *)(a2 + 176) = v26;
  v27 = v54[5];
  *(_OWORD *)(a2 + 64) = v54[4];
  *(_OWORD *)(a2 + 80) = v27;
  v28 = v54[7];
  *(_OWORD *)(a2 + 96) = v54[6];
  *(_OWORD *)(a2 + 112) = v28;
  v29 = v54[1];
  *(_OWORD *)a2 = v54[0];
  *(_OWORD *)(a2 + 16) = v29;
  result = (__n128)v54[3];
  *(_OWORD *)(a2 + 32) = v54[2];
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t sub_1000856CC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  _QWORD v24[5];
  double v25[5];

  v6 = static HierarchicalShapeStyle.primary.getter();
  type metadata accessor for CircularProgressViewStyle(0);
  sub_100003E70(&qword_100160FD0);
  ScaledMetric.wrappedValue.getter(v25);
  v7 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v24, 1, 1, _swiftEmptyArrayStorage, v25[0], 10.0, 0.0);
  v8 = v24[0];
  v9 = v24[2];
  v10 = v24[3];
  v11 = v24[4];
  v12 = static Alignment.center.getter(v7);
  v14 = v13;
  v15 = *a1;
  v16 = Color.opacity(_:)(0.3);
  ScaledMetric.wrappedValue.getter(v25);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v25, 1, 1, _swiftEmptyArrayStorage, v25[0], 10.0, 0.0);
  v18 = v25[1];
  v17 = v25[2];
  v19 = v25[3];
  v20 = v25[4];
  v21 = v24[1];
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v21;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 40) = v6;
  *(_WORD *)(a2 + 44) = 256;
  *(_QWORD *)(a2 + 48) = v12;
  *(_QWORD *)(a2 + 56) = v14;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = 0;
  v22 = v25[0];
  *(double *)(a2 + 80) = a3;
  *(double *)(a2 + 88) = v22;
  *(double *)(a2 + 96) = v18;
  *(double *)(a2 + 104) = v17;
  *(double *)(a2 + 112) = v19;
  *(double *)(a2 + 120) = v20;
  *(_QWORD *)(a2 + 128) = v15;
  swift_bridgeObjectRetain(v10);
  swift_retain(v16);
  swift_retain(v15);
  swift_release(v16);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100085858(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for LayoutDirection(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.layoutDirection.setter(v4);
}

uint64_t sub_1000858D8()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_1000858FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_100161078);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100085944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t result;

  if ((a29 & 1) == 0)
  {
    swift_bridgeObjectRetain(a6);
    swift_retain(a11);
    swift_bridgeObjectRetain(a17);
    return swift_retain(a19);
  }
  return result;
}

uint64_t sub_1000859A4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003E70(&qword_100161078);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000859E4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 224);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4);
  return a1;
}

uint64_t sub_100085A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t result;

  if ((a29 & 1) == 0)
  {
    swift_bridgeObjectRelease(a6);
    swift_release(a11);
    swift_bridgeObjectRelease(a17);
    return swift_release(a19);
  }
  return result;
}

uint64_t sub_100085AC0(uint64_t result)
{
  *(_BYTE *)(result + 224) = 1;
  return result;
}

uint64_t sub_100085ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_100161088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100085B14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100161098;
  if (!qword_100161098)
  {
    v1 = sub_1000034AC(&qword_100161090);
    sub_100085B80();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100161098);
  }
  return result;
}

unint64_t sub_100085B80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001610A0;
  if (!qword_1001610A0)
  {
    v1 = sub_1000034AC(&qword_1001610A8);
    sub_100007D40(&qword_1001610B0, &qword_1001610B8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001610A0);
  }
  return result;
}

uint64_t sub_100085C04(uint64_t result)
{
  *(_BYTE *)(result + 224) = 0;
  return result;
}

unint64_t sub_100085C10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001610C0;
  if (!qword_1001610C0)
  {
    v1 = sub_1000034AC(&qword_100161080);
    sub_100085C94();
    sub_100007D40(qword_100161108, &qword_100161078, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001610C0);
  }
  return result;
}

unint64_t sub_100085C94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001610C8;
  if (!qword_1001610C8)
  {
    v1 = sub_1000034AC(&qword_1001610D0);
    sub_100085D18();
    sub_100007D40(&qword_1001610F8, &qword_100161100, (uint64_t)&protocol conformance descriptor for _ContainerShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001610C8);
  }
  return result;
}

unint64_t sub_100085D18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001610D8;
  if (!qword_1001610D8)
  {
    v1 = sub_1000034AC(&qword_1001610E0);
    sub_100085D7C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001610D8);
  }
  return result;
}

unint64_t sub_100085D7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001610E8;
  if (!qword_1001610E8)
  {
    v1 = sub_1000034AC(&qword_1001610F0);
    sub_100085B14();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001610E8);
  }
  return result;
}

uint64_t sub_100085DE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *(*a4)(__int128 *__return_ptr)@<X3>, uint64_t a5@<X4>, _QWORD *(*a6)(__int128 *__return_ptr, uint64_t)@<X5>, uint64_t a7@<X6>, _QWORD *(*a8)(__int128 *__return_ptr)@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  _QWORD *v37;
  unsigned __int8 v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  unsigned __int8 v48;
  _QWORD *(*v49)(__int128 *__return_ptr);
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  __n128 v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v86;
  double v87;
  int v88;
  char *v89;
  double v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *(*v143)(__int128 *__return_ptr);
  _QWORD *(*v144)(__int128 *__return_ptr, uint64_t);
  _QWORD *(*v145)(__int128 *__return_ptr);
  int v146;
  __int16 v147;
  _DWORD v148[2];
  _DWORD v149[2];
  _DWORD v150[2];
  _DWORD v151[2];
  int v152;
  __int16 v153;
  int v154;
  __int16 v155;
  _BYTE v156[7];
  _BYTE v157[7];
  _BYTE v158[7];
  _BYTE v159[11];
  __int16 v160;
  _BYTE v161[7];
  _BYTE v162[7];
  _BYTE v163[7];
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  unsigned __int8 v173;
  unsigned __int8 v174;
  unsigned __int8 v175;
  unsigned __int8 v176;
  unsigned __int8 v177;
  unsigned __int8 v178;
  int v179;
  __int16 v180;
  char v181;
  _BYTE v182[7];
  _BYTE v183[7];
  _BYTE v184[7];
  _BYTE v185[7];
  int v186;
  __int16 v187;
  _OWORD v188[34];
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  char v198;
  _BYTE v199[7];
  double v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  _BYTE v205[7];
  uint64_t v206;
  char v207;
  _BYTE v208[7];
  char v209;
  char v210;
  int v211;
  __int16 v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  _BYTE v218[7];
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  _BYTE v224[7];
  char v225;
  _BYTE v226[7];
  double v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  _BYTE v232[7];
  uint64_t v233;
  uint64_t v234;
  char v235;
  char v236;
  int v237;
  __int16 v238;
  _QWORD *(*v239)(_QWORD *__return_ptr, _QWORD);
  char v240;
  char v241;
  int v242;
  __int16 v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  _BYTE v249[7];
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char v254;
  _BYTE v255[7];
  char v256;
  _BYTE v257[7];
  double v258;
  _QWORD *(*v259)(_QWORD *__return_ptr);
  uint64_t v260;
  uint64_t v261;
  char v262;
  _BYTE v263[7];
  uint64_t v264;
  uint64_t v265;
  char v266;
  char v267;
  int v268;
  __int16 v269;
  _QWORD *(*v270)(_QWORD *__return_ptr);

  v143 = a8;
  v144 = a6;
  v140 = a7;
  v141 = a5;
  v145 = a4;
  v96 = a3;
  v94 = a1;
  v95 = a2;
  v105 = a9;
  v142 = a10;
  v101 = sub_100003E70(&qword_1001611B8);
  __chkstk_darwin(v101);
  v100 = (uint64_t)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003E70(&qword_1001611C0);
  __chkstk_darwin(v11);
  v13 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100003E70(&qword_1001611C8);
  __chkstk_darwin(v92);
  v15 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100003E70(&qword_1001611D0);
  __chkstk_darwin(v98);
  v97 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003E70(&qword_1001611D8);
  __chkstk_darwin(v17);
  v102 = (uint64_t)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100003E70(&qword_1001611E0);
  v103 = *(_QWORD *)(v19 - 8);
  v104 = v19;
  __chkstk_darwin(v19);
  v99 = (char *)&v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100003E70(&qword_1001611E8);
  v22 = type metadata accessor for ToolbarPlacement(0);
  v23 = swift_allocObject(v21, ((*(unsigned __int8 *)(*(_QWORD *)(v22 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v22 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v22 - 8) + 80) | 7);
  *(_OWORD *)(v23 + 16) = xmmword_10010ACC0;
  static ToolbarPlacement.navigationBar.getter();
  v24 = sub_100003E70(&qword_1001611A0);
  v25 = sub_10005C954(&qword_1001611F0, &qword_1001611A0, (void (*)(void))sub_10008A258);
  View.toolbar(_:for:)(2, v23, v24, v25);
  v26 = swift_bridgeObjectRelease();
  v27 = v144(&v164, v26);
  v93 = static Edge.Set.vertical.getter(v27);
  v28 = EdgeInsets.init(_all:)(11.5);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v91 = static Edge.Set.all.getter(v35);
  v106 = static SafeAreaRegions.all.getter(v36);
  v173 = 0;
  v144 = (_QWORD *(*)(__int128 *__return_ptr, uint64_t))static VerticalAlignment.center.getter(v106);
  v119 = v173;
  v37 = v145(&v189);
  v132 = static Edge.Set.vertical.getter(v37);
  v117 = BYTE1(v189);
  v118 = v189;
  v115 = v190;
  v116 = *((_QWORD *)&v189 + 1);
  v112 = v191;
  v113 = *((_QWORD *)&v190 + 1);
  v110 = BYTE8(v191);
  v107 = *((_QWORD *)&v192 + 1);
  v109 = v192;
  v138 = *((_QWORD *)&v193 + 1);
  v133 = v193;
  v38 = v194;
  v39 = EdgeInsets.init(_all:)(11.5);
  v87 = v39;
  v41 = v40;
  v43 = v42;
  v45 = v44;
  v175 = v38;
  v174 = 0;
  v46 = HorizontalEdge.rawValue.getter(0);
  LODWORD(v140) = Edge.init(rawValue:)((2 * v46) | 1u);
  v131 = static SafeAreaRegions.container.getter();
  v114 = v175;
  v123 = v174;
  v176 = 1;
  v145 = (_QWORD *(*)(__int128 *__return_ptr))static VerticalAlignment.center.getter(v131);
  v124 = v176;
  v47 = v143(&v189);
  v139 = static Edge.Set.vertical.getter(v47);
  v122 = v189;
  v121 = BYTE1(v189);
  v128 = v190;
  v129 = *((_QWORD *)&v189 + 1);
  v126 = v191;
  v127 = *((_QWORD *)&v190 + 1);
  v125 = BYTE8(v191);
  v136 = *((_QWORD *)&v192 + 1);
  v137 = v192;
  v134 = *((_QWORD *)&v193 + 1);
  v135 = v193;
  v48 = v194;
  v90 = EdgeInsets.init(_all:)(11.5);
  v142 = v50;
  v143 = v49;
  v141 = v51;
  v178 = v48;
  v177 = 0;
  v52 = HorizontalEdge.rawValue.getter(1);
  v111 = Edge.init(rawValue:)((2 * v52) | 1u);
  v130 = static SafeAreaRegions.container.getter();
  v108 = v178;
  v120 = v177;
  v181 = 1;
  v152 = v186;
  v153 = v187;
  v151[0] = *(_DWORD *)v185;
  *(_DWORD *)((char *)v151 + 3) = *(_DWORD *)&v185[3];
  v150[0] = *(_DWORD *)v184;
  *(_DWORD *)((char *)v150 + 3) = *(_DWORD *)&v184[3];
  *(_DWORD *)((char *)v149 + 3) = *(_DWORD *)&v183[3];
  v149[0] = *(_DWORD *)v183;
  v148[0] = *(_DWORD *)v182;
  *(_DWORD *)((char *)v148 + 3) = *(_DWORD *)&v182[3];
  v88 = 1;
  v146 = v179;
  v147 = v180;
  *(_QWORD *)v13 = static HorizontalAlignment.center.getter(v130);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 0;
  v53 = sub_100003E70(&qword_100161208);
  v54 = sub_10008BEF8(v94, v95, v96, (double *)&v13[*(int *)(v53 + 44)]);
  v55 = static Edge.Set.all.getter(v54);
  v57 = static SafeAreaRegions.all.getter(v56);
  v89 = v15;
  sub_100007ADC((uint64_t)v13, (uint64_t)v15, &qword_1001611C0);
  v58 = &v15[*(int *)(v92 + 36)];
  *(_QWORD *)v58 = v57;
  v58[8] = v55;
  v59 = sub_100008194((uint64_t)v13, &qword_1001611C0);
  v60 = static Alignment.center.getter(v59);
  v62 = v61;
  *(_DWORD *)((char *)&v188[23] + 10) = v186;
  *(_DWORD *)((char *)&v188[26] + 1) = *(_DWORD *)v185;
  *(_DWORD *)((char *)&v188[28] + 9) = *(_DWORD *)v184;
  *(_DWORD *)((char *)&v188[29] + 1) = *(_DWORD *)v183;
  *(_DWORD *)((char *)&v188[31] + 9) = *(_DWORD *)v182;
  *(_DWORD *)((char *)&v188[33] + 2) = v179;
  HIWORD(v188[23]) = v187;
  DWORD1(v188[26]) = *(_DWORD *)&v185[3];
  HIDWORD(v188[28]) = *(_DWORD *)&v184[3];
  DWORD1(v188[29]) = *(_DWORD *)&v183[3];
  HIDWORD(v188[31]) = *(_DWORD *)&v182[3];
  WORD3(v188[33]) = v180;
  v188[6] = v170;
  v188[7] = v171;
  v188[8] = v172;
  v188[2] = v166;
  v188[3] = v167;
  v188[4] = v168;
  v188[5] = v169;
  v188[0] = v164;
  v188[1] = v165;
  v63 = v93;
  LOBYTE(v188[9]) = v93;
  *((double *)&v188[9] + 1) = v28;
  *(_QWORD *)&v188[10] = v30;
  *((_QWORD *)&v188[10] + 1) = v32;
  *(_QWORD *)&v188[11] = v34;
  BYTE8(v188[11]) = v119;
  *(_QWORD *)&v188[12] = v106;
  LOBYTE(v24) = v91;
  BYTE8(v188[12]) = v91;
  LOBYTE(v188[13]) = v118;
  BYTE1(v188[13]) = v117;
  *((_QWORD *)&v188[13] + 1) = v116;
  *(_QWORD *)&v188[14] = v115;
  *((_QWORD *)&v188[14] + 1) = v113;
  *(_QWORD *)&v188[15] = v112;
  BYTE8(v188[15]) = v110;
  *(_QWORD *)&v188[16] = v109;
  *((_QWORD *)&v188[16] + 1) = v107;
  *(_QWORD *)&v188[17] = v133;
  *((_QWORD *)&v188[17] + 1) = v138;
  LOBYTE(v188[18]) = v114;
  BYTE8(v188[18]) = v132;
  *(double *)&v188[19] = v39;
  *((_QWORD *)&v188[19] + 1) = v41;
  v64 = v41;
  *(_QWORD *)&v188[20] = v43;
  *((_QWORD *)&v188[20] + 1) = v45;
  LOBYTE(v188[21]) = v123;
  *((_QWORD *)&v188[21] + 1) = v131;
  *(_QWORD *)&v188[22] = 0;
  BYTE8(v188[22]) = v124;
  BYTE9(v188[22]) = v140;
  *(_QWORD *)&v188[23] = v144;
  BYTE8(v188[23]) = v122;
  BYTE9(v188[23]) = v121;
  *(_QWORD *)&v188[24] = v129;
  *((_QWORD *)&v188[24] + 1) = v128;
  *(_QWORD *)&v188[25] = v127;
  *((_QWORD *)&v188[25] + 1) = v126;
  LOBYTE(v188[26]) = v125;
  *((_QWORD *)&v188[26] + 1) = v137;
  *(_QWORD *)&v188[27] = v136;
  *((_QWORD *)&v188[27] + 1) = v135;
  *(_QWORD *)&v188[28] = v134;
  BYTE8(v188[28]) = v108;
  LOBYTE(v188[29]) = v139;
  v65 = v90;
  *((double *)&v188[29] + 1) = v90;
  *(_QWORD *)&v188[30] = v143;
  *((_QWORD *)&v188[30] + 1) = v142;
  *(_QWORD *)&v188[31] = v141;
  BYTE8(v188[31]) = v120;
  v188[32] = (unint64_t)v130;
  LOBYTE(v188[33]) = 1;
  BYTE1(v188[33]) = v111;
  *((_QWORD *)&v188[33] + 1) = v145;
  v66 = (uint64_t)v89;
  v67 = v100;
  sub_100007ADC((uint64_t)v89, v100, &qword_1001611C8);
  v68 = (uint64_t *)(v67 + *(int *)(v101 + 36));
  *v68 = v60;
  v68[1] = v62;
  v69 = v97;
  sub_100007ADC(v67, (uint64_t)&v97[*(int *)(v98 + 36)], &qword_1001611B8);
  memcpy(v69, v188, 0x220uLL);
  sub_10008A2DC((uint64_t)v188);
  sub_100008194(v67, &qword_1001611B8);
  sub_100008194(v66, &qword_1001611C8);
  v198 = v63;
  v204 = v119;
  v206 = v106;
  v207 = v24;
  v209 = v118;
  v210 = v117;
  v213 = v116;
  v214 = v115;
  v215 = v113;
  v216 = v112;
  v217 = v110;
  v219 = v109;
  v220 = v107;
  v195 = v170;
  v196 = v171;
  v197 = v172;
  v191 = v166;
  v192 = v167;
  v193 = v168;
  v194 = v169;
  v189 = v164;
  v190 = v165;
  *(_DWORD *)v199 = *(_DWORD *)v163;
  *(_DWORD *)&v199[3] = *(_DWORD *)&v163[3];
  v200 = v28;
  v201 = v30;
  v202 = v32;
  v203 = v34;
  *(_DWORD *)v205 = *(_DWORD *)v162;
  *(_DWORD *)&v205[3] = *(_DWORD *)&v162[3];
  *(_DWORD *)&v208[3] = *(_DWORD *)&v161[3];
  *(_DWORD *)v208 = *(_DWORD *)v161;
  v212 = v160;
  v211 = *(_DWORD *)&v159[7];
  *(_DWORD *)v218 = *(_DWORD *)v159;
  *(_DWORD *)&v218[3] = *(_DWORD *)&v159[3];
  v221 = v133;
  v222 = v138;
  v223 = v114;
  *(_DWORD *)v224 = *(_DWORD *)v158;
  *(_DWORD *)&v224[3] = *(_DWORD *)&v158[3];
  v225 = v132;
  *(_DWORD *)v226 = *(_DWORD *)v157;
  *(_DWORD *)&v226[3] = *(_DWORD *)&v157[3];
  v227 = v87;
  v228 = v64;
  v229 = v43;
  v230 = v45;
  v231 = v123;
  *(_DWORD *)v232 = *(_DWORD *)v156;
  *(_DWORD *)&v232[3] = *(_DWORD *)&v156[3];
  v233 = v131;
  v234 = 0;
  v235 = v124;
  v236 = v140;
  v237 = v154;
  v238 = v155;
  v239 = (_QWORD *(*)(_QWORD *__return_ptr, _QWORD))v144;
  v240 = v122;
  v241 = v121;
  v242 = v152;
  v243 = v153;
  v244 = v129;
  v245 = v128;
  v246 = v127;
  v247 = v126;
  v248 = v125;
  *(_DWORD *)v249 = v151[0];
  *(_DWORD *)&v249[3] = *(_DWORD *)((char *)v151 + 3);
  v250 = v137;
  v251 = v136;
  v252 = v135;
  v253 = v134;
  v254 = v108;
  *(_DWORD *)v255 = v150[0];
  *(_DWORD *)&v255[3] = *(_DWORD *)((char *)v150 + 3);
  v256 = v139;
  *(_DWORD *)v257 = v149[0];
  *(_DWORD *)&v257[3] = *(_DWORD *)((char *)v149 + 3);
  v258 = v65;
  v259 = (_QWORD *(*)(_QWORD *__return_ptr))v143;
  v260 = v142;
  v261 = v141;
  v262 = v120;
  *(_DWORD *)v263 = v148[0];
  *(_DWORD *)&v263[3] = *(_DWORD *)((char *)v148 + 3);
  v264 = v130;
  v265 = 0;
  v266 = v88;
  v267 = v111;
  v268 = v146;
  v269 = v147;
  v270 = (_QWORD *(*)(_QWORD *__return_ptr))v145;
  v70 = sub_10008A370((uint64_t)&v189);
  v71 = static Alignment.top.getter(v70);
  v72 = v102;
  sub_1000E564C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v102, 0.0, 1, INFINITY, 0, v71, v73);
  v74 = sub_100008194((uint64_t)v69, &qword_1001611D0);
  v75 = static Alignment.center.getter(v74);
  v77 = v76;
  v78 = sub_100003E70(&qword_100161210);
  v79 = v105;
  v80 = v105 + *(int *)(v78 + 36);
  sub_100007ADC(v72, v80, &qword_1001611D8);
  v81 = (uint64_t *)(v80 + *(int *)(sub_100003E70(&qword_100161218) + 36));
  *v81 = v75;
  v81[1] = v77;
  v83 = v103;
  v82 = v104;
  v84 = v99;
  (*(void (**)(uint64_t, char *, uint64_t))(v103 + 16))(v79, v99, v104);
  sub_100008194(v72, &qword_1001611D8);
  return (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v84, v82);
}

