uint64_t sub_1000869C4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v7;

  v0 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(60, 1);
  v3._countAndFlagsBits = 0xD00000000000003CLL;
  v3._object = (void *)0x80000001001168F0;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v3);
  v4 = Image.init(systemName:)(0xD000000000000013, 0x8000000100116930);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
  swift_release(v4);
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v5);
  return LocalizedStringKey.init(stringInterpolation:)(v2);
}

uint64_t sub_100086A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for SavedWallpaperViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for State(0, v4);
  State.wrappedValue.getter(&v7, v5);
  return v7;
}

uint64_t sub_100086AD8(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_100003E70(&qword_10015D470);
  v3 = swift_allocObject(v2, 17, 7);
  *(_BYTE *)(v3 + 16) = a1;
  v4 = sub_100007D40(&qword_10015D478, &qword_10015D470, (uint64_t)&unk_1001101D4);
  return ObservedObject.init(wrappedValue:)(v3, v2, v4);
}

uint64_t sub_100086B48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[16];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[16];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;

  v3 = v2;
  v49 = a2;
  v5 = sub_100003E70(&qword_100161190);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003E70(&qword_100161198);
  __chkstk_darwin(v9);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003E70(&qword_1001611A0);
  __chkstk_darwin(v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = *(_QWORD *)(a1 + 16);
  v48 = *(_QWORD *)(a1 + 24);
  v55 = v47;
  v56 = v48;
  v57 = v3;
  v15 = sub_100003E70(&qword_1001611A8);
  v16 = sub_100007D40(&qword_1001611B0, &qword_1001611A8, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v17 = NavigationStack.init<>(root:)(sub_10008A238, v54, v15, v16);
  LOBYTE(v15) = static Edge.Set.top.getter(v17);
  v18 = EdgeInsets.init(_all:)(60.0);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v11, v8, v5);
  v25 = &v11[*(int *)(v9 + 36)];
  *v25 = v15;
  *((double *)v25 + 1) = v18;
  *((_QWORD *)v25 + 2) = v20;
  *((_QWORD *)v25 + 3) = v22;
  *((_QWORD *)v25 + 4) = v24;
  v25[40] = 0;
  v26 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  LOBYTE(v15) = static Edge.Set.bottom.getter(v26);
  v27 = EdgeInsets.init(_all:)(20.0);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  sub_100007ADC((uint64_t)v11, (uint64_t)v14, &qword_100161198);
  v34 = &v14[*(int *)(v12 + 36)];
  *v34 = v15;
  *((double *)v34 + 1) = v27;
  *((_QWORD *)v34 + 2) = v29;
  *((_QWORD *)v34 + 3) = v31;
  *((_QWORD *)v34 + 4) = v33;
  v34[40] = 0;
  sub_100008194((uint64_t)v11, &qword_100161198);
  v36 = *(_QWORD *)(v3 + 16);
  v35 = *(_QWORD *)(v3 + 24);
  type metadata accessor for MainActor(0);
  swift_retain(v35);
  v38 = static MainActor.shared.getter(v37);
  v39 = (_QWORD *)swift_allocObject(&unk_100150A90, 48, 7);
  v39[2] = v38;
  v39[3] = &protocol witness table for MainActor;
  v39[4] = v36;
  v39[5] = v35;
  swift_retain(v35);
  v41 = static MainActor.shared.getter(v40);
  v42 = (_QWORD *)swift_allocObject(&unk_100150AB8, 48, 7);
  v42[2] = v41;
  v42[3] = &protocol witness table for MainActor;
  v42[4] = v36;
  v42[5] = v35;
  Binding.init(get:set:)(&v58, sub_10007BA3C, v39, sub_10007BA78, v42, &type metadata for Bool);
  v43 = v58;
  v44 = v59;
  v51 = v47;
  v52 = v48;
  v53 = v3;
  sub_100085DE8(v58, v59, v60, (_QWORD *(*)(__int128 *__return_ptr))sub_100089388, 0, (_QWORD *(*)(__int128 *__return_ptr, uint64_t))sub_100089408, 0, (_QWORD *(*)(__int128 *__return_ptr))sub_10008A24C, v49, (uint64_t)v50);
  swift_release(v44);
  swift_release(v43);
  return sub_100008194((uint64_t)v14, &qword_1001611A0);
}

uint64_t sub_100086E90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  *(_QWORD *)a4 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  v8 = sub_100003E70(&qword_100161220);
  return sub_100086EF0(a1, a2, a3, a4 + *(int *)(v8 + 44));
}

uint64_t sub_100086EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSString v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void (**v66)(double *@<X8>, double@<D2>, double@<D3>);
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __n128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  char *v83;
  double (**v84)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  int v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  double v150;
  double v151;
  double v152;
  double v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  char v179;
  char v180;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  id v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  id *v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD v222[33];
  __int128 v223;
  _BYTE v224[168];
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  _BYTE v229[7];
  char v230;
  _BYTE v231[7];
  double v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  _OWORD v237[7];
  _OWORD v238[2];
  _OWORD v239[9];
  char v240;
  unsigned __int8 v241;
  char v242;
  _BYTE v243[7];
  _BYTE v244[7];
  _BYTE v245[7];
  _BYTE v246[7];
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  char v259;
  uint64_t v260;
  char v261;
  uint64_t v262;
  char v263;
  uint64_t v264;
  char v265;
  uint64_t v266;
  char v267;
  __int128 v268;

  v217 = a1;
  v211 = a4;
  v6 = sub_100003E70(&qword_100161228);
  v190 = *(_QWORD *)(v6 - 8);
  v191 = v6;
  __chkstk_darwin(v6);
  v189 = (char *)&v186 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003E70(&qword_100161230);
  v201 = *(_QWORD *)(v8 - 8);
  v202 = v8;
  __chkstk_darwin(v8);
  v188 = (char *)&v186 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v10);
  v207 = (char *)&v186 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v208 = *(_QWORD *)(v12 - 8);
  v209 = v12;
  v13 = __chkstk_darwin(v12);
  v199 = (char *)&v186 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = v14;
  __chkstk_darwin(v13);
  v200 = (char *)&v186 - v15;
  v16 = sub_100003E70(&qword_100161238);
  v17 = __chkstk_darwin(v16);
  v210 = (uint64_t)&v186 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v218 = (uint64_t)&v186 - v19;
  v215 = a2;
  v220 = a3;
  v21 = type metadata accessor for SavedWallpaperView(0, a2, a3, v20);
  v213 = *(_QWORD *)(v21 - 8);
  v214 = v21;
  v212 = *(_QWORD *)(v213 + 64);
  __chkstk_darwin(v21);
  v216 = (char *)&v186 - v22;
  v193 = sub_100003E70(&qword_100161240);
  __chkstk_darwin(v193);
  v24 = (char *)&v186 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = type metadata accessor for CoordinateSpace(0);
  v25 = *(_QWORD *)(v195 - 8);
  __chkstk_darwin(v195);
  v194 = (char *)&v186 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Image.ResizingMode(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v186 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_100003E70(&qword_100161248);
  __chkstk_darwin(v192);
  v32 = (char *)&v186 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = sub_100003E70(&qword_100161250);
  __chkstk_darwin(v196);
  v198 = (id *)((char *)&v186 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  v197 = sub_100003E70(&qword_100161258);
  __chkstk_darwin(v197);
  v204 = (char *)&v186 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100003E70(&qword_100161260);
  v205 = *(_QWORD *)(v35 - 8);
  v206 = v35;
  __chkstk_darwin(v35);
  v203 = (uint64_t)&v186 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100003E70(&qword_100161268);
  v38 = __chkstk_darwin(v37);
  v219 = (uint64_t)&v186 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v221 = (uint64_t)&v186 - v40;
  v41 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v42 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v41);

  if (v42)
  {
    v186 = v42;
    v43 = Image.init(uiImage:)();
    (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v30, enum case for Image.ResizingMode.stretch(_:), v27);
    v44 = Image.resizable(capInsets:resizingMode:)(v30, v43, 0.0, 0.0, 0.0, 0.0);
    v45 = swift_release(v43);
    (*(void (**)(char *, uint64_t, __n128))(v28 + 8))(v30, v27, v45);
    v46 = v214;
    v50 = sub_100086A88(v214, v47, v48, v49);
    v51 = sub_1000F7674();
    swift_release(v50);
    LOBYTE(v50) = static Edge.Set.all.getter(v52);
    v53 = EdgeInsets.init(_all:)(v51);
    v55 = v54;
    v57 = v56;
    v59 = v58;
    v61 = static Alignment.center.getter(v60);
    LOBYTE(v183) = 1;
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v256, 0, 1, 0, 1, 0, 1, 0x4054000000000000, 0, 0, 1, 0, v183, v61, v62);
    v223 = (unint64_t)v44;
    *(_WORD *)v224 = 1;
    v224[8] = v50;
    *(double *)&v224[16] = v53;
    *(_QWORD *)&v224[24] = v55;
    *(_QWORD *)&v224[32] = v57;
    *(_QWORD *)&v224[40] = v59;
    v224[48] = 0;
    *(_WORD *)&v224[49] = 0;
    *(_QWORD *)&v224[56] = v256;
    v224[64] = v257;
    *(_QWORD *)&v224[72] = v258;
    v224[80] = v259;
    *(_QWORD *)&v224[88] = v260;
    v224[96] = v261;
    *(_QWORD *)&v224[104] = v262;
    v224[112] = v263;
    *(_QWORD *)&v224[120] = v264;
    v224[128] = v265;
    *(_QWORD *)&v224[136] = v266;
    v224[144] = v267;
    *(_OWORD *)&v224[152] = v268;
    v64 = v194;
    v63 = v195;
    (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v194, enum case for CoordinateSpace.local(_:), v195);
    v65 = v193;
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(&v24[*(int *)(v193 + 36)], v64, v63);
    *(_QWORD *)v24 = &type metadata for BezelSizePreferenceKey;
    v66 = (void (**)(double *@<X8>, double@<D2>, double@<D3>))&v24[*(int *)(v65 + 40)];
    *v66 = sub_10005C0B8;
    v66[1] = 0;
    sub_100007ADC((uint64_t)v24, (uint64_t)&v32[*(int *)(v192 + 36)], &qword_100161240);
    v67 = *(_OWORD *)&v224[128];
    *((_OWORD *)v32 + 8) = *(_OWORD *)&v224[112];
    *((_OWORD *)v32 + 9) = v67;
    *((_OWORD *)v32 + 10) = *(_OWORD *)&v224[144];
    *((_QWORD *)v32 + 22) = *(_QWORD *)&v224[160];
    v68 = *(_OWORD *)&v224[64];
    *((_OWORD *)v32 + 4) = *(_OWORD *)&v224[48];
    *((_OWORD *)v32 + 5) = v68;
    v69 = *(_OWORD *)&v224[96];
    *((_OWORD *)v32 + 6) = *(_OWORD *)&v224[80];
    *((_OWORD *)v32 + 7) = v69;
    v70 = *(_OWORD *)v224;
    *(_OWORD *)v32 = v223;
    *((_OWORD *)v32 + 1) = v70;
    v71 = *(_OWORD *)&v224[32];
    *((_OWORD *)v32 + 2) = *(_OWORD *)&v224[16];
    *((_OWORD *)v32 + 3) = v71;
    sub_10000E40C(&v223);
    sub_100008194((uint64_t)v24, &qword_100161240);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v64, v63);
    v72 = swift_release(v44);
    v73 = v213;
    v74 = v216;
    v75 = v217;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v213 + 16))(v216, v217, v46, v72);
    v76 = *(unsigned __int8 *)(v73 + 80);
    v77 = (v76 + 32) & ~v76;
    v78 = (v212 + v77 + 7) & 0xFFFFFFFFFFFFFFF8;
    v79 = swift_allocObject(&unk_100150B30, v78 + 8, v76 | 7);
    v80 = v215;
    v81 = v220;
    *(_QWORD *)(v79 + 16) = v215;
    *(_QWORD *)(v79 + 24) = v81;
    (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))(v79 + v77, v74, v46);
    v82 = v186;
    *(_QWORD *)(v79 + v78) = v186;
    v83 = (char *)v198;
    sub_100007ADC((uint64_t)v32, (uint64_t)v198, &qword_100161248);
    v84 = (double (**)(uint64_t, uint64_t, uint64_t, uint64_t))&v83[*(int *)(v196 + 36)];
    *v84 = sub_10008A9A8;
    v84[1] = (double (*)(uint64_t, uint64_t, uint64_t, uint64_t))v79;
    v85 = v82;
    v86 = sub_100008194((uint64_t)v32, &qword_100161248);
    v87 = static Alignment.center.getter(v86);
    v89 = v88;
    v90 = (uint64_t)v204;
    v91 = (uint64_t)&v204[*(int *)(v197 + 36)];
    sub_100087F08(v75, v80, v220, v92, v91);
    v93 = (uint64_t *)(v91 + *(int *)(sub_100003E70(&qword_1001612B8) + 36));
    *v93 = v87;
    v93[1] = v89;
    v94 = sub_100007A98((uint64_t)v83, v90, &qword_100161250);
    LOBYTE(v87) = static Edge.Set.bottom.getter(v94);
    v95 = EdgeInsets.init(_all:)(20.0);
    v97 = v96;
    v99 = v98;
    v101 = v100;
    v102 = v203;
    sub_100007ADC(v90, v203, &qword_100161258);

    v103 = v206;
    v104 = v102 + *(int *)(v206 + 36);
    *(_BYTE *)v104 = v87;
    *(double *)(v104 + 8) = v95;
    *(_QWORD *)(v104 + 16) = v97;
    *(_QWORD *)(v104 + 24) = v99;
    *(_QWORD *)(v104 + 32) = v101;
    *(_BYTE *)(v104 + 40) = 0;
    sub_100008194(v90, &qword_100161258);
    v105 = v221;
    sub_100007A98(v102, v221, &qword_100161260);
    v106 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v205 + 56))(v105, 0, 1, v103);
    v107 = v75;
  }
  else
  {
    v105 = v221;
    v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v205 + 56))(v221, 1, 1, v206);
    v107 = v217;
  }
  v108 = static HorizontalAlignment.center.getter(v106);
  v109 = sub_100088AA8((uint64_t)v237);
  *(_OWORD *)((char *)&v239[6] + 7) = v237[6];
  *(_OWORD *)((char *)&v239[5] + 7) = v237[5];
  *(_OWORD *)((char *)&v239[2] + 7) = v237[2];
  *(_OWORD *)((char *)&v239[1] + 7) = v237[1];
  *(_OWORD *)((char *)&v239[7] + 7) = v238[0];
  v239[8] = *(_OWORD *)((char *)v238 + 9);
  *(_OWORD *)((char *)&v239[3] + 7) = v237[3];
  v240 = 0;
  *(_OWORD *)((char *)&v239[4] + 7) = v237[4];
  *(_OWORD *)((char *)v239 + 7) = v237[0];
  v110 = 0;
  v253 = v239[6];
  v254 = v239[7];
  v255 = *(_OWORD *)((char *)v238 + 9);
  v249 = v239[2];
  v250 = v239[3];
  v252 = v239[5];
  v251 = v239[4];
  v248 = v239[1];
  v247 = v239[0];
  v111 = static Edge.Set.horizontal.getter(v109);
  v112 = EdgeInsets.init(_all:)(30.0);
  v114 = v113;
  v116 = v115;
  v118 = v117;
  v241 = 0;
  LODWORD(v204) = static Edge.Set.bottom.getter(v119);
  v120 = EdgeInsets.init(_all:)(28.0);
  v122 = v121;
  v124 = v123;
  v126 = v125;
  LODWORD(v203) = v241;
  v242 = 0;
  v127 = (uint64_t)v207;
  URL.init(string:)(0xD000000000000012, 0x80000001001168D0);
  swift_bridgeObjectRelease();
  v128 = v208;
  v129 = v209;
  v130 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v208 + 48))(v127, 1, v209);
  v206 = v108;
  LODWORD(v217) = 0;
  LODWORD(v205) = v111;
  if (v130 == 1)
  {
    sub_100008194(v127, &qword_100165370);
    v131 = 1;
    v132 = v218;
    v133 = v202;
  }
  else
  {
    v198 = *(id **)(v128 + 32);
    v134 = v200;
    ((void (*)(char *, uint64_t, uint64_t))v198)(v200, v127, v129);
    v135 = v213;
    v136 = v214;
    (*(void (**)(char *, uint64_t, uint64_t))(v213 + 16))(v216, v107, v214);
    (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v199, v134, v129);
    v137 = *(unsigned __int8 *)(v135 + 80);
    v138 = (v137 + 32) & ~v137;
    v139 = *(unsigned __int8 *)(v128 + 80);
    v140 = (v212 + v139 + v138) & ~v139;
    v141 = swift_allocObject(&unk_100150B08, v140 + v187, v137 | v139 | 7);
    v143 = v215;
    v142 = v216;
    v144 = v220;
    *(_QWORD *)(v141 + 16) = v215;
    *(_QWORD *)(v141 + 24) = v144;
    (*(void (**)(uint64_t, char *, uint64_t))(v135 + 32))(v141 + v138, v142, v136);
    v145 = ((uint64_t (*)(uint64_t, char *, uint64_t))v198)(v141 + v140, v199, v129);
    __chkstk_darwin(v145);
    v184 = v143;
    v185 = v144;
    v146 = sub_100003E70(&qword_100161278);
    v147 = sub_10008AC40(&qword_100161280, &qword_100161278, (void (*)(void))sub_10008A7A8);
    v148 = v189;
    v149 = Button.init(action:label:)(sub_10008A724, v141, sub_10008A7A0, &v182, v146, v147);
    LOBYTE(v141) = static Edge.Set.horizontal.getter(v149);
    v150 = EdgeInsets.init(_all:)(20.0);
    v214 = v126;
    v215 = v124;
    v151 = v120;
    v152 = v112;
    v153 = v150;
    v216 = v122;
    v154 = v114;
    v156 = v155;
    v157 = v116;
    v159 = v158;
    v220 = v118;
    v161 = v160;
    v162 = v128;
    v164 = v190;
    v163 = v191;
    v165 = (uint64_t)v188;
    (*(void (**)(char *, char *, uint64_t))(v190 + 16))(v188, v148, v191);
    v133 = v202;
    v166 = v165 + *(int *)(v202 + 36);
    *(_BYTE *)v166 = v141;
    *(double *)(v166 + 8) = v153;
    *(_QWORD *)(v166 + 16) = v156;
    v112 = v152;
    v120 = v151;
    v114 = v154;
    v122 = v216;
    *(_QWORD *)(v166 + 24) = v159;
    *(_QWORD *)(v166 + 32) = v161;
    v116 = v157;
    v126 = v214;
    v124 = v215;
    v118 = v220;
    *(_BYTE *)(v166 + 40) = 0;
    v167 = v163;
    v110 = v217;
    (*(void (**)(char *, uint64_t))(v164 + 8))(v148, v167);
    (*(void (**)(char *, uint64_t))(v162 + 8))(v200, v129);
    v105 = v221;
    v132 = v218;
    sub_100007A98(v165, v218, &qword_100161230);
    v131 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v201 + 56))(v132, v131, 1, v133);
  v168 = v132;
  v169 = v219;
  sub_100007ADC(v105, v219, &qword_100161268);
  v170 = v242;
  v171 = v168;
  v172 = v210;
  sub_100007ADC(v171, v210, &qword_100161238);
  v173 = v169;
  v174 = v211;
  sub_100007ADC(v173, v211, &qword_100161268);
  v175 = sub_100003E70(&qword_100161270);
  v176 = *(int *)(v175 + 48);
  *(_OWORD *)((char *)&v222[12] + 1) = v252;
  *(_OWORD *)((char *)&v222[14] + 1) = v253;
  *(_OWORD *)((char *)&v222[16] + 1) = v254;
  *(_OWORD *)((char *)&v222[18] + 1) = v255;
  *(_OWORD *)((char *)&v222[4] + 1) = v248;
  *(_OWORD *)((char *)&v222[6] + 1) = v249;
  *(_OWORD *)((char *)&v222[8] + 1) = v250;
  *(_OWORD *)((char *)&v222[10] + 1) = v251;
  v177 = v206;
  v222[0] = v206;
  v222[1] = 0x4020000000000000;
  LOBYTE(v222[2]) = v110;
  *(_OWORD *)((char *)&v222[2] + 1) = v247;
  *(_DWORD *)((char *)&v222[20] + 1) = *(_DWORD *)v246;
  HIDWORD(v222[20]) = *(_DWORD *)&v246[3];
  v178 = v205;
  LOBYTE(v222[21]) = v205;
  *(_DWORD *)((char *)&v222[21] + 1) = *(_DWORD *)v245;
  HIDWORD(v222[21]) = *(_DWORD *)&v245[3];
  *(double *)&v222[22] = v112;
  v222[23] = v114;
  v222[24] = v116;
  v222[25] = v118;
  v179 = v203;
  LOBYTE(v222[26]) = v203;
  *(_DWORD *)((char *)&v222[26] + 1) = *(_DWORD *)v244;
  HIDWORD(v222[26]) = *(_DWORD *)&v244[3];
  v180 = (char)v204;
  LOBYTE(v222[27]) = (_BYTE)v204;
  HIDWORD(v222[27]) = *(_DWORD *)&v243[3];
  *(_DWORD *)((char *)&v222[27] + 1) = *(_DWORD *)v243;
  *(double *)&v222[28] = v120;
  v222[29] = v122;
  v222[30] = v124;
  v222[31] = v126;
  LOBYTE(v222[32]) = v170;
  memcpy((void *)(v174 + v176), v222, 0x101uLL);
  sub_100007ADC(v172, v174 + *(int *)(v175 + 64), &qword_100161238);
  sub_10008A460((uint64_t)v222);
  sub_100008194(v218, &qword_100161238);
  sub_100008194(v221, &qword_100161268);
  sub_100008194(v172, &qword_100161238);
  *(_OWORD *)&v224[81] = v252;
  *(_OWORD *)&v224[97] = v253;
  *(_OWORD *)&v224[113] = v254;
  *(_OWORD *)&v224[129] = v255;
  *(_OWORD *)&v224[17] = v248;
  *(_OWORD *)&v224[33] = v249;
  *(_OWORD *)&v224[49] = v250;
  *(_OWORD *)&v224[65] = v251;
  *(_QWORD *)&v223 = v177;
  *((_QWORD *)&v223 + 1) = 0x4020000000000000;
  v224[0] = v217;
  *(_OWORD *)&v224[1] = v247;
  *(_DWORD *)&v224[145] = *(_DWORD *)v246;
  *(_DWORD *)&v224[148] = *(_DWORD *)&v246[3];
  v224[152] = v178;
  *(_DWORD *)&v224[153] = *(_DWORD *)v245;
  *(_DWORD *)&v224[156] = *(_DWORD *)&v245[3];
  *(double *)&v224[160] = v112;
  v225 = v114;
  v226 = v116;
  v227 = v118;
  v228 = v179;
  *(_DWORD *)v229 = *(_DWORD *)v244;
  *(_DWORD *)&v229[3] = *(_DWORD *)&v244[3];
  v230 = v180;
  *(_DWORD *)&v231[3] = *(_DWORD *)&v243[3];
  *(_DWORD *)v231 = *(_DWORD *)v243;
  v232 = v120;
  v233 = v122;
  v234 = v124;
  v235 = v126;
  v236 = v170;
  sub_10008A508((uint64_t)&v223);
  return sub_100008194(v219, &qword_100161268);
}

double sub_100087E14(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double result;

  v6 = *(double *)(a1 + 8);
  v7 = type metadata accessor for SavedWallpaperView(0, a4, a5, a4);
  v11 = sub_100086A88(v7, v8, v9, v10);
  sub_1000F7694(v6);
  swift_release(v11);
  v15 = sub_100086A88(v7, v12, v13, v14);
  v16 = sub_1000F76A8();
  objc_msgSend(a3, "size", swift_release(v15).n128_f64[0]);
  v18 = v16 / v17;
  v22 = sub_100086A88(v7, v19, v20, v21);
  objc_msgSend(a3, "size");
  sub_1000F7700(v18 * v23);
  swift_release(v22);
  v27 = sub_100086A88(v7, v24, v25, v26);
  objc_msgSend(a3, "size");
  sub_1000F7714(v18 * v28);
  *(_QWORD *)&result = swift_release(v27).n128_u64[0];
  return result;
}

uint64_t sub_100087F08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v31[2];

  v31[0] = a1;
  v31[1] = a5;
  v7 = type metadata accessor for SavedWallpaperView(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)v31 - v11;
  v13 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v10);
  v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v16);
  v18 = (char *)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100086A88(v7, v19, v20, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v22 + *(_QWORD *)(*(_QWORD *)v22 + 96), a2);
  v23 = swift_release(v22);
  (*(void (**)(uint64_t, uint64_t, __n128))(a3 + 24))(a2, a3, v23);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a2);
  v24 = type metadata accessor for URL(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v18, 0, 1, v24);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 16))(v12, v31[0], v7);
  v25 = *(unsigned __int8 *)(v8 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = swift_allocObject(&unk_100150B58, v26 + v9, v25 | 7);
  *(_QWORD *)(v27 + 16) = a2;
  *(_QWORD *)(v27 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v27 + v26, v12, v7);
  v28 = sub_100003E70(&qword_1001612C0);
  v29 = sub_10008AB9C();
  return AsyncImage.init(url:scale:transaction:content:)(v18, 0, sub_10008AB34, v27, v28, v29, 1.0);
}

uint64_t sub_1000880FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _OWORD *v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  char v135;
  char v136;
  char v137;
  char v138;
  char v139;
  char v140;
  char v141;
  char v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  _OWORD v153[2];
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  char v168;
  __int128 v169;

  v125 = a3;
  v126 = (char *)a4;
  v128 = a2;
  v124 = a1;
  v133 = a5;
  v116 = sub_100003E70(&qword_10015E878);
  __chkstk_darwin(v116);
  v118 = (uint64_t)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_100003E70(&qword_100161348);
  __chkstk_darwin(v117);
  v121 = (uint64_t)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100003E70(&qword_100161338);
  v7 = __chkstk_darwin(v132);
  v119 = (uint64_t)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v114 - v9;
  v130 = sub_100003E70(&qword_100161360);
  __chkstk_darwin(v130);
  v131 = (uint64_t)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_100003E70(&qword_10015E338);
  __chkstk_darwin(v120);
  v122 = (uint64_t)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v127);
  v14 = (double *)((char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for Image.ResizingMode(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_100003E70(&qword_1001612D8);
  v19 = __chkstk_darwin(v129);
  v21 = (_OWORD *)((char *)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19);
  v123 = (uint64_t)&v114 - v22;
  v23 = type metadata accessor for AsyncImagePhase(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (uint64_t *)((char *)&v114 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v24 + 16))(v26, v124, v23);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v24 + 88))(v26, v23) == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v24 + 96))(v26, v23);
    v28 = *v26;
    v124 = v28;
    (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for Image.ResizingMode.stretch(_:), v15);
    v121 = Image.resizable(capInsets:resizingMode:)(v18, v28, 0.0, 0.0, 0.0, 0.0);
    v29 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    v30 = static Alignment.center.getter(v29);
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v154, 0, 1, 0, 1, 0, 1, 0x4054000000000000, 0, 0, 1, 0, 1, v30, v31);
    v32 = v154;
    v119 = v155;
    v33 = v156;
    v118 = v157;
    v116 = v161;
    v117 = v159;
    v114 = v164;
    v115 = v163;
    v140 = 1;
    v139 = BYTE8(v154);
    v138 = BYTE8(v155);
    v137 = BYTE8(v156);
    v136 = v158;
    v135 = v160;
    v134 = v162;
    v35 = type metadata accessor for SavedWallpaperView(0, v125, (uint64_t)v126, v34);
    v39 = sub_100086A88(v35, v36, v37, v38);
    v40 = sub_1000F77A4();
    swift_release(v39);
    v41 = v40;
    v45 = sub_100086A88(v35, v42, v43, v44);
    v46 = sub_1000F77C4();
    swift_release(v45);
    v48 = static Alignment.center.getter(v47);
    _FrameLayout.init(width:height:alignment:)(&v165, *(_QWORD *)&v41, 0, *(_QWORD *)&v46, 0, v48, v49);
    v142 = v166;
    v141 = v168;
    v50 = v121;
    v143 = (unint64_t)v121;
    LOBYTE(v144) = v140;
    BYTE1(v144) = 1;
    *((_QWORD *)&v144 + 1) = v32;
    LOBYTE(v145) = v139;
    *((_QWORD *)&v145 + 1) = v119;
    LOBYTE(v146) = v138;
    *((_QWORD *)&v146 + 1) = v33;
    LOBYTE(v147) = v137;
    *((_QWORD *)&v147 + 1) = v118;
    LOBYTE(v148) = v136;
    *((_QWORD *)&v148 + 1) = v117;
    LOBYTE(v149) = v135;
    *((_QWORD *)&v149 + 1) = v116;
    LOBYTE(v150) = v134;
    *((_QWORD *)&v150 + 1) = v115;
    *(_QWORD *)&v151 = v114;
    *((_QWORD *)&v151 + 1) = v165;
    LOBYTE(v152) = v166;
    *((_QWORD *)&v152 + 1) = v167;
    LOBYTE(v153[0]) = v168;
    *(_OWORD *)((char *)v153 + 8) = v169;
    WORD4(v153[1]) = 0;
    v54 = sub_100086A88(v35, v51, v52, v53);
    v55 = sub_1000F77E4();
    swift_release(v54);
    v56 = (char *)v14 + *(int *)(v127 + 20);
    v57 = enum case for RoundedCornerStyle.continuous(_:);
    v58 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 104))(v56, v57, v58);
    *v14 = v55;
    v14[1] = v55;
    v59 = v122;
    sub_10001BF60((uint64_t)v14, v122);
    *(_WORD *)(v59 + *(int *)(v120 + 36)) = 256;
    v60 = v129;
    sub_100007ADC(v59, (uint64_t)v21 + *(int *)(v129 + 36), &qword_10015E338);
    v61 = v152;
    v21[8] = v151;
    v21[9] = v61;
    v21[10] = v153[0];
    *(_OWORD *)((char *)v21 + 170) = *(_OWORD *)((char *)v153 + 10);
    v62 = v148;
    v21[4] = v147;
    v21[5] = v62;
    v63 = v150;
    v21[6] = v149;
    v21[7] = v63;
    v64 = v144;
    *v21 = v143;
    v21[1] = v64;
    v65 = v146;
    v21[2] = v145;
    v21[3] = v65;
    sub_10000E40C(&v143);
    sub_100008194(v59, &qword_10015E338);
    sub_10001BFA4((uint64_t)v14);
    swift_release(v50);
    v66 = (uint64_t)v21;
    v67 = v123;
    sub_100007A98(v66, v123, &qword_1001612D8);
    v68 = v131;
    sub_100007ADC(v67, v131, &qword_1001612D8);
    swift_storeEnumTagMultiPayload(v68, v130, 0);
    v69 = sub_10008AC40(&qword_1001612D0, &qword_1001612D8, (void (*)(void))sub_10008ACC4);
    v70 = sub_10005C954(&qword_100161330, &qword_100161338, (void (*)(void))sub_10008ADF0);
    _ConditionalContent<>.init(storage:)(v68, v60, v132, v69, v70);
    swift_release(v124);
    return sub_100008194(v67, &qword_1001612D8);
  }
  else
  {
    v72 = type metadata accessor for SavedWallpaperView(0, v125, (uint64_t)v126, v27);
    v126 = v10;
    v76 = sub_100086A88(v72, v73, v74, v75);
    v77 = sub_1000F77E4();
    swift_release(v76);
    v78 = (char *)v14 + *(int *)(v127 + 20);
    v79 = enum case for RoundedCornerStyle.continuous(_:);
    v80 = type metadata accessor for RoundedCornerStyle(0);
    v81 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 104))(v78, v79, v80);
    *v14 = v77;
    v14[1] = v77;
    v82 = static Color.black.getter(v81);
    v83 = v118;
    sub_10001BF60((uint64_t)v14, v118);
    *(_QWORD *)(v83 + *(int *)(v116 + 36)) = v82;
    v84 = sub_10001BFA4((uint64_t)v14);
    v85 = static Alignment.center.getter(v84);
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v143, 0, 1, 0, 1, 0, 1, 0x4054000000000000, 0, 0, 1, 0, 1, v85, v86);
    v87 = v121;
    sub_100007ADC(v83, v121, &qword_10015E878);
    v88 = (_OWORD *)(v87 + *(int *)(v117 + 36));
    v89 = v148;
    v88[4] = v147;
    v88[5] = v89;
    v88[6] = v149;
    v90 = v144;
    *v88 = v143;
    v88[1] = v90;
    v91 = v146;
    v88[2] = v145;
    v88[3] = v91;
    sub_100008194(v83, &qword_10015E878);
    v95 = sub_100086A88(v72, v92, v93, v94);
    v96 = sub_1000F77A4();
    swift_release(v95);
    v97 = v96;
    v101 = sub_100086A88(v72, v98, v99, v100);
    v102 = sub_1000F77C4();
    swift_release(v101);
    v104 = static Alignment.center.getter(v103);
    _FrameLayout.init(width:height:alignment:)(&v154, *(_QWORD *)&v97, 0, *(_QWORD *)&v102, 0, v104, v105);
    v106 = v119;
    sub_100007ADC(v87, v119, &qword_100161348);
    v107 = v132;
    v108 = (_OWORD *)(v106 + *(int *)(v132 + 36));
    v109 = v155;
    *v108 = v154;
    v108[1] = v109;
    v108[2] = v156;
    sub_100008194(v87, &qword_100161348);
    v110 = (uint64_t)v126;
    sub_100007A98(v106, (uint64_t)v126, &qword_100161338);
    v111 = v131;
    sub_100007ADC(v110, v131, &qword_100161338);
    swift_storeEnumTagMultiPayload(v111, v130, 1);
    v112 = sub_10008AC40(&qword_1001612D0, &qword_1001612D8, (void (*)(void))sub_10008ACC4);
    v113 = sub_10005C954(&qword_100161330, &qword_100161338, (void (*)(void))sub_10008ADF0);
    _ConditionalContent<>.init(storage:)(v111, v129, v107, v112, v113);
    sub_100008194(v110, &qword_100161338);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v24 + 8))(v26, v23);
  }
}

uint64_t sub_100088AA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t KeyPath;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[3];
  _BYTE v61[7];
  char v62;
  _BYTE v63[7];
  char v64;
  _BYTE v65[7];
  _BYTE v66[7];
  char v67;
  char v68;

  v2 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000038, 0x8000000100116950);
  v6 = Text.init(_:tableName:bundle:comment:)(v2, v4, v3 & 1, v5, 0, 0, 0, 0, 0, 256);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = static Font.title.getter(v6);
  static Font.Weight.bold.getter();
  v14 = Font.weight(_:)(v13);
  swift_release(v13);
  v15 = Text.font(_:)(v14, v6, v8, v12, v10);
  v57 = v16;
  v58 = v15;
  v53 = v17;
  v59 = v18;
  swift_release(v14);
  sub_10000BFF8(v6, v8, v12);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_10010FA40);
  v55 = swift_getKeyPath(&unk_10010FA70);
  v19 = sub_1000869C4();
  LOWORD(v50) = 256;
  v23 = Text.init(_:tableName:bundle:comment:)(v19, v21, v20 & 1, v22, 0, 0, 0, 0, 0, v50);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  v30 = static Font.subheadline.getter(v23);
  static Font.Weight.regular.getter();
  v31 = Font.weight(_:)(v30);
  swift_release(v30);
  v32 = Text.font(_:)(v31, v23, v25, v29, v27);
  v34 = v33;
  v36 = v35;
  v38 = v37;
  swift_release(v31);
  sub_10000BFF8(v23, v25, v29);
  swift_bridgeObjectRelease();
  if (qword_10015CE58 != -1)
    swift_once(&qword_10015CE58, sub_1000382B4);
  v39 = v53 & 1;
  v40 = qword_10016F650;
  v60[0] = qword_10016F650;
  swift_retain(qword_10016F650);
  v51 = Text.foregroundStyle<A>(_:)(v60, v32, v34, v36 & 1, v38, &type metadata for Color, &protocol witness table for Color);
  v42 = v41;
  v54 = v43;
  v45 = v44 & 1;
  v52 = v44 & 1;
  sub_10000BFF8(v32, v34, v36 & 1);
  swift_release(v40);
  swift_bridgeObjectRelease();
  v46 = swift_getKeyPath(&unk_10010FA40);
  v47 = swift_getKeyPath(&unk_10010FA70);
  v68 = v39;
  v67 = 0;
  v64 = v45;
  v62 = 0;
  *(_DWORD *)(a1 + 17) = v60[0];
  *(_DWORD *)(a1 + 20) = *(_DWORD *)((char *)v60 + 3);
  *(_DWORD *)(a1 + 49) = *(_DWORD *)v66;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)&v66[3];
  *(_DWORD *)(a1 + 68) = *(_DWORD *)&v65[3];
  *(_DWORD *)(a1 + 65) = *(_DWORD *)v65;
  *(_DWORD *)(a1 + 89) = *(_DWORD *)v63;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)&v63[3];
  *(_DWORD *)(a1 + 121) = *(_DWORD *)v61;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)&v61[3];
  *(_QWORD *)a1 = v58;
  *(_QWORD *)(a1 + 8) = v57;
  *(_BYTE *)(a1 + 16) = v39;
  *(_QWORD *)(a1 + 24) = v59;
  *(_QWORD *)(a1 + 32) = KeyPath;
  *(_QWORD *)(a1 + 40) = 2;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v55;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 72) = v51;
  *(_QWORD *)(a1 + 80) = v42;
  *(_BYTE *)(a1 + 88) = v45;
  *(_QWORD *)(a1 + 96) = v54;
  *(_QWORD *)(a1 + 104) = v46;
  *(_QWORD *)(a1 + 112) = 2;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = v47;
  v48 = v47;
  *(_BYTE *)(a1 + 136) = 1;
  sub_10000C008(v58, v57, v39);
  swift_bridgeObjectRetain(v59);
  swift_retain(KeyPath);
  swift_retain(v55);
  sub_10000C008(v51, v42, v52);
  swift_bridgeObjectRetain(v54);
  swift_retain(v46);
  swift_retain(v48);
  sub_10000BFF8(v51, v42, v52);
  swift_release(v48);
  swift_release(v46);
  swift_bridgeObjectRelease();
  sub_10000BFF8(v58, v57, v39);
  swift_release(v55);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100088E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v7 = type metadata accessor for OpenURLAction(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SavedWallpaperView(0, a3, a4, v11);
  sub_10001D83C((uint64_t)v10);
  OpenURLAction.callAsFunction(_:)(a2);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100088F54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t KeyPath;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  char v110;

  v64 = a1;
  v68 = sub_100003E70(&qword_10015E338);
  __chkstk_darwin(v68);
  v67 = (uint64_t)&v62 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v66);
  v65 = (char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000039, 0x8000000100116890);
  v7 = Text.init(_:tableName:bundle:comment:)(v3, v5, v4 & 1, v6, 0, 0, 0, 0, 0, 256);
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  v14 = static Font.body.getter(v7);
  static Font.Weight.semibold.getter();
  v15 = Font.weight(_:)(v14);
  swift_release(v14);
  v16 = Text.font(_:)(v15, v7, v9, v13, v11);
  v18 = v17;
  LOBYTE(v14) = v19;
  v62 = v20;
  swift_release(v15);
  v21 = v14 & 1;
  sub_10000BFF8(v7, v9, v13);
  v22 = swift_bridgeObjectRelease();
  v23 = static Color.white.getter(v22);
  *(_QWORD *)&v96 = v23;
  v63 = Text.foregroundStyle<A>(_:)(&v96, v16, v18, v21, v62, &type metadata for Color, &protocol witness table for Color);
  v25 = v24;
  v27 = v26;
  LOBYTE(v15) = v28 & 1;
  sub_10000BFF8(v16, v18, v21);
  swift_release(v23);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_10010FA40);
  LOBYTE(v23) = static Edge.Set.vertical.getter(KeyPath);
  v30 = EdgeInsets.init(_all:)(14.0);
  v31 = v63;
  v69 = v63;
  v70 = v25;
  v71 = v15;
  v72 = v27;
  v73 = KeyPath;
  v74 = 1;
  v75 = 0;
  v76 = v23;
  v77 = v30;
  v78 = v32;
  v79 = v33;
  v80 = v34;
  v81 = 0;
  v36 = static Alignment.center.getter(v35);
  sub_1000E56A4(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)&v96, v38, 0.0, 1, 0.0, 1, v36, v37);
  sub_10000BFF8(v31, v25, v15);
  swift_release(KeyPath);
  v39 = swift_bridgeObjectRelease();
  v93 = v107;
  v94 = v108;
  v89 = v103;
  v90 = v104;
  v91 = v105;
  v92 = v106;
  v85 = v99;
  v86 = v100;
  v87 = v101;
  v88 = v102;
  v82 = v96;
  v95 = v109;
  v83 = v97;
  v84 = v98;
  v40 = static Color.blue.getter(v39);
  v41 = static Edge.Set.all.getter(v40);
  v106 = v92;
  v107 = v93;
  v108 = v94;
  v102 = v88;
  v103 = v89;
  v104 = v90;
  v105 = v91;
  v98 = v84;
  v99 = v85;
  v100 = v86;
  v101 = v87;
  v96 = v82;
  v97 = v83;
  *(_QWORD *)&v109 = v95;
  *((_QWORD *)&v109 + 1) = v40;
  v110 = v41;
  v42 = v65;
  v43 = &v65[*(int *)(v66 + 20)];
  v44 = enum case for RoundedCornerStyle.continuous(_:);
  v45 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 104))(v43, v44, v45);
  __asm { FMOV            V0.2D, #12.0 }
  *v42 = _Q0;
  v51 = v67;
  sub_10001BF60((uint64_t)v42, v67);
  *(_WORD *)(v51 + *(int *)(v68 + 36)) = 256;
  v52 = sub_100003E70(&qword_100161278);
  v53 = v64;
  sub_100007ADC(v51, v64 + *(int *)(v52 + 36), &qword_10015E338);
  v54 = v109;
  *(_OWORD *)(v53 + 192) = v108;
  *(_OWORD *)(v53 + 208) = v54;
  *(_BYTE *)(v53 + 224) = v110;
  v55 = v105;
  *(_OWORD *)(v53 + 128) = v104;
  *(_OWORD *)(v53 + 144) = v55;
  v56 = v107;
  *(_OWORD *)(v53 + 160) = v106;
  *(_OWORD *)(v53 + 176) = v56;
  v57 = v101;
  *(_OWORD *)(v53 + 64) = v100;
  *(_OWORD *)(v53 + 80) = v57;
  v58 = v103;
  *(_OWORD *)(v53 + 96) = v102;
  *(_OWORD *)(v53 + 112) = v58;
  v59 = v97;
  *(_OWORD *)v53 = v96;
  *(_OWORD *)(v53 + 16) = v59;
  v60 = v99;
  *(_OWORD *)(v53 + 32) = v98;
  *(_OWORD *)(v53 + 48) = v60;
  sub_10008AEE8((uint64_t)&v96);
  sub_100008194(v51, &qword_10015E338);
  sub_10001BFA4((uint64_t)v42);
  return sub_10008AF40((uint64_t)&v96);
}

double sub_100089388@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  char v5;
  double result;

  v2 = static Font.title.getter();
  static Font.Weight.medium.getter();
  v3 = Font.weight(_:)(v2);
  swift_release(v2);
  KeyPath = swift_getKeyPath(&unk_10010FA10);
  v5 = static Edge.Set.horizontal.getter();
  *(_WORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = nullsub_1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = KeyPath;
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = v5;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = 1;
  return result;
}

__n128 sub_100089408@<Q0>(uint64_t a1@<X8>)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;
  _OWORD v17[9];

  v2 = static Font.Weight.semibold.getter();
  v3 = Text.fontWeight(_:)(*(_QWORD *)&v2, 0, 0, 0xE000000000000000, 0, _swiftEmptyArrayStorage);
  v5 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v10 = static Alignment.center.getter(v3);
  sub_1000E546C(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v17, v12, 0.0, 1, 0.0, 1, v10, v11, v3, v5, v9, v7);
  sub_10000BFF8(v3, v5, v9);
  swift_bridgeObjectRelease();
  v13 = v17[7];
  *(_OWORD *)(a1 + 96) = v17[6];
  *(_OWORD *)(a1 + 112) = v13;
  *(_OWORD *)(a1 + 128) = v17[8];
  v14 = v17[3];
  *(_OWORD *)(a1 + 32) = v17[2];
  *(_OWORD *)(a1 + 48) = v14;
  v15 = v17[5];
  *(_OWORD *)(a1 + 64) = v17[4];
  *(_OWORD *)(a1 + 80) = v15;
  result = (__n128)v17[1];
  *(_OWORD *)a1 = v17[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

double sub_100089500@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  char v21;
  double result;
  uint64_t v23;

  v9 = type metadata accessor for SavedWallpaperView(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v13 = (char *)&v23 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v23 - v12, a1, v9);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(&unk_100150AE0, v15 + v11, v14 | 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v16 + v15, v13, v9);
  v18 = static Font.title.getter(v17);
  static Font.Weight.medium.getter(v18);
  v19 = Font.weight(_:)(v18);
  swift_release(v18);
  KeyPath = swift_getKeyPath(&unk_10010FA10);
  v21 = static Edge.Set.horizontal.getter(KeyPath);
  *(_WORD *)a5 = 1;
  *(_QWORD *)(a5 + 8) = sub_10008A408;
  *(_QWORD *)(a5 + 16) = v16;
  *(_QWORD *)(a5 + 24) = KeyPath;
  *(_QWORD *)(a5 + 32) = v19;
  *(_BYTE *)(a5 + 40) = v21;
  result = 0.0;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_BYTE *)(a5 + 80) = 1;
  return result;
}

uint64_t sub_100089630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = type metadata accessor for DismissAction(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SavedWallpaperView(0, a2, a3, v9);
  sub_10001D870((uint64_t)v8);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000896D8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  *a1 = swift_getKeyPath(&unk_10010F950);
  v2 = sub_100003E70(&qword_10015D488);
  return swift_storeEnumTagMultiPayload(a1, v2, 0);
}

uint64_t sub_10008971C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];

  v5 = *a1;
  v15[0] = a1;
  State.init(wrappedValue:)(v15, v5);
  v6 = v15[2];
  *a3 = v15[1];
  a3[1] = v6;
  v8 = *(_QWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 88);
  a3[2] = sub_100086AD8(0);
  a3[3] = v9;
  v11 = type metadata accessor for SavedWallpaperView(0, v8, v7, v10);
  sub_100007A98(a2, (uint64_t)a3 + *(int *)(v11 + 40), &qword_10015D608);
  v12 = (_QWORD *)((char *)a3 + *(int *)(v11 + 44));
  *v12 = swift_getKeyPath(&unk_10010F920);
  v13 = sub_100003E70(&qword_10015D600);
  return swift_storeEnumTagMultiPayload(v12, v13, 0);
}

uint64_t type metadata accessor for SavedWallpaperView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SavedWallpaperView);
}

void sub_1000897F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_10010F998;
  v6[1] = &unk_10010F998;
  sub_10000BE1C(319, (unint64_t *)&qword_10015D698, (uint64_t (*)(uint64_t))&type metadata accessor for DismissAction);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000BE1C(319, (unint64_t *)&qword_10015D6A0, (uint64_t (*)(uint64_t))&type metadata accessor for OpenURLAction);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 0, 4, v6, a1 + 32);
    }
  }
}

uint64_t *sub_1000898A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v9 = a2[1];
    v8 = a2[2];
    a1[1] = v9;
    a1[2] = v8;
    v10 = a2[3];
    a1[3] = v10;
    v11 = *(int *)(a3 + 40);
    v12 = (uint64_t *)((char *)a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    swift_retain(v5);
    swift_retain(v9);
    swift_retain(v10);
    v14 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = 1;
    }
    else
    {
      v17 = *v13;
      *v12 = *v13;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v16);
    v18 = *(int *)(a3 + 44);
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
      v23 = v19;
      v24 = v21;
      v25 = 1;
    }
    else
    {
      v26 = *v20;
      *v19 = *v20;
      swift_retain(v26);
      v23 = v19;
      v24 = v21;
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v23, v24, v25);
  }
  return a1;
}

double sub_100089A24(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[3]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 40));
  v5 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)((char *)a1 + *(int *)(a2 + 44));
  v8 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v7).n128_u64[0];
  }
  return result;
}

uint64_t *sub_100089B08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *a2;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  v9 = *(int *)(a3 + 40);
  v10 = (uint64_t *)((char *)a1 + v9);
  v11 = (uint64_t *)((char *)a2 + v9);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  v12 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
    v14 = 1;
  }
  else
  {
    v15 = *v11;
    *v10 = *v11;
    swift_retain(v15);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v12, v14);
  v16 = *(int *)(a3 + 44);
  v17 = (uint64_t *)((char *)a1 + v16);
  v18 = (uint64_t *)((char *)a2 + v16);
  v19 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
    v21 = 1;
  }
  else
  {
    v22 = *v18;
    *v17 = *v18;
    swift_retain(v22);
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v19, v21);
  return a1;
}

uint64_t *sub_100089C54(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a1[1];
  v9 = a2[1];
  a1[1] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[2] = a2[2];
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 40);
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_100008194((uint64_t)a1 + v12, &qword_10015D488);
    v15 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = 1;
    }
    else
    {
      v18 = *v14;
      *v13 = *v14;
      swift_retain(v18);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v17);
    v19 = *(int *)(a3 + 44);
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    sub_100008194((uint64_t)a1 + v19, &qword_10015D600);
    v22 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v24 = 1;
    }
    else
    {
      v25 = *v21;
      *v20 = *v21;
      swift_retain(v25);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v24);
  }
  return a1;
}

_OWORD *sub_100089DEC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 40);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for DismissAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = *(int *)(a3 + 44);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
    swift_storeEnumTagMultiPayload(v13, v15, 1);
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_100089F1C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_release(v9);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 40);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    sub_100008194((uint64_t)a1 + v10, &qword_10015D488);
    v13 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for DismissAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    v15 = *(int *)(a3 + 44);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    sub_100008194((uint64_t)a1 + v15, &qword_10015D600);
    v18 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10008A09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008A0A8);
}

uint64_t sub_10008A0A8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003E70(&qword_10015D608);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 40);
    }
    else
    {
      v10 = sub_100003E70(qword_10015D610);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 44);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_10008A150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008A15C);
}

char *sub_10008A15C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_100003E70(&qword_10015D608);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 40);
    }
    else
    {
      v10 = sub_100003E70(qword_10015D610);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 44);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_10008A200(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100119FC4, 1);
}

uint64_t sub_10008A238@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100086E90(v1[4], v1[2], v1[3], a1);
}

double sub_10008A24C@<D0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100089500(v2[4], v2[2], v2[3], a1, a2);
}

unint64_t sub_10008A258()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001611F8;
  if (!qword_1001611F8)
  {
    v1 = sub_1000034AC(&qword_100161198);
    sub_100007D40(&qword_100161200, &qword_100161190, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001611F8);
  }
  return result;
}

uint64_t sub_10008A2DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 224);
  v4 = *(_QWORD *)(a1 + 232);
  v5 = *(_QWORD *)(a1 + 240);
  v6 = *(_QWORD *)(a1 + 392);
  v7 = *(_QWORD *)(a1 + 400);
  v8 = *(_QWORD *)(a1 + 408);
  sub_10000C008(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_retain(v8);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t sub_10008A370(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 224);
  v3 = *(_QWORD *)(a1 + 232);
  v4 = *(_QWORD *)(a1 + 240);
  v5 = *(_QWORD *)(a1 + 392);
  v6 = *(_QWORD *)(a1 + 400);
  v7 = *(_QWORD *)(a1 + 408);
  sub_10000BFF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v6);
  swift_release(v5);
  swift_release(v3);
  swift_release(v2);
  swift_bridgeObjectRelease();
  swift_release(v4);
  swift_release(v7);
  return a1;
}

uint64_t sub_10008A408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SavedWallpaperView(0, v5, v6, a4) - 8) + 80);
  return sub_100089630(v4 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t sub_10008A460(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_BYTE *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_QWORD *)(a1 + 152);
  sub_10000C008(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  sub_10000C008(v5, v6, v7);
  swift_bridgeObjectRetain(v8);
  swift_retain(v9);
  swift_retain(v10);
  return a1;
}

uint64_t sub_10008A508(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(_BYTE *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 152);
  sub_10000BFF8(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(v3);
  swift_release(v2);
  swift_bridgeObjectRelease();
  sub_10000BFF8(v4, v5, v6);
  swift_release(v8);
  swift_release(v7);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10008A5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v5 = type metadata accessor for SavedWallpaperView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v23 = *(_QWORD *)(v6 + 64);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  swift_release(*(_QWORD *)(v4 + v8));
  swift_release(*(_QWORD *)(v4 + v8 + 8));
  swift_release(*(_QWORD *)(v4 + v8 + 24));
  v13 = (_QWORD *)(v4 + v8 + *(int *)(v5 + 40));
  v14 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  v16 = (_QWORD *)(v4 + v8 + *(int *)(v5 + 44));
  v17 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
  }
  else
  {
    v19 = swift_release(*v16);
  }
  v20 = (v8 + v23 + v11) & ~v11;
  v21 = v20 + v12;
  (*(void (**)(uint64_t, uint64_t, __n128))(v10 + 8))(v4 + v20, v9, v19);
  return swift_deallocObject(v4, v21, v7 | v11 | 7);
}

uint64_t sub_10008A724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(type metadata accessor for SavedWallpaperView(0, v5, v6, a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  return sub_100088E9C(v4 + v8, v4 + ((v8 + v9 + v10) & ~v10), v5, v6);
}

uint64_t sub_10008A7A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100088F54(a1);
}

unint64_t sub_10008A7A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100161288;
  if (!qword_100161288)
  {
    v1 = sub_1000034AC(&qword_100161290);
    sub_10005C954(&qword_100161298, &qword_1001612A0, (void (*)(void))sub_10008A84C);
    sub_100007D40(&qword_10015E320, &qword_10015E328, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100161288);
  }
  return result;
}

uint64_t sub_10008A84C()
{
  return sub_10005C954(&qword_1001612A8, &qword_1001612B0, (void (*)(void))sub_100014248);
}

uint64_t sub_10008A870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v5 = type metadata accessor for SavedWallpaperView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  swift_release(*(_QWORD *)(v4 + v8));
  swift_release(*(_QWORD *)(v4 + v8 + 8));
  swift_release(*(_QWORD *)(v4 + v8 + 24));
  v10 = (_QWORD *)(v4 + v8 + *(int *)(v5 + 40));
  v11 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (_QWORD *)(v4 + v8 + *(int *)(v5 + 44));
  v14 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  v16 = (v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = v16 + 8;

  return swift_deallocObject(v4, v17, v7 | 7);
}

double sub_10008A9A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(_QWORD *)(type metadata accessor for SavedWallpaperView(0, v6, v7, a4) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  return sub_100087E14(a1, v4 + v9, *(void **)(v4 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFF8)), v6, v7);
}

uint64_t sub_10008AA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = type metadata accessor for SavedWallpaperView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  swift_release(*(_QWORD *)(v4 + v8));
  swift_release(*(_QWORD *)(v4 + v8 + 8));
  swift_release(*(_QWORD *)(v4 + v8 + 24));
  v10 = (_QWORD *)(v4 + v8 + *(int *)(v5 + 40));
  v11 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (_QWORD *)(v4 + v8 + *(int *)(v5 + 44));
  v14 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  return swift_deallocObject(v4, v8 + v9, v7 | 7);
}

uint64_t sub_10008AB34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SavedWallpaperView(0, v6, v7, a2) - 8) + 80);
  return sub_1000880FC(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

unint64_t sub_10008AB9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001612C8;
  if (!qword_1001612C8)
  {
    v1 = sub_1000034AC(&qword_1001612C0);
    sub_10008AC40(&qword_1001612D0, &qword_1001612D8, (void (*)(void))sub_10008ACC4);
    sub_10005C954(&qword_100161330, &qword_100161338, (void (*)(void))sub_10008ADF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001612C8);
  }
  return result;
}

uint64_t sub_10008AC40(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000034AC(a2);
    a3();
    sub_100007D40(&qword_10015E330, &qword_10015E338, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10008ACC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001612E0;
  if (!qword_1001612E0)
  {
    v1 = sub_1000034AC(&qword_1001612E8);
    sub_10005C954(&qword_1001612F0, &qword_1001612F8, (void (*)(void))sub_10008AD68);
    sub_100007D40(&qword_100161320, &qword_100161328, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001612E0);
  }
  return result;
}

uint64_t sub_10008AD68()
{
  return sub_10005C954(&qword_100161300, &qword_100161308, (void (*)(void))sub_10008AD8C);
}

unint64_t sub_10008AD8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100161310;
  if (!qword_100161310)
  {
    v1 = sub_1000034AC(&qword_100161318);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100161310);
  }
  return result;
}

uint64_t sub_10008ADF0()
{
  return sub_10005C954(&qword_100161340, &qword_100161348, (void (*)(void))sub_10008AE14);
}

unint64_t sub_10008AE14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100161350;
  if (!qword_100161350)
  {
    v1 = sub_1000034AC(&qword_10015E878);
    sub_10008AE98();
    sub_100007D40(&qword_10015DF28, &qword_10015DF30, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100161350);
  }
  return result;
}

unint64_t sub_10008AE98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100161358;
  if (!qword_100161358)
  {
    v1 = type metadata accessor for RoundedRectangle(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for RoundedRectangle, v1);
    atomic_store(result, (unint64_t *)&qword_100161358);
  }
  return result;
}

uint64_t sub_10008AEE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 216);
  sub_10000C008(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t sub_10008AF40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 216);
  sub_10000BFF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v3);
  swift_release(v2);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for BezelSizePreferenceKey()
{
  return &type metadata for BezelSizePreferenceKey;
}

unint64_t sub_10008AFB4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100161368;
  if (!qword_100161368)
  {
    v1 = sub_1000034AC(&qword_100161210);
    v2[0] = sub_1000034AC(&qword_1001611A0);
    v2[1] = sub_10005C954(&qword_1001611F0, &qword_1001611A0, (void (*)(void))sub_10008A258);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
    sub_100007D40(&qword_100161370, &qword_100161218, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100161368);
  }
  return result;
}

unint64_t sub_10008B088(uint64_t a1)
{
  unint64_t result;

  result = sub_10008B0AC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10008B0AC()
{
  unint64_t result;

  result = qword_100161378;
  if (!qword_100161378)
  {
    result = swift_getWitnessTable(&unk_10010FAB8, &type metadata for BezelSizePreferenceKey);
    atomic_store(result, (unint64_t *)&qword_100161378);
  }
  return result;
}

uint64_t sub_10008B0F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a7;
  v25 = a9;
  v26 = a5;
  v23 = a1;
  v24 = a3;
  v13 = type metadata accessor for CoordinateSpace(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for SizeModifier(0, a6, a8, v17);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (uint64_t *)((char *)&v23 - v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, v13);
  sub_1000845D8(v23, (uint64_t)v16, v24, a4, a6, a8, v21);
  swift_retain(a4);
  View.modifier<A>(_:)(v21, v26, v18, v27);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v19 + 8))(v21, v18);
}

uint64_t sub_10008B21C(char a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  _BYTE v8[8];
  double v9;
  double v10;
  double v11;
  double v12;

  v8[0] = a1;
  v9 = a4;
  v10 = a5;
  v11 = a6;
  v12 = a7;
  return View.modifier<A>(_:)(v8, a2, &type metadata for PaddingModifier, a3);
}

double sub_10008B254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  _QWORD v19[3];

  v12 = nullsub_1(a1, a2, a3, a5, a7);
  v14 = v13;
  v19[0] = v12;
  v19[1] = v15;
  v19[2] = v13;
  v17 = type metadata accessor for SafeAreaModifier(0, a5, a7, v16);
  swift_retain(a3);
  View.modifier<A>(_:)(v19, a4, v17, a6);
  *(_QWORD *)&result = swift_release(v14).n128_u64[0];
  return result;
}

uint64_t sub_10008B2F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t OpaqueTypeConformance2;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t WitnessTable;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (*v138)(uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  _QWORD v171[12];
  _QWORD v172[25];
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  void *v178;

  v156 = a8;
  v137 = a7;
  v138 = a6;
  v148 = a4;
  v149 = a5;
  v163 = a3;
  v161 = a1;
  v162 = a2;
  v164 = a9;
  v154 = a10;
  v166 = a11;
  v121 = a18;
  v122 = a14;
  v139 = a17;
  v126 = a16;
  v168 = a12;
  v18 = sub_100003E70(&qword_1001611C0);
  __chkstk_darwin(v18);
  v158 = (uint64_t *)((char *)&v120 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v160 = sub_100003E70(&qword_1001611C8);
  v20 = __chkstk_darwin(v160);
  v159 = (uint64_t)&v120 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = *(_QWORD *)(a13 - 8);
  v167 = a13;
  __chkstk_darwin(v20);
  v124 = (char *)&v120 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for ModifiedContent(0, v23, &type metadata for _PaddingLayout);
  v25 = *(_QWORD *)(v24 - 8);
  v127 = v24;
  v134 = v25;
  __chkstk_darwin(v24);
  v123 = (char *)&v120 - v26;
  v28 = type metadata accessor for ModifiedContent(0, v27, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v140 = *(_QWORD *)(v28 - 8);
  v125 = v28;
  __chkstk_darwin(v28);
  v169 = (char *)&v120 - v29;
  v30 = type metadata accessor for ModifiedContent(255, a12, &type metadata for _PaddingLayout);
  v133 = v30;
  v177 = a16;
  v178 = &protocol witness table for _PaddingLayout;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v30);
  v136 = type metadata accessor for _InsetViewModifier(255, v30, WitnessTable);
  v31 = type metadata accessor for ModifiedContent(0, v28, v136);
  v141 = *(_QWORD *)(v31 - 8);
  v129 = v31;
  __chkstk_darwin(v31);
  v170 = (char *)&v120 - v32;
  v33 = type metadata accessor for ModifiedContent(255, a14, &type metadata for _PaddingLayout);
  v135 = v33;
  v175 = a18;
  v176 = &protocol witness table for _PaddingLayout;
  v132 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v33);
  v144 = type metadata accessor for _InsetViewModifier(255, v33, v132);
  v34 = type metadata accessor for ModifiedContent(0, v31, v144);
  v150 = *(_QWORD *)(v34 - 8);
  v143 = v34;
  __chkstk_darwin(v34);
  v130 = (char *)&v120 - v35;
  v36 = sub_1000034AC(&qword_1001611B8);
  v37 = type metadata accessor for ModifiedContent(0, v34, v36);
  v38 = *(_QWORD *)(v37 - 8);
  v147 = v37;
  v152 = v38;
  __chkstk_darwin(v37);
  v142 = (char *)&v120 - v39;
  v155 = type metadata accessor for ModifiedContent(0, v40, &type metadata for _FlexFrameLayout);
  v157 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v146 = (char *)&v120 - v41;
  v42 = v166;
  v173 = v166;
  v174 = a15;
  v165 = a15;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v173, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 0);
  v153 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v145 = (char *)&v120 - v43;
  v44 = sub_100003E70(&qword_1001611E8);
  v45 = type metadata accessor for ToolbarPlacement(0);
  v46 = swift_allocObject(v44, ((*(unsigned __int8 *)(*(_QWORD *)(v45 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v45 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v45 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v45 - 8) + 80) | 7);
  *(_OWORD *)(v46 + 16) = xmmword_10010ACC0;
  static ToolbarPlacement.navigationBar.getter();
  View.toolbar(_:for:)(2, v46, v42, a15);
  v47 = swift_bridgeObjectRelease(v46);
  v48 = v124;
  v49 = v138(v47);
  v50 = static Edge.Set.vertical.getter(v49);
  v51 = v123;
  v52 = v167;
  v53 = v139;
  View.padding(_:_:)(v50, 0x4027000000000000, 0, v167, v139);
  v54 = (*(uint64_t (**)(char *, uint64_t))(v131 + 8))(v48, v52);
  v55 = static Edge.Set.all.getter(v54);
  v57 = static SafeAreaRegions.all.getter(v56);
  v172[23] = v53;
  v172[24] = &protocol witness table for _PaddingLayout;
  v58 = v127;
  v59 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v127);
  View.ignoresSafeArea(_:edges:)(v57, v55, v58, v59);
  v60 = (*(uint64_t (**)(char *, uint64_t))(v134 + 8))(v51, v58);
  v61 = v42;
  v172[2] = v42;
  v172[3] = v168;
  v172[4] = v52;
  v62 = v121;
  v63 = v122;
  v172[5] = v122;
  v64 = v165;
  v172[6] = v165;
  v65 = v126;
  v172[7] = v126;
  v172[8] = v53;
  v172[9] = v121;
  v172[10] = v148;
  v172[11] = v149;
  v66 = static VerticalAlignment.center.getter(v60);
  v172[21] = v59;
  v172[22] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  v67 = v125;
  v68 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v125);
  v69 = v66;
  v70 = v169;
  View.safeAreaInset<A>(edge:alignment:spacing:content:)(0, v69, 0, 1, sub_10008C16C, v172, v67, v133, v68, WitnessTable);
  v71 = (*(uint64_t (**)(char *, uint64_t))(v140 + 8))(v70, v67);
  v171[2] = v61;
  v171[3] = v168;
  v171[4] = v167;
  v171[5] = v63;
  v171[6] = v64;
  v171[7] = v65;
  v171[8] = v53;
  v171[9] = v62;
  v171[10] = v156;
  v171[11] = v154;
  v72 = static VerticalAlignment.center.getter(v71);
  v73 = swift_getWitnessTable(&protocol conformance descriptor for _InsetViewModifier<A>, v136);
  v172[19] = v68;
  v172[20] = v73;
  v74 = v129;
  v75 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v129);
  v76 = v130;
  v77 = v72;
  v78 = v170;
  View.safeAreaInset<A>(edge:alignment:spacing:content:)(1, v77, 0, 1, sub_10008C178, v171, v74, v135, v75, v132);
  v79 = (*(uint64_t (**)(char *, uint64_t))(v141 + 8))(v78, v74);
  v80 = static HorizontalAlignment.center.getter(v79);
  v81 = (uint64_t)v158;
  *v158 = v80;
  *(_QWORD *)(v81 + 8) = 0;
  *(_BYTE *)(v81 + 16) = 0;
  v82 = sub_100003E70(&qword_100161208);
  v83 = sub_10008BEF8(v161, v162, v163, (double *)(v81 + *(int *)(v82 + 44)));
  LOBYTE(v78) = static Edge.Set.all.getter(v83);
  v85 = static SafeAreaRegions.all.getter(v84);
  v86 = v159;
  sub_100007ADC(v81, v159, &qword_1001611C0);
  v87 = v160;
  v88 = v86 + *(int *)(v160 + 36);
  *(_QWORD *)v88 = v85;
  *(_BYTE *)(v88 + 8) = (_BYTE)v78;
  v89 = sub_100008194(v81, &qword_1001611C0);
  v90 = static Alignment.center.getter(v89);
  v92 = v91;
  v93 = swift_getWitnessTable(&protocol conformance descriptor for _InsetViewModifier<A>, v144);
  v172[17] = v75;
  v172[18] = v93;
  v94 = v143;
  v95 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v143);
  v96 = sub_10008C1BC();
  v97 = v142;
  View.background<A>(_:alignment:)(v86, v90, v92, v94, v87, v95, v96);
  sub_100008194(v86, &qword_1001611C8);
  v98 = (*(uint64_t (**)(char *, uint64_t))(v150 + 8))(v76, v94);
  v99 = static Alignment.top.getter(v98);
  v101 = v100;
  v102 = sub_100007D40(&qword_100161390, &qword_1001611B8, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v172[15] = v95;
  v172[16] = v102;
  v103 = v147;
  v104 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v147);
  v119 = 0;
  v118 = 1;
  v105 = v146;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0, 1, 0, 1, 0x7FF0000000000000, 0, 0, 1, 0, v118, 0x7FF0000000000000, v119, v99, v101, v103, v104);
  v106 = (*(uint64_t (**)(char *, uint64_t))(v152 + 8))(v97, v103);
  v107 = static Alignment.center.getter(v106);
  v109 = v108;
  v173 = v166;
  v174 = v165;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v173, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
  v172[13] = v104;
  v172[14] = &protocol witness table for _FlexFrameLayout;
  v111 = v155;
  v112 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v155);
  v113 = v107;
  v114 = v109;
  v115 = OpaqueTypeMetadata2;
  v116 = v145;
  View.overlay<A>(_:alignment:)(v105, v113, v114, OpaqueTypeMetadata2, v111, OpaqueTypeConformance2, v112);
  (*(void (**)(char *, uint64_t))(v157 + 8))(v105, v111);
  return (*(uint64_t (**)(char *, uint64_t))(v153 + 8))(v116, v115);
}

uint64_t sub_10008BBF8@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v24 = a4;
  v7 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ModifiedContent(0, v10, &type metadata for _PaddingLayout);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v23 - v17;
  v19 = a1(v16);
  v20 = static Edge.Set.vertical.getter(v19);
  View.padding(_:_:)(v20, 0x4027000000000000, 0, a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  v25 = a3;
  v26 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  sub_1000F257C((uint64_t)v15, v11, (uint64_t)v18);
  v21 = *(void (**)(char *, uint64_t))(v12 + 8);
  v21(v15, v11);
  sub_1000E3B88((uint64_t)v18, v11, v24);
  return ((uint64_t (*)(char *, uint64_t))v21)(v18, v11);
}

uint64_t sub_10008BD78@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v24 = a3;
  v7 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ModifiedContent(0, v10, &type metadata for _PaddingLayout);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v23 - v17;
  v19 = a1(v16);
  v20 = static Edge.Set.vertical.getter(v19);
  View.padding(_:_:)(v20, 0x4027000000000000, 0, a2, a5);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  v25 = a5;
  v26 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  sub_1000F257C((uint64_t)v15, v11, (uint64_t)v18);
  v21 = *(void (**)(char *, uint64_t))(v12 + 8);
  v21(v15, v11);
  sub_1000E3B88((uint64_t)v18, v11, v24);
  return ((uint64_t (*)(char *, uint64_t))v21)(v18, v11);
}

uint64_t sub_10008BEF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, double *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  double *v24;
  double *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;

  v30 = a4;
  v29 = type metadata accessor for Divider(0);
  v7 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100003E70(&qword_100160DE0);
  v10 = __chkstk_darwin(v28);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v28 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v28 - v16;
  v31 = a1;
  v32 = a2;
  v18 = a2;
  v33 = a3;
  v19 = sub_100003E70(&qword_100160CA0);
  v20 = Binding.wrappedValue.getter(v19);
  v21 = 0.0;
  if (v34)
    v22 = 1.0;
  else
    v22 = 0.0;
  Divider.init()(v20);
  v31 = a1;
  v32 = v18;
  v33 = a3;
  Binding.wrappedValue.getter(v19);
  if (v34)
    v21 = 1.0;
  v23 = v29;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v15, v9, v29);
  *(double *)&v15[*(int *)(v28 + 36)] = v21;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v23);
  sub_10008C240((uint64_t)v15, (uint64_t)v17);
  sub_100007ADC((uint64_t)v17, (uint64_t)v12, &qword_100160DE0);
  v24 = v30;
  *(_QWORD *)v30 = 8;
  v24[1] = v22;
  v25 = v24;
  v26 = sub_100003E70(&qword_100161398);
  sub_100007ADC((uint64_t)v12, (uint64_t)v25 + *(int *)(v26 + 48), &qword_100160DE0);
  sub_100008194((uint64_t)v17, &qword_100160DE0);
  return sub_100008194((uint64_t)v12, &qword_100160DE0);
}

void sub_10008C10C()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  objc_msgSend(v0, "sendAction:to:from:forEvent:", "resignFirstResponder", 0, 0, 0);

}

uint64_t sub_10008C16C()
{
  return sub_10008C184((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10008BBF8);
}

uint64_t sub_10008C178()
{
  return sub_10008C184((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10008BD78);
}

uint64_t sub_10008C184(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[10], v1[11], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

unint64_t sub_10008C1BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100161380;
  if (!qword_100161380)
  {
    v1 = sub_1000034AC(&qword_1001611C8);
    sub_100007D40(&qword_100161388, &qword_1001611C0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100161380);
  }
  return result;
}

uint64_t sub_10008C240(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_100160DE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008C288()
{
  return sub_100003B3C(&qword_1001613A0, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhoneWallpaper, (uint64_t)&unk_10010C6D0);
}

uint64_t sub_10008C2B4()
{
  return sub_100003B3C(&qword_1001613A8, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum, (uint64_t)&unk_10011316C);
}

uint64_t sub_10008C2E0()
{
  return sub_100003B3C(&qword_1001613B0, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets.Video, (uint64_t)&unk_10010CBE0);
}

uint64_t sub_10008C30C()
{
  return sub_100003B3C(&qword_1001613B8, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets.WatchFace, (uint64_t)&unk_10010C730);
}

uint64_t sub_10008C354()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;

  v0 = Venue.address.getter();
  if (!v0)
    return 0;
  v1 = (void *)v0;
  v2 = objc_msgSend((id)objc_opt_self(CNPostalAddressFormatter), "stringFromPostalAddress:style:", v0, 0);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

unint64_t sub_10008C3D8(uint64_t a1)
{
  unint64_t result;

  result = sub_10008C3FC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10008C3FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100161428;
  if (!qword_100161428)
  {
    v1 = type metadata accessor for Venue(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Venue, v1);
    atomic_store(result, (unint64_t *)&qword_100161428);
  }
  return result;
}

void sub_10008C444(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_10008CFD0();
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[3] = " ";
      swift_initClassMetadata2(a1, 0, 4, v6, a1 + 96);
    }
  }
}

uint64_t sub_10008C4E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v1);
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v6 = (char *)&v10 - v5;
  (*(void (**)(uint64_t, uint64_t))(v1 + 200))(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119230);
  v8 = sub_10000EF30(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
  return v8;
}

uint64_t sub_10008C5DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(char *, uint64_t);
  Swift::String v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  uint64_t v19;
  unint64_t v20;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v1);
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v6 = (char *)&v19 - v5;
  v19 = 0;
  v20 = 0xE000000000000000;
  v7 = *(void (**)(uint64_t, uint64_t))(v1 + 200);
  v7(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119230);
  v9 = sub_10000FBD8(AssociatedTypeWitness, AssociatedConformanceWitness);
  v11 = v10;
  v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, AssociatedTypeWitness);
  swift_bridgeObjectRelease(v20);
  v19 = v9;
  v20 = v11;
  v13._countAndFlagsBits = 0x20A280E220;
  v13._object = (void *)0xA500000000000000;
  String.append(_:)(v13);
  v7(v2, v1);
  v14 = sub_10000FE6C(AssociatedTypeWitness, AssociatedConformanceWitness);
  v16 = v15;
  v12(v6, AssociatedTypeWitness);
  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v16);
  return v19;
}

uint64_t sub_10008C75C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  void *v11;
  void *v12;
  void (*v13)(char *, uint64_t);
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v1);
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v6 = (char *)&v21 - v5;
  v23 = sub_10008C4E8();
  v24 = v7;
  v8._countAndFlagsBits = 8236;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v22 = *(void (**)(uint64_t, uint64_t))(v1 + 200);
  v22(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119230);
  v10 = sub_10000FBD8(AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = v11;
  v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v6, AssociatedTypeWitness);
  v14._countAndFlagsBits = v10;
  v14._object = v12;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v12);
  v15._countAndFlagsBits = 8236;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  v22(v2, v1);
  v16 = sub_10000FE6C(AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = v17;
  v13(v6, AssociatedTypeWitness);
  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  return v23;
}

BOOL sub_10008C8FC()
{
  uint64_t v0;

  return (sub_100046A84(*(_QWORD *)(*(_QWORD *)v0 + 80), *(_QWORD *)(*(_QWORD *)v0 + 88)) & 1) == 0;
}

uint64_t sub_10008C930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 24) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_10008C99C, v3, v4);
}

uint64_t sub_10008C99C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 24));
  if ((sub_100046A84(*(_QWORD *)(*(_QWORD *)v1 + 80), *(_QWORD *)(*(_QWORD *)v1 + 88)) & 1) == 0)
    sub_10008CCE0(1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10008C9F4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  ValueWitnessTable *v14;
  uint64_t v15;
  char *v16;
  NSString v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  void **aBlock;
  uint64_t v23;
  Class (*v24)(uint64_t);
  ValueMetadata *v25;
  _QWORD *(*v26)();
  _QWORD *v27;
  char *v28;

  v3 = *v1;
  v4 = sub_100003E70(&qword_10015D3B8);
  v5 = swift_allocObject(v4, 192, 7);
  *(_OWORD *)(v5 + 16) = xmmword_10010A6D0;
  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v3 + 88) + 152))(*(_QWORD *)(v3 + 80));
  *(_QWORD *)(v5 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v5 + 64) = &off_100162E68;
  *(_QWORD *)(v5 + 40) = v6;
  *(_QWORD *)(v5 + 48) = v7;
  *(_BYTE *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v5 + 104) = &off_100162E40;
  *(_BYTE *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v5 + 144) = &off_100162EC8;
  *(_BYTE *)(v5 + 112) = 2;
  *(_QWORD *)(v5 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v5 + 184) = &off_100162EA0;
  *(_OWORD *)(v5 + 152) = xmmword_10010FBD0;
  *(_BYTE *)(v5 + 168) = 3;
  v8 = *(_QWORD *)(a1 + 72);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v9 = 0;
    v10 = 0xE000000000000000;
  }
  v25 = &type metadata for AnalyticsString;
  v26 = (_QWORD *(*)())&off_100162E68;
  LOBYTE(aBlock) = 1;
  v23 = v9;
  v24 = (Class (*)(uint64_t))v10;
  swift_bridgeObjectRetain(v8);
  v28 = sub_1000F4CF4((char *)1, 5, 1, (char *)v5);
  v11 = sub_100005580((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v14->initializeWithCopy)((uint64_t)v13, v15);
  sub_1000DAD34(4, (uint64_t)v13, (uint64_t *)&v28, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_100162E68);
  sub_1000055A8(&aBlock);
  v16 = v28;
  v17 = String._bridgeToObjectiveC()();
  v18 = (_QWORD *)swift_allocObject(&unk_100150D68, 40, 7);
  v18[2] = 0xD00000000000001ELL;
  v18[3] = 0x80000001001150B0;
  v18[4] = v16;
  v26 = sub_1000055F4;
  v27 = v18;
  aBlock = _NSConcreteStackBlock;
  v23 = 1107296256;
  v24 = sub_1000DACC0;
  v25 = (ValueMetadata *)&unk_100150D80;
  v19 = _Block_copy(&aBlock);
  v20 = v27;
  swift_bridgeObjectRetain(v16);
  swift_release(v20);
  AnalyticsSendEventLazy(v17, v19);
  _Block_release(v19);
  swift_bridgeObjectRelease(v16);

}

uint64_t sub_10008CC58()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  unsigned __int8 v4;

  KeyPath = swift_getKeyPath(&unk_10010FC70);
  v2 = swift_getKeyPath(&unk_10010FCA8);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10008CCE0(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  char v6;

  KeyPath = swift_getKeyPath(&unk_10010FC70);
  v4 = swift_getKeyPath(&unk_10010FCA8);
  v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

id sub_10008CD6C()
{
  uint64_t v0;

  return sub_100037A34(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104), *(void **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112)), *(_QWORD *)(*(_QWORD *)v0 + 80), *(char **)(*(_QWORD *)v0 + 88));
}

uint64_t sub_10008CD84()
{
  return sub_10008CCE0(0);
}

uint64_t sub_10008CD8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_10008CDC8(a1);
  return v3;
}

uint64_t *sub_10008CDC8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v16;
  char v17;

  v3 = *v1;
  v4 = sub_100003E70(&qword_10015D7F0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t)v1 + qword_100161430;
  v9 = *(_QWORD *)(v3 + 80);
  v17 = 0;
  Published.init(initialValue:)(&v17, &type metadata for Bool);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v8, v7, v4);
  v10 = *(_QWORD *)(*v1 + 112);
  *(uint64_t *)((char *)v1 + v10) = (uint64_t)objc_msgSend(objc_allocWithZone((Class)EKEventStore), "init");
  v11 = (uint64_t)v1 + *(_QWORD *)(*v1 + 120);
  *(_QWORD *)v11 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000023, 0x80000001001169F0);
  *(_QWORD *)(v11 + 8) = v12;
  *(_BYTE *)(v11 + 16) = v13 & 1;
  *(_QWORD *)(v11 + 24) = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))((uint64_t)v1 + *(_QWORD *)(*v1 + 104), a1, v9);
  return v1;
}

uint64_t *sub_10008CF00()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = (uint64_t)v0 + qword_100161430;
  v3 = sub_100003E70(&qword_10015D7F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 104));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10008CFA0()
{
  uint64_t v0;

  sub_10008CF00();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for CalendarViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CalendarViewModel);
}

void sub_10008CFD0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_10015EF68)
  {
    v0 = type metadata accessor for Published(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, &qword_10015EF68);
  }
}

uint64_t sub_10008D02C()
{
  return 16;
}

__n128 sub_10008D038(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10008D044()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10008D070(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10008D080(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10008D08C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160268;
  if (!qword_100160268)
  {
    v1 = type metadata accessor for Artist(255);
    result = swift_getWitnessTable(&unk_10010A570, v1);
    atomic_store(result, (unint64_t *)&qword_100160268);
  }
  return result;
}

unint64_t sub_10008D0D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D4C8;
  if (!qword_10015D4C8)
  {
    v1 = sub_1000034AC(&qword_10015D4B8);
    result = swift_getWitnessTable(&unk_10010CF80, v1);
    atomic_store(result, (unint64_t *)&qword_10015D4C8);
  }
  return result;
}

_QWORD *sub_10008D12C(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    v14 = a3[7];
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(_QWORD *)((char *)a2 + v14 + 24);
    if (v17)
    {
      v18 = *((_QWORD *)v16 + 4);
      *((_QWORD *)v15 + 3) = v17;
      *((_QWORD *)v15 + 4) = v18;
      (**(void (***)(void))(v17 - 8))();
    }
    else
    {
      v20 = *((_OWORD *)v16 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v20;
      *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
    }
    v21 = a3[9];
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v19 = *(_QWORD *)((char *)a2 + v21);
    *(_QWORD *)((char *)v4 + v21) = v19;
  }
  swift_retain(v19);
  return v4;
}

double sub_10008D240(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (_QWORD *)(a1 + a2[7]);
  if (v6[3])
    sub_1000055A8(v6);
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + a2[9])).n128_u64[0];
  return result;
}

_QWORD *sub_10008D2B8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)((char *)a2 + v13 + 24);
  if (v16)
  {
    v17 = *((_QWORD *)v15 + 4);
    *((_QWORD *)v14 + 3) = v16;
    *((_QWORD *)v14 + 4) = v17;
    (**(void (***)(void))(v16 - 8))();
  }
  else
  {
    v18 = *((_OWORD *)v15 + 1);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v18;
    *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
  }
  v19 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v20 = *(_QWORD *)((char *)a2 + v19);
  *(_QWORD *)((char *)a1 + v19) = v20;
  swift_retain(v20);
  return a1;
}

_QWORD *sub_10008D3A4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v7 = a2[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[7];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)((char *)a2 + v12 + 24);
  if (!*(_QWORD *)((char *)a1 + v12 + 24))
  {
    if (v15)
    {
      *((_QWORD *)v13 + 3) = v15;
      *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
      (**(void (***)(char *, char *))(v15 - 8))(v13, v14);
      goto LABEL_8;
    }
LABEL_7:
    v16 = *(_OWORD *)v14;
    v17 = *((_OWORD *)v14 + 1);
    *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
    *(_OWORD *)v13 = v16;
    *((_OWORD *)v13 + 1) = v17;
    goto LABEL_8;
  }
  if (!v15)
  {
    sub_1000055A8(v13);
    goto LABEL_7;
  }
  sub_100043B0C(v13, v14);
LABEL_8:
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v18 = a3[9];
  v19 = *(_QWORD *)((char *)a1 + v18);
  v20 = *(_QWORD *)((char *)a2 + v18);
  *(_QWORD *)((char *)a1 + v18) = v20;
  swift_retain(v20);
  swift_release(v19);
  return a1;
}

_OWORD *sub_10008D4DC(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  v12 = a3[8];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  v15 = *(_OWORD *)v14;
  v16 = *((_OWORD *)v14 + 1);
  *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
  *(_OWORD *)v13 = v15;
  *((_OWORD *)v13 + 1) = v16;
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

_QWORD *sub_10008D578(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  v13 = (char *)a1 + v12;
  if (*(_QWORD *)((char *)a1 + v12 + 24))
    sub_1000055A8((_QWORD *)((char *)a1 + v12));
  v14 = *(_OWORD *)((char *)a2 + v12 + 16);
  *(_OWORD *)v13 = *(_OWORD *)((char *)a2 + v12);
  *((_OWORD *)v13 + 1) = v14;
  *((_QWORD *)v13 + 4) = *(_QWORD *)((char *)a2 + v12 + 32);
  v15 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v16 = *(_QWORD *)((char *)a1 + v15);
  *(_QWORD *)((char *)a1 + v15) = *(_QWORD *)((char *)a2 + v15);
  swift_release(v16);
  return a1;
}

uint64_t sub_10008D644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008D650);
}

uint64_t sub_10008D650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_10008D6CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008D6D8);
}

uint64_t sub_10008D6D8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for EventRowViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100161550;
  if (!qword_100161550)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EventRowViewModel);
  return result;
}

uint64_t sub_10008D788(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_10010FD58;
  v4[1] = &unk_10010FD58;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_10010FD70;
    v4[4] = &unk_10010FD88;
    v4[5] = &unk_10010FDA0;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10008D818@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v3 = type metadata accessor for EventRowViewModel(0);
  sub_100007ADC(v1 + *(int *)(v3 + 28), (uint64_t)v16, &qword_10015EA58);
  v4 = v17;
  if (v17)
  {
    v5 = v18;
    v15 = sub_100008170(v16, v17);
    v6 = (void *)objc_opt_self(UIDevice);
    v7 = objc_msgSend(v6, "currentDevice");
    v8 = objc_msgSend(v7, "userInterfaceIdiom");

    if (v8 == (id)1)
      v9 = 200;
    else
      v9 = 100;
    v10 = objc_msgSend(v6, "currentDevice", v15);
    v11 = objc_msgSend(v10, "userInterfaceIdiom");

    if (v11 == (id)1)
      v12 = 200;
    else
      v12 = 100;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 40))(v9, v12, v4, v5);
    return sub_1000055A8(v16);
  }
  else
  {
    sub_100008194((uint64_t)v16, &qword_10015EA58);
    v14 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
}

uint64_t sub_10008D970()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  Class isa;
  uint64_t v14;
  Class v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  void *v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v30;
  uint64_t v31;

  v1 = v0;
  v2 = type metadata accessor for TimeZone(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003E70(&qword_10015D830);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v30 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))((char *)&v30 - v10, 1, 1, v2);
  v12 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v12, "setDateStyle:", 2);
  sub_100007ADC((uint64_t)v11, (uint64_t)v9, &qword_10015D830);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    sub_100008194((uint64_t)v9, &qword_10015D830);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v12, "setTimeZone:", isa);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  sub_100008194((uint64_t)v11, &qword_10015D830);
  v14 = type metadata accessor for EventRowViewModel(0);
  v15 = Date._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(v12, "stringFromDate:", v15);

  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  if (*((_BYTE *)v1 + *(int *)(v14 + 32)) == 1)
  {
    swift_bridgeObjectRelease();
    v20 = v1[3];
    v30 = v1[2];
    v31 = v20;
    swift_bridgeObjectRetain(v20);
  }
  else
  {
    v30 = v17;
    v31 = v19;
    v21._countAndFlagsBits = 8236;
    v21._object = (void *)0xE200000000000000;
    String.append(_:)(v21);
    v22 = v1[2];
    v23 = (void *)v1[3];
    swift_bridgeObjectRetain(v23);
    v24._countAndFlagsBits = v22;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
  }
  v25._countAndFlagsBits = 8236;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  v27 = *v1;
  v26 = (void *)v1[1];
  swift_bridgeObjectRetain(v26);
  v28._countAndFlagsBits = v27;
  v28._object = v26;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  return v30;
}

uint64_t sub_10008DBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v6;
  _QWORD v7[3];

  result = type metadata accessor for FeaturedVideoPlayer(319, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a4);
  if (v6 <= 0x3F)
  {
    v7[0] = *(_QWORD *)(result - 8) + 64;
    v7[1] = "\b";
    v7[2] = "\b";
    result = swift_initClassMetadata2(a1, 0, 3, v7, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10008DC78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for Optional(255, *(_QWORD *)(a1 + 16));
  v2 = type metadata accessor for Binding(0, v1);
  return Binding.wrappedValue.getter(v2);
}

uint64_t sub_10008DCBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(a1);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Optional(0, v2);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - v8;
  sub_10008DC78(a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2))
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 24))(v2);
LABEL_3:
    v10 = 0;
    goto LABEL_4;
  }
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v9, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 24);
  v14 = v13(v2, v12);
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v17 = v13(v2, v12);
  if (!v16)
    goto LABEL_3;
  if (v14 == v17 && v16 == v18)
  {
    swift_bridgeObjectRelease();
    v10 = 1;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0);
    swift_bridgeObjectRelease();
  }
LABEL_4:
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_10008DE74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = __chkstk_darwin(a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10008DCBC(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1, a1);
  if ((v7 & 1) != 0)
    v8 = v6[*(int *)(a1 + 36)];
  else
    v8 = 1;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, a1);
  return v8;
}

id sub_10008DF14(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  NSURL *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t WitnessTable;
  uint64_t v16;
  void *v17;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v23;
  void *v24;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(objc_allocWithZone((Class)AVPlayerViewController), "init");
  (*(void (**)(_QWORD))(*(_QWORD *)(a2 + 24) + 40))(*(_QWORD *)(a2 + 16));
  v8 = objc_allocWithZone((Class)AVPlayer);
  URL._bridgeToObjectiveC()(v9);
  v11 = v10;
  v12 = objc_msgSend(v8, "initWithURL:", v10);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  objc_msgSend(v7, "setModalPresentationStyle:", 0);
  objc_msgSend(v7, "setExitsFullScreenWhenPlaybackEnds:", 1);
  objc_msgSend(v7, "setShowsPlaybackControls:", 1);
  objc_msgSend(v7, "setVideoGravity:", AVLayerVideoGravityResizeAspectFill);
  objc_msgSend(v7, "setPlayer:", v12);
  v13 = objc_msgSend(v7, "player");
  if (v13)
  {
    v14 = v13;
    WitnessTable = swift_getWitnessTable(&unk_10010FEC0, a2);
    v16 = type metadata accessor for UIViewControllerRepresentableContext(0, a2, WitnessTable);
    UIViewControllerRepresentableContext.coordinator.getter(&v24, v16);
    v17 = v24;
    v18 = String._bridgeToObjectiveC()();
    objc_msgSend(v14, "addObserver:forKeyPath:options:context:", v17, v18, 1, 0);

  }
  v19 = swift_getWitnessTable(&unk_10010FEC0, a2);
  v20 = type metadata accessor for UIViewControllerRepresentableContext(0, a2, v19);
  UIViewControllerRepresentableContext.coordinator.getter(&v24, v20);
  v21 = v24;
  objc_msgSend(v7, "setDelegate:", v24);

  return v7;
}

_QWORD *sub_10008E14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v5 = objc_allocWithZone((Class)type metadata accessor for FeaturedVideoPlayer.Coordinator(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4));
  return sub_100090CF4(v4);
}

id sub_10008E184()
{
  _QWORD *v0;
  objc_class *ObjectType;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = swift_isaMask & *v0;
  v4 = *(_QWORD *)(v3 + 0x68);
  v5 = *(_QWORD *)((char *)v0 + v4);
  if (v5)
  {
    swift_retain(*(_QWORD *)((char *)v0 + v4));
    sub_100003E70(&qword_10015D990);
    Task.cancel()();
    v2 = swift_release(v5).n128_u64[0];
    v3 = swift_isaMask & *v0;
  }
  v6 = *(_QWORD *)(v3 + 112);
  v7 = *(_QWORD *)((char *)v0 + v6);
  if (v7)
  {
    swift_retain(*(_QWORD *)((char *)v0 + v6));
    sub_100003E70(&qword_10015D990);
    Task.cancel()();
    v2 = swift_release(v7).n128_u64[0];
  }
  v9.receiver = v0;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, "dealloc", *(double *)&v2);
}

id sub_10008E27C(void *a1)
{
  id v1;

  v1 = a1;
  return sub_10008E184();
}

double sub_10008E2A0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  uint64_t v6;
  double result;

  v5 = (char *)a1 + *(_QWORD *)((swift_isaMask & *a1) + 0x60);
  v6 = type metadata accessor for FeaturedVideoPlayer(0, *(_QWORD *)((swift_isaMask & *a1) + 0x50), *(_QWORD *)((swift_isaMask & *a1) + 0x58), a4);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_release(*(_QWORD *)((char *)a1 + *(_QWORD *)((swift_isaMask & *a1) + 0x68)));
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + *(_QWORD *)((swift_isaMask & *a1) + 0x70))).n128_u64[0];
  return result;
}

uint64_t sub_10008E32C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[6] = a4;
  v5 = type metadata accessor for Notification(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_100161728);
  v4[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NSNotificationCenter.Notifications.Iterator(0);
  v4[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[12] = v9;
  v4[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008E3D8, 0, 0);
}

uint64_t sub_10008E3D8()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10015CE90 != -1)
    swift_once(&qword_10015CE90, sub_100090500);
  v2 = v0[6] + 16;
  NSNotificationCenter.notifications(named:object:)(qword_10016F698, 0);

  NSNotificationCenter.Notifications.makeAsyncIterator()();
  swift_beginAccess(v2, v0 + 2, 0, 0);
  v3 = sub_100003B3C((unint64_t *)&unk_100161730, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Notifications.Iterator);
  v0[14] = v3;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[15] = v4;
  *v4 = v0;
  v4[1] = sub_10008E4F8;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[10], v0[11], v3);
}

uint64_t sub_10008E4F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 120));
  if (v0)
  {
    *(_QWORD *)(v2 + 128) = v0;
    v3 = sub_100091458;
  }
  else
  {
    v3 = sub_10008E55C;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10008E55C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    v4 = *(_QWORD *)(v0 + 48) + 16;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 72), v1, v2);
    Strong = swift_unknownObjectWeakLoadStrong(v4);
    v7 = *(_QWORD *)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 56);
    if (Strong)
    {
      v9 = (void *)Strong;
      sub_10008E6F0();

      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
      v10 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
      *(_QWORD *)(v0 + 136) = v10;
      *v10 = v0;
      v10[1] = sub_10008E68C;
      return dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 112));
    }
    (*(void (**)(_QWORD, _QWORD))(v7 + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
    v1 = *(_QWORD *)(v0 + 80);
  }
  v12 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(v12, *(_QWORD *)(v0 + 88));
  swift_task_dealloc(v12);
  swift_task_dealloc(v1);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008E68C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 136));
  if (v0)
  {
    *(_QWORD *)(v2 + 128) = v0;
    v3 = sub_100091458;
  }
  else
  {
    v3 = sub_10008E55C;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10008E6F0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  char v31;
  _QWORD v32[2];
  _QWORD v33[5];
  __int128 v34;
  __int128 v35;

  v1 = *v0;
  v2 = swift_isaMask;
  v3 = (void *)((uint64_t (*)(void))Notification.name.getter)();
  if (qword_10015CE90 != -1)
    swift_once(&qword_10015CE90, sub_100090500);
  v4 = qword_10016F698;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  if (v5 == v8 && v7 == v9)
  {

    v12 = swift_bridgeObjectRelease_n(v7, 2);
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);

    swift_bridgeObjectRelease();
    v12 = swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v13 = (void *)Notification.name.getter(v12);
      if (qword_10015CE98 != -1)
        swift_once(&qword_10015CE98, sub_100090534);
      v14 = qword_10016F6A0;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      if (v15 == v19 && v17 == v18)
      {

        swift_bridgeObjectRelease_n(v17, 2);
        return sub_10008F088();
      }
      v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v19, v18, 0);

      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v31 & 1) != 0)
        return sub_10008F088();
      return result;
    }
  }
  v20 = Notification.userInfo.getter(v12);
  if (v20)
  {
    v21 = v20;
    v32[0] = 0x44496F65646976;
    v32[1] = 0xE700000000000000;
    AnyHashable.init<A>(_:)(v33, v32, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v21 + 16) && (v22 = sub_1000905D0((uint64_t)v33), (v23 & 1) != 0))
    {
      sub_100036668(*(_QWORD *)(v21 + 56) + 32 * v22, (uint64_t)&v34);
    }
    else
    {
      v34 = 0u;
      v35 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_100036508((uint64_t)v33);
    if (*((_QWORD *)&v35 + 1))
    {
      result = swift_dynamicCast(v33, &v34, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      if ((result & 1) == 0)
        return result;
      v26 = v33[0];
      v25 = v33[1];
      v27 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)((v2 & v1) + 0x58) + 24))(*(_QWORD *)((v2 & v1) + 0x50));
      if (v26 == v27 && v25 == v28)
      {
        swift_bridgeObjectRelease_n(v25, 2);
      }
      else
      {
        v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v25, v27, v28, 0);
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v30 & 1) == 0)
          return result;
      }
      return sub_10008EFA0();
    }
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
  }
  return sub_100008194((uint64_t)&v34, (uint64_t *)&unk_100161740);
}

uint64_t sub_10008EA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 v19;
  _QWORD v21[4];

  v6 = sub_100003E70(&qword_100161700);
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000910FC(a1, (uint64_t)v8);
  v9 = type metadata accessor for TaskPriority(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100008194((uint64_t)v8, &qword_100161700);
    v11 = 4096;
    v12 = *(_QWORD *)(a3 + 16);
    if (!v12)
    {
LABEL_6:
      v18 = 0;
      return swift_task_create(v11, v18, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v19 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v11 = v19 | 0x1000;
    v12 = *(_QWORD *)(a3 + 16);
    if (!v12)
      goto LABEL_6;
  }
  v13 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v12);
  swift_unknownObjectRetain(v12);
  v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
  v17 = v16;
  swift_unknownObjectRelease(v12);
  if (!(v17 | v15))
    goto LABEL_6;
  v21[0] = 0;
  v21[1] = 0;
  v18 = v21;
  v21[2] = v15;
  v21[3] = v17;
  return swift_task_create(v11, v18, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_10008EB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[6] = a4;
  v5 = type metadata accessor for Notification(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_100161728);
  v4[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NSNotificationCenter.Notifications.Iterator(0);
  v4[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[12] = v9;
  v4[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008EC28, 0, 0);
}

uint64_t sub_10008EC28()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10015CE98 != -1)
    swift_once(&qword_10015CE98, sub_100090534);
  v2 = v0[6] + 16;
  NSNotificationCenter.notifications(named:object:)(qword_10016F6A0, 0);

  NSNotificationCenter.Notifications.makeAsyncIterator()();
  swift_beginAccess(v2, v0 + 2, 0, 0);
  v3 = sub_100003B3C((unint64_t *)&unk_100161730, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Notifications.Iterator);
  v0[14] = v3;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[15] = v4;
  *v4 = v0;
  v4[1] = sub_10008ED48;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[10], v0[11], v3);
}

uint64_t sub_10008ED48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 120));
  if (v0)
  {
    *(_QWORD *)(v2 + 128) = v0;
    v3 = sub_10008EEDC;
  }
  else
  {
    v3 = sub_10008EDAC;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10008EDAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    v4 = *(_QWORD *)(v0 + 48) + 16;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 72), v1, v2);
    Strong = swift_unknownObjectWeakLoadStrong(v4);
    v7 = *(_QWORD *)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 56);
    if (Strong)
    {
      v9 = (void *)Strong;
      sub_10008E6F0();

      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
      v10 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
      *(_QWORD *)(v0 + 136) = v10;
      *v10 = v0;
      v10[1] = sub_10008EF3C;
      return dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 112));
    }
    (*(void (**)(_QWORD, _QWORD))(v7 + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
    v1 = *(_QWORD *)(v0 + 80);
  }
  v12 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(v12, *(_QWORD *)(v0 + 88));
  swift_task_dealloc(v12);
  swift_task_dealloc(v1);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008EEDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 128);
  v1 = sub_100003E70(&qword_10015D990);
  v2 = swift_dynamicCast(v1, v0 + 40, v1, &type metadata for Never, 7);
  return swift_willThrowTypedImpl(v2, &type metadata for Never, &protocol witness table for Never);
}

uint64_t sub_10008EF3C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 136));
  if (v0)
  {
    *(_QWORD *)(v2 + 128) = v0;
    v3 = sub_10008EEDC;
  }
  else
  {
    v3 = sub_10008EDAC;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10008EFA0()
{
  char *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = (_QWORD *)(swift_isaMask & *(_QWORD *)v0);
  v2 = v1[10];
  v3 = type metadata accessor for Optional(0, v2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v11 - v5;
  v7 = *(_QWORD *)(v2 - 8);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)&v11 - v5, &v0[v1[12]], v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v6, 0, 1, v2);
  v9 = type metadata accessor for FeaturedVideoPlayer(0, v2, v1[11], v8);
  sub_100090BB0((uint64_t)v6, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10008F088()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = swift_isaMask & *v0;
  v2 = *(_QWORD *)(v1 + 0x50);
  v3 = type metadata accessor for Optional(0, v2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v10 - v5;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))((char *)&v10 - v5, 1, 1, v2);
  v8 = type metadata accessor for FeaturedVideoPlayer(0, v2, *(_QWORD *)(v1 + 88), v7);
  sub_100090BB0((uint64_t)v6, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_10008F154(void *a1, void *a2)
{
  id v3;
  void *v4;
  float v5;
  id v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  _QWORD v12[5];
  uint64_t v13;

  v3 = objc_msgSend(a1, "player");
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, "rate");
    if (v5 > 0.0)
    {
      v6 = objc_msgSend(v4, "error");
      if (!v6)
      {
        v7 = 1;
        goto LABEL_7;
      }

    }
    v7 = 0;
LABEL_7:
    v8 = swift_allocObject(&unk_100150FA0, 32, 7);
    *(_BYTE *)(v8 + 16) = v7;
    *(_QWORD *)(v8 + 24) = v4;
    v12[4] = sub_100091420;
    v13 = v8;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_10008F284;
    v12[3] = &unk_100150FB8;
    v9 = _Block_copy(v12);
    v10 = v13;
    v11 = v4;
    objc_msgSend(a2, "animateAlongsideTransition:completion:", 0, v9, swift_release(v10).n128_f64[0]);
    _Block_release(v9);

  }
}

uint64_t sub_10008F284(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_10008F2CC(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t MainExecutor;
  uint64_t result;
  char isEscapingClosureAtFileLocation;
  Swift::String v19;
  Swift::String v20;
  void *object;
  Swift::String v22;

  v8 = v6;
  v14 = static MainActor.shared.getter();
  v15 = swift_release(v14);
  MainExecutor = swift_task_getMainExecutor(v15);
  if ((swift_task_isCurrentExecutor(MainExecutor) & 1) == 0)
    goto LABEL_6;
  a4 = swift_allocObject(&unk_100150F78, 32, 7);
  *(_QWORD *)(a4 + 16) = a1;
  *(_QWORD *)(a4 + 24) = a2;
  a1();
  if (v7)
    return swift_release(a4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(a4, "", 0, 0, 0, 0);
  result = swift_release(a4);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_6:
    _StringGuts.grow(_:)(66);
    v19._object = (void *)0x8000000100116B40;
    v19._countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v19);
    v20._countAndFlagsBits = _typeName(_:qualified:)(v8, 0);
    object = v20._object;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(object);
    v22._countAndFlagsBits = 46;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, a3, a4, a5, a6, 0);
    __break(1u);
  }
  return result;
}

void sub_10008F458(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  _QWORD v9[6];

  type metadata accessor for MainActor(0);
  v9[2] = a3;
  v9[3] = a4;
  v7 = a3;
  swift_unknownObjectRetain(a4);
  v8 = a1;
  sub_10008F2CC(sub_1000913D4, (uint64_t)v9, (uint64_t)"EventViewService/FeaturedVideoPlayer.swift", 42, 2u, 121);

  swift_unknownObjectRelease(a4);
}

uint64_t sub_10008F4F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  _OWORD v20[2];

  if (a3)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v10 = v9;
    if (a4)
      goto LABEL_3;
LABEL_6:
    memset(v20, 0, sizeof(v20));
    v17 = a5;
    v18 = a1;
    if (a5)
      goto LABEL_4;
LABEL_7:
    v16 = 0;
    goto LABEL_8;
  }
  v8 = 0;
  v10 = 0;
  if (!a4)
    goto LABEL_6;
LABEL_3:
  swift_unknownObjectRetain(a4);
  v11 = a5;
  v12 = a1;
  _bridgeAnyObjectToAny(_:)(v20);
  swift_unknownObjectRelease(a4);
  if (!a5)
    goto LABEL_7;
LABEL_4:
  type metadata accessor for NSKeyValueChangeKey(0);
  v14 = v13;
  v15 = sub_100003B3C(&qword_10015D170, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100109F84);
  v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a5, v14, (char *)&type metadata for Any + 8, v15);

LABEL_8:
  sub_100091144(v8, v10, (uint64_t)v20, v16);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_100008194((uint64_t)v20, (uint64_t *)&unk_100161740);
}

void sub_10008F620()
{
  sub_1000913A8();
}

uint64_t type metadata accessor for FeaturedVideoPlayer.Coordinator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeaturedVideoPlayer.Coordinator);
}

uint64_t type metadata accessor for FeaturedVideoPlayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeaturedVideoPlayer);
}

uint64_t sub_10008F654(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[3];

  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  v3 = v2;
  if (v4 <= 0x3F)
  {
    v9[0] = *(_QWORD *)(v2 - 8) + 64;
    v9[1] = &unk_10010FE48;
    v5 = type metadata accessor for Optional(255, v2);
    v6 = type metadata accessor for Binding(319, v5);
    v3 = v6;
    if (v7 <= 0x3F)
    {
      v9[2] = *(_QWORD *)(v6 - 8) + 64;
      swift_initStructMetadata(a1, 0, 3, v9, a1 + 32);
      return 0;
    }
  }
  return v3;
}

_QWORD *sub_10008F700(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  int v12;
  uint64_t v15;
  void (*v16)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unsigned int (*v25)(const void *, uint64_t, uint64_t);

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v8;
  v10 = ~(v8 | 7);
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = v7 + 1;
  v12 = v8 & 0x100000;
  if (v9 > 7 || v12 != 0 || ((v9 + 16) & ~v9) + v11 + (((v9 | 7) + v7 + 1) & ~(v9 | 7)) > 0x18)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v9 + 16) & v10));
    swift_retain(v15);
  }
  else
  {
    v16 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16);
    v16(a1, a2, *(_QWORD *)(a3 + 16));
    *((_BYTE *)v4 + v7) = *((_BYTE *)a2 + v7);
    v17 = (_QWORD *)(((unint64_t)v4 + v7 + 8) & v10);
    v18 = (uint64_t *)(((unint64_t)a2 + v7 + 8) & v10);
    v19 = *v18;
    *v17 = *v18;
    v20 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    v21 = (uint64_t *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    v22 = *v21;
    *v20 = *v21;
    v23 = (_QWORD *)(((unint64_t)v20 + v9 + 8) & ~v9);
    v24 = (_QWORD *)(((unint64_t)v21 + v9 + 8) & ~v9);
    v25 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
    swift_retain(v19);
    swift_retain(v22);
    if (v25(v24, 1, v5))
    {
      memcpy(v23, v24, v11);
    }
    else
    {
      v16(v23, v24, v5);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v23, 0, 1, v5);
    }
  }
  return v4;
}

uint64_t sub_10008F86C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t (*v10)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v10(a1, v3);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (_QWORD *)((a1 + *(_QWORD *)(v4 + 64) + (v5 | 7) + 1) & ~(v5 | 7));
  swift_release(*v6);
  v7 = (_QWORD *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*v7);
  v8 = ((unint64_t)v7 + v5 + 8) & ~v5;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3);
  if (!(_DWORD)result)
    return v10(v8, v3);
  return result;
}

void *sub_10008F924(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  unsigned int (*v19)(const void *, uint64_t, uint64_t);
  size_t v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(void *, const void *, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 | 7) + 1;
  v11 = (_QWORD *)(((unint64_t)a1 + v8 + v10) & ~(v9 | 7));
  v12 = (uint64_t *)(((unint64_t)a2 + v8 + v10) & ~(v9 | 7));
  v13 = *v12;
  *v11 = *v12;
  v14 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v15 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = *v15;
  *v14 = *v15;
  v17 = (void *)(((unint64_t)v14 + v9 + 8) & ~v9);
  v18 = (const void *)(((unint64_t)v15 + v9 + 8) & ~v9);
  v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  swift_retain(v13);
  swift_retain(v16);
  if (v19(v18, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v20 = v8;
    else
      v20 = v8 + 1;
    memcpy(v17, v18, v20);
  }
  else
  {
    v7(v17, v18, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
  }
  return a1;
}

void *sub_10008FA40(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  size_t v23;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(void *, const void *, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 | 7) + 1;
  v11 = (uint64_t *)(((unint64_t)a1 + v8 + v10) & ~(v9 | 7));
  v12 = (uint64_t *)(((unint64_t)a2 + v8 + v10) & ~(v9 | 7));
  v13 = *v11;
  v14 = *v12;
  *v11 = *v12;
  swift_retain(v14);
  swift_release(v13);
  v15 = (uint64_t *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v17 = *v16;
  v18 = *v15;
  *v15 = *v16;
  swift_retain(v17);
  swift_release(v18);
  v19 = (void *)(((unint64_t)v15 + v9 + 8) & ~v9);
  v20 = (void *)(((unint64_t)v16 + v9 + 8) & ~v9);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(v15) = v21(v19, 1, v5);
  v22 = v21(v20, 1, v5);
  if ((_DWORD)v15)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v19, v20, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v19, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v22)
    {
      v7(v19, v20, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v19, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v23 = v8;
  else
    v23 = v8 + 1;
  memcpy(v19, v20, v23);
  return a1;
}

void *sub_10008FBB4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  const void *v16;
  size_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(void *, const void *, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 | 7) + 1;
  v11 = (_QWORD *)(((unint64_t)a1 + v8 + v10) & ~(v9 | 7));
  v12 = (_QWORD *)(((unint64_t)a2 + v8 + v10) & ~(v9 | 7));
  *v11 = *v12;
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  v15 = (void *)(((unint64_t)v13 + v9 + 8) & ~v9);
  v16 = (const void *)(((unint64_t)v14 + v9 + 8) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v16, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v17 = v8;
    else
      v17 = v8 + 1;
    memcpy(v15, v16, v17);
  }
  else
  {
    v7(v15, v16, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_10008FCBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  size_t v22;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v8 + a2;
  *(_BYTE *)(v8 + a1) = *(_BYTE *)(v8 + a2);
  v10 = *(unsigned __int8 *)(v6 + 80);
  v11 = (v10 | 7) + 1;
  v12 = (uint64_t *)((v11 + v8 + a1) & ~(v10 | 7));
  v13 = (uint64_t *)((v11 + v9) & ~(v10 | 7));
  v14 = *v12;
  *v12 = *v13;
  swift_release(v14);
  v15 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  v17 = *v15;
  *v15 = *v16;
  swift_release(v17);
  v18 = (void *)(((unint64_t)v15 + v10 + 8) & ~v10);
  v19 = (void *)(((unint64_t)v16 + v10 + 8) & ~v10);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(v16) = v20(v18, 1, v5);
  v21 = v20(v19, 1, v5);
  if ((_DWORD)v16)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v18, v19, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v18, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v21)
    {
      v7((uint64_t)v18, (uint64_t)v19, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v18, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v22 = v8;
  else
    v22 = v8 + 1;
  memcpy(v18, v19, v22);
  return a1;
}

uint64_t sub_10008FE20(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int v22;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5 <= v7)
    v8 = v7;
  else
    v8 = *(_DWORD *)(v4 + 84);
  v9 = *(_QWORD *)(v4 + 64);
  if (v5)
    v10 = *(_QWORD *)(v4 + 64);
  else
    v10 = v9 + 1;
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v4 + 80);
  v12 = v11 | 7;
  v13 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_31;
  v14 = ((v11 + 16) & ~v11) + v10 + ((v12 + v9 + 1) & ~v12);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v18 = ((v13 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_31;
      goto LABEL_24;
    }
    if (v18 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_31;
      goto LABEL_24;
    }
    if (v18 < 2)
    {
LABEL_31:
      if (v5 >= v7)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v20 = (unint64_t *)((((a1 + v9 + v12 + 1) & ~v12) + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0x80000000) != 0)
      {
        v22 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v20 + v11 + 8) & ~v11);
        if (v22 >= 2)
          return v22 - 1;
        else
          return 0;
      }
      else
      {
        v21 = *v20;
        if (v21 >= 0xFFFFFFFF)
          LODWORD(v21) = -1;
        return (v21 + 1);
      }
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_31;
LABEL_24:
  v19 = (v16 - 1) << v15;
  if (v14 > 3)
    v19 = 0;
  if ((_DWORD)v14)
  {
    if (v14 > 3)
      LODWORD(v14) = 4;
    __asm { BR              X12 }
  }
  return v8 + v19 + 1;
}

void sub_10008FFE8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  if (v8 <= v10)
    v11 = v10;
  else
    v11 = *(_DWORD *)(v7 + 84);
  v12 = *(_QWORD *)(v7 + 64);
  if (v8)
    v13 = *(_QWORD *)(v7 + 64);
  else
    v13 = v12 + 1;
  v14 = ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + v13
      + (((*(unsigned __int8 *)(v7 + 80) | 7) + v12 + 1) & ~(*(unsigned __int8 *)(v7 + 80) | 7));
  v15 = a3 >= v11;
  v16 = a3 - v11;
  if (v16 != 0 && v15)
  {
    if (v14 > 3)
    {
      v6 = &_mh_execute_header.magic + 1;
      if (v11 < a2)
        goto LABEL_22;
      goto LABEL_16;
    }
    v17 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v17))
    {
      v6 = &dword_100000004;
      if (v11 < a2)
      {
LABEL_22:
        v18 = ~v11 + a2;
        if (v14 < 4)
        {
          if ((_DWORD)v14)
          {
            v19 = v18 & ~(-1 << (8 * v14));
            bzero(a1, v14);
            if ((_DWORD)v14 == 3)
            {
              *a1 = v19;
              *((_BYTE *)a1 + 2) = BYTE2(v19);
            }
            else if ((_DWORD)v14 == 2)
            {
              *a1 = v19;
            }
            else
            {
              *(_BYTE *)a1 = v19;
            }
          }
        }
        else
        {
          bzero(a1, v14);
          *(_DWORD *)a1 = v18;
        }
        __asm { BR              X10 }
      }
LABEL_16:
      __asm { BR              X4 }
    }
    if (v17 >= 0x100)
      v6 = 2;
    else
      v6 = v17 > 1;
  }
  if (v11 < a2)
    goto LABEL_22;
  goto LABEL_16;
}

uint64_t sub_100090338@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  v12 = type metadata accessor for FeaturedVideoPlayer(0, a4, a5, v11);
  *(_BYTE *)(a6 + *(int *)(v12 + 36)) = a2;
  v13 = a6 + *(int *)(v12 + 40);
  v14 = type metadata accessor for Optional(255, a4);
  v15 = type metadata accessor for Binding(0, v14);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, a3, v15);
}

void sub_1000903DC(void *a1, uint64_t a2, uint64_t a3)
{
  sub_100090C50(a1, a3);
}

_QWORD *sub_1000903E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *result;

  result = sub_10008E14C(a1, a2, a3, a4);
  *a5 = result;
  return result;
}

uint64_t sub_100090408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10010FEC0, a3);
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, WitnessTable);
}

uint64_t sub_100090464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10010FEC0, a3);
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, WitnessTable);
}

void sub_1000904C0(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10010FEC0, a1);
  UIViewControllerRepresentable.body.getter(a1, WitnessTable);
  __break(1u);
}

uint64_t sub_1000904F0(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10010FE70, a1);
}

NSString sub_100090500()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10016F698 = (uint64_t)result;
  return result;
}

NSString sub_100090534()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10016F6A0 = (uint64_t)result;
  return result;
}

unint64_t sub_100090568(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_100090788(a1, a2, v5);
}

unint64_t sub_1000905D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100090868(a1, v4);
}

unint64_t sub_100090600(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v1 + 40));
  v3 = 8 * a1;
  v4 = *(_QWORD *)&aCalendar_2[v3 + 8];
  String.hash(into:)(v7, *(_QWORD *)&aLocationmusic_0[v3], v4);
  swift_bridgeObjectRelease(v4);
  v5 = Hasher._finalize()();
  return sub_10009092C(a1, v5);
}

unint64_t sub_10009067C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return sub_100090A3C(a1, v7);
}

unint64_t sub_1000906FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return sub_100090A3C(a1, v7);
}

unint64_t sub_100090788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100090868(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1000910C0(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100036508((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10009092C(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    v6 = 8 * a1;
    v7 = *(_QWORD *)&aLocationmusic_0[v6];
    v8 = *(_QWORD *)&aCalendar_2[v6 + 8];
    while (1)
    {
      v9 = 8 * *(char *)(*(_QWORD *)(v2 + 48) + v4);
      v10 = *(_QWORD *)&aLocationmusic_0[v9];
      v11 = *(_QWORD *)&aCalendar_2[v9 + 8];
      if (v10 == v7 && v11 == v8)
        break;
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, *(_QWORD *)&aCalendar_2[8 * *(char *)(*(_QWORD *)(v2 + 48) + v4) + 8], v7, v8, 0);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v8);
      if ((v13 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease(*(_QWORD *)&aCalendar_2[8 * *(char *)(*(_QWORD *)(v2 + 48) + v4) + 8]);
    swift_bridgeObjectRelease(v8);
  }
  return v4;
}

unint64_t sub_100090A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_100090BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = type metadata accessor for Optional(0, *(_QWORD *)(a2 + 16));
  __chkstk_darwin(v3);
  v5 = (char *)&v9 - v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v9 - v4, a1, v3);
  v7 = type metadata accessor for Binding(0, v3);
  return Binding.wrappedValue.setter(v5, v7);
}

void sub_100090C50(void *a1, uint64_t a2)
{
  id v4;
  id v5;

  v4 = objc_msgSend(a1, "player");
  if (v4)
  {
    v5 = v4;
    if ((sub_10008DE74(a2) & 1) != 0)
    {
      objc_msgSend(v5, "pause");
      objc_msgSend(a1, "setShowsPlaybackControls:", 0);
      objc_msgSend(a1, "setShowsPlaybackControls:", 1);
    }

  }
}

_QWORD *sub_100090CF4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  objc_class *ObjectType;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  objc_super v30;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  v5 = (_QWORD *)(swift_isaMask & *v1);
  v6 = sub_100003E70(&qword_100161700);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)((char *)v2 + v5[13]) = 0;
  *(_QWORD *)((char *)v2 + *(_QWORD *)((swift_isaMask & *v2) + 0x70)) = 0;
  v9 = (char *)v2 + *(_QWORD *)((swift_isaMask & *v2) + 0x60);
  v10 = v5[10];
  v11 = v5[11];
  v13 = type metadata accessor for FeaturedVideoPlayer(0, v10, v11, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, a1, v13);
  v30.receiver = v2;
  v30.super_class = ObjectType;
  v14 = objc_msgSendSuper2(&v30, "init");
  v15 = type metadata accessor for TaskPriority(0);
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v16(v8, 1, 1, v15);
  v17 = swift_allocObject(&unk_100150F00, 24, 7);
  swift_unknownObjectWeakInit(v17 + 16, v14);
  v18 = (_QWORD *)swift_allocObject(&unk_100150F28, 56, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v10;
  v18[5] = v11;
  v18[6] = v17;
  v19 = v14;
  v20 = sub_10008EA04((uint64_t)v8, (uint64_t)&unk_100161710, (uint64_t)v18);
  sub_100008194((uint64_t)v8, &qword_100161700);
  v21 = *(_QWORD *)((swift_isaMask & *v19) + 0x68);
  v22 = *(_QWORD *)((char *)v19 + v21);
  *(_QWORD *)((char *)v19 + v21) = v20;
  v23 = swift_release(v22);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v16)(v8, 1, 1, v15, v23);
  v24 = swift_allocObject(&unk_100150F00, 24, 7);
  swift_unknownObjectWeakInit(v24 + 16, v19);
  v25 = (_QWORD *)swift_allocObject(&unk_100150F50, 56, 7);
  v25[2] = 0;
  v25[3] = 0;
  v25[4] = v10;
  v25[5] = v11;
  v25[6] = v24;
  v26 = sub_10008EA04((uint64_t)v8, (uint64_t)&unk_100161720, (uint64_t)v25);

  sub_100008194((uint64_t)v8, &qword_100161700);
  v27 = *(_QWORD *)((swift_isaMask & *v19) + 0x70);
  v28 = *(_QWORD *)((char *)v19 + v27);
  *(_QWORD *)((char *)v19 + v27) = v26;
  swift_release(v28);
  return v19;
}

uint64_t sub_100090F68()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100090F90(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[6];
  v7 = (_QWORD *)swift_task_alloc(dword_10016170C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100031054;
  return sub_10008E32C(a1, v4, v5, v6);
}

uint64_t sub_100091014()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100091040(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[6];
  v7 = (_QWORD *)swift_task_alloc(dword_10016171C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000072F4;
  return sub_10008EB7C(a1, v4, v5, v6);
}

uint64_t sub_1000910C0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1000910FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_100161700);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100091144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  NSString *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  Class isa;
  uint64_t v20;
  double v21;
  __int128 v22;
  __int128 v23;

  if (!a2)
    return;
  v5 = v4;
  v7 = *v5;
  v8 = swift_isaMask;
  if ((a1 != 1702125938 || a2 != 0xE400000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 1702125938, 0xE400000000000000, 0) & 1) == 0)
  {
    return;
  }
  if (!a4 || !*(_QWORD *)(a4 + 16))
  {
    v22 = 0u;
    v23 = 0u;
    goto LABEL_16;
  }
  v9 = NSKeyValueChangeNewKey;
  v10 = sub_10009067C((uint64_t)v9);
  if ((v11 & 1) == 0)
  {
    v22 = 0u;
    v23 = 0u;

    goto LABEL_16;
  }
  sub_100036668(*(_QWORD *)(a4 + 56) + 32 * v10, (uint64_t)&v22);

  if (!*((_QWORD *)&v23 + 1))
  {
LABEL_16:
    sub_100008194((uint64_t)&v22, (uint64_t *)&unk_100161740);
    return;
  }
  if ((swift_dynamicCast(&v21, &v22, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0
    && v21 != 0.0)
  {
    v12 = v8 & v7;
    v13 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    if (qword_10015CE90 != -1)
      swift_once(&qword_10015CE90, sub_100090500);
    v14 = qword_10016F698;
    v15 = sub_100003E70(qword_100161750);
    inited = swift_initStackObject(v15, &v20);
    *(_OWORD *)(inited + 16) = xmmword_10010ACC0;
    *(_QWORD *)&v22 = 0x44496F65646976;
    *((_QWORD *)&v22 + 1) = 0xE700000000000000;
    AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v22, &type metadata for String, &protocol witness table for String);
    v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v12 + 88) + 24))(*(_QWORD *)(v12 + 80));
    *(_QWORD *)(inited + 96) = &type metadata for String;
    *(_QWORD *)(inited + 72) = v17;
    *(_QWORD *)(inited + 80) = v18;
    sub_100102A70(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v13, "postNotificationName:object:userInfo:", v14, 0, isa);

  }
}

void sub_1000913A8()
{
  _swift_stdlib_reportUnimplementedInitializer("EventViewService.Coordinator", 28, "init()", 6, 0);
  __break(1u);
}

void sub_1000913D4()
{
  uint64_t v0;

  sub_10008F154(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000913EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000913FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_100091420()
{
  uint64_t v0;
  id result;

  if (*(_BYTE *)(v0 + 16) == 1)
    return objc_msgSend(*(id *)(v0 + 24), "play");
  return result;
}

uint64_t sub_100091440(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100091450(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10009145C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_10010FFB8;
  v4[1] = &unk_10010FFD0;
  v4[2] = &unk_10010FFE8;
  sub_1000569B8(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 48);
  }
}

unint64_t sub_1000914E4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v21 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v21);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_10000E0FC(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v10;
    v12 = *(_QWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 48);
    v13 = *(int *)(a3 + 60);
    v14 = (uint64_t *)(a1 + v13);
    v15 = (uint64_t *)(a2 + v13);
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v11;
    swift_retain(v10);
    swift_retain(v12);
    v16 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
      v18 = v14;
      v19 = v16;
      v20 = 1;
    }
    else
    {
      v22 = *v15;
      *v14 = *v15;
      swift_retain(v22);
      v18 = v14;
      v19 = v16;
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v19, v20);
  }
  return a1;
}

double sub_100091600(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  sub_10000E138(*a1, a1[1]);
  swift_release(a1[4]);
  swift_release(a1[5]);
  v4 = (uint64_t *)((char *)a1 + *(int *)(a2 + 60));
  v5 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

uint64_t sub_100091690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10000E0FC(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v9;
  v11 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v12 = *(int *)(a3 + 60);
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v10;
  swift_retain(v9);
  swift_retain(v11);
  v15 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = 1;
  }
  else
  {
    v18 = *v14;
    *v13 = *v14;
    swift_retain(v18);
    v17 = 0;
  }
  swift_storeEnumTagMultiPayload(v13, v15, v17);
  return a1;
}

uint64_t sub_100091778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10000E0FC(*(_QWORD *)a2, v7);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_10000E138(v9, v10);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  swift_retain(v11);
  swift_release(v12);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v14;
  swift_retain(v14);
  swift_release(v13);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  if (a1 != a2)
  {
    v15 = *(int *)(a3 + 60);
    v16 = (uint64_t *)(a1 + v15);
    v17 = (uint64_t *)(a2 + v15);
    sub_100008194(a1 + v15, &qword_10015D488);
    v18 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
      v20 = 1;
    }
    else
    {
      v21 = *v17;
      *v16 = *v17;
      swift_retain(v21);
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v18, v20);
  }
  return a1;
}

uint64_t sub_1000918A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(int *)(a3 + 60);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for DismissAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100091968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_10000E138(v7, v8);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v9;
  swift_release(v10);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 60);
    v13 = (void *)(a1 + v12);
    v14 = (const void *)(a2 + v12);
    sub_100008194(a1 + v12, &qword_10015D488);
    v15 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for DismissAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
      swift_storeEnumTagMultiPayload(v13, v15, 1);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100091A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100091A7C);
}

uint64_t sub_100091A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003E70(&qword_10015D608);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 60), a2, v8);
  }
}

uint64_t sub_100091AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100091B08);
}

uint64_t sub_100091B08(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = sub_100003E70(&qword_10015D608);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 60), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ArtistEventView(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for ArtistEventView);
}

uint64_t sub_100091B8C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v4[2];

  v2 = *(_OWORD *)(a2 + 32);
  v4[0] = *(_OWORD *)(a2 + 16);
  v4[1] = v2;
  return swift_getOpaqueTypeConformance2(v4, &unk_10011A2B8, 1);
}

uint64_t sub_100091BC0()
{
  uint64_t v0;
  uint64_t v1;
  int v3;

  v0 = type metadata accessor for PinnedScrollableViews(0);
  v3 = 0;
  v1 = sub_100003B3C(&qword_10015E668, (uint64_t (*)(uint64_t))&type metadata accessor for PinnedScrollableViews, (uint64_t)&protocol conformance descriptor for PinnedScrollableViews);
  return dispatch thunk of OptionSet.init(rawValue:)(&v3, v0, v1);
}

uint64_t sub_100091C24(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t WitnessTable;
  _OWORD v11[2];

  v4 = *v2;
  v5 = v2[1];
  v6 = *((unsigned __int8 *)v2 + 16);
  v7 = *(_OWORD *)(a1 + 32);
  v11[0] = *(_OWORD *)(a1 + 16);
  v11[1] = v7;
  v8 = type metadata accessor for ArtistEventViewModel(0, (uint64_t)v11);
  WitnessTable = swift_getWitnessTable(&unk_10010C928, v8);
  return a2(v4, v5, v6, v8, WitnessTable);
}

uint64_t sub_100091CA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t KeyPath;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  ValueMetadata *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  __n128 v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t, uint64_t);
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  void (*v109)(char *, char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __n128 v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  _QWORD *v123;
  char *v124;
  __n128 v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  __n128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(uint64_t, uint64_t);
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  unint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  char v198[8];
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  ValueMetadata *v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;

  v172 = a2;
  v171 = type metadata accessor for TaskPriority(0);
  v170 = *(_QWORD *)(v171 - 8);
  v3 = __chkstk_darwin(v171);
  v169 = (char *)&v146 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = *(_QWORD *)(a1 - 8);
  v186 = *(_QWORD *)(v168 + 64);
  __chkstk_darwin(v3);
  v183 = (char *)&v146 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 24);
  v188 = a1;
  v7 = type metadata accessor for Optional(255, v6);
  v184 = type metadata accessor for Binding(0, v7);
  v176 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v174 = (char **)((char *)&v146 - v8);
  v185 = type metadata accessor for NavigationPath(255);
  v9 = sub_1000034AC(&qword_1001617E0);
  sub_1000034AC(&qword_10015FC78);
  v10 = type metadata accessor for Array(255, v6);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(v11 + 16);
  v187 = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v12);
  v14 = sub_1000034AC(&qword_1001617E8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v12, v6, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v212 = v10;
  v213 = (ValueMetadata *)AssociatedTypeWitness;
  v214 = v14;
  v215 = WitnessTable;
  v216 = AssociatedConformanceWitness;
  type metadata accessor for ForEach(255, &v212);
  v17 = type metadata accessor for _ConditionalContent(255);
  v18 = type metadata accessor for Group(255, v17);
  v19 = type metadata accessor for ModifiedContent(255, v18, &type metadata for _PaddingLayout);
  v20 = type metadata accessor for ModifiedContent(255, v19, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v9, v20, 0, 0);
  v22 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v23 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v22);
  v24 = type metadata accessor for VStack(255, v22, v23);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v24);
  v26 = type metadata accessor for LazyVGrid(255, v24, v25);
  v27 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v26);
  v29 = type metadata accessor for ObservableScrollView(255, v26, v27, v28);
  v30 = swift_getWitnessTable(&unk_1001103F0, v29);
  v212 = v29;
  v213 = (ValueMetadata *)v30;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v212, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v32 = sub_1000034AC(&qword_1001617F0);
  v212 = v29;
  v213 = (ValueMetadata *)v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v212, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v34 = sub_100007D40(&qword_1001617F8, &qword_1001617F0, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v212 = OpaqueTypeMetadata2;
  v213 = (ValueMetadata *)v32;
  v214 = OpaqueTypeConformance2;
  v215 = v34;
  v35 = swift_getOpaqueTypeMetadata2(255, &v212, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v147 = v35;
  v212 = OpaqueTypeMetadata2;
  v213 = (ValueMetadata *)v32;
  v214 = OpaqueTypeConformance2;
  v215 = v34;
  v36 = swift_getOpaqueTypeConformance2(&v212, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v37 = type metadata accessor for NavigationStack(0, v185, v35, v36);
  v152 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v146 = (char *)&v146 - v38;
  v40 = type metadata accessor for EventView(255, v6, v11, v39);
  v41 = swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v37);
  v42 = swift_getWitnessTable(&unk_100113C68, v40);
  v212 = v37;
  v213 = (ValueMetadata *)v6;
  v214 = v40;
  v215 = v41;
  v43 = v40;
  v148 = v40;
  v44 = v41;
  v151 = v41;
  v150 = v12;
  v216 = v12;
  v217 = v42;
  v45 = v42;
  v149 = v42;
  v46 = swift_getOpaqueTypeMetadata2(0, &v212, &opaque type descriptor for <<opaque return type of View.sheet<A, B>(item:onDismiss:content:)>>, 0);
  v156 = *(_QWORD *)(v46 - 8);
  v47 = v46;
  v153 = v46;
  __chkstk_darwin(v46);
  v181 = (char *)&v146 - v48;
  v212 = v37;
  v213 = (ValueMetadata *)v6;
  v214 = v43;
  v215 = v44;
  v216 = v12;
  v217 = v45;
  v49 = swift_getOpaqueTypeConformance2(&v212, &opaque type descriptor for <<opaque return type of View.sheet<A, B>(item:onDismiss:content:)>>, 1);
  v179 = v49;
  v178 = sub_10001DF38();
  v212 = v47;
  v213 = &type metadata for PromotionalAssetsContentView;
  v214 = v49;
  v215 = v178;
  v50 = swift_getOpaqueTypeMetadata2(0, &v212, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v157 = *(_QWORD *)(v50 - 8);
  v154 = v50;
  __chkstk_darwin(v50);
  v177 = (char *)&v146 - v51;
  v53 = type metadata accessor for ModifiedContent(0, v52, &type metadata for _AppearanceActionModifier);
  v159 = *(_QWORD *)(v53 - 8);
  v158 = v53;
  __chkstk_darwin(v53);
  v180 = (char *)&v146 - v54;
  v56 = type metadata accessor for ModifiedContent(0, v55, &type metadata for _AppearanceActionModifier);
  v57 = *(_QWORD *)(v56 - 8);
  v160 = v56;
  v161 = v57;
  __chkstk_darwin(v56);
  v182 = (char *)&v146 - v58;
  v59 = type metadata accessor for _TaskModifier(255);
  v60 = type metadata accessor for ModifiedContent(0, v56, v59);
  v163 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v155 = (char *)&v146 - v61;
  v62 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v165 = v60;
  v167 = type metadata accessor for ModifiedContent(0, v60, v62);
  v166 = *(_QWORD *)(v167 - 8);
  v63 = __chkstk_darwin(v167);
  v162 = (char *)&v146 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v63);
  v164 = (uint64_t)&v146 - v65;
  v66 = v188;
  v199 = *(_QWORD *)(v188 + 16);
  v200 = v6;
  v67 = v199;
  v69 = v187;
  v201 = *(_QWORD *)(v188 + 32);
  v68 = v201;
  v202 = v187;
  v203 = v189;
  NavigationStack.init<>(root:)(sub_100096E38, v198, v147, v36);
  v70 = sub_100091C24(v66, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  v194 = v67;
  v195 = v6;
  v196 = v68;
  v197 = v69;
  KeyPath = swift_getKeyPath(&unk_100110060);
  v212 = v67;
  v213 = (ValueMetadata *)v6;
  v72 = v67;
  v73 = v68;
  v214 = v68;
  v215 = v69;
  v74 = v69;
  v75 = type metadata accessor for ArtistEventViewModel(255, (uint64_t)&v212);
  v147 = swift_getWitnessTable(&unk_10010C928, v75);
  v76 = v174;
  ObservedObject.Wrapper.subscript.getter(v174, KeyPath, v70, v147);
  swift_release(v70);
  swift_release(KeyPath);
  v77 = (_QWORD *)swift_allocObject(&unk_1001510E8, 48, 7);
  v77[2] = v72;
  v77[3] = v6;
  v77[4] = v68;
  v77[5] = v74;
  v78 = swift_checkMetadataState(0, v148);
  v79 = v6;
  v173 = v6;
  v80 = v146;
  View.sheet<A, B>(item:onDismiss:content:)(v76, 0, 0, sub_100096EAC, v77, v37, v6, v78, v151, v150, v149);
  v81 = swift_release(v77);
  (*(void (**)(_QWORD *, uint64_t, __n128))(v176 + 8))(v76, v184, v81);
  (*(void (**)(char *, uint64_t))(v152 + 8))(v80, v37);
  v82 = v188;
  v83 = v189;
  v84 = sub_100091C24(v188, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  v85 = v72;
  v175 = v72;
  v190 = v72;
  v191 = v79;
  v185 = v73;
  v192 = v73;
  v193 = v74;
  v86 = swift_getKeyPath(&unk_100110098);
  ObservedObject.Wrapper.subscript.getter(&v212, v86, v84, v147);
  swift_release(v86);
  v87 = swift_release(v84);
  v88 = v213;
  v151 = v212;
  LODWORD(v152) = v214;
  v89 = v168;
  v176 = *(_QWORD *)(v168 + 16);
  v90 = v183;
  v91 = v83;
  v92 = v82;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v176)(v183, v91, v82, v87);
  v93 = *(unsigned __int8 *)(v89 + 80);
  v94 = (_QWORD *)((v93 + 48) & ~v93);
  v184 = (uint64_t)v94 + v186;
  v174 = v94;
  v186 = v93 | 7;
  v95 = (_QWORD *)swift_allocObject(&unk_100151110, v184, v93 | 7);
  v96 = v173;
  v95[2] = v85;
  v95[3] = v96;
  v95[4] = v73;
  v95[5] = v74;
  v168 = *(_QWORD *)(v89 + 32);
  v97 = v92;
  ((void (*)(char *, char *, uint64_t))v168)((char *)v94 + (_QWORD)v95, v90, v92);
  v98 = v151;
  v99 = v153;
  v100 = v181;
  View.sheet<A>(isPresented:onDismiss:content:)(v151, v88, v152, 0, 0, sub_100096F24, v95, v153, &type metadata for PromotionalAssetsContentView, v179, v178);
  swift_release(v88);
  swift_release(v95);
  v101 = swift_release(v98);
  (*(void (**)(char *, uint64_t, __n128))(v156 + 8))(v100, v99, v101);
  v102 = v189;
  v103 = v97;
  v104 = (void (*)(char *, uint64_t, uint64_t))v176;
  ((void (*)(char *, uint64_t, uint64_t))v176)(v90, v189, v97);
  v105 = (_QWORD *)swift_allocObject(&unk_100151138, v184, v186);
  v106 = v175;
  v105[2] = v175;
  v105[3] = v96;
  v107 = v187;
  v105[4] = v185;
  v105[5] = v107;
  v108 = (char *)v174;
  v109 = (void (*)(char *, char *, uint64_t))v168;
  ((void (*)(char *, char *, uint64_t))v168)((char *)v174 + (_QWORD)v105, v90, v103);
  v212 = v99;
  v213 = &type metadata for PromotionalAssetsContentView;
  v214 = v179;
  v215 = v178;
  v110 = swift_getOpaqueTypeConformance2(&v212, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v111 = v154;
  v112 = v177;
  View.onAppear(perform:)(sub_100096FA0, v105, v154, v110);
  v113 = swift_release(v105);
  (*(void (**)(char *, uint64_t, __n128))(v157 + 8))(v112, v111, v113);
  v114 = v183;
  v115 = v188;
  v104(v183, v102, v188);
  v116 = swift_allocObject(&unk_100151160, v184, v186);
  *(_QWORD *)(v116 + 16) = v106;
  v117 = v173;
  v118 = v185;
  *(_QWORD *)(v116 + 24) = v173;
  *(_QWORD *)(v116 + 32) = v118;
  *(_QWORD *)(v116 + 40) = v107;
  v119 = v115;
  v109(&v108[v116], v114, v115);
  v210 = v110;
  v211 = &protocol witness table for _AppearanceActionModifier;
  v120 = v158;
  v121 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v158);
  v122 = v180;
  View.onDisappear(perform:)(sub_100096FB0, v116, v120, v121);
  v123 = (_QWORD *)v116;
  v124 = v155;
  v125 = swift_release(v123);
  (*(void (**)(char *, uint64_t, __n128))(v159 + 8))(v122, v120, v125);
  ((void (*)(char *, uint64_t, uint64_t))v176)(v114, v189, v119);
  v126 = (_QWORD *)swift_allocObject(&unk_100151188, v184, v186);
  v126[2] = v175;
  v126[3] = v117;
  v127 = v187;
  v126[4] = v185;
  v126[5] = v127;
  v109((char *)v174 + (_QWORD)v126, v114, v119);
  v208 = v121;
  v209 = &protocol witness table for _AppearanceActionModifier;
  v128 = v160;
  v129 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v160);
  v130 = v169;
  j___sScP13userInitiatedScPvgZ(v128);
  v131 = v130;
  v132 = v130;
  v133 = v182;
  View.task(priority:_:)(v131, &unk_100161808, v126, v128, v129);
  v134 = swift_release(v126);
  (*(void (**)(char *, uint64_t, __n128))(v170 + 8))(v132, v171, v134);
  (*(void (**)(char *, uint64_t))(v161 + 8))(v133, v128);
  if (qword_10015CF38 != -1)
    swift_once(&qword_10015CF38, sub_100105DA4);
  v135 = qword_10016F6D8;
  v136 = unk_10016F6E0;
  v137 = sub_100003B3C(&qword_10015D458, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
  v206 = v129;
  v207 = v137;
  v138 = v165;
  v139 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v165);
  v140 = (uint64_t)v162;
  View.accessibilityIdentifier(_:)(v135, v136, v138, v139);
  (*(void (**)(char *, uint64_t))(v163 + 8))(v124, v138);
  v141 = sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v204 = v139;
  v205 = v141;
  v142 = v167;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v167);
  v143 = v164;
  sub_1000F257C(v140, v142, v164);
  v144 = *(void (**)(uint64_t, uint64_t))(v166 + 8);
  v144(v140, v142);
  sub_1000E3B88(v143, v142, v172);
  return ((uint64_t (*)(uint64_t, uint64_t))v144)(v143, v142);
}

uint64_t sub_100092BDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t TupleTypeMetadata2;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t OpaqueTypeConformance2;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99[16];
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105[8];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v92 = a4;
  v98 = a1;
  v97 = a6;
  v96 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v94 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = a2;
  v112 = a3;
  v11 = a2;
  v113 = a4;
  v114 = a5;
  v12 = a5;
  v88 = a5;
  v91 = type metadata accessor for ArtistEventView(0, (uint64_t)&v111);
  v90 = *(_QWORD *)(v91 - 8);
  v93 = *(_QWORD *)(v90 + 64);
  __chkstk_darwin(v91);
  v89 = (char *)&v71 - v13;
  v14 = sub_1000034AC(&qword_1001617E0);
  sub_1000034AC(&qword_10015FC78);
  v15 = type metadata accessor for Array(255, a3);
  v16 = *(_QWORD *)(v12 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v16);
  v18 = sub_1000034AC(&qword_1001617E8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v15);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v16, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v111 = v15;
  v112 = AssociatedTypeWitness;
  v113 = v18;
  v114 = WitnessTable;
  v115 = AssociatedConformanceWitness;
  type metadata accessor for ForEach(255, &v111);
  v21 = type metadata accessor for _ConditionalContent(255);
  v22 = type metadata accessor for Group(255, v21);
  v23 = type metadata accessor for ModifiedContent(255, v22, &type metadata for _PaddingLayout);
  v24 = type metadata accessor for ModifiedContent(255, v23, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v14, v24, 0, 0);
  v26 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v27 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v26);
  v28 = type metadata accessor for VStack(255, v26, v27);
  v29 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v28);
  v30 = type metadata accessor for LazyVGrid(255, v28, v29);
  v85 = v30;
  v84 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v30);
  v32 = type metadata accessor for ObservableScrollView(0, v30, v84, v31);
  v87 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v81 = (uint64_t)&v71 - v33;
  v34 = swift_getWitnessTable(&unk_1001103F0, v32);
  v111 = v32;
  v112 = v34;
  v35 = v34;
  v74 = v34;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v111, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v86 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v37 = OpaqueTypeMetadata2;
  v80 = OpaqueTypeMetadata2;
  __chkstk_darwin(OpaqueTypeMetadata2);
  v76 = (char *)&v71 - v38;
  v39 = sub_1000034AC(&qword_1001617F0);
  v79 = v39;
  v111 = v32;
  v112 = v35;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v111, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v78 = OpaqueTypeConformance2;
  v77 = sub_100007D40(&qword_1001617F8, &qword_1001617F0, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v111 = v37;
  v112 = v39;
  v113 = OpaqueTypeConformance2;
  v114 = v77;
  v82 = swift_getOpaqueTypeMetadata2(0, &v111, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v83 = *(_QWORD *)(v82 - 8);
  v41 = __chkstk_darwin(v82);
  v73 = (char *)&v71 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  v75 = (uint64_t)&v71 - v43;
  v44 = v11;
  v72 = v11;
  v106 = v11;
  v107 = a3;
  v45 = a3;
  v71 = a3;
  v46 = v92;
  v47 = v88;
  v108 = v92;
  v109 = v88;
  v110 = v98;
  v48 = v90;
  v49 = v89;
  v50 = v91;
  (*(void (**)(char *))(v90 + 16))(v89);
  v51 = *(unsigned __int8 *)(v48 + 80);
  v52 = (v51 + 48) & ~v51;
  v53 = (char *)swift_allocObject(&unk_1001511D8, v52 + v93, v51 | 7);
  *((_QWORD *)v53 + 2) = v44;
  *((_QWORD *)v53 + 3) = v45;
  *((_QWORD *)v53 + 4) = v46;
  *((_QWORD *)v53 + 5) = v47;
  v54 = (*(uint64_t (**)(char *, char *, uint64_t))(v48 + 32))(&v53[v52], v49, v50);
  v55 = static Axis.Set.vertical.getter(v54);
  v56 = v81;
  v57 = sub_100099298(v55, 0, (void (*)(__n128))sub_10009712C, (uint64_t)v105, (uint64_t)sub_10009713C, (uint64_t)v53, v85, v84, v81);
  v58 = v95;
  v59 = v94;
  v60 = v96;
  (*(void (**)(char *, _QWORD, uint64_t, double))(v95 + 104))(v94, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v96, v57);
  v61 = v76;
  View.navigationBarTitleDisplayMode(_:)(v59, v32, v74);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v60);
  (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v56, v32);
  v100 = v72;
  v101 = v71;
  v102 = v46;
  v103 = v47;
  v104 = v98;
  v62 = (uint64_t)v73;
  v63 = v80;
  v64 = v79;
  v65 = v78;
  v66 = v77;
  View.toolbar<A>(content:)(sub_1000971BC, v99, v80, v79, v78, v77);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v61, v63);
  v111 = v63;
  v112 = v64;
  v113 = v65;
  v114 = v66;
  swift_getOpaqueTypeConformance2(&v111, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v67 = v75;
  v68 = v82;
  sub_1000F257C(v62, v82, v75);
  v69 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
  v69(v62, v68);
  sub_1000E3B88(v67, v68, v97);
  return ((uint64_t (*)(uint64_t, uint64_t))v69)(v67, v68);
}

uint64_t sub_1000932B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t TupleTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[16];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[6];

  v44 = a5;
  v49 = a1;
  v50 = a4;
  v48 = a2;
  v51 = a6;
  v8 = type metadata accessor for PinnedScrollableViews(0);
  __chkstk_darwin(v8);
  v47 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for GridItem.Size(0);
  v45 = *(_QWORD *)(v10 - 8);
  v46 = v10;
  __chkstk_darwin(v10);
  v12 = (_OWORD *)((char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_1000034AC(&qword_1001617E0);
  sub_1000034AC(&qword_10015FC78);
  v14 = type metadata accessor for Array(255, a3);
  v15 = *(_QWORD *)(a5 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v15);
  v17 = sub_1000034AC(&qword_1001617E8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v14);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v15, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v58[0] = v14;
  v58[1] = AssociatedTypeWitness;
  v58[2] = v17;
  v58[3] = WitnessTable;
  v58[4] = AssociatedConformanceWitness;
  type metadata accessor for ForEach(255, v58);
  v20 = type metadata accessor for _ConditionalContent(255);
  v21 = type metadata accessor for Group(255, v20);
  v22 = type metadata accessor for ModifiedContent(255, v21, &type metadata for _PaddingLayout);
  v23 = type metadata accessor for ModifiedContent(255, v22, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v13, v23, 0, 0);
  v25 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v26 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v25);
  v27 = type metadata accessor for VStack(255, v25, v26);
  v28 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v27);
  v29 = type metadata accessor for LazyVGrid(0, v27, v28);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v44 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v35 = (char *)&v44 - v34;
  v36 = sub_100003E70(&qword_10015FDF8);
  v37 = type metadata accessor for GridItem(0);
  v38 = swift_allocObject(v36, ((*(unsigned __int8 *)(*(_QWORD *)(v37 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v37 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v37 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v37 - 8) + 80) | 7);
  *(_OWORD *)(v38 + 16) = xmmword_10010ACC0;
  *v12 = xmmword_10010B410;
  (*(void (**)(_OWORD *, _QWORD, uint64_t))(v45 + 104))(v12, enum case for GridItem.Size.flexible(_:), v46);
  v39 = GridItem.init(_:spacing:alignment:)(v12, 0, 0, 0, 0, 1);
  v53 = v48;
  v54 = a3;
  v55 = v50;
  v56 = v44;
  v57 = v49;
  v40 = static HorizontalAlignment.center.getter(v39);
  v41 = v47;
  sub_100091BC0();
  LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)(v38, v40, 0, 0, v41, sub_1000972D8, v52, v27, v28);
  swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v29);
  sub_1000F257C((uint64_t)v33, v29, (uint64_t)v35);
  v42 = *(void (**)(char *, uint64_t))(v30 + 8);
  v42(v33, v29);
  sub_1000E3B88((uint64_t)v35, v29, v51);
  return ((uint64_t (*)(char *, uint64_t))v42)(v35, v29);
}

uint64_t sub_100093688@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t AssociatedTypeWitness;
  uint64_t v41;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v30 = a1;
  v31 = a4;
  v29 = a2;
  v32 = a6;
  v8 = sub_1000034AC(&qword_1001617E0);
  sub_1000034AC(&qword_10015FC78);
  v9 = type metadata accessor for Array(255, a3);
  v10 = *(_QWORD *)(a5 + 16);
  v39 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v10);
  v41 = sub_1000034AC(&qword_1001617E8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  type metadata accessor for ForEach(255, &v39);
  v11 = type metadata accessor for _ConditionalContent(255);
  v12 = type metadata accessor for Group(255, v11);
  v13 = type metadata accessor for ModifiedContent(255, v12, &type metadata for _PaddingLayout);
  v14 = type metadata accessor for ModifiedContent(255, v13, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v8, v14, 0, 0);
  v16 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v17 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v16);
  v18 = type metadata accessor for VStack(0, v16, v17);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v29 - v24;
  v34 = v29;
  v35 = a3;
  v36 = v31;
  v37 = a5;
  v38 = v30;
  v26 = static HorizontalAlignment.center.getter(v23);
  VStack.init(alignment:spacing:content:)(v26, 0, 0, sub_1000972E4, v33, v16, v17);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v18);
  sub_1000F257C((uint64_t)v22, v18, (uint64_t)v25);
  v27 = *(void (**)(char *, uint64_t))(v19 + 8);
  v27(v22, v18);
  sub_1000E3B88((uint64_t)v25, v18, v32);
  return ((uint64_t (*)(char *, uint64_t))v27)(v25, v18);
}

uint64_t sub_100093904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63[16];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[10];
  uint64_t v72;
  uint64_t AssociatedTypeWitness;
  uint64_t v74;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v52 = a5;
  v58 = a4;
  v56 = a2;
  v54 = a1;
  v62 = a6;
  sub_1000034AC(&qword_10015FC78);
  v8 = type metadata accessor for Array(255, a3);
  v9 = *(_QWORD *)(a5 + 16);
  v72 = v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v9);
  v74 = sub_1000034AC(&qword_1001617E8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v48 = type metadata accessor for ForEach(255, &v72);
  v51 = type metadata accessor for _ConditionalContent(255);
  v10 = type metadata accessor for Group(0, v51);
  v57 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v49 = (char *)&v47 - v11;
  v12 = type metadata accessor for ModifiedContent(0, v10, &type metadata for _PaddingLayout);
  v59 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v50 = (char *)&v47 - v13;
  v14 = type metadata accessor for ModifiedContent(0, v12, &type metadata for _PaddingLayout);
  v61 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v55 = (uint64_t)&v47 - v18;
  v60 = sub_100003E70(&qword_1001617E0);
  v19 = __chkstk_darwin(v60);
  v53 = (uint64_t)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v47 - v22;
  *(_QWORD *)v23 = static HorizontalAlignment.center.getter(v21);
  *((_QWORD *)v23 + 1) = 0;
  v23[16] = 0;
  v24 = sub_100003E70(&qword_100161858);
  v25 = v54;
  v26 = v56;
  v27 = v58;
  v28 = v52;
  sub_100093E60(v54, v56, a3, v58, v52, (uint64_t)&v23[*(int *)(v24 + 44)]);
  v64 = v26;
  v65 = a3;
  v66 = v27;
  v67 = v28;
  v68 = v25;
  v29 = sub_100014600(&qword_10015FCA8, &qword_10015FC78, (void (*)(void))sub_10005CA00);
  v71[9] = sub_1000972FC();
  v30 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v48);
  v71[7] = v29;
  v71[8] = v30;
  v31 = v51;
  v32 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v51);
  v33 = v49;
  v34 = Group<A>.init(content:)(sub_1000972F0, v63, v31, v32);
  v35 = static Edge.Set.leading.getter(v34);
  v71[6] = v32;
  v36 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v10);
  v37 = v50;
  View.padding(_:_:)(v35, 0, 1, v10, v36);
  v38 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v33, v10);
  v39 = static Edge.Set.trailing.getter(v38);
  v71[4] = v36;
  v71[5] = &protocol witness table for _PaddingLayout;
  v40 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  View.padding(_:_:)(v39, 0x4034000000000000, 0, v12, v40);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v12);
  v71[2] = v40;
  v71[3] = &protocol witness table for _PaddingLayout;
  v41 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  v42 = v55;
  sub_1000F257C((uint64_t)v17, v14, v55);
  v43 = v61;
  v44 = *(void (**)(char *, uint64_t))(v61 + 8);
  v44(v17, v14);
  v45 = v53;
  sub_100007ADC((uint64_t)v23, v53, &qword_1001617E0);
  v72 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v17, v42, v14);
  AssociatedTypeWitness = (uint64_t)v17;
  v71[0] = v60;
  v71[1] = v14;
  v69 = sub_100007D40(&qword_100161868, &qword_1001617E0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v70 = v41;
  sub_1000E4768(&v72, 2uLL, (uint64_t)v71);
  v44((char *)v42, v14);
  sub_100008194((uint64_t)v23, &qword_1001617E0);
  v44(v17, v14);
  return sub_100008194(v45, &qword_1001617E0);
}

uint64_t sub_100093E60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  void (**v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __n128 v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t result;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  void (*v149)(char *, uint64_t, uint64_t);
  void (*v150)(char *, uint64_t, uint64_t);
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  _BYTE v171[7];
  char v172;
  _BYTE v173[147];
  _BYTE v174[147];
  _QWORD v175[7];
  char v176;
  _BYTE v177[7];
  __int128 v178;
  __int128 v179;
  char v180;
  _BYTE v181[7];
  char v182;
  _BYTE v183[7];
  double v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  char v194;
  char v195;
  double v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  char v201[32];

  v163 = a6;
  v159 = a2;
  v160 = a3;
  v189 = a2;
  v190 = a3;
  v161 = a4;
  v191 = a4;
  v155 = a5;
  *(_QWORD *)&v192 = a5;
  v7 = type metadata accessor for ArtistEventView(0, (uint64_t)&v189);
  v158 = *(_QWORD *)(v7 - 8);
  v156 = *(_QWORD *)(v158 + 64);
  __chkstk_darwin(v7);
  v157 = (char *)&v146 - v8;
  v9 = sub_100003E70(&qword_100161870);
  v153 = *(_QWORD *)(v9 - 8);
  v154 = v9;
  __chkstk_darwin(v9);
  v148 = (char *)&v146 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003E70(&qword_10015D400);
  __chkstk_darwin(v11);
  v151 = (char *)&v146 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ArtistPromotionalAssets(0);
  v164 = *(_QWORD *)(v13 - 8);
  v165 = v13;
  v14 = __chkstk_darwin(v13);
  v146 = v15;
  v147 = (char *)&v146 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v152 = (char *)&v146 - v16;
  v17 = sub_100003E70(&qword_100161878);
  v18 = __chkstk_darwin(v17);
  v162 = (uint64_t)&v146 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v167 = (char *)&v146 - v20;
  v21 = (int *)type metadata accessor for ArtistEventListHeader(0);
  __chkstk_darwin(v21);
  v23 = (void (**)(char *, uint64_t, uint64_t))((char *)&v146 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v166 = sub_100003E70(&qword_100161880);
  v24 = __chkstk_darwin(v166);
  v169 = (uint64_t)&v146 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v168 = (uint64_t)&v146 - v26;
  v27 = sub_100091C24(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v28 = sub_10003FDA0();
  v149 = v29;
  v150 = (void (*)(char *, uint64_t, uint64_t))v28;
  swift_release(v27);
  v30 = sub_100091C24(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10003FDD4((uint64_t)v23 + v21[5]);
  swift_release(v30);
  v31 = sub_100091C24(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v32 = v31 + *(_QWORD *)(*(_QWORD *)v31 + 184);
  v33 = *(_QWORD *)v32;
  v34 = *(_QWORD *)(v32 + 8);
  v35 = *(_BYTE *)(v32 + 16);
  v36 = *(_QWORD *)(v32 + 24);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v36);
  swift_release(v31);
  v37 = v149;
  *v23 = v150;
  v23[1] = v37;
  v38 = (char *)v23 + v21[6];
  *(_QWORD *)v38 = v33;
  *((_QWORD *)v38 + 1) = v34;
  v39 = v169;
  v38[16] = v35;
  v40 = v7;
  *((_QWORD *)v38 + 3) = v36;
  *((_BYTE *)v23 + v21[7]) = 0;
  v41 = (void (**)(char *, uint64_t, uint64_t))((char *)v23 + v21[8]);
  *v41 = swift_getKeyPath(&unk_100110100);
  v42 = sub_100003E70(&qword_10015D498);
  v43 = swift_storeEnumTagMultiPayload(v41, v42, 0);
  LOBYTE(v41) = static Edge.Set.horizontal.getter(v43);
  sub_100028390((uint64_t)v23, v39, type metadata accessor for ArtistEventListHeader);
  v44 = v39 + *(int *)(v166 + 36);
  *(_BYTE *)v44 = (_BYTE)v41;
  *(_OWORD *)(v44 + 8) = 0u;
  *(_OWORD *)(v44 + 24) = 0u;
  *(_BYTE *)(v44 + 40) = 1;
  sub_1000283D4((uint64_t)v23, type metadata accessor for ArtistEventListHeader);
  sub_100007A98(v39, v168, &qword_100161880);
  v45 = sub_100091C24(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v46 = *(_QWORD *)(v45 + *(_QWORD *)(*(_QWORD *)v45 + 168));
  swift_retain(v46);
  swift_release(v45);
  KeyPath = swift_getKeyPath(&unk_100110160);
  v189 = v46;
  v48 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v189, KeyPath, v48);
  v49 = KeyPath;
  v50 = (uint64_t)v151;
  swift_release(v49);
  v51 = v46 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess(v46 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets, v201, 0, 0);
  sub_100007ADC(v51, v50, &qword_10015D400);
  v52 = swift_release(v46);
  v53 = v164;
  v54 = v165;
  if ((*(unsigned int (**)(uint64_t, uint64_t, __n128))(v164 + 48))(v50, 1, v52) == 1)
  {
    sub_100008194(v50, &qword_10015D400);
    v55 = 1;
    v56 = (uint64_t)v167;
    v57 = v154;
    v58 = v155;
    v59 = a1;
    v60 = v153;
  }
  else
  {
    v166 = v7;
    v150 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 32);
    v61 = v53;
    v62 = v152;
    v150(v152, v50, v54);
    v63 = sub_100091C24(v166, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    v64 = *(_QWORD *)(v63 + *(_QWORD *)(*(_QWORD *)v63 + 168));
    swift_retain(v64);
    swift_release(v63);
    v65 = type metadata accessor for PromotionalAssetsEntryViewModel(0);
    v66 = swift_allocObject(v65, *(unsigned int *)(v65 + 48), *(unsigned __int16 *)(v65 + 52));
    ObservationRegistrar.init()(v66);
    *(_QWORD *)(v66 + 16) = v64;
    v175[0] = v66;
    v67 = State.init(wrappedValue:)(v175, v65);
    v68 = v189;
    v59 = a1;
    v69 = v190;
    v70 = static Edge.Set.horizontal.getter(v67);
    LOBYTE(v65) = v70;
    LOBYTE(v64) = static Edge.Set.top.getter(v70);
    v71 = EdgeInsets.init(_all:)(25.0);
    v189 = v68;
    v190 = v69;
    LOBYTE(v191) = v65;
    v192 = 0u;
    v193 = 0u;
    v194 = 1;
    v195 = v64;
    v196 = v71;
    v197 = v72;
    v198 = v73;
    v199 = v74;
    v200 = 0;
    v75 = v157;
    v76 = v158;
    (*(void (**)(char *, uint64_t, uint64_t))(v158 + 16))(v157, v59, v166);
    v77 = v61;
    v78 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
    v79 = v147;
    v80 = v62;
    v81 = v165;
    v78(v147, v80, v165);
    v82 = *(unsigned __int8 *)(v76 + 80);
    v83 = (v82 + 48) & ~v82;
    v84 = *(unsigned __int8 *)(v77 + 80);
    v85 = (v156 + v84 + v83) & ~v84;
    v86 = (char *)swift_allocObject(&unk_1001512A0, v85 + v146, v82 | v84 | 7);
    v87 = v160;
    *((_QWORD *)v86 + 2) = v159;
    *((_QWORD *)v86 + 3) = v87;
    v88 = v155;
    *((_QWORD *)v86 + 4) = v161;
    *((_QWORD *)v86 + 5) = v88;
    (*(void (**)(char *, char *, uint64_t))(v76 + 32))(&v86[v83], v75, v166);
    v150(&v86[v85], (uint64_t)v79, v81);
    v40 = v166;
    v89 = sub_100003E70(&qword_100161898);
    v90 = sub_100014600(&qword_1001618A0, &qword_100161898, (void (*)(void))sub_100097A20);
    v91 = v148;
    View.onTapGesture(count:perform:)(1, sub_100097984, v86, v89, v90);
    swift_release(v86);
    v92 = v190;
    swift_release(v189);
    v93 = swift_release(v92);
    (*(void (**)(char *, uint64_t, __n128))(v164 + 8))(v152, v81, v93);
    v95 = v153;
    v94 = v154;
    v96 = v167;
    (*(void (**)(char *, char *, uint64_t))(v153 + 32))(v167, v91, v154);
    v55 = 0;
    v56 = (uint64_t)v96;
    v58 = v88;
    v57 = v94;
    v60 = v95;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v56, v55, 1, v57);
  v97 = sub_100091C24(v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v98 = sub_10003FF78();
  swift_release(v97);
  if (!v98)
  {
    sub_1000975C4((uint64_t)v175);
    sub_100007A98((uint64_t)v175, (uint64_t)&v189, &qword_100161888);
LABEL_13:
    v137 = v168;
    v136 = v169;
    sub_100007ADC(v168, v169, &qword_100161880);
    v138 = v162;
    sub_100007ADC(v56, v162, &qword_100161878);
    sub_100007A98((uint64_t)&v189, (uint64_t)v173, &qword_100161888);
    v139 = v163;
    sub_100007ADC(v136, v163, &qword_100161880);
    v140 = sub_100003E70(&qword_100161890);
    sub_100007ADC(v138, v139 + *(int *)(v140 + 48), &qword_100161878);
    v141 = v139 + *(int *)(v140 + 64);
    sub_100007A98((uint64_t)v173, (uint64_t)v174, &qword_100161888);
    sub_100007A98((uint64_t)v174, v141, &qword_100161888);
    sub_100097638((uint64_t)v174, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000975E4);
    sub_100008194(v56, &qword_100161878);
    sub_100008194(v137, &qword_100161880);
    sub_100007A98((uint64_t)v173, (uint64_t)v175, &qword_100161888);
    sub_100097638((uint64_t)v175, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10009769C);
    sub_100008194(v138, &qword_100161878);
    return sub_100008194(v136, &qword_100161880);
  }
  v99 = sub_100091C24(v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v100 = v59;
  v101 = *(_QWORD *)(v59 + 40);
  if (v101)
  {
    v102 = v99;
    swift_retain(*(_QWORD *)(v59 + 40));
    v103 = sub_1000A3BEC();
    v105 = v104;
    swift_release(v101);
    if (v105)
    {
      swift_bridgeObjectRelease();
      v106 = v58;
      if ((v103 & 1) != 0)
        v107 = _stringCompareWithSmolCheck(_:_:expecting:)(7368801, 0xE300000000000000, 0x6C61646F6DLL, 0xE500000000000000, 0);
      else
        v107 = 1;
    }
    else
    {
      v106 = v58;
      v107 = 1;
    }
    v108 = v100;
    swift_bridgeObjectRelease();
    v109 = sub_10003FFE8(v107 & 1);
    swift_release(v102);
    v110 = sub_100091C24(v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    v111 = sub_10003FB24();
    v113 = v112;
    v114 = swift_release(v110);
    v115 = v157;
    v116 = v158;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v158 + 16))(v157, v108, v40, v114);
    v117 = *(unsigned __int8 *)(v116 + 80);
    v118 = v40;
    v119 = (v117 + 48) & ~v117;
    v120 = (char *)swift_allocObject(&unk_100151278, v119 + v156, v117 | 7);
    v121 = v160;
    *((_QWORD *)v120 + 2) = v159;
    *((_QWORD *)v120 + 3) = v121;
    *((_QWORD *)v120 + 4) = v161;
    *((_QWORD *)v120 + 5) = v106;
    (*(void (**)(char *, char *, uint64_t))(v116 + 32))(&v120[v119], v115, v118);
    v122 = type metadata accessor for RemoteViewConfiguration();
    v123 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    v124 = EnvironmentObject.init()(v122, v123);
    v126 = v125;
    v127 = static Edge.Set.bottom.getter(v124);
    LOBYTE(v118) = v127;
    LOBYTE(v116) = static Edge.Set.top.getter(v127);
    v128 = EdgeInsets.init(_all:)(32.0);
    v172 = 1;
    v170 = 0;
    v175[0] = v109;
    v175[1] = v111;
    v175[2] = v113;
    v175[3] = sub_1000977D0;
    v175[4] = v120;
    v175[5] = v124;
    v175[6] = v126;
    v176 = v118;
    *(_DWORD *)v177 = *(_DWORD *)v174;
    *(_DWORD *)&v177[3] = *(_DWORD *)&v174[3];
    v178 = 0u;
    v179 = 0u;
    v180 = 1;
    *(_DWORD *)v181 = *(_DWORD *)v173;
    *(_DWORD *)&v181[3] = *(_DWORD *)&v173[3];
    v182 = v116;
    *(_DWORD *)v183 = *(_DWORD *)v171;
    *(_DWORD *)&v183[3] = *(_DWORD *)&v171[3];
    v184 = v128;
    v185 = v129;
    v186 = v130;
    v187 = v131;
    v188 = 0;
    nullsub_1(v175, v132, v133, v134, v135);
    sub_100007A98((uint64_t)v175, (uint64_t)&v189, &qword_100161888);
    v56 = (uint64_t)v167;
    goto LABEL_13;
  }
  v143 = *(_QWORD *)(v59 + 48);
  v144 = type metadata accessor for RemoteViewConfiguration();
  v145 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
  result = EnvironmentObject.error()(0, v143, v144, v145);
  __break(1u);
  return result;
}

void sub_1000949C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];

  v11 = sub_100003E70(&qword_10015D4B8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[0] = a3;
  v26[1] = a4;
  v26[2] = a5;
  v26[3] = a6;
  v15 = type metadata accessor for ArtistEventView(0, (uint64_t)v26);
  v16 = sub_100091C24(v15, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10003FFE0();
  swift_release(v16);
  ArtistPromotionalAssets.eventWithPromotionalAssets.getter(v17);
  v18 = sub_100007D40((unint64_t *)&qword_10015D4C8, &qword_10015D4B8, (uint64_t)&unk_10010CF80);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 152))(v11, v18);
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v22 = *(_QWORD *)(a1 + 40);
  if (v22)
  {
    swift_retain(*(_QWORD *)(a1 + 40));
    sub_1000DB03C(v19, v21, 2, 3, 9, 0, 3u, v22);
    swift_bridgeObjectRelease();
    swift_release(v22);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 48);
    v24 = type metadata accessor for RemoteViewConfiguration();
    v25 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v23, v24, v25);
    __break(1u);
  }
}

double sub_100094B6C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  double result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[4];

  v32 = a6;
  v33 = a7;
  v30 = a4;
  v31 = a5;
  v34[0] = a4;
  v34[1] = a5;
  v34[2] = a6;
  v34[3] = a7;
  v10 = type metadata accessor for ArtistEventView(0, (uint64_t)v34);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v14 = (char *)&v30 - v13;
  v15 = sub_100003E70(&qword_100161700);
  __chkstk_darwin(v15);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a3, v10);
  type metadata accessor for MainActor(0);
  v19 = sub_100005FA0(a1, a2);
  v20 = static MainActor.shared.getter(v19);
  v21 = *(unsigned __int8 *)(v11 + 80);
  v22 = (v21 + 64) & ~v21;
  v23 = (v12 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (char *)swift_allocObject(&unk_1001512C8, v23 + 16, v21 | 7);
  *((_QWORD *)v24 + 2) = v20;
  *((_QWORD *)v24 + 3) = &protocol witness table for MainActor;
  v25 = v31;
  *((_QWORD *)v24 + 4) = v30;
  *((_QWORD *)v24 + 5) = v25;
  v26 = v33;
  *((_QWORD *)v24 + 6) = v32;
  *((_QWORD *)v24 + 7) = v26;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v24[v22], v14, v10);
  v27 = (uint64_t *)&v24[v23];
  *v27 = a1;
  v27[1] = a2;
  v28 = sub_1000F7C84((uint64_t)v17, (uint64_t)&unk_1001618C8, (uint64_t)v24);
  *(_QWORD *)&result = swift_release(v28).n128_u64[0];
  return result;
}

uint64_t sub_100094D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v8[11] = v13;
  v8[12] = v14;
  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[6] = a4;
  v9 = type metadata accessor for MainActor(0);
  v8[13] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v8[14] = v10;
  v8[15] = v11;
  return swift_task_switch(sub_100094D9C, v10, v11);
}

uint64_t sub_100094D9C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 72);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 88);
  v1 = type metadata accessor for ArtistEventView(0, v0 + 16);
  *(_QWORD *)(v0 + 128) = v1;
  *(_QWORD *)(v0 + 136) = sub_100091C24(v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v2 = (_QWORD *)swift_task_alloc(dword_10015EF74);
  *(_QWORD *)(v0 + 144) = v2;
  *v2 = v0;
  v2[1] = sub_100094E20;
  return sub_10004020C(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_100094E20()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*v0 + 144));
  swift_release(v2);
  return swift_task_switch(sub_100094E74, *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120));
}

uint64_t sub_100094E74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __n128 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 104));
  v3 = sub_100091C24(v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (v2)
  {
    if (v2 == 1)
    {
      v4 = 0xEF6E6F697461636FLL;
      v5 = 0x4C746E6572727563;
    }
    else
    {
      v5 = *(_QWORD *)(v0 + 56);
      v4 = *(_QWORD *)(v0 + 64);
    }
  }
  else
  {
    v4 = 0xE300000000000000;
    v5 = 7105633;
  }
  v7 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v7 + 40);
  v9 = *(_QWORD *)(v0 + 64);
  if (v8)
  {
    sub_100005FA0(v6, v9);
    swift_retain(v8);
    sub_100040C18(7, v5, v4, 2u, v8);
    swift_release(v8);
    swift_bridgeObjectRelease();
    v10 = swift_release(v3);
    return (*(uint64_t (**)(__n128))(v0 + 8))(v10);
  }
  else
  {
    v12 = *(_QWORD *)(v7 + 48);
    sub_100005FA0(v6, v9);
    v13 = type metadata accessor for RemoteViewConfiguration();
    v14 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    return EnvironmentObject.error()(0, v12, v13, v14);
  }
}

uint64_t sub_100094FB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;

  v68 = a1;
  v73 = a6;
  v65 = a2;
  v75 = a2;
  v76 = a3;
  v66 = a4;
  v77 = a4;
  v78 = a5;
  v8 = type metadata accessor for ArtistEventView(0, (uint64_t)&v75);
  v64 = *(_QWORD *)(v8 - 8);
  v58 = *(_QWORD *)(v64 + 64);
  __chkstk_darwin(v8);
  v62 = (char *)&v56 - v9;
  v10 = type metadata accessor for Array(255, a3);
  v67 = a5;
  v11 = *(_QWORD *)(a5 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v11);
  v13 = sub_1000034AC(&qword_1001617E8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  v61 = v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v75 = v10;
  v76 = AssociatedTypeWitness;
  v60 = AssociatedTypeWitness;
  v59 = v13;
  v77 = v13;
  v78 = WitnessTable;
  v57 = WitnessTable;
  v79 = AssociatedConformanceWitness;
  v16 = type metadata accessor for ForEach(0, &v75);
  v56 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v63 = (uint64_t)&v56 - v20;
  v69 = sub_1000034AC(&qword_10015FC78);
  v21 = type metadata accessor for _ConditionalContent(0);
  v71 = *(_QWORD *)(v21 - 8);
  v72 = v21;
  __chkstk_darwin(v21);
  v70 = (char *)&v56 - v22;
  v23 = v68;
  v24 = sub_100091C24(v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v25 = sub_10003F9E8();
  swift_release(v24);
  v75 = v25;
  v26 = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  LOBYTE(WitnessTable) = Collection.isEmpty.getter(v10, v26);
  swift_bridgeObjectRelease();
  v27 = sub_100091C24(v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v28 = v27;
  if ((WitnessTable & 1) != 0)
  {
    v29 = v27 + *(_QWORD *)(*(_QWORD *)v27 + 200);
    v31 = *(_QWORD *)v29;
    v30 = *(_QWORD *)(v29 + 8);
    v32 = *(_BYTE *)(v29 + 16);
    v33 = *(_QWORD *)(v29 + 24);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v33);
    swift_release(v28);
    v35 = static Edge.Set.top.getter(v34);
    v75 = v31;
    v76 = v30;
    LOBYTE(v77) = v32;
    v78 = v33;
    LOBYTE(v79) = v35;
    v80 = 0u;
    v81 = 0u;
    v82 = 1;
    v36 = sub_100014600(&qword_10015FCA8, &qword_10015FC78, (void (*)(void))sub_10005CA00);
    v74 = sub_1000972FC();
    v37 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v16);
    v38 = (uint64_t)v70;
    sub_1000E3BA0((uint64_t)&v75, v69, v16, v36, v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v39 = sub_10003F9E8();
    v40 = swift_release(v28);
    v75 = v39;
    v41 = v64;
    v42 = v62;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v64 + 16))(v62, v23, v8, v40);
    v43 = *(unsigned __int8 *)(v41 + 80);
    v44 = (v43 + 48) & ~v43;
    v45 = (char *)swift_allocObject(&unk_100151228, v44 + v58, v43 | 7);
    *((_QWORD *)v45 + 2) = v65;
    *((_QWORD *)v45 + 3) = a3;
    v46 = v67;
    *((_QWORD *)v45 + 4) = v66;
    *((_QWORD *)v45 + 5) = v46;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(&v45[v44], v42, v8);
    v47 = sub_1000972FC();
    ForEach<>.init(_:content:)(&v75, sub_100097364, v45, v10, v60, v59, v57, v47, v61);
    v86 = v47;
    v48 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v16);
    v49 = v63;
    sub_1000F257C((uint64_t)v19, v16, v63);
    v50 = *(void (**)(char *, uint64_t))(v56 + 8);
    v50(v19, v16);
    sub_1000E3B88(v49, v16, (uint64_t)v19);
    v51 = sub_100014600(&qword_10015FCA8, &qword_10015FC78, (void (*)(void))sub_10005CA00);
    v38 = (uint64_t)v70;
    sub_1000E3C64((uint64_t)v19, v69, v16, v51, v48);
    v50(v19, v16);
    v50((char *)v49, v16);
  }
  v52 = sub_100014600(&qword_10015FCA8, &qword_10015FC78, (void (*)(void))sub_10005CA00);
  v85 = sub_1000972FC();
  v53 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v16);
  v83 = v52;
  v84 = v53;
  v54 = v72;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v72);
  sub_1000E3B88(v38, v54, v73);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 8))(v38, v54);
}

uint64_t sub_100095524@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t WitnessTable;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t AssociatedConformanceWitness;
  void *v50;
  void *v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  int *v64;
  uint64_t *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t KeyPath;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t AssociatedTypeWitness;
  char *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD v133[4];

  v117 = a2;
  v132 = a5;
  v125 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v121 = v9;
  v122 = v8;
  v123 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = v10;
  v133[0] = v8;
  v133[1] = v11;
  v133[2] = v10;
  v133[3] = v12;
  v13 = type metadata accessor for ArtistEventView(0, (uint64_t)v133);
  v119 = *(_QWORD *)(v13 - 8);
  v120 = v13;
  v116 = *(_QWORD *)(v119 + 64);
  __chkstk_darwin(v13);
  v118 = (char *)&v96 - v14;
  v111 = type metadata accessor for Date(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v109 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for DateInterval(0);
  v106 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v105 = (uint64_t)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4);
  v100 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v99 = (char *)&v96 - v17;
  v107 = type metadata accessor for EventRowViewModel(0);
  v18 = __chkstk_darwin(v107);
  v104 = (uint64_t)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v103 = (uint64_t *)((char *)&v96 - v20);
  v21 = type metadata accessor for EventRow(0);
  __chkstk_darwin(v21);
  v102 = (char *)&v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100003E70(&qword_10015FCC0);
  __chkstk_darwin(v127);
  v128 = (uint64_t)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_100003E70(qword_10015FE00);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v113 = (char *)&v96 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100003E70(&qword_10015FC80);
  v130 = *(_QWORD *)(v25 - 8);
  v131 = v25;
  __chkstk_darwin(v25);
  v112 = (char *)&v96 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = swift_getAssociatedTypeWitness(255, a4);
  v28 = type metadata accessor for Optional(0, v27);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v96 - v31;
  v33 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v30);
  v35 = (char *)&v96 - v34;
  v36 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 216);
  v129 = a1;
  v126 = a3;
  v37 = a3;
  v38 = a4;
  v133[0] = v36(v37, a4);
  v39 = type metadata accessor for Array(0, v27);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v39);
  v41 = v39;
  v42 = v27;
  Collection.first.getter(v41, WitnessTable);
  v43 = v33;
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v32, 1, v27) == 1)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v28);
LABEL_6:
    v94 = 1;
    v91 = v131;
    v93 = v132;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v130 + 56))(v93, v94, 1, v91);
  }
  v44 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
  v45 = v35;
  v44(v35, v32, v27);
  v46 = v38;
  v47 = v38;
  v48 = v126;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v47, v126, v27, &unk_1001191E8, &unk_100119238);
  v50 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v27, AssociatedConformanceWitness);
  if (!v50)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v27);
    goto LABEL_6;
  }
  v51 = v50;
  v52 = objc_msgSend(v50, "city");
  v98 = v43;
  v53 = v52;

  v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
  v96 = v54;

  v55 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v27, AssociatedConformanceWitness);
  v57 = v56;
  v58 = v99;
  (*(void (**)(uint64_t, uint64_t))(v46 + 200))(v48, v46);
  v59 = AssociatedTypeWitness;
  v60 = swift_getAssociatedConformanceWitness(v46, v48, AssociatedTypeWitness, &unk_1001191E8, &unk_100119230);
  v61 = v105;
  sub_10000F1E0(v59, v60, v105);
  v62 = (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v58, v59);
  v63 = v109;
  DateInterval.start.getter(v62);
  (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v61, v108);
  v64 = (int *)v107;
  v65 = v103;
  v66 = (char *)v103 + *(int *)(v107 + 28);
  *((_QWORD *)v66 + 4) = 0;
  *(_OWORD *)v66 = 0u;
  *((_OWORD *)v66 + 1) = 0u;
  v67 = v96;
  *v65 = v97;
  v65[1] = v67;
  v65[2] = v55;
  v65[3] = v57;
  (*(void (**)(char *, char *, uint64_t))(v110 + 32))((char *)v65 + v64[6], v63, v111);
  *((_BYTE *)v65 + v64[8]) = 0;
  *(uint64_t *)((char *)v65 + v64[9]) = 0;
  v68 = v104;
  sub_100028390((uint64_t)v65, v104, type metadata accessor for EventRowViewModel);
  v69 = (uint64_t)v102;
  State.init(wrappedValue:)(v68, v64);
  sub_1000283D4((uint64_t)v65, type metadata accessor for EventRowViewModel);
  v70 = v128;
  sub_100028390(v69, v128, type metadata accessor for EventRow);
  *(_BYTE *)(v70 + *(int *)(v127 + 36)) = 0;
  sub_1000283D4(v69, type metadata accessor for EventRow);
  v71 = v118;
  v72 = v119;
  v73 = *(void (**)(char *, char *, uint64_t))(v119 + 16);
  v111 = v42;
  v74 = v120;
  v73(v118, v117, v120);
  v117 = v45;
  v75 = v125;
  v76 = v123;
  (*(void (**)(char *, uint64_t, uint64_t))(v125 + 16))(v123, v129, v48);
  v77 = *(unsigned __int8 *)(v72 + 80);
  v78 = (v77 + 48) & ~v77;
  v79 = *(unsigned __int8 *)(v75 + 80);
  v80 = (v116 + v79 + v78) & ~v79;
  v81 = (char *)swift_allocObject(&unk_100151250, v80 + v121, v77 | v79 | 7);
  *((_QWORD *)v81 + 2) = v122;
  *((_QWORD *)v81 + 3) = v48;
  *((_QWORD *)v81 + 4) = v124;
  *((_QWORD *)v81 + 5) = v46;
  (*(void (**)(char *, char *, uint64_t))(v72 + 32))(&v81[v78], v71, v74);
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(&v81[v80], v76, v48);
  v82 = sub_10005CAF0();
  v83 = v113;
  v84 = v128;
  View.onTapGesture(count:perform:)(1, sub_100097528, v81, v127, v82);
  swift_release(v81);
  v85 = sub_100008194(v84, &qword_10015FCC0);
  v86 = static Color.primary.getter(v85);
  KeyPath = swift_getKeyPath(&unk_100110130);
  v88 = v114;
  v89 = (uint64_t)v112;
  v90 = v115;
  (*(void (**)(char *, char *, uint64_t))(v114 + 16))(v112, v83, v115);
  v91 = v131;
  v92 = (uint64_t *)(v89 + *(int *)(v131 + 36));
  *v92 = KeyPath;
  v92[1] = v86;
  (*(void (**)(char *, uint64_t))(v88 + 8))(v83, v90);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v117, v111);
  v93 = v132;
  sub_100007A98(v89, v132, &qword_10015FC80);
  v94 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v130 + 56))(v93, v94, 1, v91);
}

void sub_100095DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];

  v12 = type metadata accessor for Optional(0, a4);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v25 - v14;
  v25[0] = a3;
  v25[1] = a4;
  v25[2] = a5;
  v25[3] = a6;
  v16 = type metadata accessor for ArtistEventView(0, (uint64_t)v25);
  v17 = sub_100091C24(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v18 = *(_QWORD *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v15, a2, a4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, a4);
  sub_100041C60((uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  swift_release(v17);
  v19 = sub_100091C24(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v20 = *(_QWORD *)(a1 + 40);
  if (v20)
  {
    v21 = v19;
    swift_retain(*(_QWORD *)(a1 + 40));
    sub_100040C18(8, 10, 0, 3u, v20);
    swift_release(v21);
    swift_release(v20);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 48);
    v23 = type metadata accessor for RemoteViewConfiguration();
    v24 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v22, v23, v24);
    __break(1u);
  }
}

uint64_t sub_100095F48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t result;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t OpaqueTypeConformance2;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char v76[16];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v69 = a1;
  v75 = a6;
  v74 = sub_100003E70(&qword_100161810);
  __chkstk_darwin(v74);
  v73 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100003E70(&qword_100161818);
  v68 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v65 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003E70(&qword_100161820);
  v13 = __chkstk_darwin(v12);
  v70 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v72 = (char *)&v62 - v15;
  v16 = type metadata accessor for ToolbarItemPlacement(0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v62 - v20;
  v22 = sub_100003E70(&qword_100161828);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v62 - v28;
  static ToolbarItemPlacement.navigationBarLeading.getter(v27);
  v63 = a2;
  v77 = a2;
  v78 = a3;
  v64 = a3;
  v30 = v69;
  v66 = a4;
  v67 = a5;
  v79 = a4;
  v80 = a5;
  v81 = v69;
  v31 = sub_100003E70(&qword_100161830);
  v32 = sub_1000971D4();
  ToolbarItem<>.init(placement:content:)(v21, sub_1000971C8, v76, v31, v32);
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v29, v26, v22);
  v33 = *(_QWORD *)(v30 + 40);
  if (v33)
  {
    swift_retain(*(_QWORD *)(v30 + 40));
    v34 = sub_1000A3BEC();
    v36 = v35;
    swift_release(v33);
    if (v36 && (swift_bridgeObjectRelease(), (v34 & 1) != 0))
    {
      v54 = _stringCompareWithSmolCheck(_:_:expecting:)(7368801, 0xE300000000000000, 0x6C61646F6DLL, 0xE500000000000000, 0);
      v37 = swift_bridgeObjectRelease();
      if ((v54 & 1) == 0)
      {
        v55 = sub_100003E70(&qword_100161848);
        v56 = (uint64_t)v70;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v70, 1, 1, v55);
        v57 = sub_100007D40(&qword_100161850, &qword_100161818, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
        v82 = v71;
        v83 = v57;
        OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v82, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
        v49 = (uint64_t)v72;
        static ToolbarContentBuilder.buildIf<A>(_:)(v56, v55, OpaqueTypeConformance2);
        sub_100008194(v56, &qword_100161820);
        goto LABEL_6;
      }
    }
    else
    {
      v37 = swift_bridgeObjectRelease();
    }
    v38 = static ToolbarItemPlacement.navigationBarTrailing.getter(v37);
    __chkstk_darwin(v38);
    v39 = v64;
    *(&v62 - 6) = v63;
    *(&v62 - 5) = v39;
    v40 = v67;
    *(&v62 - 4) = v66;
    *(&v62 - 3) = v40;
    *(&v62 - 2) = v30;
    v41 = sub_100003E70(&qword_100160A78);
    v42 = sub_10007BAA8();
    v43 = v65;
    ToolbarItem<>.init(placement:content:)(v19, sub_100097258, &v62 - 8, v41, v42);
    v44 = sub_100007D40(&qword_100161850, &qword_100161818, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    v46 = (uint64_t)v70;
    v45 = v71;
    static ToolbarContentBuilder.buildBlock<A>(_:)(v43, v71, v44);
    v47 = sub_100003E70(&qword_100161848);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v46, 0, 1, v47);
    v82 = v45;
    v83 = v44;
    v48 = swift_getOpaqueTypeConformance2(&v82, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    v49 = (uint64_t)v72;
    static ToolbarContentBuilder.buildIf<A>(_:)(v46, v47, v48);
    sub_100008194(v46, &qword_100161820);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v43, v45);
LABEL_6:
    v50 = v74;
    v51 = v73;
    v52 = (uint64_t)&v73[*(int *)(v74 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v73, v29, v22);
    sub_100007ADC(v49, v52, &qword_100161820);
    TupleToolbarContent.init(_:)(v51, v50);
    sub_100008194(v49, &qword_100161820);
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v29, v22);
  }
  v59 = *(_QWORD *)(v30 + 48);
  v60 = type metadata accessor for RemoteViewConfiguration();
  v61 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
  result = EnvironmentObject.error()(0, v59, v60, v61);
  __break(1u);
  return result;
}

uint64_t sub_100096484@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  double v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[4];

  v36 = a6;
  v11 = (int *)type metadata accessor for ArtistEventListHeader(0);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = sub_100003E70(&qword_100161830);
  __chkstk_darwin(v35);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37[0] = a2;
  v37[1] = a3;
  v37[2] = a4;
  v37[3] = a5;
  v16 = type metadata accessor for ArtistEventView(0, (uint64_t)v37);
  v17 = sub_100091C24(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v18 = sub_10003FDA0();
  v34 = v19;
  swift_release(v17);
  v20 = sub_100091C24(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10003FDD4((uint64_t)v13 + v11[5]);
  swift_release(v20);
  v21 = sub_100091C24(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v22 = v21 + *(_QWORD *)(*(_QWORD *)v21 + 184);
  v24 = *(_QWORD *)v22;
  v23 = *(_QWORD *)(v22 + 8);
  v25 = *(_BYTE *)(v22 + 16);
  v26 = *(_QWORD *)(v22 + 24);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v26);
  swift_release(v21);
  v27 = v34;
  *v13 = v18;
  v13[1] = v27;
  v28 = (char *)v13 + v11[6];
  *(_QWORD *)v28 = v24;
  *((_QWORD *)v28 + 1) = v23;
  v28[16] = v25;
  *((_QWORD *)v28 + 3) = v26;
  *((_BYTE *)v13 + v11[7]) = 1;
  v29 = (uint64_t *)((char *)v13 + v11[8]);
  *v29 = swift_getKeyPath(&unk_100110100);
  v30 = sub_100003E70(&qword_10015D498);
  swift_storeEnumTagMultiPayload(v29, v30, 0);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 16))
    v31 = 1.0;
  else
    v31 = 0.0;
  sub_100028390((uint64_t)v13, (uint64_t)v15, type metadata accessor for ArtistEventListHeader);
  *(double *)&v15[*(int *)(v35 + 36)] = v31;
  sub_1000283D4((uint64_t)v13, type metadata accessor for ArtistEventListHeader);
  return sub_100007A98((uint64_t)v15, v36, &qword_100161830);
}

uint64_t sub_1000966C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _QWORD v24[2];
  _QWORD v25[4];

  v24[1] = a1;
  v11 = type metadata accessor for DismissAction(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  v15 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)v24 - v16;
  v25[0] = a2;
  v25[1] = a3;
  v25[2] = a4;
  v25[3] = a5;
  type metadata accessor for ArtistEventView(0, (uint64_t)v25);
  sub_10001D870((uint64_t)v17);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
  v18 = *(unsigned __int8 *)(v12 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = swift_allocObject(&unk_100151200, v19 + v13, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v20 + v19, v15, v11);
  v21 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  v22 = static Font.title2.getter(v21);
  result = swift_getKeyPath(&unk_1001100D0);
  *(_WORD *)a6 = 1;
  *(_QWORD *)(a6 + 8) = sub_10000BFA8;
  *(_QWORD *)(a6 + 16) = v20;
  *(_QWORD *)(a6 + 24) = result;
  *(_QWORD *)(a6 + 32) = v22;
  return result;
}

uint64_t sub_10009681C()
{
  return sub_10003F944();
}

uint64_t sub_10009683C(uint64_t a1)
{
  return sub_100041C60(a1);
}

uint64_t sub_10009685C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v25 = a2;
  v26 = a4;
  v28 = a6;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(a1);
  v14 = type metadata accessor for EventView(0, v11, v13, v12);
  v27 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v25 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3);
  v20 = *(unsigned __int8 *)(v9 + 80);
  v21 = (v20 + 48) & ~v20;
  v22 = (char *)swift_allocObject(&unk_1001511B0, v21 + v10, v20 | 7);
  *((_QWORD *)v22 + 2) = v25;
  *((_QWORD *)v22 + 3) = a3;
  *((_QWORD *)v22 + 4) = v26;
  *((_QWORD *)v22 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v22[v21], (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  sub_1000E491C((uint64_t)sub_10005CF68, (uint64_t)v22, (uint64_t)sub_1000E6B24, 0, a3, a5, (uint64_t)v17);
  swift_getWitnessTable(&unk_100113C68, v14);
  sub_1000F257C((uint64_t)v17, v14, (uint64_t)v19);
  v23 = *(void (**)(char *, uint64_t))(v27 + 8);
  v23(v17, v14);
  sub_1000E3B88((uint64_t)v19, v14, v28);
  return ((uint64_t (*)(char *, uint64_t))v23)(v19, v14);
}

uint64_t sub_100096A1C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10003FC64();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100096A48(char *a1)
{
  return sub_10003FD00(*a1);
}

uint64_t sub_100096A6C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD v13[4];

  v13[0] = a1;
  v13[1] = a2;
  v13[2] = a3;
  v13[3] = a4;
  v6 = type metadata accessor for ArtistEventView(0, (uint64_t)v13);
  v7 = sub_100091C24(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v8 = *(_QWORD *)(v7 + *(_QWORD *)(*(_QWORD *)v7 + 168));
  swift_retain(v8);
  swift_release(v7);
  v9 = type metadata accessor for RemoteViewConfiguration();
  v10 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
  result = EnvironmentObject.init()(v9, v10);
  *a5 = v8;
  a5[1] = result;
  a5[2] = v12;
  return result;
}

void sub_100096B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a4;
  v14[3] = a5;
  v6 = type metadata accessor for ArtistEventView(0, (uint64_t)v14);
  v7 = sub_100091C24(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = v7;
    swift_retain(*(_QWORD *)(a1 + 40));
    sub_100040BCC(v10);
    swift_release(v9);
    swift_release(v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 48);
    v12 = type metadata accessor for RemoteViewConfiguration();
    v13 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v11, v12, v13);
    __break(1u);
  }
}

void sub_100096BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];

  v13[0] = a2;
  v13[1] = a3;
  v13[2] = a4;
  v13[3] = a5;
  v6 = type metadata accessor for ArtistEventView(0, (uint64_t)v13);
  v7 = sub_100091C24(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = v7;
    swift_retain(*(_QWORD *)(a1 + 40));
    sub_100040C18(0, 2, 0, 3u, v8);
    swift_release(v9);
    swift_release(v8);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = type metadata accessor for RemoteViewConfiguration();
    v12 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v10, v11, v12);
    __break(1u);
  }
}

uint64_t sub_100096CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  v6 = type metadata accessor for MainActor(0);
  v5[11] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[12] = v7;
  v5[13] = v8;
  return swift_task_switch(sub_100096D18, v7, v8);
}

uint64_t sub_100096D18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 56);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 72);
  v1 = type metadata accessor for ArtistEventView(0, v0 + 16);
  v2 = sub_100091C24(v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v3 = *(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 168));
  *(_QWORD *)(v0 + 112) = v3;
  swift_retain(v3);
  swift_release(v2);
  v4 = (_QWORD *)swift_task_alloc(dword_10015EEAC);
  *(_QWORD *)(v0 + 120) = v4;
  *v4 = v0;
  v4[1] = sub_100096DB0;
  return sub_10003DCB8();
}

uint64_t sub_100096DB0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*v0 + 120));
  swift_release(v2);
  return swift_task_switch(sub_100096E04, *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104));
}

uint64_t sub_100096E04()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100096E38()
{
  return sub_10005D608((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100092BDC);
}

uint64_t sub_100096E44()
{
  return sub_10003F944();
}

uint64_t sub_100096E64(uint64_t a1)
{
  return sub_100041C60(a1);
}

uint64_t sub_100096E84()
{
  return 32;
}

__n128 sub_100096E90(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100096E9C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100096EAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10009685C(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_100096EB8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10003FC64();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100096EE4(char *a1)
{
  return sub_10003FD00(*a1);
}

uint64_t sub_100096F08()
{
  return 32;
}

__n128 sub_100096F14(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100096F24@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v8[0] = v1[2];
  v3 = v8[0];
  v8[1] = v4;
  v8[2] = v5;
  v8[3] = v6;
  type metadata accessor for ArtistEventView(0, (uint64_t)v8);
  return sub_100096A6C(v3, v4, v5, v6, a1);
}

uint64_t sub_100096FA0()
{
  return sub_100096FBC((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_100096B18);
}

uint64_t sub_100096FB0()
{
  return sub_100096FBC((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_100096BD4);
}

uint64_t sub_100096FBC(uint64_t (*a1)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v9[4];

  v3 = *((_QWORD *)v1 + 3);
  v4 = *((_QWORD *)v1 + 4);
  v5 = *((_QWORD *)v1 + 5);
  v9[0] = *((_QWORD *)v1 + 2);
  v2 = v9[0];
  v9[1] = v3;
  v9[2] = v4;
  v9[3] = v5;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArtistEventView(0, (uint64_t)v9) - 8) + 80);
  return a1(&v1[(v6 + 48) & ~v6], v2, v3, v4, v5);
}

uint64_t sub_100097038()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v1[2] = v2;
  v1[3] = v3;
  v1[4] = v4;
  v1[5] = v5;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArtistEventView(0, (uint64_t)(v1 + 2)) - 8) + 80);
  v7 = (uint64_t)v0 + ((v6 + 48) & ~v6);
  v8 = (_QWORD *)swift_task_alloc(dword_100161804);
  v1[6] = v8;
  *v8 = v1;
  v8[1] = sub_100098144;
  return sub_100096CA4(v7, v2, v3, v4, v5);
}

uint64_t sub_1000970D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 48) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10009712C()
{
  return sub_10005D608((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000932B0);
}

double sub_10009713C(double a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v9[0] = v1[2];
  v3 = v9[0];
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArtistEventView(0, (uint64_t)v9) - 8) + 80);
  return sub_10005A468((uint64_t)v1 + ((v7 + 48) & ~v7), v3, v4, v5, v6, a1);
}

uint64_t sub_1000971BC()
{
  return sub_10005D608((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100095F48);
}

uint64_t sub_1000971C8()
{
  return sub_10005D608((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100096484);
}

unint64_t sub_1000971D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100161838;
  if (!qword_100161838)
  {
    v1 = sub_1000034AC(&qword_100161830);
    sub_100003B3C(&qword_100161840, type metadata accessor for ArtistEventListHeader, (uint64_t)&unk_100112E28);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100161838);
  }
  return result;
}

uint64_t sub_100097258@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000966C0(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_100097268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for DismissAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000972D8()
{
  return sub_10005D608((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100093688);
}

uint64_t sub_1000972E4()
{
  return sub_10005D608((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100093904);
}

uint64_t sub_1000972F0()
{
  return sub_10005D608((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100094FB0);
}

unint64_t sub_1000972FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100161860;
  if (!qword_100161860)
  {
    v1 = sub_1000034AC(&qword_1001617E8);
    sub_10005CA44();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100161860);
  }
  return result;
}

uint64_t sub_100097364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  v5 = *((_QWORD *)v2 + 3);
  v6 = *((_QWORD *)v2 + 4);
  v7 = *((_QWORD *)v2 + 5);
  v10[0] = *((_QWORD *)v2 + 2);
  v10[1] = v5;
  v10[2] = v6;
  v10[3] = v7;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArtistEventView(0, (uint64_t)v10) - 8) + 80);
  return sub_100095524(a1, &v2[(v8 + 48) & ~v8], v5, v7, a2);
}

uint64_t sub_1000973EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 40);
  v19 = *(_QWORD *)(v0 + 16);
  v20 = *(_OWORD *)(v0 + 24);
  v18 = v20;
  v21 = v1;
  v2 = type metadata accessor for ArtistEventView(0, (uint64_t)&v19);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 48) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = *(_QWORD *)(v18 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  sub_10000E138(*(_QWORD *)(v0 + v5), *(_QWORD *)(v0 + v5 + 8));
  swift_release(*(_QWORD *)(v0 + v5 + 32));
  swift_release(*(_QWORD *)(v0 + v5 + 40));
  v10 = (_QWORD *)(v0 + v5 + *(int *)(v2 + 60));
  v11 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    v13 = swift_release(*v10);
  }
  v14 = v4 | v8 | 7;
  v15 = (v5 + v6 + v8) & ~v8;
  v16 = v15 + v9;
  (*(void (**)(uint64_t, uint64_t, __n128))(v7 + 8))(v0 + v15, v18, v13);
  return swift_deallocObject(v0, v16, v14);
}

void sub_100097528()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v8[0] = v0[2];
  v1 = v8[0];
  v8[1] = v2;
  v8[2] = v3;
  v8[3] = v4;
  v5 = *(_QWORD *)(type metadata accessor for ArtistEventView(0, (uint64_t)v8) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  sub_100095DA8((uint64_t)v0 + v6, (uint64_t)v0 + ((v6 + *(_QWORD *)(v5 + 64) + v7) & ~v7), v1, v2, v3, v4);
}

double sub_1000975C4(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

double sub_1000975E4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double result;

  if (a1)
  {
    swift_bridgeObjectRetain(a1);
    sub_100005FA0(a2, a3);
    swift_retain(a6);
    *(_QWORD *)&result = swift_retain(a5).n128_u64[0];
  }
  return result;
}

uint64_t sub_100097638(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 144);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), v4);
  return a1;
}

double sub_10009769C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double result;

  if (a1)
  {
    swift_bridgeObjectRelease();
    sub_100005CE4(a2, a3);
    swift_release(a5);
    *(_QWORD *)&result = swift_release(a6).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000976F4()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[2];

  v1 = *(_OWORD *)(v0 + 32);
  v11[0] = *(_OWORD *)(v0 + 16);
  v11[1] = v1;
  v2 = type metadata accessor for ArtistEventView(0, (uint64_t)v11);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 48) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  sub_10000E138(*(_QWORD *)(v0 + v5), *(_QWORD *)(v0 + v5 + 8));
  swift_release(*(_QWORD *)(v0 + v5 + 32));
  swift_release(*(_QWORD *)(v0 + v5 + 40));
  v7 = (_QWORD *)(v0 + v5 + *(int *)(v2 + 60));
  v8 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  return swift_deallocObject(v0, v5 + v6, v4 | 7);
}

double sub_1000977D0(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];

  v6 = v2[3];
  v7 = v2[4];
  v8 = v2[5];
  v11[0] = v2[2];
  v5 = v11[0];
  v11[1] = v6;
  v11[2] = v7;
  v11[3] = v8;
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArtistEventView(0, (uint64_t)v11) - 8) + 80);
  return sub_100094B6C(a1, a2, (uint64_t)v2 + ((v9 + 48) & ~v9), v5, v6, v7, v8);
}

uint64_t sub_100097858()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v19[2];

  v1 = *(_OWORD *)(v0 + 32);
  v19[0] = *(_OWORD *)(v0 + 16);
  v19[1] = v1;
  v2 = type metadata accessor for ArtistEventView(0, (uint64_t)v19);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 48) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = type metadata accessor for ArtistPromotionalAssets(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  sub_10000E138(*(_QWORD *)(v0 + v5), *(_QWORD *)(v0 + v5 + 8));
  swift_release(*(_QWORD *)(v0 + v5 + 32));
  swift_release(*(_QWORD *)(v0 + v5 + 40));
  v11 = (_QWORD *)(v0 + v5 + *(int *)(v2 + 60));
  v12 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    v14 = swift_release(*v11);
  }
  v15 = v4 | v9 | 7;
  v16 = (v5 + v6 + v9) & ~v9;
  v17 = v16 + v10;
  (*(void (**)(uint64_t, uint64_t, __n128))(v8 + 8))(v0 + v16, v7, v14);
  return swift_deallocObject(v0, v17, v15);
}

void sub_100097984()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v9[0] = v0[2];
  v1 = v9[0];
  v9[1] = v2;
  v9[2] = v3;
  v9[3] = v4;
  v5 = *(_QWORD *)(type metadata accessor for ArtistEventView(0, (uint64_t)v9) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArtistPromotionalAssets(0) - 8) + 80);
  sub_1000949C8((uint64_t)v0 + v6, (uint64_t)v0 + ((v6 + v7 + v8) & ~v8), v1, v2, v3, v4);
}

uint64_t sub_100097A20()
{
  return sub_100014600(&qword_1001618A8, &qword_1001618B0, (void (*)(void))sub_100097A3C);
}

unint64_t sub_100097A3C()
{
  unint64_t result;

  result = qword_1001618B8;
  if (!qword_1001618B8)
  {
    result = swift_getWitnessTable(&unk_10011165C, &type metadata for PromotionalAssetsEntryView);
    atomic_store(result, &qword_1001618B8);
  }
  return result;
}

uint64_t sub_100097A80()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[2];

  v1 = *(_OWORD *)(v0 + 48);
  v12[0] = *(_OWORD *)(v0 + 32);
  v12[1] = v1;
  v2 = type metadata accessor for ArtistEventView(0, (uint64_t)v12);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 64) & ~v4;
  v6 = (*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v7 = (uint64_t *)(v0 + v5);
  sub_10000E138(*v7, v7[1]);
  swift_release(v7[4]);
  swift_release(v7[5]);
  v8 = (uint64_t *)((char *)v7 + *(int *)(v2 + 60));
  v9 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  if (*(_QWORD *)(v0 + v6 + 8) >= 2uLL)
    swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v6 + 16, v4 | 7);
}

uint64_t sub_100097B84(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v3 = v1[4];
  v4 = v1[5];
  v6 = v1[6];
  v5 = v1[7];
  v2[2] = v3;
  v2[3] = v4;
  v2[4] = v6;
  v2[5] = v5;
  v7 = *(_QWORD *)(type metadata accessor for ArtistEventView(0, (uint64_t)(v2 + 2)) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v1[2];
  v10 = v1[3];
  v11 = (uint64_t)v1 + v8;
  v12 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  v13 = *v12;
  v14 = v12[1];
  v15 = (_QWORD *)swift_task_alloc(dword_1001618C4);
  v2[6] = v15;
  *v15 = v2;
  v15[1] = sub_100097C64;
  return sub_100094D1C(a1, v9, v10, v11, v13, v14, v3, v4);
}

uint64_t sub_100097C64()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100097CAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  ValueMetadata *AssociatedTypeWitness;
  uint64_t v45;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v48;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  v42 = type metadata accessor for NavigationPath(255);
  v3 = sub_1000034AC(&qword_1001617E0);
  sub_1000034AC(&qword_10015FC78);
  v4 = type metadata accessor for Array(255, v1);
  v5 = *(_QWORD *)(v2 + 16);
  v43 = v4;
  AssociatedTypeWitness = (ValueMetadata *)swift_getAssociatedTypeWitness(255, v5);
  v45 = sub_1000034AC(&qword_1001617E8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v1, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  type metadata accessor for ForEach(255, &v43);
  v6 = type metadata accessor for _ConditionalContent(255);
  v7 = type metadata accessor for Group(255, v6);
  v8 = type metadata accessor for ModifiedContent(255, v7, &type metadata for _PaddingLayout);
  v9 = type metadata accessor for ModifiedContent(255, v8, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v3, v9, 0, 0);
  v11 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v12 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v11);
  v13 = type metadata accessor for VStack(255, v11, v12);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v13);
  v15 = type metadata accessor for LazyVGrid(255, v13, v14);
  v16 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v15);
  v18 = type metadata accessor for ObservableScrollView(255, v15, v16, v17);
  v19 = swift_getWitnessTable(&unk_1001103F0, v18);
  v43 = v18;
  AssociatedTypeWitness = (ValueMetadata *)v19;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v43, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v21 = sub_1000034AC(&qword_1001617F0);
  v43 = v18;
  AssociatedTypeWitness = (ValueMetadata *)v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v43, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v23 = sub_100007D40(&qword_1001617F8, &qword_1001617F0, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v43 = OpaqueTypeMetadata2;
  AssociatedTypeWitness = (ValueMetadata *)v21;
  v45 = OpaqueTypeConformance2;
  WitnessTable = v23;
  v24 = swift_getOpaqueTypeMetadata2(255, &v43, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v43 = OpaqueTypeMetadata2;
  AssociatedTypeWitness = (ValueMetadata *)v21;
  v45 = OpaqueTypeConformance2;
  WitnessTable = v23;
  v25 = swift_getOpaqueTypeConformance2(&v43, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v26 = type metadata accessor for NavigationStack(255, v42, v24, v25);
  v28 = type metadata accessor for EventView(255, v1, v2, v27);
  v29 = swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v26);
  v30 = swift_getWitnessTable(&unk_100113C68, v28);
  v43 = v26;
  AssociatedTypeWitness = (ValueMetadata *)v1;
  v45 = v28;
  WitnessTable = v29;
  AssociatedConformanceWitness = v5;
  v48 = v30;
  v31 = swift_getOpaqueTypeMetadata2(255, &v43, &opaque type descriptor for <<opaque return type of View.sheet<A, B>(item:onDismiss:content:)>>, 0);
  v43 = v26;
  AssociatedTypeWitness = (ValueMetadata *)v1;
  v45 = v28;
  WitnessTable = v29;
  AssociatedConformanceWitness = v5;
  v48 = v30;
  v32 = swift_getOpaqueTypeConformance2(&v43, &opaque type descriptor for <<opaque return type of View.sheet<A, B>(item:onDismiss:content:)>>, 1);
  v33 = sub_10001DF38();
  v43 = v31;
  AssociatedTypeWitness = &type metadata for PromotionalAssetsContentView;
  v45 = v32;
  WitnessTable = v33;
  v34 = swift_getOpaqueTypeMetadata2(255, &v43, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v35 = type metadata accessor for ModifiedContent(255, v34, &type metadata for _AppearanceActionModifier);
  v36 = type metadata accessor for ModifiedContent(255, v35, &type metadata for _AppearanceActionModifier);
  v37 = type metadata accessor for _TaskModifier(255);
  v38 = type metadata accessor for ModifiedContent(255, v36, v37);
  v39 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v40 = type metadata accessor for ModifiedContent(255, v38, v39);
  v43 = v31;
  AssociatedTypeWitness = &type metadata for PromotionalAssetsContentView;
  v45 = v32;
  WitnessTable = v33;
  swift_getOpaqueTypeConformance2(&v43, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v35);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v36);
  sub_100003B3C(&qword_10015D458, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v38);
  sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v40);
}

uint64_t sub_100098148(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 1, &v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000981B8()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for ConditionalValue.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConditionalValue.Storage);
}

_QWORD *sub_100098200(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t sub_10009822C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_100098234(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

_QWORD *sub_100098274(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release(v4);
  return a1;
}

uint64_t type metadata accessor for ConditionalValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConditionalValue);
}

uint64_t sub_1000982B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a2, a3, a4, a6, a5);
}

uint64_t sub_1000982CC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;

  KeyPath = swift_getKeyPath(&unk_100110350);
  v2 = swift_getKeyPath(&unk_100110378);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_100098330()
{
  return sub_100098358((uint64_t)&unk_100110308, (uint64_t)&unk_100110330);
}

uint64_t sub_100098344()
{
  return sub_100098358((uint64_t)&unk_1001102C0, (uint64_t)&unk_1001102E8);
}

uint64_t sub_100098358(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_1000983C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = sub_100003E70(&qword_10015EEC0);
  v3[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  v3[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[11] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[12] = swift_task_alloc(v7);
  v3[13] = swift_task_alloc(v7);
  v8 = type metadata accessor for EventsError(0);
  v3[14] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[15] = v9;
  v3[16] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_100003E70(&qword_10015E3B0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[17] = swift_task_alloc(v10);
  v3[18] = swift_task_alloc(v10);
  v11 = type metadata accessor for MainActor(0);
  v3[19] = v11;
  v3[20] = static MainActor.shared.getter(v11);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  v3[21] = v12;
  v3[22] = v13;
  return swift_task_switch(sub_1000984EC, v12, v13);
}

uint64_t sub_1000984EC()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_100098C68();
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to static Artist.schedule(id:) + 1));
  v0[23] = v1;
  *v1 = v0;
  v1[1] = sub_100098548;
  return static Artist.schedule(id:)(v0[18], v0[6], v0[7]);
}

uint64_t sub_100098548()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000986AC;
  else
    v4 = sub_1000985A8;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 168), *(_QWORD *)(v2 + 176));
}

uint64_t sub_1000985A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 160));
  v4 = sub_100003E70(&qword_10015E3B8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 0, 1, v4);
  KeyPath = swift_getKeyPath(&unk_100110350);
  v6 = swift_getKeyPath(&unk_100110378);
  sub_1000991F0(v2, v1);
  swift_retain(v3);
  static Published.subscript.setter(v1, v3, KeyPath, v6);
  sub_100008194(v2, &qword_10015E3B0);
  v7 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 128);
  v10 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000986AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 192);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  swift_errorRetain(v1);
  v4 = sub_100003E70(&qword_10015D990);
  if (swift_dynamicCast(v2, v0 + 16, v4, v3, 0))
  {
    v5 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 88))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
    *(_DWORD *)(v0 + 224) = v5;
    if (v5 == enum case for EventsError.missingData(_:))
    {
      v6 = swift_errorRelease(*(_QWORD *)(v0 + 192));
      *(_QWORD *)(v0 + 200) = static MainActor.shared.getter(v6);
      v7 = (_QWORD *)swift_task_alloc(dword_10015FA94);
      *(_QWORD *)(v0 + 208) = v7;
      *v7 = v0;
      v7[1] = sub_100098860;
      return sub_100050AD8(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
    }
    v10 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 128);
    v11 = *(_QWORD *)(v0 + 112);
    swift_release(*(_QWORD *)(v0 + 160));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 160));
  }
  v12 = *(_QWORD *)(v0 + 192);
  v13 = *(_QWORD *)(v0 + 64);
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  KeyPath = swift_getKeyPath(&unk_1001102C0);
  v15 = swift_getKeyPath(&unk_1001102E8);
  *(_QWORD *)(v0 + 24) = v12;
  swift_retain(v13);
  static Published.subscript.setter(v0 + 24, v13, KeyPath, v15);
  v16 = *(_QWORD *)(v0 + 136);
  v17 = *(_QWORD *)(v0 + 128);
  v19 = *(_QWORD *)(v0 + 96);
  v18 = *(_QWORD *)(v0 + 104);
  v20 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100098860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v2);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  if (v0)
    v6 = sub_100098AF4;
  else
    v6 = sub_1000988E8;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_1000988E8()
{
  _QWORD *v0;

  swift_release(v0[25]);
  return swift_task_switch(sub_100098920, v0[21], v0[22]);
}

uint64_t sub_100098920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 160));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = *(unsigned int *)(v0 + 224);
    v5 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 120);
    v7 = *(_QWORD *)(v0 + 64);
    sub_100008194(*(_QWORD *)(v0 + 72), &qword_10015EEC0);
    v8 = sub_100099240();
    v9 = swift_allocError(v5, v8, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v10, v4, v5);
    KeyPath = swift_getKeyPath(&unk_1001102C0);
    v12 = swift_getKeyPath(&unk_1001102E8);
    *(_QWORD *)(v0 + 32) = v9;
    swift_retain(v7);
    static Published.subscript.setter(v0 + 32, v7, KeyPath, v12);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 96);
    v13 = *(_QWORD *)(v0 + 104);
    v15 = *(_QWORD *)(v0 + 64);
    sub_10003F600(*(_QWORD *)(v0 + 72), v13);
    sub_10003F644(v13, v14);
    v16 = sub_100003E70(&qword_10015EED0);
    swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    v17 = sub_1000256BC(v14, (uint64_t)&_swiftEmptyArrayStorage);
    v18 = swift_getKeyPath(&unk_100110308);
    v19 = swift_getKeyPath(&unk_100110330);
    *(_QWORD *)(v0 + 40) = v17;
    swift_retain(v15);
    static Published.subscript.setter(v0 + 40, v15, v18, v19);
    sub_10003F6C8(v13);
  }
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  v20 = *(_QWORD *)(v0 + 136);
  v21 = *(_QWORD *)(v0 + 128);
  v23 = *(_QWORD *)(v0 + 96);
  v22 = *(_QWORD *)(v0 + 104);
  v24 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100098AF4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[27];
  swift_release(v0[25]);
  swift_errorRelease(v1);
  return swift_task_switch(sub_100098B38, v0[21], v0[22]);
}

uint64_t sub_100098B38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 160));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v1);
  v4 = *(unsigned int *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 64);
  sub_100008194(*(_QWORD *)(v0 + 72), &qword_10015EEC0);
  v8 = sub_100099240();
  v9 = swift_allocError(v5, v8, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v10, v4, v5);
  KeyPath = swift_getKeyPath(&unk_1001102C0);
  v12 = swift_getKeyPath(&unk_1001102E8);
  *(_QWORD *)(v0 + 32) = v9;
  swift_retain(v7);
  static Published.subscript.setter(v0 + 32, v7, KeyPath, v12);
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  v13 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 128);
  v16 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 104);
  v17 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100098C68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = sub_100003E70(&qword_10015E3B0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v15 - v5;
  v7 = sub_100003E70(&qword_10015E3B8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  KeyPath = swift_getKeyPath(&unk_100110350);
  v9 = swift_getKeyPath(&unk_100110378);
  sub_1000991F0((uint64_t)v6, (uint64_t)v4);
  swift_retain(v0);
  static Published.subscript.setter(v4, v0, KeyPath, v9);
  sub_100008194((uint64_t)v6, &qword_10015E3B0);
  v10 = swift_getKeyPath(&unk_100110308);
  v11 = swift_getKeyPath(&unk_100110330);
  v16 = 0;
  swift_retain(v0);
  static Published.subscript.setter(&v16, v0, v10, v11);
  v12 = swift_getKeyPath(&unk_1001102C0);
  v13 = swift_getKeyPath(&unk_1001102E8);
  v16 = 0;
  swift_retain(v0);
  return static Published.subscript.setter(&v16, v0, v12, v13);
}

uint64_t sub_100098DEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC16EventViewService16ArtistController__schedule;
  v2 = sub_100003E70(&qword_100161AC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC16EventViewService16ArtistController__error;
  v4 = sub_100003E70(&qword_10015D118);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC16EventViewService16ArtistController__emptyScheduleViewModel;
  v6 = sub_100003E70(&qword_100161AC8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100098E98()
{
  return type metadata accessor for ArtistController(0);
}

uint64_t type metadata accessor for ArtistController(uint64_t a1)
{
  uint64_t result;

  result = qword_100161A10;
  if (!qword_100161A10)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ArtistController);
  return result;
}

void sub_100098EDC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_1000034F0(319, &qword_100161A20, &qword_10015E3B0);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000034F0(319, &qword_10015CFD8, (uint64_t *)&unk_10015CFE0);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000034F0(319, &qword_100161A28, (uint64_t *)&unk_100161A30);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 3, v8, a1 + 80);
      }
    }
  }
}

uint64_t sub_100098FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = sub_100003E70(&qword_100161AC8);
  v27 = *(_QWORD *)(v1 - 8);
  v28 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003E70(&qword_10015D118);
  v25 = *(_QWORD *)(v4 - 8);
  v26 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_100161AC0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003E70(&qword_10015E3B0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v24 - v15;
  v17 = v0 + OBJC_IVAR____TtC16EventViewService16ArtistController__schedule;
  v18 = sub_100003E70(&qword_10015E3B8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v16, 1, 1, v18);
  sub_1000991F0((uint64_t)v16, (uint64_t)v14);
  Published.init(initialValue:)(v14, v11);
  sub_100008194((uint64_t)v16, &qword_10015E3B0);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v17, v10, v7);
  v19 = v0 + OBJC_IVAR____TtC16EventViewService16ArtistController__error;
  v29 = 0;
  v20 = sub_100003E70((uint64_t *)&unk_10015CFE0);
  Published.init(initialValue:)(&v29, v20);
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v19, v6, v26);
  v21 = v0 + OBJC_IVAR____TtC16EventViewService16ArtistController__emptyScheduleViewModel;
  v29 = 0;
  v22 = sub_100003E70((uint64_t *)&unk_100161A30);
  Published.init(initialValue:)(&v29, v22);
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v21, v3, v28);
  return v0;
}

uint64_t sub_1000991F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015E3B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100099240()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EEC8;
  if (!qword_10015EEC8)
  {
    v1 = type metadata accessor for EventsError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for EventsError, v1);
    atomic_store(result, (unint64_t *)&qword_10015EEC8);
  }
  return result;
}

double sub_100099298@<D0>(char a1@<W0>, char a2@<W1>, void (*a3)(__n128)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  __n128 v11;
  double result;

  *(_BYTE *)a9 = a1;
  *(_BYTE *)(a9 + 1) = a2;
  *(_QWORD *)(a9 + 8) = a5;
  *(_QWORD *)(a9 + 16) = a6;
  type metadata accessor for ObservableScrollView(0, a7, a8, a4);
  v11 = swift_retain(a6);
  a3(v11);
  *(_QWORD *)&result = swift_release(a6).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for ObservableScrollView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObservableScrollView);
}

uint64_t sub_10009930C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[1] = &unk_1001103C8;
  v4[2] = (char *)&value witness table for () + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 32);
    return 0;
  }
  return result;
}

_QWORD *sub_1000993A0(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 24) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v9);
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    a1[1] = *((_BYTE *)a2 + 1);
    v10 = (_QWORD *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + 9) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = ((unint64_t)v10 + v6 + 16) & ~v6;
    v14 = ((unint64_t)v11 + v6 + 16) & ~v6;
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain(v12);
    v15(v13, v14, v4);
  }
  return v3;
}

uint64_t sub_100099484(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = (a1 + 9) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v3 + 8));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v3 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_BYTE *sub_1000994CC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = (_QWORD *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  v6 = v5[1];
  *v4 = *v5;
  v4[1] = v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v4 + v9 + 16) & ~v9;
  v11 = ((unint64_t)v5 + v9 + 16) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_retain(v6);
  v12(v10, v11, v7);
  return a1;
}

_BYTE *sub_10009955C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  v5 = (_QWORD *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  v7 = v6[1];
  v8 = v5[1];
  *v5 = *v6;
  v5[1] = v7;
  swift_retain(v7);
  swift_release(v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))(((unint64_t)v5 + *(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

_BYTE *sub_1000995F0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = (_OWORD *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_OWORD *)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_BYTE *sub_100099660(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  unint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  a1[1] = a2[1];
  v5 = (unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8;
  v6 = (_OWORD *)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  v7 = *(_QWORD *)(v5 + 8);
  *(_OWORD *)v5 = *v6;
  swift_release(v7);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))((*(unsigned __int8 *)(v8 + 80) + 16 + v5) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_1000996E4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 24) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = (unint64_t *)((a1 + 9) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v7 + 16) & ~v7);
      v16 = *v15;
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1000997B8 + 4 * byte_1001103A0[(v9 - 1)]))();
}

void sub_100099830(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_100000004;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_100099A30(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10011A490, 1);
}

void sub_100099A64(uint64_t a1@<X0>, double *a2@<X8>)
{
  swift_getWitnessTable(&unk_100110468, a1);
  *a2 = sub_100043948();
}

uint64_t sub_100099AAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[16];
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD v53[5];

  v4 = v3;
  v44 = a3;
  v5 = *(_QWORD *)(a1 + 24);
  v36 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for ObservableScrollView.OffsetPreferenceKey(255, v36, v5, a2);
  WitnessTable = swift_getWitnessTable(&unk_100110484, v6);
  v38 = v6;
  v40 = WitnessTable;
  v9 = type metadata accessor for SizeModifier(255, v6, WitnessTable, v8);
  v10 = type metadata accessor for ModifiedContent(255, v36, v9);
  v53[2] = v5;
  v53[3] = swift_getWitnessTable(&unk_10010F810, v9);
  v35 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
  v11 = type metadata accessor for ScrollView(0, v10, v35);
  v37 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - v12;
  v14 = sub_1000034AC(&qword_100161B58);
  v15 = type metadata accessor for ModifiedContent(0, v11, v14);
  v43 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v35 - v16;
  v39 = sub_10009A0A0();
  v41 = type metadata accessor for _PreferenceActionModifier(255, v6, WitnessTable, v39);
  v18 = type metadata accessor for ModifiedContent(0, v15, v41);
  v42 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v35 - v22;
  v24 = v4[1];
  v46 = v36;
  v47 = v5;
  v48 = v4;
  ScrollView.init(_:showsIndicators:content:)(*v4, v24, sub_10009A0E4, v45, v10, v35);
  v53[0] = 0x69566C6C6F726373;
  v53[1] = 0xEA00000000007765;
  v25 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v11);
  View.coordinateSpace<A>(name:)(v53, v11, &type metadata for String, v25, &protocol witness table for String);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v11);
  v27 = *((_QWORD *)v4 + 1);
  v26 = *((_QWORD *)v4 + 2);
  v28 = swift_allocObject(&unk_100151520, 32, 7);
  *(_QWORD *)(v28 + 16) = v27;
  *(_QWORD *)(v28 + 24) = v26;
  v29 = sub_10009A138();
  v51 = v25;
  v52 = v29;
  swift_retain(v26);
  v30 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  View.onPreferenceChange<A>(_:perform:)(v38, sub_10009A114, v28, v15, v38, v30, v40, v39);
  v31 = swift_release(v28);
  (*(void (**)(char *, uint64_t, __n128))(v43 + 8))(v17, v15, v31);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceActionModifier<A>, v41);
  v49 = v30;
  v50 = v32;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  sub_1000F257C((uint64_t)v21, v18, (uint64_t)v23);
  v33 = *(void (**)(char *, uint64_t))(v42 + 8);
  v33(v21, v18);
  sub_1000E3B88((uint64_t)v23, v18, v44);
  return ((uint64_t (*)(char *, uint64_t))v33)(v23, v18);
}

uint64_t sub_100099E44@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t WitnessTable;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];

  v25 = a3;
  v5 = type metadata accessor for CoordinateSpace(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&WitnessTable - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for ObservableScrollView.OffsetPreferenceKey(255, a1, a2, v9);
  WitnessTable = swift_getWitnessTable(&unk_100110484, v10);
  v23 = type metadata accessor for SizeModifier(255, v10, WitnessTable, v11);
  v12 = type metadata accessor for ModifiedContent(0, a1, v23);
  v24 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&WitnessTable - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&WitnessTable - v16;
  type metadata accessor for ObservableScrollView(0, a1, a2, v18);
  v28[0] = 0x69566C6C6F726373;
  v28[1] = 0xEA00000000007765;
  AnyHashable.init<A>(_:)(v8, v28, &type metadata for String, &protocol witness table for String);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for CoordinateSpace.named(_:), v5);
  sub_10008B0F0(v10, (uint64_t)v8, (uint64_t)sub_10009A088, 0, a1, v10, a2, WitnessTable, (uint64_t)v15);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  v19 = swift_getWitnessTable(&unk_10010F810, v23);
  v26 = a2;
  v27 = v19;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  sub_1000F257C((uint64_t)v15, v12, (uint64_t)v17);
  v20 = *(void (**)(char *, uint64_t))(v24 + 8);
  v20(v15, v12);
  sub_1000E3B88((uint64_t)v17, v12, v25);
  return ((uint64_t (*)(char *, uint64_t))v20)(v17, v12);
}

void sub_10009A088(double *a1@<X8>, double a2@<D1>)
{
  *a1 = a2;
}

uint64_t type metadata accessor for ObservableScrollView.OffsetPreferenceKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObservableScrollView.OffsetPreferenceKey);
}

unint64_t sub_10009A0A0()
{
  unint64_t result;

  result = qword_100161B60;
  if (!qword_100161B60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100161B60);
  }
  return result;
}

uint64_t sub_10009A0E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100099E44(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10009A0F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10009A114(double *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(double))(v1 + 16))(*a1);
}

unint64_t sub_10009A138()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100161B68[0];
  if (!qword_100161B68[0])
  {
    v1 = sub_1000034AC(&qword_100161B58);
    result = swift_getWitnessTable(&protocol conformance descriptor for _CoordinateSpaceModifier<A>, v1);
    atomic_store(result, qword_100161B68);
  }
  return result;
}

uint64_t sub_10009A184(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a1;
  v5 = type metadata accessor for ObservableScrollView.OffsetPreferenceKey(255, *a1, a1[1], a4);
  WitnessTable = swift_getWitnessTable(&unk_100110484, v5);
  v8 = type metadata accessor for SizeModifier(255, v5, WitnessTable, v7);
  v9 = type metadata accessor for ModifiedContent(255, v4, v8);
  swift_getWitnessTable(&unk_10010F810, v8);
  v10 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
  v11 = type metadata accessor for ScrollView(255, v9, v10);
  v12 = sub_1000034AC(&qword_100161B58);
  v13 = type metadata accessor for ModifiedContent(255, v11, v12);
  v14 = sub_10009A0A0();
  v15 = type metadata accessor for _PreferenceActionModifier(255, v5, WitnessTable, v14);
  v16 = type metadata accessor for ModifiedContent(255, v13, v15);
  swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v11);
  sub_10009A138();
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  swift_getWitnessTable(&protocol conformance descriptor for _PreferenceActionModifier<A>, v15);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
}

uint64_t sub_10009A2EC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&unk_100110484, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009A318(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100110510;
  v4[1] = &unk_100110510;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 4, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

double sub_10009A3A4()
{
  uint64_t v0;
  double v2;

  v0 = sub_100003E70(&qword_100160070);
  Binding.wrappedValue.getter(v0);
  return v2;
}

double sub_10009A3F0()
{
  uint64_t v0;
  double v2;

  v0 = sub_100003E70(&qword_100160070);
  Binding.wrappedValue.getter(v0);
  return v2;
}

uint64_t sub_10009A43C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = type metadata accessor for Optional(0, v4);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v12 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v12 - v7, (uint64_t)v1 + *(_QWORD *)(v3 + 120), v5);
  v9 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v10 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 1, 1, v10);
  }
  else
  {
    if (qword_10015CE78 != -1)
      swift_once(&qword_10015CE78, sub_1000453E0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 + 88) + 40))(qword_10016F678, qword_10016F678, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v8, v4);
  }
}

id sub_10009A580()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v10;
  id v11;
  uint64_t v12;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  v3 = type metadata accessor for Optional(0, v2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v12 - v5, (uint64_t)v0 + *(_QWORD *)(v1 + 120), v3);
  v7 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 88) + 16))(v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v6, v2);
    if (v8)
      return (id)v8;
  }
  v10 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  v11 = objc_msgSend(v10, "CGColor");

  return v11;
}

double sub_10009A6B8()
{
  double v0;
  double result;

  v0 = sub_10009A3A4();
  result = 0.0;
  if (v0 <= 0.0)
    return sub_10009A3A4() * 0.125;
  return result;
}

double sub_10009A6E8()
{
  if (sub_10009A3A4() <= 0.0)
    return sub_10009A3A4();
  else
    return 0.0;
}

double sub_10009A710()
{
  double v0;
  double result;

  v0 = sub_10009A3A4();
  result = 1.0;
  if (v0 > 0.0)
    return sub_10009A3A4() * 0.002 + 1.0;
  return result;
}

BOOL sub_10009A74C()
{
  double v0;

  v0 = -sub_10009A3A4();
  return sub_10009A3F0() >= v0;
}

uint64_t sub_10009A778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  uint64_t v8;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v17 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v18 = *(_QWORD *)v17;
  *(_QWORD *)(v17 + 64) = a1;
  v19 = v17 + *(_QWORD *)(v18 + 120);
  v20 = type metadata accessor for Optional(0, *(_QWORD *)(v18 + 80));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19, a2, v20);
  *(_QWORD *)(v17 + 16) = a3;
  *(_QWORD *)(v17 + 24) = a4;
  *(double *)(v17 + 32) = a7;
  *(_QWORD *)(v17 + 40) = a5;
  *(_QWORD *)(v17 + 48) = a6;
  *(double *)(v17 + 56) = a8;
  return v17;
}

_QWORD *sub_10009A82C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = *v0;
  v2 = v0[2];
  swift_release(v0[3]);
  swift_release(v2);
  v3 = v0[5];
  swift_release(v0[6]);
  swift_release(v3);
  v4 = (char *)v0 + *(_QWORD *)(*v0 + 120);
  v5 = type metadata accessor for Optional(0, *(_QWORD *)(v1 + 80));
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return v0;
}

uint64_t sub_10009A8A0()
{
  uint64_t v0;

  sub_10009A82C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for HeroImageModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HeroImageModel);
}

double sub_10009A8D0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100110618);
  v4 = v0;
  v2 = sub_100003B3C(&qword_100161D40, type metadata accessor for SetlistSongRowViewModel, (uint64_t)&unk_1001105F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v0 + 32)).n128_u64[0];
  return result;
}

double sub_10009A958@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100110618);
  v8 = v3;
  v5 = sub_100003B3C(&qword_100161D40, type metadata accessor for SetlistSongRowViewModel, (uint64_t)&unk_1001105F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 32);
  *a2 = v6;
  *(_QWORD *)&result = swift_retain(v6).n128_u64[0];
  return result;
}

double sub_10009A9E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100110618);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100003B3C(&qword_100161D40, type metadata accessor for SetlistSongRowViewModel, (uint64_t)&unk_1001105F8);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10009B3C0, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t sub_10009AAA0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  _QWORD v16[5];

  v3 = v1[8];
  v4 = v1[9];
  sub_100008170(v1 + 5, v3);
  v5 = *(void (**)(uint64_t, uint64_t))(v4 + 72);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4);
  v7 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v16[-1] - v9;
  v5(v3, v4);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v12 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    v16[3] = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v3, AssociatedTypeWitness, &unk_10011B208, &unk_10011B228);
    v16[4] = AssociatedConformanceWitness;
    sub_100007D80(v16);
    (*(void (**)(void))(v11 + 32))();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(100, 100, AssociatedTypeWitness, AssociatedConformanceWitness);
    return sub_1000055A8(v16);
  }
}

BOOL sub_10009AC2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 (*v8)(uint64_t, uint64_t, __n128);
  __n128 v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, __n128);
  __n128 v18;
  char v19;
  uint64_t v20;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_100110618);
  v20 = v0;
  v3 = sub_100003B3C(&qword_100161D40, type metadata accessor for SetlistSongRowViewModel, (uint64_t)&unk_1001105F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, KeyPath, v3);
  swift_release(KeyPath);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD **)(v4 + 200);
  v6 = v5[5];
  v7 = v5[6];
  sub_100008170(v5 + 2, v6);
  v8 = *(unsigned __int8 (**)(uint64_t, uint64_t, __n128))(v7 + 16);
  v9 = swift_retain(v4);
  v10 = v8(v6, v7, v9);
  swift_release(v4);
  if (v10 == 3)
    return 1;
  v12 = swift_getKeyPath(&unk_100110618);
  v20 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, v12, v3);
  swift_release(v12);
  v13 = *(_QWORD *)(v1 + 32);
  v14 = *(_QWORD **)(v13 + 200);
  v15 = v14[5];
  v16 = v14[6];
  sub_100008170(v14 + 2, v15);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v16 + 16);
  v18 = swift_retain(v13);
  v19 = v17(v15, v16, v18);
  swift_release(v13);
  return v19 == 0;
}

BOOL sub_10009AD8C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 result;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, __n128);
  __n128 v27;
  char v28;
  _QWORD v29[3];
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;

  v1 = v0;
  v2 = v0 + 5;
  v4 = v0[8];
  v3 = v0[9];
  sub_100008170(v2, v4);
  v5 = dispatch thunk of MusicItem.id.getter(v4, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8));
  v7 = v6;
  KeyPath = swift_getKeyPath(&unk_100110618);
  v29[0] = v1;
  v9 = sub_100003B3C(&qword_100161D40, type metadata accessor for SetlistSongRowViewModel, (uint64_t)&unk_1001105F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v29, KeyPath, v9);
  swift_release(KeyPath);
  v10 = v1[4];
  v11 = *(_QWORD *)(v10 + 200);
  v12 = swift_getKeyPath(&unk_100110640);
  v29[0] = v11;
  v13 = sub_100003B3C((unint64_t *)&qword_10015D960, type metadata accessor for SetlistSongPlaybackController, (uint64_t)&unk_100112AF0);
  swift_retain(v10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v29, v12, v13);
  swift_release(v12);
  swift_beginAccess(v11 + 56, v29, 0, 0);
  sub_10009B338(v11 + 56, (uint64_t)v30);
  swift_release(v10);
  v14 = v31;
  if (!v31)
  {
    sub_10009B380((uint64_t)v30);
    swift_bridgeObjectRelease();
    return 0;
  }
  v15 = v32;
  sub_100008170(v30, v31);
  v16 = dispatch thunk of MusicItem.id.getter(v14, *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8));
  v18 = v17;
  sub_1000055A8(v30);
  if (v5 == v16 && v7 == v18)
  {
    swift_bridgeObjectRelease_n(v7, 2);
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v16, v18, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v20 & 1) == 0)
      return result;
  }
  v21 = swift_getKeyPath(&unk_100110618);
  v30[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v30, v21, v9);
  swift_release(v21);
  v22 = v1[4];
  v23 = *(_QWORD **)(v22 + 200);
  v24 = v23[5];
  v25 = v23[6];
  sub_100008170(v23 + 2, v24);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v25 + 16);
  v27 = swift_retain(v22);
  v28 = v26(v24, v25, v27);
  swift_release(v22);
  return v28 != 0;
}

BOOL sub_10009B00C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 (*v8)(uint64_t, uint64_t, __n128);
  __n128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 (*v16)(uint64_t, uint64_t, __n128);
  __n128 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  double (*v24)(uint64_t, uint64_t, __n128);
  __n128 v25;
  double v26;
  uint64_t v28;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_100110618);
  v28 = v0;
  v3 = sub_100003B3C(&qword_100161D40, type metadata accessor for SetlistSongRowViewModel, (uint64_t)&unk_1001105F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, KeyPath, v3);
  swift_release(KeyPath);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD **)(v4 + 200);
  v6 = v5[5];
  v7 = v5[6];
  sub_100008170(v5 + 2, v6);
  v8 = *(unsigned __int8 (**)(uint64_t, uint64_t, __n128))(v7 + 16);
  v9 = swift_retain(v4);
  v10 = v8(v6, v7, v9);
  swift_release(v4);
  if (v10 != 2)
  {
    v11 = swift_getKeyPath(&unk_100110618);
    v28 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, v11, v3);
    swift_release(v11);
    v12 = *(_QWORD *)(v1 + 32);
    v13 = *(_QWORD **)(v12 + 200);
    v14 = v13[5];
    v15 = v13[6];
    sub_100008170(v13 + 2, v14);
    v16 = *(unsigned __int8 (**)(uint64_t, uint64_t, __n128))(v15 + 16);
    v17 = swift_retain(v12);
    v18 = v16(v14, v15, v17);
    swift_release(v12);
    if (v18 != 3)
      return 0;
  }
  v19 = swift_getKeyPath(&unk_100110618);
  v28 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, v19, v3);
  swift_release(v19);
  v20 = *(_QWORD *)(v1 + 32);
  v21 = *(_QWORD **)(v20 + 200);
  v22 = v21[5];
  v23 = v21[6];
  sub_100008170(v21 + 2, v22);
  v24 = *(double (**)(uint64_t, uint64_t, __n128))(v23 + 8);
  v25 = swift_retain(v20);
  v26 = v24(v22, v23, v25);
  swift_release(v20);
  return v26 > 0.0;
}

uint64_t sub_10009B1EC()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_release(v0[4]);
  sub_1000055A8(v0 + 5);
  v1 = (char *)v0 + OBJC_IVAR____TtC16EventViewService23SetlistSongRowViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10009B254()
{
  return type metadata accessor for SetlistSongRowViewModel(0);
}

uint64_t type metadata accessor for SetlistSongRowViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100161CA0;
  if (!qword_100161CA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SetlistSongRowViewModel);
  return result;
}

uint64_t sub_10009B298(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1001105C8;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = &unk_1001105E0;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10009B338(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015D968);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009B380(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003E70(&qword_10015D968);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10009B3C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

_QWORD *sub_10009B3F8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = sub_100003E70(&qword_100161D48);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = v21;
    a1 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = v4;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = (int *)type metadata accessor for EventRowViewModel(0);
    v10 = v9[6];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for Date(0);
    v14 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v15 = swift_bridgeObjectRetain(v8);
    v14(v11, v12, v13, v15);
    v16 = v9[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = *(_QWORD *)((char *)a2 + v16 + 24);
    if (v19)
    {
      v20 = *((_QWORD *)v18 + 4);
      *((_QWORD *)v17 + 3) = v19;
      *((_QWORD *)v17 + 4) = v20;
      (**(void (***)(void))(v19 - 8))();
    }
    else
    {
      v22 = *((_OWORD *)v18 + 1);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v22;
      *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
    }
    *((_BYTE *)a1 + v9[8]) = *((_BYTE *)a2 + v9[8]);
    v23 = v9[9];
    v24 = *(_QWORD *)((char *)a2 + v23);
    *(_QWORD *)((char *)a1 + v23) = v24;
    v25 = *(int *)(v6 + 28);
    v21 = *(_QWORD *)((char *)a2 + v25);
    *(_QWORD *)((char *)a1 + v25) = v21;
    swift_retain(v24);
  }
  swift_retain(v21);
  return a1;
}

double sub_10009B53C(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  double result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = (int *)type metadata accessor for EventRowViewModel(0);
  v3 = a1 + v2[6];
  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = (_QWORD *)(a1 + v2[7]);
  if (v5[3])
    sub_1000055A8(v5);
  swift_release(*(_QWORD *)(a1 + v2[9]));
  v6 = *(_QWORD *)(a1 + *(int *)(sub_100003E70(&qword_100161D48) + 28));
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

_QWORD *sub_10009B5D4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = (int *)type metadata accessor for EventRowViewModel(0);
  v7 = v6[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v12 = swift_bridgeObjectRetain(v5);
  v11(v8, v9, v10, v12);
  v13 = v6[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)((char *)a2 + v13 + 24);
  if (v16)
  {
    v17 = *((_QWORD *)v15 + 4);
    *((_QWORD *)v14 + 3) = v16;
    *((_QWORD *)v14 + 4) = v17;
    (**(void (***)(void))(v16 - 8))();
  }
  else
  {
    v18 = *((_OWORD *)v15 + 1);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v18;
    *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
  }
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  v19 = v6[9];
  v20 = *(_QWORD *)((char *)a2 + v19);
  *(_QWORD *)((char *)a1 + v19) = v20;
  swift_retain(v20);
  v21 = *(int *)(sub_100003E70(&qword_100161D48) + 28);
  v22 = *(_QWORD *)((char *)a2 + v21);
  *(_QWORD *)((char *)a1 + v21) = v22;
  swift_retain(v22);
  return a1;
}

_QWORD *sub_10009B6E8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v5 = a2[3];
  a1[3] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for EventRowViewModel(0);
  v7 = v6[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = v6[7];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = *(_QWORD *)((char *)a2 + v11 + 24);
  if (!*(_QWORD *)((char *)a1 + v11 + 24))
  {
    if (v14)
    {
      *((_QWORD *)v12 + 3) = v14;
      *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
      (**(void (***)(char *, char *))(v14 - 8))(v12, v13);
      goto LABEL_8;
    }
LABEL_7:
    v15 = *(_OWORD *)v13;
    v16 = *((_OWORD *)v13 + 1);
    *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
    *(_OWORD *)v12 = v15;
    *((_OWORD *)v12 + 1) = v16;
    goto LABEL_8;
  }
  if (!v14)
  {
    sub_1000055A8(v12);
    goto LABEL_7;
  }
  sub_100043B0C(v12, v13);
LABEL_8:
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  v17 = v6[9];
  v18 = *(_QWORD *)((char *)a1 + v17);
  v19 = *(_QWORD *)((char *)a2 + v17);
  *(_QWORD *)((char *)a1 + v17) = v19;
  swift_retain(v19);
  swift_release(v18);
  v20 = *(int *)(sub_100003E70(&qword_100161D48) + 28);
  v21 = *(_QWORD *)((char *)a1 + v20);
  v22 = *(_QWORD *)((char *)a2 + v20);
  *(_QWORD *)((char *)a1 + v20) = v22;
  swift_retain(v22);
  swift_release(v21);
  return a1;
}

_OWORD *sub_10009B850(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (int *)type metadata accessor for EventRowViewModel(0);
  v6 = v5[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = v5[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *((_QWORD *)v11 + 4) = *((_QWORD *)v12 + 4);
  *((_BYTE *)a1 + v5[8]) = *((_BYTE *)a2 + v5[8]);
  *(_QWORD *)((char *)a1 + v5[9]) = *(_QWORD *)((char *)a2 + v5[9]);
  v14 = sub_100003E70(&qword_100161D48);
  *(_QWORD *)((char *)a1 + *(int *)(v14 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v14 + 28));
  return a1;
}

_QWORD *sub_10009B910(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for EventRowViewModel(0);
  v7 = v6[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = v6[7];
  v12 = (char *)a1 + v11;
  if (*(_QWORD *)((char *)a1 + v11 + 24))
    sub_1000055A8((_QWORD *)((char *)a1 + v11));
  v13 = *(_OWORD *)((char *)a2 + v11 + 16);
  *(_OWORD *)v12 = *(_OWORD *)((char *)a2 + v11);
  *((_OWORD *)v12 + 1) = v13;
  *((_QWORD *)v12 + 4) = *(_QWORD *)((char *)a2 + v11 + 32);
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  v14 = v6[9];
  v15 = *(_QWORD *)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  swift_release(v15);
  v16 = *(int *)(sub_100003E70(&qword_100161D48) + 28);
  v17 = *(_QWORD *)((char *)a1 + v16);
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  swift_release(v17);
  return a1;
}

uint64_t sub_10009BA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009BA14);
}

uint64_t sub_10009BA14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_100161D48);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10009BA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009BA60);
}

uint64_t sub_10009BA60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_100161D48);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for EventRow(uint64_t a1)
{
  return sub_10002F744(a1, (uint64_t *)&unk_100161DA8, (uint64_t)&nominal type descriptor for EventRow);
}

uint64_t sub_10009BAB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009EA38(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10009BAC4);
}

void sub_10009BAC4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100161DB8)
  {
    v2 = type metadata accessor for EventRowViewModel(255);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100161DB8);
  }
}

uint64_t sub_10009BB18(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011A5E4, 1);
}

uint64_t sub_10009BB28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v82 = a1;
  v83 = type metadata accessor for TaskPriority(0);
  v81 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v80 = (char *)&v69 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for EventRow(0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  v78 = *(_QWORD *)(v3 - 8);
  v79 = v4;
  __chkstk_darwin(v3);
  v77 = (uint64_t)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for EventRowViewModel(0);
  __chkstk_darwin(v6);
  v8 = (char **)((char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = type metadata accessor for AccessibilityChildBehavior(0);
  v9 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003E70(&qword_100161DE8);
  __chkstk_darwin(v12);
  v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003E70(&qword_100161DF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003E70(&qword_100161DF8);
  v19 = *(_QWORD *)(v18 - 8);
  v73 = v18;
  v74 = v19;
  __chkstk_darwin(v18);
  v69 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100003E70(&qword_100161E00);
  v21 = __chkstk_darwin(v76);
  v71 = (char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v75 = (char *)&v69 - v24;
  *(_QWORD *)v14 = static VerticalAlignment.center.getter(v23);
  *((_QWORD *)v14 + 1) = 0x4026000000000000;
  v14[16] = 0;
  v25 = (uint64_t)&v14[*(int *)(sub_100003E70(&qword_100161E08) + 44)];
  v70 = v1;
  v26 = sub_10009C0A8(v25);
  v27 = static Edge.Set.top.getter(v26);
  sub_100007ADC((uint64_t)v14, (uint64_t)v17, &qword_100161DE8);
  v28 = &v17[*(int *)(v15 + 36)];
  *v28 = v27;
  *(_OWORD *)(v28 + 8) = 0u;
  *(_OWORD *)(v28 + 24) = 0u;
  v28[40] = 1;
  v29 = sub_100008194((uint64_t)v14, &qword_100161DE8);
  static AccessibilityChildBehavior.ignore.getter(v29);
  v30 = sub_10005D16C(&qword_100161E10, &qword_100161DF0, &qword_100161E18, &qword_100161DE8);
  View.accessibilityElement(children:)(v11, v15, v30);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v72);
  sub_100008194((uint64_t)v17, &qword_100161DF0);
  v31 = sub_100003E70(&qword_100161D48);
  State.wrappedValue.getter(v8, v31);
  v32 = sub_10008D970();
  v34 = v33;
  sub_1000283D4((uint64_t)v8, type metadata accessor for EventRowViewModel);
  v84 = v32;
  v85 = v34;
  v35 = sub_10000CB40();
  v36 = Text.init<A>(_:)(&v84, &type metadata for String, v35);
  v38 = v37;
  v40 = v39;
  v42 = v41 & 1;
  v84 = v15;
  v85 = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v84, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v44 = (uint64_t)v71;
  v45 = v73;
  v46 = v69;
  View.accessibility(label:)(v36, v38, v42, v40, v73, OpaqueTypeConformance2);
  sub_10000BFF8(v36, v38, v42);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v46, v45);
  v47 = sub_100003E70(&qword_100161E20);
  v48 = swift_allocObject(v47, 64, 7);
  *(_OWORD *)(v48 + 16) = xmmword_10010ACC0;
  v49 = v70;
  State.wrappedValue.getter(v8, v31);
  v51 = v8[2];
  v50 = v8[3];
  swift_bridgeObjectRetain(v50);
  sub_1000283D4((uint64_t)v8, type metadata accessor for EventRowViewModel);
  v84 = v51;
  v85 = v50;
  *(_QWORD *)(v48 + 32) = Text.init<A>(_:)(&v84, &type metadata for String, v35);
  *(_QWORD *)(v48 + 40) = v52;
  *(_BYTE *)(v48 + 48) = v53 & 1;
  *(_QWORD *)(v48 + 56) = v54;
  v55 = (uint64_t)v75;
  ModifiedContent<>.accessibility(inputLabels:)(v48, v76);
  swift_bridgeObjectRelease();
  sub_100008194(v44, &qword_100161E00);
  v56 = v77;
  sub_100028390(v49, v77, type metadata accessor for EventRow);
  v57 = *(unsigned __int8 *)(v78 + 80);
  v58 = (v57 + 16) & ~v57;
  v59 = swift_allocObject(&unk_1001516B8, v58 + v79, v57 | 7);
  v60 = sub_10009CE44(v56, v59 + v58);
  v61 = v80;
  static TaskPriority.userInitiated.getter(v60);
  v62 = sub_100003E70(&qword_100161E38);
  v63 = v82;
  v64 = (char *)(v82 + *(int *)(v62 + 36));
  v65 = type metadata accessor for _TaskModifier(0);
  v66 = v81;
  v67 = v83;
  (*(void (**)(char *, char *, uint64_t))(v81 + 16))(&v64[*(int *)(v65 + 20)], v61, v83);
  *(_QWORD *)v64 = &unk_100161E30;
  *((_QWORD *)v64 + 1) = v59;
  sub_100007ADC(v55, v63, &qword_100161E00);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v61, v67);
  return sub_100008194(v55, &qword_100161E00);
}

uint64_t sub_10009C0A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD v71[9];
  _OWORD v72[2];
  _OWORD v73[11];
  char v74;
  __int128 v75;
  _BYTE v76[177];
  _QWORD v77[2];
  char v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;

  v58 = a1;
  v1 = type metadata accessor for Divider(0);
  v55 = *(_QWORD *)(v1 - 8);
  v56 = v1;
  v2 = __chkstk_darwin(v1);
  v54 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v53 = (char *)&v50 - v4;
  v5 = sub_100003E70(&qword_100161E40);
  v6 = __chkstk_darwin(v5);
  v57 = (uint64_t)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v51 = (uint64_t *)((char *)&v50 - v8);
  v9 = type metadata accessor for EventRowImage(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_100003E70(&qword_100161E48);
  __chkstk_darwin(v12);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003E70(&qword_100161E50);
  v16 = __chkstk_darwin(v15);
  v59 = (uint64_t)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v50 - v18;
  v52 = (uint64_t)&v50 - v18;
  v20 = sub_100003E70(&qword_100161D48);
  State.wrappedValue.getter(v11, v20);
  sub_100028390((uint64_t)v11, (uint64_t)v14, type metadata accessor for EventRowImage);
  v14[*(int *)(v12 + 36)] = 1;
  v21 = sub_1000283D4((uint64_t)v11, type metadata accessor for EventRowImage);
  LOBYTE(v12) = static Edge.Set.bottom.getter(v21);
  v22 = v59;
  sub_100007ADC((uint64_t)v14, v59, &qword_100161E48);
  v23 = v22 + *(int *)(v15 + 36);
  *(_BYTE *)v23 = v12;
  *(_OWORD *)(v23 + 8) = 0u;
  *(_OWORD *)(v23 + 24) = 0u;
  *(_BYTE *)(v23 + 40) = 1;
  sub_100008194((uint64_t)v14, &qword_100161E48);
  v24 = sub_100007A98(v22, (uint64_t)v19, &qword_100161E50);
  v25 = static HorizontalAlignment.leading.getter(v24);
  v26 = (uint64_t)v51;
  *v51 = v25;
  *(_QWORD *)(v26 + 8) = 0x4030000000000000;
  *(_BYTE *)(v26 + 16) = 0;
  v27 = sub_100003E70(&qword_100161E58);
  v28 = v26 + *(int *)(v27 + 44);
  v29 = static HorizontalAlignment.leading.getter(v27);
  v30 = sub_10009C5E0((uint64_t)v71);
  *(_OWORD *)((char *)&v73[4] + 7) = v71[4];
  *(_OWORD *)((char *)&v73[3] + 7) = v71[3];
  *(_OWORD *)((char *)&v73[7] + 7) = v71[7];
  *(_OWORD *)((char *)&v73[8] + 7) = v71[8];
  *(_OWORD *)((char *)&v73[9] + 7) = v72[0];
  v73[10] = *(_OWORD *)((char *)v72 + 9);
  *(_OWORD *)((char *)&v73[5] + 7) = v71[5];
  *(_OWORD *)((char *)&v73[6] + 7) = v71[6];
  *(_OWORD *)((char *)v73 + 7) = v71[0];
  v74 = 0;
  *(_OWORD *)((char *)&v73[1] + 7) = v71[1];
  *(_OWORD *)((char *)&v73[2] + 7) = v71[2];
  v68 = v73[8];
  v69 = v73[9];
  v70 = *(_OWORD *)((char *)v72 + 9);
  v64 = v73[4];
  v65 = v73[5];
  v66 = v73[6];
  v67 = v73[7];
  v60 = v73[0];
  v61 = v73[1];
  v62 = v73[2];
  v63 = v73[3];
  v31 = v53;
  Divider.init()(v30);
  v32 = v54;
  v33 = v55;
  v34 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  v35 = v56;
  v34(v54, v31, v56);
  *(_OWORD *)&v76[113] = v67;
  *(_OWORD *)&v76[129] = v68;
  *(_OWORD *)&v76[145] = v69;
  *(_OWORD *)&v76[161] = v70;
  *(_OWORD *)&v76[49] = v63;
  *(_OWORD *)&v76[65] = v64;
  *(_OWORD *)&v76[81] = v65;
  *(_OWORD *)&v76[97] = v66;
  *(_OWORD *)&v76[1] = v60;
  *(_QWORD *)&v75 = v29;
  *((_QWORD *)&v75 + 1) = 0x4014000000000000;
  v76[0] = 0;
  *(_OWORD *)&v76[17] = v61;
  *(_OWORD *)&v76[33] = v62;
  v36 = *(_OWORD *)&v76[160];
  *(_OWORD *)(v28 + 160) = *(_OWORD *)&v76[144];
  *(_OWORD *)(v28 + 176) = v36;
  *(_BYTE *)(v28 + 192) = v76[176];
  v37 = *(_OWORD *)&v76[96];
  *(_OWORD *)(v28 + 96) = *(_OWORD *)&v76[80];
  *(_OWORD *)(v28 + 112) = v37;
  v38 = *(_OWORD *)&v76[128];
  *(_OWORD *)(v28 + 128) = *(_OWORD *)&v76[112];
  *(_OWORD *)(v28 + 144) = v38;
  v39 = *(_OWORD *)&v76[32];
  *(_OWORD *)(v28 + 32) = *(_OWORD *)&v76[16];
  *(_OWORD *)(v28 + 48) = v39;
  v40 = *(_OWORD *)&v76[64];
  *(_OWORD *)(v28 + 64) = *(_OWORD *)&v76[48];
  *(_OWORD *)(v28 + 80) = v40;
  v41 = *(_OWORD *)v76;
  *(_OWORD *)v28 = v75;
  *(_OWORD *)(v28 + 16) = v41;
  v42 = sub_100003E70(&qword_100161E60);
  v34((char *)(v28 + *(int *)(v42 + 48)), v32, v35);
  sub_10009CF00((uint64_t)&v75);
  v43 = *(void (**)(char *, uint64_t))(v33 + 8);
  v43(v31, v35);
  v43(v32, v35);
  v86 = v67;
  v87 = v68;
  v88 = v69;
  v89 = v70;
  v82 = v63;
  v83 = v64;
  v84 = v65;
  v85 = v66;
  v79 = v60;
  v80 = v61;
  v77[0] = v29;
  v77[1] = 0x4014000000000000;
  v78 = 0;
  v81 = v62;
  sub_10009D010((uint64_t)v77);
  v44 = v52;
  v45 = v59;
  sub_100007ADC(v52, v59, &qword_100161E50);
  v46 = v57;
  sub_100007ADC(v26, v57, &qword_100161E40);
  v47 = v58;
  sub_100007ADC(v45, v58, &qword_100161E50);
  v48 = sub_100003E70(&qword_100161E68);
  sub_100007ADC(v46, v47 + *(int *)(v48 + 48), &qword_100161E40);
  sub_100008194(v26, &qword_100161E40);
  sub_100008194(v44, &qword_100161E50);
  sub_100008194(v46, &qword_100161E40);
  return sub_100008194(v45, &qword_100161E50);
}

uint64_t sub_10009C5E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t KeyPath;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  char v108;
  char v109;
  char v110;

  v2 = sub_100003E70(&qword_10015D400);
  __chkstk_darwin(v2);
  v96 = (uint64_t)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for EventRowViewModel(0);
  v4 = __chkstk_darwin(v95);
  *(_QWORD *)&v94 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v92 - v6);
  v8 = sub_100003E70(&qword_100161D48);
  v93 = v8;
  State.wrappedValue.getter(v7, v8);
  v9 = *v7;
  v10 = v7[1];
  swift_bridgeObjectRetain(v10);
  sub_1000283D4((uint64_t)v7, type metadata accessor for EventRowViewModel);
  v105 = v9;
  v106 = v10;
  v11 = sub_10000CB40();
  v12 = Text.init<A>(_:)(&v105, &type metadata for String, v11);
  v14 = v13;
  v16 = v15;
  v18 = v17 & 1;
  v19 = static Font.subheadline.getter(v12);
  v20 = Text.font(_:)(v19, v12, v14, v18, v16);
  v100 = v21;
  v101 = v20;
  v97 = v22;
  v102 = v23;
  swift_release(v19);
  sub_10000BFF8(v12, v14, v18);
  swift_bridgeObjectRelease();
  State.wrappedValue.getter(v7, v8);
  v25 = v7[2];
  v24 = v7[3];
  swift_bridgeObjectRetain(v24);
  sub_1000283D4((uint64_t)v7, type metadata accessor for EventRowViewModel);
  v105 = v25;
  v106 = v24;
  v26 = Text.init<A>(_:)(&v105, &type metadata for String, v11);
  v28 = v27;
  v30 = v29;
  v32 = v31 & 1;
  v33 = static Font.Weight.medium.getter(v26);
  v34 = Text.fontWeight(_:)(*(_QWORD *)&v33, 0, v26, v28, v32, v30);
  v36 = v35;
  v38 = v37;
  v40 = v39 & 1;
  sub_10000BFF8(v26, v28, v32);
  v41 = swift_bridgeObjectRelease();
  v42 = static Font.body.getter(v41);
  v99 = Text.font(_:)(v42, v34, v36, v40, v38);
  v103 = v43;
  v104 = v44;
  v46 = v45;
  swift_release(v42);
  v47 = v40;
  v48 = v94;
  sub_10000BFF8(v34, v36, v47);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_1001106D0);
  State.wrappedValue.getter(*(_QWORD **)&v48, v93);
  v49 = *(_QWORD *)(*(_QWORD *)&v48 + *(int *)(v95 + 36));
  if (!v49)
  {
    v77 = type metadata accessor for ArtistPromotionalAssets(0);
    v54 = v96;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v96, 1, 1, v77);
    goto LABEL_5;
  }
  v50 = swift_getKeyPath(&unk_100110700);
  v105 = v49;
  v51 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v105, v50, v51);
  swift_release(v50);
  v52 = v49 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess(v49 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets, &v105, 0, 0);
  v53 = v52;
  v54 = v96;
  sub_100007ADC(v53, v96, &qword_10015D400);
  v55 = type metadata accessor for ArtistPromotionalAssets(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 48))(v54, 1, v55) == 1)
  {
LABEL_5:
    sub_100008194(v54, &qword_10015D400);
    sub_1000283D4(*(uint64_t *)&v48, type metadata accessor for EventRowViewModel);
    v67 = 0;
    v66 = 0;
    v75 = 0;
    v65 = 0;
    v76 = 0;
    v68 = 0.0;
    v70 = 0;
    v72 = 0;
    v74 = 0;
    goto LABEL_6;
  }
  sub_100008194(v54, &qword_10015D400);
  sub_1000283D4(*(uint64_t *)&v48, type metadata accessor for EventRowViewModel);
  v56 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100116250);
  v58 = v57;
  v60 = v59;
  v62 = v61;
  v63 = static Edge.Set.top.getter(v56);
  v64 = EdgeInsets.init(_all:)(3.0);
  v65 = v62;
  v66 = v58;
  v67 = v56;
  v68 = v64;
  v70 = v69;
  v72 = v71;
  v74 = v73;
  v75 = v60 & 1;
  v76 = v63;
LABEL_6:
  v94 = v68;
  v95 = v70;
  v96 = v72;
  v78 = v97 & 1;
  v107 = v97 & 1;
  v79 = v46 & 1;
  v110 = v97 & 1;
  v109 = v46 & 1;
  v108 = 0;
  v80 = v101;
  v81 = v102;
  *(_QWORD *)a1 = v101;
  v82 = v80;
  v84 = v99;
  v83 = v100;
  *(_QWORD *)(a1 + 8) = v100;
  v85 = v83;
  *(_BYTE *)(a1 + 16) = v78;
  *(_QWORD *)(a1 + 24) = v81;
  *(_QWORD *)(a1 + 32) = 0x3FE3333333333333;
  v86 = v103;
  *(_QWORD *)(a1 + 40) = v84;
  *(_QWORD *)(a1 + 48) = v86;
  *(_BYTE *)(a1 + 56) = v79;
  v87 = KeyPath;
  *(_QWORD *)(a1 + 64) = v104;
  *(_QWORD *)(a1 + 72) = v87;
  *(_QWORD *)(a1 + 80) = 1;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = v67;
  *(_QWORD *)(a1 + 104) = v66;
  *(_QWORD *)(a1 + 112) = v75;
  *(_QWORD *)(a1 + 120) = v65;
  *(_QWORD *)(a1 + 128) = v76;
  *(double *)(a1 + 136) = v68;
  *(_QWORD *)(a1 + 144) = v70;
  *(_QWORD *)(a1 + 152) = v72;
  *(_QWORD *)(a1 + 160) = v74;
  *(_BYTE *)(a1 + 168) = 0;
  v88 = v67;
  v89 = v65;
  v90 = v75;
  sub_10000C008(v82, v85, v78);
  swift_bridgeObjectRetain(v81);
  sub_10000C008(v84, v103, v79);
  swift_bridgeObjectRetain(v104);
  swift_retain(v87);
  sub_10009CFE0(v88, v66, v90, v89);
  sub_100022090(v88, v66, v90, v89);
  sub_10000BFF8(v99, v103, v79);
  swift_release(KeyPath);
  swift_bridgeObjectRelease();
  sub_10000BFF8(v101, v100, v107);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10009CB90(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[2] = a1;
  v2 = type metadata accessor for EventRowViewModel(0);
  v1[3] = v2;
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MainActor(0);
  v1[5] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v1[6] = v4;
  v1[7] = v5;
  return swift_task_switch(sub_10009CC20, v4, v5);
}

uint64_t sub_10009CC20()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD **)(v0 + 32);
  v3 = sub_100003E70(&qword_100161D48);
  State.wrappedValue.getter(v1, v3);
  v4 = *(_QWORD *)((char *)v1 + *(int *)(v2 + 36));
  *(_QWORD *)(v0 + 64) = v4;
  swift_retain(v4);
  sub_1000283D4((uint64_t)v1, type metadata accessor for EventRowViewModel);
  if (v4)
  {
    v5 = (_QWORD *)swift_task_alloc(dword_10015EEAC);
    *(_QWORD *)(v0 + 72) = v5;
    *v5 = v0;
    v5[1] = sub_10009CCD8;
    return sub_10003DCB8();
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 40));
    swift_task_dealloc(*(_QWORD *)(v0 + 32));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10009CCD8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  swift_release(v2);
  return swift_task_switch(sub_10009CD2C, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_10009CD2C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  swift_task_dealloc(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009CD68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *(_QWORD *)(type metadata accessor for EventRow(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for EventRowViewModel(0);
  v7 = v0 + v3 + v6[6];
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (_QWORD *)(v0 + v3 + v6[7]);
  if (v9[3])
    sub_1000055A8(v9);
  swift_release(*(_QWORD *)(v5 + v6[9]));
  v10 = sub_100003E70(&qword_100161D48);
  swift_release(*(_QWORD *)(v5 + *(int *)(v10 + 28)));
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10009CE44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventRow(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009CE88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EventRow(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_100161E2C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000072F4;
  return sub_10009CB90(v3);
}

uint64_t type metadata accessor for EventRowImage(uint64_t a1)
{
  return sub_10002F744(a1, qword_100161EC8, (uint64_t)&nominal type descriptor for EventRowImage);
}

uint64_t sub_10009CF00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_BYTE *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 136);
  v11 = *(_QWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 120);
  v10 = *(_QWORD *)(a1 + 144);
  sub_10000C008(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  sub_10000C008(v3, v4, v5);
  swift_bridgeObjectRetain(v6);
  swift_retain(v7);
  sub_10009CFE0(v12, v11, v8, v10);
  return a1;
}

uint64_t sub_10009CFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_10009D010(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_BYTE *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 136);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_QWORD *)(a1 + 120);
  v8 = *(_QWORD *)(a1 + 144);
  sub_10000BFF8(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease();
  sub_10000BFF8(v2, v3, v4);
  swift_release(v5);
  swift_bridgeObjectRelease();
  sub_100022090(v10, v9, v6, v8);
  return a1;
}

uint64_t sub_10009D0F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD v57[3];

  v56 = a1;
  v2 = type metadata accessor for Calendar(0);
  v52 = *(_QWORD *)(v2 - 8);
  v53 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar.Component(0);
  v50 = *(_QWORD *)(v5 - 8);
  v51 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100003E70(&qword_100161F38);
  __chkstk_darwin(v55);
  v9 = (uint64_t *)((char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003E70(&qword_100161F40);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100003E70(&qword_100161F48);
  v17 = __chkstk_darwin(v54);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v49 - v20;
  v22 = type metadata accessor for EventRowViewModel(0);
  if (*(_BYTE *)(v1 + *(int *)(v22 + 32)) == 1)
  {
    v23 = sub_10008D818((uint64_t)v12);
    v24 = static Animation.easeInOut.getter(v23);
    v25 = Transaction.init(animation:)(v24);
    v26 = sub_100003E70(&qword_100161F68);
    v27 = sub_10009ECE4();
    v28 = AsyncImage.init(url:scale:transaction:content:)(v12, v25, sub_10009D4BC, 0, v26, v27, 1.0);
    v29 = static Alignment.center.getter(v28);
    _FrameLayout.init(width:height:alignment:)(v57, 0x4049000000000000, 0, 0x4049000000000000, 0, v29, v30);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v19, v16, v13);
    v31 = v54;
    v32 = &v19[*(int *)(v54 + 36)];
    v33 = v57[1];
    *(_OWORD *)v32 = v57[0];
    *((_OWORD *)v32 + 1) = v33;
    *((_OWORD *)v32 + 2) = v57[2];
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    sub_100007A98((uint64_t)v19, (uint64_t)v21, &qword_100161F48);
    sub_100007ADC((uint64_t)v21, (uint64_t)v9, &qword_100161F48);
    swift_storeEnumTagMultiPayload(v9, v55, 0);
    v34 = sub_10009EC1C();
    v35 = sub_10009ECA0();
    _ConditionalContent<>.init(storage:)(v9, v31, &type metadata for CalendarIcon, v34, v35);
    return sub_100008194((uint64_t)v21, &qword_100161F48);
  }
  else
  {
    v37 = v1 + *(int *)(v22 + 24);
    v38 = sub_100041EA4();
    v40 = v39;
    v42 = v50;
    v41 = v51;
    v43 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v50 + 104))(v7, enum case for Calendar.Component.day(_:), v51);
    static Calendar.current.getter(v43);
    v44 = Calendar.component(_:from:)(v7, v37);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v4, v53);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v7, v41);
    *(_QWORD *)&v57[0] = v44;
    v45 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    *v9 = v38;
    v9[1] = v40;
    v9[2] = v45;
    v9[3] = v46;
    swift_storeEnumTagMultiPayload(v9, v55, 1);
    v47 = sub_10009EC1C();
    v48 = sub_10009ECA0();
    return _ConditionalContent<>.init(storage:)(v9, v54, &type metadata for CalendarIcon, v47, v48);
  }
}

double sub_10009D4BC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  double result;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _OWORD v54[2];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _OWORD v61[2];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD v68[2];
  _OWORD v69[4];
  __int128 v70;
  __int128 v71;
  _OWORD v72[2];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _OWORD v79[2];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[42];

  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AsyncImagePhase(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (_QWORD *)((char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v12 = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 88))(v11, v8);
  if ((_DWORD)v12 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v9 + 96))(v11, v8);
    v13 = *v11;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    v14 = Image.resizable(capInsets:resizingMode:)(v7, v13, 0.0, 0.0, 0.0, 0.0);
    v15 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v16 = static Color.black.getter(v15);
    v17 = Color.opacity(_:)(0.1);
    swift_release(v16);
    *(_QWORD *)&v55 = v14;
    *((_QWORD *)&v55 + 1) = v17;
    v56 = xmmword_10010BAD0;
    *(_QWORD *)&v57 = 0x4010000000000000;
    sub_10009EE98((uint64_t)&v55);
    sub_100007A98((uint64_t)&v55, (uint64_t)&v80, &qword_100161FD0);
    swift_retain(v14);
    swift_retain(v17);
    v18 = sub_100003E70(&qword_100161F90);
    v19 = sub_100003E70(&qword_100161FC0);
    v20 = sub_10005C954(&qword_100161F88, &qword_100161F90, (void (*)(void))sub_10009EDF4);
    v21 = sub_100007D40(&qword_100161FB8, &qword_100161FC0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    _ConditionalContent<>.init(storage:)(&v80, v18, v19, v20, v21);
    v66 = v52;
    v67 = v53;
    v68[0] = v54[0];
    *(_OWORD *)((char *)v68 + 9) = *(_OWORD *)((char *)v54 + 9);
    v62 = v48;
    v63 = v49;
    v64 = v50;
    v65 = v51;
    *(_OWORD *)((char *)v79 + 9) = *(_OWORD *)((char *)v54 + 9);
    v78 = v53;
    v79[0] = v54[0];
    v76 = v51;
    v77 = v52;
    v74 = v49;
    v75 = v50;
    v73 = v48;
    sub_10009EE90((uint64_t)&v73);
    sub_100007A98((uint64_t)&v73, (uint64_t)&v80, &qword_100161FC8);
    sub_10009EF0C((uint64_t)&v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10009EEA0);
    v22 = sub_100003E70(&qword_100161F80);
    v23 = sub_10009ED50();
    _ConditionalContent<>.init(storage:)(&v80, v22, &type metadata for EmptyView, v23, &protocol witness table for EmptyView);
    swift_release(v13);
    sub_10009EF0C((uint64_t)&v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10009EF70);
    swift_release(v17);
    swift_release(v14);
    v84 = v70;
    *(_OWORD *)v85 = v71;
    *(_OWORD *)&v85[16] = v72[0];
    v24 = *(_OWORD *)((char *)v72 + 10);
  }
  else
  {
    if ((_DWORD)v12 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v9 + 96))(v11, v8);
      v12 = swift_errorRelease(*v11);
    }
    else if ((_DWORD)v12 != enum case for AsyncImagePhase.empty(_:))
    {
      sub_10009EE78((uint64_t)v69);
      sub_100007A98((uint64_t)v69, (uint64_t)&v80, &qword_100161FC8);
      v44 = sub_100003E70(&qword_100161F80);
      v45 = sub_10009ED50();
      _ConditionalContent<>.init(storage:)(&v80, v44, &type metadata for EmptyView, v45, &protocol witness table for EmptyView);
      (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
      v84 = v77;
      *(_OWORD *)v85 = v78;
      *(_OWORD *)&v85[16] = v79[0];
      *(_OWORD *)&v85[26] = *(_OWORD *)((char *)v79 + 10);
      v80 = v73;
      v81 = v74;
      v38 = v75;
      v39 = v76;
      goto LABEL_8;
    }
    v25 = static Alignment.center.getter(v12);
    v27 = v26;
    sub_10009DB0C((uint64_t)&v80);
    v28 = v80;
    v29 = v81;
    v30 = *((_QWORD *)&v82 + 1);
    v46 = v83;
    *(_QWORD *)&v62 = v25;
    *((_QWORD *)&v62 + 1) = v27;
    v63 = v80;
    v47 = v80;
    v64 = v81;
    LOWORD(v65) = v82;
    *((_QWORD *)&v65 + 1) = *((_QWORD *)&v82 + 1);
    v66 = v83;
    LOBYTE(v67) = v84;
    *((_QWORD *)&v67 + 1) = *((_QWORD *)&v84 + 1);
    LOBYTE(v68[0]) = v85[0];
    *(_OWORD *)((char *)v68 + 8) = *(_OWORD *)&v85[8];
    sub_10009EE84((uint64_t)&v62);
    sub_100007A98((uint64_t)&v62, (uint64_t)&v80, &qword_100161FD0);
    v31 = v46;
    swift_retain(v46);
    swift_retain(v28);
    swift_retain(*((_QWORD *)&v28 + 1));
    swift_retain(v29);
    swift_retain(v30);
    v32 = sub_100003E70(&qword_100161F90);
    v33 = sub_100003E70(&qword_100161FC0);
    v34 = sub_10005C954(&qword_100161F88, &qword_100161F90, (void (*)(void))sub_10009EDF4);
    v35 = sub_100007D40(&qword_100161FB8, &qword_100161FC0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    _ConditionalContent<>.init(storage:)(&v80, v32, v33, v34, v35);
    v77 = v59;
    v78 = v60;
    v79[0] = v61[0];
    *(_OWORD *)((char *)v79 + 9) = *(_OWORD *)((char *)v61 + 9);
    v73 = v55;
    v74 = v56;
    v75 = v57;
    v76 = v58;
    sub_10009EE90((uint64_t)&v73);
    sub_100007A98((uint64_t)&v73, (uint64_t)&v80, &qword_100161FC8);
    v36 = sub_100003E70(&qword_100161F80);
    v37 = sub_10009ED50();
    _ConditionalContent<>.init(storage:)(&v80, v36, &type metadata for EmptyView, v37, &protocol witness table for EmptyView);
    swift_release(v31);
    swift_release(v30);
    swift_release(v29);
    swift_release(*((_QWORD *)&v28 + 1));
    swift_release(v47);
    v84 = v70;
    *(_OWORD *)v85 = v71;
    *(_OWORD *)&v85[16] = v72[0];
    v24 = *(_OWORD *)((char *)v72 + 10);
  }
  *(_OWORD *)&v85[26] = v24;
  v80 = v69[0];
  v81 = v69[1];
  v38 = v69[2];
  v39 = v69[3];
LABEL_8:
  v82 = v38;
  v83 = v39;
  v40 = *(_OWORD *)v85;
  a2[4] = v84;
  a2[5] = v40;
  a2[6] = *(_OWORD *)&v85[16];
  *(_OWORD *)((char *)a2 + 106) = *(_OWORD *)&v85[26];
  v41 = v81;
  *a2 = v80;
  a2[1] = v41;
  result = *(double *)&v82;
  v43 = v83;
  a2[2] = v82;
  a2[3] = v43;
  return result;
}

double sub_10009DB0C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  __int128 v26;

  v2 = type metadata accessor for Image.ResizingMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10015CE60 != -1)
    swift_once(&qword_10015CE60, sub_1000382C8);
  v6 = qword_10016F658;
  KeyPath = swift_getKeyPath(&unk_1001107F8);
  swift_retain(v6);
  v8 = Image.init(systemName:)(0x662E6E6F73726570, 0xEB000000006C6C69);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Image.ResizingMode.stretch(_:), v2);
  v9 = Image.resizable(capInsets:resizingMode:)(v5, v8, 0.0, 0.0, 0.0, 0.0);
  v10 = swift_release(v8);
  v11 = (*(uint64_t (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v10);
  v12 = static Color.white.getter(v11);
  v13 = swift_getKeyPath(&unk_1001107F8);
  v14 = static Alignment.center.getter(v13);
  _FrameLayout.init(width:height:alignment:)(&v22, 0x4039000000000000, 0, 0x4039000000000000, 0, v14, v15);
  v16 = v22;
  v17 = v23;
  v18 = v24;
  v19 = v25;
  *(_QWORD *)a1 = KeyPath;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v16;
  *(_BYTE *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 72) = v18;
  *(_BYTE *)(a1 + 80) = v19;
  *(_OWORD *)(a1 + 88) = v26;
  swift_retain(KeyPath);
  *(_QWORD *)&result = swift_release(v20).n128_u64[0];
  return result;
}

uint64_t sub_10009DCD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  id v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v67 = a1;
  v68 = a2;
  v72 = a5;
  v71 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v71);
  v69 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003E70(&qword_10015EBE8);
  __chkstk_darwin(v8);
  v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003E70(&qword_100161F10);
  __chkstk_darwin(v11);
  v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003E70(&qword_100161F18);
  __chkstk_darwin(v14);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003E70(&qword_100161F20);
  __chkstk_darwin(v17);
  v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100003E70(&qword_100161F28);
  v20 = __chkstk_darwin(v70);
  v22 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = static VerticalAlignment.center.getter(v20);
  *((_QWORD *)v10 + 1) = 0x4010000000000000;
  v10[16] = 0;
  v23 = sub_100003E70(&qword_10015EC00);
  v24 = sub_10009E100(v67, v68, a3, a4, (uint64_t)&v10[*(int *)(v23 + 44)]);
  LOBYTE(a3) = static Edge.Set.vertical.getter(v24);
  v25 = EdgeInsets.init(_all:)(3.0);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  sub_100007ADC((uint64_t)v10, (uint64_t)v13, &qword_10015EBE8);
  v32 = &v13[*(int *)(v11 + 36)];
  *v32 = a3;
  *((double *)v32 + 1) = v25;
  *((_QWORD *)v32 + 2) = v27;
  *((_QWORD *)v32 + 3) = v29;
  *((_QWORD *)v32 + 4) = v31;
  v32[40] = 0;
  v33 = sub_100008194((uint64_t)v10, &qword_10015EBE8);
  LOBYTE(v11) = static Edge.Set.trailing.getter(v33);
  v34 = EdgeInsets.init(_all:)(8.0);
  v36 = v35;
  v38 = v37;
  v40 = v39;
  sub_100007ADC((uint64_t)v13, (uint64_t)v16, &qword_100161F10);
  v41 = &v16[*(int *)(v14 + 36)];
  *v41 = v11;
  *((double *)v41 + 1) = v34;
  *((_QWORD *)v41 + 2) = v36;
  *((_QWORD *)v41 + 3) = v38;
  *((_QWORD *)v41 + 4) = v40;
  v41[40] = 0;
  v42 = sub_100008194((uint64_t)v13, &qword_100161F10);
  LOBYTE(v13) = static Edge.Set.leading.getter(v42);
  v43 = EdgeInsets.init(_all:)(5.0);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  sub_100007ADC((uint64_t)v16, (uint64_t)v19, &qword_100161F18);
  v50 = &v19[*(int *)(v17 + 36)];
  *v50 = (char)v13;
  *((double *)v50 + 1) = v43;
  *((_QWORD *)v50 + 2) = v45;
  *((_QWORD *)v50 + 3) = v47;
  *((_QWORD *)v50 + 4) = v49;
  v50[40] = 0;
  sub_100008194((uint64_t)v16, &qword_100161F18);
  v51 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
  v52 = Color.init(_:)(v51);
  LOBYTE(v16) = static Edge.Set.all.getter(v52);
  sub_100007ADC((uint64_t)v19, (uint64_t)v22, &qword_100161F20);
  v53 = &v22[*(int *)(v70 + 36)];
  *(_QWORD *)v53 = v52;
  v53[8] = (char)v16;
  sub_100008194((uint64_t)v19, &qword_100161F20);
  v54 = v69;
  v55 = &v69[*(int *)(v71 + 20)];
  v56 = enum case for RoundedCornerStyle.continuous(_:);
  v57 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 104))(v55, v56, v57);
  __asm { FMOV            V0.2D, #6.0 }
  *v54 = _Q0;
  v63 = sub_100003E70(&qword_100161F30);
  v64 = v72;
  v65 = v72 + *(int *)(v63 + 36);
  sub_100028390((uint64_t)v54, v65, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v65 + *(int *)(sub_100003E70(&qword_10015E338) + 36)) = 256;
  sub_100007ADC((uint64_t)v22, v64, &qword_100161F28);
  sub_1000283D4((uint64_t)v54, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  return sub_100008194((uint64_t)v22, &qword_100161F28);
}

uint64_t sub_10009E100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  char v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  __int128 v60;

  v50 = a5;
  v9 = sub_100003E70(&qword_10015EC18);
  v10 = __chkstk_darwin(v9);
  v49 = (uint64_t)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v48 - v12;
  v14 = Image.init(_:bundle:)(0xD00000000000001BLL, 0x8000000100116C80, 0);
  v15 = static Alignment.center.getter(v14);
  _FrameLayout.init(width:height:alignment:)(&v56, 0x4031000000000000, 0, 0x4030000000000000, 0, v15, v16);
  v51[0] = v14;
  v51[1] = v56;
  v52 = v57;
  v53 = v58;
  v54 = v59;
  v55 = v60;
  v17 = sub_100003E70(&qword_10015EC20);
  v18 = sub_1000395DC();
  View.accessibilityHidden(_:)(1, v17, v18);
  swift_release(v14);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v19 = Text.init(_:tableName:bundle:comment:)(a1, a2, a3, a4, 0, 0, 0, 0, 0, 256);
  v21 = v20;
  v23 = v22;
  v25 = v24 & 1;
  v26 = static Font.caption2.getter();
  static Font.Weight.semibold.getter();
  v27 = Font.weight(_:)(v26);
  swift_release(v26);
  v28 = Text.font(_:)(v27, v19, v21, v25, v23);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  swift_release(v27);
  v35 = v32 & 1;
  sub_10000BFF8(v19, v21, v25);
  v36 = swift_bridgeObjectRelease();
  v37 = static Color.blue.getter(v36);
  v51[0] = v37;
  v38 = Text.foregroundStyle<A>(_:)(v51, v28, v30, v35, v34, &type metadata for Color, &protocol witness table for Color);
  v40 = v39;
  v42 = v41;
  LOBYTE(v27) = v43 & 1;
  sub_10000BFF8(v28, v30, v35);
  swift_release(v37);
  swift_bridgeObjectRelease();
  v44 = v49;
  sub_100007ADC((uint64_t)v13, v49, &qword_10015EC18);
  v45 = v50;
  sub_100007ADC(v44, v50, &qword_10015EC18);
  v46 = v45 + *(int *)(sub_100003E70(&qword_10015EC30) + 48);
  *(_QWORD *)v46 = v38;
  *(_QWORD *)(v46 + 8) = v40;
  *(_BYTE *)(v46 + 16) = v27;
  *(_QWORD *)(v46 + 24) = v42;
  sub_10000C008(v38, v40, v27);
  swift_bridgeObjectRetain(v42);
  sub_100008194((uint64_t)v13, &qword_10015EC18);
  sub_10000BFF8(v38, v40, v27);
  swift_bridgeObjectRelease();
  return sub_100008194(v44, &qword_10015EC18);
}

uint64_t sub_10009E410@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10009DCD0(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

ValueMetadata *type metadata accessor for PromotionalAssetsTagView()
{
  return &type metadata for PromotionalAssetsTagView;
}

_QWORD *sub_10009E440(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = type metadata accessor for EventRowViewModel(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = (int *)v4;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = *(int *)(v4 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v14 = swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12, v14);
    v15 = v6[7];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = *(_QWORD *)((char *)a2 + v15 + 24);
    if (v18)
    {
      v19 = *((_QWORD *)v17 + 4);
      *((_QWORD *)v16 + 3) = v18;
      *((_QWORD *)v16 + 4) = v19;
      (**(void (***)(void))(v18 - 8))();
    }
    else
    {
      v21 = *((_OWORD *)v17 + 1);
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *((_OWORD *)v16 + 1) = v21;
      *((_QWORD *)v16 + 4) = *((_QWORD *)v17 + 4);
    }
    *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
    v22 = v6[9];
    v20 = *(_QWORD *)((char *)a2 + v22);
    *(_QWORD *)((char *)a1 + v22) = v20;
  }
  swift_retain(v20);
  return a1;
}

double sub_10009E560(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  double result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = (int *)type metadata accessor for EventRowViewModel(0);
  v3 = a1 + v2[6];
  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = (_QWORD *)(a1 + v2[7]);
  if (v5[3])
    sub_1000055A8(v5);
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + v2[9])).n128_u64[0];
  return result;
}

_QWORD *sub_10009E5E0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = (int *)type metadata accessor for EventRowViewModel(0);
  v7 = v6[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v12 = swift_bridgeObjectRetain(v5);
  v11(v8, v9, v10, v12);
  v13 = v6[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)((char *)a2 + v13 + 24);
  if (v16)
  {
    v17 = *((_QWORD *)v15 + 4);
    *((_QWORD *)v14 + 3) = v16;
    *((_QWORD *)v14 + 4) = v17;
    (**(void (***)(void))(v16 - 8))();
  }
  else
  {
    v18 = *((_OWORD *)v15 + 1);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v18;
    *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
  }
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  v19 = v6[9];
  v20 = *(_QWORD *)((char *)a2 + v19);
  *(_QWORD *)((char *)a1 + v19) = v20;
  swift_retain(v20);
  return a1;
}

_QWORD *sub_10009E6D8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v5 = a2[3];
  a1[3] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for EventRowViewModel(0);
  v7 = v6[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = v6[7];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = *(_QWORD *)((char *)a2 + v11 + 24);
  if (!*(_QWORD *)((char *)a1 + v11 + 24))
  {
    if (v14)
    {
      *((_QWORD *)v12 + 3) = v14;
      *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
      (**(void (***)(char *, char *))(v14 - 8))(v12, v13);
      goto LABEL_8;
    }
LABEL_7:
    v15 = *(_OWORD *)v13;
    v16 = *((_OWORD *)v13 + 1);
    *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
    *(_OWORD *)v12 = v15;
    *((_OWORD *)v12 + 1) = v16;
    goto LABEL_8;
  }
  if (!v14)
  {
    sub_1000055A8(v12);
    goto LABEL_7;
  }
  sub_100043B0C(v12, v13);
LABEL_8:
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  v17 = v6[9];
  v18 = *(_QWORD *)((char *)a1 + v17);
  v19 = *(_QWORD *)((char *)a2 + v17);
  *(_QWORD *)((char *)a1 + v17) = v19;
  swift_retain(v19);
  swift_release(v18);
  return a1;
}

_OWORD *sub_10009E818(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (int *)type metadata accessor for EventRowViewModel(0);
  v6 = v5[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = v5[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *((_QWORD *)v11 + 4) = *((_QWORD *)v12 + 4);
  *((_BYTE *)a1 + v5[8]) = *((_BYTE *)a2 + v5[8]);
  *(_QWORD *)((char *)a1 + v5[9]) = *(_QWORD *)((char *)a2 + v5[9]);
  return a1;
}

_QWORD *sub_10009E8C0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for EventRowViewModel(0);
  v7 = v6[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = v6[7];
  v12 = (char *)a1 + v11;
  if (*(_QWORD *)((char *)a1 + v11 + 24))
    sub_1000055A8((_QWORD *)((char *)a1 + v11));
  v13 = *(_OWORD *)((char *)a2 + v11 + 16);
  *(_OWORD *)v12 = *(_OWORD *)((char *)a2 + v11);
  *((_OWORD *)v12 + 1) = v13;
  *((_QWORD *)v12 + 4) = *(_QWORD *)((char *)a2 + v11 + 32);
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  v14 = v6[9];
  v15 = *(_QWORD *)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  swift_release(v15);
  return a1;
}

uint64_t sub_10009E998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009E9A4);
}

uint64_t sub_10009E9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventRowViewModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10009E9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009E9EC);
}

uint64_t sub_10009E9EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventRowViewModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_10009EA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009EA38(a1, a2, a3, type metadata accessor for EventRowViewModel);
}

uint64_t sub_10009EA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;

  result = a4(319);
  if (v6 <= 0x3F)
  {
    v7 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v7, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10009EAA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100161F00;
  if (!qword_100161F00)
  {
    v1 = sub_1000034AC(&qword_100161E38);
    sub_10009EB28();
    sub_100003B3C(&qword_10015D458, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100161F00);
  }
  return result;
}

unint64_t sub_10009EB28()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100161F08;
  if (!qword_100161F08)
  {
    v1 = sub_1000034AC(&qword_100161E00);
    v2[0] = sub_1000034AC(&qword_100161DF0);
    v2[1] = sub_10005D16C(&qword_100161E10, &qword_100161DF0, &qword_100161E18, &qword_100161DE8);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100161F08);
  }
  return result;
}

uint64_t sub_10009EBFC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011A634, 1);
}

uint64_t sub_10009EC0C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011A60C, 1);
}

unint64_t sub_10009EC1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100161F50;
  if (!qword_100161F50)
  {
    v1 = sub_1000034AC(&qword_100161F48);
    sub_100007D40(&qword_100161F58, &qword_100161F40, (uint64_t)&protocol conformance descriptor for AsyncImage<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100161F50);
  }
  return result;
}

unint64_t sub_10009ECA0()
{
  unint64_t result;

  result = qword_100161F60;
  if (!qword_100161F60)
  {
    result = swift_getWitnessTable(&unk_10010CEA0, &type metadata for CalendarIcon);
    atomic_store(result, (unint64_t *)&qword_100161F60);
  }
  return result;
}

unint64_t sub_10009ECE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100161F70;
  if (!qword_100161F70)
  {
    v1 = sub_1000034AC(&qword_100161F68);
    sub_10009ED50();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100161F70);
  }
  return result;
}

unint64_t sub_10009ED50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100161F78;
  if (!qword_100161F78)
  {
    v1 = sub_1000034AC(&qword_100161F80);
    sub_10005C954(&qword_100161F88, &qword_100161F90, (void (*)(void))sub_10009EDF4);
    sub_100007D40(&qword_100161FB8, &qword_100161FC0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100161F78);
  }
  return result;
}

unint64_t sub_10009EDF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100161F98;
  if (!qword_100161F98)
  {
    v1 = sub_1000034AC(&qword_100161FA0);
    sub_100007D40(&qword_100161FA8, &qword_100161FB0, (uint64_t)&protocol conformance descriptor for _MaskEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100161F98);
  }
  return result;
}

uint64_t sub_10009EE78(uint64_t result)
{
  *(_BYTE *)(result + 121) = 1;
  return result;
}

uint64_t sub_10009EE84(uint64_t result)
{
  *(_BYTE *)(result + 120) = 1;
  return result;
}

uint64_t sub_10009EE90(uint64_t result)
{
  *(_BYTE *)(result + 121) = 0;
  return result;
}

uint64_t sub_10009EE98(uint64_t result)
{
  *(_BYTE *)(result + 120) = 0;
  return result;
}

uint64_t sub_10009EEA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if ((a16 & 1) != 0)
  {
    swift_retain(a9);
    swift_retain(a3);
    swift_retain(a4);
    a1 = a5;
    a2 = a8;
  }
  swift_retain(a1);
  return swift_retain(a2);
}

uint64_t sub_10009EF0C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 120);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), v4);
  return a1;
}

uint64_t sub_10009EF70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if ((a16 & 1) != 0)
  {
    a2 = a9;
    swift_release(a3);
    swift_release(a5);
    swift_release(a8);
    a1 = a4;
  }
  swift_release(a1);
  return swift_release(a2);
}

unint64_t sub_10009EFDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100161FD8;
  if (!qword_100161FD8)
  {
    v1 = sub_1000034AC(&qword_100161F30);
    sub_10009F060();
    sub_100007D40(&qword_10015E330, &qword_10015E338, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100161FD8);
  }
  return result;
}

unint64_t sub_10009F060()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100161FE0;
  if (!qword_100161FE0)
  {
    v1 = sub_1000034AC(&qword_100161F28);
    sub_10005C954(&qword_100161FE8, &qword_100161F20, (void (*)(void))sub_10009F104);
    sub_100007D40(&qword_10015E320, &qword_10015E328, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100161FE0);
  }
  return result;
}

unint64_t sub_10009F104()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100161FF0;
  if (!qword_100161FF0)
  {
    v1 = sub_1000034AC(&qword_100161F18);
    sub_10005D16C(&qword_100161FF8, &qword_100161F10, &qword_100162000, &qword_10015EBE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100161FF0);
  }
  return result;
}

unint64_t sub_10009F194()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162008;
  if (!qword_100162008)
  {
    v1 = sub_1000034AC(&qword_100162010);
    sub_10009EC1C();
    sub_10009ECA0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162008);
  }
  return result;
}

uint64_t sub_10009F200(uint64_t a1)
{
  return sub_10009F220(8.0, a1, &qword_10016F6A8);
}

uint64_t sub_10009F210(uint64_t a1)
{
  return sub_10009F220(24.0, a1, &qword_10016F6B0);
}

uint64_t sub_10009F220(double a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v5 = sub_100003E70(qword_100162018);
  __chkstk_darwin(v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = static Font.system(size:weight:design:)(0, 1, v7, a1);
  result = sub_10009F2D4((uint64_t)v7);
  *a3 = v9;
  return result;
}

uint64_t sub_10009F2D4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003E70(qword_100162018);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10009F314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;

  v48 = a2;
  v3 = type metadata accessor for SlideTransition(0);
  v45 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v43 - v7;
  v9 = sub_100003E70(&qword_1001620A0);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003E70(&qword_1001620A8);
  __chkstk_darwin(v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100003E70(&qword_1001620B0);
  __chkstk_darwin(v44);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100003E70(&qword_1001620B8);
  v17 = __chkstk_darwin(v47);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v17);
  *((_QWORD *)v11 + 1) = 0x403C000000000000;
  v11[16] = 0;
  v22 = sub_100003E70(&qword_1001620C0);
  v24 = sub_10009F684(v46, v21, v20, v23, (uint64_t)&v11[*(int *)(v22 + 44)]);
  SlideTransition.init()(v24);
  v25 = v45;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v6, v8, v3);
  v26 = sub_100003B3C((unint64_t *)&qword_1001620C8, (uint64_t (*)(uint64_t))&type metadata accessor for SlideTransition, (uint64_t)&protocol conformance descriptor for SlideTransition);
  v27 = AnyTransition.init<A>(_:)(v6, v3, v26);
  sub_100007ADC((uint64_t)v11, (uint64_t)v14, &qword_1001620A0);
  *(_QWORD *)&v14[*(int *)(v12 + 36)] = v27;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v3);
  v28 = sub_100008194((uint64_t)v11, &qword_1001620A0);
  LOBYTE(v27) = static Edge.Set.top.getter(v28);
  sub_100007ADC((uint64_t)v14, (uint64_t)v16, &qword_1001620A8);
  v29 = &v16[*(int *)(v44 + 36)];
  *v29 = v27;
  *(_OWORD *)(v29 + 8) = 0u;
  *(_OWORD *)(v29 + 24) = 0u;
  v29[40] = 1;
  v30 = sub_100008194((uint64_t)v14, &qword_1001620A8);
  LOBYTE(v27) = static Edge.Set.bottom.getter(v30);
  v31 = EdgeInsets.init(_all:)(30.0);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  sub_100007ADC((uint64_t)v16, (uint64_t)v19, &qword_1001620B0);
  v38 = &v19[*(int *)(v47 + 36)];
  *v38 = v27;
  *((double *)v38 + 1) = v31;
  *((_QWORD *)v38 + 2) = v33;
  *((_QWORD *)v38 + 3) = v35;
  *((_QWORD *)v38 + 4) = v37;
  v38[40] = 0;
  v39 = sub_100008194((uint64_t)v16, &qword_1001620B0);
  v40 = static Alignment.center.getter(v39);
  sub_1000E5864(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v48, 0.0, 1, 0.0, 1, v40, v41);
  return sub_100008194((uint64_t)v19, &qword_1001620B8);
}

uint64_t sub_10009F684@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t OpaqueTypeConformance2;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char v115;
  _BYTE v116[7];
  char v117;
  _BYTE v118[168];
  _BYTE v119[168];
  _QWORD v120[2];
  char v121;
  _BYTE v122[7];
  char *v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  _BYTE v135[7];
  char v136;
  _BYTE v137[7];
  double v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  unint64_t v144;

  v112 = a5;
  v8 = type metadata accessor for EventDetailModule(0, a2, a3, a4);
  v101 = *(_QWORD *)(v8 - 8);
  v102 = v8;
  v99 = *(_QWORD *)(v101 + 64);
  __chkstk_darwin(v8);
  v100 = (char *)&v98 - v9;
  v10 = type metadata accessor for AccessibilityChildBehavior(0);
  v105 = *(_QWORD *)(v10 - 8);
  v106 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003E70(&qword_1001620D0);
  __chkstk_darwin(v13);
  v15 = (char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003E70(&qword_1001620D8);
  __chkstk_darwin(v16);
  v18 = (char *)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100003E70(&qword_1001620E0);
  v20 = *(_QWORD *)(v19 - 8);
  v107 = v19;
  v108 = v20;
  __chkstk_darwin(v19);
  v113 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_100003E70(&qword_1001620E8);
  v22 = __chkstk_darwin(v110);
  v111 = (uint64_t)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v104 = (char *)&v98 - v25;
  v26 = __chkstk_darwin(v24);
  v109 = (char *)&v98 - v27;
  v28 = __chkstk_darwin(v26);
  v114 = (uint64_t)&v98 - v29;
  *(_QWORD *)v15 = static HorizontalAlignment.center.getter(v28);
  *((_QWORD *)v15 + 1) = 0x4024000000000000;
  v15[16] = 0;
  v30 = sub_100003E70(&qword_1001620F0);
  v31 = sub_10009FD98(a1, a2, a3, (uint64_t)&v15[*(int *)(v30 + 44)]);
  v32 = static Edge.Set.horizontal.getter(v31);
  sub_100007ADC((uint64_t)v15, (uint64_t)v18, &qword_1001620D0);
  v33 = &v18[*(int *)(v16 + 36)];
  *v33 = v32;
  *(_OWORD *)(v33 + 8) = 0u;
  *(_OWORD *)(v33 + 24) = 0u;
  v33[40] = 1;
  v34 = sub_100008194((uint64_t)v15, &qword_1001620D0);
  static AccessibilityChildBehavior.ignore.getter(v34);
  v35 = sub_1000A21BC();
  View.accessibilityElement(children:)(v12, v16, v35);
  (*(void (**)(char *, unint64_t))(v105 + 8))(v12, v106);
  sub_100008194((uint64_t)v18, &qword_1001620D8);
  v103 = a2;
  v105 = a3;
  v37 = type metadata accessor for EventDetailViewModel(0, a2, a3, v36);
  v143 = sub_100039FC0(v37);
  v144 = v38;
  v106 = sub_10000CB40();
  v39 = Text.init<A>(_:)(&v143, &type metadata for String, v106);
  v41 = v40;
  v43 = v42;
  v45 = v44 & 1;
  v143 = v16;
  v144 = v35;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v47 = (uint64_t)v104;
  v48 = v107;
  v49 = v113;
  View.accessibility(label:)(v39, v41, v45, v43, v107, OpaqueTypeConformance2);
  v50 = v39;
  v51 = a1;
  sub_10000BFF8(v50, v41, v45);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v108 + 8))(v49, v48);
  v52 = sub_100003E70(&qword_100161E20);
  v53 = swift_allocObject(v52, 64, 7);
  *(_OWORD *)(v53 + 16) = xmmword_10010ACC0;
  v143 = sub_10003971C(v37);
  v144 = v54;
  *(_QWORD *)(v53 + 32) = Text.init<A>(_:)(&v143, &type metadata for String, v106);
  *(_QWORD *)(v53 + 40) = v55;
  *(_BYTE *)(v53 + 48) = v56 & 1;
  *(_QWORD *)(v53 + 56) = v57;
  v58 = (uint64_t)v109;
  ModifiedContent<>.accessibility(inputLabels:)(v53, v110);
  swift_bridgeObjectRelease();
  sub_100008194(v47, &qword_1001620E8);
  sub_100007A98(v58, v114, &qword_1001620E8);
  if (sub_100039DDC(v37))
  {
    v59 = (char *)v51 + *(int *)(v37 + 44);
    v60 = *(_QWORD *)v59;
    v61 = *((_QWORD *)v59 + 1);
    v62 = v59[16];
    v63 = *((_QWORD *)v59 + 3);
    swift_bridgeObjectRetain(v61);
    swift_bridgeObjectRetain(v63);
    v64 = Text.init(_:tableName:bundle:comment:)(v60, v61, v62, v63, 0, 0, 0, 0, 0, 256);
    v108 = v65;
    v109 = (char *)v64;
    v67 = v66;
    v113 = v68;
    v110 = static Color.white.getter(v64);
    v69 = static Color.black.getter(v110);
    v71 = v100;
    v70 = v101;
    v72 = v102;
    (*(void (**)(char *, uint64_t *, uint64_t))(v101 + 16))(v100, v51, v102);
    v73 = *(unsigned __int8 *)(v70 + 80);
    v74 = (v73 + 32) & ~v73;
    v75 = swift_allocObject(&unk_100151800, v74 + v99, v73 | 7);
    v76 = v105;
    *(_QWORD *)(v75 + 16) = v103;
    *(_QWORD *)(v75 + 24) = v76;
    v77 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v70 + 32))(v75 + v74, v71, v72);
    v78 = *v51;
    LODWORD(v74) = static MatchedGeometryProperties.frame.getter(v77);
    v79 = static UnitPoint.center.getter();
    v81 = v80;
    v83 = v82;
    v84 = static Edge.Set.horizontal.getter(v79);
    v85 = EdgeInsets.init(_all:)(50.0);
    v117 = v67 & 1;
    v115 = 0;
    v120[0] = v109;
    v120[1] = v108;
    v121 = v67 & 1;
    *(_DWORD *)v122 = *(_DWORD *)v119;
    *(_DWORD *)&v122[3] = *(_DWORD *)&v119[3];
    v123 = v113;
    v124 = v110;
    v125 = v69;
    v126 = sub_1000A24D0;
    v127 = v75;
    v128 = 0xD000000000000017;
    v129 = 0x8000000100116CA0;
    v130 = v78;
    v131 = v74;
    v132 = v81;
    v133 = v83;
    v134 = 1;
    *(_DWORD *)&v135[3] = *(_DWORD *)&v118[3];
    *(_DWORD *)v135 = *(_DWORD *)v118;
    v136 = v84;
    *(_DWORD *)&v137[3] = *(_DWORD *)&v116[3];
    *(_DWORD *)v137 = *(_DWORD *)v116;
    v138 = v85;
    v139 = v86;
    v140 = v87;
    v141 = v88;
    v142 = 0;
    nullsub_1(v120, v89, v90, v91, v92);
  }
  else
  {
    sub_1000A2240((uint64_t)v120);
  }
  sub_100007A98((uint64_t)v120, (uint64_t)&v143, &qword_100162108);
  v93 = v114;
  v94 = v111;
  sub_100007ADC(v114, v111, &qword_1001620E8);
  sub_100007A98((uint64_t)&v143, (uint64_t)v118, &qword_100162108);
  v95 = v112;
  sub_100007ADC(v94, v112, &qword_1001620E8);
  v96 = v95 + *(int *)(sub_100003E70(&qword_100162110) + 48);
  sub_100007A98((uint64_t)v118, (uint64_t)v119, &qword_100162108);
  sub_100007A98((uint64_t)v119, v96, &qword_100162108);
  sub_1000A22D0((uint64_t)v119, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000A2260);
  sub_100008194(v93, &qword_1001620E8);
  sub_100007A98((uint64_t)v118, (uint64_t)v120, &qword_100162108);
  sub_1000A22D0((uint64_t)v120, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000A233C);
  return sub_100008194(v94, &qword_1001620E8);
}

uint64_t sub_10009FD98@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD v99[13];
  char v100;
  _BYTE v101[216];
  char v102;
  __int128 v103;
  _OWORD v104[14];
  uint64_t v105;
  uint64_t v106;
  char v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;

  v96 = a2;
  v97 = a3;
  v5 = a2;
  v82 = a1;
  v98 = a4;
  v84 = sub_100003E70(&qword_10015E8E8);
  __chkstk_darwin(v84);
  v83 = (uint64_t *)((char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100003E70(&qword_10015E8F0);
  __chkstk_darwin(v7);
  v80 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100003E70(&qword_10015E8F8);
  __chkstk_darwin(v81);
  v10 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100003E70(&qword_10015F1A8);
  __chkstk_darwin(v89);
  v85 = (uint64_t)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100003E70(&qword_10015F1B0);
  __chkstk_darwin(v92);
  v87 = (uint64_t)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100003E70(&qword_100162118);
  __chkstk_darwin(v91);
  v86 = (uint64_t)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100003E70(&qword_100162120);
  __chkstk_darwin(v93);
  v88 = (uint64_t)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100003E70(&qword_100162128);
  v15 = __chkstk_darwin(v94);
  v90 = (uint64_t)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v95 = (uint64_t)&v80 - v17;
  v19 = type metadata accessor for EventDetailViewModel(0, v5, a3, v18);
  v105 = sub_10003A4C4(v19);
  v106 = v20;
  v21 = sub_10000CB40();
  v22 = Text.init<A>(_:)(&v105, &type metadata for String, v21);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v29 = static Font.Weight.heavy.getter(v22);
  v30 = Text.fontWeight(_:)(*(_QWORD *)&v29, 0, v22, v24, v28, v26);
  v32 = v31;
  v34 = v33;
  LOBYTE(v5) = v35 & 1;
  sub_10000BFF8(v22, v24, v28);
  swift_bridgeObjectRelease();
  v36 = enum case for Text.Case.uppercase(_:);
  v37 = type metadata accessor for Text.Case(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = v80;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 104))(v80, v36, v37);
  v40 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56);
  v41 = (uint64_t)v39;
  v40(v39, 0, 1, v37);
  KeyPath = swift_getKeyPath(&unk_100110930);
  v43 = v83;
  sub_100007ADC(v41, (uint64_t)v83 + *(int *)(v84 + 28), &qword_10015E8F0);
  *v43 = KeyPath;
  sub_100007ADC((uint64_t)v43, (uint64_t)&v10[*(int *)(v81 + 36)], &qword_10015E8E8);
  *(_QWORD *)v10 = v30;
  *((_QWORD *)v10 + 1) = v32;
  v10[16] = v5;
  *((_QWORD *)v10 + 3) = v34;
  sub_10000C008(v30, v32, v5);
  swift_bridgeObjectRetain(v34);
  sub_100008194((uint64_t)v43, &qword_10015E8E8);
  sub_100008194(v41, &qword_10015E8F0);
  sub_10000BFF8(v30, v32, v5);
  v44 = swift_bridgeObjectRelease();
  v45 = static Font.subheadline.getter(v44);
  v46 = swift_getKeyPath(&unk_100110960);
  v47 = v85;
  sub_100007ADC((uint64_t)v10, v85, &qword_10015E8F8);
  v48 = (uint64_t *)(v47 + *(int *)(v89 + 36));
  *v48 = v46;
  v48[1] = v45;
  v49 = sub_100008194((uint64_t)v10, &qword_10015E8F8);
  v50 = static Color.white.getter(v49);
  v51 = swift_getKeyPath(&unk_100110990);
  v52 = v87;
  sub_100007ADC(v47, v87, &qword_10015F1A8);
  v53 = (uint64_t *)(v52 + *(int *)(v92 + 36));
  *v53 = v51;
  v53[1] = v50;
  sub_100008194(v47, &qword_10015F1A8);
  v54 = v86;
  sub_100007ADC(v52, v86, &qword_10015F1B0);
  *(_QWORD *)(v54 + *(int *)(v91 + 36)) = 0x3FE999999999999ALL;
  sub_100008194(v52, &qword_10015F1B0);
  v55 = swift_getKeyPath(&unk_1001109C0);
  v56 = v88;
  sub_100007ADC(v54, v88, &qword_100162118);
  v57 = v56 + *(int *)(v93 + 36);
  *(_QWORD *)v57 = v55;
  *(_BYTE *)(v57 + 8) = 1;
  v58 = sub_100008194(v54, &qword_100162118);
  v59 = v82;
  v60 = *v82;
  LODWORD(v55) = static MatchedGeometryProperties.frame.getter(v58);
  v61 = static UnitPoint.center.getter();
  v63 = v62;
  v64 = v90;
  sub_100007ADC(v56, v90, &qword_100162120);
  v65 = v64 + *(int *)(v94 + 36);
  *(_QWORD *)v65 = 0xD000000000000017;
  *(_QWORD *)(v65 + 8) = 0x8000000100116D00;
  *(_QWORD *)(v65 + 16) = v60;
  *(_DWORD *)(v65 + 24) = v55;
  *(double *)(v65 + 32) = v61;
  *(_QWORD *)(v65 + 40) = v63;
  *(_BYTE *)(v65 + 48) = 1;
  sub_100008194(v56, &qword_100162120);
  v66 = v95;
  v67 = sub_100007A98(v64, v95, &qword_100162128);
  v68 = static HorizontalAlignment.center.getter(v67);
  sub_1000A064C(v59, v96, v97, v69, (uint64_t)v99);
  *(_OWORD *)&v101[167] = v99[10];
  *(_OWORD *)&v101[183] = v99[11];
  *(_OWORD *)&v101[199] = v99[12];
  *(_OWORD *)&v101[103] = v99[6];
  *(_OWORD *)&v101[119] = v99[7];
  *(_OWORD *)&v101[135] = v99[8];
  *(_OWORD *)&v101[151] = v99[9];
  *(_OWORD *)&v101[39] = v99[2];
  *(_OWORD *)&v101[55] = v99[3];
  *(_OWORD *)&v101[71] = v99[4];
  *(_OWORD *)&v101[87] = v99[5];
  *(_OWORD *)&v101[7] = v99[0];
  v102 = 0;
  v101[215] = v100;
  *(_OWORD *)&v101[23] = v99[1];
  sub_100007ADC(v66, v64, &qword_100162128);
  v70 = v98;
  sub_100007ADC(v64, v98, &qword_100162128);
  v71 = (_OWORD *)(v70 + *(int *)(sub_100003E70(&qword_100162130) + 48));
  *(_QWORD *)&v103 = v68;
  *((_QWORD *)&v103 + 1) = 0x4014000000000000;
  LOBYTE(v104[0]) = 0;
  *(_OWORD *)((char *)&v104[10] + 1) = *(_OWORD *)&v101[160];
  *(_OWORD *)((char *)&v104[11] + 1) = *(_OWORD *)&v101[176];
  *(_OWORD *)((char *)&v104[12] + 1) = *(_OWORD *)&v101[192];
  *(_QWORD *)((char *)&v104[13] + 1) = *(_QWORD *)&v101[208];
  *(_OWORD *)((char *)&v104[6] + 1) = *(_OWORD *)&v101[96];
  *(_OWORD *)((char *)&v104[7] + 1) = *(_OWORD *)&v101[112];
  *(_OWORD *)((char *)&v104[8] + 1) = *(_OWORD *)&v101[128];
  *(_OWORD *)((char *)&v104[9] + 1) = *(_OWORD *)&v101[144];
  *(_OWORD *)((char *)&v104[2] + 1) = *(_OWORD *)&v101[32];
  *(_OWORD *)((char *)&v104[3] + 1) = *(_OWORD *)&v101[48];
  *(_OWORD *)((char *)&v104[4] + 1) = *(_OWORD *)&v101[64];
  *(_OWORD *)((char *)&v104[5] + 1) = *(_OWORD *)&v101[80];
  *(_OWORD *)((char *)&v104[1] + 1) = *(_OWORD *)&v101[16];
  *(_OWORD *)((char *)v104 + 1) = *(_OWORD *)v101;
  v72 = v104[12];
  v71[12] = v104[11];
  v71[13] = v72;
  *(_OWORD *)((char *)v71 + 217) = *(_OWORD *)((char *)&v104[12] + 9);
  v73 = v104[8];
  v71[8] = v104[7];
  v71[9] = v73;
  v74 = v104[10];
  v71[10] = v104[9];
  v71[11] = v74;
  v75 = v104[4];
  v71[4] = v104[3];
  v71[5] = v75;
  v76 = v104[6];
  v71[6] = v104[5];
  v71[7] = v76;
  v77 = v104[0];
  *v71 = v103;
  v71[1] = v77;
  v78 = v104[2];
  v71[2] = v104[1];
  v71[3] = v78;
  sub_1000A2DB0((uint64_t)&v103);
  sub_100008194(v66, &qword_100162128);
  v118 = *(_OWORD *)&v101[160];
  v119 = *(_OWORD *)&v101[176];
  v120 = *(_OWORD *)&v101[192];
  v114 = *(_OWORD *)&v101[96];
  v115 = *(_OWORD *)&v101[112];
  v116 = *(_OWORD *)&v101[128];
  v117 = *(_OWORD *)&v101[144];
  v110 = *(_OWORD *)&v101[32];
  v111 = *(_OWORD *)&v101[48];
  v112 = *(_OWORD *)&v101[64];
  v113 = *(_OWORD *)&v101[80];
  v108 = *(_OWORD *)v101;
  v105 = v68;
  v106 = 0x4014000000000000;
  v107 = 0;
  v121 = *(_QWORD *)&v101[208];
  v109 = *(_OWORD *)&v101[16];
  sub_1000A2E5C((uint64_t)&v105);
  return sub_100008194(v64, &qword_100162128);
}

uint64_t sub_1000A064C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  int v64;
  int v65;
  uint64_t v66;
  char v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t KeyPath;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE v82[7];
  _BYTE v83[7];
  char v84;
  _BYTE v85[7];
  _BYTE v86[7];
  char v87;

  v70 = type metadata accessor for EventDetailViewModel(0, a2, a3, a4);
  v80 = sub_10003971C(v70);
  v81 = v6;
  v69 = sub_10000CB40();
  v7 = Text.init<A>(_:)(&v80, &type metadata for String, v69);
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  v14 = static Font.largeTitle.getter();
  v15 = Text.font(_:)(v14, v7, v9, v13, v11);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  swift_release(v14);
  sub_10000BFF8(v7, v9, v13);
  v22 = swift_bridgeObjectRelease();
  v23 = static Font.Weight.heavy.getter(v22);
  v24 = Text.fontWeight(_:)(*(_QWORD *)&v23, 0, v15, v17, v19 & 1, v21);
  v26 = v25;
  v28 = v27;
  v30 = v29 & 1;
  sub_10000BFF8(v15, v17, v19 & 1);
  v31 = swift_bridgeObjectRelease();
  v32 = static Color.white.getter(v31);
  v78 = Text.foregroundColor(_:)(v32, v24, v26, v30, v28);
  v79 = v33;
  v75 = v34;
  LOBYTE(v14) = v35;
  swift_release(v32);
  v68 = v14 & 1;
  sub_10000BFF8(v24, v26, v30);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_1001109C0);
  v74 = *a1;
  v73 = static MatchedGeometryProperties.frame.getter();
  v36 = static UnitPoint.center.getter();
  v38 = v37;
  v80 = sub_1000399E4(v70);
  v81 = v39;
  v40 = Text.init<A>(_:)(&v80, &type metadata for String, v69);
  v42 = v41;
  v44 = v43;
  v46 = v45 & 1;
  v47 = static Font.body.getter(v40);
  v48 = Text.font(_:)(v47, v40, v42, v46, v44);
  v50 = v49;
  v52 = v51;
  v54 = v53;
  swift_release(v47);
  LOBYTE(v47) = v52 & 1;
  sub_10000BFF8(v40, v42, v46);
  v55 = swift_bridgeObjectRelease();
  v56 = static Color.white.getter(v55);
  v57 = Text.foregroundColor(_:)(v56, v48, v50, v52 & 1, v54);
  v59 = v58;
  LOBYTE(v42) = v60;
  v71 = v61;
  swift_release(v56);
  LOBYTE(v42) = v42 & 1;
  sub_10000BFF8(v48, v50, v47);
  swift_bridgeObjectRelease();
  v62 = swift_getKeyPath(&unk_1001109C0);
  v77 = *a1;
  LODWORD(v69) = static MatchedGeometryProperties.frame.getter();
  v63 = static UnitPoint.center.getter();
  v87 = v68;
  v84 = v42;
  *(_DWORD *)(a5 + 17) = v80;
  *(_DWORD *)(a5 + 20) = *(_DWORD *)((char *)&v80 + 3);
  *(_DWORD *)(a5 + 41) = *(_DWORD *)v86;
  *(_DWORD *)(a5 + 44) = *(_DWORD *)&v86[3];
  *(_DWORD *)(a5 + 97) = *(_DWORD *)v85;
  *(_DWORD *)(a5 + 100) = *(_DWORD *)&v85[3];
  v64 = *(_DWORD *)v83;
  *(_DWORD *)(a5 + 124) = *(_DWORD *)&v83[3];
  *(_DWORD *)(a5 + 121) = v64;
  v65 = *(_DWORD *)v82;
  *(_DWORD *)(a5 + 156) = *(_DWORD *)&v82[3];
  *(_DWORD *)(a5 + 153) = v65;
  *(_QWORD *)a5 = v78;
  *(_QWORD *)(a5 + 8) = v75;
  *(_BYTE *)(a5 + 16) = v68;
  *(_QWORD *)(a5 + 24) = v79;
  *(_QWORD *)(a5 + 32) = KeyPath;
  *(_BYTE *)(a5 + 40) = 1;
  *(_QWORD *)(a5 + 48) = 0xD000000000000016;
  *(_QWORD *)(a5 + 56) = 0x8000000100116CE0;
  *(_QWORD *)(a5 + 64) = v74;
  *(_DWORD *)(a5 + 72) = v73;
  *(double *)(a5 + 80) = v36;
  *(_QWORD *)(a5 + 88) = v38;
  *(_BYTE *)(a5 + 96) = 1;
  *(_QWORD *)(a5 + 104) = v57;
  *(_QWORD *)(a5 + 112) = v59;
  *(_BYTE *)(a5 + 120) = v42;
  *(_QWORD *)(a5 + 128) = v71;
  *(_QWORD *)(a5 + 136) = 0x3FE999999999999ALL;
  *(_QWORD *)(a5 + 144) = v62;
  *(_BYTE *)(a5 + 152) = 1;
  *(_QWORD *)(a5 + 160) = 0xD000000000000019;
  *(_QWORD *)(a5 + 168) = 0x8000000100116CC0;
  *(_QWORD *)(a5 + 176) = v77;
  *(_DWORD *)(a5 + 184) = v69;
  *(double *)(a5 + 192) = v63;
  *(_QWORD *)(a5 + 200) = v66;
  *(_BYTE *)(a5 + 208) = 1;
  sub_10000C008(v78, v75, v68);
  swift_bridgeObjectRetain(v79);
  swift_retain(KeyPath);
  swift_bridgeObjectRetain(0x8000000100116CE0);
  sub_10000C008(v57, v59, v42);
  swift_bridgeObjectRetain(v71);
  swift_retain(v62);
  swift_bridgeObjectRetain(0x8000000100116CC0);
  sub_10000BFF8(v57, v59, v42);
  swift_bridgeObjectRelease();
  swift_release(v62);
  swift_bridgeObjectRelease();
  sub_10000BFF8(v78, v75, v68);
  swift_bridgeObjectRelease();
  swift_release(KeyPath);
  return swift_bridgeObjectRelease();
}

void sub_1000A0A90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t AssociatedConformanceWitness;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v3 = type metadata accessor for URL(0);
  v38 = *(_QWORD *)(v3 - 8);
  v39 = v3;
  __chkstk_darwin(v3);
  v37 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OpenURLAction(0);
  v35 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  __chkstk_darwin(v5);
  v33 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7);
  v10 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v33 - v13;
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v12);
  v34 = (char *)&v33 - v15;
  v17 = type metadata accessor for EventDetailViewModel(0, v8, v7, v16);
  if (!sub_100039E8C(v17))
  {
    sub_10003A5A4(v17);
    v18 = (uint64_t *)(v1 + *(int *)(a1 + 36));
    v19 = *v18;
    if (*v18)
    {
      swift_retain(*v18);
      sub_10003A650(v20, v17);
      swift_release(v19);
      return;
    }
    goto LABEL_9;
  }
  sub_100039F0C(v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    return;
  }
  v21 = v34;
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v34, v14, AssociatedTypeWitness);
  v22 = v33;
  sub_10001D83C(v33);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v8, AssociatedTypeWitness, &unk_1001191E8, &unk_100119228);
  v24 = v37;
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  OpenURLAction.callAsFunction(_:)(v24);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v24, v39);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v22, v36);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = (uint64_t *)(v1 + *(int *)(a1 + 36));
  v27 = *v18;
  if (!*v18)
  {
LABEL_9:
    v30 = v18[1];
    v31 = type metadata accessor for RemoteViewConfiguration();
    v32 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v30, v31, v32);
    __break(1u);
    return;
  }
  v28 = v25;
  v29 = v26;
  swift_retain(*v18);
  sub_10003A8B4(v28, v29, v27, v17);
  swift_bridgeObjectRelease();
  swift_release(v27);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v21, AssociatedTypeWitness);
}

uint64_t sub_1000A0DE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v9 = type metadata accessor for EventDetailViewModel(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a5, a1, v9);
  v11 = type metadata accessor for EventDetailModule(0, a2, a3, v10);
  v12 = (_QWORD *)(a5 + *(int *)(v11 + 36));
  v13 = type metadata accessor for RemoteViewConfiguration();
  v14 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
  *v12 = EnvironmentObject.init()(v13, v14);
  v12[1] = v15;
  v16 = (_QWORD *)(a5 + *(int *)(v11 + 40));
  *v16 = swift_getKeyPath(&unk_100110868);
  v17 = sub_100003E70(&qword_10015D600);
  return swift_storeEnumTagMultiPayload(v16, v17, 0);
}

uint64_t type metadata accessor for EventDetailModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventDetailModule);
}

void sub_1000A0EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[3];

  v5 = type metadata accessor for EventDetailViewModel(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v6 <= 0x3F)
  {
    v9[0] = *(_QWORD *)(v5 - 8) + 64;
    v9[1] = &unk_1001108B8;
    sub_100012368(319);
    if (v8 <= 0x3F)
    {
      v9[2] = *(_QWORD *)(v7 - 8) + 64;
      swift_initStructMetadata(a1, 0, 3, v9, a1 + 32);
    }
  }
}

uint64_t *sub_1000A0F58(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = ((v8 + ((v7 + 8) & ~(unint64_t)v7) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  v10 = type metadata accessor for OpenURLAction(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v12 & 0xF8 | 7;
  v14 = (v12 & 0xF8) + 23;
  if (*(_QWORD *)(v11 + 64) <= 8uLL)
    v15 = 8;
  else
    v15 = *(_QWORD *)(v11 + 64);
  v16 = (v12 | v7) & 0x100000;
  if ((v13 | v7) != 7 || v16 != 0 || v15 + ((v14 + (v9 & 0xFFFFFFFFFFFFFFF8)) & ~v13) + 1 > 0x18)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + (((v13 | v7) + 16) & ~(v13 | v7)));
LABEL_21:
    swift_retain(v19);
    return a1;
  }
  v39 = v10;
  v40 = ~v13;
  v41 = *(_QWORD *)(v10 - 8);
  *a1 = *a2;
  v20 = ((unint64_t)a1 + v7 + 8) & ~(unint64_t)v7;
  v21 = ((unint64_t)a2 + v7 + 8) & ~(unint64_t)v7;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v20, v21, v5);
  v22 = v20 + v8;
  v23 = (v20 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v21 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)v24;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v26 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v23 + 8) = v26;
  *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
  v27 = (v22 + 31) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v21 + v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v29 = *(_QWORD *)(v28 + 8);
  *(_QWORD *)(v27 + 8) = v29;
  *(_BYTE *)(v27 + 16) = *(_BYTE *)(v28 + 16);
  v30 = *(_QWORD *)(v28 + 24);
  *(_QWORD *)(v27 + 24) = v30;
  v31 = (_QWORD *)(((unint64_t)a1 + v9) & 0xFFFFFFFFFFFFFFF8);
  v32 = (uint64_t *)(((unint64_t)a2 + v9) & 0xFFFFFFFFFFFFFFF8);
  v33 = *v32;
  *v31 = *v32;
  v31[1] = v32[1];
  v34 = (_QWORD *)(((unint64_t)v31 + v14) & v40);
  v35 = (uint64_t *)(((unint64_t)v32 + v14) & v40);
  v36 = *((unsigned __int8 *)v35 + v15);
  swift_retain(v25);
  swift_retain(v26);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  swift_retain(v33);
  if (v36 >= 2)
  {
    if (v15 <= 3)
      v37 = v15;
    else
      v37 = 4;
    __asm { BR              X11 }
  }
  if (v36 != 1)
  {
    v19 = *v35;
    *v34 = *v35;
    *((_BYTE *)v34 + v15) = 0;
    goto LABEL_21;
  }
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v41 + 16))(v34, v35, v39);
  *((_BYTE *)v34 + v15) = 1;
  return a1;
}

uint64_t sub_1000A1204(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 8 + a1) & ~v4;
  (*(void (**)(uint64_t))(v3 + 8))(v5);
  v6 = *(_QWORD *)(v3 + 64);
  v7 = v5 + v6;
  v8 = (_QWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*v8);
  swift_release(v8[1]);
  v9 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + 24));
  v10 = (_QWORD *)((a1 + ((v6 + ((v4 + 8) & ~v4) + 31) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*v10);
  v11 = *(_QWORD *)(type metadata accessor for OpenURLAction(0) - 8);
  v12 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  v13 = (_QWORD *)(((unint64_t)v10 + v12 + 16) & ~v12);
  v14 = *(_QWORD *)(v11 + 64);
  if (v14 <= 8)
    v14 = 8;
  v15 = *((unsigned __int8 *)v13 + v14);
  if (v15 >= 2)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X14 }
  }
  if (v15 == 1)
    return (*(uint64_t (**)(void))(v11 + 8))();
  else
    return swift_release(*v13);
}

_QWORD *sub_1000A137C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  uint64_t v34;
  uint64_t v36;
  _QWORD *v37;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = (v7 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v8 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)v11;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v13 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v10 + 8) = v13;
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  v14 = (v7 + v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v8 + v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v16 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v14 + 8) = v16;
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  v17 = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v14 + 24) = v17;
  v18 = ((v9 + ((v6 + 8) & ~v6) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  v19 = (_QWORD *)(((unint64_t)a1 + v18) & 0xFFFFFFFFFFFFFFF8);
  v20 = (uint64_t *)(((unint64_t)a2 + v18) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v20;
  *v19 = *v20;
  v19[1] = v20[1];
  v22 = type metadata accessor for OpenURLAction(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(_DWORD *)(v23 + 80) & 0xF8;
  v25 = v24 + 23;
  v26 = (unint64_t)v19 + v24 + 23;
  v27 = ~v24 & 0xFFFFFFFFFFFFFFF8;
  v36 = v22;
  v37 = (_QWORD *)(v26 & v27);
  v28 = (uint64_t *)(((unint64_t)v20 + v25) & v27);
  if (*(_QWORD *)(v23 + 64) <= 8uLL)
    v29 = 8;
  else
    v29 = *(_QWORD *)(v23 + 64);
  v30 = *((unsigned __int8 *)v28 + v29);
  swift_retain(v12);
  swift_retain(v13);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_retain(v21);
  if (v30 >= 2)
  {
    if (v29 <= 3)
      v31 = v29;
    else
      v31 = 4;
    __asm { BR              X11 }
  }
  if (v30 == 1)
  {
    v32 = v37;
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v23 + 16))(v37, v28, v36);
    v33 = 1;
  }
  else
  {
    v34 = *v28;
    v32 = v37;
    *v37 = *v28;
    swift_retain(v34);
    v33 = 0;
  }
  *((_BYTE *)v32 + v29) = v33;
  return a1;
}

_QWORD *sub_1000A15B0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = v7 + v9;
  v11 = v8 + v9;
  v12 = (v7 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v12;
  v15 = *(_QWORD *)v13;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  swift_retain(v15);
  swift_release(v14);
  v16 = *(_QWORD *)(v13 + 8);
  v17 = *(_QWORD *)(v12 + 8);
  *(_QWORD *)(v12 + 8) = v16;
  swift_retain(v16);
  swift_release(v17);
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  v18 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v20 = *(_QWORD *)(v19 + 8);
  v21 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v18 + 8) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_BYTE *)(v18 + 16) = *(_BYTE *)(v19 + 16);
  v22 = *(_QWORD *)(v19 + 24);
  v23 = *(_QWORD *)(v18 + 24);
  *(_QWORD *)(v18 + 24) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = ((v9 + ((v6 + 8) & ~v6) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  v25 = (uint64_t *)(((unint64_t)a1 + v24) & 0xFFFFFFFFFFFFFFF8);
  v26 = (uint64_t *)(((unint64_t)a2 + v24) & 0xFFFFFFFFFFFFFFF8);
  v27 = *v25;
  v28 = *v26;
  *v25 = *v26;
  swift_retain(v28);
  swift_release(v27);
  v25[1] = v26[1];
  v29 = type metadata accessor for OpenURLAction(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(_DWORD *)(v30 + 80) & 0xF8;
  v32 = v31 + 23;
  v33 = (unint64_t)v25 + v31 + 23;
  v34 = ~v31 & 0xFFFFFFFFFFFFFFF8;
  v35 = (_QWORD *)(v33 & v34);
  v36 = (unint64_t)v26 + v32;
  v37 = (uint64_t *)(v36 & v34);
  if ((v33 & v34) != (v36 & v34))
  {
    v38 = v29;
    if (*(_QWORD *)(v30 + 64) <= 8uLL)
      v39 = 8;
    else
      v39 = *(_QWORD *)(v30 + 64);
    v40 = *((unsigned __int8 *)v35 + v39);
    if (v40 >= 2)
    {
      if (v39 <= 3)
        v41 = v39;
      else
        v41 = 4;
      __asm { BR              X12 }
    }
    if (v40 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v30 + 8))(v35, v29);
    else
      swift_release(*v35);
    v42 = *((unsigned __int8 *)v37 + v39);
    if (v42 >= 2)
    {
      if (v39 <= 3)
        v43 = v39;
      else
        v43 = 4;
      __asm { BR              X12 }
    }
    if (v42 == 1)
    {
      (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v30 + 16))(v35, v37, v38);
      *((_BYTE *)v35 + v39) = 1;
    }
    else
    {
      v44 = *v37;
      *v35 = *v37;
      *((_BYTE *)v35 + v39) = 0;
      swift_retain(v44);
    }
  }
  return a1;
}

_QWORD *sub_1000A189C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  unint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char v29;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = (v7 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v8 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_OWORD *)v11;
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  *(_OWORD *)v10 = v12;
  v13 = (_OWORD *)((v7 + v9 + 31) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_OWORD *)((v8 + v9 + 31) & 0xFFFFFFFFFFFFFFF8);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = ((v9 + ((v6 + 8) & ~v6) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  v17 = (_OWORD *)(((unint64_t)a1 + v16) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_OWORD *)(((unint64_t)a2 + v16) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = *(_QWORD *)(type metadata accessor for OpenURLAction(0) - 8);
  v20 = *(_DWORD *)(v19 + 80) & 0xF8;
  v21 = v20 + 23;
  v22 = (unint64_t)v17 + v20 + 23;
  v23 = ~v20 & 0xFFFFFFFFFFFFFFF8;
  v24 = (_QWORD *)(v22 & v23);
  v25 = (_QWORD *)(((unint64_t)v18 + v21) & v23);
  if (*(_QWORD *)(v19 + 64) <= 8uLL)
    v26 = 8;
  else
    v26 = *(_QWORD *)(v19 + 64);
  v27 = *((unsigned __int8 *)v25 + v26);
  if (v27 >= 2)
  {
    if (v26 <= 3)
      v28 = v26;
    else
      v28 = 4;
    __asm { BR              X13 }
  }
  if (v27 == 1)
  {
    (*(void (**)(_QWORD *))(v19 + 32))(v24);
    v29 = 1;
  }
  else
  {
    v29 = 0;
    *v24 = *v25;
  }
  *((_BYTE *)v24 + v26) = v29;
  return a1;
}

_QWORD *sub_1000A1A60(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  char v39;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = v7 + v9;
  v11 = v8 + v9;
  v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v12;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  swift_release(v14);
  v15 = *(_QWORD *)(v12 + 8);
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
  swift_release(v15);
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  v16 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v18 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  v19 = *(_QWORD *)(v16 + 24);
  *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
  swift_bridgeObjectRelease(v19);
  v20 = ((v9 + ((v6 + 8) & ~v6) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  v21 = (uint64_t *)(((unint64_t)a1 + v20) & 0xFFFFFFFFFFFFFFF8);
  v22 = (uint64_t *)(((unint64_t)a2 + v20) & 0xFFFFFFFFFFFFFFF8);
  v23 = *v21;
  *v21 = *v22;
  swift_release(v23);
  v21[1] = v22[1];
  v24 = type metadata accessor for OpenURLAction(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(_DWORD *)(v25 + 80) & 0xF8;
  v27 = v26 + 23;
  v28 = (unint64_t)v21 + v26 + 23;
  v29 = ~v26 & 0xFFFFFFFFFFFFFFF8;
  v30 = (_QWORD *)(v28 & v29);
  v31 = (unint64_t)v22 + v27;
  v32 = (_QWORD *)(v31 & v29);
  if ((v28 & v29) != (v31 & v29))
  {
    v33 = v24;
    if (*(_QWORD *)(v25 + 64) <= 8uLL)
      v34 = 8;
    else
      v34 = *(_QWORD *)(v25 + 64);
    v35 = *((unsigned __int8 *)v30 + v34);
    if (v35 >= 2)
    {
      if (v34 <= 3)
        v36 = v34;
      else
        v36 = 4;
      __asm { BR              X12 }
    }
    if (v35 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v25 + 8))(v30, v24);
    else
      swift_release(*v30);
    v37 = *((unsigned __int8 *)v32 + v34);
    if (v37 >= 2)
    {
      if (v34 <= 3)
        v38 = v34;
      else
        v38 = 4;
      __asm { BR              X12 }
    }
    if (v37 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v25 + 32))(v30, v32, v33);
      v39 = 1;
    }
    else
    {
      v39 = 0;
      *v30 = *v32;
    }
    *((_BYTE *)v30 + v34) = v39;
  }
  return a1;
}

uint64_t sub_1000A1D20(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v16;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(type metadata accessor for OpenURLAction(0) - 8);
  if (*(_QWORD *)(v9 + 64) <= 8uLL)
    v10 = 8;
  else
    v10 = *(_QWORD *)(v9 + 64);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = *(_QWORD *)(v6 + 64);
  if (a2 <= v8)
    goto LABEL_27;
  v13 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  v14 = v10
      + ((v13 + ((((v12 + ((v11 + 8) & ~v11) + 31) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v13)
      + 1;
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v18 = ((a2 - v8 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v18 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v18 < 2)
    {
LABEL_27:
      v21 = (a1 + v11 + 8) & ~v11;
      if (v7 >= 0x7FFFFFFF)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v21, v7, v5);
      v22 = *(_QWORD *)(((v12 + v21 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v22 >= 0xFFFFFFFF)
        LODWORD(v22) = -1;
      return (v22 + 1);
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_27;
LABEL_18:
  v19 = (v16 - 1) << v15;
  if (v14 > 3)
    v19 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v20 = v14;
    else
      v20 = 4;
    __asm { BR              X11 }
  }
  return v8 + v19 + 1;
}

void sub_1000A1F0C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) <= 0x7FFFFFFFu)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for OpenURLAction(0) - 8);
  if (*(_QWORD *)(v9 + 64) <= 8uLL)
    v10 = 8;
  else
    v10 = *(_QWORD *)(v9 + 64);
  v11 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  v12 = v10
      + ((v11
        + ((((*(_QWORD *)(v7 + 64)
            + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
            + 31) & 0xFFFFFFFFFFFFFFF8)
          + 39) & 0xFFFFFFFFFFFFFFF8)
        + 16) & ~v11)
      + 1;
  if (a3 <= v8)
  {
    v13 = 0;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v8 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = &dword_100000004;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = &_mh_execute_header.magic + 1;
  }
  if (v8 < a2)
  {
    v14 = ~v8 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_1000A2184(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10011A6BC, 1);
}

unint64_t sub_1000A21BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001620F8;
  if (!qword_1001620F8)
  {
    v1 = sub_1000034AC(&qword_1001620D8);
    sub_100007D40(&qword_100162100, &qword_1001620D0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001620F8);
  }
  return result;
}

double sub_1000A2240(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double sub_1000A2260(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  double result;

  if (a4)
  {
    sub_10000C008(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    swift_retain(a5);
    swift_retain(a6);
    swift_retain(a8);
    *(_QWORD *)&result = swift_bridgeObjectRetain(a10).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000A22D0(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 160);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    v4);
  return a1;
}

uint64_t sub_1000A233C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a4)
  {
    sub_10000BFF8(result, a2, a3 & 1);
    swift_bridgeObjectRelease();
    swift_release(a8);
    swift_release(a6);
    swift_release(a5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000A23AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = type metadata accessor for EventDetailModule(0, v5, v6, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v13 = type metadata accessor for EventDetailViewModel(0, v5, v6, v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v10 + *(int *)(v13 + 36), v5);
  v14 = (_QWORD *)(v4 + v10 + *(int *)(v13 + 40));
  swift_release(*v14);
  swift_release(v14[1]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v4 + v10 + *(int *)(v7 + 36)));
  v15 = (_QWORD *)(v4 + v10 + *(int *)(v7 + 40));
  v16 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
  }
  else
  {
    swift_release(*v15);
  }
  return swift_deallocObject(v4, v10 + v11, v9 | 7);
}

void sub_1000A24D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = type metadata accessor for EventDetailModule(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  sub_1000A0A90(v5);
}

uint64_t sub_1000A250C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  double v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;

  v68 = a2;
  v72 = a1;
  v78 = a3;
  v74 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v74);
  v77 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100003E70(&qword_100162190);
  __chkstk_darwin(v64);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100003E70(&qword_100162198);
  __chkstk_darwin(v65);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100003E70(&qword_1001621A0);
  __chkstk_darwin(v66);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100003E70(&qword_1001621A8);
  __chkstk_darwin(v67);
  v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100003E70(&qword_1001621B0);
  __chkstk_darwin(v70);
  v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100003E70(&qword_1001621B8);
  v73 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v71 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100003E70(&qword_1001621C0);
  v19 = __chkstk_darwin(v69);
  v76 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = ButtonStyleConfiguration.label.getter(v19);
  v22 = static Edge.Set.all.getter(v21);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v9, v7, v4);
  v23 = &v9[*(int *)(v64 + 36)];
  *v23 = v22;
  *(_OWORD *)(v23 + 8) = 0u;
  *(_OWORD *)(v23 + 24) = 0u;
  v23[40] = 1;
  v24 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((ButtonStyleConfiguration.isPressed.getter(v24) & 1) != 0)
  {
    v25 = Color.opacity(_:)(0.3);
  }
  else
  {
    v25 = v68;
    swift_retain(v68);
  }
  KeyPath = swift_getKeyPath(&unk_100110990);
  sub_100007ADC((uint64_t)v9, (uint64_t)v11, &qword_100162190);
  v27 = (uint64_t *)&v11[*(int *)(v65 + 36)];
  *v27 = KeyPath;
  v27[1] = v25;
  v28 = sub_100008194((uint64_t)v9, &qword_100162190);
  if ((ButtonStyleConfiguration.isPressed.getter(v28) & 1) != 0)
  {
    v29 = Color.opacity(_:)(0.3);
    v30 = v29;
  }
  else
  {
    v30 = v72;
    swift_retain(v72);
  }
  v31 = static Edge.Set.all.getter(v29);
  sub_100007ADC((uint64_t)v11, (uint64_t)v13, &qword_100162198);
  v32 = &v13[*(int *)(v66 + 36)];
  *(_QWORD *)v32 = v30;
  v32[8] = v31;
  sub_100008194((uint64_t)v11, &qword_100162198);
  v33 = v77;
  v34 = &v77[*(int *)(v74 + 20)];
  v35 = enum case for RoundedCornerStyle.continuous(_:);
  v36 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v34, v35, v36);
  __asm { FMOV            V0.2D, #10.0 }
  *v33 = _Q0;
  v42 = (uint64_t)&v15[*(int *)(v67 + 36)];
  sub_10001BF60((uint64_t)v33, v42);
  *(_WORD *)(v42 + *(int *)(sub_100003E70(&qword_10015E338) + 36)) = 256;
  sub_100007ADC((uint64_t)v13, (uint64_t)v15, &qword_1001621A0);
  sub_10001BFA4((uint64_t)v33);
  v43 = sub_100008194((uint64_t)v13, &qword_1001621A0);
  v44 = static Font.headline.getter(v43);
  v45 = swift_getKeyPath(&unk_100110960);
  sub_100007ADC((uint64_t)v15, (uint64_t)v17, &qword_1001621A8);
  v46 = v70;
  v47 = (uint64_t *)&v17[*(int *)(v70 + 36)];
  *v47 = v45;
  v47[1] = v44;
  v48 = sub_100008194((uint64_t)v15, &qword_1001621A8);
  v49 = static Font.Weight.bold.getter(v48);
  v50 = sub_1000A352C();
  v51 = v71;
  View.fontWeight(_:)(*(_QWORD *)&v49, 0, v46, v50);
  sub_100008194((uint64_t)v17, &qword_1001621B0);
  v52 = swift_getKeyPath(&unk_1001109C0);
  v53 = v73;
  v54 = v75;
  v55 = (uint64_t)v76;
  (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v76, v51, v75);
  v56 = v55 + *(int *)(v69 + 36);
  *(_QWORD *)v56 = v52;
  *(_BYTE *)(v56 + 8) = 1;
  v57 = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v51, v54);
  v58 = static Color.black.getter(v57);
  v59 = Color.opacity(_:)(0.1);
  swift_release(v58);
  v60 = v78;
  sub_100007ADC(v55, v78, &qword_1001621C0);
  v61 = v60 + *(int *)(sub_100003E70(&qword_1001621F0) + 36);
  *(_QWORD *)v61 = v59;
  *(_OWORD *)(v61 + 8) = xmmword_10010BAD0;
  *(_QWORD *)(v61 + 24) = 0x4010000000000000;
  return sub_100008194(v55, &qword_1001621C0);
}

uint64_t sub_1000A2AB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000A250C(*v1, v1[1], a1);
}

__n128 sub_1000A2AB8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  _OWORD v15[9];

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  sub_10000C008(*(_QWORD *)a1, v4, v5);
  swift_bridgeObjectRetain(v6);
  v8 = static Alignment.center.getter(v7);
  sub_1000E546C(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v15, v10, 0.0, 1, 0.0, 1, v8, v9, v3, v4, v5, v6);
  sub_10000BFF8(v3, v4, v5);
  swift_bridgeObjectRelease();
  v11 = v15[7];
  *(_OWORD *)(a2 + 96) = v15[6];
  *(_OWORD *)(a2 + 112) = v11;
  *(_OWORD *)(a2 + 128) = v15[8];
  v12 = v15[3];
  *(_OWORD *)(a2 + 32) = v15[2];
  *(_OWORD *)(a2 + 48) = v12;
  v13 = v15[5];
  *(_OWORD *)(a2 + 64) = v15[4];
  *(_OWORD *)(a2 + 80) = v13;
  result = (__n128)v15[1];
  *(_OWORD *)a2 = v15[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t sub_1000A2BA0()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE v13[16];
  _OWORD *v14;
  __int128 v15;
  _OWORD v16[2];
  __int128 v17;
  __int128 v18;

  v1 = sub_100003E70(&qword_100162178);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = v0[1];
  v16[0] = *v0;
  v16[1] = v5;
  v6 = v0[3];
  v17 = v0[2];
  v18 = v6;
  v7 = v6;
  v14 = v16;
  swift_retain(*((_QWORD *)&v6 + 1));
  v8 = sub_100003E70(&qword_100160AA8);
  v9 = sub_10007BBF4();
  Button.init(action:label:)(v7, *((_QWORD *)&v7 + 1), sub_1000A32F4, v13, v8, v9);
  v15 = v17;
  v10 = sub_100007D40(&qword_100162180, &qword_100162178, (uint64_t)&protocol conformance descriptor for Button<A>);
  v11 = sub_1000A32FC();
  View.buttonStyle<A>(_:)(&v15, v1, &type metadata for LargeButton.LargeButtonStyle, v10, v11);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_1000A2CD4()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_1000A2CF4()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_1000A2D14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100003E70(&qword_10015E8F0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007ADC(a1, (uint64_t)v4, &qword_10015E8F0);
  return EnvironmentValues.textCase.setter(v4);
}

uint64_t sub_1000A2DB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_BYTE *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  v9 = *(_QWORD *)(a1 + 168);
  v10 = *(_QWORD *)(a1 + 192);
  sub_10000C008(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  sub_10000C008(v5, v6, v7);
  swift_bridgeObjectRetain(v8);
  swift_retain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_1000A2E5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_BYTE *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 168);
  sub_10000BFF8(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease();
  swift_release(v2);
  swift_bridgeObjectRelease();
  sub_10000BFF8(v3, v4, v5);
  swift_bridgeObjectRelease();
  swift_release(v6);
  swift_bridgeObjectRelease();
  return a1;
}

double destroy for LargeButton(uint64_t a1)
{
  double result;

  sub_10000BFF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(a1 + 32));
  swift_release(*(_QWORD *)(a1 + 40));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 56)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for LargeButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10000C008(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  v11 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  swift_retain(v11);
  swift_retain(v9);
  return a1;
}

uint64_t assignWithCopy for LargeButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10000C008(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_10000BFF8(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  swift_retain(v11);
  swift_release(v12);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v13;
  swift_retain(v13);
  swift_release(v14);
  v16 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v15;
  swift_retain(v15);
  swift_release(v17);
  return a1;
}

uint64_t assignWithTake for LargeButton(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_10000BFF8(v5, v6, v7);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v8);
  swift_release(*(_QWORD *)(a1 + 40));
  v9 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  swift_release(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for LargeButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LargeButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LargeButton()
{
  return &type metadata for LargeButton;
}

uint64_t sub_1000A31CC()
{
  return sub_10005C954(&qword_100162138, &qword_100162140, (void (*)(void))sub_1000A3200);
}

uint64_t sub_1000A3200()
{
  return sub_10005C954(&qword_100162148, &qword_1001620B8, (void (*)(void))sub_1000A3224);
}

uint64_t sub_1000A3224()
{
  return sub_10005C954(&qword_100162150, &qword_1001620B0, (void (*)(void))sub_1000A3248);
}

unint64_t sub_1000A3248()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162158;
  if (!qword_100162158)
  {
    v1 = sub_1000034AC(&qword_1001620A8);
    sub_100007D40(&qword_100162160, &qword_1001620A0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_100007D40(&qword_100162168, &qword_100162170, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162158);
  }
  return result;
}

uint64_t sub_1000A32E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011A70C, 1);
}

double sub_1000A32F4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_1000A2AB8(*(_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

unint64_t sub_1000A32FC()
{
  unint64_t result;

  result = qword_100162188;
  if (!qword_100162188)
  {
    result = swift_getWitnessTable(&unk_100110A64, &type metadata for LargeButton.LargeButtonStyle);
    atomic_store(result, (unint64_t *)&qword_100162188);
  }
  return result;
}

uint64_t *sub_1000A3344(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for LargeButton.LargeButtonStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

_QWORD *assignWithTake for LargeButton.LargeButtonStyle(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for LargeButton.LargeButtonStyle(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LargeButton.LargeButtonStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LargeButton.LargeButtonStyle()
{
  return &type metadata for LargeButton.LargeButtonStyle;
}

uint64_t sub_1000A34A4()
{
  _QWORD v1[4];

  v1[0] = sub_1000034AC(&qword_100162178);
  v1[1] = &type metadata for LargeButton.LargeButtonStyle;
  v1[2] = sub_100007D40(&qword_100162180, &qword_100162178, (uint64_t)&protocol conformance descriptor for Button<A>);
  v1[3] = sub_1000A32FC();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
}

uint64_t sub_1000A351C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011A734, 1);
}

unint64_t sub_1000A352C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001621C8;
  if (!qword_1001621C8)
  {
    v1 = sub_1000034AC(&qword_1001621B0);
    sub_1000A35B0();
    sub_100007D40(&qword_10015E310, &qword_10015E318, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001621C8);
  }
  return result;
}

unint64_t sub_1000A35B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001621D0;
  if (!qword_1001621D0)
  {
    v1 = sub_1000034AC(&qword_1001621A8);
    sub_1000A3634();
    sub_100007D40(&qword_10015E330, &qword_10015E338, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001621D0);
  }
  return result;
}

unint64_t sub_1000A3634()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001621D8;
  if (!qword_1001621D8)
  {
    v1 = sub_1000034AC(&qword_1001621A0);
    sub_1000A36B8();
    sub_100007D40(&qword_10015E320, &qword_10015E328, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001621D8);
  }
  return result;
}

unint64_t sub_1000A36B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001621E0;
  if (!qword_1001621E0)
  {
    v1 = sub_1000034AC(&qword_100162198);
    sub_1000A373C();
    sub_100007D40(&qword_10015E9F0, &qword_10015E9F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001621E0);
  }
  return result;
}

unint64_t sub_1000A373C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001621E8;
  if (!qword_1001621E8)
  {
    v1 = sub_1000034AC(&qword_100162190);
    sub_100003B3C(&qword_100160860, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001621E8);
  }
  return result;
}

uint64_t sub_1000A37C0()
{
  return sub_10005C954(&qword_1001621F8, &qword_1001621F0, (void (*)(void))sub_1000A37F4);
}

unint64_t sub_1000A37F4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100162200;
  if (!qword_100162200)
  {
    v1 = sub_1000034AC(&qword_1001621C0);
    v2[0] = sub_1000034AC(&qword_1001621B0);
    v2[1] = sub_1000A352C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    sub_100007D40(&qword_100162208, &qword_100162210, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162200);
  }
  return result;
}

uint64_t sub_1000A38A0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000A38D8 + 4 * byte_100110AA0[a1]))(0xD000000000000011, 0x8000000100114D50);
}

uint64_t sub_1000A38D8()
{
  return 0x746E657665;
}

uint64_t sub_1000A38EC()
{
  return 0x747369747261;
}

uint64_t sub_1000A3900()
{
  return 0x65756E6576;
}

uint64_t sub_1000A3914(uint64_t a1)
{
  return a1 + 5;
}

uint64_t sub_1000A392C(char a1)
{
  if ((a1 & 1) != 0)
    return 1701667182;
  else
    return 25705;
}

uint64_t sub_1000A3950(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6449707061;
  else
    return 0x7972746E756F63;
}

uint64_t sub_1000A3984(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65756C6176;
  else
    return 0x6574656D61726170;
}

void sub_1000A39BC(char *a1)
{
  sub_1000F4B80(*a1);
}

void sub_1000A39C8()
{
  char *v0;

  sub_1000481E8(*v0);
}

void sub_1000A39D0(uint64_t a1)
{
  char *v1;

  sub_10004872C(a1, *v1);
}

void sub_1000A39D8(uint64_t a1)
{
  char *v1;

  sub_1000487D8(a1, *v1);
}

unint64_t sub_1000A39E0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000A4B30(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A3A0C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000A38A0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL sub_1000A3A34(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1000A3A4C()
{
  char *v0;

  return sub_1000A392C(*v0);
}

uint64_t sub_1000A3A54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000A4B78(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A3A78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A5080();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A3AA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A5080();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A3AC8(char *a1, char *a2)
{
  return sub_1000F4AE4(*a1, *a2);
}

Swift::Int sub_1000A3AD4()
{
  char *v0;

  return sub_1000482C4(*v0);
}

uint64_t sub_1000A3ADC(uint64_t a1)
{
  char *v1;

  return sub_1000486D8(a1, *v1);
}

Swift::Int sub_1000A3AE4(uint64_t a1)
{
  char *v1;

  return sub_1000488B0(a1, *v1);
}

uint64_t sub_1000A3AEC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10014BC38, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1000A3B48@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000A3950(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000A3B70()
{
  char *v0;

  return sub_1000A3984(*v0);
}

uint64_t sub_1000A3B78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000A4C38(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A3B9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A52FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A3BC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A52FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A3BEC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[10];
  v2 = v0[11];
  v3 = v1;
  if (v2 == 1)
  {
    v4 = v0[8];
    v5 = v0[9];
    swift_bridgeObjectRetain(v5);
    v3 = sub_100049C24(v4, v5);
    v7 = v6;
    swift_bridgeObjectRelease(v5);
    v8 = v0[10];
    v9 = v0[11];
    v0[10] = v3;
    v0[11] = v7;
    swift_bridgeObjectRetain(v7);
    sub_1000A49A4(v8, v9);
  }
  sub_1000A540C(v1, v2);
  return v3;
}

uint64_t sub_1000A3C88(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000A3CC0 + 4 * byte_100110AA5[a1]))(0xD000000000000019, 0x8000000100116D70);
}

uint64_t sub_1000A3CC0()
{
  return 0x65636976726573;
}

uint64_t sub_1000A3CD8()
{
  return 0x7470697263736564;
}

uint64_t sub_1000A3CF8()
{
  return 0x6574497972657571;
}

uint64_t sub_1000A3D14()
{
  unsigned __int8 *v0;

  return sub_1000A3C88(*v0);
}

uint64_t sub_1000A3D1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000A4D20(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000A3D40(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000A3D4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A4960();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A3D74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A4960();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A3D9C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000A49A4(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for RemoteViewConfiguration()
{
  return objc_opt_self(_TtC16EventViewService23RemoteViewConfiguration);
}

uint64_t destroy for RemoteViewConfiguration.QueryItem(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t _s16EventViewService23RemoteViewConfigurationC9QueryItemVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for RemoteViewConfiguration.QueryItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for RemoteViewConfiguration.QueryItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteViewConfiguration.QueryItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteViewConfiguration.QueryItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.QueryItem()
{
  return &type metadata for RemoteViewConfiguration.QueryItem;
}

uint64_t getEnumTagSinglePayload for RemoteViewConfiguration.Service(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteViewConfiguration.Service(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.Service()
{
  return &type metadata for RemoteViewConfiguration.Service;
}

uint64_t sub_1000A3FF0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD v23[2];
  char v24;

  v3 = v1;
  v5 = sub_100003E70(&qword_100162308);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100008170(a1, v9);
  v11 = sub_1000A4960();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RemoteViewConfiguration.CodingKeys, &type metadata for RemoteViewConfiguration.CodingKeys, v11, v9, v10);
  v12 = *(_QWORD *)(v3 + 24);
  v13 = *(_BYTE *)(v3 + 32);
  v23[0] = *(_QWORD *)(v3 + 16);
  v23[1] = v12;
  v24 = v13;
  HIBYTE(v22) = 0;
  v14 = sub_1000A4A40();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v23, (char *)&v22 + 7, v5, &type metadata for RemoteViewConfiguration.Service, v14);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v23[0] = *(_QWORD *)(v3 + 40);
  HIBYTE(v22) = 1;
  v15 = sub_100003E70(&qword_1001622F0);
  v16 = sub_1000A4A84(&qword_100162318, (void (*)(void))sub_1000A4AEC, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v23, (char *)&v22 + 7, v5, v15, v16);
  v17 = *(_QWORD *)(v3 + 48);
  v18 = *(_QWORD *)(v3 + 56);
  LOBYTE(v23[0]) = 2;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v23, v5);
  v19 = *(_QWORD *)(v3 + 64);
  v20 = *(_QWORD *)(v3 + 72);
  LOBYTE(v23[0]) = 3;
  swift_bridgeObjectRetain(v20);
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, v23, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1000A41DC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  char v25;
  char v26;

  v3 = v1;
  v23 = *v1;
  v5 = sub_100003E70(&qword_1001622D8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[8] = 0;
  v1[9] = 0;
  v1[10] = 0;
  v1[11] = 1;
  v9 = a1[3];
  v10 = a1[4];
  sub_100008170(a1, v9);
  v11 = sub_1000A4960();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RemoteViewConfiguration.CodingKeys, &type metadata for RemoteViewConfiguration.CodingKeys, v11, v9, v10);
  if (v2)
  {
    v17 = v23;
    swift_bridgeObjectRelease();
    sub_1000A49A4(v3[10], v3[11]);
    swift_deallocPartialClassInstance(v3, v17, 96, 7);
  }
  else
  {
    v26 = 0;
    v12 = sub_1000A49B8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v24, &type metadata for RemoteViewConfiguration.Service, &v26, v5, &type metadata for RemoteViewConfiguration.Service, v12);
    v13 = v24[1];
    v14 = v25;
    v1[2] = v24[0];
    v1[3] = v13;
    *((_BYTE *)v1 + 32) = v14;
    v15 = sub_100003E70(&qword_1001622F0);
    v26 = 1;
    v16 = sub_1000A4A84(&qword_1001622F8, (void (*)(void))sub_1000A49FC, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v24, v15, &v26, v5, v15, v16);
    v3[5] = v24[0];
    LOBYTE(v24[0]) = 2;
    v3[6] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v24, v5);
    v3[7] = v19;
    LOBYTE(v24[0]) = 3;
    v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v24, v5);
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v3[8] = v20;
    v3[9] = v22;
    swift_bridgeObjectRelease();
  }
  sub_1000055A8(a1);
  return v3;
}

uint64_t sub_1000A4480(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  char v21;

  v18 = a4;
  v8 = sub_100003E70(&qword_100162340);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100008170(a1, v12);
  v14 = sub_1000A5080();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RemoteViewConfiguration.Service.CodingKeys, &type metadata for RemoteViewConfiguration.Service.CodingKeys, v14, v12, v13);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    v20 = v18;
    v19 = 1;
    v15 = sub_1000A5108();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v8, &type metadata for RemoteViewConfiguration.Service.Name, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1000A45BC(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v18 = a4;
  v7 = a2 & 1;
  v8 = sub_100003E70(&qword_100162370);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100008170(a1, v12);
  v14 = sub_1000A52FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RemoteViewConfiguration.QueryItem.CodingKeys, &type metadata for RemoteViewConfiguration.QueryItem.CodingKeys, v14, v12, v13);
  v21 = v7;
  v20 = 0;
  v15 = sub_1000A5384();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v8, &type metadata for RemoteViewConfiguration.QueryItem.Parameter, v15);
  if (!v4)
  {
    v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, v18, &v19, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

_QWORD *sub_1000A46F8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *result;

  v6 = swift_allocObject(v2, 96, 7);
  result = sub_1000A41DC(a1);
  if (!v3)
    *a2 = v6;
  return result;
}

uint64_t sub_1000A474C(_QWORD *a1)
{
  return sub_1000A3FF0(a1);
}

uint64_t sub_1000A476C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000A477C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_1000A4ED4(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1000A47A8(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000A4480(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_1000A47C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A514C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000A4820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A514C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000A486C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1000A5190(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result & 1;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1000A489C(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000A45BC(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000A48B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A53C8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000A4914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A53C8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_1000A4960()
{
  unint64_t result;

  result = qword_1001622E0;
  if (!qword_1001622E0)
  {
    result = swift_getWitnessTable(&unk_100111140, &type metadata for RemoteViewConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001622E0);
  }
  return result;
}

uint64_t sub_1000A49A4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease(a2);
  return result;
}

unint64_t sub_1000A49B8()
{
  unint64_t result;

  result = qword_1001622E8;
  if (!qword_1001622E8)
  {
    result = swift_getWitnessTable(&unk_100110C34, &type metadata for RemoteViewConfiguration.Service);
    atomic_store(result, (unint64_t *)&qword_1001622E8);
  }
  return result;
}

unint64_t sub_1000A49FC()
{
  unint64_t result;

  result = qword_100162300;
  if (!qword_100162300)
  {
    result = swift_getWitnessTable(&unk_100110B94, &type metadata for RemoteViewConfiguration.QueryItem);
    atomic_store(result, (unint64_t *)&qword_100162300);
  }
  return result;
}

unint64_t sub_1000A4A40()
{
  unint64_t result;

  result = qword_100162310;
  if (!qword_100162310)
  {
    result = swift_getWitnessTable(&unk_100110C0C, &type metadata for RemoteViewConfiguration.Service);
    atomic_store(result, (unint64_t *)&qword_100162310);
  }
  return result;
}

uint64_t sub_1000A4A84(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_1000034AC(&qword_1001622F0);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000A4AEC()
{
  unint64_t result;

  result = qword_100162320;
  if (!qword_100162320)
  {
    result = swift_getWitnessTable(&unk_100110B6C, &type metadata for RemoteViewConfiguration.QueryItem);
    atomic_store(result, (unint64_t *)&qword_100162320);
  }
  return result;
}

unint64_t sub_1000A4B30(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10014BBA0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t sub_1000A4B78(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000A4C38(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6574656D61726170 && a2 == 0xE900000000000072;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6574656D61726170, 0xE900000000000072, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000A4D20(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x65636976726573 && a2 == 0xE700000000000000;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65636976726573, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0x6574497972657571 && a2 == 0xEA0000000000736DLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6574497972657571, 0xEA0000000000736DLL, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7470697263736564, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000100116D70)
  {
    swift_bridgeObjectRelease(0x8000000100116D70);
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000100116D70, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1000A4ED4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v3 = sub_100003E70(&qword_100162328);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100008170(a1, v7);
  v9 = sub_1000A5080();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RemoteViewConfiguration.Service.CodingKeys, &type metadata for RemoteViewConfiguration.Service.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_1000055A8(a1);
  }
  else
  {
    BYTE1(v16) = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v16 + 1, v3);
    v12 = v11;
    v15 = 1;
    v13 = sub_1000A50C4();
    swift_bridgeObjectRetain(v12);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for RemoteViewConfiguration.Service.Name, &v15, v3, &type metadata for RemoteViewConfiguration.Service.Name, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_1000055A8(a1);
    swift_bridgeObjectRelease();
  }
  return v8;
}

unint64_t sub_1000A5080()
{
  unint64_t result;

  result = qword_100162330;
  if (!qword_100162330)
  {
    result = swift_getWitnessTable(&unk_1001110F0, &type metadata for RemoteViewConfiguration.Service.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100162330);
  }
  return result;
}

unint64_t sub_1000A50C4()
{
  unint64_t result;

  result = qword_100162338;
  if (!qword_100162338)
  {
    result = swift_getWitnessTable(&unk_100110BE4, &type metadata for RemoteViewConfiguration.Service.Name);
    atomic_store(result, (unint64_t *)&qword_100162338);
  }
  return result;
}

unint64_t sub_1000A5108()
{
  unint64_t result;

  result = qword_100162348;
  if (!qword_100162348)
  {
    result = swift_getWitnessTable(&unk_100110BBC, &type metadata for RemoteViewConfiguration.Service.Name);
    atomic_store(result, (unint64_t *)&qword_100162348);
  }
  return result;
}

unint64_t sub_1000A514C()
{
  unint64_t result;

  result = qword_100162350;
  if (!qword_100162350)
  {
    result = swift_getWitnessTable(&unk_1001110B8, &type metadata for RemoteViewConfiguration.Service.Name);
    atomic_store(result, (unint64_t *)&qword_100162350);
  }
  return result;
}

uint64_t sub_1000A5190(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;

  v3 = sub_100003E70(&qword_100162358);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100008170(a1, v7);
  v9 = sub_1000A52FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RemoteViewConfiguration.QueryItem.CodingKeys, &type metadata for RemoteViewConfiguration.QueryItem.CodingKeys, v9, v7, v8);
  if (!v1)
  {
    v14 = 0;
    v10 = sub_1000A5340();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v15, &type metadata for RemoteViewConfiguration.QueryItem.Parameter, &v14, v3, &type metadata for RemoteViewConfiguration.QueryItem.Parameter, v10);
    v7 = v15;
    v13 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v13, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_1000055A8(a1);
  return v7;
}

unint64_t sub_1000A52FC()
{
  unint64_t result;

  result = qword_100162360;
  if (!qword_100162360)
  {
    result = swift_getWitnessTable(&unk_100111068, &type metadata for RemoteViewConfiguration.QueryItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100162360);
  }
  return result;
}

unint64_t sub_1000A5340()
{
  unint64_t result;

  result = qword_100162368;
  if (!qword_100162368)
  {
    result = swift_getWitnessTable(&unk_100110B44, &type metadata for RemoteViewConfiguration.QueryItem.Parameter);
    atomic_store(result, (unint64_t *)&qword_100162368);
  }
  return result;
}

unint64_t sub_1000A5384()
{
  unint64_t result;

  result = qword_100162378;
  if (!qword_100162378)
  {
    result = swift_getWitnessTable(&unk_100110B1C, &type metadata for RemoteViewConfiguration.QueryItem.Parameter);
    atomic_store(result, (unint64_t *)&qword_100162378);
  }
  return result;
}

unint64_t sub_1000A53C8()
{
  unint64_t result;

  result = qword_100162380;
  if (!qword_100162380)
  {
    result = swift_getWitnessTable(&unk_100111030, &type metadata for RemoteViewConfiguration.QueryItem.Parameter);
    atomic_store(result, (unint64_t *)&qword_100162380);
  }
  return result;
}

uint64_t sub_1000A540C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain(a2);
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.QueryItem.CodingKeys()
{
  return &type metadata for RemoteViewConfiguration.QueryItem.CodingKeys;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.Service.CodingKeys()
{
  return &type metadata for RemoteViewConfiguration.Service.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for RemoteViewConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000A5490 + 4 * byte_100110AAE[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000A54C4 + 4 * byte_100110AA9[v4]))();
}

uint64_t sub_1000A54C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A54CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A54D4);
  return result;
}

uint64_t sub_1000A54E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A54E8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000A54EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A54F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.CodingKeys()
{
  return &type metadata for RemoteViewConfiguration.CodingKeys;
}

uint64_t _s16EventViewService23RemoteViewConfigurationC9QueryItemV9ParameterOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000A555C + 4 * byte_100110AB8[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000A5590 + 4 * byte_100110AB3[v4]))();
}

uint64_t sub_1000A5590(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A5598(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A55A0);
  return result;
}

uint64_t sub_1000A55AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A55B4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000A55B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A55C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.QueryItem.Parameter()
{
  return &type metadata for RemoteViewConfiguration.QueryItem.Parameter;
}

uint64_t getEnumTagSinglePayload for RemoteViewConfiguration.Service.Name(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteViewConfiguration.Service.Name(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000A56B8 + 4 * byte_100110AC2[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000A56EC + 4 * byte_100110ABD[v4]))();
}

uint64_t sub_1000A56EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A56F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A56FCLL);
  return result;
}

uint64_t sub_1000A5708(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A5710);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000A5714(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A571C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.Service.Name()
{
  return &type metadata for RemoteViewConfiguration.Service.Name;
}

unint64_t sub_1000A573C()
{
  unint64_t result;

  result = qword_100162388;
  if (!qword_100162388)
  {
    result = swift_getWitnessTable(&unk_100110D78, &type metadata for RemoteViewConfiguration.Service.Name);
    atomic_store(result, (unint64_t *)&qword_100162388);
  }
  return result;
}

unint64_t sub_1000A5784()
{
  unint64_t result;

  result = qword_100162390;
  if (!qword_100162390)
  {
    result = swift_getWitnessTable(&unk_100110DE0, &type metadata for RemoteViewConfiguration.QueryItem.Parameter);
    atomic_store(result, (unint64_t *)&qword_100162390);
  }
  return result;
}

unint64_t sub_1000A57CC()
{
  unint64_t result;

  result = qword_100162398;
  if (!qword_100162398)
  {
    result = swift_getWitnessTable(&unk_100110E98, &type metadata for RemoteViewConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100162398);
  }
  return result;
}

unint64_t sub_1000A5814()
{
  unint64_t result;

  result = qword_1001623A0;
  if (!qword_1001623A0)
  {
    result = swift_getWitnessTable(&unk_100110F50, &type metadata for RemoteViewConfiguration.Service.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001623A0);
  }
  return result;
}

unint64_t sub_1000A585C()
{
  unint64_t result;

  result = qword_1001623A8;
  if (!qword_1001623A8)
  {
    result = swift_getWitnessTable(&unk_100111008, &type metadata for RemoteViewConfiguration.QueryItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001623A8);
  }
  return result;
}

unint64_t sub_1000A58A4()
{
  unint64_t result;

  result = qword_1001623B0;
  if (!qword_1001623B0)
  {
    result = swift_getWitnessTable(&unk_100110F78, &type metadata for RemoteViewConfiguration.QueryItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001623B0);
  }
  return result;
}

unint64_t sub_1000A58EC()
{
  unint64_t result;

  result = qword_1001623B8;
  if (!qword_1001623B8)
  {
    result = swift_getWitnessTable(&unk_100110FA0, &type metadata for RemoteViewConfiguration.QueryItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001623B8);
  }
  return result;
}

unint64_t sub_1000A5934()
{
  unint64_t result;

  result = qword_1001623C0;
  if (!qword_1001623C0)
  {
    result = swift_getWitnessTable(&unk_100110EC0, &type metadata for RemoteViewConfiguration.Service.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001623C0);
  }
  return result;
}

unint64_t sub_1000A597C()
{
  unint64_t result;

  result = qword_1001623C8;
  if (!qword_1001623C8)
  {
    result = swift_getWitnessTable(&unk_100110EE8, &type metadata for RemoteViewConfiguration.Service.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001623C8);
  }
  return result;
}

unint64_t sub_1000A59C4()
{
  unint64_t result;

  result = qword_1001623D0;
  if (!qword_1001623D0)
  {
    result = swift_getWitnessTable(&unk_100110E08, &type metadata for RemoteViewConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001623D0);
  }
  return result;
}

unint64_t sub_1000A5A0C()
{
  unint64_t result;

  result = qword_1001623D8;
  if (!qword_1001623D8)
  {
    result = swift_getWitnessTable(&unk_100110E30, &type metadata for RemoteViewConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001623D8);
  }
  return result;
}

uint64_t sub_1000A5A54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t KeyPath;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  _QWORD v39[3];

  v3 = sub_100003E70(&qword_10015D400);
  __chkstk_darwin(v3);
  v5 = (char *)&v39[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003E70(&qword_1001624A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v39[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003E70(&qword_1001624A8);
  __chkstk_darwin(v9);
  v11 = (char *)&v39[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003E70((uint64_t *)&unk_1001624B0);
  __chkstk_darwin(v12);
  v14 = (char *)&v39[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v1 + 16);
  KeyPath = swift_getKeyPath(&unk_1001111E0);
  v39[0] = v15;
  v17 = sub_1000A5F44();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v39, KeyPath, v17);
  swift_release(KeyPath);
  v18 = v15 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess(v15 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets, v39, 0, 0);
  sub_10003F4F8(v18, (uint64_t)v5);
  v19 = type metadata accessor for ArtistPromotionalAssets(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v5, 1, v19) == 1)
  {
    v21 = &qword_10015D400;
    v22 = (uint64_t)v5;
LABEL_16:
    sub_100008194(v22, v21);
    goto LABEL_17;
  }
  ArtistPromotionalAssets.promotionalAssets.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v19);
  v23 = type metadata accessor for PromotionalAssets(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v8, 1, v23) == 1)
  {
    v21 = &qword_1001624A0;
    v22 = (uint64_t)v8;
    goto LABEL_16;
  }
  v25 = PromotionalAssets.photoAlbums.getter();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v23);
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 16);
    v27 = type metadata accessor for PromotionalAssets.PhotoAlbum(0);
    v28 = *(_QWORD *)(v27 - 8);
    if (v26)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v28 + 16))(v11, v25 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80)), v27);
      v29 = 0;
    }
    else
    {
      v29 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v11, v29, 1, v27);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v11, 1, v27) == 1)
    {
      v21 = &qword_1001624A8;
      v22 = (uint64_t)v11;
    }
    else
    {
      v30 = PromotionalAssets.PhotoAlbum.photos.getter();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v27);
      v31 = *(_QWORD *)(v30 + 16);
      v32 = type metadata accessor for PromotionalAssets.PhotoAlbum.Photo(0);
      v33 = *(_QWORD *)(v32 - 8);
      if (v31)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v33 + 16))(v14, v30 + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80)), v32);
        v34 = 0;
      }
      else
      {
        v34 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v14, v34, 1, v32);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v14, 1, v32) != 1)
      {
        PromotionalAssets.PhotoAlbum.Photo.url.getter();
        (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v32);
        v37 = type metadata accessor for URL(0);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(a1, 0, 1, v37);
      }
      v21 = (uint64_t *)&unk_1001624B0;
      v22 = (uint64_t)v14;
    }
    goto LABEL_16;
  }
LABEL_17:
  v35 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(a1, 1, 1, v35);
}

uint64_t sub_1000A5E24()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  v1 = (char *)v0 + OBJC_IVAR____TtC16EventViewService31PromotionalAssetsEntryViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000A5E7C()
{
  return type metadata accessor for PromotionalAssetsEntryViewModel(0);
}

uint64_t type metadata accessor for PromotionalAssetsEntryViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100162410;
  if (!qword_100162410)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PromotionalAssetsEntryViewModel);
  return result;
}

uint64_t sub_1000A5EC0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_1000A5F44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D408;
  if (!qword_10015D408)
  {
    v1 = type metadata accessor for PromotionalAssetsController(255);
    result = swift_getWitnessTable(&unk_10010C7E8, v1);
    atomic_store(result, &qword_10015D408);
  }
  return result;
}

uint64_t type metadata accessor for CalendarSheet.CalendarCoordinator()
{
  return objc_opt_self(_TtCV16EventViewService13CalendarSheet19CalendarCoordinator);
}

void destroy for CalendarSheet(uint64_t a1)
{

  if (*(_QWORD *)(a1 + 16))
    swift_release(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for CalendarSheet(_QWORD *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _OWORD *v7;
  id v8;
  id v9;
  uint64_t v10;

  v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v7 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  v8 = v4;
  v9 = v5;
  if (v6)
  {
    v10 = *(_QWORD *)(a2 + 24);
    a1[2] = v6;
    a1[3] = v10;
    swift_retain(v10);
  }
  else
  {
    *((_OWORD *)a1 + 1) = *v7;
  }
  return a1;
}

uint64_t assignWithCopy for CalendarSheet(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  v10 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 16))
  {
    if (v10)
    {
      v13 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 24) = v13;
      swift_retain(v13);
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    return a1;
  }
  if (!v10)
  {
    swift_release(*(_QWORD *)(a1 + 24));
    goto LABEL_7;
  }
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  swift_retain(v11);
  swift_release(v12);
  return a1;
}

uint64_t assignWithTake for CalendarSheet(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 16))
  {
    if (v5)
    {
      v8 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v8;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    return a1;
  }
  if (!v5)
  {
    swift_release(*(_QWORD *)(a1 + 24));
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalendarSheet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CalendarSheet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalendarSheet()
{
  return &type metadata for CalendarSheet;
}

id sub_1000A62FC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v7;

  v1 = *v0;
  v2 = v0[1];
  v3 = objc_msgSend(objc_allocWithZone((Class)EKEventEditViewController), "init");
  v4 = sub_100003E70(qword_100162560);
  UIViewControllerRepresentableContext.coordinator.getter(&v7, v4);
  v5 = v7;
  objc_msgSend(v3, "setEditViewDelegate:", v7);

  objc_msgSend(v3, "setEventStore:", v2);
  objc_msgSend(v3, "setEvent:", v1);
  return v3;
}

id sub_1000A63B0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  uint64_t *v7;
  id result;
  objc_super v9;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = (objc_class *)type metadata accessor for CalendarSheet.CalendarCoordinator();
  v6 = (char *)objc_allocWithZone(v5);
  v7 = (uint64_t *)&v6[OBJC_IVAR____TtCV16EventViewService13CalendarSheet19CalendarCoordinator_completionHandler];
  *v7 = v4;
  v7[1] = v3;
  sub_1000075F4(v4, v3);
  v9.receiver = v6;
  v9.super_class = v5;
  result = objc_msgSendSuper2(&v9, "init");
  *a1 = result;
  return result;
}

uint64_t sub_1000A642C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A64F0();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000A647C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A64F0();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000A64CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A64F0();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_1000A64F0()
{
  unint64_t result;

  result = qword_100162558;
  if (!qword_100162558)
  {
    result = swift_getWitnessTable(&unk_100111240, &type metadata for CalendarSheet);
    atomic_store(result, (unint64_t *)&qword_100162558);
  }
  return result;
}

uint64_t sub_1000A6534@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  uint64_t v28;

  v18 = *a1;
  WitnessTable = swift_getWitnessTable(&unk_100113278, *a1);
  Bindable<A>.init(wrappedValue:)(a1, v18, WitnessTable);
  v21 = (int *)type metadata accessor for TourPhotosView(0, *(_QWORD *)(v18 + 80), *(_QWORD *)(v18 + 88), v20);
  v22 = a8 + v21[9];
  *(_QWORD *)v22 = a2;
  *(_QWORD *)(v22 + 8) = a3;
  *(_QWORD *)(v22 + 16) = a4;
  *(_BYTE *)(v22 + 24) = a5 & 1;
  v23 = a8 + v21[10];
  *(_QWORD *)v23 = a6;
  *(_QWORD *)(v23 + 8) = a7;
  *(double *)(v23 + 16) = a9;
  v24 = (uint64_t *)(a8 + v21[11]);
  v25 = type metadata accessor for RemoteViewConfiguration();
  v26 = sub_10000ACDC();
  result = EnvironmentObject.init()(v25, v26);
  *v24 = result;
  v24[1] = v28;
  return result;
}

uint64_t type metadata accessor for TourPhotosView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TourPhotosView);
}

uint64_t sub_1000A6628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  _QWORD v8[4];

  v5 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  result = type metadata accessor for Bindable(319, v5);
  if (v7 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(result - 8) + 64;
    v8[1] = &unk_100111340;
    v8[2] = &unk_100111358;
    v8[3] = &unk_100111370;
    swift_initStructMetadata(a1, 0, 4, v8, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_1000A66BC(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = a1;
  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    v5 = (uint64_t *)(v24 + ((v6 + 16) & ~(unint64_t)v6));
  }
  else
  {
    v8 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
    v9 = type metadata accessor for Bindable(0, v8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v5, a2, v9);
    v10 = *(int *)(a3 + 36);
    v11 = *(int *)(a3 + 40);
    v12 = (char *)v5 + v10;
    v13 = (char *)a2 + v10;
    v14 = *(_QWORD *)v13;
    v15 = *((_QWORD *)v13 + 1);
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *((_QWORD *)v12 + 1) = v15;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
    v12[24] = v13[24];
    v16 = (uint64_t *)((char *)v5 + v11);
    v17 = (uint64_t *)((char *)a2 + v11);
    v18 = *v17;
    v19 = v17[1];
    *v16 = *v17;
    v16[1] = v19;
    v16[2] = v17[2];
    v20 = *(int *)(a3 + 44);
    v21 = (uint64_t *)((char *)v5 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    v24 = *v22;
    v23 = v22[1];
    *v21 = v24;
    v21[1] = v23;
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v18);
    swift_retain(v19);
  }
  swift_retain(v24);
  return v5;
}

double sub_1000A67C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  double result;

  v6 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v7 = type metadata accessor for Bindable(0, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  v8 = (_QWORD *)(a1 + *(int *)(a2 + 36));
  swift_release(*v8);
  swift_release(v8[1]);
  v9 = (_QWORD *)(a1 + *(int *)(a2 + 40));
  swift_release(*v9);
  swift_release(v9[1]);
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 44))).n128_u64[0];
  return result;
}

uint64_t sub_1000A6850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v7 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
  v9 = *(int *)(a3 + 36);
  v10 = *(int *)(a3 + 40);
  v11 = a1 + v9;
  v12 = (uint64_t *)(a2 + v9);
  v13 = *v12;
  v14 = v12[1];
  *(_QWORD *)v11 = *v12;
  *(_QWORD *)(v11 + 8) = v14;
  *(_QWORD *)(v11 + 16) = v12[2];
  *(_BYTE *)(v11 + 24) = *((_BYTE *)v12 + 24);
  v15 = (uint64_t *)(a1 + v10);
  v16 = (uint64_t *)(a2 + v10);
  v17 = *v16;
  v18 = v16[1];
  *v15 = *v16;
  v15[1] = v18;
  v15[2] = v16[2];
  v19 = *(int *)(a3 + 44);
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  *v20 = v23;
  v20[1] = v22;
  swift_retain(v13);
  swift_retain(v14);
  swift_retain(v17);
  swift_retain(v18);
  swift_retain(v23);
  return a1;
}

uint64_t sub_1000A692C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  v7 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(a1, a2, v8);
  v9 = *(int *)(a3 + 36);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = *(_QWORD *)(a1 + v9);
  v13 = *(_QWORD *)(a2 + v9);
  *(_QWORD *)(a1 + v9) = v13;
  swift_retain(v13);
  swift_release(v12);
  v14 = *(_QWORD *)(v11 + 8);
  v15 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v10 + 8) = v14;
  swift_retain(v14);
  swift_release(v15);
  v16 = *(_QWORD *)(v11 + 16);
  *(_BYTE *)(v10 + 24) = *(_BYTE *)(v11 + 24);
  *(_QWORD *)(v10 + 16) = v16;
  v17 = *(int *)(a3 + 40);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a1 + v17);
  v21 = *(_QWORD *)(a2 + v17);
  *(_QWORD *)(a1 + v17) = v21;
  swift_retain(v21);
  swift_release(v20);
  v22 = *(_QWORD *)(v19 + 8);
  v23 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v18 + 8) = v22;
  swift_retain(v22);
  swift_release(v23);
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v19 + 16);
  v24 = *(int *)(a3 + 44);
  v25 = a1 + v24;
  v26 = (uint64_t *)(a2 + v24);
  v27 = *(_QWORD *)(a1 + v24);
  v28 = *v26;
  *(_QWORD *)(a1 + v24) = *v26;
  swift_retain(v28);
  swift_release(v27);
  *(_QWORD *)(v25 + 8) = v26[1];
  return a1;
}

uint64_t sub_1000A6A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v7 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
  v9 = *(int *)(a3 + 36);
  v10 = *(int *)(a3 + 40);
  v11 = (_OWORD *)(a1 + v9);
  v12 = (_OWORD *)(a2 + v9);
  *v11 = *v12;
  *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)((char *)v12 + 9);
  v13 = a1 + v10;
  v14 = a2 + v10;
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_OWORD *)(a1 + *(int *)(a3 + 44)) = *(_OWORD *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t sub_1000A6AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v7 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(a1, a2, v8);
  v9 = *(int *)(a3 + 36);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = *(_QWORD *)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  swift_release(v12);
  v13 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  swift_release(v13);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
  *(_BYTE *)(v10 + 24) = *(_BYTE *)(v11 + 24);
  v14 = *(int *)(a3 + 40);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_release(v17);
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  swift_release(v18);
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
  v19 = *(int *)(a3 + 44);
  v20 = a1 + v19;
  v21 = (_QWORD *)(a2 + v19);
  v22 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *v21;
  swift_release(v22);
  *(_QWORD *)(v20 + 8) = v21[1];
  return a1;
}

uint64_t sub_1000A6BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A6BF8);
}

uint64_t sub_1000A6BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v7 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, a2, v8);
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 36) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1000A6C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A6C94);
}

uint64_t sub_1000A6C94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v8 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a4);
  result = type metadata accessor for Bindable(0, v8);
  v10 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1000A6D20(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10011A974, 1);
}

uint64_t sub_1000A6D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  Bindable.wrappedValue.getter(&v7, v5);
  return v7;
}

uint64_t sub_1000A6D90()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100003E70(&qword_100162680);
  Binding.wrappedValue.getter(v0);
  return v2;
}

uint64_t sub_1000A6DF0()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100003E70(&qword_100162680);
  Binding.projectedValue.getter(v0);
  return v2;
}

double sub_1000A6E54()
{
  uint64_t v0;
  double v2;

  v0 = sub_100003E70(&qword_100160070);
  Binding.wrappedValue.getter(v0);
  return v2;
}

uint64_t sub_1000A6EA8(uint64_t a1, double a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v3 = (_QWORD *)(v2 + *(int *)(a1 + 40));
  v4 = v3[1];
  v5 = v3[2];
  v8[1] = *v3;
  v8[2] = v4;
  v8[3] = v5;
  *(double *)v8 = a2;
  v6 = sub_100003E70(&qword_100160070);
  return Binding.wrappedValue.setter(v8, v6);
}

uint64_t sub_1000A6F00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  void *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char *v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, uint64_t);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  void *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t OpaqueTypeConformance2;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD v199[6];
  _QWORD v200[6];
  char v201[16];
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  void *v219;
  void *v220;

  v196 = a2;
  v197 = a1;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64);
  v194 = *(_QWORD *)(a1 - 8);
  v195 = v3;
  __chkstk_darwin(a1);
  v193 = (char *)&v145 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PagingScrollTargetBehavior(0);
  v192 = *(_QWORD *)(v5 - 8);
  v6 = (void *)v5;
  __chkstk_darwin(v5);
  v183 = (char *)&v145 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = *(_QWORD *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Int, v198, "offset element ", 0);
  v9 = type metadata accessor for Array(255, TupleTypeMetadata2);
  v10 = sub_1000034AC(&qword_1001625F0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  v216 = v9;
  v217 = &type metadata for Int;
  v218 = v10;
  v219 = (void *)WitnessTable;
  v220 = &protocol witness table for Int;
  v12 = type metadata accessor for ForEach(255, &v216);
  v215 = sub_100007D40(&qword_1001625F8, &qword_1001625F0, (uint64_t)&protocol conformance descriptor for AsyncImage<A>);
  v13 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v12);
  v14 = type metadata accessor for HStack(255, v12, v13);
  v15 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v14);
  v216 = v14;
  v217 = (void *)v15;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v216, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v174 = OpaqueTypeMetadata2;
  v216 = v14;
  v217 = (void *)v15;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v216, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v17 = type metadata accessor for ScrollView(0, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v180 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v170 = (char *)&v145 - v18;
  v19 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v17);
  v216 = v17;
  v217 = v6;
  v159 = v6;
  v218 = v19;
  v219 = &protocol witness table for PagingScrollTargetBehavior;
  v20 = v19;
  v160 = v19;
  v21 = swift_getOpaqueTypeMetadata2(0, &v216, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v184 = *(_QWORD *)(v21 - 8);
  v22 = v21;
  __chkstk_darwin(v21);
  v158 = (char *)&v145 - v23;
  v216 = v17;
  v217 = v6;
  v218 = v20;
  v219 = &protocol witness table for PagingScrollTargetBehavior;
  v24 = swift_getOpaqueTypeConformance2(&v216, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v216 = v22;
  v217 = &type metadata for Int;
  v25 = v22;
  v162 = v22;
  v163 = v24;
  v218 = v24;
  v219 = &protocol witness table for Int;
  v26 = v24;
  v27 = swift_getOpaqueTypeMetadata2(0, &v216, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v181 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v161 = (char *)&v145 - v28;
  v216 = v25;
  v217 = &type metadata for Int;
  v218 = v26;
  v219 = &protocol witness table for Int;
  v29 = swift_getOpaqueTypeConformance2(&v216, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v216 = v27;
  v217 = (void *)v29;
  v30 = v27;
  v146 = v27;
  v147 = v29;
  v31 = (void *)v29;
  v32 = swift_getOpaqueTypeMetadata2(0, &v216, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v185 = *(_QWORD *)(v32 - 8);
  v177 = v32;
  __chkstk_darwin(v32);
  v164 = (char *)&v145 - v33;
  v34 = sub_1000034AC(&qword_100162600);
  v35 = type metadata accessor for ModifiedContent(0, v32, v34);
  v187 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v171 = (char *)&v145 - v36;
  v151 = v35;
  v37 = type metadata accessor for ModifiedContent(0, v35, &type metadata for _FrameLayout);
  v186 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v173 = (char *)&v145 - v38;
  v39 = sub_1000034AC(&qword_100161328);
  v152 = v37;
  v40 = type metadata accessor for ModifiedContent(0, v37, v39);
  v188 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v172 = (char *)&v145 - v41;
  v42 = sub_1000034AC(&qword_100162608);
  v154 = v40;
  v43 = type metadata accessor for ModifiedContent(0, v40, v42);
  v189 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v179 = (char *)&v145 - v44;
  v156 = v43;
  v45 = type metadata accessor for ModifiedContent(0, v43, &type metadata for _PaddingLayout);
  v190 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v182 = (char *)&v145 - v46;
  v47 = sub_1000034AC(&qword_100162610);
  v169 = v47;
  v216 = v30;
  v217 = v31;
  v48 = swift_getOpaqueTypeConformance2(&v216, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v148 = v48;
  v49 = sub_100007D40(&qword_100162618, &qword_100162600, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v213 = v48;
  v214 = v49;
  v150 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v35);
  v211 = v150;
  v212 = &protocol witness table for _FrameLayout;
  v50 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v37);
  v149 = v50;
  v51 = sub_100007D40(&qword_100161320, &qword_100161328, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
  v209 = v50;
  v210 = v51;
  v52 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v40);
  v153 = v52;
  v53 = sub_100007D40(&qword_100162620, &qword_100162608, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  v207 = v52;
  v208 = v53;
  v155 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v43);
  v205 = v155;
  v206 = &protocol witness table for _PaddingLayout;
  v165 = v45;
  v54 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v45);
  v167 = v54;
  v166 = sub_1000AAC4C();
  v216 = v45;
  v217 = (void *)v47;
  v218 = v54;
  v219 = (void *)v166;
  v176 = swift_getOpaqueTypeMetadata2(0, &v216, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v178 = *(_QWORD *)(v176 - 8);
  v55 = __chkstk_darwin(v176);
  v157 = (char *)&v145 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __chkstk_darwin(v55);
  v168 = (uint64_t)&v145 - v58;
  v59 = static Axis.Set.horizontal.getter(v57);
  v60 = v197;
  v61 = v198;
  v145 = *(_QWORD *)(v197 + 24);
  v202 = v198;
  v203 = v145;
  v62 = v191;
  v204 = v191;
  v63 = v170;
  v64 = ScrollView.init(_:showsIndicators:content:)(v59, 0, sub_1000AACA8, v201, v174, OpaqueTypeConformance2);
  v65 = v183;
  PagingScrollTargetBehavior.init()(v64);
  v67 = v158;
  v66 = v159;
  View.scrollTargetBehavior<A>(_:)(v65, v17, v159, v160, &protocol witness table for PagingScrollTargetBehavior);
  (*(void (**)(char *, void *))(v192 + 8))(v65, v66);
  (*(void (**)(char *, uint64_t))(v180 + 8))(v63, v17);
  v68 = v62;
  v69 = sub_1000A6DF0();
  v71 = v70;
  v216 = v69;
  v217 = v70;
  v218 = v72;
  LOBYTE(v219) = v73 & 1;
  v75 = v161;
  v74 = v162;
  View.scrollPosition<A>(id:anchor:)(&v216, 0, 0, 1, v162, &type metadata for Int, v163, &protocol witness table for Int);
  swift_release(v71);
  v76 = swift_release(v69);
  (*(void (**)(char *, uint64_t, __n128))(v184 + 8))(v67, v74, v76);
  v77 = v68;
  v81 = sub_1000A6D54(v60, v78, v79, v80);
  LOBYTE(v69) = sub_1000D8088();
  swift_release(v81);
  v82 = v164;
  v83 = v146;
  View.scrollDisabled(_:)((v69 & 1) == 0, v146, v147);
  v84 = (*(uint64_t (**)(char *, uint64_t))(v181 + 8))(v75, v83);
  v200[2] = v61;
  v85 = v145;
  v200[3] = v145;
  v200[4] = v77;
  v86 = static Alignment.center.getter(v84);
  v88 = v87;
  v89 = sub_100003E70(&qword_100162630);
  v90 = sub_100007D40(&qword_100162638, &qword_100162630, (uint64_t)&protocol conformance descriptor for AsyncImage<A>);
  v91 = v171;
  v92 = v177;
  View.background<A>(alignment:content:)(v86, v88, sub_1000AACB4, v200, v177, v89, v148, v90);
  (*(void (**)(char *, uint64_t))(v185 + 8))(v82, v92);
  v93 = v197;
  v97 = sub_1000A6D54(v197, v94, v95, v96);
  v98 = *(_QWORD *)(v97 + 64);
  swift_release(v97);
  v100 = static Alignment.center.getter(v99);
  v101 = v173;
  v102 = v151;
  View.frame(width:height:alignment:)(0, 1, v98, 0, v100, v103, v151, v150);
  (*(void (**)(char *, uint64_t))(v187 + 8))(v91, v102);
  v104 = v172;
  v105 = v152;
  View.clipped(antialiased:)(0, v152, v149);
  v106 = (*(uint64_t (**)(char *, uint64_t))(v186 + 8))(v101, v105);
  v107 = v198;
  v199[2] = v198;
  v199[3] = v85;
  v108 = v85;
  v199[4] = v77;
  v109 = static Alignment.center.getter(v106);
  v111 = v110;
  v112 = sub_100003E70(&qword_100162640);
  v113 = sub_1000AACCC();
  v114 = v179;
  v115 = v111;
  v116 = v154;
  View.overlay<A>(alignment:content:)(v109, v115, sub_1000AACC0, v199, v154, v112, v153, v113);
  v117 = (*(uint64_t (**)(char *, uint64_t))(v188 + 8))(v104, v116);
  v118 = static Edge.Set.bottom.getter(v117);
  v119 = v93;
  v123 = sub_1000A6D54(v93, v120, v121, v122);
  LODWORD(v109) = *(unsigned __int8 *)(v123 + 72);
  swift_release(v123);
  if ((_DWORD)v109)
    v124 = 0xC042000000000000;
  else
    v124 = 0;
  v125 = v182;
  v126 = v118;
  v127 = v156;
  View.padding(_:_:)(v126, v124, 0, v156, v155);
  (*(void (**)(char *, uint64_t))(v189 + 8))(v114, v127);
  v216 = sub_1000A6D90();
  LOBYTE(v217) = v128 & 1;
  v130 = v193;
  v129 = v194;
  (*(void (**)(char *, uint64_t, uint64_t))(v194 + 16))(v193, v77, v119);
  v131 = *(unsigned __int8 *)(v129 + 80);
  v132 = v129;
  v133 = (v131 + 32) & ~v131;
  v134 = swift_allocObject(&unk_100152018, v133 + v195, v131 | 7);
  *(_QWORD *)(v134 + 16) = v107;
  *(_QWORD *)(v134 + 24) = v108;
  (*(void (**)(uint64_t, char *, uint64_t))(v132 + 32))(v134 + v133, v130, v119);
  v135 = (uint64_t)v157;
  v137 = v165;
  v136 = (void *)v166;
  v138 = (void *)v169;
  v139 = v167;
  View.onChange<A>(of:initial:_:)(&v216, 0, sub_1000AAE2C, v134, v165, v169, v167, v166);
  v140 = swift_release(v134);
  (*(void (**)(char *, uint64_t, __n128))(v190 + 8))(v125, v137, v140);
  v216 = v137;
  v217 = v138;
  v218 = v139;
  v219 = v136;
  swift_getOpaqueTypeConformance2(&v216, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v141 = v168;
  v142 = v176;
  sub_1000F257C(v135, v176, v168);
  v143 = *(void (**)(uint64_t, uint64_t))(v178 + 8);
  v143(v135, v142);
  sub_1000E3B88(v141, v142, v196);
  return ((uint64_t (*)(uint64_t, uint64_t))v143)(v141, v142);
}

uint64_t sub_1000A7A7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t WitnessTable;
  void *v36;

  v24 = a1;
  v25 = a3;
  v26 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Int, a2, "offset element ", 0);
  v32 = type metadata accessor for Array(255, TupleTypeMetadata2);
  v33 = &type metadata for Int;
  v34 = sub_1000034AC(&qword_1001625F0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v32);
  v36 = &protocol witness table for Int;
  v6 = type metadata accessor for ForEach(255, &v32);
  v31 = sub_100007D40(&qword_1001625F8, &qword_1001625F0, (uint64_t)&protocol conformance descriptor for AsyncImage<A>);
  v7 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v6);
  v8 = type metadata accessor for HStack(0, v6, v7);
  v23 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - v9;
  v11 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v8);
  v32 = v8;
  v33 = (void *)v11;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v32, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v13 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v14 = __chkstk_darwin(OpaqueTypeMetadata2);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v23 - v18;
  v28 = a2;
  v29 = v25;
  v30 = v24;
  v20 = static VerticalAlignment.center.getter(v17);
  HStack.init(alignment:spacing:content:)(v20, 0, 0, sub_1000AB78C, v27, v6, v7);
  View.scrollTargetLayout(isEnabled:)(1, v8, v11);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v8);
  v32 = v8;
  v33 = (void *)v11;
  swift_getOpaqueTypeConformance2(&v32, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  sub_1000F257C((uint64_t)v16, OpaqueTypeMetadata2, (uint64_t)v19);
  v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v16, OpaqueTypeMetadata2);
  sub_1000E3B88((uint64_t)v19, OpaqueTypeMetadata2, v26);
  return ((uint64_t (*)(char *, uint64_t))v21)(v19, OpaqueTypeMetadata2);
}

uint64_t sub_1000A7CF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t TupleTypeMetadata2;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t WitnessTable;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[6];

  v38 = a3;
  v35 = a1;
  v44 = a5;
  v6 = type metadata accessor for TourPhotosView(0, a2, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  v39 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v37 = (char *)&v35 - v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Int, a2, "offset element ", 0);
  v9 = type metadata accessor for Array(255, TupleTypeMetadata2);
  v42 = v9;
  v10 = sub_1000034AC(&qword_1001625F0);
  v41 = v10;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  v49[0] = v9;
  v49[1] = &type metadata for Int;
  v49[2] = v10;
  v49[3] = WitnessTable;
  v49[4] = &protocol witness table for Int;
  v11 = type metadata accessor for ForEach(0, v49);
  v43 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v35 - v15;
  v20 = sub_1000A6D54(v6, v17, v18, v19);
  v21 = *(_QWORD *)(v20 + 32);
  swift_bridgeObjectRetain(v21);
  swift_release(v20);
  v48 = v21;
  v22 = type metadata accessor for Array(0, a2);
  v23 = swift_getWitnessTable(&protocol conformance descriptor for [A], v22);
  Sequence.enumerated()(v49, v22, v23);
  swift_bridgeObjectRelease();
  v48 = v49[0];
  v24 = type metadata accessor for EnumeratedSequence(0, v22, v23);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for EnumeratedSequence<A>, v24);
  v49[0] = Array.init<A>(_:)(&v48, TupleTypeMetadata2, v24, v25);
  v26 = v38;
  v45 = a2;
  v46 = v38;
  TupleTypeMetadata2 = swift_getKeyPath(&unk_1001113E8);
  v27 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v37, v35, v6);
  v28 = *(unsigned __int8 *)(v7 + 80);
  v29 = (v28 + 32) & ~v28;
  v30 = swift_allocObject(&unk_100152068, v29 + v39, v28 | 7);
  *(_QWORD *)(v30 + 16) = a2;
  *(_QWORD *)(v30 + 24) = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v30 + v29, v27, v6);
  v31 = (_QWORD *)swift_allocObject(&unk_100152090, 48, 7);
  v31[2] = a2;
  v31[3] = v26;
  v31[4] = sub_1000AB79C;
  v31[5] = v30;
  v32 = sub_100007D40(&qword_1001625F8, &qword_1001625F0, (uint64_t)&protocol conformance descriptor for AsyncImage<A>);
  ForEach<>.init(_:id:content:)(v49, TupleTypeMetadata2, sub_1000AB830, v31, v42, v41, WitnessTable, &protocol witness table for Int, v32);
  v47 = v32;
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v11);
  sub_1000F257C((uint64_t)v14, v11, (uint64_t)v16);
  v33 = *(void (**)(char *, uint64_t))(v43 + 8);
  v33(v14, v11);
  sub_1000E3B88((uint64_t)v16, v11, v44);
  return ((uint64_t (*)(char *, uint64_t))v33)(v16, v11);
}

uint64_t sub_1000A805C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];

  v25[1] = a4;
  v7 = type metadata accessor for TourPhotosView(0, a2, a3, a2);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v11 = (char *)v25 - v10;
  v12 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v12);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  v15 = type metadata accessor for URL(0);
  v16 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 0, 1, v15);
  v17 = static Animation.easeInOut.getter(v16);
  v18 = Transaction.init(animation:)(v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v19 = *(unsigned __int8 *)(v8 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = swift_allocObject(&unk_1001520B8, v20 + v9, v19 | 7);
  *(_QWORD *)(v21 + 16) = a2;
  *(_QWORD *)(v21 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v21 + v20, v11, v7);
  v22 = sub_100003E70(&qword_100162760);
  v23 = sub_1000AB4C8(&qword_100162768, &qword_100162760, (void (*)(void))sub_1000AB9E8);
  return AsyncImage.init(url:scale:transaction:content:)(v14, v18, sub_1000AB980, v21, v22, v23, 1.0);
}

uint64_t sub_1000A8210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(char *);
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v152;
  __int128 v153;
  uint64_t v154;
  void (*v155)(char *, char *, uint64_t);
  uint64_t v156;
  unint64_t v157;
  char *v158;
  uint64_t (*v159)(char *, uint64_t);
  uint64_t v160;
  uint64_t v161;
  void (*v162)(char *);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  _OWORD v197[3];
  _BYTE v198[32];
  __int128 v199;

  v191 = a4;
  v190 = a3;
  *(_QWORD *)&v192 = a2;
  v187 = a5;
  v161 = sub_100003E70(&qword_100162718);
  v160 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v159 = (uint64_t (*)(char *, uint64_t))((char *)&v153 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v183 = sub_100003E70(&qword_100162828);
  v7 = __chkstk_darwin(v183);
  v158 = (char *)&v153 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v162 = (void (*)(char *))((char *)&v153 - v9);
  v188 = sub_100003E70(&qword_100162830);
  __chkstk_darwin(v188);
  v186 = (uint64_t)&v153 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_100003E70(&qword_100162838);
  __chkstk_darwin(v180);
  v181 = (uint64_t)&v153 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = sub_100003E70(&qword_100162778);
  __chkstk_darwin(v189);
  v182 = (char *)&v153 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_100003E70(&qword_100162840);
  __chkstk_darwin(v175);
  v176 = (uint64_t)&v153 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = sub_100003E70(&qword_100162848);
  __chkstk_darwin(v174);
  v177 = (uint64_t)&v153 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Image.ResizingMode(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v153 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = sub_100003E70(&qword_100162730);
  v163 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166);
  v20 = (char *)&v153 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = sub_100003E70(&qword_1001627E8);
  __chkstk_darwin(v184);
  v22 = (char *)&v153 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_100003E70(&qword_1001627D8);
  __chkstk_darwin(v185);
  v24 = (char *)&v153 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100003E70(&qword_1001627C8);
  __chkstk_darwin(v164);
  v168 = (uint64_t)&v153 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_100003E70(&qword_1001627B8);
  __chkstk_darwin(v165);
  v169 = (char *)&v153 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_100003E70(&qword_1001627A8);
  __chkstk_darwin(v167);
  v173 = (char *)&v153 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_100003E70(&qword_100162798);
  __chkstk_darwin(v170);
  v172 = (uint64_t)&v153 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_100003E70(&qword_100162788);
  v29 = __chkstk_darwin(v179);
  v171 = (uint64_t)&v153 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v178 = (uint64_t)&v153 - v31;
  v32 = type metadata accessor for AsyncImagePhase(0);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v35 = (uint64_t *)((char *)&v153 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v33 + 16))(v35, a1, v32);
  v36 = (*(uint64_t (**)(uint64_t *, uint64_t))(v33 + 88))(v35, v32);
  if (v36 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v33 + 96))(v35, v32);
    v160 = *v35;
    v37 = v160;
    LODWORD(v161) = enum case for Image.ResizingMode.stretch(_:);
    v162 = *(void (**)(char *))(v16 + 104);
    v162(v18);
    v38 = Image.resizable(capInsets:resizingMode:)(v18, v37, 0.0, 0.0, 0.0, 0.0);
    v159 = *(uint64_t (**)(char *, uint64_t))(v16 + 8);
    v39 = v159(v18, v15);
    *(_OWORD *)v198 = (unint64_t)v38;
    *(_WORD *)&v198[16] = 257;
    v40 = static Axis.Set.horizontal.getter(v39);
    v41 = static Alignment.center.getter(v40);
    v43 = v42;
    v44 = sub_100003E70(&qword_100161318);
    v154 = v15;
    v45 = v44;
    v158 = (char *)v44;
    v157 = sub_10008AD8C();
    View.containerRelativeFrame(_:alignment:)(v40, v41, v43, v45, v157);
    swift_release(v38);
    v156 = type metadata accessor for TourPhotosView(0, v190, v191, v46);
    v50 = sub_1000A6D54(v156, v47, v48, v49);
    v51 = *(_QWORD *)(v50 + 64);
    swift_release(v50);
    v53 = static Alignment.center.getter(v52);
    _FrameLayout.init(width:height:alignment:)(v197, 0, 1, v51, 0, v53, v54);
    v55 = v163;
    v155 = *(void (**)(char *, char *, uint64_t))(v163 + 16);
    v56 = v166;
    v155(v22, v20, v166);
    v57 = &v22[*(int *)(v184 + 36)];
    v58 = v197[1];
    *(_OWORD *)v57 = v197[0];
    *((_OWORD *)v57 + 1) = v58;
    *((_OWORD *)v57 + 2) = v197[2];
    v163 = *(_QWORD *)(v55 + 8);
    ((void (*)(char *, uint64_t))v163)(v20, v56);
    sub_100007ADC((uint64_t)v22, (uint64_t)v24, &qword_1001627E8);
    *(_WORD *)&v24[*(int *)(v185 + 36)] = 0;
    v59 = sub_100008194((uint64_t)v22, &qword_1001627E8);
    v60 = static Alignment.center.getter(v59);
    v62 = v61;
    sub_1000AA5E8((uint64_t (*)(void))&static Color.black.getter, (uint64_t (*)(void))&static Color.clear.getter, (uint64_t)v198, 0.64, 0.86);
    v63 = *(_QWORD *)v198;
    v153 = *(_OWORD *)&v198[8];
    v64 = *(_QWORD *)&v198[24];
    v65 = v199;
    v66 = v168;
    sub_100007ADC((uint64_t)v24, v168, &qword_1001627D8);
    v67 = v66 + *(int *)(v164 + 36);
    *(_QWORD *)v67 = v60;
    *(_QWORD *)(v67 + 8) = v62;
    *(_QWORD *)(v67 + 16) = v63;
    *(_OWORD *)(v67 + 24) = v153;
    *(_QWORD *)(v67 + 40) = v64;
    *(_QWORD *)(v67 + 48) = v65;
    sub_100008194((uint64_t)v24, &qword_1001627D8);
    v68 = v154;
    ((void (*)(char *, _QWORD, uint64_t))v162)(v18, v161, v154);
    v69 = v160;
    v70 = Image.resizable(capInsets:resizingMode:)(v18, v160, 0.0, 0.0, 0.0, 0.0);
    v71 = v159(v18, v68);
    *(_OWORD *)v198 = (unint64_t)v70;
    *(_WORD *)&v198[16] = 257;
    v72 = static Axis.Set.horizontal.getter(v71);
    v73 = static Alignment.center.getter(v72);
    View.containerRelativeFrame(_:alignment:)(v72, v73, v74, v158, v157);
    swift_release(v70);
    v78 = sub_1000A6D54(v156, v75, v76, v77);
    v79 = *(_QWORD *)(v78 + 64);
    swift_release(v78);
    v81 = static Alignment.center.getter(v80);
    _FrameLayout.init(width:height:alignment:)(v198, 0, 1, v79, 0, v81, v82);
    v155(v22, v20, v56);
    v83 = &v22[*(int *)(v184 + 36)];
    v84 = *(_OWORD *)&v198[16];
    *(_OWORD *)v83 = *(_OWORD *)v198;
    *((_OWORD *)v83 + 1) = v84;
    *((_OWORD *)v83 + 2) = v199;
    ((void (*)(char *, uint64_t))v163)(v20, v56);
    sub_100007ADC((uint64_t)v22, (uint64_t)v24, &qword_1001627E8);
    *(_WORD *)&v24[*(int *)(v185 + 36)] = 0;
    sub_100008194((uint64_t)v22, &qword_1001627E8);
    v85 = v176;
    sub_100007ADC((uint64_t)v24, v176, &qword_1001627D8);
    v86 = v85 + *(int *)(v175 + 36);
    *(_QWORD *)v86 = 0x4049000000000000;
    *(_BYTE *)(v86 + 8) = 1;
    sub_100008194((uint64_t)v24, &qword_1001627D8);
    v87 = v177;
    sub_100007ADC(v85, v177, &qword_100162840);
    *(_WORD *)(v87 + *(int *)(v174 + 36)) = 0;
    v88 = sub_100008194(v85, &qword_100162840);
    v89 = static Alignment.center.getter(v88);
    v91 = v90;
    v92 = (uint64_t)v169;
    v93 = (uint64_t)&v169[*(int *)(v165 + 36)];
    sub_100007ADC(v87, v93, &qword_100162848);
    v94 = (uint64_t *)(v93 + *(int *)(sub_100003E70(&qword_100162808) + 36));
    *v94 = v89;
    v94[1] = v91;
    sub_100007ADC(v66, v92, &qword_1001627C8);
    sub_100008194(v87, &qword_100162848);
    v95 = sub_100008194(v66, &qword_1001627C8);
    v96 = static Alignment.center.getter(v95);
    v98 = v97;
    v99 = (uint64_t)v173;
    v100 = (uint64_t)&v173[*(int *)(v167 + 36)];
    sub_1000A91B8(v69, v192, v190, v191, v100);
    v101 = (uint64_t *)(v100 + *(int *)(sub_100003E70(&qword_100162818) + 36));
    *v101 = v96;
    v101[1] = v98;
    v102 = sub_100007A98(v92, v99, &qword_1001627B8);
    v103 = static Alignment.center.getter(v102);
    v105 = v104;
    sub_1000AA6A4((uint64_t)&v193);
    v106 = v193;
    v192 = v194;
    v107 = v195;
    v108 = v196;
    v109 = v172;
    sub_100007ADC(v99, v172, &qword_1001627A8);
    v110 = v109 + *(int *)(v170 + 36);
    *(_QWORD *)v110 = v106;
    *(_OWORD *)(v110 + 8) = v192;
    *(_QWORD *)(v110 + 24) = v107;
    *(_QWORD *)(v110 + 32) = v108;
    *(_QWORD *)(v110 + 40) = v103;
    *(_QWORD *)(v110 + 48) = v105;
    sub_100008194(v99, &qword_1001627A8);
    v111 = v171;
    sub_100007ADC(v109, v171, &qword_100162798);
    v112 = v179;
    *(_BYTE *)(v111 + *(int *)(v179 + 36)) = 1;
    sub_100008194(v109, &qword_100162798);
    v113 = &qword_100162788;
    v114 = v178;
    sub_100007A98(v111, v178, &qword_100162788);
    v115 = v181;
    sub_100007ADC(v114, v181, &qword_100162788);
    swift_storeEnumTagMultiPayload(v115, v180, 0);
    v116 = sub_1000ABA54();
    v117 = sub_1000ABDF8();
    v118 = (uint64_t)v182;
    _ConditionalContent<>.init(storage:)(v115, v112, v183, v116, v117);
    v119 = v186;
    sub_100007ADC(v118, v186, &qword_100162778);
    swift_storeEnumTagMultiPayload(v119, v188, 0);
    v120 = sub_1000AB9E8();
    _ConditionalContent<>.init(storage:)(v119, v189, &type metadata for EmptyView, v120, &protocol witness table for EmptyView);
    swift_release(v69);
    sub_100008194(v118, &qword_100162778);
    v121 = v114;
    return sub_100008194(v121, v113);
  }
  v122 = v186;
  if (v36 == enum case for AsyncImagePhase.failure(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v33 + 96))(v35, v32);
    swift_errorRelease(*v35);
LABEL_6:
    if (qword_10015CE60 != -1)
      swift_once(&qword_10015CE60, sub_1000382C8);
    v124 = qword_10016F658;
    *(_QWORD *)v198 = qword_10016F658;
    *(_WORD *)&v198[8] = 256;
    swift_retain(qword_10016F658);
    v126 = static Axis.Set.horizontal.getter(v125);
    v127 = static Alignment.center.getter(v126);
    v129 = v128;
    v130 = sub_100003E70(&qword_100162708);
    v131 = sub_100007D40(&qword_100162710, &qword_100162708, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    v132 = (char *)v159;
    View.containerRelativeFrame(_:alignment:)(v126, v127, v129, v130, v131);
    swift_release(v124);
    v134 = static Alignment.center.getter(v133);
    v136 = v135;
    sub_1000AA6A4((uint64_t)v198);
    v137 = *(_QWORD *)v198;
    v192 = *(_OWORD *)&v198[8];
    v138 = *(_QWORD *)&v198[24];
    v139 = v199;
    v140 = v160;
    v141 = (uint64_t)v158;
    v142 = v161;
    (*(void (**)(char *, char *, uint64_t))(v160 + 16))(v158, v132, v161);
    v143 = v183;
    v144 = v141 + *(int *)(v183 + 36);
    *(_QWORD *)v144 = v137;
    *(_OWORD *)(v144 + 8) = v192;
    *(_QWORD *)(v144 + 24) = v138;
    *(_QWORD *)(v144 + 32) = v139;
    *(_QWORD *)(v144 + 40) = v134;
    *(_QWORD *)(v144 + 48) = v136;
    (*(void (**)(char *, uint64_t))(v140 + 8))(v132, v142);
    v113 = &qword_100162828;
    v145 = v162;
    sub_100007A98(v141, (uint64_t)v162, &qword_100162828);
    v146 = v181;
    sub_100007ADC((uint64_t)v145, v181, &qword_100162828);
    swift_storeEnumTagMultiPayload(v146, v180, 1);
    v147 = sub_1000ABA54();
    v148 = sub_1000ABDF8();
    v149 = (uint64_t)v182;
    _ConditionalContent<>.init(storage:)(v146, v179, v143, v147, v148);
    sub_100007ADC(v149, v122, &qword_100162778);
    swift_storeEnumTagMultiPayload(v122, v188, 0);
    v150 = sub_1000AB9E8();
    _ConditionalContent<>.init(storage:)(v122, v189, &type metadata for EmptyView, v150, &protocol witness table for EmptyView);
    sub_100008194(v149, &qword_100162778);
    v121 = (uint64_t)v145;
    return sub_100008194(v121, v113);
  }
  v123 = v189;
  if (v36 == enum case for AsyncImagePhase.empty(_:))
    goto LABEL_6;
  swift_storeEnumTagMultiPayload(v186, v188, 1);
  v152 = sub_1000AB9E8();
  _ConditionalContent<>.init(storage:)(v122, v123, &type metadata for EmptyView, v152, &protocol witness table for EmptyView);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v33 + 8))(v35, v32);
}

uint64_t sub_1000A91B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;

  v63 = a3;
  v64 = a4;
  v66 = a2;
  v68 = a5;
  v6 = type metadata accessor for Image.ResizingMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v67 = sub_100003E70(&qword_100162730);
  v65 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100003E70(&qword_1001627E8);
  __chkstk_darwin(v61);
  v57 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100003E70(&qword_1001627D8);
  __chkstk_darwin(v62);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100003E70(&qword_100162850);
  __chkstk_darwin(v60);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100003E70(&qword_100162858);
  __chkstk_darwin(v59);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100003E70(&qword_100162860);
  __chkstk_darwin(v58);
  v56 = (uint64_t)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Image.ResizingMode.stretch(_:), v6);
  v20 = Image.resizable(capInsets:resizingMode:)(v9, a1, 0.0, 0.0, 0.0, 0.0);
  v21 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v73 = (unint64_t)v20;
  LOWORD(v74) = 257;
  v22 = static Axis.Set.horizontal.getter(v21);
  v23 = static Alignment.center.getter(v22);
  v25 = v24;
  v26 = sub_100003E70(&qword_100161318);
  v27 = sub_10008AD8C();
  View.containerRelativeFrame(_:alignment:)(v22, v23, v25, v26, v27);
  swift_release(v20);
  v29 = type metadata accessor for TourPhotosView(0, v63, v64, v28);
  v33 = sub_1000A6D54(v29, v30, v31, v32);
  v34 = *(_QWORD *)(v33 + 64);
  swift_release(v33);
  v36 = static Alignment.center.getter(v35);
  _FrameLayout.init(width:height:alignment:)(&v73, 0, 1, v34, 0, v36, v37);
  v38 = v65;
  v39 = (uint64_t)v57;
  v40 = v67;
  (*(void (**)(char *, char *, _QWORD))(v65 + 16))(v57, v11, v67);
  v41 = (_OWORD *)(v39 + *(int *)(v61 + 36));
  v42 = v74;
  *v41 = v73;
  v41[1] = v42;
  v41[2] = v75;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v40);
  sub_100007ADC(v39, (uint64_t)v14, &qword_1001627E8);
  *(_WORD *)&v14[*(int *)(v62 + 36)] = 0;
  sub_100008194(v39, &qword_1001627E8);
  sub_100007ADC((uint64_t)v14, (uint64_t)v16, &qword_1001627D8);
  *(_QWORD *)&v16[*(int *)(v60 + 36)] = 0x3FF0000000000000;
  sub_100008194((uint64_t)v14, &qword_1001627D8);
  sub_100007ADC((uint64_t)v16, (uint64_t)v18, &qword_100162850);
  v43 = &v18[*(int *)(v59 + 36)];
  *(_QWORD *)v43 = 0x4038000000000000;
  v43[8] = 1;
  sub_100008194((uint64_t)v16, &qword_100162850);
  v44 = v56;
  sub_100007ADC((uint64_t)v18, v56, &qword_100162858);
  *(_WORD *)(v44 + *(int *)(v58 + 36)) = 0;
  v45 = sub_100008194((uint64_t)v18, &qword_100162858);
  v46 = static Alignment.center.getter(v45);
  v48 = v47;
  sub_1000AA5E8((uint64_t (*)(void))&static Color.clear.getter, (uint64_t (*)(void))&static Color.black.getter, (uint64_t)&v69, 0.65, 1.0);
  v50 = v68;
  v49 = v69;
  v67 = v70;
  v51 = v71;
  v52 = v72;
  sub_100007ADC(v44, v68, &qword_100162860);
  v53 = v50 + *(int *)(sub_100003E70(&qword_100162868) + 36);
  *(_QWORD *)v53 = v46;
  *(_QWORD *)(v53 + 8) = v48;
  *(_QWORD *)(v53 + 16) = v49;
  *(_OWORD *)(v53 + 24) = v67;
  *(_QWORD *)(v53 + 40) = v51;
  *(_QWORD *)(v53 + 48) = v52;
  return sub_100008194(v44, &qword_100162860);
}

uint64_t sub_1000A96A0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t WitnessTable;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v36 = a3;
  v5 = type metadata accessor for Optional(0, a1);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - v7;
  v9 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003E70(&qword_100162630);
  v34 = *(_QWORD *)(v12 - 8);
  v35 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TourPhotosView(0, a1, a2, v15);
  v20 = sub_1000A6D54(v16, v17, v18, v19);
  v21 = *(_QWORD *)(v20 + 32);
  swift_bridgeObjectRetain(v21);
  swift_release(v20);
  v37 = v21;
  v22 = type metadata accessor for Array(0, a1);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v22);
  Collection.first.getter(v22, WitnessTable);
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(a1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v8, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v25 = type metadata accessor for URL(0);
    v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v11, 1, 1, v25);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v8, a1);
    v27 = type metadata accessor for URL(0);
    v26 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v11, 0, 1, v27);
  }
  v28 = static Animation.easeInOut.getter(v26);
  v29 = Transaction.init(animation:)(v28);
  v30 = swift_allocObject(&unk_100152040, 32, 7);
  *(_QWORD *)(v30 + 16) = a1;
  *(_QWORD *)(v30 + 24) = a2;
  v31 = sub_100003E70(&qword_100162688);
  v32 = sub_1000AB4C8(&qword_100162690, &qword_100162688, (void (*)(void))sub_1000AB534);
  AsyncImage.init(url:scale:transaction:content:)(v11, v29, sub_1000AB4C0, v30, v31, v32, 1.0);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v34 + 32))(v36, v14, v35);
}

uint64_t sub_1000A9930@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t OpaqueTypeConformance2;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;

  v99 = a2;
  *(_QWORD *)&v100 = a3;
  v105 = a1;
  v107 = a4;
  v106 = sub_100003E70(&qword_100162718);
  v91 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v90 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_100003E70(&qword_100162720);
  __chkstk_darwin(v108);
  v110 = (uint64_t)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100003E70(&qword_100162728);
  __chkstk_darwin(v102);
  v103 = (uint64_t)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100003E70(&qword_1001626A0);
  __chkstk_darwin(v109);
  v104 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Image.ResizingMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100003E70(&qword_100162730);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v13 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100003E70(&qword_1001626E0);
  __chkstk_darwin(v93);
  v15 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100003E70(&qword_1001626D0);
  __chkstk_darwin(v94);
  v17 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100003E70(&qword_1001626C0);
  __chkstk_darwin(v92);
  v19 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_100003E70(&qword_1001626B0);
  v20 = __chkstk_darwin(v101);
  v97 = (uint64_t)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v98 = (uint64_t)&v90 - v22;
  v23 = type metadata accessor for AsyncImagePhase(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (uint64_t *)((char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v24 + 16))(v26, v105, v23);
  v27 = (*(uint64_t (**)(uint64_t *, uint64_t))(v24 + 88))(v26, v23);
  if (v27 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v24 + 96))(v26, v23);
    v28 = *v26;
    v105 = v28;
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for Image.ResizingMode.stretch(_:), v8);
    v29 = Image.resizable(capInsets:resizingMode:)(v11, v28, 0.0, 0.0, 0.0, 0.0);
    v30 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v111 = v29;
    *(_QWORD *)&v112 = 0;
    WORD4(v112) = 257;
    v31 = static Axis.Set.horizontal.getter(v30);
    v32 = static Alignment.center.getter(v31);
    v34 = v33;
    v35 = sub_100003E70(&qword_100161318);
    v36 = sub_10008AD8C();
    View.containerRelativeFrame(_:alignment:)(v31, v32, v34, v35, v36);
    v37 = swift_release(v29);
    v38 = v95;
    v39 = v96;
    (*(void (**)(char *, char *, uint64_t, __n128))(v95 + 16))(v15, v13, v96, v37);
    v40 = &v15[*(int *)(v93 + 36)];
    *(_QWORD *)v40 = 0x4059000000000000;
    v40[8] = 1;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v39);
    sub_100007ADC((uint64_t)v15, (uint64_t)v17, &qword_1001626E0);
    *(_WORD *)&v17[*(int *)(v94 + 36)] = 0;
    v41 = sub_100008194((uint64_t)v15, &qword_1001626E0);
    v42 = static Alignment.center.getter(v41);
    v44 = v43;
    v45 = (uint64_t)&v19[*(int *)(v92 + 36)];
    v46 = v105;
    sub_1000AA218(v105, v99, v100, v45);
    v47 = (uint64_t *)(v45 + *(int *)(sub_100003E70(&qword_1001626F0) + 36));
    *v47 = v42;
    v47[1] = v44;
    v48 = sub_100007A98((uint64_t)v17, (uint64_t)v19, &qword_1001626D0);
    v49 = static Alignment.center.getter(v48);
    v51 = v50;
    sub_1000AA6A4((uint64_t)&v111);
    v52 = v111;
    v100 = v112;
    v53 = v113;
    v54 = v114;
    v55 = v97;
    sub_100007ADC((uint64_t)v19, v97, &qword_1001626C0);
    v56 = v101;
    v57 = v55 + *(int *)(v101 + 36);
    *(_QWORD *)v57 = v52;
    *(_OWORD *)(v57 + 8) = v100;
    *(_QWORD *)(v57 + 24) = v53;
    *(_QWORD *)(v57 + 32) = v54;
    *(_QWORD *)(v57 + 40) = v49;
    *(_QWORD *)(v57 + 48) = v51;
    sub_100008194((uint64_t)v19, &qword_1001626C0);
    v58 = v55;
    v59 = v98;
    sub_100007A98(v58, v98, &qword_1001626B0);
    v60 = v103;
    sub_100007ADC(v59, v103, &qword_1001626B0);
    swift_storeEnumTagMultiPayload(v60, v102, 0);
    v61 = sub_1000AB5E8();
    v62 = sub_1000034AC(&qword_100162708);
    v63 = sub_100007D40(&qword_100162710, &qword_100162708, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    v111 = v62;
    *(_QWORD *)&v112 = v63;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v111, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 1);
    v65 = (uint64_t)v104;
    _ConditionalContent<>.init(storage:)(v60, v56, v106, v61, OpaqueTypeConformance2);
    v66 = v110;
    sub_100007ADC(v65, v110, &qword_1001626A0);
    swift_storeEnumTagMultiPayload(v66, v108, 0);
    v67 = sub_1000AB534();
    _ConditionalContent<>.init(storage:)(v66, v109, &type metadata for EmptyView, v67, &protocol witness table for EmptyView);
    swift_release(v46);
    sub_100008194(v65, &qword_1001626A0);
    return sub_100008194(v59, &qword_1001626B0);
  }
  v69 = v106;
  if (v27 == enum case for AsyncImagePhase.failure(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v24 + 96))(v26, v23);
    swift_errorRelease(*v26);
  }
  else
  {
    v71 = v109;
    v70 = v110;
    if (v27 != enum case for AsyncImagePhase.empty(_:))
    {
      swift_storeEnumTagMultiPayload(v110, v108, 1);
      v89 = sub_1000AB534();
      _ConditionalContent<>.init(storage:)(v70, v71, &type metadata for EmptyView, v89, &protocol witness table for EmptyView);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v24 + 8))(v26, v23);
    }
  }
  if (qword_10015CE60 != -1)
    swift_once(&qword_10015CE60, sub_1000382C8);
  v72 = qword_10016F658;
  v111 = qword_10016F658;
  LOWORD(v112) = 256;
  swift_retain(qword_10016F658);
  v74 = static Axis.Set.horizontal.getter(v73);
  v75 = static Alignment.center.getter(v74);
  v77 = v76;
  v78 = sub_100003E70(&qword_100162708);
  v79 = sub_100007D40(&qword_100162710, &qword_100162708, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
  v80 = v90;
  View.containerRelativeFrame(_:alignment:)(v74, v75, v77, v78, v79);
  v81 = swift_release(v72);
  v82 = v91;
  v83 = v103;
  (*(void (**)(uint64_t, char *, uint64_t, __n128))(v91 + 16))(v103, v80, v69, v81);
  swift_storeEnumTagMultiPayload(v83, v102, 1);
  v84 = sub_1000AB5E8();
  v111 = v78;
  *(_QWORD *)&v112 = v79;
  v85 = swift_getOpaqueTypeConformance2(&v111, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 1);
  v86 = (uint64_t)v104;
  _ConditionalContent<>.init(storage:)(v83, v101, v69, v84, v85);
  v87 = v110;
  sub_100007ADC(v86, v110, &qword_1001626A0);
  swift_storeEnumTagMultiPayload(v87, v108, 0);
  v88 = sub_1000AB534();
  _ConditionalContent<>.init(storage:)(v87, v109, &type metadata for EmptyView, v88, &protocol witness table for EmptyView);
  sub_100008194(v86, &qword_1001626A0);
  return (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v80, v69);
}

uint64_t sub_1000AA218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v49 = a2;
  *(_QWORD *)&v50 = a3;
  v51 = a4;
  v5 = type metadata accessor for Image.ResizingMode(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003E70(&qword_100162730);
  v47 = *(_QWORD *)(v9 - 8);
  v48 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100003E70(&qword_100162738);
  __chkstk_darwin(v46);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100003E70(&qword_100162740);
  __chkstk_darwin(v45);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100003E70(&qword_100162748);
  __chkstk_darwin(v44);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100003E70(&qword_100162750);
  __chkstk_darwin(v43);
  v42 = (uint64_t)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v5);
  v19 = Image.resizable(capInsets:resizingMode:)(v8, a1, 0.0, 0.0, 0.0, 0.0);
  v20 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v52 = v19;
  *(_QWORD *)&v53 = 0;
  WORD4(v53) = 257;
  v21 = static Axis.Set.horizontal.getter(v20);
  v22 = static Alignment.center.getter(v21);
  v24 = v23;
  v25 = sub_100003E70(&qword_100161318);
  v26 = sub_10008AD8C();
  View.containerRelativeFrame(_:alignment:)(v21, v22, v24, v25, v26);
  v27 = swift_release(v19);
  v29 = v47;
  v28 = v48;
  (*(void (**)(char *, char *, uint64_t, __n128))(v47 + 16))(v13, v11, v48, v27);
  *(_WORD *)&v13[*(int *)(v46 + 36)] = 0;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v28);
  sub_100007ADC((uint64_t)v13, (uint64_t)v15, &qword_100162738);
  *(_QWORD *)&v15[*(int *)(v45 + 36)] = 0x3FF0000000000000;
  sub_100008194((uint64_t)v13, &qword_100162738);
  sub_100007ADC((uint64_t)v15, (uint64_t)v17, &qword_100162740);
  v30 = &v17[*(int *)(v44 + 36)];
  *(_QWORD *)v30 = 0x4038000000000000;
  v30[8] = 1;
  sub_100008194((uint64_t)v15, &qword_100162740);
  v31 = v42;
  sub_100007ADC((uint64_t)v17, v42, &qword_100162748);
  *(_WORD *)(v31 + *(int *)(v43 + 36)) = 0;
  v32 = sub_100008194((uint64_t)v17, &qword_100162748);
  v33 = static Alignment.center.getter(v32);
  v35 = v34;
  sub_1000AA5E8((uint64_t (*)(void))&static Color.clear.getter, (uint64_t (*)(void))&static Color.black.getter, (uint64_t)&v52, 0.65, 1.0);
  v37 = v51;
  v36 = v52;
  v50 = v53;
  v38 = v54;
  v39 = v55;
  sub_100007ADC(v31, v51, &qword_100162750);
  v40 = v37 + *(int *)(sub_100003E70(&qword_100162758) + 36);
  *(_QWORD *)v40 = v33;
  *(_QWORD *)(v40 + 8) = v35;
  *(_QWORD *)(v40 + 16) = v36;
  *(_OWORD *)(v40 + 24) = v50;
  *(_QWORD *)(v40 + 40) = v38;
  *(_QWORD *)(v40 + 48) = v39;
  return sub_100008194(v31, &qword_100162750);
}

double sub_1000AA5E8@<D0>(uint64_t (*a1)(void)@<X2>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  double result;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;

  v10 = sub_100003E70(&qword_10015E0E0);
  v11 = swift_allocObject(v10, 48, 7);
  *(_OWORD *)(v11 + 16) = xmmword_10010A6C0;
  *(_QWORD *)(v11 + 32) = a1();
  *(_QWORD *)(v11 + 40) = a2();
  *(_QWORD *)&v16[0] = v11;
  specialized Array._endMutation()(v12);
  Gradient.init(colors:)(v11);
  LinearGradient.init(gradient:startPoint:endPoint:)(v16, v13, 0.0, a4, 0.0, a5);
  result = *(double *)v16;
  v15 = v16[1];
  *(_OWORD *)a3 = v16[0];
  *(_OWORD *)(a3 + 16) = v15;
  *(_QWORD *)(a3 + 32) = v17;
  return result;
}

double sub_1000AA6A4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  double result;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;

  v2 = sub_100003E70(&qword_10015E0E0);
  v3 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10010A6C0;
  v4 = static Color.clear.getter(v3);
  *(_QWORD *)(v3 + 32) = v4;
  v5 = static Color.black.getter(v4);
  v6 = Color.opacity(_:)(0.5);
  v7 = swift_release(v5);
  *(_QWORD *)(v3 + 40) = v6;
  *(_QWORD *)&v11[0] = v3;
  specialized Array._endMutation()(v7);
  Gradient.init(colors:)(v3);
  LinearGradient.init(gradient:startPoint:endPoint:)(v11, v8, 0.0, 0.66, 0.0, 1.0);
  result = *(double *)v11;
  v10 = v11[1];
  *(_OWORD *)a1 = v11[0];
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v12;
  return result;
}

void *sub_1000AA764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  void *result;
  _OWORD __src[19];

  static HorizontalAlignment.center.getter(a1);
  sub_1000AA908(a2, a3, v6, (uint64_t)__src);
  static Edge.Set.bottom.getter(v7);
  EdgeInsets.init(_all:)(28.0);
  v8 = static Alignment.bottom.getter();
  sub_1000E58BC(0, 1, 0.0, 1, 0.0, 1, 0, 1, (uint64_t)__src, v10, 0.0, 1, INFINITY, 0, v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = memcpy(a4, __src, 0x128uLL);
  a4[296] = 0;
  return result;
}

void sub_1000AA908(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = type metadata accessor for TourPhotosView(0, a1, a2, a3);
  v9 = sub_1000A6D54(v5, v6, v7, v8);
  v10 = *(_QWORD *)(v9 + 48);
  v39 = *(_QWORD *)(v9 + 40);
  swift_bridgeObjectRetain(v10);
  swift_release(v9);
  v11 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100116250);
  v37 = v12;
  v38 = v11;
  v35 = v13;
  v36 = v14;
  v15 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002ELL, 0x8000000100116280);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = sub_1000A6D54(v5, v16, v18, v20);
  v23 = sub_1000D8088();
  swift_release(v22);
  v27 = 0.0;
  v28 = 0.0;
  v29 = 0.0;
  if (v23)
  {
    v30 = sub_1000A6D54(v5, v24, v25, v26);
    v27 = sub_1000D80B0();
    swift_release(v30);
    v34 = sub_1000A6D54(v5, v31, v32, v33);
    v28 = sub_1000D80C8();
    swift_release(v34);
    v29 = sub_1000A6E54();
  }
  *(_QWORD *)a4 = v38;
  *(_QWORD *)(a4 + 8) = v37;
  *(_BYTE *)(a4 + 16) = v35 & 1;
  *(_QWORD *)(a4 + 24) = v36;
  *(_QWORD *)(a4 + 32) = v15;
  *(_QWORD *)(a4 + 40) = v17;
  *(_BYTE *)(a4 + 48) = v19 & 1;
  *(_QWORD *)(a4 + 56) = v21;
  *(_QWORD *)(a4 + 64) = v39;
  *(_QWORD *)(a4 + 72) = v10;
  *(double *)(a4 + 80) = v27;
  *(double *)(a4 + 88) = v28;
  *(double *)(a4 + 96) = v29;
  *(_BYTE *)(a4 + 104) = !v23;
}

void sub_1000AAAA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v20[6];

  v20[2] = a2;
  v20[3] = a3;
  v20[4] = a1;
  v6 = static Animation.default.getter();
  withAnimation<A>(_:_:)(v6, sub_1000AAE7C, v20, (char *)&type metadata for () + 8);
  swift_release(v6);
  v8 = type metadata accessor for TourPhotosView(0, a2, a3, v7);
  v12 = sub_1000A6D54(v8, v9, v10, v11);
  v14 = *(_QWORD *)(v12 + 16);
  v13 = *(_QWORD *)(v12 + 24);
  swift_bridgeObjectRetain(v13);
  swift_release(v12);
  v15 = (uint64_t *)(a1 + *(int *)(v8 + 44));
  v16 = *v15;
  if (*v15)
  {
    swift_retain(*v15);
    sub_1000DB03C(v14, v13, 8, 1, 23, 0, 3u, v16);
    swift_bridgeObjectRelease();
    swift_release(v16);
  }
  else
  {
    v17 = v15[1];
    v18 = type metadata accessor for RemoteViewConfiguration();
    v19 = sub_10000ACDC();
    EnvironmentObject.error()(0, v17, v18, v19);
    __break(1u);
  }
}

uint64_t sub_1000AABC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;

  v4 = type metadata accessor for TourPhotosView(0, a2, a3, a4);
  result = sub_1000A6D90();
  if ((v6 & 1) == 0)
  {
    v9 = (double)result;
    v10 = sub_1000A6D54(v4, v6, v7, v8);
    v11 = sub_1000D80C8();
    swift_release(v10);
    return sub_1000A6EA8(v4, v11 * v9);
  }
  return result;
}

unint64_t sub_1000AAC4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162628;
  if (!qword_100162628)
  {
    v1 = sub_1000034AC(&qword_100162610);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100162628);
  }
  return result;
}

uint64_t sub_1000AACA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000A7A7C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000AACB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000A96A0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void *sub_1000AACC0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t *v1;

  return sub_1000AA764(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_1000AACCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162648;
  if (!qword_100162648)
  {
    v1 = sub_1000034AC(&qword_100162640);
    sub_1000AAD38();
    sub_100022E3C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162648);
  }
  return result;
}

unint64_t sub_1000AAD38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162650;
  if (!qword_100162650)
  {
    v1 = sub_1000034AC(&qword_100162658);
    sub_1000AADA4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162650);
  }
  return result;
}

unint64_t sub_1000AADA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162660;
  if (!qword_100162660)
  {
    v1 = sub_1000034AC(&qword_100162668);
    sub_100007D40(&qword_100162670, &qword_100162678, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162660);
  }
  return result;
}

void sub_1000AAE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TourPhotosView(0, v5, v6, a4) - 8) + 80);
  sub_1000AAAA8(v4 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t sub_1000AAE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1000AABC8(v4[4], v4[2], v4[3], a4);
}

uint64_t sub_1000AAE98@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[3];
  _OWORD v63[3];

  v61 = a1;
  v60 = sub_100003E70(&qword_100162890);
  v7 = __chkstk_darwin(v60);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v59 = (uint64_t)&v53 - v10;
  v11 = type metadata accessor for RoundedRectangle(0);
  v58 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003E70(&qword_10015E878);
  v54 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100003E70(&qword_100162898);
  v17 = __chkstk_darwin(v57);
  v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v56 = (uint64_t)&v53 - v20;
  v21 = &v13[*(int *)(v11 + 20)];
  v22 = enum case for RoundedCornerStyle.continuous(_:);
  v23 = type metadata accessor for RoundedCornerStyle(0);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104);
  v25 = v24(v21, v22, v23);
  __asm { FMOV            V0.2D, #1.0 }
  v55 = _Q0;
  *(_OWORD *)v13 = _Q0;
  v31 = static Color.white.getter(v25);
  v32 = Color.opacity(_:)(0.18);
  swift_release(v31);
  sub_10001BF60((uint64_t)v13, (uint64_t)v16);
  *(_QWORD *)&v16[*(int *)(v14 + 36)] = v32;
  v33 = sub_10001BFA4((uint64_t)v13);
  v34 = static Alignment.center.getter(v33);
  _FrameLayout.init(width:height:alignment:)(v62, *(_QWORD *)&a2, 0, 0x4000000000000000, 0, v34, v35);
  sub_100007ADC((uint64_t)v16, (uint64_t)v19, &qword_10015E878);
  v36 = v57;
  v37 = &v19[*(int *)(v57 + 36)];
  v38 = v62[1];
  *(_OWORD *)v37 = v62[0];
  *((_OWORD *)v37 + 1) = v38;
  *((_OWORD *)v37 + 2) = v62[2];
  sub_100008194((uint64_t)v16, &qword_10015E878);
  v39 = v56;
  sub_100007A98((uint64_t)v19, v56, &qword_100162898);
  v40 = v24(&v13[*(int *)(v58 + 20)], v22, v23);
  *(_OWORD *)v13 = v55;
  v41 = static Color.white.getter(v40);
  v42 = Color.opacity(_:)(0.25);
  swift_release(v41);
  sub_10001BF60((uint64_t)v13, (uint64_t)v16);
  *(_QWORD *)&v16[*(int *)(v54 + 36)] = v42;
  v43 = sub_10001BFA4((uint64_t)v13);
  v44 = static Alignment.center.getter(v43);
  _FrameLayout.init(width:height:alignment:)(v63, *(_QWORD *)&a3, 0, 0x4000000000000000, 0, v44, v45);
  sub_100007ADC((uint64_t)v16, (uint64_t)v19, &qword_10015E878);
  v46 = &v19[*(int *)(v36 + 36)];
  v47 = v63[1];
  *(_OWORD *)v46 = v63[0];
  *((_OWORD *)v46 + 1) = v47;
  *((_OWORD *)v46 + 2) = v63[2];
  sub_100008194((uint64_t)v16, &qword_10015E878);
  sub_100007ADC((uint64_t)v19, (uint64_t)v9, &qword_100162898);
  v48 = &v9[*(int *)(v60 + 36)];
  *(double *)v48 = a4;
  *((_QWORD *)v48 + 1) = 0;
  sub_100008194((uint64_t)v19, &qword_100162898);
  v49 = v59;
  sub_100007A98((uint64_t)v9, v59, &qword_100162890);
  sub_100007ADC(v39, (uint64_t)v19, &qword_100162898);
  sub_100007ADC(v49, (uint64_t)v9, &qword_100162890);
  v50 = v61;
  sub_100007ADC((uint64_t)v19, v61, &qword_100162898);
  v51 = sub_100003E70(&qword_1001628A0);
  sub_100007ADC((uint64_t)v9, v50 + *(int *)(v51 + 48), &qword_100162890);
  sub_100008194(v49, &qword_100162890);
  sub_100008194(v39, &qword_100162898);
  sub_100008194((uint64_t)v9, &qword_100162890);
  return sub_100008194((uint64_t)v19, &qword_100162898);
}

uint64_t sub_1000AB2E4@<X0>(uint64_t a1@<X8>)
{
  double *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v3 = type metadata accessor for BlendMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_100162870);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100003E70(&qword_100162878);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v1;
  v15 = v1[1];
  v16 = v1[2];
  *v9 = static Alignment.leading.getter(v11);
  v9[1] = v17;
  v18 = sub_100003E70(&qword_100162880);
  sub_1000AAE98((uint64_t)v9 + *(int *)(v18 + 44), v14, v15, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for BlendMode.plusLighter(_:), v3);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(&v13[*(int *)(v10 + 36)], v6, v3);
  sub_100007ADC((uint64_t)v9, (uint64_t)v13, &qword_100162870);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100008194((uint64_t)v9, &qword_100162870);
  sub_100007ADC((uint64_t)v13, a1, &qword_100162878);
  *(_BYTE *)(a1 + *(int *)(sub_100003E70(&qword_100162888) + 36)) = 1;
  return sub_100008194((uint64_t)v13, &qword_100162878);
}

uint64_t sub_1000AB4B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AB4C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000A9930(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1000AB4C8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000034AC(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000AB534()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100162698;
  if (!qword_100162698)
  {
    v1 = sub_1000034AC(&qword_1001626A0);
    sub_1000AB5E8();
    v2[0] = sub_1000034AC(&qword_100162708);
    v2[1] = sub_100007D40(&qword_100162710, &qword_100162708, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162698);
  }
  return result;
}

unint64_t sub_1000AB5E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001626A8;
  if (!qword_1001626A8)
  {
    v1 = sub_1000034AC(&qword_1001626B0);
    sub_1000AB66C();
    sub_100007D40(&qword_1001626F8, &qword_100162700, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001626A8);
  }
  return result;
}

unint64_t sub_1000AB66C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001626B8;
  if (!qword_1001626B8)
  {
    v1 = sub_1000034AC(&qword_1001626C0);
    sub_1000AB6F0();
    sub_100007D40(&qword_1001626E8, &qword_1001626F0, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001626B8);
  }
  return result;
}

unint64_t sub_1000AB6F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001626C8;
  if (!qword_1001626C8)
  {
    v1 = sub_1000034AC(&qword_1001626D0);
    sub_1000ABD6C(&qword_1001626D8, &qword_1001626E0);
    sub_100007D40(&qword_100161320, &qword_100161328, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001626C8);
  }
  return result;
}

uint64_t sub_1000AB78C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000A7CF8(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_1000AB79C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TourPhotosView(0, v4, v5, a1) - 8) + 80);
  return sub_1000A805C(v2 + ((v6 + 32) & ~v6), v4, v5, a2);
}

uint64_t sub_1000AB80C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000AB830(char *a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, char *);
  uint64_t v4;
  uint64_t TupleTypeMetadata2;

  v3 = *(uint64_t (**)(uint64_t, char *))(v1 + 32);
  v4 = *(_QWORD *)a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for Int, *(_QWORD *)(v1 + 16), "offset element ", 0);
  return v3(v4, &a1[*(int *)(TupleTypeMetadata2 + 48)]);
}

uint64_t sub_1000AB8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = (int *)type metadata accessor for TourPhotosView(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = v10 + *(_QWORD *)(v8 + 64);
  v12 = v9 | 7;
  v13 = v4 + v10;
  v15 = type metadata accessor for TourPhotosViewModel(255, v5, v6, v14);
  v16 = type metadata accessor for Bindable(0, v15);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v13, v16);
  v17 = (_QWORD *)(v13 + v7[9]);
  swift_release(*v17);
  swift_release(v17[1]);
  v18 = (_QWORD *)(v13 + v7[10]);
  swift_release(*v18);
  swift_release(v18[1]);
  swift_release(*(_QWORD *)(v13 + v7[11]));
  return swift_deallocObject(v4, v11, v12);
}

uint64_t sub_1000AB980@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TourPhotosView(0, v6, v7, a2) - 8) + 80);
  return sub_1000A8210(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

unint64_t sub_1000AB9E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162770;
  if (!qword_100162770)
  {
    v1 = sub_1000034AC(&qword_100162778);
    sub_1000ABA54();
    sub_1000ABDF8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162770);
  }
  return result;
}

unint64_t sub_1000ABA54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162780;
  if (!qword_100162780)
  {
    v1 = sub_1000034AC(&qword_100162788);
    sub_1000ABAC0();
    sub_1000396D8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162780);
  }
  return result;
}

unint64_t sub_1000ABAC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162790;
  if (!qword_100162790)
  {
    v1 = sub_1000034AC(&qword_100162798);
    sub_1000ABB44();
    sub_100007D40(&qword_1001626F8, &qword_100162700, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162790);
  }
  return result;
}

unint64_t sub_1000ABB44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001627A0;
  if (!qword_1001627A0)
  {
    v1 = sub_1000034AC(&qword_1001627A8);
    sub_1000ABBC8();
    sub_100007D40(&qword_100162810, &qword_100162818, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001627A0);
  }
  return result;
}

unint64_t sub_1000ABBC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001627B0;
  if (!qword_1001627B0)
  {
    v1 = sub_1000034AC(&qword_1001627B8);
    sub_1000ABC4C();
    sub_100007D40(&qword_100162800, &qword_100162808, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001627B0);
  }
  return result;
}

unint64_t sub_1000ABC4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001627C0;
  if (!qword_1001627C0)
  {
    v1 = sub_1000034AC(&qword_1001627C8);
    sub_1000ABCD0();
    sub_100007D40(&qword_1001627F0, &qword_1001627F8, (uint64_t)&protocol conformance descriptor for _MaskAlignmentEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001627C0);
  }
  return result;
}

unint64_t sub_1000ABCD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001627D0;
  if (!qword_1001627D0)
  {
    v1 = sub_1000034AC(&qword_1001627D8);
    sub_1000ABD6C(&qword_1001627E0, &qword_1001627E8);
    sub_100007D40(&qword_100161320, &qword_100161328, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001627D0);
  }
  return result;
}

uint64_t sub_1000ABD6C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];

  result = *a1;
  if (!result)
  {
    v4 = sub_1000034AC(a2);
    v5[0] = sub_1000034AC(&qword_100161318);
    v5[1] = sub_10008AD8C();
    swift_getOpaqueTypeConformance2(v5, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000ABDF8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100162820;
  if (!qword_100162820)
  {
    v1 = sub_1000034AC(&qword_100162828);
    v2[0] = sub_1000034AC(&qword_100162708);
    v2[1] = sub_100007D40(&qword_100162710, &qword_100162708, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 1);
    sub_100007D40(&qword_1001626F8, &qword_100162700, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162820);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TourPhotosScrollBar(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TourPhotosScrollBar(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for TourPhotosScrollBar()
{
  return &type metadata for TourPhotosScrollBar;
}

uint64_t sub_1000ABF20(_QWORD *a1)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *WitnessTable;
  void *v32;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Int, *a1, "offset element ", 0);
  v28 = type metadata accessor for Array(255, TupleTypeMetadata2);
  v29 = &type metadata for Int;
  v30 = sub_1000034AC(&qword_1001625F0);
  WitnessTable = (void *)swift_getWitnessTable(&protocol conformance descriptor for [A], v28);
  v32 = &protocol witness table for Int;
  v2 = type metadata accessor for ForEach(255, &v28);
  sub_100007D40(&qword_1001625F8, &qword_1001625F0, (uint64_t)&protocol conformance descriptor for AsyncImage<A>);
  v3 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v2);
  v4 = type metadata accessor for HStack(255, v2, v3);
  v5 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v4);
  v28 = v4;
  v29 = (void *)v5;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v28, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v28 = v4;
  v29 = (void *)v5;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v8 = type metadata accessor for ScrollView(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v9 = type metadata accessor for PagingScrollTargetBehavior(255);
  v10 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v8);
  v28 = v8;
  v29 = (void *)v9;
  v30 = v10;
  WitnessTable = &protocol witness table for PagingScrollTargetBehavior;
  v11 = swift_getOpaqueTypeMetadata2(255, &v28, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v28 = v8;
  v29 = (void *)v9;
  v30 = v10;
  WitnessTable = &protocol witness table for PagingScrollTargetBehavior;
  v12 = swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v28 = v11;
  v29 = &type metadata for Int;
  v30 = v12;
  WitnessTable = &protocol witness table for Int;
  v13 = swift_getOpaqueTypeMetadata2(255, &v28, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v28 = v11;
  v29 = &type metadata for Int;
  v30 = v12;
  WitnessTable = &protocol witness table for Int;
  v14 = swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v28 = v13;
  v29 = (void *)v14;
  v15 = swift_getOpaqueTypeMetadata2(255, &v28, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v16 = sub_1000034AC(&qword_100162600);
  v17 = type metadata accessor for ModifiedContent(255, v15, v16);
  v18 = type metadata accessor for ModifiedContent(255, v17, &type metadata for _FrameLayout);
  v19 = sub_1000034AC(&qword_100161328);
  v20 = type metadata accessor for ModifiedContent(255, v18, v19);
  v21 = sub_1000034AC(&qword_100162608);
  v22 = type metadata accessor for ModifiedContent(255, v20, v21);
  v23 = type metadata accessor for ModifiedContent(255, v22, &type metadata for _PaddingLayout);
  v24 = sub_1000034AC(&qword_100162610);
  v28 = v13;
  v29 = (void *)v14;
  swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  sub_100007D40(&qword_100162618, &qword_100162600, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v17);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  sub_100007D40(&qword_100161320, &qword_100161328, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v20);
  sub_100007D40(&qword_100162620, &qword_100162608, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v22);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v23);
  v26 = sub_1000AAC4C();
  v28 = v23;
  v29 = (void *)v24;
  v30 = v25;
  WitnessTable = (void *)v26;
  return swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t sub_1000AC308(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011A9A8, 1);
}

unint64_t sub_1000AC31C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001628A8;
  if (!qword_1001628A8)
  {
    v1 = sub_1000034AC(&qword_100162888);
    sub_1000AC388();
    sub_1000396D8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001628A8);
  }
  return result;
}

unint64_t sub_1000AC388()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001628B0;
  if (!qword_1001628B0)
  {
    v1 = sub_1000034AC(&qword_100162878);
    sub_100007D40(qword_1001628B8, &qword_100162870, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001628B0);
  }
  return result;
}

uint64_t sub_1000AC40C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  v2 = type metadata accessor for Optional(255, *(_QWORD *)(a1 + 80));
  result = type metadata accessor for Binding(319, v2);
  if (v4 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_initClassMetadata2(a1, 0, 2, v5, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000AC494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;

  *a5 = a1;
  v7 = (char *)a5 + *(int *)(type metadata accessor for PageControl(0, a3, a4, a4) + 36);
  v8 = type metadata accessor for Optional(255, a3);
  v9 = type metadata accessor for Binding(0, v8);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, a2, v9);
}

id sub_1000AC508()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  v1 = objc_msgSend(v0, "colorWithAlphaComponent:", 0.3);

  return v1;
}

uint64_t sub_1000AC570(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Optional(255, *(_QWORD *)(a1 + 16));
  v4 = type metadata accessor for Binding(0, v3);
  return a2(v4);
}

uint64_t sub_1000AC5C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = type metadata accessor for Optional(255, v2);
  v4 = type metadata accessor for Binding(0, v3);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - v5;
  v8 = type metadata accessor for PageControl.Coordinator(0, v2, *(_QWORD *)(a1 + 24), v7);
  sub_1000AC570(a1, (uint64_t (*)(uint64_t))&Binding.projectedValue.getter);
  v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  sub_1000ACB04((uint64_t)v6);
  return v9;
}

uint64_t sub_1000AC674(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_1000ACB04(a1);
  return v3;
}

id sub_1000AC6B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  id v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v12;

  v3 = v2;
  v5 = objc_msgSend(objc_allocWithZone((Class)UIPageControl), "init");
  WitnessTable = swift_getWitnessTable(&unk_1001114F0, a2);
  v7 = type metadata accessor for UIViewRepresentableContext(0, a2, WitnessTable);
  UIViewRepresentableContext.coordinator.getter(&v12, v7);
  v8 = v12;
  objc_msgSend(v5, "addTarget:action:forControlEvents:", v12, "pageDidChange:", 4096);
  swift_release(v8);
  objc_msgSend(v5, "setNumberOfPages:", Array.count.getter(*v3));
  v9 = sub_1000AC508();
  objc_msgSend(v5, "setPageIndicatorTintColor:", v9);

  v10 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  objc_msgSend(v5, "setCurrentPageIndicatorTintColor:", v10);

  return v5;
}

void sub_1000AC7E0(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char v42;
  _QWORD v43[3];

  v4 = v3;
  v37 = a1;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = type metadata accessor for Optional(0, v6);
  v34 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v38 = (char *)&v33 - v9;
  v39 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v8);
  v35 = v11;
  v36 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Binding(0, v11);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v33 - v14;
  WitnessTable = swift_getWitnessTable(&unk_1001114F0, a3);
  v17 = type metadata accessor for UIViewRepresentableContext(0, a3, WitnessTable);
  UIViewRepresentableContext.coordinator.getter(v43, v17);
  v18 = v43[0];
  v19 = *v3;
  v20 = (_QWORD *)(v43[0] + *(_QWORD *)(*(_QWORD *)v43[0] + 104));
  swift_beginAccess(v20, v43, 1, 0);
  *v20 = v19;
  v21 = v37;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease();
  sub_1000AC570(a3, (uint64_t (*)(uint64_t))&Binding.projectedValue.getter);
  v22 = v18 + *(_QWORD *)(*(_QWORD *)v18 + 96);
  swift_beginAccess(v22, &v41, 33, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 40))(v22, v15, v12);
  swift_endAccess(&v41);
  v23 = objc_msgSend(v21, "numberOfPages");
  v24 = *v4;
  if (v23 != (id)Array.count.getter(*v4))
    objc_msgSend(v21, "setNumberOfPages:", Array.count.getter(v24));
  v25 = v38;
  sub_1000AC570(a3, (uint64_t (*)(uint64_t))&Binding.wrappedValue.getter);
  v26 = v39;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v25, 1, v6) == 1)
  {
    v27 = swift_release(v18);
    (*(void (**)(char *, uint64_t, __n128))(v34 + 8))(v25, v35, v27);
  }
  else
  {
    v28 = v36;
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v36, v25, v6);
    v40 = v24;
    v29 = type metadata accessor for Array(0, v6);
    v30 = swift_getWitnessTable(&protocol conformance descriptor for [A], v29);
    Collection<>.firstIndex(of:)(&v41, v28, v29, v30, *(_QWORD *)(a3 + 24));
    if (v42 == 1 || (v31 = v41, v31 == objc_msgSend(v21, "currentPage")))
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v6);
      swift_release(v18);
    }
    else
    {
      objc_msgSend(v21, "setCurrentPage:", v31);
      v32 = swift_release(v18);
      (*(void (**)(char *, uint64_t, __n128))(v26 + 8))(v28, v6, v32);
    }
  }
}

uint64_t sub_1000ACB04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(v1 + v3) = static Array._allocateUninitialized(_:)(0, v4);
  v5 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 96);
  v6 = type metadata accessor for Optional(255, v4);
  v7 = type metadata accessor for Binding(0, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, a1, v7);
  return v1;
}

uint64_t sub_1000ACB84(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t result;
  id v14;
  id v15;
  id v16;
  __n128 v17;
  _BYTE v18[16];
  __int128 v19;
  id v20;
  __int128 v21;
  _BYTE v22[24];

  v2 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = (_QWORD *)(v1 + *(_QWORD *)(v8 + 104));
  swift_beginAccess(v9, v22, 0, 0);
  *(_QWORD *)&v21 = *v9;
  v10 = type metadata accessor for Array(0, v4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  RandomAccessCollection<>.indices.getter(&v19, v10, WitnessTable, &protocol witness table for Int);
  v21 = v19;
  v20 = objc_msgSend(a1, "currentPage");
  v12 = sub_100003E70(qword_100162940);
  result = Range.contains(_:)(&v20, v12);
  if ((result & 1) != 0)
  {
    v14 = objc_msgSend(a1, "currentPage");
    swift_beginAccess(v9, &v19, 32, 0);
    Array.subscript.getter(v14, *v9, v4);
    swift_endAccess(&v19);
    v15 = objc_msgSend(a1, "interactionState");
    v16 = 0;
    if (v15 != (id)2)
    {
      v15 = (id)static Animation.default.getter();
      v16 = v15;
    }
    __chkstk_darwin(v15);
    *(_QWORD *)&v18[-16] = v2;
    *(_QWORD *)&v18[-8] = v7;
    withAnimation<A>(_:_:)(v16, sub_1000AD07C, &v18[-32], (char *)&type metadata for () + 8);
    v17 = swift_release(v16);
    return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v5 + 8))(v7, v4, v17);
  }
  return result;
}

uint64_t sub_1000ACD54(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v18[24];

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 80);
  v6 = type metadata accessor for Optional(0, v5);
  __chkstk_darwin(v6);
  v8 = &v18[-v7 - 8];
  v10 = type metadata accessor for Binding(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v18[-v12 - 8];
  v14 = (uint64_t)a1 + *(_QWORD *)(v4 + 96);
  swift_beginAccess(v14, v18, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  v15 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v8, a2, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v8, 0, 1, v5);
  Binding.wrappedValue.setter(v8, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

double sub_1000ACE98(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  double result;

  v4 = a3;
  swift_retain(a1);
  sub_1000ACB84(v4);

  *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

uint64_t sub_1000ACED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  v2 = type metadata accessor for Optional(255, *(_QWORD *)(*(_QWORD *)v0 + 80));
  v3 = type metadata accessor for Binding(0, v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1, v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104)));
  return v0;
}

uint64_t sub_1000ACF38()
{
  uint64_t v0;

  sub_1000ACED4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for PageControl.Coordinator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PageControl.Coordinator);
}

uint64_t sub_1000ACF70@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_1000AC5C0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000ACF94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1001114F0, a3);
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, WitnessTable);
}

uint64_t sub_1000ACFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1001114F0, a3);
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, WitnessTable);
}

void sub_1000AD04C(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1001114F0, a1);
  UIViewRepresentable.body.getter(a1, WitnessTable);
  __break(1u);
}

uint64_t sub_1000AD07C()
{
  uint64_t v0;

  return sub_1000ACD54(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t type metadata accessor for PageControl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PageControl);
}

uint64_t sub_1000AD0A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  v5[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2 = type metadata accessor for Optional(255, *(_QWORD *)(a1 + 16));
  result = type metadata accessor for Binding(319, v2);
  if (v4 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v5, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_1000AD128(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  int v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  unsigned int (*v23)(const void *, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v9 = v6 + 8;
  if (*(_DWORD *)(v5 + 84))
    v10 = *(_QWORD *)(v5 + 64);
  else
    v10 = *(_QWORD *)(v5 + 64) + 1;
  v11 = v6 & 0x100000;
  v12 = *a2;
  *a1 = *a2;
  if (v7 > 7 || v11 != 0 || ((v7 + 16) & ~v7) + v10 + (v8 & (v7 + 8)) > 0x18)
  {
    a1 = (uint64_t *)(v12 + (v8 & (v7 + 16)));
    swift_retain(v12);
  }
  else
  {
    v15 = ~v7;
    v16 = v8 & ((unint64_t)a2 + 15);
    v17 = *(_QWORD *)v16;
    v16 += 15;
    v18 = (_QWORD *)(v8 & ((unint64_t)a1 + 15));
    *v18 = v17;
    v19 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    v20 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
    *v19 = v20;
    v21 = (void *)(((unint64_t)v19 + v9) & v15);
    v22 = (const void *)((v9 + (v16 & 0xFFFFFFFFFFFFFFF8)) & v15);
    v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain(v12);
    swift_retain(v17);
    swift_retain(v20);
    if (v23(v22, 1, v4))
    {
      memcpy(v21, v22, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v21, v22, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v21, 0, 1, v4);
    }
  }
  return a1;
}

uint64_t sub_1000AD278(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;

  swift_bridgeObjectRelease(*a1);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (_QWORD *)(((unint64_t)a1 + (v6 | 7) + 8) & ~(v6 | 7));
  swift_release(*v7);
  v8 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*v8);
  v9 = ((unint64_t)v8 + v6 + 8) & ~v6;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v4);
  return result;
}

uint64_t *sub_1000AD318(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);
  size_t v18;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 | 7) + 8;
  v9 = (_QWORD *)(((unint64_t)a1 + v8) & ~(v7 | 7));
  v10 = (uint64_t *)(((unint64_t)a2 + v8) & ~(v7 | 7));
  v11 = *v10;
  *v9 = *v10;
  v12 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (uint64_t *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  *v12 = *v13;
  v15 = (void *)(((unint64_t)v12 + v7 + 8) & ~v7);
  v16 = (const void *)(((unint64_t)v13 + v7 + 8) & ~v7);
  v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  swift_bridgeObjectRetain(v4);
  swift_retain(v11);
  swift_retain(v14);
  if (v17(v16, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v18 = *(_QWORD *)(v6 + 64);
    else
      v18 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(v15, v16, v18);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v15, v16, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  return a1;
}

uint64_t *sub_1000AD420(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t (*v22)(void *, uint64_t, uint64_t);
  int v23;
  size_t v24;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 | 7) + 8;
  v12 = (uint64_t *)(((unint64_t)a1 + v11) & ~(v10 | 7));
  v13 = (uint64_t *)(((unint64_t)a2 + v11) & ~(v10 | 7));
  v14 = *v12;
  v15 = *v13;
  *v12 = *v13;
  swift_retain(v15);
  swift_release(v14);
  v16 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v17 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  v18 = *v17;
  v19 = *v16;
  *v16 = *v17;
  swift_retain(v18);
  swift_release(v19);
  v20 = (void *)(((unint64_t)v16 + v10 + 8) & ~v10);
  v21 = (void *)(((unint64_t)v17 + v10 + 8) & ~v10);
  v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  LODWORD(v16) = v22(v20, 1, v8);
  v23 = v22(v21, 1, v8);
  if ((_DWORD)v16)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v20, v21, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v20, 0, 1, v8);
      return a1;
    }
  }
  else
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 24))(v20, v21, v8);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v20, v8);
  }
  if (*(_DWORD *)(v9 + 84))
    v24 = *(_QWORD *)(v9 + 64);
  else
    v24 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v20, v21, v24);
  return a1;
}

_QWORD *sub_1000AD590(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  const void *v13;
  size_t v14;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 8;
  v8 = (_QWORD *)(((unint64_t)a1 + v7) & ~(v6 | 7));
  v9 = (_QWORD *)(((unint64_t)a2 + v7) & ~(v6 | 7));
  *v8 = *v9;
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (void *)(((unint64_t)v10 + v6 + 8) & ~v6);
  v13 = (const void *)(((unint64_t)v11 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84))
      v14 = *(_QWORD *)(v5 + 64);
    else
      v14 = *(_QWORD *)(v5 + 64) + 1;
    memcpy(v12, v13, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v12, v13, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
  }
  return a1;
}

uint64_t *sub_1000AD67C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  size_t v21;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + 8;
  v11 = (uint64_t *)(((unint64_t)a1 + v10) & ~(v9 | 7));
  v12 = (uint64_t *)(((unint64_t)a2 + v10) & ~(v9 | 7));
  v13 = *v11;
  *v11 = *v12;
  swift_release(v13);
  v14 = (uint64_t *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v15 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = *v14;
  *v14 = *v15;
  swift_release(v16);
  v17 = (void *)(((unint64_t)v14 + v9 + 8) & ~v9);
  v18 = (void *)(((unint64_t)v15 + v9 + 8) & ~v9);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v14) = v19(v17, 1, v7);
  v20 = v19(v18, 1, v7);
  if ((_DWORD)v14)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v17, v18, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
      return a1;
    }
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v17, v18, v7);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v17, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v21 = *(_QWORD *)(v8 + 64);
  else
    v21 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v17, v18, v21);
  return a1;
}

uint64_t sub_1000AD7D4(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v6 >= 0)
    v8 = 0x7FFFFFFF;
  else
    v8 = v7;
  if (v5)
    v9 = *(_QWORD *)(v4 + 64);
  else
    v9 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = v10 | 7;
  v12 = v10 + 8;
  v13 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_30;
  v14 = v9 + ((v10 + 16) & ~v10) + (v12 & ~v11);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v18 = ((v13 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16)
        goto LABEL_30;
      goto LABEL_23;
    }
    if (v18 > 0xFF)
    {
      v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(_WORD *)((char *)a1 + v14))
        goto LABEL_30;
      goto LABEL_23;
    }
    if (v18 < 2)
    {
LABEL_30:
      if (v8 == 0x7FFFFFFF)
      {
        v20 = *a1;
        if (*a1 >= 0xFFFFFFFFuLL)
          LODWORD(v20) = -1;
        return (v20 + 1);
      }
      else
      {
        v21 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v12
                                                                     + (((((unint64_t)a1 + v11 + 8) & ~v11) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v10);
        if (v21 >= 2)
          return v21 - 1;
        else
          return 0;
      }
    }
  }
  v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((_BYTE *)a1 + v14))
    goto LABEL_30;
LABEL_23:
  v19 = (v16 - 1) << v15;
  if (v14 > 3)
    v19 = 0;
  if ((_DWORD)v14)
  {
    if (v14 > 3)
      LODWORD(v14) = 4;
    __asm { BR              X12 }
  }
  return v8 + v19 + 1;
}

void sub_1000AD984(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  if (v9 >= 0)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  v12 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v12;
  v13 = ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + v12
      + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(*(unsigned __int8 *)(v7 + 80) | 7));
  v14 = a3 >= v11;
  v15 = a3 - v11;
  if (v15 != 0 && v14)
  {
    if (v13 > 3)
    {
      v6 = &_mh_execute_header.magic + 1;
      if (v11 < a2)
        goto LABEL_22;
      goto LABEL_29;
    }
    v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v6 = &dword_100000004;
      if (v11 < a2)
      {
LABEL_22:
        v17 = ~v11 + a2;
        if (v13 < 4)
        {
          if ((_DWORD)v13)
          {
            v18 = v17 & ~(-1 << (8 * v13));
            bzero(a1, v13);
            if ((_DWORD)v13 == 3)
            {
              *a1 = v18;
              *((_BYTE *)a1 + 2) = BYTE2(v18);
            }
            else if ((_DWORD)v13 == 2)
            {
              *a1 = v18;
            }
            else
            {
              *(_BYTE *)a1 = v18;
            }
          }
        }
        else
        {
          bzero(a1, v13);
          *(_DWORD *)a1 = v17;
        }
        __asm { BR              X10 }
      }
LABEL_29:
      __asm { BR              X0 }
    }
    if (v16 >= 0x100)
      v6 = 2;
    else
      v6 = v16 > 1;
  }
  if (v11 < a2)
    goto LABEL_22;
  goto LABEL_29;
}

void sub_1000ADC08()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1000ADC10()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1000ADC30()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1000ADC40()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1000ADC48()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_1000ADC54(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100111580, a1);
}

uint64_t *sub_1000ADC64(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v12);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL(0);
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t sub_1000ADD18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_1000ADD68(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  return a1;
}

_QWORD *sub_1000ADDF0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_1000ADE8C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *sub_1000ADEE8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_1000ADF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000ADF70);
}

uint64_t sub_1000ADF70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1000ADFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000ADFF8);
}

uint64_t sub_1000ADFF8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AttributionViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100162A20;
  if (!qword_100162A20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AttributionViewModel);
  return result;
}

uint64_t sub_1000AE0A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1001115E8;
  v4[1] = &unk_1001115E8;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000AE11C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  unint64_t v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String v50;
  Swift::String v51;

  v2 = v1;
  v44 = a1;
  v3 = type metadata accessor for AttributionViewModel(0);
  v4 = __chkstk_darwin(v3);
  v49 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttributedString.MarkdownParsingOptions.FailurePolicy(0, v4);
  v47 = *(_QWORD *)(v6 - 8);
  v48 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AttributedString.MarkdownParsingOptions.InterpretedSyntax(0, v7);
  v45 = *(_QWORD *)(v10 - 8);
  v46 = v10;
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AttributedString.MarkdownParsingOptions(0, v11);
  __chkstk_darwin(v14);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v17);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003E70(&qword_10015D950);
  __chkstk_darwin(v20);
  v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v51._object = (void *)0xE000000000000000;
  v24._object = (void *)0x8000000100116ED0;
  v24._countAndFlagsBits = 0xD00000000000001FLL;
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v51._countAndFlagsBits = 0;
  v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v51);

  v50 = v26;
  v27._countAndFlagsBits = 23328;
  v27._object = (void *)0xE200000000000000;
  String.append(_:)(v27);
  v28 = *(_QWORD *)(v2 + 16);
  v29 = *(void **)(v2 + 24);
  swift_bridgeObjectRetain(v29);
  v30._countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 10333;
  v31._object = (void *)0xE200000000000000;
  String.append(_:)(v31);
  v32 = type metadata accessor for URL(0);
  v33 = sub_10003D8AC();
  v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v32, v33);
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 41;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  v38 = v50;
  object = v38._object;
  countAndFlagsBits = v38._countAndFlagsBits;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v19, 1, 1, v32);
  (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v13, enum case for AttributedString.MarkdownParsingOptions.InterpretedSyntax.full(_:), v46);
  (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v9, enum case for AttributedString.MarkdownParsingOptions.FailurePolicy.throwError(_:), v48);
  AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:)(0, v13, v9, 0, 0);
  AttributedString.init(markdown:options:baseURL:)(countAndFlagsBits, object, v16, v19);
  v39 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v22, 0, 1, v39);
  v40 = v49;
  sub_1000AE8DC(v2, v49);
  type metadata accessor for AttributedString(0);
  v41 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v22, 1, v39) == 1)
  {
    sub_1000AE500();
    sub_1000AE920(v40);
    return sub_1000AE95C((uint64_t)v22);
  }
  else
  {
    sub_1000AE920(v40);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v44, v22, v39);
  }
}

uint64_t sub_1000AE500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v16;
  Swift::String v18;
  Swift::String v19;

  v1 = v0;
  v2 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v19._object = (void *)0xE000000000000000;
  v6._object = (void *)0x8000000100116ED0;
  v6._countAndFlagsBits = 0xD00000000000001FLL;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v19._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v19);

  v18 = v8;
  v9._countAndFlagsBits = 32;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v11 = *(_QWORD *)(v1 + 16);
  v10 = *(void **)(v1 + 24);
  swift_bridgeObjectRetain(v10);
  v12._countAndFlagsBits = v11;
  v12._object = v10;
  String.append(_:)(v12);
  v13 = swift_bridgeObjectRelease(v10);
  v16 = v18;
  object = v16._object;
  countAndFlagsBits = v16._countAndFlagsBits;
  AttributeContainer.init()(v13);
  return AttributedString.init(_:attributes:)(countAndFlagsBits, object, v4);
}

void sub_1000AE630(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  ValueWitnessTable *v15;
  uint64_t v16;
  char *v17;
  NSString v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  void **aBlock;
  uint64_t v24;
  Class (*v25)(uint64_t);
  ValueMetadata *v26;
  _QWORD *(*v27)();
  _QWORD *v28;
  char *v29;

  v3 = sub_100003E70(&qword_10015D3B8);
  v4 = swift_allocObject(v3, 192, 7);
  *(_OWORD *)(v4 + 16) = xmmword_10010A6D0;
  v6 = *v1;
  v5 = v1[1];
  *(_QWORD *)(v4 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v4 + 64) = &off_100162E68;
  *(_BYTE *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = v6;
  *(_QWORD *)(v4 + 48) = v5;
  *(_QWORD *)(v4 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v4 + 104) = &off_100162E40;
  *(_BYTE *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v4 + 144) = &off_100162EC8;
  *(_BYTE *)(v4 + 112) = 5;
  v7 = v1[2];
  v8 = v1[3];
  *(_QWORD *)(v4 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v4 + 184) = &off_100162EA0;
  *(_QWORD *)(v4 + 152) = v7;
  *(_QWORD *)(v4 + 160) = v8;
  *(_BYTE *)(v4 + 168) = 0;
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 64);
    v11 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v10 = 0;
    v11 = 0xE000000000000000;
  }
  v26 = &type metadata for AnalyticsString;
  v27 = (_QWORD *(*)())&off_100162E68;
  LOBYTE(aBlock) = 1;
  v24 = v10;
  v25 = (Class (*)(uint64_t))v11;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v29 = sub_1000F4CF4((char *)1, 5, 1, (char *)v4);
  v12 = sub_100005580((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v15->initializeWithCopy)((uint64_t)v14, v16);
  sub_1000DAD34(4, (uint64_t)v14, (uint64_t *)&v29, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_100162E68);
  sub_1000055A8(&aBlock);
  v17 = v29;
  v18 = String._bridgeToObjectiveC()();
  v19 = (_QWORD *)swift_allocObject(&unk_100152370, 40, 7);
  v19[2] = 0xD00000000000001ELL;
  v19[3] = 0x80000001001150B0;
  v19[4] = v17;
  v27 = sub_1000055F4;
  v28 = v19;
  aBlock = _NSConcreteStackBlock;
  v24 = 1107296256;
  v25 = sub_1000DACC0;
  v26 = (ValueMetadata *)&unk_100152388;
  v20 = _Block_copy(&aBlock);
  v21 = v28;
  swift_bridgeObjectRetain(v17);
  swift_release(v21);
  AnalyticsSendEventLazy(v18, v20);
  _Block_release(v20);
  swift_bridgeObjectRelease();

}

uint64_t sub_1000AE898()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000AE8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000AE8D4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000AE8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttributionViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AE920(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AttributionViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000AE95C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003E70(&qword_10015D950);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *assignWithCopy for PromotionalAssetsEntryView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

ValueMetadata *type metadata accessor for PromotionalAssetsEntryView()
{
  return &type metadata for PromotionalAssetsEntryView;
}

uint64_t sub_1000AEA08(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011AB30, 1);
}

double sub_1000AEA18@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001116E0);
  v7 = v3;
  v5 = sub_100003B3C(qword_100160F48, type metadata accessor for PromotionalAssetsPhotoEntryViewModel, (uint64_t)&unk_10010F780);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = *(double *)(v3 + 112);
  *a2 = result;
  return result;
}

void sub_1000AEAA4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001116E0);
  v6[2] = v3;
  v6[3] = v2;
  v7 = v3;
  v5 = sub_100003B3C(qword_100160F48, type metadata accessor for PromotionalAssetsPhotoEntryViewModel, (uint64_t)&unk_10010F780);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_1000B4D70, v6, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
}

double sub_1000AEB54@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100111708);
  v7 = v3;
  v5 = sub_100003B3C(qword_100160F48, type metadata accessor for PromotionalAssetsPhotoEntryViewModel, (uint64_t)&unk_10010F780);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = *(double *)(v3 + 120);
  *a2 = result;
  return result;
}

void sub_1000AEBE0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100111708);
  v6[2] = v3;
  v6[3] = v2;
  v7 = v3;
  v5 = sub_100003B3C(qword_100160F48, type metadata accessor for PromotionalAssetsPhotoEntryViewModel, (uint64_t)&unk_10010F780);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_1000B4D5C, v6, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
}

uint64_t sub_1000AEC90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (**v58)(double *@<X8>, double@<D2>, double@<D3>);
  uint64_t v59;
  uint64_t v60;
  void (**v61)(uint64_t *);
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v75 = a2;
  v80 = a3;
  v4 = type metadata accessor for CoordinateSpace(0);
  v72 = *(_QWORD *)(v4 - 8);
  v73 = v4;
  __chkstk_darwin(v4);
  v69 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PhotoEntryView(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v70 = sub_100003E70(&qword_100162A78);
  __chkstk_darwin(v70);
  v68 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100003E70(&qword_100162A80);
  v10 = __chkstk_darwin(v79);
  v71 = (uint64_t)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v74 = (uint64_t)&v66 - v12;
  v76 = sub_100003E70(&qword_100162A88);
  __chkstk_darwin(v76);
  v78 = (uint64_t)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for DefaultEntryView(0);
  v14 = __chkstk_darwin(v77);
  v16 = (uint64_t *)((char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v18 = (char *)&v66 - v17;
  v19 = sub_100003E70(&qword_100165370);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v66 - v23;
  v25 = type metadata accessor for URL(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v66 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = a1;
  v82 = v75;
  v29 = sub_100003E70(&qword_100162A90);
  State.wrappedValue.getter(&v83, v29);
  v30 = v83;
  sub_1000A5A54((uint64_t)v24);
  v31 = swift_release(v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v26 + 48))(v24, 1, v25, v31) == 1)
  {
    sub_100008194((uint64_t)v24, &qword_100165370);
    *v16 = swift_getKeyPath(&unk_1001116B0);
    v32 = sub_100003E70(&qword_10015D490);
    swift_storeEnumTagMultiPayload(v16, v32, 0);
    v33 = v77;
    v34 = (char *)v16 + *(int *)(v77 + 20);
    *(_QWORD *)v34 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100116250);
    *((_QWORD *)v34 + 1) = v35;
    v34[16] = v36 & 1;
    *((_QWORD *)v34 + 3) = v37;
    v38 = (char *)v16 + *(int *)(v33 + 24);
    *(_QWORD *)v38 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002FLL, 0x8000000100116830);
    *((_QWORD *)v38 + 1) = v39;
    v38[16] = v40 & 1;
    *((_QWORD *)v38 + 3) = v41;
    sub_100030810((uint64_t)v16, (uint64_t)v18, type metadata accessor for DefaultEntryView);
    v42 = v78;
    sub_100028390((uint64_t)v18, v78, type metadata accessor for DefaultEntryView);
    swift_storeEnumTagMultiPayload(v42, v76, 1);
    v43 = sub_1000AF580();
    v44 = sub_100003B3C(&qword_100162AD0, type metadata accessor for DefaultEntryView, (uint64_t)&unk_10011180C);
    _ConditionalContent<>.init(storage:)(v42, v79, v33, v43, v44);
    return sub_1000283D4((uint64_t)v18, type metadata accessor for DefaultEntryView);
  }
  else
  {
    v46 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v67 = v28;
    v46(v28, v24, v25);
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v22, v28, v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v22, 0, 1, v25);
    v47 = type metadata accessor for PromotionalAssetsPhotoEntryViewModel(0);
    swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
    v48 = sub_100083DC4((uint64_t)v22);
    v83 = v48;
    swift_retain(v48);
    State.init(wrappedValue:)(&v83, v47);
    v49 = v82;
    *v8 = v81;
    v8[1] = v49;
    v50 = (_QWORD *)((char *)v8 + *(int *)(v6 + 20));
    *v50 = swift_getKeyPath(&unk_1001116B0);
    v51 = sub_100003E70(&qword_10015D490);
    swift_storeEnumTagMultiPayload(v50, v51, 0);
    v53 = v72;
    v52 = v73;
    v54 = v69;
    (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v69, enum case for CoordinateSpace.local(_:), v73);
    v55 = (uint64_t)v68;
    v56 = &v68[*(int *)(v70 + 36)];
    v57 = sub_100003E70(&qword_100162AB8);
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(&v56[*(int *)(v57 + 36)], v54, v52);
    *(_QWORD *)v56 = &type metadata for PhotoEntryViewSizePreferenceKey;
    v58 = (void (**)(double *@<X8>, double@<D2>, double@<D3>))&v56[*(int *)(v57 + 40)];
    *v58 = sub_10005C0B8;
    v58[1] = 0;
    sub_100028390((uint64_t)v8, v55, type metadata accessor for PhotoEntryView);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v52);
    sub_1000283D4((uint64_t)v8, type metadata accessor for PhotoEntryView);
    v59 = v71;
    sub_100007ADC(v55, v71, &qword_100162A78);
    v60 = v79;
    v61 = (void (**)(uint64_t *))(v59 + *(int *)(v79 + 36));
    *v61 = sub_1000AF6A0;
    v61[1] = (void (*)(uint64_t *))v48;
    swift_retain(v48);
    sub_100008194(v55, &qword_100162A78);
    v62 = v74;
    sub_100007A98(v59, v74, &qword_100162A80);
    v63 = v78;
    sub_100007ADC(v62, v78, &qword_100162A80);
    swift_storeEnumTagMultiPayload(v63, v76, 0);
    v64 = sub_1000AF580();
    v65 = sub_100003B3C(&qword_100162AD0, type metadata accessor for DefaultEntryView, (uint64_t)&unk_10011180C);
    _ConditionalContent<>.init(storage:)(v63, v60, v77, v64, v65);
    swift_release(v48);
    sub_100008194(v62, &qword_100162A80);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v67, v25);
  }
}

void sub_1000AF2F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a1;
  v4 = a1[1];
  KeyPath = swift_getKeyPath(&unk_1001116E0);
  v10 = a2;
  v11 = v3;
  v12 = a2;
  v6 = sub_100003B3C(qword_100160F48, type metadata accessor for PromotionalAssetsPhotoEntryViewModel, (uint64_t)&unk_10010F780);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, KeyPath, sub_1000AF6B0, v9, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  v7 = swift_getKeyPath(&unk_100111708);
  v8[2] = a2;
  v8[3] = v4;
  v12 = a2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, v7, sub_1000AF6D4, v8, (char *)&type metadata for () + 8, v6);
  swift_release(v7);
}

uint64_t sub_1000AF3F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v17;
  uint64_t v19;

  v3 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v3);
  v5 = (_OWORD *)((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100003E70(&qword_100162A60);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000AEC90(*v1, v1[1], (uint64_t)v8);
  v9 = (char *)v5 + *(int *)(v3 + 20);
  v10 = enum case for RoundedCornerStyle.continuous(_:);
  v11 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v9, v10, v11);
  __asm { FMOV            V0.2D, #16.0 }
  *v5 = _Q0;
  v17 = a1 + *(int *)(sub_100003E70(&qword_100162A68) + 36);
  sub_100028390((uint64_t)v5, v17, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_BYTE *)(v17 + *(int *)(sub_100003E70(&qword_100162A70) + 36)) = 0;
  sub_100007ADC((uint64_t)v8, a1, &qword_100162A60);
  sub_1000283D4((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  return sub_100008194((uint64_t)v8, &qword_100162A60);
}

uint64_t type metadata accessor for PhotoEntryView(uint64_t a1)
{
  return sub_10002F744(a1, qword_100162BC8, (uint64_t)&nominal type descriptor for PhotoEntryView);
}

uint64_t type metadata accessor for DefaultEntryView(uint64_t a1)
{
  return sub_10002F744(a1, qword_100162B30, (uint64_t)&nominal type descriptor for DefaultEntryView);
}

unint64_t sub_1000AF580()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162A98;
  if (!qword_100162A98)
  {
    v1 = sub_1000034AC(&qword_100162A80);
    sub_1000AF604();
    sub_100007D40(&qword_100162AC0, &qword_100162AC8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162A98);
  }
  return result;
}

unint64_t sub_1000AF604()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162AA0;
  if (!qword_100162AA0)
  {
    v1 = sub_1000034AC(&qword_100162A78);
    sub_100003B3C(&qword_100162AA8, type metadata accessor for PhotoEntryView, (uint64_t)&unk_10011185C);
    sub_100007D40(&qword_100162AB0, &qword_100162AB8, (uint64_t)&unk_10010F810);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162AA0);
  }
  return result;
}

void sub_1000AF6A0(uint64_t *a1)
{
  uint64_t v1;

  sub_1000AF2F0(a1, v1);
}

uint64_t sub_1000AF6B0()
{
  uint64_t v0;

  return sub_100083D48(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_1000AF6D4()
{
  uint64_t v0;

  return sub_100083DBC(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t *sub_1000AF6F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = *(int *)(a3 + 24);
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    v18 = *((_QWORD *)v17 + 1);
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_QWORD *)v16 + 1) = v18;
    v16[16] = v17[16];
    v19 = *((_QWORD *)v17 + 3);
    *((_QWORD *)v16 + 3) = v19;
    v20 = (char *)a1 + v15;
    v21 = (char *)a2 + v15;
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    v20[16] = v21[16];
    v23 = *((_QWORD *)v21 + 3);
    *((_QWORD *)v20 + 3) = v23;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
  }
  return a1;
}

uint64_t sub_1000AF81C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(a1, v2) == 1)
  {
    v3 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  else
  {
    swift_release(*a1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t *sub_1000AF8B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  v14[16] = v15[16];
  v17 = *((_QWORD *)v15 + 3);
  *((_QWORD *)v14 + 3) = v17;
  v18 = (char *)a1 + v13;
  v19 = (char *)a2 + v13;
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v20;
  v18[16] = v19[16];
  v21 = *((_QWORD *)v19 + 3);
  *((_QWORD *)v18 + 3) = v21;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t *sub_1000AF9B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    sub_100008194((uint64_t)a1, &qword_10015D490);
    v6 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(uint64_t *)((char *)a2 + v12);
  v15 = *(uint64_t *)((char *)a2 + v12 + 8);
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  v13[16] = v14[16];
  v16 = *((_QWORD *)v14 + 3);
  *((_QWORD *)v13 + 3) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease();
  v17 = *(int *)(a3 + 24);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)v18 = *(uint64_t *)((char *)a2 + v17);
  v20 = *(uint64_t *)((char *)a2 + v17 + 8);
  *((_QWORD *)v18 + 1) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease();
  v18[16] = v19[16];
  v21 = *((_QWORD *)v19 + 3);
  *((_QWORD *)v18 + 3) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1000AFB10(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  __int128 v15;

  v6 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = &a1[v8];
  v11 = &a2[v8];
  v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v12;
  v13 = &a1[v9];
  v14 = &a2[v9];
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  return a1;
}

char *sub_1000AFBD0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_100008194((uint64_t)a1, &qword_10015D490);
    v6 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)&a2[v8 + 8];
  *(_QWORD *)v9 = *(_QWORD *)&a2[v8];
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  v9[16] = v10[16];
  *((_QWORD *)v9 + 3) = *((_QWORD *)v10 + 3);
  swift_bridgeObjectRelease();
  v12 = *(int *)(a3 + 24);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  v13[16] = v14[16];
  *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000AFCF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AFD00);
}

uint64_t sub_1000AFD00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100003E70(&qword_10015E6D8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000AFD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AFD90);
}

uint64_t sub_1000AFD90(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100003E70(&qword_10015E6D8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

void sub_1000AFE10(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1000AFE84(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = " ";
    v4[2] = " ";
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_1000AFE84(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015E748)
  {
    v2 = type metadata accessor for ColorScheme(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10015E748);
  }
}

ValueMetadata *type metadata accessor for PhotoEntryViewSizePreferenceKey()
{
  return &type metadata for PhotoEntryViewSizePreferenceKey;
}

uint64_t *sub_1000AFEE8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v6 = a2[1];
    a1[1] = v6;
    v7 = *(int *)(a3 + 20);
    v8 = (uint64_t *)((char *)a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    swift_retain(v5);
    swift_retain(v6);
    v10 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
      v12 = v8;
      v13 = v10;
      v14 = 1;
    }
    else
    {
      v15 = *v9;
      *v8 = *v9;
      swift_retain(v15);
      v12 = v8;
      v13 = v10;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  return a1;
}

double sub_1000AFFCC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_release(*a1);
  swift_release(a1[1]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v5 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

uint64_t *sub_1000B004C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = *(int *)(a3 + 20);
  v7 = (uint64_t *)((char *)a1 + v6);
  v8 = (uint64_t *)((char *)a2 + v6);
  swift_retain(v4);
  swift_retain(v5);
  v9 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
    v11 = 1;
  }
  else
  {
    v12 = *v8;
    *v7 = *v8;
    swift_retain(v12);
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v11);
  return a1;
}

uint64_t *sub_1000B00FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a1[1];
  v9 = a2[1];
  a1[1] = v9;
  swift_retain(v9);
  swift_release(v8);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (uint64_t *)((char *)a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    sub_100008194((uint64_t)a1 + v10, &qword_10015D490);
    v13 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  return a1;
}

_OWORD *sub_1000B01E8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_1000B0290(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_100008194((uint64_t)a1 + v8, &qword_10015D490);
    v11 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000B0370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B037C);
}

uint64_t sub_1000B037C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003E70(&qword_10015E6D8);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1000B03FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B0408);
}

char *sub_1000B0408(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_100003E70(&qword_10015E6D8);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void sub_1000B0480(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100111790;
  sub_1000AFE84(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

unint64_t sub_1000B04F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162C00;
  if (!qword_100162C00)
  {
    v1 = sub_1000034AC(&qword_100162A68);
    sub_1000B057C();
    sub_100007D40(&qword_100162C20, &qword_100162A70, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162C00);
  }
  return result;
}

unint64_t sub_1000B057C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162C08;
  if (!qword_100162C08)
  {
    v1 = sub_1000034AC(&qword_100162A60);
    sub_1000B05E0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100162C08);
  }
  return result;
}

unint64_t sub_1000B05E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162C10;
  if (!qword_100162C10)
  {
    v1 = sub_1000034AC(&qword_100162C18);
    sub_1000AF580();
    sub_100003B3C(&qword_100162AD0, type metadata accessor for DefaultEntryView, (uint64_t)&unk_10011180C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162C10);
  }
  return result;
}

unint64_t sub_1000B0664(uint64_t a1)
{
  unint64_t result;

  result = sub_1000B0688();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0688()
{
  unint64_t result;

  result = qword_100162C28;
  if (!qword_100162C28)
  {
    result = swift_getWitnessTable(&unk_1001117A8, &type metadata for PhotoEntryViewSizePreferenceKey);
    atomic_store(result, (unint64_t *)&qword_100162C28);
  }
  return result;
}

uint64_t sub_1000B06CC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011AB80, 1);
}

uint64_t sub_1000B06DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v2 = (uint64_t)v1;
  v72 = a1;
  v71 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v71);
  v70 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PhotoEntryView(0);
  v64 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v64 + 64);
  __chkstk_darwin(v4);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v7);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100003E70(&qword_100162C30);
  v66 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003E70(&qword_100162C38);
  __chkstk_darwin(v12);
  v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100003E70(&qword_100162C40);
  __chkstk_darwin(v63);
  v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100003E70(&qword_100162C48);
  __chkstk_darwin(v67);
  v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100003E70(&qword_100162C50);
  v19 = __chkstk_darwin(v69);
  v65 = (uint64_t)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v14 = static VerticalAlignment.center.getter(v19);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 0;
  v21 = sub_100003E70(&qword_100162C58);
  sub_1000B0C18(v1, (uint64_t)&v14[*(int *)(v21 + 44)]);
  v22 = v1[1];
  v73 = *v1;
  v74 = v22;
  v23 = sub_100003E70(&qword_100162C60);
  State.wrappedValue.getter(&v75, v23);
  v24 = v75;
  sub_100007ADC(v75 + OBJC_IVAR____TtC16EventViewService36PromotionalAssetsPhotoEntryViewModel_photoURL, (uint64_t)v9, &qword_100165370);
  swift_release(v24);
  v26 = static Animation.easeInOut.getter(v25);
  v27 = Transaction.init(animation:)(v26);
  sub_100028390(v2, (uint64_t)v6, type metadata accessor for PhotoEntryView);
  v28 = *(unsigned __int8 *)(v64 + 80);
  v29 = (v28 + 16) & ~v28;
  v30 = swift_allocObject(&unk_100152470, v29 + v5, v28 | 7);
  sub_100030810((uint64_t)v6, v30 + v29, type metadata accessor for PhotoEntryView);
  v31 = sub_100003E70(&qword_100162C68);
  v32 = sub_1000B3E5C();
  v33 = AsyncImage.init(url:scale:transaction:content:)(v9, v27, sub_1000B3E10, v30, v31, v32, 1.0);
  v34 = static Alignment.center.getter(v33);
  v36 = v35;
  v37 = &v16[*(int *)(v63 + 36)];
  v38 = v66;
  v39 = v68;
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v37, v11, v68);
  v40 = (uint64_t *)&v37[*(int *)(sub_100003E70(&qword_100162CE8) + 36)];
  *v40 = v34;
  v40[1] = v36;
  sub_100007ADC((uint64_t)v14, (uint64_t)v16, &qword_100162C38);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v39);
  sub_100008194((uint64_t)v14, &qword_100162C38);
  v41 = v70;
  v42 = &v70[*(int *)(v71 + 20)];
  v43 = enum case for RoundedCornerStyle.continuous(_:);
  v44 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v42, v43, v44);
  __asm { FMOV            V0.2D, #14.0 }
  *v41 = _Q0;
  v50 = (uint64_t)&v18[*(int *)(v67 + 36)];
  sub_100028390((uint64_t)v41, v50, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v50 + *(int *)(sub_100003E70(&qword_10015E338) + 36)) = 256;
  sub_100007ADC((uint64_t)v16, (uint64_t)v18, &qword_100162C40);
  sub_1000283D4((uint64_t)v41, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v51 = sub_100008194((uint64_t)v16, &qword_100162C40);
  v52 = static Color.black.getter(v51);
  v53 = Color.opacity(_:)(0.08);
  swift_release(v52);
  v54 = v65;
  sub_100007ADC((uint64_t)v18, v65, &qword_100162C48);
  v55 = v54 + *(int *)(v69 + 36);
  *(_QWORD *)v55 = v53;
  *(_OWORD *)(v55 + 8) = xmmword_100111610;
  *(_QWORD *)(v55 + 24) = 0x4010000000000000;
  v56 = sub_100008194((uint64_t)v18, &qword_100162C48);
  v57 = static Color.black.getter(v56);
  v58 = Color.opacity(_:)(0.05);
  swift_release(v57);
  v59 = v72;
  sub_100007ADC(v54, v72, &qword_100162C50);
  v60 = v59 + *(int *)(sub_100003E70(&qword_100162CF0) + 36);
  *(_QWORD *)v60 = v58;
  *(_OWORD *)(v60 + 8) = xmmword_100111620;
  *(_QWORD *)(v60 + 24) = 0x4000000000000000;
  return sub_100008194(v54, &qword_100162C50);
}

uint64_t sub_1000B0C18@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v88 = a2;
  v89 = a1;
  v2 = type metadata accessor for PhotoEntryView(0);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64);
  v83 = *(_QWORD *)(v2 - 8);
  v84 = v3;
  __chkstk_darwin(v2);
  v81 = (uint64_t)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v5);
  v80 = (uint64_t)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_100162D08);
  v86 = *(_QWORD *)(v7 - 8);
  v87 = v7;
  v8 = __chkstk_darwin(v7);
  v85 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v82 = (char *)&v78 - v10;
  v11 = type metadata accessor for BlendMode(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003E70(&qword_100162D10);
  __chkstk_darwin(v15);
  v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003E70(&qword_100162D18);
  __chkstk_darwin(v18);
  v20 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100003E70(&qword_100162D20);
  __chkstk_darwin(v21);
  v23 = (char *)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100003E70(&qword_100162D28);
  __chkstk_darwin(v24);
  v26 = (char *)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100003E70(&qword_100162D30);
  v27 = __chkstk_darwin(v79);
  v29 = (char *)&v78 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v27);
  v78 = (uint64_t)&v78 - v31;
  *(_QWORD *)v17 = static HorizontalAlignment.leading.getter(v30);
  *((_QWORD *)v17 + 1) = 0;
  v17[16] = 0;
  v32 = sub_100003E70(&qword_100162D38);
  sub_1000B1210(v89, (uint64_t)&v17[*(int *)(v32 + 44)]);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for BlendMode.plusLighter(_:), v11);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(&v20[*(int *)(v18 + 36)], v14, v11);
  sub_100007ADC((uint64_t)v17, (uint64_t)v20, &qword_100162D10);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v33 = sub_100008194((uint64_t)v17, &qword_100162D10);
  v34 = static Alignment.leading.getter(v33);
  sub_1000E5A94(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v23, 0.0, 1, 0.0, 1, v34, v35);
  v36 = sub_100008194((uint64_t)v20, &qword_100162D18);
  LOBYTE(v20) = static Edge.Set.vertical.getter(v36);
  v37 = EdgeInsets.init(_all:)(23.0);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  sub_100007ADC((uint64_t)v23, (uint64_t)v26, &qword_100162D20);
  v44 = &v26[*(int *)(v24 + 36)];
  *v44 = (char)v20;
  *((double *)v44 + 1) = v37;
  *((_QWORD *)v44 + 2) = v39;
  *((_QWORD *)v44 + 3) = v41;
  *((_QWORD *)v44 + 4) = v43;
  v44[40] = 0;
  v45 = sub_100008194((uint64_t)v23, &qword_100162D20);
  LOBYTE(v20) = static Edge.Set.leading.getter(v45);
  v46 = EdgeInsets.init(_all:)(14.0);
  v48 = v47;
  v50 = v49;
  v52 = v51;
  sub_100007ADC((uint64_t)v26, (uint64_t)v29, &qword_100162D28);
  v53 = &v29[*(int *)(v79 + 36)];
  *v53 = (char)v20;
  *((double *)v53 + 1) = v46;
  *((_QWORD *)v53 + 2) = v48;
  *((_QWORD *)v53 + 3) = v50;
  *((_QWORD *)v53 + 4) = v52;
  v53[40] = 0;
  sub_100008194((uint64_t)v26, &qword_100162D28);
  v54 = v78;
  sub_100007A98((uint64_t)v29, v78, &qword_100162D30);
  v55 = v89;
  v56 = v89[1];
  v90 = *v89;
  v91 = v56;
  v57 = sub_100003E70(&qword_100162C60);
  State.wrappedValue.getter(&v92, v57);
  v58 = v92;
  v59 = v80;
  sub_100007ADC(v92 + OBJC_IVAR____TtC16EventViewService36PromotionalAssetsPhotoEntryViewModel_photoURL, v80, &qword_100165370);
  swift_release(v58);
  v61 = static Animation.easeInOut.getter(v60);
  v62 = Transaction.init(animation:)(v61);
  v63 = v81;
  sub_100028390((uint64_t)v55, v81, type metadata accessor for PhotoEntryView);
  v64 = *(unsigned __int8 *)(v83 + 80);
  v65 = (v64 + 16) & ~v64;
  v66 = swift_allocObject(&unk_100152498, v65 + v84, v64 | 7);
  sub_100030810(v63, v66 + v65, type metadata accessor for PhotoEntryView);
  v67 = sub_100003E70(&qword_100162D40);
  v68 = sub_1000B43C0();
  v69 = v82;
  AsyncImage.init(url:scale:transaction:content:)(v59, v62, sub_1000B4374, v66, v67, v68, 1.0);
  sub_100007ADC(v54, (uint64_t)v29, &qword_100162D30);
  v70 = v85;
  v71 = v86;
  v72 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
  v73 = v87;
  v72(v85, v69, v87);
  v74 = v88;
  sub_100007ADC((uint64_t)v29, v88, &qword_100162D30);
  v75 = sub_100003E70(&qword_100162D80);
  v72((char *)(v74 + *(int *)(v75 + 48)), v70, v73);
  v76 = *(void (**)(char *, uint64_t))(v71 + 8);
  v76(v69, v73);
  sub_100008194(v54, &qword_100162D30);
  v76(v70, v73);
  return sub_100008194((uint64_t)v29, &qword_100162D30);
}

uint64_t sub_1000B1210@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  _OWORD *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  double v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  _BYTE v161[7];
  _BYTE v162[7];
  char v163;
  _BYTE v164[7];
  char v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  _BYTE v173[25];

  v158 = a2;
  v157 = sub_100003E70(&qword_10015E338);
  __chkstk_darwin(v157);
  v155 = (uint64_t)&v138 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v153);
  v152 = (char *)&v138 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_100003E70(&qword_100162D90);
  v5 = __chkstk_darwin(v154);
  v7 = (_OWORD *)((char *)&v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v156 = (uint64_t)&v138 - v8;
  v9 = sub_100003E70(&qword_10015EBE8);
  __chkstk_darwin(v9);
  v11 = (char *)&v138 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003E70(&qword_100161F10);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v138 - v17;
  v150 = (uint64_t)&v138 - v17;
  *(_QWORD *)v11 = static VerticalAlignment.center.getter(v16);
  *((_QWORD *)v11 + 1) = 0x4010000000000000;
  v11[16] = 0;
  v19 = sub_100003E70(&qword_10015EC00);
  v20 = sub_1000B1BE4(a1, (uint64_t)&v11[*(int *)(v19 + 44)]);
  v21 = static Edge.Set.bottom.getter(v20);
  v22 = EdgeInsets.init(_all:)(4.0);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  sub_100007ADC((uint64_t)v11, (uint64_t)v15, &qword_10015EBE8);
  v29 = &v15[*(int *)(v12 + 36)];
  v151 = v15;
  *v29 = v21;
  *((double *)v29 + 1) = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  v29[40] = 0;
  sub_100008194((uint64_t)v11, &qword_10015EBE8);
  sub_100007A98((uint64_t)v15, (uint64_t)v18, &qword_100161F10);
  v140 = *a1;
  v139 = a1[1];
  *(_QWORD *)&v166 = v140;
  *((_QWORD *)&v166 + 1) = v139;
  v138 = sub_100003E70(&qword_100162C60);
  State.wrappedValue.getter(&v159, v138);
  v30 = v159;
  v31 = *(_QWORD *)(v159 + 48);
  v32 = *(_QWORD *)(v159 + 56);
  v33 = *(unsigned __int8 *)(v159 + 64);
  v34 = *(_QWORD *)(v159 + 72);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v34);
  swift_release(v30);
  v35 = Text.init(_:tableName:bundle:comment:)(v31, v32, v33, v34, 0, 0, 0, 0, 0, 256);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  v42 = static Font.footnote.getter(v35);
  static Font.Weight.regular.getter();
  v43 = Font.weight(_:)(v42);
  swift_release(v42);
  v44 = Text.font(_:)(v43, v35, v37, v41, v39);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  swift_release(v43);
  sub_10000BFF8(v35, v37, v41);
  v51 = swift_bridgeObjectRelease();
  v52 = static Color.white.getter(v51);
  v53 = Color.opacity(_:)(0.6);
  swift_release(v52);
  *(_QWORD *)&v166 = v53;
  v149 = Text.foregroundStyle<A>(_:)(&v166, v44, v46, v48 & 1, v50, &type metadata for Color, &protocol witness table for Color);
  v147 = v54;
  v148 = v55;
  v146 = v56 & 1;
  sub_10000BFF8(v44, v46, v48 & 1);
  swift_release(v53);
  v57 = swift_bridgeObjectRelease();
  v145 = static Edge.Set.bottom.getter(v57);
  v144 = EdgeInsets.init(_all:)(12.0);
  v143 = v58;
  v142 = v59;
  v141 = v60;
  *(_QWORD *)&v166 = v140;
  *((_QWORD *)&v166 + 1) = v139;
  State.wrappedValue.getter(&v159, v138);
  v61 = v159;
  v62 = *(_QWORD *)(v159 + 80);
  v63 = *(_QWORD *)(v159 + 88);
  v64 = *(unsigned __int8 *)(v159 + 96);
  v65 = *(_QWORD *)(v159 + 104);
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRetain(v65);
  swift_release(v61);
  LOWORD(v137) = 256;
  v66 = Text.init(_:tableName:bundle:comment:)(v62, v63, v64, v65, 0, 0, 0, 0, 0, v137);
  v68 = v67;
  v70 = v69;
  v72 = v71 & 1;
  v73 = static Font.subheadline.getter(v66);
  static Font.Weight.regular.getter();
  v74 = Font.weight(_:)(v73);
  swift_release(v73);
  v75 = Text.font(_:)(v74, v66, v68, v72, v70);
  v77 = v76;
  LOBYTE(v39) = v78;
  v80 = v79;
  swift_release(v74);
  v81 = v39 & 1;
  sub_10000BFF8(v66, v68, v72);
  v82 = swift_bridgeObjectRelease();
  v83 = static Color.white.getter(v82);
  *(_QWORD *)&v166 = v83;
  v84 = Text.foregroundStyle<A>(_:)(&v166, v75, v77, v81, v80, &type metadata for Color, &protocol witness table for Color);
  v86 = v85;
  LOBYTE(v72) = v87;
  v89 = v88;
  sub_10000BFF8(v75, v77, v81);
  swift_release(v83);
  v90 = swift_bridgeObjectRelease();
  LOBYTE(v77) = static Edge.Set.horizontal.getter(v90);
  v91 = EdgeInsets.init(_all:)(12.0);
  v93 = v92;
  v95 = v94;
  v97 = v96;
  LOBYTE(v81) = static Edge.Set.vertical.getter(v98);
  v99 = EdgeInsets.init(_all:)(4.0);
  v101 = v100;
  v103 = v102;
  v105 = v104;
  v165 = v72 & 1;
  v163 = 0;
  v160 = 0;
  v107 = static Color.white.getter(v106);
  v108 = Color.opacity(_:)(0.09);
  swift_release(v107);
  v110 = static Edge.Set.all.getter(v109);
  *(_QWORD *)&v166 = v84;
  *((_QWORD *)&v166 + 1) = v86;
  LOBYTE(v167) = v165;
  *(_DWORD *)((char *)&v167 + 1) = v159;
  DWORD1(v167) = *(_DWORD *)((char *)&v159 + 3);
  *((_QWORD *)&v167 + 1) = v89;
  LOBYTE(v168) = v77;
  *(_DWORD *)((char *)&v168 + 1) = *(_DWORD *)v164;
  DWORD1(v168) = *(_DWORD *)&v164[3];
  *((double *)&v168 + 1) = v91;
  *(_QWORD *)&v169 = v93;
  *((_QWORD *)&v169 + 1) = v95;
  *(_QWORD *)&v170 = v97;
  BYTE8(v170) = v163;
  HIDWORD(v170) = *(_DWORD *)&v162[3];
  *(_DWORD *)((char *)&v170 + 9) = *(_DWORD *)v162;
  LOBYTE(v171) = v81;
  DWORD1(v171) = *(_DWORD *)&v161[3];
  *(_DWORD *)((char *)&v171 + 1) = *(_DWORD *)v161;
  *((double *)&v171 + 1) = v99;
  *(_QWORD *)&v172 = v101;
  *((_QWORD *)&v172 + 1) = v103;
  *(_QWORD *)v173 = v105;
  v173[8] = v160;
  *(_QWORD *)&v173[16] = v108;
  v173[24] = v110;
  v111 = v152;
  v112 = &v152[*(int *)(v153 + 20)];
  v113 = enum case for RoundedCornerStyle.continuous(_:);
  v114 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 104))(v112, v113, v114);
  __asm { FMOV            V0.2D, #16.0 }
  *v111 = _Q0;
  v120 = v155;
  sub_100028390((uint64_t)v111, v155, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v120 + *(int *)(v157 + 36)) = 256;
  sub_100007ADC(v120, (uint64_t)v7 + *(int *)(v154 + 36), &qword_10015E338);
  v121 = *(_OWORD *)v173;
  v7[6] = v172;
  v7[7] = v121;
  *(_OWORD *)((char *)v7 + 121) = *(_OWORD *)&v173[9];
  v122 = v169;
  v7[2] = v168;
  v7[3] = v122;
  v123 = v171;
  v7[4] = v170;
  v7[5] = v123;
  v124 = v167;
  *v7 = v166;
  v7[1] = v124;
  sub_10001BFE0((uint64_t)&v166);
  sub_100008194(v120, &qword_10015E338);
  sub_1000283D4((uint64_t)v111, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_10001C030((uint64_t)&v166);
  v125 = v156;
  sub_100007A98((uint64_t)v7, v156, &qword_100162D90);
  v126 = v150;
  v127 = (uint64_t)v151;
  sub_100007ADC(v150, (uint64_t)v151, &qword_100161F10);
  sub_100007ADC(v125, (uint64_t)v7, &qword_100162D90);
  v128 = v158;
  sub_100007ADC(v127, v158, &qword_100161F10);
  v129 = sub_100003E70(&qword_100162D98);
  v130 = v128 + *(int *)(v129 + 48);
  v131 = v149;
  v132 = v147;
  *(_QWORD *)v130 = v149;
  *(_QWORD *)(v130 + 8) = v132;
  LOBYTE(v86) = v146;
  *(_BYTE *)(v130 + 16) = v146;
  v133 = v148;
  *(_QWORD *)(v130 + 24) = v148;
  *(_BYTE *)(v130 + 32) = v145;
  v134 = v143;
  *(double *)(v130 + 40) = v144;
  *(_QWORD *)(v130 + 48) = v134;
  v135 = v141;
  *(_QWORD *)(v130 + 56) = v142;
  *(_QWORD *)(v130 + 64) = v135;
  *(_BYTE *)(v130 + 72) = 0;
  sub_100007ADC((uint64_t)v7, v128 + *(int *)(v129 + 64), &qword_100162D90);
  sub_10000C008(v131, v132, v86);
  swift_bridgeObjectRetain(v133);
  sub_100008194(v125, &qword_100162D90);
  sub_100008194(v126, &qword_100161F10);
  sub_100008194((uint64_t)v7, &qword_100162D90);
  sub_10000BFF8(v131, v132, v86);
  swift_bridgeObjectRelease();
  return sub_100008194(v127, &qword_100161F10);
}

uint64_t sub_1000B1BE4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  __int128 v62;

  v50 = a2;
  v3 = sub_100003E70(&qword_10015EC18);
  v4 = __chkstk_darwin(v3);
  v49 = (uint64_t)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v49 - v6;
  v8 = Image.init(_:bundle:)(0xD000000000000020, 0x8000000100116EF0, 0);
  v9 = static Alignment.center.getter(v8);
  _FrameLayout.init(width:height:alignment:)(&v58, 0x4032000000000000, 0, 0x4031000000000000, 0, v9, v10);
  v52 = v8;
  v53 = v58;
  v54 = v59;
  v55 = v60;
  v56 = v61;
  v57 = v62;
  v11 = sub_100003E70(&qword_10015EC20);
  v12 = sub_1000B45B0((unint64_t *)&qword_10015EC28, &qword_10015EC20);
  View.accessibilityHidden(_:)(1, v11, v12);
  swift_release(v8);
  v13 = a1[1];
  v52 = *a1;
  v53 = v13;
  v14 = sub_100003E70(&qword_100162C60);
  State.wrappedValue.getter(&v51, v14);
  v15 = v51;
  v16 = *(_QWORD *)(v51 + 16);
  v17 = *(_QWORD *)(v51 + 24);
  v18 = *(unsigned __int8 *)(v51 + 32);
  v19 = *(_QWORD *)(v51 + 40);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v19);
  swift_release(v15);
  v20 = Text.init(_:tableName:bundle:comment:)(v16, v17, v18, v19, 0, 0, 0, 0, 0, 256);
  v22 = v21;
  v24 = v23;
  v26 = v25 & 1;
  v27 = static Font.subheadline.getter(v20);
  static Font.Weight.semibold.getter();
  v28 = Font.weight(_:)(v27);
  swift_release(v27);
  v29 = Text.font(_:)(v28, v20, v22, v26, v24);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  swift_release(v28);
  v36 = v33 & 1;
  sub_10000BFF8(v20, v22, v26);
  v37 = swift_bridgeObjectRelease();
  v38 = static Color.white.getter(v37);
  v52 = v38;
  v39 = Text.foregroundStyle<A>(_:)(&v52, v29, v31, v36, v35, &type metadata for Color, &protocol witness table for Color);
  v41 = v40;
  v43 = v42;
  LOBYTE(v28) = v44 & 1;
  sub_10000BFF8(v29, v31, v36);
  swift_release(v38);
  swift_bridgeObjectRelease();
  v45 = v49;
  sub_100007ADC((uint64_t)v7, v49, &qword_10015EC18);
  v46 = v50;
  sub_100007ADC(v45, v50, &qword_10015EC18);
  v47 = v46 + *(int *)(sub_100003E70(&qword_10015EC30) + 48);
  *(_QWORD *)v47 = v39;
  *(_QWORD *)(v47 + 8) = v41;
  *(_BYTE *)(v47 + 16) = v28;
  *(_QWORD *)(v47 + 24) = v43;
  sub_10000C008(v39, v41, v28);
  swift_bridgeObjectRetain(v43);
  sub_100008194((uint64_t)v7, &qword_10015EC18);
  sub_10000BFF8(v39, v41, v28);
  swift_bridgeObjectRelease();
  return sub_100008194(v45, &qword_10015EC18);
}

double sub_1000B1F34@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  double result;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  _BYTE v68[7];
  char v69;
  _BYTE v70[7];
  char v71;
  _BYTE v72[7];
  char v73;
  _BYTE v74[7];
  char v75;
  int v76;
  __int16 v77;
  char v78;
  uint64_t v79[2];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[40];
  _OWORD v88[9];
  _OWORD v89[2];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _OWORD v99[2];
  uint64_t v100;
  unsigned __int8 v101;
  uint64_t v102;
  unsigned __int8 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _OWORD v124[3];

  v67 = a3;
  v5 = type metadata accessor for Image.ResizingMode(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AsyncImagePhase(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v10 + 88))(v12, v9) == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v10 + 96))(v12, v9);
    v66 = *v12;
    v13 = v66;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v5);
    v65 = Image.resizable(capInsets:resizingMode:)(v8, v13, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v14 = a2[1];
    *(_QWORD *)&v115 = *a2;
    *((_QWORD *)&v115 + 1) = v14;
    v15 = v115;
    v58 = v115;
    v16 = sub_100003E70(&qword_100162C60);
    State.wrappedValue.getter(&v90, v16);
    v17 = v90;
    KeyPath = swift_getKeyPath(&unk_100111708);
    *(_QWORD *)&v115 = v17;
    v19 = sub_100003B3C(qword_100160F48, type metadata accessor for PromotionalAssetsPhotoEntryViewModel, (uint64_t)&unk_10010F780);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v115, KeyPath, v19);
    swift_release(KeyPath);
    v20 = *(double *)(v17 + 120);
    swift_release(v17);
    v21 = v20 * 1.5;
    *(_QWORD *)&v115 = v15;
    *((_QWORD *)&v115 + 1) = v14;
    State.wrappedValue.getter(&v90, v16);
    v22 = v90;
    v23 = swift_getKeyPath(&unk_100111708);
    *(_QWORD *)&v115 = v22;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v115, v23, v19);
    swift_release(v23);
    v24 = *(double *)(v22 + 120);
    swift_release(v22);
    v26 = static Alignment.center.getter(v25);
    ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(&v100, *(_QWORD *)&v21, 0, v24 * 1.5, 0, v26, v27);
    v61 = v100;
    v62 = v102;
    v59 = v103;
    v60 = v101;
    v63 = v105;
    v64 = v104;
    v28 = v58;
    *(_QWORD *)&v115 = v58;
    *((_QWORD *)&v115 + 1) = v14;
    State.wrappedValue.getter(&v90, v16);
    v29 = v90;
    v30 = swift_getKeyPath(&unk_100111708);
    *(_QWORD *)&v115 = v29;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v115, v30, v19);
    swift_release(v30);
    v31 = *(_QWORD *)(v29 + 120);
    swift_release(v29);
    *(_QWORD *)&v115 = v28;
    *((_QWORD *)&v115 + 1) = v14;
    State.wrappedValue.getter(&v90, v16);
    v32 = v90;
    v33 = swift_getKeyPath(&unk_100111708);
    *(_QWORD *)&v115 = v32;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v115, v33, v19);
    swift_release(v33);
    v34 = *(_QWORD *)(v32 + 120);
    swift_release(v32);
    v36 = static Alignment.center.getter(v35);
    _FrameLayout.init(width:height:alignment:)(&v106, v31, 0, v34, 0, v36, v37);
    v38 = v106;
    v39 = v108;
    v41 = v110;
    v40 = v111;
    v78 = 1;
    v75 = v60;
    v73 = v59;
    v71 = v107;
    v69 = v109;
    v42 = sub_100003E70(&qword_10015E0E0);
    v43 = swift_allocObject(v42, 48, 7);
    *(_OWORD *)(v43 + 16) = xmmword_10010A6C0;
    v44 = static Color.clear.getter(v43);
    *(_QWORD *)(v43 + 32) = v44;
    *(_QWORD *)(v43 + 40) = static Color.black.getter(v44);
    *(_QWORD *)&v115 = v43;
    specialized Array._endMutation()(v45);
    Gradient.init(colors:)(v115);
    LinearGradient.init(gradient:startPoint:endPoint:)(&v112, v46, 0.0, 0.0, 0.75, 0.0);
    v79[0] = v65;
    v79[1] = 0;
    LOBYTE(v80) = v78;
    BYTE1(v80) = 1;
    *(_DWORD *)((char *)&v80 + 2) = v76;
    WORD3(v80) = v77;
    *((_QWORD *)&v80 + 1) = v61;
    LOBYTE(v81) = v75;
    *(_DWORD *)((char *)&v81 + 1) = *(_DWORD *)v74;
    DWORD1(v81) = *(_DWORD *)&v74[3];
    *((_QWORD *)&v81 + 1) = v62;
    LOBYTE(v82) = v73;
    *(_DWORD *)((char *)&v82 + 1) = *(_DWORD *)v72;
    DWORD1(v82) = *(_DWORD *)&v72[3];
    *((_QWORD *)&v82 + 1) = v64;
    *(_QWORD *)&v83 = v63;
    *((_QWORD *)&v83 + 1) = v38;
    LOBYTE(v84) = v71;
    *(_DWORD *)((char *)&v84 + 1) = *(_DWORD *)v70;
    DWORD1(v84) = *(_DWORD *)&v70[3];
    *((_QWORD *)&v84 + 1) = v39;
    LOBYTE(v85) = v69;
    DWORD1(v85) = *(_DWORD *)&v68[3];
    *(_DWORD *)((char *)&v85 + 1) = *(_DWORD *)v68;
    *((_QWORD *)&v85 + 1) = v41;
    *(_QWORD *)&v86 = v40;
    WORD4(v86) = 0;
    *(_QWORD *)v87 = v112;
    *(_OWORD *)&v87[8] = v113;
    *(_OWORD *)&v87[24] = v114;
    v90 = (unint64_t)v65;
    v91 = v80;
    v94 = v83;
    v95 = v84;
    v92 = v81;
    v93 = v82;
    *(_QWORD *)&v99[1] = *((_QWORD *)&v114 + 1);
    v98 = *(_OWORD *)v87;
    v99[0] = *(_OWORD *)&v87[16];
    v96 = v85;
    v97 = v86;
    sub_1000B4540((uint64_t)&v90);
    sub_100007A98((uint64_t)&v90, (uint64_t)&v115, &qword_100162D88);
    sub_1000B4548(v79);
    sub_1000B4548(v79);
    v47 = sub_100003E70(&qword_100162D58);
    v48 = sub_1000B442C();
    _ConditionalContent<>.init(storage:)(&v115, v47, &type metadata for EmptyView, v48, &protocol witness table for EmptyView);
    swift_release(v66);
    sub_1000B457C(v79);
    sub_1000B457C(v79);
    v122 = v88[7];
    v123 = v88[8];
    v124[0] = v89[0];
    *(_OWORD *)((char *)v124 + 9) = *(_OWORD *)((char *)v89 + 9);
    v118 = v88[3];
    v119 = v88[4];
    v120 = v88[5];
    v121 = v88[6];
    v115 = v88[0];
    v116 = v88[1];
    v117 = v88[2];
  }
  else
  {
    sub_1000B4534((uint64_t)v88);
    sub_100007A98((uint64_t)v88, (uint64_t)&v115, &qword_100162D88);
    v49 = sub_100003E70(&qword_100162D58);
    v50 = sub_1000B442C();
    _ConditionalContent<>.init(storage:)(&v115, v49, &type metadata for EmptyView, v50, &protocol witness table for EmptyView);
    (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
    v122 = v97;
    v123 = v98;
    v124[0] = v99[0];
    *(_OWORD *)((char *)v124 + 9) = *(_OWORD *)((char *)v99 + 9);
    v118 = v93;
    v119 = v94;
    v120 = v95;
    v121 = v96;
    v115 = v90;
    v116 = v91;
    v117 = v92;
  }
  v51 = v122;
  v52 = v124[0];
  v53 = v67;
  v67[8] = v123;
  v53[9] = v52;
  *(_OWORD *)((char *)v53 + 153) = *(_OWORD *)((char *)v124 + 9);
  v54 = v118;
  v55 = v120;
  v53[4] = v119;
  v53[5] = v55;
  v53[6] = v121;
  v53[7] = v51;
  v56 = v116;
  *v53 = v115;
  v53[1] = v56;
  result = *(double *)&v117;
  v53[2] = v117;
  v53[3] = v54;
  return result;
}

double sub_1000B263C@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t KeyPath;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  double result;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE v91[24];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _OWORD v105[2];
  _OWORD v106[14];
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _OWORD v122[2];
  __int128 v123;
  __int128 v124;
  _OWORD v125[12];
  _OWORD v126[2];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  _OWORD v141[2];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _OWORD v156[2];
  uint64_t v157;
  unsigned __int8 v158;
  uint64_t v159;
  unsigned __int8 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  char v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  __int16 v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  char v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  _OWORD v196[3];

  v6 = type metadata accessor for Image.ResizingMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AsyncImagePhase(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 != enum case for AsyncImagePhase.success(_:))
  {
    if (v14 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v11 + 96))(v13, v10);
      swift_errorRelease(*v13);
    }
    else if (v14 != enum case for AsyncImagePhase.empty(_:))
    {
      sub_1000B41D4((uint64_t)&v127);
      sub_100007A98((uint64_t)&v127, (uint64_t)&v182, &qword_100162CF8);
      v74 = sub_100003E70(&qword_100162C80);
      v75 = sub_1000B3EC8();
      _ConditionalContent<>.init(storage:)(&v182, v74, &type metadata for EmptyView, v75, &protocol witness table for EmptyView);
      (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
      v194 = v154;
      v195 = v155;
      v196[0] = v156[0];
      *(_OWORD *)((char *)v196 + 11) = *(_OWORD *)((char *)v156 + 11);
      v190 = v150;
      v191 = v151;
      v192 = v152;
      v193 = v153;
      v186 = v146;
      v187 = v147;
      v188 = v148;
      v189 = v149;
      v182 = v142;
      v183 = v143;
      v72 = v144;
      v73 = v145;
      goto LABEL_8;
    }
    v51 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray2Color");
    *(_QWORD *)v91 = Color.init(uiColor:)(v51);
    v53 = a2[1];
    *(_QWORD *)&v182 = *a2;
    v52 = v182;
    *((_QWORD *)&v182 + 1) = v53;
    v54 = sub_100003E70(&qword_100162C60);
    State.wrappedValue.getter(&v142, v54);
    v55 = v142;
    KeyPath = swift_getKeyPath(&unk_1001116E0);
    *(_QWORD *)&v182 = v55;
    v57 = sub_100003B3C(qword_100160F48, type metadata accessor for PromotionalAssetsPhotoEntryViewModel, (uint64_t)&unk_10010F780);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v182, KeyPath, v57);
    swift_release(KeyPath);
    v58 = *(_QWORD *)(v55 + 112);
    swift_release(v55);
    *(_QWORD *)&v182 = v52;
    *((_QWORD *)&v182 + 1) = v53;
    State.wrappedValue.getter(&v142, v54);
    v59 = v142;
    v60 = swift_getKeyPath(&unk_100111708);
    *(_QWORD *)&v182 = v59;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v182, v60, v57);
    swift_release(v60);
    v61 = *(_QWORD *)(v59 + 120);
    swift_release(v59);
    v63 = static Alignment.center.getter(v62);
    _FrameLayout.init(width:height:alignment:)(&v91[8], v58, 0, v61, 0, v63, v64);
    v65 = *(_QWORD *)v91;
    v123 = *(_OWORD *)v91;
    LOBYTE(v124) = v91[16];
    *((_QWORD *)&v124 + 1) = v92;
    LOBYTE(v125[0]) = BYTE8(v92);
    *(_OWORD *)((char *)v125 + 8) = v93;
    sub_1000B41E0((uint64_t)&v123);
    sub_100007A98((uint64_t)&v123, (uint64_t)&v182, &qword_100162D00);
    swift_retain(v65);
    v66 = sub_100003E70(&qword_100162C90);
    v67 = sub_100003E70(&qword_100162CE0);
    v68 = sub_1000B3F34();
    v69 = sub_1000B4168();
    _ConditionalContent<>.init(storage:)(&v182, v66, v67, v68, v69);
    v154 = v120;
    v155 = v121;
    v156[0] = v122[0];
    *(_OWORD *)((char *)v156 + 10) = *(_OWORD *)((char *)v122 + 10);
    v150 = v116;
    v151 = v117;
    v152 = v118;
    v153 = v119;
    v146 = v112;
    v147 = v113;
    v148 = v114;
    v149 = v115;
    v142 = v108;
    v143 = v109;
    v144 = v110;
    v145 = v111;
    sub_1000B41EC((uint64_t)&v142);
    sub_100007A98((uint64_t)&v142, (uint64_t)&v182, &qword_100162CF8);
    v70 = sub_100003E70(&qword_100162C80);
    v71 = sub_1000B3EC8();
    _ConditionalContent<>.init(storage:)(&v182, v70, &type metadata for EmptyView, v71, &protocol witness table for EmptyView);
    swift_release(v65);
    v194 = v139;
    v195 = v140;
    v196[0] = v141[0];
    *(_OWORD *)((char *)v196 + 11) = *(_OWORD *)((char *)v141 + 11);
    v190 = v135;
    v191 = v136;
    v192 = v137;
    v193 = v138;
    v186 = v131;
    v187 = v132;
    v188 = v133;
    v189 = v134;
    v182 = v127;
    v183 = v128;
    v72 = v129;
    v73 = v130;
LABEL_8:
    v184 = v72;
    v185 = v73;
    goto LABEL_9;
  }
  (*(void (**)(_QWORD *, uint64_t))(v11 + 96))(v13, v10);
  *(_QWORD *)v91 = *v13;
  v15 = *(_QWORD *)v91;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Image.ResizingMode.stretch(_:), v6);
  v90 = Image.resizable(capInsets:resizingMode:)(v9, v15, 0.0, 0.0, 0.0, 0.0);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v16 = a2[1];
  *(_QWORD *)&v182 = *a2;
  v17 = v182;
  *((_QWORD *)&v182 + 1) = v16;
  v18 = v16;
  v19 = sub_100003E70(&qword_100162C60);
  State.wrappedValue.getter(&v142, v19);
  v20 = v142;
  v21 = swift_getKeyPath(&unk_1001116E0);
  *(_QWORD *)&v182 = v20;
  v22 = sub_100003B3C(qword_100160F48, type metadata accessor for PromotionalAssetsPhotoEntryViewModel, (uint64_t)&unk_10010F780);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v182, v21, v22);
  swift_release(v21);
  v23 = *(double *)(v20 + 112);
  swift_release(v20);
  *(_QWORD *)&v182 = v17;
  *((_QWORD *)&v182 + 1) = v18;
  v24 = v18;
  State.wrappedValue.getter(&v142, v19);
  v25 = v142;
  v26 = swift_getKeyPath(&unk_100111708);
  *(_QWORD *)&v182 = v25;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v182, v26, v22);
  swift_release(v26);
  v27 = *(_QWORD *)(v25 + 120);
  swift_release(v25);
  v29 = static Alignment.center.getter(v28);
  ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(&v157, v23 * 3.0, 0, v27, 0, v29, v30);
  v89 = v157;
  v88 = v158;
  v87 = v159;
  v86 = v160;
  v84 = v162;
  v85 = v161;
  *(_QWORD *)&v182 = v17;
  *((_QWORD *)&v182 + 1) = v24;
  State.wrappedValue.getter(&v142, v19);
  v31 = v142;
  v32 = swift_getKeyPath(&unk_1001116E0);
  *(_QWORD *)&v182 = v31;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v182, v32, v22);
  swift_release(v32);
  v33 = *(_QWORD *)(v31 + 112);
  swift_release(v31);
  *(_QWORD *)&v182 = v17;
  *((_QWORD *)&v182 + 1) = v24;
  State.wrappedValue.getter(&v142, v19);
  v34 = v142;
  v35 = swift_getKeyPath(&unk_100111708);
  *(_QWORD *)&v182 = v34;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v182, v35, v22);
  swift_release(v35);
  v36 = *(_QWORD *)(v34 + 120);
  swift_release(v34);
  v38 = static Alignment.leading.getter(v37);
  v40 = _FrameLayout.init(width:height:alignment:)(&v163, v33, 0, v36, 0, v38, v39);
  v41 = v90;
  v168 = v90;
  v169 = 0;
  v170 = 257;
  v171 = v89;
  v172 = v88;
  v173 = v87;
  v174 = v86;
  v175 = v85;
  v176 = v84;
  v177 = v163;
  v178 = v164;
  v179 = v165;
  v180 = v166;
  v181 = v167;
  v42 = static Alignment.leading.getter(v40);
  sub_1000E5AEC(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)&v182, v44, 0.0, 1, 0.0, 1, v42, v43);
  swift_release(v41);
  v106[12] = v194;
  v106[13] = v195;
  v107 = *(_QWORD *)&v196[0];
  v106[8] = v190;
  v106[9] = v191;
  v106[10] = v192;
  v106[11] = v193;
  v106[4] = v186;
  v106[5] = v187;
  v106[6] = v188;
  v106[7] = v189;
  v106[0] = v182;
  v106[1] = v183;
  v106[2] = v184;
  v106[3] = v185;
  v120 = v194;
  v121 = v195;
  *(_QWORD *)&v122[0] = *(_QWORD *)&v196[0];
  v116 = v190;
  v117 = v191;
  v118 = v192;
  v119 = v193;
  v112 = v186;
  v113 = v187;
  v114 = v188;
  v115 = v189;
  v108 = v182;
  v109 = v183;
  v110 = v184;
  v111 = v185;
  *(_OWORD *)((char *)v122 + 8) = xmmword_100111630;
  BYTE8(v122[1]) = 1;
  sub_1000B41F4((uint64_t)&v108);
  sub_100007A98((uint64_t)&v108, (uint64_t)&v182, &qword_100162D00);
  sub_10000E40C(v106);
  v45 = sub_100003E70(&qword_100162C90);
  v46 = sub_100003E70(&qword_100162CE0);
  v47 = sub_1000B3F34();
  v48 = sub_1000B4168();
  _ConditionalContent<>.init(storage:)(&v182, v45, v46, v47, v48);
  v125[10] = v103;
  v125[11] = v104;
  v126[0] = v105[0];
  *(_OWORD *)((char *)v126 + 10) = *(_OWORD *)((char *)v105 + 10);
  v125[6] = v99;
  v125[7] = v100;
  v125[8] = v101;
  v125[9] = v102;
  v125[2] = v95;
  v125[3] = v96;
  v125[4] = v97;
  v125[5] = v98;
  v123 = *(_OWORD *)&v91[8];
  v124 = v92;
  v125[0] = v93;
  v125[1] = v94;
  v154 = v103;
  v155 = v104;
  v156[0] = v105[0];
  *(_OWORD *)((char *)v156 + 10) = *(_OWORD *)((char *)v105 + 10);
  v150 = v99;
  v151 = v100;
  v152 = v101;
  v153 = v102;
  v146 = v95;
  v147 = v96;
  v148 = v97;
  v149 = v98;
  v142 = *(_OWORD *)&v91[8];
  v143 = v92;
  v144 = v93;
  v145 = v94;
  sub_1000B41EC((uint64_t)&v142);
  sub_100007A98((uint64_t)&v142, (uint64_t)&v182, &qword_100162CF8);
  sub_1000B4200((uint64_t)&v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))j__swift_retain);
  v49 = sub_100003E70(&qword_100162C80);
  v50 = sub_1000B3EC8();
  _ConditionalContent<>.init(storage:)(&v182, v49, &type metadata for EmptyView, v50, &protocol witness table for EmptyView);
  swift_release(*(_QWORD *)v91);
  sub_1000B4200((uint64_t)&v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))j__swift_release);
  sub_1000B4290(v106);
  v194 = v139;
  v195 = v140;
  v196[0] = v141[0];
  *(_OWORD *)((char *)v196 + 11) = *(_OWORD *)((char *)v141 + 11);
  v190 = v135;
  v191 = v136;
  v192 = v137;
  v193 = v138;
  v186 = v131;
  v187 = v132;
  v188 = v133;
  v189 = v134;
  v182 = v127;
  v183 = v128;
  v184 = v129;
  v185 = v130;
LABEL_9:
  v76 = v195;
  a3[12] = v194;
  a3[13] = v76;
  a3[14] = v196[0];
  *(_OWORD *)((char *)a3 + 235) = *(_OWORD *)((char *)v196 + 11);
  v77 = v191;
  a3[8] = v190;
  a3[9] = v77;
  v78 = v193;
  a3[10] = v192;
  a3[11] = v78;
  v79 = v187;
  a3[4] = v186;
  a3[5] = v79;
  v80 = v189;
  a3[6] = v188;
  a3[7] = v80;
  v81 = v183;
  *a3 = v182;
  a3[1] = v81;
  result = *(double *)&v184;
  v83 = v185;
  a3[2] = v184;
  a3[3] = v83;
  return result;
}

uint64_t sub_1000B323C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v29)(_BYTE *, uint64_t);
  uint64_t *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE v53[12];
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  char v65;
  _QWORD v66[53];
  _BYTE v67[288];
  _BYTE v68[304];
  char v69;
  _BYTE v70[7];
  _BYTE v71[291];

  v64 = a1;
  v62 = sub_100003E70(&qword_10015E338);
  __chkstk_darwin(v62);
  v3 = &v53[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v59 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v59);
  v5 = &v53[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = &v53[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v53[-v11];
  v58 = sub_100003E70(&qword_100162DA0);
  __chkstk_darwin(v58);
  v14 = &v53[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v60 = sub_100003E70(&qword_100162DA8);
  __chkstk_darwin(v60);
  v16 = &v53[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v61 = sub_100003E70(&qword_100162DB0);
  v17 = __chkstk_darwin(v61);
  v63 = &v53[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v57 = static VerticalAlignment.center.getter(v17);
  sub_1000B377C(v1, (uint64_t)v67);
  v68[296] = 0;
  memcpy(&v68[7], v67, 0x11CuLL);
  v56 = 0;
  v19 = memcpy(v71, v68, sizeof(v71));
  v55 = static Edge.Set.vertical.getter(v19);
  v20 = EdgeInsets.init(_all:)(19.0);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v69 = 0;
  v54 = static Edge.Set.horizontal.getter(v27);
  sub_10001E08C((uint64_t)v12);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for ColorScheme.dark(_:), v6);
  v28 = static ColorScheme.== infix(_:_:)(v12, v10);
  v29 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
  v29(v10, v6);
  v29(v12, v6);
  if ((v28 & 1) != 0)
  {
    if (qword_10015CE50 != -1)
      swift_once(&qword_10015CE50, sub_1000382A0);
    v30 = &qword_10016F648;
  }
  else
  {
    if (qword_10015CE48 != -1)
      swift_once(&qword_10015CE48, sub_10003828C);
    v30 = &qword_10016F640;
  }
  v31 = *v30;
  swift_retain(*v30);
  v32 = v69;
  v65 = 1;
  v34 = static Edge.Set.all.getter(v33);
  v66[0] = v57;
  v66[1] = 0x4028000000000000;
  LOBYTE(v66[2]) = v56;
  memcpy((char *)&v66[2] + 1, v71, 0x123uLL);
  LOBYTE(v66[39]) = v55;
  *(_DWORD *)((char *)&v66[39] + 1) = *(_DWORD *)v70;
  HIDWORD(v66[39]) = *(_DWORD *)&v70[3];
  *(double *)&v66[40] = v20;
  v66[41] = v22;
  v66[42] = v24;
  v66[43] = v26;
  LOBYTE(v66[44]) = v32;
  LOBYTE(v66[45]) = v54;
  memset(&v66[46], 0, 32);
  LOBYTE(v66[50]) = v65;
  v66[51] = v31;
  LOBYTE(v66[52]) = v34;
  v35 = (char *)v5 + *(int *)(v59 + 20);
  v36 = enum case for RoundedCornerStyle.continuous(_:);
  v37 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v35, v36, v37);
  __asm { FMOV            V0.2D, #16.0 }
  *v5 = _Q0;
  sub_100028390((uint64_t)v5, (uint64_t)v3, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v3[*(int *)(v62 + 36)] = 256;
  sub_100007ADC((uint64_t)v3, (uint64_t)&v14[*(int *)(v58 + 36)], &qword_10015E338);
  memcpy(v14, v66, 0x1A1uLL);
  sub_1000B460C((uint64_t)v66);
  sub_100008194((uint64_t)v3, &qword_10015E338);
  sub_1000283D4((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v43 = sub_1000B46D8((uint64_t)v66);
  v44 = static Color.black.getter(v43);
  v45 = Color.opacity(_:)(0.08);
  swift_release(v44);
  sub_100007ADC((uint64_t)v14, (uint64_t)v16, &qword_100162DA0);
  v46 = &v16[*(int *)(v60 + 36)];
  *(_QWORD *)v46 = v45;
  *(_OWORD *)(v46 + 8) = xmmword_100111610;
  *((_QWORD *)v46 + 3) = 0x4010000000000000;
  v47 = sub_100008194((uint64_t)v14, &qword_100162DA0);
  v48 = static Color.black.getter(v47);
  v49 = Color.opacity(_:)(0.05);
  swift_release(v48);
  v50 = v63;
  sub_100007ADC((uint64_t)v16, (uint64_t)v63, &qword_100162DA8);
  v51 = &v50[*(int *)(v61 + 36)];
  *(_QWORD *)v51 = v49;
  *(_OWORD *)(v51 + 8) = xmmword_100111620;
  *((_QWORD *)v51 + 3) = 0x4000000000000000;
  sub_100008194((uint64_t)v16, &qword_100162DA8);
  return sub_100007A98((uint64_t)v50, v64, &qword_100162DB0);
}

double sub_1000B377C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  char v35;
  double result;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _OWORD v57[12];
  uint64_t v58;
  char v59;
  char v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  char v84;
  uint64_t v85;
  __int128 v86;
  char v87;
  uint64_t v88;

  v43 = Image.init(_:bundle:)(0xD00000000000001FLL, 0x8000000100115CA0, 0);
  v4 = static Alignment.center.getter(v43);
  v6 = _FrameLayout.init(width:height:alignment:)(&v74, 0x4041000000000000, 0, 0x4040000000000000, 0, v4, v5);
  v41 = v76;
  v42 = v74;
  v37 = v77;
  v38 = v75;
  v39 = v79;
  v40 = v78;
  v7 = static HorizontalAlignment.leading.getter(v6);
  v8 = sub_1000B3AE8(a1, (uint64_t)&v61);
  v9 = v61;
  v10 = v62;
  v11 = *((_QWORD *)&v63 + 1);
  v12 = v64;
  v80 = v7;
  v81 = 0;
  v82 = 0;
  v83 = v61;
  v84 = v62;
  v85 = *((_QWORD *)&v62 + 1);
  v86 = v63;
  v13 = v63;
  v87 = v64;
  v88 = *((_QWORD *)&v64 + 1);
  v14 = static Alignment.leading.getter(v8);
  sub_1000E5CB4(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)&v44, v16, 0.0, 1, 0.0, 1, v14, v15);
  sub_10000BFF8(v9, *((uint64_t *)&v9 + 1), v10);
  swift_bridgeObjectRelease();
  sub_10000BFF8(v13, v11, v12);
  swift_bridgeObjectRelease();
  v17 = Image.init(systemName:)(0x2E6E6F7276656863, 0xEF64726177726F66);
  v18 = static Font.subheadline.getter(v17);
  static Font.Weight.semibold.getter();
  v19 = Font.weight(_:)(v18);
  swift_release(v18);
  KeyPath = swift_getKeyPath(&unk_1001118B0);
  v21 = static HierarchicalShapeStyle.tertiary.getter();
  v22 = v54;
  v23 = v55;
  v57[10] = v54;
  v57[11] = v55;
  v24 = v50;
  v25 = v51;
  v57[6] = v50;
  v57[7] = v51;
  v26 = v52;
  v57[8] = v52;
  v57[9] = v53;
  v27 = v46;
  v28 = v47;
  v57[2] = v46;
  v57[3] = v47;
  v29 = v49;
  v30 = v48;
  v57[4] = v48;
  v57[5] = v49;
  v31 = v45;
  v32 = v44;
  v57[0] = v44;
  v57[1] = v45;
  *(_OWORD *)(a2 + 200) = v53;
  *(_OWORD *)(a2 + 216) = v22;
  *(_OWORD *)(a2 + 232) = v23;
  *(_OWORD *)(a2 + 136) = v29;
  *(_OWORD *)(a2 + 152) = v24;
  *(_OWORD *)(a2 + 168) = v25;
  *(_OWORD *)(a2 + 184) = v26;
  *(_OWORD *)(a2 + 72) = v31;
  *(_OWORD *)(a2 + 88) = v27;
  *(_OWORD *)(a2 + 104) = v28;
  *(_OWORD *)(a2 + 120) = v30;
  v33 = v56;
  v58 = v56;
  v60 = v38;
  v59 = v37;
  *(_OWORD *)(a2 + 56) = v32;
  v34 = v60;
  v35 = v59;
  *(_QWORD *)a2 = v43;
  *(_QWORD *)(a2 + 8) = v42;
  *(_BYTE *)(a2 + 16) = v34;
  *(_QWORD *)(a2 + 24) = v41;
  *(_BYTE *)(a2 + 32) = v35;
  *(_QWORD *)(a2 + 40) = v40;
  *(_QWORD *)(a2 + 48) = v39;
  *(_QWORD *)(a2 + 248) = v33;
  *(_QWORD *)(a2 + 256) = v17;
  *(_QWORD *)(a2 + 264) = KeyPath;
  *(_QWORD *)(a2 + 272) = v19;
  *(_DWORD *)(a2 + 280) = v21;
  swift_retain(v43);
  sub_1000B47AC((uint64_t)v57);
  v71 = v54;
  v72 = v55;
  v73 = v56;
  v67 = v50;
  v68 = v51;
  v69 = v52;
  v70 = v53;
  v63 = v46;
  v64 = v47;
  v65 = v48;
  v66 = v49;
  v61 = v44;
  v62 = v45;
  sub_1000B481C((uint64_t)&v61);
  *(_QWORD *)&result = swift_release(v43).n128_u64[0];
  return result;
}

uint64_t sub_1000B3AE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  int v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[3];

  v4 = type metadata accessor for DefaultEntryView(0);
  v5 = (uint64_t *)(a1 + *(int *)(v4 + 20));
  v6 = *v5;
  v7 = v5[1];
  v8 = *((unsigned __int8 *)v5 + 16);
  v9 = v5[3];
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  v10 = Text.init(_:tableName:bundle:comment:)(v6, v7, v8, v9, 0, 0, 0, 0, 0, 256);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = static Font.subheadline.getter(v10);
  static Font.Weight.semibold.getter();
  v18 = Font.weight(_:)(v17);
  swift_release(v17);
  v19 = Text.font(_:)(v18, v10, v12, v16, v14);
  v55 = v20;
  v56 = v19;
  v57 = v21;
  swift_release(v18);
  sub_10000BFF8(v10, v12, v16);
  swift_bridgeObjectRelease();
  v22 = (uint64_t *)(a1 + *(int *)(v4 + 24));
  v23 = *v22;
  v24 = v22[1];
  v25 = *((unsigned __int8 *)v22 + 16);
  v26 = v22[3];
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v26);
  LOWORD(v53) = 256;
  v27 = Text.init(_:tableName:bundle:comment:)(v23, v24, v25, v26, 0, 0, 0, 0, 0, v53);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v34 = static Font.footnote.getter(v27);
  static Font.Weight.regular.getter();
  v35 = Font.weight(_:)(v34);
  swift_release(v34);
  v36 = Text.font(_:)(v35, v27, v29, v33, v31);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  swift_release(v35);
  sub_10000BFF8(v27, v29, v33);
  swift_bridgeObjectRelease();
  if (qword_10015CE58 != -1)
    swift_once(&qword_10015CE58, sub_1000382B4);
  v43 = v40 & 1;
  v44 = qword_10016F650;
  v58[0] = qword_10016F650;
  swift_retain(qword_10016F650);
  v45 = Text.foregroundStyle<A>(_:)(v58, v36, v38, v40 & 1, v42, &type metadata for Color, &protocol witness table for Color);
  v47 = v46;
  v49 = v48;
  v51 = v50 & 1;
  sub_10000BFF8(v36, v38, v43);
  swift_release(v44);
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v56;
  *(_QWORD *)(a2 + 8) = v55;
  *(_BYTE *)(a2 + 16) = v54 & 1;
  *(_QWORD *)(a2 + 24) = v57;
  *(_QWORD *)(a2 + 32) = v45;
  *(_QWORD *)(a2 + 40) = v47;
  *(_BYTE *)(a2 + 48) = v51;
  *(_QWORD *)(a2 + 56) = v49;
  sub_10000C008(v56, v55, v54 & 1);
  swift_bridgeObjectRetain(v57);
  sub_10000C008(v45, v47, v51);
  swift_bridgeObjectRetain(v49);
  sub_10000BFF8(v45, v47, v51);
  swift_bridgeObjectRelease();
  sub_10000BFF8(v56, v55, v54 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B3DFC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011AB58, 1);
}

double sub_1000B3E10@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PhotoEntryView(0) - 8) + 80);
  return sub_1000B263C(a1, (_QWORD *)(v2 + ((v5 + 16) & ~v5)), a2);
}

unint64_t sub_1000B3E5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162C70;
  if (!qword_100162C70)
  {
    v1 = sub_1000034AC(&qword_100162C68);
    sub_1000B3EC8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162C70);
  }
  return result;
}

unint64_t sub_1000B3EC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162C78;
  if (!qword_100162C78)
  {
    v1 = sub_1000034AC(&qword_100162C80);
    sub_1000B3F34();
    sub_1000B4168();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162C78);
  }
  return result;
}

unint64_t sub_1000B3F34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162C88;
  if (!qword_100162C88)
  {
    v1 = sub_1000034AC(&qword_100162C90);
    sub_1000B3FA0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162C88);
  }
  return result;
}

unint64_t sub_1000B3FA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162C98;
  if (!qword_100162C98)
  {
    v1 = sub_1000034AC(&qword_100162CA0);
    sub_1000B400C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162C98);
  }
  return result;
}

unint64_t sub_1000B400C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162CA8;
  if (!qword_100162CA8)
  {
    v1 = sub_1000034AC(&qword_100162CB0);
    sub_1000B4078();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162CA8);
  }
  return result;
}

unint64_t sub_1000B4078()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162CB8;
  if (!qword_100162CB8)
  {
    v1 = sub_1000034AC(&qword_100162CC0);
    sub_1000B40E4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162CB8);
  }
  return result;
}

unint64_t sub_1000B40E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162CC8;
  if (!qword_100162CC8)
  {
    v1 = sub_1000034AC(&qword_100162CD0);
    sub_1000B45B0((unint64_t *)&qword_100161310, &qword_100161318);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162CC8);
  }
  return result;
}

unint64_t sub_1000B4168()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162CD8;
  if (!qword_100162CD8)
  {
    v1 = sub_1000034AC(&qword_100162CE0);
    sub_100030C50();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162CD8);
  }
  return result;
}

uint64_t sub_1000B41D4(uint64_t result)
{
  *(_BYTE *)(result + 250) = 1;
  return result;
}

uint64_t sub_1000B41E0(uint64_t result)
{
  *(_BYTE *)(result + 249) = 1;
  return result;
}

uint64_t sub_1000B41EC(uint64_t result)
{
  *(_BYTE *)(result + 250) = 0;
  return result;
}

uint64_t sub_1000B41F4(uint64_t result)
{
  *(_BYTE *)(result + 249) = 0;
  return result;
}

uint64_t sub_1000B4200(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_WORD *)(a1 + 248));
  return a1;
}

_QWORD *sub_1000B4290(_QWORD *a1)
{
  swift_release(*a1);
  return a1;
}

uint64_t sub_1000B42BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for PhotoEntryView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  v7 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

double sub_1000B4374@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PhotoEntryView(0) - 8) + 80);
  return sub_1000B1F34(a1, (_QWORD *)(v2 + ((v5 + 16) & ~v5)), a2);
}

unint64_t sub_1000B43C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162D48;
  if (!qword_100162D48)
  {
    v1 = sub_1000034AC(&qword_100162D40);
    sub_1000B442C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162D48);
  }
  return result;
}

unint64_t sub_1000B442C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162D50;
  if (!qword_100162D50)
  {
    v1 = sub_1000034AC(&qword_100162D58);
    sub_1000B44B0();
    sub_100007D40(&qword_100162D70, &qword_100162D78, (uint64_t)&protocol conformance descriptor for _MaskEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162D50);
  }
  return result;
}

unint64_t sub_1000B44B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162D60;
  if (!qword_100162D60)
  {
    v1 = sub_1000034AC(&qword_100162D68);
    sub_1000B4078();
    sub_100007D40(&qword_100161320, &qword_100161328, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162D60);
  }
  return result;
}

uint64_t sub_1000B4534(uint64_t result)
{
  *(_BYTE *)(result + 168) = 1;
  return result;
}

uint64_t sub_1000B4540(uint64_t result)
{
  *(_BYTE *)(result + 168) = 0;
  return result;
}

_QWORD *sub_1000B4548(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[16];
  swift_retain(*a1);
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t *sub_1000B457C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  swift_bridgeObjectRelease(a1[16]);
  swift_release(v2);
  return a1;
}

uint64_t sub_1000B45B0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1000034AC(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B460C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_BYTE *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_BYTE *)(a1 + 152);
  v12 = *(_QWORD *)(a1 + 160);
  v13 = *(_QWORD *)(a1 + 280);
  v9 = *(_QWORD *)(a1 + 296);
  v14 = *(_QWORD *)(a1 + 288);
  v10 = *(_QWORD *)(a1 + 408);
  swift_retain(*(_QWORD *)(a1 + 24));
  sub_10000C008(v2, v3, v4);
  swift_bridgeObjectRetain(v5);
  sub_10000C008(v6, v7, v8);
  swift_retain(v9);
  swift_retain(v10);
  swift_bridgeObjectRetain(v12);
  swift_retain(v13);
  swift_retain(v14);
  return a1;
}

uint64_t sub_1000B46D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_BYTE *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 136);
  v6 = *(_QWORD *)(a1 + 144);
  v7 = *(_BYTE *)(a1 + 152);
  v8 = *(_QWORD *)(a1 + 288);
  v11 = *(_QWORD *)(a1 + 280);
  v12 = *(_QWORD *)(a1 + 296);
  v9 = *(_QWORD *)(a1 + 408);
  swift_release(*(_QWORD *)(a1 + 24));
  sub_10000BFF8(v2, v3, v4);
  swift_bridgeObjectRelease();
  sub_10000BFF8(v5, v6, v7);
  swift_release(v9);
  swift_release(v8);
  swift_release(v11);
  swift_bridgeObjectRelease();
  swift_release(v12);
  return a1;
}

uint64_t sub_1000B47AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_BYTE *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  sub_10000C008(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  sub_10000C008(v3, v4, v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t sub_1000B481C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_BYTE *)(a1 + 72);
  sub_10000BFF8(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease();
  sub_10000BFF8(v2, v3, v4);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1000B4890()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162DB8;
  if (!qword_100162DB8)
  {
    v1 = sub_1000034AC(&qword_100162CF0);
    sub_1000B48FC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162DB8);
  }
  return result;
}

unint64_t sub_1000B48FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162DC0;
  if (!qword_100162DC0)
  {
    v1 = sub_1000034AC(&qword_100162C50);
    sub_1000B4968();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162DC0);
  }
  return result;
}

unint64_t sub_1000B4968()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162DC8;
  if (!qword_100162DC8)
  {
    v1 = sub_1000034AC(&qword_100162C48);
    sub_1000B49EC();
    sub_100007D40(&qword_10015E330, &qword_10015E338, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162DC8);
  }
  return result;
}

unint64_t sub_1000B49EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162DD0;
  if (!qword_100162DD0)
  {
    v1 = sub_1000034AC(&qword_100162C40);
    sub_100007D40(&qword_100162DD8, &qword_100162C38, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100007D40(&qword_100162DE0, &qword_100162CE8, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162DD0);
  }
  return result;
}

unint64_t sub_1000B4A8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162DE8;
  if (!qword_100162DE8)
  {
    v1 = sub_1000034AC(&qword_100162DB0);
    sub_1000B4AF8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162DE8);
  }
  return result;
}

unint64_t sub_1000B4AF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162DF0;
  if (!qword_100162DF0)
  {
    v1 = sub_1000034AC(&qword_100162DA8);
    sub_1000B4B64();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162DF0);
  }
  return result;
}

unint64_t sub_1000B4B64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162DF8;
  if (!qword_100162DF8)
  {
    v1 = sub_1000034AC(&qword_100162DA0);
    sub_1000B4BE8();
    sub_100007D40(&qword_10015E330, &qword_10015E338, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162DF8);
  }
  return result;
}

unint64_t sub_1000B4BE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162E00;
  if (!qword_100162E00)
  {
    v1 = sub_1000034AC(&qword_100162E08);
    sub_1000B4C6C();
    sub_100007D40(&qword_10015E320, &qword_10015E328, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162E00);
  }
  return result;
}

unint64_t sub_1000B4C6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162E10;
  if (!qword_100162E10)
  {
    v1 = sub_1000034AC(&qword_100162E18);
    sub_1000B4CD8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162E10);
  }
  return result;
}

unint64_t sub_1000B4CD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162E20;
  if (!qword_100162E20)
  {
    v1 = sub_1000034AC(&qword_100162E28);
    sub_100007D40(&qword_100162E30, &qword_100162E38, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162E20);
  }
  return result;
}

uint64_t sub_1000B4D5C()
{
  return sub_1000AF6D4();
}

uint64_t sub_1000B4D70()
{
  return sub_1000AF6B0();
}

uint64_t sub_1000B4D84(char a1)
{
  return qword_100111C28[a1];
}

ValueMetadata *type metadata accessor for AnalyticsPageName()
{
  return &type metadata for AnalyticsPageName;
}

ValueMetadata *type metadata accessor for AnalyticsString()
{
  return &type metadata for AnalyticsString;
}

uint64_t sub_1000B4DCC(char *a1, char *a2)
{
  return sub_1000F4820(*a1, *a2);
}

Swift::Int sub_1000B4DD8()
{
  char *v0;

  return sub_100048508(*v0);
}

uint64_t sub_1000B4DE0(uint64_t a1)
{
  char *v1;

  return sub_100048570(a1, *v1);
}

Swift::Int sub_1000B4DE8(uint64_t a1)
{
  char *v1;

  return sub_100048AE0(a1, *v1);
}

unint64_t sub_1000B4DF0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000B5C58(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B4E1C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000B4D84(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000B4E44(char a1)
{
  return *(_QWORD *)&aEvent_12[8 * a1];
}

uint64_t sub_1000B4E64()
{
  unsigned __int8 *v0;

  return *v0;
}

id sub_1000B4E6C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = objc_allocWithZone((Class)NSString);
  swift_bridgeObjectRetain(v1);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v4 = objc_msgSend(v2, "initWithString:", v3);

  return v4;
}

uint64_t sub_1000B4EE0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B5424(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1000B4E44);
}

Swift::Int sub_1000B4EEC(uint64_t a1, uint64_t a2)
{
  return sub_1000B54BC(a1, a2, (uint64_t (*)(uint64_t))sub_1000B4E44);
}

uint64_t sub_1000B4EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B552C(a1, a2, a3, (uint64_t (*)(_QWORD))sub_1000B4E44);
}

Swift::Int sub_1000B4F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B5578(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1000B4E44);
}

unint64_t sub_1000B4F10@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000B5CA0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B4F3C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000B4E44(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000B4F64(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000B4F9C + 4 * byte_1001118E0[a1]))(0xD000000000000011, 0x8000000100114E50);
}

uint64_t sub_1000B4F9C()
{
  return 0x7261626C6F6F74;
}

uint64_t sub_1000B4FB4()
{
  return 0x726564616568;
}

uint64_t sub_1000B4FC8()
{
  return 0x7261646E656C6163;
}

uint64_t sub_1000B5024()
{
  return 0x6C75646F4D707061;
}

uint64_t sub_1000B5040()
{
  return 0x737265746C6966;
}

uint64_t sub_1000B5058()
{
  return 0x694C73746E657665;
}

uint64_t sub_1000B5074()
{
  return 0x646F4D636973756DLL;
}

uint64_t sub_1000B50A8()
{
  return 0x7473694C746573;
}

uint64_t sub_1000B50C0()
{
  return 0x507473694C746573;
}

uint64_t sub_1000B50E4()
{
  return 0x736F65646976;
}

uint64_t sub_1000B50F8()
{
  return 2;
}

id sub_1000B5100(uint64_t a1, uint64_t a2)
{
  return sub_1000B57D4(a1, a2, (void (*)(_QWORD))sub_1000B4E44);
}

uint64_t sub_1000B5110(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRelease(a2);
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsModuleAction()
{
  return &type metadata for AnalyticsModuleAction;
}

ValueMetadata *type metadata accessor for AnalyticsModuleName()
{
  return &type metadata for AnalyticsModuleName;
}

uint64_t _s16EventViewService17AnalyticsPageNameV9ValueTypeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s16EventViewService17AnalyticsPageNameV9ValueTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1000B523C + 4 * byte_1001118F3[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1000B5270 + 4 * byte_1001118EE[v4]))();
}

uint64_t sub_1000B5270(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B5278(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B5280);
  return result;
}

uint64_t sub_1000B528C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B5294);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1000B5298(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B52A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsPageName.ValueType()
{
  return &type metadata for AnalyticsPageName.ValueType;
}

uint64_t storeEnumTagSinglePayload for AnalyticsKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000B5308 + 4 * byte_1001118FD[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000B533C + 4 * byte_1001118F8[v4]))();
}

uint64_t sub_1000B533C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B5344(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B534CLL);
  return result;
}

uint64_t sub_1000B5358(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B5360);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000B5364(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B536C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsKey()
{
  return &type metadata for AnalyticsKey;
}

unint64_t sub_1000B538C()
{
  unint64_t result;

  result = qword_100162E90;
  if (!qword_100162E90)
  {
    result = swift_getWitnessTable(&unk_100111A74, &type metadata for AnalyticsKey);
    atomic_store(result, (unint64_t *)&qword_100162E90);
  }
  return result;
}

unint64_t sub_1000B53D4()
{
  unint64_t result;

  result = qword_100162E98;
  if (!qword_100162E98)
  {
    result = swift_getWitnessTable(&unk_100111B14, &type metadata for AnalyticsPageName.ValueType);
    atomic_store(result, (unint64_t *)&qword_100162E98);
  }
  return result;
}

uint64_t sub_1000B5418(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B5424(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1000B4F64);
}

uint64_t sub_1000B5424(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  v6 = *a2;
  v7 = a5(*a1);
  v9 = v8;
  v10 = a5(v6);
  if (v7 == v10 && v9 == v11)
  {
    v14 = 1;
    v13 = v9;
  }
  else
  {
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
  }
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v13);
  return v14 & 1;
}

Swift::Int sub_1000B54B0(uint64_t a1, uint64_t a2)
{
  return sub_1000B54BC(a1, a2, (uint64_t (*)(uint64_t))sub_1000B4F64);
}

Swift::Int sub_1000B54BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v5 = *v3;
  Hasher.init(_seed:)(v10, 0);
  v6 = a3(v5);
  v8 = v7;
  String.hash(into:)(v10, v6, v7);
  swift_bridgeObjectRelease(v8);
  return Hasher._finalize()();
}

uint64_t sub_1000B5520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B552C(a1, a2, a3, (uint64_t (*)(_QWORD))sub_1000B4F64);
}

uint64_t sub_1000B552C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a4(*v4);
  v8 = v7;
  String.hash(into:)(a1, v6, v7);
  return swift_bridgeObjectRelease(v8);
}

Swift::Int sub_1000B556C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B5578(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1000B4F64);
}

Swift::Int sub_1000B5578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  v6 = *v4;
  Hasher.init(_seed:)(v11, a1);
  v7 = a4(v6);
  v9 = v8;
  String.hash(into:)(v11, v7, v8);
  swift_bridgeObjectRelease(v9);
  return Hasher._finalize()();
}

unint64_t sub_1000B55D8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000B6048(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B5604@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000B4F64(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000B562C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000B5664 + 4 * byte_100111902[a1]))(0xD000000000000011, 0x8000000100114E50);
}

uint64_t sub_1000B5664()
{
  return 0x7261626C6F6F74;
}

uint64_t sub_1000B567C()
{
  return 0x726564616568;
}

uint64_t sub_1000B5690()
{
  return 0x7261646E656C6163;
}

uint64_t sub_1000B56EC()
{
  return 0x6C75646F4D707061;
}

uint64_t sub_1000B5708()
{
  return 0x737265746C6966;
}

uint64_t sub_1000B5720()
{
  return 0x694C73746E657665;
}

uint64_t sub_1000B573C()
{
  return 0x646F4D636973756DLL;
}

uint64_t sub_1000B5770()
{
  return 0x7473694C746573;
}

uint64_t sub_1000B5788()
{
  return 0x507473694C746573;
}

uint64_t sub_1000B57AC()
{
  return 0x736F65646976;
}

uint64_t sub_1000B57C0()
{
  return 3;
}

id sub_1000B57C8(uint64_t a1, uint64_t a2)
{
  return sub_1000B57D4(a1, a2, (void (*)(_QWORD))sub_1000B562C);
}

id sub_1000B57D4(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;

  a3(*v3);
  v5 = v4;
  v6 = objc_allocWithZone((Class)NSString);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v8 = objc_msgSend(v6, "initWithString:", v7);

  return v8;
}

uint64_t sub_1000B584C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 >= 3u)
    __asm { BR              X9 }
  sub_100005568(a1, a2, a3);
  return a1;
}

void sub_1000B58B4()
{
  JUMPOUT(0x1000B586CLL);
}

void sub_1000B58C8()
{
  JUMPOUT(0x1000B586CLL);
}

void sub_1000B58DC()
{
  JUMPOUT(0x1000B586CLL);
}

void sub_1000B58F4()
{
  JUMPOUT(0x1000B586CLL);
}

void sub_1000B5914()
{
  JUMPOUT(0x1000B586CLL);
}

void sub_1000B5938()
{
  JUMPOUT(0x1000B586CLL);
}

void sub_1000B5958()
{
  JUMPOUT(0x1000B586CLL);
}

void sub_1000B5970()
{
  JUMPOUT(0x1000B586CLL);
}

void sub_1000B5994()
{
  JUMPOUT(0x1000B586CLL);
}

void sub_1000B59AC()
{
  JUMPOUT(0x1000B586CLL);
}

void sub_1000B59CC()
{
  JUMPOUT(0x1000B586CLL);
}

void sub_1000B59EC()
{
  JUMPOUT(0x1000B586CLL);
}

void sub_1000B5A0C()
{
  JUMPOUT(0x1000B586CLL);
}

void sub_1000B5AEC()
{
  JUMPOUT(0x1000B586CLL);
}

void sub_1000B5B04()
{
  JUMPOUT(0x1000B586CLL);
}

void sub_1000B5B24()
{
  JUMPOUT(0x1000B586CLL);
}

void sub_1000B5B44()
{
  JUMPOUT(0x1000B586CLL);
}

void sub_1000B5B60()
{
  JUMPOUT(0x1000B586CLL);
}

void sub_1000B5B84()
{
  JUMPOUT(0x1000B586CLL);
}

void sub_1000B5BA8()
{
  JUMPOUT(0x1000B586CLL);
}

uint64_t sub_1000B5BC8()
{
  uint64_t v0;

  return sub_1000B584C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_1000B5BD4()
{
  return 4;
}

id sub_1000B5BDC()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;

  sub_1000B584C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
  v1 = objc_allocWithZone((Class)NSString);
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, "initWithString:", v2);

  return v3;
}

unint64_t sub_1000B5C58(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10014BC88, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

unint64_t sub_1000B5CA0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10014BD20, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

uint64_t destroy for AnalyticsModuleAction.ValueType(uint64_t a1)
{
  return sub_1000B5110(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s16EventViewService21AnalyticsModuleActionV9ValueTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100005568(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s16EventViewService21AnalyticsModuleActionV9ValueTypeOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100005568(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000B5110(v6, v7, v8);
  return a1;
}

uint64_t _s16EventViewService21AnalyticsModuleActionV9ValueTypeOwta_0(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1000B5110(v4, v5, v6);
  return a1;
}

uint64_t _s16EventViewService21AnalyticsModuleActionV9ValueTypeOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s16EventViewService21AnalyticsModuleActionV9ValueTypeOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000B5E64(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_1000B5E7C(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsModuleAction.ValueType()
{
  return &type metadata for AnalyticsModuleAction.ValueType;
}

uint64_t _s16EventViewService19AnalyticsModuleNameV9ValueTypeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s16EventViewService19AnalyticsModuleNameV9ValueTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_1000B5F80 + 4 * byte_100111932[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1000B5FB4 + 4 * byte_10011192D[v4]))();
}

uint64_t sub_1000B5FB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B5FBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B5FC4);
  return result;
}

uint64_t sub_1000B5FD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B5FD8);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_1000B5FDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B5FE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsModuleName.ValueType()
{
  return &type metadata for AnalyticsModuleName.ValueType;
}

unint64_t sub_1000B6004()
{
  unint64_t result;

  result = qword_100162EF0[0];
  if (!qword_100162EF0[0])
  {
    result = swift_getWitnessTable(&unk_100111BD4, &type metadata for AnalyticsModuleName.ValueType);
    atomic_store(result, qword_100162EF0);
  }
  return result;
}

unint64_t sub_1000B6048(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10014BE30, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xE)
    return 14;
  else
    return v3;
}

uint64_t sub_1000B6098@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v8 = *a1;
  WitnessTable = swift_getWitnessTable(&unk_10010C640, *a1);
  Bindable<A>.init(wrappedValue:)(a1, v8, WitnessTable);
  v10 = *(_QWORD *)(v8 + 80);
  v12 = (int *)type metadata accessor for FeaturedVideosView(0, v10, *(_QWORD *)(v8 + 88), v11);
  v13 = a4 + v12[9];
  v14 = type metadata accessor for Optional(255, v10);
  v15 = type metadata accessor for Binding(0, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, a2, v15);
  sub_10001E4C4(a3, v10);
  v16 = (_QWORD *)(a4 + v12[11]);
  v17 = type metadata accessor for RemoteViewConfiguration();
  v18 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
  *v16 = EnvironmentObject.init()(v17, v18);
  v16[1] = v19;
  v20 = (_QWORD *)(a4 + v12[12]);
  *v20 = swift_getKeyPath(&unk_100111D20);
  v21 = sub_100003E70(&qword_10015D498);
  swift_storeEnumTagMultiPayload(v20, v21, 0);
  v22 = (_QWORD *)(a4 + v12[13]);
  *v22 = swift_getKeyPath(&unk_100111D50);
  return swift_storeEnumTagMultiPayload(v22, v21, 0);
}

uint64_t type metadata accessor for FeaturedVideosView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeaturedVideosView);
}

uint64_t sub_1000B6200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for FeaturedVideosViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  Bindable.wrappedValue.getter(&v7, v5);
  return v7;
}

void sub_1000B624C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[4];
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for FeaturedVideosViewModel(255, v5, *(_QWORD *)(a1 + 24), a4);
  v7 = type metadata accessor for Bindable(319, v6);
  if (v8 <= 0x3F)
  {
    v16[0] = *(_QWORD *)(v7 - 8) + 64;
    v9 = type metadata accessor for Optional(255, v5);
    v10 = type metadata accessor for Binding(319, v9);
    if (v11 <= 0x3F)
    {
      v16[1] = *(_QWORD *)(v10 - 8) + 64;
      v12 = type metadata accessor for State(319, v9);
      if (v13 <= 0x3F)
      {
        v16[2] = *(_QWORD *)(v12 - 8) + 64;
        v16[3] = &unk_100111D98;
        sub_10001C9A4(319);
        if (v15 <= 0x3F)
        {
          v17 = *(_QWORD *)(v14 - 8) + 64;
          v18 = v17;
          swift_initStructMetadata(a1, 0, 6, v16, a1 + 32);
        }
      }
    }
  }
}

_QWORD *sub_1000B633C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v54;

  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v23 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v23);
  }
  else
  {
    v8 = *(_QWORD *)(a3 + 16);
    v9 = type metadata accessor for FeaturedVideosViewModel(255, v8, *(_QWORD *)(a3 + 24), a4);
    v10 = type metadata accessor for Bindable(0, v9);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
    v11 = *(int *)(a3 + 36);
    v12 = (_QWORD *)((char *)a1 + v11);
    v54 = a2;
    v13 = (char *)a2 + v11;
    v14 = *(_QWORD *)((char *)a2 + v11);
    v15 = *(_QWORD *)((char *)a2 + v11 + 8);
    *v12 = v14;
    v12[1] = v15;
    v16 = type metadata accessor for Optional(255, v8);
    v17 = *(int *)(type metadata accessor for Binding(0, v16) + 32);
    v18 = (char *)v12 + v17;
    v19 = &v13[v17];
    v20 = *(_QWORD *)(v8 - 8);
    v21 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v20 + 48);
    swift_retain(v14);
    v22 = swift_retain(v15);
    if (v21(v19, 1, v8, v22))
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v18, v19, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v8);
    }
    v24 = *(int *)(a3 + 40);
    v25 = (char *)a1 + v24;
    v26 = (char *)v54 + v24;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v21)((char *)v54 + v24, 1, v8))
    {
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v25, v26, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v25, 0, 1, v8);
    }
    v27 = *(int *)(type metadata accessor for State(0, v16) + 28);
    v28 = *(_QWORD *)&v26[v27];
    *(_QWORD *)&v25[v27] = v28;
    v29 = *(int *)(a3 + 44);
    v30 = *(int *)(a3 + 48);
    v31 = (_QWORD *)((char *)a1 + v29);
    v32 = (_QWORD *)((char *)v54 + v29);
    v34 = *v32;
    v33 = v32[1];
    *v31 = v34;
    v31[1] = v33;
    v35 = (_QWORD *)((char *)a1 + v30);
    v36 = (_QWORD *)((char *)v54 + v30);
    swift_retain(v28);
    swift_retain(v34);
    v37 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
    {
      v38 = type metadata accessor for UserInterfaceSizeClass(0);
      v39 = *(_QWORD *)(v38 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v39 + 48))(v36, 1, v38))
      {
        v40 = sub_100003E70(&qword_10015D4A0);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        v41 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v39 + 16))(v35, v36, v38);
        v41 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v35, 0, 1, v38);
      }
    }
    else
    {
      v42 = *v36;
      *v35 = *v36;
      swift_retain(v42);
      v41 = 0;
    }
    swift_storeEnumTagMultiPayload(v35, v37, v41);
    v43 = *(int *)(a3 + 52);
    v44 = (_QWORD *)((char *)a1 + v43);
    v45 = (_QWORD *)((char *)v54 + v43);
    if (swift_getEnumCaseMultiPayload((char *)v54 + v43, v37) == 1)
    {
      v46 = type metadata accessor for UserInterfaceSizeClass(0);
      v47 = *(_QWORD *)(v46 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
      {
        v48 = sub_100003E70(&qword_10015D4A0);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v47 + 16))(v44, v45, v46);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      }
      v50 = v44;
      v51 = v37;
      v52 = 1;
    }
    else
    {
      v49 = *v45;
      *v44 = *v45;
      swift_retain(v49);
      v50 = v44;
      v51 = v37;
      v52 = 0;
    }
    swift_storeEnumTagMultiPayload(v50, v51, v52);
  }
  return a1;
}

void sub_1000B66D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = type metadata accessor for FeaturedVideosViewModel(255, v6, *(_QWORD *)(a2 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  v9 = (_QWORD *)(a1 + *(int *)(a2 + 36));
  swift_release(*v9);
  swift_release(v9[1]);
  v10 = type metadata accessor for Optional(255, v6);
  v11 = (char *)v9 + *(int *)(type metadata accessor for Binding(0, v10) + 32);
  v12 = *(_QWORD *)(v6 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (!v13(v11, 1, v6))
    (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v6);
  v14 = (char *)(a1 + *(int *)(a2 + 40));
  if (!v13(v14, 1, v6))
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v6);
  v15 = type metadata accessor for State(0, v10);
  swift_release(*(_QWORD *)&v14[*(int *)(v15 + 28)]);
  swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 44)));
  v16 = (_QWORD *)(a1 + *(int *)(a2 + 48));
  v17 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for UserInterfaceSizeClass(0);
    v19 = *(_QWORD *)(v18 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18))
      (*(void (**)(_QWORD *, uint64_t))(v19 + 8))(v16, v18);
  }
  else
  {
    swift_release(*v16);
  }
  v20 = (_QWORD *)(a1 + *(int *)(a2 + 52));
  if (swift_getEnumCaseMultiPayload(v20, v17) == 1)
  {
    v21 = type metadata accessor for UserInterfaceSizeClass(0);
    v22 = *(_QWORD *)(v21 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      (*(void (**)(_QWORD *, uint64_t))(v22 + 8))(v20, v21);
  }
  else
  {
    swift_release(*v20);
  }
}

uint64_t sub_1000B68E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  const void *v18;
  uint64_t v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for FeaturedVideosViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v52 = a1;
  v11 = (_QWORD *)(a1 + v10);
  v12 = a2 + v10;
  v13 = *(_QWORD *)(a2 + v10);
  v14 = *(_QWORD *)(a2 + v10 + 8);
  *v11 = v13;
  v11[1] = v14;
  v15 = type metadata accessor for Optional(255, v7);
  v16 = *(int *)(type metadata accessor for Binding(0, v15) + 32);
  v17 = (char *)v11 + v16;
  v18 = (const void *)(v12 + v16);
  v19 = *(_QWORD *)(v7 - 8);
  v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v19 + 48);
  swift_retain(v13);
  v21 = swift_retain(v14);
  if (v20(v18, 1, v7, v21))
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v19 + 16))(v17, v18, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v7);
  }
  v22 = *(int *)(a3 + 40);
  v23 = (char *)(v52 + v22);
  v24 = (char *)(a2 + v22);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v20)(a2 + v22, 1, v7))
  {
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v23, v24, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v23, 0, 1, v7);
  }
  v25 = *(int *)(type metadata accessor for State(0, v15) + 28);
  v26 = *(_QWORD *)&v24[v25];
  *(_QWORD *)&v23[v25] = v26;
  v27 = *(int *)(a3 + 44);
  v28 = *(int *)(a3 + 48);
  v29 = (_QWORD *)(v52 + v27);
  v30 = (uint64_t *)(a2 + v27);
  v32 = *v30;
  v31 = v30[1];
  *v29 = v32;
  v29[1] = v31;
  v33 = (uint64_t *)(v52 + v28);
  v34 = (uint64_t *)(a2 + v28);
  swift_retain(v26);
  swift_retain(v32);
  v35 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
  {
    v36 = type metadata accessor for UserInterfaceSizeClass(0);
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v37 + 48))(v34, 1, v36))
    {
      v38 = sub_100003E70(&qword_10015D4A0);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      v39 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v37 + 16))(v33, v34, v36);
      v39 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v33, 0, 1, v36);
    }
  }
  else
  {
    v40 = *v34;
    *v33 = *v34;
    swift_retain(v40);
    v39 = 0;
  }
  swift_storeEnumTagMultiPayload(v33, v35, v39);
  v41 = *(int *)(a3 + 52);
  v42 = (uint64_t *)(v52 + v41);
  v43 = (uint64_t *)(a2 + v41);
  if (swift_getEnumCaseMultiPayload(v43, v35) == 1)
  {
    v44 = type metadata accessor for UserInterfaceSizeClass(0);
    v45 = *(_QWORD *)(v44 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
    {
      v46 = sub_100003E70(&qword_10015D4A0);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
    }
    v48 = v42;
    v49 = v35;
    v50 = 1;
  }
  else
  {
    v47 = *v43;
    *v42 = *v43;
    swift_retain(v47);
    v48 = v42;
    v49 = v35;
    v50 = 0;
  }
  swift_storeEnumTagMultiPayload(v48, v49, v50);
  return v52;
}

uint64_t sub_1000B6C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t (*v22)(void *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for FeaturedVideosViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_QWORD *)(a1 + v10);
  v14 = *(_QWORD *)(a2 + v10);
  *(_QWORD *)(a1 + v10) = v14;
  swift_retain(v14);
  swift_release(v13);
  v15 = *(_QWORD *)(v12 + 8);
  v16 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v11 + 8) = v15;
  swift_retain(v15);
  swift_release(v16);
  v17 = type metadata accessor for Optional(255, v7);
  v18 = *(int *)(type metadata accessor for Binding(0, v17) + 32);
  v19 = (void *)(v11 + v18);
  v20 = (void *)(v12 + v18);
  v21 = *(_QWORD *)(v7 - 8);
  v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v19, 1, v7);
  v24 = v22(v20, 1, v7);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 16))(v19, v20, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, v7);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(v19, v7);
LABEL_6:
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v21 + 24))(v19, v20, v7);
LABEL_7:
  v25 = *(int *)(a3 + 40);
  v26 = (char *)(a1 + v25);
  v27 = (char *)(a2 + v25);
  v28 = v22((void *)(a1 + v25), 1, v7);
  v29 = v22(v27, 1, v7);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v26, v27, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v26, 0, 1, v7);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v26, v7);
LABEL_12:
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v26, v27, v7);
LABEL_13:
  v30 = *(int *)(type metadata accessor for State(0, v17) + 28);
  v31 = *(_QWORD *)&v26[v30];
  v32 = *(_QWORD *)&v27[v30];
  *(_QWORD *)&v26[v30] = v32;
  swift_retain(v32);
  swift_release(v31);
  v33 = *(int *)(a3 + 44);
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = *(_QWORD *)(a1 + v33);
  v37 = *(_QWORD *)(a2 + v33);
  *(_QWORD *)(a1 + v33) = v37;
  swift_retain(v37);
  swift_release(v36);
  *(_QWORD *)(v34 + 8) = *(_QWORD *)(v35 + 8);
  if (a1 != a2)
  {
    v38 = *(int *)(a3 + 48);
    v39 = (uint64_t *)(a1 + v38);
    v40 = (uint64_t *)(a2 + v38);
    sub_100008194(a1 + v38, &qword_10015D498);
    v41 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v40, v41) == 1)
    {
      v42 = type metadata accessor for UserInterfaceSizeClass(0);
      v43 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v43 + 48))(v40, 1, v42))
      {
        v44 = sub_100003E70(&qword_10015D4A0);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
        v45 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v43 + 16))(v39, v40, v42);
        v45 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v39, 0, 1, v42);
      }
    }
    else
    {
      v46 = *v40;
      *v39 = *v40;
      swift_retain(v46);
      v45 = 0;
    }
    swift_storeEnumTagMultiPayload(v39, v41, v45);
    v47 = *(int *)(a3 + 52);
    v48 = (uint64_t *)(a1 + v47);
    v49 = (uint64_t *)(a2 + v47);
    sub_100008194(a1 + v47, &qword_10015D498);
    v50 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v49, v50) == 1)
    {
      v51 = type metadata accessor for UserInterfaceSizeClass(0);
      v52 = *(_QWORD *)(v51 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v52 + 48))(v49, 1, v51))
      {
        v53 = sub_100003E70(&qword_10015D4A0);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v52 + 16))(v48, v49, v51);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v48, 0, 1, v51);
      }
      v55 = v48;
      v56 = v50;
      v57 = 1;
    }
    else
    {
      v54 = *v49;
      *v48 = *v49;
      swift_retain(v54);
      v55 = v48;
      v56 = v50;
      v57 = 0;
    }
    swift_storeEnumTagMultiPayload(v55, v56, v57);
  }
  return a1;
}

uint64_t sub_1000B709C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  const void *v17;
  uint64_t v18;
  unsigned int (*v19)(const void *, uint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for FeaturedVideosViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = (_QWORD *)(a1 + v10);
  v12 = a2 + v10;
  v13 = *(_QWORD *)(a2 + v10 + 8);
  *v11 = *(_QWORD *)(a2 + v10);
  v11[1] = v13;
  v14 = type metadata accessor for Optional(255, v7);
  v15 = *(int *)(type metadata accessor for Binding(0, v14) + 32);
  v16 = (char *)v11 + v15;
  v17 = (const void *)(v12 + v15);
  v18 = *(_QWORD *)(v7 - 8);
  v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
  if (v19(v17, 1, v7))
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v18 + 32))(v16, v17, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v7);
  }
  v20 = *(int *)(a3 + 40);
  v21 = (char *)(a1 + v20);
  v22 = (char *)(a2 + v20);
  if (v19((const void *)(a2 + v20), 1, v7))
  {
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v22, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v21, 0, 1, v7);
  }
  v23 = type metadata accessor for State(0, v14);
  *(_QWORD *)&v21[*(int *)(v23 + 28)] = *(_QWORD *)&v22[*(int *)(v23 + 28)];
  v24 = *(int *)(a3 + 48);
  *(_OWORD *)(a1 + *(int *)(a3 + 44)) = *(_OWORD *)(a2 + *(int *)(a3 + 44));
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
  {
    v28 = type metadata accessor for UserInterfaceSizeClass(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v26, 1, v28))
    {
      v30 = sub_100003E70(&qword_10015D4A0);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v29 + 32))(v25, v26, v28);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v25, 0, 1, v28);
    }
    swift_storeEnumTagMultiPayload(v25, v27, 1);
  }
  else
  {
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  v31 = *(int *)(a3 + 52);
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  if (swift_getEnumCaseMultiPayload(v33, v27) == 1)
  {
    v34 = type metadata accessor for UserInterfaceSizeClass(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = sub_100003E70(&qword_10015D4A0);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v35 + 32))(v32, v33, v34);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    swift_storeEnumTagMultiPayload(v32, v27, 1);
  }
  else
  {
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000B73C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for FeaturedVideosViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_QWORD *)(a1 + v10);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  swift_release(v13);
  v14 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
  swift_release(v14);
  v15 = type metadata accessor for Optional(255, v7);
  v16 = *(int *)(type metadata accessor for Binding(0, v15) + 32);
  v17 = (void *)(v11 + v16);
  v18 = (void *)(v12 + v16);
  v19 = *(_QWORD *)(v7 - 8);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v17, 1, v7);
  v22 = v20(v18, 1, v7);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v17, v18, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v7);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v17, v7);
LABEL_6:
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v17, v18, v7);
LABEL_7:
  v23 = *(int *)(a3 + 40);
  v24 = (char *)(a1 + v23);
  v25 = (char *)(a2 + v23);
  v26 = v20((void *)(a1 + v23), 1, v7);
  v27 = v20(v25, 1, v7);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v24, v25, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v24, 0, 1, v7);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v24, v7);
LABEL_12:
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v24, v25, v7);
LABEL_13:
  v28 = *(int *)(type metadata accessor for State(0, v15) + 28);
  v29 = *(_QWORD *)&v24[v28];
  *(_QWORD *)&v24[v28] = *(_QWORD *)&v25[v28];
  swift_release(v29);
  v30 = *(int *)(a3 + 44);
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = *(_QWORD *)(a1 + v30);
  *(_QWORD *)(a1 + v30) = *(_QWORD *)(a2 + v30);
  swift_release(v33);
  *(_QWORD *)(v31 + 8) = *(_QWORD *)(v32 + 8);
  if (a1 != a2)
  {
    v34 = *(int *)(a3 + 48);
    v35 = (void *)(a1 + v34);
    v36 = (const void *)(a2 + v34);
    sub_100008194(a1 + v34, &qword_10015D498);
    v37 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
    {
      v38 = type metadata accessor for UserInterfaceSizeClass(0);
      v39 = *(_QWORD *)(v38 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48))(v36, 1, v38))
      {
        v40 = sub_100003E70(&qword_10015D4A0);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v39 + 32))(v35, v36, v38);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v35, 0, 1, v38);
      }
      swift_storeEnumTagMultiPayload(v35, v37, 1);
    }
    else
    {
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    v41 = *(int *)(a3 + 52);
    v42 = (void *)(a1 + v41);
    v43 = (const void *)(a2 + v41);
    sub_100008194(a1 + v41, &qword_10015D498);
    v44 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v43, v44) == 1)
    {
      v45 = type metadata accessor for UserInterfaceSizeClass(0);
      v46 = *(_QWORD *)(v45 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v46 + 48))(v43, 1, v45))
      {
        v47 = sub_100003E70(&qword_10015D4A0);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v46 + 32))(v42, v43, v45);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v42, 0, 1, v45);
      }
      swift_storeEnumTagMultiPayload(v42, v44, 1);
    }
    else
    {
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000B77F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B77FC);
}

uint64_t sub_1000B77FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for FeaturedVideosViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, a2, v9);
  v12 = type metadata accessor for Optional(255, v7);
  v13 = type metadata accessor for Binding(0, v12);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
  {
    v15 = v13;
    v16 = *(int *)(a3 + 36);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(a1 + v16, a2, v15);
  }
  v17 = type metadata accessor for State(0, v12);
  v14 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
  {
    v15 = v17;
    v16 = *(int *)(a3 + 40);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(a1 + v16, a2, v15);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v15 = sub_100003E70(&qword_10015DFA0);
    v14 = *(_QWORD *)(v15 - 8);
    v16 = *(int *)(a3 + 48);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(a1 + v16, a2, v15);
  }
  v18 = *(_QWORD *)(a1 + *(int *)(a3 + 44));
  if (v18 >= 0xFFFFFFFF)
    LODWORD(v18) = -1;
  v19 = v18 - 1;
  if (v19 < 0)
    v19 = -1;
  return (v19 + 1);
}

uint64_t sub_1000B7928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B7934);
}

uint64_t sub_1000B7934(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v8 = *(_QWORD *)(a4 + 16);
  v9 = type metadata accessor for FeaturedVideosViewModel(255, v8, *(_QWORD *)(a4 + 24), a4);
  v10 = type metadata accessor for Bindable(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    v12 = v10;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v14 = a1;
  }
  else
  {
    v15 = type metadata accessor for Optional(255, v8);
    v16 = type metadata accessor for Binding(0, v15);
    v17 = *(_QWORD *)(v16 - 8);
    if (*(_DWORD *)(v17 + 84) == a3)
    {
      v12 = v16;
      v18 = *(int *)(a4 + 36);
    }
    else
    {
      result = type metadata accessor for State(0, v15);
      v17 = *(_QWORD *)(result - 8);
      if (*(_DWORD *)(v17 + 84) == a3)
      {
        v12 = result;
        v18 = *(int *)(a4 + 40);
      }
      else
      {
        if (a3 == 2147483646)
        {
          *(_QWORD *)(a1 + *(int *)(a4 + 44)) = a2;
          return result;
        }
        v12 = sub_100003E70(&qword_10015DFA0);
        v17 = *(_QWORD *)(v12 - 8);
        v18 = *(int *)(a4 + 48);
      }
    }
    v14 = a1 + v18;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
  }
  return v13(v14, a2, a2, v12);
}

uint64_t sub_1000B7A5C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10011ACFC, 1);
}

uint64_t sub_1000B7A90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for Optional(255, *(_QWORD *)(a1 + 16));
  v2 = type metadata accessor for State(0, v1);
  return State.projectedValue.getter(v2);
}

uint64_t sub_1000B7AD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t v17;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char v59[16];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t OpaqueTypeConformance2;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  _QWORD *v71;

  v58 = a2;
  v3 = sub_1000034AC(&qword_100162F78);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for Array(255, v4);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for FeaturedVideoPlayer(255, v4, v6, v7);
  v9 = type metadata accessor for ModifiedContent(255, v8, &type metadata for _AspectRatioLayout);
  v10 = sub_1000034AC(&qword_10015E338);
  v11 = type metadata accessor for ModifiedContent(255, v9, v10);
  v12 = sub_1000034AC(&qword_10015DAA0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v11, v12, 0, 0);
  v14 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v14);
  v16 = type metadata accessor for VStack(255, v14, WitnessTable);
  v17 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v16);
  v67 = v16;
  v68 = v17;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v67, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  v19 = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  v20 = *(_QWORD **)(v6 + 8);
  v67 = v5;
  v68 = v4;
  v69 = OpaqueTypeMetadata2;
  v70 = (void *)v19;
  v71 = v20;
  v21 = type metadata accessor for ForEach(255, &v67);
  v67 = v16;
  v68 = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  v22 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v21);
  v23 = type metadata accessor for LazyHStack(255, v21, v22);
  v24 = swift_getWitnessTable(&protocol conformance descriptor for LazyHStack<A>, v23);
  v67 = v23;
  v68 = v24;
  v25 = swift_getOpaqueTypeMetadata2(255, &v67, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v67 = v23;
  v68 = v24;
  v26 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v27 = type metadata accessor for ScrollView(255, v25, v26);
  v28 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v27);
  v67 = v27;
  v68 = v28;
  v29 = swift_getOpaqueTypeMetadata2(255, &v67, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v67 = v27;
  v68 = v28;
  v30 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v67 = v29;
  v68 = v30;
  v31 = swift_getOpaqueTypeMetadata2(255, &v67, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v32 = type metadata accessor for ViewAlignedScrollTargetBehavior(255);
  v67 = v29;
  v68 = v30;
  v33 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v67 = v31;
  v68 = v32;
  v69 = v33;
  v70 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v34 = swift_getOpaqueTypeMetadata2(255, &v67, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v67 = v31;
  v68 = v32;
  v69 = v33;
  v70 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v35 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v67 = v34;
  v68 = v4;
  v69 = v35;
  v70 = v20;
  v36 = swift_getOpaqueTypeMetadata2(255, &v67, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v37 = type metadata accessor for ModifiedContent(255, v36, &type metadata for _FlexFrameLayout);
  v38 = type metadata accessor for Optional(255, v4);
  v67 = v34;
  v68 = v4;
  v69 = v35;
  v70 = v20;
  v64 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v65 = &protocol witness table for _FlexFrameLayout;
  v39 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v37);
  v63 = v20[1];
  v40 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v38);
  v67 = v37;
  v68 = v38;
  v69 = v39;
  v70 = (void *)v40;
  v41 = swift_getOpaqueTypeMetadata2(255, &v67, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v42 = type metadata accessor for ModifiedContent(255, v41, &type metadata for _AppearanceActionModifier);
  v43 = swift_getTupleTypeMetadata2(255, v3, v42, 0, 0);
  v44 = type metadata accessor for TupleView(255, v43);
  v45 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v44);
  v46 = type metadata accessor for VStack(0, v44, v45);
  v47 = *(_QWORD *)(v46 - 8);
  v48 = __chkstk_darwin(v46);
  v50 = (char *)&v57 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __chkstk_darwin(v48);
  v53 = (char *)&v57 - v52;
  v54 = static HorizontalAlignment.leading.getter(v51);
  v60 = v4;
  v61 = v6;
  v62 = v57;
  VStack.init(alignment:spacing:content:)(v54, 0x402A000000000000, 0, sub_1000BA8FC, v59, v44, v45);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v46);
  sub_1000F257C((uint64_t)v50, v46, (uint64_t)v53);
  v55 = *(void (**)(char *, uint64_t))(v47 + 8);
  v55(v50, v46);
  sub_1000E3B88((uint64_t)v53, v46, v58);
  return ((uint64_t (*)(char *, uint64_t))v55)(v53, v46);
}

uint64_t sub_1000B7FCC@<X0>(void (*a1)(_QWORD, _QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t TupleTypeMetadata2;
  uint64_t v29;
  uint64_t WitnessTable;
  uint64_t v31;
  uint64_t v32;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(_QWORD, _QWORD);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  void *v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  _QWORD *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  void (*v140)(_QWORD, _QWORD);
  char *v141;
  uint64_t v142;
  void (*v143)(_QWORD, _QWORD);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  __n128 v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  __n128 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(char *, uint64_t, uint64_t);
  uint64_t v175;
  uint64_t v176;
  void (*v177)(char *, uint64_t);
  uint64_t v178;
  uint64_t v179;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t KeyPath;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t OpaqueTypeConformance2;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  void (*v242)(_QWORD, _QWORD);
  _QWORD v243[7];
  _QWORD v244[2];
  uint64_t v245;
  void (*v246)(_QWORD, _QWORD, _QWORD);
  uint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  uint64_t v252;
  char v253;
  char v254;
  double v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char v259;
  uint64_t v260[10];

  v242 = a1;
  v233 = a5;
  v5 = a2;
  v239 = type metadata accessor for FeaturedVideosView(0, a2, a3, a4);
  v7 = *(_QWORD *)(*(_QWORD *)(v239 - 8) + 64);
  v230 = *(_QWORD *)(v239 - 8);
  v231 = v7;
  __chkstk_darwin(v239);
  v229 = (char *)&v181 - v8;
  v9 = type metadata accessor for Optional(0, v5);
  v10 = *(_QWORD *)(v9 - 8);
  v236 = v9;
  v232 = v10;
  __chkstk_darwin(v9);
  v228 = (char *)&v181 - v11;
  v13 = type metadata accessor for Binding(0, v12);
  v226 = *(_QWORD *)(v13 - 8);
  v227 = v13;
  __chkstk_darwin(v13);
  v225 = (char *)&v181 - v14;
  v15 = type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior(0);
  __chkstk_darwin(v15);
  v223 = (char *)&v181 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v235 = (_QWORD *)type metadata accessor for ViewAlignedScrollTargetBehavior(0);
  v224 = *(v235 - 1);
  __chkstk_darwin(v235);
  v222 = (char *)&v181 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ContentMarginPlacement(0);
  v220 = *(_QWORD *)(v18 - 8);
  v221 = v18;
  __chkstk_darwin(v18);
  v219 = (char *)&v181 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Array(255, v5);
  v21 = a3;
  v241 = a3;
  v23 = type metadata accessor for FeaturedVideoPlayer(255, v5, a3, v22);
  v24 = type metadata accessor for ModifiedContent(255, v23, &type metadata for _AspectRatioLayout);
  v25 = sub_1000034AC(&qword_10015E338);
  v26 = type metadata accessor for ModifiedContent(255, v24, v25);
  v27 = sub_1000034AC(&qword_10015DAA0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v26, v27, 0, 0);
  v29 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v29);
  v31 = type metadata accessor for VStack(255, v29, WitnessTable);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v31);
  v245 = v31;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v32;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v245, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for [A], v20);
  v35 = *(_QWORD **)(v21 + 8);
  v245 = v20;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v5;
  v247 = OpaqueTypeMetadata2;
  v248 = (void *)v34;
  v249 = (uint64_t)v35;
  v36 = v35;
  v37 = type metadata accessor for ForEach(255, &v245);
  v245 = v31;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v32;
  v260[8] = swift_getOpaqueTypeConformance2(&v245, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  v38 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v37);
  v39 = type metadata accessor for LazyHStack(255, v37, v38);
  v40 = swift_getWitnessTable(&protocol conformance descriptor for LazyHStack<A>, v39);
  v245 = v39;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v40;
  v41 = swift_getOpaqueTypeMetadata2(255, &v245, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v204 = v41;
  v245 = v39;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v40;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v245, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v42 = type metadata accessor for ScrollView(0, v41, OpaqueTypeConformance2);
  v211 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v199 = (char *)&v181 - v43;
  v44 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v42);
  v245 = v42;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v44;
  v45 = v44;
  v196 = v44;
  v46 = swift_getOpaqueTypeMetadata2(0, &v245, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v212 = *(_QWORD *)(v46 - 8);
  v47 = v46;
  __chkstk_darwin(v46);
  v195 = (char *)&v181 - v48;
  v245 = v42;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v45;
  v49 = swift_getOpaqueTypeConformance2(&v245, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v245 = v47;
  v50 = v47;
  v192 = v47;
  v193 = v49;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v49;
  v51 = v49;
  v52 = swift_getOpaqueTypeMetadata2(0, &v245, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v210 = *(_QWORD *)(v52 - 8);
  v53 = v52;
  __chkstk_darwin(v52);
  v189 = (char *)&v181 - v54;
  v245 = v50;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v51;
  v55 = swift_getOpaqueTypeConformance2(&v245, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v245 = v53;
  v56 = v53;
  v187 = v53;
  v57 = (uint64_t)v235;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v235;
  v247 = v55;
  v188 = v55;
  v248 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v58 = swift_getOpaqueTypeMetadata2(0, &v245, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v209 = *(_QWORD *)(v58 - 8);
  v59 = v58;
  __chkstk_darwin(v58);
  v186 = (char *)&v181 - v60;
  v245 = v56;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v57;
  v247 = v55;
  v248 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v61 = swift_getOpaqueTypeConformance2(&v245, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v245 = v59;
  v62 = v59;
  v182 = v59;
  v183 = v61;
  v234 = v5;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v5;
  v247 = v61;
  v63 = v61;
  v248 = v36;
  v64 = swift_getOpaqueTypeMetadata2(0, &v245, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v208 = *(_QWORD *)(v64 - 8);
  v197 = v64;
  __chkstk_darwin(v64);
  v185 = (char *)&v181 - v65;
  v67 = type metadata accessor for ModifiedContent(0, v66, &type metadata for _FlexFrameLayout);
  v218 = *(_QWORD *)(v67 - 8);
  v68 = v67;
  __chkstk_darwin(v67);
  v237 = (char *)&v181 - v69;
  v245 = v62;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v5;
  v247 = v63;
  v181 = v36;
  v248 = v36;
  v184 = swift_getOpaqueTypeConformance2(&v245, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v260[6] = v184;
  v260[7] = (uint64_t)&protocol witness table for _FlexFrameLayout;
  v205 = v68;
  v70 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v68);
  v207 = v70;
  v260[5] = v36[1];
  v71 = v236;
  v206 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v236);
  v245 = v68;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v71;
  v247 = v70;
  v248 = (void *)v206;
  v72 = swift_getOpaqueTypeMetadata2(0, &v245, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v216 = *(_QWORD *)(v72 - 8);
  v213 = v72;
  __chkstk_darwin(v72);
  v238 = (char *)&v181 - v73;
  v215 = type metadata accessor for ModifiedContent(0, v74, &type metadata for _AppearanceActionModifier);
  v217 = *(_QWORD *)(v215 - 8);
  v75 = __chkstk_darwin(v215);
  v240 = (char *)&v181 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v75);
  v214 = (uint64_t)&v181 - v77;
  v78 = v239;
  v79 = v242;
  v83 = sub_1000B6200(v239, v80, v81, v82);
  v84 = sub_10003B7FC();
  v86 = v85;
  LOBYTE(v5) = v87;
  v89 = v88;
  swift_release(v83);
  v90 = Text.init(_:tableName:bundle:comment:)(v84, v86, v5 & 1, v89, 0, 0, 0, 0, 0, 256);
  v92 = v91;
  v94 = v93;
  v96 = v95 & 1;
  v97 = static Font.title2.getter(v90);
  static Font.Weight.bold.getter(v97);
  v98 = Font.weight(_:)(v97);
  swift_release(v97);
  v99 = Text.font(_:)(v98, v90, v92, v96, v94);
  v200 = v100;
  v201 = v99;
  LOBYTE(v97) = v101;
  v202 = v102;
  swift_release(v98);
  v198 = v97 & 1;
  sub_10000BFF8(v90, v92, v96);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_100111E10);
  v191 = swift_getKeyPath(&unk_100111E40);
  v190 = static Edge.Set.leading.getter(v191);
  v103 = EdgeInsets.init(_all:)(20.0);
  v105 = v104;
  v107 = v106;
  v109 = v108;
  v111 = static Axis.Set.horizontal.getter(v110);
  v112 = v234;
  v243[2] = v234;
  v243[3] = v241;
  v243[4] = v79;
  v113 = v199;
  ScrollView.init(_:showsIndicators:content:)(v111, 0, sub_1000BA918, v243, v204, OpaqueTypeConformance2);
  v117 = sub_1000B6200(v78, v114, v115, v116);
  LOBYTE(v92) = sub_10003B8AC();
  swift_release(v117);
  v118 = v195;
  View.scrollDisabled(_:)(v92 & 1, v42, v196);
  v119 = (*(uint64_t (**)(char *, uint64_t))(v211 + 8))(v113, v42);
  v120 = static Edge.Set.horizontal.getter(v119);
  v121 = v219;
  static ContentMarginPlacement.automatic.getter();
  v122 = v189;
  v123 = v192;
  View.contentMargins(_:_:for:)(v120, 0x4034000000000000, 0, v121, v192, v193);
  (*(void (**)(char *, uint64_t))(v220 + 8))(v121, v221);
  v124 = (*(uint64_t (**)(char *, uint64_t))(v212 + 8))(v118, v123);
  v125 = v223;
  static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter(v124);
  v126 = v222;
  ViewAlignedScrollTargetBehavior.init(limitBehavior:)(v125);
  v128 = v186;
  v127 = v187;
  v129 = v235;
  View.scrollTargetBehavior<A>(_:)(v126, v187, v235, v188, &protocol witness table for ViewAlignedScrollTargetBehavior);
  (*(void (**)(char *, _QWORD *))(v224 + 8))(v126, v129);
  (*(void (**)(char *, uint64_t))(v210 + 8))(v122, v127);
  v130 = v225;
  sub_1000AC570(v78, (uint64_t (*)(uint64_t))&Binding.projectedValue.getter);
  v131 = v185;
  v132 = v182;
  v133 = v112;
  View.scrollPosition<A>(id:anchor:)(v130, 0, 0, 1, v182, v112, v183, v181);
  (*(void (**)(char *, uint64_t))(v226 + 8))(v130, v227);
  v134 = (*(uint64_t (**)(char *, uint64_t))(v209 + 8))(v128, v132);
  v135 = static Alignment.center.getter(v134);
  v136 = v197;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0x7FF0000000000000, 0, v135, v137, v197, v184);
  (*(void (**)(char *, uint64_t))(v208 + 8))(v131, v136);
  v138 = v228;
  v139 = v78;
  v140 = v242;
  sub_1000AC570(v78, (uint64_t (*)(uint64_t))&Binding.wrappedValue.getter);
  v141 = v229;
  v142 = v230;
  v235 = *(_QWORD **)(v230 + 16);
  v143 = v140;
  v144 = v139;
  ((void (*)(char *, void (*)(_QWORD, _QWORD), uint64_t))v235)(v229, v143, v139);
  v145 = *(unsigned __int8 *)(v142 + 80);
  v146 = (v145 + 32) & ~v145;
  v231 += v146;
  v227 = v145 | 7;
  v147 = swift_allocObject(&unk_100152A40, v231, v145 | 7);
  v148 = v241;
  *(_QWORD *)(v147 + 16) = v133;
  *(_QWORD *)(v147 + 24) = v148;
  v230 = *(_QWORD *)(v142 + 32);
  v149 = v141;
  ((void (*)(uint64_t, char *, uint64_t))v230)(v147 + v146, v141, v144);
  v150 = v237;
  v151 = v205;
  v152 = (void *)v206;
  v153 = v236;
  v154 = v207;
  View.onChange<A>(of:initial:_:)(v138, 0, sub_1000BA928, v147, v205, v236, v207, v206);
  v155 = swift_release(v147);
  (*(void (**)(char *, uint64_t, __n128))(v232 + 8))(v138, v153, v155);
  v156 = v150;
  v157 = v151;
  (*(void (**)(char *, uint64_t))(v218 + 8))(v156, v151);
  v158 = v239;
  ((void (*)(char *, void (*)(_QWORD, _QWORD), uint64_t))v235)(v149, v242, v239);
  v159 = swift_allocObject(&unk_100152A68, v231, v227);
  v160 = v241;
  *(_QWORD *)(v159 + 16) = v234;
  *(_QWORD *)(v159 + 24) = v160;
  ((void (*)(uint64_t, char *, uint64_t))v230)(v159 + v146, v149, v158);
  v245 = v157;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v153;
  v247 = v154;
  v248 = v152;
  v161 = swift_getOpaqueTypeConformance2(&v245, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v162 = (uint64_t)v240;
  v163 = v213;
  v164 = v238;
  View.onAppear(perform:)(sub_1000BA938, v159, v213, v161);
  v165 = swift_release(v159);
  (*(void (**)(char *, uint64_t, __n128))(v216 + 8))(v164, v163, v165);
  v260[2] = v161;
  v260[3] = (uint64_t)&protocol witness table for _AppearanceActionModifier;
  v166 = v215;
  v241 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v215);
  v167 = v214;
  sub_1000F257C(v162, v166, v214);
  v168 = v217;
  v242 = *(void (**)(_QWORD, _QWORD))(v217 + 8);
  v242(v162, v166);
  v169 = v200;
  v170 = v201;
  v245 = v201;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v200;
  LOBYTE(v164) = v198;
  LOBYTE(v247) = v198;
  v171 = v202;
  v248 = v202;
  v172 = KeyPath;
  v249 = KeyPath;
  v250 = 2;
  v251 = 0;
  v173 = v191;
  v252 = v191;
  v253 = 0;
  v254 = v190;
  v255 = v103;
  v256 = v105;
  v257 = v107;
  v258 = v109;
  v259 = 0;
  v260[0] = (uint64_t)&v245;
  v174 = *(void (**)(char *, uint64_t, uint64_t))(v168 + 16);
  v175 = (uint64_t)v240;
  v174(v240, v167, v166);
  v260[1] = v175;
  sub_10000C008(v170, v169, (char)v164);
  swift_bridgeObjectRetain(v171);
  v176 = v172;
  swift_retain(v172);
  swift_retain(v173);
  v244[0] = sub_100003E70(&qword_100162F78);
  v244[1] = v166;
  v243[5] = sub_1000BA9A4();
  v243[6] = v241;
  sub_1000E4768(v260, 2uLL, (uint64_t)v244);
  v177 = (void (*)(char *, uint64_t))v242;
  v242(v167, v166);
  sub_10000BFF8(v170, v169, (char)v164);
  swift_release(v173);
  swift_release(v176);
  swift_bridgeObjectRelease();
  v177(v240, v166);
  v178 = v249;
  v179 = v252;
  sub_10000BFF8(v245, (uint64_t)v246, v247);
  swift_release(v179);
  swift_release(v178);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B8E28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t WitnessTable;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[16];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t OpaqueTypeConformance2;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v44 = a1;
  v45 = a4;
  v6 = type metadata accessor for PinnedScrollableViews(0);
  __chkstk_darwin(v6);
  v43 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Array(255, a2);
  v10 = type metadata accessor for FeaturedVideoPlayer(255, a2, a3, v9);
  v11 = type metadata accessor for ModifiedContent(255, v10, &type metadata for _AspectRatioLayout);
  v12 = sub_1000034AC(&qword_10015E338);
  v13 = type metadata accessor for ModifiedContent(255, v11, v12);
  v14 = sub_1000034AC(&qword_10015DAA0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v13, v14, 0, 0);
  v16 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v16);
  v18 = type metadata accessor for VStack(255, v16, WitnessTable);
  v19 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v18);
  v51 = v18;
  v52 = v19;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v51, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  v21 = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  v22 = *(_QWORD *)(a3 + 8);
  v51 = v8;
  v52 = a2;
  v53 = OpaqueTypeMetadata2;
  v54 = v21;
  v55 = v22;
  v23 = type metadata accessor for ForEach(255, &v51);
  v51 = v18;
  v52 = v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v51, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  v24 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v23);
  v25 = type metadata accessor for LazyHStack(0, v23, v24);
  v42 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v27 = (char *)&v40 - v26;
  v28 = swift_getWitnessTable(&protocol conformance descriptor for LazyHStack<A>, v25);
  v51 = v25;
  v52 = v28;
  v29 = swift_getOpaqueTypeMetadata2(0, &v51, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v41 = *(_QWORD *)(v29 - 8);
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&v40 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v30);
  v35 = (char *)&v40 - v34;
  v47 = a2;
  v48 = a3;
  v49 = v44;
  v36 = static VerticalAlignment.center.getter(v33);
  v37 = v43;
  sub_100091BC0();
  LazyHStack.init(alignment:spacing:pinnedViews:content:)(v36, 0x4024000000000000, 0, v37, sub_1000BAB34, v46, v23, v24);
  View.scrollTargetLayout(isEnabled:)(1, v25, v28);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v27, v25);
  v51 = v25;
  v52 = v28;
  swift_getOpaqueTypeConformance2(&v51, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  sub_1000F257C((uint64_t)v32, v29, (uint64_t)v35);
  v38 = *(void (**)(char *, uint64_t))(v41 + 8);
  v38(v32, v29);
  sub_1000E3B88((uint64_t)v35, v29, v45);
  return ((uint64_t (*)(char *, uint64_t))v38)(v35, v29);
}

uint64_t sub_1000B9198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t WitnessTable;
  uint64_t v22;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t OpaqueTypeConformance2;
  void (*v46)(char *, uint64_t);
  uint64_t v48;
  uint64_t KeyPath;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v59 = a5;
  v8 = type metadata accessor for FeaturedVideosView(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = v8;
  v58 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v57 = (char *)&v48 - v11;
  v12 = type metadata accessor for Array(255, a2);
  v14 = type metadata accessor for FeaturedVideoPlayer(255, a2, a3, v13);
  v15 = type metadata accessor for ModifiedContent(255, v14, &type metadata for _AspectRatioLayout);
  v16 = sub_1000034AC(&qword_10015E338);
  v17 = type metadata accessor for ModifiedContent(255, v15, v16);
  v18 = sub_1000034AC(&qword_10015DAA0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v17, v18, 0, 0);
  v20 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v20);
  v22 = type metadata accessor for VStack(255, v20, WitnessTable);
  v51 = v22;
  v50 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v22);
  v64 = v22;
  v65 = v50;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v64, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  v54 = OpaqueTypeMetadata2;
  v55 = v12;
  v24 = swift_getWitnessTable(&protocol conformance descriptor for [A], v12);
  v52 = *(_QWORD *)(a3 + 8);
  v53 = v24;
  v64 = v12;
  v65 = a2;
  v66 = OpaqueTypeMetadata2;
  v67 = v24;
  v68 = v52;
  v25 = type metadata accessor for ForEach(0, &v64);
  v56 = *(_QWORD *)(v25 - 8);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v48 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v30 = (char *)&v48 - v29;
  v31 = v10;
  v35 = sub_1000B6200(v10, v32, v33, v34);
  v36 = sub_10003B9EC();
  swift_bridgeObjectRetain(v36);
  swift_release(v35);
  v63 = v36;
  v60 = a2;
  v61 = a3;
  KeyPath = swift_getKeyPath(&unk_100111E78);
  v37 = v9;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v39 = v57;
  v40 = a1;
  v41 = v31;
  v38(v57, v40, v31);
  v42 = *(unsigned __int8 *)(v37 + 80);
  v43 = (v42 + 32) & ~v42;
  v44 = swift_allocObject(&unk_100152A90, v43 + v58, v42 | 7);
  *(_QWORD *)(v44 + 16) = a2;
  *(_QWORD *)(v44 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v44 + v43, v39, v41);
  v64 = v51;
  v65 = v50;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v64, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  ForEach<>.init(_:id:content:)(&v63, KeyPath, sub_1000BAD80, v44, v55, v54, v53, v52, OpaqueTypeConformance2);
  v62 = OpaqueTypeConformance2;
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v25);
  sub_1000F257C((uint64_t)v28, v25, (uint64_t)v30);
  v46 = *(void (**)(char *, uint64_t))(v56 + 8);
  v46(v28, v25);
  sub_1000E3B88((uint64_t)v30, v25, v59);
  return ((uint64_t (*)(char *, uint64_t))v46)(v30, v25);
}

uint64_t sub_1000B94EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t TupleTypeMetadata2;
  uint64_t v38;
  uint64_t WitnessTable;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(_BYTE *, _QWORD, uint64_t);
  void (*v52)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t (*v54)(_BYTE *, uint64_t, uint64_t);
  int v55;
  uint64_t v56;
  void (*v57)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  void (*v68)(_BYTE *, uint64_t);
  _BYTE *v69;
  uint64_t v70;
  _BYTE *v71;
  _QWORD *v72;
  _BYTE *v73;
  uint64_t v74;
  void (*v75)(_BYTE *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _BYTE *v86;
  uint64_t v87;
  void (*v88)(_BYTE *, uint64_t);
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  void (*v98)(uint64_t, uint64_t);
  _BYTE v100[12];
  int v101;
  _BYTE *v102;
  void (*v103)(_BYTE *, _QWORD, uint64_t, uint64_t);
  _BYTE *v104;
  _BYTE *v105;
  _BYTE *v106;
  _QWORD *v107;
  _BYTE *v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  _BYTE *v117;
  _BYTE *v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126[16];
  uint64_t v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v125 = a2;
  v115 = (_BYTE *)a4;
  v116 = a1;
  v121 = a5;
  v124 = type metadata accessor for FeaturedVideosView(0, a3, a4, a4);
  v110 = *(_QWORD *)(v124 - 8);
  v7 = __chkstk_darwin(v124);
  v120 = &v100[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v122 = &v100[-v9];
  v10 = type metadata accessor for UserInterfaceSizeClass(0);
  v11 = *(_QWORD **)(v10 - 8);
  __chkstk_darwin(v10);
  v104 = &v100[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v123 = sub_100003E70(&qword_10015E040);
  v13 = __chkstk_darwin(v123);
  v109 = &v100[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v16 = &v100[-v15];
  v17 = sub_100003E70(&qword_10015D4A0);
  v18 = __chkstk_darwin(v17);
  v102 = &v100[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = __chkstk_darwin(v18);
  v108 = &v100[-v21];
  v22 = __chkstk_darwin(v20);
  v105 = &v100[-v23];
  v24 = __chkstk_darwin(v22);
  v106 = &v100[-v25];
  v26 = __chkstk_darwin(v24);
  v28 = &v100[-v27];
  __chkstk_darwin(v26);
  v30 = &v100[-v29];
  v32 = type metadata accessor for FeaturedVideoPlayer(255, a3, a4, v31);
  v33 = type metadata accessor for ModifiedContent(255, v32, &type metadata for _AspectRatioLayout);
  v34 = sub_1000034AC(&qword_10015E338);
  v35 = type metadata accessor for ModifiedContent(255, v33, v34);
  v36 = sub_1000034AC(&qword_10015DAA0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v35, v36, 0, 0);
  v38 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v38);
  v40 = type metadata accessor for VStack(0, v38, WitnessTable);
  v113 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v42 = &v100[-v41];
  v43 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v40);
  v114 = v40;
  v131 = v40;
  v132 = v43;
  v111 = v43;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v131, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  v112 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v45 = __chkstk_darwin(OpaqueTypeMetadata2);
  v117 = &v100[-((v46 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v47 = __chkstk_darwin(v45);
  v118 = &v100[-v48];
  v49 = static HorizontalAlignment.leading.getter(v47);
  v127 = a3;
  v128 = v115;
  v129 = v116;
  v130 = v125;
  v115 = v42;
  v50 = VStack.init(alignment:spacing:content:)(v49, 0, 1, sub_1000BADE8, v126, v38, WitnessTable);
  LODWORD(v116) = static Axis.Set.horizontal.getter(v50);
  sub_10001DADC((uint64_t)v30);
  v51 = (void (*)(_BYTE *, _QWORD, uint64_t))v11[13];
  v51(v28, enum case for UserInterfaceSizeClass.regular(_:), v10);
  v52 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v11[7];
  v52(v28, 0, 1, v10);
  v53 = (uint64_t)&v16[*(int *)(v123 + 48)];
  sub_1000BADF4((uint64_t)v30, (uint64_t)v16);
  sub_1000BADF4((uint64_t)v28, v53);
  v107 = v11;
  v54 = (uint64_t (*)(_BYTE *, uint64_t, uint64_t))v11[6];
  v55 = v54(v16, 1, v10);
  v119 = OpaqueTypeMetadata2;
  if (v55 == 1)
  {
    sub_100008194((uint64_t)v28, &qword_10015D4A0);
    sub_100008194((uint64_t)v30, &qword_10015D4A0);
    if (v54((_BYTE *)v53, 1, v10) == 1)
    {
      sub_100008194((uint64_t)v16, &qword_10015D4A0);
      v56 = v110;
      v57 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v110 + 16);
      v58 = v122;
      v59 = v124;
      v57(v122, v125, v124);
      v60 = v121;
LABEL_13:
      v68 = *(void (**)(_BYTE *, uint64_t))(v56 + 8);
      v68(v58, v59);
      v70 = v119;
      v69 = v120;
      goto LABEL_14;
    }
    goto LABEL_6;
  }
  v61 = v106;
  sub_1000BADF4((uint64_t)v16, (uint64_t)v106);
  if (v54((_BYTE *)v53, 1, v10) == 1)
  {
    sub_100008194((uint64_t)v28, &qword_10015D4A0);
    sub_100008194((uint64_t)v30, &qword_10015D4A0);
    ((void (*)(_BYTE *, uint64_t))v107[1])(v61, v10);
LABEL_6:
    v103 = v52;
    sub_100008194((uint64_t)v16, &qword_10015E040);
    v56 = v110;
    v57 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v110 + 16);
    v58 = v122;
    v59 = v124;
    v57(v122, v125, v124);
    goto LABEL_7;
  }
  v103 = v52;
  v72 = v107;
  v73 = v104;
  ((void (*)(_BYTE *, uint64_t, uint64_t))v107[4])(v104, v53, v10);
  v74 = sub_100003B3C((unint64_t *)&qword_10015E0D0, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  v101 = dispatch thunk of static Equatable.== infix(_:_:)(v61, v73, v10, v74);
  v75 = (void (*)(_BYTE *, uint64_t))v72[1];
  v75(v73, v10);
  sub_100008194((uint64_t)v28, &qword_10015D4A0);
  sub_100008194((uint64_t)v30, &qword_10015D4A0);
  v75(v106, v10);
  sub_100008194((uint64_t)v16, &qword_10015D4A0);
  v56 = v110;
  v57 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v110 + 16);
  v58 = v122;
  v59 = v124;
  v57(v122, v125, v124);
  v60 = v121;
  if ((v101 & 1) != 0)
    goto LABEL_13;
LABEL_7:
  v62 = v105;
  sub_10001DADC((uint64_t)v105);
  v63 = v108;
  v51(v108, enum case for UserInterfaceSizeClass.compact(_:), v10);
  v64 = (uint64_t)v62;
  v103(v63, 0, 1, v10);
  v65 = v58;
  v66 = v109;
  v67 = (uint64_t)&v109[*(int *)(v123 + 48)];
  sub_1000BADF4(v64, (uint64_t)v109);
  sub_1000BADF4((uint64_t)v63, v67);
  if (v54(v66, 1, v10) == 1)
  {
    sub_100008194((uint64_t)v63, &qword_10015D4A0);
    sub_100008194(v64, &qword_10015D4A0);
    v68 = *(void (**)(_BYTE *, uint64_t))(v56 + 8);
    v68(v65, v59);
    if (v54((_BYTE *)v67, 1, v10) == 1)
    {
      sub_100008194((uint64_t)v109, &qword_10015D4A0);
      v70 = v119;
      v69 = v120;
      v60 = v121;
LABEL_14:
      v57(v69, v125, v59);
      goto LABEL_15;
    }
    v70 = v119;
    v69 = v120;
    v66 = v109;
    goto LABEL_18;
  }
  v71 = v102;
  sub_1000BADF4((uint64_t)v66, (uint64_t)v102);
  if (v54((_BYTE *)v67, 1, v10) == 1)
  {
    sub_100008194((uint64_t)v108, &qword_10015D4A0);
    sub_100008194(v64, &qword_10015D4A0);
    v68 = *(void (**)(_BYTE *, uint64_t))(v56 + 8);
    v68(v122, v59);
    ((void (*)(_BYTE *, uint64_t))v107[1])(v71, v10);
    v70 = v119;
    v69 = v120;
LABEL_18:
    v60 = v121;
    sub_100008194((uint64_t)v66, &qword_10015E040);
    v57(v69, v125, v59);
LABEL_20:
    v82 = ((uint64_t (*)(_BYTE *, uint64_t))v68)(v69, v59);
    goto LABEL_21;
  }
  v84 = v64;
  v85 = v107;
  v86 = v104;
  ((void (*)(_BYTE *, uint64_t, uint64_t))v107[4])(v104, v67, v10);
  v87 = sub_100003B3C((unint64_t *)&qword_10015E0D0, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  LODWORD(v123) = dispatch thunk of static Equatable.== infix(_:_:)(v71, v86, v10, v87);
  v88 = (void (*)(_BYTE *, uint64_t))v85[1];
  v88(v86, v10);
  sub_100008194((uint64_t)v108, &qword_10015D4A0);
  sub_100008194(v84, &qword_10015D4A0);
  v68 = *(void (**)(_BYTE *, uint64_t))(v56 + 8);
  v68(v122, v124);
  v88(v71, v10);
  v59 = v124;
  sub_100008194((uint64_t)v66, &qword_10015D4A0);
  v69 = v120;
  v57(v120, v125, v59);
  v70 = v119;
  v60 = v121;
  if ((v123 & 1) == 0)
    goto LABEL_20;
LABEL_15:
  v79 = sub_1000B6200(v59, v76, v77, v78);
  v80 = sub_10003B85C();
  v81 = swift_release(v79);
  v82 = ((uint64_t (*)(_BYTE *, uint64_t, __n128))v68)(v69, v59, v81);
  if (!v80)
  {
LABEL_21:
    v83 = 1;
    goto LABEL_22;
  }
  v83 = 2;
LABEL_22:
  v90 = v114;
  v89 = v115;
  v91 = v113;
  v92 = v112;
  v93 = v111;
  v94 = static Alignment.center.getter(v82);
  v95 = (uint64_t)v117;
  View.containerRelativeFrame(_:count:span:spacing:alignment:)(v116, v83, 1, v94, v96, v90, v93, 10.0);
  (*(void (**)(_BYTE *, uint64_t))(v91 + 8))(v89, v90);
  v131 = v90;
  v132 = v93;
  swift_getOpaqueTypeConformance2(&v131, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  v97 = v118;
  sub_1000F257C(v95, v70, (uint64_t)v118);
  v98 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
  v98(v95, v70);
  sub_1000E3B88((uint64_t)v97, v70, v60);
  return ((uint64_t (*)(_BYTE *, uint64_t))v98)(v97, v70);
}

uint64_t sub_1000B9F34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t WitnessTable;
  char *v40;
  uint64_t v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t KeyPath;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  _QWORD v97[2];
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105[8];

  v86 = a1;
  v91 = a4;
  v90 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v90);
  v89 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Optional(255, a2);
  v9 = type metadata accessor for Binding(0, v8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v82 - v11;
  v13 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v10);
  v15 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a2;
  v18 = type metadata accessor for FeaturedVideoPlayer(0, a2, a3, v17);
  v85 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v82 - v19;
  v21 = type metadata accessor for ModifiedContent(0, v18, &type metadata for _AspectRatioLayout);
  v22 = *(_QWORD *)(v21 - 8);
  v84 = v21;
  v87 = v22;
  __chkstk_darwin(v21);
  v83 = (char *)&v82 - v23;
  v24 = sub_1000034AC(&qword_10015E338);
  v93 = type metadata accessor for ModifiedContent(0, v21, v24);
  v88 = *(_QWORD *)(v93 - 8);
  v25 = __chkstk_darwin(v93);
  v92 = (char *)&v82 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v94 = (uint64_t)&v82 - v27;
  v28 = v15;
  v29 = (uint64_t)v15;
  v30 = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v28, a1, v16);
  v32 = type metadata accessor for FeaturedVideosView(0, v16, a3, v31);
  v36 = sub_1000B6200(v32, v33, v34, v35);
  LOBYTE(v16) = sub_10003B730();
  swift_release(v36);
  sub_1000B7A90(v32);
  v37 = v16 & 1;
  v38 = v30;
  sub_100090338(v29, v37, (uint64_t)v12, v30, a3, (uint64_t)v20);
  WitnessTable = swift_getWitnessTable(&unk_10010FE70, v18);
  v40 = v83;
  View.aspectRatio(_:contentMode:)(0x3FFC71C71C71C71CLL, 0, 0, v18, WitnessTable);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v20, v18);
  v41 = v90;
  v42 = v89;
  v43 = &v89[*(int *)(v90 + 20)];
  v44 = enum case for RoundedCornerStyle.continuous(_:);
  v45 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 104))(v43, v44, v45);
  __asm { FMOV            V0.2D, #8.0 }
  *v42 = _Q0;
  v105[5] = WitnessTable;
  v105[6] = (uint64_t)&protocol witness table for _AspectRatioLayout;
  v51 = v84;
  v52 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v84);
  v53 = sub_100003B3C(qword_100162F98, (uint64_t (*)(uint64_t))&type metadata accessor for RoundedRectangle, (uint64_t)&protocol conformance descriptor for RoundedRectangle);
  v54 = (uint64_t)v92;
  View.clipShape<A>(_:style:)(v42, 256, v51, v41, v52, v53);
  sub_10001BFA4((uint64_t)v42);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v40, v51);
  v55 = sub_100007D40(&qword_10015E330, &qword_10015E338, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
  v105[3] = v52;
  v105[4] = v55;
  v56 = v93;
  v89 = (char *)swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v93);
  sub_1000F257C(v54, v56, v94);
  v57 = v88;
  v90 = *(_QWORD *)(v88 + 8);
  ((void (*)(uint64_t, uint64_t))v90)(v54, v56);
  v98 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(v38, a3);
  v99 = v58;
  v59 = sub_10000CB40();
  v60 = Text.init<A>(_:)(&v98, &type metadata for String, v59);
  v62 = v61;
  v64 = v63;
  v66 = v65 & 1;
  v67 = static Font.subheadline.getter(v60);
  static Font.Weight.regular.getter();
  v68 = Font.weight(_:)(v67);
  swift_release(v67);
  v69 = Text.font(_:)(v68, v60, v62, v66, v64);
  v71 = v70;
  LOBYTE(a3) = v72;
  v74 = v73;
  swift_release(v68);
  sub_10000BFF8(v60, v62, v66);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_100111E10);
  v76 = (uint64_t)v92;
  v77 = v93;
  v78 = v94;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v92, v94, v93);
  v98 = v69;
  v99 = v71;
  v100 = a3 & 1;
  v101 = v74;
  v102 = KeyPath;
  v103 = 1;
  v104 = 0;
  v105[0] = v76;
  v105[1] = (uint64_t)&v98;
  sub_10000C008(v69, v71, a3 & 1);
  swift_bridgeObjectRetain(v74);
  swift_retain(KeyPath);
  v97[0] = v77;
  v97[1] = sub_100003E70(&qword_10015DAA0);
  v95 = v89;
  v96 = sub_100014248();
  sub_1000E4768(v105, 2uLL, (uint64_t)v97);
  sub_10000BFF8(v69, v71, a3 & 1);
  swift_release(KeyPath);
  swift_bridgeObjectRelease();
  v79 = (uint64_t (*)(uint64_t, uint64_t))v90;
  ((void (*)(uint64_t, uint64_t))v90)(v78, v77);
  v80 = v102;
  sub_10000BFF8(v98, v99, v100);
  swift_release(v80);
  swift_bridgeObjectRelease();
  return v79(v76, v77);
}

void sub_1000BA548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = type metadata accessor for FeaturedVideosView(0, a2, a3, a4);
  v9 = sub_1000B6200(v5, v6, v7, v8);
  v10 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10015CE98 != -1)
    swift_once(&qword_10015CE98, sub_100090534);
  objc_msgSend(v10, "postNotificationName:object:userInfo:", qword_10016F6A0, 0, 0);
  swift_release(v9);

  v14 = sub_1000B6200(v5, v11, v12, v13);
  v16 = *(_QWORD *)(v14 + 16);
  v15 = *(_QWORD *)(v14 + 24);
  swift_bridgeObjectRetain(v15);
  swift_release(v14);
  v17 = (uint64_t *)(a1 + *(int *)(v5 + 44));
  v18 = *v17;
  if (*v17)
  {
    swift_retain(*v17);
    sub_1000DB03C(v16, v15, 8, 13, 25, 0, 3u, v18);
    swift_bridgeObjectRelease();
    swift_release(v18);
  }
  else
  {
    v19 = v17[1];
    v20 = type metadata accessor for RemoteViewConfiguration();
    v21 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v19, v20, v21);
    __break(1u);
  }
}

uint64_t sub_1000BA6AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  uint64_t (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t WitnessTable;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Optional(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v34 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v33 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v33 - v17;
  v20 = type metadata accessor for FeaturedVideosView(0, a2, a3, v19);
  v35 = a1;
  sub_1000AC570(v20, (uint64_t (*)(uint64_t))&Binding.wrappedValue.getter);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(a3) = v21(v18, 1, a2);
  v22 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  result = v22(v18, v10);
  if ((_DWORD)a3 == 1)
  {
    v33 = v8;
    v27 = sub_1000B6200(v20, v24, v25, v26);
    v28 = sub_10003B9EC();
    swift_bridgeObjectRetain(v28);
    swift_release(v27);
    v36 = v28;
    v29 = type metadata accessor for Array(0, a2);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v29);
    Collection.first.getter(v29, WitnessTable);
    swift_bridgeObjectRelease();
    if (v21(v16, 1, a2) == 1)
    {
      return v22(v16, v10);
    }
    else
    {
      v31 = v33;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v33, v16, a2);
      v32 = (uint64_t)v34;
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v34, v31, a2);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v32, 0, 1, a2);
      sub_1000BAA94(v32, v20);
      v22((char *)v32, v10);
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v31, a2);
    }
  }
  return result;
}

uint64_t sub_1000BA8FC@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000B7FCC(*(void (**)(_QWORD, _QWORD))(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t sub_1000BA918@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000B8E28(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000BA928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BA944((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000BA548, a2, a3, a4);
}

uint64_t sub_1000BA938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BA944(sub_1000BA6AC, a2, a3, a4);
}

uint64_t sub_1000BA944(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FeaturedVideosView(0, v5, v6, a4) - 8) + 80);
  return a1(v4 + ((v7 + 32) & ~v7), v5, v6);
}

unint64_t sub_1000BA9A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162F80;
  if (!qword_100162F80)
  {
    v1 = sub_1000034AC(&qword_100162F78);
    sub_1000BAA10();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162F80);
  }
  return result;
}

unint64_t sub_1000BAA10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100162F88;
  if (!qword_100162F88)
  {
    v1 = sub_1000034AC(&qword_100162F90);
    sub_100014248();
    sub_100007D40(&qword_100162208, &qword_100162210, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100162F88);
  }
  return result;
}

uint64_t sub_1000BAA94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = type metadata accessor for Optional(0, *(_QWORD *)(a2 + 16));
  __chkstk_darwin(v3);
  v5 = (char *)&v9 - v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v9 - v4, a1, v3);
  v7 = type metadata accessor for Binding(0, v3);
  return Binding.wrappedValue.setter(v5, v7);
}

uint64_t sub_1000BAB34@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000B9198(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_1000BAB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = (int *)type metadata accessor for FeaturedVideosView(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v30 = *(_QWORD *)(v8 + 64);
  v11 = v4 + v10;
  v13 = type metadata accessor for FeaturedVideosViewModel(255, v5, v6, v12);
  v14 = type metadata accessor for Bindable(0, v13);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v4 + v10, v14);
  v15 = (_QWORD *)(v4 + v10 + v7[9]);
  swift_release(*v15);
  swift_release(v15[1]);
  v16 = type metadata accessor for Optional(255, v5);
  v17 = (char *)v15 + *(int *)(type metadata accessor for Binding(0, v16) + 32);
  v18 = *(_QWORD *)(v5 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (!v19(v17, 1, v5))
    (*(void (**)(char *, uint64_t))(v18 + 8))(v17, v5);
  v20 = (char *)(v11 + v7[10]);
  if (!v19(v20, 1, v5))
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v5);
  v21 = type metadata accessor for State(0, v16);
  swift_release(*(_QWORD *)&v20[*(int *)(v21 + 28)]);
  swift_release(*(_QWORD *)(v11 + v7[11]));
  v22 = (_QWORD *)(v11 + v7[12]);
  v23 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for UserInterfaceSizeClass(0);
    v25 = *(_QWORD *)(v24 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
      (*(void (**)(_QWORD *, uint64_t))(v25 + 8))(v22, v24);
  }
  else
  {
    swift_release(*v22);
  }
  v26 = (_QWORD *)(v11 + v7[13]);
  if (swift_getEnumCaseMultiPayload(v26, v23) == 1)
  {
    v27 = type metadata accessor for UserInterfaceSizeClass(0);
    v28 = *(_QWORD *)(v27 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      (*(void (**)(_QWORD *, uint64_t))(v28 + 8))(v26, v27);
  }
  else
  {
    swift_release(*v26);
  }
  return swift_deallocObject(v4, v10 + v30, v9 | 7);
}

uint64_t sub_1000BAD80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FeaturedVideosView(0, v6, v7, a2) - 8) + 80);
  return sub_1000B94EC(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

uint64_t sub_1000BADE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000B9F34(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000BADF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015D4A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BAE3C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t v14;
  uint64_t v15;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeConformance2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_1000034AC(&qword_100162F78);
  v4 = type metadata accessor for Array(255, v1);
  v6 = type metadata accessor for FeaturedVideoPlayer(255, v1, v2, v5);
  v7 = type metadata accessor for ModifiedContent(255, v6, &type metadata for _AspectRatioLayout);
  v8 = sub_1000034AC(&qword_10015E338);
  v9 = type metadata accessor for ModifiedContent(255, v7, v8);
  v10 = sub_1000034AC(&qword_10015DAA0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v9, v10, 0, 0);
  v12 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v12);
  v14 = type metadata accessor for VStack(255, v12, WitnessTable);
  v15 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v14);
  v46 = v14;
  v47 = v15;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v46, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  v17 = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  v18 = *(void **)(v2 + 8);
  v46 = v4;
  v47 = v1;
  v48 = OpaqueTypeMetadata2;
  v49 = (void *)v17;
  v50 = v18;
  v19 = type metadata accessor for ForEach(255, &v46);
  v46 = v14;
  v47 = v15;
  swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v19);
  v21 = type metadata accessor for LazyHStack(255, v19, v20);
  v22 = swift_getWitnessTable(&protocol conformance descriptor for LazyHStack<A>, v21);
  v46 = v21;
  v47 = v22;
  v23 = swift_getOpaqueTypeMetadata2(255, &v46, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v46 = v21;
  v47 = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v25 = type metadata accessor for ScrollView(255, v23, OpaqueTypeConformance2);
  v26 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v25);
  v46 = v25;
  v47 = v26;
  v27 = swift_getOpaqueTypeMetadata2(255, &v46, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v46 = v25;
  v47 = v26;
  v28 = swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v46 = v27;
  v47 = v28;
  v29 = swift_getOpaqueTypeMetadata2(255, &v46, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v30 = type metadata accessor for ViewAlignedScrollTargetBehavior(255);
  v46 = v27;
  v47 = v28;
  v31 = swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v46 = v29;
  v47 = v30;
  v48 = v31;
  v49 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v32 = swift_getOpaqueTypeMetadata2(255, &v46, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v46 = v29;
  v47 = v30;
  v48 = v31;
  v49 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v33 = swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v46 = v32;
  v47 = v1;
  v48 = v33;
  v49 = v18;
  v34 = swift_getOpaqueTypeMetadata2(255, &v46, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v35 = type metadata accessor for ModifiedContent(255, v34, &type metadata for _FlexFrameLayout);
  v36 = type metadata accessor for Optional(255, v1);
  v46 = v32;
  v47 = v1;
  v48 = v33;
  v49 = v18;
  swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v37 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v35);
  v38 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v36);
  v46 = v35;
  v47 = v36;
  v48 = v37;
  v49 = (void *)v38;
  v39 = swift_getOpaqueTypeMetadata2(255, &v46, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v40 = type metadata accessor for ModifiedContent(255, v39, &type metadata for _AppearanceActionModifier);
  v41 = swift_getTupleTypeMetadata2(255, v3, v40, 0, 0);
  v42 = type metadata accessor for TupleView(255, v41);
  v43 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v42);
  v44 = type metadata accessor for VStack(255, v42, v43);
  return swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v44);
}

uint64_t sub_1000BB25C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000021, 0x8000000100116F80);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 24) = v6 & 1;
  *(_QWORD *)(a2 + 32) = v7;
  return result;
}

uint64_t type metadata accessor for LineupViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LineupViewModel);
}

uint64_t sub_1000BB2B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[16];

  v16[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  v3 = v2;
  if (v4 <= 0x3F)
  {
    v16[1] = *(_QWORD *)(v2 - 8) + 64;
    v16[2] = &unk_100111F00;
    v16[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v16[4] = &unk_100111F00;
    v16[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v16[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v16[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v16[8] = &unk_100111F18;
    sub_1000BE018(319);
    if (v6 > 0x3F)
    {
      return v5;
    }
    else
    {
      v16[9] = *(_QWORD *)(v5 - 8) + 64;
      v16[10] = (char *)&value witness table for Builtin.Int64 + 64;
      v16[11] = (char *)&value witness table for Builtin.Int64 + 64;
      v16[12] = &unk_100111F30;
      v16[13] = (char *)&value witness table for Builtin.Int64 + 64;
      v7 = *(_QWORD *)(a1 + 88);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v3, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
      v10 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
      v11 = type metadata accessor for Optional(319, v10);
      v3 = v11;
      if (v12 <= 0x3F)
      {
        v16[14] = *(_QWORD *)(v11 - 8) + 64;
        v13 = type metadata accessor for ObservationRegistrar(319);
        v3 = v13;
        if (v14 <= 0x3F)
        {
          v16[15] = *(_QWORD *)(v13 - 8) + 64;
          return swift_initClassMetadata2(a1, 0, 16, v16, a1 + 96);
        }
      }
    }
  }
  return v3;
}

BOOL sub_1000BB45C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v13;

  v1 = *v0;
  v13 = sub_1000BB688();
  v4 = v1 + 80;
  v3 = *(_QWORD *)(v1 + 80);
  v2 = *(_QWORD *)(v4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
  v7 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v8 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v7, &unk_10011A038, &unk_10011A048);
  v9 = swift_getAssociatedTypeWitness(255, v8);
  v10 = type metadata accessor for Array(0, v9);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  LOBYTE(AssociatedConformanceWitness) = Collection.isEmpty.getter(v10, WitnessTable);
  swift_bridgeObjectRelease(v13);
  return (AssociatedConformanceWitness & 1) == 0;
}

uint64_t sub_1000BB590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v1);
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v6 = (char *)&v10 - v5;
  (*(void (**)(uint64_t, uint64_t))(v1 + 64))(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DF4);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 152))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
  return v8;
}

uint64_t sub_1000BB688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t WitnessTable;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2);
  v4 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v24 = *(_QWORD *)(v4 - 8);
  v25 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
  v26 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v8 = type metadata accessor for Optional(0, v26);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - v10;
  (*(void (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v6, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v25);
    v13 = v26;
  }
  else
  {
    v14 = v8;
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 88))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v6, AssociatedTypeWitness);
    v13 = v26;
    if (v15)
    {
      v27 = v15;
      v16 = type metadata accessor for Array(0, v26);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v16);
      Collection.first.getter(v16, WitnessTable);
      swift_bridgeObjectRelease(v15);
      v18 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v11, 1, v13) != 1)
      {
        v23 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v13, &unk_10011A038, &unk_10011A048);
        v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 40))(v13, v23);
        (*(void (**)(char *, uint64_t))(v18 + 8))(v11, v13);
        return v21;
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v14);
    }
  }
  v19 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v13, &unk_10011A038, &unk_10011A048);
  v20 = swift_getAssociatedTypeWitness(0, v19);
  return static Array._allocateUninitialized(_:)(0, v20);
}

uint64_t sub_1000BB944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DF4);
  v5 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v6 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v5, &unk_1001191E8, &unk_100119208);
  v7 = swift_getAssociatedTypeWitness(255, v6);
  v8 = type metadata accessor for Optional(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v16 - v10;
  sub_1000BD96C((uint64_t)&v16 - v10);
  v12 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return 0;
  }
  else
  {
    v14 = swift_getAssociatedConformanceWitness(v6, v5, v7, &unk_1001199D4, &unk_1001199DC);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 48))(v7, v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v7);
  }
  return v13;
}

double sub_1000BBB04()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100112070);
  sub_1000BD3D0(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 144));
}

uint64_t sub_1000BBB5C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;

  v0 = sub_100003E70(&qword_10015D4A0);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UserInterfaceSizeClass(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v13 - v8;
  sub_1000BD594();
  sub_1000BD5EC();
  sub_1000BD64C((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
    return sub_100008194((uint64_t)v2, &qword_10015D4A0);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for UserInterfaceSizeClass.compact(_:), v3);
  v11 = sub_100003B3C((unint64_t *)&qword_10015E0D0, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  dispatch thunk of static Equatable.== infix(_:_:)(v9, v7, v3, v11);
  v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v7, v3);
  return ((uint64_t (*)(char *, uint64_t))v12)(v9, v3);
}

uint64_t sub_1000BBD18()
{
  uint64_t v0;
  char v1;
  char v2;

  if (sub_1000BB45C() || (sub_1000BCCA0() & 1) != 0)
  {
    v1 = 1;
    if (sub_1000BBEE0())
      goto LABEL_8;
  }
  else
  {
    v1 = sub_1000BCE4C();
    if (sub_1000BBEE0())
    {
LABEL_8:
      v2 = 0;
      return v2 & 1;
    }
  }
  if ((v1 & 1) == 0)
    goto LABEL_8;
  v2 = *(_BYTE *)(*(_QWORD *)(v0 + 16) + 113) ^ 1;
  return v2 & 1;
}

uint64_t sub_1000BBD7C()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100112248);
  sub_1000BD3D0(KeyPath);
  swift_release(KeyPath);
  return *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 192));
}

double sub_1000BBDDC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;

  v11 = *(_OWORD *)(*(_QWORD *)v2 + 80);
  KeyPath = swift_getKeyPath(&unk_100112248);
  v8 = v2;
  v9 = a1;
  v10 = a2 & 1;
  sub_1000BD42C(KeyPath, (uint64_t)sub_1000BE7AC, (uint64_t)&v7, (uint64_t)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_1000BBE60()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100112210);
  sub_1000BD3D0(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 200));
}

void sub_1000BBEB8(double a1)
{
  sub_1000BD518((uint64_t)&unk_100112210, (uint64_t)sub_1000BE774, a1);
}

void sub_1000BBECC(double a1)
{
  sub_1000BD518((uint64_t)&unk_100112188, (uint64_t)sub_1000BE634, a1);
}

BOOL sub_1000BBEE0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v11;

  v1 = *v0;
  v11 = sub_1000BBFCC();
  v4 = v1 + 80;
  v3 = *(_QWORD *)(v1 + 80);
  v2 = *(_QWORD *)(v4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
  v7 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v8 = type metadata accessor for Array(0, v7);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  LOBYTE(v2) = Collection.isEmpty.getter(v8, WitnessTable);
  swift_bridgeObjectRelease(v11);
  return (v2 & 1) == 0;
}

uint64_t sub_1000BBFCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1);
  v4 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - v6;
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
LABEL_4:
    v11 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness);
    v10 = static Array._allocateUninitialized(_:)(0, v11);
    swift_bridgeObjectRelease(0);
    return v10;
  }
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 96))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, AssociatedTypeWitness);
  if (!v10)
    goto LABEL_4;
  return v10;
}

BOOL sub_1000BC164()
{
  double v0;
  double v1;

  v0 = -sub_1000BD378();
  v1 = sub_1000BD7C4();
  return v1 + sub_1000BD81C() <= v0;
}

uint64_t sub_1000BC19C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  KeyPath = swift_getKeyPath(&unk_100112150);
  sub_1000BD3D0(KeyPath);
  swift_release(KeyPath);
  v6 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 208);
  swift_beginAccess(v6, v12, 0, 0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v3, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
  v9 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v10 = type metadata accessor for Optional(0, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, v6, v10);
}

void sub_1000BC2A4(double a1)
{
  sub_1000BD518((uint64_t)&unk_100112118, (uint64_t)sub_1000BE4F8, a1);
}

BOOL sub_1000BC2B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  sub_1000BC3A8((uint64_t)&v9);
  if (v10)
  {
    sub_100011A9C(&v9, (uint64_t)v11);
    v0 = v12;
    v1 = v13;
    sub_100008170(v11, v12);
    v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 48))(v0, v1);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v1);
    v4 = sub_100003E70(&qword_10015D970);
    v5 = _arrayForceCast<A, B>(_:)(v2, AssociatedTypeWitness, v4);
    swift_bridgeObjectRelease(v2);
    v6 = *(_QWORD *)(v5 + 16);
    swift_bridgeObjectRelease(v5);
    v7 = v6 != 0;
    sub_1000055A8(v11);
  }
  else
  {
    sub_100008194((uint64_t)&v9, &qword_10015F138);
    return 0;
  }
  return v7;
}

uint64_t sub_1000BC3A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];

  v3 = *(_QWORD *)(v1 + 16);
  KeyPath = swift_getKeyPath(&unk_1001121C0);
  v7[0] = v3;
  v5 = sub_100003B3C(&qword_10015F150, type metadata accessor for SetlistController, (uint64_t)&unk_10010CD38);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 72, v7, 0, 0);
  return sub_100007ADC(v3 + 72, a1, &qword_10015F138);
}

uint64_t sub_1000BC458()
{
  int v0;

  if (sub_1000BB45C() || sub_1000BBEE0() || (sub_1000BCCA0() & 1) != 0)
    v0 = 0;
  else
    v0 = sub_1000BCE4C() ^ 1;
  return sub_1000BC2B8() & v0 & 1;
}

uint64_t sub_1000BC4A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;

  v1 = v0;
  sub_1000A3BEC();
  if (v2)
  {
    v3 = v2;
    if (*(_QWORD *)(v2 + 16))
    {
      v4 = sub_100090600(2);
      if ((v5 & 1) != 0)
      {
        v6 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 56) + v4);
        swift_bridgeObjectRelease(v3);
        __asm { BR              X9 }
      }
    }
    swift_bridgeObjectRelease(v3);
  }
  return *(unsigned __int8 *)(*(_QWORD *)(v1 + 16) + 113);
}

void sub_1000BC54C()
{
  JUMPOUT(0x1000BC560);
}

void sub_1000BC594()
{
  swift_bridgeObjectRelease(0xE600000000000000);
  JUMPOUT(0x1000BC53CLL);
}

uint64_t sub_1000BC5A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  KeyPath = swift_getKeyPath(&unk_1001121E8);
  v5 = v1;
  v3 = sub_100003B3C(&qword_10015F150, type metadata accessor for SetlistController, (uint64_t)&unk_10010CD38);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v3);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v1 + 112);
}

uint64_t sub_1000BC628()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[2] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[3] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[4] = v3;
  v1[5] = v4;
  return swift_task_switch(sub_1000BC694, v3, v4);
}

uint64_t sub_1000BC694()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10015F144);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_1000BC6E0;
  return sub_1000441E4();
}

uint64_t sub_1000BC6E0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  return swift_task_switch(sub_100006DD8, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000BC72C()
{
  int v0;
  _BOOL4 v1;

  if ((sub_1000BCCA0() & 1) != 0)
  {
    v0 = sub_1000BCE4C();
    if (sub_1000BB45C())
      goto LABEL_6;
  }
  else
  {
    v0 = 0;
    if (sub_1000BB45C())
      goto LABEL_6;
  }
  if (!sub_1000BBEE0())
  {
    v1 = sub_1000BC2B8();
    return v0 & v1 & 1;
  }
LABEL_6:
  v1 = 1;
  return v0 & v1 & 1;
}

uint64_t sub_1000BC788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1);
  v4 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - v6;
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
LABEL_4:
    v11 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness);
    v10 = static Array._allocateUninitialized(_:)(0, v11);
    swift_bridgeObjectRelease(0);
    return v10;
  }
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, AssociatedTypeWitness);
  if (!v10)
    goto LABEL_4;
  return v10;
}

uint64_t sub_1000BC920()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;

  v0 = sub_100003E70(&qword_10015D4A0);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UserInterfaceSizeClass(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v13 - v8;
  sub_1000BD594();
  sub_1000BD5EC();
  sub_1000BD5EC();
  sub_1000BD64C((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
    return sub_100008194((uint64_t)v2, &qword_10015D4A0);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for UserInterfaceSizeClass.compact(_:), v3);
  v11 = sub_100003B3C((unint64_t *)&qword_10015E0D0, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  dispatch thunk of static Equatable.== infix(_:_:)(v9, v7, v3, v11);
  v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v7, v3);
  return ((uint64_t (*)(char *, uint64_t))v12)(v9, v3);
}

BOOL sub_1000BCAEC()
{
  return (sub_1000BC72C() & 1) == 0;
}

uint64_t sub_1000BCB08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1);
  v4 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - v6;
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
LABEL_4:
    v11 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness);
    v10 = static Array._allocateUninitialized(_:)(0, v11);
    swift_bridgeObjectRelease(0);
    return v10;
  }
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 80))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, AssociatedTypeWitness);
  if (!v10)
    goto LABEL_4;
  return v10;
}

uint64_t sub_1000BCCA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;
  char v14;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1);
  v4 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v16 - v6;
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
LABEL_5:
    v14 = 0;
    return v14 & 1;
  }
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, AssociatedTypeWitness);
  if (!v10)
    goto LABEL_5;
  v16[1] = v10;
  v11 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v12 = type metadata accessor for Array(0, v11);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v12);
  LOBYTE(v12) = Collection.isEmpty.getter(v12, WitnessTable);
  swift_bridgeObjectRelease(v10);
  v14 = v12 ^ 1;
  return v14 & 1;
}

uint64_t sub_1000BCE4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;
  char v14;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1);
  v4 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v16 - v6;
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
LABEL_5:
    v14 = 0;
    return v14 & 1;
  }
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 80))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, AssociatedTypeWitness);
  if (!v10)
    goto LABEL_5;
  v16[1] = v10;
  v11 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v12 = type metadata accessor for Array(0, v11);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v12);
  LOBYTE(v12) = Collection.isEmpty.getter(v12, WitnessTable);
  swift_bridgeObjectRelease(v10);
  v14 = v12 ^ 1;
  return v14 & 1;
}

uint64_t sub_1000BCFF8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 88) + 64))(*(_QWORD *)(*(_QWORD *)v0 + 80));
}

double sub_1000BD028()
{
  return sub_1000BD1D4(1);
}

void sub_1000BD030(double a1)
{
  sub_1000BD518((uint64_t)&unk_100112070, (uint64_t)sub_1000BE354, a1);
}

void sub_1000BD044(double a1)
{
  sub_1000BD518((uint64_t)&unk_100112038, (uint64_t)sub_1000BE2C8, a1);
}

uint64_t sub_1000BD058(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v8 = *(_OWORD *)(*(_QWORD *)v1 + 80);
  KeyPath = swift_getKeyPath(&unk_100112000);
  v6 = v1;
  v7 = a1;
  sub_1000BD42C(KeyPath, (uint64_t)sub_1000BE1F4, (uint64_t)&v5, (uint64_t)&type metadata for () + 8);
  swift_release(KeyPath);
  return sub_100008194(a1, &qword_10015D4A0);
}

void sub_1000BD0E0(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  __int128 v16;

  v16 = *(_OWORD *)(*(_QWORD *)v4 + 80);
  KeyPath = swift_getKeyPath(&unk_100111FC8);
  v11 = v4;
  v12 = a1;
  v13 = a2;
  v14 = a3;
  v15 = a4;
  sub_1000BD42C(KeyPath, (uint64_t)sub_1000BE198, (uint64_t)&v10, (uint64_t)&type metadata for () + 8);
  swift_release(KeyPath);
}

uint64_t sub_1000BD17C()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100111F90);
  sub_1000BD3D0(KeyPath);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
}

double sub_1000BD1D4(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  double result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  v8 = *(_OWORD *)(*(_QWORD *)v1 + 80);
  KeyPath = swift_getKeyPath(&unk_100111F90);
  v6 = v1;
  v7 = a1;
  sub_1000BD42C(KeyPath, (uint64_t)sub_1000BE114, (uint64_t)&v5, (uint64_t)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_1000BD250()
{
  return sub_1000BD1D4(0);
}

double sub_1000BD258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = sub_100003E70(&qword_100161700);
  __chkstk_darwin(v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(*(_QWORD *)(v0 + 16) + 113) & 1) != 0 || sub_1000BBEE0())
  {
    v5 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 1, 1, v5);
    v6 = type metadata accessor for MainActor(0);
    v7 = static MainActor.shared.getter(v6);
    v8 = swift_allocObject(&unk_100152C30, 32, 7);
    *(_QWORD *)(v8 + 16) = v7;
    *(_QWORD *)(v8 + 24) = &protocol witness table for MainActor;
    v9 = sub_1000F7C84((uint64_t)v3, (uint64_t)&unk_1001630B0, v8);
    *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  }
  return result;
}

void sub_1000BD330(double a1)
{
  sub_1000BD518((uint64_t)&unk_1001120E0, (uint64_t)sub_1000BE46C, a1);
}

BOOL sub_1000BD344()
{
  double v0;

  v0 = -sub_1000BD378();
  return sub_1000BD4C0() * 0.75 < v0;
}

double sub_1000BD378()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_1001120E0);
  sub_1000BD3D0(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
}

uint64_t sub_1000BD3D0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t WitnessTable;
  uint64_t v5;

  WitnessTable = swift_getWitnessTable(&unk_100111F70, *v1);
  return ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, a1, WitnessTable);
}

uint64_t sub_1000BD42C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t WitnessTable;
  uint64_t v11;

  WitnessTable = swift_getWitnessTable(&unk_100111F70, *v4);
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, a1, a2, a3, a4, WitnessTable);
}

double sub_1000BD4C0()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_1001120A8);
  sub_1000BD3D0(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136));
}

void sub_1000BD518(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  double v9;
  __int128 v10;

  v10 = *(_OWORD *)(*(_QWORD *)v3 + 80);
  KeyPath = swift_getKeyPath(a1);
  v8 = v3;
  v9 = a3;
  sub_1000BD42C(KeyPath, a2, (uint64_t)&v7, (uint64_t)&type metadata for () + 8);
  swift_release(KeyPath);
}

double sub_1000BD594()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100112038);
  sub_1000BD3D0(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
}

double sub_1000BD5EC()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100111FC8);
  sub_1000BD3D0(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 160));
}

uint64_t sub_1000BD64C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  _BYTE v6[24];

  KeyPath = swift_getKeyPath(&unk_100112000);
  sub_1000BD3D0(KeyPath);
  swift_release(KeyPath);
  v4 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 168);
  swift_beginAccess(v4, v6, 0, 0);
  return sub_100007ADC(v4, a1, &qword_10015D4A0);
}

uint64_t sub_1000BD6D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100003E70(&qword_10015D4A0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007ADC(a1, (uint64_t)v4, &qword_10015D4A0);
  return sub_1000BD058((uint64_t)v4);
}

uint64_t sub_1000BD75C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 168);
  swift_beginAccess(v3, v5, 33, 0);
  sub_1000BE20C(a2, v3);
  return swift_endAccess(v5);
}

double sub_1000BD7C4()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100112188);
  sub_1000BD3D0(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 176));
}

double sub_1000BD81C()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100112118);
  sub_1000BD3D0(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 184));
}

uint64_t sub_1000BD874(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  v3 = *a1;
  v4 = (uint64_t)a1 + *(_QWORD *)(*a1 + 208);
  swift_beginAccess(v4, v13, 33, 0);
  v7 = v3 + 80;
  v6 = *(_QWORD *)(v3 + 80);
  v5 = *(_QWORD *)(v7 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v6, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
  v10 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v11 = type metadata accessor for Optional(0, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v4, a2, v11);
  return swift_endAccess(v13);
}

uint64_t sub_1000BD96C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DF4);
  v6 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness);
  v21 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - v7;
  v9 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - v11;
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(v3, v2);
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 208))(v9, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v13 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, v9, v6, &unk_1001191E8, &unk_100119208);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 40))(v6, v13);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  v23 = v14;
  v15 = swift_getAssociatedTypeWitness(255, v13);
  v16 = swift_getAssociatedConformanceWitness(v13, v6, v15, &unk_1001199D4, &unk_1001199DC);
  v17 = type metadata accessor for Set(0, v15, *(_QWORD *)(v16 + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v17);
  Collection.first.getter(v17, WitnessTable);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_1000BDBA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 24) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000BDC40, v2, v3);
}

uint64_t sub_1000BDC40()
{
  uint64_t v0;
  id v1;
  unsigned int v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;

  swift_release(*(_QWORD *)(v0 + 24));
  v1 = objc_msgSend((id)objc_opt_self(AVAudioSession), "sharedInstance");
  *(_QWORD *)(v0 + 16) = 0;
  v2 = objc_msgSend(v1, "setCategory:withOptions:error:", AVAudioSessionCategoryPlayback, 1, v0 + 16);

  v3 = *(void **)(v0 + 16);
  if (v2)
  {
    v4 = v3;
  }
  else
  {
    v5 = v3;
    v6 = _convertNSErrorToError(_:)(v3);

    swift_willThrow(v7);
    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v8 = type metadata accessor for Logger(0);
    sub_100011AC4(v8, (uint64_t)qword_10016F728);
    swift_errorRetain(v6);
    v9 = swift_errorRetain(v6);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v12 = 138412290;
      swift_errorRetain(v6);
      v13 = _swift_stdlib_bridgeErrorToNSError(v6);
      *(_QWORD *)(v0 + 16) = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v12 + 4, v12 + 12);
      *v16 = v13;
      swift_errorRelease(v6);
      swift_errorRelease(v6);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Received error setting playback category %@", v12, 0xCu);
      v14 = sub_100003E70(&qword_10015FB58);
      swift_arrayDestroy(v16, 1, v14);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      swift_errorRelease(v6);
    }
    else
    {
      swift_errorRelease(v6);
      swift_errorRelease(v6);
      swift_errorRelease(v6);

    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

char *sub_1000BDEBC()
{
  char *v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v1 = *(_QWORD *)v0;
  v2 = swift_release(*((_QWORD *)v0 + 2));
  v3 = *(_QWORD *)(v1 + 80);
  (*(void (**)(char *, uint64_t, __n128))(*(_QWORD *)(v3 - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 104)], v3, v2);
  sub_100008194((uint64_t)&v0[*(_QWORD *)(*(_QWORD *)v0 + 168)], &qword_10015D4A0);
  v4 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 208)];
  v5 = *(_QWORD *)(v1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v3, AssociatedTypeWitness, &unk_100119DEC, &unk_100119DFC);
  v8 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v9 = type metadata accessor for Optional(0, v8);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v4, v9);
  v10 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 216)];
  v11 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  return v0;
}

uint64_t sub_1000BDFE8()
{
  uint64_t v0;

  sub_1000BDEBC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for PromotionalAssetsViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PromotionalAssetsViewModel);
}

void sub_1000BE018(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001630A0)
  {
    v2 = type metadata accessor for UserInterfaceSizeClass(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, &qword_1001630A0);
  }
}

uint64_t sub_1000BE06C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BE090()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1001630AC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000072F4;
  return sub_1000BDBA4();
}

uint64_t sub_1000BE0FC()
{
  return 16;
}

__n128 sub_1000BE108(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1000BE114()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 128)) = *(_BYTE *)(v0 + 24);
}

void sub_1000BE12C(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = sub_1000BD5EC();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

void sub_1000BE158(double *a1)
{
  sub_1000BD0E0(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1000BE180()
{
  return 16;
}

__n128 sub_1000BE18C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_1000BE198()
{
  uint64_t v0;
  uint64_t v1;
  __n128 result;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 160);
  result = *(__n128 *)(v0 + 24);
  v3 = *(_OWORD *)(v0 + 40);
  *(__n128 *)v1 = result;
  *(_OWORD *)(v1 + 16) = v3;
  return result;
}

uint64_t sub_1000BE1B8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BD64C(a1);
}

uint64_t sub_1000BE1DC()
{
  return 16;
}

__n128 sub_1000BE1E8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000BE1F4()
{
  uint64_t v0;

  return sub_1000BD75C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000BE20C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015D4A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_1000BE254(double *a1@<X8>)
{
  *a1 = sub_1000BD594();
}

void sub_1000BE27C(double *a1)
{
  sub_1000BD518((uint64_t)&unk_100112038, (uint64_t)sub_1000BE2C8, *a1);
}

uint64_t sub_1000BE2B0()
{
  return 16;
}

__n128 sub_1000BE2BC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000BE2C8()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 152)) = result;
  return result;
}

void sub_1000BE2E0(double *a1@<X8>)
{
  *a1 = sub_1000BBB04();
}

void sub_1000BE308(double *a1)
{
  sub_1000BD518((uint64_t)&unk_100112070, (uint64_t)sub_1000BE354, *a1);
}

uint64_t sub_1000BE33C()
{
  return 16;
}

__n128 sub_1000BE348(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000BE354()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 144)) = result;
  return result;
}

void sub_1000BE36C(double *a1@<X8>)
{
  *a1 = sub_1000BD4C0();
}

void sub_1000BE394(double *a1)
{
  sub_1000BD518((uint64_t)&unk_1001120A8, (uint64_t)sub_1000BE3E0, *a1);
}

uint64_t sub_1000BE3C8()
{
  return 16;
}

__n128 sub_1000BE3D4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000BE3E0()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 136)) = result;
  return result;
}

void sub_1000BE3F8(double *a1@<X8>)
{
  *a1 = sub_1000BD378();
}

void sub_1000BE420(double *a1)
{
  sub_1000BD518((uint64_t)&unk_1001120E0, (uint64_t)sub_1000BE46C, *a1);
}

uint64_t sub_1000BE454()
{
  return 16;
}

__n128 sub_1000BE460(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000BE46C()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 120)) = result;
  return result;
}

void sub_1000BE484(double *a1@<X8>)
{
  *a1 = sub_1000BD81C();
}

void sub_1000BE4AC(double *a1)
{
  sub_1000BD518((uint64_t)&unk_100112118, (uint64_t)sub_1000BE4F8, *a1);
}

uint64_t sub_1000BE4E0()
{
  return 16;
}

__n128 sub_1000BE4EC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000BE4F8()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 184)) = result;
  return result;
}

double sub_1000BE510(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v8 = *(_OWORD *)(*(_QWORD *)v1 + 80);
  KeyPath = swift_getKeyPath(&unk_100112150);
  v6 = v1;
  v7 = a1;
  sub_1000BD42C(KeyPath, (uint64_t)sub_1000BE5A8, (uint64_t)&v5, (uint64_t)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_1000BE590()
{
  return 16;
}

__n128 sub_1000BE59C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000BE5A8()
{
  uint64_t v0;

  return sub_1000BD874(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000BE5C0(double *a1@<X8>)
{
  *a1 = sub_1000BD7C4();
}

void sub_1000BE5E8(double *a1)
{
  sub_1000BD518((uint64_t)&unk_100112188, (uint64_t)sub_1000BE634, *a1);
}

uint64_t sub_1000BE61C()
{
  return 16;
}

__n128 sub_1000BE628(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000BE634()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 176)) = result;
  return result;
}

uint64_t sub_1000BE65C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *i;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  swift_bridgeObjectRetain_n(*(_QWORD *)(a1 + 40), 2);
  for (i = (_QWORD *)(v1 + 48); ; i += 3)
  {
    v5 = *(i - 1);
    v4 = *i;
    if (*((_BYTE *)i - 16) == 1)
    {
      swift_bridgeObjectRetain(*i);
      swift_bridgeObjectRelease_n(v1, 2);
      swift_bridgeObjectRelease(0xE500000000000000);
      return v5;
    }
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7972746E756F63, 0xE700000000000000, 0x6449707061, 0xE500000000000000, 0);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRelease(0xE700000000000000);
    if ((v6 & 1) != 0)
      break;
    swift_bridgeObjectRelease(v4);
    if (!--v2)
    {
      swift_bridgeObjectRelease_n(v1, 2);
      return 0;
    }
  }
  swift_bridgeObjectRelease_n(v1, 2);
  return v5;
}

uint64_t sub_1000BE75C()
{
  return 16;
}

__n128 sub_1000BE768(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000BE774()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 200)) = result;
  return result;
}

uint64_t sub_1000BE794()
{
  return 16;
}

__n128 sub_1000BE7A0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1000BE7AC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 192);
  *(_QWORD *)v2 = *(_QWORD *)(v0 + 24);
  *(_BYTE *)(v2 + 8) = v1;
}

uint64_t *sub_1000BE7CC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[2];
    a1[2] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Artwork(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v13 + 48);
    swift_bridgeObjectRetain(v7);
    v15 = swift_bridgeObjectRetain(v8);
    if (v14(v11, 1, v12, v15))
    {
      v16 = sub_100003E70(&qword_10015F8D0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v18 = a3[7];
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for URL(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_100003E70(&qword_100165370);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    v24 = a3[8];
    v25 = (uint64_t *)((char *)v4 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    swift_bridgeObjectRetain(v27);
  }
  return v4;
}

uint64_t sub_1000BE980(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for Artwork(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = a1 + a2[7];
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
}

_QWORD *sub_1000BEA4C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[2];
  a1[2] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Artwork(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
  swift_bridgeObjectRetain(v6);
  v14 = swift_bridgeObjectRetain(v7);
  if (v13(v10, 1, v11, v14))
  {
    v15 = sub_100003E70(&qword_10015F8D0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = sub_100003E70(&qword_100165370);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v22 = a3[8];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  return a1;
}

_QWORD *sub_1000BEBD4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;

  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = a2[2];
  a1[2] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Artwork(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_100003E70(&qword_10015F8D0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  v17 = a3[7];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v18, v19, v20);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    v25 = sub_100003E70(&qword_100165370);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
LABEL_13:
  v26 = a3[8];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  *v27 = *v28;
  v29 = v28[1];
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000BEE10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Artwork(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100003E70(&qword_10015F8D0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_100003E70(&qword_100165370);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  return a1;
}

_QWORD *sub_1000BEF74(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Artwork(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_100003E70(&qword_10015F8D0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    v24 = sub_100003E70(&qword_100165370);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_13:
  v25 = a3[8];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000BF188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BF194);
}

uint64_t sub_1000BF194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003E70(&qword_10015F8D0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_100003E70(&qword_100165370);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1000BF23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BF248);
}

uint64_t sub_1000BF248(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = sub_100003E70(&qword_10015F8D0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_100003E70(&qword_100165370);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for AppleMusicSetlist(uint64_t a1)
{
  uint64_t result;

  result = qword_100163118;
  if (!qword_100163118)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppleMusicSetlist);
  return result;
}

void sub_1000BF328(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_100112298;
  v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100053FE8(319, (unint64_t *)&unk_10015F940, (uint64_t (*)(uint64_t))&type metadata accessor for Artwork);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_100053FE8(319, (unint64_t *)&qword_10015F830, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_100112298;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

uint64_t sub_1000BF3E4()
{
  return sub_100003B3C(&qword_10015F838, (uint64_t (*)(uint64_t))&type metadata accessor for Artwork, (uint64_t)&unk_10010DBEC);
}

uint64_t sub_1000BF410()
{
  return sub_100003B3C(&qword_10015F9D8, (uint64_t (*)(uint64_t))&type metadata accessor for Song, (uint64_t)&unk_10010DBD0);
}

uint64_t sub_1000BF43C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000BF444@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100007ADC(v2 + *(int *)(a1 + 24), a2, &qword_10015F8D0);
}

uint64_t sub_1000BF46C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100007ADC(v2 + *(int *)(a1 + 28), a2, &qword_100165370);
}

uint64_t sub_1000BF494(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 32));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_1000BF4C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (**v35)(double *@<X8>, double@<D2>, double@<D3>);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (**v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v52;
  void (*v53)(uint64_t, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t, __n128);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v3 = v2;
  v72 = a2;
  v68 = type metadata accessor for CoordinateSpace(0);
  v62 = *(_QWORD *)(v68 - 8);
  v5 = __chkstk_darwin(v68);
  v65 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v5);
  v9 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v9);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003E70(&qword_100163230);
  v63 = *(_QWORD *)(v12 - 8);
  v64 = v12;
  __chkstk_darwin(v12);
  v60 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100003E70(&qword_100163238);
  __chkstk_darwin(v61);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100003E70(&qword_100163240);
  __chkstk_darwin(v66);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100003E70(&qword_100163248);
  __chkstk_darwin(v70);
  v67 = (uint64_t)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100003E70(&qword_100163250);
  __chkstk_darwin(v71);
  v69 = (uint64_t)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = v2;
  v20 = *(_QWORD *)(v2 + 8);
  swift_retain(v20);
  sub_10009A43C((uint64_t)v11);
  v21 = swift_release(v20);
  v59 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
  v52 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59(v52, v3, a1, v21);
  v22 = *(unsigned __int8 *)(v7 + 80);
  v23 = (v22 + 32) & ~v22;
  v56 = v22 | 7;
  v57 = v23 + v8;
  v24 = swift_allocObject(&unk_100152CF8, v23 + v8, v22 | 7);
  v25 = *(_QWORD *)(a1 + 24);
  v54 = *(_QWORD *)(a1 + 16);
  v55 = v25;
  *(_QWORD *)(v24 + 16) = v54;
  *(_QWORD *)(v24 + 24) = v25;
  v53 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v53(v24 + v23, (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v26 = sub_100003E70(&qword_100163258);
  v27 = sub_1000C1364();
  v28 = 1.0;
  v29 = v60;
  AsyncImage.init(url:scale:transaction:content:)(v11, 0, sub_1000C12FC, v24, v26, v27, 1.0);
  v30 = v62;
  v31 = v65;
  v32 = v68;
  (*(void (**)(char *, _QWORD, uint64_t))(v62 + 104))(v65, enum case for CoordinateSpace.local(_:), v68);
  v33 = &v15[*(int *)(v61 + 36)];
  v34 = sub_100003E70(&qword_100163350);
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(&v33[*(int *)(v34 + 36)], v31, v32);
  *(_QWORD *)v33 = &type metadata for HeroImageHeightPreferenceKey;
  v35 = (void (**)(double *@<X8>, double@<D2>, double@<D3>))&v33[*(int *)(v34 + 40)];
  *v35 = sub_10005C0B8;
  v35[1] = 0;
  v37 = v63;
  v36 = v64;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v15, v29, v64);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v32);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v36);
  v38 = v52;
  v39 = v58;
  ((void (*)(char *, uint64_t, uint64_t))v59)(v52, v58, a1);
  v40 = swift_allocObject(&unk_100152D20, v57, v56);
  v41 = v55;
  *(_QWORD *)(v40 + 16) = v54;
  *(_QWORD *)(v40 + 24) = v41;
  v53(v40 + v23, v38, a1);
  sub_100007ADC((uint64_t)v15, (uint64_t)v17, &qword_100163238);
  v42 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))&v17[*(int *)(v66 + 36)];
  *v42 = sub_1000C1934;
  v42[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v40;
  sub_100008194((uint64_t)v15, &qword_100163238);
  v43 = *(_QWORD *)(v39 + 8);
  swift_retain(v43);
  LOBYTE(v40) = sub_10009A74C();
  swift_release(v43);
  if ((v40 & 1) == 0)
    v28 = 0.0;
  v44 = v67;
  sub_100007ADC((uint64_t)v17, v67, &qword_100163240);
  *(double *)(v44 + *(int *)(v70 + 36)) = v28;
  v45 = sub_100008194((uint64_t)v17, &qword_100163240);
  v46 = static Edge.Set.bottom.getter(v45);
  v48 = static SafeAreaRegions.all.getter(v47);
  v49 = v69;
  sub_100007ADC(v44, v69, &qword_100163248);
  v50 = v49 + *(int *)(v71 + 36);
  *(_QWORD *)v50 = v48;
  *(_BYTE *)(v50 + 8) = v46;
  sub_100008194(v44, &qword_100163248);
  return sub_100007A98(v49, v72, &qword_100163250);
}

void *sub_1000BF9D4@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  __n128 v24;
  uint64_t v25;
  int v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  id v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  id v91;
  __n128 v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _BYTE *v101;
  char v102;
  void (*v103)(unint64_t, _QWORD *, uint64_t);
  uint64_t v104;
  unint64_t v105;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _BYTE v111[4];
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(unint64_t, _QWORD *, uint64_t);
  int v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  __n128 v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  _BYTE v129[556];
  _BYTE v130[7];
  _BYTE v131[11];
  __int16 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _OWORD v139[2];
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  _OWORD v145[20];
  _OWORD v146[9];
  _OWORD v147[32];
  _QWORD v148[69];
  _QWORD v149[69];
  _BYTE v150[552];
  _QWORD v151[69];
  uint64_t v152;
  __n128 v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  _QWORD v169[71];

  v127 = a4;
  v128 = a5;
  v126 = a3;
  v7 = type metadata accessor for HeroImage(0, a3, a4, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v124 = v7;
  v125 = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v123 = &v111[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v122.n128_u64[0] = (unint64_t)&v111[-v11];
  v12 = type metadata accessor for Image.ResizingMode(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = &v111[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for AsyncImagePhase(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = &v111[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_QWORD *, unint64_t, uint64_t))(v17 + 16))(v19, a1, v16);
  v20 = (*(uint64_t (**)(_QWORD *, uint64_t))(v17 + 88))(v19, v16);
  if (v20 != enum case for AsyncImagePhase.success(_:))
  {
    if (v20 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v17 + 96))(v19, v16);
      swift_errorRelease(*v19);
      v89 = v128;
    }
    else
    {
      v89 = v128;
      if (v20 != enum case for AsyncImagePhase.empty(_:))
      {
        sub_1000C19A8((uint64_t)v150);
        sub_100007A98((uint64_t)v150, (uint64_t)v169, &qword_100163360);
        v104 = sub_100003E70(&qword_100163270);
        v105 = sub_1000C13D0();
        _ConditionalContent<>.init(storage:)(v169, v104, &type metadata for EmptyView, v105, &protocol witness table for EmptyView);
        (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
        v101 = v151;
        goto LABEL_16;
      }
    }
    v90 = a2[1];
    swift_retain(v90);
    v91 = sub_10009A580();
    v92 = swift_release(v90);
    v93 = Color.init(_:)(v91, v92);
    v94 = static Edge.Set.all.getter(v93);
    v149[0] = v93;
    LOBYTE(v149[1]) = v94;
    sub_1000C19B4((uint64_t)v149);
    sub_100007A98((uint64_t)v149, (uint64_t)v169, &qword_100163368);
    swift_retain(v93);
    v95 = sub_100003E70(&qword_100163280);
    v96 = sub_100003E70(&qword_100163340);
    v97 = sub_1000C143C();
    v98 = sub_1000C1868();
    _ConditionalContent<>.init(storage:)(v169, v95, v96, v97, v98);
    memcpy(v151, v148, 0x221uLL);
    sub_1000C19C0((uint64_t)v151);
    sub_100007A98((uint64_t)v151, (uint64_t)v169, &qword_100163360);
    v99 = sub_100003E70(&qword_100163270);
    v100 = sub_1000C13D0();
    _ConditionalContent<>.init(storage:)(v169, v99, &type metadata for EmptyView, v100, &protocol witness table for EmptyView);
    swift_release(v93);
    v101 = v150;
LABEL_16:
    memcpy(v169, v101, 0x222uLL);
    return memcpy(v89, v169, 0x222uLL);
  }
  (*(void (**)(_QWORD *, uint64_t))(v17 + 96))(v19, v16);
  v21 = *v19;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for Image.ResizingMode.stretch(_:), v12);
  v119 = Image.resizable(capInsets:resizingMode:)(v15, v21, 0.0, 0.0, 0.0, 0.0);
  (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
  v22 = a2[1];
  swift_retain(v22);
  v23 = sub_10009A6B8();
  v24 = swift_release(v22);
  v25 = *(_QWORD *)(v22 + 64);
  v26 = static MatchedGeometryProperties.position.getter(v24);
  v27 = static UnitPoint.center.getter();
  v29 = v28;
  v30 = sub_100003E70(&qword_10015E0E0);
  v31 = swift_allocObject(v30, 48, 7);
  *(_OWORD *)(v31 + 16) = xmmword_10010A6C0;
  swift_retain(v22);
  v32 = sub_10009A580();
  v33 = swift_release(v22);
  v34 = Color.init(_:)(v32, v33);
  v35 = a2[6];
  if (!v35)
  {
    v108 = a2[7];
    goto LABEL_21;
  }
  v36 = v34;
  v117 = v26;
  v118 = v25;
  swift_retain(v35);
  v37 = sub_1000A3BEC();
  v39 = v38;
  swift_release(v35);
  v120 = a2;
  v121 = v21;
  if (v39 && (swift_bridgeObjectRelease(), (v37 & 1) != 0))
  {
    v102 = _stringCompareWithSmolCheck(_:_:expecting:)(7368801, 0xE300000000000000, 0x6C61646F6DLL, 0xE500000000000000, 0);
    swift_bridgeObjectRelease();
    v41 = v125;
    v103 = *(void (**)(unint64_t, _QWORD *, uint64_t))(v125 + 16);
    a1 = v122.n128_u64[0];
    v103(v122.n128_u64[0], a2, v124);
    v116 = v103;
    if ((v102 & 1) == 0)
    {
      if (*(_QWORD *)(a1 + 48))
        __asm { BR              X10 }
      while (1)
      {
        v108 = *(_QWORD *)(a1 + 56);
LABEL_21:
        v109 = type metadata accessor for RemoteViewConfiguration();
        v110 = sub_10000ACDC();
        EnvironmentObject.error()(0, v108, v109, v110);
        __break(1u);
      }
    }
    v40 = v124;
  }
  else
  {
    swift_bridgeObjectRelease();
    v40 = v124;
    v41 = v125;
    a1 = v122.n128_u64[0];
    v116 = *(void (**)(unint64_t, _QWORD *, uint64_t))(v125 + 16);
    v116(v122.n128_u64[0], a2, v124);
  }
  (*(void (**)(unint64_t, uint64_t))(v41 + 8))(a1, v40);
  v42 = Color.opacity(_:)(0.3);
  swift_release(v36);
  *(_QWORD *)(v31 + 32) = v42;
  *(_QWORD *)(v31 + 40) = static Color.clear.getter(v43);
  v169[0] = v31;
  specialized Array._endMutation()(v44);
  Gradient.init(colors:)(v169[0]);
  v45 = 0.0;
  LinearGradient.init(gradient:startPoint:endPoint:)(&v152, v46, 0.0, 0.1, 0.0, 0.5);
  v124 = v152;
  v122 = v153;
  v47 = v154;
  v48 = v155;
  v115 = static SafeAreaRegions.all.getter(v153);
  v49 = static Edge.Set.all.getter(v115);
  v112 = v49;
  v50 = static Alignment.center.getter(v49);
  v113 = v51;
  v114 = v50;
  v52 = v120;
  v53 = v120[3];
  LOBYTE(v169[0]) = *((_BYTE *)v120 + 16);
  v169[1] = v53;
  v54 = sub_100003E70(&qword_10015E858);
  State.wrappedValue.getter(v151, v54);
  if (LOBYTE(v151[0]))
    v45 = 1.0;
  v129[552] = 1;
  v55 = v123;
  v116((unint64_t)v123, v52, v40);
  v56 = v125;
  v57 = *(unsigned __int8 *)(v125 + 80);
  v58 = v40;
  v59 = (v57 + 32) & ~v57;
  v60 = swift_allocObject(&unk_100152D48, v59 + v9, v57 | 7);
  v61 = v127;
  *(_QWORD *)(v60 + 16) = v126;
  *(_QWORD *)(v60 + 24) = v61;
  v62 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v56 + 32))(v60 + v59, v55, v58);
  v133 = (unint64_t)v119;
  LOWORD(v134) = 1;
  *(_DWORD *)((char *)&v134 + 2) = *(_DWORD *)&v131[7];
  WORD3(v134) = v132;
  *((_QWORD *)&v134 + 1) = 0;
  *(double *)&v135 = v23;
  *((_QWORD *)&v135 + 1) = 0xD000000000000010;
  *(_QWORD *)&v136 = 0x8000000100117100;
  *((_QWORD *)&v136 + 1) = v118;
  LODWORD(v137) = v117;
  *((double *)&v137 + 1) = v27;
  *(_QWORD *)&v138 = v29;
  BYTE8(v138) = 1;
  HIDWORD(v138) = *(_DWORD *)&v131[3];
  *(_DWORD *)((char *)&v138 + 9) = *(_DWORD *)v131;
  *(_QWORD *)&v139[0] = v124;
  *(__n128 *)((char *)v139 + 8) = v122;
  *((_QWORD *)&v139[1] + 1) = v47;
  *(_QWORD *)&v140 = v48;
  *((_QWORD *)&v140 + 1) = v115;
  LOBYTE(v141) = v112;
  DWORD1(v141) = *(_DWORD *)&v130[3];
  *(_DWORD *)((char *)&v141 + 1) = *(_DWORD *)v130;
  *((_QWORD *)&v141 + 1) = v114;
  *(_QWORD *)&v142 = v113;
  *((double *)&v142 + 1) = v45;
  *(_QWORD *)&v143 = sub_1000C1A98;
  *((_QWORD *)&v143 + 1) = v60;
  v144 = 0uLL;
  v167 = v143;
  v166 = v142;
  v161 = v138;
  v162 = v139[0];
  v163 = v139[1];
  v164 = v140;
  v168 = 0uLL;
  v165 = v141;
  v156 = (unint64_t)v119;
  v160 = v137;
  v159 = v136;
  v158 = v135;
  v157 = v134;
  v63 = static Alignment.top.getter(v62);
  sub_1000E5E74(0, 1, 0.0, 1, INFINITY, 0, 0, 1, v145, v65, 0.0, 1, INFINITY, 0, v63, v64);
  sub_1000C1AE8((uint64_t *)&v133);
  v66 = v52[1];
  swift_retain(v66);
  v67 = sub_10009A580();
  v68 = swift_release(v66);
  v69 = Color.init(_:)(v67, v68);
  LOBYTE(v67) = static Edge.Set.all.getter(v69);
  v70 = static Alignment.bottom.getter();
  v72 = v71;
  sub_1000C065C(v52, v126, v127, (uint64_t)v146);
  v74 = static Alignment.center.getter(v73);
  v76 = v75;
  memcpy(v147, v145, 0x140uLL);
  *(_QWORD *)&v147[20] = v69;
  BYTE8(v147[20]) = (_BYTE)v67;
  *(_QWORD *)&v147[21] = v70;
  *((_QWORD *)&v147[21] + 1) = v72;
  v147[28] = v146[6];
  v147[29] = v146[7];
  v147[30] = v146[8];
  v147[24] = v146[2];
  v147[25] = v146[3];
  v147[27] = v146[5];
  v147[26] = v146[4];
  v147[23] = v146[1];
  v147[22] = v146[0];
  *(_QWORD *)&v147[31] = v74;
  *((_QWORD *)&v147[31] + 1) = v76;
  v77 = v52[1];
  swift_retain(v77);
  v78 = sub_10009A710();
  swift_release(v77);
  v80 = static UnitPoint.top.getter(v79);
  v82 = v81;
  memcpy(v148, v147, 0x200uLL);
  *(double *)&v148[64] = v78;
  *(double *)&v148[65] = v78;
  *(double *)&v148[66] = v80;
  v148[67] = v82;
  sub_1000C1B60((uint64_t)v148);
  sub_100007A98((uint64_t)v148, (uint64_t)v169, &qword_100163368);
  sub_1000C1B68(v147);
  v83 = sub_100003E70(&qword_100163280);
  v84 = sub_100003E70(&qword_100163340);
  v85 = sub_1000C143C();
  v86 = sub_1000C1868();
  _ConditionalContent<>.init(storage:)(v169, v83, v84, v85, v86);
  memcpy(v149, v129, 0x221uLL);
  memcpy(v151, v129, 0x221uLL);
  sub_1000C19C0((uint64_t)v151);
  sub_100007A98((uint64_t)v151, (uint64_t)v169, &qword_100163360);
  sub_1000C1CE8(v149, sub_1000C1C2C);
  v87 = sub_100003E70(&qword_100163270);
  v88 = sub_1000C13D0();
  _ConditionalContent<>.init(storage:)(v169, v87, &type metadata for EmptyView, v88, &protocol witness table for EmptyView);
  swift_release(v121);
  sub_1000C1CE8(v149, sub_1000C1DD0);
  sub_1000C1EB4((uint64_t *)v147);
  memcpy(v169, v150, 0x222uLL);
  v89 = v128;
  return memcpy(v89, v169, 0x222uLL);
}

double sub_1000C05FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;
  _QWORD v5[6];

  v5[2] = a2;
  v5[3] = a3;
  v5[4] = a1;
  v3 = static Animation.default.getter();
  withAnimation<A>(_:_:)(v3, sub_1000C1F80, v5, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

double sub_1000C065C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  void (*v28)(_BYTE *, uint64_t);
  uint64_t *v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  double result;
  _BYTE v47[8];
  double v48;
  _QWORD v49[5];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __int128 v54;

  v8 = type metadata accessor for ColorScheme(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v47[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v14 = &v47[-v13];
  v15 = sub_100003E70(&qword_10015E0E0);
  v16 = swift_allocObject(v15, 48, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10010A6C0;
  v17 = static Color.clear.getter(v16);
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = static Color.white.getter(v17);
  v50 = v16;
  specialized Array._endMutation()(v18);
  Gradient.init(colors:)(v50);
  LinearGradient.init(gradient:startPoint:endPoint:)(v49, v19, 0.0, 0.0, 0.0, 0.45);
  v20 = v49[0];
  v21 = v49[1];
  v22 = v49[2];
  v23 = v49[3];
  v24 = v49[4];
  type metadata accessor for HeroImage(0, a2, a3, v25);
  v26 = a1[1];
  swift_retain(v26);
  v27 = sub_10009A6E8();
  swift_release(v26);
  sub_10001E08C((uint64_t)v14);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for ColorScheme.light(_:), v8);
  LOBYTE(v26) = static ColorScheme.== infix(_:_:)(v14, v12);
  v28 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
  v28(v12, v8);
  v28(v14, v8);
  if ((v26 & 1) != 0)
  {
    if (qword_10015CE50 != -1)
      swift_once(&qword_10015CE50, sub_1000382A0);
    v29 = &qword_10016F648;
  }
  else
  {
    if (qword_10015CE48 != -1)
      swift_once(&qword_10015CE48, sub_10003828C);
    v29 = &qword_10016F640;
  }
  v30 = *v29;
  swift_retain(*v29);
  KeyPath = swift_getKeyPath(&unk_100112450);
  v32 = a1[5];
  v50 = a1[4];
  v51 = v32;
  v33 = sub_100003E70(&qword_100163358);
  State.wrappedValue.getter(&v48, v33);
  v34 = v48;
  v35 = a1[1];
  swift_retain(v35);
  v36 = sub_10009A3F0();
  swift_release(v35);
  v38 = v34 - v36;
  if (v34 - v36 < 0.0)
    v38 = 0.0;
  v39 = v38;
  v40 = static Alignment.center.getter(v37);
  _FrameLayout.init(width:height:alignment:)(&v50, 0, 1, *(_QWORD *)&v39, 0, v40, v41);
  v42 = v50;
  v43 = v51;
  v44 = v52;
  v45 = v53;
  *(_QWORD *)a4 = 17;
  *(_QWORD *)(a4 + 8) = v20;
  *(_QWORD *)(a4 + 16) = v21;
  *(_QWORD *)(a4 + 24) = v22;
  *(_QWORD *)(a4 + 32) = v23;
  *(_QWORD *)(a4 + 40) = v24;
  *(_QWORD *)(a4 + 48) = 0;
  *(double *)(a4 + 56) = v27;
  *(_QWORD *)(a4 + 64) = KeyPath;
  *(_QWORD *)(a4 + 72) = v30;
  *(_QWORD *)(a4 + 80) = v42;
  *(_BYTE *)(a4 + 88) = v43;
  *(_QWORD *)(a4 + 96) = v44;
  *(_BYTE *)(a4 + 104) = v45;
  result = *(double *)&v54;
  *(_OWORD *)(a4 + 112) = v54;
  *(_QWORD *)(a4 + 128) = sub_10005B414;
  *(_QWORD *)(a4 + 136) = 0;
  return result;
}

uint64_t sub_1000C0978@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *a1;
  WitnessTable = swift_getWitnessTable(&unk_100110550, *a1);
  *(_QWORD *)a2 = ObservedObject.init(wrappedValue:)(a1, v4, WitnessTable);
  *(_QWORD *)(a2 + 8) = v6;
  v7 = *(_QWORD *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 88);
  LOBYTE(v18) = 0;
  State.init(wrappedValue:)(&v18, &type metadata for Bool);
  v9 = v20;
  *(_BYTE *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = v9;
  v18 = 0;
  State.init(wrappedValue:)(&v18, &type metadata for CGFloat);
  v10 = v20;
  *(_QWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = v10;
  v11 = type metadata accessor for RemoteViewConfiguration();
  v12 = sub_10000ACDC();
  *(_QWORD *)(a2 + 48) = EnvironmentObject.init()(v11, v12);
  *(_QWORD *)(a2 + 56) = v13;
  v15 = (_QWORD *)(a2 + *(int *)(type metadata accessor for HeroImage(0, v7, v8, v14) + 48));
  *v15 = swift_getKeyPath(&unk_100112318);
  v16 = sub_100003E70(&qword_10015D490);
  return swift_storeEnumTagMultiPayload(v15, v16, 0);
}

uint64_t type metadata accessor for HeroImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HeroImage);
}

ValueMetadata *type metadata accessor for HeroImagePlaceholder()
{
  return &type metadata for HeroImagePlaceholder;
}

void sub_1000C0AAC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_100112370;
  v4[1] = &unk_100112388;
  v4[2] = &unk_100112388;
  v4[3] = &unk_100112388;
  sub_1000AFE84(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 0, 5, v4, a1 + 32);
  }
}

uint64_t sub_1000C0B2C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v18 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v18 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v18);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v7 = a2[3];
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v6;
    v8 = a2[5];
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v9;
    v10 = *(int *)(a3 + 48);
    v11 = (uint64_t *)((char *)a2 + v10);
    v12 = (uint64_t *)(a1 + v10);
    *(_QWORD *)(a1 + 56) = a2[7];
    swift_retain(v5);
    swift_retain(v7);
    swift_retain(v8);
    swift_retain(v9);
    v13 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v11, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v11, v14);
      v15 = v12;
      v16 = v13;
      v17 = 1;
    }
    else
    {
      v19 = *v11;
      *v12 = *v11;
      swift_retain(v19);
      v15 = v12;
      v16 = v13;
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v16, v17);
  }
  return a1;
}

double sub_1000C0C48(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_release(a1[1]);
  swift_release(a1[3]);
  swift_release(a1[5]);
  swift_release(a1[6]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 48));
  v5 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000C0CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v5;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *(int *)(a3 + 48);
  v10 = (uint64_t *)(a2 + v9);
  v11 = (uint64_t *)(a1 + v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain(v4);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  v12 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v10, v12) == 1)
  {
    v13 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v10, v13);
    v14 = 1;
  }
  else
  {
    v15 = *v10;
    *v11 = *v10;
    swift_retain(v15);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v12, v14);
  return a1;
}

uint64_t sub_1000C0DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_retain(v6);
  swift_release(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  swift_retain(v9);
  swift_release(v8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  swift_retain(v11);
  swift_release(v10);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v13;
  swift_retain(v13);
  swift_release(v12);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  if (a1 != a2)
  {
    v14 = *(int *)(a3 + 48);
    v15 = (uint64_t *)(a1 + v14);
    v16 = (uint64_t *)(a2 + v14);
    sub_100008194(a1 + v14, &qword_10015D490);
    v17 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = 1;
    }
    else
    {
      v20 = *v16;
      *v15 = *v16;
      swift_retain(v20);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v19);
  }
  return a1;
}

_OWORD *sub_1000C0EFC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 48);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000C0FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_release(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release(v10);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  if (a1 != a2)
  {
    v11 = *(int *)(a3 + 48);
    v12 = (void *)(a1 + v11);
    v13 = (const void *)(a2 + v11);
    sub_100008194(a1 + v11, &qword_10015D490);
    v14 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
      swift_storeEnumTagMultiPayload(v12, v14, 1);
    }
    else
    {
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000C10C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C10D0);
}

uint64_t sub_1000C10D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003E70(&qword_10015E6D8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 48), a2, v8);
  }
}

uint64_t sub_1000C1150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C115C);
}

uint64_t sub_1000C115C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100003E70(&qword_10015E6D8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 48), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000C11D4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011AF18, 1);
}

__n128 sub_1000C11E8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  _OWORD v11[9];

  v3 = static Color.clear.getter(a1);
  KeyPath = swift_getKeyPath(&unk_100112450);
  v5 = static Alignment.top.getter(KeyPath);
  sub_1000E603C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v11, 0.0, 1, INFINITY, 0, v5, v6, KeyPath, v3, 0x3FF199999999999ALL, 0);
  swift_release(v3);
  swift_release(KeyPath);
  v7 = v11[7];
  *(_OWORD *)(a2 + 96) = v11[6];
  *(_OWORD *)(a2 + 112) = v7;
  *(_OWORD *)(a2 + 128) = v11[8];
  v8 = v11[3];
  *(_OWORD *)(a2 + 32) = v11[2];
  *(_OWORD *)(a2 + 48) = v8;
  v9 = v11[5];
  *(_OWORD *)(a2 + 64) = v11[4];
  *(_OWORD *)(a2 + 80) = v9;
  result = (__n128)v11[1];
  *(_OWORD *)a2 = v11[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t sub_1000C12C4(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10011AEE4, 1);
}

void *sub_1000C12FC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X3>, void *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HeroImage(0, v6, v7, a2) - 8) + 80);
  return sub_1000BF9D4(a1, (_QWORD *)(v3 + ((v8 + 32) & ~v8)), v6, v7, a3);
}

unint64_t sub_1000C1364()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163260;
  if (!qword_100163260)
  {
    v1 = sub_1000034AC(&qword_100163258);
    sub_1000C13D0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163260);
  }
  return result;
}

unint64_t sub_1000C13D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163268;
  if (!qword_100163268)
  {
    v1 = sub_1000034AC(&qword_100163270);
    sub_1000C143C();
    sub_1000C1868();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163268);
  }
  return result;
}

unint64_t sub_1000C143C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163278;
  if (!qword_100163278)
  {
    v1 = sub_1000034AC(&qword_100163280);
    sub_1000C14A8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163278);
  }
  return result;
}

unint64_t sub_1000C14A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163288;
  if (!qword_100163288)
  {
    v1 = sub_1000034AC(&qword_100163290);
    sub_1000C152C();
    sub_100007D40(&qword_100163328, &qword_100163330, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163288);
  }
  return result;
}

unint64_t sub_1000C152C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163298;
  if (!qword_100163298)
  {
    v1 = sub_1000034AC(&qword_1001632A0);
    sub_1000C15B0();
    sub_100007D40(&qword_10015E320, &qword_10015E328, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163298);
  }
  return result;
}

unint64_t sub_1000C15B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001632A8;
  if (!qword_1001632A8)
  {
    v1 = sub_1000034AC(&qword_1001632B0);
    sub_1000C161C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001632A8);
  }
  return result;
}

unint64_t sub_1000C161C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001632B8;
  if (!qword_1001632B8)
  {
    v1 = sub_1000034AC(&qword_1001632C0);
    sub_1000C1688();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001632B8);
  }
  return result;
}

unint64_t sub_1000C1688()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001632C8;
  if (!qword_1001632C8)
  {
    v1 = sub_1000034AC(&qword_1001632D0);
    sub_1000C16F4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001632C8);
  }
  return result;
}

unint64_t sub_1000C16F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001632D8;
  if (!qword_1001632D8)
  {
    v1 = sub_1000034AC(&qword_1001632E0);
    sub_1000C1778();
    sub_100007D40(&qword_100163318, &qword_100163320, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001632D8);
  }
  return result;
}

unint64_t sub_1000C1778()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001632E8;
  if (!qword_1001632E8)
  {
    v1 = sub_1000034AC(&qword_1001632F0);
    sub_1000C17FC();
    sub_100007D40(&qword_100163308, &qword_100163310, (uint64_t)&protocol conformance descriptor for _MatchedGeometryEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001632E8);
  }
  return result;
}

unint64_t sub_1000C17FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001632F8;
  if (!qword_1001632F8)
  {
    v1 = sub_1000034AC(&qword_100163300);
    sub_10008AD8C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001632F8);
  }
  return result;
}

unint64_t sub_1000C1868()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163338;
  if (!qword_100163338)
  {
    v1 = sub_1000034AC(&qword_100163340);
    sub_1000C18EC();
    sub_100007D40(&qword_10015E320, &qword_10015E328, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163338);
  }
  return result;
}

unint64_t sub_1000C18EC()
{
  unint64_t result;

  result = qword_100163348;
  if (!qword_100163348)
  {
    result = swift_getWitnessTable(&unk_1001123B0, &type metadata for HeroImagePlaceholder);
    atomic_store(result, (unint64_t *)&qword_100163348);
  }
  return result;
}

uint64_t sub_1000C1934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HeroImage(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4)- 8)+ 80);
  v7 = v4 + ((v6 + 32) & ~v6);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 40);
  v12[0] = *(_QWORD *)(a1 + 8);
  v12[1] = v8;
  v12[2] = v9;
  v10 = sub_100003E70(&qword_100163358);
  return State.wrappedValue.setter(v12, v10);
}

uint64_t sub_1000C19A8(uint64_t result)
{
  *(_BYTE *)(result + 545) = 1;
  return result;
}

uint64_t sub_1000C19B4(uint64_t result)
{
  *(_BYTE *)(result + 544) = 1;
  return result;
}

uint64_t sub_1000C19C0(uint64_t result)
{
  *(_BYTE *)(result + 545) = 0;
  return result;
}

uint64_t sub_1000C19CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for HeroImage(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  swift_release(*(_QWORD *)(v4 + v8 + 8));
  swift_release(*(_QWORD *)(v4 + v8 + 24));
  swift_release(*(_QWORD *)(v4 + v8 + 40));
  swift_release(*(_QWORD *)(v4 + v8 + 48));
  v10 = (_QWORD *)(v4 + v8 + *(int *)(v5 + 48));
  v11 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  return swift_deallocObject(v4, v8 + v9, v7 | 7);
}

double sub_1000C1A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HeroImage(0, v5, v6, a4) - 8) + 80);
  return sub_1000C05FC(v4 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t *sub_1000C1AE8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = a1[22];
  v4 = a1[23];
  v5 = a1[24];
  v6 = a1[25];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v2);
  sub_100007604(v3, v4);
  sub_100007604(v5, v6);
  return a1;
}

uint64_t sub_1000C1B60(uint64_t result)
{
  *(_BYTE *)(result + 544) = 0;
  return result;
}

_QWORD *sub_1000C1B68(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[6];
  v3 = a1[12];
  v4 = a1[22];
  v5 = a1[23];
  v6 = a1[24];
  v7 = a1[25];
  v8 = a1[40];
  v9 = a1[53];
  v12 = a1[45];
  v13 = a1[52];
  v10 = a1[61];
  swift_retain(*a1);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_1000075F4(v4, v5);
  sub_1000075F4(v6, v7);
  swift_retain(v9);
  swift_retain(v10);
  swift_retain(v8);
  swift_bridgeObjectRetain(v12);
  swift_retain(v13);
  return a1;
}

double sub_1000C1C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  double result;

  if ((a69 & 1) == 0)
  {
    swift_retain(a1);
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a13);
    sub_1000075F4(a23, a24);
    sub_1000075F4(a25, a26);
    swift_retain(a54);
    swift_retain(a62);
    swift_retain(a41);
    swift_bridgeObjectRetain(a46);
    a1 = a53;
  }
  *(_QWORD *)&result = swift_retain(a1).n128_u64[0];
  return result;
}

#error "1000C1DAC: call analysis failed (funcsize=58)"

double sub_1000C1DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  double result;

  *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  if ((a69 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100007604(a23, a24);
    sub_100007604(a25, a26);
    swift_release(a62);
    swift_release(a53);
    swift_bridgeObjectRelease();
    swift_release(a41);
    *(_QWORD *)&result = swift_release(a54).n128_u64[0];
  }
  return result;
}

uint64_t *sub_1000C1EB4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = a1[22];
  v4 = a1[23];
  v5 = a1[24];
  v6 = a1[25];
  v7 = a1[52];
  v10 = a1[40];
  v11 = a1[53];
  v8 = a1[61];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v2);
  sub_100007604(v3, v4);
  sub_100007604(v5, v6);
  swift_release(v8);
  swift_release(v7);
  swift_bridgeObjectRelease();
  swift_release(v10);
  swift_release(v11);
  return a1;
}

uint64_t sub_1000C1F80()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_BYTE *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_100003E70(&qword_10015E858);
  return State.wrappedValue.setter(v6, v4);
}

ValueMetadata *type metadata accessor for HeroImageHeightPreferenceKey()
{
  return &type metadata for HeroImageHeightPreferenceKey;
}

unint64_t sub_1000C1FF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163370;
  if (!qword_100163370)
  {
    v1 = sub_1000034AC(&qword_100163250);
    sub_1000C2060();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163370);
  }
  return result;
}

unint64_t sub_1000C2060()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163378;
  if (!qword_100163378)
  {
    v1 = sub_1000034AC(&qword_100163248);
    sub_1000C20CC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163378);
  }
  return result;
}

unint64_t sub_1000C20CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163380;
  if (!qword_100163380)
  {
    v1 = sub_1000034AC(&qword_100163240);
    sub_1000C2150();
    sub_100007D40(&qword_1001633A0, &qword_1001633A8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163380);
  }
  return result;
}

unint64_t sub_1000C2150()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163388;
  if (!qword_100163388)
  {
    v1 = sub_1000034AC(&qword_100163238);
    sub_100007D40(&qword_100163390, &qword_100163230, (uint64_t)&protocol conformance descriptor for AsyncImage<A>);
    sub_100007D40(&qword_100163398, &qword_100163350, (uint64_t)&unk_10010F810);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163388);
  }
  return result;
}

unint64_t sub_1000C21F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001633B0;
  if (!qword_1001633B0)
  {
    v1 = sub_1000034AC(&qword_1001633B8);
    sub_1000C225C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001633B0);
  }
  return result;
}

unint64_t sub_1000C225C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001633C0;
  if (!qword_1001633C0)
  {
    v1 = sub_1000034AC(&qword_1001633C8);
    sub_1000345F8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001633C0);
  }
  return result;
}

unint64_t sub_1000C22C8(uint64_t a1)
{
  unint64_t result;

  result = sub_1000C22EC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C22EC()
{
  unint64_t result;

  result = qword_1001633D0;
  if (!qword_1001633D0)
  {
    result = swift_getWitnessTable(&unk_1001124A0, &type metadata for HeroImageHeightPreferenceKey);
    atomic_store(result, (unint64_t *)&qword_1001633D0);
  }
  return result;
}

uint64_t *sub_1000C2330(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v12 = *v16;
    v17 = v16[1];
    *v15 = v12;
    v15[1] = v17;
  }
  swift_retain(v12);
  return a1;
}

double sub_1000C2410(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  v4 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20))).n128_u64[0];
  return result;
}

uint64_t *sub_1000C2480(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = *v14;
  v16 = v14[1];
  *v13 = v15;
  v13[1] = v16;
  swift_retain(v15);
  return a1;
}

uint64_t *sub_1000C2538(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_100008194((uint64_t)a1, &qword_10015D488);
    v6 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = *(uint64_t *)((char *)a1 + v12);
  v16 = *v14;
  *(uint64_t *)((char *)a1 + v12) = *v14;
  swift_retain(v16);
  swift_release(v15);
  *((_QWORD *)v13 + 1) = v14[1];
  return a1;
}

char *sub_1000C261C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DismissAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_1000C26C4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_100008194((uint64_t)a1, &qword_10015D488);
    v6 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DismissAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)v10;
  swift_release(v11);
  *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
  return a1;
}

uint64_t sub_1000C279C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C27A8);
}

uint64_t sub_1000C27A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_100003E70(&qword_10015D608);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1000C2834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C2840);
}

uint64_t sub_1000C2840(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100003E70(&qword_10015D608);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for ErrorView(uint64_t a1)
{
  uint64_t result;

  result = qword_100163470;
  if (!qword_100163470)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ErrorView);
  return result;
}

void sub_1000C28F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_1000569B8(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_100112520;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_1000C2968(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011AF68, 1);
}

uint64_t sub_1000C2978()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100117140);
  qword_1001633D8 = result;
  unk_1001633E0 = v1;
  byte_1001633E8 = v2 & 1;
  qword_1001633F0 = v3;
  return result;
}

uint64_t sub_1000C29BC()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000023, 0x8000000100115A00);
  qword_1001633F8 = result;
  unk_100163400 = v1;
  byte_100163408 = v2 & 1;
  qword_100163410 = v3;
  return result;
}

uint64_t sub_1000C2A00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t OpaqueTypeConformance2;
  _QWORD v10[4];
  __int128 v11;
  _BYTE v12[32];
  __int128 v13;
  __int128 v14;
  _BYTE v15[32];
  _BYTE v16[25];
  char v17;
  char v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[2];

  v2 = static HorizontalAlignment.center.getter(a1);
  sub_1000C2B94((uint64_t)&v21);
  v20 = 0;
  v19 = v22;
  v18 = v23[0];
  v17 = BYTE8(v25);
  *(_QWORD *)&v11 = v2;
  *((_QWORD *)&v11 + 1) = 0x4034000000000000;
  v12[0] = 0;
  *(_OWORD *)&v12[8] = v21;
  v12[24] = v22;
  *(_QWORD *)&v13 = *((_QWORD *)&v22 + 1);
  BYTE8(v13) = v23[0];
  v14 = *(_OWORD *)&v23[8];
  *(_QWORD *)v15 = *(_QWORD *)&v23[24];
  *(_OWORD *)&v15[8] = v24;
  *(_QWORD *)&v15[24] = v25;
  v16[0] = BYTE8(v25);
  *(_OWORD *)&v16[8] = v26;
  v16[24] = v27[0];
  v10[2] = a1;
  v3 = sub_100003E70(&qword_1001634B0);
  v4 = sub_100003E70(&qword_1001634B8);
  v5 = sub_100007D40(&qword_1001634C0, &qword_1001634B0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v6 = sub_1000034AC(&qword_1001634C8);
  v7 = sub_1000C3570();
  *(_QWORD *)&v21 = v6;
  *((_QWORD *)&v21 + 1) = v7;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v21, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  View.toolbar<A>(content:)(sub_1000C361C, v10, v3, v4, v5, OpaqueTypeConformance2);
  v26 = *(_OWORD *)&v15[16];
  v27[0] = *(_OWORD *)v16;
  *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)&v16[9];
  *(_OWORD *)v23 = *(_OWORD *)&v12[16];
  *(_OWORD *)&v23[16] = v13;
  v24 = v14;
  v25 = *(_OWORD *)v15;
  v21 = v11;
  v22 = *(_OWORD *)v12;
  return sub_1000C3624((uint64_t)&v21);
}

uint64_t sub_1000C2B94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t KeyPath;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;

  v2 = type metadata accessor for Image.ResizingMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = Image.init(systemName:)(0xD00000000000001BLL, 0x8000000100117120);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Image.ResizingMode.stretch(_:), v2);
  v56 = Image.resizable(capInsets:resizingMode:)(v5, v6, 0.0, 0.0, 0.0, 0.0);
  v7 = swift_release(v6);
  v8 = (*(uint64_t (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v7);
  v9 = static Alignment.center.getter(v8);
  v11 = _FrameLayout.init(width:height:alignment:)(&v57, 0x4048000000000000, 0, 0x4048000000000000, 0, v9, v10);
  v53 = v57;
  v52 = v58;
  v51 = v59;
  v50 = v60;
  v48 = v62;
  v49 = v61;
  v55 = static Color.secondary.getter(v11);
  KeyPath = swift_getKeyPath(&unk_100112588);
  if (qword_10015CEB0 != -1)
    swift_once(&qword_10015CEB0, sub_1000C2978);
  v12 = qword_1001633D8;
  v13 = unk_1001633E0;
  v14 = byte_1001633E8;
  v15 = qword_1001633F0;
  swift_bridgeObjectRetain(unk_1001633E0);
  swift_bridgeObjectRetain(v15);
  v16 = Text.init(_:tableName:bundle:comment:)(v12, v13, v14, v15, 0, 0, 0, 0, 0, 256);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  if (qword_10015CE58 != -1)
    swift_once(&qword_10015CE58, sub_1000382B4);
  v23 = v20 & 1;
  v24 = Text.foregroundColor(_:)(qword_10016F650, v16, v18, v23, v22);
  v26 = v25;
  v28 = v27;
  v30 = v29 & 1;
  sub_10000BFF8(v16, v18, v23);
  v31 = swift_bridgeObjectRelease();
  v32 = static Font.title2.getter(v31);
  v33 = Text.font(_:)(v32, v24, v26, v30, v28);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  swift_release(v32);
  LOBYTE(v32) = v37 & 1;
  sub_10000BFF8(v24, v26, v30);
  swift_bridgeObjectRelease();
  v40 = swift_getKeyPath(&unk_1001125B8);
  v42 = v55;
  v41 = v56;
  v43 = v53;
  v44 = KeyPath;
  *(_QWORD *)a1 = v56;
  *(_QWORD *)(a1 + 8) = v43;
  *(_BYTE *)(a1 + 16) = v52;
  *(_QWORD *)(a1 + 24) = v51;
  *(_BYTE *)(a1 + 32) = v50;
  v45 = v48;
  *(_QWORD *)(a1 + 40) = v49;
  *(_QWORD *)(a1 + 48) = v45;
  *(_QWORD *)(a1 + 56) = v44;
  *(_QWORD *)(a1 + 64) = v42;
  *(_QWORD *)(a1 + 72) = v33;
  *(_QWORD *)(a1 + 80) = v35;
  *(_BYTE *)(a1 + 88) = v32;
  *(_QWORD *)(a1 + 96) = v39;
  *(_QWORD *)(a1 + 104) = v40;
  *(_BYTE *)(a1 + 112) = 1;
  swift_retain(v41);
  swift_retain(v44);
  swift_retain(v42);
  sub_10000C008(v33, v35, v32);
  swift_bridgeObjectRetain(v39);
  swift_retain(v40);
  sub_10000BFF8(v33, v35, v32);
  swift_release(v42);
  swift_release(v44);
  swift_release(v41);
  swift_release(v40);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000C2F08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;

  v36[1] = a2;
  v3 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v3);
  v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003E70(&qword_10015D6C8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[0] = sub_100003E70(&qword_1001634C8);
  v10 = __chkstk_darwin(v36[0]);
  v12 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v36 - v13;
  v15 = (_QWORD *)(a1 + *(int *)(type metadata accessor for ErrorView(0) + 20));
  v16 = *v15;
  if (*v15)
  {
    swift_retain(*v15);
    v17 = sub_1000A3BEC();
    v19 = v18;
    swift_release(v16);
    if (v19 && (swift_bridgeObjectRelease(), (v17 & 1) != 0))
    {
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)(7368801, 0xE300000000000000, 0x6C61646F6DLL, 0xE500000000000000, 0);
      v20 = swift_bridgeObjectRelease();
      if ((v29 & 1) == 0)
      {
        v30 = sub_100003E70(&qword_10015D6C0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v12, 1, 1, v30);
        v31 = sub_100007D40(&qword_10015D6D0, &qword_10015D6C8, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
        v37 = v6;
        v38 = v31;
        OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v37, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
        static ToolbarContentBuilder.buildIf<A>(_:)(v12, v30, OpaqueTypeConformance2);
        sub_100008194((uint64_t)v12, &qword_1001634C8);
        goto LABEL_6;
      }
    }
    else
    {
      v20 = swift_bridgeObjectRelease();
    }
    v21 = static ToolbarItemPlacement.navigationBarTrailing.getter(v20);
    __chkstk_darwin(v21);
    v36[-2] = a1;
    v22 = sub_100003E70(&qword_10015D6D8);
    v23 = sub_100007D40(&qword_10015D6E0, &qword_10015D6D8, (uint64_t)&protocol conformance descriptor for Button<A>);
    ToolbarItem<>.init(placement:content:)(v5, sub_1000C36A8, &v36[-4], v22, v23);
    v24 = sub_100007D40(&qword_10015D6D0, &qword_10015D6C8, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    static ToolbarContentBuilder.buildBlock<A>(_:)(v9, v6, v24);
    v25 = sub_100003E70(&qword_10015D6C0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v12, 0, 1, v25);
    v37 = v6;
    v38 = v24;
    v26 = swift_getOpaqueTypeConformance2(&v37, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    static ToolbarContentBuilder.buildIf<A>(_:)(v12, v25, v26);
    sub_100008194((uint64_t)v12, &qword_1001634C8);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_6:
    v27 = sub_1000C3570();
    static ToolbarContentBuilder.buildBlock<A>(_:)(v14, v36[0], v27);
    return sub_100008194((uint64_t)v14, &qword_1001634C8);
  }
  v33 = v15[1];
  v34 = type metadata accessor for RemoteViewConfiguration();
  v35 = sub_10000ACDC();
  result = EnvironmentObject.error()(0, v33, v34, v35);
  __break(1u);
  return result;
}

uint64_t sub_1000C3298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v0 = type metadata accessor for DismissAction(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = *(_QWORD *)(v1 + 64);
  v3 = __chkstk_darwin(v0);
  v4 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v11 - v5;
  sub_10001D870((uint64_t)&v11 - v5);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
  v7 = *(unsigned __int8 *)(v1 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_100152E28, v8 + v2, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v9 + v8, v4, v0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  return Button.init(action:label:)(sub_10000BFA8, v9, sub_1000C33BC, 0, &type metadata for Text, &protocol witness table for Text);
}

uint64_t sub_1000C33BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;

  if (qword_10015CEB8 != -1)
    swift_once(&qword_10015CEB8, sub_1000C29BC);
  v2 = qword_1001633F8;
  v3 = unk_100163400;
  v4 = byte_100163408;
  v5 = qword_100163410;
  swift_bridgeObjectRetain(unk_100163400);
  swift_bridgeObjectRetain(v5);
  result = Text.init(_:tableName:bundle:comment:)(v2, v3, v4, v5, 0, 0, 0, 0, 0, 256);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8 & 1;
  *(_QWORD *)(a1 + 24) = v9;
  return result;
}

uint64_t sub_1000C347C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v0 = sub_100003E70(&qword_1001634A8);
  v1 = sub_1000034AC(&qword_1001634B0);
  v2 = sub_1000034AC(&qword_1001634B8);
  v3 = sub_100007D40(&qword_1001634C0, &qword_1001634B0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v8 = sub_1000034AC(&qword_1001634C8);
  v9 = sub_1000C3570();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v8 = v1;
  v9 = v2;
  v10 = v3;
  v11 = OpaqueTypeConformance2;
  v5 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  return NavigationStack.init<>(root:)(sub_1000C3568, &v7, v0, v5);
}

uint64_t sub_1000C3568()
{
  uint64_t v0;

  return sub_1000C2A00(*(_QWORD *)(v0 + 16));
}

unint64_t sub_1000C3570()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001634D0;
  if (!qword_1001634D0)
  {
    v1 = sub_1000034AC(&qword_1001634C8);
    v2[0] = sub_1000034AC(&qword_10015D6C8);
    v2[1] = sub_100007D40(&qword_10015D6D0, &qword_10015D6C8, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1001634D0);
  }
  return result;
}

uint64_t sub_1000C361C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000C2F08(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000C3624(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(_BYTE *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 128);
  swift_release(*(_QWORD *)(a1 + 80));
  swift_release(v2);
  swift_release(v3);
  sub_10000BFF8(v4, v5, v6);
  swift_release(v7);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000C36A8()
{
  return sub_1000C3298();
}

uint64_t sub_1000C36B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for DismissAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000C3710@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000C3738(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_1000C375C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000C3784@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000C37AC(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_1000C37D4(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_1000C37FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000C3824(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_1000C3848()
{
  return sub_100007D40(&qword_1001634D8, qword_1001634E0, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
}

uint64_t sub_1000C3874@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t WitnessTable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[16];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;

  v43 = a2;
  v3 = sub_1000034AC(&qword_10015E998);
  v4 = *(_QWORD *)(a1 + 16);
  v40 = *(_QWORD *)(a1 + 24);
  v41 = v4;
  v6 = type metadata accessor for CalendarModule(255, v4, v40, v5);
  v7 = sub_1000034AC(&qword_100163568);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v6, v7, 0, 0);
  v9 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v9);
  v11 = type metadata accessor for VStack(255, v9, WitnessTable);
  v12 = swift_getTupleTypeMetadata2(255, v3, v11, 0, 0);
  v13 = type metadata accessor for TupleView(255, v12);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v13);
  v15 = type metadata accessor for VStack(0, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v38 - v17;
  v19 = type metadata accessor for ModifiedContent(0, v15, &type metadata for _PaddingLayout);
  v38 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v38 - v20;
  v22 = type metadata accessor for ModifiedContent(0, v19, &type metadata for _PaddingLayout);
  v39 = *(_QWORD *)(v22 - 8);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v38 - v27;
  v29 = static HorizontalAlignment.leading.getter(v26);
  v45 = v41;
  v46 = v40;
  v47 = v42;
  v30 = VStack.init(alignment:spacing:content:)(v29, 0x4030000000000000, 0, sub_1000C495C, v44, v13, v14);
  v31 = static Edge.Set.all.getter(v30);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v15);
  View.padding(_:_:)(v31, 0, 1, v15, v32);
  v33 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v34 = static Edge.Set.top.getter(v33);
  v50 = v32;
  v51 = &protocol witness table for _PaddingLayout;
  v35 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  View.padding(_:_:)(v34, 0, 1, v19, v35);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v21, v19);
  v48 = v35;
  v49 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v22);
  sub_1000F257C((uint64_t)v25, v22, (uint64_t)v28);
  v36 = *(void (**)(char *, uint64_t))(v39 + 8);
  v36(v25, v22);
  sub_1000E3B88((uint64_t)v28, v22, v43);
  return ((uint64_t (*)(char *, uint64_t))v36)(v28, v22);
}

uint64_t sub_1000C3B9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t WitnessTable;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82[16];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD v88[2];
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;

  v69 = a1;
  v81 = a5;
  v71 = a2;
  v72 = a3;
  v8 = type metadata accessor for CalendarModule(255, a2, a3, a4);
  v9 = sub_1000034AC(&qword_100163568);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v8, v9, 0, 0);
  v79 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v79);
  v11 = type metadata accessor for VStack(0, v79, WitnessTable);
  v80 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v75 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v76 = (uint64_t)&v66 - v14;
  v74 = type metadata accessor for AccessibilityTraits(0);
  v73 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v68 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100003E70(&qword_10015E998);
  v16 = __chkstk_darwin(v77);
  v67 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v70 = (uint64_t)&v66 - v18;
  v20 = (uint64_t *)(a1 + *(int *)(type metadata accessor for GuideViewModel(0, a2, a3, v19) + 36));
  v21 = *v20;
  v22 = v20[1];
  v23 = *((unsigned __int8 *)v20 + 16);
  v24 = v20[3];
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v24);
  v25 = Text.init(_:tableName:bundle:comment:)(v21, v22, v23, v24, 0, 0, 0, 0, 0, 256);
  v27 = v26;
  v29 = v28;
  v31 = v30 & 1;
  v32 = static Font.Weight.bold.getter(v25);
  v33 = Text.fontWeight(_:)(*(_QWORD *)&v32, 0, v25, v27, v31, v29);
  v35 = v34;
  v37 = v36;
  v39 = v38 & 1;
  sub_10000BFF8(v25, v27, v31);
  v40 = swift_bridgeObjectRelease();
  v41 = static Font.title2.getter(v40);
  v42 = Text.font(_:)(v41, v33, v35, v39, v37);
  v44 = v43;
  LOBYTE(v31) = v45;
  v47 = v46;
  swift_release(v41);
  LOBYTE(v41) = v31 & 1;
  sub_10000BFF8(v33, v35, v39);
  swift_bridgeObjectRelease();
  v48 = Text.accessibilityHeading(_:)(1, v42, v44, v31 & 1, v47);
  v50 = v49;
  LOBYTE(v35) = v51;
  v53 = v52;
  sub_10000BFF8(v42, v44, v41);
  v54 = swift_bridgeObjectRelease();
  v89 = v48;
  v90 = v50;
  v91 = v35 & 1;
  v92 = v53;
  v55 = v68;
  static AccessibilityTraits.isHeader.getter(v54);
  v56 = (uint64_t)v67;
  View.accessibility(addTraits:)(v55, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v55, v74);
  sub_10000BFF8(v89, v90, v91);
  swift_bridgeObjectRelease();
  v57 = v70;
  v58 = sub_1000C4968(v56, v70);
  v59 = static HorizontalAlignment.leading.getter(v58);
  v83 = v71;
  v84 = v72;
  v85 = v69;
  v60 = (uint64_t)v75;
  VStack.init(alignment:spacing:content:)(v59, 0x4038000000000000, 0, sub_1000C49B0, v82, v79, WitnessTable);
  v61 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v11);
  v62 = v76;
  sub_1000F257C(v60, v11, v76);
  v63 = v80;
  v64 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
  v64(v60, v11);
  sub_100007ADC(v57, v56, &qword_10015E998);
  v89 = v56;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v60, v62, v11);
  v90 = v60;
  v88[0] = v77;
  v88[1] = v11;
  v86 = sub_10003467C();
  v87 = v61;
  sub_1000E4768(&v89, 2uLL, (uint64_t)v88);
  v64(v62, v11);
  sub_100008194(v57, &qword_10015E998);
  v64(v60, v11);
  return sub_100008194(v56, &qword_10015E998);
}

void sub_1000C4084(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t WitnessTable;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t AssociatedConformanceWitness;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD v81[2];
  uint64_t v82[2];
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;

  v78 = a4;
  v75 = type metadata accessor for LocationModule(0);
  *(_QWORD *)&v76 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v8 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  v69 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v68 = *(_QWORD *)(v69 - 8);
  v10 = __chkstk_darwin(v69);
  v12 = (char *)&v66 - v11;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v10);
  v70 = (char *)&v66 - v14;
  v74 = sub_100003E70(&qword_100163568);
  v15 = __chkstk_darwin(v74);
  v77 = (uint64_t)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v73 = (uint64_t)&v66 - v18;
  v19 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v17);
  v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CalendarViewModel(0, a2, a3, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a1, a2);
  v23 = (_QWORD *)sub_10008CD8C((uint64_t)v21);
  v24 = sub_10004F0D8(v23);
  v26 = v25;
  v28 = v27;
  v83 = v24;
  v84 = v25;
  *(_QWORD *)&v85 = v27;
  *((_QWORD *)&v85 + 1) = v29;
  v30 = type metadata accessor for CalendarModule(0, a2, a3, v29);
  WitnessTable = swift_getWitnessTable(&unk_10010DA28, v30);
  v72 = v30;
  v71 = WitnessTable;
  sub_1000F257C((uint64_t)&v83, v30, (uint64_t)&v86);
  swift_release(v26);
  swift_release(v28);
  v33 = type metadata accessor for GuideViewModel(0, a2, a3, v32);
  sub_1000604EC(v33);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v68 + 8))(v12, v69);
    v34 = 1;
    v35 = v75;
    v36 = v73;
  }
  else
  {
    v67 = v13;
    v37 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v38 = v70;
    v37(v70, v12, AssociatedTypeWitness);
    v39 = sub_1000604E0(v33);
    v69 = v40;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119238);
    v42 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
    v44 = v43;
    v45 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
    v47 = v46;
    v48 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
    v50 = v49;
    v51 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
    v52 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000024, 0x8000000100117160);
    v53 = v69;
    *(_QWORD *)v8 = v39;
    *((_QWORD *)v8 + 1) = v53;
    *((double *)v8 + 2) = v42;
    *((_QWORD *)v8 + 3) = v44;
    *((_QWORD *)v8 + 4) = v45;
    *((_QWORD *)v8 + 5) = v47;
    *((_QWORD *)v8 + 6) = v48;
    *((_QWORD *)v8 + 7) = v50;
    *((_QWORD *)v8 + 8) = v51;
    *((_QWORD *)v8 + 9) = v52;
    *((_QWORD *)v8 + 10) = v54;
    v8[88] = v55 & 1;
    *((_QWORD *)v8 + 12) = v56;
    v57 = type metadata accessor for RemoteViewConfiguration();
    v58 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    *((_QWORD *)v8 + 13) = EnvironmentObject.init()(v57, v58);
    *((_QWORD *)v8 + 14) = v59;
    v60 = v75;
    v61 = &v8[*(int *)(v75 + 24)];
    *(_QWORD *)v61 = swift_getKeyPath(&unk_100112670);
    v62 = sub_100003E70(&qword_10015D600);
    swift_storeEnumTagMultiPayload(v61, v62, 0);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v38, AssociatedTypeWitness);
    v36 = v73;
    sub_10004D2D8((uint64_t)v8, v73);
    v34 = 0;
    v35 = v60;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56))(v36, v34, 1, v35);
  v63 = v87;
  v83 = v86;
  v84 = v87;
  v76 = v88;
  v85 = v88;
  v82[0] = (uint64_t)&v83;
  v64 = v77;
  sub_100007ADC(v36, v77, &qword_100163568);
  v82[1] = v64;
  swift_retain(v76);
  swift_retain(v63);
  v81[0] = v72;
  v81[1] = v74;
  v79 = v71;
  v80 = sub_1000C49BC();
  sub_1000E4768(v82, 2uLL, (uint64_t)v81);
  sub_100008194(v36, &qword_100163568);
  swift_release(v87);
  swift_release(v88);
  sub_100008194(v64, &qword_100163568);
  v65 = v85;
  swift_release(v84);
  swift_release(v65);
}

uint64_t sub_1000C45E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;

  v7 = type metadata accessor for GuideViewModel(0, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a5, a1, v7);
}

uint64_t sub_1000C4624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;

  result = type metadata accessor for GuideViewModel(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v6 <= 0x3F)
  {
    v7 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, &v7, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t sub_1000C4690(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 32) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1000C470C + 4 * byte_1001125F0[v10]))();
  }
}

void sub_1000C4790(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 32);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1000C4884()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1000C4900);
}

void sub_1000C488C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1000C4894);
  JUMPOUT(0x1000C4900);
}

void sub_1000C48D8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000C4900);
}

void sub_1000C48E0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000C4900);
}

uint64_t sub_1000C48E8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x1000C48F4);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x1000C4900);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for GuideModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GuideModule);
}

uint64_t sub_1000C4924(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10011AFCC, 1);
}

uint64_t sub_1000C495C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000C3B9C(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_1000C4968(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015E998);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000C49B0(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_1000C4084(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_1000C49BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163570;
  if (!qword_100163570)
  {
    v1 = sub_1000034AC(&qword_100163568);
    sub_100003B3C(&qword_100163578, type metadata accessor for LocationModule, (uint64_t)&unk_10010D8E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100163570);
  }
  return result;
}

uint64_t sub_1000C4A40(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_1000034AC(&qword_10015E998);
  v5 = type metadata accessor for CalendarModule(255, v1, v2, v4);
  v6 = sub_1000034AC(&qword_100163568);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v5, v6, 0, 0);
  v8 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v8);
  v10 = type metadata accessor for VStack(255, v8, WitnessTable);
  v11 = swift_getTupleTypeMetadata2(255, v3, v10, 0, 0);
  v12 = type metadata accessor for TupleView(255, v11);
  v13 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v12);
  v14 = type metadata accessor for VStack(255, v12, v13);
  v15 = type metadata accessor for ModifiedContent(255, v14, &type metadata for _PaddingLayout);
  v16 = type metadata accessor for ModifiedContent(255, v15, &type metadata for _PaddingLayout);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v14);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
}

uint64_t sub_1000C4BA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  KeyPath = swift_getKeyPath(&unk_100112808);
  v7[0] = v1;
  v4 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__playerTimeObserver;
  swift_beginAccess(v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__playerTimeObserver, v7, 0, 0);
  return sub_100007ADC(v5, a1, (uint64_t *)&unk_100161740);
}

uint64_t sub_1000C4C60@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100112808);
  v8[0] = v3;
  v5 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__playerTimeObserver;
  swift_beginAccess(v3 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__playerTimeObserver, v8, 0, 0);
  return sub_100007ADC(v6, a2, (uint64_t *)&unk_100161740);
}

uint64_t sub_1000C4D18(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;
  _BYTE v9[32];

  sub_100007ADC(a1, (uint64_t)v9, (uint64_t *)&unk_100161740);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100112808);
  v7[2] = v3;
  v7[3] = v9;
  v8 = v3;
  v5 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000C81B8, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return sub_100008194((uint64_t)v9, (uint64_t *)&unk_100161740);
}

uint64_t sub_1000C4DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__playerTimeObserver;
  swift_beginAccess(a1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__playerTimeObserver, v5, 33, 0);
  sub_1000C7E64(a2, v3, (uint64_t *)&unk_100161740);
  return swift_endAccess(v5);
}

void *sub_1000C4E50()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_100112790);
  v6 = v0;
  v2 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player);
  v4 = v3;
  return v3;
}

id sub_1000C4EE4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100112790);
  v8 = v3;
  v5 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player);
  *a2 = v6;
  return v6;
}

void sub_1000C4F78(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100112790);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000C7670, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);

}

uint64_t sub_1000C502C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  KeyPath = swift_getKeyPath(&unk_1001127B8);
  v7[0] = v1;
  v4 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__currentSong;
  swift_beginAccess(v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__currentSong, v7, 0, 0);
  return sub_100007ADC(v5, a1, &qword_10015D968);
}

uint64_t sub_1000C50E4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001127B8);
  v8[0] = v3;
  v5 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__currentSong;
  swift_beginAccess(v3 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__currentSong, v8, 0, 0);
  return sub_100007ADC(v6, a2, &qword_10015D968);
}

uint64_t sub_1000C519C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[6];
  uint64_t v8;
  _BYTE v9[40];

  sub_100007ADC(a1, (uint64_t)v9, &qword_10015D968);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001127B8);
  v7[2] = v3;
  v7[3] = v9;
  v8 = v3;
  v5 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000C81CC, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return sub_100008194((uint64_t)v9, &qword_10015D968);
}

uint64_t sub_1000C5264(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__currentSong;
  swift_beginAccess(a1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__currentSong, v5, 33, 0);
  sub_1000C7E64(a2, v3, &qword_10015D968);
  return swift_endAccess(v5);
}

void sub_1000C52D4(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double v6;
  double v7;
  double v10;
  uint64_t v11;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100112830);
  v11 = v3;
  v5 = sub_100003B3C(&qword_1001636C0, type metadata accessor for PlaybackProgressUpdater, (uint64_t)&unk_100112748);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(double *)(v3 + 16);
  v7 = 1.0;
  if (v6 <= 1.0)
    v7 = *(double *)(v3 + 16);
  if ((*(_QWORD *)&v6 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0 || v6 < 0.0)
    v10 = 0.0;
  else
    v10 = v7;
  *a2 = v10;
}

double sub_1000C5394()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100112830);
  v4 = v0;
  v2 = sub_100003B3C(&qword_1001636C0, type metadata accessor for PlaybackProgressUpdater, (uint64_t)&unk_100112748);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(double *)(v0 + 16);
}

uint64_t sub_1000C5418()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001127E0);
  v4 = v0;
  v2 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__status);
}

void sub_1000C54A4(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001127E0);
  v6 = v3;
  v5 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__status);
}

double sub_1000C5538(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001127E0);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000C81E0, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

id sub_1000C55E0()
{
  _BYTE *v0;
  objc_class *ObjectType;
  _OWORD *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  objc_super v13;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = &v0[OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__playerTimeObserver];
  *v2 = 0u;
  v2[1] = 0u;
  *(_QWORD *)&v0[OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player] = 0;
  v3 = &v0[OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__currentSong];
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_QWORD *)v3 + 4) = 0;
  v0[OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__status] = 0;
  v4 = OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer_lock;
  v5 = type metadata accessor for PlaybackProgressUpdater(0);
  v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  *(_QWORD *)(v6 + 16) = 0;
  v7 = sub_100003E70(&qword_1001636C8);
  v8 = swift_allocObject(v7, 20, 7);
  *(_DWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v6 + 24) = v8;
  v9 = v0;
  ObservationRegistrar.init()(v9);
  v10 = sub_100003E70(qword_1001636D0);
  v11 = swift_allocObject(v10, 28, 7);
  *(_DWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)&v0[v4] = v11;
  ObservationRegistrar.init()(v11);

  v13.receiver = v9;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, "init");
}

void sub_1000C5728(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[24];
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;

  v2 = v1;
  v4 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v4);
  v6 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1001127B8);
  v10 = v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer___observationRegistrar;
  v47[0] = v2;
  v42[0] = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
  v42[1] = v10;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v47, KeyPath, v42[0]);
  swift_release(KeyPath);
  v11 = v2 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__currentSong;
  swift_beginAccess(v2 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__currentSong, v46, 0, 0);
  sub_100007ADC(v11, (uint64_t)v47, &qword_10015D968);
  v12 = v48;
  if (v48)
  {
    v13 = v49;
    v14 = sub_100008170(v47, v48);
    v15 = *(_QWORD *)(v12 - 8);
    __chkstk_darwin(v14);
    v17 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    sub_100008194((uint64_t)v47, &qword_10015D968);
    v18 = dispatch thunk of MusicItem.id.getter(v12, *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8));
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v12);
  }
  else
  {
    sub_100008194((uint64_t)v47, &qword_10015D968);
    v18 = 0;
    v20 = 0;
  }
  v22 = a1[3];
  v21 = a1[4];
  sub_100008170(a1, v22);
  v23 = dispatch thunk of MusicItem.id.getter(v22, *(_QWORD *)(*(_QWORD *)(v21 + 8) + 8));
  if (v20)
  {
    if (v18 == v23 && v20 == v24)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_18:
      if (qword_10015CF60 != -1)
        swift_once(&qword_10015CF60, sub_100105E80);
      v36 = type metadata accessor for Logger(0);
      v37 = sub_100011AC4(v36, (uint64_t)qword_10016F728);
      v32 = Logger.logObject.getter(v37);
      v33 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v32, v33))
        goto LABEL_23;
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      v35 = "Attempting to setup the same song already in the player";
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v32, v33, v35, v34, 2u);
      swift_slowDealloc(v34, -1, -1);
LABEL_23:

      return;
    }
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v23, v24, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v27 = a1[3];
  v28 = a1[4];
  sub_100008170(a1, v27);
  (*(void (**)(uint64_t, uint64_t))(v28 + 104))(v27, v28);
  v29 = v44;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v44) == 1)
  {
    sub_100008194((uint64_t)v6, &qword_100165370);
    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_100011AC4(v30, (uint64_t)qword_10016F728);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v32, v33))
      goto LABEL_23;
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    v35 = "Preview playback setup initiated but no song preview url to setup.";
    goto LABEL_22;
  }
  v38 = (uint64_t)v43;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v43, v6, v29);
  sub_1000C5C74();
  sub_1000081D0((uint64_t)a1, (uint64_t)v47);
  v39 = swift_getKeyPath(&unk_1001127B8);
  __chkstk_darwin(v39);
  v42[-2] = v2;
  v42[-1] = v47;
  v45 = v2;
  v40 = v42[0];
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v45, v39, sub_1000C7CCC, &v42[-4], (char *)&type metadata for () + 8, v42[0]);
  swift_release(v39);
  sub_100008194((uint64_t)v47, &qword_10015D968);
  v41 = swift_getKeyPath(&unk_1001127E0);
  __chkstk_darwin(v41);
  v42[-2] = v2;
  LOBYTE(v42[-1]) = 1;
  v47[0] = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v47, v41, sub_1000C7CEC, &v42[-4], (char *)&type metadata for () + 8, v40);
  swift_release(v41);
  sub_1000C5F08(v38);
  sub_1000C639C();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v38, v29);
}

double sub_1000C5C74()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  NSString v16;
  uint64_t v17;
  double result;
  _QWORD v19[5];
  _BYTE v20[24];
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  sub_1000C6DF4();
  KeyPath = swift_getKeyPath(&unk_100112790);
  *(_QWORD *)&v23 = v0;
  v2 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, KeyPath, v2);
  *(_QWORD *)&v3 = swift_release(KeyPath).n128_u64[0];
  v4 = OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player), "pause", v3);
  v5 = swift_getKeyPath(&unk_100112808);
  *(_QWORD *)&v23 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, v5, v2);
  swift_release(v5);
  v6 = v0 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__playerTimeObserver;
  swift_beginAccess(v0 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__playerTimeObserver, v20, 0, 0);
  sub_100007ADC(v6, (uint64_t)&v21, (uint64_t *)&unk_100161740);
  if (v22)
  {
    sub_1000C7EE4(&v21, &v23);
    v7 = swift_getKeyPath(&unk_100112790);
    *(_QWORD *)&v21 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v21, v7, v2);
    swift_release(v7);
    v8 = *(void **)(v0 + v4);
    if (v8)
    {
      v9 = v24;
      v10 = sub_100008170(&v23, v24);
      v11 = v8;
      v12 = _bridgeAnythingToObjectiveC<A>(_:)(v10, v9);
      objc_msgSend(v11, "removeTimeObserver:", v12);

      swift_unknownObjectRelease(v12);
    }
    sub_1000055A8(&v23);
  }
  else
  {
    sub_100008194((uint64_t)&v21, (uint64_t *)&unk_100161740);
  }
  v13 = swift_getKeyPath(&unk_100112790);
  *(_QWORD *)&v23 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, v13, v2);
  swift_release(v13);
  v14 = *(void **)(v0 + v4);
  if (v14)
  {
    v15 = v14;
    v16 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "removeObserver:forKeyPath:", v0, v16);

  }
  v17 = swift_getKeyPath(&unk_100112790);
  __chkstk_darwin(v17);
  v19[2] = v0;
  v19[3] = 0;
  *(_QWORD *)&v23 = v0;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v23, v17, sub_1000C7670, v19, (char *)&type metadata for () + 8, v2);
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

void sub_1000C5F08(uint64_t a1)
{
  void **v1;
  void **v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSURL *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t KeyPath;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  NSString v19;
  void *v20;
  id v21;
  NSString v22;
  id v23;
  id v24;
  CMTimeScale timescale;
  void *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  double v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  CMTimeValue value;
  uint64_t v41;
  CMTimeEpoch epoch;
  id v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char v51[16];
  void **v52;
  id v53;
  void **v54;
  void **aBlock;
  unint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t *);
  void *v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  CMTime v61;

  v2 = v1;
  v49 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v49 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v49);
  v48 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_allocWithZone((Class)AVURLAsset);
  v47 = a1;
  URL._bridgeToObjectiveC()(v7);
  v9 = v8;
  v10 = objc_msgSend(v6, "initWithURL:options:", v8, 0);

  v11 = objc_msgSend(objc_allocWithZone((Class)AVPlayerItem), "initWithAsset:", v10);
  v12 = objc_msgSend(objc_allocWithZone((Class)AVPlayer), "initWithPlayerItem:", v11);
  KeyPath = swift_getKeyPath(&unk_100112790);
  v52 = v2;
  v53 = v12;
  v14 = (char *)v2 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer___observationRegistrar;
  aBlock = v2;
  v15 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
  v50 = (char *)&type metadata for () + 8;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&aBlock, KeyPath, sub_1000C7670, v51, (char *)&type metadata for () + 8, v15);
  swift_release(KeyPath);

  v16 = swift_getKeyPath(&unk_100112790);
  aBlock = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&aBlock, v16, v15);
  swift_release(v16);
  v17 = *(void **)((char *)v2 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player);
  if (v17)
  {
    v18 = v17;
    v19 = String._bridgeToObjectiveC()();
    v46 = 0;
    v20 = v19;
    objc_msgSend(v18, "addObserver:forKeyPath:options:context:", v2, v19, 1, 0);

    v21 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v22 = String._bridgeToObjectiveC()();
    v23 = objc_msgSend(v18, "currentItem");
    v44 = v15;
    v45 = v14;
    v24 = v23;
    objc_msgSend(v21, "addObserver:selector:name:object:", v2, "playerDidFinishPlaying", v22, v23);

    v61 = CMTime.init(value:timescale:)(1, 5);
    value = v61.value;
    timescale = v61.timescale;
    epoch = v61.epoch;
    v41 = HIDWORD(*(_QWORD *)&v61.timescale);
    sub_1000C7D04();
    v26 = (void *)static OS_dispatch_queue.main.getter();
    v43 = v11;
    v27 = *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer_lock);
    v28 = v48;
    v29 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v48, v47, v49);
    v30 = *(unsigned __int8 *)(v4 + 80);
    v31 = (v30 + 32) & ~v30;
    v32 = swift_allocObject(&unk_100152F70, v31 + v5, v30 | 7);
    *(_QWORD *)(v32 + 16) = v27;
    *(_QWORD *)(v32 + 24) = v18;
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v32 + v31, v28, v29);
    v59 = sub_1000C7DBC;
    v60 = v32;
    aBlock = _NSConcreteStackBlock;
    v56 = 1107296256;
    v57 = sub_1000C6DA0;
    v58 = &unk_100152F88;
    v33 = _Block_copy(&aBlock);
    v34 = v60;
    v35 = v18;
    swift_retain(v27);
    *(_QWORD *)&v36 = swift_release(v34).n128_u64[0];
    aBlock = (void **)value;
    v56 = __PAIR64__(v41, timescale);
    v57 = (uint64_t (*)(uint64_t, uint64_t *))epoch;
    v37 = objc_msgSend(v35, "addPeriodicTimeObserverForInterval:queue:usingBlock:", &aBlock, v26, v33, v36);
    _Block_release(v33);

    _bridgeAnyObjectToAny(_:)(&aBlock);
    swift_unknownObjectRelease(v37);
    v38 = swift_getKeyPath(&unk_100112808);
    __chkstk_darwin(v38);
    *(&v39 - 2) = (uint64_t)v2;
    *(&v39 - 1) = (uint64_t)&aBlock;
    v54 = v2;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v54, v38, sub_1000C7E34, &v39 - 4, v50, v44);
    swift_release(v38);
    sub_100008194((uint64_t)&aBlock, (uint64_t *)&unk_100161740);

  }
  else
  {

  }
}

void sub_1000C639C()
{
  char *v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  double v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  char v23[8];
  uint64_t v24;
  char *v25;

  KeyPath = swift_getKeyPath(&unk_100112790);
  v25 = v0;
  v2 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, KeyPath, v2);
  *(_QWORD *)&v3 = swift_release(KeyPath).n128_u64[0];
  v4 = OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player;
  v5 = *(void **)&v0[OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player];
  if (v5 && (v6 = objc_msgSend(v5, "error", v3)) != 0)
  {

    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v7 = type metadata accessor for Logger(0);
    sub_100011AC4(v7, (uint64_t)qword_10016F728);
    v8 = v0;
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v25 = (char *)v21;
      *(_DWORD *)v11 = 136315138;
      v12 = swift_getKeyPath(&unk_100112790);
      v24 = (uint64_t)v8;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, v12, v2);
      *(_QWORD *)&v13 = swift_release(v12).n128_u64[0];
      v14 = *(void **)&v0[v4];
      if (v14 && (v15 = objc_msgSend(v14, "error", v13)) != 0)
      {
        v16 = v15;
        swift_getErrorValue(v15, v23, v22);
        v17 = Error.localizedDescription.getter(v22[1], v22[2]);
        v19 = v18;

      }
      else
      {
        v17 = 0;
        v19 = 0xE000000000000000;
      }
      v24 = sub_1000C7684(v17, v19, (uint64_t *)&v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v11 + 4, v11 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Playback initiated but player has error: %s", v11, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    v20 = swift_getKeyPath(&unk_100112790);
    v25 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, v20, v2);
    objc_msgSend(*(id *)&v0[v4], "play", swift_release(v20).n128_f64[0]);
  }
}

id sub_1000C6680()
{
  void *v0;
  objc_class *ObjectType;
  double v2;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = sub_1000C5C74();
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, "dealloc", v2);
}

uint64_t sub_1000C67A8()
{
  return type metadata accessor for MusicPreviewPlayer(0);
}

uint64_t type metadata accessor for MusicPreviewPlayer(uint64_t a1)
{
  return sub_10002F744(a1, (uint64_t *)&unk_1001635D8, (uint64_t)&nominal type descriptor for MusicPreviewPlayer);
}

void sub_1000C68EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  os_unfair_lock_s *v12;

  v12 = (os_unfair_lock_s *)(a4 + 24);
  if (os_unfair_lock_trylock((os_unfair_lock_t)(a4 + 24)))
  {
    sub_1000C698C((uint64_t *)(a4 + 16), a5, a6, a1, a2, a3);
    os_unfair_lock_unlock(v12);
  }
}

void sub_1000C698C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  uint64_t KeyPath;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  double (*v39)();
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t *v44;
  uint64_t v45[3];
  uint64_t v46;
  uint64_t v47;

  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(a2, "currentItem");
  if (!v16)
  {
    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v22 = type metadata accessor for Logger(0);
    sub_100011AC4(v22, (uint64_t)qword_10016F728);
    v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(12, -1);
      v44 = a1;
      v27 = (uint8_t *)v26;
      v28 = swift_slowAlloc(32, -1);
      v45[0] = v28;
      *(_DWORD *)v27 = 136315138;
      v43 = v27 + 4;
      v29 = sub_100003B3C(&qword_10015ED80, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v30 = dispatch thunk of CustomStringConvertible.description.getter(v12, v29);
      v46 = sub_1000C7684(v30, v31, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v43, v27 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Invalid or missing duration for current item %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      v32 = v27;
      a1 = v44;
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }

    v33 = *a1;
    v34 = (os_unfair_lock_s *)(*(_QWORD *)(*a1 + 24) + 16);
    os_unfair_lock_lock(v34);
    KeyPath = swift_getKeyPath(&unk_100112830);
    __chkstk_darwin(KeyPath);
    v36 = &v42 - 4;
    *(&v42 - 2) = v33;
    *(&v42 - 1) = 0;
    v45[0] = v33;
    v37 = sub_100003B3C(&qword_1001636C0, type metadata accessor for PlaybackProgressUpdater, (uint64_t)&unk_100112748);
    v38 = (char *)&type metadata for () + 8;
    v39 = sub_1000C7E54;
    goto LABEL_13;
  }
  v17 = v16;
  objc_msgSend(v16, "duration");
  v18 = v45[0];
  v19 = v45[1];
  v20 = v45[2];

  v21 = CMTime.seconds.getter(v18, v19, v20);
  if (v21 > 0.0 && ((~*(_QWORD *)&v21 & 0x7FF0000000000000) != 0 || (*(_QWORD *)&v21 & 0xFFFFFFFFFFFFFLL) == 0))
  {
    v40 = CMTime.seconds.getter(a4, a5, a6) / v21;
    v41 = *a1;
    v34 = (os_unfair_lock_s *)(*(_QWORD *)(*a1 + 24) + 16);
    os_unfair_lock_lock(v34);
    KeyPath = swift_getKeyPath(&unk_100112830);
    __chkstk_darwin(KeyPath);
    v36 = &v42 - 4;
    *(&v42 - 2) = v41;
    *((double *)&v42 - 1) = v40;
    v45[0] = v41;
    v37 = sub_100003B3C(&qword_1001636C0, type metadata accessor for PlaybackProgressUpdater, (uint64_t)&unk_100112748);
    v38 = (char *)&type metadata for () + 8;
    v39 = sub_1000C81F4;
LABEL_13:
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v45, KeyPath, v39, v36, v38, v37);
    swift_release(KeyPath);
    os_unfair_lock_unlock(v34);
  }
}

uint64_t sub_1000C6DA0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v6(v2, v3, v4);
  return swift_release(v5);
}

uint64_t sub_1000C6DF4()
{
  CMTimeValue v0;
  CMTimeValue v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  double v11;
  void *v12;
  CMTimeScale timescale;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  uint64_t v16;
  _BYTE v18[16];
  CMTimeValue v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  CMTimeValue v24;
  CMTimeScale v25;
  CMTimeFlags v26;
  CMTimeEpoch v27;
  CMTimeValue value;
  CMTimeScale v29;
  CMTimeFlags v30;
  CMTimeEpoch v31;

  v1 = v0;
  if (qword_10015CF60 != -1)
    swift_once(&qword_10015CF60, sub_100105E80);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100011AC4(v2, (uint64_t)qword_10016F728);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Preview Playback ended.", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer_lock);
  if (os_unfair_lock_trylock((os_unfair_lock_t)(v7 + 24)))
  {
    sub_1000C70C0((uint64_t *)(v7 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 24));
  }
  KeyPath = swift_getKeyPath(&unk_1001127E0);
  __chkstk_darwin(KeyPath);
  v19 = v1;
  LOBYTE(v20) = 0;
  *(_QWORD *)&v21 = v1;
  v9 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v21, KeyPath, sub_1000C81E0, v18, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath);
  v10 = swift_getKeyPath(&unk_100112790);
  *(_QWORD *)&v21 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v21, v10, v9);
  *(_QWORD *)&v11 = swift_release(v10).n128_u64[0];
  v12 = *(void **)(v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player);
  if (v12)
  {
    timescale = kCMTimeZero.timescale;
    flags = kCMTimeZero.flags;
    epoch = kCMTimeZero.epoch;
    *(_QWORD *)&v21 = kCMTimeZero.value;
    *((_QWORD *)&v21 + 1) = __PAIR64__(flags, timescale);
    *(_QWORD *)&v22 = epoch;
    v27 = epoch;
    value = kCMTimeZero.value;
    v29 = timescale;
    v30 = flags;
    v31 = epoch;
    v24 = kCMTimeZero.value;
    v25 = timescale;
    v26 = flags;
    objc_msgSend(v12, "seekToTime:toleranceBefore:toleranceAfter:", &v21, &value, &v24, v11);
  }
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  v16 = swift_getKeyPath(&unk_1001127B8);
  __chkstk_darwin(v16);
  v19 = v1;
  v20 = &v21;
  value = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&value, v16, sub_1000C81CC, v18, (char *)&type metadata for () + 8, v9);
  swift_release(v16);
  return sub_100008194((uint64_t)&v21, &qword_10015D968);
}

void sub_1000C70C0(uint64_t *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v5[4];
  uint64_t v6;

  v1 = *a1;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(*a1 + 24) + 16);
  os_unfair_lock_lock(v2);
  KeyPath = swift_getKeyPath(&unk_100112830);
  v5[2] = v1;
  v5[3] = 0;
  v6 = v1;
  v4 = sub_100003B3C(&qword_1001636C0, type metadata accessor for PlaybackProgressUpdater, (uint64_t)&unk_100112748);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_1000C81F4, v5, (char *)&type metadata for () + 8, v4);
  swift_release(KeyPath);
  os_unfair_lock_unlock(v2);
}

uint64_t sub_1000C71C0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = " ";
  v4[1] = &unk_1001126D0;
  v4[2] = &unk_1001126E8;
  v4[3] = &unk_100112700;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

double sub_1000C7264()
{
  _QWORD *v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  double v5;

  v1 = *(os_unfair_lock_s **)(*v0 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer_lock);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1000C52D4(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_1000C72CC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  KeyPath = swift_getKeyPath(&unk_1001127E0);
  v5 = v1;
  v3 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v3);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__status);
}

void sub_1000C7358(_QWORD *a1)
{
  sub_1000C5728(a1);
}

void sub_1000C7378()
{
  sub_1000C639C();
}

id sub_1000C7398()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  KeyPath = swift_getKeyPath(&unk_100112790);
  v5 = v1;
  v3 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v3);
  return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player), "pause", swift_release(KeyPath).n128_f64[0]);
}

double sub_1000C7430@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100112830);
  v7 = v3;
  v5 = sub_100003B3C(&qword_1001636C0, type metadata accessor for PlaybackProgressUpdater, (uint64_t)&unk_100112748);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = *(double *)(v3 + 16);
  *a2 = result;
  return result;
}

void sub_1000C74BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100112830);
  v6[2] = v3;
  v6[3] = v2;
  v7 = v3;
  v5 = sub_100003B3C(&qword_1001636C0, type metadata accessor for PlaybackProgressUpdater, (uint64_t)&unk_100112748);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_1000C81F4, v6, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
}

uint64_t sub_1000C756C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[3]);
  v1 = (char *)v0
     + OBJC_IVAR____TtC16EventViewServiceP33_5445445A7553E6A0FDE4F6AA485860F723PlaybackProgressUpdater___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000C75C4()
{
  return type metadata accessor for PlaybackProgressUpdater(0);
}

uint64_t type metadata accessor for PlaybackProgressUpdater(uint64_t a1)
{
  return sub_10002F744(a1, qword_100163618, (uint64_t)&nominal type descriptor for PlaybackProgressUpdater);
}

uint64_t sub_1000C75E0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_1000C7670()
{
  sub_1000C7EA8();
}

uint64_t sub_1000C7684(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_1000C7754(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100036668((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100036668((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_1000055A8(v12);
  return v7;
}

uint64_t sub_1000C7754(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1000C790C(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000C790C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_1000C79A0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1000C7B78(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1000C7B78(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_1000C79A0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_1000C7B14(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_1000C7B14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100003E70(&qword_1001636B8);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1000C7B78(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003E70(&qword_1001636B8);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000C7CCC()
{
  uint64_t v0;

  return sub_1000C5264(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000C7CEC()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__status) = *(_BYTE *)(v0 + 24);
}

unint64_t sub_1000C7D04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EA90;
  if (!qword_10015EA90)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10015EA90);
  }
  return result;
}

uint64_t sub_1000C7D40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000C7DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  sub_1000C68EC(a1, a2, a3, *(_QWORD *)(v3 + 16), *(void **)(v3 + 24), v3 + ((v7 + 32) & ~v7));
}

uint64_t sub_1000C7E14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C7E24(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000C7E34()
{
  uint64_t v0;

  return sub_1000C4DE0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

double sub_1000C7E54()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + 16) = result;
  return result;
}

uint64_t sub_1000C7E64(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003E70(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

void sub_1000C7EA8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player) = v2;
  v4 = v2;

}

_OWORD *sub_1000C7EE4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_1000C7EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  NSString *v7;
  unint64_t v8;
  char v9;
  double v10;
  os_unfair_lock_s *v11;
  uint64_t *v12;
  os_unfair_lock_s *v13;
  uint64_t KeyPath;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  double v20;
  __int128 v21;
  __int128 v22;

  if (!a2)
    return;
  v5 = v4;
  if ((a1 != 1702125938 || a2 != 0xE400000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 1702125938, 0xE400000000000000, 0) & 1) == 0)
  {
    return;
  }
  if (!a4 || !*(_QWORD *)(a4 + 16))
  {
    v21 = 0u;
    v22 = 0u;
    goto LABEL_17;
  }
  v7 = NSKeyValueChangeNewKey;
  v8 = sub_10009067C((uint64_t)v7);
  if ((v9 & 1) == 0)
  {
    v21 = 0u;
    v22 = 0u;

    goto LABEL_17;
  }
  sub_100036668(*(_QWORD *)(a4 + 56) + 32 * v8, (uint64_t)&v21);

  if (!*((_QWORD *)&v22 + 1))
  {
LABEL_17:
    sub_100008194((uint64_t)&v21, (uint64_t *)&unk_100161740);
    return;
  }
  if ((swift_dynamicCast(&v20, &v21, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
  {
    v10 = v20;
    if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    {
      v11 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer_lock);
      v12 = (uint64_t *)&v11[4];
      v13 = v11 + 6;
      os_unfair_lock_lock(v11 + 6);
      sub_1000C52D4(v12, (double *)&v21);
      os_unfair_lock_unlock(v13);
      if ((~(_QWORD)v21 & 0x7FF0000000000000) != 0 || (v21 & 0xFFFFFFFFFFFFFLL) == 0)
      {
        os_unfair_lock_lock(v13);
        sub_1000C52D4(v12, (double *)&v21);
        os_unfair_lock_unlock(v13);
        if (*(double *)&v21 > 0.0)
        {
          KeyPath = swift_getKeyPath(&unk_1001127E0);
          __chkstk_darwin(KeyPath);
          v18 = v5;
          v19 = 3;
          *(_QWORD *)&v21 = v5;
          v15 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
          v16 = (char *)&type metadata for () + 8;
LABEL_21:
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v21, KeyPath, sub_1000C81E0, &v17, v16, v15);
          swift_release(KeyPath);
          return;
        }
      }
    }
    if (v10 != 0.0)
    {
      KeyPath = swift_getKeyPath(&unk_1001127E0);
      __chkstk_darwin(KeyPath);
      v18 = v5;
      v19 = 2;
      *(_QWORD *)&v21 = v5;
      v15 = sub_100003B3C(&qword_1001636B0, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_100112764);
      v16 = (char *)&type metadata for () + 8;
      goto LABEL_21;
    }
  }
}

uint64_t sub_1000C81B8()
{
  return sub_1000C7E34();
}

uint64_t sub_1000C81CC()
{
  return sub_1000C7CCC();
}

void sub_1000C81E0()
{
  sub_1000C7CEC();
}

double sub_1000C81F4()
{
  return sub_1000C7E54();
}

uint64_t sub_1000C8208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v10 = *a5;
  v11 = *a6;
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  v12 = *(_QWORD *)(v10 + 80);
  v13 = *(_QWORD *)(v10 + 88);
  v14 = *(_QWORD *)(v11 + 80);
  v15 = *(_QWORD *)(v11 + 88);
  v26 = 0;
  State.init(wrappedValue:)(&v26, &type metadata for PhoneWallpapersWatchFacesConfiguration);
  v16 = v23;
  *(_BYTE *)(a7 + 32) = v22;
  *(_QWORD *)(a7 + 40) = v16;
  v22 = v12;
  v23 = v14;
  v24 = v13;
  v25 = v15;
  type metadata accessor for PhoneWallpapersWatchFacesView(0, (uint64_t)&v22);
  v17 = *a5;
  WitnessTable = swift_getWitnessTable(&unk_100114B38, *a5);
  Bindable<A>.init(wrappedValue:)(a5, v17, WitnessTable);
  v19 = *a6;
  v20 = swift_getWitnessTable(&unk_10010C398, *a6);
  return Bindable<A>.init(wrappedValue:)(a6, v19, v20);
}

uint64_t type metadata accessor for PhoneWallpapersWatchFacesView(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for PhoneWallpapersWatchFacesView);
}

uint64_t sub_1000C8310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  Bindable.wrappedValue.getter(&v7, v5);
  return v7;
}

uint64_t storeEnumTagSinglePayload for PhoneWallpapersWatchFacesConfiguration(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000C83AC + 4 * byte_100112865[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000C83E0 + 4 * byte_100112860[v4]))();
}

uint64_t sub_1000C83E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C83E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C83F0);
  return result;
}

uint64_t sub_1000C83FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C8404);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000C8408(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C8410(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PhoneWallpapersWatchFacesConfiguration()
{
  return &type metadata for PhoneWallpapersWatchFacesConfiguration;
}

uint64_t sub_1000C842C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[5];

  v11[0] = &unk_1001128C0;
  v11[1] = &unk_1001128D8;
  v11[2] = &unk_1001128D8;
  v5 = type metadata accessor for PhoneWallpaperViewModel(255, a1[2], a1[4], a4);
  result = type metadata accessor for Bindable(319, v5);
  if (v8 <= 0x3F)
  {
    v11[3] = *(_QWORD *)(result - 8) + 64;
    v9 = type metadata accessor for WatchFacesViewModel(255, a1[3], a1[5], v7);
    result = type metadata accessor for Bindable(319, v9);
    if (v10 <= 0x3F)
    {
      v11[4] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 0, 5, v11, a1 + 6);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_1000C84F0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = (_QWORD *)a1;
  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v24 = *a2;
    *v5 = *a2;
    v5 = (_QWORD *)(v24 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v24);
  }
  else
  {
    v8 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v8;
    v9 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v9;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v10 = a2[5];
    *(_QWORD *)(a1 + 40) = v10;
    v11 = *(int *)(a3 + 60);
    v12 = a1 + v11;
    v13 = (uint64_t)a2 + v11;
    v14 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 32), a4);
    v15 = type metadata accessor for Bindable(0, v14);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v17 = swift_retain(v10);
    v16(v12, v13, v15, v17);
    v18 = *(int *)(a3 + 64);
    v19 = (char *)v5 + v18;
    v20 = (uint64_t)a2 + v18;
    v22 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 40), v21);
    v23 = type metadata accessor for Bindable(0, v22);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v19, v20, v23);
  }
  return v5;
}

uint64_t sub_1000C8620(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(a1 + 40));
  v4 = a1 + *(int *)(a2 + 60);
  v6 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 32), v5);
  v7 = type metadata accessor for Bindable(0, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
  v8 = a1 + *(int *)(a2 + 64);
  v10 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 40), v9);
  v11 = type metadata accessor for Bindable(0, v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v8, v11);
}

uint64_t sub_1000C86CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  v10 = *(int *)(a3 + 60);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 32), a4);
  v14 = type metadata accessor for Bindable(0, v13);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v16 = swift_retain(v9);
  v15(v11, v12, v14, v16);
  v17 = *(int *)(a3 + 64);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v21 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 40), v20);
  v22 = type metadata accessor for Bindable(0, v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v18, v19, v22);
  return a1;
}

uint64_t sub_1000C87D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  swift_retain(v9);
  swift_release(v8);
  v10 = *(int *)(a3 + 60);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v14 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 32), v13);
  v15 = type metadata accessor for Bindable(0, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v11, v12, v15);
  v16 = *(int *)(a3 + 64);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v20 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 40), v19);
  v21 = type metadata accessor for Bindable(0, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v17, v18, v21);
  return a1;
}

_OWORD *sub_1000C88E8(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  a1[2] = a2[2];
  v8 = *(int *)(a3 + 60);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 32), a4);
  v12 = type metadata accessor for Bindable(0, v11);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
  v13 = *(int *)(a3 + 64);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v17 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 40), v16);
  v18 = type metadata accessor for Bindable(0, v17);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v14, v15, v18);
  return a1;
}

uint64_t sub_1000C89B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v8);
  v9 = *(int *)(a3 + 60);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v13 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 32), v12);
  v14 = type metadata accessor for Bindable(0, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v10, v11, v14);
  v15 = *(int *)(a3 + 64);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v19 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 40), v18);
  v20 = type metadata accessor for Bindable(0, v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v16, v17, v20);
  return a1;
}

uint64_t sub_1000C8AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C8AAC);
}

uint64_t sub_1000C8AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 >= 0xFFFFFFFF)
      LODWORD(v5) = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 32), a4);
    v10 = type metadata accessor for Bindable(0, v9);
    v12 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v13 = v10;
      v14 = *(int *)(a3 + 60);
    }
    else
    {
      v15 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 40), v11);
      v13 = type metadata accessor for Bindable(0, v15);
      v12 = *(_QWORD *)(v13 - 8);
      v14 = *(int *)(a3 + 64);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1 + v14, a2, v13);
  }
}

uint64_t sub_1000C8B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C8B80);
}

uint64_t sub_1000C8B80(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 32), a4);
    v9 = type metadata accessor for Bindable(0, v8);
    v11 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      v12 = v9;
      v13 = *(int *)(a4 + 60);
    }
    else
    {
      v14 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a4 + 24), *(_QWORD *)(a4 + 40), v10);
      v12 = type metadata accessor for Bindable(0, v14);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a4 + 64);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v5 + v13, a2, a2, v12);
  }
  return result;
}

unint64_t sub_1000C8C48()
{
  unint64_t result;

  result = qword_100163758;
  if (!qword_100163758)
  {
    result = swift_getWitnessTable(&unk_100112940, &type metadata for PhoneWallpapersWatchFacesConfiguration);
    atomic_store(result, (unint64_t *)&qword_100163758);
  }
  return result;
}

uint64_t sub_1000C8C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  Bindable.wrappedValue.getter(&v7, v5);
  return v7;
}

uint64_t sub_1000C8CDC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[16];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v38 = a3;
  v4 = a1[2];
  v35 = a1[4];
  type metadata accessor for PhoneWallpaperView(255, v4, v35, a2);
  v5 = a1[3];
  v6 = a1[5];
  type metadata accessor for WatchFacesView(255, v5, v6, v7);
  v8 = type metadata accessor for _ConditionalContent(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for PhoneWallpapersWatchFacesHeader, v8, 0, 0);
  v10 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v10);
  v12 = type metadata accessor for VStack(0, v10, WitnessTable);
  v34 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v33 - v13;
  v15 = sub_1000034AC(&qword_100163760);
  v16 = type metadata accessor for ModifiedContent(0, v12, v15);
  v36 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v33 - v21;
  v40 = v4;
  v41 = v5;
  v42 = v35;
  v43 = v6;
  v44 = v37;
  v23 = static HorizontalAlignment.center.getter(v20);
  v24 = VStack.init(alignment:spacing:content:)(v23, 0, 1, sub_1000CB2A0, v39, v10, WitnessTable);
  v25 = static Alignment.center.getter(v24);
  v27 = v26;
  v28 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v12);
  v29 = sub_100021F80();
  View.background<A>(_:alignment:)(v29, v25, v27, v12, &type metadata for LightGradientBackground, v28, v29);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v12);
  v30 = sub_100007D40(&qword_100163768, &qword_100163760, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v45 = v28;
  v46 = v30;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  sub_1000F257C((uint64_t)v19, v16, (uint64_t)v22);
  v31 = *(void (**)(char *, uint64_t))(v36 + 8);
  v31(v19, v16);
  sub_1000E3B88((uint64_t)v22, v16, v38);
  return ((uint64_t (*)(char *, uint64_t))v31)(v22, v16);
}

double sub_1000C8F6C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t WitnessTable;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  double result;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD v104[2];
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  char *v115;

  v98 = a6;
  v11 = type metadata accessor for Optional(0, a3);
  __chkstk_darwin(v11);
  v79 = (char *)&v76 - v12;
  v83 = a5;
  v14 = type metadata accessor for WatchFacesView(0, a3, a5, v13);
  v80 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v82 = (uint64_t)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v81 = (uint64_t)&v76 - v17;
  v18 = type metadata accessor for Optional(0, a2);
  __chkstk_darwin(v18);
  v76 = (char *)&v76 - v19;
  v20 = a4;
  v22 = type metadata accessor for PhoneWallpaperView(0, a2, a4, v21);
  v77 = *(_QWORD *)(v22 - 8);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v78 = (uint64_t)&v76 - v26;
  v99 = v14;
  v97 = type metadata accessor for _ConditionalContent(0);
  v94 = *(_QWORD *)(v97 - 8);
  v27 = __chkstk_darwin(v97);
  v96 = (char *)&v76 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v92 = (char *)&v76 - v29;
  v30 = *(_QWORD *)(a1 + 8);
  v88 = *(_QWORD *)a1;
  v31 = *(_QWORD *)(a1 + 24);
  v87 = *(_QWORD *)(a1 + 16);
  v33 = *(_QWORD *)(a1 + 40);
  LOBYTE(v114) = *(_BYTE *)(a1 + 32);
  v32 = (char)v114;
  v115 = (char *)v33;
  v93 = v31;
  swift_bridgeObjectRetain(v31);
  v95 = v30;
  swift_bridgeObjectRetain(v30);
  v34 = sub_100003E70(&qword_100163770);
  State.projectedValue.getter(v34);
  v91 = v105;
  v85 = v106;
  v86 = v107;
  v35 = type metadata accessor for RemoteViewConfiguration();
  v36 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
  v90 = EnvironmentObject.init()(v35, v36);
  v84 = v37;
  LOBYTE(v105) = v32;
  v106 = v33;
  State.wrappedValue.getter(&v114, v34);
  v89 = v22;
  v105 = a2;
  v106 = a3;
  v107 = v20;
  v108 = v83;
  if ((v114 & 1) != 0)
  {
    v38 = type metadata accessor for PhoneWallpapersWatchFacesView(0, (uint64_t)&v105);
    v42 = (_QWORD *)sub_1000C8C8C(v38, v39, v40, v41);
    v43 = (uint64_t)v79;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v79, 1, 1, a3);
    v44 = v82;
    sub_100021470(v42, v43, v82);
    v45 = v99;
    WitnessTable = swift_getWitnessTable(&unk_10010BB48, v99);
    v47 = v81;
    sub_1000F257C(v44, v45, v81);
    v48 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
    v48(v44, v45);
    sub_1000E3B88(v47, v45, v44);
    v49 = swift_getWitnessTable(&unk_100114860, v22);
    v50 = v92;
    sub_1000E3C64(v44, v22, v45, v49, WitnessTable);
    v48(v44, v45);
    v48(v47, v45);
  }
  else
  {
    v51 = type metadata accessor for PhoneWallpapersWatchFacesView(0, (uint64_t)&v105);
    v55 = (_QWORD *)sub_1000C8310(v51, v52, v53, v54);
    v56 = (uint64_t)v76;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(v76, 1, 1, a2);
    sub_1000FB8F4(v55, v56, (uint64_t)v25);
    v57 = swift_getWitnessTable(&unk_100114860, v22);
    v58 = v78;
    sub_1000F257C((uint64_t)v25, v22, v78);
    v59 = *(void (**)(char *, uint64_t))(v77 + 8);
    v59(v25, v22);
    sub_1000E3B88(v58, v22, (uint64_t)v25);
    v60 = v99;
    v61 = swift_getWitnessTable(&unk_10010BB48, v99);
    v50 = v92;
    sub_1000E3BA0((uint64_t)v25, v22, v60, v57, v61);
    v59(v25, v22);
    v59((char *)v58, v22);
  }
  v62 = v95;
  v105 = v88;
  v106 = v95;
  v63 = v93;
  v107 = v87;
  v108 = v93;
  v64 = v91;
  v65 = v85;
  v109 = v91;
  v110 = v85;
  v111 = v86;
  v66 = v90;
  v112 = v90;
  v113 = v84;
  v114 = &v105;
  v67 = v94;
  v69 = v96;
  v68 = v97;
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v96, v50, v97);
  v115 = v69;
  swift_retain(v66);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v63);
  swift_retain(v64);
  swift_retain(v65);
  v104[0] = &type metadata for PhoneWallpapersWatchFacesHeader;
  v104[1] = v68;
  v102 = sub_1000CB2B0();
  v70 = swift_getWitnessTable(&unk_100114860, v89);
  v71 = swift_getWitnessTable(&unk_10010BB48, v99);
  v100 = v70;
  v101 = v71;
  v103 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v68);
  sub_1000E4768((uint64_t *)&v114, 2uLL, (uint64_t)v104);
  v72 = *(void (**)(char *, uint64_t))(v67 + 8);
  v72(v50, v68);
  swift_release(v66);
  swift_release(v65);
  swift_release(v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v72(v69, v68);
  v73 = v109;
  v74 = v112;
  swift_release(v110);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v73);
  *(_QWORD *)&result = swift_release(v74).n128_u64[0];
  return result;
}

uint64_t sub_1000C9644@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;

  v2 = v1;
  v4 = sub_100003E70(&qword_100163780);
  __chkstk_darwin(v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_100163788);
  __chkstk_darwin(v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003E70(&qword_100163790);
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003E70(&qword_100163798);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static HorizontalAlignment.leading.getter(v14);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v17 = sub_100003E70(&qword_1001637A0);
  v18 = sub_1000C9924(v2, (uint64_t)&v6[*(int *)(v17 + 44)]);
  v19 = static Alignment.leading.getter(v18);
  sub_1000E6214(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v9, 0.0, 1, 0.0, 1, v19, v20);
  v21 = sub_100008194((uint64_t)v6, &qword_100163780);
  LOBYTE(v6) = static Edge.Set.horizontal.getter(v21);
  v22 = EdgeInsets.init(_all:)(20.0);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  sub_100007ADC((uint64_t)v9, (uint64_t)v12, &qword_100163788);
  v29 = &v12[*(int *)(v10 + 36)];
  *v29 = (char)v6;
  *((double *)v29 + 1) = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  v29[40] = 0;
  v30 = sub_100008194((uint64_t)v9, &qword_100163788);
  LOBYTE(v6) = static Edge.Set.top.getter(v30);
  v31 = EdgeInsets.init(_all:)(36.0);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  sub_100007ADC((uint64_t)v12, (uint64_t)v16, &qword_100163790);
  v38 = &v16[*(int *)(v13 + 36)];
  *v38 = (char)v6;
  *((double *)v38 + 1) = v31;
  *((_QWORD *)v38 + 2) = v33;
  *((_QWORD *)v38 + 3) = v35;
  *((_QWORD *)v38 + 4) = v37;
  v38[40] = 0;
  v39 = sub_100008194((uint64_t)v12, &qword_100163790);
  LOBYTE(v6) = static Edge.Set.bottom.getter(v39);
  v40 = EdgeInsets.init(_all:)(32.0);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  sub_100007ADC((uint64_t)v16, a1, &qword_100163798);
  v47 = a1 + *(int *)(sub_100003E70(&qword_1001637A8) + 36);
  *(_BYTE *)v47 = (_BYTE)v6;
  *(double *)(v47 + 8) = v40;
  *(_QWORD *)(v47 + 16) = v42;
  *(_QWORD *)(v47 + 24) = v44;
  *(_QWORD *)(v47 + 32) = v46;
  *(_BYTE *)(v47 + 40) = 0;
  return sub_100008194((uint64_t)v16, &qword_100163798);
}

uint64_t sub_1000C9924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t KeyPath;
  uint64_t v119;
  char v120;
  __int128 v121;
  char v122;
  _BYTE v123[16];
  __int128 v124;
  char v125;
  uint64_t v126;
  void *v127;

  v4 = sub_100003E70(&qword_1001637B0);
  __chkstk_darwin(v4);
  v102 = (uint64_t *)((char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v101 = sub_100003E70(&qword_1001637B8);
  v6 = __chkstk_darwin(v101);
  v103 = (uint64_t)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v115 = (uint64_t)&v97 - v8;
  v124 = *(_OWORD *)(a1 + 32);
  v125 = *(_BYTE *)(a1 + 48);
  v121 = *(_OWORD *)(a1 + 32);
  v122 = *(_BYTE *)(a1 + 48);
  v9 = sub_100003E70(&qword_1001637C0);
  Binding.wrappedValue.getter(v9);
  if ((v126 & 1) != 0)
  {
    v10 = 0x8000000100115C40;
    v11 = 0xD000000000000025;
  }
  else
  {
    v11 = 0xD000000000000029;
    v10 = 0x8000000100117480;
  }
  v12 = LocalizedStringKey.init(stringLiteral:)(v11, v10);
  v16 = Text.init(_:tableName:bundle:comment:)(v12, v14, v13 & 1, v15, 0, 0, 0, 0, 0, 256);
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  v23 = static Font.title2.getter(v16);
  static Font.Weight.bold.getter(v23);
  v24 = Font.weight(_:)(v23);
  swift_release(v23);
  v113 = Text.font(_:)(v24, v16, v18, v22, v20);
  v119 = v25;
  v27 = v26;
  v114 = v28;
  swift_release(v24);
  sub_10000BFF8(v16, v18, v22);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_100112A30);
  v112 = swift_getKeyPath(&unk_100112A60);
  sub_100007A98(a1 + 16, (uint64_t)v123, (uint64_t *)&unk_100160CB0);
  v29 = sub_100007A98((uint64_t)v123, (uint64_t)&v126, (uint64_t *)&unk_100160CB0);
  v30 = v127;
  if (v127)
  {
    LODWORD(v98) = v27;
    v104 = a1;
    v31 = v126;
    v121 = v124;
    v122 = v125;
    Binding.wrappedValue.getter(v9);
    v32 = sub_1000CA11C(v31, v30, v120);
    LOWORD(v96) = 256;
    v36 = Text.init(_:tableName:bundle:comment:)(v32, v34, v33 & 1, v35, 0, 0, 0, 0, 0, v96);
    v38 = v37;
    v40 = v39;
    v42 = v41 & 1;
    v43 = static Font.subheadline.getter(v36);
    static Font.Weight.regular.getter();
    v44 = Font.weight(_:)(v43);
    swift_release(v43);
    v45 = Text.font(_:)(v44, v36, v38, v42, v40);
    v47 = v46;
    v49 = v48;
    v51 = v50;
    swift_release(v44);
    sub_10000BFF8(v36, v38, v42);
    swift_bridgeObjectRelease();
    if (qword_10015CE58 != -1)
      swift_once(&qword_10015CE58, sub_1000382B4);
    v52 = qword_10016F650;
    *(_QWORD *)&v121 = qword_10016F650;
    swift_retain(qword_10016F650);
    v111 = Text.foregroundStyle<A>(_:)(&v121, v45, v47, v49 & 1, v51, &type metadata for Color, &protocol witness table for Color);
    v110 = v53;
    v109 = v54;
    v108 = v55 & 1;
    sub_10000BFF8(v45, v47, v49 & 1);
    swift_release(v52);
    swift_bridgeObjectRelease();
    v107 = swift_getKeyPath(&unk_100112A30);
    v106 = swift_getKeyPath(&unk_100112A60);
    v56 = static Edge.Set.top.getter(v106);
    v105 = EdgeInsets.init(_all:)(3.0);
    v117 = v57;
    v100 = v58;
    v99 = v59;
    v116 = v56;
    v60 = 2;
    a1 = v104;
    LOBYTE(v27) = v98;
  }
  else
  {
    v111 = 0;
    v110 = 0;
    v108 = 0;
    v109 = 0;
    v107 = 0;
    v60 = 0;
    v106 = 0;
    v116 = 0;
    v105 = 0.0;
    v117 = 0;
    v100 = 0;
    v99 = 0;
  }
  v61 = v27 & 1;
  LODWORD(v104) = v27 & 1;
  v62 = static VerticalAlignment.center.getter(v29);
  v63 = (uint64_t)v102;
  *v102 = v62;
  *(_QWORD *)(v63 + 8) = 0x4020000000000000;
  *(_BYTE *)(v63 + 16) = 0;
  v64 = sub_100003E70(&qword_1001637C8);
  v65 = sub_1000CA208(a1, (char *)(v63 + *(int *)(v64 + 44)));
  v66 = static Edge.Set.top.getter(v65);
  v67 = EdgeInsets.init(_all:)(16.0);
  v69 = v68;
  v71 = v70;
  v73 = v72;
  v74 = v103;
  sub_100007ADC(v63, v103, &qword_1001637B0);
  v75 = v74 + *(int *)(v101 + 36);
  *(_BYTE *)v75 = v66;
  *(double *)(v75 + 8) = v67;
  *(_QWORD *)(v75 + 16) = v69;
  *(_QWORD *)(v75 + 24) = v71;
  *(_QWORD *)(v75 + 32) = v73;
  *(_BYTE *)(v75 + 40) = 0;
  sub_100008194(v63, &qword_1001637B0);
  v76 = v115;
  sub_100007A98(v74, v115, &qword_1001637B8);
  sub_100007ADC(v76, v74, &qword_1001637B8);
  v77 = v113;
  v78 = v119;
  *(_QWORD *)a2 = v113;
  *(_QWORD *)(a2 + 8) = v78;
  *(_BYTE *)(a2 + 16) = v61;
  v79 = v114;
  v80 = KeyPath;
  *(_QWORD *)(a2 + 24) = v114;
  *(_QWORD *)(a2 + 32) = v80;
  *(_QWORD *)(a2 + 40) = 2;
  *(_BYTE *)(a2 + 48) = 0;
  v81 = v112;
  *(_QWORD *)(a2 + 56) = v112;
  *(_BYTE *)(a2 + 64) = 0;
  v82 = v110;
  *(_QWORD *)(a2 + 72) = v111;
  *(_QWORD *)(a2 + 80) = v82;
  v83 = v109;
  *(_QWORD *)(a2 + 88) = v108;
  *(_QWORD *)(a2 + 96) = v83;
  *(_QWORD *)(a2 + 104) = v107;
  *(_QWORD *)(a2 + 112) = v60;
  v84 = v106;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = v84;
  v85 = v116;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = v85;
  v116 = v85;
  v98 = v60;
  v86 = v117;
  *(double *)(a2 + 152) = v105;
  *(_QWORD *)(a2 + 160) = v86;
  v117 = v86;
  v87 = v99;
  *(_QWORD *)(a2 + 168) = v100;
  *(_QWORD *)(a2 + 176) = v87;
  *(_BYTE *)(a2 + 184) = 0;
  v88 = sub_100003E70(&qword_1001637D0);
  sub_100007ADC(v74, a2 + *(int *)(v88 + 64), &qword_1001637B8);
  sub_10000C008(v77, v119, v104);
  swift_bridgeObjectRetain(v79);
  swift_retain(KeyPath);
  swift_retain(v81);
  v89 = v111;
  v90 = v110;
  LOBYTE(v81) = v108;
  v91 = v109;
  v92 = v107;
  v93 = v60;
  v94 = v106;
  sub_10003953C(v111, v110, v108, v109, v107, v93, 0, v106);
  sub_100008194(v115, &qword_1001637B8);
  sub_100008194(v74, &qword_1001637B8);
  sub_10003958C(v89, v90, v81, v91, v92, v98, 0, v94);
  sub_10000BFF8(v113, v119, v104);
  swift_release(v112);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000CA11C(uint64_t a1, void *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v14;

  v6 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(41, 1);
    v10 = 0x80000001001174B0;
    v9 = 0xD000000000000029;
  }
  else
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(45, 1);
    v9 = 0xD00000000000002DLL;
    v10 = 0x80000001001174E0;
  }
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v9);
  v11._countAndFlagsBits = a1;
  v11._object = a2;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v11);
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v12);
  return LocalizedStringKey.init(stringInterpolation:)(v8);
}

uint64_t sub_1000CA208@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char v60[16];
  uint64_t v61;
  char v62[16];
  uint64_t v63;

  v58 = a2;
  v3 = type metadata accessor for PlainButtonStyle(0);
  v55 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003E70(&qword_1001637D8);
  v54 = *(_QWORD *)(v6 - 8);
  v7 = v6;
  __chkstk_darwin(v6);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003E70(&qword_1001637E0);
  v59 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v57 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v56 = (char *)&v48 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v48 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v48 - v18;
  v51 = (char *)&v48 - v18;
  v20 = swift_allocObject(&unk_100153140, 88, 7);
  v21 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v20 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v20 + 64) = v21;
  *(_QWORD *)(v20 + 80) = *(_QWORD *)(a1 + 64);
  v22 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v20 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v20 + 32) = v22;
  v63 = a1;
  sub_1000CB650((_QWORD *)a1);
  v23 = sub_100003E70(&qword_1001637E8);
  v53 = v23;
  v52 = sub_1000CB6B4();
  v24 = Button.init(action:label:)(sub_1000CB640, v20, sub_1000CB648, v62, v23, v52);
  PlainButtonStyle.init()(v24);
  v25 = sub_100007D40(&qword_100163828, &qword_1001637D8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v50 = v25;
  v26 = sub_100003B3C(&qword_10015E348, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v48 = v17;
  v49 = v26;
  v27 = v17;
  v28 = v7;
  v29 = v7;
  v30 = v3;
  View.buttonStyle<A>(_:)(v5, v29, v3, v25, v26);
  v55 = *(_QWORD *)(v55 + 8);
  ((void (*)(char *, uint64_t))v55)(v5, v3);
  v31 = *(void (**)(char *, uint64_t))(v54 + 8);
  v31(v9, v28);
  v32 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
  v32(v19, v27, v10);
  v33 = swift_allocObject(&unk_100153168, 88, 7);
  v34 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v33 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v33 + 64) = v34;
  *(_QWORD *)(v33 + 80) = *(_QWORD *)(a1 + 64);
  v35 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v33 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v33 + 32) = v35;
  v61 = a1;
  sub_1000CB650((_QWORD *)a1);
  v36 = Button.init(action:label:)(sub_1000CB838, v33, sub_1000CB840, v60, v53, v52);
  PlainButtonStyle.init()(v36);
  v37 = v56;
  View.buttonStyle<A>(_:)(v5, v28, v30, v50, v49);
  ((void (*)(char *, uint64_t))v55)(v5, v30);
  v31(v9, v28);
  v38 = v48;
  v39 = v37;
  v32(v48, v37, v10);
  v40 = v59;
  v41 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
  v42 = v51;
  v41(v39, v51, v10);
  v43 = v57;
  v41(v57, v38, v10);
  v44 = v58;
  v41(v58, v39, v10);
  v45 = sub_100003E70(&qword_100163830);
  v41(&v44[*(int *)(v45 + 48)], v43, v10);
  v46 = *(void (**)(char *, uint64_t))(v40 + 8);
  v46(v38, v10);
  v46(v42, v10);
  v46(v43, v10);
  return ((uint64_t (*)(char *, uint64_t))v46)(v39, v10);
}

void sub_1000CA600(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  char v11;

  v10 = *(_OWORD *)(a1 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  v9 = 0;
  v2 = sub_100003E70(&qword_1001637C0);
  Binding.wrappedValue.setter(&v9, v2);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v4 = *(_QWORD *)a1;
    v5 = *(_QWORD *)(a1 + 8);
    swift_retain(v3);
    sub_1000DB03C(v4, v5, 8, 10, 19, 0, 3u, v3);
    swift_release(v3);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 64);
    v7 = type metadata accessor for RemoteViewConfiguration();
    v8 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v6, v7, v8);
    __break(1u);
  }
}

uint64_t sub_1000CA6E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t KeyPath;
  char v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  char v95;
  char v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  char v110;
  char v111;
  __int128 v112;
  char v113;

  v92 = a2;
  v89 = sub_100003E70(&qword_10015E338);
  __chkstk_darwin(v89);
  v91 = (uint64_t)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v87);
  v90 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100003E70(&qword_1001637E8);
  __chkstk_darwin(v88);
  v6 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000029, 0x8000000100117540);
  v11 = Text.init(_:tableName:bundle:comment:)(v7, v9, v8 & 1, v10, 0, 0, 0, 0, 0, 256);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = static Font.footnote.getter(v11);
  static Font.Weight.semibold.getter();
  v19 = Font.weight(_:)(v18);
  swift_release(v18);
  v20 = Text.font(_:)(v19, v11, v13, v17, v15);
  v22 = v21;
  LODWORD(v86) = v23;
  v83 = v24;
  swift_release(v19);
  sub_10000BFF8(v11, v13, v17);
  swift_bridgeObjectRelease();
  v112 = *(_OWORD *)(a1 + 32);
  v113 = *(_BYTE *)(a1 + 48);
  v97 = *(_OWORD *)(a1 + 32);
  LOBYTE(v98) = *(_BYTE *)(a1 + 48);
  v25 = sub_100003E70(&qword_1001637C0);
  v26 = Binding.wrappedValue.getter(v25);
  if ((v111 & 1) != 0)
  {
    v27 = static Color.primary.getter(v26);
  }
  else
  {
    if (qword_10015CE48 != -1)
      swift_once(&qword_10015CE48, sub_10003828C);
    v27 = qword_10016F640;
    swift_retain(qword_10016F640);
  }
  *(_QWORD *)&v97 = v27;
  v28 = v86 & 1;
  v29 = Text.foregroundStyle<A>(_:)(&v97, v20, v22, v86 & 1, *(_QWORD *)&v83, &type metadata for Color, &protocol witness table for Color);
  v85 = v30;
  v86 = v29;
  v32 = v31;
  v84 = v33;
  sub_10000BFF8(v20, v22, v28);
  swift_release(v27);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_100112A30);
  v35 = static Edge.Set.horizontal.getter(KeyPath);
  v36 = EdgeInsets.init(_all:)(12.0);
  v82 = v37;
  v83 = v36;
  v80 = v39;
  v81 = v38;
  v41 = static Edge.Set.top.getter(v40);
  v42 = EdgeInsets.init(_all:)(6.5);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  v50 = static Edge.Set.bottom.getter(v49);
  v51 = EdgeInsets.init(_all:)(7.5);
  v53 = v52;
  v55 = v54;
  v57 = v56;
  v97 = v112;
  LOBYTE(v98) = v113;
  v58 = Binding.wrappedValue.getter(v25);
  if ((v111 & 1) != 0)
  {
    if (qword_10015CE48 != -1)
      swift_once(&qword_10015CE48, sub_10003828C);
    v59 = qword_10016F640;
    swift_retain(qword_10016F640);
  }
  else
  {
    v60 = static Color.primary.getter(v58);
    v59 = v60;
  }
  v96 = v32 & 1;
  v95 = 0;
  v94 = 0;
  v93 = 0;
  v111 = 0;
  v61 = static Edge.Set.all.getter(v60);
  *(_QWORD *)&v97 = v86;
  *((_QWORD *)&v97 + 1) = v85;
  LOBYTE(v98) = v32 & 1;
  *((_QWORD *)&v98 + 1) = v84;
  *(_QWORD *)&v99 = KeyPath;
  *((_QWORD *)&v99 + 1) = 1;
  LOBYTE(v100) = 0;
  BYTE8(v100) = v35;
  *(double *)&v101 = v83;
  *((_QWORD *)&v101 + 1) = v82;
  *(_QWORD *)&v102 = v81;
  *((_QWORD *)&v102 + 1) = v80;
  LOBYTE(v103) = 0;
  BYTE8(v103) = v41;
  *(double *)&v104 = v42;
  *((_QWORD *)&v104 + 1) = v44;
  *(_QWORD *)&v105 = v46;
  *((_QWORD *)&v105 + 1) = v48;
  LOBYTE(v106) = 0;
  BYTE8(v106) = v50;
  *(double *)&v107 = v51;
  *((_QWORD *)&v107 + 1) = v53;
  *(_QWORD *)&v108 = v55;
  *((_QWORD *)&v108 + 1) = v57;
  LOBYTE(v109) = v111;
  *((_QWORD *)&v109 + 1) = v59;
  v110 = v61;
  v62 = v90;
  v63 = &v90[*(int *)(v87 + 20)];
  v64 = enum case for RoundedCornerStyle.continuous(_:);
  v65 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 104))(v63, v64, v65);
  __asm { FMOV            V0.2D, #16.0 }
  *v62 = _Q0;
  v71 = v91;
  sub_10001BF60((uint64_t)v62, v91);
  *(_WORD *)(v71 + *(int *)(v89 + 36)) = 256;
  sub_100007ADC(v71, (uint64_t)&v6[*(int *)(v88 + 36)], &qword_10015E338);
  v72 = v108;
  *((_OWORD *)v6 + 10) = v107;
  *((_OWORD *)v6 + 11) = v72;
  *((_OWORD *)v6 + 12) = v109;
  v6[208] = v110;
  v73 = v104;
  *((_OWORD *)v6 + 6) = v103;
  *((_OWORD *)v6 + 7) = v73;
  v74 = v106;
  *((_OWORD *)v6 + 8) = v105;
  *((_OWORD *)v6 + 9) = v74;
  v75 = v100;
  *((_OWORD *)v6 + 2) = v99;
  *((_OWORD *)v6 + 3) = v75;
  v76 = v102;
  *((_OWORD *)v6 + 4) = v101;
  *((_OWORD *)v6 + 5) = v76;
  v77 = v98;
  *(_OWORD *)v6 = v97;
  *((_OWORD *)v6 + 1) = v77;
  sub_1000CB848((uint64_t)&v97);
  sub_100008194(v71, &qword_10015E338);
  sub_10001BFA4((uint64_t)v62);
  sub_1000CB8A0((uint64_t)&v97);
  return sub_100007A98((uint64_t)v6, v92, &qword_1001637E8);
}

void sub_1000CAC10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  char v11;

  v10 = *(_OWORD *)(a1 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  v9 = 1;
  v2 = sub_100003E70(&qword_1001637C0);
  Binding.wrappedValue.setter(&v9, v2);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v4 = *(_QWORD *)a1;
    v5 = *(_QWORD *)(a1 + 8);
    swift_retain(v3);
    sub_1000DB03C(v4, v5, 8, 10, 20, 0, 3u, v3);
    swift_release(v3);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 64);
    v7 = type metadata accessor for RemoteViewConfiguration();
    v8 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v6, v7, v8);
    __break(1u);
  }
}

uint64_t sub_1000CACF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t KeyPath;
  char v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  char v95;
  char v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  char v110;
  char v111;
  __int128 v112;
  char v113;

  v92 = a2;
  v89 = sub_100003E70(&qword_10015E338);
  __chkstk_darwin(v89);
  v91 = (uint64_t)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v87);
  v90 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100003E70(&qword_1001637E8);
  __chkstk_darwin(v88);
  v6 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000025, 0x8000000100117510);
  v11 = Text.init(_:tableName:bundle:comment:)(v7, v9, v8 & 1, v10, 0, 0, 0, 0, 0, 256);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = static Font.footnote.getter(v11);
  static Font.Weight.semibold.getter();
  v19 = Font.weight(_:)(v18);
  swift_release(v18);
  v20 = Text.font(_:)(v19, v11, v13, v17, v15);
  v22 = v21;
  LODWORD(v86) = v23;
  v83 = v24;
  swift_release(v19);
  sub_10000BFF8(v11, v13, v17);
  swift_bridgeObjectRelease();
  v112 = *(_OWORD *)(a1 + 32);
  v113 = *(_BYTE *)(a1 + 48);
  v97 = *(_OWORD *)(a1 + 32);
  LOBYTE(v98) = *(_BYTE *)(a1 + 48);
  v25 = sub_100003E70(&qword_1001637C0);
  v26 = Binding.wrappedValue.getter(v25);
  if (v111 == 1)
  {
    if (qword_10015CE48 != -1)
      swift_once(&qword_10015CE48, sub_10003828C);
    v27 = qword_10016F640;
    swift_retain(qword_10016F640);
  }
  else
  {
    v27 = static Color.primary.getter(v26);
  }
  *(_QWORD *)&v97 = v27;
  v28 = v86 & 1;
  v29 = Text.foregroundStyle<A>(_:)(&v97, v20, v22, v86 & 1, *(_QWORD *)&v83, &type metadata for Color, &protocol witness table for Color);
  v85 = v30;
  v86 = v29;
  v32 = v31;
  v84 = v33;
  sub_10000BFF8(v20, v22, v28);
  swift_release(v27);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_100112A30);
  v35 = static Edge.Set.horizontal.getter(KeyPath);
  v36 = EdgeInsets.init(_all:)(12.0);
  v82 = v37;
  v83 = v36;
  v80 = v39;
  v81 = v38;
  v41 = static Edge.Set.top.getter(v40);
  v42 = EdgeInsets.init(_all:)(6.5);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  v50 = static Edge.Set.bottom.getter(v49);
  v51 = EdgeInsets.init(_all:)(7.5);
  v53 = v52;
  v55 = v54;
  v57 = v56;
  v97 = v112;
  LOBYTE(v98) = v113;
  v58 = Binding.wrappedValue.getter(v25);
  if (v111 == 1)
  {
    v59 = static Color.primary.getter(v58);
    v60 = v59;
  }
  else
  {
    if (qword_10015CE48 != -1)
      swift_once(&qword_10015CE48, sub_10003828C);
    v60 = qword_10016F640;
    swift_retain(qword_10016F640);
  }
  v96 = v32 & 1;
  v95 = 0;
  v94 = 0;
  v93 = 0;
  v111 = 0;
  v61 = static Edge.Set.all.getter(v59);
  *(_QWORD *)&v97 = v86;
  *((_QWORD *)&v97 + 1) = v85;
  LOBYTE(v98) = v32 & 1;
  *((_QWORD *)&v98 + 1) = v84;
  *(_QWORD *)&v99 = KeyPath;
  *((_QWORD *)&v99 + 1) = 1;
  LOBYTE(v100) = 0;
  BYTE8(v100) = v35;
  *(double *)&v101 = v83;
  *((_QWORD *)&v101 + 1) = v82;
  *(_QWORD *)&v102 = v81;
  *((_QWORD *)&v102 + 1) = v80;
  LOBYTE(v103) = 0;
  BYTE8(v103) = v41;
  *(double *)&v104 = v42;
  *((_QWORD *)&v104 + 1) = v44;
  *(_QWORD *)&v105 = v46;
  *((_QWORD *)&v105 + 1) = v48;
  LOBYTE(v106) = 0;
  BYTE8(v106) = v50;
  *(double *)&v107 = v51;
  *((_QWORD *)&v107 + 1) = v53;
  *(_QWORD *)&v108 = v55;
  *((_QWORD *)&v108 + 1) = v57;
  LOBYTE(v109) = v111;
  *((_QWORD *)&v109 + 1) = v60;
  v110 = v61;
  v62 = v90;
  v63 = &v90[*(int *)(v87 + 20)];
  v64 = enum case for RoundedCornerStyle.continuous(_:);
  v65 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 104))(v63, v64, v65);
  __asm { FMOV            V0.2D, #16.0 }
  *v62 = _Q0;
  v71 = v91;
  sub_10001BF60((uint64_t)v62, v91);
  *(_WORD *)(v71 + *(int *)(v89 + 36)) = 256;
  sub_100007ADC(v71, (uint64_t)&v6[*(int *)(v88 + 36)], &qword_10015E338);
  v72 = v108;
  *((_OWORD *)v6 + 10) = v107;
  *((_OWORD *)v6 + 11) = v72;
  *((_OWORD *)v6 + 12) = v109;
  v6[208] = v110;
  v73 = v104;
  *((_OWORD *)v6 + 6) = v103;
  *((_OWORD *)v6 + 7) = v73;
  v74 = v106;
  *((_OWORD *)v6 + 8) = v105;
  *((_OWORD *)v6 + 9) = v74;
  v75 = v100;
  *((_OWORD *)v6 + 2) = v99;
  *((_OWORD *)v6 + 3) = v75;
  v76 = v102;
  *((_OWORD *)v6 + 4) = v101;
  *((_OWORD *)v6 + 5) = v76;
  v77 = v98;
  *(_OWORD *)v6 = v97;
  *((_OWORD *)v6 + 1) = v77;
  sub_1000CB848((uint64_t)&v97);
  sub_100008194(v71, &qword_10015E338);
  sub_10001BFA4((uint64_t)v62);
  sub_1000CB8A0((uint64_t)&v97);
  return sub_100007A98((uint64_t)v6, v92, &qword_1001637E8);
}

uint64_t sub_1000CB22C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C9644(a1);
}

uint64_t sub_1000CB26C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v4[2];

  v2 = *(_OWORD *)(a2 + 32);
  v4[0] = *(_OWORD *)(a2 + 16);
  v4[1] = v2;
  return swift_getOpaqueTypeConformance2(v4, &unk_10011B118, 1);
}

double sub_1000CB2A0@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000C8F6C(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

unint64_t sub_1000CB2B0()
{
  unint64_t result;

  result = qword_100163778;
  if (!qword_100163778)
  {
    result = swift_getWitnessTable(&unk_1001129E0, &type metadata for PhoneWallpapersWatchFacesHeader);
    atomic_store(result, (unint64_t *)&qword_100163778);
  }
  return result;
}

uint64_t destroy for PhoneWallpapersWatchFacesHeader(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_release(a1[4]);
  swift_release(a1[5]);
  return swift_release(a1[7]);
}

uint64_t initializeWithCopy for PhoneWallpapersWatchFacesHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v8);
  return a1;
}

uint64_t assignWithCopy for PhoneWallpapersWatchFacesHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  swift_retain(v9);
  swift_release(v8);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_retain(v10);
  swift_release(v11);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v13;
  swift_retain(v13);
  swift_release(v12);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for PhoneWallpapersWatchFacesHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v7);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release(v8);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

ValueMetadata *type metadata accessor for PhoneWallpapersWatchFacesHeader()
{
  return &type metadata for PhoneWallpapersWatchFacesHeader;
}

uint64_t sub_1000CB508(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t WitnessTable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1[1];
  v5 = a1[3];
  type metadata accessor for PhoneWallpaperView(255, *a1, a1[2], a4);
  type metadata accessor for WatchFacesView(255, v4, v5, v6);
  v7 = type metadata accessor for _ConditionalContent(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for PhoneWallpapersWatchFacesHeader, v7, 0, 0);
  v9 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v9);
  v11 = type metadata accessor for VStack(255, v9, WitnessTable);
  v12 = sub_1000034AC(&qword_100163760);
  v13 = type metadata accessor for ModifiedContent(255, v11, v12);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v11);
  sub_100007D40(&qword_100163768, &qword_100163760, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
}

uint64_t sub_1000CB61C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011B158, 1);
}

void sub_1000CB640()
{
  uint64_t v0;

  sub_1000CA600(v0 + 16);
}

uint64_t sub_1000CB648@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000CA6E0(*(_QWORD *)(v1 + 16), a1);
}

_QWORD *sub_1000CB650(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  swift_retain(a1[7]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

unint64_t sub_1000CB6B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001637F0;
  if (!qword_1001637F0)
  {
    v1 = sub_1000034AC(&qword_1001637E8);
    sub_1000CB738();
    sub_100007D40(&qword_10015E330, &qword_10015E338, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001637F0);
  }
  return result;
}

unint64_t sub_1000CB738()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001637F8;
  if (!qword_1001637F8)
  {
    v1 = sub_1000034AC(&qword_100163800);
    sub_100014600(&qword_100163808, &qword_100163810, (void (*)(void))sub_1000CB7D4);
    sub_100007D40(&qword_10015E320, &qword_10015E328, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001637F8);
  }
  return result;
}

uint64_t sub_1000CB7D4()
{
  return sub_100014600(&qword_100163818, &qword_100163820, (void (*)(void))sub_10008A84C);
}

uint64_t sub_1000CB7F4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 88, 7);
}

void sub_1000CB838()
{
  uint64_t v0;

  sub_1000CAC10(v0 + 16);
}

uint64_t sub_1000CB840@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000CACF4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000CB848(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 200);
  sub_10000C008(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t sub_1000CB8A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 200);
  sub_10000BFF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v3);
  swift_release(v2);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000CB8F8()
{
  return sub_100014600(&qword_100163838, &qword_1001637A8, (void (*)(void))sub_1000CB924);
}

uint64_t sub_1000CB924()
{
  return sub_100014600(&qword_100163840, &qword_100163798, (void (*)(void))sub_1000CB940);
}

uint64_t sub_1000CB940()
{
  return sub_100014600(&qword_100163848, &qword_100163790, (void (*)(void))sub_1000CB95C);
}

unint64_t sub_1000CB95C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163850;
  if (!qword_100163850)
  {
    v1 = sub_1000034AC(&qword_100163788);
    sub_100007D40(&qword_100163858, &qword_100163780, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163850);
  }
  return result;
}

uint64_t sub_1000CB9E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v4;
  _QWORD v6[3];

  KeyPath = swift_getKeyPath(&unk_100112B10);
  v6[0] = v1;
  v4 = sub_1000CBEF4();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v6, KeyPath, v4);
  swift_release(KeyPath);
  swift_beginAccess(v1 + 56, v6, 0, 0);
  return sub_10009B338(v1 + 56, a1);
}

uint64_t sub_1000CBA70(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  _QWORD *v11;
  _BYTE v12[40];

  sub_1000081D0(a1, (uint64_t)v12);
  KeyPath = swift_getKeyPath(&unk_100112B10);
  v9 = v1;
  v10 = v12;
  v11 = v1;
  v4 = sub_1000CBEF4();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, KeyPath, sub_100011ADC, &v8, (char *)&type metadata for () + 8, v4);
  swift_release(KeyPath);
  sub_100008194((uint64_t)v12, &qword_10015D968);
  v5 = v1[5];
  v6 = v1[6];
  sub_100008170(v1 + 2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
}

uint64_t sub_1000CBB48()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for SetlistSongPlaybackController(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_1000CBBE4();
  qword_10016F6B8 = result;
  return result;
}

uint64_t sub_1000CBB84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + 56;
  swift_beginAccess(a1 + 56, v5, 33, 0);
  sub_1000CBF3C(a2, v3);
  return swift_endAccess(v5);
}

uint64_t sub_1000CBBE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  os_unfair_lock_s *v6;
  uint64_t *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char *v13;
  _UNKNOWN **v14;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _UNKNOWN **v19;

  v1 = v0;
  v2 = sub_100003E70(&qword_100163928);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  ObservationRegistrar.init()(v3);
  if (qword_10015CF00 != -1)
    swift_once(&qword_10015CF00, sub_1000D6E7C);
  v6 = *(os_unfair_lock_s **)(qword_10016F6C0 + 16);
  v7 = (uint64_t *)&v6[4];
  v8 = v6 + 6;
  os_unfair_lock_lock(v6 + 6);
  sub_1000D6EB8(v7, (uint64_t)v5);
  os_unfair_lock_unlock(v8);
  v9 = type metadata accessor for MusicSubscription(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    sub_100008194((uint64_t)v5, &qword_100163928);
  }
  else
  {
    v11 = MusicSubscription.canBecomeSubscriber.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v5, v9);
    if ((v11 & 1) == 0)
    {
      v12 = type metadata accessor for AppleMusicPlayer(0);
      v13 = (char *)swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
      v13[16] = 0;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_OWORD *)(v13 + 56) = 0u;
      *((_QWORD *)v13 + 9) = 0;
      ObservationRegistrar.init()(v13);
      v14 = &off_100154818;
      goto LABEL_8;
    }
  }
  v12 = type metadata accessor for MusicPreviewPlayer(0);
  v13 = (char *)objc_msgSend(objc_allocWithZone((Class)v12), "init");
  v14 = &off_100152F28;
LABEL_8:
  v18 = v12;
  v19 = v14;
  *(_QWORD *)&v17 = v13;
  sub_100011A9C(&v17, v1 + 16);
  return v1;
}

uint64_t sub_1000CBDC0()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_1000055A8(v0 + 2);
  sub_100008194((uint64_t)(v0 + 7), &qword_10015D968);
  v1 = (char *)v0 + OBJC_IVAR____TtC16EventViewService29SetlistSongPlaybackController___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000CBE28()
{
  return type metadata accessor for SetlistSongPlaybackController(0);
}

uint64_t type metadata accessor for SetlistSongPlaybackController(uint64_t a1)
{
  uint64_t result;

  result = qword_100163890;
  if (!qword_100163890)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SetlistSongPlaybackController);
  return result;
}

uint64_t sub_1000CBE6C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "(";
  v4[1] = &unk_100112AD8;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_1000CBEF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D960;
  if (!qword_10015D960)
  {
    v1 = type metadata accessor for SetlistSongPlaybackController(255);
    result = swift_getWitnessTable(&unk_100112AF0, v1);
    atomic_store(result, (unint64_t *)&qword_10015D960);
  }
  return result;
}

uint64_t sub_1000CBF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015D968);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1000CBF84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v7 = a2[1];
    v6 = a2[2];
    a1[1] = v7;
    a1[2] = v6;
    v8 = *(int *)(a3 + 24);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    swift_retain(v5);
    swift_retain(v7);
    v11 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = v9;
      v14 = v11;
      v15 = 1;
    }
    else
    {
      v16 = *v10;
      *v9 = *v10;
      swift_retain(v16);
      v13 = v9;
      v14 = v11;
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v14, v15);
  }
  return a1;
}

double sub_1000CC068(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_release(*a1);
  swift_release(a1[1]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  v5 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

uint64_t *sub_1000CC0E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  a1[2] = a2[2];
  v6 = *(int *)(a3 + 24);
  v7 = (uint64_t *)((char *)a1 + v6);
  v8 = (uint64_t *)((char *)a2 + v6);
  swift_retain(v4);
  swift_retain(v5);
  v9 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
    v11 = 1;
  }
  else
  {
    v12 = *v8;
    *v7 = *v8;
    swift_retain(v12);
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v11);
  return a1;
}

uint64_t *sub_1000CC1A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a1[1];
  v9 = a2[1];
  a1[1] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[2] = a2[2];
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 24);
    v11 = (uint64_t *)((char *)a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    sub_100008194((uint64_t)a1 + v10, &qword_10015D600);
    v13 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  return a1;
}

uint64_t sub_1000CC294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_1000CC344(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  a1[2] = a2[2];
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 24);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_100008194((uint64_t)a1 + v8, &qword_10015D600);
    v11 = sub_100003E70(&qword_10015D600);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000CC42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CC438);
}

uint64_t sub_1000CC438(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003E70(qword_10015D610);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_1000CC4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CC4C4);
}

char *sub_1000CC4C4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_100003E70(qword_10015D610);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SetlistSongRowView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001639A8;
  if (!qword_1001639A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SetlistSongRowView);
  return result;
}

void sub_1000CC578(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = &unk_100112B78;
  sub_100012368(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_1000CC5F8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011B2CC, 1);
}

uint64_t sub_1000CC608()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = static Color.gray.getter();
  v1 = Color.opacity(_:)(0.6);
  result = swift_release(v0);
  qword_100163930 = v1;
  return result;
}

void sub_1000CC64C()
{
  qword_100163938 = 3028656112;
  unk_100163940 = 0xA400000000000000;
}

uint64_t sub_1000CC668()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = static Font.body.getter();
  static Font.Weight.regular.getter();
  v1 = Font.weight(_:)(v0);
  result = swift_release(v0);
  qword_100163948 = v1;
  return result;
}

uint64_t sub_1000CC6A8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;

  v37 = a1;
  v2 = type metadata accessor for AccessibilityTraits(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003E70(&qword_1001639E8);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003E70(&qword_1001639F0);
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003E70(&qword_1001639F8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v13);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v16 = sub_100003E70(&qword_100163A00);
  sub_1000CC9DC(v1, (uint64_t)&v8[*(int *)(v16 + 44)]);
  v17 = sub_100003E70(&qword_1001604E0);
  v18 = swift_allocObject(v17, ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72), *(unsigned __int8 *)(v3 + 80) | 7);
  *(_OWORD *)(v18 + 16) = xmmword_10010ACC0;
  static AccessibilityTraits.startsMediaSession.getter();
  v38 = v18;
  v19 = sub_100003B3C(&qword_1001604E8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
  v20 = sub_100003E70(&qword_1001604F0);
  v21 = sub_100007D40(&qword_1001604F8, &qword_1001604F0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v20, v21, v2, v19);
  v22 = sub_100007D40(&qword_100163A08, &qword_1001639E8, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.accessibilityAddTraits(_:)(v5, v6, v22);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v23 = sub_100008194((uint64_t)v8, &qword_1001639E8);
  v24 = static Alignment.center.getter(v23);
  sub_1000E626C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, 0.0, 1, v24, v25);
  v26 = sub_100008194((uint64_t)v11, &qword_1001639F0);
  LOBYTE(v18) = static Edge.Set.bottom.getter(v26);
  v27 = EdgeInsets.init(_all:)(3.5);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v34 = v37;
  sub_100007ADC((uint64_t)v15, v37, &qword_1001639F8);
  v35 = v34 + *(int *)(sub_100003E70(&qword_100163A10) + 36);
  *(_BYTE *)v35 = v18;
  *(double *)(v35 + 8) = v27;
  *(_QWORD *)(v35 + 16) = v29;
  *(_QWORD *)(v35 + 24) = v31;
  *(_QWORD *)(v35 + 32) = v33;
  *(_BYTE *)(v35 + 40) = 0;
  return sub_100008194((uint64_t)v15, &qword_1001639F8);
}

uint64_t sub_1000CC9DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;

  v54 = a1;
  v55 = a2;
  v2 = sub_100003E70(&qword_100163A18);
  __chkstk_darwin(v2);
  v4 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003E70(&qword_100163A20);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v53 = (uint64_t)&v52 - v9;
  v10 = type metadata accessor for Divider(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003E70(&qword_10015DA80);
  __chkstk_darwin(v14);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003E70(&qword_100163A28);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v52 = (uint64_t)&v52 - v22;
  v23 = Divider.init()(v21);
  v24 = static Edge.Set.bottom.getter(v23);
  v25 = EdgeInsets.init(_all:)(4.0);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v13, v10);
  v32 = &v16[*(int *)(v14 + 36)];
  *v32 = v24;
  *((double *)v32 + 1) = v25;
  *((_QWORD *)v32 + 2) = v27;
  *((_QWORD *)v32 + 3) = v29;
  *((_QWORD *)v32 + 4) = v31;
  v32[40] = 0;
  v33 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  LOBYTE(v10) = static Edge.Set.leading.getter(v33);
  v34 = EdgeInsets.init(_all:)(64.0);
  v36 = v35;
  v38 = v37;
  v40 = v39;
  sub_100007ADC((uint64_t)v16, (uint64_t)v20, &qword_10015DA80);
  v41 = &v20[*(int *)(v17 + 36)];
  *v41 = v10;
  *((double *)v41 + 1) = v34;
  *((_QWORD *)v41 + 2) = v36;
  *((_QWORD *)v41 + 3) = v38;
  *((_QWORD *)v41 + 4) = v40;
  v41[40] = 0;
  sub_100008194((uint64_t)v16, &qword_10015DA80);
  v42 = v52;
  v43 = sub_100007A98((uint64_t)v20, v52, &qword_100163A28);
  *(_QWORD *)v4 = static VerticalAlignment.center.getter(v43);
  *((_QWORD *)v4 + 1) = 0x4030000000000000;
  v4[16] = 0;
  v44 = sub_100003E70(&qword_100163A30);
  v45 = sub_1000CCDA0(v54, (uint64_t)&v4[*(int *)(v44 + 44)]);
  v46 = static Alignment.center.getter(v45);
  sub_1000E62C4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v8, 0.0, 1, 0.0, 1, v46, v47);
  sub_100008194((uint64_t)v4, &qword_100163A18);
  v48 = v53;
  sub_100007A98((uint64_t)v8, v53, &qword_100163A20);
  sub_100007ADC(v42, (uint64_t)v20, &qword_100163A28);
  sub_100007ADC(v48, (uint64_t)v8, &qword_100163A20);
  v49 = v55;
  sub_100007ADC((uint64_t)v20, v55, &qword_100163A28);
  v50 = sub_100003E70(&qword_100163A38);
  sub_100007ADC((uint64_t)v8, v49 + *(int *)(v50 + 48), &qword_100163A20);
  sub_100008194(v48, &qword_100163A20);
  sub_100008194(v42, &qword_100163A28);
  sub_100008194((uint64_t)v8, &qword_100163A20);
  return sub_100008194((uint64_t)v20, &qword_100163A28);
}

uint64_t sub_1000CCDA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t KeyPath;
  uint64_t v64;
  uint64_t *v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t, uint64_t);
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _OWORD *v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  char *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _OWORD v197[3];
  _OWORD v198[3];

  v194 = a2;
  v174 = type metadata accessor for PlainButtonStyle(0);
  v173 = *(_QWORD *)(v174 - 8);
  __chkstk_darwin(v174);
  v172 = (char *)&v154 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = type metadata accessor for AccessibilityTraits(0);
  v166 = *(_QWORD *)(v168 - 8);
  __chkstk_darwin(v168);
  v164 = (char *)&v154 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SetlistSongRowView(0);
  v156 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v157 = v6;
  v158 = (uint64_t)&v154 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = sub_100003E70(&qword_100163A40);
  v161 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v159 = (char *)&v154 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003E70(&qword_100163A48);
  __chkstk_darwin(v8);
  v163 = (char *)&v154 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = sub_100003E70(&qword_100163A50);
  __chkstk_darwin(v160);
  v167 = (uint64_t)&v154 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_100003E70(&qword_100163A58);
  __chkstk_darwin(v169);
  v171 = (uint64_t)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_100003E70(&qword_100163A60);
  v190 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v170 = (char *)&v154 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = type metadata accessor for URL(0);
  v187 = *(_QWORD *)(v188 - 8);
  v13 = __chkstk_darwin(v188);
  v155 = (char *)&v154 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = v14;
  __chkstk_darwin(v13);
  v165 = (char *)&v154 - v15;
  v16 = sub_100003E70(&qword_100163A68);
  v17 = __chkstk_darwin(v16);
  v193 = (uint64_t)&v154 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v191 = (char *)&v154 - v19;
  v20 = sub_100003E70(&qword_100163A70);
  __chkstk_darwin(v20);
  v182 = (uint64_t *)((char *)&v154 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = sub_100003E70(&qword_100163A78);
  __chkstk_darwin(v22);
  v184 = (uint64_t)&v154 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = sub_100003E70(&qword_100163A80);
  v24 = __chkstk_darwin(v181);
  v189 = (uint64_t)&v154 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v180 = (uint64_t)&v154 - v27;
  __chkstk_darwin(v26);
  v196 = (uint64_t)&v154 - v28;
  v178 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v178);
  v179 = (char *)&v154 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100003E70(&qword_100165370);
  v31 = __chkstk_darwin(v30);
  v183 = (char *)&v154 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v34 = (char *)&v154 - v33;
  v35 = sub_100003E70(&qword_100163A88);
  v36 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v38 = (char *)&v154 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_100003E70(&qword_100163A90);
  __chkstk_darwin(v175);
  v40 = (char *)&v154 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_100003E70(&qword_100163A98);
  __chkstk_darwin(v176);
  v42 = (char *)&v154 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_100003E70(&qword_100163AA0);
  v43 = __chkstk_darwin(v177);
  v186 = (uint64_t)&v154 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __chkstk_darwin(v43);
  v47 = (char *)&v154 - v46;
  __chkstk_darwin(v45);
  v195 = (uint64_t)&v154 - v48;
  v185 = a1;
  v49 = *a1;
  sub_10009AAA0((uint64_t)v34);
  v50 = static Animation.spring(response:dampingFraction:blendDuration:)(0.5, 1.0, 0.0);
  v51 = Transaction.init(animation:)(v50);
  v52 = sub_100003E70(&qword_100163AA8);
  v53 = sub_1000CEAB4();
  v54 = AsyncImage.init(url:scale:transaction:content:)(v34, v51, sub_1000CDCE8, 0, v52, v53, 1.0);
  v55 = static Alignment.center.getter(v54);
  _FrameLayout.init(width:height:alignment:)(v197, 0x4048000000000000, 0, 0x4048000000000000, 0, v55, v56);
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v40, v38, v35);
  v57 = &v40[*(int *)(v175 + 36)];
  v58 = v197[1];
  *(_OWORD *)v57 = v197[0];
  *((_OWORD *)v57 + 1) = v58;
  *((_OWORD *)v57 + 2) = v197[2];
  v59 = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v38, v35);
  v60 = static Alignment.center.getter(v59);
  v62 = v61;
  KeyPath = 0;
  v64 = 0;
  if (sub_10009AD8C())
  {
    KeyPath = swift_getKeyPath(&unk_100112BE0);
    swift_retain(v49);
    v64 = v49;
  }
  sub_100007ADC((uint64_t)v40, (uint64_t)v42, &qword_100163A90);
  v65 = (uint64_t *)&v42[*(int *)(v176 + 36)];
  *v65 = KeyPath;
  v65[1] = 0;
  v65[2] = v64;
  v65[3] = v60;
  v65[4] = v62;
  sub_100008194((uint64_t)v40, &qword_100163A90);
  v66 = v179;
  v67 = &v179[*(int *)(v178 + 20)];
  v68 = enum case for RoundedCornerStyle.continuous(_:);
  v69 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 104))(v67, v68, v69);
  __asm { FMOV            V0.2D, #5.0 }
  *v66 = _Q0;
  v75 = (uint64_t)&v47[*(int *)(v177 + 36)];
  sub_100028390((uint64_t)v66, v75, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v75 + *(int *)(sub_100003E70(&qword_10015E338) + 36)) = 256;
  sub_100007ADC((uint64_t)v42, (uint64_t)v47, &qword_100163A98);
  sub_1000283D4((uint64_t)v66, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_100008194((uint64_t)v42, &qword_100163A98);
  v76 = sub_100007A98((uint64_t)v47, v195, &qword_100163AA0);
  v77 = static HorizontalAlignment.leading.getter(v76);
  v78 = (uint64_t)v182;
  *v182 = v77;
  *(_QWORD *)(v78 + 8) = 0x4008000000000000;
  *(_BYTE *)(v78 + 16) = 0;
  v79 = sub_100003E70(&qword_100163AE8);
  v80 = (uint64_t)v185;
  v81 = sub_1000CE06C((uint64_t)v185, (char *)(v78 + *(int *)(v79 + 44)));
  v82 = static Alignment.leading.getter(v81);
  v83 = v184;
  sub_1000E631C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v184, 0.0, 1, 0.0, 1, v82, v84);
  v85 = sub_100008194(v78, &qword_100163A70);
  v86 = static Edge.Set.trailing.getter(v85);
  v87 = EdgeInsets.init(_all:)(8.0);
  v89 = v88;
  v91 = v90;
  v93 = v92;
  v94 = v180;
  sub_100007ADC(v83, v180, &qword_100163A78);
  v95 = v94 + *(int *)(v181 + 36);
  *(_BYTE *)v95 = v86;
  *(double *)(v95 + 8) = v87;
  *(_QWORD *)(v95 + 16) = v89;
  *(_QWORD *)(v95 + 24) = v91;
  *(_QWORD *)(v95 + 32) = v93;
  *(_BYTE *)(v95 + 40) = 0;
  sub_100008194(v83, &qword_100163A78);
  sub_100007A98(v94, v196, &qword_100163A80);
  v96 = *(_QWORD *)(*(_QWORD *)v80 + 64);
  v97 = *(_QWORD *)(*(_QWORD *)v80 + 72);
  sub_100008170((_QWORD *)(*(_QWORD *)v80 + 40), v96);
  v98 = (uint64_t)v183;
  (*(void (**)(uint64_t, uint64_t))(v97 + 80))(v96, v97);
  v99 = v187;
  v100 = v188;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v187 + 48))(v98, 1, v188) == 1)
  {
    sub_100008194(v98, &qword_100165370);
    v101 = 1;
    v102 = v192;
    v103 = (uint64_t)v191;
    v104 = v190;
  }
  else
  {
    v105 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 32);
    v106 = v165;
    v105(v165, v98, v100);
    v107 = v80;
    v108 = v158;
    sub_100028390(v107, v158, type metadata accessor for SetlistSongRowView);
    v109 = v155;
    (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v155, v106, v100);
    v110 = *(unsigned __int8 *)(v156 + 80);
    v111 = (v110 + 16) & ~v110;
    v112 = *(unsigned __int8 *)(v99 + 80);
    v113 = (v157 + v112 + v111) & ~v112;
    v114 = swift_allocObject(&unk_100153248, v113 + v154, v110 | v112 | 7);
    sub_1000CED30(v108, v114 + v111);
    v105((char *)(v114 + v113), (uint64_t)v109, v100);
    v115 = sub_100003E70(&qword_100163AF8);
    v116 = sub_1000CEDD4();
    v117 = v159;
    Button.init(action:label:)(sub_1000CED74, v114, sub_1000CE898, 0, v115, v116);
    v118 = sub_100003E70(&qword_1001604E0);
    v119 = v166;
    v120 = swift_allocObject(v118, ((*(unsigned __int8 *)(v166 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v166 + 80))+ *(_QWORD *)(v166 + 72), *(unsigned __int8 *)(v166 + 80) | 7);
    *(_OWORD *)(v120 + 16) = xmmword_10010ACC0;
    static AccessibilityTraits.startsMediaSession.getter();
    *(_QWORD *)&v198[0] = v120;
    v121 = sub_100003B3C(&qword_1001604E8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v122 = sub_100003E70(&qword_1001604F0);
    v123 = sub_100007D40(&qword_1001604F8, &qword_1001604F0, (uint64_t)&protocol conformance descriptor for [A]);
    v124 = v164;
    v125 = v122;
    v126 = v168;
    dispatch thunk of SetAlgebra.init<A>(_:)(v198, v125, v123, v168, v121);
    v127 = sub_100007D40(&qword_100163B18, &qword_100163A40, (uint64_t)&protocol conformance descriptor for Button<A>);
    v128 = (uint64_t)v163;
    v129 = v162;
    View.accessibilityRemoveTraits(_:)(v124, v162, v127);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v124, v126);
    v130 = (*(uint64_t (**)(char *, uint64_t))(v161 + 8))(v117, v129);
    v131 = static Alignment.center.getter(v130);
    _FrameLayout.init(width:height:alignment:)(v198, 0x4046000000000000, 0, 0, 1, v131, v132);
    v133 = v167;
    sub_100007ADC(v128, v167, &qword_100163A48);
    v134 = (_OWORD *)(v133 + *(int *)(v160 + 36));
    v135 = v198[1];
    *v134 = v198[0];
    v134[1] = v135;
    v134[2] = v198[2];
    v136 = sub_100008194(v128, &qword_100163A48);
    v137 = static Alignment.center.getter(v136);
    v138 = v171;
    sub_1000E6374(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v171, 0.0, 1, INFINITY, 0, v137, v139);
    v140 = sub_100008194(v133, &qword_100163A50);
    v141 = v172;
    PlainButtonStyle.init()(v140);
    v142 = sub_10005C954(&qword_100163B20, &qword_100163A58, (void (*)(void))sub_1000CEEE8);
    v143 = sub_100003B3C(&qword_10015E348, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    v144 = v170;
    v145 = v174;
    View.buttonStyle<A>(_:)(v141, v169, v174, v142, v143);
    (*(void (**)(char *, uint64_t))(v173 + 8))(v141, v145);
    sub_100008194(v138, &qword_100163A58);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v106, v100);
    v104 = v190;
    v103 = (uint64_t)v191;
    v102 = v192;
    (*(void (**)(char *, char *, uint64_t))(v190 + 32))(v191, v144, v192);
    v101 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v104 + 56))(v103, v101, 1, v102);
  v146 = v195;
  v147 = v186;
  sub_100007ADC(v195, v186, &qword_100163AA0);
  v148 = v196;
  v149 = v189;
  sub_100007ADC(v196, v189, &qword_100163A80);
  v150 = v193;
  sub_100007ADC(v103, v193, &qword_100163A68);
  v151 = v194;
  sub_100007ADC(v147, v194, &qword_100163AA0);
  v152 = sub_100003E70(&qword_100163AF0);
  sub_100007ADC(v149, v151 + *(int *)(v152 + 48), &qword_100163A80);
  sub_100007ADC(v150, v151 + *(int *)(v152 + 64), &qword_100163A68);
  sub_100008194(v103, &qword_100163A68);
  sub_100008194(v148, &qword_100163A80);
  sub_100008194(v146, &qword_100163AA0);
  sub_100008194(v150, &qword_100163A68);
  sub_100008194(v149, &qword_100163A80);
  return sub_100008194(v147, &qword_100163AA0);
}

void sub_1000CDCE8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;

  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AsyncImagePhase(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v9 + 88))(v11, v8) == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v11, v8);
    v12 = *v11;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    v13 = Image.resizable(capInsets:resizingMode:)(v7, v12, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v36 = v13;
    v37 = 1;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0;
    swift_retain_n(v13, 2);
    v14 = sub_100003E70(&qword_100163AC0);
    v15 = sub_100003E70(&qword_100163AD0);
    v16 = sub_1000CEB20();
    v17 = sub_1000CEB8C();
    _ConditionalContent<>.init(storage:)(&v36, v14, v15, v16, v17);
    swift_release_n(v13, 2);
    swift_release(v12);
    v18 = v42;
    v19 = v43;
    v20 = v44;
    v21 = v45;
    v22 = v46;
  }
  else
  {
    if (qword_10015CE60 != -1)
      swift_once(&qword_10015CE60, sub_1000382C8);
    v23 = qword_10016F658;
    swift_retain(qword_10016F658);
    v25 = static Alignment.center.getter(v24);
    v27 = v26;
    sub_1000CDFF0((uint64_t)&v42);
    v36 = v23;
    v37 = 256;
    v38 = v42;
    *(_QWORD *)&v39 = v43;
    *((_QWORD *)&v39 + 1) = DWORD2(v43);
    *(_QWORD *)&v40 = v25;
    *((_QWORD *)&v40 + 1) = v27;
    v41 = 1;
    v28 = sub_100003E70(&qword_100163AC0);
    v29 = sub_100003E70(&qword_100163AD0);
    v30 = sub_1000CEB20();
    v31 = sub_1000CEB8C();
    _ConditionalContent<>.init(storage:)(&v36, v28, v29, v30, v31);
    v35 = v42;
    v34 = v43;
    v33 = v44;
    v32 = v45;
    v22 = v46;
    (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
    v21 = v32;
    v20 = v33;
    v19 = v34;
    v18 = v35;
  }
  *(_OWORD *)a2 = v18;
  *(_OWORD *)(a2 + 16) = v19;
  *(_OWORD *)(a2 + 32) = v20;
  *(_OWORD *)(a2 + 48) = v21;
  *(_BYTE *)(a2 + 64) = v22;
}

uint64_t sub_1000CDFF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t result;

  v2 = Image.init(_internalSystemName:)(0x636973756DLL, 0xE500000000000000);
  v3 = static Font.title3.getter();
  static Font.Weight.regular.getter();
  v4 = Font.weight(_:)(v3);
  swift_release(v3);
  KeyPath = swift_getKeyPath(&unk_100112C10);
  result = static HierarchicalShapeStyle.quaternary.getter();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = KeyPath;
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_1000CE06C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, __n128);
  __n128 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, char *, uint64_t);
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t, __n128);
  __n128 v100;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _QWORD v113[2];
  _OWORD v114[11];
  char v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  char v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  char v137;

  v107 = a2;
  v3 = type metadata accessor for Text.Suffix(0);
  v103 = *(_QWORD *)(v3 - 8);
  v104 = v3;
  __chkstk_darwin(v3);
  v102 = (char *)&v102 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003E70(&qword_100163B40);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v108 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v105 = (char *)&v102 - v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v102 - v11;
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v14 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  sub_100008170((_QWORD *)(*(_QWORD *)a1 + 40), v13);
  *(_QWORD *)&v116 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 48))(v13, v14);
  *((_QWORD *)&v116 + 1) = v15;
  v109 = sub_10000CB40();
  v16 = Text.init<A>(_:)(&v116, &type metadata for String, v109);
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  v23 = static Alignment.leading.getter(v16);
  sub_1000E546C(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)&v116, v25, 0.0, 1, 0.0, 1, v23, v24, v16, v18, v22, v20);
  sub_10000BFF8(v16, v18, v22);
  swift_bridgeObjectRelease();
  v134 = v122;
  v135 = v123;
  v136 = v124;
  v130 = v118;
  v131 = v119;
  v132 = v120;
  v133 = v121;
  v128 = v116;
  v129 = v117;
  if (qword_10015CED8 != -1)
    swift_once(&qword_10015CED8, sub_1000CC668);
  v26 = qword_100163948;
  KeyPath = swift_getKeyPath(&unk_100112C10);
  v28 = swift_getKeyPath(&unk_100112C40);
  v137 = 0;
  v122 = v134;
  v123 = v135;
  v124 = v136;
  v118 = v130;
  v119 = v131;
  v120 = v132;
  v121 = v133;
  v116 = v128;
  v117 = v129;
  *(_QWORD *)&v125 = KeyPath;
  *((_QWORD *)&v125 + 1) = v26;
  *(_QWORD *)&v126 = v28;
  *((_QWORD *)&v126 + 1) = 1;
  v127 = 0;
  v106 = a1;
  v29 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v30 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  sub_100008170((_QWORD *)(*(_QWORD *)a1 + 40), v29);
  v31 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v30 + 112);
  v32 = swift_retain(v26);
  v33 = v31(v29, v30, v32);
  v110 = v6;
  v111 = v5;
  v112 = v12;
  if ((v33 & 1) != 0)
  {
    if (qword_10015CED0 != -1)
      swift_once(&qword_10015CED0, sub_1000CC64C);
    v114[0] = xmmword_100163938;
    swift_bridgeObjectRetain(*((_QWORD *)&xmmword_100163938 + 1));
    v34 = Text.init<A>(_:)(v114, &type metadata for String, v109);
    v36 = v35;
    v38 = v37;
    v40 = v39;
    if (qword_10015CEC8 != -1)
      swift_once(&qword_10015CEC8, sub_1000CC608);
    v41 = v38 & 1;
    v42 = Text.foregroundColor(_:)(qword_100163930, v34, v36, v41, v40);
    v44 = v43;
    v46 = v45;
    v48 = v47 & 1;
    sub_10000BFF8(v34, v36, v41);
    swift_bridgeObjectRelease();
    v49 = Text.font(_:)(qword_100163948, v42, v44, v48, v46);
    v51 = v50;
    v53 = v52;
    v55 = v54 & 1;
    sub_10000BFF8(v42, v44, v48);
    swift_bridgeObjectRelease();
    v56 = v102;
    static Text.Suffix.alwaysVisible(_:)(v49, v51, v55, v53);
    sub_10000BFF8(v49, v51, v55);
    v57 = v56;
    swift_bridgeObjectRelease();
    v6 = v110;
    v5 = v111;
    v12 = v112;
  }
  else
  {
    v57 = v102;
    static Text.Suffix.none.getter();
  }
  v58 = sub_100003E70(&qword_100163B48);
  v59 = sub_1000D0748();
  v60 = v105;
  View.textSuffix(_:)(v57, v58, v59);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v57, v104);
  v114[9] = v125;
  v114[10] = v126;
  v114[5] = v121;
  v114[6] = v122;
  v115 = v127;
  v114[7] = v123;
  v114[8] = v124;
  v114[0] = v116;
  v114[1] = v117;
  v114[2] = v118;
  v114[3] = v119;
  v114[4] = v120;
  sub_1000D0850((uint64_t)v114);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v12, v60, v5);
  v61 = *(_QWORD *)(*(_QWORD *)v106 + 64);
  v62 = *(_QWORD *)(*(_QWORD *)v106 + 72);
  sub_100008170((_QWORD *)(*(_QWORD *)v106 + 40), v61);
  v113[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 56))(v61, v62);
  v113[1] = v63;
  v64 = Text.init<A>(_:)(v113, &type metadata for String, v109);
  v66 = v65;
  v68 = v67;
  v70 = v69 & 1;
  v71 = static Font.footnote.getter(v64);
  static Font.Weight.regular.getter();
  v72 = Font.weight(_:)(v71);
  swift_release(v71);
  v73 = Text.font(_:)(v72, v64, v66, v70, v68);
  v75 = v74;
  v77 = v76;
  v79 = v78;
  swift_release(v72);
  sub_10000BFF8(v64, v66, v70);
  swift_bridgeObjectRelease();
  if (qword_10015CE58 != -1)
    swift_once(&qword_10015CE58, sub_1000382B4);
  v80 = qword_10016F650;
  v113[0] = qword_10016F650;
  swift_retain(qword_10016F650);
  v109 = Text.foregroundStyle<A>(_:)(v113, v73, v75, v77 & 1, v79, &type metadata for Color, &protocol witness table for Color);
  v82 = v81;
  v84 = v83;
  v86 = v85 & 1;
  sub_10000BFF8(v73, v75, v77 & 1);
  swift_release(v80);
  swift_bridgeObjectRelease();
  v87 = swift_getKeyPath(&unk_100112C40);
  v88 = v110;
  v89 = v111;
  v90 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
  v91 = v108;
  v90(v108, v112, v111);
  v92 = v107;
  v90(v107, v91, v89);
  v93 = &v92[*(int *)(sub_100003E70(&qword_100163B68) + 48)];
  v94 = v109;
  *(_QWORD *)v93 = v109;
  *((_QWORD *)v93 + 1) = v82;
  v95 = v82;
  v93[16] = v86;
  v96 = v84;
  *((_QWORD *)v93 + 3) = v84;
  *((_QWORD *)v93 + 4) = v87;
  *((_QWORD *)v93 + 5) = 1;
  v93[48] = 0;
  v97 = v94;
  v98 = v95;
  sub_10000C008(v94, v95, v86);
  v99 = *(void (**)(char *, uint64_t, __n128))(v88 + 8);
  swift_bridgeObjectRetain(v96);
  v100 = swift_retain(v87);
  v99(v112, v89, v100);
  sub_10000BFF8(v97, v98, v86);
  swift_release(v87);
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v99)(v91, v89);
}

void sub_1000CE754(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for OpenURLAction(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SetlistSongRowView(0);
  sub_10001D83C((uint64_t)v7);
  OpenURLAction.callAsFunction(_:)(a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v8 = a1[1];
  v9 = *(_QWORD *)(*a1 + 24);
  if (v8)
  {
    v10 = *(_QWORD *)(*a1 + 16);
    swift_bridgeObjectRetain(v9);
    swift_retain(v8);
    sub_1000DB03C(v10, v9, 8, 11, 14, 0, 3u, v8);
    swift_bridgeObjectRelease();
    swift_release(v8);
  }
  else
  {
    v11 = a1[2];
    v12 = type metadata accessor for RemoteViewConfiguration();
    v13 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    swift_bridgeObjectRetain(v9);
    EnvironmentObject.error()(0, v11, v12, v13);
    __break(1u);
  }
}

uint64_t sub_1000CE898@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  __n128 v22;
  uint64_t v24;
  uint64_t v25;

  v2 = type metadata accessor for SymbolVariants(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v24 - v7;
  v9 = sub_100003E70(&qword_100163B38);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003E70(&qword_100163B10);
  __chkstk_darwin(v13);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = Image.init(_internalSystemName:)(0x70612E636973756DLL, 0xE900000000000070);
  v16 = static SymbolVariants.square.getter();
  SymbolVariants.fill.getter(v16);
  v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v8, v2);
  View.symbolVariant(_:)(v6, &type metadata for Image, &protocol witness table for Image);
  v17(v6, v2);
  swift_release(v25);
  v19 = static Alignment.center.getter(v18);
  v22 = sub_1000E63CC(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v15, v21, 0.0, 1, INFINITY, 0, v19, v20);
  (*(void (**)(char *, uint64_t, __n128))(v10 + 8))(v12, v9, v22);
  sub_100007ADC((uint64_t)v15, a1, &qword_100163B10);
  *(_BYTE *)(a1 + *(int *)(sub_100003E70(&qword_100163AF8) + 36)) = 0;
  return sub_100008194((uint64_t)v15, &qword_100163B10);
}

unint64_t sub_1000CEAB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163AB0;
  if (!qword_100163AB0)
  {
    v1 = sub_1000034AC(&qword_100163AA8);
    sub_1000CEB20();
    sub_1000CEB8C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163AB0);
  }
  return result;
}

unint64_t sub_1000CEB20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163AB8;
  if (!qword_100163AB8)
  {
    v1 = sub_1000034AC(&qword_100163AC0);
    sub_1000396D8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163AB8);
  }
  return result;
}

unint64_t sub_1000CEB8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163AC8;
  if (!qword_100163AC8)
  {
    v1 = sub_1000034AC(&qword_100163AD0);
    sub_100007D40(&qword_100162710, &qword_100162708, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    sub_100007D40(&qword_100163AD8, &qword_100163AE0, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163AC8);
  }
  return result;
}

uint64_t sub_1000CEC28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for SetlistSongRowView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v10 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  v11 = sub_100003E70(&qword_10015D600);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    v13 = swift_release(*v10);
  }
  v14 = v3 | v8 | 7;
  v15 = (v4 + v5 + v8) & ~v8;
  v16 = v15 + v9;
  (*(void (**)(uint64_t, uint64_t, __n128))(v7 + 8))(v0 + v15, v6, v13);
  return swift_deallocObject(v0, v16, v14);
}

uint64_t sub_1000CED30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SetlistSongRowView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000CED74()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for SetlistSongRowView(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  sub_1000CE754((_QWORD *)(v0 + v2), v0 + ((v2 + v3 + v4) & ~v4));
}

unint64_t sub_1000CEDD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163B00;
  if (!qword_100163B00)
  {
    v1 = sub_1000034AC(&qword_100163AF8);
    sub_1000CEE58();
    sub_100007D40(&qword_10015E6C8, &qword_10015E6D0, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163B00);
  }
  return result;
}

unint64_t sub_1000CEE58()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100163B08;
  if (!qword_100163B08)
  {
    v1 = sub_1000034AC(&qword_100163B10);
    v2[0] = &type metadata for Image;
    v2[1] = &protocol witness table for Image;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163B08);
  }
  return result;
}

uint64_t sub_1000CEEE8()
{
  return sub_10005C954(&qword_100163B28, &qword_100163A50, (void (*)(void))sub_1000CEF0C);
}

unint64_t sub_1000CEF0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163B30;
  if (!qword_100163B30)
  {
    v1 = sub_1000034AC(&qword_100163A48);
    sub_100007D40(&qword_100163B18, &qword_100163A40, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163B30);
  }
  return result;
}

uint64_t sub_1000CEFA8@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _BYTE v28[16];

  v8 = sub_100003E70(&qword_100163B88);
  __chkstk_darwin(v8);
  v10 = &v28[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_100003E70(&qword_100163B90);
  v12 = __chkstk_darwin(v11);
  v14 = &v28[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *v10 = static Alignment.center.getter(v12);
  v10[1] = v15;
  v16 = sub_100003E70(&qword_100163B98);
  v17 = sub_1000CF150(a1, a2 & 1, a3, (uint64_t)v10 + *(int *)(v16 + 44));
  v18 = static Alignment.center.getter(v17);
  sub_1000E6598(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v14, 0.0, 1, INFINITY, 0, v18, v19);
  v20 = sub_100008194((uint64_t)v10, &qword_100163B88);
  v21 = static Alignment.center.getter(v20);
  v23 = v22;
  v24 = static Color.black.getter(v21);
  v25 = Color.opacity(_:)(0.5);
  swift_release(v24);
  sub_100007ADC((uint64_t)v14, a4, &qword_100163B90);
  v26 = (uint64_t *)(a4 + *(int *)(sub_100003E70(&qword_100163BA0) + 36));
  *v26 = v25;
  v26[1] = v21;
  v26[2] = v23;
  return sub_100008194((uint64_t)v14, &qword_100163B90);
}

uint64_t sub_1000CF150@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;

  v74 = a4;
  v75 = a1;
  v76 = a2 & 1;
  v5 = sub_100003E70(&qword_100163BA8);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v73 = sub_100003E70(&qword_100163BB0);
  __chkstk_darwin(v73);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003E70(&qword_100163BB8);
  v11 = __chkstk_darwin(v10);
  v70 = (uint64_t)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v60 - v13;
  v69 = type metadata accessor for AnimationTimelineSchedule(0);
  v71 = *(_QWORD *)(v69 - 8);
  v15 = __chkstk_darwin(v69);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v68 = (char *)&v60 - v18;
  v19 = sub_100003E70(&qword_100163BC0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v67 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v66 = (char *)&v60 - v23;
  v24 = sub_100003E70(&qword_100163BC8);
  v25 = __chkstk_darwin(v24);
  v72 = (uint64_t)&v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v28 = (char *)&v60 - v27;
  v29 = sub_10009B00C();
  v30 = 1;
  if (v29)
  {
    v61 = v28;
    v62 = v20;
    v63 = v19;
    v64 = v9;
    v31 = v76;
    v32 = v75;
    v33 = sub_10009AC2C();
    v65 = v14;
    v34 = a3;
    if (v33)
    {
      v35 = 1;
    }
    else
    {
      sub_100062664(v32, v31);
      v35 = sub_10001E0BC(v32, v31);
      sub_10001E324(v32, v31);
    }
    v36 = v68;
    AnimationTimelineSchedule.init(minimumInterval:paused:)(0x3FC999999999999ALL, 0, v35 & 1);
    v37 = swift_allocObject(&unk_1001532F0, 40, 7);
    *(_QWORD *)(v37 + 16) = v32;
    *(_BYTE *)(v37 + 24) = v31 != 0;
    *(_QWORD *)(v37 + 32) = a3;
    v38 = v69;
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v17, v36, v69);
    v39 = swift_allocObject(&unk_100153318, 32, 7);
    *(_QWORD *)(v39 + 16) = sub_1000D0B40;
    *(_QWORD *)(v39 + 24) = v37;
    sub_100062664(v32, v31);
    swift_retain(v34);
    v40 = sub_100003E70(&qword_100163BE0);
    v41 = sub_100003B3C(&qword_100163BE8, (uint64_t (*)(uint64_t))&type metadata accessor for AnimationTimelineSchedule, (uint64_t)&protocol conformance descriptor for AnimationTimelineSchedule);
    v42 = sub_10005C954(&qword_100163BF0, &qword_100163BE0, (void (*)(void))sub_1000D0B84);
    v43 = v67;
    v44 = v39;
    a3 = v34;
    TimelineView<>.init(_:content:)(v17, sub_1000D0B7C, v44, v38, v40, v41, v42);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v36, v38);
    v20 = v62;
    v19 = v63;
    v45 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
    v46 = v66;
    v45(v66, v43, v63);
    v28 = v61;
    v45(v61, v46, v19);
    v30 = 0;
    v9 = v64;
    v14 = v65;
  }
  v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v28, v30, 1, v19);
  *v7 = static Alignment.center.getter(v47);
  v7[1] = v48;
  v49 = sub_100003E70(&qword_100163BD0);
  sub_1000CFAE4(a3, (_QWORD *)((char *)v7 + *(int *)(v49 + 44)));
  v51 = static Color.white.getter(v50);
  sub_100007ADC((uint64_t)v7, (uint64_t)v9, &qword_100163BA8);
  *(_QWORD *)&v9[*(int *)(v73 + 36)] = v51;
  v52 = sub_100008194((uint64_t)v7, &qword_100163BA8);
  v53 = static Alignment.center.getter(v52);
  v54 = v70;
  sub_1000E65F0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v70, 0.0, 1, INFINITY, 0, v53, v55);
  sub_100008194((uint64_t)v9, &qword_100163BB0);
  sub_100007A98(v54, (uint64_t)v14, &qword_100163BB8);
  v56 = v72;
  sub_100007ADC((uint64_t)v28, v72, &qword_100163BC8);
  sub_100007ADC((uint64_t)v14, v54, &qword_100163BB8);
  v57 = v74;
  sub_100007ADC(v56, v74, &qword_100163BC8);
  v58 = sub_100003E70(&qword_100163BD8);
  sub_100007ADC(v54, v57 + *(int *)(v58 + 48), &qword_100163BB8);
  sub_100008194((uint64_t)v14, &qword_100163BB8);
  sub_100008194((uint64_t)v28, &qword_100163BC8);
  sub_100008194(v54, &qword_100163BB8);
  return sub_100008194(v56, &qword_100163BC8);
}

uint64_t sub_1000CF6F0@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  double (*v20)(uint64_t, uint64_t, __n128);
  __n128 v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t (**v37)();
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[3];

  v47 = a2;
  v42 = type metadata accessor for Font.TextStyle(0);
  v40 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for CircularProgressViewStyle(0);
  __chkstk_darwin(v39);
  v6 = (uint64_t *)((char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = sub_100003E70(&qword_10015D750);
  v44 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003E70(&qword_100163C20);
  v45 = *(_QWORD *)(v9 - 8);
  v46 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100003E70(&qword_100163C00);
  __chkstk_darwin(v43);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100112CD0);
  *(_QWORD *)&v49[0] = a1;
  v15 = sub_100003B3C(&qword_100161D40, type metadata accessor for SetlistSongRowViewModel, (uint64_t)&unk_1001105F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v49, KeyPath, v15);
  swift_release(KeyPath);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD **)(v16 + 200);
  v18 = v17[5];
  v19 = v17[6];
  sub_100008170(v17 + 2, v18);
  v20 = *(double (**)(uint64_t, uint64_t, __n128))(v19 + 8);
  v21 = swift_retain(v16);
  v22 = v20(v18, v19, v21);
  swift_release(v16);
  *(double *)v49 = v22;
  BYTE8(v49[0]) = 0;
  v48 = 0x3FF0000000000000;
  v23 = sub_100085230();
  v24 = ProgressView.init<A>(value:total:)(v49, &v48, &type metadata for Double, v23);
  *v6 = static Color.white.getter(v24);
  v25 = v39;
  *(_QWORD *)&v49[0] = 0x4000000000000000;
  (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v4, enum case for Font.TextStyle.body(_:), v42);
  ScaledMetric.init(wrappedValue:relativeTo:)(v49, v4, &type metadata for Double, v23);
  v26 = sub_100007D40(&qword_10015D7D0, &qword_10015D750, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
  v27 = sub_100003B3C(&qword_100163C08, type metadata accessor for CircularProgressViewStyle, (uint64_t)&unk_10010F8AC);
  v28 = v41;
  View.progressViewStyle<A>(_:)(v6, v41, v25, v26, v27);
  sub_1000283D4((uint64_t)v6, type metadata accessor for CircularProgressViewStyle);
  v29 = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v8, v28);
  v30 = static Alignment.center.getter(v29);
  _FrameLayout.init(width:height:alignment:)(v49, 0x4040000000000000, 0, 0x4040000000000000, 0, v30, v31);
  v33 = v45;
  v32 = v46;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v13, v11, v46);
  v34 = &v13[*(int *)(v43 + 36)];
  v35 = v49[1];
  *(_OWORD *)v34 = v49[0];
  *((_OWORD *)v34 + 1) = v35;
  *((_OWORD *)v34 + 2) = v49[2];
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v32);
  v36 = v47;
  sub_100007ADC((uint64_t)v13, v47, &qword_100163C00);
  v37 = (uint64_t (**)())(v36 + *(int *)(sub_100003E70(&qword_100163BE0) + 36));
  *v37 = sub_1000CFAC0;
  v37[1] = 0;
  return sub_100008194((uint64_t)v13, &qword_100163C00);
}

uint64_t sub_1000CFAC0()
{
  return Transaction.disablesAnimations.setter(1);
}

void sub_1000CFAE4(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, __n128);
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, __n128);
  __n128 v30;
  __n128 v31;
  double v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, __n128);
  __n128 v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 (*v63)(uint64_t, uint64_t, __n128);
  __n128 v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 (*v72)(uint64_t, uint64_t, __n128);
  __n128 v73;
  int v74;
  __n128 v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 (*v88)(uint64_t, uint64_t, __n128);
  __n128 v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  double v96;
  double v97;
  uint64_t v98;
  double v99;
  __n128 v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  BOOL v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  int v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t KeyPath;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD v150[2];

  v147 = a2;
  v134 = type metadata accessor for ControlSize(0);
  v132 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v130 = (char *)&v120 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_100003E70(&qword_10015D750);
  v128 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v122 = (char *)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_100003E70(&qword_100163C28);
  __chkstk_darwin(v126);
  v6 = (char *)&v120 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100003E70(&qword_100163C30);
  __chkstk_darwin(v125);
  v121 = (uint64_t)&v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100003E70(&qword_100163C38);
  __chkstk_darwin(v127);
  v124 = (char *)&v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_100003E70(&qword_100163C40);
  __chkstk_darwin(v135);
  v133 = (uint64_t)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100003E70(&qword_100163C48);
  __chkstk_darwin(v141);
  v138 = (uint64_t)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100003E70(&qword_100163C50);
  v11 = __chkstk_darwin(v143);
  v149 = (uint64_t)&v120 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v142 = (uint64_t)&v120 - v14;
  __chkstk_darwin(v13);
  v148 = (uint64_t)&v120 - v15;
  v146 = Image.init(systemName:)(0x69662E6573756170, 0xEA00000000006C6CLL);
  v145 = static Font.subheadline.getter(v146);
  KeyPath = swift_getKeyPath(&unk_100112C10);
  v16 = swift_getKeyPath(&unk_100112CD0);
  v150[0] = a1;
  v17 = sub_100003B3C(&qword_100161D40, type metadata accessor for SetlistSongRowViewModel, (uint64_t)&unk_1001105F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v150, v16, v17);
  swift_release(v16);
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD **)(v18 + 200);
  v20 = v19[5];
  v21 = v19[6];
  sub_100008170(v19 + 2, v20);
  v22 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v21 + 16);
  v23 = swift_retain(v18);
  LOBYTE(v137) = v22(v20, v21, v23);
  v137 = v137;
  swift_release(v18);
  v24 = swift_getKeyPath(&unk_100112CD0);
  v150[0] = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v150, v24, v17);
  swift_release(v24);
  v25 = *(_QWORD *)(a1 + 32);
  v26 = *(_QWORD **)(v25 + 200);
  v27 = v26[5];
  v28 = v26[6];
  sub_100008170(v26 + 2, v27);
  v29 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v28 + 16);
  v30 = swift_retain(v25);
  LOBYTE(v131) = v29(v27, v28, v30);
  v131 = v131;
  v31 = swift_release(v25);
  v32 = static UnitPoint.center.getter(v31);
  v139 = v33;
  v140 = v32;
  v34 = 1.0;
  v136 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(1.0, 170.0, 15.0, 0.0);
  v35 = swift_getKeyPath(&unk_100112CD0);
  v150[0] = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v150, v35, v17);
  swift_release(v35);
  v36 = *(_QWORD *)(a1 + 32);
  v37 = *(_QWORD **)(v36 + 200);
  v38 = v37[5];
  v39 = v37[6];
  sub_100008170(v37 + 2, v38);
  v40 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v39 + 16);
  v41 = swift_retain(v36);
  LOBYTE(v123) = v40(v38, v39, v41);
  v123 = v123;
  swift_release(v36);
  v42 = v122;
  v44 = ProgressView<>.init<>()(v43);
  v45 = static Color.white.getter(v44);
  v46 = swift_getKeyPath(&unk_100112CF8);
  v47 = v128;
  v48 = v129;
  (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v6, v42, v129);
  v49 = (uint64_t *)&v6[*(int *)(v126 + 36)];
  *v49 = v46;
  v49[1] = v45;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v42, v48);
  v50 = v121;
  sub_100007ADC((uint64_t)v6, v121, &qword_100163C28);
  *(_WORD *)(v50 + *(int *)(v125 + 36)) = 257;
  sub_100008194((uint64_t)v6, &qword_100163C28);
  v51 = v132;
  v52 = v130;
  v53 = v134;
  (*(void (**)(char *, _QWORD, uint64_t))(v132 + 104))(v130, enum case for ControlSize.small(_:), v134);
  v54 = swift_getKeyPath(&unk_100112D28);
  v55 = (uint64_t)v124;
  v56 = (uint64_t *)&v124[*(int *)(v127 + 36)];
  v57 = sub_100003E70(&qword_100163C58);
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))((char *)v56 + *(int *)(v57 + 28), v52, v53);
  *v56 = v54;
  sub_100007ADC(v50, v55, &qword_100163C30);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v53);
  sub_100008194(v50, &qword_100163C30);
  v58 = swift_getKeyPath(&unk_100112CD0);
  v150[0] = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v150, v58, v17);
  swift_release(v58);
  v59 = *(_QWORD *)(a1 + 32);
  v60 = *(_QWORD **)(v59 + 200);
  v61 = v60[5];
  v62 = v60[6];
  sub_100008170(v60 + 2, v61);
  v63 = *(unsigned __int8 (**)(uint64_t, uint64_t, __n128))(v62 + 16);
  v64 = swift_retain(v59);
  LODWORD(v54) = v63(v61, v62, v64);
  swift_release(v59);
  if ((_DWORD)v54 == 1)
    v65 = 1.0;
  else
    v65 = 0.0;
  v66 = v133;
  sub_100007ADC(v55, v133, &qword_100163C38);
  *(double *)(v66 + *(int *)(v135 + 36)) = v65;
  sub_100008194(v55, &qword_100163C38);
  v67 = swift_getKeyPath(&unk_100112CD0);
  v150[0] = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v150, v67, v17);
  swift_release(v67);
  v68 = *(_QWORD *)(a1 + 32);
  v69 = *(_QWORD **)(v68 + 200);
  v70 = v69[5];
  v71 = v69[6];
  sub_100008170(v69 + 2, v70);
  v72 = *(unsigned __int8 (**)(uint64_t, uint64_t, __n128))(v71 + 16);
  v73 = swift_retain(v68);
  v74 = v72(v70, v71, v73);
  v75 = swift_release(v68);
  if (v74 == 1)
    v76 = 1.0;
  else
    v76 = 0.0;
  v77 = static UnitPoint.center.getter(v75);
  v79 = v78;
  v80 = v138;
  sub_100007ADC(v66, v138, &qword_100163C40);
  v81 = v80 + *(int *)(v141 + 36);
  *(double *)v81 = v76;
  *(double *)(v81 + 8) = v76;
  *(double *)(v81 + 16) = v77;
  *(_QWORD *)(v81 + 24) = v79;
  sub_100008194(v66, &qword_100163C40);
  v82 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(1.0, 170.0, 15.0, 0.0);
  v83 = swift_getKeyPath(&unk_100112CD0);
  v150[0] = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v150, v83, v17);
  swift_release(v83);
  v84 = *(_QWORD *)(a1 + 32);
  v85 = *(_QWORD **)(v84 + 200);
  v86 = v85[5];
  v87 = v85[6];
  sub_100008170(v85 + 2, v86);
  v88 = *(unsigned __int8 (**)(uint64_t, uint64_t, __n128))(v87 + 16);
  v89 = swift_retain(v84);
  v90 = v88(v86, v87, v89);
  swift_release(v84);
  v91 = v142;
  sub_100007ADC(v80, v142, &qword_100163C48);
  v92 = v91 + *(int *)(v143 + 36);
  *(_QWORD *)v92 = v82;
  *(_BYTE *)(v92 + 8) = v90 == 1;
  sub_100008194(v80, &qword_100163C48);
  v93 = v91;
  v94 = v148;
  sub_100007A98(v93, v148, &qword_100163C50);
  v95 = v123 == 2;
  if (v131 == 2)
    v96 = 1.0;
  else
    v96 = 0.0;
  if (v137 == 2)
    v97 = 1.0;
  else
    v97 = 0.0;
  v143 = Image.init(systemName:)(0x6C69662E79616C70, 0xE90000000000006CLL);
  v142 = static Font.subheadline.getter(v143);
  v98 = swift_getKeyPath(&unk_100112C10);
  if (sub_10009AC2C())
    v99 = 1.0;
  else
    v99 = 0.0;
  if (!sub_10009AC2C())
    v34 = 0.0;
  v101 = static UnitPoint.center.getter(v100);
  v103 = v102;
  v104 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(1.0, 170.0, 15.0, 0.0);
  v105 = sub_10009AC2C();
  v106 = v149;
  sub_100007ADC(v94, v149, &qword_100163C50);
  v107 = v105;
  v109 = v146;
  v108 = v147;
  v111 = KeyPath;
  v110 = v145;
  *v147 = v146;
  v108[1] = v111;
  v108[2] = v110;
  *((double *)v108 + 3) = v97;
  *((double *)v108 + 4) = v96;
  v112 = v140;
  *((double *)v108 + 5) = v96;
  *((double *)v108 + 6) = v112;
  v108[7] = v139;
  v113 = v136;
  v108[8] = v136;
  *((_BYTE *)v108 + 72) = v95;
  v114 = v108;
  v115 = sub_100003E70(&qword_100163C60);
  sub_100007ADC(v106, (uint64_t)v114 + *(int *)(v115 + 48), &qword_100163C50);
  v116 = (uint64_t)v114 + *(int *)(v115 + 64);
  v117 = v143;
  *(_QWORD *)v116 = v143;
  *(_QWORD *)(v116 + 8) = v98;
  v118 = v98;
  v119 = v142;
  *(_QWORD *)(v116 + 16) = v142;
  *(double *)(v116 + 24) = v99;
  *(double *)(v116 + 32) = v34;
  *(double *)(v116 + 40) = v34;
  *(double *)(v116 + 48) = v101;
  *(_QWORD *)(v116 + 56) = v103;
  *(_QWORD *)(v116 + 64) = v104;
  *(_BYTE *)(v116 + 72) = v107;
  swift_retain(v109);
  swift_retain(v111);
  swift_retain(v110);
  swift_retain(v113);
  swift_retain(v117);
  swift_retain(v118);
  swift_retain(v119);
  swift_retain(v104);
  sub_100008194(v148, &qword_100163C50);
  swift_release(v104);
  swift_release(v119);
  swift_release(v118);
  swift_release(v117);
  sub_100008194(v149, &qword_100163C50);
  swift_release(v113);
  swift_release(v110);
  swift_release(v111);
  swift_release(v109);
}

uint64_t sub_1000D0584@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isLuminanceReduced.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000D05B0(unsigned __int8 *a1)
{
  return EnvironmentValues.isLuminanceReduced.setter(*a1);
}

uint64_t sub_1000D05D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000CEFA8(*(_QWORD *)v1, *(_BYTE *)(v1 + 8), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000D05EC(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = sub_100003E70(&qword_100163C10);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  result = sub_100003E70(&qword_100163C18);
  if (*(_QWORD *)(*(_QWORD *)(result - 8) + 64) == v6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    a2((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D06BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ControlSize(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.controlSize.setter(v4);
}

unint64_t sub_1000D0748()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163B50;
  if (!qword_100163B50)
  {
    v1 = sub_1000034AC(&qword_100163B48);
    sub_1000D07CC();
    sub_100007D40(&qword_10015DAB0, &qword_10015DAB8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163B50);
  }
  return result;
}

unint64_t sub_1000D07CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163B58;
  if (!qword_100163B58)
  {
    v1 = sub_1000034AC(&qword_100163B60);
    sub_10007BBF4();
    sub_100007D40(&qword_10015E310, &qword_10015E318, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163B58);
  }
  return result;
}

uint64_t sub_1000D0850(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD *)(a1 + 152);
  v4 = *(_QWORD *)(a1 + 160);
  sub_10000BFF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v4);
  swift_release(v2);
  swift_bridgeObjectRelease();
  swift_release(v3);
  return a1;
}

double destroy for PlaybackView(uint64_t a1)
{
  double result;

  sub_10001E324(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 16)).n128_u64[0];
  return result;
}

uint64_t _s16EventViewService12PlaybackViewVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_100062664(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  return a1;
}

uint64_t assignWithCopy for PlaybackView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_100062664(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_10001E324(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

uint64_t assignWithTake for PlaybackView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_10001E324(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_release(v8);
  return a1;
}

ValueMetadata *type metadata accessor for PlaybackView()
{
  return &type metadata for PlaybackView;
}

uint64_t sub_1000D0A0C()
{
  return sub_10005C954(&qword_100163B70, &qword_100163A10, (void (*)(void))sub_1000D0A40);
}

uint64_t sub_1000D0A40()
{
  return sub_10005C954(&qword_100163B78, &qword_1001639F8, (void (*)(void))sub_1000D0A64);
}

unint64_t sub_1000D0A64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163B80;
  if (!qword_100163B80)
  {
    v1 = sub_1000034AC(&qword_1001639F0);
    sub_100007D40(&qword_100163A08, &qword_1001639E8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163B80);
  }
  return result;
}

uint64_t sub_1000D0B00(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011B2F4, 1);
}

uint64_t sub_1000D0B10()
{
  uint64_t v0;

  sub_10001E324(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000D0B40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000CF6F0(*(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_1000D0B58()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D0B7C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000D05EC(a1, *(void (**)(char *))(v1 + 16));
}

unint64_t sub_1000D0B84()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100163BF8;
  if (!qword_100163BF8)
  {
    v1 = sub_1000034AC(&qword_100163C00);
    v2[0] = sub_1000034AC(&qword_10015D750);
    v2[1] = type metadata accessor for CircularProgressViewStyle(255);
    v2[2] = sub_100007D40(&qword_10015D7D0, &qword_10015D750, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    v2[3] = sub_100003B3C(&qword_100163C08, type metadata accessor for CircularProgressViewStyle, (uint64_t)&unk_10010F8AC);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.progressViewStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163BF8);
  }
  return result;
}

uint64_t sub_1000D0C84()
{
  return EnvironmentValues.controlSize.getter();
}

unint64_t sub_1000D0CAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163C68;
  if (!qword_100163C68)
  {
    v1 = sub_1000034AC(&qword_100163BA0);
    sub_1000D0D30();
    sub_100007D40(&qword_100163C80, &qword_100163C88, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163C68);
  }
  return result;
}

unint64_t sub_1000D0D30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163C70;
  if (!qword_100163C70)
  {
    v1 = sub_1000034AC(&qword_100163B90);
    sub_100007D40(&qword_100163C78, &qword_100163B88, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163C70);
  }
  return result;
}

_QWORD *sub_1000D0DB4(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
    v14 = swift_bridgeObjectRetain(v7);
    if (v13(v10, 1, v11, v14))
    {
      v15 = sub_100003E70(&qword_100165370);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v17 = a3[6];
    v18 = a3[7];
    v19 = (char *)v4 + v17;
    v20 = (char *)a2 + v17;
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    v19[16] = v20[16];
    v22 = *((_QWORD *)v20 + 3);
    LOBYTE(v20) = *((_BYTE *)a2 + v18);
    *((_QWORD *)v19 + 3) = v22;
    *((_BYTE *)v4 + v18) = (_BYTE)v20;
    v23 = a3[8];
    v24 = (_QWORD *)((char *)v4 + v23);
    v25 = (_QWORD *)((char *)a2 + v23);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    v26 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      v27 = type metadata accessor for UserInterfaceSizeClass(0);
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v27))
      {
        v29 = sub_100003E70(&qword_10015D4A0);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v28 + 16))(v24, v25, v27);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v24, 0, 1, v27);
      }
      v31 = v24;
      v32 = v26;
      v33 = 1;
    }
    else
    {
      v30 = *v25;
      *v24 = *v25;
      swift_retain(v30);
      v31 = v24;
      v32 = v26;
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v32, v33);
  }
  return v4;
}

void sub_1000D0FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)(a1 + *(int *)(a2 + 32));
  v8 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for UserInterfaceSizeClass(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
      (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
}

_QWORD *sub_1000D10E0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v11 + 48);
  v13 = swift_bridgeObjectRetain(v6);
  if (v12(v9, 1, v10, v13))
  {
    v14 = sub_100003E70(&qword_100165370);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = a3[6];
  v16 = a3[7];
  v17 = (char *)a1 + v15;
  v18 = (char *)a2 + v15;
  v19 = *((_QWORD *)v18 + 1);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = v19;
  v17[16] = v18[16];
  v20 = *((_QWORD *)v18 + 3);
  LOBYTE(v18) = *((_BYTE *)a2 + v16);
  *((_QWORD *)v17 + 3) = v20;
  *((_BYTE *)a1 + v16) = (_BYTE)v18;
  v21 = a3[8];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  v24 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v25 = type metadata accessor for UserInterfaceSizeClass(0);
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48))(v23, 1, v25))
    {
      v27 = sub_100003E70(&qword_10015D4A0);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      v28 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v26 + 16))(v22, v23, v25);
      v28 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v22, 0, 1, v25);
    }
  }
  else
  {
    v29 = *v23;
    *v22 = *v23;
    swift_retain(v29);
    v28 = 0;
  }
  swift_storeEnumTagMultiPayload(v22, v24, v28);
  return a1;
}

_QWORD *sub_1000D12C8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_100003E70(&qword_100165370);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  v16 = a3[6];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)((char *)a2 + v16);
  v19 = *(_QWORD *)((char *)a2 + v16 + 8);
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease();
  v17[16] = v18[16];
  v20 = *((_QWORD *)v18 + 3);
  *((_QWORD *)v17 + 3) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  if (a1 != a2)
  {
    v21 = a3[8];
    v22 = (_QWORD *)((char *)a1 + v21);
    v23 = (_QWORD *)((char *)a2 + v21);
    sub_100008194((uint64_t)a1 + v21, &qword_10015D498);
    v24 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for UserInterfaceSizeClass(0);
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48))(v23, 1, v25))
      {
        v27 = sub_100003E70(&qword_10015D4A0);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        v28 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v26 + 16))(v22, v23, v25);
        v28 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v22, 0, 1, v25);
      }
    }
    else
    {
      v29 = *v23;
      *v22 = *v23;
      swift_retain(v29);
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v24, v28);
  }
  return a1;
}

_OWORD *sub_1000D153C(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100003E70(&qword_100165370);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_OWORD *)((char *)a1 + v12);
  v15 = (_OWORD *)((char *)a2 + v12);
  v16 = *v15;
  v17 = v15[1];
  LOBYTE(v15) = *((_BYTE *)a2 + v13);
  *v14 = v16;
  v14[1] = v17;
  *((_BYTE *)a1 + v13) = (_BYTE)v15;
  v18 = a3[8];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for UserInterfaceSizeClass(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
    {
      v24 = sub_100003E70(&qword_10015D4A0);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v19, v20, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
    }
    swift_storeEnumTagMultiPayload(v19, v21, 1);
  }
  else
  {
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_1000D16F4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_100003E70(&qword_100165370);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = a3[6];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)((char *)a2 + v16 + 8);
  *(_QWORD *)v17 = *(_QWORD *)((char *)a2 + v16);
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  v17[16] = v18[16];
  *((_QWORD *)v17 + 3) = *((_QWORD *)v18 + 3);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  if (a1 != a2)
  {
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    sub_100008194((uint64_t)a1 + v20, &qword_10015D498);
    v23 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for UserInterfaceSizeClass(0);
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
      {
        v26 = sub_100003E70(&qword_10015D4A0);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v21, v22, v24);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
      }
      swift_storeEnumTagMultiPayload(v21, v23, 1);
    }
    else
    {
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000D193C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D1948);
}

uint64_t sub_1000D1948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003E70(&qword_100165370);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_100003E70(&qword_10015DFA0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1000D19F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D19FC);
}

uint64_t sub_1000D19FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_100003E70(&qword_100165370);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_100003E70(&qword_10015DFA0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for ArtistEventListHeader(uint64_t a1)
{
  return sub_10002F744(a1, qword_100163CE8, (uint64_t)&nominal type descriptor for ArtistEventListHeader);
}

void sub_1000D1AB4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_100112D78;
  sub_1000500A4(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_100112D90;
    v6[3] = &unk_100112DA8;
    sub_10001C9A4(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

uint64_t destroy for VenueEventListHeader(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t initializeWithCopy for VenueEventListHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for VenueEventListHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for VenueEventListHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

ValueMetadata *type metadata accessor for VenueEventListHeader()
{
  return &type metadata for VenueEventListHeader;
}

uint64_t sub_1000D1D14(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011B3B8, 1);
}

uint64_t sub_1000D1D24@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v2 = v1;
  v4 = sub_100003E70(&qword_100163D30);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_100163D38);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static VerticalAlignment.top.getter(v8);
  v12 = type metadata accessor for ArtistEventListHeader(0);
  v13 = 0x4024000000000000;
  if (*((_BYTE *)v2 + *(int *)(v12 + 28)))
    v13 = 0x4020000000000000;
  *(_QWORD *)v6 = v11;
  *((_QWORD *)v6 + 1) = v13;
  v6[16] = 0;
  v14 = sub_100003E70(&qword_100163D40);
  v15 = sub_1000D1E8C(v2, (uint64_t)&v6[*(int *)(v14 + 44)]);
  v16 = static Alignment.leading.getter(v15);
  sub_1000E6648(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v10, 0.0, 1, 0.0, 1, v16, v17);
  sub_100008194((uint64_t)v6, &qword_100163D30);
  return sub_100007A98((uint64_t)v10, a1, &qword_100163D38);
}

uint64_t sub_1000D1E8C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  int v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  _BYTE *v56;
  _QWORD *v57;
  void (*v58)(_BYTE *, uint64_t, uint64_t);
  void (*v59)(_BYTE *, _QWORD, uint64_t, uint64_t);
  _BYTE *v60;
  uint64_t v61;
  void (*v62)(_BYTE *, uint64_t);
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  double v66;
  _BYTE *v67;
  _QWORD *v68;
  _BYTE *v69;
  uint64_t v70;
  char v71;
  void (*v72)(_BYTE *, uint64_t);
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE v94[12];
  int v95;
  _BYTE *v96;
  char *v97;
  _BYTE *v98;
  _BYTE *v99;
  _BYTE *v100;
  void (*v101)(_BYTE *, uint64_t, uint64_t);
  _QWORD *v102;
  int v103;
  uint64_t v104;
  _BYTE *v105;
  int *v106;
  _BYTE *v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _BYTE *v116;
  _BYTE *v117;
  _QWORD *v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  _BYTE *v124;

  v121 = a2;
  v119 = type metadata accessor for HeaderText(0);
  v3 = __chkstk_darwin(v119);
  v102 = &v94[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v120 = &v94[-v5];
  v6 = type metadata accessor for UserInterfaceSizeClass(0);
  v7 = *(_QWORD **)(v6 - 8);
  __chkstk_darwin(v6);
  v100 = &v94[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v123 = sub_100003E70(&qword_10015E040);
  v9 = __chkstk_darwin(v123);
  v124 = &v94[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v12 = &v94[-v11];
  v13 = sub_100003E70(&qword_10015D4A0);
  v14 = __chkstk_darwin(v13);
  v99 = &v94[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __chkstk_darwin(v14);
  v105 = &v94[-v17];
  v18 = __chkstk_darwin(v16);
  v107 = &v94[-v19];
  v20 = __chkstk_darwin(v18);
  v98 = &v94[-v21];
  v22 = __chkstk_darwin(v20);
  v24 = &v94[-v23];
  __chkstk_darwin(v22);
  v122 = &v94[-v25];
  v26 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v26);
  v28 = &v94[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v29 = sub_100003E70(&qword_100163D48);
  v113 = *(_QWORD *)(v29 - 8);
  v114 = v29;
  __chkstk_darwin(v29);
  v31 = &v94[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v109 = sub_100003E70(&qword_100163D50);
  __chkstk_darwin(v109);
  v111 = &v94[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v110 = sub_100003E70(&qword_100163D58);
  v33 = __chkstk_darwin(v110);
  v117 = &v94[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v35 = __chkstk_darwin(v33);
  v108 = &v94[-v36];
  __chkstk_darwin(v35);
  v116 = &v94[-v37];
  v38 = (int *)type metadata accessor for ArtistEventListHeader(0);
  v39 = sub_100007ADC((uint64_t)a1 + v38[5], (uint64_t)v28, &qword_100165370);
  v40 = static Animation.easeInOut.getter(v39);
  v41 = Transaction.init(animation:)(v40);
  v42 = sub_100003E70(&qword_100163D60);
  v43 = sub_1000D3788();
  v112 = v31;
  AsyncImage.init(url:scale:transaction:content:)(v28, v41, sub_1000D28D0, 0, v42, v43, 1.0);
  v45 = v38[7];
  v44 = v38[8];
  v106 = v38;
  v46 = v122;
  v104 = v45;
  v103 = *((unsigned __int8 *)a1 + v45);
  v118 = a1;
  v47 = (char *)a1 + v44;
  sub_10001DADC((uint64_t)v122);
  v48 = enum case for UserInterfaceSizeClass.compact(_:);
  v101 = (void (*)(_BYTE *, uint64_t, uint64_t))v7[13];
  v101(v24, enum case for UserInterfaceSizeClass.compact(_:), v6);
  v49 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v7[7];
  v49(v24, 0, 1, v6);
  v50 = (uint64_t)&v12[*(int *)(v123 + 48)];
  sub_100007ADC((uint64_t)v46, (uint64_t)v12, &qword_10015D4A0);
  sub_100007ADC((uint64_t)v24, v50, &qword_10015D4A0);
  v115 = v7;
  v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v7[6];
  if (v51((uint64_t)v12, 1, v6) == 1)
  {
    sub_100008194((uint64_t)v24, &qword_10015D4A0);
    sub_100008194((uint64_t)v46, &qword_10015D4A0);
    v52 = v51(v50, 1, v6);
    v53 = (uint64_t)v105;
    if (v52 == 1)
    {
      sub_100008194((uint64_t)v12, &qword_10015D4A0);
      v54 = 25.0;
      v55 = (uint64_t)v107;
      goto LABEL_9;
    }
  }
  else
  {
    v56 = v98;
    sub_100007ADC((uint64_t)v12, (uint64_t)v98, &qword_10015D4A0);
    if (v51(v50, 1, v6) != 1)
    {
      v96 = v12;
      v57 = v115;
      v58 = (void (*)(_BYTE *, uint64_t, uint64_t))v115[4];
      v97 = v47;
      v59 = v49;
      v60 = v100;
      v58(v100, v50, v6);
      v61 = sub_100003B3C((unint64_t *)&qword_10015E0D0, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v95 = dispatch thunk of static Equatable.== infix(_:_:)(v56, v60, v6, v61);
      v62 = (void (*)(_BYTE *, uint64_t))v57[1];
      v63 = v60;
      v49 = v59;
      v62(v63, v6);
      sub_100008194((uint64_t)v24, &qword_10015D4A0);
      sub_100008194((uint64_t)v122, &qword_10015D4A0);
      v62(v56, v6);
      sub_100008194((uint64_t)v96, &qword_10015D4A0);
      v54 = 25.0;
      v55 = (uint64_t)v107;
      v53 = (uint64_t)v105;
      if ((v95 & 1) != 0)
        goto LABEL_9;
      goto LABEL_8;
    }
    sub_100008194((uint64_t)v24, &qword_10015D4A0);
    sub_100008194((uint64_t)v122, &qword_10015D4A0);
    ((void (*)(_BYTE *, uint64_t))v115[1])(v56, v6);
    v53 = (uint64_t)v105;
  }
  sub_100008194((uint64_t)v12, &qword_10015E040);
  v55 = (uint64_t)v107;
LABEL_8:
  v54 = 30.0;
LABEL_9:
  sub_10001DADC(v55);
  v101((_BYTE *)v53, v48, v6);
  v49((_BYTE *)v53, 0, 1, v6);
  v64 = v124;
  v65 = (uint64_t)&v124[*(int *)(v123 + 48)];
  sub_100007ADC(v55, (uint64_t)v124, &qword_10015D4A0);
  sub_100007ADC(v53, v65, &qword_10015D4A0);
  if (v51((uint64_t)v64, 1, v6) != 1)
  {
    v67 = v99;
    sub_100007ADC((uint64_t)v124, (uint64_t)v99, &qword_10015D4A0);
    if (v51(v65, 1, v6) != 1)
    {
      v68 = v115;
      v69 = v100;
      ((void (*)(_BYTE *, uint64_t, uint64_t))v115[4])(v100, v65, v6);
      v70 = sub_100003B3C((unint64_t *)&qword_10015E0D0, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v71 = dispatch thunk of static Equatable.== infix(_:_:)(v67, v69, v6, v70);
      v72 = (void (*)(_BYTE *, uint64_t))v68[1];
      v72(v69, v6);
      sub_100008194(v53, &qword_10015D4A0);
      sub_100008194(v55, &qword_10015D4A0);
      v72(v67, v6);
      sub_100008194((uint64_t)v124, &qword_10015D4A0);
      v66 = 25.0;
      if ((v71 & 1) != 0)
        goto LABEL_17;
LABEL_16:
      v66 = 30.0;
      goto LABEL_17;
    }
    sub_100008194(v53, &qword_10015D4A0);
    sub_100008194(v55, &qword_10015D4A0);
    ((void (*)(_BYTE *, uint64_t))v115[1])(v67, v6);
LABEL_14:
    sub_100008194((uint64_t)v124, &qword_10015E040);
    goto LABEL_16;
  }
  sub_100008194(v53, &qword_10015D4A0);
  sub_100008194(v55, &qword_10015D4A0);
  if (v51(v65, 1, v6) != 1)
    goto LABEL_14;
  sub_100008194((uint64_t)v124, &qword_10015D4A0);
  v66 = 25.0;
LABEL_17:
  v74 = v112;
  v73 = v113;
  v75 = (uint64_t)v111;
  v76 = v114;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v113 + 16))(v111, v112, v114);
  v77 = v75 + *(int *)(v109 + 36);
  *(_BYTE *)v77 = v103;
  *(_QWORD *)(v77 + 8) = 0x404E000000000000;
  *(double *)(v77 + 16) = v54;
  *(_QWORD *)(v77 + 24) = 0x404E000000000000;
  *(double *)(v77 + 32) = v66;
  (*(void (**)(_BYTE *, uint64_t))(v73 + 8))(v74, v76);
  v78 = v108;
  sub_100007ADC(v75, (uint64_t)v108, &qword_100163D50);
  v78[*(int *)(v110 + 36)] = 1;
  sub_100008194(v75, &qword_100163D50);
  v79 = v116;
  sub_100007A98((uint64_t)v78, (uint64_t)v116, &qword_100163D58);
  v80 = v118[1];
  v81 = (char *)v118 + v106[6];
  v82 = *(_QWORD *)v81;
  v83 = *((_QWORD *)v81 + 1);
  v84 = v81[16];
  v85 = *((_QWORD *)v81 + 3);
  LOBYTE(v81) = *((_BYTE *)v118 + v104);
  v86 = (uint64_t)v102;
  *v102 = *v118;
  *(_QWORD *)(v86 + 8) = v80;
  *(_QWORD *)(v86 + 16) = v82;
  *(_QWORD *)(v86 + 24) = v83;
  *(_BYTE *)(v86 + 32) = v84;
  *(_QWORD *)(v86 + 40) = v85;
  *(_BYTE *)(v86 + 48) = (_BYTE)v81;
  v87 = (_QWORD *)(v86 + *(int *)(v119 + 28));
  *v87 = swift_getKeyPath(&unk_100112E78);
  v88 = sub_100003E70(&qword_10015D498);
  swift_storeEnumTagMultiPayload(v87, v88, 0);
  v89 = v120;
  sub_1000D4CA8(v86, (uint64_t)v120);
  v90 = v117;
  sub_100007ADC((uint64_t)v79, (uint64_t)v117, &qword_100163D58);
  sub_100028390((uint64_t)v89, v86, type metadata accessor for HeaderText);
  v91 = v121;
  sub_100007ADC((uint64_t)v90, v121, &qword_100163D58);
  v92 = sub_100003E70(&qword_100163D98);
  sub_100028390(v86, v91 + *(int *)(v92 + 48), type metadata accessor for HeaderText);
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRetain(v85);
  sub_1000283D4((uint64_t)v89, type metadata accessor for HeaderText);
  sub_100008194((uint64_t)v79, &qword_100163D58);
  sub_1000283D4(v86, type metadata accessor for HeaderText);
  return sub_100008194((uint64_t)v90, &qword_100163D58);
}

void sub_1000D28D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unsigned __int8 v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[26];
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  unsigned __int8 v47;
  char v48;

  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AsyncImagePhase(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (_QWORD *)((char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v12 = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v9 + 96))(v11, v8);
    *(_QWORD *)&v41 = *v11;
    v13 = v41;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    KeyPath = Image.resizable(capInsets:resizingMode:)(v7, v13, 0.0, 0.0, 0.0, 0.0);
    v15 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v16 = static Color.black.getter(v15);
    v17 = Color.opacity(_:)(0.1);
    swift_release(v16);
    *(_QWORD *)&v42 = KeyPath;
    *((_QWORD *)&v42 + 1) = v17;
    *(_OWORD *)v43 = xmmword_10010BAD0;
    *(_QWORD *)&v43[16] = 0x4010000000000000;
    v43[24] = 0;
    swift_retain(KeyPath);
    swift_retain(v17);
    v18 = sub_100003E70(&qword_100161F90);
    v19 = sub_100003E70(&qword_100163D88);
    v20 = sub_10005C954(&qword_100161F88, &qword_100161F90, (void (*)(void))sub_10009EDF4);
    v21 = sub_1000D3880();
    _ConditionalContent<>.init(storage:)(&v42, v18, v19, v20, v21);
    v22 = v44;
    v42 = v44;
    *(_OWORD *)v43 = v45;
    *(_QWORD *)&v43[16] = v46;
    *(_WORD *)&v43[24] = v47;
    sub_1000D4CF4(v44, *((uint64_t *)&v44 + 1), v45, *((uint64_t *)&v45 + 1), v46, v47);
    v23 = sub_100003E70(&qword_100163D78);
    v24 = sub_1000D37F4();
    _ConditionalContent<>.init(storage:)(&v42, v23, &type metadata for EmptyView, v24, &protocol witness table for EmptyView);
    swift_release(v41);
    sub_1000D4D24(v22, *((uint64_t *)&v22 + 1));
    v25 = v17;
  }
  else
  {
    if (v12 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v9 + 96))(v11, v8);
      swift_errorRelease(*v11);
    }
    else if (v12 != enum case for AsyncImagePhase.empty(_:))
    {
      v42 = 0u;
      memset(v43, 0, 25);
      v43[25] = 1;
      v38 = sub_100003E70(&qword_100163D78);
      v39 = sub_1000D37F4();
      _ConditionalContent<>.init(storage:)(&v42, v38, &type metadata for EmptyView, v39, &protocol witness table for EmptyView);
      v40 = v45;
      v41 = v44;
      v35 = v46;
      v36 = v47;
      v37 = v48;
      (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
      v34 = v40;
      v33 = v41;
      goto LABEL_10;
    }
    if (qword_10015CE70 != -1)
      swift_once(&qword_10015CE70, sub_1000382F0);
    v26 = qword_10016F668;
    KeyPath = swift_getKeyPath(&unk_100112EA8);
    *(_QWORD *)&v42 = KeyPath;
    *((_QWORD *)&v42 + 1) = v26;
    memset(v43, 0, 24);
    v43[24] = 1;
    swift_retain_n(v26, 2);
    swift_retain(KeyPath);
    v27 = sub_100003E70(&qword_100161F90);
    v28 = sub_100003E70(&qword_100163D88);
    v29 = sub_10005C954(&qword_100161F88, &qword_100161F90, (void (*)(void))sub_10009EDF4);
    v30 = sub_1000D3880();
    _ConditionalContent<>.init(storage:)(&v42, v27, v28, v29, v30);
    v42 = v44;
    *(_OWORD *)v43 = v45;
    *(_QWORD *)&v43[16] = v46;
    *(_WORD *)&v43[24] = v47;
    v31 = sub_100003E70(&qword_100163D78);
    v32 = sub_1000D37F4();
    _ConditionalContent<>.init(storage:)(&v42, v31, &type metadata for EmptyView, v32, &protocol witness table for EmptyView);
    v25 = v26;
  }
  swift_release(v25);
  swift_release(KeyPath);
  v33 = v44;
  v34 = v45;
  v35 = v46;
  v36 = v47;
  v37 = v48;
LABEL_10:
  *(_OWORD *)a2 = v33;
  *(_OWORD *)(a2 + 16) = v34;
  *(_QWORD *)(a2 + 32) = v35;
  *(_BYTE *)(a2 + 40) = v36;
  *(_BYTE *)(a2 + 41) = v37;
}

uint64_t sub_1000D2D94@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  _OWORD v112[3];
  uint64_t v113;
  __int128 v114;
  __int128 v115;

  v110 = a2;
  v111 = a1;
  v108 = type metadata accessor for HeaderText(0);
  v2 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v108);
  v4 = (char *)&v89 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v109 = (uint64_t)&v89 - v5;
  v107 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v107);
  v106 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MapInteractionModes(0);
  __chkstk_darwin(v7);
  v99 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003E70(&qword_10015F5E8);
  __chkstk_darwin(v9);
  v97 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for MapCamera(0);
  v91 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v12 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MapCameraPosition(0);
  v90 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003E70(&qword_10015F5F0);
  __chkstk_darwin(v16);
  v18 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100003E70(&qword_100163DB0);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v20 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100003E70(&qword_100163DB8);
  __chkstk_darwin(v93);
  v22 = (char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100003E70(&qword_100163DC0);
  __chkstk_darwin(v96);
  v24 = (char *)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100003E70(&qword_100163DC8);
  __chkstk_darwin(v98);
  v26 = (char *)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_100003E70(&qword_100163DD0);
  __chkstk_darwin(v103);
  v28 = (char *)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100003E70(&qword_100163DD8);
  __chkstk_darwin(v29);
  v102 = (char *)&v89 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100003E70(&qword_100163DE0);
  v31 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v104);
  v105 = (uint64_t)&v89 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v31);
  v100 = (uint64_t)&v89 - v34;
  __chkstk_darwin(v33);
  v101 = (uint64_t)&v89 - v35;
  MapCamera.init(centerCoordinate:distance:heading:pitch:)(*((double *)v111 + 7), *((double *)v111 + 8), 1000.0, 0.0, 60.0);
  static MapCameraPosition.camera(_:)(v12);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v12, v92);
  static Binding.constant(_:)(v15, v13);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v15, v13);
  v36 = type metadata accessor for MapCameraBounds(0);
  v37 = v97;
  v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v97, 1, 1, v36);
  v39 = v99;
  static MapInteractionModes.all.getter(v38);
  Map.init<>(position:bounds:interactionModes:scope:)(v18, v37, v39, 0, 1);
  KeyPath = swift_getKeyPath(&unk_100112ED8);
  v41 = swift_allocObject(&unk_100153428, 17, 7);
  *(_BYTE *)(v41 + 16) = 1;
  v42 = v94;
  v43 = v95;
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v22, v20, v95);
  v44 = (uint64_t *)&v22[*(int *)(v93 + 36)];
  *v44 = KeyPath;
  v44[1] = (uint64_t)sub_1000D4E0C;
  v44[2] = v41;
  v45 = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v20, v43);
  LOBYTE(KeyPath) = static Edge.Set.bottom.getter(v45);
  v46 = EdgeInsets.init(_all:)(-20.0);
  v48 = v47;
  v50 = v49;
  v52 = v51;
  sub_100007ADC((uint64_t)v22, (uint64_t)v24, &qword_100163DB8);
  v53 = &v24[*(int *)(v96 + 36)];
  *v53 = KeyPath;
  *((double *)v53 + 1) = v46;
  *((_QWORD *)v53 + 2) = v48;
  *((_QWORD *)v53 + 3) = v50;
  *((_QWORD *)v53 + 4) = v52;
  v53[40] = 0;
  sub_100008194((uint64_t)v22, &qword_100163DB8);
  v54 = v106;
  v55 = &v106[*(int *)(v107 + 20)];
  v56 = enum case for RoundedCornerStyle.continuous(_:);
  v57 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 104))(v55, v56, v57);
  __asm { FMOV            V0.2D, #8.0 }
  *v54 = _Q0;
  v63 = (uint64_t)&v26[*(int *)(v98 + 36)];
  sub_100028390((uint64_t)v54, v63, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v63 + *(int *)(sub_100003E70(&qword_10015E338) + 36)) = 256;
  sub_100007ADC((uint64_t)v24, (uint64_t)v26, &qword_100163DC0);
  sub_1000283D4((uint64_t)v54, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v64 = sub_100008194((uint64_t)v24, &qword_100163DC0);
  v65 = v111;
  v66 = *((_BYTE *)v111 + 48);
  if ((v66 & 1) != 0)
    v67 = 0x4044000000000000;
  else
    v67 = 0x404E000000000000;
  v68 = static Alignment.center.getter(v64);
  _FrameLayout.init(width:height:alignment:)(v112, v67, 0, v67, 0, v68, v69);
  sub_100007ADC((uint64_t)v26, (uint64_t)v28, &qword_100163DC8);
  v70 = v103;
  v71 = &v28[*(int *)(v103 + 36)];
  v72 = v112[1];
  *(_OWORD *)v71 = v112[0];
  *((_OWORD *)v71 + 1) = v72;
  *((_OWORD *)v71 + 2) = v112[2];
  sub_100008194((uint64_t)v26, &qword_100163DC8);
  v73 = sub_10005C954(&qword_100163DE8, &qword_100163DD0, (void (*)(void))sub_1000D4E24);
  v74 = (uint64_t)v102;
  View.accessibility(hidden:)(1, v70, v73);
  sub_100008194((uint64_t)v28, &qword_100163DD0);
  v75 = v100;
  sub_100007ADC(v74, v100, &qword_100163DD8);
  *(_BYTE *)(v75 + *(int *)(v104 + 36)) = 1;
  sub_100008194(v74, &qword_100163DD8);
  v76 = v101;
  sub_100007A98(v75, v101, &qword_100163DE0);
  v77 = *v65;
  v114 = v65[1];
  v78 = v114;
  v115 = v77;
  v80 = *((_QWORD *)v65 + 4);
  v113 = *((_QWORD *)v65 + 5);
  v79 = v113;
  *(_OWORD *)v4 = v77;
  *((_OWORD *)v4 + 1) = v78;
  *((_QWORD *)v4 + 4) = v80;
  *((_QWORD *)v4 + 5) = v79;
  v4[48] = v66;
  v81 = &v4[*(int *)(v108 + 28)];
  *(_QWORD *)v81 = swift_getKeyPath(&unk_100112E78);
  v82 = sub_100003E70(&qword_10015D498);
  swift_storeEnumTagMultiPayload(v81, v82, 0);
  v83 = v109;
  sub_1000D4CA8((uint64_t)v4, v109);
  v84 = v105;
  sub_100007ADC(v76, v105, &qword_100163DE0);
  sub_100028390(v83, (uint64_t)v4, type metadata accessor for HeaderText);
  v85 = v110;
  sub_100007ADC(v84, v110, &qword_100163DE0);
  v86 = sub_100003E70(&qword_100163E10);
  sub_100028390((uint64_t)v4, v85 + *(int *)(v86 + 48), type metadata accessor for HeaderText);
  v87 = v85 + *(int *)(v86 + 64);
  *(_QWORD *)v87 = 0;
  *(_BYTE *)(v87 + 8) = 1;
  sub_10000E3E4((uint64_t)&v115);
  sub_10000E3E4((uint64_t)&v114);
  sub_100045AC4(&v113);
  sub_1000283D4(v83, type metadata accessor for HeaderText);
  sub_100008194(v76, &qword_100163DE0);
  sub_1000283D4((uint64_t)v4, type metadata accessor for HeaderText);
  return sub_100008194(v84, &qword_100163DE0);
}

uint64_t sub_1000D3698@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13[3];
  __int128 v14;
  uint64_t v15;

  v3 = sub_100003E70(&qword_100163DA0);
  __chkstk_darwin(v3);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_OWORD *)(v1 + 48);
  v13[2] = *(_OWORD *)(v1 + 32);
  v14 = v6;
  v15 = *(_QWORD *)(v1 + 64);
  v7 = *(_OWORD *)(v1 + 16);
  v13[0] = *(_OWORD *)v1;
  v13[1] = v7;
  v9 = static VerticalAlignment.top.getter(v8);
  v10 = 0x4020000000000000;
  if ((v14 & 1) == 0)
    v10 = 0x4024000000000000;
  *(_QWORD *)v5 = v9;
  *((_QWORD *)v5 + 1) = v10;
  v5[16] = 0;
  v11 = sub_100003E70(&qword_100163DA8);
  sub_1000D2D94(v13, (uint64_t)&v5[*(int *)(v11 + 44)]);
  return sub_100007A98((uint64_t)v5, a1, &qword_100163DA0);
}

uint64_t sub_1000D3764(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011B390, 1);
}

uint64_t type metadata accessor for HeaderText(uint64_t a1)
{
  return sub_10002F744(a1, qword_100163E70, (uint64_t)&nominal type descriptor for HeaderText);
}

unint64_t sub_1000D3788()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163D68;
  if (!qword_100163D68)
  {
    v1 = sub_1000034AC(&qword_100163D60);
    sub_1000D37F4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163D68);
  }
  return result;
}

unint64_t sub_1000D37F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163D70;
  if (!qword_100163D70)
  {
    v1 = sub_1000034AC(&qword_100163D78);
    sub_10005C954(&qword_100161F88, &qword_100161F90, (void (*)(void))sub_10009EDF4);
    sub_1000D3880();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163D70);
  }
  return result;
}

unint64_t sub_1000D3880()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163D80;
  if (!qword_100163D80)
  {
    v1 = sub_1000034AC(&qword_100163D88);
    sub_1000D3904();
    sub_100007D40(&qword_10015E9F0, &qword_10015E9F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163D80);
  }
  return result;
}

unint64_t sub_1000D3904()
{
  unint64_t result;

  result = qword_100163D90;
  if (!qword_100163D90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Circle, &type metadata for Circle);
    atomic_store(result, (unint64_t *)&qword_100163D90);
  }
  return result;
}

uint64_t sub_1000D3948@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t OpaqueTypeConformance2;
  uint64_t v48;
  uint64_t v49;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];

  v66 = a1;
  v2 = type metadata accessor for AccessibilityTraits(0);
  v64 = *(_QWORD *)(v2 - 8);
  v65 = v2;
  __chkstk_darwin(v2);
  v63 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for AccessibilityChildBehavior(0);
  v60 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v59 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for HeaderText(0);
  __chkstk_darwin(v5);
  v56 = (uint64_t)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UserInterfaceSizeClass(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v51 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003E70(&qword_10015E040);
  __chkstk_darwin(v10);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003E70(&qword_10015D4A0);
  __chkstk_darwin(v13);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v51 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)&v51 - v20;
  v55 = sub_100003E70(&qword_100163EC8);
  __chkstk_darwin(v55);
  v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100003E70(&qword_100163ED0);
  v57 = *(_QWORD *)(v24 - 8);
  v58 = v24;
  __chkstk_darwin(v24);
  v54 = (char *)&v51 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100003E70(&qword_100163ED8);
  __chkstk_darwin(v26);
  v53 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = static HorizontalAlignment.leading.getter(v28);
  v61 = v1;
  sub_10001DADC((uint64_t)v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v18, enum case for UserInterfaceSizeClass.compact(_:), v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v18, 0, 1, v7);
  v29 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_100007ADC((uint64_t)v21, (uint64_t)v12, &qword_10015D4A0);
  sub_100007ADC((uint64_t)v18, v29, &qword_10015D4A0);
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v30((uint64_t)v12, 1, v7) == 1)
  {
    sub_100008194((uint64_t)v18, &qword_10015D4A0);
    sub_100008194((uint64_t)v21, &qword_10015D4A0);
    if (v30(v29, 1, v7) == 1)
    {
      sub_100008194((uint64_t)v12, &qword_10015D4A0);
      v31 = v61;
      v32 = v56;
      sub_100028390(v61, v56, type metadata accessor for HeaderText);
LABEL_8:
      sub_1000283D4(v32, type metadata accessor for HeaderText);
      v37 = 0x3FF0000000000000;
      goto LABEL_11;
    }
    goto LABEL_6;
  }
  sub_100007ADC((uint64_t)v12, (uint64_t)v15, &qword_10015D4A0);
  if (v30(v29, 1, v7) == 1)
  {
    sub_100008194((uint64_t)v18, &qword_10015D4A0);
    sub_100008194((uint64_t)v21, &qword_10015D4A0);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
LABEL_6:
    sub_100008194((uint64_t)v12, &qword_10015E040);
    v31 = v61;
    v32 = v56;
    sub_100028390(v61, v56, type metadata accessor for HeaderText);
    goto LABEL_9;
  }
  v33 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v51, v29, v7);
  v34 = sub_100003B3C((unint64_t *)&qword_10015E0D0, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  v35 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v33, v7, v34);
  v36 = *(void (**)(char *, uint64_t))(v8 + 8);
  v36(v33, v7);
  sub_100008194((uint64_t)v18, &qword_10015D4A0);
  sub_100008194((uint64_t)v21, &qword_10015D4A0);
  v36(v15, v7);
  sub_100008194((uint64_t)v12, &qword_10015D4A0);
  v31 = v61;
  v32 = v56;
  sub_100028390(v61, v56, type metadata accessor for HeaderText);
  if ((v35 & 1) != 0)
    goto LABEL_8;
LABEL_9:
  v38 = *(unsigned __int8 *)(v32 + 48);
  sub_1000283D4(v32, type metadata accessor for HeaderText);
  v37 = 0x4014000000000000;
  if (v38)
    v37 = 0x3FF0000000000000;
LABEL_11:
  *(_QWORD *)v23 = v52;
  *((_QWORD *)v23 + 1) = v37;
  v23[16] = 0;
  v39 = sub_100003E70(&qword_100163EE0);
  v40 = sub_1000D3F78(v31, (uint64_t)&v23[*(int *)(v39 + 44)]);
  v41 = v59;
  static AccessibilityChildBehavior.combine.getter(v40);
  v42 = sub_100007D40(&qword_100163EE8, &qword_100163EC8, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v44 = v54;
  v43 = v55;
  View.accessibilityElement(children:)(v41, v55, v42);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v41, v62);
  v45 = sub_100008194((uint64_t)v23, &qword_100163EC8);
  v46 = v63;
  static AccessibilityTraits.isHeader.getter(v45);
  v67[0] = v43;
  v67[1] = v42;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v67, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v48 = (uint64_t)v53;
  v49 = v58;
  View.accessibility(addTraits:)(v46, v58, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v46, v65);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v44, v49);
  return sub_100007A98(v48, v66, &qword_100163ED8);
}

uint64_t sub_1000D3F78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  double v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t KeyPath;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char v88;
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char v102;
  int v103;
  uint64_t v104;
  double v105;
  double v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  void (*v123)(char *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  char v173;
  char v174;

  v159 = a2;
  v3 = sub_100003E70(&qword_100163EF0);
  v155 = *(_QWORD *)(v3 - 8);
  v156 = v3;
  __chkstk_darwin(v3);
  v168 = (char *)&v138 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_100003E70(&qword_100163EF8);
  __chkstk_darwin(v154);
  v158 = (uint64_t)&v138 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v153 = (char *)&v138 - v7;
  __chkstk_darwin(v8);
  v157 = (uint64_t)&v138 - v9;
  v10 = type metadata accessor for UserInterfaceSizeClass(0);
  v166 = *(_QWORD *)(v10 - 8);
  v167 = v10;
  __chkstk_darwin(v10);
  v140 = (char *)&v138 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100003E70(&qword_10015E040);
  __chkstk_darwin(v164);
  v152 = (uint64_t)&v138 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v148 = (uint64_t)&v138 - v14;
  v15 = sub_100003E70(&qword_10015D4A0);
  __chkstk_darwin(v15);
  v17 = (char *)&v138 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v161 = (uint64_t)&v138 - v19;
  __chkstk_darwin(v20);
  v150 = (uint64_t)&v138 - v21;
  __chkstk_darwin(v22);
  v138 = (uint64_t)&v138 - v23;
  __chkstk_darwin(v24);
  v162 = (uint64_t)&v138 - v25;
  __chkstk_darwin(v26);
  v160 = (uint64_t)&v138 - v27;
  v143 = sub_100003E70(&qword_10015E8E8);
  __chkstk_darwin(v143);
  v29 = (uint64_t *)((char *)&v138 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = sub_100003E70(&qword_10015E8F0);
  __chkstk_darwin(v30);
  v145 = (char *)&v138 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_100003E70(&qword_10015E8F8);
  __chkstk_darwin(v142);
  v33 = (char *)&v138 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100003E70(&qword_100163F00);
  __chkstk_darwin(v144);
  v163 = (uint64_t)&v138 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_100003E70(&qword_100163F08);
  __chkstk_darwin(v147);
  v151 = (uint64_t)&v138 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v146 = (uint64_t)&v138 - v37;
  __chkstk_darwin(v38);
  v165 = (uint64_t)&v138 - v39;
  v40 = *(_QWORD *)(a1 + 16);
  v41 = *(_QWORD *)(a1 + 24);
  v42 = *(unsigned __int8 *)(a1 + 32);
  v43 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v43);
  v44 = Text.init(_:tableName:bundle:comment:)(v40, v41, v42, v43, 0, 0, 0, 0, 0, 256);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  v149 = a1;
  v51 = *(unsigned __int8 *)(a1 + 48);
  v139 = v17;
  if (v51 == 1)
    static Font.Weight.regular.getter();
  else
    v52 = ((double (*)(void))static Font.Weight.semibold.getter)();
  v53 = v48 & 1;
  v54 = Text.fontWeight(_:)(*(_QWORD *)&v52, 0, v44, v46, v48 & 1, v50);
  v56 = v55;
  LODWORD(v141) = v57;
  v59 = v58;
  sub_10000BFF8(v44, v46, v53);
  swift_bridgeObjectRelease();
  if (v51)
  {
    v60 = type metadata accessor for Text.Case(0);
    v61 = (uint64_t)v145;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v145, 1, 1, v60);
  }
  else
  {
    v62 = enum case for Text.Case.uppercase(_:);
    v63 = type metadata accessor for Text.Case(0);
    v64 = *(_QWORD *)(v63 - 8);
    v61 = (uint64_t)v145;
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 104))(v145, v62, v63);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
  }
  v65 = v162;
  KeyPath = swift_getKeyPath(&unk_100112F68);
  sub_100007ADC(v61, (uint64_t)v29 + *(int *)(v143 + 28), &qword_10015E8F0);
  *v29 = KeyPath;
  sub_100007ADC((uint64_t)v29, (uint64_t)&v33[*(int *)(v142 + 36)], &qword_10015E8E8);
  *(_QWORD *)v33 = v54;
  *((_QWORD *)v33 + 1) = v56;
  v67 = v141;
  v68 = v141 & 1;
  v33[16] = v141 & 1;
  *((_QWORD *)v33 + 3) = v59;
  sub_10000C008(v54, v56, v67 & 1);
  swift_bridgeObjectRetain(v59);
  sub_100008194((uint64_t)v29, &qword_10015E8E8);
  sub_100008194(v61, &qword_10015E8F0);
  sub_10000BFF8(v54, v56, v68);
  swift_bridgeObjectRelease();
  v69 = v163;
  sub_100007ADC((uint64_t)v33, v163, &qword_10015E8F8);
  *(_QWORD *)(v69 + *(int *)(v144 + 36)) = 0x3FE0000000000000;
  v70 = sub_100008194((uint64_t)v33, &qword_10015E8F8);
  v71 = v149;
  LODWORD(v142) = *(unsigned __int8 *)(v149 + 48);
  v141 = static Font.caption2.getter(v70);
  v72 = type metadata accessor for HeaderText(0);
  v73 = v160;
  v145 = (char *)(v71 + *(int *)(v72 + 28));
  sub_10001DADC(v160);
  v74 = enum case for UserInterfaceSizeClass.compact(_:);
  v75 = v166;
  v76 = v167;
  v143 = *(_QWORD *)(v166 + 104);
  ((void (*)(uint64_t, _QWORD, uint64_t))v143)(v65, enum case for UserInterfaceSizeClass.compact(_:), v167);
  v144 = *(_QWORD *)(v75 + 56);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v144)(v65, 0, 1, v76);
  v77 = v148;
  v78 = v148 + *(int *)(v164 + 48);
  sub_100007ADC(v73, v148, &qword_10015D4A0);
  sub_100007ADC(v65, v78, &qword_10015D4A0);
  v79 = v65;
  v80 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
  if (v80(v77, 1, v76) == 1)
  {
    sub_100008194(v79, &qword_10015D4A0);
    sub_100008194(v73, &qword_10015D4A0);
    if (v80(v78, 1, v76) == 1)
    {
      v81 = sub_100008194(v77, &qword_10015D4A0);
LABEL_14:
      v90 = static Font.caption2.getter(v81);
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  v82 = v138;
  sub_100007ADC(v77, v138, &qword_10015D4A0);
  if (v80(v78, 1, v76) == 1)
  {
    sub_100008194(v162, &qword_10015D4A0);
    sub_100008194(v73, &qword_10015D4A0);
    (*(void (**)(uint64_t, uint64_t))(v166 + 8))(v82, v76);
LABEL_12:
    v81 = sub_100008194(v77, &qword_10015E040);
    goto LABEL_15;
  }
  v83 = v82;
  v84 = v166;
  v85 = v77;
  v86 = v140;
  (*(void (**)(char *, uint64_t, uint64_t))(v166 + 32))(v140, v78, v76);
  v87 = sub_100003B3C((unint64_t *)&qword_10015E0D0, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  v88 = dispatch thunk of static Equatable.== infix(_:_:)(v83, v86, v76, v87);
  v89 = *(void (**)(char *, uint64_t))(v84 + 8);
  v89(v86, v76);
  sub_100008194(v162, &qword_10015D4A0);
  sub_100008194(v160, &qword_10015D4A0);
  v89((char *)v83, v76);
  v81 = sub_100008194(v85, &qword_10015D4A0);
  if ((v88 & 1) != 0)
    goto LABEL_14;
LABEL_15:
  v90 = static Font.footnote.getter(v81);
LABEL_16:
  v91 = v90;
  v92 = v163;
  v93 = v146;
  sub_100007ADC(v163, v146, &qword_100163F00);
  v94 = v93 + *(int *)(v147 + 36);
  *(_BYTE *)v94 = v142;
  *(_QWORD *)(v94 + 8) = v141;
  *(_QWORD *)(v94 + 16) = v91;
  sub_100008194(v92, &qword_100163F00);
  sub_100007A98(v93, v165, &qword_100163F08);
  v95 = *(_QWORD *)(v71 + 8);
  v169 = *(_QWORD *)v71;
  v170 = v95;
  v96 = sub_10000CB40();
  swift_bridgeObjectRetain(v95);
  v97 = Text.init<A>(_:)(&v169, &type metadata for String, v96);
  v98 = v97;
  v100 = v99;
  v102 = v101;
  v103 = *(unsigned __int8 *)(v71 + 48);
  v169 = v97;
  v170 = v99;
  v171 = v101 & 1;
  v172 = v104;
  v173 = 0;
  v174 = v103 ^ 1;
  if (((v103 ^ 1) & 1) != 0)
    v105 = static Font.Weight.bold.getter(v97);
  else
    static Font.Weight.semibold.getter();
  v106 = v105;
  v107 = sub_100003E70(&qword_100163F10);
  v108 = sub_1000D5938();
  View.fontWeight(_:)(*(_QWORD *)&v106, 0, v107, v108);
  sub_10000BFF8(v98, v100, v102 & 1);
  v109 = swift_bridgeObjectRelease();
  v110 = static Font.title.getter(v109);
  v111 = v150;
  sub_10001DADC(v150);
  v112 = v161;
  v113 = v167;
  ((void (*)(uint64_t, uint64_t, uint64_t))v143)(v161, v74, v167);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v144)(v112, 0, 1, v113);
  v114 = v152;
  v115 = v152 + *(int *)(v164 + 48);
  sub_100007ADC(v111, v152, &qword_10015D4A0);
  sub_100007ADC(v112, v115, &qword_10015D4A0);
  if (v80(v114, 1, v113) != 1)
  {
    v117 = (uint64_t)v139;
    sub_100007ADC(v114, (uint64_t)v139, &qword_10015D4A0);
    if (v80(v115, 1, v113) != 1)
    {
      v118 = v166;
      v119 = v140;
      (*(void (**)(char *, uint64_t, uint64_t))(v166 + 32))(v140, v115, v113);
      v120 = sub_100003B3C((unint64_t *)&qword_10015E0D0, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v121 = dispatch thunk of static Equatable.== infix(_:_:)(v117, v119, v113, v120);
      v122 = v111;
      v123 = *(void (**)(char *, uint64_t))(v118 + 8);
      v123(v119, v113);
      sub_100008194(v161, &qword_10015D4A0);
      sub_100008194(v122, &qword_10015D4A0);
      v123((char *)v117, v113);
      v116 = sub_100008194(v114, &qword_10015D4A0);
      if ((v121 & 1) != 0)
        goto LABEL_26;
LABEL_27:
      v124 = static Font.subheadline.getter(v116);
      goto LABEL_28;
    }
    sub_100008194(v112, &qword_10015D4A0);
    sub_100008194(v111, &qword_10015D4A0);
    (*(void (**)(uint64_t, uint64_t))(v166 + 8))(v117, v113);
LABEL_24:
    v116 = sub_100008194(v114, &qword_10015E040);
    goto LABEL_27;
  }
  sub_100008194(v112, &qword_10015D4A0);
  sub_100008194(v111, &qword_10015D4A0);
  if (v80(v115, 1, v113) != 1)
    goto LABEL_24;
  v116 = sub_100008194(v114, &qword_10015D4A0);
LABEL_26:
  v124 = static Font.footnote.getter(v116);
LABEL_28:
  v125 = v124;
  v127 = v155;
  v126 = v156;
  v128 = (uint64_t)v153;
  v129 = v168;
  (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v153, v168, v156);
  v130 = v128 + *(int *)(v154 + 36);
  *(_BYTE *)v130 = v103;
  *(_QWORD *)(v130 + 8) = v110;
  *(_QWORD *)(v130 + 16) = v125;
  (*(void (**)(char *, uint64_t))(v127 + 8))(v129, v126);
  v131 = v157;
  sub_100007A98(v128, v157, &qword_100163EF8);
  v132 = v165;
  v133 = v151;
  sub_100007ADC(v165, v151, &qword_100163F08);
  v134 = v158;
  sub_100007ADC(v131, v158, &qword_100163EF8);
  v135 = v159;
  sub_100007ADC(v133, v159, &qword_100163F08);
  v136 = sub_100003E70(&qword_100163F20);
  sub_100007ADC(v134, v135 + *(int *)(v136 + 48), &qword_100163EF8);
  sub_100008194(v131, &qword_100163EF8);
  sub_100008194(v132, &qword_100163F08);
  sub_100008194(v134, &qword_100163EF8);
  return sub_100008194(v133, &qword_100163F08);
}

uint64_t sub_1000D4CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HeaderText(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D4CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;

  if ((a6 & 1) != 0)
    v6 = a2;
  else
    v6 = a1;
  if ((a6 & 1) != 0)
    v7 = a1;
  else
    v7 = a2;
  swift_retain(v6);
  return swift_retain(v7);
}

uint64_t sub_1000D4D24(uint64_t a1, uint64_t a2)
{
  swift_release(a1);
  return swift_release(a2);
}

uint64_t sub_1000D4D48@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000D4D74@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000D4DA0(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t sub_1000D4DC4(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

_BYTE *sub_1000D4DE8(_BYTE *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

uint64_t sub_1000D4DFC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_1000D4E0C(_BYTE *result)
{
  uint64_t v1;

  *result &= ~*(_BYTE *)(v1 + 16) & 1;
  return result;
}

unint64_t sub_1000D4E24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163DF0;
  if (!qword_100163DF0)
  {
    v1 = sub_1000034AC(&qword_100163DC8);
    sub_10005C954(&qword_100163DF8, &qword_100163DC0, (void (*)(void))sub_1000D4EC8);
    sub_100007D40(&qword_10015E330, &qword_10015E338, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163DF0);
  }
  return result;
}

unint64_t sub_1000D4EC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163E00;
  if (!qword_100163E00)
  {
    v1 = sub_1000034AC(&qword_100163DB8);
    sub_100007D40(&qword_100163E08, &qword_100163DB0, (uint64_t)&protocol conformance descriptor for Map<A>);
    sub_100007D40(&qword_1001603B0, &qword_1001603B8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163E00);
  }
  return result;
}

uint64_t sub_1000D4F64(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v15);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v7 = a2[5];
    *(_QWORD *)(a1 + 40) = v7;
    v8 = *(int *)(a3 + 28);
    v9 = (uint64_t *)((char *)a2 + v8);
    v10 = (uint64_t *)(a1 + v8);
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    v11 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v9, v11) == 1)
    {
      v12 = type metadata accessor for UserInterfaceSizeClass(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(v9, 1, v12))
      {
        v14 = sub_100003E70(&qword_10015D4A0);
        memcpy(v10, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 16))(v10, v9, v12);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      v17 = v10;
      v18 = v11;
      v19 = 1;
    }
    else
    {
      v16 = *v9;
      *v10 = *v9;
      swift_retain(v16);
      v17 = v10;
      v18 = v11;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  return a1;
}

void sub_1000D50D0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 28));
  v5 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for UserInterfaceSizeClass(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6))
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
}

uint64_t sub_1000D5190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(int *)(a3 + 28);
  v8 = (uint64_t *)(a2 + v7);
  v9 = (uint64_t *)(a1 + v7);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v10 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v8, v10) == 1)
  {
    v11 = type metadata accessor for UserInterfaceSizeClass(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11))
    {
      v13 = sub_100003E70(&qword_10015D4A0);
      memcpy(v9, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      v14 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v12 + 16))(v9, v8, v11);
      v14 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  else
  {
    v15 = *v8;
    *v9 = *v8;
    swift_retain(v15);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v14);
  return a1;
}

uint64_t sub_1000D52D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 28);
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)(a2 + v9);
    sub_100008194(a1 + v9, &qword_10015D498);
    v12 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for UserInterfaceSizeClass(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
      {
        v15 = sub_100003E70(&qword_10015D4A0);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
        v16 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v14 + 16))(v10, v11, v13);
        v16 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
      }
    }
    else
    {
      v17 = *v11;
      *v10 = *v11;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v16);
  }
  return a1;
}

uint64_t sub_1000D545C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(int *)(a3 + 28);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for UserInterfaceSizeClass(0);
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
    {
      v11 = sub_100003E70(&qword_10015D4A0);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v6, v7, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload(v6, v8, 1);
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000D5574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 28);
    v9 = (void *)(a1 + v8);
    v10 = (const void *)(a2 + v8);
    sub_100008194(a1 + v8, &qword_10015D498);
    v11 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for UserInterfaceSizeClass(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        v14 = sub_100003E70(&qword_10015D4A0);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v9, v10, v12);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000D56D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D56E0);
}

uint64_t sub_1000D56E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003E70(&qword_10015DFA0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_1000D5760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D576C);
}

uint64_t sub_1000D576C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100003E70(&qword_10015DFA0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void sub_1000D57E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100112D78;
  v4[1] = &unk_100112D90;
  v4[2] = &unk_100112DA8;
  sub_10001C9A4(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

unint64_t sub_1000D5870()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163EB0;
  if (!qword_100163EB0)
  {
    v1 = sub_1000034AC(&qword_100163D38);
    sub_100007D40(&qword_100163EB8, &qword_100163D30, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163EB0);
  }
  return result;
}

uint64_t sub_1000D58F4()
{
  return sub_100007D40(&qword_100163EC0, &qword_100163DA0, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_1000D5920(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011B3E0, 1);
}

unint64_t sub_1000D5938()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100163F18;
  if (!qword_100163F18)
  {
    v1 = sub_1000034AC(&qword_100163F10);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163F18);
  }
  return result;
}

unint64_t sub_1000D59A0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100163F28;
  if (!qword_100163F28)
  {
    v1 = sub_1000034AC(&qword_100163ED8);
    v2[0] = sub_1000034AC(&qword_100163EC8);
    v2[1] = sub_100007D40(&qword_100163EE8, &qword_100163EC8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100163F28);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PlaybackStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000D5AB8 + 4 * byte_100112FA5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000D5AEC + 4 * byte_100112FA0[v4]))();
}

uint64_t sub_1000D5AEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D5AF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D5AFCLL);
  return result;
}

uint64_t sub_1000D5B08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D5B10);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000D5B14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D5B1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlaybackStatus()
{
  return &type metadata for PlaybackStatus;
}

unint64_t sub_1000D5B3C()
{
  unint64_t result;

  result = qword_100163F30;
  if (!qword_100163F30)
  {
    result = swift_getWitnessTable(&unk_100113010, &type metadata for PlaybackStatus);
    atomic_store(result, (unint64_t *)&qword_100163F30);
  }
  return result;
}

_QWORD *initializeWithCopy for EventCampaignHandler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for EventCampaignHandler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for EventCampaignHandler(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for EventCampaignHandler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventCampaignHandler(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EventCampaignHandler(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for EventCampaignHandler()
{
  return &type metadata for EventCampaignHandler;
}

void sub_1000D5D94()
{
  qword_100163F38 = 0x6763737469;
  unk_100163F40 = 0xE500000000000000;
}

void sub_1000D5DB4()
{
  qword_100163F48 = 0x7463737469;
  unk_100163F50 = 0xE500000000000000;
}

void sub_1000D5DD4()
{
  qword_100163F58 = 29795;
  unk_100163F60 = 0xE200000000000000;
}

void sub_1000D5DEC()
{
  qword_100163F68 = 29808;
  unk_100163F70 = 0xE200000000000000;
}

uint64_t sub_1000D5E08(uint64_t result, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
  {
    v5 = sub_100003E70(&qword_10015D990);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    v9 = a2;
    return swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D5E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[39] = a2;
  v3[40] = a3;
  v3[38] = a1;
  return swift_task_switch(sub_1000D5EB0, 0, 0);
}

uint64_t sub_1000D5EB0()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 10;
  v2 = objc_msgSend((id)objc_opt_self(SHRemoteConfiguration), "sharedInstance");
  v0[41] = v2;
  v0[15] = v0 + 36;
  v0[10] = v0;
  v0[11] = sub_1000D5F70;
  v3 = swift_continuation_init(v0 + 10, 1);
  v0[26] = _NSConcreteStackBlock;
  v4 = v0 + 26;
  v4[1] = 0x40000000;
  v4[2] = sub_1000D5E04;
  v4[3] = &unk_1001535E8;
  v4[4] = v3;
  objc_msgSend(v2, "defaultValuesWithCompletion:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_1000D5F70()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 112);
  *(_QWORD *)(*v0 + 336) = v2;
  if (v2)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 320));
    v3 = sub_1000D6364;
  }
  else
  {
    v3 = sub_1000D5FD8;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000D5FD8()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0 + 18;
  v2 = (void *)v0[41];
  v3 = (void *)v0[36];
  v4 = objc_msgSend(v3, "campaignGroup");

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v0[43] = v5;
  v0[44] = v7;
  v0[23] = v0 + 36;
  v0[18] = v0;
  v0[19] = sub_1000D60B8;
  v8 = swift_continuation_init(v0 + 18, 1);
  v0[26] = _NSConcreteStackBlock;
  v9 = v0 + 26;
  v9[1] = 0x40000000;
  v9[2] = sub_1000D5E04;
  v9[3] = &unk_100153600;
  v9[4] = v8;
  objc_msgSend(v2, "campaignTokenWithCompletion:", v9);
  return swift_continuation_await(v1);
}

uint64_t sub_1000D60B8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 176);
  *(_QWORD *)(*v0 + 360) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 320);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 352));
    swift_bridgeObjectRelease(v3);
    v4 = sub_1000D6568;
  }
  else
  {
    v4 = sub_1000D612C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000D612C()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = v0 + 2;
  v2 = (void *)v0[41];
  v3 = (void *)v0[36];
  if (v0[40])
    v4 = v0[40];
  else
    v4 = 0x8000000100117640;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  v6 = objc_msgSend(v3, "tokenForClientIdentifier:", v5);

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;
  v0[34] = v7;
  v0[35] = v8;

  v0[46] = v9;
  v0[7] = v0 + 36;
  v0[2] = v0;
  v0[3] = sub_1000D6250;
  v10 = swift_continuation_init(v0 + 2, 1);
  v0[26] = _NSConcreteStackBlock;
  v11 = v0 + 26;
  v11[1] = 0x40000000;
  v11[2] = sub_1000D5E04;
  v11[3] = &unk_100153618;
  v11[4] = v10;
  objc_msgSend(v2, "defaultValuesWithCompletion:", v11);
  return swift_continuation_await(v1);
}

uint64_t sub_1000D6250()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 376) = v2;
  if (v2)
  {
    v3 = v1[46];
    swift_bridgeObjectRelease(v1[44]);
    swift_bridgeObjectRelease(v3);
    v4 = sub_1000D6770;
  }
  else
  {
    v1[48] = v1[34];
    v4 = sub_1000D62CC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000D62CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 352);
  v3 = *(void **)(v0 + 328);
  v4 = *(void **)(v0 + 288);
  v5 = objc_msgSend(v4, "providerToken");

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v9 = *(_QWORD *)(v0 + 384);
  v10 = *(_QWORD **)(v0 + 304);
  *v10 = *(_QWORD *)(v0 + 344);
  v10[1] = v2;
  v10[2] = v9;
  v10[3] = v1;
  v10[4] = v6;
  v10[5] = v8;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D6364()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v14;

  v1 = *(void **)(v0 + 328);
  swift_willThrow();

  v2 = *(_QWORD *)(v0 + 336);
  if (qword_10015CF60 != -1)
    swift_once(&qword_10015CF60, sub_100105E80);
  v3 = type metadata accessor for Logger(0);
  sub_100011AC4(v3, (uint64_t)qword_10016F728);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v14 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue(v2, v0 + 296, v0 + 248);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
    v11 = v10;
    *(_QWORD *)(v0 + 208) = sub_1000C7684(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Could not fetch event campaign values due to Error: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  v12 = *(_OWORD **)(v0 + 304);
  v12[1] = 0u;
  v12[2] = 0u;
  *v12 = 0u;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D6568()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v14;

  v1 = *(void **)(v0 + 328);
  swift_willThrow();

  v2 = *(_QWORD *)(v0 + 360);
  if (qword_10015CF60 != -1)
    swift_once(&qword_10015CF60, sub_100105E80);
  v3 = type metadata accessor for Logger(0);
  sub_100011AC4(v3, (uint64_t)qword_10016F728);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v14 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue(v2, v0 + 296, v0 + 248);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
    v11 = v10;
    *(_QWORD *)(v0 + 208) = sub_1000C7684(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Could not fetch event campaign values due to Error: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  v12 = *(_OWORD **)(v0 + 304);
  v12[1] = 0u;
  v12[2] = 0u;
  *v12 = 0u;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D6770()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v14;

  v1 = *(void **)(v0 + 328);
  swift_willThrow();

  v2 = *(_QWORD *)(v0 + 376);
  if (qword_10015CF60 != -1)
    swift_once(&qword_10015CF60, sub_100105E80);
  v3 = type metadata accessor for Logger(0);
  sub_100011AC4(v3, (uint64_t)qword_10016F728);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v14 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue(v2, v0 + 296, v0 + 248);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
    v11 = v10;
    *(_QWORD *)(v0 + 208) = sub_1000C7684(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Could not fetch event campaign values due to Error: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  v12 = *(_OWORD **)(v0 + 304);
  v12[1] = 0u;
  v12[2] = 0u;
  *v12 = 0u;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D697C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1000D69C8(&qword_10015E430, (uint64_t)&protocol conformance descriptor for Genre);
  result = sub_1000D69C8(&qword_100163F80, (uint64_t)&protocol conformance descriptor for Genre);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000D69C8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Genre(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D6A08()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1[3] = v0;
  v2 = sub_100003E70(&qword_100163928);
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MusicSubscription(0);
  v1[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[6] = v4;
  v5 = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[7] = v5;
  v6 = type metadata accessor for MainActor(0);
  v1[8] = v6;
  v1[9] = static MainActor.shared.getter(v6);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static MusicSubscription.current.getter[1]);
  v1[10] = v7;
  *v7 = v1;
  v7[1] = sub_1000D6AC4;
  return static MusicSubscription.current.getter(v5);
}

uint64_t sub_1000D6AC4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(*(_QWORD *)(v2 + 64), &protocol witness table for MainActor);
  if (v0)
    v6 = sub_1000D6C94;
  else
    v6 = sub_1000D6B48;
  return swift_task_switch(v6, v5, v4);
}

void sub_1000D6B48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 72));
  v3 = *(_QWORD *)(v2 + 16);
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v4 + 16) = v1;
  v5 = (uint64_t *)(v3 + 16);
  v6 = (os_unfair_lock_s *)(v3 + 24);
  if (os_unfair_lock_trylock(v6))
  {
    sub_1000D7028(*(_QWORD *)(v4 + 16));
    os_unfair_lock_unlock(v6);
  }
  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(v4);
  os_unfair_lock_lock(v6);
  sub_1000D6EB8(v5, v8);
  os_unfair_lock_unlock(v6);
  if (!v7)
  {
    v9 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
    v11 = *(_QWORD *)(v0 + 32);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9) == 1)
    {
      sub_1000D7CC4(v11);
    }
    else
    {
      v12 = MusicSubscription.canBecomeSubscriber.getter();
      v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v13(v11, v9);
      if ((v12 & 1) == 0)
      {
LABEL_8:
        v13(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
        v15 = *(_QWORD *)(v0 + 32);
        swift_task_dealloc(*(_QWORD *)(v0 + 56));
        swift_task_dealloc(v15);
        (*(void (**)(void))(v0 + 8))();
        return;
      }
    }
    v14 = *(_QWORD *)(v0 + 48);
    sub_1000D7170();
    v13 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    goto LABEL_8;
  }
}

uint64_t sub_1000D6C94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 72));
  if (qword_10015CF60 != -1)
    swift_once(&qword_10015CF60, sub_100105E80);
  v1 = *(_QWORD *)(v0 + 88);
  v2 = type metadata accessor for Logger(0);
  sub_100011AC4(v2, (uint64_t)qword_10016F728);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 88);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error fetching Apple Music subscription status with error: %@", v8, 0xCu);
    v11 = sub_100003E70(&qword_10015FB58);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 88));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v12 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D6E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for AppleMusicSubscriptionStatusProvider(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_1000D786C();
  qword_10016F6C0 = v1;
  return result;
}

uint64_t sub_1000D6EB8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100113120);
  v8[0] = v3;
  v5 = sub_100003B3C(&qword_100164148, type metadata accessor for SubscriptionUpdater, (uint64_t)&unk_100113100);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater__subscription;
  swift_beginAccess(v3 + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater__subscription, v8, 0, 0);
  return sub_1000D7E04(v6, a2);
}

uint64_t sub_1000D6F78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  KeyPath = swift_getKeyPath(&unk_100113120);
  v7[0] = v1;
  v4 = sub_100003B3C(&qword_100164148, type metadata accessor for SubscriptionUpdater, (uint64_t)&unk_100113100);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater__subscription;
  swift_beginAccess(v1 + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater__subscription, v7, 0, 0);
  return sub_1000D7E04(v5, a1);
}

void sub_1000D7028(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v3 = sub_100003E70(&qword_100163928);
  __chkstk_darwin(v3);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = (os_unfair_lock_s *)(*(_QWORD *)(v1
                                      + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater_lock)
                          + 16);
  os_unfair_lock_lock(v6);
  v7 = type metadata accessor for MusicSubscription(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v5, a1, v7);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  KeyPath = swift_getKeyPath(&unk_100113120);
  v12 = v1;
  v13 = v5;
  v14 = v1;
  v10 = sub_100003B3C(&qword_100164148, type metadata accessor for SubscriptionUpdater, (uint64_t)&unk_100113100);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_1000D7DA4, v11, (char *)&type metadata for () + 8, v10);
  swift_release(KeyPath);
  sub_1000D7CC4((uint64_t)v5);
  os_unfair_lock_unlock(v6);
}

uint64_t sub_1000D7170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  v1 = v0;
  v2 = sub_100003E70(&qword_100161700);
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10015CF60 != -1)
    swift_once(&qword_10015CF60, sub_100105E80);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100011AC4(v5, (uint64_t)qword_10016F728);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Started observing subscription updates", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v4, 1, 1, v10);
  v11 = *(_QWORD *)(v1 + 16);
  v12 = (_QWORD *)swift_allocObject(&unk_100153678, 40, 7);
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = v11;
  swift_retain(v11);
  v13 = sub_1000F7C84((uint64_t)v4, (uint64_t)&unk_100164138, (uint64_t)v12);
  return swift_release(v13);
}

uint64_t sub_1000D72EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[3] = a4;
  v5 = type metadata accessor for MusicSubscription(0);
  v4[4] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[5] = v6;
  v4[6] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_100163928);
  v4[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MusicSubscription.Updates(0);
  v4[8] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[9] = v9;
  v4[10] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MusicSubscription.Updates.Iterator(0);
  v4[11] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[12] = v11;
  v4[13] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000D73C0, 0, 0);
}

uint64_t sub_1000D73C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[8];
  v4 = static MusicSubscription.subscriptionUpdates.getter();
  MusicSubscription.Updates.makeAsyncIterator()(v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = sub_100003B3C(&qword_100164140, (uint64_t (*)(uint64_t))&type metadata accessor for MusicSubscription.Updates.Iterator, (uint64_t)&protocol conformance descriptor for MusicSubscription.Updates.Iterator);
  v0[14] = v5;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[15] = v6;
  *v6 = v0;
  v6[1] = sub_1000D7478;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[7], v0[11], v5);
}

uint64_t sub_1000D7478()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 120));
  if (v0)
  {
    *(_QWORD *)(v2 + 128) = v0;
    v3 = sub_1000D7734;
  }
  else
  {
    v3 = sub_1000D74DC;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000D74DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = v0 + 40;
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = (_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 32);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v4) == 1)
  {
    v1 = v0 + 96;
    v6 = (_QWORD *)(v0 + 104);
    v5 = (_QWORD *)(v0 + 88);
  }
  else
  {
    v6 = (_QWORD *)(v0 + 48);
    v7 = *(_QWORD *)(v0 + 48);
    v8 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 24) + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v7, v3, v4);
    v9 = swift_task_alloc(32);
    *(_QWORD *)(v9 + 16) = v7;
    if (os_unfair_lock_trylock(v8))
    {
      v10 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 24) + 24);
      sub_1000D7028(*(_QWORD *)(v9 + 16));
      os_unfair_lock_unlock(v10);
    }
    v11 = swift_task_dealloc(v9);
    if ((MusicSubscription.canBecomeSubscriber.getter(v11) & 1) != 0)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
      v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
      *(_QWORD *)(v0 + 136) = v12;
      *v12 = v0;
      v12[1] = sub_1000D7794;
      return dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 112));
    }
    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100011AC4(v14, (uint64_t)qword_10016F728);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Stopped observing subscription updates for already subscribed user.", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }
    v20 = *(_QWORD *)(v0 + 96);
    v19 = *(_QWORD *)(v0 + 104);
    v21 = *(_QWORD *)(v0 + 88);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    v3 = *(_QWORD *)(v0 + 56);
  }
  v22 = *(_QWORD *)(v0 + 104);
  v23 = *(_QWORD *)(v0 + 80);
  v24 = *(_QWORD *)(v0 + 48);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v1 + 8))(*v6, *v5);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v3);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D7734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 128);
  v1 = sub_100003E70(&qword_10015D990);
  v2 = swift_dynamicCast(v1, v0 + 16, v1, &type metadata for Never, 7);
  return swift_willThrowTypedImpl(v2, &type metadata for Never, &protocol witness table for Never);
}

uint64_t sub_1000D7794()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 136));
  if (v0)
  {
    *(_QWORD *)(v2 + 128) = v0;
    v3 = sub_1000D7734;
  }
  else
  {
    v3 = sub_1000D74DC;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000D77F8()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  v1 = (char *)v0 + OBJC_IVAR____TtC16EventViewService36AppleMusicSubscriptionStatusProvider___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000D7850()
{
  return type metadata accessor for AppleMusicSubscriptionStatusProvider(0);
}

uint64_t type metadata accessor for AppleMusicSubscriptionStatusProvider(uint64_t a1)
{
  return sub_10002F744(a1, qword_100163FB8, (uint64_t)&nominal type descriptor for AppleMusicSubscriptionStatusProvider);
}

uint64_t sub_1000D786C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for SubscriptionUpdater(0);
  v2 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v3 = v2 + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater__subscription;
  v4 = type metadata accessor for MusicSubscription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater_lock;
  v6 = sub_100003E70(&qword_1001636C8);
  v7 = swift_allocObject(v6, 20, 7);
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v2 + v5) = v7;
  ObservationRegistrar.init()(v7);
  v8 = sub_100003E70(&qword_100164150);
  v9 = swift_allocObject(v8, 28, 7);
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 16) = v2;
  *(_QWORD *)(v0 + 16) = v9;
  ObservationRegistrar.init()(v9);
  return v0;
}

uint64_t sub_1000D7944@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100113120);
  v8[0] = v3;
  v5 = sub_100003B3C(&qword_100164148, type metadata accessor for SubscriptionUpdater, (uint64_t)&unk_100113100);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater__subscription;
  swift_beginAccess(v3 + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater__subscription, v8, 0, 0);
  return sub_1000D7E04(v6, a2);
}

uint64_t sub_1000D79F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v4 = sub_100003E70(&qword_100163928);
  __chkstk_darwin(v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000D7E04(a1, (uint64_t)v6);
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_100113120);
  v12 = v7;
  v13 = v6;
  v14 = v7;
  v9 = sub_100003B3C(&qword_100164148, type metadata accessor for SubscriptionUpdater, (uint64_t)&unk_100113100);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_1000D7E4C, v11, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath);
  return sub_1000D7CC4((uint64_t)v6);
}

uint64_t sub_1000D7AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater__subscription;
  swift_beginAccess(a1 + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater__subscription, v5, 33, 0);
  sub_1000D7DBC(a2, v3);
  return swift_endAccess(v5);
}

uint64_t sub_1000D7B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000D7CC4(v0 + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater__subscription);
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater_lock));
  v1 = v0
     + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000D7BC0()
{
  return type metadata accessor for SubscriptionUpdater(0);
}

uint64_t type metadata accessor for SubscriptionUpdater(uint64_t a1)
{
  return sub_10002F744(a1, (uint64_t *)&unk_100164088, (uint64_t)&nominal type descriptor for SubscriptionUpdater);
}

void sub_1000D7BDC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_1000D7C70(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4 = type metadata accessor for ObservationRegistrar(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 3, v6, a1 + 80);
    }
  }
}

void sub_1000D7C70(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100164098)
  {
    v2 = type metadata accessor for MusicSubscription(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100164098);
  }
}

uint64_t sub_1000D7CC4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003E70(&qword_100163928);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D7D04()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000D7D30(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100164134);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000072F4;
  return sub_1000D72EC(a1, v4, v5, v6);
}

uint64_t sub_1000D7DA4()
{
  uint64_t v0;

  return sub_1000D7AE8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000D7DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_100163928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D7E04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_100163928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D7E4C()
{
  return sub_1000D7DA4();
}

uint64_t sub_1000D7E64(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100003B3C(&qword_100164158, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum.Photo, (uint64_t)&protocol conformance descriptor for PromotionalAssets.PhotoAlbum.Photo);
  result = sub_100003B3C(&qword_100164160, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum.Photo, (uint64_t)&protocol conformance descriptor for PromotionalAssets.PhotoAlbum.Photo);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000D7EC0()
{
  return sub_100003B3C(&qword_100164168, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum.Photo, (uint64_t)&unk_100113150);
}

uint64_t sub_1000D7EF0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100003B3C(&qword_1001641A0, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum, (uint64_t)&protocol conformance descriptor for PromotionalAssets.PhotoAlbum);
  result = sub_100003B3C(&qword_1001641A8, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum, (uint64_t)&protocol conformance descriptor for PromotionalAssets.PhotoAlbum);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000D7F4C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_100113208;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = &unk_100113220;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = &unk_100113238;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 7, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000D7FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7, double a8)
{
  uint64_t v8;
  uint64_t v17;

  v17 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  ObservationRegistrar.init()();
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = a2;
  *(_QWORD *)(v17 + 32) = a3;
  *(_QWORD *)(v17 + 40) = a4;
  *(_QWORD *)(v17 + 48) = a5;
  *(double *)(v17 + 56) = a7;
  *(double *)(v17 + 64) = a8;
  *(_BYTE *)(v17 + 72) = a6;
  return v17;
}

BOOL sub_1000D8088()
{
  uint64_t v0;

  return Array.count.getter(*(_QWORD *)(v0 + 32)) > 1;
}

double sub_1000D80B0()
{
  uint64_t v0;

  return *(double *)(v0 + 56) * 0.6;
}

double sub_1000D80C8()
{
  uint64_t v0;
  double v1;

  v1 = *(double *)(v0 + 56) * 0.6;
  return v1 / (double)Array.count.getter(*(_QWORD *)(v0 + 32));
}

_QWORD *sub_1000D810C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  v1 = (char *)v0 + qword_1001641B0;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1000D8168()
{
  uint64_t v0;

  sub_1000D810C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for TourPhotosViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TourPhotosViewModel);
}

ValueMetadata *type metadata accessor for BezelBackground()
{
  return &type metadata for BezelBackground;
}

_QWORD *sub_1000D81AC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for Bezel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for Bezel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for Bezel()
{
  return &type metadata for Bezel;
}

uint64_t *sub_1000D8280(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_1000D831C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1000D8350(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000D83C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000D8434(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000D84A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000D8514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D8520);
}

uint64_t sub_1000D8520(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000D855C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D8568);
}

uint64_t sub_1000D8568(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ScrollAsset(uint64_t a1)
{
  uint64_t result;

  result = qword_100164290;
  if (!qword_100164290)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ScrollAsset);
  return result;
}

uint64_t sub_1000D85E4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetHeader()
{
  return &type metadata for AssetHeader;
}

uint64_t sub_1000D866C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011B76C, 1);
}

void sub_1000D867C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  char v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[10];
  uint64_t v48;

  static HorizontalAlignment.leading.getter(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v10 = Text.init(_:tableName:bundle:comment:)(a1, a2, a3, a4, 0, 0, 0, 0, 0, 256);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = static Font.title2.getter(v10);
  static Font.Weight.bold.getter(v17);
  v18 = Font.weight(_:)(v17);
  swift_release(v17);
  v19 = Text.font(_:)(v18, v10, v12, v16, v14);
  v21 = v20;
  v23 = v22;
  swift_release(v18);
  sub_10000BFF8(v10, v12, v16);
  v24 = swift_bridgeObjectRelease();
  v25 = static Alignment.leading.getter(v24);
  sub_1000E66A0(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v47, v27, 0.0, 1, 0.0, 1, v25, v26);
  sub_10000BFF8(v19, v21, v23 & 1);
  v28 = swift_bridgeObjectRelease();
  v29 = static Edge.Set.horizontal.getter(v28);
  v30 = EdgeInsets.init(_all:)(20.0);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  LOBYTE(v17) = static Edge.Set.bottom.getter(v37);
  v38 = EdgeInsets.init(_all:)(32.0);
  v39 = v47[9];
  *(_OWORD *)(a5 + 128) = v47[8];
  *(_OWORD *)(a5 + 144) = v39;
  *(_QWORD *)(a5 + 160) = v48;
  v40 = v47[5];
  *(_OWORD *)(a5 + 64) = v47[4];
  *(_OWORD *)(a5 + 80) = v40;
  v41 = v47[7];
  *(_OWORD *)(a5 + 96) = v47[6];
  *(_OWORD *)(a5 + 112) = v41;
  v42 = v47[1];
  *(_OWORD *)a5 = v47[0];
  *(_OWORD *)(a5 + 16) = v42;
  v43 = v47[3];
  *(_OWORD *)(a5 + 32) = v47[2];
  *(_OWORD *)(a5 + 48) = v43;
  *(_BYTE *)(a5 + 168) = v29;
  *(double *)(a5 + 176) = v30;
  *(_QWORD *)(a5 + 184) = v32;
  *(_QWORD *)(a5 + 192) = v34;
  *(_QWORD *)(a5 + 200) = v36;
  *(_BYTE *)(a5 + 208) = 0;
  *(_BYTE *)(a5 + 216) = v17;
  *(double *)(a5 + 224) = v38;
  *(_QWORD *)(a5 + 232) = v44;
  *(_QWORD *)(a5 + 240) = v45;
  *(_QWORD *)(a5 + 248) = v46;
  *(_BYTE *)(a5 + 256) = 0;
}

void sub_1000D88B0(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1000D867C(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000D88C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[3];

  v2 = v1;
  v50 = a1;
  v49 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v49);
  v4 = (uint64_t *)((char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100003E70(&qword_1001642D0);
  v8 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100003E70(&qword_1001642D8);
  __chkstk_darwin(v45);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100003E70(&qword_1001642E0);
  __chkstk_darwin(v46);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100003E70(&qword_1001642E8);
  __chkstk_darwin(v48);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v7, v2, v17);
  v19 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v7, 0, 1, v17);
  v20 = static Animation.easeInOut.getter(v19);
  v21 = Transaction.init(animation:)(v20);
  v22 = sub_100003E70(&qword_1001642F0);
  v23 = sub_1000D93F0();
  AsyncImage.init(url:scale:transaction:content:)(v7, v21, sub_1000D8C8C, 0, v22, v23, 1.0);
  v24 = (int *)type metadata accessor for ScrollAsset(0);
  v25 = *(_QWORD *)(v2 + v24[5]);
  v26 = *(_QWORD *)(v2 + v24[6]);
  v27 = static Alignment.center.getter(v24);
  _FrameLayout.init(width:height:alignment:)(v51, v25, 0, v26, 0, v27, v28);
  v29 = v47;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v12, v10, v47);
  v30 = &v12[*(int *)(v45 + 36)];
  v31 = v51[1];
  *(_OWORD *)v30 = v51[0];
  *((_OWORD *)v30 + 1) = v31;
  *((_OWORD *)v30 + 2) = v51[2];
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v29);
  sub_100007ADC((uint64_t)v12, (uint64_t)v14, &qword_1001642D8);
  *(_WORD *)&v14[*(int *)(v46 + 36)] = 0;
  sub_100008194((uint64_t)v12, &qword_1001642D8);
  v32 = *(_QWORD *)(v2 + v24[7]);
  v33 = (char *)v4 + *(int *)(v49 + 20);
  v34 = enum case for RoundedCornerStyle.continuous(_:);
  v35 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v33, v34, v35);
  *v4 = v32;
  v4[1] = v32;
  v36 = v48;
  v37 = (uint64_t)&v16[*(int *)(v48 + 36)];
  sub_10001BF60((uint64_t)v4, v37);
  *(_WORD *)(v37 + *(int *)(sub_100003E70(&qword_10015E338) + 36)) = 256;
  sub_100007ADC((uint64_t)v14, (uint64_t)v16, &qword_1001642E0);
  sub_10001BFA4((uint64_t)v4);
  v38 = sub_100008194((uint64_t)v14, &qword_1001642E0);
  v39 = static Axis.Set.horizontal.getter(v38);
  v40 = static Alignment.center.getter(v39);
  v42 = v41;
  v43 = sub_1000D9564();
  View.containerRelativeFrame(_:alignment:)(v39, v40, v42, v36, v43);
  return sub_100008194((uint64_t)v16, &qword_1001642E8);
}

void sub_1000D8C8C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  int v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  int v40;
  char v41;
  __int128 v42;
  int v43;
  char v44;

  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AsyncImagePhase(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (_QWORD *)((char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a1, v8, v10);
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 88))(v12, v8);
  if (v13 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v9 + 96))(v12, v8);
    v14 = *v12;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    v15 = Image.resizable(capInsets:resizingMode:)(v7, v14, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v39 = (unint64_t)v15;
    v40 = 65793;
    swift_retain(v15);
    v16 = sub_100003E70(&qword_100164318);
    v17 = sub_100003E70(&qword_100162708);
    v18 = sub_1000D94F8(&qword_100164310, &qword_100164318, (void (*)(void))sub_10008AD8C);
    v19 = sub_100007D40(&qword_100162710, &qword_100162708, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    _ConditionalContent<>.init(storage:)(&v39, v16, v17, v18, v19);
    v20 = v42;
    if (HIBYTE(v43))
      v21 = 0x1000000;
    else
      v21 = 0;
    v39 = v42;
    v40 = v21 | (unsigned __int16)v43 | (BYTE2(v43) << 16);
    v41 = 0;
    j__swift_retain_0(v42);
    v22 = sub_100003E70(&qword_100164308);
    v23 = sub_1000D945C();
    _ConditionalContent<>.init(storage:)(&v39, v22, &type metadata for EmptyView, v23, &protocol witness table for EmptyView);
    swift_release(v14);
    j__swift_release(v20);
    v24 = v15;
  }
  else
  {
    if (v13 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v9 + 96))(v12, v8);
      swift_errorRelease(*v12);
    }
    else if (v13 != enum case for AsyncImagePhase.empty(_:))
    {
      v39 = 0uLL;
      v40 = 0;
      v41 = 1;
      v36 = sub_100003E70(&qword_100164308);
      v37 = sub_1000D945C();
      _ConditionalContent<>.init(storage:)(&v39, v36, &type metadata for EmptyView, v37, &protocol witness table for EmptyView);
      v38 = v42;
      v34 = v43;
      v35 = v44;
      (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
      v33 = v38;
      goto LABEL_16;
    }
    if (qword_10015CE60 != -1)
      swift_once(&qword_10015CE60, sub_1000382C8);
    v25 = qword_10016F658;
    *(_QWORD *)&v39 = qword_10016F658;
    *((_QWORD *)&v39 + 1) = 256;
    v40 = 0x1000000;
    swift_retain_n(qword_10016F658, 2);
    v26 = sub_100003E70(&qword_100164318);
    v27 = sub_100003E70(&qword_100162708);
    v28 = sub_1000D94F8(&qword_100164310, &qword_100164318, (void (*)(void))sub_10008AD8C);
    v29 = sub_100007D40(&qword_100162710, &qword_100162708, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    _ConditionalContent<>.init(storage:)(&v39, v26, v27, v28, v29);
    if (HIBYTE(v43))
      v30 = 0x1000000;
    else
      v30 = 0;
    v39 = v42;
    v40 = v30 | (unsigned __int16)v43 | (BYTE2(v43) << 16);
    v41 = 0;
    v31 = sub_100003E70(&qword_100164308);
    v32 = sub_1000D945C();
    _ConditionalContent<>.init(storage:)(&v39, v31, &type metadata for EmptyView, v32, &protocol witness table for EmptyView);
    v24 = v25;
  }
  swift_release(v24);
  v33 = v42;
  v34 = v43;
  v35 = v44;
LABEL_16:
  *(_OWORD *)a2 = v33;
  *(_DWORD *)(a2 + 16) = v34;
  *(_BYTE *)(a2 + 20) = v35;
}

void sub_1000D9104(uint64_t a1@<X8>)
{
  double *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = type metadata accessor for Image.ResizingMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((_QWORD *)v1 + 1);
  v9 = v1[2];
  swift_bridgeObjectRetain(v8);
  v10 = Image.init(_:bundle:)(*(_QWORD *)&v7, v8, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Image.ResizingMode.stretch(_:), v3);
  v11 = Image.resizable(capInsets:resizingMode:)(v6, v10, 0.0, 0.0, 0.0, 0.0);
  swift_release(v10);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  LOBYTE(v10) = static Edge.Set.all.getter(v12);
  v13 = EdgeInsets.init(_all:)(v9);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 24) = v10;
  *(double *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v16;
  *(_BYTE *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 65) = 0;
  *(_BYTE *)(a1 + 67) = 1;
}

uint64_t sub_1000D9228@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  _OWORD v23[3];

  v3 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v3);
  v5 = (_QWORD *)((char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100003E70(&qword_100160508);
  __chkstk_darwin(v6);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v10 = v1[1];
  v11 = v1[2];
  v12 = (char *)v5 + *(int *)(v3 + 20);
  v13 = enum case for RoundedCornerStyle.continuous(_:);
  v14 = type metadata accessor for RoundedCornerStyle(0);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v12, v13, v14);
  *v5 = v11;
  v5[1] = v11;
  v16 = static Color.black.getter(v15);
  sub_10001BF60((uint64_t)v5, (uint64_t)v8);
  *(_QWORD *)&v8[*(int *)(v6 + 52)] = v16;
  *(_WORD *)&v8[*(int *)(v6 + 56)] = 256;
  v17 = sub_10001BFA4((uint64_t)v5);
  v18 = static Alignment.center.getter(v17);
  _FrameLayout.init(width:height:alignment:)(v23, v9, 0, v10, 0, v18, v19);
  sub_100007ADC((uint64_t)v8, a1, &qword_100160508);
  v20 = (_OWORD *)(a1 + *(int *)(sub_100003E70(&qword_100164340) + 36));
  v21 = v23[1];
  *v20 = v23[0];
  v20[1] = v21;
  v20[2] = v23[2];
  return sub_100008194((uint64_t)v8, &qword_100160508);
}

uint64_t sub_1000D93C0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011B744, 1);
}

uint64_t sub_1000D93D0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011B71C, 1);
}

uint64_t sub_1000D93E0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011B6F4, 1);
}

unint64_t sub_1000D93F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001642F8;
  if (!qword_1001642F8)
  {
    v1 = sub_1000034AC(&qword_1001642F0);
    sub_1000D945C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001642F8);
  }
  return result;
}

unint64_t sub_1000D945C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164300;
  if (!qword_100164300)
  {
    v1 = sub_1000034AC(&qword_100164308);
    sub_1000D94F8(&qword_100164310, &qword_100164318, (void (*)(void))sub_10008AD8C);
    sub_100007D40(&qword_100162710, &qword_100162708, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164300);
  }
  return result;
}

uint64_t sub_1000D94F8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000034AC(a2);
    a3();
    sub_1000396D8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000D9564()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164320;
  if (!qword_100164320)
  {
    v1 = sub_1000034AC(&qword_1001642E8);
    sub_1000D95E8();
    sub_100007D40(&qword_10015E330, &qword_10015E338, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164320);
  }
  return result;
}

unint64_t sub_1000D95E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164328;
  if (!qword_100164328)
  {
    v1 = sub_1000034AC(&qword_1001642E0);
    sub_1000D966C();
    sub_100007D40(&qword_100161320, &qword_100161328, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164328);
  }
  return result;
}

unint64_t sub_1000D966C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164330;
  if (!qword_100164330)
  {
    v1 = sub_1000034AC(&qword_1001642D8);
    sub_100007D40(&qword_100164338, &qword_1001642D0, (uint64_t)&protocol conformance descriptor for AsyncImage<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164330);
  }
  return result;
}

uint64_t sub_1000D96F4()
{
  _QWORD v1[2];

  v1[0] = sub_1000034AC(&qword_1001642E8);
  v1[1] = sub_1000D9564();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 1);
}

uint64_t sub_1000D9740()
{
  return sub_100014600(&qword_100164348, &qword_100164350, (void (*)(void))sub_1000D976C);
}

uint64_t sub_1000D976C()
{
  return sub_100014600(&qword_100164358, &qword_100164360, (void (*)(void))sub_1000D9788);
}

unint64_t sub_1000D9788()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164368;
  if (!qword_100164368)
  {
    v1 = sub_1000034AC(&qword_100164370);
    sub_100007D40(&qword_100164378, &qword_100164380, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164368);
  }
  return result;
}

uint64_t sub_1000D980C()
{
  return sub_1000D94F8(&qword_100164388, &qword_100164390, (void (*)(void))sub_1000D9838);
}

unint64_t sub_1000D9838()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164398;
  if (!qword_100164398)
  {
    v1 = sub_1000034AC(&qword_1001643A0);
    sub_100014600(&qword_1001643A8, &qword_1001643B0, (void (*)(void))sub_10008AD8C);
    sub_100007D40(&qword_100161320, &qword_100161328, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164398);
  }
  return result;
}

unint64_t sub_1000D98D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001643B8;
  if (!qword_1001643B8)
  {
    v1 = sub_1000034AC(&qword_100164340);
    sub_100007D40(qword_1001643C0, &qword_100160508, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001643B8);
  }
  return result;
}

uint64_t sub_1000D995C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[2];
  _OWORD v9[2];

  *(_QWORD *)&v8[0] = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = type metadata accessor for Array(0, v2);
  swift_bridgeObjectRetain(*(_QWORD *)&v8[0]);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v3);
  Collection.dropFirst(_:)(v9, 1, v3, WitnessTable);
  v8[0] = v9[0];
  v8[1] = v9[1];
  v5 = type metadata accessor for ArraySlice(0, v2);
  v6 = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v5);
  return Array.init<A>(_:)(v8, v2, v5, v6);
}

void sub_1000D9A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  ValueWitnessTable *v17;
  uint64_t v18;
  char *v19;
  NSString v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  void **aBlock;
  uint64_t v26;
  Class (*v27)(uint64_t);
  ValueMetadata *v28;
  _QWORD *(*v29)();
  _QWORD *v30;
  char *v31;

  v7 = sub_100003E70(&qword_10015D3B8);
  v8 = swift_allocObject(v7, 152, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100113410;
  v10 = *v3;
  v9 = v3[1];
  *(_QWORD *)(v8 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v8 + 64) = &off_100162E68;
  *(_BYTE *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = v10;
  *(_QWORD *)(v8 + 48) = v9;
  *(_QWORD *)(v8 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v8 + 104) = &off_100162E40;
  *(_BYTE *)(v8 + 72) = 6;
  *(_QWORD *)(v8 + 136) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v8 + 144) = &off_100162EA0;
  *(_QWORD *)(v8 + 112) = a1;
  *(_QWORD *)(v8 + 120) = a2;
  *(_BYTE *)(v8 + 128) = 1;
  v11 = *(_QWORD *)(a3 + 72);
  if (v11)
  {
    v12 = *(_QWORD *)(a3 + 64);
    v13 = *(_QWORD *)(a3 + 72);
  }
  else
  {
    v12 = 0;
    v13 = 0xE000000000000000;
  }
  v28 = &type metadata for AnalyticsString;
  v29 = (_QWORD *(*)())&off_100162E68;
  LOBYTE(aBlock) = 1;
  v26 = v12;
  v27 = (Class (*)(uint64_t))v13;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v11);
  v31 = sub_1000F4CF4((char *)1, 4, 1, (char *)v8);
  v14 = sub_100005580((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v17->initializeWithCopy)((uint64_t)v16, v18);
  sub_1000DAD34(3, (uint64_t)v16, (uint64_t *)&v31, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_100162E68);
  sub_1000055A8(&aBlock);
  v19 = v31;
  v20 = String._bridgeToObjectiveC()();
  v21 = (_QWORD *)swift_allocObject(&unk_1001539B0, 40, 7);
  v21[2] = 0xD00000000000001ELL;
  v21[3] = 0x80000001001150B0;
  v21[4] = v19;
  v29 = sub_10003B510;
  v30 = v21;
  aBlock = _NSConcreteStackBlock;
  v26 = 1107296256;
  v27 = sub_1000DACC0;
  v28 = (ValueMetadata *)&unk_1001539C8;
  v22 = _Block_copy(&aBlock);
  v23 = v30;
  swift_bridgeObjectRetain(v19);
  swift_release(v23);
  AnalyticsSendEventLazy(v20, v22);
  _Block_release(v22);
  swift_bridgeObjectRelease(v19);

}

uint64_t sub_1000D9C5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t WitnessTable;

  v1 = type metadata accessor for Array(0, *(_QWORD *)(a1 + 16));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
  return Collection.first.getter(v1, WitnessTable);
}

uint64_t sub_1000D9CC4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  sub_1000DADAC(v4, v3, 6, a1);
  return swift_bridgeObjectRelease(v3);
}

void sub_1000D9D0C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  ValueWitnessTable *v13;
  uint64_t v14;
  char *v15;
  NSString v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  void **aBlock;
  uint64_t v22;
  Class (*v23)(uint64_t);
  ValueMetadata *v24;
  _QWORD *(*v25)();
  _QWORD *v26;
  char *v27;

  v3 = sub_100003E70(&qword_10015D3B8);
  v4 = swift_allocObject(v3, 192, 7);
  *(_OWORD *)(v4 + 16) = xmmword_10010A6D0;
  v6 = *v1;
  v5 = v1[1];
  *(_QWORD *)(v4 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v4 + 64) = &off_100162E68;
  *(_BYTE *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = v6;
  *(_QWORD *)(v4 + 48) = v5;
  *(_QWORD *)(v4 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v4 + 104) = &off_100162E40;
  *(_BYTE *)(v4 + 72) = 6;
  *(_QWORD *)(v4 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v4 + 144) = &off_100162EC8;
  *(_BYTE *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v4 + 184) = &off_100162EA0;
  *(_OWORD *)(v4 + 152) = xmmword_100113420;
  *(_BYTE *)(v4 + 168) = 3;
  v7 = *(_QWORD *)(a1 + 72);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 64);
    v9 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v8 = 0;
    v9 = 0xE000000000000000;
  }
  v24 = &type metadata for AnalyticsString;
  v25 = (_QWORD *(*)())&off_100162E68;
  LOBYTE(aBlock) = 1;
  v22 = v8;
  v23 = (Class (*)(uint64_t))v9;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  v27 = sub_1000F4CF4((char *)1, 5, 1, (char *)v4);
  v10 = sub_100005580((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v13->initializeWithCopy)((uint64_t)v12, v14);
  sub_1000DAD34(4, (uint64_t)v12, (uint64_t *)&v27, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_100162E68);
  sub_1000055A8(&aBlock);
  v15 = v27;
  v16 = String._bridgeToObjectiveC()();
  v17 = (_QWORD *)swift_allocObject(&unk_100153960, 40, 7);
  v17[2] = 0xD00000000000001ELL;
  v17[3] = 0x80000001001150B0;
  v17[4] = v15;
  v25 = sub_1000055F4;
  v26 = v17;
  aBlock = _NSConcreteStackBlock;
  v22 = 1107296256;
  v23 = sub_1000DACC0;
  v24 = (ValueMetadata *)&unk_100153978;
  v18 = _Block_copy(&aBlock);
  v19 = v26;
  swift_bridgeObjectRetain(v15);
  swift_release(v19);
  AnalyticsSendEventLazy(v16, v18);
  _Block_release(v18);
  swift_bridgeObjectRelease(v15);

}

void sub_1000D9F6C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v35;

  v5 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000027, 0x8000000100117770);
  v30 = v6;
  v31 = v5;
  v28 = v7;
  v29 = v8;
  v9 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000024, 0x80000001001177A0);
  v26 = v10;
  v27 = v9;
  v12 = v11;
  v14 = v13;
  v15 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000023, 0x8000000100115A00);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v35._object = (void *)0xE000000000000000;
  v23._object = (void *)0x80000001001177D0;
  v23._countAndFlagsBits = 0xD00000000000001DLL;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v35._countAndFlagsBits = 0;
  v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v35);

  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = a3;
  *(_QWORD *)(a4 + 24) = v31;
  *(_QWORD *)(a4 + 32) = v30;
  *(_BYTE *)(a4 + 40) = v28 & 1;
  *(_QWORD *)(a4 + 48) = v29;
  *(_QWORD *)(a4 + 56) = v27;
  *(_QWORD *)(a4 + 64) = v12;
  *(_BYTE *)(a4 + 72) = v14 & 1;
  *(_QWORD *)(a4 + 80) = v26;
  *(_QWORD *)(a4 + 88) = v15;
  *(_QWORD *)(a4 + 96) = v17;
  *(_BYTE *)(a4 + 104) = v19 & 1;
  *(_QWORD *)(a4 + 112) = v21;
  *(Swift::String *)(a4 + 120) = v25;
}

uint64_t sub_1000DA108(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000DA118(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000DA124(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  return swift_bridgeObjectRelease(a1[16]);
}

uint64_t sub_1000DA184(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v7;
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v10;
  v12 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v12;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v14 = *(_QWORD *)(a2 + 112);
  v13 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v14;
  *(_QWORD *)(a1 + 120) = v13;
  v15 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v15;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t sub_1000DA268(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

__n128 sub_1000DA3AC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t sub_1000DA3E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v10 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 96);
  v12 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v13 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 128);
  v15 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v14;
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_1000DA4AC(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1000DA4F4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for TicketViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TicketViewModel);
}

uint64_t sub_1000DA568(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v3);
  return a1;
}

_QWORD *sub_1000DA59C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[2];
  v4 = a1[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t sub_1000DA5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_release(v4);
  return a1;
}

uint64_t type metadata accessor for SafeAreaModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SafeAreaModifier);
}

uint64_t sub_1000DA620(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10011B82C, 1);
}

uint64_t sub_1000DA654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t WitnessTable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[4];

  v42 = a3;
  v43 = a4;
  v41 = a2;
  v44 = a1;
  v45 = a7;
  v39 = a6;
  v9 = type metadata accessor for SafeAreaModifier(255, a5, a6, a4);
  WitnessTable = swift_getWitnessTable(&unk_1001134C0, v9);
  v11 = type metadata accessor for _ViewModifier_Content(255, v9, WitnessTable);
  v12 = sub_1000034AC(&qword_10015E9E8);
  v13 = type metadata accessor for _PreferenceWritingModifier(255, a5, a6);
  v14 = type metadata accessor for ModifiedContent(255, v12, v13);
  v48[2] = sub_1000345F8();
  v48[3] = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v13);
  v15 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  v16 = type metadata accessor for GeometryReader(255, v14, v15);
  v17 = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v16);
  v38 = type metadata accessor for _BackgroundModifier(255, v16, v17);
  v18 = type metadata accessor for ModifiedContent(0, v11, v38);
  v40 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v38 - v22;
  v24 = (_QWORD *)swift_allocObject(&unk_100153AB8, 56, 7);
  v25 = v39;
  v24[2] = a5;
  v24[3] = v25;
  v26 = v42;
  v24[4] = v41;
  v24[5] = v26;
  v27 = v43;
  v24[6] = v43;
  swift_retain(v27);
  v28 = GeometryReader.init(content:)(sub_1000DAB50, v24, v14, v15);
  v30 = v29;
  v48[0] = v28;
  v48[1] = v29;
  v31 = static Alignment.center.getter(v28);
  v33 = v32;
  v34 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v11);
  View.background<A>(_:alignment:)(v48, v31, v33, v11, v16, v34, v17);
  swift_release(v30);
  v35 = swift_getWitnessTable(&protocol conformance descriptor for _BackgroundModifier<A>, v38);
  v46 = v34;
  v47 = v35;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  sub_1000F257C((uint64_t)v20, v18, (uint64_t)v23);
  v36 = *(void (**)(char *, uint64_t))(v40 + 8);
  v36(v20, v18);
  sub_1000E3B88((uint64_t)v23, v18, v45);
  return ((uint64_t (*)(char *, uint64_t))v36)(v23, v18);
}

uint64_t sub_1000DA908@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t WitnessTable;
  void (*v26)(char *, uint64_t);
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;

  v28[1] = a1;
  v28[2] = a4;
  v32 = a2;
  v33 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a6);
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v30 = AssociatedTypeWitness;
  __chkstk_darwin(AssociatedTypeWitness);
  v12 = (char *)v28 - v11;
  v13 = sub_1000034AC(&qword_10015E9E8);
  v14 = type metadata accessor for _PreferenceWritingModifier(255, a5, a6);
  v15 = type metadata accessor for ModifiedContent(0, v13, v14);
  v31 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)v28 - v19;
  v22 = static Color.clear.getter(v21);
  KeyPath = swift_getKeyPath(&unk_100113510);
  v37 = v22;
  v23 = GeometryProxy.safeAreaInsets.getter();
  a3(v23);
  v24 = sub_1000345F8();
  View.preference<A>(key:value:)(v32, v12, v13, a5, v24, a6);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v30);
  swift_release(KeyPath);
  swift_release(v37);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v14);
  v34 = v24;
  v35 = WitnessTable;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  sub_1000F257C((uint64_t)v17, v15, (uint64_t)v20);
  v26 = *(void (**)(char *, uint64_t))(v31 + 8);
  v26(v17, v15);
  sub_1000E3B88((uint64_t)v20, v15, v33);
  return ((uint64_t (*)(char *, uint64_t))v26)(v20, v15);
}

uint64_t sub_1000DAB18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return sub_1000DA654(a1, *v3, v3[1], v3[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_1000DAB2C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000DAB50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000DA908(a1, *(_QWORD *)(v2 + 32), *(void (**)(uint64_t))(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1000DAB68(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for SafeAreaModifier(255, *a1, v5, a4);
  WitnessTable = swift_getWitnessTable(&unk_1001134C0, v6);
  v8 = type metadata accessor for _ViewModifier_Content(255, v6, WitnessTable);
  v9 = sub_1000034AC(&qword_10015E9E8);
  v10 = type metadata accessor for _PreferenceWritingModifier(255, v4, v5);
  v11 = type metadata accessor for ModifiedContent(255, v9, v10);
  sub_1000345F8();
  swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v10);
  v12 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v13 = type metadata accessor for GeometryReader(255, v11, v12);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v13);
  v15 = type metadata accessor for _BackgroundModifier(255, v13, v14);
  v16 = type metadata accessor for ModifiedContent(255, v8, v15);
  swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v8);
  swift_getWitnessTable(&protocol conformance descriptor for _BackgroundModifier<A>, v15);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
}

Class sub_1000DACC0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSDictionary v5;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_1000DB000();
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5.super.isa = 0;
  }
  return v5.super.isa;
}

uint64_t sub_1000DAD34(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  v9 = sub_100007D80(&v12);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v9, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return sub_100011A9C(&v12, v10 + 40 * a1 + 32);
}

void sub_1000DADAC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  ValueWitnessTable *v16;
  uint64_t v17;
  char *v18;
  NSString v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  void **aBlock;
  uint64_t v25;
  Class (*v26)(uint64_t);
  ValueMetadata *v27;
  _QWORD *(*v28)();
  _QWORD *v29;
  char *v30;

  v8 = sub_100003E70(&qword_10015D3B8);
  v9 = swift_allocObject(v8, 112, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10010A6C0;
  *(_QWORD *)(v9 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v9 + 64) = &off_100162E68;
  *(_BYTE *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = a1;
  *(_QWORD *)(v9 + 48) = a2;
  *(_QWORD *)(v9 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v9 + 104) = &off_100162E40;
  *(_BYTE *)(v9 + 72) = a3;
  v10 = *(_QWORD *)(a4 + 72);
  if (v10)
  {
    v11 = *(_QWORD *)(a4 + 64);
    v12 = *(_QWORD *)(a4 + 72);
  }
  else
  {
    v11 = 0;
    v12 = 0xE000000000000000;
  }
  v27 = &type metadata for AnalyticsString;
  v28 = (_QWORD *(*)())&off_100162E68;
  LOBYTE(aBlock) = 1;
  v25 = v11;
  v26 = (Class (*)(uint64_t))v12;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v10);
  v30 = sub_1000F4CF4((char *)1, 3, 1, (char *)v9);
  v13 = sub_100005580((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v16->initializeWithCopy)((uint64_t)v15, v17);
  sub_1000DAD34(2, (uint64_t)v15, (uint64_t *)&v30, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_100162E68);
  sub_1000055A8(&aBlock);
  v18 = v30;
  v19 = String._bridgeToObjectiveC()();
  v20 = (_QWORD *)swift_allocObject(&unk_100153B30, 40, 7);
  v20[2] = 0xD00000000000001CLL;
  v20[3] = 0x80000001001177F0;
  v20[4] = v18;
  v28 = sub_1000DAFE0;
  v29 = v20;
  aBlock = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_1000DACC0;
  v27 = (ValueMetadata *)&unk_100153B48;
  v21 = _Block_copy(&aBlock);
  v22 = v29;
  swift_bridgeObjectRetain(v18);
  swift_release(v22);
  AnalyticsSendEventLazy(v19, v21);
  _Block_release(v21);
  swift_bridgeObjectRelease(v18);

}

_QWORD *sub_1000DAFE0()
{
  uint64_t v0;

  return sub_1000DB2E4(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1000DAFE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000DAFF8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000DB000()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001644C8;
  if (!qword_1001644C8)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001644C8);
  }
  return result;
}

void sub_1000DB03C(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  ValueWitnessTable *v26;
  uint64_t v27;
  char *v28;
  NSString v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  void **aBlock;
  uint64_t v35;
  Class (*v36)(uint64_t);
  ValueMetadata *v37;
  _QWORD *(*v38)();
  _QWORD *v39;
  char *v40;

  v16 = sub_100003E70(&qword_10015D3B8);
  v17 = swift_allocObject(v16, 192, 7);
  *(_OWORD *)(v17 + 16) = xmmword_10010A6D0;
  *(_QWORD *)(v17 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v17 + 64) = &off_100162E68;
  *(_BYTE *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 40) = a1;
  *(_QWORD *)(v17 + 48) = a2;
  *(_QWORD *)(v17 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v17 + 104) = &off_100162E40;
  *(_BYTE *)(v17 + 72) = a3;
  *(_QWORD *)(v17 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v17 + 144) = &off_100162EC8;
  *(_BYTE *)(v17 + 112) = a4;
  *(_QWORD *)(v17 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v17 + 184) = &off_100162EA0;
  *(_QWORD *)(v17 + 152) = a5;
  *(_QWORD *)(v17 + 160) = a6;
  *(_BYTE *)(v17 + 168) = a7;
  v18 = *(_QWORD *)(a8 + 72);
  if (v18)
  {
    v19 = *(_QWORD *)(a8 + 64);
    v20 = *(_QWORD *)(a8 + 72);
  }
  else
  {
    v19 = 0;
    v20 = 0xE000000000000000;
  }
  v37 = &type metadata for AnalyticsString;
  v38 = (_QWORD *(*)())&off_100162E68;
  LOBYTE(aBlock) = 1;
  v35 = v19;
  v36 = (Class (*)(uint64_t))v20;
  swift_bridgeObjectRetain(a2);
  sub_100005568(a5, a6, a7);
  v40 = (char *)v17;
  v21 = *(_QWORD *)(v17 + 16);
  v22 = *(_QWORD *)(v17 + 24);
  swift_bridgeObjectRetain(v18);
  if (v21 >= v22 >> 1)
    v40 = sub_1000F4CF4((char *)(v22 > 1), v21 + 1, 1, (char *)v17);
  v23 = sub_100005580((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v23);
  v25 = (char *)&v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v26->initializeWithCopy)((uint64_t)v25, v27);
  sub_1000DAD34(v21, (uint64_t)v25, (uint64_t *)&v40, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_100162E68);
  sub_1000055A8(&aBlock);
  v28 = v40;
  v29 = String._bridgeToObjectiveC()();
  v30 = (_QWORD *)swift_allocObject(&unk_100153B80, 40, 7);
  v30[2] = 0xD00000000000001ELL;
  v30[3] = 0x80000001001150B0;
  v30[4] = v28;
  v38 = sub_1000055F4;
  v39 = v30;
  aBlock = _NSConcreteStackBlock;
  v35 = 1107296256;
  v36 = sub_1000DACC0;
  v37 = (ValueMetadata *)&unk_100153B98;
  v31 = _Block_copy(&aBlock);
  v32 = v39;
  swift_bridgeObjectRetain(v28);
  swift_release(v32);
  AnalyticsSendEventLazy(v29, v31);
  _Block_release(v31);
  swift_bridgeObjectRelease(v28);

}

_QWORD *sub_1000DB2E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *result;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    swift_bridgeObjectRetain(a1);
LABEL_23:
    swift_bridgeObjectRelease(v1);
    return _swiftEmptyDictionarySingleton;
  }
  v3 = a1 + 32;
  swift_bridgeObjectRetain_n(a1, 2);
  while (1)
  {
    sub_1000081D0(v3, (uint64_t)v35);
    v6 = v36;
    v7 = v37;
    sub_100008170(v35, v36);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
    v9 = *(_QWORD *)&aBundleidpagena[8 * v8 + 32];
    if (_swiftEmptyDictionarySingleton[2])
    {
      sub_100090568(*(_QWORD *)&aId_3[8 * v8], v9);
      v11 = v10;
      swift_bridgeObjectRelease(v9);
      if ((v11 & 1) != 0)
        goto LABEL_5;
    }
    else
    {
      swift_bridgeObjectRelease(*(_QWORD *)&aBundleidpagena[8 * v8 + 32]);
    }
    v12 = v36;
    v13 = v37;
    sub_100008170(v35, v36);
    v14 = 8 * (*(char (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
    v15 = *(_QWORD *)&aId_3[v14];
    v16 = *(_QWORD *)&aBundleidpagena[v14 + 32];
    v17 = v36;
    v18 = v37;
    sub_100008170(v35, v36);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 32))(v17, v18);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v22 = sub_100090568(v15, v16);
    v23 = _swiftEmptyDictionarySingleton[2];
    v24 = (v21 & 1) == 0;
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
      break;
    v26 = v21;
    if (_swiftEmptyDictionarySingleton[3] >= v25)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v21 & 1) == 0)
          goto LABEL_17;
      }
      else
      {
        sub_1001040A0();
        if ((v26 & 1) == 0)
          goto LABEL_17;
      }
    }
    else
    {
      sub_100103920(v25, isUniquelyReferenced_nonNull_native);
      v27 = sub_100090568(v15, v16);
      if ((v26 & 1) != (v28 & 1))
        goto LABEL_26;
      v22 = v27;
      if ((v26 & 1) == 0)
      {
LABEL_17:
        _swiftEmptyDictionarySingleton[(v22 >> 6) + 8] |= 1 << v22;
        v29 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v22);
        *v29 = v15;
        v29[1] = v16;
        *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + 8 * v22) = v19;
        v30 = _swiftEmptyDictionarySingleton[2];
        v31 = __OFADD__(v30, 1);
        v32 = v30 + 1;
        if (v31)
          goto LABEL_25;
        _swiftEmptyDictionarySingleton[2] = v32;
        swift_bridgeObjectRetain(v16);
        goto LABEL_4;
      }
    }
    v4 = _swiftEmptyDictionarySingleton[7];
    v5 = *(void **)(v4 + 8 * v22);
    *(_QWORD *)(v4 + 8 * v22) = v19;

LABEL_4:
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(0x8000000000000000);
LABEL_5:
    sub_1000055A8(v35);
    v3 += 40;
    if (!--v2)
    {
      v1 = a1;
      swift_bridgeObjectRelease(a1);
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t destroy for ScrollableTab(_QWORD *a1)
{
  unint64_t v2;

  swift_bridgeObjectRelease(*a1);
  v2 = a1[2];
  if (v2 >= 2)
    swift_bridgeObjectRelease(v2);
  swift_release(a1[4]);
  return swift_release(a1[5]);
}

uint64_t *initializeWithCopy for ScrollableTab(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  *a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[2];
  swift_bridgeObjectRetain(v4);
  if (v6 >= 2)
  {
    a1[1] = *v5;
    a1[2] = v6;
    swift_bridgeObjectRetain(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *(_OWORD *)v5;
  }
  v7 = a2[4];
  a1[3] = a2[3];
  a1[4] = v7;
  v9 = a2[5];
  v8 = a2[6];
  a1[5] = v9;
  a1[6] = v8;
  swift_retain(v7);
  swift_retain(v9);
  return a1;
}

_QWORD *assignWithCopy for ScrollableTab(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  v5 = a2[2];
  if (a1[2] >= 2uLL)
  {
    if (v5 >= 2)
    {
      a1[1] = a2[1];
      v7 = a2[2];
      a1[2] = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_100005778((uint64_t)(a1 + 1));
    goto LABEL_6;
  }
  if (v5 < 2)
  {
LABEL_6:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    goto LABEL_8;
  }
  a1[1] = a2[1];
  v6 = a2[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
LABEL_8:
  v8 = a2[4];
  v9 = a1[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a1[5];
  v11 = a2[5];
  a1[5] = v11;
  swift_retain(v11);
  swift_release(v10);
  a1[6] = a2[6];
  return a1;
}

uint64_t assignWithTake for ScrollableTab(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = (_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 16) >= 2uLL)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (v5 >= 2)
    {
      *(_QWORD *)(a1 + 8) = *v4;
      *(_QWORD *)(a1 + 16) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_100005778(a1 + 8);
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
LABEL_6:
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v7);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollableTab(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollableTab(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollableTab()
{
  return &type metadata for ScrollableTab;
}

uint64_t sub_1000DB8B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011B918, 1);
}

uint64_t sub_1000DB8C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  void (**v23)();
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  uint64_t *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v26 = a3;
  v5 = type metadata accessor for ScrollViewProxy(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v25 = sub_100003E70(&qword_1001644E0);
  v8 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static Axis.Set.horizontal.getter(v11);
  v28 = a2;
  v13 = sub_100003E70(&qword_1001644E8);
  v14 = sub_1000DC1A8();
  ScrollView.init(_:showsIndicators:content:)(v12, 0, sub_1000DC1A0, v27, v13, v14);
  v15 = *(_OWORD *)(a2 + 1);
  v31 = *a2;
  v16 = a2[4];
  v29 = *(_OWORD *)(a2 + 5);
  v30 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v17 = *(unsigned __int8 *)(v6 + 80);
  v18 = (v17 + 72) & ~v17;
  v19 = swift_allocObject(&unk_100153C80, v18 + v7, v17 | 7);
  v20 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v19 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v19 + 32) = v20;
  *(_OWORD *)(v19 + 48) = *((_OWORD *)a2 + 2);
  *(_QWORD *)(v19 + 64) = a2[6];
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v19 + v18, (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v21 = v25;
  v22 = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v26, v10, v25);
  v23 = (void (**)())(v22 + *(int *)(sub_100003E70(&qword_100164508) + 36));
  *v23 = sub_1000DC2C8;
  v23[1] = (void (*)())v19;
  v23[2] = 0;
  v23[3] = 0;
  sub_100045AC4(&v31);
  sub_1000DC174((uint64_t)&v30);
  swift_retain(v16);
  sub_10000E40C(&v29);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v21);
}

uint64_t sub_1000DBAB0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v4 = sub_100003E70(&qword_100164500);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v7);
  *((_QWORD *)v6 + 1) = 0x4020000000000000;
  v6[16] = 0;
  sub_100003E70(&qword_100164510);
  v8 = *a1;
  v24 = *(_OWORD *)(a1 + 1);
  v25 = v8;
  v22 = v8;
  KeyPath = swift_getKeyPath(&unk_100113638);
  v10 = a1[4];
  v23 = *(_OWORD *)(a1 + 5);
  v11 = swift_allocObject(&unk_100153CA8, 72, 7);
  v12 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v11 + 32) = v12;
  *(_OWORD *)(v11 + 48) = *((_OWORD *)a1 + 2);
  *(_QWORD *)(v11 + 64) = a1[6];
  swift_bridgeObjectRetain(v8);
  sub_100045AC4(&v25);
  sub_1000DC174((uint64_t)&v24);
  swift_retain(v10);
  sub_10000E40C(&v23);
  v13 = sub_100003E70(&qword_100164518);
  v14 = sub_100003E70(&qword_100164520);
  v15 = sub_100007D40(&qword_100164528, &qword_100164518, (uint64_t)&protocol conformance descriptor for [A]);
  v16 = sub_1000DD3CC();
  v17 = sub_100007D40(&qword_100164538, &qword_100164520, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
  v18 = ForEach<>.init(_:id:content:)(&v22, KeyPath, sub_1000DD3C4, v11, v13, v14, v15, v16, v17);
  LOBYTE(v16) = static Edge.Set.horizontal.getter(v18);
  sub_100007ADC((uint64_t)v6, a2, &qword_100164500);
  v19 = a2 + *(int *)(sub_100003E70(&qword_1001644E8) + 36);
  *(_BYTE *)v19 = v16;
  *(_OWORD *)(v19 + 8) = 0u;
  *(_OWORD *)(v19 + 24) = 0u;
  *(_BYTE *)(v19 + 40) = 1;
  return sub_100008194((uint64_t)v6, &qword_100164500);
}

double sub_1000DBCCC@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double result;
  __n128 v20;
  __n128 v21;
  __n128 v22;

  v5 = *a1;
  v6 = a1[1];
  v7 = *a2;
  v20 = *(__n128 *)(a2 + 1);
  sub_1000DD410(&v20, &v21);
  sub_1000DD410(&v21, &v22);
  if (v22.n128_u64[1] == 1)
  {
    if (v6 == 1)
    {
      v9 = a2[4];
      v10 = a2[5];
      v11 = swift_allocObject(&unk_100153D48, 88, 7);
      v15 = *((_OWORD *)a2 + 1);
      *(_OWORD *)(v11 + 16) = *(_OWORD *)a2;
      *(_OWORD *)(v11 + 32) = v15;
      *(_OWORD *)(v11 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(v11 + 64) = a2[6];
      *(_QWORD *)(v11 + 72) = v5;
      v13 = 1;
      *(_QWORD *)(v11 + 80) = 1;
LABEL_10:
      v14 = 0xEF6E6F697461636FLL;
      v8 = 0x4C746E6572727563;
      goto LABEL_18;
    }
    goto LABEL_8;
  }
  if (v22.n128_u64[1])
  {
    if (v6 >= 2)
    {
      if (v22.n128_u64[0] == v5 && v6 == v22.n128_u64[1])
      {
        v9 = a2[4];
        v10 = a2[5];
        v11 = swift_allocObject(&unk_100153D20, 88, 7);
        v17 = *((_OWORD *)a2 + 1);
        *(_OWORD *)(v11 + 16) = *(_OWORD *)a2;
        *(_OWORD *)(v11 + 32) = v17;
        *(_OWORD *)(v11 + 48) = *((_OWORD *)a2 + 2);
        *(_QWORD *)(v11 + 64) = a2[6];
        *(_QWORD *)(v11 + 72) = v5;
        *(_QWORD *)(v11 + 80) = v6;
        v13 = 1;
      }
      else
      {
        v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v22.n128_u64[0], v22.n128_u64[1], v5, v6, 0);
        v9 = a2[4];
        v10 = a2[5];
        v11 = swift_allocObject(&unk_100153CF8, 88, 7);
        v18 = *((_OWORD *)a2 + 1);
        *(_OWORD *)(v11 + 16) = *(_OWORD *)a2;
        *(_OWORD *)(v11 + 32) = v18;
        *(_OWORD *)(v11 + 48) = *((_OWORD *)a2 + 2);
        *(_QWORD *)(v11 + 64) = a2[6];
        *(_QWORD *)(v11 + 72) = v5;
        *(_QWORD *)(v11 + 80) = v6;
      }
      goto LABEL_17;
    }
LABEL_8:
    v9 = a2[4];
    v10 = a2[5];
    v11 = swift_allocObject(&unk_100153CD0, 88, 7);
    v13 = 0;
    v16 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(v11 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v11 + 32) = v16;
    *(_OWORD *)(v11 + 48) = *((_OWORD *)a2 + 2);
    *(_QWORD *)(v11 + 64) = a2[6];
    *(_QWORD *)(v11 + 72) = v5;
    *(_QWORD *)(v11 + 80) = v6;
    if (!v6)
    {
      v8 = 7105633;
      v14 = 0xE300000000000000;
      goto LABEL_18;
    }
    if (v6 == 1)
      goto LABEL_10;
    v13 = 0;
LABEL_17:
    v8 = v5;
    v14 = v6;
    goto LABEL_18;
  }
  if (v6)
    goto LABEL_8;
  v8 = 7105633;
  v9 = a2[4];
  v10 = a2[5];
  v11 = swift_allocObject(&unk_100153D70, 88, 7);
  v12 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v11 + 32) = v12;
  *(_OWORD *)(v11 + 48) = *((_OWORD *)a2 + 2);
  *(_QWORD *)(v11 + 64) = a2[6];
  *(_QWORD *)(v11 + 72) = v5;
  *(_QWORD *)(v11 + 80) = 0;
  v13 = 1;
  v14 = 0xE300000000000000;
LABEL_18:
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = v13 & 1;
  *(_QWORD *)(a3 + 24) = sub_1000DD450;
  *(_QWORD *)(a3 + 32) = v11;
  *(_QWORD *)(a3 + 40) = v8;
  *(_QWORD *)(a3 + 48) = v14;
  sub_100005FA0(v5, v6);
  sub_100005FA0(v5, v6);
  sub_100005FA0(v5, v6);
  swift_bridgeObjectRetain(v7);
  sub_1000DC174((uint64_t)&v20);
  swift_retain(v10);
  *(_QWORD *)&result = swift_retain(v9).n128_u64[0];
  return result;
}

void sub_1000DBF84(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = *(unint64_t **)a1;
    swift_retain(*(_QWORD *)(a1 + 40));
    v5 = sub_100105904(v4, v3);
    v7 = v6;
    v8 = swift_release(v2);
    if (v7 != 2)
    {
      v9 = (*(uint64_t (**)(uint64_t, unint64_t, __n128))(a1 + 24))(v5, v7, v8);
      v10 = 0x4C746E6572727563;
      v11 = 0xE300000000000000;
      v12 = 7105633;
      if (v7)
      {
        v12 = v5;
        v11 = v7;
      }
      if (v7 == 1)
      {
        v13 = 0xEF6E6F697461636FLL;
      }
      else
      {
        v10 = v12;
        v13 = v11;
      }
      v19[0] = v10;
      v19[1] = v13;
      v14 = static UnitPoint.trailing.getter(v9);
      ScrollViewProxy.scrollTo<A>(_:anchor:)(v19, *(_QWORD *)&v14, v15, 0, &type metadata for String, &protocol witness table for String);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 48);
    v17 = type metadata accessor for RemoteViewConfiguration();
    v18 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v16, v17, v18);
    __break(1u);
  }
}

_QWORD *sub_1000DC0C0@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v8 = *(_OWORD *)(v1 + 1);
  v9 = v3;
  v10 = *(_OWORD *)(v1 + 5);
  v6 = swift_allocObject(&unk_100153C58, 72, 7);
  *(_QWORD *)(v6 + 16) = v3;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)(v1 + 1);
  *(_QWORD *)(v6 + 40) = v5;
  *(_QWORD *)(v6 + 48) = v4;
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(v1 + 5);
  *a1 = sub_1000DC16C;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v6;
  sub_100045AC4(&v9);
  sub_1000DC174((uint64_t)&v8);
  swift_retain(v4);
  return sub_10000E40C(&v10);
}

uint64_t sub_1000DC16C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000DB8C4(a1, (uint64_t *)(v2 + 16), a2);
}

uint64_t sub_1000DC174(uint64_t a1)
{
  sub_100005FA0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1000DC1A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000DBAB0(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_1000DC1A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001644F0;
  if (!qword_1001644F0)
  {
    v1 = sub_1000034AC(&qword_1001644E8);
    sub_100007D40(&qword_1001644F8, &qword_100164500, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001644F0);
  }
  return result;
}

uint64_t sub_1000DC22C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for ScrollViewProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 2));
  v5 = *((_QWORD *)v0 + 4);
  if (v5 >= 2)
    swift_bridgeObjectRelease(v5);
  v6 = (v3 + 72) & ~v3;
  swift_release(*((_QWORD *)v0 + 6));
  swift_release(*((_QWORD *)v0 + 7));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v6], v1);
  return swift_deallocObject(v0, v6 + v4, v3 | 7);
}

void sub_1000DC2C8()
{
  uint64_t v0;

  type metadata accessor for ScrollViewProxy(0);
  sub_1000DBF84(v0 + 16);
}

void sub_1000DC2F8()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v4._object = (void *)0xE000000000000000;
  v1._object = (void *)0x8000000100117810;
  v1._countAndFlagsBits = 0xD00000000000001BLL;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  xmmword_1001644D0 = (__int128)v3;
}

uint64_t sub_1000DC398@<X0>(uint64_t a1@<X8>)
{
  __n128 *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v27[2];
  __n128 v28;
  __n128 v29;

  v27[1] = a1;
  v2 = sub_100003E70(&qword_100164550);
  __chkstk_darwin(v2);
  v4 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[0] = sub_100003E70(&qword_100164558);
  __chkstk_darwin(v27[0]);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_100164560);
  __chkstk_darwin(v7);
  v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003E70(&qword_100164568);
  __chkstk_darwin(v10);
  v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003E70(&qword_100164570);
  __chkstk_darwin(v13);
  v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000DD410(v1, &v28);
  sub_1000DD410(&v28, &v29);
  if (v29.n128_u64[1] == 1)
  {
    sub_1000DCA68((uint64_t)v4);
    sub_100007ADC((uint64_t)v4, (uint64_t)v9, &qword_100164550);
    swift_storeEnumTagMultiPayload(v9, v7, 1);
    v21 = sub_1000DD790();
    v22 = sub_1000DD91C();
    _ConditionalContent<>.init(storage:)(v9, v13, v2, v21, v22);
    sub_100007ADC((uint64_t)v12, (uint64_t)v6, &qword_100164568);
    swift_storeEnumTagMultiPayload(v6, v27[0], 0);
    v23 = sub_1000DD76C();
    _ConditionalContent<>.init(storage:)(v6, v10, v13, v23, v21);
    sub_100008194((uint64_t)v12, &qword_100164568);
    v19 = (uint64_t)v4;
    v20 = &qword_100164550;
  }
  else if (v29.n128_u64[1])
  {
    sub_1000DC73C(v29.n128_i64[0], v29.n128_i64[1], (uint64_t)v15);
    sub_100007ADC((uint64_t)v15, (uint64_t)v6, &qword_100164570);
    swift_storeEnumTagMultiPayload(v6, v27[0], 1);
    v24 = sub_1000DD76C();
    v25 = sub_1000DD790();
    _ConditionalContent<>.init(storage:)(v6, v10, v13, v24, v25);
    v19 = (uint64_t)v15;
    v20 = &qword_100164570;
  }
  else
  {
    if (qword_10015CF08 != -1)
      swift_once(&qword_10015CF08, sub_1000DC2F8);
    sub_1000DC73C(xmmword_1001644D0, *((uint64_t *)&xmmword_1001644D0 + 1), (uint64_t)v15);
    sub_100007ADC((uint64_t)v15, (uint64_t)v9, &qword_100164570);
    swift_storeEnumTagMultiPayload(v9, v7, 0);
    v16 = sub_1000DD790();
    v17 = sub_1000DD91C();
    _ConditionalContent<>.init(storage:)(v9, v13, v2, v16, v17);
    sub_100007ADC((uint64_t)v12, (uint64_t)v6, &qword_100164568);
    swift_storeEnumTagMultiPayload(v6, v27[0], 0);
    v18 = sub_1000DD76C();
    _ConditionalContent<>.init(storage:)(v6, v10, v13, v18, v16);
    sub_100008194((uint64_t)v12, &qword_100164568);
    v19 = (uint64_t)v15;
    v20 = &qword_100164570;
  }
  return sub_100008194(v19, v20);
}

uint64_t sub_1000DC73C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char v52[16];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v47 = a1;
  v51 = a3;
  v49 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v49);
  v50 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003E70(&qword_1001645B0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003E70(&qword_1001645A0);
  __chkstk_darwin(v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100003E70(&qword_100164590);
  __chkstk_darwin(v48);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v3 + 24);
  v16 = *(_QWORD *)(v3 + 32);
  v53 = v47;
  v54 = a2;
  v55 = v3;
  swift_retain(v16);
  v17 = sub_100003E70(&qword_10015F018);
  v18 = sub_100043124();
  v19 = Button.init(action:label:)(v15, v16, sub_1000DDCB8, v52, v17, v18);
  LOBYTE(v15) = static Edge.Set.vertical.getter(v19);
  v20 = EdgeInsets.init(_all:)(8.0);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v12, v9, v6);
  v27 = &v12[*(int *)(v10 + 36)];
  *v27 = v15;
  *((double *)v27 + 1) = v20;
  *((_QWORD *)v27 + 2) = v22;
  *((_QWORD *)v27 + 3) = v24;
  *((_QWORD *)v27 + 4) = v26;
  v27[40] = 0;
  v28 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(_BYTE *)(v3 + 16) & 1) != 0)
  {
    v30 = static Color.primary.getter(v28);
    v29 = v30;
  }
  else
  {
    if (qword_10015CE50 != -1)
      swift_once(&qword_10015CE50, sub_1000382A0);
    v29 = qword_10016F648;
    swift_retain(qword_10016F648);
  }
  v31 = static Edge.Set.all.getter(v30);
  sub_100007ADC((uint64_t)v12, (uint64_t)v14, &qword_1001645A0);
  v32 = &v14[*(int *)(v48 + 36)];
  *(_QWORD *)v32 = v29;
  v32[8] = v31;
  sub_100008194((uint64_t)v12, &qword_1001645A0);
  v33 = v50;
  v34 = &v50[*(int *)(v49 + 20)];
  v35 = enum case for RoundedCornerStyle.continuous(_:);
  v36 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v34, v35, v36);
  __asm { FMOV            V0.2D, #8.0 }
  *v33 = _Q0;
  v42 = sub_100003E70(&qword_100164570);
  v43 = v51;
  v44 = v51 + *(int *)(v42 + 36);
  sub_10001BF60((uint64_t)v33, v44);
  *(_WORD *)(v44 + *(int *)(sub_100003E70(&qword_10015E338) + 36)) = 256;
  sub_100007ADC((uint64_t)v14, v43, &qword_100164590);
  sub_10001BFA4((uint64_t)v33);
  return sub_100008194((uint64_t)v14, &qword_100164590);
}

uint64_t sub_1000DCA68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t OpaqueTypeConformance2;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  _OWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[3];

  v93 = a1;
  v2 = type metadata accessor for AccessibilityTraits(0);
  v94 = *(_QWORD *)(v2 - 8);
  v95 = v2;
  __chkstk_darwin(v2);
  v92 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v90);
  v91 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TitleAndIconLabelStyle(0);
  v6 = *(_QWORD *)(v5 - 8);
  v83 = v5;
  v84 = v6;
  __chkstk_darwin(v5);
  v81 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for SymbolVariants(0);
  v76 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003E70(&qword_100164618);
  __chkstk_darwin(v10);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocationButton(0);
  v73 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100003E70(&qword_100164600);
  v78 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100003E70(&qword_100164620);
  v77 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100003E70(&qword_1001645F8);
  __chkstk_darwin(v75);
  v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100003E70(&qword_1001645E8);
  __chkstk_darwin(v82);
  v86 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100003E70(&qword_1001645D8);
  __chkstk_darwin(v85);
  v87 = (uint64_t)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100003E70(&qword_1001645C8);
  v24 = __chkstk_darwin(v88);
  v89 = (char *)&v71 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  static LocationButton.Title.currentLocation.getter(v24);
  v26 = type metadata accessor for LocationButton.Title(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v12, 0, 1, v26);
  v72 = v1;
  v28 = *(_QWORD *)(v1 + 24);
  v27 = *(_QWORD *)(v1 + 32);
  v29 = swift_retain(v27);
  v30 = LocationButton.init(_:action:)(v12, v28, v27, v29);
  static SymbolVariants.fill.getter(v30);
  v31 = sub_100003B3C(&qword_100164608, (uint64_t (*)(uint64_t))&type metadata accessor for LocationButton, (uint64_t)&protocol conformance descriptor for LocationButton);
  View.symbolVariant(_:)(v9, v13, v31);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v9, v79);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v15, v13);
  v33 = v81;
  TitleAndIconLabelStyle.init()(v32);
  v96[0] = v13;
  v96[1] = v31;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v96, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
  v35 = sub_100003B3C(&qword_100164610, (uint64_t (*)(uint64_t))&type metadata accessor for TitleAndIconLabelStyle, (uint64_t)&protocol conformance descriptor for TitleAndIconLabelStyle);
  v36 = v74;
  v37 = v83;
  View.labelStyle<A>(_:)(v33, v74, v83, OpaqueTypeConformance2, v35);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v33, v37);
  v38 = (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v17, v36);
  v39 = static Font.subheadline.getter(v38);
  KeyPath = swift_getKeyPath(&unk_1001136B0);
  v41 = v77;
  v42 = v80;
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v21, v19, v80);
  v43 = (uint64_t *)&v21[*(int *)(v75 + 36)];
  *v43 = KeyPath;
  v43[1] = v39;
  v44 = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v19, v42);
  v45 = *(_BYTE *)(v72 + 16);
  if ((v45 & 1) != 0)
  {
    if (qword_10015CE48 != -1)
      swift_once(&qword_10015CE48, sub_10003828C);
    v46 = qword_10016F640;
    swift_retain(qword_10016F640);
  }
  else
  {
    v46 = static Color.primary.getter(v44);
  }
  v47 = (uint64_t)v86;
  v48 = swift_getKeyPath(&unk_1001136E0);
  sub_100007ADC((uint64_t)v21, v47, &qword_1001645F8);
  v49 = (uint64_t *)(v47 + *(int *)(v82 + 36));
  *v49 = v48;
  v49[1] = v46;
  v50 = sub_100008194((uint64_t)v21, &qword_1001645F8);
  if ((v45 & 1) != 0)
  {
    v51 = static Color.primary.getter(v50);
  }
  else
  {
    if (qword_10015CE50 != -1)
      swift_once(&qword_10015CE50, sub_1000382A0);
    v51 = qword_10016F648;
    swift_retain(qword_10016F648);
  }
  v52 = swift_getKeyPath(&unk_100113710);
  v53 = v87;
  sub_100007ADC(v47, v87, &qword_1001645E8);
  v54 = (uint64_t *)(v53 + *(int *)(v85 + 36));
  *v54 = v52;
  v54[1] = v51;
  sub_100008194(v47, &qword_1001645E8);
  v55 = v91;
  v56 = &v91[*(int *)(v90 + 20)];
  v57 = enum case for RoundedCornerStyle.continuous(_:);
  v58 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 104))(v56, v57, v58);
  __asm { FMOV            V0.2D, #8.0 }
  *v55 = _Q0;
  v65 = v88;
  v64 = (uint64_t)v89;
  v66 = (uint64_t)&v89[*(int *)(v88 + 36)];
  sub_10001BF60((uint64_t)v55, v66);
  *(_WORD *)(v66 + *(int *)(sub_100003E70(&qword_10015E338) + 36)) = 256;
  sub_100007ADC(v53, v64, &qword_1001645D8);
  sub_10001BFA4((uint64_t)v55);
  v67 = sub_100008194(v53, &qword_1001645D8);
  v68 = v92;
  static AccessibilityTraits.isButton.getter(v67);
  v69 = sub_1000DD9A0();
  View.accessibility(addTraits:)(v68, v65, v69);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v68, v95);
  return sub_100008194(v64, &qword_1001645C8);
}

double sub_1000DD15C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  double result;
  _QWORD v36[2];

  v36[0] = a1;
  v36[1] = a2;
  v6 = sub_10000CB40();
  swift_bridgeObjectRetain(a2);
  v7 = Text.init<A>(_:)(v36, &type metadata for String, v6);
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  v14 = static Font.subheadline.getter(v7);
  v15 = Text.font(_:)(v14, v7, v9, v13, v11);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  swift_release(v14);
  sub_10000BFF8(v7, v9, v13);
  v22 = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(a3 + 16) & 1) != 0)
  {
    if (qword_10015CE48 != -1)
      swift_once(&qword_10015CE48, sub_10003828C);
    v23 = qword_10016F640;
    swift_retain(qword_10016F640);
  }
  else
  {
    v23 = static Color.primary.getter(v22);
  }
  v24 = v19 & 1;
  v25 = Text.foregroundColor(_:)(v23, v15, v17, v24, v21);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  swift_release(v23);
  sub_10000BFF8(v15, v17, v24);
  v32 = swift_bridgeObjectRelease();
  v33 = static Edge.Set.horizontal.getter(v32);
  *(_QWORD *)a4 = v25;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = v29 & 1;
  *(_QWORD *)(a4 + 24) = v31;
  *(_BYTE *)(a4 + 32) = v33;
  result = 0.0;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_BYTE *)(a4 + 72) = 1;
  return result;
}

uint64_t sub_1000DD2F4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DC398(a1);
}

uint64_t sub_1000DD32C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000DD354(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

uint64_t sub_1000DD380()
{
  _QWORD *v0;
  unint64_t v1;

  swift_bridgeObjectRelease(v0[2]);
  v1 = v0[4];
  if (v1 >= 2)
    swift_bridgeObjectRelease(v1);
  swift_release(v0[6]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 72, 7);
}

double sub_1000DD3C4@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000DBCCC(a1, (uint64_t *)(v2 + 16), a2);
}

unint64_t sub_1000DD3CC()
{
  unint64_t result;

  result = qword_100164530;
  if (!qword_100164530)
  {
    result = swift_getWitnessTable(&unk_10010A848, &type metadata for Tab);
    atomic_store(result, (unint64_t *)&qword_100164530);
  }
  return result;
}

__n128 *sub_1000DD410(__n128 *a1, __n128 *a2)
{
  initializeWithTake for Tab.Style(a2, a1);
  return a2;
}

uint64_t sub_1000DD464()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;

  swift_bridgeObjectRelease(v0[2]);
  v1 = v0[4];
  if (v1 >= 2)
    swift_bridgeObjectRelease(v1);
  swift_release(v0[6]);
  swift_release(v0[7]);
  v2 = v0[10];
  if (v2 >= 2)
    swift_bridgeObjectRelease(v2);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1000DD4B8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 40))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

uint64_t destroy for TabButton(uint64_t a1)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 2)
    swift_bridgeObjectRelease(v2);
  return swift_release(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for TabButton(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= 2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_bridgeObjectRetain(v4);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_retain(v5);
  return a1;
}

uint64_t assignWithCopy for TabButton(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) >= 2uLL)
  {
    if (v4 >= 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v6;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_100005778(a1);
    goto LABEL_6;
  }
  if (v4 < 2)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRetain(v5);
LABEL_8:
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v7;
  swift_retain(v7);
  swift_release(v9);
  return a1;
}

uint64_t assignWithTake for TabButton(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 8) >= 2uLL)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4 >= 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_100005778(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for TabButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TabButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TabButton()
{
  return &type metadata for TabButton;
}

uint64_t sub_1000DD730()
{
  return sub_100007D40(&qword_100164540, &qword_100164548, (uint64_t)&protocol conformance descriptor for ScrollViewReader<A>);
}

uint64_t sub_1000DD75C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011B940, 1);
}

uint64_t sub_1000DD76C()
{
  return sub_10001DE84(&qword_100164578, &qword_100164568, (void (*)(void))sub_1000DD790, (void (*)(void))sub_1000DD91C);
}

unint64_t sub_1000DD790()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164580;
  if (!qword_100164580)
  {
    v1 = sub_1000034AC(&qword_100164570);
    sub_1000DD814();
    sub_100007D40(&qword_10015E330, &qword_10015E338, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164580);
  }
  return result;
}

unint64_t sub_1000DD814()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164588;
  if (!qword_100164588)
  {
    v1 = sub_1000034AC(&qword_100164590);
    sub_1000DD898();
    sub_100007D40(&qword_10015E320, &qword_10015E328, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164588);
  }
  return result;
}

unint64_t sub_1000DD898()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164598;
  if (!qword_100164598)
  {
    v1 = sub_1000034AC(&qword_1001645A0);
    sub_100007D40(&qword_1001645A8, &qword_1001645B0, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164598);
  }
  return result;
}

unint64_t sub_1000DD91C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001645B8;
  if (!qword_1001645B8)
  {
    v1 = sub_1000034AC(&qword_100164550);
    sub_1000DD9A0();
    sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001645B8);
  }
  return result;
}

unint64_t sub_1000DD9A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001645C0;
  if (!qword_1001645C0)
  {
    v1 = sub_1000034AC(&qword_1001645C8);
    sub_1000DDA24();
    sub_100007D40(&qword_10015E330, &qword_10015E338, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001645C0);
  }
  return result;
}

unint64_t sub_1000DDA24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001645D0;
  if (!qword_1001645D0)
  {
    v1 = sub_1000034AC(&qword_1001645D8);
    sub_1000DDAA8();
    sub_100007D40(&qword_10015E9F0, &qword_10015E9F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001645D0);
  }
  return result;
}

unint64_t sub_1000DDAA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001645E0;
  if (!qword_1001645E0)
  {
    v1 = sub_1000034AC(&qword_1001645E8);
    sub_1000DDB2C();
    sub_100007D40(&qword_10015E9F0, &qword_10015E9F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001645E0);
  }
  return result;
}

unint64_t sub_1000DDB2C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = qword_1001645F0;
  if (!qword_1001645F0)
  {
    v1 = sub_1000034AC(&qword_1001645F8);
    v2 = sub_1000034AC(&qword_100164600);
    v3 = type metadata accessor for TitleAndIconLabelStyle(255);
    v6 = type metadata accessor for LocationButton(255);
    v7 = sub_100003B3C(&qword_100164608, (uint64_t (*)(uint64_t))&type metadata accessor for LocationButton, (uint64_t)&protocol conformance descriptor for LocationButton);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
    v5 = sub_100003B3C(&qword_100164610, (uint64_t (*)(uint64_t))&type metadata accessor for TitleAndIconLabelStyle, (uint64_t)&protocol conformance descriptor for TitleAndIconLabelStyle);
    v6 = v2;
    v7 = v3;
    v8 = OpaqueTypeConformance2;
    v9 = v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
    sub_100007D40(&qword_10015E310, &qword_10015E318, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001645F0);
  }
  return result;
}

uint64_t sub_1000DDC68@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000DDC90(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

double sub_1000DDCB8@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000DD15C(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1000DDCC4()
{
  return sub_10001DE84(&qword_100164628, &qword_100164630, (void (*)(void))sub_1000DD76C, (void (*)(void))sub_1000DD790);
}

uint64_t sub_1000DDCFC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t WitnessTable;

  v2 = *a1;
  WitnessTable = swift_getWitnessTable(&unk_10010E638, *a1);
  return ObservedObject.init(wrappedValue:)(a1, v2, WitnessTable);
}

uint64_t sub_1000DDD38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  double v33;
  double *v34;
  double v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v47 = a1;
  v48 = a3;
  v51 = a5;
  v7 = sub_100003E70(&qword_1001646D8);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100003E70(&qword_1001646E0);
  __chkstk_darwin(v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003E70(&qword_1001646E8);
  __chkstk_darwin(v13);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003E70(&qword_1001646F0);
  __chkstk_darwin(v16);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100003E70(&qword_1001646F8);
  __chkstk_darwin(v49);
  v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100003E70(&qword_100164700);
  __chkstk_darwin(v50);
  v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v9 = static Alignment.center.getter(v23);
  v9[1] = v24;
  v25 = sub_100003E70(&qword_100164708);
  sub_1000DE11C(v47, a2, v48, a4, (uint64_t)v9 + *(int *)(v25 + 44));
  sub_100007ADC((uint64_t)v9, (uint64_t)v12, &qword_1001646D8);
  v12[*(int *)(v10 + 36)] = 0;
  v26 = sub_100008194((uint64_t)v9, &qword_1001646D8);
  v27 = static Alignment.center.getter(v26);
  sub_1000E6898(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, INFINITY, 0, v27, v28);
  sub_100008194((uint64_t)v12, &qword_1001646E0);
  swift_retain(a2);
  v29 = sub_1000611A0();
  v30 = swift_release(a2);
  v31 = Color.init(_:)(v29, v30);
  LOBYTE(v9) = static Edge.Set.all.getter(v31);
  sub_100007ADC((uint64_t)v15, (uint64_t)v18, &qword_1001646E8);
  v32 = &v18[*(int *)(v16 + 36)];
  *(_QWORD *)v32 = v31;
  v32[8] = (char)v9;
  sub_100008194((uint64_t)v15, &qword_1001646E8);
  swift_retain(a2);
  v33 = sub_10006139C();
  swift_release(a2);
  sub_100007ADC((uint64_t)v18, (uint64_t)v20, &qword_1001646F0);
  v34 = (double *)&v20[*(int *)(v49 + 36)];
  *v34 = 0.0;
  v34[1] = v33;
  sub_100008194((uint64_t)v18, &qword_1001646F0);
  swift_retain(a2);
  v35 = sub_1000613CC();
  swift_release(a2);
  v37 = static UnitPoint.top.getter(v36);
  v39 = v38;
  sub_100007ADC((uint64_t)v20, (uint64_t)v22, &qword_1001646F8);
  v40 = (double *)&v22[*(int *)(v50 + 36)];
  *v40 = v35;
  v40[1] = v35;
  v40[2] = v37;
  *((_QWORD *)v40 + 3) = v39;
  sub_100008194((uint64_t)v20, &qword_1001646F8);
  v42 = static SafeAreaRegions.all.getter(v41);
  LOBYTE(v31) = static Edge.Set.all.getter(v42);
  v43 = v51;
  sub_100007ADC((uint64_t)v22, v51, &qword_100164700);
  v44 = v43 + *(int *)(sub_100003E70(&qword_100164710) + 36);
  *(_QWORD *)v44 = v42;
  *(_BYTE *)(v44 + 8) = v31;
  return sub_100008194((uint64_t)v22, &qword_100164700);
}

uint64_t sub_1000DE11C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD v73[2];
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;

  v72 = a4;
  v67 = a2;
  v66 = a1;
  v71 = a5;
  v7 = sub_100003E70(&qword_100164718);
  __chkstk_darwin(v7);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003E70(&qword_100164720);
  __chkstk_darwin(v10);
  v69 = (uint64_t)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v70 = (uint64_t)&v59 - v13;
  v14 = sub_100003E70(&qword_100164728);
  __chkstk_darwin(v14);
  v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003E70(&qword_100164730);
  __chkstk_darwin(v17);
  v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003E70(&qword_100164738);
  __chkstk_darwin(v20);
  v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100003E70(&qword_100164740);
  __chkstk_darwin(v64);
  v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100003E70(&qword_100164748);
  __chkstk_darwin(v68);
  v26 = (char *)&v59 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v65 = (uint64_t)&v59 - v28;
  *(_QWORD *)v16 = static VerticalAlignment.center.getter(v29);
  *((_QWORD *)v16 + 1) = 0;
  v16[16] = 0;
  v30 = &v16[*(int *)(sub_100003E70(&qword_100164750) + 44)];
  v63 = a3;
  v31 = sub_1000DE6CC(a2, v30);
  v32 = static Alignment.leading.getter(v31);
  sub_1000E68F0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v19, 0.0, 1, 0.0, 1, v32, v33);
  sub_100008194((uint64_t)v16, &qword_100164728);
  sub_100007ADC((uint64_t)v19, (uint64_t)v22, &qword_100164730);
  v34 = &v22[*(int *)(v20 + 36)];
  *(_QWORD *)v34 = 0x403E000000000000;
  v34[8] = 0;
  v35 = sub_100008194((uint64_t)v19, &qword_100164730);
  v36 = static Alignment.center.getter(v35);
  v38 = v37;
  sub_1000DE7F0(a3, (uint64_t)v73);
  v62 = v73[0];
  v61 = v73[1];
  v39 = v74;
  v40 = v75;
  v60 = v76;
  v41 = v77;
  v42 = v78;
  v43 = v79;
  v59 = v80;
  v44 = v81;
  v45 = v82;
  sub_100007ADC((uint64_t)v22, (uint64_t)v24, &qword_100164738);
  v46 = &v24[*(int *)(v64 + 36)];
  v47 = v61;
  *(_OWORD *)v46 = v62;
  *((_OWORD *)v46 + 1) = v47;
  *((_QWORD *)v46 + 4) = v39;
  *((_QWORD *)v46 + 5) = v40;
  *((_OWORD *)v46 + 3) = v60;
  *((_QWORD *)v46 + 8) = v41;
  *((_QWORD *)v46 + 9) = v42;
  *((_QWORD *)v46 + 10) = v43;
  *(_OWORD *)(v46 + 88) = v59;
  *((_QWORD *)v46 + 13) = v44;
  *((_QWORD *)v46 + 14) = v45;
  *((_QWORD *)v46 + 15) = v36;
  *((_QWORD *)v46 + 16) = v38;
  sub_100008194((uint64_t)v22, &qword_100164738);
  sub_100007ADC((uint64_t)v24, (uint64_t)v26, &qword_100164740);
  *(_WORD *)&v26[*(int *)(v68 + 36)] = 0;
  sub_100008194((uint64_t)v24, &qword_100164740);
  v48 = v65;
  v49 = sub_100007A98((uint64_t)v26, v65, &qword_100164748);
  *(_QWORD *)v9 = static VerticalAlignment.center.getter(v49);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 0;
  v50 = sub_100003E70(&qword_100164758);
  v51 = sub_1000DE9B4(v67, v72, (uint64_t)&v9[*(int *)(v50 + 44)]);
  v52 = static Alignment.leading.getter(v51);
  v53 = v69;
  sub_1000E6948(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v69, 0.0, 1, 0.0, 1, v52, v54);
  sub_100008194((uint64_t)v9, &qword_100164718);
  v55 = v70;
  sub_100007A98(v53, v70, &qword_100164720);
  sub_100007ADC(v48, (uint64_t)v26, &qword_100164748);
  sub_100007ADC(v55, v53, &qword_100164720);
  v56 = v71;
  sub_100007ADC((uint64_t)v26, v71, &qword_100164748);
  v57 = sub_100003E70(&qword_100164760);
  sub_100007ADC(v53, v56 + *(int *)(v57 + 48), &qword_100164720);
  sub_100008194(v55, &qword_100164720);
  sub_100008194(v48, &qword_100164748);
  sub_100008194(v53, &qword_100164720);
  return sub_100008194((uint64_t)v26, &qword_100164748);
}

uint64_t sub_1000DE6CC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  int *v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  _BYTE v16[9];
  uint64_t v17;

  v4 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v4);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 1];
  v7 = *(_QWORD *)(a1 + 16);
  swift_retain(a1);
  sub_100060D30((uint64_t)v6);
  swift_release(a1);
  KeyPath = swift_getKeyPath(&unk_1001137E0);
  v9 = (int *)type metadata accessor for Artwork(0);
  v10 = (_QWORD *)((char *)a2 + v9[7]);
  *v10 = KeyPath;
  v11 = sub_100003E70(&qword_10015D490);
  swift_storeEnumTagMultiPayload(v10, v11, 0);
  *a2 = v7;
  sub_100007A98((uint64_t)v6, (uint64_t)a2 + v9[5], &qword_100165370);
  v12 = (char *)a2 + v9[6];
  v16[0] = 0;
  result = State.init(wrappedValue:)(v16, &type metadata for Bool);
  v14 = v17;
  *v12 = v16[1];
  *((_QWORD *)v12 + 1) = v14;
  return result;
}

__n128 sub_1000DE7F0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v4 = static Alignment.center.getter(a1);
  v6 = v5;
  sub_1000DE87C(a1, (uint64_t)&v15);
  v7 = v16;
  v8 = v17;
  v9 = v20;
  result = v18;
  v11 = v19;
  v12 = v21;
  v13 = v22;
  v14 = v15;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(_OWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v8;
  *(__n128 *)(a2 + 48) = result;
  *(_OWORD *)(a2 + 64) = v11;
  *(_QWORD *)(a2 + 80) = v9;
  *(_OWORD *)(a2 + 88) = v12;
  *(_OWORD *)(a2 + 104) = v13;
  return result;
}

double sub_1000DE87C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  v3 = static Alignment.center.getter(a1);
  v5 = v4;
  sub_1000DEDC0((uint64_t)&v18, 1.0, 0.0, 0.2);
  v6 = v18;
  v17 = v19;
  v7 = v20;
  v8 = sub_100003E70(&qword_10015E0E0);
  v9 = swift_allocObject(v8, 48, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10010A6C0;
  v10 = static Color.black.getter(v9);
  v11 = Color.opacity(_:)(0.4);
  swift_release(v10);
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = static Color.clear.getter(v12);
  v18 = v9;
  specialized Array._endMutation()(v13);
  Gradient.init(colors:)(v18);
  LinearGradient.init(gradient:startPoint:endPoint:)(&v18, v14, 0.0, 0.0, 0.0, 1.0);
  v15 = v18;
  *(_QWORD *)a2 = 17;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_OWORD *)(a2 + 32) = v17;
  *(_OWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a2 + 64) = v15;
  *(_OWORD *)(a2 + 72) = v19;
  result = *(double *)&v20;
  *(_OWORD *)(a2 + 88) = v20;
  return result;
}

uint64_t sub_1000DE9B4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  char v55;

  *(_QWORD *)&v49 = a2;
  v50 = a3;
  v4 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for Artwork(0);
  __chkstk_darwin(v7);
  v9 = (_QWORD *)((char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100003E70(&qword_100164768);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003E70(&qword_100164770);
  __chkstk_darwin(v13);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  swift_retain(a1);
  sub_100060D30((uint64_t)v6);
  swift_release(a1);
  KeyPath = swift_getKeyPath(&unk_1001137E0);
  v18 = (_QWORD *)((char *)v9 + v7[7]);
  *v18 = KeyPath;
  v19 = sub_100003E70(&qword_10015D490);
  swift_storeEnumTagMultiPayload(v18, v19, 0);
  *v9 = v16;
  sub_100007A98((uint64_t)v6, (uint64_t)v9 + v7[5], &qword_100165370);
  v20 = (char *)v9 + v7[6];
  v55 = 0;
  v21 = State.init(wrappedValue:)(&v55, &type metadata for Bool);
  v22 = v52;
  *v20 = v51;
  *((_QWORD *)v20 + 1) = v22;
  v23 = static Alignment.center.getter(v21);
  v25 = v24;
  sub_1000DEDC0((uint64_t)&v51, 0.6, 0.0, 1.0);
  v26 = v51;
  v48 = v52;
  v27 = v53;
  v28 = v54;
  sub_1000DFBA8((uint64_t)v9, (uint64_t)v12);
  v29 = &v12[*(int *)(v10 + 36)];
  *(_QWORD *)v29 = v23;
  *((_QWORD *)v29 + 1) = v25;
  *((_QWORD *)v29 + 2) = v26;
  *(_OWORD *)(v29 + 24) = v48;
  *((_QWORD *)v29 + 5) = v27;
  *((_QWORD *)v29 + 6) = v28;
  v30 = sub_1000DFBEC((uint64_t)v9);
  v31 = static Alignment.center.getter(v30);
  v33 = v32;
  sub_1000DECFC((uint64_t)&v51);
  v34 = v51;
  v48 = v52;
  v35 = v53;
  v36 = v54;
  sub_100007ADC((uint64_t)v12, (uint64_t)v15, &qword_100164768);
  v37 = &v15[*(int *)(v13 + 36)];
  *(_QWORD *)v37 = v31;
  *((_QWORD *)v37 + 1) = v33;
  *((_QWORD *)v37 + 2) = v34;
  *(_OWORD *)(v37 + 24) = v48;
  *((_QWORD *)v37 + 5) = v35;
  *((_QWORD *)v37 + 6) = v36;
  v38 = sub_100008194((uint64_t)v12, &qword_100164768);
  v39 = static Alignment.center.getter(v38);
  v41 = v40;
  sub_1000DEDC0((uint64_t)&v51, 0.0, 0.3, 0.0);
  v43 = v50;
  v42 = v51;
  v49 = v52;
  v44 = v53;
  v45 = v54;
  sub_100007ADC((uint64_t)v15, v50, &qword_100164770);
  v46 = v43 + *(int *)(sub_100003E70(&qword_100164778) + 36);
  *(_QWORD *)v46 = v39;
  *(_QWORD *)(v46 + 8) = v41;
  *(_QWORD *)(v46 + 16) = v42;
  *(_OWORD *)(v46 + 24) = v49;
  *(_QWORD *)(v46 + 40) = v44;
  *(_QWORD *)(v46 + 48) = v45;
  return sub_100008194((uint64_t)v15, &qword_100164770);
}

double sub_1000DECFC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  double result;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;

  v2 = sub_100003E70(&qword_10015E0E0);
  v3 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10010A6C0;
  v4 = static Color.white.getter(v3);
  *(_QWORD *)(v3 + 32) = v4;
  v5 = static Color.white.getter(v4);
  v6 = Color.opacity(_:)(0.2);
  v7 = swift_release(v5);
  *(_QWORD *)(v3 + 40) = v6;
  *(_QWORD *)&v11[0] = v3;
  specialized Array._endMutation()(v7);
  Gradient.init(colors:)(v3);
  LinearGradient.init(gradient:startPoint:endPoint:)(v11, v8, 0.8, 0.0, 1.0, 0.0);
  result = *(double *)v11;
  v10 = v11[1];
  *(_OWORD *)a1 = v11[0];
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v12;
  return result;
}

double sub_1000DEDC0@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  double result;
  __int128 v14;
  _OWORD v15[2];
  uint64_t v16;

  v8 = sub_100003E70(&qword_10015E0E0);
  v9 = swift_allocObject(v8, 48, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10010A6C0;
  v10 = static Color.white.getter(v9);
  *(_QWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 40) = static Color.clear.getter(v10);
  *(_QWORD *)&v15[0] = v9;
  specialized Array._endMutation()(v11);
  Gradient.init(colors:)(v9);
  LinearGradient.init(gradient:startPoint:endPoint:)(v15, v12, a2, a3, a4, 0.0);
  result = *(double *)v15;
  v14 = v15[1];
  *(_OWORD *)a1 = v15[0];
  *(_OWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 32) = v16;
  return result;
}

uint64_t type metadata accessor for HeroImageLandscape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HeroImageLandscape);
}

uint64_t sub_1000DEE84(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10011B9D4, 1);
}

uint64_t sub_1000DEEB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000DDD38(*v2, v2[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

double sub_1000DEEC8()
{
  double result;

  if (qword_10015CE60 != -1)
    swift_once(&qword_10015CE60, sub_1000382C8);
  qword_100164648 = qword_10016F658;
  *(_QWORD *)&result = swift_retain(qword_10016F658).n128_u64[0];
  return result;
}

uint64_t sub_1000DEF10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = static Color.white.getter();
  v1 = Color.opacity(_:)(0.01);
  result = swift_release(v0);
  qword_100164650 = v1;
  return result;
}

__n128 sub_1000DEF50@<Q0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  __n128 v27;
  __n128 v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char v66;
  void (*v67)(char *, uint64_t);
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __n128 result;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char **v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __n128 v106;
  __int128 v107;
  __int128 v108;
  int64x2_t v109;
  __int128 v110;
  __int128 v111;
  _OWORD v112[2];
  char v113;
  uint64_t v114[2];
  __int128 v115;
  __int128 v116;
  __n128 v117;
  __int128 v118;
  __int128 v119;
  int64x2_t v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  char v127;
  char v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __n128 v132;
  __int128 v133;
  __int128 v134;
  int64x2_t v135;
  __int128 v136;
  __int128 v137;
  _OWORD v138[2];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __n128 v142;
  __int128 v143;
  __int128 v144;
  int64x2_t v145;
  __int128 v146;
  __int128 v147;
  _OWORD v148[2];
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __n128 v152;
  __int128 v153;
  __int128 v154;
  int64x2_t v155;
  __int128 v156;
  __int128 v157;
  _OWORD v158[2];
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __n128 v162;
  __int128 v163;
  __int128 v164;
  int64x2_t v165;
  __int128 v166;
  __int128 v167;
  _OWORD v168[2];
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __n128 v172;
  __int128 v173;
  __int128 v174;
  int64x2_t v175;
  __int128 v176;
  __int128 v177;
  _OWORD v178[3];

  v102 = a2;
  v98 = a3;
  v99 = a1;
  v3 = type metadata accessor for ColorScheme(0);
  v93 = *(_QWORD *)(v3 - 8);
  v94 = v3;
  __chkstk_darwin(v3);
  v92 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v91 = (uint64_t)&v91 - v6;
  v101 = type metadata accessor for Artwork(0);
  v95 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v96 = v7;
  v97 = (uint64_t)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SlideTransition(0);
  v100 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v91 - v12;
  v14 = type metadata accessor for Image.ResizingMode(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AsyncImagePhase(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (uint64_t *)((char *)&v91 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v19 + 16))(v22, v99, v18, v20);
  v23 = (*(uint64_t (**)(_QWORD *, uint64_t))(v19 + 88))(v22, v18);
  if (v23 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v19 + 96))(v22, v18);
    v99 = *v22;
    v24 = v99;
    (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for Image.ResizingMode.stretch(_:), v14);
    v94 = Image.resizable(capInsets:resizingMode:)(v17, v24, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v25 = off_100164640;
    v26 = (uint64_t)v102;
    v92 = *v102;
    v93 = qword_100164638;
    v27 = swift_bridgeObjectRetain(off_100164640);
    LODWORD(v91) = static MatchedGeometryProperties.position.getter(v27);
    v29 = static UnitPoint.center.getter(v28);
    v31 = v30;
    SlideTransition.init()(v32);
    v33 = v100;
    (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v10, v13, v8);
    v34 = sub_1000E0EB8();
    v35 = AnyTransition.init<A>(_:)(v10, v8, v34);
    v128 = 1;
    v127 = 0;
    v126 = 1;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v8);
    v36 = v128;
    v37 = v127;
    v38 = v126;
    v39 = v26 + *(int *)(v101 + 24);
    v40 = *(_BYTE *)v39;
    v41 = *(_QWORD *)(v39 + 8);
    LOBYTE(v169) = v40;
    *((_QWORD *)&v169 + 1) = v41;
    v42 = sub_100003E70(&qword_10015E858);
    v43 = State.wrappedValue.getter(&v159, v42);
    if ((_BYTE)v159)
      v44 = 1.0;
    else
      v44 = 0.0;
    v45 = static UnitPoint.leading.getter(v43);
    v47 = v46;
    v113 = v36;
    v48 = v97;
    sub_1000DFBA8(v26, v97);
    v49 = *(unsigned __int8 *)(v95 + 80);
    v50 = (v49 + 16) & ~v49;
    v51 = swift_allocObject(&unk_100153EF0, v50 + v96, v49 | 7);
    sub_1000E09F0(v48, v51 + v50);
    v114[0] = v94;
    v114[1] = 0;
    LOBYTE(v115) = v36;
    BYTE1(v115) = v37;
    *((_QWORD *)&v115 + 1) = v93;
    *(_QWORD *)&v116 = v25;
    *((_QWORD *)&v116 + 1) = v92;
    v117.n128_u32[0] = v91;
    v117.n128_f64[1] = v29;
    *(_QWORD *)&v118 = v31;
    BYTE8(v118) = v38;
    *(_QWORD *)&v119 = v35;
    v120 = vdupq_n_s64(0x3FF199999999999AuLL);
    *((double *)&v119 + 1) = v44;
    *(double *)&v121 = v45;
    *((_QWORD *)&v121 + 1) = v47;
    LOWORD(v122) = 0;
    *((_QWORD *)&v122 + 1) = sub_1000E1014;
    v123 = v51;
    v124 = 0;
    v125 = 0;
    v133 = v118;
    v134 = v119;
    v131 = v116;
    v132 = v117;
    v129 = (unint64_t)v94;
    v130 = v115;
    *(_QWORD *)&v138[1] = 0;
    v137 = v122;
    v138[0] = (unint64_t)v51;
    v135 = v120;
    v136 = v121;
    sub_1000B4540((uint64_t)&v129);
    sub_100007A98((uint64_t)&v129, (uint64_t)&v169, &qword_1001648E8);
    sub_1000E1040(v114);
    v52 = sub_100003E70(&qword_100164878);
    v53 = sub_100003E70(&qword_1001648D8);
    v54 = sub_1000E0B58();
    v55 = sub_1000E0E28();
    _ConditionalContent<>.init(storage:)(&v169, v52, v53, v54, v55);
    v147 = v111;
    v148[0] = v112[0];
    *(_OWORD *)((char *)v148 + 9) = *(_OWORD *)((char *)v112 + 9);
    v143 = v107;
    v144 = v108;
    v145 = v109;
    v146 = v110;
    v139 = v103;
    v140 = v104;
    v141 = v105;
    v142 = v106;
    v167 = v111;
    v168[0] = v112[0];
    *(_OWORD *)((char *)v168 + 9) = *(_OWORD *)((char *)v112 + 9);
    v163 = v107;
    v164 = v108;
    v166 = v110;
    v165 = v109;
    v159 = v103;
    v160 = v104;
    v162 = v106;
    v161 = v105;
    sub_1000E0F00((uint64_t)&v159);
    sub_100007A98((uint64_t)&v159, (uint64_t)&v169, &qword_1001648E0);
    sub_1000E1140((uint64_t)&v139, sub_1000E10B8);
    v56 = sub_100003E70(&qword_100164868);
    v57 = sub_1000E0AEC();
    _ConditionalContent<>.init(storage:)(&v169, v56, &type metadata for EmptyView, v57, &protocol witness table for EmptyView);
    swift_release(v99);
    sub_1000E1140((uint64_t)&v139, sub_1000E11AC);
    sub_1000E123C(v114);
    v177 = v157;
    v178[0] = v158[0];
    *(_OWORD *)((char *)v178 + 10) = *(_OWORD *)((char *)v158 + 10);
    v173 = v153;
    v174 = v154;
    v176 = v156;
    v175 = v155;
    v169 = v149;
    v170 = v150;
    v172 = v152;
    v171 = v151;
    v58 = v98;
  }
  else
  {
    v59 = v100;
    v60 = v8;
    if (v23 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v19 + 96))(v22, v18);
      swift_errorRelease(*v22);
      v61 = v13;
    }
    else
    {
      v61 = v13;
      if (v23 != enum case for AsyncImagePhase.empty(_:))
      {
        sub_1000E0EAC((uint64_t)&v149);
        sub_100007A98((uint64_t)&v149, (uint64_t)&v169, &qword_1001648E0);
        v84 = sub_100003E70(&qword_100164868);
        v85 = sub_1000E0AEC();
        _ConditionalContent<>.init(storage:)(&v169, v84, &type metadata for EmptyView, v85, &protocol witness table for EmptyView);
        (*(void (**)(_QWORD *, uint64_t))(v19 + 8))(v22, v18);
        v177 = v167;
        v178[0] = v168[0];
        *(_OWORD *)((char *)v178 + 10) = *(_OWORD *)((char *)v168 + 10);
        v173 = v163;
        v174 = v164;
        v176 = v166;
        v175 = v165;
        v169 = v159;
        v170 = v160;
        v172 = v162;
        v171 = v161;
        v58 = v98;
        goto LABEL_18;
      }
    }
    v62 = v91;
    sub_10001E08C(v91);
    v64 = v92;
    v63 = v93;
    v65 = v94;
    (*(void (**)(char *, _QWORD, uint64_t))(v93 + 104))(v92, enum case for ColorScheme.light(_:), v94);
    v66 = static ColorScheme.== infix(_:_:)(v62, v64);
    v67 = *(void (**)(char *, uint64_t))(v63 + 8);
    v67(v64, v65);
    v67((char *)v62, v65);
    if ((v66 & 1) != 0)
    {
      v68 = v10;
      if (qword_10015CF10 != -1)
        swift_once(&qword_10015CF10, sub_1000DEEC8);
      v69 = &qword_100164648;
    }
    else
    {
      v68 = v10;
      if (qword_10015CF18 != -1)
        swift_once(&qword_10015CF18, sub_1000DEF10);
      v69 = &qword_100164650;
    }
    v58 = v98;
    v70 = *v69;
    swift_retain(*v69);
    v72 = static Edge.Set.all.getter(v71);
    v73 = v72;
    SlideTransition.init()(v72);
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v68, v61, v60);
    v74 = sub_1000E0EB8();
    v75 = AnyTransition.init<A>(_:)(v68, v60, v74);
    v76 = v61;
    v77 = v75;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v76, v60);
    *(_QWORD *)&v139 = v70;
    BYTE8(v139) = v73;
    *(_QWORD *)&v140 = v77;
    sub_1000B4534((uint64_t)&v139);
    sub_100007A98((uint64_t)&v139, (uint64_t)&v169, &qword_1001648E8);
    swift_retain(v70);
    swift_retain(v77);
    v78 = sub_100003E70(&qword_100164878);
    v79 = sub_100003E70(&qword_1001648D8);
    v80 = sub_1000E0B58();
    v81 = sub_1000E0E28();
    _ConditionalContent<>.init(storage:)(&v169, v78, v79, v80, v81);
    v167 = v137;
    v168[0] = v138[0];
    *(_OWORD *)((char *)v168 + 9) = *(_OWORD *)((char *)v138 + 9);
    v163 = v133;
    v164 = v134;
    v166 = v136;
    v165 = v135;
    v159 = v129;
    v160 = v130;
    v162 = v132;
    v161 = v131;
    sub_1000E0F00((uint64_t)&v159);
    sub_100007A98((uint64_t)&v159, (uint64_t)&v169, &qword_1001648E0);
    v82 = sub_100003E70(&qword_100164868);
    v83 = sub_1000E0AEC();
    _ConditionalContent<>.init(storage:)(&v169, v82, &type metadata for EmptyView, v83, &protocol witness table for EmptyView);
    swift_release(v77);
    swift_release(v70);
    v177 = v157;
    v178[0] = v158[0];
    *(_OWORD *)((char *)v178 + 10) = *(_OWORD *)((char *)v158 + 10);
    v173 = v153;
    v174 = v154;
    v176 = v156;
    v175 = v155;
    v169 = v149;
    v170 = v150;
    v172 = v152;
    v171 = v151;
  }
LABEL_18:
  v86 = v178[0];
  *(_OWORD *)(v58 + 128) = v177;
  *(_OWORD *)(v58 + 144) = v86;
  *(_OWORD *)(v58 + 154) = *(_OWORD *)((char *)v178 + 10);
  v87 = v174;
  *(_OWORD *)(v58 + 64) = v173;
  *(_OWORD *)(v58 + 80) = v87;
  v88 = v176;
  *(int64x2_t *)(v58 + 96) = v175;
  *(_OWORD *)(v58 + 112) = v88;
  v89 = v170;
  *(_OWORD *)v58 = v169;
  *(_OWORD *)(v58 + 16) = v89;
  result = v172;
  *(_OWORD *)(v58 + 32) = v171;
  *(__n128 *)(v58 + 48) = result;
  return result;
}

double sub_1000DF968(uint64_t a1)
{
  uint64_t v1;
  double result;
  _QWORD v3[4];

  v3[2] = a1;
  v1 = static Animation.default.getter();
  withAnimation<A>(_:_:)(v1, sub_1000E12B4, v3, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

uint64_t sub_1000DF9C4(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for Artwork(0) + 24));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_100003E70(&qword_10015E858);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_1000DFA34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(a1);
  v5 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007ADC(v1 + *(int *)(a1 + 20), (uint64_t)v7, &qword_100165370);
  sub_1000DFBA8(v1, (uint64_t)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_100153EC8, v9 + v4, v8 | 7);
  sub_1000E09F0((uint64_t)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9);
  v11 = sub_100003E70(&qword_100164850);
  v12 = sub_1000E0A80();
  return AsyncImage.init(url:scale:transaction:content:)(v7, 0, sub_1000E0A34, v10, v11, v12, 1.0);
}

uint64_t type metadata accessor for Artwork(uint64_t a1)
{
  uint64_t result;

  result = qword_1001647D8;
  if (!qword_1001647D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Artwork);
  return result;
}

uint64_t sub_1000DFBA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DFBEC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Artwork(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_1000DFC28(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    *a1 = *a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_100003E70(&qword_100165370);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = a3[6];
    v15 = a3[7];
    v16 = (char *)v4 + v14;
    v17 = (char *)a2 + v14;
    *v16 = *v17;
    v18 = *((_QWORD *)v17 + 1);
    *((_QWORD *)v16 + 1) = v18;
    v19 = (uint64_t *)((char *)v4 + v15);
    v20 = (uint64_t *)((char *)a2 + v15);
    swift_retain(v18);
    v21 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
      v23 = v19;
      v24 = v21;
      v25 = 1;
    }
    else
    {
      v26 = *v20;
      *v19 = *v20;
      swift_retain(v26);
      v23 = v19;
      v24 = v21;
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v23, v24, v25);
  }
  return v4;
}

double sub_1000DFDB8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_release(*(_QWORD *)(a1 + a2[6] + 8));
  v7 = (_QWORD *)(a1 + a2[7]);
  v8 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v7).n128_u64[0];
  }
  return result;
}

_QWORD *sub_1000DFE90(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100003E70(&qword_100165370);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *v14 = *v15;
  v16 = *((_QWORD *)v15 + 1);
  *((_QWORD *)v14 + 1) = v16;
  v17 = (_QWORD *)((char *)a1 + v13);
  v18 = (_QWORD *)((char *)a2 + v13);
  swift_retain(v16);
  v19 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
    v21 = 1;
  }
  else
  {
    v22 = *v18;
    *v17 = *v18;
    swift_retain(v22);
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v19, v21);
  return a1;
}

_QWORD *sub_1000DFFEC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100003E70(&qword_100165370);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *v16 = *v17;
  v18 = *((_QWORD *)v16 + 1);
  v19 = *((_QWORD *)v17 + 1);
  *((_QWORD *)v16 + 1) = v19;
  swift_retain(v19);
  swift_release(v18);
  if (a1 != a2)
  {
    v20 = a3[7];
    v21 = (_QWORD *)((char *)a1 + v20);
    v22 = (_QWORD *)((char *)a2 + v20);
    sub_100008194((uint64_t)a1 + v20, &qword_10015D490);
    v23 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
      v25 = 1;
    }
    else
    {
      v26 = *v22;
      *v21 = *v22;
      swift_retain(v26);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v23, v25);
  }
  return a1;
}

_QWORD *sub_1000E01BC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100003E70(&qword_100165370);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
    swift_storeEnumTagMultiPayload(v13, v15, 1);
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_1000E0308(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100003E70(&qword_100165370);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *v16 = *v17;
  v18 = *((_QWORD *)v16 + 1);
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  swift_release(v18);
  if (a1 != a2)
  {
    v19 = a3[7];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    sub_100008194((uint64_t)a1 + v19, &qword_10015D490);
    v22 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload(v20, v22, 1);
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000E04D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E04E0);
}

uint64_t sub_1000E04E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v6 = sub_100003E70(&qword_100165370);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v8 = sub_100003E70(&qword_10015E6D8);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[6] + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  v11 = v10 - 1;
  if (v11 < 0)
    v11 = -1;
  return (v11 + 1);
}

uint64_t sub_1000E059C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E05A8);
}

uint64_t sub_1000E05A8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_100003E70(&qword_100165370);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + a4[6] + 8) = a2;
      return result;
    }
    v10 = sub_100003E70(&qword_10015E6D8);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[7];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_1000E0654(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_100071DB0(319, (unint64_t *)&qword_10015F830, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_100113818;
    sub_100071DB0(319, (unint64_t *)&qword_10015E748, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

unint64_t sub_1000E0724()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164818;
  if (!qword_100164818)
  {
    v1 = sub_1000034AC(&qword_100164710);
    sub_1000E0790();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164818);
  }
  return result;
}

unint64_t sub_1000E0790()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164820;
  if (!qword_100164820)
  {
    v1 = sub_1000034AC(&qword_100164700);
    sub_1000E07FC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164820);
  }
  return result;
}

unint64_t sub_1000E07FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164828;
  if (!qword_100164828)
  {
    v1 = sub_1000034AC(&qword_1001646F8);
    sub_1000E0868();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164828);
  }
  return result;
}

unint64_t sub_1000E0868()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164830;
  if (!qword_100164830)
  {
    v1 = sub_1000034AC(&qword_1001646F0);
    sub_1000E08EC();
    sub_100007D40(&qword_10015E320, &qword_10015E328, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164830);
  }
  return result;
}

unint64_t sub_1000E08EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164838;
  if (!qword_100164838)
  {
    v1 = sub_1000034AC(&qword_1001646E8);
    sub_1000E0958();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164838);
  }
  return result;
}

unint64_t sub_1000E0958()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164840;
  if (!qword_100164840)
  {
    v1 = sub_1000034AC(&qword_1001646E0);
    sub_100007D40(&qword_100164848, &qword_1001646D8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_100022E3C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164840);
  }
  return result;
}

uint64_t sub_1000E09DC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011BA08, 1);
}

uint64_t sub_1000E09F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_1000E0A34@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  double result;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Artwork(0) - 8) + 80);
  *(_QWORD *)&result = sub_1000DEF50(a1, (char **)(v2 + ((v5 + 16) & ~v5)), a2).n128_u64[0];
  return result;
}

unint64_t sub_1000E0A80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164858;
  if (!qword_100164858)
  {
    v1 = sub_1000034AC(&qword_100164850);
    sub_1000E0AEC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164858);
  }
  return result;
}

unint64_t sub_1000E0AEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164860;
  if (!qword_100164860)
  {
    v1 = sub_1000034AC(&qword_100164868);
    sub_1000E0B58();
    sub_1000E0E28();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164860);
  }
  return result;
}

unint64_t sub_1000E0B58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164870;
  if (!qword_100164870)
  {
    v1 = sub_1000034AC(&qword_100164878);
    sub_1000E0BC4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164870);
  }
  return result;
}

unint64_t sub_1000E0BC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164880;
  if (!qword_100164880)
  {
    v1 = sub_1000034AC(&qword_100164888);
    sub_1000E0C48();
    sub_100007D40(&qword_100161320, &qword_100161328, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164880);
  }
  return result;
}

unint64_t sub_1000E0C48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164890;
  if (!qword_100164890)
  {
    v1 = sub_1000034AC(&qword_100164898);
    sub_1000E0CB4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164890);
  }
  return result;
}

unint64_t sub_1000E0CB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001648A0;
  if (!qword_1001648A0)
  {
    v1 = sub_1000034AC(&qword_1001648A8);
    sub_1000E0D20();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001648A0);
  }
  return result;
}

unint64_t sub_1000E0D20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001648B0;
  if (!qword_1001648B0)
  {
    v1 = sub_1000034AC(&qword_1001648B8);
    sub_1000E0DA4();
    sub_100007D40(&qword_100162168, &qword_100162170, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001648B0);
  }
  return result;
}

unint64_t sub_1000E0DA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001648C0;
  if (!qword_1001648C0)
  {
    v1 = sub_1000034AC(&qword_1001648C8);
    sub_10008AD8C();
    sub_100007D40(&qword_100163308, &qword_100163310, (uint64_t)&protocol conformance descriptor for _MatchedGeometryEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001648C0);
  }
  return result;
}

unint64_t sub_1000E0E28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001648D0;
  if (!qword_1001648D0)
  {
    v1 = sub_1000034AC(&qword_1001648D8);
    sub_1000C1868();
    sub_100007D40(&qword_100162168, &qword_100162170, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001648D0);
  }
  return result;
}

uint64_t sub_1000E0EAC(uint64_t result)
{
  *(_BYTE *)(result + 169) = 1;
  return result;
}

unint64_t sub_1000E0EB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001620C8;
  if (!qword_1001620C8)
  {
    v1 = type metadata accessor for SlideTransition(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for SlideTransition, v1);
    atomic_store(result, (unint64_t *)&qword_1001620C8);
  }
  return result;
}

uint64_t sub_1000E0F00(uint64_t result)
{
  *(_BYTE *)(result + 169) = 0;
  return result;
}

uint64_t sub_1000E0F0C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for Artwork(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_release(*(_QWORD *)(v6 + v1[6] + 8));
  v10 = (_QWORD *)(v6 + v1[7]);
  v11 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

double sub_1000E1014()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Artwork(0) - 8) + 80);
  return sub_1000DF968(v0 + ((v1 + 16) & ~v1));
}

_QWORD *sub_1000E1040(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  v3 = a1[10];
  v4 = a1[17];
  v5 = a1[18];
  v6 = a1[19];
  v7 = a1[20];
  swift_retain(*a1);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  sub_1000075F4(v4, v5);
  sub_1000075F4(v6, v7);
  return a1;
}

void sub_1000E10B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if ((a22 & 1) != 0)
  {
    swift_retain(a1);
    swift_retain(a3);
  }
  else
  {
    swift_retain(a1);
    swift_bridgeObjectRetain(a5);
    swift_retain(a11);
    sub_1000075F4(a18, a19);
    sub_1000075F4(a20, a21);
  }
}

uint64_t sub_1000E1140(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 168);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    v4);
  return a1;
}

void sub_1000E11AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  swift_release(a1);
  if ((a22 & 1) != 0)
  {
    swift_release(a3);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release(a11);
    sub_100007604(a18, a19);
    sub_100007604(a20, a21);
  }
}

uint64_t *sub_1000E123C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = a1[17];
  v4 = a1[18];
  v5 = a1[19];
  v6 = a1[20];
  swift_release(a1[10]);
  swift_bridgeObjectRelease();
  swift_release(v2);
  sub_100007604(v3, v4);
  sub_100007604(v5, v6);
  return a1;
}

uint64_t sub_1000E12B4()
{
  uint64_t v0;

  return sub_1000DF9C4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000E12CC()
{
  return sub_100007D40(&qword_1001648F0, &qword_1001648F8, (uint64_t)&protocol conformance descriptor for AsyncImage<A>);
}

ValueMetadata *type metadata accessor for LoadingStateView()
{
  return &type metadata for LoadingStateView;
}

uint64_t sub_1000E130C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011BA4C, 1);
}

uint64_t sub_1000E131C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;

  v4 = *v2;
  v5 = v2[1];
  v6 = *((unsigned __int8 *)v2 + 16);
  v7 = v2[3];
  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0x4018000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  sub_100003E70(&qword_100164900);
  swift_bridgeObjectRetain(v5);
  v8 = swift_bridgeObjectRetain(v7);
  return ProgressView<>.init<>(_:)(v4, v5, v6, v7, v8);
}

unint64_t sub_1000E13A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164908;
  if (!qword_100164908)
  {
    v1 = sub_1000034AC(&qword_100164910);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100164908);
  }
  return result;
}

void sub_1000E13F0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v15[0] = "0";
  sub_100018CB8(319, qword_10015DD10, (uint64_t)&type metadata for CGFloat);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v15[1] = v4;
    sub_100018CB8(319, &qword_10015EF68, (uint64_t)&type metadata for Bool);
    if (v6 <= 0x3F)
    {
      v16 = *(_QWORD *)(v5 - 8) + 64;
      v17 = v16;
      v18 = v16;
      v19 = v4;
      sub_100071DB0(319, &qword_1001649D0, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
      if (v8 <= 0x3F)
      {
        v20 = *(_QWORD *)(v7 - 8) + 64;
        sub_100018CB8(319, &qword_10015DD08, (uint64_t)&type metadata for EdgeInsets);
        if (v10 <= 0x3F)
        {
          v21 = *(_QWORD *)(v9 - 8) + 64;
          v11 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
          if (v12 <= 0x3F)
          {
            v22 = *(_QWORD *)(v11 - 8) + 64;
            v23 = (char *)&value witness table for Builtin.NativeObject + 64;
            sub_100071DB0(319, &qword_1001630A0, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
            if (v14 <= 0x3F)
            {
              v24 = *(_QWORD *)(v13 - 8) + 64;
              swift_initClassMetadata2(a1, 0, 11, v15, a1 + 96);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1000E1564(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_1000E2A7C(a1);
  return v3;
}

double sub_1000E15A0()
{
  return sub_100016258((uint64_t)&unk_100113B98, (uint64_t)&unk_100113BD0);
}

uint64_t sub_1000E15B4(double a1)
{
  return sub_1000162F4((uint64_t)&unk_100113B98, (uint64_t)&unk_100113BD0, a1);
}

uint64_t sub_1000E15C8()
{
  return sub_1000E162C((uint64_t)&unk_1001139E0, (uint64_t)&unk_100113A18);
}

uint64_t sub_1000E15DC(char a1)
{
  return sub_1000E16C8(a1, (uint64_t)&unk_1001139E0, (uint64_t)&unk_100113A18);
}

uint64_t sub_1000E15F0()
{
  return sub_1000E162C((uint64_t)&unk_100113A38, (uint64_t)&unk_100113A70);
}

uint64_t sub_1000E1604(char a1)
{
  return sub_1000E16C8(a1, (uint64_t)&unk_100113A38, (uint64_t)&unk_100113A70);
}

uint64_t sub_1000E1618()
{
  return sub_1000E162C((uint64_t)&unk_100113988, (uint64_t)&unk_1001139C0);
}

uint64_t sub_1000E162C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  unsigned __int8 v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_1000E16B4(char a1)
{
  return sub_1000E16C8(a1, (uint64_t)&unk_100113988, (uint64_t)&unk_1001139C0);
}

uint64_t sub_1000E16C8(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  char v9;

  KeyPath = swift_getKeyPath(a2);
  v7 = swift_getKeyPath(a3);
  v9 = a1;
  swift_retain(v3);
  return static Published.subscript.setter(&v9, v3, KeyPath, v7);
}

double sub_1000E1754()
{
  return sub_100016258((uint64_t)&unk_100113B40, (uint64_t)&unk_100113B78);
}

uint64_t sub_1000E1768(double a1)
{
  return sub_1000162F4((uint64_t)&unk_100113B40, (uint64_t)&unk_100113B78, a1);
}

double sub_1000E177C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v4;

  KeyPath = swift_getKeyPath(&unk_100113AE8);
  v2 = swift_getKeyPath(&unk_100113B20);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1000E1804(double a1, double a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  KeyPath = swift_getKeyPath(&unk_100113AE8);
  v6 = swift_getKeyPath(&unk_100113B20);
  *(double *)v8 = a1;
  *(double *)&v8[1] = a2;
  swift_retain(v2);
  return static Published.subscript.setter(v8, v2, KeyPath, v6);
}

double sub_1000E1894()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v4;

  KeyPath = swift_getKeyPath(&unk_100113A90);
  v2 = swift_getKeyPath(&unk_100113AC8);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1000E1920(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v10;
  _QWORD v12[4];

  KeyPath = swift_getKeyPath(&unk_100113A90);
  v10 = swift_getKeyPath(&unk_100113AC8);
  *(double *)v12 = a1;
  *(double *)&v12[1] = a2;
  *(double *)&v12[2] = a3;
  *(double *)&v12[3] = a4;
  swift_retain(v4);
  return static Published.subscript.setter(v12, v4, KeyPath, v10);
}

uint64_t sub_1000E19C4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 88) + 152))(*(_QWORD *)(*(_QWORD *)v0 + 80));
}

uint64_t sub_1000E19F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v5 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v6 = type metadata accessor for Optional(0, v5);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v14 - v8;
  sub_1000E1B90();
  v10 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 160))(v2, v1);
  }
  else
  {
    v12 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v5, &unk_1001199D4, &unk_1001199DC);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 48))(v5, v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v5);
  }
  return v11;
}

uint64_t sub_1000E1B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  _QWORD v14[2];

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v1);
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v6 = (char *)v14 - v5;
  (*(void (**)(uint64_t, uint64_t))(v1 + 208))(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
  v14[1] = v8;
  v9 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v10 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v9, &unk_1001199D4, &unk_1001199DC);
  v11 = type metadata accessor for Set(0, v9, *(_QWORD *)(v10 + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v11);
  Collection.first.getter(v11, WitnessTable);
  return swift_bridgeObjectRelease(v8);
}

uint64_t sub_1000E1D18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v4, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v7 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v8 = type metadata accessor for Optional(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - v10;
  sub_1000E1B90();
  v12 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v13 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v7, &unk_1001199D4, &unk_1001199DC);
    v14 = swift_getAssociatedTypeWitness(0, v13);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
  else
  {
    v16 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v7, &unk_1001199D4, &unk_1001199DC);
    (*(void (**)(uint64_t, uint64_t))(v16 + 56))(v7, v16);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v11, v7);
  }
}

uint64_t sub_1000E1EE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v5 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v6 = type metadata accessor for Optional(0, v5);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v14 - v8;
  sub_1000E1B90();
  v10 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return 0;
  }
  else
  {
    v12 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v5, &unk_1001199D4, &unk_1001199DC);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 40))(v5, v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v5);
  }
  return v11;
}

uint64_t sub_1000E205C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);

  v1 = *v0;
  v3 = *(_QWORD *)(*v0 + 80);
  v2 = *(_QWORD *)(*v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2);
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = __chkstk_darwin(AssociatedTypeWitness);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v21 - v9;
  v11 = *(void (**)(uint64_t, uint64_t))(v2 + 208);
  v21 = (uint64_t)v0 + *(_QWORD *)(v1 + 160);
  v22 = v11;
  v11(v3, v2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v10, AssociatedTypeWitness);
  v15 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness);
  v16 = *(_QWORD *)(swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v15, &unk_1001199D4, &unk_1001199DC)+ 8);
  v17 = Set.count.getter(v13, v15, v16);
  swift_bridgeObjectRelease(v13);
  v22(v3, v2);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v14(v8, AssociatedTypeWitness);
  v19 = Set.count.getter(v18, v15, v16);
  result = swift_bridgeObjectRelease(v18);
  if (!__OFADD__(v17, v19))
    return v17 + v19 > 1;
  __break(1u);
  return result;
}

uint64_t sub_1000E2248()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;

  v1 = *v0;
  v3 = *(_QWORD *)(*v0 + 80);
  v2 = *(_QWORD *)(*v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2);
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v7 = (char *)v20 - v6;
  v8 = *(void (**)(uint64_t, uint64_t))(v2 + 208);
  v20[1] = (char *)v0 + *(_QWORD *)(v1 + 160);
  v21 = v8;
  v8(v3, v2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v20[0] = *(_QWORD *)(v5 + 8);
  ((void (*)(char *, uint64_t))v20[0])(v7, AssociatedTypeWitness);
  v22 = v10;
  v11 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness);
  v12 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v11, &unk_1001199D4, &unk_1001199DC);
  v13 = type metadata accessor for Set(0, v11, *(_QWORD *)(v12 + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v13);
  v15 = Array.init<A>(_:)(&v22, v11, v13, WitnessTable);
  v21(v3, v2);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
  ((void (*)(char *, uint64_t))v20[0])(v7, AssociatedTypeWitness);
  v22 = v16;
  v17 = Array.init<A>(_:)(&v22, v11, v13, WitnessTable);
  v18 = static Array.+ infix(_:_:)(v15, v17, v11);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v17);
  return v18;
}

uint64_t sub_1000E2454()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 88) + 176))(*(_QWORD *)(*(_QWORD *)v0 + 80));
}

uint64_t sub_1000E2484()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 88) + 168))(*(_QWORD *)(*(_QWORD *)v0 + 80));
}

uint64_t sub_1000E24B4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 88) + 184))(*(_QWORD *)(*(_QWORD *)v0 + 80));
}

BOOL sub_1000E24E4()
{
  BOOL v0;
  double v1;
  double v2;
  double v3;

  v0 = sub_1000E2538();
  v1 = -sub_1000E15A0();
  v2 = sub_1000E1754();
  v3 = 0.4;
  if (v0)
    v3 = 0.75;
  return v2 * v3 < v1;
}

BOOL sub_1000E2538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  unint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  id v21;
  id v22;
  _BYTE v24[24];

  v1 = type metadata accessor for UserInterfaceSizeClass(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v24[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = sub_100003E70(&qword_10015E040);
  __chkstk_darwin(v5);
  v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = sub_100003E70(&qword_10015D4A0);
  __chkstk_darwin(v8);
  v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v11);
  v13 = &v24[-v12 - 8];
  v14 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 176);
  swift_beginAccess(v14, v24, 0, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v13, enum case for UserInterfaceSizeClass.compact(_:), v1);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v2 + 56))(v13, 0, 1, v1);
  v15 = (uint64_t)&v7[*(int *)(v5 + 48)];
  sub_1000BADF4(v14, (uint64_t)v7);
  sub_1000BADF4((uint64_t)v13, v15);
  v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v16((uint64_t)v7, 1, v1) == 1)
  {
    sub_100008194((uint64_t)v13, &qword_10015D4A0);
    if (v16(v15, 1, v1) == 1)
    {
      sub_100008194((uint64_t)v7, &qword_10015D4A0);
      return 0;
    }
    goto LABEL_6;
  }
  sub_1000BADF4((uint64_t)v7, (uint64_t)v10);
  if (v16(v15, 1, v1) == 1)
  {
    sub_100008194((uint64_t)v13, &qword_10015D4A0);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v10, v1);
LABEL_6:
    sub_100008194((uint64_t)v7, &qword_10015E040);
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(v4, v15, v1);
  v17 = sub_1000E3B00();
  v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v4, v1, v17);
  v19 = *(void (**)(char *, uint64_t))(v2 + 8);
  v19(v4, v1);
  sub_100008194((uint64_t)v13, &qword_10015D4A0);
  v19(v10, v1);
  sub_100008194((uint64_t)v7, &qword_10015D4A0);
  if ((v18 & 1) != 0)
    return 0;
LABEL_9:
  v21 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v22 = objc_msgSend(v21, "userInterfaceIdiom");

  return v22 == 0;
}

_QWORD *sub_1000E2820()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[5];
  if (!v1)
    return _swiftEmptyArrayStorage;
  v2 = v0[3];
  if (!v2)
    return _swiftEmptyArrayStorage;
  v3 = v0[2];
  v4 = v0[4];
  v5 = v0[7];
  v6 = sub_100003E70(&qword_10015D3B0);
  v7 = type metadata accessor for URLQueryItem(0);
  v8 = swift_allocObject(v6, ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) | 7);
  *(_OWORD *)(v8 + 16) = xmmword_10010A6C0;
  v9 = qword_10015CEE0;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v1);
  if (v9 != -1)
    swift_once(&qword_10015CEE0, sub_1000D5D94);
  URLQueryItem.init(name:value:)(qword_100163F38, unk_100163F40, v3, v2);
  if (qword_10015CEE8 != -1)
    swift_once(&qword_10015CEE8, sub_1000D5DB4);
  URLQueryItem.init(name:value:)(qword_100163F48, unk_100163F50, v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (_QWORD *)v8;
}

uint64_t sub_1000E2990()
{
  _BOOL8 v0;
  unsigned int v2;
  uint64_t v3;
  int v4;

  v0 = sub_1000E2538();
  if (v0)
    return Edge.Set.init(_:)(2);
  v2 = static Edge.Set.all.getter(v0);
  v3 = Edge.Set.init(rawValue:)(0);
  v4 = Edge.Set.init(rawValue:)(v3);
  if (Edge.Set.init(rawValue:)(v4 & v2) == v2)
    return v3;
  else
    return Edge.Set.init(rawValue:)(v3 | v2);
}

double sub_1000E2A00()
{
  id v0;
  id v1;
  double result;
  double v3;
  double v4;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  result = sub_1000E177C() * 0.5;
  v4 = v3 * 0.85;
  if (!v1)
    return v4;
  return result;
}

_OWORD *sub_1000E2A7C(uint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t WitnessTable;
  char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t AssociatedConformanceWitness;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  _OWORD v76[3];

  v2 = v1;
  v70 = a1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v68 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v66 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v68);
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v72 = AssociatedTypeWitness;
  v75 = v5;
  __chkstk_darwin(AssociatedTypeWitness);
  v73 = (char *)&v60 - v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v68, v3, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v63 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v7 = type metadata accessor for Optional(0, v63);
  v60 = *(_QWORD *)(v7 - 8);
  v61 = v7;
  __chkstk_darwin(v7);
  v74 = (char *)&v60 - v8;
  v69 = sub_100003E70(&qword_10015D7E0);
  v67 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v65 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100003E70(&qword_10015D7E8);
  v62 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003E70(&qword_10015D7F0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003E70(&qword_10015D7F8);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = 0u;
  v1[3] = 0u;
  v1[1] = 0u;
  v20 = (char *)v1 + qword_100164918;
  *(_QWORD *)&v76[0] = 0;
  Published.init(initialValue:)(v76, &type metadata for CGFloat);
  v21 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v21(v20, v19, v16);
  v22 = (char *)v2 + qword_100164920;
  LOBYTE(v76[0]) = 0;
  Published.init(initialValue:)(v76, &type metadata for Bool);
  v23 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v23(v22, v15, v12);
  v24 = (char *)v2 + qword_100164928;
  LOBYTE(v76[0]) = 0;
  Published.init(initialValue:)(v76, &type metadata for Bool);
  v23(v24, v15, v12);
  v25 = (char *)v2 + qword_100164930;
  LOBYTE(v76[0]) = 0;
  Published.init(initialValue:)(v76, &type metadata for Bool);
  v26 = v15;
  v27 = v63;
  v23(v25, v26, v12);
  v28 = v66;
  v29 = (char *)v2 + qword_100164938;
  *(_QWORD *)&v76[0] = 0;
  Published.init(initialValue:)(v76, &type metadata for CGFloat);
  v30 = v19;
  v31 = v70;
  v21(v29, v30, v16);
  v32 = v68;
  v33 = (char *)v2 + qword_100164940;
  type metadata accessor for CGSize(0);
  v76[0] = 0uLL;
  Published.init(initialValue:)(v76, v34);
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v33, v11, v64);
  v35 = (char *)v2 + qword_100164948;
  memset(v76, 0, 32);
  v36 = v65;
  Published.init(initialValue:)(v76, &type metadata for EdgeInsets);
  (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v35, v36, v69);
  v37 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 + 176);
  v38 = type metadata accessor for UserInterfaceSizeClass(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v37, 1, 1, v38);
  v39 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 + 160);
  v69 = *(_QWORD *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v39, v31, v28);
  v40 = v73;
  (*(void (**)(uint64_t, uint64_t))(v32 + 208))(v28, v32);
  v42 = AssociatedConformanceWitness;
  v41 = v72;
  v43 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v72, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v40, v41);
  *(_QWORD *)&v76[0] = v43;
  v44 = swift_getAssociatedConformanceWitness(v42, v41, v27, &unk_1001199D4, &unk_1001199DC);
  v45 = type metadata accessor for Set(0, v27, *(_QWORD *)(v44 + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v45);
  v47 = v74;
  Collection.first.getter(v45, WitnessTable);
  swift_bridgeObjectRelease(v43);
  v48 = *(_QWORD *)(v27 - 8);
  v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48))(v47, 1, v27);
  if (v49 == 1)
  {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v47, v61);
    v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 152))(v28, v32);
    v52 = v53;
  }
  else
  {
    v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 40))(v27, v44);
    v52 = v51;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v27);
  }
  v54 = type metadata accessor for PromotionalAssetsController(0);
  v55 = swift_allocObject(v54, *(unsigned int *)(v54 + 48), *(unsigned __int16 *)(v54 + 52));
  v56 = v55 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  v57 = type metadata accessor for ArtistPromotionalAssets(0);
  v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v56, 1, 1, v57);
  *(_QWORD *)(v55 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error) = 0;
  *(_QWORD *)(v55 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  ObservationRegistrar.init()(v58);
  *(_QWORD *)(v55 + 16) = v50;
  *(_QWORD *)(v55 + 24) = v52;
  *(_BYTE *)(v55 + 32) = v49 != 1;
  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v31, v28);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 + 168)) = v55;
  return v2;
}

uint64_t sub_1000E3084()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void (*v3)(_BYTE *, _QWORD);
  BOOL *v4;
  _BYTE v6[32];

  KeyPath = swift_getKeyPath(&unk_1001139E0);
  v2 = swift_getKeyPath(&unk_100113A18);
  v3 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify(v6, v0, KeyPath, v2);
  *v4 = !*v4;
  v3(v6, 0);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_1000E3128()
{
  return sub_1000E16C8(1, (uint64_t)&unk_100113988, (uint64_t)&unk_1001139C0);
}

uint64_t sub_1000E3150()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[8] = v0;
  v1[9] = *v0;
  v2 = type metadata accessor for MainActor(0);
  v1[10] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[11] = v3;
  v1[12] = v4;
  return swift_task_switch(sub_1000E31C4, v3, v4);
}

uint64_t sub_1000E31C4()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(*(_QWORD *)(v0 + 72));
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v3 = objc_msgSend(v2, "bundleIdentifier");

  if (v3)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v5;

  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100163F78 + dword_100163F78);
  v7 = (_QWORD *)swift_task_alloc(unk_100163F7C);
  *(_QWORD *)(v0 + 104) = v7;
  *v7 = v0;
  v7[1] = sub_1000E32AC;
  return v9(v0 + 16, v4, v6);
}

uint64_t sub_1000E32AC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 104));
  return swift_task_switch(sub_1000E32F8, *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96));
}

uint64_t sub_1000E32F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v1 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 80));
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 56);
  v6 = *(_OWORD *)(v0 + 32);
  v5 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 32) = v6;
  *(_OWORD *)(v1 + 48) = v5;
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E3364()
{
  return sub_1000E16C8(0, (uint64_t)&unk_1001139E0, (uint64_t)&unk_100113A18);
}

uint64_t sub_1000E338C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 88) + 152))(*(_QWORD *)(*(_QWORD *)v1 + 80));
  sub_1000DADAC(v3, v4, 0, a1);
  return swift_bridgeObjectRelease();
}

void sub_1000E33D4(char a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  ValueWitnessTable *v23;
  uint64_t v24;
  char *v25;
  NSString v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  void **aBlock;
  uint64_t v32;
  Class (*v33)(uint64_t);
  ValueMetadata *v34;
  _QWORD *(*v35)();
  _QWORD *v36;
  char *v37;

  v11 = sub_100003E70(&qword_10015D3B8);
  v12 = swift_allocObject(v11, 192, 7);
  *(_OWORD *)(v12 + 16) = xmmword_10010A6D0;
  v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v5 + 88) + 152))(*(_QWORD *)(*(_QWORD *)v5 + 80));
  *(_QWORD *)(v12 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v12 + 64) = &off_100162E68;
  *(_BYTE *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = v13;
  *(_QWORD *)(v12 + 48) = v14;
  *(_QWORD *)(v12 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v12 + 104) = &off_100162E40;
  *(_BYTE *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v12 + 144) = &off_100162EC8;
  *(_BYTE *)(v12 + 112) = a1;
  *(_QWORD *)(v12 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v12 + 184) = &off_100162EA0;
  *(_QWORD *)(v12 + 152) = a2;
  *(_QWORD *)(v12 + 160) = a3;
  *(_BYTE *)(v12 + 168) = a4;
  v15 = *(_QWORD *)(a5 + 72);
  if (v15)
  {
    v16 = *(_QWORD *)(a5 + 64);
    v17 = *(_QWORD *)(a5 + 72);
  }
  else
  {
    v16 = 0;
    v17 = 0xE000000000000000;
  }
  v34 = &type metadata for AnalyticsString;
  v35 = (_QWORD *(*)())&off_100162E68;
  LOBYTE(aBlock) = 1;
  v32 = v16;
  v33 = (Class (*)(uint64_t))v17;
  sub_100005568(a2, a3, a4);
  v37 = (char *)v12;
  v18 = *(_QWORD *)(v12 + 16);
  v19 = *(_QWORD *)(v12 + 24);
  swift_bridgeObjectRetain(v15);
  if (v18 >= v19 >> 1)
    v37 = sub_1000F4CF4((char *)(v19 > 1), v18 + 1, 1, (char *)v12);
  v20 = sub_100005580((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v20);
  v22 = (char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v23->initializeWithCopy)((uint64_t)v22, v24);
  sub_1000DAD34(v18, (uint64_t)v22, (uint64_t *)&v37, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_100162E68);
  sub_1000055A8(&aBlock);
  v25 = v37;
  v26 = String._bridgeToObjectiveC()();
  v27 = (_QWORD *)swift_allocObject(&unk_1001540D0, 40, 7);
  v27[2] = 0xD00000000000001ELL;
  v27[3] = 0x80000001001150B0;
  v27[4] = v25;
  v35 = sub_1000DAFE0;
  v36 = v27;
  aBlock = _NSConcreteStackBlock;
  v32 = 1107296256;
  v33 = sub_1000DACC0;
  v34 = (ValueMetadata *)&unk_1001540E8;
  v28 = _Block_copy(&aBlock);
  v29 = v36;
  swift_bridgeObjectRetain(v25);
  swift_release(v29);
  AnalyticsSendEventLazy(v26, v28);
  _Block_release(v28);
  swift_bridgeObjectRelease();

}

uint64_t *sub_1000E3678()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = (uint64_t)v0 + qword_100164918;
  v3 = sub_100003E70(&qword_10015D7F8);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(v2, v3);
  v5 = (uint64_t)v0 + qword_100164920;
  v6 = sub_100003E70(&qword_10015D7F0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v7((uint64_t)v0 + qword_100164928, v6);
  v7((uint64_t)v0 + qword_100164930, v6);
  v4((uint64_t)v0 + qword_100164938, v3);
  v8 = (uint64_t)v0 + qword_100164940;
  v9 = sub_100003E70(&qword_10015D7E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = (uint64_t)v0 + qword_100164948;
  v11 = sub_100003E70(&qword_10015D7E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 160));
  swift_release(*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 168)));
  sub_100008194((uint64_t)v0 + *(_QWORD *)(*v0 + 176), &qword_10015D4A0);
  return v0;
}

uint64_t sub_1000E3808()
{
  uint64_t v0;

  sub_1000E3678();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for EventViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventViewModel);
}

void sub_1000E3838(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = sub_1000E1894();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

uint64_t sub_1000E3864(double *a1)
{
  return sub_1000E1920(*a1, a1[1], a1[2], a1[3]);
}

_QWORD *sub_1000E388C(uint64_t a1)
{
  return sub_1000DB2E4(*(_QWORD *)(a1 + 16));
}

uint64_t sub_1000E3894()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000E38C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E38D0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000E38D8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;

  sub_1000A3BEC();
  if (v0)
  {
    v1 = v0;
    if (*(_QWORD *)(v0 + 16))
    {
      v2 = sub_100090600(1);
      if ((v3 & 1) != 0)
      {
        v4 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 56) + v2);
        swift_bridgeObjectRelease();
        __asm { BR              X9 }
      }
    }
    swift_bridgeObjectRelease();
  }
  return 1;
}

void sub_1000E397C()
{
  JUMPOUT(0x1000E3990);
}

void sub_1000E39C0()
{
  swift_bridgeObjectRelease(0xE600000000000000);
  JUMPOUT(0x1000E3968);
}

uint64_t sub_1000E39D8()
{
  return 16;
}

__n128 sub_1000E39E4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000E39F8()
{
  return 16;
}

__n128 sub_1000E3A04(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000E3A18()
{
  return 16;
}

__n128 sub_1000E3A24(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1000E3A30(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = sub_1000E1894();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

uint64_t sub_1000E3A5C(double *a1)
{
  return sub_1000E1920(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1000E3A84()
{
  return 16;
}

__n128 sub_1000E3A90(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1000E3A9C(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(double *)a1 = sub_1000E177C();
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_1000E3AC4(double *a1)
{
  return sub_1000E1804(*a1, a1[1]);
}

uint64_t sub_1000E3AE8()
{
  return 16;
}

__n128 sub_1000E3AF4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_1000E3B00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E0D0;
  if (!qword_10015E0D0)
  {
    v1 = type metadata accessor for UserInterfaceSizeClass(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UserInterfaceSizeClass, v1);
    atomic_store(result, (unint64_t *)&qword_10015E0D0);
  }
  return result;
}

uint64_t sub_1000E3B50()
{
  return 16;
}

__n128 sub_1000E3B5C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000E3B70()
{
  return 16;
}

__n128 sub_1000E3B7C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000E3B88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_1000E3BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v14 - v11, a1, a2);
  swift_storeEnumTagMultiPayload(v12, v10, 0);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_1000E3C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v14 - v11, a1, a3);
  swift_storeEnumTagMultiPayload(v12, v10, 1);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

_QWORD *sub_1000E3D2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _QWORD v15[4];

  v1 = v0;
  v2 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003E70(&qword_10015EEC0);
  __chkstk_darwin(v6);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[2] = &type metadata for AppleMusicFetcher;
  v9 = sub_1000F0B60();
  v15[3] = v9;
  KeyPath = swift_getKeyPath(&unk_100113D60);
  v15[0] = &type metadata for AppleMusicFetcher;
  v15[1] = v9;
  v11 = swift_getKeyPath(&unk_100113D98);
  static Published.subscript.getter(v1, KeyPath, v11);
  swift_release(KeyPath);
  v12 = swift_release(v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v3 + 48))(v8, 1, v2, v12))
  {
    sub_100008194((uint64_t)v8, &qword_10015EEC0);
    return _swiftEmptyArrayStorage;
  }
  else
  {
    sub_100028390((uint64_t)v8, (uint64_t)v5, type metadata accessor for AppleMusicFetcher.MusicArtist);
    sub_100008194((uint64_t)v8, &qword_10015EEC0);
    v13 = *((_QWORD *)v5 + 4);
    swift_bridgeObjectRetain(v13);
    sub_1000283D4((uint64_t)v5, type metadata accessor for AppleMusicFetcher.MusicArtist);
  }
  return (_QWORD *)v13;
}

uint64_t sub_1000E3EB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _QWORD v17[4];

  v2 = v1;
  v4 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003E70(&qword_10015EEC0);
  __chkstk_darwin(v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[2] = &type metadata for AppleMusicFetcher;
  v11 = sub_1000F0B60();
  v17[3] = v11;
  KeyPath = swift_getKeyPath(&unk_100113D60);
  v17[0] = &type metadata for AppleMusicFetcher;
  v17[1] = v11;
  v13 = swift_getKeyPath(&unk_100113D98);
  static Published.subscript.getter(v2, KeyPath, v13);
  swift_release(KeyPath);
  v14 = swift_release(v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v5 + 48))(v10, 1, v4, v14))
  {
    sub_100008194((uint64_t)v10, &qword_10015EEC0);
    v15 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 1, 1, v15);
  }
  else
  {
    sub_100028390((uint64_t)v10, (uint64_t)v7, type metadata accessor for AppleMusicFetcher.MusicArtist);
    sub_100008194((uint64_t)v10, &qword_10015EEC0);
    sub_100007ADC((uint64_t)&v7[*(int *)(v4 + 32)], a1, &qword_100165370);
    return sub_1000283D4((uint64_t)v7, type metadata accessor for AppleMusicFetcher.MusicArtist);
  }
}

uint64_t sub_1000E4074(uint64_t *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;

  v1 = *a1;
  KeyPath = swift_getKeyPath(&unk_100113D60);
  v3 = swift_getKeyPath(&unk_100113D98);
  static Published.subscript.getter(v1, KeyPath, v3);
  swift_release(KeyPath);
  return swift_release(v3);
}

uint64_t sub_1000E4108(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  _QWORD v21[4];

  v6 = *(_QWORD *)(a4 + a3 - 16);
  v7 = *(_QWORD *)(a4 + a3 - 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7);
  v9 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)v21 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16((char *)v21 - v14, a1, v9);
  v17 = *a2;
  v21[2] = v6;
  v21[3] = v7;
  KeyPath = swift_getKeyPath(&unk_100113D60);
  v21[0] = v6;
  v21[1] = v7;
  v19 = swift_getKeyPath(&unk_100113D98);
  v16(v13, (uint64_t)v15, v9);
  swift_retain(v17);
  static Published.subscript.setter(v13, v17, KeyPath, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
}

uint64_t sub_1000E4254(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_100003E70(&qword_10015EEC0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v4);
  v3[12] = swift_task_alloc(v4);
  v5 = type metadata accessor for MainActor(0);
  v3[13] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v3[14] = v6;
  v3[15] = v7;
  return swift_task_switch(sub_1000E42F8, v6, v7);
}

uint64_t sub_1000E42F8()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_10015FA94);
  v0[16] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1000E4348;
  return sub_100050AD8(v0[12], v0[8], v0[9]);
}

uint64_t sub_1000E4348()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000E44B0;
  else
    v4 = sub_1000E43A8;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120));
}

uint64_t sub_1000E43A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t KeyPath;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 104));
  v4 = (_QWORD *)swift_task_alloc(16);
  *v4 = &type metadata for AppleMusicFetcher;
  v5 = sub_1000F0B60();
  v4[1] = v5;
  KeyPath = swift_getKeyPath(&unk_100113D60);
  swift_task_dealloc(v4);
  v7 = (_QWORD *)swift_task_alloc(16);
  *v7 = &type metadata for AppleMusicFetcher;
  v7[1] = v5;
  v8 = swift_getKeyPath(&unk_100113D98);
  swift_task_dealloc(v7);
  sub_100007ADC(v1, v2, &qword_10015EEC0);
  swift_retain(v3);
  static Published.subscript.setter(v2, v3, KeyPath, v8);
  sub_100008194(v1, &qword_10015EEC0);
  v9 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E44B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  swift_release(*(_QWORD *)(v0 + 104));
  if (qword_10015CF60 != -1)
    swift_once(&qword_10015CF60, sub_100105E80);
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = type metadata accessor for Logger(0);
  sub_100011AC4(v3, (uint64_t)qword_10016F728);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 72);
  if (v7)
  {
    v10 = *(_QWORD *)(v0 + 64);
    v11 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(64, -1);
    v17 = v16;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 40) = sub_1000C7684(v10, v9, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v9, 3);
    *(_WORD *)(v11 + 12) = 2080;
    swift_getErrorValue(v8, v0 + 48, v0 + 16);
    v12 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 56) = sub_1000C7684(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease();
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to fetch artist with id %s. Error: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 136));
    swift_bridgeObjectRelease_n(v9, 2);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  v14 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E472C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for Optional(0, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, a1, v5);
}

uint64_t sub_1000E4768(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v4 = a1;
  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    __chkstk_darwin(a1);
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *v4++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return TupleView.init(_:)(v8, TupleTypeMetadata);
  }
  __chkstk_darwin(a1);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata(0, a2);
  __chkstk_darwin(TupleTypeMetadata);
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return TupleView.init(_:)(v8, TupleTypeMetadata);
}

uint64_t sub_1000E491C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  *(_QWORD *)a7 = sub_1000E69E4(a1, a2, a5, a6);
  *(_QWORD *)(a7 + 8) = v12;
  *(_BYTE *)(a7 + 16) = v13 & 1;
  *(_QWORD *)(a7 + 24) = a3;
  *(_QWORD *)(a7 + 32) = a4;
  *(_BYTE *)(a7 + 40) = 0;
  *(_QWORD *)(a7 + 48) = sub_100086AD8(0);
  *(_QWORD *)(a7 + 56) = v14;
  *(_QWORD *)(a7 + 64) = 0;
  v15 = type metadata accessor for RemoteViewConfiguration();
  v16 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
  *(_QWORD *)(a7 + 72) = EnvironmentObject.init()(v15, v16);
  *(_QWORD *)(a7 + 80) = v17;
  v19 = (int *)type metadata accessor for EventView(0, a5, a6, v18);
  v20 = (_QWORD *)(a7 + v19[13]);
  *v20 = swift_getKeyPath(&unk_100113F18);
  v21 = sub_100003E70(&qword_10015D488);
  swift_storeEnumTagMultiPayload(v20, v21, 0);
  v22 = (_QWORD *)(a7 + v19[14]);
  *v22 = swift_getKeyPath(&unk_100113EB8);
  v23 = sub_100003E70(&qword_10015D490);
  swift_storeEnumTagMultiPayload(v22, v23, 0);
  v24 = (_QWORD *)(a7 + v19[15]);
  *v24 = swift_getKeyPath(&unk_100113F48);
  v25 = sub_100003E70(&qword_10015D498);
  return swift_storeEnumTagMultiPayload(v24, v25, 0);
}

double sub_1000E4A6C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000E4E8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10015E828, &qword_10015E818).n128_u64[0];
  return result;
}

uint64_t sub_1000E4AC4@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  _OWORD v43[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v42 = a7;
    v40 = a1;
    v41 = a5;
    v39 = a3;
    v38 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v38;
    v19 = a10;
    a3 = v39;
    a1 = v40;
    a5 = v41;
    v18 = a12;
    a7 = v42;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v43, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v43[2];
  *(_OWORD *)(a9 + 56) = v43[3];
  v35 = v43[5];
  *(_OWORD *)(a9 + 72) = v43[4];
  *(_OWORD *)(a9 + 88) = v35;
  *(_OWORD *)(a9 + 104) = v43[6];
  v36 = v43[1];
  *(_OWORD *)(a9 + 8) = v43[0];
  *(_OWORD *)(a9 + 24) = v36;
  *(_QWORD *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v34;
  return swift_retain(a16);
}

uint64_t sub_1000E4C6C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unsigned int v42;
  double v43;
  double v44;
  double v45;
  double v46;
  _OWORD v47[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v46 = a7;
    v44 = a1;
    v45 = a5;
    v43 = a3;
    v42 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v19 = a10;
    v20 = v42;
    a3 = v43;
    a1 = v44;
    a5 = v45;
    v18 = a12;
    a7 = v46;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v47, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v15 + 96);
  *(_OWORD *)(a9 + 112) = v34;
  v35 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v35;
  v36 = *(_OWORD *)(v15 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v15 + 64);
  *(_OWORD *)(a9 + 80) = v36;
  v37 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v37;
  v38 = v47[2];
  *(_OWORD *)(a9 + 184) = v47[3];
  v39 = v47[5];
  *(_OWORD *)(a9 + 200) = v47[4];
  *(_OWORD *)(a9 + 216) = v39;
  *(_OWORD *)(a9 + 232) = v47[6];
  v40 = v47[1];
  *(_OWORD *)(a9 + 136) = v47[0];
  *(_OWORD *)(a9 + 152) = v40;
  *(_BYTE *)(a9 + 128) = *(_BYTE *)(v15 + 128);
  *(_OWORD *)(a9 + 168) = v38;
  return sub_100036EA0(v15);
}

double sub_1000E4E34@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000E4E8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10015F748, &qword_10015F750).n128_u64[0];
  return result;
}

__n128 sub_1000E4E8C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = v17;
  v19 = a9;
  v20 = a17;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((_DWORD)v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v49 = a5;
    v50 = a7;
    v47 = a3;
    v48 = a1;
    v46 = v25;
    v45 = v27;
    v38 = static os_log_type_t.fault.getter();
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v27 = v45;
    v22 = a14;
    v21 = a15;
    v25 = v46;
    v24 = a10;
    v23 = a12;
    a3 = v47;
    a1 = v48;
    a5 = v49;
    a7 = v50;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  sub_100007ADC(v18, v19, a16);
  v41 = v19 + *(int *)(sub_100003E70(v20) + 36);
  v42 = v51[5];
  *(_OWORD *)(v41 + 64) = v51[4];
  *(_OWORD *)(v41 + 80) = v42;
  *(_OWORD *)(v41 + 96) = v51[6];
  v43 = v51[1];
  *(_OWORD *)v41 = v51[0];
  *(_OWORD *)(v41 + 16) = v43;
  result = (__n128)v51[3];
  *(_OWORD *)(v41 + 32) = v51[2];
  *(__n128 *)(v41 + 48) = result;
  return result;
}

uint64_t sub_1000E5058@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a7;
    v42 = a1;
    v43 = a5;
    v41 = a3;
    v40 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v19 = a10;
    v20 = v40;
    a3 = v41;
    a1 = v42;
    a5 = v43;
    v18 = a12;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v34;
  v35 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v35;
  v36 = v45[2];
  *(_OWORD *)(a9 + 120) = v45[3];
  v37 = v45[5];
  *(_OWORD *)(a9 + 136) = v45[4];
  *(_OWORD *)(a9 + 152) = v37;
  *(_OWORD *)(a9 + 168) = v45[6];
  v38 = v45[1];
  *(_OWORD *)(a9 + 72) = v45[0];
  *(_OWORD *)(a9 + 88) = v38;
  *(_BYTE *)(a9 + 64) = *(_BYTE *)(v15 + 64);
  *(_OWORD *)(a9 + 104) = v36;
  return sub_10005D438(v15);
}

uint64_t sub_1000E5210@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  _OWORD *v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unsigned int v39;
  unint64_t v40;
  double v41;
  double v42;
  unint64_t v43;
  _OWORD v44[7];

  v18 = a16;
  v19 = a13;
  v20 = a11;
  v21 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v21)
    a10.n128_f64[0] = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = a10.n128_f64[0];
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (a10.n128_f64[0] > v23 || v23 > v26)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v28 = a11;
  if ((a12 & 1) != 0)
    v28 = a10.n128_f64[0];
  v29 = a13;
  if ((a14 & 1) != 0)
    v29 = v28;
  if (a10.n128_f64[0] > v28 || v28 > v29)
  {
LABEL_22:
    v42 = a5;
    v43 = a7;
    v41 = a3;
    v40 = a1;
    v39 = v21;
    v31 = static os_log_type_t.fault.getter(a10);
    v32 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v18 = a16;
    v21 = v39;
    v20 = a11;
    a1 = v40;
    a3 = v41;
    v19 = a13;
    a5 = v42;
    a7 = v43;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, a1, v21, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, a7, v25, *(_QWORD *)&v20, a12 & 1, *(_QWORD *)&v19, a14 & 1, a15, v18);
  v33 = v16[3];
  a9[2] = v16[2];
  a9[3] = v33;
  *(_OWORD *)((char *)a9 + 57) = *(_OWORD *)((char *)v16 + 57);
  v34 = v16[1];
  *a9 = *v16;
  a9[1] = v34;
  v35 = v44[5];
  a9[9] = v44[4];
  a9[10] = v35;
  a9[11] = v44[6];
  v36 = v44[1];
  a9[5] = v44[0];
  a9[6] = v36;
  v37 = v44[3];
  a9[7] = v44[2];
  a9[8] = v37;
  return sub_1000F2420((uint64_t)v16);
}

double sub_1000E53BC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000E4E8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001606A0, &qword_1001606A8).n128_u64[0];
  return result;
}

double sub_1000E5414@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000E4E8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001606D8, &qword_1001606C0).n128_u64[0];
  return result;
}

double sub_1000E546C@<D0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  double v34;
  double v36;
  double v37;
  uint64_t v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  double result;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  double v48;
  unint64_t v49;
  double v50;
  _OWORD v51[7];

  v21 = a20;
  v22 = a19;
  v23 = a18;
  v25 = a15;
  v24 = a16;
  v26 = a13;
  v27 = a11;
  v28 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v28)
    a10.n128_f64[0] = -INFINITY;
  v29 = a4 & 1;
  v30 = a3;
  if ((_DWORD)v29)
    v30 = a10.n128_f64[0];
  v31 = a6 & 1;
  v32 = a8 & 1;
  v33 = a14 & 1;
  v34 = a5;
  if ((a6 & 1) != 0)
    v34 = v30;
  if (a10.n128_f64[0] > v30 || v30 > v34)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v36 = a11;
  if ((a12 & 1) != 0)
    v36 = a10.n128_f64[0];
  v37 = a13;
  if ((a14 & 1) != 0)
    v37 = v36;
  if (a10.n128_f64[0] > v36 || v36 > v37)
  {
LABEL_22:
    v49 = a7;
    v50 = a5;
    v47 = a1;
    v48 = a3;
    v46 = v28;
    v45 = v29;
    v39 = static os_log_type_t.fault.getter(a10);
    v40 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v33 = a14 & 1;
    v29 = v45;
    v25 = a15;
    v24 = a16;
    v28 = v46;
    v27 = a11;
    v26 = a13;
    a1 = v47;
    a3 = v48;
    a7 = v49;
    a5 = v50;
    v22 = a19;
    v21 = a20;
    v23 = a18;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, a1, v28, *(_QWORD *)&a3, v29, *(_QWORD *)&a5, v31, a7, v32, *(_QWORD *)&v27, a12 & 1, *(_QWORD *)&v26, v33, v25, v24);
  *(_QWORD *)a9 = a17;
  *(_QWORD *)(a9 + 8) = v23;
  *(_BYTE *)(a9 + 16) = v22 & 1;
  *(_QWORD *)(a9 + 24) = v21;
  v41 = v51[5];
  *(_OWORD *)(a9 + 96) = v51[4];
  *(_OWORD *)(a9 + 112) = v41;
  *(_OWORD *)(a9 + 128) = v51[6];
  v42 = v51[1];
  *(_OWORD *)(a9 + 32) = v51[0];
  *(_OWORD *)(a9 + 48) = v42;
  v43 = v51[3];
  *(_OWORD *)(a9 + 64) = v51[2];
  *(_OWORD *)(a9 + 80) = v43;
  sub_10000C008(a17, v23, v22 & 1);
  *(_QWORD *)&result = swift_bridgeObjectRetain(v21).n128_u64[0];
  return result;
}

double sub_1000E564C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000E4E8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001611D0, &qword_1001611D8).n128_u64[0];
  return result;
}

uint64_t sub_1000E56A4@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned int v41;
  unint64_t v42;
  double v43;
  double v44;
  unint64_t v45;
  _OWORD v46[7];

  v18 = a16;
  v19 = a13;
  v20 = a11;
  v21 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v21)
    a10.n128_f64[0] = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = a10.n128_f64[0];
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (a10.n128_f64[0] > v23 || v23 > v26)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v28 = a11;
  if ((a12 & 1) != 0)
    v28 = a10.n128_f64[0];
  v29 = a13;
  if ((a14 & 1) != 0)
    v29 = v28;
  if (a10.n128_f64[0] > v28 || v28 > v29)
  {
LABEL_22:
    v44 = a5;
    v45 = a7;
    v43 = a3;
    v42 = a1;
    v41 = v21;
    v31 = static os_log_type_t.fault.getter(a10);
    v32 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a16;
    v21 = v41;
    v20 = a11;
    a1 = v42;
    a3 = v43;
    v19 = a13;
    a5 = v44;
    a7 = v45;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v46, a1, v21, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, a7, v25, *(_QWORD *)&v20, a12 & 1, *(_QWORD *)&v19, a14 & 1, a15, v18);
  v33 = *(_OWORD *)(v16 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v16 + 64);
  *(_OWORD *)(a9 + 80) = v33;
  *(_BYTE *)(a9 + 96) = *(_BYTE *)(v16 + 96);
  v34 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v16;
  *(_OWORD *)(a9 + 16) = v34;
  v35 = *(_OWORD *)(v16 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v16 + 32);
  *(_OWORD *)(a9 + 48) = v35;
  v36 = v46[1];
  *(_OWORD *)(a9 + 104) = v46[0];
  *(_OWORD *)(a9 + 120) = v36;
  v37 = v46[3];
  *(_OWORD *)(a9 + 136) = v46[2];
  v38 = v46[4];
  v39 = v46[5];
  *(_OWORD *)(a9 + 200) = v46[6];
  *(_OWORD *)(a9 + 184) = v39;
  *(_OWORD *)(a9 + 168) = v38;
  *(_OWORD *)(a9 + 152) = v37;
  return sub_1000F2530(v16);
}

double sub_1000E5864@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000E4E8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001620B8, &qword_100162140).n128_u64[0];
  return result;
}

_QWORD *sub_1000E58BC@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unsigned int v43;
  double v44;
  unint64_t v45;
  double v46;
  unint64_t v47;
  _OWORD v48[7];

  v18 = a16;
  v19 = a13;
  v20 = a11;
  v21 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v21)
    a10.n128_f64[0] = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = a10.n128_f64[0];
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (a10.n128_f64[0] > v23 || v23 > v26)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v28 = a11;
  if ((a12 & 1) != 0)
    v28 = a10.n128_f64[0];
  v29 = a13;
  if ((a14 & 1) != 0)
    v29 = v28;
  if (a10.n128_f64[0] > v28 || v28 > v29)
  {
LABEL_22:
    v47 = a7;
    v45 = a1;
    v46 = a5;
    v44 = a3;
    v43 = v21;
    v31 = static os_log_type_t.fault.getter(a10);
    v32 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a16;
    v20 = a11;
    v21 = v43;
    a3 = v44;
    a1 = v45;
    a5 = v46;
    v19 = a13;
    a7 = v47;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v48, a1, v21, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, a7, v25, *(_QWORD *)&v20, a12 & 1, *(_QWORD *)&v19, a14 & 1, a15, v18);
  v33 = *(_OWORD *)(v16 + 144);
  *(_OWORD *)(a9 + 128) = *(_OWORD *)(v16 + 128);
  *(_OWORD *)(a9 + 144) = v33;
  *(_OWORD *)(a9 + 160) = *(_OWORD *)(v16 + 160);
  v34 = *(_OWORD *)(v16 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v16 + 64);
  *(_OWORD *)(a9 + 80) = v34;
  v35 = *(_OWORD *)(v16 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v16 + 96);
  *(_OWORD *)(a9 + 112) = v35;
  v36 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v16;
  *(_OWORD *)(a9 + 16) = v36;
  v37 = *(_OWORD *)(v16 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v16 + 32);
  *(_OWORD *)(a9 + 48) = v37;
  v38 = v48[2];
  *(_OWORD *)(a9 + 232) = v48[3];
  v39 = v48[5];
  *(_OWORD *)(a9 + 248) = v48[4];
  v40 = v48[6];
  *(_OWORD *)(a9 + 264) = v39;
  *(_OWORD *)(a9 + 280) = v40;
  v41 = v48[1];
  *(_OWORD *)(a9 + 184) = v48[0];
  *(_OWORD *)(a9 + 200) = v41;
  *(_BYTE *)(a9 + 176) = *(_BYTE *)(v16 + 176);
  *(_OWORD *)(a9 + 216) = v38;
  return sub_1000F245C((_QWORD *)v16);
}

double sub_1000E5A94@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000E4E8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100162D18, &qword_100162D20).n128_u64[0];
  return result;
}

_QWORD *sub_1000E5AEC@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unsigned int v42;
  unint64_t v43;
  double v44;
  double v45;
  unint64_t v46;
  _OWORD v47[7];

  v18 = a16;
  v19 = a13;
  v20 = a11;
  v21 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v21)
    a10.n128_f64[0] = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = a10.n128_f64[0];
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (a10.n128_f64[0] > v23 || v23 > v26)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v28 = a11;
  if ((a12 & 1) != 0)
    v28 = a10.n128_f64[0];
  v29 = a13;
  if ((a14 & 1) != 0)
    v29 = v28;
  if (a10.n128_f64[0] > v28 || v28 > v29)
  {
LABEL_22:
    v45 = a5;
    v46 = a7;
    v44 = a3;
    v43 = a1;
    v42 = v21;
    v31 = static os_log_type_t.fault.getter(a10);
    v32 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a16;
    v21 = v42;
    v20 = a11;
    a1 = v43;
    a3 = v44;
    v19 = a13;
    a5 = v45;
    a7 = v46;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v47, a1, v21, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, a7, v25, *(_QWORD *)&v20, a12 & 1, *(_QWORD *)&v19, a14 & 1, a15, v18);
  v33 = *(_OWORD *)(v16 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v16 + 64);
  *(_OWORD *)(a9 + 80) = v33;
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v16 + 96);
  *(_QWORD *)(a9 + 112) = *(_QWORD *)(v16 + 112);
  v34 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v16;
  *(_OWORD *)(a9 + 16) = v34;
  v35 = *(_OWORD *)(v16 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v16 + 32);
  *(_OWORD *)(a9 + 48) = v35;
  v36 = v47[0];
  v37 = v47[1];
  v38 = v47[3];
  *(_OWORD *)(a9 + 152) = v47[2];
  *(_OWORD *)(a9 + 136) = v37;
  *(_OWORD *)(a9 + 120) = v36;
  v39 = v47[4];
  v40 = v47[5];
  *(_OWORD *)(a9 + 216) = v47[6];
  *(_OWORD *)(a9 + 200) = v40;
  *(_OWORD *)(a9 + 184) = v39;
  *(_OWORD *)(a9 + 168) = v38;
  return sub_10000E40C((_QWORD *)v16);
}

uint64_t sub_1000E5CB4@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unsigned int v39;
  double v40;
  unint64_t v41;
  double v42;
  unint64_t v43;
  _OWORD v44[7];

  v18 = a16;
  v19 = a13;
  v20 = a11;
  v21 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v21)
    a10.n128_f64[0] = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = a10.n128_f64[0];
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (a10.n128_f64[0] > v23 || v23 > v26)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v28 = a11;
  if ((a12 & 1) != 0)
    v28 = a10.n128_f64[0];
  v29 = a13;
  if ((a14 & 1) != 0)
    v29 = v28;
  if (a10.n128_f64[0] > v28 || v28 > v29)
  {
LABEL_22:
    v43 = a7;
    v41 = a1;
    v42 = a5;
    v40 = a3;
    v39 = v21;
    v31 = static os_log_type_t.fault.getter(a10);
    v32 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a16;
    v20 = a11;
    v21 = v39;
    a3 = v40;
    a1 = v41;
    a5 = v42;
    v19 = a13;
    a7 = v43;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, a1, v21, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, a7, v25, *(_QWORD *)&v20, a12 & 1, *(_QWORD *)&v19, a14 & 1, a15, v18);
  v33 = *(_OWORD *)(v16 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v16 + 32);
  *(_OWORD *)(a9 + 48) = v33;
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v16 + 64);
  v34 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v16;
  *(_OWORD *)(a9 + 16) = v34;
  v35 = v44[2];
  *(_OWORD *)(a9 + 136) = v44[3];
  v36 = v44[5];
  *(_OWORD *)(a9 + 152) = v44[4];
  *(_OWORD *)(a9 + 168) = v36;
  *(_OWORD *)(a9 + 184) = v44[6];
  v37 = v44[1];
  *(_OWORD *)(a9 + 88) = v44[0];
  *(_OWORD *)(a9 + 104) = v37;
  *(_QWORD *)(a9 + 80) = *(_QWORD *)(v16 + 80);
  *(_OWORD *)(a9 + 120) = v35;
  return sub_1000B47AC(v16);
}

_QWORD *sub_1000E5E74@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unsigned int v47;
  double v48;
  unint64_t v49;
  double v50;
  unint64_t v51;
  _OWORD v52[7];

  v18 = a16;
  v19 = a13;
  v20 = a11;
  v21 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v21)
    a10.n128_f64[0] = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = a10.n128_f64[0];
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (a10.n128_f64[0] > v23 || v23 > v26)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v28 = a11;
  if ((a12 & 1) != 0)
    v28 = a10.n128_f64[0];
  v29 = a13;
  if ((a14 & 1) != 0)
    v29 = v28;
  if (a10.n128_f64[0] > v28 || v28 > v29)
  {
LABEL_22:
    v51 = a7;
    v49 = a1;
    v50 = a5;
    v48 = a3;
    v47 = v21;
    v31 = static os_log_type_t.fault.getter(a10);
    v32 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a16;
    v20 = a11;
    v21 = v47;
    a3 = v48;
    a1 = v49;
    a5 = v50;
    v19 = a13;
    a7 = v51;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v52, a1, v21, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, a7, v25, *(_QWORD *)&v20, a12 & 1, *(_QWORD *)&v19, a14 & 1, a15, v18);
  v33 = *(_OWORD *)(v16 + 176);
  a9[10] = *(_OWORD *)(v16 + 160);
  a9[11] = v33;
  v34 = *(_OWORD *)(v16 + 192);
  v35 = *(_OWORD *)(v16 + 112);
  a9[6] = *(_OWORD *)(v16 + 96);
  a9[7] = v35;
  v36 = *(_OWORD *)(v16 + 144);
  a9[8] = *(_OWORD *)(v16 + 128);
  a9[9] = v36;
  v37 = *(_OWORD *)(v16 + 48);
  a9[2] = *(_OWORD *)(v16 + 32);
  a9[3] = v37;
  v38 = *(_OWORD *)(v16 + 80);
  a9[4] = *(_OWORD *)(v16 + 64);
  a9[5] = v38;
  v39 = *(_OWORD *)(v16 + 16);
  *a9 = *(_OWORD *)v16;
  a9[1] = v39;
  v40 = v52[4];
  v41 = v52[5];
  v42 = v52[2];
  a9[16] = v52[3];
  a9[17] = v40;
  v43 = v52[6];
  a9[18] = v41;
  a9[19] = v43;
  v44 = v52[0];
  v45 = v52[1];
  a9[12] = v34;
  a9[13] = v44;
  a9[14] = v45;
  a9[15] = v42;
  return sub_1000F23A8((_QWORD *)v16);
}

uint64_t sub_1000E603C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int16 a19)
{
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v35;
  double v36;
  double v37;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  double v49;
  double v50;
  double v51;
  double v52;
  _OWORD v53[7];

  v20 = a19;
  v21 = a17;
  v22 = a15;
  v23 = a16;
  v24 = a14;
  v25 = a12;
  v26 = a10;
  v27 = a2 & 1;
  v28 = a1;
  if ((_DWORD)v27)
    v28 = -INFINITY;
  v29 = a4 & 1;
  v30 = a3;
  if ((_DWORD)v29)
    v30 = v28;
  v31 = a6 & 1;
  v32 = a8 & 1;
  v33 = a5;
  if ((_DWORD)v31)
    v33 = v30;
  if (v28 > v30 || v30 > v33)
    goto LABEL_22;
  v35 = a7;
  if ((a8 & 1) != 0)
    v35 = -INFINITY;
  v36 = a10;
  if ((a11 & 1) != 0)
    v36 = v35;
  v37 = a12;
  if ((a13 & 1) != 0)
    v37 = v36;
  if (v35 > v36 || v36 > v37)
  {
LABEL_22:
    v51 = a5;
    v52 = a7;
    v49 = a1;
    v50 = a3;
    v48 = v27;
    v46 = v31;
    v47 = v29;
    v39 = static os_log_type_t.fault.getter();
    v40 = (void *)static Log.runtimeIssuesLog.getter();
    v41 = v39;
    v23 = a16;
    v21 = a17;
    v20 = a19;
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v40, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v31 = v46;
    v29 = v47;
    v24 = a14;
    v22 = a15;
    v27 = v48;
    v26 = a10;
    v25 = a12;
    a1 = v49;
    a3 = v50;
    a5 = v51;
    a7 = v52;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v53, *(_QWORD *)&a1, v27, *(_QWORD *)&a3, v29, *(_QWORD *)&a5, v31, *(_QWORD *)&a7, v32, *(_QWORD *)&v26, a11 & 1, *(_QWORD *)&v25, a13 & 1, v24, v22);
  *(_QWORD *)a9 = v23;
  *(_QWORD *)(a9 + 8) = v21;
  *(_QWORD *)(a9 + 16) = a18;
  *(_BYTE *)(a9 + 24) = v20 & 1;
  *(_BYTE *)(a9 + 25) = HIBYTE(v20) & 1;
  v42 = v53[5];
  *(_OWORD *)(a9 + 96) = v53[4];
  *(_OWORD *)(a9 + 112) = v42;
  *(_OWORD *)(a9 + 128) = v53[6];
  v43 = v53[1];
  *(_OWORD *)(a9 + 32) = v53[0];
  *(_OWORD *)(a9 + 48) = v43;
  v44 = v53[3];
  *(_OWORD *)(a9 + 64) = v53[2];
  *(_OWORD *)(a9 + 80) = v44;
  swift_retain(v21);
  return swift_retain(v23);
}

double sub_1000E6214@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000E4E8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100163780, &qword_100163788).n128_u64[0];
  return result;
}

double sub_1000E626C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000E4E8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001639F0, &qword_1001639F8).n128_u64[0];
  return result;
}

double sub_1000E62C4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000E4E8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100163A18, &qword_100163A20).n128_u64[0];
  return result;
}

double sub_1000E631C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000E4E8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100163A70, &qword_100163A78).n128_u64[0];
  return result;
}

double sub_1000E6374@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000E4E8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100163A50, &qword_100163A58).n128_u64[0];
  return result;
}

__n128 sub_1000E63CC@<Q0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __n128 result;
  unsigned int v39;
  unint64_t v40;
  double v41;
  double v42;
  unint64_t v43;
  _OWORD v44[7];

  v17 = v16;
  v19 = a16;
  v20 = a13;
  v21 = a11;
  v22 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v22)
    a10.n128_f64[0] = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = a10.n128_f64[0];
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (a10.n128_f64[0] > v24 || v24 > v27)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v29 = a11;
  if ((a12 & 1) != 0)
    v29 = a10.n128_f64[0];
  v30 = a13;
  if ((a14 & 1) != 0)
    v30 = v29;
  if (a10.n128_f64[0] > v29 || v29 > v30)
  {
LABEL_22:
    v42 = a5;
    v43 = a7;
    v41 = a3;
    v40 = a1;
    v39 = v22;
    v32 = static os_log_type_t.fault.getter(a10);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v19 = a16;
    v22 = v39;
    a1 = v40;
    v21 = a11;
    a3 = v41;
    v20 = a13;
    a5 = v42;
    a7 = v43;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, a1, v22, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, a7, v26, *(_QWORD *)&v21, a12 & 1, *(_QWORD *)&v20, a14 & 1, a15, v19);
  v34 = sub_100003E70(&qword_100163B38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(a9, v17, v34);
  v35 = a9 + *(int *)(sub_100003E70(&qword_100163B10) + 36);
  v36 = v44[5];
  *(_OWORD *)(v35 + 64) = v44[4];
  *(_OWORD *)(v35 + 80) = v36;
  *(_OWORD *)(v35 + 96) = v44[6];
  v37 = v44[1];
  *(_OWORD *)v35 = v44[0];
  *(_OWORD *)(v35 + 16) = v37;
  result = (__n128)v44[3];
  *(_OWORD *)(v35 + 32) = v44[2];
  *(__n128 *)(v35 + 48) = result;
  return result;
}

double sub_1000E6598@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000E4E8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100163B88, &qword_100163B90).n128_u64[0];
  return result;
}

double sub_1000E65F0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000E4E8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100163BB0, &qword_100163BB8).n128_u64[0];
  return result;
}

double sub_1000E6648@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000E4E8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100163D30, &qword_100163D38).n128_u64[0];
  return result;
}

_QWORD *sub_1000E66A0@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  __int128 *v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  unint64_t v41;
  double v42;
  double v43;
  unint64_t v44;
  _OWORD v45[8];
  _BYTE v46[40];
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _BYTE v50[40];

  v18 = a16;
  v19 = a13;
  v20 = a11;
  v21 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v21)
    a10.n128_f64[0] = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = a10.n128_f64[0];
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (a10.n128_f64[0] > v23 || v23 > v26)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v28 = a11;
  if ((a12 & 1) != 0)
    v28 = a10.n128_f64[0];
  v29 = a13;
  if ((a14 & 1) != 0)
    v29 = v28;
  if (a10.n128_f64[0] > v28 || v28 > v29)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v41 = a1;
    v42 = a3;
    v40 = v21;
    v31 = static os_log_type_t.fault.getter(a10);
    v32 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a16;
    v21 = v40;
    v20 = a11;
    v19 = a13;
    a1 = v41;
    a3 = v42;
    a5 = v43;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, a1, v21, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, a7, v25, *(_QWORD *)&v20, a12 & 1, *(_QWORD *)&v19, a14 & 1, a15, v18);
  v33 = v16[2];
  *(_QWORD *)&v46[32] = *((_QWORD *)v16 + 6);
  v34 = *v16;
  *(_OWORD *)v46 = v16[1];
  *(_OWORD *)&v46[16] = v33;
  v45[7] = v34;
  v47 = *(_OWORD *)&v46[8];
  v48 = *(_OWORD *)&v46[24];
  sub_1000F24C4((uint64_t)&v47, (uint64_t)v50);
  v35 = v16[1];
  *(_OWORD *)a9 = *v16;
  *(_OWORD *)(a9 + 16) = v35;
  *(_OWORD *)(a9 + 32) = v16[2];
  v36 = v45[2];
  *(_OWORD *)(a9 + 104) = v45[3];
  v37 = v45[5];
  *(_OWORD *)(a9 + 120) = v45[4];
  *(_OWORD *)(a9 + 136) = v37;
  *(_OWORD *)(a9 + 152) = v45[6];
  v38 = v45[1];
  *(_OWORD *)(a9 + 56) = v45[0];
  *(_OWORD *)(a9 + 72) = v38;
  v49 = *((_QWORD *)&v48 + 1);
  *(_QWORD *)(a9 + 48) = *((_QWORD *)v16 + 6);
  *(_OWORD *)(a9 + 88) = v36;
  sub_1000F2500((uint64_t)v50);
  return sub_100045AC4(&v49);
}

double sub_1000E6898@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000E4E8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001646E0, &qword_1001646E8).n128_u64[0];
  return result;
}

double sub_1000E68F0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000E4E8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100164728, &qword_100164730).n128_u64[0];
  return result;
}

double sub_1000E6948@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000E4E8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100164718, &qword_100164720).n128_u64[0];
  return result;
}

uint64_t sub_1000E69A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for CoordinateSpace.local(_:);
  v3 = type metadata accessor for CoordinateSpace(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_1000E69E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t WitnessTable;

  v6 = type metadata accessor for EventViewModel(0, a3, a4, a4);
  WitnessTable = swift_getWitnessTable(&unk_100113950, v6);
  return StateObject.init(wrappedValue:)(a1, a2, v6, WitnessTable);
}

uint64_t sub_1000E6A48(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;

  v5 = *v4;
  v6 = v4[1];
  v7 = *((unsigned __int8 *)v4 + 16);
  v8 = type metadata accessor for EventViewModel(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  WitnessTable = swift_getWitnessTable(&unk_100113950, v8);
  return a2(v5, v6, v7, v8, WitnessTable);
}

uint64_t sub_1000E6AB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(unsigned __int8 *)(v0 + 40);
  v4 = sub_100003E70(qword_1001649E8);
  v5 = sub_100007D40(&qword_100164B30, qword_1001649E8, (uint64_t)&unk_10010AC30);
  return StateObject.wrappedValue.getter(v1, v2, v3, v4, v5);
}

uint64_t sub_1000E6B24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v0 = sub_100003E70(&qword_1001649E0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003E70(&qword_10015EEC0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v15 - v8;
  v10 = sub_100003E70(qword_1001649E8);
  v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v12 = v11 + *(_QWORD *)(*(_QWORD *)v11 + 104);
  v13 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v9, 1, 1, v13);
  sub_100007ADC((uint64_t)v9, (uint64_t)v7, &qword_10015EEC0);
  Published.init(initialValue:)(v7, v4);
  sub_100008194((uint64_t)v9, &qword_10015EEC0);
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v12, v3, v0);
  return v11;
}

void sub_1000E6C88(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[8];

  v8[0] = &unk_100113C10;
  v8[1] = &unk_100113C10;
  v8[2] = &unk_100113C28;
  v8[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v8[4] = &unk_100113C40;
  sub_10000BE1C(319, (unint64_t *)&qword_10015D698, (uint64_t (*)(uint64_t))&type metadata accessor for DismissAction);
  if (v3 <= 0x3F)
  {
    v8[5] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000BE1C(319, (unint64_t *)&qword_10015E748, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v5 <= 0x3F)
    {
      v8[6] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001C9A4(319);
      if (v7 <= 0x3F)
      {
        v8[7] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 0, 8, v8, a1 + 32);
      }
    }
  }
}

unint64_t sub_1000E6D78(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v23 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v23);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_10000E0FC(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    v12 = *(_BYTE *)(a2 + 40);
    sub_10000E0FC(v10, v11);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v11;
    *(_BYTE *)(a1 + 40) = v12;
    v13 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v13;
    v14 = *(_QWORD *)(a2 + 64);
    v15 = *(_QWORD *)(a2 + 72);
    v16 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v15;
    *(_QWORD *)(a1 + 80) = v16;
    v17 = a3[13];
    v18 = (uint64_t *)(a1 + v17);
    v19 = (uint64_t *)(a2 + v17);
    *(_QWORD *)(a1 + 64) = v14;
    swift_retain(v13);
    swift_retain(v15);
    v20 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
      v22 = 1;
    }
    else
    {
      v24 = *v19;
      *v18 = *v19;
      swift_retain(v24);
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v20, v22);
    v25 = a3[14];
    v26 = (uint64_t *)(a1 + v25);
    v27 = (uint64_t *)(a2 + v25);
    v28 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
      v30 = 1;
    }
    else
    {
      v31 = *v27;
      *v26 = *v27;
      swift_retain(v31);
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v28, v30);
    v32 = a3[15];
    v33 = (uint64_t *)(a1 + v32);
    v34 = (uint64_t *)(a2 + v32);
    v35 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
    {
      v36 = type metadata accessor for UserInterfaceSizeClass(0);
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v37 + 48))(v34, 1, v36))
      {
        v38 = sub_100003E70(&qword_10015D4A0);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v37 + 16))(v33, v34, v36);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v33, 0, 1, v36);
      }
      v40 = v33;
      v41 = v35;
      v42 = 1;
    }
    else
    {
      v39 = *v34;
      *v33 = *v34;
      swift_retain(v39);
      v40 = v33;
      v41 = v35;
      v42 = 0;
    }
    swift_storeEnumTagMultiPayload(v40, v41, v42);
  }
  return a1;
}

void sub_1000E6FFC(uint64_t *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_10000E138(*a1, a1[1]);
  sub_10000E138(a1[3], a1[4]);
  swift_release(a1[7]);
  swift_release(a1[9]);
  v4 = (uint64_t *)((char *)a1 + a2[13]);
  v5 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (uint64_t *)((char *)a1 + a2[14]);
  v8 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (uint64_t *)((char *)a1 + a2[15]);
  v11 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for UserInterfaceSizeClass(0);
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
}

uint64_t sub_1000E7170(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10000E0FC(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 40);
  sub_10000E0FC(v9, v10);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = v11;
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = v15;
  v16 = a3[13];
  v17 = (uint64_t *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  *(_QWORD *)(a1 + 64) = v13;
  swift_retain(v12);
  swift_retain(v14);
  v19 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
    v21 = 1;
  }
  else
  {
    v22 = *v18;
    *v17 = *v18;
    swift_retain(v22);
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v19, v21);
  v23 = a3[14];
  v24 = (uint64_t *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
  {
    v27 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
    v28 = 1;
  }
  else
  {
    v29 = *v25;
    *v24 = *v25;
    swift_retain(v29);
    v28 = 0;
  }
  swift_storeEnumTagMultiPayload(v24, v26, v28);
  v30 = a3[15];
  v31 = (uint64_t *)(a1 + v30);
  v32 = (uint64_t *)(a2 + v30);
  v33 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
  {
    v34 = type metadata accessor for UserInterfaceSizeClass(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v35 + 48))(v32, 1, v34))
    {
      v36 = sub_100003E70(&qword_10015D4A0);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      v37 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v35 + 16))(v31, v32, v34);
      v37 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v31, 0, 1, v34);
    }
  }
  else
  {
    v38 = *v32;
    *v31 = *v32;
    swift_retain(v38);
    v37 = 0;
  }
  swift_storeEnumTagMultiPayload(v31, v33, v37);
  return a1;
}

uint64_t sub_1000E73C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10000E0FC(*(_QWORD *)a2, v7);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_10000E138(v9, v10);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_BYTE *)(a2 + 40);
  sub_10000E0FC(v11, v12);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 40) = v13;
  sub_10000E138(v14, v15);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v16;
  swift_retain(v16);
  swift_release(v17);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v18 = *(_QWORD *)(a1 + 72);
  v19 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v19;
  swift_retain(v19);
  swift_release(v18);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  if (a1 != a2)
  {
    v20 = a3[13];
    v21 = (uint64_t *)(a1 + v20);
    v22 = (uint64_t *)(a2 + v20);
    sub_100008194(a1 + v20, &qword_10015D488);
    v23 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
      v25 = 1;
    }
    else
    {
      v26 = *v22;
      *v21 = *v22;
      swift_retain(v26);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v23, v25);
    v27 = a3[14];
    v28 = (uint64_t *)(a1 + v27);
    v29 = (uint64_t *)(a2 + v27);
    sub_100008194(a1 + v27, &qword_10015D490);
    v30 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
    {
      v31 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
      v32 = 1;
    }
    else
    {
      v33 = *v29;
      *v28 = *v29;
      swift_retain(v33);
      v32 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v30, v32);
    v34 = a3[15];
    v35 = (uint64_t *)(a1 + v34);
    v36 = (uint64_t *)(a2 + v34);
    sub_100008194(a1 + v34, &qword_10015D498);
    v37 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
    {
      v38 = type metadata accessor for UserInterfaceSizeClass(0);
      v39 = *(_QWORD *)(v38 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v39 + 48))(v36, 1, v38))
      {
        v40 = sub_100003E70(&qword_10015D4A0);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        v41 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v39 + 16))(v35, v36, v38);
        v41 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v35, 0, 1, v38);
      }
    }
    else
    {
      v42 = *v36;
      *v35 = *v36;
      swift_retain(v42);
      v41 = 0;
    }
    swift_storeEnumTagMultiPayload(v35, v37, v41);
  }
  return a1;
}

uint64_t sub_1000E7694(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v6 = a3[13];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v9 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for DismissAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[14];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v16 = a3[15];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for UserInterfaceSizeClass(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v20))
    {
      v22 = sub_100003E70(&qword_10015D4A0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v17, v18, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
    }
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000E78C4(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_10000E138(v7, v8);
  v9 = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v9;
  sub_10000E138(v10, v11);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v12;
  swift_release(v13);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v15;
  swift_release(v14);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  if (a1 != a2)
  {
    v16 = a3[13];
    v17 = (void *)(a1 + v16);
    v18 = (const void *)(a2 + v16);
    sub_100008194(a1 + v16, &qword_10015D488);
    v19 = sub_100003E70(&qword_10015D488);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for DismissAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
      swift_storeEnumTagMultiPayload(v17, v19, 1);
    }
    else
    {
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    v21 = a3[14];
    v22 = (void *)(a1 + v21);
    v23 = (const void *)(a2 + v21);
    sub_100008194(a1 + v21, &qword_10015D490);
    v24 = sub_100003E70(&qword_10015D490);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
      swift_storeEnumTagMultiPayload(v22, v24, 1);
    }
    else
    {
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    v26 = a3[15];
    v27 = (void *)(a1 + v26);
    v28 = (const void *)(a2 + v26);
    sub_100008194(a1 + v26, &qword_10015D498);
    v29 = sub_100003E70(&qword_10015D498);
    if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
    {
      v30 = type metadata accessor for UserInterfaceSizeClass(0);
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v28, 1, v30))
      {
        v32 = sub_100003E70(&qword_10015D4A0);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v31 + 32))(v27, v28, v30);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v27, 0, 1, v30);
      }
      swift_storeEnumTagMultiPayload(v27, v29, 1);
    }
    else
    {
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000E7B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E7B64);
}

uint64_t sub_1000E7B64(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 56);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003E70(&qword_10015D608);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[13];
    }
    else
    {
      v12 = sub_100003E70(&qword_10015E6D8);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[14];
      }
      else
      {
        v10 = sub_100003E70(&qword_10015DFA0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[15];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1000E7C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E7C40);
}

uint64_t sub_1000E7C40(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 56) = (a2 - 1);
  }
  else
  {
    v8 = sub_100003E70(&qword_10015D608);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[13];
    }
    else
    {
      v12 = sub_100003E70(&qword_10015E6D8);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[14];
      }
      else
      {
        v10 = sub_100003E70(&qword_10015DFA0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[15];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for EventView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventView);
}

uint64_t sub_1000E7D18(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10011BB78, 1);
}

uint64_t sub_1000E7D4C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t TupleTypeMetadata2;
  uint64_t v25;
  uint64_t WitnessTable;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t TupleTypeMetadata;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t OpaqueTypeConformance2;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  __n128 v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  double v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  __n128 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t KeyPath;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  __n128 v178;
  ValueMetadata *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  __n128 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __n128 v196;
  uint64_t v197;
  ValueMetadata *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  __n128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  __n128 v216;
  uint64_t v217;
  ValueMetadata *v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  __n128 v230;
  char *v231;
  uint64_t v232;
  void (*v233)(char *, uint64_t, uint64_t);
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  void (*v237)(uint64_t, char *, uint64_t);
  char *v238;
  uint64_t v239;
  __n128 v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  char *v248;
  __n128 v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  ValueMetadata *v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  char *v273;
  __n128 v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void (*v278)(char *, char *, uint64_t);
  char *v279;
  void (*v280)(char *, uint64_t);
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char *v326;
  char *v327;
  uint64_t v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  uint64_t v339;
  char *v340;
  char *v341;
  char *v342;
  char *v343;
  char *v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  char *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  _QWORD v362[29];
  uint64_t v363;
  ValueMetadata *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;

  v338 = a2;
  v3 = type metadata accessor for TaskPriority(0);
  v336 = *(_QWORD *)(v3 - 8);
  v337 = v3;
  __chkstk_darwin(v3);
  v335 = (char *)&v282 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v346 = sub_100003E70(&qword_10015D4A0);
  __chkstk_darwin(v346);
  v334 = (uint64_t)&v282 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v350 = *(_QWORD *)(a1 - 8);
  v351 = *(_QWORD *)(v350 + 64);
  __chkstk_darwin(v6);
  v354 = (char *)&v282 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v353 = type metadata accessor for CoordinateSpace(0);
  v352 = *(_QWORD *)(v353 - 8);
  __chkstk_darwin(v353);
  v348 = (char *)&v282 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v345 = (char *)type metadata accessor for NavigationPath(255);
  v333 = a1;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v10);
  v12 = v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, v9, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v14 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v15 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v14, &unk_1001199D4, &unk_1001199DC);
  v16 = swift_getAssociatedTypeWitness(255, v15);
  v17 = swift_getAssociatedConformanceWitness(v15, v14, v16, &unk_100118198, &unk_1001181B0);
  type metadata accessor for HeroImage(255, v16, v17, v18);
  v19 = v12;
  v21 = type metadata accessor for HeroImageLandscape(255, v12, v10, v20);
  type metadata accessor for ModifiedContent(255, v21, &type metadata for _FrameLayout);
  v344 = (char *)type metadata accessor for _ConditionalContent(255);
  v355 = v12;
  v23 = type metadata accessor for EventDetailModule(255, v12, v10, v22);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for HeroImagePlaceholder, v23, 0, 0);
  v25 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v25);
  type metadata accessor for VStack(255, v25, WitnessTable);
  v27 = sub_1000034AC(&qword_100164A70);
  v28 = type metadata accessor for ModifiedContent(255, v23, &type metadata for _PaddingLayout);
  v29 = swift_getTupleTypeMetadata2(255, v27, v28, 0, 0);
  v30 = type metadata accessor for TupleView(255, v29);
  v31 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v30);
  v32 = type metadata accessor for HStack(255, v30, v31);
  type metadata accessor for ModifiedContent(255, v32, &type metadata for _FrameLayout);
  v33 = type metadata accessor for _ConditionalContent(255);
  v34 = type metadata accessor for Group(255, v33);
  v35 = sub_1000034AC(&qword_100164A78);
  v36 = type metadata accessor for ModifiedContent(255, v34, v35);
  v37 = sub_1000034AC(&qword_100164A80);
  v38 = type metadata accessor for ModifiedContent(255, v36, v37);
  v363 = sub_1000034AC(&qword_100161878);
  v364 = (ValueMetadata *)type metadata accessor for GuideModule(255, v19, v10, v39);
  v365 = sub_1000034AC(&qword_100164A88);
  v41 = type metadata accessor for LineupModule(255, v14, v15, v40);
  v42 = type metadata accessor for ModifiedContent(255, v41, &type metadata for _PaddingLayout);
  v366 = type metadata accessor for Optional(255, v42);
  v367 = sub_1000034AC(&qword_100164A90);
  v368 = sub_1000034AC(&qword_100164A98);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 6);
  v44 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  v45 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v44);
  v46 = type metadata accessor for VStack(255, v44, v45);
  v47 = type metadata accessor for ModifiedContent(255, v46, &type metadata for PaddingModifier);
  v48 = sub_1000034AC(&qword_10015E328);
  v49 = type metadata accessor for ModifiedContent(255, v47, v48);
  v50 = swift_getTupleTypeMetadata2(255, v38, v49, 0, 0);
  v51 = type metadata accessor for TupleView(255, v50);
  v52 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v51);
  v53 = type metadata accessor for VStack(255, v51, v52);
  v54 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v53);
  v56 = type metadata accessor for ObservableScrollView(255, v53, v54, v55);
  v57 = swift_getTupleTypeMetadata2(255, v344, v56, 0, 0);
  v58 = type metadata accessor for TupleView(255, v57);
  v59 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v58);
  v60 = type metadata accessor for ZStack(255, v58, v59);
  v61 = type metadata accessor for ModifiedContent(255, v60, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v362[27] = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v60);
  v362[28] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  v62 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v61);
  v363 = v61;
  v364 = (ValueMetadata *)v62;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v363, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 0);
  v64 = sub_1000034AC(&qword_100164AA0);
  v65 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v64);
  v66 = type metadata accessor for ModifiedContent(255, v65, v48);
  v67 = sub_1000034AC(&qword_1001609A8);
  v68 = type metadata accessor for ModifiedContent(255, v66, v67);
  v363 = v61;
  v364 = (ValueMetadata *)v62;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v363, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
  v70 = sub_100007D40(&qword_100164AA8, &qword_100164AA0, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  v362[25] = OpaqueTypeConformance2;
  v362[26] = v70;
  v71 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v65);
  v72 = sub_100007D40(&qword_10015E320, &qword_10015E328, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
  v362[23] = v71;
  v362[24] = v72;
  v73 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v66);
  v74 = sub_100007D40(&qword_1001609B8, &qword_1001609A8, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
  v362[21] = v73;
  v362[22] = v74;
  v291 = v68;
  v292 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v68);
  v75 = type metadata accessor for NavigationStack(0, v345, v68, v292);
  v298 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v290 = (char *)&v282 - v76;
  v77 = sub_1000034AC(&qword_100164AB0);
  v283 = v75;
  v78 = type metadata accessor for ModifiedContent(0, v75, v77);
  v308 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v339 = (uint64_t)&v282 - v79;
  v80 = sub_1000034AC(&qword_100164AB8);
  v286 = v78;
  v81 = type metadata accessor for ModifiedContent(0, v78, v80);
  v307 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v297 = (char *)&v282 - v82;
  v83 = sub_1000034AC(&qword_100164AC0);
  v287 = v81;
  v84 = type metadata accessor for ModifiedContent(0, v81, v83);
  v309 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v299 = (char *)&v282 - v85;
  v86 = sub_1000034AC(&qword_100164AC8);
  v289 = v84;
  v87 = type metadata accessor for ModifiedContent(0, v84, v86);
  v321 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v342 = (char *)&v282 - v88;
  v347 = v10;
  v89 = v355;
  v90 = swift_getAssociatedTypeWitness(255, v10);
  v91 = swift_getAssociatedConformanceWitness(v10, v89, v90, &unk_1001191E8, &unk_100119228);
  v93 = type metadata accessor for TicketView(255, v90, v91, v92);
  v94 = swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v75);
  v282 = v94;
  v95 = sub_100007D40(&qword_100164AD0, &qword_100164AB0, (uint64_t)&unk_10010F810);
  v362[19] = v94;
  v362[20] = v95;
  v96 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v78);
  v284 = v96;
  v97 = sub_100007D40(&qword_100164AD8, &qword_100164AB8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v362[17] = v96;
  v362[18] = v97;
  v98 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v81);
  v285 = v98;
  v99 = sub_100007D40(&qword_100164AE0, &qword_100164AC0, (uint64_t)&unk_1001134C0);
  v362[15] = v98;
  v362[16] = v99;
  v100 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v84);
  v288 = v100;
  v101 = sub_100007D40(&qword_100164AE8, &qword_100164AC8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v362[13] = v100;
  v362[14] = v101;
  v102 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v87);
  v103 = swift_getWitnessTable(&unk_10010AD80, v93);
  v363 = v87;
  v364 = (ValueMetadata *)v93;
  v295 = v102;
  v296 = v87;
  v293 = v93;
  v294 = v103;
  v365 = v102;
  v366 = v103;
  v104 = v103;
  v105 = swift_getOpaqueTypeMetadata2(0, &v363, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v313 = *(_QWORD *)(v105 - 8);
  v106 = v105;
  __chkstk_darwin(v105);
  v340 = (char *)&v282 - v107;
  v108 = sub_1000034AC(&qword_1001609E0);
  v363 = v87;
  v364 = (ValueMetadata *)v93;
  v365 = v102;
  v366 = v104;
  v109 = swift_getOpaqueTypeConformance2(&v363, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v110 = sub_1000034AC(&qword_100160A08);
  v111 = sub_10005C954(&qword_100160A10, &qword_100160A08, (void (*)(void))sub_100045694);
  v363 = v110;
  v364 = (ValueMetadata *)v111;
  v112 = swift_getOpaqueTypeConformance2(&v363, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 1);
  v302 = v108;
  v303 = v106;
  v363 = v106;
  v364 = (ValueMetadata *)v108;
  v300 = v112;
  v301 = v109;
  v365 = v109;
  v366 = v112;
  v113 = v112;
  v114 = swift_getOpaqueTypeMetadata2(0, &v363, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v316 = *(_QWORD *)(v114 - 8);
  v115 = v114;
  __chkstk_darwin(v114);
  v341 = (char *)&v282 - v116;
  v363 = v106;
  v364 = (ValueMetadata *)v108;
  v365 = v109;
  v366 = v113;
  v117 = swift_getOpaqueTypeConformance2(&v363, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v118 = sub_10001DF38();
  v363 = v115;
  v364 = &type metadata for PromotionalAssetsContentView;
  v119 = v115;
  v305 = v117;
  v306 = v115;
  v365 = v117;
  v366 = v118;
  v120 = v117;
  v121 = v118;
  v304 = v118;
  v122 = swift_getOpaqueTypeMetadata2(0, &v363, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v320 = *(_QWORD *)(v122 - 8);
  v314 = v122;
  __chkstk_darwin(v122);
  v343 = (char *)&v282 - v123;
  v125 = type metadata accessor for ModifiedContent(0, v124, &type metadata for _AppearanceActionModifier);
  v322 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v344 = (char *)&v282 - v126;
  v312 = v125;
  v127 = type metadata accessor for ModifiedContent(0, v125, &type metadata for _AppearanceActionModifier);
  v128 = *(_QWORD *)(v127 - 8);
  v319 = v127;
  v325 = v128;
  __chkstk_darwin(v127);
  v315 = (char *)&v282 - v129;
  v363 = v119;
  v364 = &type metadata for PromotionalAssetsContentView;
  v365 = v120;
  v366 = v121;
  v310 = swift_getOpaqueTypeConformance2(&v363, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v362[11] = v310;
  v362[12] = &protocol witness table for _AppearanceActionModifier;
  v311 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v125);
  v362[9] = v311;
  v362[10] = &protocol witness table for _AppearanceActionModifier;
  v130 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v127);
  v318 = v130;
  v317 = sub_10007B5F4();
  v363 = v127;
  v364 = (ValueMetadata *)v346;
  v365 = v130;
  v366 = v317;
  v131 = swift_getOpaqueTypeMetadata2(0, &v363, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v323 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v345 = (char *)&v282 - v132;
  v133 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v324 = v131;
  v134 = type metadata accessor for ModifiedContent(0, v131, v133);
  v328 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v326 = (char *)&v282 - v135;
  v136 = type metadata accessor for _TaskModifier(255);
  v330 = v134;
  v137 = type metadata accessor for ModifiedContent(0, v134, v136);
  v331 = *(_QWORD *)(v137 - 8);
  v332 = v137;
  __chkstk_darwin(v137);
  v327 = (char *)&v282 - ((v138 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v139);
  v329 = (char *)&v282 - v140;
  v362[2] = v355;
  v141 = v347;
  v362[3] = v347;
  v142 = v349;
  v362[4] = v349;
  v143 = v290;
  NavigationStack.init<>(root:)(sub_1000F03A4, v362, v291, v292);
  v144 = sub_1000F03B0();
  v292 = v144;
  v145 = v352;
  v146 = (uint64_t)v348;
  v147 = v353;
  (*(void (**)(char *, _QWORD, uint64_t))(v352 + 104))(v348, enum case for CoordinateSpace.local(_:), v353);
  v148 = v283;
  sub_10008B0F0((uint64_t)&type metadata for EventViewHeightPreferenceKey, v146, (uint64_t)sub_10007D238, 0, v283, (uint64_t)&type metadata for EventViewHeightPreferenceKey, v282, v144, v339);
  (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v146, v147);
  (*(void (**)(char *, uint64_t))(v298 + 8))(v143, v148);
  v149 = v350;
  v352 = *(_QWORD *)(v350 + 16);
  v150 = v354;
  v151 = v333;
  ((void (*)(char *, uint64_t, uint64_t))v352)(v354, v142, v333);
  v152 = *(unsigned __int8 *)(v149 + 80);
  v348 = (char *)(((v152 + 32) & ~v152) + v351);
  v153 = (v152 + 32) & ~v152;
  v353 = v153;
  v351 = v152 | 7;
  v154 = swift_allocObject(&unk_1001541A0, v348, v152 | 7);
  *(_QWORD *)(v154 + 16) = v355;
  *(_QWORD *)(v154 + 24) = v141;
  v350 = *(_QWORD *)(v149 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v350)(v154 + v153, v150, v151);
  v155 = sub_100003B3C(&qword_10015FD18, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  v156 = v297;
  v157 = v286;
  v158 = v339;
  View.onPreferenceChange<A>(_:perform:)(&type metadata for EventViewHeightPreferenceKey, sub_1000F03F8, v154, v286, &type metadata for EventViewHeightPreferenceKey, v284, v292, v155);
  v159 = swift_release(v154);
  (*(void (**)(uint64_t, uint64_t, __n128))(v308 + 8))(v158, v157, v159);
  v160 = sub_1000F0404();
  v161 = v299;
  v162 = v287;
  v163 = sub_10008B254((uint64_t)&type metadata for EventViewSafeAreaPreferenceKey, (uint64_t)sub_10006C87C, 0, v287, (uint64_t)&type metadata for EventViewSafeAreaPreferenceKey, v285, v160);
  (*(void (**)(char *, uint64_t, double))(v307 + 8))(v156, v162, v163);
  v164 = v349;
  ((void (*)(char *, uint64_t, uint64_t))v352)(v150, v349, v151);
  v165 = swift_allocObject(&unk_1001541C8, v348, v351);
  v166 = v355;
  *(_QWORD *)(v165 + 16) = v355;
  *(_QWORD *)(v165 + 24) = v141;
  ((void (*)(uint64_t, char *, uint64_t))v350)(v165 + v353, v150, v151);
  v167 = sub_10006FF78();
  v168 = v289;
  View.onPreferenceChange<A>(_:perform:)(&type metadata for EventViewSafeAreaPreferenceKey, sub_1000F044C, v165, v289, &type metadata for EventViewSafeAreaPreferenceKey, v288, v160, v167);
  v169 = swift_release(v165);
  (*(void (**)(char *, uint64_t, __n128))(v309 + 8))(v161, v168, v169);
  v170 = v151;
  v173 = sub_1000E6A48(v151, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v171, v172);
  v360 = v166;
  v361 = v141;
  KeyPath = swift_getKeyPath(&unk_100113CB8);
  v175 = v166;
  v177 = type metadata accessor for EventViewModel(255, v166, v141, v176);
  v339 = swift_getWitnessTable(&unk_100113950, v177);
  ObservedObject.Wrapper.subscript.getter(&v363, KeyPath, v173, v339);
  swift_release(KeyPath);
  v178 = swift_release(v173);
  v180 = v363;
  v179 = v364;
  LODWORD(v309) = v365;
  v181 = v354;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v352)(v354, v164, v151, v178);
  v182 = swift_allocObject(&unk_1001541F0, v348, v351);
  *(_QWORD *)(v182 + 16) = v175;
  *(_QWORD *)(v182 + 24) = v141;
  v183 = v141;
  v184 = v170;
  ((void (*)(uint64_t, char *, uint64_t))v350)(v182 + v353, v181, v170);
  v185 = swift_checkMetadataState(0, v293);
  v186 = v296;
  v187 = v342;
  View.sheet<A>(isPresented:onDismiss:content:)(v180, v179, v309, 0, 0, sub_1000F0510, v182, v296, v185, v295, v294);
  swift_release(v179);
  swift_release(v182);
  v188 = swift_release(v180);
  (*(void (**)(char *, uint64_t, __n128))(v321 + 8))(v187, v186, v188);
  v189 = v184;
  v192 = sub_1000E6A48(v184, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v190, v191);
  v358 = v175;
  v193 = v175;
  v359 = v183;
  v194 = v183;
  v195 = swift_getKeyPath(&unk_100113CF0);
  ObservedObject.Wrapper.subscript.getter(&v363, v195, v192, v339);
  swift_release(v195);
  v196 = swift_release(v192);
  v197 = v363;
  v198 = v364;
  v199 = v365;
  v200 = v354;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v352)(v354, v164, v189, v196);
  v201 = swift_allocObject(&unk_100154218, v348, v351);
  *(_QWORD *)(v201 + 16) = v193;
  *(_QWORD *)(v201 + 24) = v194;
  v202 = v194;
  ((void (*)(uint64_t, char *, uint64_t))v350)(v201 + v353, v200, v189);
  v203 = v199;
  v204 = v303;
  v205 = v340;
  View.sheet<A>(isPresented:onDismiss:content:)(v197, v198, v203, 0, 0, sub_1000F0588, v201, v303, v302, v301, v300);
  swift_release(v198);
  swift_release(v201);
  v206 = swift_release(v197);
  (*(void (**)(char *, uint64_t, __n128))(v313 + 8))(v205, v204, v206);
  v207 = v189;
  v208 = v349;
  v211 = sub_1000E6A48(v189, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v209, v210);
  v212 = v193;
  v356 = v193;
  v213 = v202;
  v357 = v202;
  v214 = swift_getKeyPath(&unk_100113D28);
  v215 = v208;
  ObservedObject.Wrapper.subscript.getter(&v363, v214, v211, v339);
  swift_release(v214);
  v216 = swift_release(v211);
  v217 = v363;
  v218 = v364;
  v219 = v365;
  v220 = v354;
  v221 = v215;
  v222 = v207;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v352)(v354, v221, v207, v216);
  v223 = v348;
  v224 = swift_allocObject(&unk_100154240, v348, v351);
  *(_QWORD *)(v224 + 16) = v212;
  *(_QWORD *)(v224 + 24) = v213;
  v225 = v353;
  ((void (*)(uint64_t, char *, uint64_t))v350)(v224 + v353, v220, v222);
  v226 = v219;
  v227 = v306;
  v228 = v341;
  View.sheet<A>(isPresented:onDismiss:content:)(v217, v218, v226, 0, 0, sub_1000F0668, v224, v306, &type metadata for PromotionalAssetsContentView, v305, v304);
  swift_release(v218);
  v229 = v222;
  swift_release(v224);
  v230 = swift_release(v217);
  (*(void (**)(char *, uint64_t, __n128))(v316 + 8))(v228, v227, v230);
  v231 = v354;
  v232 = v349;
  v233 = (void (*)(char *, uint64_t, uint64_t))v352;
  ((void (*)(char *, uint64_t, uint64_t))v352)(v354, v349, v222);
  v234 = v351;
  v235 = swift_allocObject(&unk_100154268, v223, v351);
  v236 = v347;
  *(_QWORD *)(v235 + 16) = v355;
  *(_QWORD *)(v235 + 24) = v236;
  v237 = (void (*)(uint64_t, char *, uint64_t))v350;
  ((void (*)(uint64_t, char *, uint64_t))v350)(v235 + v225, v231, v229);
  v238 = v343;
  v239 = v314;
  View.onAppear(perform:)(sub_1000F06C4, v235, v314, v310);
  v240 = swift_release(v235);
  (*(void (**)(char *, uint64_t, __n128))(v320 + 8))(v238, v239, v240);
  v241 = v354;
  v233(v354, v232, v229);
  v242 = swift_allocObject(&unk_100154290, v223, v234);
  v243 = v355;
  v244 = v347;
  *(_QWORD *)(v242 + 16) = v355;
  *(_QWORD *)(v242 + 24) = v244;
  v245 = v241;
  v237(v242 + v353, v241, v229);
  v246 = v315;
  v247 = v312;
  v248 = v344;
  View.onDisappear(perform:)(sub_1000F06D4, v242, v312, v311);
  v249 = swift_release(v242);
  (*(void (**)(char *, uint64_t, __n128))(v322 + 8))(v248, v247, v249);
  v250 = v349;
  v251 = v334;
  sub_10001DADC(v334);
  ((void (*)(char *, uint64_t, uint64_t))v352)(v245, v250, v229);
  v252 = swift_allocObject(&unk_1001542B8, v348, v351);
  *(_QWORD *)(v252 + 16) = v243;
  *(_QWORD *)(v252 + 24) = v244;
  v253 = v229;
  ((void (*)(uint64_t, char *, uint64_t))v350)(v252 + v353, v245, v229);
  v254 = v318;
  v255 = v319;
  v256 = (ValueMetadata *)v346;
  v257 = v317;
  View.onChange<A>(of:initial:_:)(v251, 0, sub_1000F06E4, v252, v319, v346, v318, v317);
  swift_release(v252);
  sub_100008194(v251, &qword_10015D4A0);
  (*(void (**)(char *, uint64_t))(v325 + 8))(v246, v255);
  if (qword_10015CF30 != -1)
    swift_once(&qword_10015CF30, sub_100105D7C);
  v258 = qword_10016F6C8;
  v259 = unk_10016F6D0;
  v363 = v255;
  v364 = v256;
  v365 = v254;
  v366 = v257;
  v260 = swift_getOpaqueTypeConformance2(&v363, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v261 = v326;
  v262 = v258;
  v263 = v259;
  v264 = v324;
  v265 = v345;
  View.accessibilityIdentifier(_:)(v262, v263, v324, v260);
  (*(void (**)(char *, uint64_t))(v323 + 8))(v265, v264);
  v266 = v354;
  ((void (*)(char *, uint64_t, uint64_t))v352)(v354, v349, v253);
  v267 = swift_allocObject(&unk_1001542E0, v348, v351);
  v268 = v347;
  *(_QWORD *)(v267 + 16) = v355;
  *(_QWORD *)(v267 + 24) = v268;
  ((void (*)(uint64_t, char *, uint64_t))v350)(v267 + v353, v266, v253);
  v269 = sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v362[7] = v260;
  v362[8] = v269;
  v270 = v330;
  v271 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v330);
  v272 = v335;
  static TaskPriority.userInitiated.getter(v271);
  v273 = v327;
  View.task(priority:_:)(v272, &unk_100164B08, v267, v270, v271);
  v274 = swift_release(v267);
  (*(void (**)(char *, uint64_t, __n128))(v336 + 8))(v272, v337, v274);
  (*(void (**)(char *, uint64_t))(v328 + 8))(v261, v270);
  v275 = sub_100003B3C(&qword_10015D458, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
  v362[5] = v271;
  v362[6] = v275;
  v276 = v332;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v332);
  v277 = v331;
  v278 = *(void (**)(char *, char *, uint64_t))(v331 + 16);
  v279 = v329;
  v278(v329, v273, v276);
  v280 = *(void (**)(char *, uint64_t))(v277 + 8);
  v280(v273, v276);
  v278(v338, v279, v276);
  return ((uint64_t (*)(char *, uint64_t))v280)(v279, v276);
}

uint64_t sub_1000E95C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TupleTypeMetadata2;
  uint64_t v23;
  uint64_t WitnessTable;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t TupleTypeMetadata;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  char *v109;
  __n128 v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  void (*v116)(char *, uint64_t);
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t OpaqueTypeConformance2;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  __n128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  void (*v139)(char *, char *, uint64_t);
  void (*v140)(char *, uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[18];
  _QWORD v173[3];
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;

  v159 = a1;
  v166 = a4;
  v164 = sub_100003E70(&qword_10015D4A0);
  __chkstk_darwin(v164);
  v165 = (uint64_t)&v144 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorScheme(0);
  v162 = *(_QWORD *)(v7 - 8);
  v163 = v7;
  __chkstk_darwin(v7);
  v161 = (char *)&v144 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v160 = (uint64_t)&v144 - v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v13 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v14 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v13, &unk_1001199D4, &unk_1001199DC);
  v15 = swift_getAssociatedTypeWitness(255, v14);
  v16 = swift_getAssociatedConformanceWitness(v14, v13, v15, &unk_100118198, &unk_1001181B0);
  type metadata accessor for HeroImage(255, v15, v16, v17);
  v19 = type metadata accessor for HeroImageLandscape(255, a2, a3, v18);
  type metadata accessor for ModifiedContent(255, v19, &type metadata for _FrameLayout);
  v169 = type metadata accessor for _ConditionalContent(255);
  v147 = a2;
  v148 = a3;
  v21 = type metadata accessor for EventDetailModule(255, a2, a3, v20);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for HeroImagePlaceholder, v21, 0, 0);
  v23 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v23);
  type metadata accessor for VStack(255, v23, WitnessTable);
  v25 = sub_1000034AC(&qword_100164A70);
  v26 = type metadata accessor for ModifiedContent(255, v21, &type metadata for _PaddingLayout);
  v27 = swift_getTupleTypeMetadata2(255, v25, v26, 0, 0);
  v28 = type metadata accessor for TupleView(255, v27);
  v29 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v28);
  v30 = type metadata accessor for HStack(255, v28, v29);
  type metadata accessor for ModifiedContent(255, v30, &type metadata for _FrameLayout);
  v31 = type metadata accessor for _ConditionalContent(255);
  v32 = type metadata accessor for Group(255, v31);
  v33 = sub_1000034AC(&qword_100164A78);
  v34 = type metadata accessor for ModifiedContent(255, v32, v33);
  v35 = sub_1000034AC(&qword_100164A80);
  v36 = type metadata accessor for ModifiedContent(255, v34, v35);
  v174 = sub_1000034AC(&qword_100161878);
  v175 = type metadata accessor for GuideModule(255, a2, a3, v37);
  v176 = sub_1000034AC(&qword_100164A88);
  v39 = type metadata accessor for LineupModule(255, v13, v14, v38);
  v40 = type metadata accessor for ModifiedContent(255, v39, &type metadata for _PaddingLayout);
  v177 = type metadata accessor for Optional(255, v40);
  v178 = sub_1000034AC(&qword_100164A90);
  v179 = sub_1000034AC(&qword_100164A98);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 6);
  v42 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  v43 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v42);
  v44 = type metadata accessor for VStack(255, v42, v43);
  v45 = type metadata accessor for ModifiedContent(255, v44, &type metadata for PaddingModifier);
  v46 = sub_1000034AC(&qword_10015E328);
  v47 = type metadata accessor for ModifiedContent(255, v45, v46);
  v48 = swift_getTupleTypeMetadata2(255, v36, v47, 0, 0);
  v49 = type metadata accessor for TupleView(255, v48);
  v50 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v49);
  v51 = type metadata accessor for VStack(255, v49, v50);
  v52 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v51);
  v54 = type metadata accessor for ObservableScrollView(255, v51, v52, v53);
  v55 = swift_getTupleTypeMetadata2(255, v169, v54, 0, 0);
  v56 = type metadata accessor for TupleView(255, v55);
  v57 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v56);
  v58 = type metadata accessor for ZStack(0, v56, v57);
  v144 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v60 = (char *)&v144 - v59;
  v61 = type metadata accessor for ModifiedContent(0, v58, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v62 = *(_QWORD *)(v61 - 8);
  v146 = v61;
  v149 = v62;
  __chkstk_darwin(v61);
  v167 = (char *)&v144 - v63;
  v64 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v58);
  v173[1] = v64;
  v173[2] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  v169 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v61);
  v174 = v61;
  v175 = v169;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v174, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 0);
  v66 = sub_1000034AC(&qword_100164AA0);
  v67 = type metadata accessor for ModifiedContent(0, OpaqueTypeMetadata2, v66);
  v150 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v145 = (uint64_t)&v144 - v68;
  v151 = v69;
  v70 = type metadata accessor for ModifiedContent(0, v69, v46);
  v154 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v152 = (char *)&v144 - v71;
  v72 = sub_1000034AC(&qword_1001609A8);
  v157 = v70;
  v158 = type metadata accessor for ModifiedContent(0, v70, v72);
  v156 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v153 = (char *)&v144 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v74);
  v155 = (char *)&v144 - v75;
  v77 = static Alignment.top.getter(v76);
  v78 = v147;
  v79 = v148;
  v172[8] = v147;
  v172[9] = v148;
  v80 = v159;
  v172[10] = v159;
  ZStack.init(alignment:content:)(v77);
  v81 = v78;
  v168 = type metadata accessor for EventView(0, v78, v79, v82);
  v83 = v80;
  v86 = sub_1000E6A48(v168, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v84, v85);
  v87 = sub_1000E2990();
  v88 = swift_release(v86);
  v89 = static SafeAreaRegions.all.getter(v88);
  View.ignoresSafeArea(_:edges:)(v89, v87, v58, v64);
  (*(void (**)(char *, uint64_t))(v144 + 8))(v60, v58);
  v91 = *(_QWORD *)(v83 + 48);
  v90 = *(_QWORD *)(v83 + 56);
  type metadata accessor for MainActor(0);
  swift_retain(v90);
  v93 = static MainActor.shared.getter(v92);
  v94 = (_QWORD *)swift_allocObject(&unk_100154358, 48, 7);
  v94[2] = v93;
  v94[3] = &protocol witness table for MainActor;
  v94[4] = v91;
  v94[5] = v90;
  swift_retain(v90);
  v96 = static MainActor.shared.getter(v95);
  v97 = (_QWORD *)swift_allocObject(&unk_100154380, 48, 7);
  v97[2] = v96;
  v97[3] = &protocol witness table for MainActor;
  v97[4] = v91;
  v97[5] = v90;
  Binding.init(get:set:)(&v174, sub_1000F0C38, v94, sub_10007BA78, v97, &type metadata for Bool);
  v98 = v174;
  v99 = v175;
  LODWORD(v96) = v176;
  v172[2] = v81;
  v172[3] = v79;
  v172[4] = v83;
  v171[2] = v81;
  v171[3] = v79;
  v171[4] = v83;
  v170[2] = v81;
  v170[3] = v79;
  v170[4] = v83;
  v100 = sub_100003E70(&qword_100164B38);
  v101 = sub_100003E70(&qword_100160A98);
  v102 = sub_100003E70(&qword_100164B40);
  v103 = sub_1000F0C70();
  v104 = sub_1000F0D04();
  v105 = sub_1000F0D70();
  v143 = v103;
  v106 = v145;
  v142 = v101;
  v107 = v146;
  v108 = v96;
  v109 = v167;
  sub_10008B2F8(v98, v99, v108, (uint64_t)sub_1000F0C4C, (uint64_t)v172, (uint64_t (*)(uint64_t))sub_1000F0C58, (uint64_t)v171, (uint64_t)sub_1000F0C64, v145, (uint64_t)v170, v146, v100, v142, v102, v169, v143, v104, v105);
  swift_release(v99);
  v110 = swift_release(v98);
  (*(void (**)(char *, uint64_t, __n128))(v149 + 8))(v109, v107, v110);
  v111 = v160;
  sub_10001E08C(v160);
  v112 = v161;
  v113 = v162;
  v114 = v163;
  (*(void (**)(char *, _QWORD, uint64_t))(v162 + 104))(v161, enum case for ColorScheme.light(_:), v163);
  v115 = v112;
  LOBYTE(v112) = static ColorScheme.== infix(_:_:)(v111, v112);
  v116 = *(void (**)(char *, uint64_t))(v113 + 8);
  v116(v115, v114);
  v116((char *)v111, v114);
  if ((v112 & 1) != 0)
  {
    if (qword_10015CE50 != -1)
      swift_once(&qword_10015CE50, sub_1000382A0);
    v117 = &qword_10016F648;
  }
  else
  {
    if (qword_10015CE48 != -1)
      swift_once(&qword_10015CE48, sub_10003828C);
    v117 = &qword_10016F640;
  }
  v118 = *v117;
  swift_retain(*v117);
  v173[0] = v118;
  v120 = static Edge.Set.all.getter(v119);
  v174 = v107;
  v175 = v169;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v174, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
  v122 = sub_100007D40(&qword_100164AA8, &qword_100164AA0, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  v172[16] = OpaqueTypeConformance2;
  v172[17] = v122;
  v123 = v151;
  v124 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v151);
  v125 = v152;
  View.background<A>(_:ignoresSafeAreaEdges:)(v173, v120, v123, &type metadata for Color, v124, &protocol witness table for Color);
  v126 = swift_release(v118);
  v127 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v150 + 8))(v106, v123, v126);
  v128 = static Animation.easeInOut.getter(v127);
  v129 = v165;
  sub_10001DADC(v165);
  v130 = sub_100007D40(&qword_10015E320, &qword_10015E328, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
  v172[14] = v124;
  v172[15] = v130;
  v131 = v157;
  v132 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v157);
  v133 = sub_10007B5F4();
  v134 = v153;
  View.animation<A>(_:value:)(v128, v129, v131, v164, v132, v133);
  swift_release(v128);
  sub_100008194(v129, &qword_10015D4A0);
  (*(void (**)(char *, uint64_t))(v154 + 8))(v125, v131);
  v135 = sub_100007D40(&qword_1001609B8, &qword_1001609A8, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
  v172[12] = v132;
  v172[13] = v135;
  v136 = v158;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v158);
  v138 = v155;
  v137 = v156;
  v139 = *(void (**)(char *, char *, uint64_t))(v156 + 16);
  v139(v155, v134, v136);
  v140 = *(void (**)(char *, uint64_t))(v137 + 8);
  v140(v134, v136);
  v139(v166, v138, v136);
  return ((uint64_t (*)(char *, uint64_t))v140)(v138, v136);
}

uint64_t sub_1000EA1A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t TupleTypeMetadata;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t KeyPath;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, char *, uint64_t);
  void (*v96)(char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __n128 v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  double v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(__int128 *, __int128 *, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __n128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  void (*v166)(char *, uint64_t, uint64_t);
  void (*v167)(uint64_t, uint64_t);
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(char *, uint64_t);
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  void *v209;
  __int128 v210;
  double v211;
  char v212;
  uint64_t v213;
  char v214;
  __int128 v215;
  __int128 v216;
  double v217;
  char v218;
  uint64_t v219;
  char v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  _OWORD v226[4];

  v200 = a1;
  v194 = a5;
  v201 = type metadata accessor for EventView(0, a2, a3, a4);
  v193 = *(_QWORD *)(v201 - 8);
  v191 = *(_QWORD *)(v193 + 64);
  __chkstk_darwin(v201);
  v192 = (char *)&v176 - v7;
  v9 = type metadata accessor for EventDetailModule(255, a2, a3, v8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for HeroImagePlaceholder, v9, 0, 0);
  v11 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v11);
  type metadata accessor for VStack(255, v11, WitnessTable);
  v13 = sub_1000034AC(&qword_100164A70);
  v14 = type metadata accessor for ModifiedContent(255, v9, &type metadata for _PaddingLayout);
  v15 = swift_getTupleTypeMetadata2(255, v13, v14, 0, 0);
  v16 = type metadata accessor for TupleView(255, v15);
  v17 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v16);
  v18 = type metadata accessor for HStack(255, v16, v17);
  type metadata accessor for ModifiedContent(255, v18, &type metadata for _FrameLayout);
  v19 = type metadata accessor for _ConditionalContent(255);
  v20 = type metadata accessor for Group(255, v19);
  v21 = sub_1000034AC(&qword_100164A78);
  v22 = type metadata accessor for ModifiedContent(255, v20, v21);
  v23 = sub_1000034AC(&qword_100164A80);
  v24 = type metadata accessor for ModifiedContent(255, v22, v23);
  *(_QWORD *)&v222 = sub_1000034AC(&qword_100161878);
  *((_QWORD *)&v222 + 1) = type metadata accessor for GuideModule(255, a2, a3, v25);
  *(_QWORD *)&v223 = sub_1000034AC(&qword_100164A88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v28 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v29 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v28, &unk_1001199D4, &unk_1001199DC);
  v31 = type metadata accessor for LineupModule(255, v28, v29, v30);
  v32 = type metadata accessor for ModifiedContent(255, v31, &type metadata for _PaddingLayout);
  *((_QWORD *)&v223 + 1) = type metadata accessor for Optional(255, v32);
  *(_QWORD *)&v224 = sub_1000034AC(&qword_100164A90);
  *((_QWORD *)&v224 + 1) = sub_1000034AC(&qword_100164A98);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 6);
  v34 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  v35 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v34);
  v36 = type metadata accessor for VStack(255, v34, v35);
  v37 = type metadata accessor for ModifiedContent(255, v36, &type metadata for PaddingModifier);
  v38 = sub_1000034AC(&qword_10015E328);
  v39 = type metadata accessor for ModifiedContent(255, v37, v38);
  v40 = swift_getTupleTypeMetadata2(255, v24, v39, 0, 0);
  v41 = type metadata accessor for TupleView(255, v40);
  v42 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v41);
  v43 = type metadata accessor for VStack(255, v41, v42);
  v185 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v43);
  v186 = v43;
  v190 = type metadata accessor for ObservableScrollView(0, v43, v185, v44);
  v187 = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190);
  v189 = (uint64_t)&v176 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v188 = (char *)&v176 - v47;
  v48 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v49);
  v51 = (char *)&v176 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = swift_getAssociatedTypeWitness(255, v29);
  v53 = type metadata accessor for Optional(0, v52);
  __chkstk_darwin(v53);
  v181 = (uint64_t)&v176 - v54;
  v55 = swift_getAssociatedConformanceWitness(v29, v28, v52, &unk_100118198, &unk_1001181B0);
  v57 = type metadata accessor for HeroImage(0, v52, v55, v56);
  v179 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v59 = (char *)&v176 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v60);
  v180 = (uint64_t)&v176 - v61;
  v199 = a3;
  v195 = type metadata accessor for HeroImageLandscape(255, a2, a3, v62);
  v63 = type metadata accessor for ModifiedContent(255, v195, &type metadata for _FrameLayout);
  v198 = v57;
  v196 = v63;
  v184 = type metadata accessor for _ConditionalContent(0);
  v182 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v183 = (char *)&v176 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v65);
  v197 = (char *)&v176 - v66;
  v69 = sub_1000E6A48(v201, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v67, v68);
  LOBYTE(v29) = sub_1000E2538();
  swift_release(v69);
  if ((v29 & 1) != 0)
  {
    v178 = (char *)type metadata accessor for HeroImageModel(0, v52, v55, v70);
    v177 = Namespace.wrappedValue.getter(*(_QWORD *)(v200 + 64), v71);
    v72 = v201;
    v75 = sub_1000E6A48(v201, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v73, v74);
    sub_1000E1D18(v181);
    swift_release(v75);
    v78 = sub_1000E6A48(v72, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v76, v77);
    __chkstk_darwin(v78);
    v79 = v199;
    *(&v176 - 2) = a2;
    *(&v176 - 1) = v79;
    KeyPath = swift_getKeyPath(&unk_100113DE8);
    v82 = type metadata accessor for EventViewModel(255, a2, v79, v81);
    v83 = swift_getWitnessTable(&unk_100113950, v82);
    ObservedObject.Wrapper.subscript.getter(&v222, KeyPath, v78, v83);
    swift_release(KeyPath);
    swift_release(v78);
    v84 = v222;
    v85 = *(double *)&v223;
    v88 = sub_1000E6A48(v72, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v86, v87);
    __chkstk_darwin(v88);
    *(&v176 - 2) = a2;
    *(&v176 - 1) = v79;
    v89 = swift_getKeyPath(&unk_100113E58);
    ObservedObject.Wrapper.subscript.getter(&v216, v89, v88, v83);
    swift_release(v89);
    swift_release(v88);
    v90 = (_QWORD *)sub_10009A778(v177, v181, v84, *((uint64_t *)&v84 + 1), v216, *((uint64_t *)&v216 + 1), v85, v217);
    sub_1000C0978(v90, (uint64_t)v59);
    v91 = v198;
    v92 = swift_getWitnessTable(&unk_100112400, v198);
    v93 = v179;
    v94 = v180;
    v95 = *(void (**)(uint64_t, char *, uint64_t))(v179 + 16);
    v95(v180, v59, v91);
    v96 = *(void (**)(char *, uint64_t))(v93 + 8);
    v96(v59, v91);
    v95((uint64_t)v59, (char *)v94, v91);
    v202 = swift_getWitnessTable(&unk_100113790, v195);
    v203 = &protocol witness table for _FrameLayout;
    v97 = v196;
    v98 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v196);
    sub_1000E3BA0((uint64_t)v59, v91, v97, v92, v98);
    v96(v59, v91);
    v99 = ((uint64_t (*)(uint64_t, uint64_t))v96)(v94, v91);
  }
  else
  {
    v100 = v199;
    v181 = type metadata accessor for HeroImageLandscapeModel(0, a2, v199, v70);
    v180 = Namespace.wrappedValue.getter(*(_QWORD *)(v200 + 64), v101);
    v102 = v51;
    v178 = v51;
    v103 = v201;
    v106 = sub_1000E6A48(v201, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v104, v105);
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v102, v106 + *(_QWORD *)(*(_QWORD *)v106 + 160), a2);
    swift_release(v106);
    v109 = sub_1000E6A48(v103, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v107, v108);
    v110 = sub_1000E2A00();
    swift_release(v109);
    v113 = sub_1000E6A48(v103, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v111, v112);
    __chkstk_darwin(v113);
    *(&v176 - 2) = a2;
    *(&v176 - 1) = v100;
    v114 = swift_getKeyPath(&unk_100113DE8);
    v116 = type metadata accessor for EventViewModel(255, a2, v100, v115);
    v117 = swift_getWitnessTable(&unk_100113950, v116);
    ObservedObject.Wrapper.subscript.getter(&v216, v114, v113, v117);
    swift_release(v114);
    swift_release(v113);
    v177 = *((_QWORD *)&v216 + 1);
    v179 = v216;
    v118 = v217;
    v121 = sub_1000E6A48(v103, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v119, v120);
    __chkstk_darwin(v121);
    *(&v176 - 2) = a2;
    *(&v176 - 1) = v100;
    v122 = swift_getKeyPath(&unk_100113CB8);
    ObservedObject.Wrapper.subscript.getter(&v210, v122, v121, v117);
    swift_release(v122);
    swift_release(v121);
    v123 = *((_QWORD *)&v210 + 1);
    v176 = v210;
    v124 = LOBYTE(v211);
    v127 = sub_1000E6A48(v103, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v125, v126);
    __chkstk_darwin(v127);
    *(&v176 - 2) = a2;
    *(&v176 - 1) = v100;
    v128 = swift_getKeyPath(&unk_100113E20);
    ObservedObject.Wrapper.subscript.getter(&v222, v128, v127, v117);
    swift_release(v128);
    swift_release(v127);
    v226[0] = v222;
    v226[1] = v223;
    v226[2] = v224;
    v129 = sub_100061410(v180, (uint64_t)v178, v179, v177, v176, v123, v124, v226, v110, v118);
    v130 = sub_1000E12F8(v129);
    v132 = v131;
    *(_QWORD *)&v222 = v130;
    *((_QWORD *)&v222 + 1) = v131;
    v135 = sub_1000E6A48(v103, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v133, v134);
    v136 = sub_1000E2A00();
    swift_release(v135);
    v138 = static Alignment.top.getter(v137);
    v140 = v139;
    v141 = v195;
    v142 = swift_getWitnessTable(&unk_100113790, v195);
    View.frame(width:height:alignment:)(0, 1, *(_QWORD *)&v136, 0, v138, v140, v141, v142);
    swift_release(v132);
    v143 = *((_QWORD *)&v216 + 1);
    v210 = v216;
    v211 = v217;
    v212 = v218;
    v213 = v219;
    v214 = v220;
    v215 = v221;
    v208 = v142;
    v209 = &protocol witness table for _FrameLayout;
    v144 = v196;
    v145 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v196);
    v146 = *(void (**)(__int128 *, __int128 *, uint64_t))(*(_QWORD *)(v144 - 8) + 16);
    v146(&v222, &v210, v144);
    swift_release(v143);
    v147 = *((_QWORD *)&v222 + 1);
    v210 = v222;
    v211 = *(double *)&v223;
    v212 = BYTE8(v223);
    v213 = v224;
    v214 = BYTE8(v224);
    v215 = v225;
    v146(&v216, &v210, v144);
    v148 = *((_QWORD *)&v216 + 1);
    v210 = v216;
    v211 = v217;
    v212 = v218;
    v213 = v219;
    v214 = v220;
    v215 = v221;
    v149 = v198;
    v150 = swift_getWitnessTable(&unk_100112400, v198);
    sub_1000E3C64((uint64_t)&v210, v149, v144, v150, v145);
    swift_release(v147);
    swift_release(v148);
  }
  v151 = __chkstk_darwin(v99);
  v153 = v199;
  v152 = v200;
  *(&v176 - 4) = a2;
  *(&v176 - 3) = v153;
  *(&v176 - 2) = v152;
  v155 = v192;
  v154 = v193;
  v156 = v201;
  (*(void (**)(char *, __n128))(v193 + 16))(v192, v151);
  v157 = *(unsigned __int8 *)(v154 + 80);
  v158 = (v157 + 32) & ~v157;
  v159 = swift_allocObject(&unk_1001543F8, v158 + v191, v157 | 7);
  *(_QWORD *)(v159 + 16) = a2;
  *(_QWORD *)(v159 + 24) = v153;
  v160 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v154 + 32))(v159 + v158, v155, v156);
  v161 = static Axis.Set.vertical.getter(v160);
  v162 = v189;
  sub_100099298(v161, 0, (void (*)(__n128))sub_1000F0F80, (uint64_t)(&v176 - 6), (uint64_t)sub_1000F0F90, v159, v186, v185, v189);
  v163 = v190;
  v201 = swift_getWitnessTable(&unk_1001103F0, v190);
  v164 = v187;
  v165 = v188;
  v166 = *(void (**)(char *, uint64_t, uint64_t))(v187 + 16);
  v166(v188, v162, v163);
  v167 = *(void (**)(uint64_t, uint64_t))(v164 + 8);
  v167(v162, v163);
  v168 = v182;
  v169 = v183;
  v170 = v197;
  v171 = v184;
  (*(void (**)(char *, char *, uint64_t))(v182 + 16))(v183, v197, v184);
  *(_QWORD *)&v222 = v169;
  v166((char *)v162, (uint64_t)v165, v163);
  *((_QWORD *)&v222 + 1) = v162;
  *(_QWORD *)&v216 = v171;
  *((_QWORD *)&v216 + 1) = v163;
  v172 = swift_getWitnessTable(&unk_100112400, v198);
  v206 = swift_getWitnessTable(&unk_100113790, v195);
  v207 = &protocol witness table for _FrameLayout;
  v173 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v196);
  v204 = v172;
  v205 = v173;
  *(_QWORD *)&v210 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v171);
  *((_QWORD *)&v210 + 1) = v201;
  sub_1000E4768((uint64_t *)&v222, 2uLL, (uint64_t)&v216);
  v167((uint64_t)v165, v163);
  v174 = *(void (**)(char *, uint64_t))(v168 + 8);
  v174(v170, v171);
  v167(v162, v163);
  return ((uint64_t (*)(char *, uint64_t))v174)(v169, v171);
}

void sub_1000EB004(double *a1@<X8>)
{
  *a1 = sub_1000E15A0();
}

uint64_t sub_1000EB02C(double *a1)
{
  return sub_1000E15B4(*a1);
}

void sub_1000EB050(double *a1@<X8>)
{
  *a1 = sub_1000E1754();
}

uint64_t sub_1000EB078(double *a1)
{
  return sub_1000E1768(*a1);
}

uint64_t sub_1000EB09C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000E15F0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000EB0C8(char *a1)
{
  return sub_1000E1604(*a1);
}

uint64_t sub_1000EB0EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t TupleTypeMetadata;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  void (*v52)(char *, uint64_t);
  uint64_t v54;
  char *v55;
  _BYTE v56[16];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v55 = a5;
  v8 = type metadata accessor for EventDetailModule(255, a2, a3, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for HeroImagePlaceholder, v8, 0, 0);
  v10 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v10);
  type metadata accessor for VStack(255, v10, WitnessTable);
  v12 = sub_1000034AC(&qword_100164A70);
  v13 = type metadata accessor for ModifiedContent(255, v8, &type metadata for _PaddingLayout);
  v14 = swift_getTupleTypeMetadata2(255, v12, v13, 0, 0);
  v15 = type metadata accessor for TupleView(255, v14);
  v16 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v15);
  v17 = type metadata accessor for HStack(255, v15, v16);
  type metadata accessor for ModifiedContent(255, v17, &type metadata for _FrameLayout);
  v18 = type metadata accessor for _ConditionalContent(255);
  v19 = type metadata accessor for Group(255, v18);
  v20 = sub_1000034AC(&qword_100164A78);
  v21 = type metadata accessor for ModifiedContent(255, v19, v20);
  v22 = sub_1000034AC(&qword_100164A80);
  v23 = type metadata accessor for ModifiedContent(255, v21, v22);
  v60 = sub_1000034AC(&qword_100161878);
  v61 = type metadata accessor for GuideModule(255, a2, a3, v24);
  v62 = sub_1000034AC(&qword_100164A88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v27 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v28 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v27, &unk_1001199D4, &unk_1001199DC);
  v30 = type metadata accessor for LineupModule(255, v27, v28, v29);
  v31 = type metadata accessor for ModifiedContent(255, v30, &type metadata for _PaddingLayout);
  v63 = type metadata accessor for Optional(255, v31);
  v64 = sub_1000034AC(&qword_100164A90);
  v65 = sub_1000034AC(&qword_100164A98);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 6);
  v33 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v33);
  v35 = type metadata accessor for VStack(255, v33, v34);
  v36 = type metadata accessor for ModifiedContent(255, v35, &type metadata for PaddingModifier);
  v37 = sub_1000034AC(&qword_10015E328);
  v38 = type metadata accessor for ModifiedContent(255, v36, v37);
  v39 = swift_getTupleTypeMetadata2(255, v23, v38, 0, 0);
  v40 = type metadata accessor for TupleView(255, v39);
  v41 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v40);
  v42 = type metadata accessor for VStack(0, v40, v41);
  v43 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v45 = (char *)&v54 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v48 = (char *)&v54 - v47;
  v50 = static HorizontalAlignment.leading.getter(v49);
  v57 = a2;
  v58 = a3;
  v59 = a1;
  VStack.init(alignment:spacing:content:)(v50, 0, 0, sub_1000F1040, v56, v40, v41);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v42);
  v51 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
  v51(v48, v45, v42);
  v52 = *(void (**)(char *, uint64_t))(v43 + 8);
  v52(v45, v42);
  v51(v55, v48, v42);
  return ((uint64_t (*)(char *, uint64_t))v52)(v48, v42);
}

uint64_t sub_1000EB518@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t TupleTypeMetadata2;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  __n128 v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  int v100;
  int v101;
  char *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t);
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  __n128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  void (*v135)(char *, char *, uint64_t);
  void (*v136)(char *, uint64_t);
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t (*v141)(uint64_t, uint64_t);
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t (*v156)(char *, uint64_t);
  char *v157;
  uint64_t WitnessTable;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD v181[6];
  _QWORD v182[8];
  _QWORD v183[15];
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;

  v178 = a1;
  v175 = a4;
  v6 = type metadata accessor for ColorScheme(0);
  v173 = *(_QWORD *)(v6 - 8);
  v174 = v6;
  __chkstk_darwin(v6);
  v172 = (char *)&v143 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v171 = (uint64_t)&v143 - v9;
  v184 = sub_1000034AC(&qword_100161878);
  v185 = type metadata accessor for GuideModule(255, a2, a3, v10);
  v186 = sub_1000034AC(&qword_100164A88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v13 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v14 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v13, &unk_1001199D4, &unk_1001199DC);
  v16 = type metadata accessor for LineupModule(255, v13, v14, v15);
  v17 = type metadata accessor for ModifiedContent(255, v16, &type metadata for _PaddingLayout);
  v187 = type metadata accessor for Optional(255, v17);
  v188 = sub_1000034AC(&qword_100164A90);
  v189 = sub_1000034AC(&qword_100164A98);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 6);
  v19 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  v159 = v19;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v19);
  v20 = type metadata accessor for VStack(0, v19, WitnessTable);
  v161 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v157 = (char *)&v143 - v21;
  v162 = v22;
  v23 = type metadata accessor for ModifiedContent(0, v22, &type metadata for PaddingModifier);
  v165 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v163 = (char *)&v143 - v24;
  v25 = sub_1000034AC(&qword_10015E328);
  v166 = v23;
  v170 = type metadata accessor for ModifiedContent(0, v23, v25);
  v167 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v169 = (char *)&v143 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v164 = (char *)&v143 - v28;
  __chkstk_darwin(v29);
  v168 = (char *)&v143 - v30;
  v179 = type metadata accessor for EventView(0, a2, a3, v31);
  v154 = *(_QWORD *)(v179 - 8);
  v156 = *(uint64_t (**)(char *, uint64_t))(v154 + 64);
  __chkstk_darwin(v179);
  v155 = (char *)&v143 - v32;
  v33 = type metadata accessor for CoordinateSpace(0);
  v152 = *(_QWORD *)(v33 - 8);
  v153 = v33;
  __chkstk_darwin(v33);
  v151 = (char *)&v143 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = a2;
  v176 = a3;
  v36 = type metadata accessor for EventDetailModule(255, a2, a3, v35);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for HeroImagePlaceholder, v36, 0, 0);
  v38 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v39 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v38);
  v40 = type metadata accessor for VStack(255, v38, v39);
  v41 = sub_1000034AC(&qword_100164A70);
  v42 = type metadata accessor for ModifiedContent(255, v36, &type metadata for _PaddingLayout);
  v43 = swift_getTupleTypeMetadata2(255, v41, v42, 0, 0);
  v44 = type metadata accessor for TupleView(255, v43);
  v45 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v44);
  v46 = type metadata accessor for HStack(255, v44, v45);
  v47 = type metadata accessor for ModifiedContent(255, v46, &type metadata for _FrameLayout);
  v48 = type metadata accessor for _ConditionalContent(255);
  v49 = type metadata accessor for Group(0, v48);
  v147 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v51 = (char *)&v143 - v50;
  v52 = sub_1000034AC(&qword_100164A78);
  v53 = type metadata accessor for ModifiedContent(0, v49, v52);
  v54 = *(_QWORD *)(v53 - 8);
  v144 = v53;
  v149 = v54;
  __chkstk_darwin(v53);
  v145 = (uint64_t)&v143 - v55;
  v56 = sub_1000034AC(&qword_100164A80);
  v180 = type metadata accessor for ModifiedContent(0, v53, v56);
  v150 = *(_QWORD *)(v180 - 8);
  __chkstk_darwin(v180);
  v160 = (char *)&v143 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v58);
  v148 = (char *)&v143 - v59;
  __chkstk_darwin(v60);
  v177 = (char *)&v143 - v61;
  v182[2] = a2;
  v182[3] = a3;
  v62 = v178;
  v182[4] = v178;
  v63 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v40);
  v183[13] = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v46);
  v183[14] = &protocol witness table for _FrameLayout;
  v64 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v47);
  v183[11] = v63;
  v183[12] = v64;
  v65 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v48);
  Group<A>.init(content:)(sub_1000F104C, v182, v48, v65);
  v183[10] = v65;
  v66 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v49);
  v67 = sub_1000F1058();
  v143 = v67;
  v69 = (uint64_t)v151;
  v68 = v152;
  v70 = v153;
  (*(void (**)(char *, _QWORD, uint64_t))(v152 + 104))(v151, enum case for CoordinateSpace.local(_:), v153);
  v71 = v145;
  sub_10008B0F0((uint64_t)&type metadata for HeaderContentHeightPreferenceKey, v69, (uint64_t)sub_10005C0B8, 0, v49, (uint64_t)&type metadata for HeaderContentHeightPreferenceKey, v66, v67, v145);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v70);
  (*(void (**)(char *, uint64_t))(v147 + 8))(v51, v49);
  v73 = v154;
  v72 = v155;
  v74 = v179;
  (*(void (**)(char *, uint64_t, uint64_t))(v154 + 16))(v155, v62, v179);
  v75 = *(unsigned __int8 *)(v73 + 80);
  v76 = (v75 + 32) & ~v75;
  v77 = swift_allocObject(&unk_100154420, (char *)v156 + v76, v75 | 7);
  v78 = v146;
  v79 = v176;
  *(_QWORD *)(v77 + 16) = v146;
  *(_QWORD *)(v77 + 24) = v79;
  (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))(v77 + v76, v72, v74);
  v80 = sub_100007D40(&qword_100164B70, &qword_100164A78, (uint64_t)&unk_10010F810);
  v183[8] = v66;
  v183[9] = v80;
  v81 = v144;
  v82 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v144);
  v83 = sub_100003B3C(&qword_10015FD18, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  v84 = v148;
  View.onPreferenceChange<A>(_:perform:)(&type metadata for HeaderContentHeightPreferenceKey, sub_1000F10A0, v77, v81, &type metadata for HeaderContentHeightPreferenceKey, v82, v143, v83);
  v85 = swift_release(v77);
  v86 = v157;
  (*(void (**)(uint64_t, uint64_t, __n128))(v149 + 8))(v71, v81, v85);
  v87 = sub_100007D40(&qword_100164B78, &qword_100164A80, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v183[6] = v82;
  v183[7] = v87;
  v88 = v180;
  v155 = (char *)swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v180);
  v89 = v150;
  v154 = *(_QWORD *)(v150 + 16);
  ((void (*)(char *, char *, uint64_t))v154)(v177, v84, v88);
  v90 = v178;
  v156 = *(uint64_t (**)(char *, uint64_t))(v89 + 8);
  v91 = v156(v84, v88);
  v92 = static HorizontalAlignment.leading.getter(v91);
  v181[2] = v78;
  v181[3] = v176;
  v181[4] = v90;
  v93 = VStack.init(alignment:spacing:content:)(v92, 0, 0, sub_1000F1114, v181, v159, WitnessTable);
  v94 = static Edge.Set.leading.getter(v93);
  v95 = v94;
  v96 = static Edge.Set.trailing.getter(v94);
  v97 = v96;
  v98 = static Edge.Set.bottom.getter(v96);
  v99 = Edge.Set.init(rawValue:)(0);
  v100 = Edge.Set.init(rawValue:)(v99);
  if (Edge.Set.init(rawValue:)(v100 & v95) != v95)
    v99 = Edge.Set.init(rawValue:)(v99 | v95);
  v101 = Edge.Set.init(rawValue:)(v99);
  if (Edge.Set.init(rawValue:)(v101 & v97) != v97)
    v99 = Edge.Set.init(rawValue:)(v99 | v97);
  v102 = v163;
  v103 = Edge.Set.init(rawValue:)(v99);
  if (Edge.Set.init(rawValue:)(v103 & v98) != v98)
    LOBYTE(v99) = Edge.Set.init(rawValue:)(v99 | v98);
  v106 = sub_1000E6A48(v179, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v104, v105);
  v107 = sub_1000E1894();
  v109 = v108;
  v111 = v110;
  v113 = v112;
  swift_release(v106);
  v114 = v162;
  v115 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v162);
  sub_10008B21C(v99, v114, v115, v107, v109, v111, v113);
  (*(void (**)(char *, uint64_t))(v161 + 8))(v86, v114);
  v116 = v171;
  sub_10001E08C(v171);
  v118 = v172;
  v117 = v173;
  v119 = v174;
  (*(void (**)(char *, _QWORD, uint64_t))(v173 + 104))(v172, enum case for ColorScheme.light(_:), v174);
  LOBYTE(v106) = static ColorScheme.== infix(_:_:)(v116, v118);
  v120 = *(void (**)(char *, uint64_t))(v117 + 8);
  v120(v118, v119);
  v120((char *)v116, v119);
  if ((v106 & 1) != 0)
  {
    if (qword_10015CE50 != -1)
      swift_once(&qword_10015CE50, sub_1000382A0);
    v121 = &qword_10016F648;
  }
  else
  {
    if (qword_10015CE48 != -1)
      swift_once(&qword_10015CE48, sub_10003828C);
    v121 = &qword_10016F640;
  }
  v122 = *v121;
  swift_retain(*v121);
  v184 = v122;
  v124 = static Edge.Set.all.getter(v123);
  v125 = sub_100070148();
  v183[4] = v115;
  v183[5] = v125;
  v126 = v166;
  v127 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v166);
  v128 = v164;
  View.background<A>(_:ignoresSafeAreaEdges:)(&v184, v124, v126, &type metadata for Color, v127, &protocol witness table for Color);
  v129 = swift_release(v122);
  (*(void (**)(char *, uint64_t, __n128))(v165 + 8))(v102, v126, v129);
  v130 = sub_100007D40(&qword_10015E320, &qword_10015E328, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
  v183[2] = v127;
  v183[3] = v130;
  v131 = v170;
  v132 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v170);
  v133 = v167;
  v134 = v168;
  v135 = *(void (**)(char *, char *, uint64_t))(v167 + 16);
  v135(v168, v128, v131);
  v136 = *(void (**)(char *, uint64_t))(v133 + 8);
  v136(v128, v131);
  v137 = (uint64_t)v160;
  v138 = v177;
  v139 = v180;
  ((void (*)(char *, char *, uint64_t))v154)(v160, v177, v180);
  v184 = v137;
  v140 = v169;
  v135(v169, v134, v131);
  v185 = (uint64_t)v140;
  v183[0] = v139;
  v183[1] = v131;
  v182[6] = v155;
  v182[7] = v132;
  sub_1000E4768(&v184, 2uLL, (uint64_t)v183);
  v136(v134, v131);
  v141 = (uint64_t (*)(uint64_t, uint64_t))v156;
  v156(v138, v139);
  v136(v140, v131);
  return v141(v137, v139);
}

uint64_t sub_1000EC150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  void (*v63)(char *, uint64_t, uint64_t);
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  char *v72;
  uint64_t WitnessTable;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;

  v85 = a4;
  v7 = sub_1000034AC(&qword_100164A70);
  v9 = type metadata accessor for EventDetailModule(255, a2, a3, v8);
  v10 = type metadata accessor for ModifiedContent(255, v9, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v7, v10, 0, 0);
  v74 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v74);
  v12 = type metadata accessor for HStack(0, v74, WitnessTable);
  v76 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v75 = (char *)&v71 - v13;
  v84 = v14;
  v15 = type metadata accessor for ModifiedContent(0, v14, &type metadata for _FrameLayout);
  v77 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v79 = (uint64_t)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v78 = (char *)&v71 - v18;
  v19 = swift_getTupleTypeMetadata2(255, &type metadata for HeroImagePlaceholder, v9, 0, 0);
  v20 = type metadata accessor for TupleView(255, v19);
  v71 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v20);
  v21 = type metadata accessor for VStack(0, v20, v71);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v72 = (char *)&v71 - v26;
  v80 = v15;
  v27 = type metadata accessor for _ConditionalContent(0);
  v82 = *(_QWORD *)(v27 - 8);
  v83 = v27;
  __chkstk_darwin(v27);
  v81 = (char *)&v71 - v28;
  v29 = a2;
  v30 = a3;
  v32 = type metadata accessor for EventView(0, a2, a3, v31);
  v33 = a1;
  v36 = sub_1000E6A48(v32, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v34, v35);
  LOBYTE(a1) = sub_1000E2538();
  swift_release(v36);
  if ((a1 & 1) != 0)
  {
    v38 = static HorizontalAlignment.center.getter(v37);
    __chkstk_darwin(v38);
    *(&v71 - 4) = v29;
    *(&v71 - 3) = v30;
    *(&v71 - 2) = v33;
    VStack.init(alignment:spacing:content:)(v39, 0, 0, sub_1000F1890, &v71 - 6, v20, v71);
    v79 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v21);
    v40 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
    v41 = v72;
    v40(v72, v24, v21);
    v42 = *(void (**)(char *, uint64_t))(v22 + 8);
    v42(v24, v21);
    v40(v24, v41, v21);
    v43 = v84;
    v86 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v84);
    v87 = &protocol witness table for _FrameLayout;
    v44 = v80;
    v45 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v80);
    v46 = v81;
    sub_1000E3BA0((uint64_t)v24, v21, v44, v79, v45);
    v42(v24, v21);
    v42(v41, v21);
  }
  else
  {
    __chkstk_darwin(v37);
    *(&v71 - 4) = v29;
    *(&v71 - 3) = v30;
    *(&v71 - 2) = v33;
    v48 = static VerticalAlignment.center.getter(v47);
    v49 = v75;
    HStack.init(alignment:spacing:content:)(v48, 0, 0, sub_1000F1884, &v71 - 6, v74, WitnessTable);
    v52 = sub_1000E6A48(v32, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v50, v51);
    v53 = sub_1000E2A00();
    swift_release(v52);
    v55 = static Alignment.center.getter(v54);
    v57 = v56;
    v43 = v84;
    v58 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v84);
    v59 = v79;
    View.frame(width:height:alignment:)(0, 1, *(_QWORD *)&v53, 0, v55, v57, v43, v58);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v49, v43);
    v92 = v58;
    v93 = &protocol witness table for _FrameLayout;
    v44 = v80;
    v60 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v80);
    v61 = v77;
    v62 = v78;
    v63 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
    v63(v78, v59, v44);
    v64 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
    v64(v59, v44);
    v63((char *)v59, (uint64_t)v62, v44);
    v65 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v21);
    v46 = v81;
    sub_1000E3C64(v59, v21, v44, v65, v60);
    v64(v59, v44);
    v64((uint64_t)v62, v44);
  }
  v66 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v21);
  v90 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v43);
  v91 = &protocol witness table for _FrameLayout;
  v67 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v44);
  v88 = v66;
  v89 = v67;
  v68 = v83;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v83);
  v69 = v82;
  (*(void (**)(uint64_t, char *, uint64_t))(v82 + 16))(v85, v46, v68);
  return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v46, v68);
}

uint64_t sub_1000EC748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  uint64_t WitnessTable;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  void (*v40)(char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  char *v52;
  char v53;

  v45 = a4;
  v7 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for EventDetailViewModel(0, v10, v11, v12);
  __chkstk_darwin(v13);
  v43 = (char *)&v42 - v14;
  v16 = type metadata accessor for EventDetailModule(0, a2, a3, v15);
  v44 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v42 - v21;
  v42 = Namespace.wrappedValue.getter(*(_QWORD *)(a1 + 64), v20);
  v24 = type metadata accessor for EventView(0, a2, a3, v23);
  v27 = sub_1000E6A48(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v25, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v27 + *(_QWORD *)(*(_QWORD *)v27 + 160), a2);
  swift_release(v27);
  v30 = sub_1000E6A48(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v28, v29);
  v46 = a2;
  v47 = a3;
  KeyPath = swift_getKeyPath(&unk_100113CB8);
  v33 = type metadata accessor for EventViewModel(255, a2, a3, v32);
  WitnessTable = swift_getWitnessTable(&unk_100113950, v33);
  ObservedObject.Wrapper.subscript.getter(&v51, KeyPath, v30, WitnessTable);
  swift_release(KeyPath);
  swift_release(v30);
  v35 = v43;
  sub_10003AB28(v42, (uint64_t)v9, v51, (uint64_t)v52, v53, a2, a3, v43);
  sub_1000A0DE0((uint64_t)v35, a2, a3, v36, (uint64_t)v18);
  v37 = swift_getWitnessTable(&unk_1001108E0, v16);
  v38 = v44;
  v39 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  v39(v22, v18, v16);
  v40 = *(void (**)(char *, uint64_t))(v38 + 8);
  v40(v18, v16);
  v39(v18, v22, v16);
  v52 = v18;
  v50[0] = &type metadata for HeroImagePlaceholder;
  v50[1] = v16;
  v48 = sub_1000C18EC();
  v49 = v37;
  sub_1000E4768(&v51, 2uLL, (uint64_t)v50);
  v40(v22, v16);
  return ((uint64_t (*)(char *, uint64_t))v40)(v18, v16);
}

uint64_t sub_1000EC9E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  uint64_t WitnessTable;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  void *v69;
  uint64_t *v70;
  char *v71;
  char v72;

  v60 = a4;
  v7 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for EventDetailViewModel(0, v10, v11, v12);
  __chkstk_darwin(v13);
  v56 = (char *)&v53 - v14;
  v16 = type metadata accessor for EventDetailModule(0, a2, a3, v15);
  v59 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v55 = (uint64_t)&v53 - v17;
  v18 = type metadata accessor for ModifiedContent(0, v16, &type metadata for _PaddingLayout);
  v58 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v21);
  v57 = (char *)&v53 - v23;
  v54 = Namespace.wrappedValue.getter(*(_QWORD *)(a1 + 64), v22);
  v25 = type metadata accessor for EventView(0, a2, a3, v24);
  v28 = sub_1000E6A48(v25, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v26, v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v28 + *(_QWORD *)(*(_QWORD *)v28 + 160), a2);
  swift_release(v28);
  v31 = sub_1000E6A48(v25, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v29, v30);
  v61 = a2;
  v62 = a3;
  KeyPath = swift_getKeyPath(&unk_100113CB8);
  v34 = type metadata accessor for EventViewModel(255, a2, a3, v33);
  WitnessTable = swift_getWitnessTable(&unk_100113950, v34);
  ObservedObject.Wrapper.subscript.getter(&v70, KeyPath, v31, WitnessTable);
  swift_release(KeyPath);
  swift_release(v31);
  v36 = v56;
  sub_10003AB28(v54, (uint64_t)v9, (uint64_t)v70, (uint64_t)v71, v72, a2, a3, v56);
  v37 = v55;
  v39 = sub_1000A0DE0((uint64_t)v36, a2, a3, v38, v55);
  v40 = static Edge.Set.trailing.getter(v39);
  v43 = sub_1000E6A48(v25, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v41, v42);
  sub_1000E1894();
  v45 = v44;
  swift_release(v43);
  v46 = swift_getWitnessTable(&unk_1001108E0, v16);
  View.padding(_:_:)(v40, v45, 0, v16, v46);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v37, v16);
  v68 = v46;
  v69 = &protocol witness table for _PaddingLayout;
  v47 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  v49 = v57;
  v48 = v58;
  v50 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  v50(v57, v20, v18);
  v51 = *(void (**)(char *, uint64_t))(v48 + 8);
  v51(v20, v18);
  v66 = 0;
  v67 = 1;
  v70 = &v66;
  v50(v20, v49, v18);
  v71 = v20;
  v65[0] = sub_100003E70(&qword_100164A70);
  v65[1] = v18;
  v63 = sub_10005C954(&qword_100164BF0, &qword_100164A70, (void (*)(void))sub_1000C18EC);
  v64 = v47;
  sub_1000E4768((uint64_t *)&v70, 2uLL, (uint64_t)v65);
  v51(v49, v18);
  return ((uint64_t (*)(char *, uint64_t))v51)(v20, v18);
}

double sub_1000ECDA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v4 = *(double *)(a1 + 8);
  v5 = type metadata accessor for EventView(0, a3, a4, a4);
  v8 = sub_1000E6A48(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v6, v7);
  sub_1000E1768(v4);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

uint64_t sub_1000ECDF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t KeyPath;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, char *, uint64_t);
  void (*v83)(uint64_t, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t);
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(_QWORD, _QWORD, _QWORD);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(__int128 *, __int128 *, uint64_t);
  uint64_t v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  double v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  __n128 v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  double v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  uint64_t result;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t (**v283)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void (*v287)(uint64_t, char *, uint64_t);
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _QWORD *v293;
  uint64_t WitnessTable;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  uint64_t *v321;
  uint64_t v322;
  __int128 v323;
  __int128 v324;
  char *v325;
  void (*v326)(uint64_t, char *, uint64_t);
  __int128 v327;
  _BYTE v328[40];
  char v329;
  __int128 v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  __int128 v335;
  __int128 v336;
  char v337;
  uint64_t v338;
  void *v339;
  __int128 v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  __int128 v345;
  __int128 v346;
  char v347;
  uint64_t v348;
  uint64_t v349;
  void *v350;
  uint64_t v351;
  void *v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  char v358;
  uint64_t v359;
  __n128 v360[2];
  _BYTE v361[32];
  uint64_t v362;
  uint64_t v363;
  __int128 v364;
  uint64_t v365[3];

  v307 = a4;
  v281 = type metadata accessor for AppModule(0);
  __chkstk_darwin(v281);
  v283 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v275 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_100003E70(&qword_100164B80);
  v300 = *(_QWORD *)(v8 - 8);
  v301 = v8;
  __chkstk_darwin(v8);
  v282 = (uint64_t)&v275 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v303 = sub_100003E70(&qword_100164A98);
  __chkstk_darwin(v303);
  v306 = (uint64_t)&v275 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v316 = (uint64_t)&v275 - v12;
  v276 = sub_100003E70(&qword_100164B88);
  __chkstk_darwin(v276);
  v277 = (char *)&v275 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v280 = sub_100003E70(&qword_100164B90);
  __chkstk_darwin(v280);
  v279 = (uint64_t)&v275 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003E70(&qword_100164B98);
  v296 = *(_QWORD *)(v15 - 8);
  v297 = v15;
  __chkstk_darwin(v15);
  v278 = (char *)&v275 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v302 = sub_100003E70(&qword_100164A90);
  __chkstk_darwin(v302);
  v304 = (uint64_t)&v275 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v314 = (uint64_t)&v275 - v19;
  v299 = sub_100003E70(&qword_100164A88);
  __chkstk_darwin(v299);
  v305 = (uint64_t)&v275 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v321 = (uint64_t *)((char *)&v275 - v22);
  WitnessTable = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v23);
  v295 = (char *)&v275 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for GuideViewModel(0, a2, a3, v25);
  __chkstk_darwin(v26);
  v293 = (uint64_t *)((char *)&v275 - v27);
  v313 = type metadata accessor for GuideModule(0, a2, a3, v28);
  v292 = *(_QWORD *)(v313 - 8);
  __chkstk_darwin(v313);
  v322 = (uint64_t)&v275 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v320 = (char *)&v275 - v31;
  v317 = a2;
  v315 = a3;
  v33 = type metadata accessor for EventView(0, a2, a3, v32);
  v34 = *(_QWORD *)(v33 - 8);
  v308 = *(_QWORD *)(v34 + 64);
  __chkstk_darwin(v33);
  v309 = (char *)&v275 - v35;
  v36 = sub_100003E70(&qword_100161870);
  v290 = *(_QWORD *)(v36 - 8);
  v291 = v36;
  __chkstk_darwin(v36);
  v289 = (char *)&v275 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100003E70(&qword_10015D400);
  __chkstk_darwin(v38);
  v40 = (char *)&v275 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for ArtistPromotionalAssets(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(_QWORD *)(v42 + 64);
  __chkstk_darwin(v41);
  v288 = (char *)&v275 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v318 = (uint64_t)&v275 - v45;
  v298 = sub_100003E70(&qword_100161878);
  __chkstk_darwin(v298);
  v312 = (uint64_t)&v275 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v319 = (uint64_t)&v275 - v48;
  v49 = v33;
  v310 = a1;
  v52 = sub_1000E6A48(v33, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v50, v51);
  v53 = *(_QWORD *)(v52 + *(_QWORD *)(*(_QWORD *)v52 + 168));
  swift_retain(v53);
  swift_release(v52);
  KeyPath = swift_getKeyPath(&unk_100113E90);
  *(_QWORD *)&v323 = v53;
  v55 = sub_100003B3C(&qword_10015D408, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_10010C7E8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v323, KeyPath, v55);
  swift_release(KeyPath);
  v56 = v53 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess(v53 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets, &v359, 0, 0);
  sub_100007ADC(v56, (uint64_t)v40, &qword_10015D400);
  v57 = swift_release(v53);
  v58 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v42 + 48))(v40, 1, v41, v57);
  v311 = v34;
  if (v58 == 1)
  {
    sub_100008194((uint64_t)v40, &qword_10015D400);
    v59 = 1;
    v60 = v317;
    v61 = v315;
    v62 = v319;
    v63 = v310;
    v65 = v290;
    v64 = v291;
  }
  else
  {
    v66 = v34;
    v67 = *(void (**)(uint64_t, char *, uint64_t))(v42 + 32);
    v286 = v41;
    v287 = v67;
    v68 = v42;
    v67(v318, v40, v41);
    v69 = v49;
    v70 = v310;
    v73 = sub_1000E6A48(v49, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v71, v72);
    v74 = *(_QWORD *)(v73 + *(_QWORD *)(*(_QWORD *)v73 + 168));
    swift_retain(v74);
    swift_release(v73);
    v75 = type metadata accessor for PromotionalAssetsEntryViewModel(0);
    v76 = swift_allocObject(v75, *(unsigned int *)(v75 + 48), *(unsigned __int16 *)(v75 + 52));
    ObservationRegistrar.init()(v76);
    *(_QWORD *)(v76 + 16) = v74;
    *(_QWORD *)&v353 = v76;
    v77 = State.init(wrappedValue:)(&v353, v75);
    v78 = v323;
    LOBYTE(v75) = static Edge.Set.top.getter(v77);
    v79 = EdgeInsets.init(_all:)(33.0);
    v81 = v80;
    v83 = (void (*)(uint64_t, char *, uint64_t))v82;
    v85 = v84;
    v87 = static Edge.Set.horizontal.getter(v86);
    v323 = v78;
    LOBYTE(v324) = v75;
    *((double *)&v324 + 1) = v79;
    v325 = (char *)v81;
    v326 = v83;
    *(_QWORD *)&v327 = v85;
    BYTE8(v327) = 0;
    v328[0] = v87;
    memset(&v328[8], 0, 32);
    v329 = 1;
    v88 = v309;
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v309, v70, v69);
    v89 = v68;
    v285 = v68;
    v90 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
    v91 = v288;
    v92 = v286;
    v90(v288, v318, v286);
    v93 = *(unsigned __int8 *)(v66 + 80);
    v94 = (v93 + 32) & ~v93;
    v95 = *(unsigned __int8 *)(v89 + 80);
    v96 = (v308 + v95 + v94) & ~v95;
    v97 = swift_allocObject(&unk_100154470, v96 + v43, v93 | v95 | 7);
    v61 = v315;
    *(_QWORD *)(v97 + 16) = v317;
    *(_QWORD *)(v97 + 24) = v61;
    (*(void (**)(uint64_t, char *, uint64_t))(v66 + 32))(v97 + v94, v88, v69);
    v287(v97 + v96, v91, v92);
    v98 = sub_100003E70(&qword_100161898);
    v99 = sub_10005C954(&qword_1001618A0, &qword_100161898, (void (*)(void))sub_100097A20);
    v100 = v289;
    View.onTapGesture(count:perform:)(1, sub_1000F1808, v97, v98, v99);
    swift_release(v97);
    v101 = *((_QWORD *)&v323 + 1);
    swift_release(v323);
    v102 = swift_release(v101);
    (*(void (**)(uint64_t, uint64_t, __n128))(v285 + 8))(v318, v92, v102);
    v104 = v290;
    v103 = v291;
    v105 = v319;
    (*(void (**)(uint64_t, char *, uint64_t))(v290 + 32))(v319, v100, v291);
    v59 = 0;
    v60 = v317;
    v62 = v105;
    v49 = v69;
    v63 = v310;
    v64 = v103;
    v65 = v104;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(v62, v59, 1, v64);
  v108 = sub_1000E6A48(v49, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v106, v107);
  v109 = (uint64_t)v295;
  (*(void (**)(char *, uint64_t, uint64_t))(WitnessTable + 16))(v295, v108 + *(_QWORD *)(*(_QWORD *)v108 + 160), v60);
  swift_release(v108);
  v110 = (void (*)(_QWORD, _QWORD, _QWORD))v293;
  sub_100060598(v109, v60, v61, (uint64_t)v293);
  v111 = v322;
  sub_1000C45E8((uint64_t)v110, v60, v61, v112, v322);
  v113 = v313;
  WitnessTable = swift_getWitnessTable(&unk_100112620, v313);
  v114 = v292;
  v293 = *(_QWORD **)(v292 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v293)(v320, v111, v113);
  v295 = *(char **)(v114 + 8);
  ((void (*)(uint64_t, uint64_t))v295)(v111, v113);
  v117 = sub_1000E6A48(v49, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v115, v116);
  v118 = sub_1000E24B4();
  v120 = v119;
  swift_release(v117);
  v318 = v49;
  if (v120)
  {
    v123 = sub_1000E6A48(v49, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v121, v122);
    v124 = sub_1000E19C4();
    v125 = v63;
    v127 = v126;
    swift_release(v123);
    v130 = sub_1000E6A48(v318, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v128, v129);
    type metadata accessor for AttributionViewModel(0);
    v131 = v321;
    sub_1000E2484();
    swift_release(v130);
    *v131 = v124;
    v131[1] = v127;
    v63 = v125;
    v49 = v318;
    v131[2] = v118;
    v131[3] = v120;
    v132 = type metadata accessor for AttributionModule(0);
    v133 = (uint64_t *)((char *)v131 + *(int *)(v132 + 20));
    v134 = type metadata accessor for RemoteViewConfiguration();
    v135 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    *v133 = EnvironmentObject.init()(v134, v135);
    v133[1] = v136;
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 56))(v131, 0, 1, v132);
  }
  else
  {
    v139 = type metadata accessor for AttributionModule(0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v139 - 8) + 56))(v321, 1, 1, v139);
  }
  v140 = sub_1000E6A48(v49, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v137, v138);
  v141 = sub_1000E205C();
  swift_release(v140);
  if ((v141 & 1) != 0)
  {
    v144 = sub_1000E6A48(v49, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v142, v143);
    v145 = sub_1000E2248();
    swift_release(v144);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v61);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v61, v60, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
    v148 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness);
    v149 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v148, &unk_1001199D4, &unk_1001199DC);
    sub_1000BB25C(v145, (uint64_t)v360);
    sub_100042E30(v360, (__n128 *)v361);
    v365[0] = v362;
    v364 = *(_OWORD *)&v361[8];
    v363 = *(_QWORD *)v361;
    v323 = *(_OWORD *)v361;
    v324 = *(_OWORD *)&v361[16];
    v325 = (char *)v362;
    v151 = static Edge.Set.top.getter(v150);
    v153 = type metadata accessor for LineupModule(0, v148, v149, v152);
    v154 = swift_getWitnessTable(&unk_10010CAF8, v153);
    View.padding(_:_:)(v151, 0x4030000000000000, 0, v153, v154);
    sub_100045B40(&v363);
    sub_100005538((uint64_t)&v364);
    sub_100045B40(v365);
    v340 = v353;
    v341 = v354;
    LOBYTE(v342) = BYTE8(v354);
    v343 = v355;
    LOBYTE(v344) = BYTE8(v355);
    v345 = v356;
    v346 = v357;
    v347 = v358;
    v155 = type metadata accessor for ModifiedContent(0, v153, &type metadata for _PaddingLayout);
    v338 = v154;
    v339 = &protocol witness table for _PaddingLayout;
    swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v155);
    v156 = *(void (**)(__int128 *, __int128 *, uint64_t))(*(_QWORD *)(v155 - 8) + 16);
    v156(&v323, &v340, v155);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v353 = v323;
    *(_QWORD *)&v354 = v324;
    BYTE8(v354) = BYTE8(v324);
    *(_QWORD *)&v355 = v325;
    BYTE8(v355) = (_BYTE)v326;
    v356 = v327;
    v357 = *(_OWORD *)v328;
    v358 = v328[16];
    v156(&v340, &v353, v155);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v330 = v340;
    v331 = v341;
    v332 = v342;
    v333 = v343;
    v334 = v344;
    v335 = v345;
    v336 = v346;
    v337 = v347;
    v157 = type metadata accessor for Optional(0, v155);
    (*(void (**)(__int128 *, __int128 *, uint64_t))(*(_QWORD *)(v157 - 8) + 16))(&v353, &v330, v157);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v291 = *((_QWORD *)&v353 + 1);
    v292 = v353;
    v289 = (char *)*((_QWORD *)&v354 + 1);
    v290 = v354;
    v287 = (void (*)(uint64_t, char *, uint64_t))*((_QWORD *)&v355 + 1);
    v288 = (char *)v355;
    v285 = *((_QWORD *)&v356 + 1);
    v286 = v356;
    v158 = *((_QWORD *)&v357 + 1);
    v284 = v357;
    v159 = v358;
  }
  else
  {
    v160 = swift_getAssociatedTypeWitness(255, v61);
    v161 = swift_getAssociatedConformanceWitness(v61, v60, v160, &unk_1001191E8, &unk_100119208);
    v162 = swift_getAssociatedTypeWitness(255, v161);
    v163 = swift_getAssociatedConformanceWitness(v161, v160, v162, &unk_1001199D4, &unk_1001199DC);
    v165 = type metadata accessor for LineupModule(255, v162, v163, v164);
    v166 = type metadata accessor for ModifiedContent(0, v165, &type metadata for _PaddingLayout);
    v353 = 0u;
    v354 = 0u;
    v355 = 0u;
    v356 = 0u;
    v357 = 0u;
    v358 = 0;
    v351 = swift_getWitnessTable(&unk_10010CAF8, v165);
    v352 = &protocol witness table for _PaddingLayout;
    swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v166);
    v167 = type metadata accessor for Optional(0, v166);
    (*(void (**)(__int128 *, __int128 *, uint64_t))(*(_QWORD *)(v167 - 8) + 16))(&v323, &v353, v167);
    v291 = *((_QWORD *)&v323 + 1);
    v292 = v323;
    v289 = (char *)*((_QWORD *)&v324 + 1);
    v290 = v324;
    v287 = v326;
    v288 = v325;
    v285 = *((_QWORD *)&v327 + 1);
    v286 = v327;
    v158 = *(_QWORD *)&v328[8];
    v284 = *(_QWORD *)v328;
    v159 = v328[16];
  }
  v168 = v314;
  v169 = sub_1000E6AB4();
  v170 = sub_1000E3D2C();
  swift_release(v169);
  v171 = v170[2];
  swift_bridgeObjectRelease();
  v172 = v311;
  if (v171)
  {
    v173 = sub_1000E6AB4();
    v174 = sub_1000E3D2C();
    swift_release(v173);
    v175 = sub_1000E6AB4();
    v176 = sub_100003E70(&qword_100164BA0);
    v177 = (uint64_t)v277;
    sub_1000E3EB8((uint64_t)&v277[*(int *)(v176 + 44)]);
    swift_release(v175);
    v180 = sub_1000E6A48(v318, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v178, v179);
    v181 = sub_1000E2820();
    swift_release(v180);
    *(_QWORD *)v177 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000023, 0x80000001001178C0);
    *(_QWORD *)(v177 + 8) = v182;
    *(_BYTE *)(v177 + 16) = v183 & 1;
    *(_QWORD *)(v177 + 24) = v184;
    *(_QWORD *)(v177 + 32) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000029, 0x8000000100115320);
    *(_QWORD *)(v177 + 40) = v185;
    *(_BYTE *)(v177 + 48) = v186 & 1;
    *(_QWORD *)(v177 + 56) = v187;
    *(_QWORD *)(v177 + 64) = v174;
    *(_QWORD *)(v177 + *(int *)(v176 + 48)) = v181;
    v188 = v276;
    v189 = (_QWORD *)(v177 + *(int *)(v276 + 36));
    *v189 = swift_getKeyPath(&unk_100113EB8);
    v190 = sub_100003E70(&qword_10015D490);
    swift_storeEnumTagMultiPayload(v189, v190, 0);
    v191 = (_QWORD *)(v177 + *(int *)(v188 + 40));
    *v191 = swift_getKeyPath(&unk_100113EE8);
    v192 = sub_100003E70(&qword_10015D600);
    swift_storeEnumTagMultiPayload(v191, v192, 0);
    v193 = (uint64_t *)(v177 + *(int *)(v188 + 44));
    v194 = type metadata accessor for RemoteViewConfiguration();
    v195 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    v196 = EnvironmentObject.init()(v194, v195);
    *v193 = v196;
    v193[1] = v197;
    LOBYTE(v194) = static Edge.Set.top.getter(v196);
    v198 = EdgeInsets.init(_all:)(16.0);
    v200 = v199;
    v202 = v201;
    v204 = v203;
    v205 = v279;
    sub_100007ADC(v177, v279, &qword_100164B88);
    v206 = v280;
    v207 = v205 + *(int *)(v280 + 36);
    *(_BYTE *)v207 = v194;
    *(double *)(v207 + 8) = v198;
    *(_QWORD *)(v207 + 16) = v200;
    *(_QWORD *)(v207 + 24) = v202;
    *(_QWORD *)(v207 + 32) = v204;
    *(_BYTE *)(v207 + 40) = 0;
    sub_100008194(v177, &qword_100164B88);
    if (qword_10015CF50 != -1)
      swift_once(&qword_10015CF50, sub_100105E24);
    v208 = qword_10016F708;
    v209 = unk_10016F710;
    v210 = sub_1000F1138();
    v211 = (uint64_t)v278;
    View.accessibilityIdentifier(_:)(v208, v209, v206, v210);
    sub_100008194(v205, &qword_100164B90);
    sub_100007A98(v211, v168, &qword_100164B98);
    v212 = 0;
    v214 = v296;
    v213 = v297;
    v172 = v311;
  }
  else
  {
    v212 = 1;
    v214 = v296;
    v213 = v297;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v214 + 56))(v168, v212, 1, v213);
  v215 = v318;
  v218 = sub_1000E6A48(v318, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v216, v217);
  v219 = *(_QWORD *)(v63 + 72);
  if (v219)
  {
    v220 = v218;
    swift_retain(*(_QWORD *)(v63 + 72));
    v222 = sub_1000BE65C(v221);
    v224 = v223;
    swift_release(v220);
    v225 = swift_release(v219);
    if (!v224)
      goto LABEL_20;
    swift_bridgeObjectRelease();
    v226 = HIBYTE(v224) & 0xF;
    if ((v224 & 0x2000000000000000) == 0)
      v226 = v222 & 0xFFFFFFFFFFFFLL;
    if (!v226)
    {
      v254 = 1;
      v253 = v316;
      v232 = v317;
      v234 = v315;
      v250 = v301;
    }
    else
    {
LABEL_20:
      v227 = v309;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v172 + 16))(v309, v63, v215, v225);
      v228 = *(unsigned __int8 *)(v172 + 80);
      v229 = (v228 + 32) & ~v228;
      v230 = swift_allocObject(&unk_100154448, v229 + v308, v228 | 7);
      v231 = v172;
      v232 = v317;
      v233 = v215;
      v234 = v315;
      *(_QWORD *)(v230 + 16) = v317;
      *(_QWORD *)(v230 + 24) = v234;
      (*(void (**)(uint64_t, char *, uint64_t))(v231 + 32))(v230 + v229, v227, v233);
      v235 = (uint64_t)v283;
      *v283 = sub_1000F1358;
      *(_QWORD *)(v235 + 8) = v230;
      *(_BYTE *)(v235 + 16) = 0;
      v236 = type metadata accessor for RemoteViewConfiguration();
      v237 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
      *(_QWORD *)(v235 + 24) = EnvironmentObject.init()(v236, v237);
      *(_QWORD *)(v235 + 32) = v238;
      v239 = (_QWORD *)(v235 + *(int *)(v281 + 24));
      *v239 = swift_getKeyPath(&unk_100113EE8);
      v240 = sub_100003E70(&qword_10015D600);
      v241 = swift_storeEnumTagMultiPayload(v239, v240, 0);
      LOBYTE(v239) = static Edge.Set.top.getter(v241);
      v242 = EdgeInsets.init(_all:)(16.0);
      v244 = v243;
      v246 = v245;
      v248 = v247;
      v249 = v282;
      sub_100028390(v235, v282, type metadata accessor for AppModule);
      v250 = v301;
      v251 = v249 + *(int *)(v301 + 36);
      *(_BYTE *)v251 = (_BYTE)v239;
      *(double *)(v251 + 8) = v242;
      *(_QWORD *)(v251 + 16) = v244;
      *(_QWORD *)(v251 + 24) = v246;
      *(_QWORD *)(v251 + 32) = v248;
      *(_BYTE *)(v251 + 40) = 0;
      sub_1000283D4(v235, type metadata accessor for AppModule);
      v252 = v249;
      v253 = v316;
      sub_100007A98(v252, v316, &qword_100164B80);
      v254 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v300 + 56))(v253, v254, 1, v250);
    v255 = v312;
    sub_100007ADC(v319, v312, &qword_100161878);
    *(_QWORD *)&v353 = v255;
    v256 = v322;
    v257 = v313;
    ((void (*)(uint64_t, char *, uint64_t))v293)(v322, v320, v313);
    *((_QWORD *)&v353 + 1) = v256;
    v258 = v305;
    sub_100007ADC((uint64_t)v321, v305, &qword_100164A88);
    *(_QWORD *)&v323 = v292;
    *((_QWORD *)&v323 + 1) = v291;
    *(_QWORD *)&v324 = v290;
    *((_QWORD *)&v324 + 1) = v289;
    v325 = v288;
    v326 = v287;
    *(_QWORD *)&v327 = v286;
    *((_QWORD *)&v327 + 1) = v285;
    *(_QWORD *)v328 = v284;
    *(_QWORD *)&v328[8] = v158;
    v328[16] = v159;
    *(_QWORD *)&v354 = v258;
    *((_QWORD *)&v354 + 1) = &v323;
    v259 = v314;
    v260 = v304;
    sub_100007ADC(v314, v304, &qword_100164A90);
    *(_QWORD *)&v355 = v260;
    v261 = v306;
    sub_100007ADC(v253, v306, &qword_100164A98);
    *((_QWORD *)&v355 + 1) = v261;
    *(_QWORD *)&v340 = v298;
    *((_QWORD *)&v340 + 1) = v257;
    v341 = v299;
    v262 = swift_getAssociatedTypeWitness(255, v234);
    v263 = swift_getAssociatedConformanceWitness(v234, v232, v262, &unk_1001191E8, &unk_100119208);
    v264 = swift_getAssociatedTypeWitness(255, v263);
    v265 = swift_getAssociatedConformanceWitness(v263, v262, v264, &unk_1001199D4, &unk_1001199DC);
    v267 = type metadata accessor for LineupModule(255, v264, v265, v266);
    v268 = type metadata accessor for ModifiedContent(255, v267, &type metadata for _PaddingLayout);
    v269 = type metadata accessor for Optional(0, v268);
    v342 = v269;
    v343 = v302;
    v344 = v303;
    *(_QWORD *)&v330 = sub_1000F13A8();
    *((_QWORD *)&v330 + 1) = WitnessTable;
    v331 = sub_1000F145C();
    v349 = swift_getWitnessTable(&unk_10010CAF8, v267);
    v350 = &protocol witness table for _PaddingLayout;
    v348 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v268);
    v332 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v269);
    v333 = sub_100021FE8(&qword_100164BD0, &qword_100164A90, (void (*)(void))sub_1000F14D8);
    v334 = sub_100021FE8(&qword_100164BE0, &qword_100164A98, (void (*)(void))sub_1000F155C);
    sub_1000E4768((uint64_t *)&v353, 6uLL, (uint64_t)&v340);
    sub_100008194(v316, &qword_100164A98);
    sub_100008194(v259, &qword_100164A90);
    sub_100008194((uint64_t)v321, &qword_100164A88);
    v270 = v295;
    ((void (*)(char *, uint64_t))v295)(v320, v257);
    sub_100008194(v319, &qword_100161878);
    sub_100008194(v261, &qword_100164A98);
    sub_100008194(v260, &qword_100164A90);
    sub_1000F15E0(v323, *((uint64_t *)&v323 + 1), v324, *((uint64_t *)&v324 + 1), (uint64_t)v325);
    sub_100008194(v258, &qword_100164A88);
    ((void (*)(uint64_t, uint64_t))v270)(v322, v257);
    return sub_100008194(v312, &qword_100161878);
  }
  else
  {
    v272 = *(_QWORD *)(v63 + 80);
    v273 = type metadata accessor for RemoteViewConfiguration();
    v274 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    result = EnvironmentObject.error()(0, v272, v273, v274);
    __break(1u);
  }
  return result;
}

void sub_1000EE5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v7 = sub_100003E70(&qword_10015D4B8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for EventView(0, a3, a4, v11);
  v15 = sub_1000E6A48(v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v13, v14);
  sub_1000E3128();
  swift_release(v15);
  ArtistPromotionalAssets.eventWithPromotionalAssets.getter(v16);
  v17 = sub_100007D40((unint64_t *)&qword_10015D4C8, &qword_10015D4B8, (uint64_t)&unk_10010CF80);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 152))(v7, v17);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v21 = *(_QWORD *)(a1 + 72);
  if (v21)
  {
    swift_retain(*(_QWORD *)(a1 + 72));
    sub_1000DB03C(v18, v20, 0, 3, 9, 0, 3u, v21);
    swift_bridgeObjectRelease();
    swift_release(v21);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 80);
    v23 = type metadata accessor for RemoteViewConfiguration();
    v24 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v22, v23, v24);
    __break(1u);
  }
}

uint64_t sub_1000EE73C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for URL(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for EventView(0, a2, a3, v9);
  v13 = sub_1000E6A48(v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v11, v12);
  v14 = sub_1000E19C4();
  v16 = v15;
  swift_release(v13);
  v19 = sub_1000E6A48(v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v17, v18);
  sub_1000E2454();
  swift_release(v19);
  v22 = sub_1000E6A48(v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v20, v21);
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    v24 = v22;
    swift_retain(*(_QWORD *)(a1 + 72));
    v26 = sub_1000BE65C(v25);
    v28 = v27;
    swift_release(v24);
    swift_release(v23);
    v29 = type metadata accessor for AppViewModel(0);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    return sub_1000047A0(v14, v16, (uint64_t)v8, v26, v28, 0);
  }
  else
  {
    v31 = *(_QWORD *)(a1 + 80);
    v32 = type metadata accessor for RemoteViewConfiguration();
    v33 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    result = EnvironmentObject.error()(0, v31, v32, v33);
    __break(1u);
  }
  return result;
}

void sub_1000EE8CC(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = v5;
  v9 = sub_1000E6A48(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, a4, a5);
  sub_1000E15B4(a2);
  swift_release(v9);
  v12 = sub_1000E6A48(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v10, v11);
  v13 = sub_1000E24E4();
  swift_release(v12);
  v14 = *(_QWORD *)(v6 + 56);
  if (v13 != *(unsigned __int8 *)(v14 + 16))
  {
    v15 = sub_100003E70(&qword_10015D470);
    sub_100007D40(&qword_10015D478, &qword_10015D470, (uint64_t)&unk_1001101D4);
    v16 = ObservableObject<>.objectWillChange.getter(v15);
    ObservableObjectPublisher.send()();
    swift_release(v16);
  }
  *(_BYTE *)(v14 + 16) = v13;
}

uint64_t sub_1000EE9A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  double v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v34 = a3;
  v38 = a5;
  v7 = type metadata accessor for EventView(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v11 = (char *)&v34 - v10;
  v12 = sub_100003E70(&qword_100164B60);
  v36 = *(_QWORD *)(v12 - 8);
  v37 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100003E70(&qword_100164B38);
  v15 = __chkstk_darwin(v35);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 16))
    v18 = 2;
  else
    v18 = 1;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v11, a1, v7, v15);
  v19 = *(unsigned __int8 *)(v8 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = swift_allocObject(&unk_1001543D0, v20 + v9, v19 | 7);
  v22 = v34;
  *(_QWORD *)(v21 + 16) = a2;
  *(_QWORD *)(v21 + 24) = v22;
  v23 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v21 + v20, v11, v7);
  v24 = static Font.title.getter(v23);
  KeyPath = swift_getKeyPath(&unk_100113DB8);
  v39 = 2;
  v40 = v18;
  v41 = sub_1000F0E90;
  v42 = v21;
  v43 = KeyPath;
  v44 = v24;
  v26 = static Font.Weight.medium.getter(KeyPath);
  v27 = sub_100003E70(&qword_100160A78);
  v28 = sub_10007BAA8();
  View.fontWeight(_:)(*(_QWORD *)&v26, 0, v27, v28);
  swift_release(v24);
  swift_release(KeyPath);
  swift_release(v21);
  LOBYTE(v24) = static Edge.Set.horizontal.getter(v29);
  v31 = v36;
  v30 = v37;
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v17, v14, v37);
  v32 = &v17[*(int *)(v35 + 36)];
  *v32 = v24;
  *(_OWORD *)(v32 + 8) = 0u;
  *(_OWORD *)(v32 + 24) = 0u;
  v32[40] = 1;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v30);
  return sub_100007A98((uint64_t)v17, v38, &qword_100164B38);
}

void sub_1000EEBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = type metadata accessor for EventView(0, a2, a3, a4);
  v8 = sub_1000E6A48(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v6, v7);
  sub_1000E3084();
  swift_release(v8);
  v11 = sub_1000E6A48(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v9, v10);
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    v13 = v11;
    swift_retain(*(_QWORD *)(a1 + 72));
    sub_1000E33D4(0, 1, 0, 3u, v12);
    swift_release(v13);
    swift_release(v12);
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 80);
    v15 = type metadata accessor for RemoteViewConfiguration();
    v16 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v14, v15, v16);
    __break(1u);
  }
}

uint64_t sub_1000EECDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t result;
  double v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[9];

  v7 = type metadata accessor for EventView(0, a2, a3, a4);
  v10 = sub_1000E6A48(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v8, v9);
  v11 = sub_1000E19F4();
  v13 = v12;
  swift_release(v10);
  *(_QWORD *)&v40[0] = v11;
  *((_QWORD *)&v40[0] + 1) = v13;
  v14 = sub_10000CB40();
  v15 = Text.init<A>(_:)(v40, &type metadata for String, v14);
  v17 = v16;
  v19 = v18;
  v21 = v20 & 1;
  v22 = static Font.Weight.semibold.getter();
  v23 = Text.fontWeight(_:)(*(_QWORD *)&v22, 0, v15, v17, v21, v19);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  sub_10000BFF8(v15, v17, v21);
  v30 = swift_bridgeObjectRelease();
  v31 = static Alignment.center.getter(v30);
  sub_1000E546C(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v40, v33, 0.0, 1, 0.0, 1, v31, v32, v23, v25, v29, v27);
  sub_10000BFF8(v23, v25, v29);
  result = swift_bridgeObjectRelease();
  v35 = 0.0;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 16))
    v35 = 1.0;
  v36 = v40[7];
  *(_OWORD *)(a5 + 96) = v40[6];
  *(_OWORD *)(a5 + 112) = v36;
  *(_OWORD *)(a5 + 128) = v40[8];
  v37 = v40[3];
  *(_OWORD *)(a5 + 32) = v40[2];
  *(_OWORD *)(a5 + 48) = v37;
  v38 = v40[5];
  *(_OWORD *)(a5 + 64) = v40[4];
  *(_OWORD *)(a5 + 80) = v38;
  v39 = v40[1];
  *(_OWORD *)a5 = v40[0];
  *(_OWORD *)(a5 + 16) = v39;
  *(double *)(a5 + 144) = v35;
  return result;
}

uint64_t sub_1000EEE84@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t KeyPath;
  double v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  void (*v68)();
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v65 = a4;
  v63 = sub_100003E70(&qword_100164B58);
  __chkstk_darwin(v63);
  v64 = (uint64_t)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for DismissAction(0);
  v8 = *(_QWORD *)(v56 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v56);
  v55 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v55 - v11;
  v13 = sub_100003E70(&qword_100164B60);
  v59 = *(_QWORD *)(v13 - 8);
  v60 = v13;
  __chkstk_darwin(v13);
  v58 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100003E70(&qword_100164B38);
  __chkstk_darwin(v62);
  v57 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v61 = (uint64_t)&v55 - v17;
  v19 = type metadata accessor for EventView(0, a2, a3, v18);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v55 - v21;
  v23 = a1[9];
  if (!v23)
  {
    v52 = a1[10];
    goto LABEL_13;
  }
  swift_retain(a1[9]);
  v24 = sub_1000A3BEC();
  v26 = v25;
  swift_release(v23);
  if (v26 && (swift_bridgeObjectRelease(), (v24 & 1) != 0))
  {
    v50 = _stringCompareWithSmolCheck(_:_:expecting:)(7368801, 0xE300000000000000, 0x6C61646F6DLL, 0xE500000000000000, 0);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, _QWORD *, uint64_t))(v20 + 16))(v22, a1, v19);
    if ((v50 & 1) == 0)
    {
      if (*((_QWORD *)v22 + 9))
        __asm { BR              X10 }
      while (1)
      {
        v52 = *((_QWORD *)v22 + 10);
LABEL_13:
        v53 = type metadata accessor for RemoteViewConfiguration();
        v54 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
        EnvironmentObject.error()(0, v52, v53, v54);
        __break(1u);
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, _QWORD *, uint64_t))(v20 + 16))(v22, a1, v19);
  }
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  if (*(_BYTE *)(a1[7] + 16))
    v27 = 2;
  else
    v27 = 1;
  sub_10001D870((uint64_t)v12);
  v29 = v55;
  v28 = v56;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v55, v12, v56);
  v30 = *(unsigned __int8 *)(v8 + 80);
  v31 = (v30 + 16) & ~v30;
  v32 = swift_allocObject(&unk_1001543A8, v31 + v9, v30 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v32 + v31, v29, v28);
  v33 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v28);
  v34 = static Font.title.getter(v33);
  KeyPath = swift_getKeyPath(&unk_100113DB8);
  v66 = 1;
  v67 = v27;
  v68 = sub_10000BFA8;
  v69 = v32;
  v70 = KeyPath;
  v71 = v34;
  v36 = static Font.Weight.medium.getter(KeyPath);
  v37 = sub_100003E70(&qword_100160A78);
  v38 = sub_10007BAA8();
  v39 = v58;
  View.fontWeight(_:)(*(_QWORD *)&v36, 0, v37, v38);
  swift_release(v34);
  swift_release(KeyPath);
  swift_release(v32);
  LOBYTE(v32) = static Edge.Set.horizontal.getter(v40);
  v42 = v59;
  v41 = v60;
  v43 = (uint64_t)v57;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v57, v39, v60);
  v44 = v62;
  v45 = v43 + *(int *)(v62 + 36);
  *(_BYTE *)v45 = v32;
  *(_OWORD *)(v45 + 8) = 0u;
  *(_OWORD *)(v45 + 24) = 0u;
  *(_BYTE *)(v45 + 40) = 1;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v41);
  v46 = v61;
  sub_100007A98(v43, v61, &qword_100164B38);
  v47 = v64;
  sub_100007ADC(v46, v64, &qword_100164B38);
  swift_storeEnumTagMultiPayload(v47, v63, 0);
  v48 = sub_1000F0C70();
  _ConditionalContent<>.init(storage:)(v47, v44, &type metadata for EmptyView, v48, &protocol witness table for EmptyView);
  return sub_100008194(v46, &qword_100164B38);
}

double sub_1000EF418(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for EventView(0, a3, a4, a4);
  v9 = sub_1000E6A48(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v7, v8);
  sub_1000E1804(v4, v5);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

double sub_1000EF470(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = type metadata accessor for EventView(0, a3, a4, a4);
  v11 = sub_1000E6A48(v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v9, v10);
  sub_1000E1920(v4, v5, v6, v7);
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

uint64_t sub_1000EF4DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t AssociatedConformanceWitness;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _BYTE v41[144];

  v40 = a4;
  v38 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_1001191E8, &unk_100119228);
  v11 = type metadata accessor for TicketView(0, AssociatedTypeWitness, AssociatedConformanceWitness, v10);
  v39 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v35 - v15;
  v18 = type metadata accessor for EventView(0, a2, a3, v17);
  v21 = sub_1000E6A48(v18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v19, v20);
  v36 = sub_1000E19C4();
  v35 = v22;
  swift_release(v21);
  v25 = sub_1000E6A48(v18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v23, v24);
  v26 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v7, v25 + *(_QWORD *)(*(_QWORD *)v25 + 160), a2);
  v27 = swift_release(v25);
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a3 + 192))(a2, a3, v27);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, a2);
  v29 = v28;
  v30 = AssociatedConformanceWitness;
  sub_1000D9F6C(v36, v35, v29, (uint64_t)v41);
  sub_10000ABF0((uint64_t)v41, AssociatedTypeWitness, v30, (uint64_t)v13);
  swift_getWitnessTable(&unk_10010AD80, v11);
  v31 = v39;
  v32 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  v32(v16, v13, v11);
  v33 = *(void (**)(char *, uint64_t))(v31 + 8);
  v33(v13, v11);
  v32(v40, v16, v11);
  return ((uint64_t (*)(char *, uint64_t))v33)(v16, v11);
}

uint64_t sub_1000EF740@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000E15C8();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000EF76C(char *a1)
{
  return sub_1000E15DC(*a1);
}

uint64_t sub_1000EF790@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v37[7];
  char v38;

  v37[0] = a5;
  v8 = type metadata accessor for EventView(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v12 = (char *)v37 - v11;
  v13 = sub_100003E70(&qword_100160A48);
  v14 = swift_allocObject(v13, 64, 7);
  *(_OWORD *)(v14 + 16) = xmmword_10010ACC0;
  v17 = sub_1000E6A48(v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v15, v16);
  *(_QWORD *)(v14 + 56) = type metadata accessor for URL(0);
  sub_100007D80((_QWORD *)(v14 + 32));
  sub_1000E2454();
  v18 = swift_release(v17);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a1, v8, v18);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = swift_allocObject(&unk_100154330, v20 + v10, v19 | 7);
  *(_QWORD *)(v21 + 16) = a2;
  *(_QWORD *)(v21 + 24) = a3;
  v22.n128_f64[0] = (*(double (**)(uint64_t, char *, uint64_t))(v9 + 32))(v21 + v20, v12, v8);
  v23 = static SafeAreaRegions.all.getter(v22);
  v24 = static Edge.Set.all.getter(v23);
  v37[1] = v14;
  v37[2] = 0;
  v37[3] = 0;
  v37[4] = sub_1000F0BA8;
  v37[5] = v21;
  v37[6] = v23;
  v38 = v24;
  v25 = sub_100003E70(&qword_100160A50);
  v26 = type metadata accessor for PresentationDetent(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(_QWORD *)(v27 + 72);
  v29 = *(unsigned __int8 *)(v27 + 80);
  v30 = (v29 + 32) & ~v29;
  v31 = swift_allocObject(v25, v30 + 2 * v28, v29 | 7);
  *(_OWORD *)(v31 + 16) = xmmword_10010A6C0;
  v32 = static PresentationDetent.medium.getter(v31);
  static PresentationDetent.large.getter(v32);
  v33 = sub_100063DA4(v31);
  swift_setDeallocating(v31);
  swift_arrayDestroy(v31 + v30, 2, v26);
  swift_deallocClassInstance(v31, 32, 7);
  v34 = sub_100003E70(&qword_100160A08);
  v35 = sub_10005C954(&qword_100160A10, &qword_100160A08, (void (*)(void))sub_100045694);
  View.presentationDetents(_:)(v33, v34, v35);
  swift_release(v21);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

double sub_1000EF9F0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  if ((a2 & 1) != 0)
  {
    v7 = type metadata accessor for EventView(0, a6, a7, a4);
    v10 = sub_1000E6A48(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v8, v9);
    sub_1000E3364();
    *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000EFA3C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000E1618();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000EFA68(char *a1)
{
  return sub_1000E16B4(*a1);
}

uint64_t sub_1000EFA8C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v5 = type metadata accessor for EventView(0, a1, a2, a3);
  v8 = sub_1000E6A48(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v6, v7);
  v9 = *(_QWORD *)(v8 + *(_QWORD *)(*(_QWORD *)v8 + 168));
  swift_retain(v9);
  swift_release(v8);
  v10 = type metadata accessor for RemoteViewConfiguration();
  v11 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
  result = EnvironmentObject.init()(v10, v11);
  *a4 = v9;
  a4[1] = result;
  a4[2] = v13;
  return result;
}

void sub_1000EFB24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[24];

  v6 = sub_100003E70(&qword_10015D4A0);
  __chkstk_darwin(v6);
  v8 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = type metadata accessor for EventView(0, a2, a3, v9);
  v13 = sub_1000E6A48(v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v11, v12);
  v14 = *(_QWORD *)(a1 + 72);
  if (!v14)
    goto LABEL_6;
  v15 = v13;
  swift_retain(*(_QWORD *)(a1 + 72));
  v16 = sub_1000E38D8();
  swift_release(v15);
  swift_release(v14);
  if ((v16 & 1) != 0)
    sub_1000EFCDC(v10);
  v19 = sub_1000E6A48(v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v17, v18);
  sub_10001DADC((uint64_t)v8);
  v20 = v19 + *(_QWORD *)(*(_QWORD *)v19 + 176);
  swift_beginAccess(v20, v31, 33, 0);
  sub_1000F0790((uint64_t)v8, v20);
  swift_endAccess(v31);
  swift_release(v19);
  v23 = sub_1000E6A48(v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v21, v22);
  v24 = *(_QWORD *)(a1 + 72);
  if (v24)
  {
    v25 = v23;
    swift_retain(*(_QWORD *)(a1 + 72));
    sub_1000E338C(v26);
    swift_release(v25);
    swift_release(v24);
  }
  else
  {
LABEL_6:
    v27 = *(_QWORD *)(a1 + 80);
    v28 = type metadata accessor for RemoteViewConfiguration();
    v29 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v27, v28, v29);
    __break(1u);
  }
}

double sub_1000EFCDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003E70(&qword_100161700);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000E6A48(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v10, v11);
  v13 = sub_1000E1EE4();
  v15 = v14;
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  if (v15)
  {
    v17 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 1, 1, v17);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
    v18 = type metadata accessor for MainActor(0);
    v19 = static MainActor.shared.getter(v18);
    v20 = *(unsigned __int8 *)(v4 + 80);
    v21 = (v20 + 48) & ~v20;
    v22 = (v5 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    v23 = swift_allocObject(&unk_100154308, v22 + 16, v20 | 7);
    *(_QWORD *)(v23 + 16) = v19;
    *(_QWORD *)(v23 + 24) = &protocol witness table for MainActor;
    *(_OWORD *)(v23 + 32) = *(_OWORD *)(a1 + 16);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v23 + v21, v6, a1);
    v24 = (uint64_t *)(v23 + v22);
    *v24 = v13;
    v24[1] = v15;
    v25 = sub_1000F7C84((uint64_t)v9, (uint64_t)&unk_100164B18, v23);
    *(_QWORD *)&result = swift_release(v25).n128_u64[0];
  }
  return result;
}

void sub_1000EFE74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = type metadata accessor for EventView(0, a2, a3, a4);
  v8 = sub_1000E6A48(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v6, v7);
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
  {
    v10 = v8;
    swift_retain(*(_QWORD *)(a1 + 72));
    sub_1000E33D4(0, 2, 0, 3u, v9);
    swift_release(v10);
    swift_release(v9);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 80);
    v12 = type metadata accessor for RemoteViewConfiguration();
    v13 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v11, v12, v13);
    __break(1u);
  }
}

double sub_1000EFF2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;
  _QWORD v5[6];

  v5[2] = a2;
  v5[3] = a3;
  v5[4] = a1;
  v3 = static Animation.default.getter();
  withAnimation<A>(_:_:)(v3, sub_1000F0774, v5, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

double sub_1000EFF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  _BYTE v16[24];

  v5 = sub_100003E70(&qword_10015D4A0);
  __chkstk_darwin(v5);
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for EventView(0, a2, a3, v8);
  v12 = sub_1000E6A48(v9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v10, v11);
  sub_10001DADC((uint64_t)v7);
  v13 = v12 + *(_QWORD *)(*(_QWORD *)v12 + 176);
  swift_beginAccess(v13, v16, 33, 0);
  sub_1000F0790((uint64_t)v7, v13);
  swift_endAccess(v16);
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

uint64_t sub_1000F007C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[5] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[6] = v5;
  v3[7] = v6;
  return swift_task_switch(sub_1000F00EC, v5, v6);
}

uint64_t sub_1000F00EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;

  v5 = type metadata accessor for EventView(0, v4[3], v4[4], a4);
  v8 = sub_1000E6A48(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v6, v7);
  v9 = *(_QWORD *)(v8 + *(_QWORD *)(*(_QWORD *)v8 + 168));
  v4[8] = v9;
  swift_retain(v9);
  swift_release(v8);
  v10 = (uint64_t **)swift_task_alloc(dword_10015EEAC);
  v4[9] = (uint64_t)v10;
  *v10 = v4;
  v10[1] = (uint64_t *)sub_10007A1DC;
  return sub_10003DCB8();
}

uint64_t sub_1000F0174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  v9 = type metadata accessor for MainActor(0);
  v8[7] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v8[8] = v10;
  v8[9] = v11;
  return swift_task_switch(sub_1000F01E8, v10, v11);
}

uint64_t sub_1000F01E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v4[10] = type metadata accessor for EventView(0, v4[5], v4[6], a4);
  v4[11] = sub_1000E6AB4();
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100164B20 + dword_100164B20);
  v5 = (_QWORD *)swift_task_alloc(unk_100164B24);
  v4[12] = v5;
  *v5 = v4;
  v5[1] = sub_1000F0268;
  return v7(v4[3], v4[4]);
}

uint64_t sub_1000F0268()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*v0 + 96));
  swift_release(v2);
  return swift_task_switch(sub_1000F02BC, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_1000F02BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t **v5;

  v4[13] = sub_1000E6A48(v4[10], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, a3, a4);
  v5 = (uint64_t **)swift_task_alloc(dword_1001649DC);
  v4[14] = (uint64_t)v5;
  *v5 = v4;
  v5[1] = (uint64_t *)sub_1000F031C;
  return sub_1000E3150();
}

uint64_t sub_1000F031C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*v0 + 112));
  swift_release(v2);
  return swift_task_switch(sub_1000F0370, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_1000F0370()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F03A4@<X0>(char *a1@<X8>)
{
  uint64_t *v1;

  return sub_1000E95C0(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_1000F03B0()
{
  unint64_t result;

  result = qword_100164AF0;
  if (!qword_100164AF0)
  {
    result = swift_getWitnessTable(&unk_1001140C8, &type metadata for EventViewHeightPreferenceKey);
    atomic_store(result, (unint64_t *)&qword_100164AF0);
  }
  return result;
}

uint64_t sub_1000F03F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F10AC(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000EF418, a3, a4);
}

unint64_t sub_1000F0404()
{
  unint64_t result;

  result = qword_100164AF8;
  if (!qword_100164AF8)
  {
    result = swift_getWitnessTable(&unk_100114080, &type metadata for EventViewSafeAreaPreferenceKey);
    atomic_store(result, &qword_100164AF8);
  }
  return result;
}

double sub_1000F044C(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EventView(0, v6, v7, a4) - 8) + 80);
  return sub_1000EF470(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

uint64_t sub_1000F04A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000E15F0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000F04D0(char *a1)
{
  return sub_1000E1604(*a1);
}

uint64_t sub_1000F04F4()
{
  return 16;
}

__n128 sub_1000F0500(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000F0510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F0594((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000EF4DC, a2, a3, a4);
}

uint64_t sub_1000F051C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000E15C8();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000F0548(char *a1)
{
  return sub_1000E15DC(*a1);
}

uint64_t sub_1000F056C()
{
  return 16;
}

__n128 sub_1000F0578(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000F0588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F0594((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000EF790, a2, a3, a4);
}

uint64_t sub_1000F0594(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EventView(0, v5, v6, a4) - 8) + 80);
  return a1(v4 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t sub_1000F05FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000E1618();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000F0628(char *a1)
{
  return sub_1000E16B4(*a1);
}

uint64_t sub_1000F064C()
{
  return 16;
}

__n128 sub_1000F0658(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000F0668@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  type metadata accessor for EventView(0, v4, v5, a1);
  return sub_1000EFA8C(v4, v5, v6, a2);
}

uint64_t sub_1000F06C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F0E9C((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000EFB24, a2, a3, a4);
}

uint64_t sub_1000F06D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F0E9C((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000EFE74, a2, a3, a4);
}

uint64_t sub_1000F06E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F0E9C((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000EFF2C, a2, a3, a4);
}

uint64_t sub_1000F06F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EventView(0, v6, v7, a4) - 8) + 80);
  v9 = v4 + ((v8 + 32) & ~v8);
  v10 = (_QWORD *)swift_task_alloc(dword_100164B04);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_100031054;
  return sub_1000F007C(v9, v6, v7);
}

double sub_1000F0774()
{
  uint64_t *v0;

  return sub_1000EFF8C(v0[4], v0[2], v0[3]);
}

uint64_t sub_1000F0790(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015D4A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F07D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000F0800(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

void sub_1000F0828(uint64_t a1@<X3>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(a1 + 16);
}

void sub_1000F0834(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a1;
  if (v6 != *(unsigned __int8 *)(a5 + 16))
  {
    v7 = sub_100003E70(&qword_10015D470);
    sub_100007D40(&qword_10015D478, &qword_10015D470, (uint64_t)&unk_1001101D4);
    v8 = ObservableObject<>.objectWillChange.getter(v7);
    ObservableObjectPublisher.send()();
    swift_release(v8);
  }
  *(_BYTE *)(a5 + 16) = v6;
}

uint64_t sub_1000F08B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = (int *)type metadata accessor for EventView(0, v4[4], v4[5], a4);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 48) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  swift_unknownObjectRelease(v4[2]);
  v10 = (char *)v4 + v8;
  sub_10000E138(*(_QWORD *)((char *)v4 + v8), *(_QWORD *)((char *)v4 + v8 + 8));
  sub_10000E138(*((_QWORD *)v10 + 3), *((_QWORD *)v10 + 4));
  swift_release(*(_QWORD *)((char *)v4 + v8 + 56));
  swift_release(*(_QWORD *)((char *)v4 + v8 + 72));
  v11 = (_QWORD *)((char *)v4 + v8 + v5[13]);
  v12 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = &v10[v5[14]];
  v15 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*(_QWORD *)v14);
  }
  v17 = &v10[v5[15]];
  v18 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for UserInterfaceSizeClass(0);
    v20 = *(_QWORD *)(v19 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19))
      (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
  }
  else
  {
    swift_release(*(_QWORD *)v17);
  }
  swift_bridgeObjectRelease();
  return swift_deallocObject(v4, ((v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v7 | 7);
}

uint64_t sub_1000F0A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v7 = v4[4];
  v8 = v4[5];
  v9 = *(_QWORD *)(type metadata accessor for EventView(0, v7, v8, a4) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = v4[2];
  v12 = v4[3];
  v13 = (uint64_t)v4 + v10;
  v14 = (_QWORD *)((char *)v4 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8));
  v15 = *v14;
  v16 = v14[1];
  v17 = (_QWORD *)swift_task_alloc(dword_100164B14);
  *(_QWORD *)(v5 + 16) = v17;
  *v17 = v5;
  v17[1] = sub_1000072F4;
  return sub_1000F0174(a1, v11, v12, v13, v15, v16, v7, v8);
}

uint64_t sub_1000F0B48()
{
  return 16;
}

__n128 sub_1000F0B54(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_1000F0B60()
{
  unint64_t result;

  result = qword_100164B28;
  if (!qword_100164B28)
  {
    result = swift_getWitnessTable(&unk_10010DD20, &type metadata for AppleMusicFetcher);
    atomic_store(result, (unint64_t *)&qword_100164B28);
  }
  return result;
}

double sub_1000F0BA8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *(_QWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EventView(0, v9, v10, a4) - 8) + 80);
  return sub_1000EF9F0(a1, a2, a3, a4, v4 + ((v11 + 32) & ~v11), v9, v10);
}

uint64_t sub_1000F0C28@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000EA1A8(v2[4], v2[2], v2[3], a1, a2);
}

void sub_1000F0C38(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(*(_QWORD *)(v1 + 40) + 16);
}

uint64_t sub_1000F0C4C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000EE9A8(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_1000F0C58@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000EECDC(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_1000F0C64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000EEE84(*(_QWORD **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_1000F0C70()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100164B48;
  if (!qword_100164B48)
  {
    v1 = sub_1000034AC(&qword_100164B38);
    v2[0] = sub_1000034AC(&qword_100160A78);
    v2[1] = sub_10007BAA8();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164B48);
  }
  return result;
}

unint64_t sub_1000F0D04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160A90;
  if (!qword_100160A90)
  {
    v1 = sub_1000034AC(&qword_100160A98);
    sub_10007BBF4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160A90);
  }
  return result;
}

unint64_t sub_1000F0D70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164B50;
  if (!qword_100164B50)
  {
    v1 = sub_1000034AC(&qword_100164B40);
    sub_1000F0C70();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164B50);
  }
  return result;
}

uint64_t sub_1000F0DDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for DismissAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000F0E3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000F0E64(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_1000F0E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F0E9C((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000EEBFC, a2, a3, a4);
}

uint64_t sub_1000F0E9C(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EventView(0, v5, v6, a4) - 8) + 80);
  return a1(v4 + ((v7 + 32) & ~v7), v5, v6);
}

void sub_1000F0EFC(double *a1@<X8>)
{
  *a1 = sub_1000E15A0();
}

uint64_t sub_1000F0F24(double *a1)
{
  return sub_1000E15B4(*a1);
}

uint64_t sub_1000F0F48()
{
  return 16;
}

__n128 sub_1000F0F54(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000F0F68()
{
  return 16;
}

__n128 sub_1000F0F74(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000F0F80@<X0>(uint64_t a1@<X3>, char *a2@<X8>)
{
  uint64_t *v2;

  return sub_1000EB0EC(v2[4], v2[2], v2[3], a1, a2);
}

void sub_1000F0F90(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = type metadata accessor for EventView(0, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), a5);
  sub_1000EE8CC(v7, a1, v8, v9, v10);
}

void sub_1000F0FDC(double *a1@<X8>)
{
  *a1 = sub_1000E1754();
}

uint64_t sub_1000F1004(double *a1)
{
  return sub_1000E1768(*a1);
}

uint64_t sub_1000F1028()
{
  return 16;
}

__n128 sub_1000F1034(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000F1040@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000EB518(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000F104C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000EC150(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_1000F1058()
{
  unint64_t result;

  result = qword_100164B68;
  if (!qword_100164B68)
  {
    result = swift_getWitnessTable(&unk_100114038, &type metadata for HeaderContentHeightPreferenceKey);
    atomic_store(result, (unint64_t *)&qword_100164B68);
  }
  return result;
}

uint64_t sub_1000F10A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F10AC(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000ECDA4, a3, a4);
}

uint64_t sub_1000F10AC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EventView(0, v6, v7, a4) - 8) + 80);
  return a2(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

uint64_t sub_1000F1114@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000ECDF8(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_1000F1138()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164BA8;
  if (!qword_100164BA8)
  {
    v1 = sub_1000034AC(&qword_100164B90);
    sub_100007D40(&qword_100164BB0, &qword_100164B88, (uint64_t)&unk_10010C108);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164BA8);
  }
  return result;
}

uint64_t sub_1000F11C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = (int *)type metadata accessor for EventView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = v4 + v8;
  sub_10000E138(*(_QWORD *)(v4 + v8), *(_QWORD *)(v4 + v8 + 8));
  sub_10000E138(*(_QWORD *)(v10 + 24), *(_QWORD *)(v10 + 32));
  swift_release(*(_QWORD *)(v4 + v8 + 56));
  swift_release(*(_QWORD *)(v4 + v8 + 72));
  v11 = (_QWORD *)(v4 + v8 + v5[13]);
  v12 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = (_QWORD *)(v10 + v5[14]);
  v15 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  v17 = (_QWORD *)(v10 + v5[15]);
  v18 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for UserInterfaceSizeClass(0);
    v20 = *(_QWORD *)(v19 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19))
      (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v17, v19);
  }
  else
  {
    swift_release(*v17);
  }
  return swift_deallocObject(v4, v8 + v9, v7 | 7);
}

uint64_t sub_1000F1358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EventView(0, v5, v6, a4) - 8) + 80);
  return sub_1000EE73C(v4 + ((v7 + 32) & ~v7), v5, v6);
}

unint64_t sub_1000F13A8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100164BB8;
  if (!qword_100164BB8)
  {
    v1 = sub_1000034AC(&qword_100161878);
    v2[0] = sub_1000034AC(&qword_100161898);
    v2[1] = sub_10005C954(&qword_1001618A0, &qword_100161898, (void (*)(void))sub_100097A20);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100164BB8);
  }
  return result;
}

unint64_t sub_1000F145C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164BC0;
  if (!qword_100164BC0)
  {
    v1 = sub_1000034AC(&qword_100164A88);
    sub_100003B3C(&qword_100164BC8, type metadata accessor for AttributionModule, (uint64_t)&unk_100114790);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100164BC0);
  }
  return result;
}

unint64_t sub_1000F14D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164BD8;
  if (!qword_100164BD8)
  {
    v1 = sub_1000034AC(&qword_100164B98);
    sub_1000F1138();
    sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164BD8);
  }
  return result;
}

unint64_t sub_1000F155C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164BE8;
  if (!qword_100164BE8)
  {
    v1 = sub_1000034AC(&qword_100164B80);
    sub_100003B3C(&qword_100160B38, type metadata accessor for AppModule, (uint64_t)&unk_10010B250);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100164BE8);
  }
  return result;
}

uint64_t sub_1000F15E0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(a5);
  }
  return result;
}

uint64_t sub_1000F1618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v5 = (int *)type metadata accessor for EventView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v28 = *(_QWORD *)(v6 + 64);
  v9 = type metadata accessor for ArtistPromotionalAssets(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  v13 = v4 + v8;
  sub_10000E138(*(_QWORD *)(v4 + v8), *(_QWORD *)(v4 + v8 + 8));
  sub_10000E138(*(_QWORD *)(v13 + 24), *(_QWORD *)(v13 + 32));
  swift_release(*(_QWORD *)(v4 + v8 + 56));
  swift_release(*(_QWORD *)(v4 + v8 + 72));
  v14 = (_QWORD *)(v4 + v8 + v5[13]);
  v15 = sub_100003E70(&qword_10015D488);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  v17 = (_QWORD *)(v13 + v5[14]);
  v18 = sub_100003E70(&qword_10015D490);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
  }
  else
  {
    swift_release(*v17);
  }
  v20 = (_QWORD *)(v13 + v5[15]);
  v21 = sub_100003E70(&qword_10015D498);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for UserInterfaceSizeClass(0);
    v23 = *(_QWORD *)(v22 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
      (*(void (**)(_QWORD *, uint64_t))(v23 + 8))(v20, v22);
  }
  else
  {
    v24 = swift_release(*v20);
  }
  v25 = (v8 + v28 + v11) & ~v11;
  v26 = v25 + v12;
  (*(void (**)(uint64_t, uint64_t, __n128))(v10 + 8))(v4 + v25, v9, v24);
  return swift_deallocObject(v4, v26, v7 | v11 | 7);
}

void sub_1000F1808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(type metadata accessor for EventView(0, v5, v6, a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArtistPromotionalAssets(0) - 8) + 80);
  sub_1000EE5B0(v4 + v8, v4 + ((v8 + v9 + v10) & ~v10), v5, v6);
}

uint64_t sub_1000F1884@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000EC9E4(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000F1890@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000EC748(v1[4], v1[2], v1[3], a1);
}

ValueMetadata *type metadata accessor for EventViewSafeAreaPreferenceKey()
{
  return &type metadata for EventViewSafeAreaPreferenceKey;
}

ValueMetadata *type metadata accessor for EventViewHeightPreferenceKey()
{
  return &type metadata for EventViewHeightPreferenceKey;
}

ValueMetadata *type metadata accessor for HeaderContentHeightPreferenceKey()
{
  return &type metadata for HeaderContentHeightPreferenceKey;
}

uint64_t sub_1000F18D8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t TupleTypeMetadata;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t OpaqueTypeConformance2;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  ValueMetadata *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v1 = *a1;
  v2 = a1[1];
  v97 = type metadata accessor for NavigationPath(255);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &unk_1001191E8, &unk_100119208);
  v5 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness);
  v6 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v5, &unk_1001199D4, &unk_1001199DC);
  v7 = swift_getAssociatedTypeWitness(255, v6);
  v8 = swift_getAssociatedConformanceWitness(v6, v5, v7, &unk_100118198, &unk_1001181B0);
  type metadata accessor for HeroImage(255, v7, v8, v9);
  v11 = type metadata accessor for HeroImageLandscape(255, v1, v2, v10);
  type metadata accessor for ModifiedContent(255, v11, &type metadata for _FrameLayout);
  v96 = type metadata accessor for _ConditionalContent(255);
  v13 = type metadata accessor for EventDetailModule(255, v1, v2, v12);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for HeroImagePlaceholder, v13, 0, 0);
  v15 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v15);
  type metadata accessor for VStack(255, v15, WitnessTable);
  v17 = sub_1000034AC(&qword_100164A70);
  v18 = type metadata accessor for ModifiedContent(255, v13, &type metadata for _PaddingLayout);
  v19 = swift_getTupleTypeMetadata2(255, v17, v18, 0, 0);
  v20 = type metadata accessor for TupleView(255, v19);
  v21 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v20);
  v22 = type metadata accessor for HStack(255, v20, v21);
  type metadata accessor for ModifiedContent(255, v22, &type metadata for _FrameLayout);
  v23 = type metadata accessor for _ConditionalContent(255);
  v24 = type metadata accessor for Group(255, v23);
  v25 = sub_1000034AC(&qword_100164A78);
  v26 = type metadata accessor for ModifiedContent(255, v24, v25);
  v27 = sub_1000034AC(&qword_100164A80);
  v28 = type metadata accessor for ModifiedContent(255, v26, v27);
  sub_1000034AC(&qword_100161878);
  type metadata accessor for GuideModule(255, v1, v2, v29);
  v100 = sub_1000034AC(&qword_100164A88);
  v31 = type metadata accessor for LineupModule(255, v5, v6, v30);
  v32 = type metadata accessor for ModifiedContent(255, v31, &type metadata for _PaddingLayout);
  v101 = type metadata accessor for Optional(255, v32);
  v102 = sub_1000034AC(&qword_100164A90);
  v103 = sub_1000034AC(&qword_100164A98);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 6);
  v34 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  v35 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v34);
  v36 = type metadata accessor for VStack(255, v34, v35);
  v37 = type metadata accessor for ModifiedContent(255, v36, &type metadata for PaddingModifier);
  v38 = sub_1000034AC(&qword_10015E328);
  v39 = type metadata accessor for ModifiedContent(255, v37, v38);
  v40 = swift_getTupleTypeMetadata2(255, v28, v39, 0, 0);
  v41 = type metadata accessor for TupleView(255, v40);
  v42 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v41);
  v43 = type metadata accessor for VStack(255, v41, v42);
  v44 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v43);
  v46 = type metadata accessor for ObservableScrollView(255, v43, v44, v45);
  v47 = swift_getTupleTypeMetadata2(255, v96, v46, 0, 0);
  v48 = type metadata accessor for TupleView(255, v47);
  v49 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v48);
  v50 = type metadata accessor for ZStack(255, v48, v49);
  v51 = type metadata accessor for ModifiedContent(255, v50, &type metadata for _SafeAreaRegionsIgnoringLayout);
  swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v50);
  v52 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v51);
  v98 = v51;
  v99 = (ValueMetadata *)v52;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v98, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 0);
  v54 = sub_1000034AC(&qword_100164AA0);
  v55 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v54);
  v56 = type metadata accessor for ModifiedContent(255, v55, v38);
  v57 = sub_1000034AC(&qword_1001609A8);
  v58 = type metadata accessor for ModifiedContent(255, v56, v57);
  v98 = v51;
  v99 = (ValueMetadata *)v52;
  swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
  sub_100007D40(&qword_100164AA8, &qword_100164AA0, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v55);
  sub_100007D40(&qword_10015E320, &qword_10015E328, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v56);
  sub_100007D40(&qword_1001609B8, &qword_1001609A8, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
  v59 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v58);
  v60 = type metadata accessor for NavigationStack(255, v97, v58, v59);
  v61 = sub_1000034AC(&qword_100164AB0);
  v62 = type metadata accessor for ModifiedContent(255, v60, v61);
  v63 = sub_1000034AC(&qword_100164AB8);
  v64 = type metadata accessor for ModifiedContent(255, v62, v63);
  v65 = sub_1000034AC(&qword_100164AC0);
  v66 = type metadata accessor for ModifiedContent(255, v64, v65);
  v67 = sub_1000034AC(&qword_100164AC8);
  v68 = type metadata accessor for ModifiedContent(255, v66, v67);
  v69 = swift_getAssociatedTypeWitness(255, v2);
  v70 = swift_getAssociatedConformanceWitness(v2, v1, v69, &unk_1001191E8, &unk_100119228);
  v72 = type metadata accessor for TicketView(255, v69, v70, v71);
  swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v60);
  sub_100007D40(&qword_100164AD0, &qword_100164AB0, (uint64_t)&unk_10010F810);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v62);
  sub_100007D40(&qword_100164AD8, &qword_100164AB8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v64);
  sub_100007D40(&qword_100164AE0, &qword_100164AC0, (uint64_t)&unk_1001134C0);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v66);
  sub_100007D40(&qword_100164AE8, &qword_100164AC8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v73 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v68);
  v74 = swift_getWitnessTable(&unk_10010AD80, v72);
  v98 = v68;
  v99 = (ValueMetadata *)v72;
  v100 = v73;
  v101 = v74;
  v75 = swift_getOpaqueTypeMetadata2(255, &v98, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v76 = sub_1000034AC(&qword_1001609E0);
  v98 = v68;
  v99 = (ValueMetadata *)v72;
  v100 = v73;
  v101 = v74;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v78 = sub_1000034AC(&qword_100160A08);
  v79 = sub_10005C954(&qword_100160A10, &qword_100160A08, (void (*)(void))sub_100045694);
  v98 = v78;
  v99 = (ValueMetadata *)v79;
  v80 = swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 1);
  v98 = v75;
  v99 = (ValueMetadata *)v76;
  v100 = OpaqueTypeConformance2;
  v101 = v80;
  v81 = swift_getOpaqueTypeMetadata2(255, &v98, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v98 = v75;
  v99 = (ValueMetadata *)v76;
  v100 = OpaqueTypeConformance2;
  v101 = v80;
  v82 = swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v83 = sub_10001DF38();
  v98 = v81;
  v99 = &type metadata for PromotionalAssetsContentView;
  v100 = v82;
  v101 = v83;
  v84 = swift_getOpaqueTypeMetadata2(255, &v98, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v85 = type metadata accessor for ModifiedContent(255, v84, &type metadata for _AppearanceActionModifier);
  v86 = type metadata accessor for ModifiedContent(255, v85, &type metadata for _AppearanceActionModifier);
  v87 = sub_1000034AC(&qword_10015D4A0);
  v98 = v81;
  v99 = &type metadata for PromotionalAssetsContentView;
  v100 = v82;
  v101 = v83;
  swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v85);
  v88 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v86);
  v89 = sub_10007B5F4();
  v98 = v86;
  v99 = (ValueMetadata *)v87;
  v100 = v88;
  v101 = v89;
  v90 = swift_getOpaqueTypeMetadata2(255, &v98, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v91 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v92 = type metadata accessor for ModifiedContent(255, v90, v91);
  v93 = type metadata accessor for _TaskModifier(255);
  v94 = type metadata accessor for ModifiedContent(255, v92, v93);
  v98 = v86;
  v99 = (ValueMetadata *)v87;
  v100 = v88;
  v101 = v89;
  swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  sub_100003B3C((unint64_t *)&qword_10015EA18, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v92);
  sub_100003B3C(&qword_10015D458, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v94);
}

unint64_t sub_1000F233C(uint64_t a1)
{
  unint64_t result;

  result = sub_1000F1058();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000F2360(uint64_t a1)
{
  unint64_t result;

  result = sub_1000F03B0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000F2384(uint64_t a1)
{
  unint64_t result;

  result = sub_1000F0404();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *sub_1000F23A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[6];
  v3 = a1[12];
  v4 = a1[22];
  v5 = a1[23];
  v6 = a1[24];
  v7 = a1[25];
  swift_retain(*a1);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_1000075F4(v4, v5);
  sub_1000075F4(v6, v7);
  return a1;
}

uint64_t sub_1000F2420(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  sub_10000C008(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  return a1;
}

_QWORD *sub_1000F245C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[8];
  v5 = a1[10];
  swift_bridgeObjectRetain(a1[12]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_1000F24C4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for Text.Storage - 1) + 32))(a2, a1);
  return a2;
}

uint64_t sub_1000F2500(uint64_t a1)
{
  sub_10000C008(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t sub_1000F2530(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  sub_10000C008(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return a1;
}

void sub_1000F2580()
{
  qword_100164BF8 = 0x7370747468;
  unk_100164C00 = 0xE500000000000000;
}

void sub_1000F25A0()
{
  strcpy((char *)&qword_100164C08, "www.shazam.com");
  unk_100164C17 = -18;
}

uint64_t sub_1000F25D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  void (*v39)(uint64_t, char *, uint64_t);
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;

  v2 = v1;
  v45 = a1;
  v3 = type metadata accessor for URLComponents(0);
  v44 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v42 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003E70(&qword_100164C20);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v40 - v12;
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v43 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v40 - v19;
  URL.scheme.getter(v18);
  v22 = v21;
  v23 = swift_bridgeObjectRelease();
  if (v22)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, v2, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  }
  else
  {
    if (qword_10015CF20 != -1)
      v23 = swift_once(&qword_10015CF20, sub_1000F2580);
    v46 = 0x2F2F3A7370747468;
    v47 = 0xE800000000000000;
    v24._countAndFlagsBits = URL.absoluteString.getter(v23);
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    URL.init(string:)(v46, v47);
    swift_bridgeObjectRelease();
  }
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v25(v13, 1, v14) == 1)
  {
    sub_100008194((uint64_t)v13, &qword_100165370);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v45, v2, v14);
  }
  else
  {
    v41 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v41(v20, v13, v14);
    URLComponents.init(url:resolvingAgainstBaseURL:)(v20, 1);
    v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
    if (!v27(v7, 1, v3))
    {
      if (qword_10015CF20 != -1)
        swift_once(&qword_10015CF20, sub_1000F2580);
      v28 = qword_100164BF8;
      v29 = unk_100164C00;
      v30 = swift_bridgeObjectRetain(unk_100164C00);
      URLComponents.scheme.setter(v28, v29, v30);
    }
    if (!v27(v7, 1, v3))
    {
      if (qword_10015CF28 != -1)
        swift_once(&qword_10015CF28, sub_1000F25A0);
      v31 = qword_100164C08;
      v32 = unk_100164C10;
      v33 = swift_bridgeObjectRetain(unk_100164C10);
      URLComponents.host.setter(v31, v32, v33);
    }
    if (!v27(v7, 1, v3))
    {
      v34 = URL.path.getter();
      URLComponents.path.setter(v34);
    }
    if (v27(v7, 1, v3))
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v10, 1, 1, v14);
    }
    else
    {
      v35 = v44;
      v36 = v42;
      v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v44 + 16))(v42, v7, v3);
      URLComponents.url.getter(v37);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v3);
    }
    v38 = v43;
    v39 = (void (*)(uint64_t, char *, uint64_t))v41;
    v41(v43, v20, v14);
    if (v25(v10, 1, v14) == 1)
    {
      v39(v45, v38, v14);
      sub_100008194((uint64_t)v10, &qword_100165370);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v38, v14);
      v39(v45, v10, v14);
    }
    return sub_100008194((uint64_t)v7, &qword_100164C20);
  }
}

_QWORD *sub_1000F2A34()
{
  unint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v0 = sub_100047458(0);
  if (!*(_QWORD *)(v0 + 16) || (v1 = sub_100090568(0xD00000000000002DLL, 0x8000000100116170), (v2 & 1) == 0))
  {
    v6 = 0u;
    v7 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_100036668(*(_QWORD *)(v0 + 56) + 32 * v1, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v7 + 1))
  {
LABEL_7:
    sub_100008194((uint64_t)&v6, (uint64_t *)&unk_100161740);
    return _swiftEmptyArrayStorage;
  }
  v3 = sub_100003E70(&qword_10015ECC8);
  if (swift_dynamicCast(&v5, &v6, (char *)&type metadata for Any + 8, v3, 6))
    return (_QWORD *)v5;
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000F2B08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = type metadata accessor for UniversalLinkRouter(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000F6A40(v0);
  if (v4)
  {
    v5 = (_QWORD *)(v0 + *(int *)(v1 + 20));
    v6 = v5[1];
    *(_QWORD *)(v4 + 64) = *v5;
    *(_QWORD *)(v4 + 72) = v6;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v7 = type metadata accessor for Logger(0);
    sub_100011AC4(v7, (uint64_t)qword_10016F728);
    v8 = sub_1000F32A0(v0, (uint64_t)v3);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v19 = v12;
      *(_DWORD *)v11 = 136315138;
      v13 = type metadata accessor for URL(0);
      v14 = sub_100003B3C(&qword_10015ED80, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v15 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
      v18 = sub_1000C7684(v15, v16, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease();
      sub_1000F32E4((uint64_t)v3);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "No remote configuration, not creating remote handle for %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      sub_1000F32E4((uint64_t)v3);
    }

  }
  return v4;
}

id sub_1000F2D40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t inited;
  Class isa;
  _QWORD v20[2];
  _BYTE v21[112];

  v0 = sub_1000F2B08();
  if (v0)
  {
    v1 = v0;
    v2 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
    v3 = JSONEncoder.init()();
    v20[0] = v1;
    v4 = type metadata accessor for RemoteViewConfiguration();
    v5 = sub_100003B3C(&qword_100164C18, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110C94);
    v11 = dispatch thunk of JSONEncoder.encode<A>(_:)(v20, v4, v5);
    v13 = v12;
    swift_release(v3);
    v14 = objc_allocWithZone((Class)SBSRemoteAlertConfigurationContext);
    v15 = objc_msgSend(v14, "init", v20[0]);
    v16 = sub_100003E70(qword_100161750);
    inited = swift_initStackObject(v16, v21);
    *(_OWORD *)(inited + 16) = xmmword_10010ACC0;
    v20[0] = 0xD000000000000013;
    v20[1] = 0x8000000100115B80;
    AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), v20, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 96) = &type metadata for Data;
    *(_QWORD *)(inited + 72) = v11;
    *(_QWORD *)(inited + 80) = v13;
    sub_10003D7AC(v11, v13);
    sub_100102A70(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v15, "setUserInfo:", isa);

    sub_10003653C(v11, v13);
    swift_release(v1);
  }
  else
  {
    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100011AC4(v6, (uint64_t)qword_10016F728);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to encode remote configuration context for alert configuration", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    return 0;
  }
  return v15;
}

id sub_1000F2FBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t inited;
  Class isa;
  _QWORD v21[2];
  _BYTE v22[112];

  v0 = sub_1000F2B08();
  if (v0)
  {
    v1 = v0;
    v2 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
    v3 = JSONEncoder.init()();
    v21[0] = v1;
    v4 = type metadata accessor for RemoteViewConfiguration();
    v5 = sub_100003B3C(&qword_100164C18, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110C94);
    v11 = dispatch thunk of JSONEncoder.encode<A>(_:)(v21, v4, v5);
    v13 = v12;
    swift_release(v3);
    v14 = objc_allocWithZone((Class)NSUserActivity);
    v15 = String._bridgeToObjectiveC()();
    v16 = objc_msgSend(v14, "initWithActivityType:", v15, v21[0]);

    v17 = sub_100003E70(qword_100161750);
    inited = swift_initStackObject(v17, v22);
    *(_OWORD *)(inited + 16) = xmmword_10010ACC0;
    v21[0] = 0xD000000000000013;
    v21[1] = 0x8000000100115B80;
    AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), v21, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 96) = &type metadata for Data;
    *(_QWORD *)(inited + 72) = v11;
    *(_QWORD *)(inited + 80) = v13;
    sub_10003D7AC(v11, v13);
    sub_100102A70(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v16, "setUserInfo:", isa);

    sub_10003653C(v11, v13);
    swift_release(v1);
  }
  else
  {
    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100011AC4(v6, (uint64_t)qword_10016F728);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to encode remote configuration context for user activity", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    return 0;
  }
  return v16;
}

uint64_t type metadata accessor for UniversalLinkRouter(uint64_t a1)
{
  uint64_t result;

  result = qword_100164C80;
  if (!qword_100164C80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UniversalLinkRouter);
  return result;
}

uint64_t sub_1000F32A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UniversalLinkRouter(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F32E4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UniversalLinkRouter(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_1000F3320(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain(v11);
  }
  return a1;
}

uint64_t sub_1000F33B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_1000F33FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_1000F3464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_1000F34E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000F353C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_1000F35A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F35B4);
}

uint64_t sub_1000F35B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000F3634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F3640);
}

uint64_t sub_1000F3640(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1000F36BC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100114128;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

id sub_1000F372C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  NSString v9;
  id v10;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = objc_allocWithZone((Class)ASCAdamID);
  swift_bridgeObjectRetain(v1);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v4 = objc_msgSend(v2, "initWithStringValue:", v3);

  v5 = (void *)ASCLockupContextStandard;
  v6 = *(_QWORD *)(v0 + 24);
  v7 = ASCLockupKindApp;
  v8 = v5;
  swift_bridgeObjectRetain(v6);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v10 = objc_msgSend((id)objc_opt_self(ASCLockupRequest), "_requestWithID:kind:context:productVariantID:", v4, v7, v8, v9);

  return v10;
}

id sub_1000F3838()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  id v11;
  objc_super v13;
  _BYTE v14[16];

  sub_1000054F0((uint64_t)(v0 + 4), (uint64_t)v14);
  v1 = v0[6];
  v2 = v0[7];
  v3 = v0[8];
  v4 = v0[9];
  v5 = (objc_class *)type metadata accessor for AppStoreComponent.AppStoreCoordinator();
  v6 = (char *)objc_allocWithZone(v5);
  v7 = &v6[OBJC_IVAR____TtCV16EventViewService17AppStoreComponent19AppStoreCoordinator_metricsQuery];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_1000054F0((uint64_t)v14, (uint64_t)v7);
  sub_10000E3E4((uint64_t)v14);
  sub_1000075F4(v1, v2);
  sub_1000075F4(v3, v4);
  v8 = v6;
  swift_bridgeObjectRelease();
  v9 = (uint64_t *)&v8[OBJC_IVAR____TtCV16EventViewService17AppStoreComponent19AppStoreCoordinator_onOpen];
  *v9 = v1;
  v9[1] = v2;
  v10 = (uint64_t *)&v8[OBJC_IVAR____TtCV16EventViewService17AppStoreComponent19AppStoreCoordinator_onStateChange];
  *v10 = v3;
  v10[1] = v4;
  sub_1000075F4(v1, v2);
  sub_1000075F4(v3, v4);

  v13.receiver = v8;
  v13.super_class = v5;
  v11 = objc_msgSendSuper2(&v13, "init");
  sub_100007604(v3, v4);
  sub_100007604(v1, v2);
  return v11;
}

id sub_1000F3944()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v8;

  v0 = objc_msgSend(objc_allocWithZone((Class)ASCLockupView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v1 = (void *)objc_opt_self(UIColor);
  v2 = v0;
  v3 = objc_msgSend(v1, "clearColor");
  objc_msgSend(v2, "setBackgroundColor:", v3);

  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = sub_100003E70(&qword_100164D98);
  UIViewRepresentableContext.coordinator.getter(&v8, v4);
  v5 = v8;
  objc_msgSend(v2, "setDelegate:", v8);

  v6 = sub_1000F372C();
  objc_msgSend(v2, "setRequest:", v6);

  return v2;
}

void sub_1000F3A90(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  void (*v10)(uint64_t, __n128);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  unint64_t v34;
  void *v35;
  NSString v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  Swift::String aBlock;
  uint64_t (*v50)(uint64_t);
  void *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;

  v3 = v2;
  v6 = sub_100003E70(&qword_100161700);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void (**)(uint64_t, __n128))(v2
                                               + OBJC_IVAR____TtCV16EventViewService17AppStoreComponent19AppStoreCoordinator_onStateChange);
  if (v10)
    v10(a2, v7);
  v11 = ASCAppStateOpenable;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v14 = v13;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  if (v12 != v15 || v14 != v16)
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v15, v16, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
      goto LABEL_15;
    v19 = ASCAppStatePurchased;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v14 = v21;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    if (v20 != v22 || v14 != v23)
    {
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v14, v22, v23, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
        return;
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease_n(v14, 2);
LABEL_15:
  v26 = v3 + OBJC_IVAR____TtCV16EventViewService17AppStoreComponent19AppStoreCoordinator_onOpen;
  v27 = *(_QWORD *)(v3 + OBJC_IVAR____TtCV16EventViewService17AppStoreComponent19AppStoreCoordinator_onOpen);
  if (v27)
  {
    v28 = *(_QWORD *)(v26 + 8);
    v29 = (void *)objc_opt_self(NSBundle);
    v30 = objc_msgSend(v29, "mainBundle", swift_retain(v28).n128_f64[0]);
    v54._object = (void *)0xE000000000000000;
    v31._object = (void *)0x80000001001179D0;
    v31._countAndFlagsBits = 0xD000000000000026;
    v32._countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    v54._countAndFlagsBits = 0;
    v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, (Swift::String_optional)0, (NSBundle)v30, v32, v54);

    aBlock = v33;
    v34 = sub_10000CB40();
    StringProtocol.localizedUppercase.getter(&type metadata for String, v34);
    swift_bridgeObjectRelease();
    v35 = (void *)objc_opt_self(ASCOfferMetadata);
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v37 = objc_msgSend(v35, "textMetadataWithTitle:subtitle:", v36, 0);

    v38 = objc_allocWithZone((Class)ASCLocalOffer);
    v52 = v27;
    v53 = v28;
    aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
    aBlock._object = (void *)1107296256;
    v50 = sub_10003616C;
    v51 = &unk_1001545C0;
    v39 = _Block_copy(&aBlock);
    v40 = v53;
    sub_1000075F4(v27, v28);
    v41 = v37;
    v42 = objc_msgSend(v38, "initWithMetadata:action:", v41, v39, swift_release(v40).n128_f64[0]);

    _Block_release(v39);
    v43 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v9, 1, 1, v43);
    type metadata accessor for MainActor(0);
    v44 = a1;
    v45 = v42;
    v46 = static MainActor.shared.getter(v45);
    v47 = (_QWORD *)swift_allocObject(&unk_1001545F8, 48, 7);
    v47[2] = v46;
    v47[3] = &protocol witness table for MainActor;
    v47[4] = v44;
    v47[5] = v45;
    v48 = sub_1000F7C84((uint64_t)v9, (uint64_t)&unk_100164D80, (uint64_t)v47);

    sub_100007604(v27, v28);
    swift_release(v48);

  }
}

uint64_t sub_1000F3E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000F3EBC, v7, v8);
}

uint64_t sub_1000F3EBC()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;

  v1 = *(void **)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 32));
  v2 = objc_msgSend(v1, "lockup");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, "lockupWithOffer:", *(_QWORD *)(v0 + 24));

  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(*(id *)(v0 + 16), "setLockup:", v4);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for AppStoreComponent.AppStoreCoordinator()
{
  return objc_opt_self(_TtCV16EventViewService17AppStoreComponent19AppStoreCoordinator);
}

id sub_1000F40B4()
{
  return sub_1000F3944();
}

uint64_t sub_1000F40F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char *v5;
  char *v7;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = sub_100003E70(&qword_100164D98);
  UIViewRepresentableContext.coordinator.getter(&v7, v3);
  v4 = v7;
  v5 = &v7[OBJC_IVAR____TtCV16EventViewService17AppStoreComponent19AppStoreCoordinator_metricsQuery];
  *(_QWORD *)v5 = v2;
  *((_QWORD *)v5 + 1) = v1;
  swift_bridgeObjectRetain(v1);

  return swift_bridgeObjectRelease();
}

id sub_1000F4168@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_1000F3838();
  *a1 = result;
  return result;
}

uint64_t sub_1000F41B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000F47DC();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000F4200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000F47DC();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000F4250(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000F47DC();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

id sub_1000F4274()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  id v6;
  Class isa;
  id v8;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtCV16EventViewService17AppStoreComponent19AppStoreCoordinator_metricsQuery + 8);
  if (!v1)
    return objc_msgSend(objc_allocWithZone((Class)ASCMetricsActivity), "init");
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtCV16EventViewService17AppStoreComponent19AppStoreCoordinator_metricsQuery);
  v3 = sub_100003E70((uint64_t *)&unk_100164D60);
  inited = swift_initStackObject(v3, &v10);
  *(_OWORD *)(inited + 16) = xmmword_10010ACC0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ASCMetricsActivityKeyRedirectURLParameters);
  *(_QWORD *)(inited + 40) = v5;
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v1;
  swift_bridgeObjectRetain(v1);
  sub_100102BB0(inited);
  v6 = objc_allocWithZone((Class)ASCMetricsActivity);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, "initWithFields:", isa);

  return v8;
}

uint64_t sub_1000F4384(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000F4394(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000F439C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000F43D0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_100164D7C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000072F4;
  return sub_1000F3E50(a1, v4, v5, v7, v6);
}

uint64_t destroy for AppStoreComponent(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  result = swift_bridgeObjectRelease(a1[5]);
  if (a1[6])
    result = swift_release(a1[7]);
  if (a1[8])
    return swift_release(a1[9]);
  return result;
}

_QWORD *initializeWithCopy for AppStoreComponent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v8 = a2 + 6;
  v7 = a2[6];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (v7)
  {
    v9 = a2[7];
    a1[6] = v7;
    a1[7] = v9;
    swift_retain(v9);
  }
  else
  {
    *((_OWORD *)a1 + 3) = *v8;
  }
  v10 = a2[8];
  if (v10)
  {
    v11 = a2[9];
    a1[8] = v10;
    a1[9] = v11;
    swift_retain(v11);
  }
  else
  {
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  }
  return a1;
}

_QWORD *assignWithCopy for AppStoreComponent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[6];
  if (a1[6])
  {
    if (v10)
    {
      v11 = a2[7];
      v12 = a1[7];
      a1[6] = v10;
      a1[7] = v11;
      swift_retain(v11);
      swift_release(v12);
      goto LABEL_8;
    }
    swift_release(a1[7]);
  }
  else if (v10)
  {
    v13 = a2[7];
    a1[6] = v10;
    a1[7] = v13;
    swift_retain(v13);
    goto LABEL_8;
  }
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
LABEL_8:
  v14 = a2[8];
  if (!a1[8])
  {
    if (v14)
    {
      v17 = a2[9];
      a1[8] = v14;
      a1[9] = v17;
      swift_retain(v17);
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    return a1;
  }
  if (!v14)
  {
    swift_release(a1[9]);
    goto LABEL_14;
  }
  v15 = a2[9];
  v16 = a1[9];
  a1[8] = v14;
  a1[9] = v15;
  swift_retain(v15);
  swift_release(v16);
  return a1;
}

_QWORD *assignWithTake for AppStoreComponent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[6];
  if (a1[6])
  {
    if (v10)
    {
      v11 = a2[7];
      v12 = a1[7];
      a1[6] = v10;
      a1[7] = v11;
      swift_release(v12);
      goto LABEL_8;
    }
    swift_release(a1[7]);
  }
  else if (v10)
  {
    v13 = a2[7];
    a1[6] = v10;
    a1[7] = v13;
    goto LABEL_8;
  }
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
LABEL_8:
  v14 = a2[8];
  if (!a1[8])
  {
    if (v14)
    {
      v17 = a2[9];
      a1[8] = v14;
      a1[9] = v17;
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    return a1;
  }
  if (!v14)
  {
    swift_release(a1[9]);
    goto LABEL_14;
  }
  v15 = a2[9];
  v16 = a1[9];
  a1[8] = v14;
  a1[9] = v15;
  swift_release(v16);
  return a1;
}

ValueMetadata *type metadata accessor for AppStoreComponent()
{
  return &type metadata for AppStoreComponent;
}

unint64_t sub_1000F4798()
{
  unint64_t result;

  result = qword_100164D88;
  if (!qword_100164D88)
  {
    result = swift_getWitnessTable(&unk_100114174, &type metadata for AppStoreComponent);
    atomic_store(result, (unint64_t *)&qword_100164D88);
  }
  return result;
}

unint64_t sub_1000F47DC()
{
  unint64_t result;

  result = qword_100164DA0;
  if (!qword_100164DA0)
  {
    result = swift_getWitnessTable(&unk_1001141C4, &type metadata for AppStoreComponent);
    atomic_store(result, (unint64_t *)&qword_100164DA0);
  }
  return result;
}

uint64_t sub_1000F4820(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = a1;
  v3 = *(_QWORD *)((char *)&unk_100114268 + v2 * 8);
  v4 = qword_100114290[v2];
  v5 = a2;
  v6 = *(_QWORD *)((char *)&unk_100114268 + v5 * 8);
  v7 = qword_100114290[v5];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, qword_100114290[a2], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

uint64_t sub_1000F48A4(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = 8 * a1;
  v3 = *(_QWORD *)&aLocationmusic_1[v2];
  v4 = *(_QWORD *)&aCalendar_3[v2 + 8];
  v5 = 8 * a2;
  v6 = *(_QWORD *)&aLocationmusic_1[v5];
  v7 = *(_QWORD *)&aCalendar_3[v5 + 8];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, *(_QWORD *)&aCalendar_3[8 * a2 + 8], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

uint64_t sub_1000F4928(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 7368801;
  else
    v3 = 0x6C61646F6DLL;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE300000000000000;
  if ((a2 & 1) != 0)
    v5 = 7368801;
  else
    v5 = 0x6C61646F6DLL;
  if ((a2 & 1) != 0)
    v6 = 0xE300000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1000F49BC(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = a1;
  v3 = *(_QWORD *)&aDefault_3[v2 * 8];
  v4 = qword_100114338[v2];
  v5 = a2;
  v6 = *(_QWORD *)&aDefault_3[v5 * 8];
  v7 = qword_100114338[v5];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, qword_100114338[a2], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

uint64_t sub_1000F4A40(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000011;
  else
    v3 = 0x73656C75646F6DLL;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0x8000000100114CD0;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000011;
  else
    v5 = 0x73656C75646F6DLL;
  if ((a2 & 1) != 0)
    v6 = 0x8000000100114CD0;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1000F4AE4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6449707061;
  else
    v3 = 0x7972746E756F63;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6449707061;
  else
    v5 = 0x7972746E756F63;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1000F4B80(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1000F4BCC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000F4C3C + 4 * byte_10011425D[a2]))(0x746E657665);
}

uint64_t sub_1000F4C3C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x746E657665 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x746E657665, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

char *sub_1000F4CF4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003E70(&qword_10015D3B8);
      v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[40 * v8 + 32])
          memmove(v13, a4 + 32, 40 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000F5F24(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_1000F4E14(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003E70(&qword_10015FB00);
      v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32])
          memmove(v14, a4 + 32, 16 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000F6030(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000F4F20(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003E70(qword_10015EF80);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000F6120(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F502C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000F5054(a1, a2, a3, a4, &qword_10015FAF0, (uint64_t (*)(_QWORD))&type metadata accessor for Song);
}

uint64_t sub_1000F5040(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000F5054(a1, a2, a3, a4, &qword_10015FAF8, (uint64_t (*)(_QWORD))&type metadata accessor for Genre);
}

uint64_t sub_1000F5054(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100003E70(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23, v25);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000F6210(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

_QWORD *sub_1000F5260(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003E70(&qword_100164E10);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000F6328(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_1000F5384(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = sub_100003E70(&qword_10015DE38);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003E70(qword_100164E20);
  __chkstk_darwin(v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  if (!*a1)
    return (char *)&_swiftEmptyArrayStorage;
  if (v8 <= 0)
  {
    v14 = &_swiftEmptyArrayStorage;
LABEL_11:
    v17 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GridItem(0) - 8) + 80);
    v18 = (uint64_t)v14 + ((v17 + 32) & ~v17);
    sub_1000F7590((uint64_t)a1, (uint64_t)v4);
    v19 = sub_1000F588C((uint64_t)v7, v18, v8);
    result = (char *)sub_100008194((uint64_t)v7, qword_100164E20);
    if (v19 == v8)
      return (char *)v14;
    __break(1u);
    goto LABEL_14;
  }
  v9 = sub_100003E70(&qword_10015FDF8);
  v10 = *(_QWORD *)(type metadata accessor for GridItem(0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = (_QWORD *)swift_allocObject(v9, v13 + v11 * v8, v12 | 7);
  result = (char *)j__malloc_size(v14);
  if (v11)
  {
    if (&result[-v13] == (char *)0x8000000000000000 && v11 == -1)
      goto LABEL_15;
    v14[2] = v8;
    v14[3] = 2 * ((uint64_t)&result[-v13] / v11);
    goto LABEL_11;
  }
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

_QWORD *sub_1000F5520(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100003E70(&qword_10015FB00);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_1000F5A4C((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100036430(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1000F5604(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100003E70(&qword_10015FAF8);
  v4 = *(_QWORD *)(type metadata accessor for Genre(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = sub_1000F5C48(&v13, (uint64_t)v8 + v7, v1, a1);
      v12 = v13;
      swift_bridgeObjectRetain(a1);
      sub_100036430(v12);
      if (v11 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000F571C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return _swiftEmptyArrayStorage;
  v8 = 16 * v5;
  if (v5 <= 0)
  {
    v10 = _swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = sub_100003E70(&qword_10015FB00);
  v10 = (_QWORD *)swift_allocObject(v9, v8 + 32, 7);
  v11 = j__malloc_size(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 17;
  v10[2] = v5;
  v10[3] = 2 * (v12 >> 4);
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = v10 + 4;
  v14 = a2 + 16 * a3;
  if (v14 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)v13 >= v14 + v8)
  {
    swift_arrayInitWithCopy(v13);
    return v10;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1000F588C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v8 = sub_100003E70(&qword_10015DE38);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_100003E70(qword_100164E20);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_100007A98(v4, (uint64_t)v13, &qword_10015DE38);
  v15 = *(int *)(v11 + 36);
  *(_QWORD *)((char *)v13 + v15) = 0;
  if (!a2)
  {
LABEL_13:
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    sub_100007A98((uint64_t)v13, a1, qword_100164E20);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*v13)
    {
      v24 = a1;
      v16 = 1;
      while (1)
      {
        sub_1000F7590((uint64_t)v13, (uint64_t)v10);
        v17 = *v10;
        result = sub_100008194((uint64_t)v10, &qword_10015DE38);
        if (v16 - 1 >= v17)
          break;
        if (v16 - 1 >= *v13)
          goto LABEL_16;
        v18 = (char *)v13 + *(int *)(v8 + 28);
        *(_QWORD *)((char *)v13 + v15) = v16;
        v19 = type metadata accessor for GridItem(0);
        v20 = *(_QWORD *)(v19 - 8);
        (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(a2, v18, v19);
        if (a3 == v16)
          goto LABEL_12;
        a2 += *(_QWORD *)(v20 + 72);
        v21 = v16 + 1;
        if (v16++ == *v13)
        {
          a3 = v21 - 1;
LABEL_12:
          a1 = v24;
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    goto LABEL_13;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1000F5A4C(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000F5C48(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = type metadata accessor for Genre(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v15 = (char *)&v32 - v14;
  v39 = a4;
  v18 = *(_QWORD *)(a4 + 56);
  v17 = a4 + 56;
  v16 = v18;
  v37 = v17;
  v19 = -1 << *(_BYTE *)(v17 - 24);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    v31 = v37;
    *a1 = v39;
    a1[1] = v31;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v34 = -1 << *(_BYTE *)(v17 - 24);
  v35 = a1;
  v22 = 0;
  v23 = 0;
  v36 = (unint64_t)(63 - v19) >> 6;
  v33 = v36 - 1;
  v38 = a3;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, *(_QWORD *)(v39 + 48) + v29 * v25, v8);
    v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v15, v12, v8);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v15, v8);
    a3 = v38;
    if (v23 == v38)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v36)
      goto LABEL_32;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v36)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v36)
    goto LABEL_32;
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v36)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v36)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v36)
    {
      v21 = 0;
      v22 = v33;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v37 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_1000F5F10(_QWORD *a1)
{
  return sub_1000F5260(0, a1[2], 0, a1);
}

uint64_t sub_1000F5F24(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_100003E70(&qword_100164E18);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000F6030(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000F6120(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000F6210(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000F6328(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_1000F641C(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1000F5260(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = (void *)swift_arrayDestroy(&v4[3 * a1 + 4], v7, &type metadata for RemoteViewConfiguration.QueryItem);
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[3 * a2 + 4];
    if (a1 != a2 || &v4[3 * a1 + 4] >= (_QWORD *)&v16[24 * v15])
      result = memmove(&v4[3 * a1 + 4], v16, 24 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v19 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v19, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000F6590(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + 40));
    JUMPOUT(0x1000F6630);
  }
  return 0;
}

uint64_t sub_1000F6A40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::Int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __n128 v37;
  _QWORD *v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::Int v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unsigned __int8 *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  char v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t (*v132)(char *, char *, uint64_t, __n128);
  char *v133;
  char *v134;
  _QWORD *v135;
  __int128 v136;
  __int128 v137;
  _QWORD *v138;

  v2 = type metadata accessor for URLQueryItem(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v126 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003E70(&qword_100164C20);
  __chkstk_darwin(v6);
  v8 = (char *)&v126 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URLComponents(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v134 = (char *)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = URL.host.getter(v11);
  if (!v14)
    return 0;
  v15 = v14;
  v16._countAndFlagsBits = v13;
  v16._object = v15;
  v17 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10014BFA0, v16);
  swift_bridgeObjectRelease();
  if (v17)
  {
    if (v17 != 1)
      return 0;
    v18 = 1;
  }
  else
  {
    v18 = 0;
  }
  if ((sub_100102804(v18, (uint64_t)&off_10014C018) & 1) == 0)
    return 0;
  v129 = v10;
  v130 = v9;
  v19 = URL.pathComponents.getter();
  v20 = *(_QWORD *)(v19 + 16);
  v21 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v22 = swift_unknownObjectRetain_n(v19, 2);
  v23 = (_QWORD *)swift_dynamicCastClass(v22, v21);
  if (!v23)
  {
    swift_bridgeObjectRelease();
    v23 = _swiftEmptyArrayStorage;
  }
  v24 = v23[2];
  swift_release(v23);
  if (v24 == v20 - (v20 != 0))
  {
    v25 = (_QWORD *)swift_dynamicCastClass(v19, v21);
    v26 = v130;
    if (!v25)
    {
      swift_bridgeObjectRelease();
      v25 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v25 = sub_1000F571C(v19, v19 + 32, v20 != 0, (2 * v20) | 1);
    v26 = v130;
  }
  v131 = v25;
  swift_bridgeObjectRelease();
  v27 = v131;
  if (!v131[2])
    goto LABEL_38;
  v29 = v131[4];
  v28 = v131[5];
  swift_bridgeObjectRetain(v28);
  v27 = v131;
  if (!v28)
    goto LABEL_38;
  if (v29 != 0x746E657665 || v28 != 0xE500000000000000)
  {
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v28, 0x746E657665, 0xE500000000000000, 0);
    swift_bridgeObjectRelease();
    if ((v30 & 1) != 0)
      goto LABEL_18;
    v27 = v131;
LABEL_38:
    swift_release(v27);
    return 0;
  }
  swift_bridgeObjectRelease();
LABEL_18:
  URLComponents.init(url:resolvingAgainstBaseURL:)(a1, 1);
  v31 = v129;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v8, 1, v26) == 1)
  {
    swift_release(v131);
    sub_100008194((uint64_t)v8, &qword_100164C20);
    return 0;
  }
  v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v31 + 32))(v134, v8, v26);
  v33 = (_QWORD *)URLComponents.queryItems.getter(v32);
  if (!v33)
    v33 = _swiftEmptyArrayStorage;
  v34 = v33[2];
  if (v34)
  {
    v35 = (char *)v33 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v36 = *(char **)(v3 + 72);
    v132 = *(uint64_t (**)(char *, char *, uint64_t, __n128))(v3 + 16);
    v133 = v36;
    v128 = (uint64_t)v33;
    v37 = swift_bridgeObjectRetain(v33);
    v38 = _swiftEmptyArrayStorage;
    while (1)
    {
      v40 = v132(v5, v35, v2, v37);
      v41 = URLQueryItem.name.getter(v40);
      v43 = v42;
      v44._countAndFlagsBits = v41;
      v44._object = v43;
      v45 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10014C040, v44);
      v46 = swift_bridgeObjectRelease();
      if (v45)
      {
        if (v45 != 1)
        {
          v39 = *(void (**)(char *, uint64_t))(v3 + 8);
          goto LABEL_25;
        }
        v47 = 1;
      }
      else
      {
        v47 = 0;
      }
      v48 = URLQueryItem.value.getter(v46);
      v39 = *(void (**)(char *, uint64_t))(v3 + 8);
      if (v49)
      {
        v50 = v48;
        v51 = v49;
        v39(v5, v2);
        if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
          v38 = sub_1000F5260(0, v38[2] + 1, 1, v38);
        v52 = v38;
        v53 = v38[2];
        v54 = v52;
        v55 = v52[3];
        if (v53 >= v55 >> 1)
          v54 = sub_1000F5260((_QWORD *)(v55 > 1), v53 + 1, 1, v54);
        v54[2] = v53 + 1;
        v56 = &v54[3 * v53];
        v38 = v54;
        *((_BYTE *)v56 + 32) = v47;
        v56[5] = v50;
        v56[6] = v51;
        goto LABEL_26;
      }
LABEL_25:
      v39(v5, v2);
LABEL_26:
      v35 = &v133[(_QWORD)v35];
      if (!--v34)
      {
        swift_bridgeObjectRelease_n(v128, 2);
        goto LABEL_43;
      }
    }
  }
  swift_bridgeObjectRelease();
  v38 = _swiftEmptyArrayStorage;
LABEL_43:
  v138 = v38;
  v59 = v38[2];
  if (!v59)
  {
    v84 = 0;
    v62 = v129;
LABEL_141:
    sub_1000F641C(v59, v84);
    v118 = v131;
    v119 = sub_1000F6590((uint64_t)v131);
    v121 = v120;
    v123 = v122;
    swift_release(v118);
    if (v121)
    {
      v124 = v138;
      v125 = type metadata accessor for RemoteViewConfiguration();
      v57 = swift_allocObject(v125, 96, 7);
      *(_QWORD *)(v57 + 16) = v119;
      *(_QWORD *)(v57 + 24) = v121;
      *(_BYTE *)(v57 + 32) = v123;
      *(_QWORD *)(v57 + 40) = v124;
      *(_OWORD *)(v57 + 48) = 0u;
      *(_OWORD *)(v57 + 64) = 0u;
      *(_OWORD *)(v57 + 80) = xmmword_10010C8C0;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v134, v130);
      return v57;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v134, v130);
    return 0;
  }
  v60 = v38 + 4;
  swift_bridgeObjectRetain(v38);
  v61 = 0;
  v128 = (uint64_t)"UniversalLinkException";
  v132 = (uint64_t (*)(char *, char *, uint64_t, __n128))0x8000000100116140;
  v133 = (char *)&type metadata for Any + 8;
  v62 = v129;
  while (2)
  {
    v63 = &v60[3 * v61];
    v65 = v63[1];
    v64 = v63[2];
    if (*(_BYTE *)v63 == 1)
    {
      swift_bridgeObjectRetain(v63[2]);
      swift_bridgeObjectRelease();
    }
    else
    {
      v66 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7972746E756F63, 0xE700000000000000, 0x6449707061, 0xE500000000000000, 0);
      swift_bridgeObjectRetain(v64);
      swift_bridgeObjectRelease();
      if ((v66 & 1) == 0)
        goto LABEL_45;
    }
    v67 = HIBYTE(v64) & 0xF;
    if ((v64 & 0x2000000000000000) == 0)
      v67 = v65 & 0xFFFFFFFFFFFFLL;
    if (!v67)
    {
LABEL_45:
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
    v68 = sub_100047458(1);
    if (*(_QWORD *)(v68 + 16) && (v69 = sub_100090568(0xD00000000000002CLL, (uint64_t)v132), (v70 & 1) != 0))
    {
      sub_100036668(*(_QWORD *)(v68 + 56) + 32 * v69, (uint64_t)&v136);
    }
    else
    {
      v136 = 0u;
      v137 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v137 + 1))
    {
      v71 = sub_100003E70(&qword_10015ECC8);
      if ((swift_dynamicCast(&v135, &v136, v133, v71, 6) & 1) != 0)
      {
        v72 = v135;
        goto LABEL_62;
      }
    }
    else
    {
      sub_100008194((uint64_t)&v136, (uint64_t *)&unk_100161740);
    }
    v72 = _swiftEmptyArrayStorage;
LABEL_62:
    v73 = v72[2];
    if (!v73)
      break;
    v74 = v72[4];
    v75 = v72[5];
    if (v74 == v65 && v75 == v64 || (_stringCompareWithSmolCheck(_:_:expecting:)(v74, v75, v65, v64, 0) & 1) != 0)
      goto LABEL_70;
    if (v73 == 1)
      break;
    if ((v76 = v72[6], v77 = v72[7], v76 == v65) && v77 == v64
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v77, v65, v64, 0), (result & 1) != 0))
    {
LABEL_70:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
    if (v73 != 2)
    {
      v127 = v38;
      v78 = v72 + 9;
      v79 = 2;
      while (1)
      {
        v80 = v79 + 1;
        if (__OFADD__(v79, 1))
        {
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
        v81 = *(v78 - 1);
        v82 = *v78;
        if (v81 == v65 && v82 == v64)
          break;
        result = _stringCompareWithSmolCheck(_:_:expecting:)(v81, v82, v65, v64, 0);
        if ((result & 1) != 0)
          break;
        v78 += 2;
        ++v79;
        if (v80 == v73)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v62 = v129;
          goto LABEL_85;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v62 = v129;
      v38 = v127;
LABEL_46:
      if (++v61 != v59)
        continue;
      result = swift_bridgeObjectRelease();
      v84 = v138[2];
LABEL_140:
      if ((uint64_t)v84 >= v59)
        goto LABEL_141;
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }
    break;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_85:
  result = swift_bridgeObjectRelease();
  v84 = v61 + 1;
  if (__OFADD__(v61, 1))
    goto LABEL_154;
  v85 = v138;
  v86 = v138[2];
  if (v84 == v86)
  {
LABEL_139:
    v59 = v61;
    goto LABEL_140;
  }
  v132 = (uint64_t (*)(char *, char *, uint64_t, __n128))((char *)&type metadata for Any + 8);
  v128 |= 0x8000000000000000;
  while (1)
  {
    if (v84 >= v86)
    {
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
    v87 = (uint64_t)&v85[3 * v84 + 4];
    v88 = (uint64_t *)(v87 + 8);
    v89 = *(_QWORD *)(v87 + 8);
    v90 = *(_QWORD *)(v87 + 16);
    if (*(_BYTE *)v87 == 1)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v87 + 16));
      swift_bridgeObjectRelease();
    }
    else
    {
      v91 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7972746E756F63, 0xE700000000000000, 0x6449707061, 0xE500000000000000, 0);
      swift_bridgeObjectRetain(v90);
      swift_bridgeObjectRelease();
      if ((v91 & 1) == 0)
        goto LABEL_110;
    }
    v92 = HIBYTE(v90) & 0xF;
    if ((v90 & 0x2000000000000000) == 0)
      v92 = v89 & 0xFFFFFFFFFFFFLL;
    if (!v92)
      goto LABEL_110;
    v93 = sub_100047458(1);
    if (*(_QWORD *)(v93 + 16) && (v94 = sub_100090568(0xD00000000000002CLL, v128), (v95 & 1) != 0))
    {
      sub_100036668(*(_QWORD *)(v93 + 56) + 32 * v94, (uint64_t)&v136);
    }
    else
    {
      v136 = 0u;
      v137 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v137 + 1))
    {
      sub_100008194((uint64_t)&v136, (uint64_t *)&unk_100161740);
LABEL_104:
      v97 = _swiftEmptyArrayStorage;
      goto LABEL_105;
    }
    v96 = sub_100003E70(&qword_10015ECC8);
    if ((swift_dynamicCast(&v135, &v136, v132, v96, 6) & 1) == 0)
      goto LABEL_104;
    v97 = v135;
LABEL_105:
    v98 = v97[2];
    if (!v98)
      goto LABEL_123;
    v99 = v97[4];
    v100 = v97[5];
    if ((v99 != v89 || v100 != v90) && (_stringCompareWithSmolCheck(_:_:expecting:)(v99, v100, v89, v90, 0) & 1) == 0)
    {
      if (v98 == 1)
        goto LABEL_123;
      v111 = v97[6];
      v112 = v97[7];
      if (v111 != v89 || v112 != v90)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)(v111, v112, v89, v90, 0);
        if ((result & 1) == 0)
          break;
      }
    }
LABEL_109:
    swift_bridgeObjectRelease();
LABEL_110:
    result = swift_bridgeObjectRelease();
    if (v61 != v84)
    {
      if ((v61 & 0x8000000000000000) != 0)
        goto LABEL_149;
      v101 = v85[2];
      if (v61 >= v101)
        goto LABEL_150;
      if (v84 >= v101)
        goto LABEL_151;
      v102 = (unsigned __int8 *)&v85[3 * v61 + 4];
      LODWORD(v133) = *v102;
      v104 = *((_QWORD *)v102 + 1);
      v103 = *((_QWORD *)v102 + 2);
      v105 = *(_BYTE *)v87;
      v107 = *v88;
      v106 = v88[1];
      swift_bridgeObjectRetain(v103);
      swift_bridgeObjectRetain(v106);
      if ((swift_isUniquelyReferenced_nonNull_native(v85) & 1) == 0)
        v85 = sub_1000F5F10(v85);
      v108 = (uint64_t)&v85[3 * v61 + 4];
      *(_BYTE *)v108 = v105;
      *(_QWORD *)(v108 + 8) = v107;
      *(_QWORD *)(v108 + 16) = v106;
      result = swift_bridgeObjectRelease();
      if (v84 >= v85[2])
        goto LABEL_152;
      v109 = (uint64_t)&v85[3 * v84 + 4];
      *(_BYTE *)v109 = (_BYTE)v133;
      *(_QWORD *)(v109 + 8) = v104;
      *(_QWORD *)(v109 + 16) = v103;
      result = swift_bridgeObjectRelease();
    }
    v110 = __OFADD__(v61++, 1);
    v62 = v129;
    if (v110)
      goto LABEL_147;
    v110 = __OFADD__(v84++, 1);
    if (v110)
      goto LABEL_146;
LABEL_120:
    v86 = v85[2];
    if (v84 == v86)
    {
      v138 = v85;
      goto LABEL_139;
    }
  }
  if (v98 == 2)
  {
LABEL_123:
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v62 = v129;
    v110 = __OFADD__(v84++, 1);
    if (v110)
      goto LABEL_146;
    goto LABEL_120;
  }
  v113 = (char *)(v97 + 9);
  v114 = 2;
  while (!__OFADD__(v114, 1))
  {
    v115 = *((_QWORD *)v113 - 1);
    v116 = *(_QWORD *)v113;
    if (v115 == v89 && v116 == v90)
      goto LABEL_109;
    v126 = v114 + 1;
    v127 = (_QWORD *)v114;
    v133 = v113;
    result = _stringCompareWithSmolCheck(_:_:expecting:)(v115, v116, v89, v90, 0);
    if ((result & 1) != 0)
      goto LABEL_109;
    v113 = v133 + 16;
    v114 = (uint64_t)v127 + 1;
    if (v126 == v98)
      goto LABEL_123;
  }
LABEL_155:
  __break(1u);
  return result;
}

uint64_t sub_1000F7590(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_10015DE38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F75D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for ObservationRegistrar(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      result = swift_initClassMetadata2(a1, 0, 5, v5, a1 + 96);
      if (!result)
        return 0;
    }
  }
  return result;
}

double sub_1000F7674()
{
  return sub_1000F7994() * -0.022;
}

void sub_1000F7694(double a1)
{
  sub_1000F7728((uint64_t)&unk_100114450, (uint64_t)sub_1000F7C6C, a1);
}

double sub_1000F76A8()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100114450);
  sub_1000F784C(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104));
}

void sub_1000F7700(double a1)
{
  sub_1000F7728((uint64_t)&unk_100114418, (uint64_t)sub_1000F7BE0, a1);
}

void sub_1000F7714(double a1)
{
  sub_1000F7728((uint64_t)&unk_1001143E0, (uint64_t)sub_1000BE46C, a1);
}

void sub_1000F7728(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  double v9;
  __int128 v10;

  v10 = *(_OWORD *)(*(_QWORD *)v3 + 80);
  KeyPath = swift_getKeyPath(a1);
  v8 = v3;
  v9 = a3;
  sub_1000F78A8(KeyPath, a2, (uint64_t)&v7, (uint64_t)&type metadata for () + 8);
  swift_release(KeyPath);
}

double sub_1000F77A4()
{
  return sub_1000F793C() * 0.92;
}

double sub_1000F77C4()
{
  return sub_1000F7994() * 0.96;
}

double sub_1000F77E4()
{
  return sub_1000F793C() * 0.92 * 0.14;
}

uint64_t sub_1000F7810(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_1000F79EC(a1);
  return v3;
}

uint64_t sub_1000F784C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t WitnessTable;
  uint64_t v5;

  WitnessTable = swift_getWitnessTable(&unk_1001143C0, *v1);
  return ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, a1, WitnessTable);
}

uint64_t sub_1000F78A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t WitnessTable;
  uint64_t v11;

  WitnessTable = swift_getWitnessTable(&unk_1001143C0, *v4);
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, a1, a2, a3, a4, WitnessTable);
}

double sub_1000F793C()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100114418);
  sub_1000F784C(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
}

double sub_1000F7994()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_1001143E0);
  sub_1000F784C(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
}

uint64_t *sub_1000F79EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 104)) = 0;
  *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 112)) = 0;
  *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 120)) = 0;
  ObservationRegistrar.init()();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 32))((uint64_t)v1 + *(_QWORD *)(*v1 + 96), a1);
  return v1;
}

uint64_t sub_1000F7A68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 128);
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1000F7AC8()
{
  uint64_t v0;

  sub_1000F7A68();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for SavedWallpaperViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SavedWallpaperViewModel);
}

void sub_1000F7AF8(double *a1@<X8>)
{
  *a1 = sub_1000F7994();
}

void sub_1000F7B20(double *a1)
{
  sub_1000F7728((uint64_t)&unk_1001143E0, (uint64_t)sub_1000BE46C, *a1);
}

uint64_t sub_1000F7B54()
{
  return 16;
}

__n128 sub_1000F7B60(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1000F7B6C(double *a1@<X8>)
{
  *a1 = sub_1000F793C();
}

void sub_1000F7B94(double *a1)
{
  sub_1000F7728((uint64_t)&unk_100114418, (uint64_t)sub_1000F7BE0, *a1);
}

uint64_t sub_1000F7BC8()
{
  return 16;
}

__n128 sub_1000F7BD4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000F7BE0()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 112)) = result;
  return result;
}

void sub_1000F7BF8(double *a1@<X8>)
{
  *a1 = sub_1000F76A8();
}

void sub_1000F7C20(double *a1)
{
  sub_1000F7728((uint64_t)&unk_100114450, (uint64_t)sub_1000F7C6C, *a1);
}

uint64_t sub_1000F7C54()
{
  return 16;
}

__n128 sub_1000F7C60(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000F7C6C()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 104)) = result;
  return result;
}

uint64_t sub_1000F7C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100008194(a1, &qword_100161700);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_100154928, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_100164FF0, v16);
}

uint64_t sub_1000F7DD0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100114590);
  v4 = v0;
  v2 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 16);
}

void sub_1000F7E54(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100114590);
  v6 = v3;
  v5 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 16);
}

double sub_1000F7EE0(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100114590);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000FA700, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_1000F7F88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[3];

  KeyPath = swift_getKeyPath(&unk_1001145B8);
  v6[0] = v1;
  v4 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v6, KeyPath, v4);
  swift_release(KeyPath);
  swift_beginAccess(v1 + 24, v6, 0, 0);
  return sub_10009B338(v1 + 24, a1);
}

uint64_t sub_1000F8030@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001145B8);
  v7[0] = v3;
  v5 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 24, v7, 0, 0);
  return sub_10009B338(v3 + 24, a2);
}

uint64_t sub_1000F80D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[6];
  uint64_t v8;
  _BYTE v9[40];

  sub_10009B338(a1, (uint64_t)v9);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001145B8);
  v7[2] = v3;
  v7[3] = v9;
  v8 = v3;
  v5 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000FA290, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return sub_100008194((uint64_t)v9, &qword_10015D968);
}

uint64_t sub_1000F8198(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + 24;
  swift_beginAccess(a1 + 24, v5, 33, 0);
  sub_1000CBF3C(a2, v3);
  return swift_endAccess(v5);
}

double sub_1000F81F8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100114540);
  v4 = v0;
  v2 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v0 + 64)).n128_u64[0];
  return result;
}

double sub_1000F8280@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100114540);
  v8 = v3;
  v5 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 64);
  *a2 = v6;
  *(_QWORD *)&result = swift_retain(v6).n128_u64[0];
  return result;
}

double sub_1000F8310(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100114540);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000FA21C, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

double sub_1000F83C8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100114568);
  v4 = v0;
  v2 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v0 + 72)).n128_u64[0];
  return result;
}

double sub_1000F8450@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100114568);
  v8 = v3;
  v5 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 72);
  *a2 = v6;
  *(_QWORD *)&result = swift_retain(v6).n128_u64[0];
  return result;
}

double sub_1000F84E0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100114568);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000FA25C, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000F8598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  __n128 v22;
  uint64_t v23;
  _QWORD v25[3];
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v1 = type metadata accessor for MusicPlayer.Queue.Entry(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003E70(&qword_100164FC0);
  __chkstk_darwin(v5);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1001145B8);
  v25[0] = v0;
  v9 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v25, KeyPath, v9);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 24, v25, 0, 0);
  sub_10009B338(v0 + 24, (uint64_t)v26);
  v10 = v27;
  if (v27)
  {
    v11 = v28;
    v12 = sub_100008170(v26, v27);
    v13 = *(_QWORD *)(v10 - 8);
    v14 = __chkstk_darwin(v12);
    v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v13 + 16))(v16, v14);
    sub_100008194((uint64_t)v26, &qword_10015D968);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 96))(v10, v11);
    LOBYTE(v11) = v18;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v10);
    if ((v11 & 1) == 0)
      return v17;
  }
  else
  {
    sub_100008194((uint64_t)v26, &qword_10015D968);
  }
  type metadata accessor for SystemMusicPlayer(0);
  v19 = static SystemMusicPlayer.shared.getter();
  v20 = dispatch thunk of SystemMusicPlayer.queue.getter();
  v21 = swift_release(v19);
  dispatch thunk of MusicPlayer.Queue.currentEntry.getter(v21);
  v22 = swift_release(v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v2 + 48))(v7, 1, v1, v22))
  {
    sub_100008194((uint64_t)v7, &qword_100164FC0);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
    v23 = sub_100008194((uint64_t)v7, &qword_100164FC0);
    v17 = MusicPlayer.Queue.Entry.endTime.getter(v23);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return v17;
}

double sub_1000F8834()
{
  double v0;
  double v1;
  char v2;
  double v3;
  uint64_t v4;
  double v5;
  double v6;
  BOOL v7;

  v0 = COERCE_DOUBLE(sub_1000F8598());
  v1 = 0.0;
  if ((v2 & 1) == 0)
  {
    v3 = v0;
    if (v0 > 0.0
      && ((~*(_QWORD *)&v0 & 0x7FF0000000000000) != 0 || (*(_QWORD *)&v0 & 0xFFFFFFFFFFFFFLL) == 0)
      && (sub_1000F88EC() & 1) != 0)
    {
      type metadata accessor for SystemMusicPlayer(0);
      v4 = static SystemMusicPlayer.shared.getter();
      v5 = dispatch thunk of MusicPlayer.playbackTime.getter();
      swift_release(v4);
      v6 = v5 / v3;
      v7 = (COERCE_UNSIGNED_INT64(v5 / v3) & 0xFFFFFFFFFFFFFLL) != 0
        && (~COERCE__INT64(v5 / v3) & 0x7FF0000000000000) == 0;
      if (v6 >= 0.0 && !v7)
      {
        if (v6 <= 1.0)
          return v5 / v3;
        else
          return 1.0;
      }
    }
  }
  return v1;
}

uint64_t sub_1000F88EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  __n128 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;

  v1 = v0;
  v2 = type metadata accessor for MusicPlayer.Queue.Entry(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003E70(&qword_100164FC0);
  __chkstk_darwin(v6);
  v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003E70(&qword_100164FC8);
  __chkstk_darwin(v9);
  v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SystemMusicPlayer(0);
  v12 = static SystemMusicPlayer.shared.getter();
  v13 = dispatch thunk of SystemMusicPlayer.queue.getter();
  v14 = swift_release(v12);
  dispatch thunk of MusicPlayer.Queue.currentEntry.getter(v14);
  v15 = swift_release(v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v3 + 48))(v8, 1, v2, v15))
  {
    v16 = &qword_100164FC0;
    v17 = (uint64_t)v8;
LABEL_5:
    sub_100008194(v17, v16);
    v21 = 0;
    v22 = 0;
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
  v18 = sub_100008194((uint64_t)v8, &qword_100164FC0);
  MusicPlayer.Queue.Entry.item.getter(v18);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v19 = type metadata accessor for MusicPlayer.Queue.Entry.Item(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v11, 1, v19) == 1)
  {
    v16 = &qword_100164FC8;
    v17 = (uint64_t)v11;
    goto LABEL_5;
  }
  v21 = MusicPlayer.Queue.Entry.Item.id.getter();
  v22 = v37;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v19);
LABEL_6:
  KeyPath = swift_getKeyPath(&unk_1001145B8);
  v39[0] = v1;
  v24 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v39, KeyPath, v24);
  swift_release(KeyPath);
  v25 = v1 + 24;
  swift_beginAccess(v25, v39, 0, 0);
  sub_10009B338(v25, (uint64_t)v40);
  v26 = v41;
  if (!v41)
  {
    sub_100008194((uint64_t)v40, &qword_10015D968);
    if (!v22)
      goto LABEL_15;
LABEL_13:
    v36 = 0;
LABEL_19:
    swift_bridgeObjectRelease();
    return v36 & 1;
  }
  v27 = v42;
  v28 = sub_100008170(v40, v41);
  v29 = *(_QWORD *)(v26 - 8);
  v30 = __chkstk_darwin(v28);
  v32 = (char *)v39 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v29 + 16))(v32, v30);
  sub_100008194((uint64_t)v40, &qword_10015D968);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 88))(v26, v27);
  v35 = v34;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v26);
  if (v35)
  {
    if (v22)
    {
      if (v33 == v21 && v22 == v35)
      {
        swift_bridgeObjectRelease();
        v36 = 1;
      }
      else
      {
        v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v21, v22, 0);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v36 = 0;
    }
    goto LABEL_19;
  }
  if (v22)
    goto LABEL_13;
LABEL_15:
  v36 = 1;
  return v36 & 1;
}

double sub_1000F8C80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  double result;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;

  v1 = v0;
  v2 = sub_100003E70(&qword_100164F80);
  __chkstk_darwin(v2);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003E70(&qword_100164F88);
  v47 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000F9970();
  KeyPath = swift_getKeyPath(&unk_100114540);
  v9 = v0 + OBJC_IVAR____TtC16EventViewService16AppleMusicPlayer___observationRegistrar;
  v54 = v0;
  v10 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v54, KeyPath, v10);
  swift_release(KeyPath);
  v11 = *(_QWORD *)(v0 + 64);
  if (v11)
  {
    swift_retain(*(_QWORD *)(v1 + 64));
    AnyCancellable.cancel()();
    swift_release(v11);
  }
  v12 = swift_getKeyPath(&unk_100114568);
  v54 = v1;
  v51 = v10;
  v52 = v9;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v54, v12, v10);
  swift_release(v12);
  v13 = *(_QWORD *)(v1 + 72);
  if (v13)
  {
    swift_retain(*(_QWORD *)(v1 + 72));
    AnyCancellable.cancel()();
    swift_release(v13);
  }
  v50 = type metadata accessor for SystemMusicPlayer(0);
  v15 = static SystemMusicPlayer.shared.getter(v14);
  v16 = MusicPlayer.state.getter();
  v17 = swift_release(v15);
  v18 = dispatch thunk of MusicPlayer.State.objectWillChange.getter(v17);
  swift_release(v16);
  v54 = v18;
  v49 = (id)objc_opt_self(NSRunLoop);
  v53 = objc_msgSend(v49, "mainRunLoop");
  v19 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v48(v4, 1, 1, v19);
  v20 = sub_100003E70(&qword_100164F98);
  v46 = v20;
  v21 = sub_1000FA194();
  v45 = v21;
  v22 = sub_100007D40(&qword_100164FA8, &qword_100164F98, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v44 = v22;
  v43 = sub_100003B3C(&qword_100164FB0, (uint64_t (*)(uint64_t))sub_1000FA194, (uint64_t)&protocol conformance descriptor for NSRunLoop);
  Publisher.receive<A>(on:options:)(&v53, v4, v20, v21, v22, v43);
  sub_100008194((uint64_t)v4, &qword_100164F80);

  swift_release(v54);
  v23 = swift_allocObject(&unk_100154860, 24, 7);
  swift_weakInit(v23 + 16, v1);
  v24 = swift_allocObject(&unk_100154888, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_1000FA1F4;
  *(_QWORD *)(v24 + 24) = v23;
  v42 = sub_100007D40(&qword_100164FB8, &qword_100164F88, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v25 = Publisher<>.sink(receiveValue:)(sub_1000FA1FC, v24, v5, v42);
  v26 = swift_release(v24);
  v47 = *(_QWORD *)(v47 + 8);
  ((void (*)(char *, uint64_t, __n128))v47)(v7, v5, v26);
  v27 = swift_getKeyPath(&unk_100114540);
  __chkstk_darwin(v27);
  *(&v40 - 2) = v1;
  *(&v40 - 1) = v25;
  v54 = v1;
  v41 = (char *)&type metadata for () + 8;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v54, v27, sub_1000FA21C, &v40 - 4, (char *)&type metadata for () + 8, v51);
  swift_release(v27);
  v28 = swift_release(v25);
  v29 = static SystemMusicPlayer.shared.getter(v28);
  v30 = dispatch thunk of SystemMusicPlayer.queue.getter();
  v31 = swift_release(v29);
  v32 = dispatch thunk of MusicPlayer.Queue.objectWillChange.getter(v31);
  *(_QWORD *)&v33 = swift_release(v30).n128_u64[0];
  v54 = v32;
  v53 = objc_msgSend(v49, "mainRunLoop", v33);
  v48(v4, 1, 1, v19);
  Publisher.receive<A>(on:options:)(&v53, v4, v46, v45, v44, v43);
  sub_100008194((uint64_t)v4, &qword_100164F80);

  swift_release(v54);
  v34 = swift_allocObject(&unk_100154860, 24, 7);
  swift_weakInit(v34 + 16, v1);
  v35 = swift_allocObject(&unk_1001548B0, 32, 7);
  *(_QWORD *)(v35 + 16) = sub_1000FA230;
  *(_QWORD *)(v35 + 24) = v34;
  v36 = Publisher<>.sink(receiveValue:)(sub_1000FA714, v35, v5, v42);
  v37 = swift_release(v35);
  ((void (*)(char *, uint64_t, __n128))v47)(v7, v5, v37);
  v38 = swift_getKeyPath(&unk_100114568);
  __chkstk_darwin(v38);
  *(&v40 - 2) = v1;
  *(&v40 - 1) = v36;
  v54 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v54, v38, sub_1000FA25C, &v40 - 4, v41, v51);
  swift_release(v38);
  *(_QWORD *)&result = swift_release(v36).n128_u64[0];
  return result;
}

double sub_1000F91FC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _BYTE v18[16];
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[5];

  sub_1000081D0((uint64_t)a1, (uint64_t)v22);
  KeyPath = swift_getKeyPath(&unk_1001145B8);
  v19 = v1;
  v20 = v22;
  v21 = v1;
  v4 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v21, KeyPath, sub_1000FA6EC, v18, (char *)&type metadata for () + 8, v4);
  swift_release(KeyPath);
  sub_100008194((uint64_t)v22, &qword_10015D968);
  v5 = swift_getKeyPath(&unk_100114590);
  v16 = v1;
  v17 = 1;
  v22[0] = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v22, v5, sub_1000FA700, &v15, (char *)&type metadata for () + 8, v4);
  swift_release(v5);
  type metadata accessor for SystemMusicPlayer(0);
  v6 = static SystemMusicPlayer.shared.getter();
  v7 = sub_100003E70(&qword_100164FF8);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10010ACC0;
  v9 = a1[3];
  v10 = a1[4];
  v11 = sub_100008170(a1, v9);
  *(_QWORD *)(v8 + 56) = v9;
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v10 + 8);
  v12 = sub_100007D80((_QWORD *)(v8 + 32));
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v12, v11, v9);
  type metadata accessor for MusicPlayer.Queue(0);
  v13 = dispatch thunk of MusicPlayer.Queue.__allocating_init(arrayLiteral:)(v8);
  dispatch thunk of SystemMusicPlayer.queue.setter(v13);
  swift_release(v6);
  return sub_1000FA3C8();
}

void sub_1000F93C4()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if ((sub_1000F88EC() & 1) != 0)
  {
    sub_1000FA3C8();
  }
  else
  {
    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v0 = type metadata accessor for Logger(0);
    v1 = sub_100011AC4(v0, (uint64_t)qword_10016F728);
    oslog = Logger.logObject.getter(v1);
    v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      v3 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Player asked to resume song but current song not in system player queue.", v3, 2u);
      swift_slowDealloc(v3, -1, -1);
    }

  }
}

void sub_1000F94A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  NSObject *oslog;

  if ((sub_1000F88EC() & 1) != 0)
  {
    type metadata accessor for SystemMusicPlayer(0);
    v0 = static SystemMusicPlayer.shared.getter();
    dispatch thunk of MusicPlayer.pause()();
    swift_release(v0);
  }
  else
  {
    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_100011AC4(v1, (uint64_t)qword_10016F728);
    oslog = Logger.logObject.getter(v2);
    v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Failed to pause song. Current song not in System player..", v4, 2u);
      swift_slowDealloc(v4, -1, -1);
    }

  }
}

uint64_t sub_1000F95A8()
{
  return swift_task_switch(sub_1000F95BC, 0, 0);
}

uint64_t sub_1000F95BC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  type metadata accessor for SystemMusicPlayer(0);
  *(_QWORD *)(v0 + 56) = static SystemMusicPlayer.shared.getter();
  v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of MusicPlayer.play()
                         + async function pointer to dispatch thunk of MusicPlayer.play());
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of MusicPlayer.play() + 1));
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = sub_1000F962C;
  return v3();
}

uint64_t sub_1000F962C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000F9774;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 56));
    v4 = sub_1000F9698;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000F9698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (qword_10015CF60 != -1)
    swift_once(&qword_10015CF60, sub_100105E80);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100011AC4(v1, (uint64_t)qword_10016F728);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Song playback started.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F9774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  swift_release(*(_QWORD *)(v0 + 56));
  if (qword_10015CF60 != -1)
    swift_once(&qword_10015CF60, sub_100105E80);
  v1 = *(_QWORD *)(v0 + 72);
  v2 = type metadata accessor for Logger(0);
  sub_100011AC4(v2, (uint64_t)qword_10016F728);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 72);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v13 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v7, v0 + 40, v0 + 16);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 48) = sub_1000C7684(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to play song with error %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 72));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000F9970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  __n128 v9;
  int v10;
  uint64_t KeyPath;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for MusicPlayer.PlaybackStatus(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_1000F88EC() & 1) == 0)
  {
    KeyPath = swift_getKeyPath(&unk_100114590);
    __chkstk_darwin(KeyPath);
    v12 = &v23 - 4;
    *(&v23 - 2) = v0;
    *((_BYTE *)&v23 - 8) = 0;
    v24 = v0;
    v13 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
    v14 = (char *)&type metadata for () + 8;
LABEL_6:
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v24, KeyPath, sub_1000FA700, v12, v14, v13);
    swift_release(KeyPath);
    return;
  }
  type metadata accessor for SystemMusicPlayer(0);
  v6 = ((uint64_t (*)(void))static SystemMusicPlayer.shared.getter)();
  v7 = MusicPlayer.state.getter();
  v8 = swift_release(v6);
  dispatch thunk of MusicPlayer.State.playbackStatus.getter(v8);
  v9 = swift_release(v7);
  v10 = (*(uint64_t (**)(char *, uint64_t, __n128))(v3 + 88))(v5, v2, v9);
  if (v10 == enum case for MusicPlayer.PlaybackStatus.stopped(_:))
  {
    if (sub_1000F8834() <= 0.0)
      return;
    KeyPath = swift_getKeyPath(&unk_100114590);
    __chkstk_darwin(KeyPath);
    v12 = &v23 - 4;
    *(&v23 - 2) = v1;
    *((_BYTE *)&v23 - 8) = 0;
    v24 = v1;
    v13 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
    v14 = (char *)&type metadata for () + 8;
    goto LABEL_6;
  }
  if (v10 == enum case for MusicPlayer.PlaybackStatus.playing(_:))
  {
    KeyPath = swift_getKeyPath(&unk_100114590);
    __chkstk_darwin(KeyPath);
    v12 = &v23 - 4;
    *(&v23 - 2) = v1;
    *((_BYTE *)&v23 - 8) = 2;
    v24 = v1;
    v13 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
    v14 = (char *)&type metadata for () + 8;
    goto LABEL_6;
  }
  if (v10 == enum case for MusicPlayer.PlaybackStatus.paused(_:)
    || v10 == enum case for MusicPlayer.PlaybackStatus.interrupted(_:))
  {
    v16 = swift_getKeyPath(&unk_100114590);
    __chkstk_darwin(v16);
    *(&v23 - 2) = v1;
    *((_BYTE *)&v23 - 8) = 3;
    v24 = v1;
    v17 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v24, v16, sub_1000FA700, &v23 - 4, (char *)&type metadata for () + 8, v17);
    v18 = swift_release(v16);
    v19 = static SystemMusicPlayer.shared.getter(v18);
    v20 = dispatch thunk of MusicPlayer.playbackTime.getter();
    swift_release(v19);
    if (v20 == 0.0)
    {
      v21 = swift_getKeyPath(&unk_100114590);
      __chkstk_darwin(v21);
      *(&v23 - 2) = v1;
      *((_BYTE *)&v23 - 8) = 0;
      v24 = v1;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v24, v21, sub_1000FA700, &v23 - 4, (char *)&type metadata for () + 8, v17);
      swift_release(v21);
    }
  }
  else if (v10 != enum case for MusicPlayer.PlaybackStatus.seekingForward(_:)
         && v10 != enum case for MusicPlayer.PlaybackStatus.seekingBackward(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

double sub_1000F9DB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    sub_1000F9970();
    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  }
  return result;
}

double sub_1000F9E0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  char v10[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    if ((sub_1000F88EC() & 1) != 0)
    {
      *(_QWORD *)&result = swift_release(v4).n128_u64[0];
    }
    else
    {
      KeyPath = swift_getKeyPath(&unk_100114590);
      __chkstk_darwin(KeyPath);
      v7[2] = v4;
      v8 = 0;
      v9 = v4;
      v6 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000FA278, v7, (char *)&type metadata for () + 8, v6);
      swift_release(v4);
      *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_1000F9F20()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_100008194((uint64_t)(v0 + 3), &qword_10015D968);
  swift_release(v0[8]);
  swift_release(v0[9]);
  v1 = (char *)v0 + OBJC_IVAR____TtC16EventViewService16AppleMusicPlayer___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000F9F90()
{
  return type metadata accessor for AppleMusicPlayer(0);
}

uint64_t type metadata accessor for AppleMusicPlayer(uint64_t a1)
{
  uint64_t result;

  result = qword_100164ED8;
  if (!qword_100164ED8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppleMusicPlayer);
  return result;
}

uint64_t sub_1000F9FD4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1001144C8;
  v4[1] = &unk_1001144E0;
  v4[2] = &unk_1001144F8;
  v4[3] = &unk_1001144F8;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

double sub_1000FA060()
{
  return sub_1000F8834();
}

uint64_t sub_1000FA080()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  KeyPath = swift_getKeyPath(&unk_100114590);
  v5 = v1;
  v3 = sub_100003B3C(&qword_100164F90, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_100114510);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v3);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v1 + 16);
}

double sub_1000FA104(_QWORD *a1)
{
  return sub_1000F91FC(a1);
}

void sub_1000FA124()
{
  sub_1000F93C4();
}

void sub_1000FA144()
{
  sub_1000F94A8();
}

double sub_1000FA164()
{
  return sub_1000F8C80();
}

unint64_t sub_1000FA194()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100164FA0;
  if (!qword_100164FA0)
  {
    v1 = objc_opt_self(NSRunLoop);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100164FA0);
  }
  return result;
}

uint64_t sub_1000FA1D0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_1000FA1F4()
{
  uint64_t v0;

  return sub_1000F9DB8(v0);
}

uint64_t sub_1000FA1FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000FA21C()
{
  return sub_1000FA2E0();
}

double sub_1000FA230()
{
  uint64_t v0;

  return sub_1000F9E0C(v0);
}

uint64_t sub_1000FA238()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FA25C()
{
  return sub_1000FA2A8();
}

void sub_1000FA278()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 16) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_1000FA290()
{
  uint64_t v0;

  return sub_1000F8198(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000FA2A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(v2 + 72) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

uint64_t sub_1000FA2E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 64) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

uint64_t sub_1000FA318(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1000FA37C;
  return v6(a1);
}

uint64_t sub_1000FA37C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

double sub_1000FA3C8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  double result;
  _QWORD v19[4];

  v0 = sub_100003E70(&qword_100161700);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for TaskPriority(0);
  v4 = *(_QWORD *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  v5 = swift_allocObject(&unk_1001548D8, 32, 7);
  *(_QWORD *)(v5 + 16) = 0;
  v6 = (_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 24) = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_100008194((uint64_t)v2, &qword_100161700);
    v7 = 0;
    v8 = 0;
    v9 = 7168;
  }
  else
  {
    v10 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
    v9 = v10 | 0x1C00;
    v11 = *v6;
    if (*v6)
    {
      v12 = *(_QWORD *)(v5 + 24);
      ObjectType = swift_getObjectType(*v6);
      swift_unknownObjectRetain(v11);
      v7 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v12);
      v8 = v14;
      swift_unknownObjectRelease(v11);
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
  }
  v15 = swift_allocObject(&unk_100154900, 32, 7);
  *(_QWORD *)(v15 + 16) = &unk_100164FD8;
  *(_QWORD *)(v15 + 24) = v5;
  if (v8 | v7)
  {
    v19[0] = 0;
    v19[1] = 0;
    v16 = v19;
    v19[2] = v7;
    v19[3] = v8;
  }
  else
  {
    v16 = 0;
  }
  v17 = swift_task_create(v9, v16, (char *)&type metadata for () + 8, &unk_100164FE8, v15);
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

uint64_t sub_1000FA584()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FA5A8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100164FD4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000072F4;
  return swift_task_switch(sub_1000F95BC, 0, 0);
}

uint64_t sub_1000FA600(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100164FE4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100031054;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100164FE0 + dword_100164FE0))(a1, v4);
}

uint64_t sub_1000FA670(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100164FE4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000072F4;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100164FE0 + dword_100164FE0))(a1, v4);
}

uint64_t sub_1000FA6EC()
{
  return sub_1000FA290();
}

void sub_1000FA700()
{
  sub_1000FA278();
}

uint64_t getEnumTagSinglePayload for ConditionalFrameModifier(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[40])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ConditionalFrameModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConditionalFrameModifier()
{
  return &type metadata for ConditionalFrameModifier;
}

uint64_t sub_1000FA7C8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011BD5C, 1);
}

uint64_t sub_1000FA7D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  _OWORD v19[3];

  v5 = sub_100003E70(&qword_100165000);
  __chkstk_darwin(v5);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v2 + 1;
  if (*(_BYTE *)v2)
    v10 = v2 + 4;
  else
    v10 = v2 + 3;
  if (*(_BYTE *)v2)
    v9 = v2 + 2;
  v11 = *v9;
  v12 = *v10;
  v13 = static Alignment.center.getter(v6);
  _FrameLayout.init(width:height:alignment:)(v19, v11, 0, v12, 0, v13, v14);
  v15 = sub_100003E70(&qword_100165008);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v8, a1, v15);
  v16 = &v8[*(int *)(v5 + 36)];
  v17 = v19[1];
  *(_OWORD *)v16 = v19[0];
  *((_OWORD *)v16 + 1) = v17;
  *((_OWORD *)v16 + 2) = v19[2];
  return sub_100007A98((uint64_t)v8, a2, &qword_100165000);
}

uint64_t sub_1000FA8F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for ConditionalFontModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

uint64_t assignWithTake for ConditionalFontModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_release(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for ConditionalFontModifier()
{
  return &type metadata for ConditionalFontModifier;
}

ValueMetadata *type metadata accessor for ConditionalFrameModifier.Size()
{
  return &type metadata for ConditionalFrameModifier.Size;
}

unint64_t sub_1000FA9FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100165010;
  if (!qword_100165010)
  {
    v1 = sub_1000034AC(&qword_100165000);
    sub_100007D40(&qword_100165018, &qword_100165008, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100165010);
  }
  return result;
}

uint64_t sub_1000FAA80(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011BDA0, 1);
}

double sub_1000FAA90@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t *v15;
  double result;
  uint64_t v17;

  v5 = sub_100003E70(&qword_100165048);
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - v9;
  if (*v2)
    v11 = (uint64_t *)(v2 + 16);
  else
    v11 = (uint64_t *)(v2 + 8);
  v12 = *v11;
  KeyPath = swift_getKeyPath(&unk_100114710);
  v14 = sub_100003E70(&qword_100165050);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v7, a1, v14);
  v15 = (uint64_t *)&v7[*(int *)(v5 + 36)];
  *v15 = KeyPath;
  v15[1] = v12;
  sub_100007A98((uint64_t)v7, (uint64_t)v10, &qword_100165048);
  sub_100007A98((uint64_t)v10, a2, &qword_100165048);
  *(_QWORD *)&result = swift_retain(v12).n128_u64[0];
  return result;
}

ValueMetadata *type metadata accessor for ConditionalFontModifier.Font()
{
  return &type metadata for ConditionalFontModifier.Font;
}

unint64_t sub_1000FABC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100165058;
  if (!qword_100165058)
  {
    v1 = sub_1000034AC(&qword_100165048);
    sub_100007D40(&qword_100165060, &qword_100165050, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_100007D40(&qword_10015E310, &qword_10015E318, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100165058);
  }
  return result;
}

uint64_t *sub_1000FAC64(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = *(int *)(type metadata accessor for AttributionViewModel(0) + 24);
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for URL(0);
    v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v14 = swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12, v14);
    v15 = *(int *)(a3 + 20);
    v16 = (uint64_t *)((char *)v4 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = *v17;
    v19 = v17[1];
    *v16 = v18;
    v16[1] = v19;
  }
  swift_retain(v18);
  return v4;
}

double sub_1000FAD44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(type metadata accessor for AttributionViewModel(0) + 24);
  v5 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20))).n128_u64[0];
  return result;
}

_QWORD *sub_1000FADB0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(int *)(type metadata accessor for AttributionViewModel(0) + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v13 = swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11, v13);
  v14 = *(int *)(a3 + 20);
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = *v16;
  v18 = v16[1];
  *v15 = v17;
  v15[1] = v18;
  swift_retain(v17);
  return a1;
}

_QWORD *sub_1000FAE68(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v7 = a2[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  v8 = *(int *)(type metadata accessor for AttributionViewModel(0) + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = *(_QWORD *)((char *)a1 + v12);
  v16 = *v14;
  *(_QWORD *)((char *)a1 + v12) = *v14;
  swift_retain(v16);
  swift_release(v15);
  *((_QWORD *)v13 + 1) = v14[1];
  return a1;
}

_OWORD *sub_1000FAF40(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(type metadata accessor for AttributionViewModel(0) + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *sub_1000FAFC0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(type metadata accessor for AttributionViewModel(0) + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = *(_QWORD *)((char *)a1 + v12);
  *(_QWORD *)((char *)a1 + v12) = *v14;
  swift_release(v15);
  *((_QWORD *)v13 + 1) = v14[1];
  return a1;
}

uint64_t sub_1000FB070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000FB07C);
}

uint64_t sub_1000FB07C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for AttributionViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1000FB104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FB110);
}

uint64_t sub_1000FB110(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for AttributionViewModel(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for AttributionModule(uint64_t a1)
{
  uint64_t result;

  result = qword_1001650E8;
  if (!qword_1001650E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AttributionModule);
  return result;
}

uint64_t sub_1000FB1C4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for AttributionViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100114778;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000FB234(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011BDF0, 1);
}

uint64_t sub_1000FB244@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t KeyPath;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v54[4];
  int v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;

  v60 = sub_100003E70(&qword_100165120);
  __chkstk_darwin(v60);
  v64 = (uint64_t *)&v54[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for AttributionModule(0);
  v56 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v57 = v5;
  v58 = &v54[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for OpenURLAction(0);
  v62 = *(_QWORD *)(v6 - 8);
  v63 = v6;
  __chkstk_darwin(v6);
  v61 = &v54[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v8);
  v10 = &v54[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v59 = v1;
  sub_1000AE11C((uint64_t)v10);
  v11 = Text.init(_:)(v10);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  if (qword_10015CE58 != -1)
    swift_once(&qword_10015CE58, sub_1000382B4);
  v18 = v15 & 1;
  v19 = Text.foregroundColor(_:)(qword_10016F650, v11, v13, v18, v17);
  v21 = v20;
  v23 = v22;
  v25 = v24 & 1;
  sub_10000BFF8(v11, v13, v18);
  v26 = swift_bridgeObjectRelease();
  v27 = static Font.footnote.getter(v26);
  v28 = Text.font(_:)(v27, v19, v21, v25, v23);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  swift_release(v27);
  v32 &= 1u;
  sub_10000BFF8(v19, v21, v25);
  v35 = swift_bridgeObjectRelease();
  v55 = static Edge.Set.leading.getter(v35);
  v36 = EdgeInsets.init(_all:)(32.0);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  KeyPath = swift_getKeyPath(&unk_1001147E0);
  v44 = v58;
  sub_1000FB634(v59, (uint64_t)v58);
  v45 = *(unsigned __int8 *)(v56 + 80);
  v46 = (v45 + 16) & ~v45;
  v47 = swift_allocObject(&unk_100154BB0, v46 + v57, v45 | 7);
  sub_1000FB720((uint64_t)v44, v47 + v46);
  v48 = v61;
  OpenURLAction.init(handler:)(sub_1000FB764, v47);
  v50 = v63;
  v49 = v64;
  v51 = v62;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v62 + 16))((_BYTE *)v64 + *(int *)(v60 + 28), v48, v63);
  *v49 = KeyPath;
  v52 = sub_100003E70(&qword_100165128);
  sub_1000FB7B0((uint64_t)v49, a1 + *(int *)(v52 + 36));
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v30;
  *(_BYTE *)(a1 + 16) = v32;
  *(_QWORD *)(a1 + 24) = v34;
  *(_BYTE *)(a1 + 32) = v55;
  *(double *)(a1 + 40) = v36;
  *(_QWORD *)(a1 + 48) = v38;
  *(_QWORD *)(a1 + 56) = v40;
  *(_QWORD *)(a1 + 64) = v42;
  *(_BYTE *)(a1 + 72) = 0;
  sub_10000C008(v28, v30, v32);
  swift_bridgeObjectRetain(v34);
  sub_1000FB7F8((uint64_t)v49);
  (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v48, v50);
  sub_10000BFF8(v28, v30, v32);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000FB5A4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = (_QWORD *)(a2 + *(int *)(type metadata accessor for AttributionModule(0) + 20));
  v3 = *v2;
  if (*v2)
  {
    swift_retain(*v2);
    sub_1000AE630(v4);
    v5 = swift_release(v3);
    return static OpenURLAction.Result.systemAction.getter(v5);
  }
  else
  {
    v7 = v2[1];
    v8 = type metadata accessor for RemoteViewConfiguration();
    v9 = sub_10000ACDC();
    result = EnvironmentObject.error()(0, v7, v8, v9);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FB634(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttributionModule(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FB678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for AttributionModule(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v7 + *(int *)(type metadata accessor for AttributionViewModel(0) + 24);
  v9 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_release(*(_QWORD *)(v7 + *(int *)(v1 + 20)));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000FB720(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttributionModule(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FB764(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AttributionModule(0) - 8) + 80);
  return sub_1000FB5A4(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1000FB7B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003E70(&qword_100165120);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FB7F8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003E70(&qword_100165120);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000FB83C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100165130;
  if (!qword_100165130)
  {
    v1 = sub_1000034AC(&qword_100165128);
    sub_100043124();
    sub_1000FB8A8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100165130);
  }
  return result;
}

unint64_t sub_1000FB8A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100165138[0];
  if (!qword_100165138[0])
  {
    v1 = sub_1000034AC(&qword_100165120);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, qword_100165138);
  }
  return result;
}

uint64_t sub_1000FB8F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _BYTE v18[9];
  uint64_t v19;

  v6 = *a1;
  WitnessTable = swift_getWitnessTable(&unk_100114B38, *a1);
  Bindable<A>.init(wrappedValue:)(a1, v6, WitnessTable);
  v8 = *(_QWORD *)(v6 + 80);
  v10 = type metadata accessor for PhoneWallpaperView(0, v8, *(_QWORD *)(v6 + 88), v9);
  sub_10001E4C4(a2, v8);
  v11 = a3 + *(int *)(v10 + 40);
  v18[0] = 0;
  State.init(wrappedValue:)(v18, &type metadata for Bool);
  v12 = v19;
  *(_BYTE *)v11 = v18[1];
  *(_QWORD *)(v11 + 8) = v12;
  v13 = (uint64_t *)(a3 + *(int *)(v10 + 44));
  v14 = type metadata accessor for RemoteViewConfiguration();
  v15 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
  result = EnvironmentObject.init()(v14, v15);
  *v13 = result;
  v13[1] = v17;
  return result;
}

uint64_t type metadata accessor for PhoneWallpaperView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PhoneWallpaperView);
}

uint64_t sub_1000FB9F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  Bindable.wrappedValue.getter(&v7, v5);
  return v7;
}

uint64_t sub_1000FBA30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[4];

  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for PhoneWallpaperViewModel(255, v5, *(_QWORD *)(a1 + 24), a4);
  result = type metadata accessor for Bindable(319, v6);
  if (v8 <= 0x3F)
  {
    v11[0] = *(_QWORD *)(result - 8) + 64;
    v9 = type metadata accessor for Optional(255, v5);
    result = type metadata accessor for State(319, v9);
    if (v10 <= 0x3F)
    {
      v11[1] = *(_QWORD *)(result - 8) + 64;
      v11[2] = &unk_100114838;
      v11[3] = &unk_100114838;
      swift_initStructMetadata(a1, 0, 4, v11, a1 + 32);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_1000FBAE4(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;

  v5 = a1;
  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v5 = (_QWORD *)(v16 + ((v6 + 16) & ~(unint64_t)v6));
  }
  else
  {
    v8 = *(_QWORD *)(a3 + 16);
    v9 = type metadata accessor for PhoneWallpaperViewModel(255, v8, *(_QWORD *)(a3 + 24), a4);
    v10 = type metadata accessor for Bindable(0, v9);
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v5, a2, v10);
    v11 = *(int *)(a3 + 36);
    v12 = (char *)v5 + v11;
    v13 = &a2[v11];
    v14 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(&a2[v11], 1, v8))
    {
      v15 = type metadata accessor for Optional(0, v8);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v12, v13, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v8);
    }
    v17 = type metadata accessor for Optional(255, v8);
    v18 = *(int *)(type metadata accessor for State(0, v17) + 28);
    v19 = *(_QWORD *)&v13[v18];
    *(_QWORD *)&v12[v18] = v19;
    v20 = *(int *)(a3 + 40);
    v21 = *(int *)(a3 + 44);
    v22 = (char *)v5 + v20;
    v23 = &a2[v20];
    *v22 = *v23;
    v24 = *((_QWORD *)v23 + 1);
    *((_QWORD *)v22 + 1) = v24;
    v25 = (_QWORD *)((char *)v5 + v21);
    v26 = &a2[v21];
    v16 = *(_QWORD *)v26;
    v27 = *((_QWORD *)v26 + 1);
    *v25 = v16;
    v25[1] = v27;
    swift_retain(v19);
    swift_retain(v24);
  }
  swift_retain(v16);
  return v5;
}

double sub_1000FBC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = type metadata accessor for PhoneWallpaperViewModel(255, v6, *(_QWORD *)(a2 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  v9 = a1 + *(int *)(a2 + 36);
  v10 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v6);
  v11 = type metadata accessor for Optional(255, v6);
  v12 = type metadata accessor for State(0, v11);
  swift_release(*(_QWORD *)(v9 + *(int *)(v12 + 28)));
  swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 40) + 8));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 44))).n128_u64[0];
  return result;
}

uint64_t sub_1000FBD2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for PhoneWallpaperViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a2 + v10, 1, v7))
  {
    v14 = type metadata accessor for Optional(0, v7);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v12, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v7);
  }
  v15 = type metadata accessor for Optional(255, v7);
  v16 = *(int *)(type metadata accessor for State(0, v15) + 28);
  v17 = *(_QWORD *)&v12[v16];
  *(_QWORD *)&v11[v16] = v17;
  v18 = *(int *)(a3 + 40);
  v19 = *(int *)(a3 + 44);
  v20 = a1 + v18;
  v21 = a2 + v18;
  *(_BYTE *)v20 = *(_BYTE *)v21;
  v22 = *(_QWORD *)(v21 + 8);
  *(_QWORD *)(v20 + 8) = v22;
  v23 = (_QWORD *)(a1 + v19);
  v24 = (uint64_t *)(a2 + v19);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_retain(v17);
  swift_retain(v22);
  swift_retain(v26);
  return a1;
}

uint64_t sub_1000FBE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for PhoneWallpaperViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = *(_QWORD *)(v7 - 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(a1 + v10, 1, v7);
  v16 = v14((uint64_t)v12, 1, v7);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v11, v12, v7);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v7);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = type metadata accessor for Optional(0, v7);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v12, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v7);
LABEL_7:
  v18 = type metadata accessor for Optional(255, v7);
  v19 = *(int *)(type metadata accessor for State(0, v18) + 28);
  v20 = *(_QWORD *)&v11[v19];
  v21 = *(_QWORD *)&v12[v19];
  *(_QWORD *)&v11[v19] = v21;
  swift_retain(v21);
  swift_release(v20);
  v22 = *(int *)(a3 + 40);
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_BYTE *)v23 = *(_BYTE *)v24;
  v25 = *(_QWORD *)(v23 + 8);
  v26 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v23 + 8) = v26;
  swift_retain(v26);
  swift_release(v25);
  v27 = *(int *)(a3 + 44);
  v28 = a1 + v27;
  v29 = (uint64_t *)(a2 + v27);
  v30 = *(_QWORD *)(a1 + v27);
  v31 = *v29;
  *(_QWORD *)(a1 + v27) = *v29;
  swift_retain(v31);
  swift_release(v30);
  *(_QWORD *)(v28 + 8) = v29[1];
  return a1;
}

uint64_t sub_1000FC040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for PhoneWallpaperViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a2 + v10, 1, v7))
  {
    v14 = type metadata accessor for Optional(0, v7);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v11, v12, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v7);
  }
  v15 = type metadata accessor for Optional(255, v7);
  v16 = type metadata accessor for State(0, v15);
  *(_QWORD *)&v11[*(int *)(v16 + 28)] = *(_QWORD *)&v12[*(int *)(v16 + 28)];
  v17 = *(int *)(a3 + 44);
  *(_OWORD *)(a1 + *(int *)(a3 + 40)) = *(_OWORD *)(a2 + *(int *)(a3 + 40));
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  return a1;
}

uint64_t sub_1000FC164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for PhoneWallpaperViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = *(_QWORD *)(v7 - 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(a1 + v10, 1, v7);
  v16 = v14((uint64_t)v12, 1, v7);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v11, v12, v7);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v7);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = type metadata accessor for Optional(0, v7);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v11, v12, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v7);
LABEL_7:
  v18 = type metadata accessor for Optional(255, v7);
  v19 = *(int *)(type metadata accessor for State(0, v18) + 28);
  v20 = *(_QWORD *)&v11[v19];
  *(_QWORD *)&v11[v19] = *(_QWORD *)&v12[v19];
  swift_release(v20);
  v21 = *(int *)(a3 + 40);
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_BYTE *)v22 = *(_BYTE *)v23;
  v24 = *(_QWORD *)(v22 + 8);
  *(_QWORD *)(v22 + 8) = *(_QWORD *)(v23 + 8);
  swift_release(v24);
  v25 = *(int *)(a3 + 44);
  v26 = a1 + v25;
  v27 = (_QWORD *)(a2 + v25);
  v28 = *(_QWORD *)(a1 + v25);
  *(_QWORD *)(a1 + v25) = *v27;
  swift_release(v28);
  *(_QWORD *)(v26 + 8) = v27[1];
  return a1;
}

uint64_t sub_1000FC310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000FC31C);
}

uint64_t sub_1000FC31C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  int v19;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for PhoneWallpaperViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    v13 = a1;
    return v12(v13, a2, v11);
  }
  v14 = type metadata accessor for Optional(255, v7);
  v15 = type metadata accessor for State(0, v14);
  v16 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v16 + 84) == (_DWORD)a2)
  {
    v11 = v15;
    v13 = a1 + *(int *)(a3 + 36);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
    return v12(v13, a2, v11);
  }
  v18 = *(_QWORD *)(a1 + *(int *)(a3 + 40) + 8);
  if (v18 >= 0xFFFFFFFF)
    LODWORD(v18) = -1;
  v19 = v18 - 1;
  if (v19 < 0)
    v19 = -1;
  return (v19 + 1);
}

uint64_t sub_1000FC3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FC404);
}

uint64_t sub_1000FC404(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v8 = *(_QWORD *)(a4 + 16);
  v9 = type metadata accessor for PhoneWallpaperViewModel(255, v8, *(_QWORD *)(a4 + 24), a4);
  v10 = type metadata accessor for Bindable(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    v12 = v10;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v14 = a1;
    return v13(v14, a2, a2, v12);
  }
  v15 = type metadata accessor for Optional(255, v8);
  result = type metadata accessor for State(0, v15);
  v17 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v17 + 84) == a3)
  {
    v12 = result;
    v14 = a1 + *(int *)(a4 + 36);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
    return v13(v14, a2, a2, v12);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 40) + 8) = a2;
  return result;
}

uint64_t sub_1000FC4DC(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10011BEB0, 1);
}

uint64_t sub_1000FC510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t TupleTypeMetadata2;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t TupleTypeMetadata3;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98[16];
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  _QWORD *v114;

  v97 = a2;
  v3 = sub_1000034AC(&qword_10015E170);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = a1;
  v96 = a1;
  v6 = type metadata accessor for Array(255, v4);
  v7 = type metadata accessor for ScrollAsset(255);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
  v9 = *(_QWORD *)(v5 + 24);
  v10 = *(_QWORD **)(v9 + 8);
  v110 = v6;
  v111 = v4;
  v112 = v7;
  v113 = (void *)WitnessTable;
  v114 = v10;
  v11 = type metadata accessor for ForEach(255, &v110);
  v109 = sub_100003B3C(&qword_10015E178, type metadata accessor for ScrollAsset, (uint64_t)&unk_1001133C0);
  v12 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v11);
  v13 = type metadata accessor for HStack(255, v11, v12);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v13);
  v110 = v13;
  v111 = v14;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v110, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v110 = v13;
  v111 = v14;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v110, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v17 = type metadata accessor for ScrollView(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v18 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v17);
  v110 = v17;
  v111 = v18;
  v19 = swift_getOpaqueTypeMetadata2(255, &v110, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v20 = type metadata accessor for ViewAlignedScrollTargetBehavior(255);
  v110 = v17;
  v111 = v18;
  v21 = swift_getOpaqueTypeConformance2(&v110, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v110 = v19;
  v111 = v20;
  v112 = v21;
  v113 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v22 = swift_getOpaqueTypeMetadata2(255, &v110, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v110 = v19;
  v111 = v20;
  v112 = v21;
  v113 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v23 = swift_getOpaqueTypeConformance2(&v110, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v110 = v22;
  v111 = v4;
  v112 = v23;
  v113 = v10;
  v24 = swift_getOpaqueTypeMetadata2(255, &v110, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v110 = v22;
  v111 = v4;
  v112 = v23;
  v113 = v10;
  v25 = swift_getOpaqueTypeConformance2(&v110, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v110 = v24;
  v111 = v25;
  v26 = swift_getOpaqueTypeMetadata2(255, &v110, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v27 = type metadata accessor for ModifiedContent(255, v26, &type metadata for _FrameLayout);
  v28 = type metadata accessor for Optional(255, v4);
  v110 = v24;
  v111 = v25;
  v107 = swift_getOpaqueTypeConformance2(&v110, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v108 = &protocol witness table for _FrameLayout;
  v29 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v27);
  v106 = v10[1];
  v30 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v28);
  v110 = v27;
  v111 = v28;
  v112 = v29;
  v113 = (void *)v30;
  v31 = swift_getOpaqueTypeMetadata2(255, &v110, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v32 = sub_1000034AC(&qword_10015E180);
  v33 = type metadata accessor for ModifiedContent(255, v31, v32);
  v34 = sub_1000034AC(&qword_1001651C0);
  v35 = type metadata accessor for ModifiedContent(255, v33, v34);
  v36 = type metadata accessor for ModifiedContent(255, v35, &type metadata for _PaddingLayout);
  v38 = type metadata accessor for PageControl(255, v4, v106, v37);
  v39 = type metadata accessor for Optional(255, v38);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v36, v39, 0, 0);
  v41 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v42 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v41);
  v43 = type metadata accessor for VStack(255, v41, v42);
  v44 = type metadata accessor for ModifiedContent(255, v43, &type metadata for _AppearanceActionModifier);
  v46 = _s16EventViewService17SelectAssetButtonVMa_0(255, v4, v9, v45);
  v47 = type metadata accessor for Optional(255, v46);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v3, v44, v47, 0, 0);
  v49 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v50 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v49);
  v51 = type metadata accessor for VStack(0, v49, v50);
  v90 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v53 = (char *)&v90 - v52;
  v54 = type metadata accessor for ModifiedContent(0, v51, &type metadata for _PaddingLayout);
  v93 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v56 = (char *)&v90 - v55;
  v57 = sub_1000034AC((uint64_t *)&unk_10015DB10);
  v58 = type metadata accessor for ModifiedContent(0, v54, v57);
  v94 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v91 = (char *)&v90 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v60);
  v92 = (uint64_t)&v90 - v61;
  v99 = v4;
  v100 = v9;
  v101 = v95;
  v63 = static HorizontalAlignment.center.getter(v62);
  v64 = VStack.init(alignment:spacing:content:)(v63, 0, 0, sub_1000FF4BC, v98, v49, v50);
  v65 = static Edge.Set.top.getter(v64);
  v66 = v96;
  v70 = sub_1000FB9F4(v96, v67, v68, v69);
  LOBYTE(v49) = sub_100104D48();
  swift_release(v70);
  if ((v49 & 1) != 0)
    v71 = 0x4042000000000000;
  else
    v71 = 0;
  v72 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v51);
  View.padding(_:_:)(v65, v71, 0, v51, v72);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v53, v51);
  v76 = sub_1000FB9F4(v66, v73, v74, v75);
  v77 = sub_100104D48();
  swift_release(v76);
  LOBYTE(v110) = (v77 & 1) == 0;
  v79 = static Alignment.center.getter(v78);
  v81 = v80;
  v82 = sub_100003E70(&qword_10015E190);
  v104 = v72;
  v105 = &protocol witness table for _PaddingLayout;
  v83 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v54);
  v84 = sub_100021FE8(&qword_10015E198, &qword_10015E190, (void (*)(void))sub_100021F80);
  v85 = (uint64_t)v91;
  View.background<A>(_:alignment:)(&v110, v79, v81, v54, v82, v83, v84);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v56, v54);
  v86 = sub_100007D40(&qword_10015DB08, (uint64_t *)&unk_10015DB10, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v102 = v83;
  v103 = v86;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v58);
  v87 = v92;
  sub_1000F257C(v85, v58, v92);
  v88 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
  v88(v85, v58);
  sub_1000E3B88(v87, v58, v97);
  return ((uint64_t (*)(uint64_t, uint64_t))v88)(v87, v58);
}

uint64_t sub_1000FCC74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *WitnessTable;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t TupleTypeMetadata2;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  void (*v81)(_QWORD, _QWORD);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(char *, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  void (*v144)(_QWORD, _QWORD);
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD v164[3];
  uint64_t *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t *v178;

  v159 = a1;
  v153 = a5;
  v7 = _s16EventViewService17SelectAssetButtonVMa_0(0, a2, a3, a4);
  v148 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v133 = (uint64_t)&v128 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v134 = (uint64_t)&v128 - v10;
  v11 = type metadata accessor for Optional(0, a2);
  v130 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v145 = (char *)&v128 - v12;
  v146 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v13);
  v132 = (char *)&v128 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v131 = (char *)&v128 - v16;
  v152 = v7;
  v151 = type metadata accessor for Optional(0, v7);
  v147 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v150 = (uint64_t)&v128 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v149 = (uint64_t)&v128 - v19;
  v21 = type metadata accessor for PhoneWallpaperView(0, a2, a3, v20);
  v143 = *(_QWORD *)(v21 - 8);
  v141 = *(_QWORD *)(v143 + 64);
  __chkstk_darwin(v21);
  v142 = (char *)&v128 - v22;
  v23 = type metadata accessor for Array(255, a2);
  v24 = type metadata accessor for ScrollAsset(255);
  WitnessTable = (uint64_t *)swift_getWitnessTable(&protocol conformance descriptor for [A], v23);
  v144 = (void (*)(_QWORD, _QWORD))a3;
  v26 = *(uint64_t **)(a3 + 8);
  v174 = v23;
  v175 = a2;
  v176 = v24;
  v177 = WitnessTable;
  v178 = v26;
  v27 = type metadata accessor for ForEach(255, &v174);
  v173 = sub_100003B3C(&qword_10015E178, type metadata accessor for ScrollAsset, (uint64_t)&unk_1001133C0);
  v28 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v27);
  v29 = type metadata accessor for HStack(255, v27, v28);
  v30 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v29);
  v174 = v29;
  v175 = v30;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v174, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v174 = v29;
  v175 = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v174, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v33 = type metadata accessor for ScrollView(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v33);
  v174 = v33;
  v175 = v34;
  v35 = swift_getOpaqueTypeMetadata2(255, &v174, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v36 = type metadata accessor for ViewAlignedScrollTargetBehavior(255);
  v174 = v33;
  v175 = v34;
  v37 = swift_getOpaqueTypeConformance2(&v174, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v174 = v35;
  v175 = v36;
  v176 = v37;
  v177 = (uint64_t *)&protocol witness table for ViewAlignedScrollTargetBehavior;
  v38 = swift_getOpaqueTypeMetadata2(255, &v174, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v174 = v35;
  v175 = v36;
  v176 = v37;
  v177 = (uint64_t *)&protocol witness table for ViewAlignedScrollTargetBehavior;
  v39 = swift_getOpaqueTypeConformance2(&v174, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v174 = v38;
  v175 = a2;
  v176 = v39;
  v177 = v26;
  v40 = swift_getOpaqueTypeMetadata2(255, &v174, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v174 = v38;
  v175 = a2;
  v176 = v39;
  v177 = v26;
  v41 = swift_getOpaqueTypeConformance2(&v174, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v174 = v40;
  v175 = v41;
  v42 = swift_getOpaqueTypeMetadata2(255, &v174, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v43 = type metadata accessor for ModifiedContent(255, v42, &type metadata for _FrameLayout);
  v174 = v40;
  v175 = v41;
  v171 = swift_getOpaqueTypeConformance2(&v174, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v172 = &protocol witness table for _FrameLayout;
  v44 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v43);
  v170 = v26[1];
  v45 = v170;
  v46 = (uint64_t *)swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v11);
  v174 = v43;
  v175 = v11;
  v129 = v11;
  v176 = v44;
  v177 = v46;
  v47 = swift_getOpaqueTypeMetadata2(255, &v174, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v48 = sub_1000034AC(&qword_10015E180);
  v49 = type metadata accessor for ModifiedContent(255, v47, v48);
  v50 = sub_1000034AC(&qword_1001651C0);
  v51 = type metadata accessor for ModifiedContent(255, v49, v50);
  v52 = type metadata accessor for ModifiedContent(255, v51, &type metadata for _PaddingLayout);
  v53 = a2;
  v55 = type metadata accessor for PageControl(255, a2, v45, v54);
  v56 = type metadata accessor for Optional(255, v55);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v52, v56, 0, 0);
  v58 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v59 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v58);
  v60 = type metadata accessor for VStack(0, v58, v59);
  v136 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v62 = (char *)&v128 - v61;
  v157 = type metadata accessor for ModifiedContent(0, v60, &type metadata for _AppearanceActionModifier);
  v155 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157);
  v140 = (char *)&v128 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v64);
  v135 = (char *)&v128 - v65;
  __chkstk_darwin(v66);
  v156 = (uint64_t)&v128 - v67;
  v158 = v21;
  v71 = sub_1000FB9F4(v21, v68, v69, v70);
  LOBYTE(v21) = sub_100104D48();
  swift_release(v71);
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v154 = 0;
  if ((v21 & 1) != 0)
  {
    v79 = sub_1000FB9F4(v158, v73, v74, v75);
    v76 = *(_QWORD *)(v79 + 16);
    v77 = *(_QWORD *)(v79 + 24);
    v78 = *(unsigned __int8 *)(v79 + 32);
    v80 = *(uint64_t **)(v79 + 40);
    swift_bridgeObjectRetain(v77);
    v154 = v80;
    swift_bridgeObjectRetain(v80);
    swift_release(v79);
  }
  v137 = v78;
  v138 = v77;
  v139 = v76;
  __chkstk_darwin(v72);
  v81 = v144;
  *(&v128 - 4) = v53;
  *(&v128 - 3) = (uint64_t)v81;
  v82 = v159;
  *(&v128 - 2) = v159;
  v84 = static HorizontalAlignment.center.getter(v83);
  VStack.init(alignment:spacing:content:)(v84, 0, 0, sub_1000FF4C8, &v128 - 6, v58, v59);
  v85 = v143;
  v86 = v142;
  v87 = v158;
  (*(void (**)(char *, uint64_t, uint64_t))(v143 + 16))(v142, v82, v158);
  v88 = *(unsigned __int8 *)(v85 + 80);
  v89 = (v88 + 32) & ~v88;
  v90 = swift_allocObject(&unk_100154C70, v89 + v141, v88 | 7);
  *(_QWORD *)(v90 + 16) = v53;
  *(_QWORD *)(v90 + 24) = v81;
  v91 = v86;
  v92 = v53;
  (*(void (**)(uint64_t, char *, uint64_t))(v85 + 32))(v90 + v89, v91, v87);
  v93 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v60);
  v94 = (uint64_t)v135;
  View.onAppear(perform:)(sub_1000FF4D8, v90, v60, v93);
  v95 = swift_release(v90);
  (*(void (**)(char *, uint64_t, __n128))(v136 + 8))(v62, v60, v95);
  v168 = v93;
  v169 = &protocol witness table for _AppearanceActionModifier;
  v96 = v157;
  v143 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v157);
  sub_1000F257C(v94, v96, v156);
  v144 = *(void (**)(_QWORD, _QWORD))(v155 + 8);
  v144(v94, v96);
  v97 = v145;
  sub_10001E560(v87, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  v98 = v146;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v97, 1, v92) == 1)
  {
    (*(void (**)(char *, uint64_t))(v130 + 8))(v97, v129);
    v99 = v150;
    v100 = v152;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v148 + 56))(v150, 1, 1, v152);
    swift_getWitnessTable(&unk_100114910, v100);
  }
  else
  {
    v101 = v131;
    (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v131, v97, v92);
    v102 = v158;
    v103 = (char *)(v159 + *(int *)(v158 + 40));
    v104 = *v103;
    v105 = (char *)*((_QWORD *)v103 + 1);
    LOBYTE(v165) = v104;
    v166 = v105;
    v106 = sub_100003E70(&qword_10015E858);
    State.projectedValue.getter(v106);
    v107 = v174;
    v108 = v175;
    v109 = v176;
    v110 = (uint64_t)v132;
    (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v132, v101, v92);
    v114 = (_QWORD *)sub_1000FB9F4(v102, v111, v112, v113);
    v115 = v133;
    sub_1000FF3CC(v107, v108, v109, v110, v114, v133);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v101, v92);
    v100 = v152;
    swift_getWitnessTable(&unk_100114910, v152);
    v116 = v134;
    sub_1000F257C(v115, v100, v134);
    v117 = v148;
    v118 = *(void (**)(uint64_t, uint64_t))(v148 + 8);
    v118(v115, v100);
    v99 = v150;
    sub_1000E3B88(v116, v100, v150);
    v118(v116, v100);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v117 + 56))(v99, 0, 1, v100);
  }
  v119 = v149;
  sub_1000E472C(v99, v100, v149);
  v120 = v147;
  v121 = *(void (**)(uint64_t, uint64_t))(v147 + 8);
  v122 = v151;
  v121(v99, v151);
  v174 = v139;
  v175 = v138;
  v176 = v137;
  v177 = v154;
  v165 = &v174;
  v123 = v140;
  v124 = v156;
  v125 = v157;
  (*(void (**)(char *, uint64_t, uint64_t))(v155 + 16))(v140, v156, v157);
  v166 = v123;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v120 + 16))(v99, v119, v122);
  v167 = v99;
  v164[0] = sub_100003E70(&qword_10015E170);
  v164[1] = v125;
  v164[2] = v122;
  v161 = sub_100021FE8(&qword_10015E1A8, &qword_10015E170, (void (*)(void))sub_10002204C);
  v162 = v143;
  v160 = swift_getWitnessTable(&unk_100114910, v100);
  v163 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v122);
  sub_1000E4768((uint64_t *)&v165, 3uLL, (uint64_t)v164);
  v121(v119, v122);
  v126 = (void (*)(char *, uint64_t))v144;
  v144(v124, v125);
  v121(v99, v122);
  v126(v123, v125);
  return sub_100022090(v174, v175, v176, (uint64_t)v177);
}

uint64_t sub_1000FD8A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t WitnessTable;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BOOL8 v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(_QWORD, _QWORD);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  __n128 v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __n128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void (*v190)(_QWORD *, uint64_t);
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(uint64_t, uint64_t);
  uint64_t v195;
  void (*v196)(char *, uint64_t, uint64_t);
  uint64_t v197;
  uint64_t v198;
  uint64_t (*v199)(uint64_t, uint64_t);
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t OpaqueTypeConformance2;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  void (*v270)(_QWORD, _QWORD);
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[8];
  _QWORD v274[12];
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  _QWORD *v279;

  v269 = a1;
  v261 = a5;
  v6 = *(_QWORD **)(a3 + 8);
  v270 = (void (*)(_QWORD, _QWORD))a3;
  v264 = v6[1];
  v265 = v6;
  v7 = v6;
  v9 = type metadata accessor for PageControl(0, a2, v264, a4);
  v255 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v201 = (_QWORD **)((char *)&v201 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v202 = (uint64_t)&v201 - v12;
  v258 = v13;
  v260 = type metadata accessor for Optional(0, v13);
  v256 = *(_QWORD *)(v260 - 8);
  __chkstk_darwin(v260);
  v259 = (uint64_t)&v201 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v257 = (uint64_t)&v201 - v16;
  v268 = type metadata accessor for PhoneWallpaperView(0, a2, a3, v17);
  v18 = *(_QWORD *)(*(_QWORD *)(v268 - 8) + 64);
  v252 = *(_QWORD *)(v268 - 8);
  v253 = v18;
  __chkstk_darwin(v268);
  v251 = (char *)&v201 - v19;
  v20 = type metadata accessor for Optional(0, a2);
  v21 = *(_QWORD *)(v20 - 8);
  v266 = v20;
  v254 = v21;
  __chkstk_darwin(v20);
  v250 = (char *)&v201 - v22;
  v24 = type metadata accessor for Binding(0, v23);
  v247 = *(_QWORD *)(v24 - 8);
  v248 = v24;
  __chkstk_darwin(v24);
  v263 = (char *)&v201 - v25;
  v26 = type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior(0);
  __chkstk_darwin(v26);
  v245 = (char *)&v201 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for ViewAlignedScrollTargetBehavior(0);
  v246 = *(_QWORD *)(v28 - 8);
  v29 = v28;
  __chkstk_darwin(v28);
  v242 = (char *)&v201 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for ContentMarginPlacement(0);
  v243 = *(_QWORD *)(v31 - 8);
  v244 = v31;
  __chkstk_darwin(v31);
  v225 = (char *)&v201 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for Array(255, a2);
  v34 = type metadata accessor for ScrollAsset(255);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v33);
  v275 = v33;
  v276 = a2;
  v277 = v34;
  v278 = (void *)WitnessTable;
  v279 = v7;
  v36 = type metadata accessor for ForEach(255, &v275);
  v274[11] = sub_100003B3C(&qword_10015E178, type metadata accessor for ScrollAsset, (uint64_t)&unk_1001133C0);
  v37 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v36);
  v38 = type metadata accessor for HStack(255, v36, v37);
  v39 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v38);
  v275 = v38;
  v276 = v39;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v275, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v218 = OpaqueTypeMetadata2;
  v275 = v38;
  v276 = v39;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v275, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v41 = type metadata accessor for ScrollView(0, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v228 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v214 = (char *)&v201 - v42;
  v43 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v41);
  v275 = v41;
  v276 = v43;
  v44 = swift_getOpaqueTypeMetadata2(0, &v275, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v230 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v215 = (char *)&v201 - v45;
  v275 = v41;
  v276 = v43;
  v46 = swift_getOpaqueTypeConformance2(&v275, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v275 = v44;
  v276 = v29;
  v211 = v29;
  v212 = v44;
  v47 = v29;
  v277 = v46;
  v278 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v48 = v46;
  v213 = v46;
  v49 = swift_getOpaqueTypeMetadata2(0, &v275, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v227 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v210 = (char *)&v201 - v50;
  v275 = v44;
  v276 = v47;
  v277 = v48;
  v278 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v51 = swift_getOpaqueTypeConformance2(&v275, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v207 = v49;
  v208 = v51;
  v275 = v49;
  v276 = a2;
  v52 = v51;
  v53 = v265;
  v277 = v51;
  v278 = v265;
  v54 = swift_getOpaqueTypeMetadata2(0, &v275, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v224 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v206 = (char *)&v201 - v55;
  v275 = v49;
  v276 = a2;
  v277 = v52;
  v278 = v53;
  v56 = swift_getOpaqueTypeConformance2(&v275, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v275 = v54;
  v276 = v56;
  v57 = v54;
  v204 = v54;
  v205 = v56;
  v58 = v56;
  v59 = swift_getOpaqueTypeMetadata2(0, &v275, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v226 = *(_QWORD *)(v59 - 8);
  v220 = v59;
  __chkstk_darwin(v59);
  v209 = (char *)&v201 - v60;
  v62 = type metadata accessor for ModifiedContent(0, v61, &type metadata for _FrameLayout);
  v235 = *(_QWORD *)(v62 - 8);
  v223 = v62;
  __chkstk_darwin(v62);
  v217 = (char *)&v201 - v63;
  v275 = v57;
  v276 = v58;
  v216 = swift_getOpaqueTypeConformance2(&v275, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v274[9] = v216;
  v274[10] = &protocol witness table for _FrameLayout;
  v64 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v62);
  v222 = v64;
  v274[8] = v264;
  v65 = v266;
  v221 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v266);
  v275 = v62;
  v276 = v65;
  v277 = v64;
  v278 = (void *)v221;
  v66 = swift_getOpaqueTypeMetadata2(0, &v275, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v234 = *(_QWORD *)(v66 - 8);
  v231 = v66;
  __chkstk_darwin(v66);
  v267 = (char *)&v201 - v67;
  v68 = sub_1000034AC(&qword_10015E180);
  v69 = type metadata accessor for ModifiedContent(0, v66, v68);
  v239 = *(_QWORD *)(v69 - 8);
  v232 = v69;
  __chkstk_darwin(v69);
  v229 = (char *)&v201 - v70;
  v71 = sub_1000034AC(&qword_1001651C0);
  v72 = type metadata accessor for ModifiedContent(0, v69, v71);
  v241 = *(_QWORD *)(v72 - 8);
  v237 = v72;
  __chkstk_darwin(v72);
  v233 = (char *)&v201 - v73;
  v203 = type metadata accessor for ModifiedContent(0, v74, &type metadata for _PaddingLayout);
  v240 = *(_QWORD *)(v203 - 8);
  __chkstk_darwin(v203);
  v249 = (char *)&v201 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v76);
  v236 = (char *)&v201 - v77;
  __chkstk_darwin(v78);
  v238 = (uint64_t)&v201 - v79;
  v81 = static Axis.Set.horizontal.getter(v80);
  v82 = a2;
  v273[2] = a2;
  v273[3] = v270;
  v273[4] = v269;
  v83 = v214;
  v84 = ScrollView.init(_:showsIndicators:content:)(v81, 0, sub_1001013F0, v273, v218, OpaqueTypeConformance2);
  v85 = static Edge.Set.horizontal.getter(v84);
  v86 = v268;
  v90 = sub_1000FB9F4(v268, v87, v88, v89);
  v91 = sub_100104DE8();
  swift_release(v90);
  v92 = v225;
  j___s7SwiftUI22ContentMarginPlacementV9automaticACvgZ(v41, v43);
  v93 = v215;
  v94 = v85;
  v95 = v263;
  View.contentMargins(_:_:for:)(v94, *(_QWORD *)&v91, 0, v92, v41, v43);
  (*(void (**)(char *, uint64_t))(v243 + 8))(v92, v244);
  v96 = (*(uint64_t (**)(char *, uint64_t))(v228 + 8))(v83, v41);
  v97 = v245;
  static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter(v96);
  v98 = v242;
  ViewAlignedScrollTargetBehavior.init(limitBehavior:)(v97);
  v99 = v210;
  v100 = v211;
  v101 = v212;
  View.scrollTargetBehavior<A>(_:)(v98, v212, v211, v213, &protocol witness table for ViewAlignedScrollTargetBehavior);
  (*(void (**)(char *, uint64_t))(v246 + 8))(v98, v100);
  (*(void (**)(char *, uint64_t))(v230 + 8))(v93, v101);
  v102 = v269;
  sub_10001E560(v86, (uint64_t (*)(uint64_t))&State.projectedValue.getter);
  v103 = v206;
  v104 = v207;
  View.scrollPosition<A>(id:anchor:)(v95, 0, 0, 1, v207, v82, v208, v265);
  (*(void (**)(char *, uint64_t))(v247 + 8))(v95, v248);
  (*(void (**)(char *, uint64_t))(v227 + 8))(v99, v104);
  v108 = sub_1000FB9F4(v86, v105, v106, v107);
  LOBYTE(v95) = sub_100104E24();
  swift_release(v108);
  v109 = (v95 & 1) == 0;
  v110 = v209;
  v111 = v204;
  View.scrollDisabled(_:)(v109, v204, v205);
  (*(void (**)(char *, uint64_t))(v224 + 8))(v103, v111);
  v115 = sub_1000FB9F4(v86, v112, v113, v114);
  v116 = sub_100104E4C();
  swift_release(v115);
  v118 = static Alignment.center.getter(v117);
  v119 = v217;
  v120 = v220;
  View.frame(width:height:alignment:)(0, 1, *(_QWORD *)&v116, 0, v118, v121, v220, v216);
  (*(void (**)(char *, uint64_t))(v226 + 8))(v110, v120);
  v122 = v250;
  v123 = v86;
  sub_10001E560(v86, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  v124 = v251;
  v125 = v252;
  v126 = v102;
  v127 = v123;
  (*(void (**)(char *, uint64_t, uint64_t))(v252 + 16))(v251, v126, v123);
  v128 = *(unsigned __int8 *)(v125 + 80);
  v129 = (v128 + 32) & ~v128;
  v130 = swift_allocObject(&unk_100154C98, v129 + v253, v128 | 7);
  v262 = v82;
  v131 = v270;
  *(_QWORD *)(v130 + 16) = v82;
  *(_QWORD *)(v130 + 24) = v131;
  (*(void (**)(uint64_t, char *, uint64_t))(v125 + 32))(v130 + v129, v124, v127);
  v133 = v222;
  v132 = v223;
  v134 = v266;
  v135 = (void *)v221;
  View.onChange<A>(of:initial:_:)(v122, 0, sub_100101400, v130, v223, v266, v222, v221);
  v136 = swift_release(v130);
  (*(void (**)(char *, uint64_t, __n128))(v254 + 8))(v122, v134, v136);
  v137 = v119;
  v138 = v132;
  v139 = (*(uint64_t (**)(char *, uint64_t))(v235 + 8))(v137, v132);
  v140 = static Alignment.center.getter(v139);
  v142 = v141;
  v143 = v262;
  v272[2] = v262;
  v272[3] = v131;
  v144 = v269;
  v272[4] = v269;
  v145 = sub_100003E70(&qword_10015E1B8);
  v275 = v138;
  v276 = v134;
  v277 = v133;
  v278 = v135;
  v146 = swift_getOpaqueTypeConformance2(&v275, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v147 = sub_100022D8C();
  v148 = v229;
  v149 = v140;
  v150 = v142;
  v151 = v231;
  v152 = v267;
  View.overlay<A>(alignment:content:)(v149, v150, sub_100101414, v272, v231, v145, v146, v147);
  v153 = (*(uint64_t (**)(char *, uint64_t))(v234 + 8))(v152, v151);
  v154 = static Alignment.center.getter(v153);
  v156 = v155;
  v271[2] = v143;
  v271[3] = v270;
  v271[4] = v144;
  v157 = sub_100003E70(&qword_1001651C8);
  v158 = sub_100007D40(&qword_10015E1E0, &qword_10015E180, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  v274[6] = v146;
  v274[7] = v158;
  v159 = v232;
  v160 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v232);
  v161 = sub_100007D40(&qword_1001651D0, &qword_1001651C8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v162 = v233;
  View.background<A>(alignment:content:)(v154, v156, sub_100101420, v271, v159, v157, v160, v161);
  v163 = (*(uint64_t (**)(char *, uint64_t))(v239 + 8))(v148, v159);
  v164 = static Edge.Set.bottom.getter(v163);
  v165 = sub_100007D40(qword_1001651D8, &qword_1001651C0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v274[4] = v160;
  v274[5] = v165;
  v166 = v237;
  v167 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v237);
  v168 = (uint64_t)v236;
  View.padding(_:_:)(v164, 0x403E000000000000, 0, v166, v167);
  (*(void (**)(char *, uint64_t))(v241 + 8))(v162, v166);
  v274[2] = v167;
  v274[3] = &protocol witness table for _PaddingLayout;
  v169 = v240;
  v170 = v203;
  v171 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v203);
  v172 = v238;
  v267 = (char *)v171;
  sub_1000F257C(v168, v170, v238);
  v173 = v170;
  v270 = *(void (**)(_QWORD, _QWORD))(v169 + 8);
  v270(v168, v170);
  v174 = v268;
  v178 = sub_1000FB9F4(v268, v175, v176, v177);
  LOBYTE(v170) = sub_100104E24();
  v182 = swift_release(v178);
  if ((v170 & 1) != 0)
  {
    v183 = sub_1000FB9F4(v174, v179, v180, v181);
    v184 = *(_QWORD *)(v183 + 240);
    swift_bridgeObjectRetain(v184);
    swift_release(v183);
    v185 = (uint64_t)v263;
    sub_10001E560(v174, (uint64_t (*)(uint64_t))&State.projectedValue.getter);
    v186 = v201;
    sub_1000AC494(v184, v185, v262, v264, v201);
    v187 = v258;
    swift_getWitnessTable(&unk_100111580, v258);
    v188 = v202;
    sub_1000F257C((uint64_t)v186, v187, v202);
    v189 = v255;
    v190 = *(void (**)(_QWORD *, uint64_t))(v255 + 8);
    v190(v186, v187);
    v191 = v259;
    sub_1000E3B88(v188, v187, v259);
    v190((_QWORD *)v188, v187);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v189 + 56))(v191, 0, 1, v187);
  }
  else
  {
    v187 = v258;
    v191 = v259;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v255 + 56))(v259, 1, 1, v258, v182);
    swift_getWitnessTable(&unk_100111580, v187);
  }
  v192 = v257;
  sub_1000E472C(v191, v187, v257);
  v193 = v256;
  v194 = *(void (**)(uint64_t, uint64_t))(v256 + 8);
  v195 = v260;
  v194(v191, v260);
  v196 = *(void (**)(char *, uint64_t, uint64_t))(v169 + 16);
  v197 = (uint64_t)v249;
  v196(v249, v172, v173);
  v275 = v197;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v193 + 16))(v191, v192, v195);
  v276 = v191;
  v274[0] = v173;
  v274[1] = v195;
  v273[6] = v267;
  v273[5] = swift_getWitnessTable(&unk_100111580, v187);
  v273[7] = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v195);
  sub_1000E4768(&v275, 2uLL, (uint64_t)v274);
  v194(v192, v195);
  v198 = v172;
  v199 = (uint64_t (*)(uint64_t, uint64_t))v270;
  v270(v198, v173);
  v194(v191, v195);
  return v199(v197, v173);
}

uint64_t sub_1000FE860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v28 = a3;
  v29 = a1;
  v30 = a4;
  v6 = type metadata accessor for Array(255, a2);
  v7 = type metadata accessor for ScrollAsset(255);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
  v9 = *(_QWORD *)(a3 + 8);
  v36 = v6;
  v37 = a2;
  v38 = v7;
  v39 = WitnessTable;
  v40 = v9;
  v10 = type metadata accessor for ForEach(255, &v36);
  v35 = sub_100003B3C(&qword_10015E178, type metadata accessor for ScrollAsset, (uint64_t)&unk_1001133C0);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v10);
  v12 = type metadata accessor for HStack(0, v10, v11);
  v27 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - v13;
  v15 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v12);
  v36 = v12;
  v37 = v15;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v36, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v17 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v27 - v21;
  v32 = a2;
  v33 = v28;
  v34 = v29;
  v24 = static VerticalAlignment.center.getter(v23);
  HStack.init(alignment:spacing:content:)(v24, 0x4034000000000000, 0, sub_10010142C, v31, v10, v11);
  View.scrollTargetLayout(isEnabled:)(1, v12, v15);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v12);
  v36 = v12;
  v37 = v15;
  swift_getOpaqueTypeConformance2(&v36, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  sub_1000F257C((uint64_t)v19, OpaqueTypeMetadata2, (uint64_t)v22);
  v25 = *(void (**)(char *, uint64_t))(v17 + 8);
  v25(v19, OpaqueTypeMetadata2);
  sub_1000E3B88((uint64_t)v22, OpaqueTypeMetadata2, v30);
  return ((uint64_t (*)(char *, uint64_t))v25)(v22, OpaqueTypeMetadata2);
}

uint64_t sub_1000FEAB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[5];

  v41 = a5;
  v8 = type metadata accessor for PhoneWallpaperView(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v35 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v32 - v10;
  v12 = type metadata accessor for Array(255, a2);
  v39 = v12;
  v13 = type metadata accessor for ScrollAsset(255);
  v38 = v13;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v12);
  v36 = *(_QWORD *)(a3 + 8);
  v37 = WitnessTable;
  v45[0] = v12;
  v45[1] = a2;
  v45[2] = v13;
  v45[3] = WitnessTable;
  v45[4] = v36;
  v15 = type metadata accessor for ForEach(0, v45);
  v40 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v34 = (uint64_t)&v32 - v19;
  v23 = sub_1000FB9F4(v8, v20, v21, v22);
  v24 = *(_QWORD *)(v23 + 240);
  swift_bridgeObjectRetain(v24);
  swift_release(v23);
  v45[0] = v24;
  v42 = a2;
  v43 = a3;
  KeyPath = swift_getKeyPath(&unk_1001148B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v25 = *(unsigned __int8 *)(v9 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = swift_allocObject(&unk_100154CC0, v26 + v35, v25 | 7);
  *(_QWORD *)(v27 + 16) = a2;
  *(_QWORD *)(v27 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v27 + v26, v11, v8);
  v28 = sub_100003B3C(&qword_10015E178, type metadata accessor for ScrollAsset, (uint64_t)&unk_1001133C0);
  ForEach<>.init(_:id:content:)(v45, KeyPath, sub_10010155C, v27, v39, v38, v37, v36, v28);
  v44 = v28;
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v15);
  v29 = v34;
  sub_1000F257C((uint64_t)v17, v15, v34);
  v30 = *(void (**)(char *, uint64_t))(v40 + 8);
  v30(v17, v15);
  sub_1000E3B88(v29, v15, v41);
  return ((uint64_t (*)(uint64_t, uint64_t))v30)(v29, v15);
}

int *sub_1000FED2C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  int *result;

  (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  v7 = type metadata accessor for PhoneWallpaperView(0, a1, a2, v6);
  v11 = sub_1000FB9F4(v7, v8, v9, v10);
  v12 = sub_100104D98();
  swift_release(v11);
  v16 = sub_1000FB9F4(v7, v13, v14, v15);
  v17 = sub_100104DC4();
  swift_release(v16);
  v21 = sub_1000FB9F4(v7, v18, v19, v20);
  v22 = sub_100104DE4();
  swift_release(v21);
  result = (int *)type metadata accessor for ScrollAsset(0);
  *(double *)(a3 + result[5]) = v12;
  *(double *)(a3 + result[6]) = v17;
  *(double *)(a3 + result[7]) = v22;
  return result;
}

void sub_1000FEE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = type metadata accessor for PhoneWallpaperView(0, a2, a3, a4);
  v9 = sub_1000FB9F4(v5, v6, v7, v8);
  v11 = *(_QWORD *)(v9 + 224);
  v10 = *(_QWORD *)(v9 + 232);
  swift_bridgeObjectRetain(v10);
  swift_release(v9);
  v12 = (uint64_t *)(a1 + *(int *)(v5 + 44));
  v13 = *v12;
  if (*v12)
  {
    swift_retain(*v12);
    sub_1000DB03C(v11, v10, 8, 10, 26, 0, 3u, v13);
    swift_bridgeObjectRelease();
    swift_release(v13);
  }
  else
  {
    v14 = v12[1];
    v15 = type metadata accessor for RemoteViewConfiguration();
    v16 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    EnvironmentObject.error()(0, v14, v15, v16);
    __break(1u);
  }
}

void sub_1000FEEF8(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;

  v5 = type metadata accessor for PhoneWallpaperView(0, a1, a2, a3);
  v9 = sub_1000FB9F4(v5, v6, v7, v8);
  v11 = *(_QWORD *)(v9 + 48);
  v10 = *(_QWORD *)(v9 + 56);
  swift_bridgeObjectRetain(v10);
  swift_release(v9);
  v15 = sub_1000FB9F4(v5, v12, v13, v14);
  v16 = sub_100104E50();
  swift_release(v15);
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v10;
  *(double *)(a4 + 16) = v16;
  *(_BYTE *)(a4 + 24) = 0;
}

double sub_1000FEF80@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  __n128 v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double result;
  uint64_t v48;

  v6 = type metadata accessor for Color.RGBColorSpace(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PhoneWallpaperView(0, a1, a2, v10);
  v15 = sub_1000FB9F4(v11, v12, v13, v14);
  v16 = sub_100104E70();
  swift_release(v15);
  v20 = sub_1000FB9F4(v11, v17, v18, v19);
  v21 = sub_100104E9C();
  swift_release(v20);
  v25 = sub_1000FB9F4(v11, v22, v23, v24);
  v26 = sub_100104DE4();
  v27 = swift_release(v25);
  v28 = enum case for Color.RGBColorSpace.sRGBLinear(_:);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
  ((void (*)(char *, _QWORD, uint64_t, __n128))v29)(v9, enum case for Color.RGBColorSpace.sRGBLinear(_:), v6, v27);
  v30 = Color.init(_:white:opacity:)(v9, 0.0, 0.33);
  v29(v9, v28, v6);
  v31 = Color.init(_:white:opacity:)(v9, 0.0, 0.33);
  v35 = sub_1000FB9F4(v11, v32, v33, v34);
  v36 = sub_100104E70();
  swift_release(v35);
  v40 = sub_1000FB9F4(v11, v37, v38, v39);
  v41 = sub_100104E9C();
  swift_release(v40);
  v45 = sub_1000FB9F4(v11, v42, v43, v44);
  v46 = sub_100104DE4();
  swift_release(v45);
  *(double *)a3 = v16;
  *(double *)(a3 + 8) = v21;
  *(double *)(a3 + 16) = v26;
  *(_QWORD *)(a3 + 24) = v30;
  *(_OWORD *)(a3 + 32) = xmmword_10010BAD0;
  *(_QWORD *)(a3 + 48) = 0x4010000000000000;
  *(_QWORD *)(a3 + 56) = v31;
  result = 10.0;
  *(_OWORD *)(a3 + 64) = xmmword_10010BAE0;
  *(_OWORD *)(a3 + 80) = xmmword_100114810;
  *(double *)(a3 + 96) = v36;
  *(double *)(a3 + 104) = v41;
  *(double *)(a3 + 112) = v46;
  return result;
}

uint64_t sub_1000FF180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  uint64_t (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t WitnessTable;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Optional(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v34 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v33 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v33 - v17;
  v20 = type metadata accessor for PhoneWallpaperView(0, a2, a3, v19);
  v35 = a1;
  sub_10001E560(v20, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(a3) = v21(v18, 1, a2);
  v22 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  result = v22(v18, v10);
  if ((_DWORD)a3 == 1)
  {
    v33 = v8;
    v27 = sub_1000FB9F4(v20, v24, v25, v26);
    v28 = *(_QWORD *)(v27 + 240);
    swift_bridgeObjectRetain(v28);
    swift_release(v27);
    v36 = v28;
    v29 = type metadata accessor for Array(0, a2);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v29);
    Collection.first.getter(v29, WitnessTable);
    swift_bridgeObjectRelease();
    if (v21(v15, 1, a2) == 1)
    {
      return v22(v15, v10);
    }
    else
    {
      v31 = v33;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v33, v15, a2);
      v32 = (uint64_t)v34;
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v34, v31, a2);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v32, 0, 1, a2);
      sub_100022CBC(v32, v20);
      v22((char *)v32, v10);
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v31, a2);
    }
  }
  return result;
}

uint64_t sub_1000FF3CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v9 = *a5;
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = a3;
  v10 = *(_QWORD *)(v9 + 80);
  v11 = _s16EventViewService17SelectAssetButtonVMa_0(0, v10, *(_QWORD *)(v9 + 88), a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a6 + *(int *)(v11 + 36), a4, v10);
  v12 = *a5;
  WitnessTable = swift_getWitnessTable(&unk_100114B38, *a5);
  Bindable<A>.init(wrappedValue:)(a5, v12, WitnessTable);
  v14 = (uint64_t *)(a6 + *(int *)(v11 + 44));
  v15 = type metadata accessor for RemoteViewConfiguration();
  v16 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
  result = EnvironmentObject.init()(v15, v16);
  *v14 = result;
  v14[1] = v18;
  return result;
}

uint64_t _s16EventViewService17SelectAssetButtonVMa_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&_s16EventViewService17SelectAssetButtonVMn_0);
}

uint64_t sub_1000FF4BC@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000FCC74(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_1000FF4C8@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000FD8A4(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_1000FF4D8()
{
  return sub_100023BFC((uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PhoneWallpaperView, sub_1000FF180);
}

uint64_t sub_1000FF4EC(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = v1[1];
  v3 = *((_BYTE *)v1 + 16);
  v7 = *v1;
  v8 = v2;
  v9 = v3;
  v6 = a1;
  v4 = sub_100003E70(&qword_100160CA0);
  return Binding.wrappedValue.setter(&v6, v4);
}

uint64_t sub_1000FF53C()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100003E70(&qword_100160CA0);
  Binding.projectedValue.getter(v0);
  return v2;
}

uint64_t sub_1000FF58C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  Bindable.wrappedValue.getter(&v7, v5);
  return v7;
}

uint64_t sub_1000FF5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  return Bindable.projectedValue.getter(v5);
}

uint64_t sub_1000FF61C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t KeyPath;
  uint64_t v99;
  __n128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  __n128 v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t);
  uint64_t v114;
  void (*v115)(uint64_t, char *, uint64_t);
  uint64_t v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t, uint64_t, __n128);
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char v154[8];
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char v158[8];
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164[8];
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;

  v150 = a3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v151 = v4;
  v153 = v5;
  v6 = type metadata accessor for PhoneWallpaperViewModel(255, v4, v5, a2);
  v148 = type metadata accessor for Bindable(0, v6);
  v149 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v147 = (char *)&v114 - v7;
  v136 = type metadata accessor for PlainButtonStyle(0);
  v138 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v129 = (char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 - 8);
  v121 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v10);
  v120 = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100003E70(&qword_10015E278);
  v133 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v124 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_100003E70(&qword_10015E280);
  v134 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v126 = (char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100003E70(&qword_10015E288);
  __chkstk_darwin(v131);
  v128 = (char *)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003E70(&qword_10015E350);
  __chkstk_darwin(v15);
  v132 = (uint64_t)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for SavedWallpaperView(255, v4, v5, v17);
  WitnessTable = swift_getWitnessTable(&unk_10010F9C0, v18);
  v168 = v18;
  v169 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v168, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 0);
  v168 = v18;
  v169 = WitnessTable;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v168, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 1);
  v168 = OpaqueTypeMetadata2;
  v169 = OpaqueTypeConformance2;
  v22 = swift_getOpaqueTypeMetadata2(255, &v168, &opaque type descriptor for <<opaque return type of View.presentationDragIndicator(_:)>>, 0);
  v23 = sub_100014600(&qword_10015E368, &qword_10015E350, (void (*)(void))sub_10002419C);
  v168 = OpaqueTypeMetadata2;
  v169 = OpaqueTypeConformance2;
  v24 = swift_getOpaqueTypeConformance2(&v168, &opaque type descriptor for <<opaque return type of View.presentationDragIndicator(_:)>>, 1);
  v119 = v15;
  v168 = v15;
  v169 = v22;
  v122 = v22;
  v170 = (void *)v23;
  v171 = v24;
  v25 = (void *)v23;
  v125 = v23;
  v26 = v24;
  v123 = v24;
  v27 = swift_getOpaqueTypeMetadata2(0, &v168, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v146 = *(_QWORD *)(v27 - 8);
  v28 = v27;
  v142 = v27;
  __chkstk_darwin(v27);
  v152 = (char *)&v114 - v29;
  v30 = sub_1000034AC(&qword_100165260);
  v141 = v30;
  v168 = v15;
  v169 = v22;
  v170 = v25;
  v171 = v26;
  v31 = swift_getOpaqueTypeConformance2(&v168, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v140 = v31;
  v139 = sub_100007D40(&qword_100165268, &qword_100165260, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v168 = v28;
  v169 = v30;
  v170 = &type metadata for Text;
  v171 = v31;
  v172 = v139;
  v173 = &protocol witness table for Text;
  v144 = swift_getOpaqueTypeMetadata2(0, &v168, &opaque type descriptor for <<opaque return type of View.alert<A, B>(_:isPresented:actions:message:)>>, 0);
  v145 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v137 = (char *)&v114 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v33);
  v143 = (uint64_t)&v114 - v35;
  v118 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
  v36 = v120;
  v37 = v127;
  v118(v120, v127, a1, v34);
  v38 = *(unsigned __int8 *)(v9 + 80);
  v39 = (v38 + 32) & ~v38;
  v116 = v39;
  v121 += v39;
  v117 = v38 | 7;
  v40 = swift_allocObject(&unk_100154D40, v121, v38 | 7);
  v41 = v151;
  v42 = v153;
  *(_QWORD *)(v40 + 16) = v151;
  *(_QWORD *)(v40 + 24) = v42;
  v43 = v40 + v39;
  v115 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  v44 = v36;
  v115(v43, v36, a1);
  v165 = v41;
  v166 = v42;
  v167 = v37;
  v45 = v37;
  v46 = sub_100003E70(&qword_10015E290);
  v47 = sub_100023C6C();
  v48 = v124;
  v49 = Button.init(action:label:)(sub_100102208, v40, sub_10010221C, v164, v46, v47);
  v50 = v129;
  PlainButtonStyle.init()(v49);
  v51 = sub_100007D40(&qword_10015E340, &qword_10015E278, (uint64_t)&protocol conformance descriptor for Button<A>);
  v52 = sub_100003B3C(&qword_10015E348, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v53 = v126;
  v54 = v130;
  v55 = v136;
  View.buttonStyle<A>(_:)(v50, v130, v136, v51, v52);
  (*(void (**)(char *, uint64_t))(v138 + 8))(v50, v55);
  v56 = (*(uint64_t (**)(char *, uint64_t))(v133 + 8))(v48, v54);
  LOBYTE(v51) = static Edge.Set.top.getter(v56);
  v57 = EdgeInsets.init(_all:)(22.0);
  v59 = v58;
  v61 = v60;
  v63 = v62;
  v64 = v134;
  v65 = (uint64_t)v128;
  v66 = v135;
  (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v128, v53, v135);
  v67 = v65 + *(int *)(v131 + 36);
  *(_BYTE *)v67 = v51;
  *(double *)(v67 + 8) = v57;
  *(_QWORD *)(v67 + 16) = v59;
  *(_QWORD *)(v67 + 24) = v61;
  *(_QWORD *)(v67 + 32) = v63;
  *(_BYTE *)(v67 + 40) = 0;
  v68 = (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v53, v66);
  LOBYTE(v51) = static Edge.Set.horizontal.getter(v68);
  v69 = EdgeInsets.init(_all:)(20.0);
  v71 = v70;
  v73 = v72;
  v75 = v74;
  v76 = v132;
  sub_100007ADC(v65, v132, &qword_10015E288);
  v77 = v119;
  v78 = v76 + *(int *)(v119 + 36);
  *(_BYTE *)v78 = v51;
  *(double *)(v78 + 8) = v69;
  *(_QWORD *)(v78 + 16) = v71;
  *(_QWORD *)(v78 + 24) = v73;
  *(_QWORD *)(v78 + 32) = v75;
  *(_BYTE *)(v78 + 40) = 0;
  sub_100008194(v65, &qword_10015E288);
  v79 = sub_1000FF53C();
  v81 = v80;
  LOBYTE(v66) = v82;
  ((void (*)(char *, uint64_t, uint64_t))v118)(v44, v45, a1);
  v83 = swift_allocObject(&unk_100154D68, v121, v117);
  v84 = v151;
  v85 = v153;
  *(_QWORD *)(v83 + 16) = v151;
  *(_QWORD *)(v83 + 24) = v85;
  v115(v83 + v116, v44, a1);
  v86 = swift_checkMetadataState(0, v122);
  View.sheet<A>(isPresented:onDismiss:content:)(v79, v81, v66 & 1, 0, 0, sub_10010222C, v83, v77, v86, v125, v123);
  swift_release(v81);
  swift_release(v83);
  swift_release(v79);
  sub_100008194(v76, &qword_10015E350);
  v90 = sub_1000FF58C(a1, v87, v88, v89);
  v91 = *(_QWORD *)(v90 + 104);
  v138 = *(_QWORD *)(v90 + 96);
  LODWORD(v136) = *(unsigned __int8 *)(v90 + 112);
  v92 = *(_QWORD *)(v90 + 120);
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRetain(v92);
  swift_release(v90);
  v93 = v147;
  sub_1000FF5D8(a1, v94, v95, v96);
  v97 = v153;
  v162 = v84;
  v163 = v153;
  KeyPath = swift_getKeyPath(&unk_100114960);
  v99 = v148;
  Bindable<A>.subscript.getter(&v168, KeyPath, v148);
  v100 = swift_release(KeyPath);
  (*(void (**)(char *, uint64_t, __n128))(v149 + 8))(v93, v99, v100);
  v101 = v168;
  v102 = v169;
  v159 = v84;
  v160 = v97;
  v161 = v45;
  v155 = v84;
  v156 = v97;
  v157 = v45;
  v103 = v139;
  v104 = v140;
  v105 = v141;
  v106 = v142;
  v107 = (uint64_t)v137;
  v108 = v152;
  View.alert<A, B>(_:isPresented:actions:message:)(v138, v91, v136, v92, v168, v169, v170, sub_1001022EC, v158, sub_1001022F8, v154, v142, v141, &type metadata for Text, v140, v139, &protocol witness table for Text);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v102);
  v109 = swift_release(v101);
  (*(void (**)(char *, uint64_t, __n128))(v146 + 8))(v108, v106, v109);
  v168 = v106;
  v169 = v105;
  v170 = &type metadata for Text;
  v171 = v104;
  v172 = v103;
  v173 = &protocol witness table for Text;
  swift_getOpaqueTypeConformance2(&v168, &opaque type descriptor for <<opaque return type of View.alert<A, B>(_:isPresented:actions:message:)>>, 1);
  v110 = v143;
  v111 = v144;
  sub_1000F257C(v107, v144, v143);
  v112 = *(void (**)(uint64_t, uint64_t))(v145 + 8);
  v112(v107, v111);
  sub_1000E3B88(v110, v111, v150);
  return ((uint64_t (*)(uint64_t, uint64_t))v112)(v110, v111);
}

double sub_1001000E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a3;
  v6 = _s16EventViewService17SelectAssetButtonVMa_0(0, a2, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v10 = (char *)&v33 - v9;
  v11 = sub_100003E70(&qword_100161700);
  __chkstk_darwin(v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000FF58C(v6, v14, v15, v16);
  v18 = (void *)objc_opt_self(PHPhotoLibrary);
  if (objc_msgSend(v18, "authorizationStatusForAccessLevel:", 1))
  {
    v19 = objc_msgSend(v18, "authorizationStatusForAccessLevel:", 1);
    swift_release(v17);
    if (v19 != (id)3)
    {
      v23 = sub_1000FF58C(v6, v20, v21, v22);
      sub_100104EF4(1);
      *(_QWORD *)&result = swift_release(v23).n128_u64[0];
      return result;
    }
  }
  else
  {
    swift_release(v17);
  }
  v25 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v13, 1, 1, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  v26 = type metadata accessor for MainActor(0);
  v27 = static MainActor.shared.getter(v26);
  v28 = *(unsigned __int8 *)(v7 + 80);
  v29 = (v28 + 48) & ~v28;
  v30 = (char *)swift_allocObject(&unk_100154DB8, v29 + v8, v28 | 7);
  *((_QWORD *)v30 + 2) = v27;
  *((_QWORD *)v30 + 3) = &protocol witness table for MainActor;
  v31 = v34;
  *((_QWORD *)v30 + 4) = a2;
  *((_QWORD *)v30 + 5) = v31;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v30[v29], v10, v6);
  v32 = sub_10004D47C((uint64_t)v13, (uint64_t)&unk_100165290, (uint64_t)v30);
  *(_QWORD *)&result = swift_release(v32).n128_u64[0];
  return result;
}

uint64_t sub_1001002E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for MainActor(0);
  v6[5] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v6[6] = v8;
  v6[7] = v9;
  return swift_task_switch(sub_100100350, v8, v9);
}

uint64_t sub_100100350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v13;

  v5 = v4[2];
  v6 = _s16EventViewService17SelectAssetButtonVMa_0(0, v4[3], v4[4], a4);
  v4[8] = v6;
  v4[9] = sub_1000FF58C(v6, v7, v8, v9);
  v10 = v5 + *(int *)(v6 + 36);
  v13 = (char *)&dword_100165428 + dword_100165428;
  v11 = (_QWORD *)swift_task_alloc(unk_10016542C);
  v4[10] = v11;
  *v11 = v4;
  v11[1] = sub_1001003DC;
  return ((uint64_t (*)(uint64_t, _QWORD, _QWORD))v13)(v10, v4[3], v4[4]);
}

uint64_t sub_1001003DC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[6];
    v5 = v2[7];
    v6 = sub_100100560;
  }
  else
  {
    swift_release(v2[9]);
    v4 = v2[6];
    v5 = v2[7];
    v6 = sub_100100448;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100100448()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 40));
  sub_1000FF4EC(1);
  v6 = sub_1000FF58C(v1, v3, v4, v5);
  v7 = *(_QWORD *)(v6 + 224);
  v8 = *(_QWORD *)(v6 + 232);
  swift_bridgeObjectRetain(v8);
  swift_release(v6);
  v9 = (uint64_t *)(v2 + *(int *)(v1 + 44));
  v10 = *v9;
  if (*v9)
  {
    swift_retain(*v9);
    sub_1000DB03C(v7, v8, 8, 10, 28, 0, 3u, v10);
    swift_release(v10);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v12 = v9[1];
    v13 = type metadata accessor for RemoteViewConfiguration();
    v14 = sub_100003B3C((unint64_t *)&qword_10015D480, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100110CE4);
    return EnvironmentObject.error()(0, v12, v13, v14);
  }
}

uint64_t sub_100100560()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001005A0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v49;
  void *v50;
  _BYTE v52[12];
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  int v58;
  uint64_t v59;
  uint64_t KeyPath;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  _OWORD v76[17];

  v69 = a3;
  v68 = sub_100003E70(&qword_10015E338);
  __chkstk_darwin(v68);
  v6 = &v52[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v67 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v67);
  v8 = &v52[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v66 = static VerticalAlignment.center.getter(v9);
  v10 = sub_100100900(a1, a2, (uint64_t)v76);
  v64 = v76[0];
  v63 = *(_QWORD *)&v76[1];
  v11 = BYTE8(v76[1]);
  v65 = *(_QWORD *)&v76[3];
  v12 = BYTE8(v76[3]);
  v62 = v76[2];
  v13 = static Font.body.getter(v10);
  static Font.Weight.semibold.getter();
  v61 = Font.weight(_:)(v13);
  swift_release(v13);
  KeyPath = swift_getKeyPath(&unk_100114998);
  v59 = static Color.white.getter(KeyPath);
  v58 = static Edge.Set.horizontal.getter(v59);
  v14 = EdgeInsets.init(_all:)(20.0);
  v56 = v15;
  v57 = v14;
  v54 = v17;
  v55 = v16;
  v73 = 0;
  v72 = v11;
  v71 = v12;
  v70 = 0;
  v53 = static Edge.Set.top.getter(v18);
  v19 = EdgeInsets.init(_all:)(14.4);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v26 = v73;
  v27 = v72;
  LOBYTE(v13) = v71;
  LOBYTE(a1) = v70;
  v74 = 0;
  v29 = static Edge.Set.bottom.getter(v28);
  v30 = EdgeInsets.init(_all:)(13.6);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v37 = v74;
  v75 = 0;
  v39 = static Color.blue.getter(v38);
  v40 = static Edge.Set.all.getter(v39);
  *(_QWORD *)&v76[0] = v66;
  *((_QWORD *)&v76[0] + 1) = 0x4010000000000000;
  LOBYTE(v76[1]) = v26;
  *(_OWORD *)((char *)&v76[1] + 8) = v64;
  *((_QWORD *)&v76[2] + 1) = v63;
  LOBYTE(v76[3]) = v27;
  *(_OWORD *)((char *)&v76[3] + 8) = v62;
  *((_QWORD *)&v76[4] + 1) = v65;
  LOBYTE(v76[5]) = v13;
  *((_QWORD *)&v76[5] + 1) = KeyPath;
  *(_QWORD *)&v76[6] = v61;
  *((_QWORD *)&v76[6] + 1) = v59;
  LOBYTE(v76[7]) = v58;
  *((double *)&v76[7] + 1) = v57;
  *(_QWORD *)&v76[8] = v56;
  *((_QWORD *)&v76[8] + 1) = v55;
  *(_QWORD *)&v76[9] = v54;
  BYTE8(v76[9]) = a1;
  LOBYTE(v76[10]) = v53;
  *((double *)&v76[10] + 1) = v19;
  *(_QWORD *)&v76[11] = v21;
  *((_QWORD *)&v76[11] + 1) = v23;
  *(_QWORD *)&v76[12] = v25;
  BYTE8(v76[12]) = v37;
  LOBYTE(v76[13]) = v29;
  *((double *)&v76[13] + 1) = v30;
  *(_QWORD *)&v76[14] = v32;
  *((_QWORD *)&v76[14] + 1) = v34;
  *(_QWORD *)&v76[15] = v36;
  BYTE8(v76[15]) = v75;
  *(_QWORD *)&v76[16] = v39;
  BYTE8(v76[16]) = v40;
  v41 = (char *)v8 + *(int *)(v67 + 20);
  v42 = enum case for RoundedCornerStyle.continuous(_:);
  v43 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v41, v42, v43);
  __asm { FMOV            V0.2D, #12.0 }
  *v8 = _Q0;
  sub_10001BF60((uint64_t)v8, (uint64_t)v6);
  *(_WORD *)&v6[*(int *)(v68 + 36)] = 256;
  v49 = sub_100003E70(&qword_10015E290);
  v50 = v69;
  sub_100007ADC((uint64_t)v6, (uint64_t)v69 + *(int *)(v49 + 36), &qword_10015E338);
  memcpy(v50, v76, 0x109uLL);
  sub_100023EEC((uint64_t)v76);
  sub_100008194((uint64_t)v6, &qword_10015E338);
  sub_10001BFA4((uint64_t)v8);
  return sub_100023F8C((uint64_t)v76);
}

uint64_t sub_100100900@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t KeyPath;

  v6 = Image.init(systemName:)(0x656E6F687069, 0xE600000000000000);
  v8 = _s16EventViewService17SelectAssetButtonVMa_0(0, a1, a2, v7);
  v12 = sub_1000FF58C(v8, v9, v10, v11);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = *(_QWORD *)(v12 + 88);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v16);
  swift_release(v12);
  v17 = Text.init(_:tableName:bundle:comment:)(v13, v14, v15, v16, 0, 0, 0, 0, 0, 256);
  v19 = v18;
  v21 = v20;
  LOBYTE(v15) = v22 & 1;
  KeyPath = swift_getKeyPath(&unk_1001149C8);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v17;
  *(_QWORD *)(a3 + 16) = v19;
  *(_BYTE *)(a3 + 24) = v15;
  *(_QWORD *)(a3 + 32) = v21;
  *(_QWORD *)(a3 + 40) = KeyPath;
  *(_QWORD *)(a3 + 48) = 1;
  *(_BYTE *)(a3 + 56) = 0;
  swift_retain(v6);
  sub_10000C008(v17, v19, v15);
  swift_bridgeObjectRetain(v21);
  swift_retain(KeyPath);
  sub_10000BFF8(v17, v19, v15);
  swift_release(v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100100A58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t OpaqueTypeConformance2;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v46 = a1;
  v53 = a4;
  v6 = sub_100003E70(&qword_10015D608);
  __chkstk_darwin(v6);
  v45 = (_QWORD **)((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SavedWallpaperView(0, a2, a3, v12);
  v52 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v44 = (_QWORD **)((char *)&v44 - v14);
  WitnessTable = swift_getWitnessTable(&unk_10010F9C0, v13);
  v54 = v13;
  v55 = WitnessTable;
  v16 = WitnessTable;
  v48 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v54, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 0);
  v51 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v47 = (char *)&v44 - v18;
  v54 = v13;
  v55 = v16;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 1);
  v54 = OpaqueTypeMetadata2;
  v55 = OpaqueTypeConformance2;
  v19 = swift_getOpaqueTypeMetadata2(0, &v54, &opaque type descriptor for <<opaque return type of View.presentationDragIndicator(_:)>>, 0);
  v50 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v44 - v23;
  type metadata accessor for SavedWallpaperViewModel(0, a2, a3, v25);
  v27 = _s16EventViewService17SelectAssetButtonVMa_0(0, a2, a3, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v46 + *(int *)(v27 + 36), a2);
  v28 = (uint64_t *)sub_1000F7810((uint64_t)v11);
  v29 = v45;
  sub_1000896D8(v45);
  v30 = v44;
  sub_10008971C(v28, (uint64_t)v29, v44);
  v31 = sub_100003E70(&qword_100160A50);
  v32 = type metadata accessor for PresentationDetent(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(_QWORD *)(v33 + 72);
  v35 = *(unsigned __int8 *)(v33 + 80);
  v36 = (v35 + 32) & ~v35;
  v37 = swift_allocObject(v31, v36 + 2 * v34, v35 | 7);
  *(_OWORD *)(v37 + 16) = xmmword_10010A6C0;
  v38 = static PresentationDetent.medium.getter(v37);
  static PresentationDetent.large.getter(v38);
  v39 = sub_100063DA4(v37);
  swift_setDeallocating(v37);
  swift_arrayDestroy(v37 + v36, 2, v32);
  swift_deallocClassInstance(v37, 32, 7);
  v40 = v47;
  View.presentationDetents(_:)(v39, v13, v48);
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD *, uint64_t))(v52 + 8))(v30, v13);
  v41 = OpaqueTypeConformance2;
  View.presentationDragIndicator(_:)(2, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v40, OpaqueTypeMetadata2);
  v54 = OpaqueTypeMetadata2;
  v55 = v41;
  swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.presentationDragIndicator(_:)>>, 1);
  sub_1000F257C((uint64_t)v21, v19, (uint64_t)v24);
  v42 = *(void (**)(char *, uint64_t))(v50 + 8);
  v42(v21, v19);
  sub_1000E3B88((uint64_t)v24, v19, v53);
  return ((uint64_t (*)(char *, uint64_t))v42)(v24, v19);
}

uint64_t sub_100100E18@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100104F08();
  *a1 = result & 1;
  return result;
}

double sub_100100E44(char *a1)
{
  return sub_100104EF4(*a1);
}

uint64_t sub_100100E68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  void (*v65)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_BYTE *, uint64_t);
  _BYTE v71[12];
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;

  v88 = a5;
  v82 = a2;
  v83 = a3;
  v6 = _s16EventViewService17SelectAssetButtonVMa_0(0, a2, a3, a4);
  v81 = *(_QWORD *)(v6 - 8);
  v79 = *(_QWORD *)(v81 + 64);
  __chkstk_darwin(v6);
  v80 = &v71[-v7];
  v87 = sub_100003E70(&qword_10015D6D8);
  v85 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v86 = &v71[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v84 = &v71[-v10];
  v11 = sub_100003E70(&qword_100165270);
  v77 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v76 = &v71[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v13);
  v15 = &v71[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = &v71[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v20);
  v22 = &v71[-v21];
  v23 = sub_100003E70(&qword_100165278);
  __chkstk_darwin(v23);
  v78 = &v71[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v25);
  v27 = &v71[-v26];
  v31 = sub_1000FF58C(v6, v28, v29, v30);
  sub_100104F58();
  v32 = swift_release(v31);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v17 + 48))(v15, 1, v16, v32) == 1)
  {
    sub_100008194((uint64_t)v15, &qword_100165370);
    v33 = 1;
    v34 = v77;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 32))(v22, v15, v16);
    v38 = sub_1000FF58C(v6, v35, v36, v37);
    v73 = *(_QWORD *)(v38 + 160);
    v74 = v11;
    v39 = *(_QWORD *)(v38 + 168);
    v72 = *(unsigned __int8 *)(v38 + 176);
    v75 = a1;
    v40 = *(_QWORD *)(v38 + 184);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v40);
    v41 = swift_release(v38);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t, __n128))(v17 + 16))(v19, v22, v16, v41);
    v42 = v76;
    v43 = v39;
    v11 = v74;
    v44 = v40;
    a1 = v75;
    Link<>.init(_:sensitiveUrl:)(v73, v43, v72, v44, v19);
    (*(void (**)(_BYTE *, uint64_t))(v17 + 8))(v22, v16);
    v45 = v77;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v77 + 32))(v27, v42, v11);
    v33 = 0;
    v34 = v45;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v27, v33, 1, v11);
  v49 = sub_1000FF58C(v6, v46, v47, v48);
  v50 = *(_QWORD *)(v49 + 192);
  v51 = *(_QWORD *)(v49 + 200);
  v52 = *(unsigned __int8 *)(v49 + 208);
  v53 = *(_QWORD *)(v49 + 216);
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRetain(v53);
  v54 = swift_release(v49);
  v56 = v80;
  v55 = v81;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v81 + 16))(v80, a1, v6, v54);
  v57 = *(unsigned __int8 *)(v55 + 80);
  v58 = (v57 + 32) & ~v57;
  v59 = swift_allocObject(&unk_100154D90, v58 + v79, v57 | 7);
  v60 = v83;
  *(_QWORD *)(v59 + 16) = v82;
  *(_QWORD *)(v59 + 24) = v60;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v55 + 32))(v59 + v58, v56, v6);
  v61 = v84;
  Button<>.init(_:action:)(v50, v51, v52, v53, sub_1001023E8, v59);
  v62 = v78;
  sub_100007ADC((uint64_t)v27, (uint64_t)v78, &qword_100165278);
  v64 = v85;
  v63 = v86;
  v65 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v85 + 16);
  v66 = v87;
  v65(v86, v61, v87);
  v67 = v88;
  sub_100007ADC((uint64_t)v62, v88, &qword_100165278);
  v68 = sub_100003E70(&qword_100165280);
  v65((_BYTE *)(v67 + *(int *)(v68 + 48)), v63, v66);
  v69 = *(void (**)(_BYTE *, uint64_t))(v64 + 8);
  v69(v61, v66);
  sub_100008194((uint64_t)v27, &qword_100165278);
  v69(v63, v66);
  return sub_100008194((uint64_t)v62, &qword_100165278);
}

double sub_100101308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v4 = _s16EventViewService17SelectAssetButtonVMa_0(0, a2, a3, a4);
  v8 = sub_1000FF58C(v4, v5, v6, v7);
  sub_100104EF4(0);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

uint64_t sub_100101340@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v5 = _s16EventViewService17SelectAssetButtonVMa_0(0, a1, a2, a3);
  v9 = sub_1000FF58C(v5, v6, v7, v8);
  v10 = *(_QWORD *)(v9 + 128);
  v11 = *(_QWORD *)(v9 + 136);
  v12 = *(unsigned __int8 *)(v9 + 144);
  v13 = *(_QWORD *)(v9 + 152);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_release(v9);
  result = Text.init(_:tableName:bundle:comment:)(v10, v11, v12, v13, 0, 0, 0, 0, 0, 256);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v15;
  *(_BYTE *)(a4 + 16) = v16 & 1;
  *(_QWORD *)(a4 + 24) = v17;
  return result;
}

uint64_t sub_1001013F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000FE860(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100101400()
{
  return sub_100023BFC((uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PhoneWallpaperView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000FEE18);
}

void sub_100101414(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1000FEEF8(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

double sub_100101420@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000FEF80(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10010142C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000FEAB4(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_10010143C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = (int *)type metadata accessor for PhoneWallpaperView(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = v4 + v10;
  v14 = type metadata accessor for PhoneWallpaperViewModel(255, v5, v6, v13);
  v15 = type metadata accessor for Bindable(0, v14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v4 + v10, v15);
  v16 = v4 + v10 + v7[9];
  v17 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v16, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v5);
  v18 = type metadata accessor for Optional(255, v5);
  v19 = type metadata accessor for State(0, v18);
  swift_release(*(_QWORD *)(v16 + *(int *)(v19 + 28)));
  swift_release(*(_QWORD *)(v12 + v7[10] + 8));
  swift_release(*(_QWORD *)(v12 + v7[11]));
  return swift_deallocObject(v4, v10 + v11, v9 | 7);
}

int *sub_10010155C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  type metadata accessor for PhoneWallpaperView(0, v4, v5, a1);
  return sub_1000FED2C(v4, v5, a2);
}

uint64_t sub_1001015C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[4];

  v10[0] = &unk_1001148E8;
  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  v4 = v2;
  if (v5 <= 0x3F)
  {
    v10[1] = *(_QWORD *)(v2 - 8) + 64;
    v6 = type metadata accessor for PhoneWallpaperViewModel(255, v2, *(_QWORD *)(a1 + 24), v3);
    v7 = type metadata accessor for Bindable(319, v6);
    v4 = v7;
    if (v8 <= 0x3F)
    {
      v10[2] = *(_QWORD *)(v7 - 8) + 64;
      v10[3] = &unk_100114838;
      swift_initStructMetadata(a1, 0, 4, v10, a1 + 32);
      return 0;
    }
  }
  return v4;
}

uint64_t sub_100101680(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
  }
  else
  {
    v8 = a2[1];
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v9 = *(int *)(a3 + 36);
    v10 = a1 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = *(_QWORD *)(a3 + 16);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
    swift_retain(v5);
    v14 = swift_retain(v8);
    v13(v10, v11, v12, v14);
    v15 = *(int *)(a3 + 40);
    v16 = a1 + v15;
    v17 = (uint64_t)a2 + v15;
    v19 = type metadata accessor for PhoneWallpaperViewModel(255, v12, *(_QWORD *)(a3 + 24), v18);
    v20 = type metadata accessor for Bindable(0, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v16, v17, v20);
    v21 = *(int *)(a3 + 44);
    v22 = (_QWORD *)(a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v5 = *v23;
    v24 = v23[1];
    *v22 = v5;
    v22[1] = v24;
  }
  swift_retain(v5);
  return a1;
}

double sub_100101784(char *a1, uint64_t a2)
{
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  swift_release(*(_QWORD *)a1);
  v4 = swift_release(*((_QWORD *)a1 + 1));
  v5 = *(_QWORD *)(a2 + 16);
  (*(void (**)(char *, uint64_t, __n128))(*(_QWORD *)(v5 - 8) + 8))(&a1[*(int *)(a2 + 36)], v5, v4);
  v6 = &a1[*(int *)(a2 + 40)];
  v8 = type metadata accessor for PhoneWallpaperViewModel(255, v5, *(_QWORD *)(a2 + 24), v7);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v6, v9);
  *(_QWORD *)&result = swift_release(*(_QWORD *)&a1[*(int *)(a2 + 44)]).n128_u64[0];
  return result;
}

uint64_t sub_100101818(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = (uint64_t)a2 + v8;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
  swift_retain(v6);
  v13 = swift_retain(v7);
  v12(v9, v10, v11, v13);
  v14 = *(int *)(a3 + 40);
  v15 = a1 + v14;
  v16 = (uint64_t)a2 + v14;
  v18 = type metadata accessor for PhoneWallpaperViewModel(255, v11, *(_QWORD *)(a3 + 24), v17);
  v19 = type metadata accessor for Bindable(0, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v15, v16, v19);
  v20 = *(int *)(a3 + 44);
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)((char *)a2 + v20);
  v23 = *v22;
  v24 = v22[1];
  *v21 = v23;
  v21[1] = v24;
  swift_retain(v23);
  return a1;
}

uint64_t *sub_1001018F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  v10 = swift_release(v9);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v11 = *(_QWORD *)(a3 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 24))((uint64_t)a1 + *(int *)(a3 + 36), (uint64_t)a2 + *(int *)(a3 + 36), v11, v10);
  v12 = *(int *)(a3 + 40);
  v13 = (uint64_t)a1 + v12;
  v14 = (uint64_t)a2 + v12;
  v16 = type metadata accessor for PhoneWallpaperViewModel(255, v11, *(_QWORD *)(a3 + 24), v15);
  v17 = type metadata accessor for Bindable(0, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v13, v14, v17);
  v18 = *(int *)(a3 + 44);
  v19 = (uint64_t)a1 + v18;
  v20 = (uint64_t *)((char *)a2 + v18);
  v21 = *(uint64_t *)((char *)a1 + v18);
  v22 = *v20;
  *(uint64_t *)((char *)a1 + v18) = *v20;
  swift_retain(v22);
  swift_release(v21);
  *(_QWORD *)(v19 + 8) = v20[1];
  return a1;
}

uint64_t sub_1001019F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a3 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1 + *(int *)(a3 + 36), a2 + *(int *)(a3 + 36), v6);
  v7 = *(int *)(a3 + 40);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v11 = type metadata accessor for PhoneWallpaperViewModel(255, v6, *(_QWORD *)(a3 + 24), v10);
  v12 = type metadata accessor for Bindable(0, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v8, v9, v12);
  *(_OWORD *)(a1 + *(int *)(a3 + 44)) = *(_OWORD *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t *sub_100101AA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  v8 = swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v9 = *(_QWORD *)(a3 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v9 - 8) + 40))((uint64_t)a1 + *(int *)(a3 + 36), (uint64_t)a2 + *(int *)(a3 + 36), v9, v8);
  v10 = *(int *)(a3 + 40);
  v11 = (uint64_t)a1 + v10;
  v12 = (uint64_t)a2 + v10;
  v14 = type metadata accessor for PhoneWallpaperViewModel(255, v9, *(_QWORD *)(a3 + 24), v13);
  v15 = type metadata accessor for Bindable(0, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v11, v12, v15);
  v16 = *(int *)(a3 + 44);
  v17 = (uint64_t)a1 + v16;
  v18 = (uint64_t *)((char *)a2 + v16);
  v19 = *(uint64_t *)((char *)a1 + v16);
  *(uint64_t *)((char *)a1 + v16) = *v18;
  swift_release(v19);
  *(_QWORD *)(v17 + 8) = v18[1];
  return a1;
}

uint64_t sub_100101B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100101B94);
}

uint64_t sub_100101B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 >= 0xFFFFFFFF)
      LODWORD(v5) = -1;
    return (v5 + 1);
  }
  else
  {
    v8 = a2;
    v9 = *(_QWORD *)(a3 + 16);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = a1 + *(int *)(a3 + 36);
      v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
      v13 = *(_QWORD *)(a3 + 16);
    }
    else
    {
      v14 = type metadata accessor for PhoneWallpaperViewModel(255, v9, *(_QWORD *)(a3 + 24), a4);
      v13 = type metadata accessor for Bindable(0, v14);
      v11 = a1 + *(int *)(a3 + 40);
      v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48);
      a2 = v8;
    }
    return v12(v11, a2, v13);
  }
}

uint64_t sub_100101C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100101C5C);
}

uint64_t sub_100101C5C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = *(_QWORD *)(a4 + 16);
    v8 = *(_QWORD *)(v7 - 8);
    if (*(_DWORD *)(v8 + 84) == a3)
    {
      v9 = *(int *)(a4 + 36);
    }
    else
    {
      v10 = type metadata accessor for PhoneWallpaperViewModel(255, v7, *(_QWORD *)(a4 + 24), v7);
      v7 = type metadata accessor for Bindable(0, v10);
      v8 = *(_QWORD *)(v7 - 8);
      v9 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v5 + v9, a2, a2, v7);
  }
  return result;
}

uint64_t sub_100101D00(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t TupleTypeMetadata2;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t TupleTypeMetadata3;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t *v58;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_1000034AC(&qword_10015E170);
  v4 = type metadata accessor for Array(255, v1);
  v5 = type metadata accessor for ScrollAsset(255);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  v7 = *(uint64_t **)(v2 + 8);
  v54 = v4;
  v55 = v1;
  v56 = v5;
  v57 = (void *)WitnessTable;
  v58 = v7;
  v8 = type metadata accessor for ForEach(255, &v54);
  sub_100003B3C(&qword_10015E178, type metadata accessor for ScrollAsset, (uint64_t)&unk_1001133C0);
  v9 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v8);
  v10 = type metadata accessor for HStack(255, v8, v9);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v10);
  v54 = v10;
  v55 = v11;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v54, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v54 = v10;
  v55 = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v14 = type metadata accessor for ScrollView(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v15 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v14);
  v54 = v14;
  v55 = v15;
  v16 = swift_getOpaqueTypeMetadata2(255, &v54, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v17 = type metadata accessor for ViewAlignedScrollTargetBehavior(255);
  v54 = v14;
  v55 = v15;
  v18 = swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v54 = v16;
  v55 = v17;
  v56 = v18;
  v57 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v19 = swift_getOpaqueTypeMetadata2(255, &v54, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v54 = v16;
  v55 = v17;
  v56 = v18;
  v57 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v20 = swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v54 = v19;
  v55 = v1;
  v56 = v20;
  v57 = v7;
  v21 = swift_getOpaqueTypeMetadata2(255, &v54, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v54 = v19;
  v55 = v1;
  v56 = v20;
  v57 = v7;
  v22 = swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v54 = v21;
  v55 = v22;
  v23 = swift_getOpaqueTypeMetadata2(255, &v54, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v24 = type metadata accessor for ModifiedContent(255, v23, &type metadata for _FrameLayout);
  v25 = type metadata accessor for Optional(255, v1);
  v54 = v21;
  v55 = v22;
  swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v26 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v24);
  v27 = v7[1];
  v28 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v25);
  v54 = v24;
  v55 = v25;
  v56 = v26;
  v57 = (void *)v28;
  v29 = swift_getOpaqueTypeMetadata2(255, &v54, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v30 = sub_1000034AC(&qword_10015E180);
  v31 = type metadata accessor for ModifiedContent(255, v29, v30);
  v32 = sub_1000034AC(&qword_1001651C0);
  v33 = type metadata accessor for ModifiedContent(255, v31, v32);
  v34 = type metadata accessor for ModifiedContent(255, v33, &type metadata for _PaddingLayout);
  v36 = type metadata accessor for PageControl(255, v1, v27, v35);
  v37 = type metadata accessor for Optional(255, v36);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v34, v37, 0, 0);
  v39 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v40 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v39);
  v41 = type metadata accessor for VStack(255, v39, v40);
  v42 = type metadata accessor for ModifiedContent(255, v41, &type metadata for _AppearanceActionModifier);
  v44 = _s16EventViewService17SelectAssetButtonVMa_0(255, v1, v2, v43);
  v45 = type metadata accessor for Optional(255, v44);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v3, v42, v45, 0, 0);
  v47 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v48 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v47);
  v49 = type metadata accessor for VStack(255, v47, v48);
  v50 = type metadata accessor for ModifiedContent(255, v49, &type metadata for _PaddingLayout);
  v51 = sub_1000034AC((uint64_t *)&unk_10015DB10);
  v52 = type metadata accessor for ModifiedContent(255, v50, v51);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v49);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v50);
  sub_100007D40(&qword_10015DB08, (uint64_t *)&unk_10015DB10, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v52);
}

uint64_t sub_1001021D0(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10011BEE4, 1);
}

uint64_t sub_100102208()
{
  return sub_100023BFC((uint64_t (*)(_QWORD, uint64_t, uint64_t))_s16EventViewService17SelectAssetButtonVMa_0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001000E0);
}

uint64_t sub_10010221C@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return sub_1001005A0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10010222C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(_s16EventViewService17SelectAssetButtonVMa_0(0, v4, v5, a1) - 8) + 80);
  return sub_100100A58(v2 + ((v6 + 32) & ~v6), v4, v5, a2);
}

uint64_t sub_100102284@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100104F08();
  *a1 = result & 1;
  return result;
}

double sub_1001022B0(char *a1)
{
  return sub_100104EF4(*a1);
}

uint64_t sub_1001022D4()
{
  return 16;
}

__n128 sub_1001022E0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1001022EC@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100100E68(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_1001022F8@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100101340(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t sub_100102308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = (int *)_s16EventViewService17SelectAssetButtonVMa_0(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = v10 + *(_QWORD *)(v8 + 64);
  v12 = v9 | 7;
  v13 = v4 + v10;
  swift_release(*(_QWORD *)(v4 + v10));
  v14 = swift_release(*(_QWORD *)(v13 + 8));
  (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v5 - 8) + 8))(v13 + v7[9], v5, v14);
  v15 = v13 + v7[10];
  v17 = type metadata accessor for PhoneWallpaperViewModel(255, v5, v6, v16);
  v18 = type metadata accessor for Bindable(0, v17);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v15, v18);
  swift_release(*(_QWORD *)(v13 + v7[11]));
  return swift_deallocObject(v4, v11, v12);
}

uint64_t sub_1001023E8()
{
  return sub_100023BFC((uint64_t (*)(_QWORD, uint64_t, uint64_t))_s16EventViewService17SelectAssetButtonVMa_0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100101308);
}

uint64_t sub_10010240C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __n128 v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *((_QWORD *)v4 + 4);
  v6 = *((_QWORD *)v4 + 5);
  v7 = (int *)_s16EventViewService17SelectAssetButtonVMa_0(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 48) & ~v9;
  v11 = v10 + *(_QWORD *)(v8 + 64);
  v12 = v9 | 7;
  swift_unknownObjectRelease(*((_QWORD *)v4 + 2));
  v13 = &v4[v10];
  swift_release(*(_QWORD *)&v4[v10]);
  v14 = swift_release(*(_QWORD *)&v4[v10 + 8]);
  (*(void (**)(char *, uint64_t, __n128))(*(_QWORD *)(v5 - 8) + 8))(&v4[v10 + v7[9]], v5, v14);
  v15 = &v4[v10 + v7[10]];
  v17 = type metadata accessor for PhoneWallpaperViewModel(255, v5, v6, v16);
  v18 = type metadata accessor for Bindable(0, v17);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v15, v18);
  swift_release(*(_QWORD *)&v13[v7[11]]);
  return swift_deallocObject(v4, v11, v12);
}

uint64_t sub_1001024F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v7 = v4[4];
  v8 = v4[5];
  v9 = *(unsigned __int8 *)(*(_QWORD *)(_s16EventViewService17SelectAssetButtonVMa_0(0, v7, v8, a4) - 8) + 80);
  v10 = v4[2];
  v11 = v4[3];
  v12 = (uint64_t)v4 + ((v9 + 48) & ~v9);
  v13 = (_QWORD *)swift_task_alloc(dword_10016528C);
  *(_QWORD *)(v5 + 16) = v13;
  *v13 = v5;
  v13[1] = sub_1000072F4;
  return sub_1001002E0(a1, v10, v11, v12, v7, v8);
}

uint64_t sub_100102594(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_1000034AC(&qword_10015E350);
  v5 = type metadata accessor for SavedWallpaperView(255, v1, v2, v4);
  WitnessTable = swift_getWitnessTable(&unk_10010F9C0, v5);
  v17 = v5;
  v18 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v17, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 0);
  v17 = v5;
  v18 = WitnessTable;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v17, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 1);
  v17 = OpaqueTypeMetadata2;
  v18 = OpaqueTypeConformance2;
  v9 = swift_getOpaqueTypeMetadata2(255, &v17, &opaque type descriptor for <<opaque return type of View.presentationDragIndicator(_:)>>, 0);
  v10 = sub_100014600(&qword_10015E368, &qword_10015E350, (void (*)(void))sub_10002419C);
  v17 = OpaqueTypeMetadata2;
  v18 = OpaqueTypeConformance2;
  v11 = swift_getOpaqueTypeConformance2(&v17, &opaque type descriptor for <<opaque return type of View.presentationDragIndicator(_:)>>, 1);
  v17 = v3;
  v18 = v9;
  v19 = (void *)v10;
  v20 = v11;
  v12 = swift_getOpaqueTypeMetadata2(255, &v17, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v13 = sub_1000034AC(&qword_100165260);
  v17 = v3;
  v18 = v9;
  v19 = (void *)v10;
  v20 = v11;
  v14 = swift_getOpaqueTypeConformance2(&v17, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v15 = sub_100007D40(&qword_100165268, &qword_100165260, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v17 = v12;
  v18 = v13;
  v19 = &type metadata for Text;
  v20 = v14;
  v21 = v15;
  v22 = &protocol witness table for Text;
  return swift_getOpaqueTypeConformance2(&v17, &opaque type descriptor for <<opaque return type of View.alert<A, B>(_:isPresented:actions:message:)>>, 1);
}

uint64_t sub_100102740(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100102804(char a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v10;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if ((a1 & 1) != 0)
    v4 = 0xD00000000000001BLL;
  else
    v4 = 0xD000000000000017;
  if ((a1 & 1) != 0)
    v5 = 0x8000000100114EF0;
  else
    v5 = 0x8000000100114ED0;
  swift_bridgeObjectRetain(a2);
  v6 = 0;
  while (1)
  {
    if (*(_BYTE *)(a2 + v6 + 32))
      v7 = 0xD00000000000001BLL;
    else
      v7 = 0xD000000000000017;
    if (*(_BYTE *)(a2 + v6 + 32))
      v8 = 0x8000000100114EF0;
    else
      v8 = 0x8000000100114ED0;
    if (v7 == v4 && v8 == v5)
    {
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease_n(v5, 2);
      return 1;
    }
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v4, v5, 0);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v5);
    if ((v10 & 1) != 0)
      break;
    if (v2 == ++v6)
    {
      swift_bridgeObjectRelease(a2);
      return 0;
    }
  }
  swift_bridgeObjectRelease(a2);
  return 1;
}

unint64_t sub_100102920(uint64_t a1)
{
  return sub_100102CD0(a1, &qword_100165388, (uint64_t *)&unk_100165390, (uint64_t (*)(uint64_t))sub_1000905CC);
}

unint64_t sub_10010293C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003E70(&qword_100165340);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100007ADC(v7, (uint64_t)&v16, &qword_100165348);
    v8 = v16;
    v9 = v17;
    result = sub_100090568(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_1000C7EE4(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100102A70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003E70(&qword_100165330);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100007ADC(v7, (uint64_t)v16, &qword_100165338);
    result = sub_1000905D0((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_1000C7EE4(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100102BB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003E70(&qword_100165378);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_100090568(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100102CD0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v9 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003E70(a2);
  v8 = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v9;
  }
  v11 = v8 + 64;
  v12 = a1 + 32;
  swift_retain(v8);
  while (1)
  {
    sub_100007ADC(v12, (uint64_t)&v19, a3);
    v13 = v19;
    result = a4(v19);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v9[6] + 8 * result) = v13;
    result = (unint64_t)sub_1000C7EE4(&v20, (_OWORD *)(v9[7] + 32 * result));
    v16 = v9[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v9[2] = v18;
    v12 += 40;
    if (!--v10)
    {
      swift_release(v9);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100102E7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  objc_class *ObjCClassFromMetadata;
  NSString *v27;
  id v28;
  NSString v29;
  NSString v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t inited;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char isUniquelyReferenced_nonNull_native;
  Class isa;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _OWORD v68[2];
  __int128 aBlock;
  void (*v70)(uint64_t, uint64_t, void *);
  _QWORD *v71;
  void (*v72)(char, uint64_t);
  uint64_t v73;
  char v74[128];

  v2 = type metadata accessor for UniversalLinkRouter(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v66 = (uint64_t)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t *)(a1 + *(int *)(v2 + 20));
  v11 = *v9;
  v10 = v9[1];
  v12 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v12 = v11 & 0xFFFFFFFFFFFFLL;
  if (!v12
    || (v13 = sub_1000F2A34(), v14 = sub_100102740(v11, v10, v13), swift_bridgeObjectRelease(), (v14 & 1) == 0)
    || (v15 = sub_1000F2B08()) == 0)
  {
    sub_1000F25D0((uint64_t)v8);
    sub_10010441C((uint64_t)v8);
LABEL_12:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return;
  }
  v16 = v15;
  v17 = sub_1000A3BEC();
  if (!v18 || (v19 = v17, swift_bridgeObjectRelease(), (v19 & 1) == 0))
  {
    v20 = sub_1000F2D40();
    if (v20)
    {
      v21 = v20;
      v22 = v16;
      v23 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v24 = objc_msgSend(v23, "bundleIdentifier");

      if (v24)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(v24);

        v25 = type metadata accessor for RemoteViewController();
        ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v25);
        v27 = NSStringFromClass(ObjCClassFromMetadata);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v27);

        v28 = objc_allocWithZone((Class)SBSRemoteAlertDefinition);
        v29 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v30 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v31 = objc_msgSend(v28, "initWithServiceName:viewControllerClassName:", v29, v30);

        v32 = objc_msgSend((id)objc_opt_self(SBSRemoteAlertHandle), "newHandleWithDefinition:configurationContext:", v31, v21);
        v33 = objc_msgSend(objc_allocWithZone((Class)SBSRemoteAlertActivationContext), "init");
        objc_msgSend(v32, "activateWithContext:", v33);

        swift_release(v22);
        return;
      }

      v16 = v22;
    }
    sub_1000F25D0((uint64_t)v8);
    sub_10010441C((uint64_t)v8);
    swift_release(v16);
    goto LABEL_12;
  }
  v64 = v16;
  v34 = objc_allocWithZone((Class)LSApplicationRecord);
  v35 = sub_100103848(0xD000000000000019, 0x8000000100117BE0, 0);
  if (!v35)
  {
LABEL_15:
    sub_1000F25D0((uint64_t)v8);
    sub_10010441C((uint64_t)v8);
    swift_release(v64);
    goto LABEL_12;
  }
  v63 = v35;
  v36 = sub_1000F2FBC();
  if (!v36)
  {

    goto LABEL_15;
  }
  v62 = v36;
  v37 = objc_msgSend(objc_allocWithZone((Class)_LSOpenConfiguration), "init");
  v38 = sub_100003E70(&qword_100165328);
  inited = swift_initStackObject(v38, v74);
  *(_OWORD *)(inited + 16) = xmmword_10010A6C0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyUnlockDevice);
  *(_QWORD *)(inited + 40) = v40;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyPromptUnlockDevice);
  *(_QWORD *)(inited + 88) = v41;
  *(_QWORD *)(inited + 120) = &type metadata for Bool;
  *(_BYTE *)(inited + 96) = 1;
  v42 = sub_10010293C(inited);
  if (v11 == 0xD000000000000013 && v10 == 0x8000000100117C00
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v11, v10, 0xD000000000000013, 0x8000000100117C00, 0) & 1) != 0)
  {
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyLaunchOrigin);
    v45 = v44;
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(SBSOpenApplicationLaunchOriginSpotlight);
    v71 = &type metadata for String;
    *(_QWORD *)&aBlock = v46;
    *((_QWORD *)&aBlock + 1) = v47;
    sub_1000C7EE4(&aBlock, v68);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v42);
    v67 = v42;
    sub_100103F08(v68, v43, v45, isUniquelyReferenced_nonNull_native);
    v42 = v67;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain(v42);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v37, "setFrontBoardOptions:", isa);

  v50 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (v50)
  {
    v51 = v50;
    swift_bridgeObjectRelease();
    v52 = swift_allocObject(&unk_100154E30, 24, 7);
    swift_unknownObjectWeakInit(v52 + 16, v65);
    v53 = v66;
    sub_1000F32A0(a1, v66);
    v54 = *(unsigned __int8 *)(v3 + 80);
    v55 = (v54 + 24) & ~v54;
    v56 = swift_allocObject(&unk_100154E58, v55 + v4, v54 | 7);
    *(_QWORD *)(v56 + 16) = v52;
    sub_1001047B8(v53, v56 + v55);
    v72 = sub_1001047FC;
    v73 = v56;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v70 = sub_1001036DC;
    v71 = &unk_100154E70;
    v57 = _Block_copy(&aBlock);
    v58 = v73;
    v59 = v62;
    v60 = v63;
    v61 = v37;
    objc_msgSend(v51, "openUserActivity:usingApplicationRecord:configuration:completionHandler:", v59, v60, v61, v57, swift_release(v58).n128_f64[0]);

    swift_release(v64);
    _Block_release(v57);

  }
  else
  {
    __break(1u);
  }
}

void sub_100103560(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t Strong;
  void *v16;
  _BYTE v18[24];

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((a1 & 1) == 0)
  {
    v9 = a3 + 16;
    if (qword_10015CF60 != -1)
      swift_once(&qword_10015CF60, sub_100105E80);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_100011AC4(v10, (uint64_t)qword_10016F728);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to open ShazamEventsApp, falling back to Safari)", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    swift_beginAccess(v9, v18, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v9);
    if (Strong)
    {
      v16 = (void *)Strong;
      sub_1000F25D0((uint64_t)v8);
      sub_10010441C((uint64_t)v8);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
}

void sub_1001036DC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

id sub_100103778()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

int main(int argc, const char **argv, const char **envp)
{
  int v3;
  char **v4;
  uint64_t v5;
  objc_class *ObjCClassFromMetadata;
  NSString *v7;

  v3 = static CommandLine.argc.getter(*(_QWORD *)&argc, argv, envp);
  v4 = (char **)static CommandLine.unsafeArgv.getter();
  v5 = type metadata accessor for AppDelegate();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v5);
  v7 = NSStringFromClass(ObjCClassFromMetadata);
  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v7 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  UIApplicationMain(v3, v4, 0, v7);

  return 0;
}

uint64_t type metadata accessor for AppDelegate()
{
  return objc_opt_self(_TtC16EventViewService11AppDelegate);
}

id sub_100103848(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v12 = 0;
  v7 = objc_msgSend(v3, "initWithBundleIdentifier:allowPlaceholder:error:", v6, a3 & 1, &v12);

  v8 = v12;
  if (v7)
  {
    v9 = v12;
  }
  else
  {
    v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }
  return v7;
}

Swift::Int sub_100103920(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003E70(&qword_100165380);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_24;
    }
    if (__OFADD__(v15++, 1))
      goto LABEL_43;
    if (v15 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v15);
    if (!v25)
    {
      v26 = v15 + 1;
      if (v15 + 1 >= v12)
      {
LABEL_34:
        swift_release(v5);
        v3 = v37;
        if ((v39 & 1) == 0)
          goto LABEL_41;
        goto LABEL_37;
      }
      v25 = *(_QWORD *)(v38 + 8 * v26);
      if (!v25)
      {
        while (1)
        {
          v15 = v26 + 1;
          if (__OFADD__(v26, 1))
            break;
          if (v15 >= v12)
            goto LABEL_34;
          v25 = *(_QWORD *)(v38 + 8 * v15);
          ++v26;
          if (v25)
            goto LABEL_23;
        }
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return result;
      }
      ++v15;
    }
LABEL_23:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_24:
    v27 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v22);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v27[1]);
      v31 = v30;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v29, v28);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v18 == v33;
        if (v18 == v33)
          v18 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    *v20 = v29;
    v20[1] = v28;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v30;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_100103C0C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003E70(&qword_100165340);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v18 >= v35)
          goto LABEL_37;
        v19 = v36[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v35)
            goto LABEL_37;
          v19 = v36[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v36[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_44;
                if (v13 >= v35)
                  goto LABEL_37;
                v19 = v36[v13];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v13 = v20;
          }
        }
LABEL_24:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_1000C7EE4(v24, v38);
      }
      else
      {
        sub_100036668((uint64_t)v24, (uint64_t)v38);
        swift_bridgeObjectRetain(v22);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v23, v22);
      v25 = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = v25 & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v14 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      sub_1000C7EE4(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v14));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_100103F08(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100090568(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_1000055A8(v19);
        sub_1000C7EE4(a1, v19);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100104238();
      goto LABEL_7;
    }
    sub_100103C0C(v15, a4 & 1);
    v20 = sub_100090568(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100104038(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

_OWORD *sub_100104038(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1000C7EE4(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

id sub_1001040A0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100003E70(&qword_100165380);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_26;
    if (v9 >= v13)
      goto LABEL_24;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    if (!v23)
      break;
LABEL_23:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }
  v24 = v9 + 1;
  if (v9 + 1 >= v13)
    goto LABEL_24;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_24;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

void sub_100104238()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_100003E70(&qword_100165340);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_100036668(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1000C7EE4(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_10010441C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  NSURL *v17;
  void *v18;
  void *v19;
  Class isa;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10015CF60 != -1)
    swift_once(&qword_10015CF60, sub_100105E80);
  v6 = type metadata accessor for Logger(0);
  sub_100011AC4(v6, (uint64_t)qword_10016F728);
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(12, -1);
    v21[1] = a1;
    v11 = (uint8_t *)v10;
    v12 = swift_slowAlloc(32, -1);
    v23 = v12;
    *(_DWORD *)v11 = 136315138;
    v13 = sub_100003B3C(&qword_10015ED80, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v2, v13);
    v22 = sub_1000C7684(v14, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Opening %s in Safari", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  v16 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  URL._bridgeToObjectiveC()(v17);
  v19 = v18;
  sub_100102CD0((uint64_t)_swiftEmptyArrayStorage, &qword_100165360, &qword_100165368, (uint64_t (*)(uint64_t))sub_1000905CC);
  type metadata accessor for OpenExternalURLOptionsKey(0);
  sub_100003B3C((unint64_t *)&unk_100165350, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_100109FC8);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v16, "openURL:options:completionHandler:", v19, isa, 0);

}

uint64_t sub_100104700()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100104724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for UniversalLinkRouter(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1001047B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UniversalLinkRouter(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1001047FC(char a1, uint64_t a2)
{
  uint64_t v2;

  type metadata accessor for UniversalLinkRouter(0);
  sub_100103560(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_10010484C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10010485C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100104864(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  id v25;
  void *v26;
  void (*v27)(char *, char *, uint64_t);
  id v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;

  v43 = type metadata accessor for UniversalLinkRouter(0);
  __chkstk_darwin(v43);
  v44 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100003E70(&qword_100165370);
  __chkstk_darwin(v3);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v42 - v11;
  *(_QWORD *)&v14 = __chkstk_darwin(v13).n128_u64[0];
  v16 = (char *)&v42 - v15;
  v17 = objc_msgSend(a1, "activityType", v14);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUserActivityTypeBrowsingWeb);
  if (v18 == v21 && v20 == v22)
  {
    swift_bridgeObjectRelease_n(v20, 2);
  }
  else
  {
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v21, v22, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
      goto LABEL_14;
  }
  v25 = objc_msgSend(a1, "webpageURL");
  if (v25)
  {
    v26 = v25;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v25);

    v27 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v27(v5, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      v27(v16, v5, v6);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v16, v6);
      v28 = objc_msgSend(a1, "_sourceApplication");
      if (v28)
      {
        v29 = v28;
        v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
        v32 = v31;

      }
      else
      {
        v30 = 0;
        v32 = 0xE000000000000000;
      }
      v39 = (uint64_t)v44;
      v40 = v43;
      v27(v44, v9, v6);
      v41 = (uint64_t *)(v39 + *(int *)(v40 + 20));
      *v41 = v30;
      v41[1] = v32;
      sub_100102E7C(v39);
      sub_1000F32E4(v39);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
      return 1;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }
  sub_100050A24((uint64_t)v5);
LABEL_14:
  if (qword_10015CF60 != -1)
    swift_once(&qword_10015CF60, sub_100105E80);
  v33 = type metadata accessor for Logger(0);
  v34 = sub_100011AC4(v33, (uint64_t)qword_10016F728);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Ignore user activity, it's not a universal link", v37, 2u);
    swift_slowDealloc(v37, -1, -1);
  }

  return 0;
}

uint64_t sub_100104C0C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[15];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = " ";
  v4[2] = &unk_100114AE0;
  v4[3] = " ";
  v4[4] = " ";
  v4[5] = " ";
  v4[6] = " ";
  v4[7] = " ";
  v4[8] = &unk_100114AE0;
  v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[11] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[12] = &unk_100114AF8;
  v4[13] = &unk_100114AF8;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[14] = *(_QWORD *)(result - 8) + 64;
    return swift_initClassMetadata2(a1, 0, 15, v4, a1 + 96);
  }
  return result;
}

uint64_t sub_100104CCC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v13;

  v13 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  sub_1001052D8(a1, a2, a3, a4, a5, a6);
  return v13;
}

uint64_t sub_100104D48()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100114B58);
  sub_100105098(KeyPath);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 264);
}

double sub_100104D98()
{
  return sub_100105048() * 0.5075 * 0.87;
}

double sub_100104DC4()
{
  return sub_100105048() * 0.96;
}

double sub_100104DE8()
{
  double v0;

  v0 = sub_100105190();
  return (v0 + sub_100105048() * -0.5075) * 0.5;
}

BOOL sub_100104E24()
{
  uint64_t v0;

  return Array.count.getter(*(_QWORD *)(v0 + 240)) > 1;
}

double sub_100104E50()
{
  return sub_100105048() * -0.022;
}

double sub_100104E70()
{
  return sub_100105048() * 0.5075 * 0.9;
}

double sub_100104E9C()
{
  return sub_100105048() * 0.97;
}

double sub_100104EBC()
{
  return sub_100105048() * 0.5075 * 0.87 * 0.14;
}

double sub_100104EF4(char a1)
{
  return sub_10010525C(a1, (uint64_t)&unk_100114C00, (uint64_t)sub_100105714);
}

uint64_t sub_100104F08()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100114C00);
  sub_100105098(KeyPath);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 265);
}

uint64_t sub_100104F58()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;

  v0 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v2 = objc_msgSend(v1, "bundleIdentifier");

  if (v2)
  {
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v0 = v4;

  }
  else
  {
    v3 = 0;
  }
  v5._countAndFlagsBits = v3;
  v5._object = v0;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v0);
  URL.init(string:)(0xD00000000000001FLL, 0x8000000100117E80);
  return swift_bridgeObjectRelease(0x8000000100117E80);
}

double sub_100105048()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100114B90);
  sub_100105098(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + 248);
}

uint64_t sub_100105098(uint64_t a1)
{
  _QWORD *v1;
  uint64_t WitnessTable;
  uint64_t v5;

  WitnessTable = swift_getWitnessTable(&unk_100114B38, *v1);
  return ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, a1, WitnessTable);
}

uint64_t sub_1001050F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t WitnessTable;
  uint64_t v11;

  WitnessTable = swift_getWitnessTable(&unk_100114B38, *v4);
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, a1, a2, a3, a4, WitnessTable);
}

double sub_100105190()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100114BC8);
  sub_100105098(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + 256);
}

void sub_1001051E0(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  double v9;
  __int128 v10;

  v10 = *(_OWORD *)(*(_QWORD *)v3 + 80);
  KeyPath = swift_getKeyPath(a1);
  v8 = v3;
  v9 = a3;
  sub_1001050F8(KeyPath, a2, (uint64_t)&v7, (uint64_t)&type metadata for () + 8);
  swift_release(KeyPath);
}

double sub_10010525C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  double result;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;

  v11 = *(_OWORD *)(*(_QWORD *)v3 + 80);
  KeyPath = swift_getKeyPath(a2);
  v9 = v3;
  v10 = a1;
  sub_1001050F8(KeyPath, a3, (uint64_t)&v8, (uint64_t)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_1001052D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  *(_QWORD *)(v6 + 16) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000029, 0x8000000100117480);
  *(_QWORD *)(v6 + 24) = v13;
  *(_BYTE *)(v6 + 32) = v14 & 1;
  *(_QWORD *)(v6 + 40) = v15;
  *(_QWORD *)(v6 + 48) = 0x7A6542656E6F6870;
  *(_QWORD *)(v6 + 56) = 0xEA00000000006C65;
  *(_QWORD *)(v6 + 64) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000027, 0x8000000100117D20);
  *(_QWORD *)(v6 + 72) = v16;
  *(_BYTE *)(v6 + 80) = v17 & 1;
  *(_QWORD *)(v6 + 88) = v18;
  *(_QWORD *)(v6 + 96) = LocalizedStringKey.init(stringLiteral:)(0xD00000000000003ELL, 0x8000000100117D50);
  *(_QWORD *)(v6 + 104) = v19;
  *(_BYTE *)(v6 + 112) = v20 & 1;
  *(_QWORD *)(v6 + 120) = v21;
  *(_QWORD *)(v6 + 128) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000041, 0x8000000100117D90);
  *(_QWORD *)(v6 + 136) = v22;
  *(_BYTE *)(v6 + 144) = v23 & 1;
  *(_QWORD *)(v6 + 152) = v24;
  *(_QWORD *)(v6 + 160) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000048, 0x8000000100117DE0);
  *(_QWORD *)(v6 + 168) = v25;
  *(_BYTE *)(v6 + 176) = v26 & 1;
  *(_QWORD *)(v6 + 184) = v27;
  *(_QWORD *)(v6 + 192) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000047, 0x8000000100117E30);
  *(_QWORD *)(v6 + 200) = v28;
  *(_BYTE *)(v6 + 208) = v29 & 1;
  *(_QWORD *)(v6 + 216) = v30;
  *(_BYTE *)(v6 + 265) = 0;
  ObservationRegistrar.init()();
  *(_QWORD *)(v6 + 224) = a1;
  *(_QWORD *)(v6 + 232) = a2;
  *(_QWORD *)(v6 + 240) = a3;
  *(double *)(v6 + 248) = a5;
  *(double *)(v6 + 256) = a6;
  *(_BYTE *)(v6 + 264) = a4;
  return v6;
}

_QWORD *sub_100105460()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v1 = v0[3];
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v0[7]);
  v2 = v0[9];
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v2);
  v3 = v0[13];
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v3);
  v4 = v0[17];
  swift_bridgeObjectRelease(v0[19]);
  swift_bridgeObjectRelease(v4);
  v5 = v0[21];
  swift_bridgeObjectRelease(v0[23]);
  swift_bridgeObjectRelease(v5);
  v6 = v0[25];
  swift_bridgeObjectRelease(v0[27]);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v0[29]);
  swift_bridgeObjectRelease(v0[30]);
  v7 = (char *)v0 + qword_1001653A0;
  v8 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return v0;
}

uint64_t sub_100105534()
{
  uint64_t v0;

  sub_100105460();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for PhoneWallpaperViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100008920(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PhoneWallpaperViewModel);
}

uint64_t sub_100105564@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100104D48();
  *a1 = result & 1;
  return result;
}

double sub_100105590(char *a1)
{
  return sub_10010525C(*a1, (uint64_t)&unk_100114B58, (uint64_t)sub_1001055DC);
}

uint64_t sub_1001055C4()
{
  return 16;
}

__n128 sub_1001055D0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1001055DC()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 264) = *(_BYTE *)(v0 + 24);
}

void sub_1001055EC(double *a1@<X8>)
{
  *a1 = sub_100105048();
}

void sub_100105614(double *a1)
{
  sub_1001051E0((uint64_t)&unk_100114B90, (uint64_t)sub_100105660, *a1);
}

uint64_t sub_100105648()
{
  return 16;
}

__n128 sub_100105654(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_100105660()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + 248) = result;
  return result;
}

void sub_100105670(double *a1@<X8>)
{
  *a1 = sub_100105190();
}

void sub_100105698(double *a1)
{
  sub_1001051E0((uint64_t)&unk_100114BC8, (uint64_t)sub_1001056E4, *a1);
}

uint64_t sub_1001056CC()
{
  return 16;
}

__n128 sub_1001056D8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1001056E4()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + 256) = result;
  return result;
}

uint64_t sub_1001056FC()
{
  return 16;
}

__n128 sub_100105708(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_100105714()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 265) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100105724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[10] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[11] = v5;
  v3[12] = v6;
  return swift_task_switch(sub_100105794, v5, v6);
}

uint64_t sub_100105794()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  __int128 v5;

  v1 = *(_QWORD *)(v0 + 56);
  v5 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 40) = v5;
  v2 = sub_100007D80((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v2, v1);
  v3 = (_QWORD *)swift_task_alloc(dword_10015ED7C);
  *(_QWORD *)(v0 + 104) = v3;
  *v3 = v0;
  v3[1] = sub_100037940;
  return sub_10003C5AC(v0 + 16);
}

id sub_100105818(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  double v6;
  double v7;
  id v8;
  double v9;
  double v10;
  id v11;

  v4 = (*(uint64_t (**)(void))(a2 + 48))();
  if (v4)
  {
    v5 = (void *)v4;
    v6 = (*(double (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    v8 = objc_msgSend(objc_allocWithZone((Class)MKPlacemark), "initWithCoordinate:postalAddress:", v5, v6, v7);

  }
  else
  {
    v9 = (*(double (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    v8 = objc_msgSend(objc_allocWithZone((Class)MKPlacemark), "initWithCoordinate:", v9, v10);
  }
  v11 = objc_msgSend(objc_allocWithZone((Class)MKMapItem), "initWithPlacemark:", v8);

  return v11;
}

uint64_t sub_100105904(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  char v13;
  unint64_t *v14;
  uint64_t v15;
  Swift::String v16;
  void *object;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  Swift::String v22;
  void *v23;
  Swift::String v24;
  char v26;
  uint64_t v28;

  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(unint64_t **)(a1 + 40);
  v9 = v8[2];
  if (!v9)
    return 0;
  swift_bridgeObjectRetain_n(v8, 2);
  v10 = v8 + 6;
  while (1)
  {
    v11 = *(v10 - 1);
    v12 = (void *)*v10;
    if ((*(_BYTE *)(v10 - 2) & 1) == 0)
      break;
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6449707061, 0xE500000000000000, 0x7972746E756F63, 0xE700000000000000, 0);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
      goto LABEL_8;
    v10 += 3;
    swift_bridgeObjectRelease();
    if (!--v9)
    {
      v14 = v8;
LABEL_22:
      swift_bridgeObjectRelease_n(v14, 2);
      return 0;
    }
  }
  swift_bridgeObjectRetain(*v10);
  swift_bridgeObjectRelease();
LABEL_8:
  swift_bridgeObjectRelease();
  v15 = swift_bridgeObjectRelease();
  static Locale.current.getter(v15);
  v16._countAndFlagsBits = v11;
  v16._object = v12;
  object = Locale.localizedString(forRegionCode:)(v16).value._object;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (!object)
    return 0;
  v18 = a2[2];
  if (!v18)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain_n(a2, 2);
  v19 = a2 + 5;
  while (1)
  {
    v20 = *v19;
    if (*v19 >= 2)
      break;
LABEL_11:
    v19 += 2;
    if (!--v18)
    {
      swift_bridgeObjectRelease();
      v14 = a2;
      goto LABEL_22;
    }
  }
  v21 = *(v19 - 1);
  v22 = String.lowercased()();
  v23 = v22._object;
  v24 = String.lowercased()();
  if (v22._countAndFlagsBits == v24._countAndFlagsBits && v22._object == v24._object)
  {
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRelease_n(a2, 2);
    goto LABEL_25;
  }
  v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v22._countAndFlagsBits, v22._object, v24._countAndFlagsBits, v24._object, 0);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v26 & 1) == 0)
  {
    sub_100005CE4(v21, v20);
    goto LABEL_11;
  }
  v23 = a2;
LABEL_25:
  swift_bridgeObjectRelease_n(v23, 2);
  swift_bridgeObjectRelease();
  return v21;
}

unint64_t destroy for ScrollableTabViewModel(_QWORD *a1)
{
  unint64_t result;

  swift_bridgeObjectRelease(*a1);
  result = a1[2];
  if (result >= 2)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t *_s16EventViewService22ScrollableTabViewModelVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  *a1 = *a2;
  v4 = a2 + 1;
  v5 = a2[2];
  swift_bridgeObjectRetain(v3);
  if (v5 >= 2)
  {
    a1[1] = *v4;
    a1[2] = v5;
    swift_bridgeObjectRetain(v5);
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *(_OWORD *)v4;
  }
  return a1;
}

_QWORD *assignWithCopy for ScrollableTabViewModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  v5 = a2[2];
  if (a1[2] >= 2uLL)
  {
    if (v5 >= 2)
    {
      a1[1] = a2[1];
      v7 = a2[2];
      a1[2] = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_100005778((uint64_t)(a1 + 1));
    goto LABEL_6;
  }
  if (v5 < 2)
  {
LABEL_6:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    return a1;
  }
  a1[1] = a2[1];
  v6 = a2[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *assignWithTake for ScrollableTabViewModel(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2 + 1;
  if (a1[2] >= 2uLL)
  {
    v5 = a2[2];
    if (v5 >= 2)
    {
      a1[1] = *v4;
      a1[2] = v5;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_100005778((uint64_t)(a1 + 1));
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)v4;
  return a1;
}

ValueMetadata *type metadata accessor for ScrollableTabViewModel()
{
  return &type metadata for ScrollableTabViewModel;
}

void sub_100105D7C()
{
  qword_10016F6C8 = 0x615020746E657645;
  unk_10016F6D0 = 0xEA00000000006567;
}

void sub_100105DA4()
{
  qword_10016F6D8 = 0x5020747369747241;
  unk_10016F6E0 = 0xEB00000000656761;
}

void sub_100105DD0()
{
  qword_10016F6E8 = 0x61502065756E6556;
  unk_10016F6F0 = 0xEA00000000006567;
}

void sub_100105DF8()
{
  strcpy((char *)&qword_10016F6F8, "Open in Maps");
  unk_10016F705 = 0;
  unk_10016F706 = -5120;
}

void sub_100105E24()
{
  strcpy((char *)&qword_10016F708, "Music Module");
  unk_10016F715 = 0;
  unk_10016F716 = -5120;
}

void sub_100105E50()
{
  strcpy((char *)&qword_10016F718, "Setlist-Module");
  unk_10016F727 = -18;
}

uint64_t sub_100105E80()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100105EEC(v0, qword_10016F728);
  sub_100011AC4(v0, (uint64_t)qword_10016F728);
  return Logger.init(subsystem:category:)(0xD000000000000021, 0x8000000100117EA0, 1701998435, 0xE400000000000000);
}

uint64_t *sub_100105EEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100105F2C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;

  v1 = *(void **)(v0 + 56);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 48);
    v8 = *(_OWORD *)(v0 + 32);
    v7 = v8;
    swift_bridgeObjectRetain(v1);
    sub_10000E3E4((uint64_t)&v8);
    v3._countAndFlagsBits = 10;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4._countAndFlagsBits = v2;
    v4._object = v1;
    String.append(_:)(v4);
    swift_bridgeObjectRelease(v1);
    return v7;
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 32);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  }
  return v5;
}

uint64_t sub_100105FBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  void *v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;

  v1 = v0;
  v2 = type metadata accessor for URLComponents(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()(v4);
  if (qword_10015CF68 != -1)
    swift_once(&qword_10015CF68, sub_100106450);
  v7 = qword_100165430;
  v8 = *(_QWORD *)algn_100165438;
  v9 = swift_bridgeObjectRetain(*(_QWORD *)algn_100165438);
  URLComponents.scheme.setter(v7, v8, v9);
  if (qword_10015CF70 != -1)
    swift_once(&qword_10015CF70, sub_100106470);
  v10 = qword_100165440;
  v11 = *(_QWORD *)algn_100165448;
  v12 = swift_bridgeObjectRetain(*(_QWORD *)algn_100165448);
  URLComponents.host.setter(v10, v11, v12);
  v13 = *(void **)(v1 + 56);
  if (v13)
  {
    v14 = *(_QWORD *)(v1 + 48);
    v24 = *(_OWORD *)(v1 + 32);
    v25 = v24;
    swift_bridgeObjectRetain(v13);
    sub_10000E3E4((uint64_t)&v25);
    v15._countAndFlagsBits = 2106912;
    v15._object = (void *)0xE300000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = v14;
    v16._object = v13;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(v13);
    v17 = *((_QWORD *)&v24 + 1);
    v18 = v24;
  }
  else
  {
    v18 = *(_QWORD *)(v1 + 32);
    v17 = *(_QWORD *)(v1 + 40);
    swift_bridgeObjectRetain(v17);
  }
  v19 = sub_100003E70(&qword_10015D3B0);
  v20 = type metadata accessor for URLQueryItem(0);
  v21 = swift_allocObject(v19, ((*(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80) | 7);
  *(_OWORD *)(v21 + 16) = xmmword_10010ACC0;
  if (qword_10015CF78 != -1)
    swift_once(&qword_10015CF78, sub_1001064A0);
  URLQueryItem.init(name:value:)(qword_100165450, *(_QWORD *)algn_100165458, v18, v17);
  swift_bridgeObjectRelease(v17);
  v22 = URLComponents.queryItems.setter(v21);
  URLComponents.url.getter(v22);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

void sub_1001061F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  ValueWitnessTable *v13;
  uint64_t v14;
  char *v15;
  NSString v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  void **aBlock;
  uint64_t v22;
  Class (*v23)(uint64_t);
  ValueMetadata *v24;
  _QWORD *(*v25)();
  _QWORD *v26;
  char *v27;

  v3 = sub_100003E70(&qword_10015D3B8);
  v4 = swift_allocObject(v3, 192, 7);
  *(_OWORD *)(v4 + 16) = xmmword_10010A6D0;
  v6 = *v1;
  v5 = v1[1];
  *(_QWORD *)(v4 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v4 + 64) = &off_100162E68;
  *(_BYTE *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = v6;
  *(_QWORD *)(v4 + 48) = v5;
  *(_QWORD *)(v4 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v4 + 104) = &off_100162E40;
  *(_BYTE *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v4 + 144) = &off_100162EC8;
  *(_BYTE *)(v4 + 112) = 4;
  *(_QWORD *)(v4 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v4 + 184) = &off_100162EA0;
  *(_OWORD *)(v4 + 152) = xmmword_100114C80;
  *(_BYTE *)(v4 + 168) = 3;
  v7 = *(_QWORD *)(a1 + 72);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 64);
    v9 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v8 = 0;
    v9 = 0xE000000000000000;
  }
  v24 = &type metadata for AnalyticsString;
  v25 = (_QWORD *(*)())&off_100162E68;
  LOBYTE(aBlock) = 1;
  v22 = v8;
  v23 = (Class (*)(uint64_t))v9;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  v27 = sub_1000F4CF4((char *)1, 5, 1, (char *)v4);
  v10 = sub_100005580((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v13->initializeWithCopy)((uint64_t)v12, v14);
  sub_1000DAD34(4, (uint64_t)v12, (uint64_t *)&v27, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_100162E68);
  sub_1000055A8(&aBlock);
  v15 = v27;
  v16 = String._bridgeToObjectiveC()();
  v17 = (_QWORD *)swift_allocObject(&unk_100154FF8, 40, 7);
  v17[2] = 0xD00000000000001ELL;
  v17[3] = 0x80000001001150B0;
  v17[4] = v15;
  v25 = sub_1000055F4;
  v26 = v17;
  aBlock = _NSConcreteStackBlock;
  v22 = 1107296256;
  v23 = sub_1000DACC0;
  v24 = (ValueMetadata *)&unk_100155010;
  v18 = _Block_copy(&aBlock);
  v19 = v26;
  swift_bridgeObjectRetain(v15);
  swift_release(v19);
  AnalyticsSendEventLazy(v16, v18);
  _Block_release(v18);
  swift_bridgeObjectRelease(v15);

}

void sub_100106450()
{
  qword_100165430 = 0x7370747468;
  *(_QWORD *)algn_100165438 = 0xE500000000000000;
}

void sub_100106470()
{
  strcpy((char *)&qword_100165440, "maps.apple.com");
  algn_100165448[7] = -18;
}

void sub_1001064A0()
{
  qword_100165450 = 113;
  *(_QWORD *)algn_100165458 = 0xE100000000000000;
}

uint64_t sub_1001064B8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001064E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001064F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001064FC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;

  sub_1000A3BEC();
  if (v0)
  {
    v1 = v0;
    if (*(_QWORD *)(v0 + 16))
    {
      v2 = sub_100090600(0);
      if ((v3 & 1) != 0)
      {
        v4 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 56) + v2);
        swift_bridgeObjectRelease(v1);
        __asm { BR              X9 }
      }
    }
    swift_bridgeObjectRelease(v1);
  }
  return 0;
}

uint64_t destroy for LocationViewModel(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
}

uint64_t initializeWithCopy for LocationViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v7 = *(void **)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v6;
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v8;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10 = v7;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for LocationViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(void **)(a1 + 64);
  v11 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v11;
  v12 = v11;

  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v15 = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

__n128 initializeWithTake for LocationViewModel(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for LocationViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  v8 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);

  v9 = *(_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v9;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v11 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationViewModel()
{
  return &type metadata for LocationViewModel;
}

uint64_t sub_100106928()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC16EventViewServiceP33_2B8D5FC2A64B74204B583E4E1227DE1919ResourceBundleClass);
}

