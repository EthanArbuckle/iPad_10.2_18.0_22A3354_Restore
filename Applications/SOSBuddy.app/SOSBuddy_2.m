void sub_1000FB724(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_100317D58);
  v11 = __chkstk_darwin(v9, v10);
  v28 = (uint64_t)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v26 - v14;
  v29 = type metadata accessor for ServiceOutages.Outage(0);
  v16 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29, v17);
  v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v20);
  if (v20)
  {
    v21 = a2 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v27 = *(_QWORD *)(v16 + 72);
    do
    {
      sub_1000E1F30(v21, (uint64_t)v19, type metadata accessor for ServiceOutages.Outage);
      sub_10000B234((uint64_t)v19, (uint64_t)v15, &qword_100317D58);
      v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
      if (v23(v15, 1, v4) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v15, v4);
        Hasher._combine(_:)(1u);
        v24 = sub_1000052EC(&qword_10031FA28, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        dispatch thunk of Hashable.hash(into:)(a1, v4, v24);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      }
      v25 = v28;
      sub_10000B234((uint64_t)&v19[*(int *)(v29 + 20)], v28, &qword_100317D58);
      if (v23((char *)v25, 1, v4) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v8, v25, v4);
        Hasher._combine(_:)(1u);
        v22 = sub_1000052EC(&qword_10031FA28, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        dispatch thunk of Hashable.hash(into:)(a1, v4, v22);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      }
      sub_10000AFFC((uint64_t)v19, type metadata accessor for ServiceOutages.Outage);
      v21 += v27;
      --v20;
    }
    while (v20);
  }
}

uint64_t sub_1000FB9E4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  _QWORD *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t result;
  uint64_t *v19[4];

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v17 = a3;
    else
      v17 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000FDD4C();
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100003DB8(&qword_10031FA98);
          v13 = sub_1000FBBDC(v19, i, a3);
          v15 = *v14;
          v16 = swift_retain(*v14);
          ((void (*)(uint64_t **, _QWORD, __n128))v13)(v19, 0, v16);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for TryOutTranscriptItem(0);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void (*sub_1000FBBDC(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_1000FBC30(v6, a2, a3);
  return sub_1000BEC30;
}

uint64_t *sub_1000FBC30(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    swift_retain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)destroy for SessionTrailingView;
  }
  __break(1u);
  return result;
}

BOOL sub_1000FBC9C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  int v26;
  _BOOL8 result;
  _BOOL4 v28;
  int v29;
  int v30;
  _BOOL4 v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  char v36;
  uint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for TransmissionProgress(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100003DB8(&qword_10031FA30);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003DB8(&qword_100316B68);
  v15 = __chkstk_darwin(v13, v14);
  v17 = (uint64_t *)((char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = __chkstk_darwin(v15, v18);
  v21 = (char *)&v37 - v20;
  __chkstk_darwin(v19, v22);
  v24 = (char *)&v37 - v23;
  if (*a1 != *a2)
    return 0;
  v25 = a1[1];
  v26 = a2[1];
  if (v25 == 2)
  {
    if (v26 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v28 = (v25 & 1) == 0;
    if (v26 == 2 || ((v28 ^ v26) & 1) == 0)
      return result;
  }
  v29 = a1[2];
  v30 = a2[2];
  if (v29 == 2)
  {
    if (v30 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v31 = (v29 & 1) == 0;
    if (v30 == 2 || ((v31 ^ v30) & 1) == 0)
      return result;
  }
  v32 = a1[3];
  v33 = a2[3];
  if (v32 == 4)
  {
    if (v33 != 4)
      return 0;
LABEL_17:
    v38 = type metadata accessor for LinkState(0);
    sub_10000B234((uint64_t)&a1[*(int *)(v38 + 32)], (uint64_t)v24, &qword_100316B68);
    sub_10000B234((uint64_t)&a2[*(int *)(v38 + 32)], (uint64_t)v21, &qword_100316B68);
    v34 = (uint64_t)&v12[*(int *)(v9 + 48)];
    sub_10000B234((uint64_t)v24, (uint64_t)v12, &qword_100316B68);
    sub_10000B234((uint64_t)v21, v34, &qword_100316B68);
    v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v35((uint64_t)v12, 1, v4) == 1)
    {
      sub_100007FF0((uint64_t)v21, &qword_100316B68);
      sub_100007FF0((uint64_t)v24, &qword_100316B68);
      if (v35(v34, 1, v4) == 1)
      {
        sub_100007FF0((uint64_t)v12, &qword_100316B68);
        return 1;
      }
    }
    else
    {
      sub_10000B234((uint64_t)v12, (uint64_t)v17, &qword_100316B68);
      if (v35(v34, 1, v4) != 1)
      {
        sub_1000E8D6C(v34, (uint64_t)v8, type metadata accessor for TransmissionProgress);
        v36 = sub_1000FD360(v17, v8);
        sub_10000AFFC((uint64_t)v8, type metadata accessor for TransmissionProgress);
        sub_100007FF0((uint64_t)v21, &qword_100316B68);
        sub_100007FF0((uint64_t)v24, &qword_100316B68);
        sub_10000AFFC((uint64_t)v17, type metadata accessor for TransmissionProgress);
        sub_100007FF0((uint64_t)v12, &qword_100316B68);
        return (v36 & 1) != 0;
      }
      sub_100007FF0((uint64_t)v21, &qword_100316B68);
      sub_100007FF0((uint64_t)v24, &qword_100316B68);
      sub_10000AFFC((uint64_t)v17, type metadata accessor for TransmissionProgress);
    }
    sub_100007FF0((uint64_t)v12, &qword_10031FA30);
    return 0;
  }
  result = 0;
  if (v33 != 4 && v32 == v33)
    goto LABEL_17;
  return result;
}

BOOL sub_1000FC034(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char v67;
  int v68;
  int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(uint64_t, uint64_t, uint64_t);
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  int v85;
  uint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  _BOOL8 result;
  uint64_t *v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int (*v111)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  _BOOL4 v131;
  char v132;
  char v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  BOOL v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  char v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int (*v158)(uint64_t, uint64_t, uint64_t);
  uint64_t v159;
  uint64_t v160;
  unsigned __int8 *v161;
  unsigned __int8 *v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  __int16 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  __int16 v183;
  uint64_t v184;
  int *v185;
  uint64_t v186;
  uint64_t v187;
  unsigned __int8 *v188;
  unsigned __int8 *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned __int8 *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  unsigned __int8 *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  __int16 v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  __int16 v229;
  char v230[8];
  uint64_t v231;
  __int16 v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  __int16 v238;
  uint64_t v239;
  char v240;
  uint64_t v241;
  char v242;
  uint64_t v243;
  char v244;
  uint64_t v245;
  char v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  char v250;

  v3 = type metadata accessor for ConnectionClosed(0);
  v191 = *(_QWORD *)(v3 - 8);
  v192 = v3;
  __chkstk_darwin(v3, v4);
  v188 = (unsigned __int8 *)&v184 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_100003DB8(&qword_10031FA38);
  __chkstk_darwin(v190, v6);
  v195 = (uint64_t)&v184 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_1003180C0);
  v10 = __chkstk_darwin(v8, v9);
  v189 = (unsigned __int8 *)&v184 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10, v12);
  v193 = (uint64_t)&v184 - v14;
  __chkstk_darwin(v13, v15);
  v194 = (uint64_t)&v184 - v16;
  v17 = type metadata accessor for LinkState(0);
  v199 = *(_QWORD *)(v17 - 8);
  v200 = v17;
  __chkstk_darwin(v17, v18);
  v196 = (unsigned __int8 *)&v184 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_100003DB8(&qword_10031FA40);
  __chkstk_darwin(v198, v20);
  v205 = (char *)&v184 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100003DB8((uint64_t *)&unk_10031B230);
  v24 = __chkstk_darwin(v22, v23);
  v204 = (unsigned __int8 *)&v184 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24, v26);
  v202 = (char *)&v184 - v28;
  __chkstk_darwin(v27, v29);
  v203 = (char *)&v184 - v30;
  v209 = type metadata accessor for SilencePeriod(0);
  v207 = *(_QWORD *)(v209 - 8);
  __chkstk_darwin(v209, v31);
  v197 = (uint64_t)&v184 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = sub_100003DB8(&qword_10031FA48);
  __chkstk_darwin(v206, v33);
  v208 = (uint64_t)&v184 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100003DB8(&qword_10031F888);
  v37 = __chkstk_darwin(v35, v36);
  v201 = (uint64_t)&v184 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v37, v39);
  v210 = (uint64_t)&v184 - v41;
  __chkstk_darwin(v40, v42);
  v211 = (uint64_t)&v184 - v43;
  v44 = type metadata accessor for ServiceOutages(0);
  v45 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44, v46);
  v48 = (char *)&v184 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100003DB8(&qword_10031FA50);
  __chkstk_darwin(v49, v50);
  v52 = (char *)&v184 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100003DB8(&qword_10031F880);
  v55 = __chkstk_darwin(v53, v54);
  v57 = (char *)&v184 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __chkstk_darwin(v55, v58);
  v61 = (char *)&v184 - v60;
  v63 = __chkstk_darwin(v59, v62);
  v66 = (char *)&v184 - v65;
  v67 = *(_BYTE *)(a2 + 40);
  if ((*(_BYTE *)(v64 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0)
      return 0;
  }
  else
  {
    if (*(_QWORD *)v64 != *(_QWORD *)a2)
      v67 = 1;
    if ((v67 & 1) != 0)
      return 0;
    v90 = *(double *)(v64 + 8);
    v91 = *(double *)(v64 + 16);
    v93 = *(double *)(v64 + 24);
    v92 = *(double *)(v64 + 32);
    v186 = v64;
    v187 = a2;
    v94 = *(double *)(a2 + 16);
    v96 = *(double *)(a2 + 24);
    v95 = *(double *)(a2 + 32);
    v97 = static Angle.== infix(_:_:)(v63, v90, *(double *)(a2 + 8));
    if ((v97 & 1) == 0)
      return 0;
    v98 = static Angle.== infix(_:_:)(v97, v91, v94);
    if ((v98 & 1) == 0)
      return 0;
    v99 = static Angle.== infix(_:_:)(v98, v93, v96);
    if ((v99 & 1) == 0)
      return 0;
    v100 = static Angle.== infix(_:_:)(v99, v92, v95);
    v64 = v186;
    a2 = v187;
    if ((v100 & 1) == 0)
      return 0;
  }
  v68 = *(unsigned __int8 *)(v64 + 41);
  v69 = *(unsigned __int8 *)(a2 + 41);
  if (v68 == 4)
  {
    if (v69 != 4)
      return 0;
  }
  else
  {
    if (v69 == 4)
      return 0;
    if (v68 == 3)
    {
      if (v69 != 3)
        return 0;
    }
    else
    {
      result = 0;
      if (v69 == 3 || v68 != v69)
        return result;
    }
  }
  v70 = *(_BYTE *)(a2 + 43);
  if ((*(_BYTE *)(v64 + 43) & 1) != 0)
    goto LABEL_6;
  if ((*(_BYTE *)(a2 + 43) & 1) != 0)
    return 0;
  v70 = *(_BYTE *)(a2 + 42);
  if ((*(_BYTE *)(v64 + 42) & 1) != 0)
  {
LABEL_6:
    if ((v70 & 1) == 0)
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 42) & 1) != 0)
  {
    return 0;
  }
  v187 = a2;
  v71 = v64;
  v72 = type metadata accessor for ConnectionAssistantState(0);
  v73 = *(int *)(v72 + 28);
  v186 = v71;
  v74 = v71 + v73;
  v75 = v72;
  sub_10000B234(v74, (uint64_t)v66, &qword_10031F880);
  v185 = (int *)v75;
  sub_10000B234(v187 + *(int *)(v75 + 28), (uint64_t)v61, &qword_10031F880);
  v76 = (uint64_t)&v52[*(int *)(v49 + 48)];
  sub_10000B234((uint64_t)v66, (uint64_t)v52, &qword_10031F880);
  sub_10000B234((uint64_t)v61, v76, &qword_10031F880);
  v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  if (v77((uint64_t)v52, 1, v44) == 1)
  {
    sub_100007FF0((uint64_t)v61, &qword_10031F880);
    sub_100007FF0((uint64_t)v66, &qword_10031F880);
    if (v77(v76, 1, v44) == 1)
    {
      sub_100007FF0((uint64_t)v52, &qword_10031F880);
      goto LABEL_10;
    }
LABEL_34:
    v102 = &qword_10031FA50;
    v103 = (uint64_t)v52;
    goto LABEL_52;
  }
  sub_10000B234((uint64_t)v52, (uint64_t)v57, &qword_10031F880);
  if (v77(v76, 1, v44) == 1)
  {
    sub_100007FF0((uint64_t)v61, &qword_10031F880);
    sub_100007FF0((uint64_t)v66, &qword_10031F880);
    sub_10000AFFC((uint64_t)v57, type metadata accessor for ServiceOutages);
    goto LABEL_34;
  }
  sub_1000E8D6C(v76, (uint64_t)v48, type metadata accessor for ServiceOutages);
  if ((static Date.== infix(_:_:)(v57, v48) & 1) == 0
    || (static Date.== infix(_:_:)(&v57[*(int *)(v44 + 20)], &v48[*(int *)(v44 + 20)]) & 1) == 0)
  {
    sub_10000AFFC((uint64_t)v48, type metadata accessor for ServiceOutages);
    sub_100007FF0((uint64_t)v61, &qword_10031F880);
    sub_100007FF0((uint64_t)v66, &qword_10031F880);
    sub_10000AFFC((uint64_t)v57, type metadata accessor for ServiceOutages);
    v103 = (uint64_t)v52;
    v102 = &qword_10031F880;
    goto LABEL_52;
  }
  v104 = sub_1001DCD78(*(_QWORD *)&v57[*(int *)(v44 + 24)], *(_QWORD *)&v48[*(int *)(v44 + 24)]);
  sub_10000AFFC((uint64_t)v48, type metadata accessor for ServiceOutages);
  sub_100007FF0((uint64_t)v61, &qword_10031F880);
  sub_100007FF0((uint64_t)v66, &qword_10031F880);
  sub_10000AFFC((uint64_t)v57, type metadata accessor for ServiceOutages);
  sub_100007FF0((uint64_t)v52, &qword_10031F880);
  if ((v104 & 1) == 0)
    return 0;
LABEL_10:
  v78 = v185;
  v79 = v211;
  sub_10000B234(v186 + v185[8], v211, &qword_10031F888);
  v80 = v210;
  sub_10000B234(v187 + v78[8], v210, &qword_10031F888);
  v81 = v208;
  v82 = v208 + *(int *)(v206 + 48);
  sub_10000B234(v79, v208, &qword_10031F888);
  sub_10000B234(v80, v82, &qword_10031F888);
  v83 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v207 + 48);
  v84 = v209;
  if (v83(v81, 1, v209) == 1)
  {
    sub_100007FF0(v80, &qword_10031F888);
    sub_100007FF0(v79, &qword_10031F888);
    v85 = v83(v82, 1, v84);
    v87 = v204;
    v86 = (uint64_t)v205;
    v89 = (uint64_t)v202;
    v88 = (uint64_t)v203;
    if (v85 == 1)
    {
      sub_100007FF0(v81, &qword_10031F888);
      goto LABEL_45;
    }
LABEL_42:
    v102 = &qword_10031FA48;
    v103 = v81;
    goto LABEL_52;
  }
  v105 = v201;
  sub_10000B234(v81, v201, &qword_10031F888);
  v106 = v83(v82, 1, v84);
  v87 = v204;
  v86 = (uint64_t)v205;
  v89 = (uint64_t)v202;
  v88 = (uint64_t)v203;
  if (v106 == 1)
  {
    sub_100007FF0(v210, &qword_10031F888);
    sub_100007FF0(v211, &qword_10031F888);
    sub_10000AFFC(v105, type metadata accessor for SilencePeriod);
    goto LABEL_42;
  }
  v107 = v197;
  sub_1000E8D6C(v82, v197, type metadata accessor for SilencePeriod);
  if ((static Date.== infix(_:_:)(v105, v107) & 1) == 0)
  {
    sub_10000AFFC(v107, type metadata accessor for SilencePeriod);
    sub_100007FF0(v210, &qword_10031F888);
    sub_100007FF0(v211, &qword_10031F888);
    sub_10000AFFC(v105, type metadata accessor for SilencePeriod);
    v103 = v81;
    v102 = &qword_10031F888;
    goto LABEL_52;
  }
  v108 = static Date.== infix(_:_:)(v105 + *(int *)(v209 + 20), v107 + *(int *)(v209 + 20));
  sub_10000AFFC(v107, type metadata accessor for SilencePeriod);
  sub_100007FF0(v210, &qword_10031F888);
  sub_100007FF0(v211, &qword_10031F888);
  sub_10000AFFC(v105, type metadata accessor for SilencePeriod);
  sub_100007FF0(v81, &qword_10031F888);
  if ((v108 & 1) == 0)
    return 0;
LABEL_45:
  sub_10000B234(v186 + v78[9], v88, (uint64_t *)&unk_10031B230);
  sub_10000B234(v187 + v78[9], v89, (uint64_t *)&unk_10031B230);
  v109 = v86 + *(int *)(v198 + 48);
  sub_10000B234(v88, v86, (uint64_t *)&unk_10031B230);
  sub_10000B234(v89, v109, (uint64_t *)&unk_10031B230);
  v110 = v200;
  v111 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v199 + 48);
  if (v111(v86, 1, v200) == 1)
  {
    sub_100007FF0(v89, (uint64_t *)&unk_10031B230);
    sub_100007FF0(v88, (uint64_t *)&unk_10031B230);
    if (v111(v109, 1, v110) == 1)
    {
      sub_100007FF0(v86, (uint64_t *)&unk_10031B230);
      goto LABEL_56;
    }
LABEL_50:
    v102 = &qword_10031FA40;
    v103 = v86;
    goto LABEL_52;
  }
  sub_10000B234(v86, (uint64_t)v87, (uint64_t *)&unk_10031B230);
  if (v111(v109, 1, v110) == 1)
  {
    sub_100007FF0(v89, (uint64_t *)&unk_10031B230);
    sub_100007FF0(v88, (uint64_t *)&unk_10031B230);
    sub_10000AFFC((uint64_t)v87, type metadata accessor for LinkState);
    goto LABEL_50;
  }
  v112 = v196;
  sub_1000E8D6C(v109, (uint64_t)v196, type metadata accessor for LinkState);
  v113 = sub_1000FBC9C(v87, v112);
  sub_10000AFFC((uint64_t)v112, type metadata accessor for LinkState);
  sub_100007FF0(v89, (uint64_t *)&unk_10031B230);
  sub_100007FF0(v88, (uint64_t *)&unk_10031B230);
  sub_10000AFFC((uint64_t)v87, type metadata accessor for LinkState);
  sub_100007FF0(v86, (uint64_t *)&unk_10031B230);
  if (!v113)
    return 0;
LABEL_56:
  v114 = v78[10];
  v116 = v186;
  v115 = v187;
  v117 = v186 + v114;
  v118 = *(unsigned __int8 *)(v186 + v114 + 16);
  v119 = v187 + v114;
  v120 = *(unsigned __int8 *)(v119 + 16);
  if (v118 == 2)
  {
    if (v120 != 2)
      return 0;
  }
  else
  {
    if (v120 == 2)
      return 0;
    v126 = *(_QWORD *)(v117 + 8);
    v127 = *(_QWORD *)(v117 + 24);
    v128 = *(_BYTE *)(v117 + 32);
    v129 = *(_QWORD *)(v119 + 8);
    v130 = *(_QWORD *)(v119 + 24);
    v131 = (v118 & 1) == 0;
    v132 = *(_BYTE *)(v119 + 32);
    sub_10022B3F4(*(_QWORD *)v117);
    v134 = v133;
    result = 0;
    if ((v134 & 1) == 0)
      return result;
    v116 = v186;
    v115 = v187;
    if (v126 != v129 || ((v131 ^ v120) & 1) == 0)
      return result;
    if ((v128 & 1) != 0)
    {
      if ((v132 & 1) == 0)
        return 0;
    }
    else
    {
      result = 0;
      if ((v132 & 1) != 0 || v127 != v130)
        return result;
    }
  }
  v121 = v78[11];
  v122 = (uint64_t *)(v116 + v121);
  v123 = *(unsigned __int8 *)(v116 + v121 + 8);
  v124 = (uint64_t *)(v115 + v121);
  v125 = *(unsigned __int8 *)(v115 + v121 + 8);
  if (v123 == 2)
  {
    if (v125 != 2)
      return 0;
  }
  else
  {
    if (v125 == 2)
      return 0;
    v135 = *v122;
    v136 = v122[2];
    v137 = v122[3];
    v138 = v122[4];
    v139 = *((_BYTE *)v122 + 40);
    v140 = *v124;
    v142 = v124[2];
    v141 = v124[3];
    v143 = v124[4];
    v144 = *((_BYTE *)v124 + 40);
    v239 = v135;
    v240 = v123 & 1;
    v241 = v136;
    v242 = v137 & 1;
    v243 = v138;
    v244 = v139 & 1;
    v245 = v140;
    v246 = v125 & 1;
    v247 = v142;
    v248 = v141 & 1;
    v249 = v143;
    v250 = v144 & 1;
    v145 = sub_10001B5B8((uint64_t)&v239, (uint64_t)&v245);
    v116 = v186;
    v115 = v187;
    if (!v145)
      return 0;
  }
  v146 = v78[12];
  v147 = (_QWORD *)(v116 + v146);
  v148 = *(_QWORD *)(v116 + v146 + 8);
  v149 = (_QWORD *)(v115 + v146);
  v150 = v149[1];
  if (!v148)
  {
    if (v150)
      return 0;
LABEL_80:
    v153 = v194;
    v154 = v115;
    sub_10000B234(v116 + v78[13], v194, &qword_1003180C0);
    v155 = v193;
    sub_10000B234(v154 + v78[13], v193, &qword_1003180C0);
    v156 = v195;
    v157 = v195 + *(int *)(v190 + 48);
    sub_10000B234(v153, v195, &qword_1003180C0);
    sub_10000B234(v155, v157, &qword_1003180C0);
    v158 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v191 + 48);
    v159 = v156;
    v160 = v192;
    if (v158(v159, 1, v192) == 1)
    {
      sub_100007FF0(v193, &qword_1003180C0);
      sub_100007FF0(v194, &qword_1003180C0);
      if (v158(v157, 1, v160) == 1)
      {
        sub_100007FF0(v195, &qword_1003180C0);
LABEL_87:
        v164 = v78[14];
        v166 = *(_QWORD *)(v186 + v164);
        v165 = *(_QWORD *)(v186 + v164 + 8);
        v168 = *(_QWORD *)(v186 + v164 + 16);
        v167 = *(_QWORD *)(v186 + v164 + 24);
        v170 = *(_QWORD *)(v186 + v164 + 32);
        v169 = *(_QWORD *)(v186 + v164 + 40);
        v171 = *(_QWORD *)(v186 + v164 + 48);
        v172 = *(_QWORD *)(v186 + v164 + 56);
        v173 = *(_WORD *)(v186 + v164 + 64);
        v174 = v187 + v164;
        v175 = *(_QWORD *)v174;
        v176 = *(_QWORD *)(v174 + 8);
        v177 = *(_QWORD *)(v174 + 16);
        v178 = *(_QWORD *)(v174 + 24);
        v179 = *(_QWORD *)(v174 + 32);
        v180 = *(_QWORD *)(v174 + 40);
        v181 = *(_QWORD *)(v174 + 48);
        v182 = *(_QWORD *)(v174 + 56);
        v183 = *(_WORD *)(v174 + 64);
        if (v165)
        {
          if (v176)
          {
            v230[0] = v166;
            v231 = v165;
            v232 = v168 & 0xFF01;
            v233 = v167;
            v234 = v170;
            v235 = v169;
            v236 = v171;
            v237 = v172;
            v238 = v173;
            LOBYTE(v212) = v175;
            v213 = v176;
            LOWORD(v214) = v177 & 0xFF01;
            v215 = v178;
            v216 = v179;
            v217 = v180;
            v218 = v181;
            v219 = v182;
            v220 = v183;
            return (sub_10001AC88((uint64_t)v230, (uint64_t)&v212) & 1) != 0;
          }
        }
        else if (!v176)
        {
          return 1;
        }
        v212 = v166;
        v213 = v165;
        v214 = v168;
        v215 = v167;
        v216 = v170;
        v217 = v169;
        v218 = v171;
        v219 = v172;
        v220 = v173;
        v221 = v175;
        v222 = v176;
        v223 = v177;
        v224 = v178;
        v225 = v179;
        v226 = v180;
        v227 = v181;
        v228 = v182;
        v229 = v183;
        sub_10007F464(v175, v176, v177, v178, v179, v180, v181, v182);
        sub_10007F464(v166, v165, v168, v167, v170, v169, v171, v172);
        sub_10007F3C0(&v212);
        return 0;
      }
    }
    else
    {
      sub_10000B234(v195, (uint64_t)v189, &qword_1003180C0);
      if (v158(v157, 1, v160) != 1)
      {
        v161 = v188;
        sub_1000E8D6C(v157, (uint64_t)v188, type metadata accessor for ConnectionClosed);
        v162 = v189;
        v163 = sub_1000FD004(v189, v161);
        sub_10000AFFC((uint64_t)v161, type metadata accessor for ConnectionClosed);
        sub_100007FF0(v193, &qword_1003180C0);
        sub_100007FF0(v194, &qword_1003180C0);
        sub_10000AFFC((uint64_t)v162, type metadata accessor for ConnectionClosed);
        sub_100007FF0(v195, &qword_1003180C0);
        if ((v163 & 1) == 0)
          return 0;
        goto LABEL_87;
      }
      sub_100007FF0(v193, &qword_1003180C0);
      sub_100007FF0(v194, &qword_1003180C0);
      sub_10000AFFC((uint64_t)v189, type metadata accessor for ConnectionClosed);
    }
    v102 = &qword_10031FA38;
    v103 = v195;
LABEL_52:
    sub_100007FF0(v103, v102);
    return 0;
  }
  if (!v150)
    return 0;
  if (*v147 == *v149 && v148 == v150)
    goto LABEL_80;
  v151 = _stringCompareWithSmolCheck(_:_:expecting:)(*v147, v148, *v149, v150, 0);
  v116 = v186;
  v115 = v187;
  v152 = v151;
  result = 0;
  if ((v152 & 1) != 0)
    goto LABEL_80;
  return result;
}

uint64_t sub_1000FD004(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  char v35;
  void (*v36)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_10031FA20);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003DB8(&qword_100317D58);
  v15 = __chkstk_darwin(v13, v14);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v15, v18);
  v21 = (char *)&v38 - v20;
  __chkstk_darwin(v19, v22);
  v24 = (char *)&v38 - v23;
  v25 = *a1;
  v26 = *a2;
  if (v25 == 12)
  {
    if (v26 != 12)
      goto LABEL_14;
LABEL_6:
    v38 = v8;
    v28 = type metadata accessor for ConnectionClosed(0);
    v29 = *(int *)(v28 + 20);
    v40 = a1;
    sub_10000B234((uint64_t)&a1[v29], (uint64_t)v24, &qword_100317D58);
    v39 = v28;
    v30 = *(int *)(v28 + 20);
    v41 = a2;
    sub_10000B234((uint64_t)&a2[v30], (uint64_t)v21, &qword_100317D58);
    v31 = (uint64_t)&v12[*(int *)(v9 + 48)];
    sub_10000B234((uint64_t)v24, (uint64_t)v12, &qword_100317D58);
    sub_10000B234((uint64_t)v21, v31, &qword_100317D58);
    v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v32((uint64_t)v12, 1, v4) == 1)
    {
      sub_100007FF0((uint64_t)v21, &qword_100317D58);
      sub_100007FF0((uint64_t)v24, &qword_100317D58);
      if (v32(v31, 1, v4) == 1)
      {
        sub_100007FF0((uint64_t)v12, &qword_100317D58);
LABEL_13:
        v27 = sub_1001BF5E8(*(_QWORD *)&v40[*(int *)(v39 + 24)], *(_QWORD *)&v41[*(int *)(v39 + 24)]);
        return v27 & 1;
      }
    }
    else
    {
      sub_10000B234((uint64_t)v12, (uint64_t)v17, &qword_100317D58);
      if (v32(v31, 1, v4) != 1)
      {
        v33 = v38;
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v38, v31, v4);
        v34 = sub_1000052EC(&qword_10031E4D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v35 = dispatch thunk of static Equatable.== infix(_:_:)(v17, v33, v4, v34);
        v36 = *(void (**)(char *, uint64_t))(v5 + 8);
        v36(v33, v4);
        sub_100007FF0((uint64_t)v21, &qword_100317D58);
        sub_100007FF0((uint64_t)v24, &qword_100317D58);
        v36(v17, v4);
        sub_100007FF0((uint64_t)v12, &qword_100317D58);
        if ((v35 & 1) != 0)
          goto LABEL_13;
LABEL_14:
        v27 = 0;
        return v27 & 1;
      }
      sub_100007FF0((uint64_t)v21, &qword_100317D58);
      sub_100007FF0((uint64_t)v24, &qword_100317D58);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v17, v4);
    }
    sub_100007FF0((uint64_t)v12, &qword_10031FA20);
    goto LABEL_14;
  }
  v27 = 0;
  if (v26 != 12 && v25 == v26)
    goto LABEL_6;
  return v27 & 1;
}

uint64_t sub_1000FD360(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  _QWORD *v39;
  char v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  char *v46;
  int *v47;
  _QWORD *v48;
  _QWORD *v49;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_10031FA20);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003DB8(&qword_100317D58);
  v15 = __chkstk_darwin(v13, v14);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v15, v18);
  v21 = (char *)&v46 - v20;
  __chkstk_darwin(v19, v22);
  v24 = (char *)&v46 - v23;
  v25 = a1[1];
  v26 = a2[1];
  if (!v25)
  {
    if (v26)
      return 0;
    goto LABEL_8;
  }
  if (!v26)
    return 0;
  if (*a1 == *a2 && v25 == v26
    || (v27 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v25, *a2, v26, 0), result = 0, (v27 & 1) != 0))
  {
LABEL_8:
    v46 = v8;
    v29 = type metadata accessor for TransmissionProgress(0);
    v30 = *(int *)(v29 + 20);
    v48 = a1;
    sub_10000B234((uint64_t)a1 + v30, (uint64_t)v24, &qword_100317D58);
    v47 = (int *)v29;
    v31 = *(int *)(v29 + 20);
    v49 = a2;
    sub_10000B234((uint64_t)a2 + v31, (uint64_t)v21, &qword_100317D58);
    v32 = (uint64_t)&v12[*(int *)(v9 + 48)];
    sub_10000B234((uint64_t)v24, (uint64_t)v12, &qword_100317D58);
    sub_10000B234((uint64_t)v21, v32, &qword_100317D58);
    v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v33((uint64_t)v12, 1, v4) == 1)
    {
      sub_100007FF0((uint64_t)v21, &qword_100317D58);
      sub_100007FF0((uint64_t)v24, &qword_100317D58);
      if (v33(v32, 1, v4) == 1)
      {
        sub_100007FF0((uint64_t)v12, &qword_100317D58);
LABEL_15:
        v38 = v47[6];
        v39 = (_QWORD *)((char *)v48 + v38);
        v40 = *((_BYTE *)v48 + v38 + 8);
        v41 = (_QWORD *)((char *)v49 + v38);
        v42 = *((unsigned __int8 *)v49 + v38 + 8);
        if ((v40 & 1) != 0)
        {
          if (!v42)
            return 0;
        }
        else
        {
          if (*v39 != *v41)
            LOBYTE(v42) = 1;
          if ((v42 & 1) != 0)
            return 0;
        }
        if (*(_QWORD *)((char *)v48 + v47[7]) == *(_QWORD *)((char *)v49 + v47[7]))
        {
          v43 = v47[8];
          v44 = *((unsigned __int8 *)v48 + v43);
          v45 = *((unsigned __int8 *)v49 + v43);
          if (v44 == 7)
          {
            if (v45 != 7)
              return 0;
          }
          else if (v45 == 7 || v44 != v45)
          {
            return 0;
          }
          return 1;
        }
        return 0;
      }
    }
    else
    {
      sub_10000B234((uint64_t)v12, (uint64_t)v17, &qword_100317D58);
      if (v33(v32, 1, v4) != 1)
      {
        v34 = v46;
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v46, v32, v4);
        v35 = sub_1000052EC(&qword_10031E4D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v36 = dispatch thunk of static Equatable.== infix(_:_:)(v17, v34, v4, v35);
        v37 = *(void (**)(char *, uint64_t))(v5 + 8);
        v37(v34, v4);
        sub_100007FF0((uint64_t)v21, &qword_100317D58);
        sub_100007FF0((uint64_t)v24, &qword_100317D58);
        v37(v17, v4);
        sub_100007FF0((uint64_t)v12, &qword_100317D58);
        if ((v36 & 1) == 0)
          return 0;
        goto LABEL_15;
      }
      sub_100007FF0((uint64_t)v21, &qword_100317D58);
      sub_100007FF0((uint64_t)v24, &qword_100317D58);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v17, v4);
    }
    sub_100007FF0((uint64_t)v12, &qword_10031FA20);
    return 0;
  }
  return result;
}

BOOL sub_1000FD738(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  void (*v41)(_BYTE *, uint64_t);
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  void (*v53)(_BYTE *, uint64_t);
  _BYTE v54[4];
  int v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v57 = &v54[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100003DB8(&qword_10031FA20);
  v10 = __chkstk_darwin(v8, v9);
  v62 = &v54[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10, v12);
  v14 = &v54[-v13];
  v15 = sub_100003DB8(&qword_100317D58);
  v17 = __chkstk_darwin(v15, v16);
  v56 = &v54[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = __chkstk_darwin(v17, v19);
  v60 = &v54[-v21];
  v23 = __chkstk_darwin(v20, v22);
  v61 = &v54[-v24];
  v26 = __chkstk_darwin(v23, v25);
  v28 = &v54[-v27];
  v30 = __chkstk_darwin(v26, v29);
  v32 = &v54[-v31];
  __chkstk_darwin(v30, v33);
  v35 = &v54[-v34];
  v58 = a1;
  sub_10000B234(a1, (uint64_t)&v54[-v34], &qword_100317D58);
  v59 = a2;
  sub_10000B234(a2, (uint64_t)v32, &qword_100317D58);
  v36 = (uint64_t)&v14[*(int *)(v8 + 48)];
  sub_10000B234((uint64_t)v35, (uint64_t)v14, &qword_100317D58);
  sub_10000B234((uint64_t)v32, v36, &qword_100317D58);
  v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v37((uint64_t)v14, 1, v4) != 1)
  {
    sub_10000B234((uint64_t)v14, (uint64_t)v28, &qword_100317D58);
    if (v37(v36, 1, v4) != 1)
    {
      v39 = v57;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 32))(v57, v36, v4);
      v40 = sub_1000052EC(&qword_10031E4D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v55 = dispatch thunk of static Equatable.== infix(_:_:)(v28, v39, v4, v40);
      v41 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
      v41(v39, v4);
      sub_100007FF0((uint64_t)v32, &qword_100317D58);
      sub_100007FF0((uint64_t)v35, &qword_100317D58);
      v41(v28, v4);
      sub_100007FF0((uint64_t)v14, &qword_100317D58);
      if ((v55 & 1) == 0)
        return 0;
      goto LABEL_8;
    }
    sub_100007FF0((uint64_t)v32, &qword_100317D58);
    sub_100007FF0((uint64_t)v35, &qword_100317D58);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v28, v4);
LABEL_6:
    v38 = (uint64_t)v14;
LABEL_14:
    sub_100007FF0(v38, &qword_10031FA20);
    return 0;
  }
  sub_100007FF0((uint64_t)v32, &qword_100317D58);
  sub_100007FF0((uint64_t)v35, &qword_100317D58);
  if (v37(v36, 1, v4) != 1)
    goto LABEL_6;
  sub_100007FF0((uint64_t)v14, &qword_100317D58);
LABEL_8:
  v42 = type metadata accessor for ServiceOutages.Outage(0);
  v43 = v61;
  sub_10000B234(v58 + *(int *)(v42 + 20), (uint64_t)v61, &qword_100317D58);
  v44 = v60;
  sub_10000B234(v59 + *(int *)(v42 + 20), (uint64_t)v60, &qword_100317D58);
  v45 = v62;
  v46 = (uint64_t)&v62[*(int *)(v8 + 48)];
  sub_10000B234((uint64_t)v43, (uint64_t)v62, &qword_100317D58);
  sub_10000B234((uint64_t)v44, v46, &qword_100317D58);
  if (v37((uint64_t)v45, 1, v4) == 1)
  {
    sub_100007FF0((uint64_t)v44, &qword_100317D58);
    sub_100007FF0((uint64_t)v43, &qword_100317D58);
    if (v37(v46, 1, v4) == 1)
    {
      sub_100007FF0((uint64_t)v45, &qword_100317D58);
      return 1;
    }
    goto LABEL_13;
  }
  v47 = v56;
  sub_10000B234((uint64_t)v45, (uint64_t)v56, &qword_100317D58);
  if (v37(v46, 1, v4) == 1)
  {
    sub_100007FF0((uint64_t)v44, &qword_100317D58);
    sub_100007FF0((uint64_t)v43, &qword_100317D58);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v47, v4);
LABEL_13:
    v38 = (uint64_t)v45;
    goto LABEL_14;
  }
  v49 = v57;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 32))(v57, v46, v4);
  v50 = sub_1000052EC(&qword_10031E4D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v51 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v49, v4, v50);
  v52 = (uint64_t)v44;
  v53 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v53(v49, v4);
  sub_100007FF0(v52, &qword_100317D58);
  sub_100007FF0((uint64_t)v43, &qword_100317D58);
  v53(v47, v4);
  sub_100007FF0((uint64_t)v45, &qword_100317D58);
  return (v51 & 1) != 0;
}

uint64_t type metadata accessor for ServiceOutages.Outage(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_10031FB90, (uint64_t)&nominal type descriptor for ServiceOutages.Outage);
}

uint64_t type metadata accessor for TargetTracks.TimePoint(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_10031FB00, (uint64_t)&nominal type descriptor for TargetTracks.TimePoint);
}

uint64_t sub_1000FDCAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031FA70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FDCF4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000FDD18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  _BYTE *v6;

  sub_1000EE400(a1, a2, a3, a4, v6, a5, a6);
}

uint64_t sub_1000FDD20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000EF734(a1, a2, v2);
}

uint64_t sub_1000FDD28()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000FDD4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031FAA0;
  if (!qword_10031FAA0)
  {
    v1 = sub_100007FAC(&qword_10031FA98);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10031FAA0);
  }
  return result;
}

ValueMetadata *type metadata accessor for TargetTracks.Target()
{
  return &type metadata for TargetTracks.Target;
}

uint64_t *sub_1000FDDA8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
    swift_bridgeObjectRetain(v9);
  }
  return a1;
}

uint64_t sub_1000FDE34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_1000FDE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t sub_1000FDED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_1000FDF44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000FDFA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_1000FE004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000FE010);
}

uint64_t sub_1000FE010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000FE08C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FE098);
}

uint64_t sub_1000FE098(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1000FE110(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionClosed.ExitReason(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionClosed.ExitReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1000FE260 + 4 * byte_1002555C5[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1000FE294 + 4 * byte_1002555C0[v4]))();
}

uint64_t sub_1000FE294(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FE29C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000FE2A4);
  return result;
}

uint64_t sub_1000FE2B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000FE2B8);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1000FE2BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FE2C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionClosed.ExitReason()
{
  return &type metadata for ConnectionClosed.ExitReason;
}

uint64_t *sub_1000FE2E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      v10 = sub_100003DB8(&qword_100317D58);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v12 = *(int *)(a3 + 20);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    if (v9((uint64_t *)v14, 1, v7))
    {
      v15 = sub_100003DB8(&qword_100317D58);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_1000FE42C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t result;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v7 = a1 + *(int *)(a2 + 20);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v7, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  return result;
}

char *sub_1000FE4D0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = sub_100003DB8(&qword_100317D58);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(v12, 1, v6))
  {
    v13 = sub_100003DB8(&qword_100317D58);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *sub_1000FE5F0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_100003DB8(&qword_100317D58);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    v17 = sub_100003DB8(&qword_100317D58);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  return a1;
}

char *sub_1000FE7A0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = sub_100003DB8(&qword_100317D58);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(v12, 1, v6))
  {
    v13 = sub_100003DB8(&qword_100317D58);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *sub_1000FE8C0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_100003DB8(&qword_100317D58);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    v17 = sub_100003DB8(&qword_100317D58);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  return a1;
}

uint64_t sub_1000FEA70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000FEA7C);
}

uint64_t sub_1000FEA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100317D58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000FEABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FEAC8);
}

uint64_t sub_1000FEAC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100317D58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_1000FEB0C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_1000F03D4(319, (unint64_t *)&unk_10031F5D8, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = v4[0];
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t storeEnumTagSinglePayload for LocationState.LocationAcquisitionStatus(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000FEBC4 + 4 * byte_1002555CA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000FEBE4 + 4 * byte_1002555CF[v4]))();
}

_BYTE *sub_1000FEBC4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000FEBE4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000FEBEC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000FEBF4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000FEBFC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000FEC04(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LocationState.LocationAcquisitionStatus()
{
  return &type metadata for LocationState.LocationAcquisitionStatus;
}

uint64_t storeEnumTagSinglePayload for TransmissionProgress.PayloadType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1000FEC6C + 4 * byte_1002555D9[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000FECA0 + 4 * byte_1002555D4[v4]))();
}

uint64_t sub_1000FECA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FECA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000FECB0);
  return result;
}

uint64_t sub_1000FECBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000FECC4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1000FECC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FECD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TransmissionProgress.PayloadType()
{
  return &type metadata for TransmissionProgress.PayloadType;
}

uint64_t _s8SOSBuddy16TargetVisibilityVwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000FED38 + 4 * byte_1002555E3[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000FED6C + 4 * byte_1002555DE[v4]))();
}

uint64_t sub_1000FED6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FED74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000FED7CLL);
  return result;
}

uint64_t sub_1000FED88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000FED90);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000FED94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FED9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LinkState.Congestion()
{
  return &type metadata for LinkState.Congestion;
}

ValueMetadata *type metadata accessor for TargetPosition()
{
  return &type metadata for TargetPosition;
}

unint64_t sub_1000FEDCC()
{
  unint64_t result;

  result = qword_10031FBC8;
  if (!qword_10031FBC8)
  {
    result = swift_getWitnessTable(&unk_100255C18, &type metadata for LinkState.Congestion);
    atomic_store(result, (unint64_t *)&qword_10031FBC8);
  }
  return result;
}

unint64_t sub_1000FEE14()
{
  unint64_t result;

  result = qword_10031FBD0;
  if (!qword_10031FBD0)
  {
    result = swift_getWitnessTable(&unk_100255C80, &type metadata for TransmissionProgress.PayloadType);
    atomic_store(result, (unint64_t *)&qword_10031FBD0);
  }
  return result;
}

unint64_t sub_1000FEE5C()
{
  unint64_t result;

  result = qword_10031FBD8;
  if (!qword_10031FBD8)
  {
    result = swift_getWitnessTable(&unk_100255CE8, &type metadata for LocationState.LocationAcquisitionStatus);
    atomic_store(result, (unint64_t *)&qword_10031FBD8);
  }
  return result;
}

uint64_t sub_1000FEEA0()
{
  return sub_1000052EC(&qword_10031FBE0, type metadata accessor for ServiceOutages.Outage, (uint64_t)&unk_100255D10);
}

unint64_t sub_1000FEED0()
{
  unint64_t result;

  result = qword_10031FBE8;
  if (!qword_10031FBE8)
  {
    result = swift_getWitnessTable(&unk_100255DB8, &type metadata for ConnectionClosed.ExitReason);
    atomic_store(result, (unint64_t *)&qword_10031FBE8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ExplorerTryOutView()
{
  return &type metadata for ExplorerTryOutView;
}

uint64_t sub_1000FEF24(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029A5D0, 1);
}

uint64_t sub_1000FEF34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  char v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int16 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  char v21;

  if (a1)
  {
    v4 = *(unsigned __int16 *)(a1 + 56);
    if (v4 >= 0x4000)
    {
      v15 = 0u;
      v16 = 0u;
      v5 = 256;
    }
    else
    {
      *(_QWORD *)&v15 = *(_WORD *)(a1 + 56);
      *((_QWORD *)&v15 + 1) = swift_getKeyPath(&unk_100255EB8);
      *(_QWORD *)&v16 = (v4 >> 8) & 1;
      *((_QWORD *)&v16 + 1) = swift_getKeyPath(&unk_100255EE0);
      v5 = 1;
    }
    v17 = v5;
    v6 = sub_100003DB8(&qword_10031FBF8);
    v7 = sub_1000FF078(&qword_10031FC00, &qword_10031FBF8, (void (*)(void))sub_1000FF05C);
    result = _ConditionalContent<>.init(storage:)(&v15, v6, &type metadata for EmptyView, v7, &protocol witness table for EmptyView);
    v9 = v19;
    v10 = v20;
    v11 = v21;
    *(_OWORD *)a3 = v18;
    *(_OWORD *)(a3 + 16) = v9;
    *(_BYTE *)(a3 + 32) = v10;
    *(_BYTE *)(a3 + 33) = v11;
  }
  else
  {
    v13 = type metadata accessor for TryOutModel(0);
    v14 = sub_100056D60(&qword_10031A0C8, type metadata accessor for TryOutModel);
    result = EnvironmentObject.error()(0, a2, v13, v14);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FF054@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000FEF34(*v1, v1[1], a1);
}

uint64_t sub_1000FF05C()
{
  return sub_1000FF078(&qword_10031FC08, &qword_10031FC10, (void (*)(void))sub_1000FF0FC);
}

uint64_t sub_1000FF078(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007FAC(a2);
    a3();
    sub_1000084FC(&qword_10031CA78, &qword_10031CA70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000FF0FC()
{
  unint64_t result;

  result = qword_10031FC18;
  if (!qword_10031FC18)
  {
    result = swift_getWitnessTable(&unk_100255F28, &type metadata for _ExplorerTryOutAppView);
    atomic_store(result, (unint64_t *)&qword_10031FC18);
  }
  return result;
}

double sub_1000FF140@<D0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  double result;
  __int128 v9;
  uint64_t v10;
  char v11;
  _OWORD v12[3];
  _OWORD v13[2];
  uint64_t v14;
  char v15;

  if (a1)
  {
    KeyPath = swift_getKeyPath(&unk_100255EB8);
    *(_QWORD *)&v12[0] = _swiftEmptyArrayStorage;
    v5 = sub_100003DB8(&qword_100317980);
    State.init(wrappedValue:)(v13, v12, v5);
    *(_QWORD *)&v12[0] = a1;
    *((_QWORD *)&v12[0] + 1) = KeyPath;
    *(_QWORD *)&v12[1] = 0;
    *(_OWORD *)((char *)&v12[1] + 8) = v13[0];
    BYTE8(v12[2]) = 1;
    v6 = sub_1000FF798();
    v7 = sub_1000FF7DC();
  }
  else
  {
    v6 = sub_1000FF798();
    v7 = sub_1000FF7DC();
    memset(v12, 0, 41);
  }
  _ConditionalContent<>.init(storage:)(v12, &type metadata for _ExplorerTryOutLegacyAppView, &type metadata for _ExplorerTryOutModernAppView, v6, v7);
  result = *(double *)v13;
  v9 = v13[1];
  v10 = v14;
  v11 = v15;
  *(_OWORD *)a2 = v13[0];
  *(_OWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 32) = v10;
  *(_BYTE *)(a2 + 40) = v11;
  return result;
}

double sub_1000FF234@<D0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;

  return sub_1000FF140(*v1, a1);
}

_QWORD *sub_1000FF23C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v5 = _swiftEmptyArrayStorage;
  v2 = sub_100003DB8(&qword_100317980);
  result = State.init(wrappedValue:)(v6, &v5, v2);
  v4 = v6[1];
  *a1 = v6[0];
  a1[1] = v4;
  return result;
}

__n128 sub_1000FF290@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  __n128 result;
  __n128 v18;
  unint64_t v19;
  __n128 v20;

  v4 = sub_100003DB8(&qword_10031F198);
  State.projectedValue.getter(&v19, v4);
  v5 = v19;
  v18 = v20;
  v6 = type metadata accessor for UIMetrics();
  v7 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
  v8 = EnvironmentObject.init()(v6, v7);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_BYTE *)(a1 + 16);
  sub_100040244(v11, v12);
  v13 = sub_100042548(v11, v12);
  v14 = sub_100040294(v11, v12);
  if ((v13 & 1) != 0)
    v15 = static Edge.Set.top.getter(v14);
  else
    v15 = Edge.Set.init(rawValue:)(0);
  v16 = *(_BYTE *)a1;
  a2->n128_u64[0] = v8;
  a2->n128_u64[1] = v10;
  a2[1].n128_u8[0] = v16;
  a2[1].n128_u64[1] = v5;
  result = v18;
  a2[2] = v18;
  a2[3].n128_u8[0] = v15;
  return result;
}

uint64_t sub_1000FF390()
{
  __int128 *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE v10[16];
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[24];

  *(_QWORD *)&v15[16] = *((_QWORD *)v0 + 4);
  v1 = v0[1];
  v14 = *v0;
  *(_OWORD *)v15 = v1;
  v12 = *(_OWORD *)&v15[8];
  v2 = sub_100003DB8(&qword_10031F198);
  State.projectedValue.getter(&v13, v2);
  v11 = &v14;
  v3 = sub_100003DB8(&qword_100317980);
  v4 = sub_100003DB8(&qword_10031FC58);
  v5 = sub_1000084FC(&qword_10031F1A8, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
  v6 = sub_1000084FC(&qword_100319618, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
  v7 = sub_1000084FC(&qword_10031F1B0, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
  v8 = sub_1000FFAEC();
  return NavigationStack.init<>(path:root:)(&v13, sub_1000FFAE4, v10, v3, v4, v5, v6, v7, v8, &protocol witness table for String);
}

_QWORD *sub_1000FF4C8@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_1000FF5F0();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for _TryOutViewExplorerPresentationEnvironmentKey, &type metadata for _TryOutViewExplorerPresentationEnvironmentKey, v2);
  *a1 = v4;
  return result;
}

_QWORD *sub_1000FF514@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_1000FF5F0();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for _TryOutViewExplorerPresentationEnvironmentKey, &type metadata for _TryOutViewExplorerPresentationEnvironmentKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_1000FF560(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_1000FF5F0();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for _TryOutViewExplorerPresentationEnvironmentKey, &type metadata for _TryOutViewExplorerPresentationEnvironmentKey, v1);
}

uint64_t sub_1000FF5A8(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_1000FF5F0();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for _TryOutViewExplorerPresentationEnvironmentKey, &type metadata for _TryOutViewExplorerPresentationEnvironmentKey, v1);
}

unint64_t sub_1000FF5F0()
{
  unint64_t result;

  result = qword_10031FC20;
  if (!qword_10031FC20)
  {
    result = swift_getWitnessTable(&unk_10025A220, &type metadata for _TryOutViewExplorerPresentationEnvironmentKey);
    atomic_store(result, (unint64_t *)&qword_10031FC20);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for _ExplorerTryOutAppView(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000FF680 + 4 * byte_100255E45[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000FF6B4 + 4 * byte_100255E40[v4]))();
}

uint64_t sub_1000FF6B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FF6BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000FF6C4);
  return result;
}

uint64_t sub_1000FF6D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000FF6D8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000FF6DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FF6E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _ExplorerTryOutAppView()
{
  return &type metadata for _ExplorerTryOutAppView;
}

unint64_t sub_1000FF704()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031FC28;
  if (!qword_10031FC28)
  {
    v1 = sub_100007FAC(&qword_10031FC30);
    sub_1000FF078(&qword_10031FC00, &qword_10031FBF8, (void (*)(void))sub_1000FF05C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031FC28);
  }
  return result;
}

uint64_t sub_1000FF788(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029A640, 1);
}

unint64_t sub_1000FF798()
{
  unint64_t result;

  result = qword_10031FC38;
  if (!qword_10031FC38)
  {
    result = swift_getWitnessTable(&unk_100256010, &type metadata for _ExplorerTryOutLegacyAppView);
    atomic_store(result, (unint64_t *)&qword_10031FC38);
  }
  return result;
}

unint64_t sub_1000FF7DC()
{
  unint64_t result;

  result = qword_10031FC40;
  if (!qword_10031FC40)
  {
    result = swift_getWitnessTable(&unk_100255FC0, &type metadata for _ExplorerTryOutModernAppView);
    atomic_store(result, (unint64_t *)&qword_10031FC40);
  }
  return result;
}

uint64_t destroy for _ExplorerTryOutModernAppView(uint64_t a1)
{
  sub_100040294(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return swift_release(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for _ExplorerTryOutModernAppView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100040244(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRetain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t assignWithCopy for _ExplorerTryOutModernAppView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100040244(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_100040294(v6, v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  swift_retain(v11);
  swift_release(v10);
  return a1;
}

uint64_t assignWithTake for _ExplorerTryOutModernAppView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_100040294(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v8 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ExplorerTryOutModernAppView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ExplorerTryOutModernAppView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ExplorerTryOutModernAppView()
{
  return &type metadata for _ExplorerTryOutModernAppView;
}

ValueMetadata *type metadata accessor for _ExplorerTryOutLegacyAppView()
{
  return &type metadata for _ExplorerTryOutLegacyAppView;
}

unint64_t sub_1000FFA58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031FC48;
  if (!qword_10031FC48)
  {
    v1 = sub_100007FAC(&qword_10031FC50);
    sub_1000FF798();
    sub_1000FF7DC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031FC48);
  }
  return result;
}

uint64_t sub_1000FFAC4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029A690, 1);
}

uint64_t sub_1000FFAD4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029A668, 1);
}

double sub_1000FFAE4@<D0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_1000FF290(*(_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

unint64_t sub_1000FFAEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031FC60;
  if (!qword_10031FC60)
  {
    v1 = sub_100007FAC(&qword_10031FC58);
    sub_1000FFB58();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031FC60);
  }
  return result;
}

unint64_t sub_1000FFB58()
{
  unint64_t result;

  result = qword_10031FC68;
  if (!qword_10031FC68)
  {
    result = swift_getWitnessTable(&unk_10024FF80, &type metadata for ExplorerTryOutIntroductionView);
    atomic_store(result, (unint64_t *)&qword_10031FC68);
  }
  return result;
}

unint64_t sub_1000FFBA0()
{
  unint64_t result;

  result = qword_10031FC70;
  if (!qword_10031FC70)
  {
    result = swift_getWitnessTable(&unk_10025B4F4, &type metadata for TryOutIntroView);
    atomic_store(result, (unint64_t *)&qword_10031FC70);
  }
  return result;
}

uint64_t sub_1000FFBE4()
{
  return sub_1000084FC(&qword_10031FC78, &qword_10031FC80, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
}

uint64_t sub_1000FFC10()
{
  return sub_1000FFC1C("[%{public}s] init");
}

uint64_t sub_1000FFC1C(const char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v1;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FD18);
  v6 = swift_retain_n(v1, v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v17 = v3;
    v18 = v10;
    *(_DWORD *)v9 = 136446210;
    v11 = type metadata accessor for SettingsAgent();
    v12 = swift_retain(v3);
    v13 = String.init<A>(describing:)(&v17, v11, v12);
    v15 = v14;
    v17 = sub_100172BEC(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v9 + 4, v9 + 12);
    swift_release_n(v3);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, a1, v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_release_n(v3);
  }
  return v3;
}

uint64_t sub_1000FFDD8()
{
  uint64_t v0;

  sub_1000FFC1C("[%{public}s] deinit");
  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for SettingsAgent()
{
  return objc_opt_self(_TtC8SOSBuddy13SettingsAgent);
}

uint64_t storeEnumTagSinglePayload for SettingsAgent.SettingsDestination(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000FFE6C + 4 * byte_100256065[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000FFEA0 + 4 * byte_100256060[v4]))();
}

uint64_t sub_1000FFEA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FFEA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000FFEB0);
  return result;
}

uint64_t sub_1000FFEBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000FFEC4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000FFEC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FFED0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SettingsAgent.SettingsDestination()
{
  return &type metadata for SettingsAgent.SettingsDestination;
}

unint64_t sub_1000FFEF0()
{
  unint64_t result;

  result = qword_10031FD38;
  if (!qword_10031FD38)
  {
    result = swift_getWitnessTable(&unk_1002560E4, &type metadata for SettingsAgent.SettingsDestination);
    atomic_store(result, (unint64_t *)&qword_10031FD38);
  }
  return result;
}

void sub_1000FFF34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  NSObject *oslog;
  uint64_t v20;
  uint64_t v21;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FD18);
  swift_bridgeObjectRetain(a1);
  swift_errorRetain(a2);
  swift_bridgeObjectRetain(a1);
  v5 = swift_errorRetain(a2);
  oslog = Logger.logObject.getter(v5);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v20 = a1;
    v21 = v8;
    *(_DWORD *)v7 = 136446466;
    swift_bridgeObjectRetain(a1);
    v9 = sub_100003DB8(&qword_10031B3F8);
    v11 = String.init<A>(describing:)(&v20, v9, v10);
    v13 = v12;
    v20 = sub_100172BEC(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v7 + 12) = 2082;
    v20 = a2;
    swift_errorRetain(a2);
    v14 = sub_100003DB8(&qword_10031CF20);
    v16 = String.init<A>(describing:)(&v20, v14, v15);
    v18 = v17;
    v20 = sub_100172BEC(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Opening Settings result: %{public}s, %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(a1, 2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);

  }
}

void sub_100100194(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  id v31;
  id v32;
  NSURL *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t aBlock[6];

  v2 = sub_100003DB8(&qword_100317D60);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10000D744(v11, (uint64_t)qword_10033FD18);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(12, -1);
    v41 = v6;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc(32, -1);
    v40 = v7;
    v18 = v17;
    aBlock[0] = v17;
    v19.n128_u64[0] = 136315138;
    v39 = v10;
    *(_DWORD *)v16 = 136315138;
    LOBYTE(v42) = a1;
    v20 = String.init<A>(describing:)(&v42, &type metadata for SettingsAgent.SettingsDestination, v19);
    v22 = v21;
    v42 = sub_100172BEC(v20, v21, aBlock);
    v10 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, aBlock, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Opening Settings for %s", v16, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    v23 = v18;
    v7 = v40;
    swift_slowDealloc(v23, -1, -1);
    v24 = v16;
    v6 = v41;
    swift_slowDealloc(v24, -1, -1);
  }

  v25 = 0xD00000000000002FLL;
  if (a1)
  {
    if (a1 == 1)
      v25 = 0x6F723A7366657270;
    else
      v25 = 0xD000000000000030;
    if (a1 == 1)
      v26 = 0xEB000000003D746FLL;
    else
      v26 = 0x80000001002695C0;
  }
  else
  {
    v26 = 0x8000000100269600;
  }
  URL.init(string:)(v25, v26);
  swift_bridgeObjectRelease(v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    v27 = sub_1000400C0((uint64_t)v5);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to form Settings URL", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
    v31 = objc_msgSend(objc_allocWithZone((Class)_LSOpenConfiguration), "init");
    objc_msgSend(v31, "setSensitive:", 1);
    v32 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
    if (v32)
    {
      v34 = v32;
      URL._bridgeToObjectiveC()(v33);
      v36 = v35;
      aBlock[4] = (uint64_t)sub_1000FFF34;
      aBlock[5] = 0;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10013EF08;
      aBlock[3] = (uint64_t)&unk_1002F03D0;
      v37 = _Block_copy(aBlock);
      v38 = v31;
      objc_msgSend(v34, "openURL:configuration:completionHandler:", v36, v38, v37);
      _Block_release(v37);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
    else
    {
      __break(1u);
    }
  }
}

double sub_1001005AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1001005BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1001005C4()
{
  uint64_t v0;
  _BYTE v1[24];

  swift_beginAccess(v0 + 16, v1, 0, 0);
  __asm { BR              X12 }
}

uint64_t sub_1001006FC(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  if (a2)
  {
    if (((8 - a2) & 0xFFFFFF00) != 0)
    {
      __break(1u);
      JUMPOUT(0x1001008F8);
    }
    if ((*(unsigned __int8 *)(v2 + 32) | 8) != 8)
    {
      swift_beginAccess(v2 + 16, v4, 0, 0);
      __asm { BR              X11 }
    }
    *(_BYTE *)(v2 + 32) = a2;
    swift_beginAccess(v2 + 16, v4, 33, 0);
    sub_10010091C();
    return swift_endAccess(v4);
  }
  return result;
}

void sub_10010091C()
{
  __asm { BR              X12 }
}

uint64_t sub_100100968()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v4;
  _QWORD v5[3];
  uint64_t v6;
  unint64_t v7;

  v2 = BYTE6(v0);
  v6 = sub_100003DB8(&qword_10031FE60);
  v7 = sub_100100D28();
  LOBYTE(v5[0]) = v1;
  v4 = *(_BYTE *)sub_100007BBC(v5, v6);
  ((void (*)(uint64_t, uint64_t, char *, uint64_t))Data._Representation.replaceSubrange(_:with:count:))(v2, v2, &v4, 1);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v5);
}

uint64_t sub_1001009FC(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  __int16 v21;
  char v22;
  char v23;
  char v24;
  char v25;
  _BYTE v26[24];

  sub_1001005C4();
  v3 = v2;
  v4 = v2;
  do
  {
    sub_1001006FC(v4 & 0x7F | ((v4 > 0x7F) << 7), 8u);
    v5 = v4 > 0x7F;
    v4 >>= 7;
  }
  while (v5);
  result = swift_beginAccess(a1 + 16, v26, 0, 0);
  if (v3)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 24);
    if (v3 <= 8)
    {
LABEL_25:
      sub_10000CC50(v7, v8);
      v11 = 0;
LABEL_26:
      v19 = Data.subscript.getter(v11, v7, v8);
      sub_1001006FC(v19 >> (-(char)v3 & 7), v3);
      return sub_10000CCCC(v7, v8);
    }
    else
    {
      v9 = v8 >> 62;
      result = sub_10000CC50(v7, v8);
      if (v8 >> 62 != 3)
      {
        v10 = 0;
        v11 = ((v3 - 9) >> 3) + 1;
        while (1)
        {
          if ((_DWORD)v9)
          {
            if ((_DWORD)v9 == 1)
            {
              if (v10 < (int)v7 || v10 >= v7 >> 32)
              {
                __break(1u);
LABEL_29:
                __break(1u);
LABEL_30:
                __break(1u);
LABEL_31:
                __break(1u);
LABEL_32:
                __break(1u);
LABEL_33:
                __break(1u);
LABEL_34:
                __break(1u);
              }
              v13 = __DataStorage._bytes.getter(result);
              if (!v13)
                goto LABEL_33;
              v14 = v13;
              v15 = __DataStorage._offset.getter();
              v16 = v10 - v15;
              if (__OFSUB__(v10, v15))
                goto LABEL_31;
            }
            else
            {
              if (v10 < *(_QWORD *)(v7 + 16))
                goto LABEL_30;
              if (v10 >= *(_QWORD *)(v7 + 24))
                goto LABEL_32;
              v17 = __DataStorage._bytes.getter(result);
              if (!v17)
                goto LABEL_34;
              v14 = v17;
              v18 = __DataStorage._offset.getter();
              v16 = v10 - v18;
              if (__OFSUB__(v10, v18))
              {
                __break(1u);
                goto LABEL_25;
              }
            }
            v12 = *(unsigned __int8 *)(v14 + v16);
          }
          else
          {
            if (v10 >= (unint64_t)BYTE6(v8))
              goto LABEL_29;
            v20 = v7;
            v21 = v8;
            v22 = BYTE2(v8);
            v23 = BYTE3(v8);
            v24 = BYTE4(v8);
            v25 = BYTE5(v8);
            v12 = *((unsigned __int8 *)&v20 + v10);
          }
          result = sub_1001006FC(v12, 8u);
          ++v10;
          LOBYTE(v3) = v3 - 8;
          if (v11 == v10)
            goto LABEL_26;
        }
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100100CE4()
{
  uint64_t v0;

  sub_10000CCCC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 33, 7);
}

uint64_t type metadata accessor for BitCollector()
{
  return objc_opt_self(_TtC8SOSBuddy12BitCollector);
}

unint64_t sub_100100D28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031FE68;
  if (!qword_10031FE68)
  {
    v1 = sub_100007FAC(&qword_10031FE60);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> CollectionOfOne<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10031FE68);
  }
  return result;
}

uint64_t sub_100100D74(uint64_t a1)
{
  return sub_100100DDC(a1, (uint64_t (*)(void))sub_1001054D0, (uint64_t (*)(void))sub_1001058C8);
}

uint64_t sub_100100D88(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
    return String.subscript.getter(15, a1, a2);
  else
    return 0;
}

uint64_t sub_100100DC8(uint64_t a1)
{
  return sub_100100DDC(a1, (uint64_t (*)(void))sub_100105818, (uint64_t (*)(void))sub_100105920);
}

uint64_t sub_100100DDC(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t result;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  result = a2();
  if ((v7 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v6)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v8 = a3();
  swift_bridgeObjectRetain(v9);
  return v8;
}

uint64_t sub_100100E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  if (!((unint64_t)a2 >> 62))
  {
    v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (v4)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if (a2 < 0)
    v25 = a2;
  else
    v25 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v4 = _CocoaArrayWrapper.endIndex.getter(v25);
  if (!v4)
    goto LABEL_11;
LABEL_3:
  if ((a2 & 0xC000000000000001) != 0)
  {
    v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 32);
    swift_retain(v5);
  }
  v6 = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(v5 + 24);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  if (v6 == v8 && v7 == v9)
  {
    swift_bridgeObjectRelease(a2);
    swift_release(v5);
    return 1;
  }
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v8, v9, 0);
  result = swift_release(v5);
  if ((v11 & 1) != 0)
  {
LABEL_9:
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  if (v4 == 1)
    goto LABEL_11;
  if ((a2 & 0xC000000000000001) != 0)
  {
    v12 = 1;
    while (1)
    {
      result = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, a2);
      v13 = v12 + 1;
      if (__OFADD__(v12, 1))
        break;
      v14 = result;
      v15 = *(_QWORD *)(result + 16);
      v16 = *(_QWORD *)(v14 + 24);
      if (v15 == v8 && v16 == v9)
      {
        swift_bridgeObjectRelease(a2);
        swift_unknownObjectRelease(v14);
        return 1;
      }
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v8, v9, 0);
      swift_unknownObjectRelease(v14);
      if ((v18 & 1) != 0)
        goto LABEL_9;
      ++v12;
      if (v13 == v4)
        goto LABEL_11;
    }
    __break(1u);
  }
  else
  {
    v19 = 5;
    while (1)
    {
      v20 = v19 - 3;
      if (__OFADD__(v19 - 4, 1))
        break;
      v21 = *(_QWORD *)(a2 + 8 * v19);
      v22 = *(_QWORD *)(v21 + 16);
      v23 = *(_QWORD *)(v21 + 24);
      if (v22 == v8 && v23 == v9)
        goto LABEL_9;
      result = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v8, v9, 0);
      if ((result & 1) != 0)
        goto LABEL_9;
      ++v19;
      if (v20 == v4)
        goto LABEL_11;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100101040(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100101104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  _QWORD *v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;

  v2 = v1;
  v78 = &_swiftEmptySetSingleton;
  v77 = &_swiftEmptySetSingleton;
  v3 = *(_QWORD *)(v0 + 96);
  v70 = (unint64_t)v3 >> 62;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0)
      v67 = *(_QWORD *)(v0 + 96);
    else
      v67 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v72 = (void *)v3;
    if (_CocoaArrayWrapper.endIndex.getter(v67))
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v3);
    v72 = (void *)v3;
    if (v4)
    {
LABEL_3:
      v69 = (_QWORD *)(v3 + 32);
      if ((v3 & 0xC000000000000001) != 0)
      {
        v5 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
      }
      else
      {
        if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          JUMPOUT(0x10010224CLL);
        }
        v5 = (_QWORD *)*v69;
        swift_retain(*v69);
      }
      v7 = v5[2];
      v6 = v5[3];
      swift_bridgeObjectRetain(v6);
      sub_100105ABC(v7, v6);
      if (!v2)
      {
        swift_bridgeObjectRelease(v6);
        v8 = v5[2];
        v9 = v5[3];
        swift_bridgeObjectRetain(v78);
        swift_bridgeObjectRetain(v9);
        v10 = sub_1000671D8(v8, v9, (uint64_t)v78);
        swift_bridgeObjectRelease(v9);
        swift_bridgeObjectRelease(v78);
        if ((v10 & 1) != 0)
        {
          swift_bridgeObjectRelease(v3);
          swift_bridgeObjectRelease(v78);
          v61 = v77;
        }
        else
        {
          v11 = v5[2];
          v12 = v5[3];
          swift_bridgeObjectRetain(v77);
          swift_bridgeObjectRetain(v12);
          v13 = sub_1000671D8(v11, v12, (uint64_t)v77);
          swift_bridgeObjectRelease(v12);
          swift_bridgeObjectRelease(v77);
          if ((v13 & 1) == 0)
          {
            v14 = v5[2];
            v15 = v5[3];
            swift_bridgeObjectRetain(v15);
            sub_100103274(&v75, v14, v15);
            swift_bridgeObjectRelease(v76);
            v17 = v5[5];
            if ((unint64_t)v17 >> 62)
            {
              if (v17 < 0)
                v35 = v5[5];
              else
                v35 = v17 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain_n(v5[5], 2, v16);
              v18 = _CocoaArrayWrapper.endIndex.getter(v35);
              swift_bridgeObjectRelease(v17);
              v71 = v5;
              if (v18)
              {
LABEL_12:
                v73 = (uint64_t)v78;
                v19 = 4;
                while (1)
                {
                  v20 = v19 - 4;
                  if ((v17 & 0xC000000000000001) != 0)
                  {
                    v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v19 - 4, v17);
                    v22 = v19 - 3;
                    if (__OFADD__(v20, 1))
                      goto LABEL_65;
                  }
                  else
                  {
                    v21 = *(_QWORD *)(v17 + 8 * v19);
                    swift_retain(v21);
                    v22 = v19 - 3;
                    if (__OFADD__(v20, 1))
                    {
LABEL_65:
                      __break(1u);
                      JUMPOUT(0x1001020D0);
                    }
                  }
                  v24 = *(_QWORD *)(v21 + 16);
                  v23 = *(_QWORD *)(v21 + 24);
                  swift_bridgeObjectRetain(v23);
                  sub_100105ABC(v24, v23);
                  swift_bridgeObjectRelease(v23);
                  v26 = *(_QWORD *)(v21 + 16);
                  v25 = *(_QWORD *)(v21 + 24);
                  swift_bridgeObjectRetain(v73);
                  swift_bridgeObjectRetain(v25);
                  v27 = sub_1000671D8(v26, v25, v73);
                  swift_bridgeObjectRelease(v25);
                  swift_bridgeObjectRelease(v73);
                  if ((v27 & 1) != 0)
                  {
                    swift_bridgeObjectRelease(v72);
                    swift_bridgeObjectRelease(v17);
                    v52 = (uint64_t)v77;
                    swift_bridgeObjectRelease(v73);
                    v53 = v52;
                    goto LABEL_52;
                  }
                  v28 = v18;
                  v29 = (uint64_t)v77;
                  v31 = *(_QWORD *)(v21 + 16);
                  v30 = *(_QWORD *)(v21 + 24);
                  swift_bridgeObjectRetain(v77);
                  swift_bridgeObjectRetain(v30);
                  v32 = sub_1000671D8(v31, v30, v29);
                  swift_bridgeObjectRelease(v30);
                  swift_bridgeObjectRelease(v29);
                  if ((v32 & 1) != 0)
                    break;
                  v34 = *(_QWORD *)(v21 + 16);
                  v33 = *(_QWORD *)(v21 + 24);
                  swift_bridgeObjectRetain(v33);
                  sub_100103274(&v75, v34, v33);
                  swift_release(v21);
                  swift_bridgeObjectRelease(v76);
                  ++v19;
                  v18 = v28;
                  if (v22 == v28)
                    goto LABEL_21;
                }
                swift_bridgeObjectRelease(v73);
                swift_bridgeObjectRelease(v29);
                swift_bridgeObjectRelease(v72);
                v53 = v17;
LABEL_52:
                swift_bridgeObjectRelease(v53);
                v55 = *(_QWORD *)(v21 + 16);
                v54 = *(_QWORD *)(v21 + 24);
                v56 = sub_10008BA68();
                swift_allocError(&type metadata for QuestionnaireError, v56, 0, 0);
                *(_QWORD *)v57 = v55;
                *(_QWORD *)(v57 + 8) = v54;
                *(_QWORD *)(v57 + 16) = 0;
                *(_QWORD *)(v57 + 24) = 0;
                *(_BYTE *)(v57 + 32) = 1;
                swift_bridgeObjectRetain(v54);
                swift_willThrow(v58);
                swift_release(v21);
                v59 = v71;
                return swift_release(v59);
              }
            }
            else
            {
              v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain(v5[5]);
              v71 = v5;
              if (v18)
                goto LABEL_12;
            }
LABEL_21:
            swift_bridgeObjectRelease(v17);
            __asm { BR              X9 }
          }
          swift_bridgeObjectRelease(v78);
          swift_bridgeObjectRelease(v77);
          v61 = v72;
        }
        swift_bridgeObjectRelease(v61);
        v62 = v5[2];
        v63 = v5[3];
        v64 = sub_10008BA68();
        swift_allocError(&type metadata for QuestionnaireError, v64, 0, 0);
        *(_QWORD *)v65 = v62;
        *(_QWORD *)(v65 + 8) = v63;
        *(_QWORD *)(v65 + 16) = 0;
        *(_QWORD *)(v65 + 24) = 0;
        *(_BYTE *)(v65 + 32) = 1;
        swift_bridgeObjectRetain(v63);
        swift_willThrow(v66);
        v59 = v5;
        return swift_release(v59);
      }
      swift_bridgeObjectRelease(v3);
      swift_release(v5);
      swift_bridgeObjectRelease(v6);
      v50 = (uint64_t)v77;
LABEL_49:
      swift_bridgeObjectRelease(v50);
      return swift_bridgeObjectRelease(v78);
    }
  }
  swift_bridgeObjectRelease(v3);
  if (v70)
  {
    if (v3 < 0)
      v68 = v3;
    else
      v68 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v36 = _CocoaArrayWrapper.endIndex.getter(v68);
    if (v36)
    {
LABEL_29:
      v37 = 4;
      while (1)
      {
        v38 = v37 - 4;
        if ((v3 & 0xC000000000000001) != 0)
        {
          v39 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v37 - 4, v3);
          v40 = __OFADD__(v38, 1);
          v41 = v37 - 3;
          if (v40)
            goto LABEL_66;
        }
        else
        {
          v39 = *(_QWORD **)(v3 + 8 * v37);
          swift_retain(v39);
          v40 = __OFADD__(v38, 1);
          v41 = v37 - 3;
          if (v40)
          {
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
            JUMPOUT(0x100102174);
          }
        }
        swift_bridgeObjectRetain(v77);
        sub_100105DA8(v39, (uint64_t)v77);
        if (v2)
          break;
        sub_100106418((uint64_t)v39, (uint64_t)v77);
        v2 = 0;
        swift_release(v39);
        swift_bridgeObjectRelease(v77);
        ++v37;
        if (v41 == v36)
          goto LABEL_37;
      }
      swift_release(v39);
      swift_bridgeObjectRelease_n(v77, 2);
      v50 = v3;
      goto LABEL_49;
    }
  }
  else
  {
    v36 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v3);
    if (v36)
      goto LABEL_29;
  }
LABEL_37:
  swift_bridgeObjectRelease(v3);
  if (v70)
  {
    if (v3 < 0)
      v60 = v3;
    else
      v60 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v42 = _CocoaArrayWrapper.endIndex.getter(v60);
    if (v42)
    {
LABEL_39:
      v43 = v78;
      v44 = v77;
      v74 = v3 & 0xC000000000000001;
      v45 = 4;
      while (1)
      {
        v46 = v45 - 4;
        if (v74)
        {
          v47 = specialized _ArrayBuffer._getElementSlowPath(_:)(v45 - 4, v3);
          v48 = v45 - 3;
          if (__OFADD__(v46, 1))
            goto LABEL_67;
        }
        else
        {
          v47 = *(_QWORD *)(v3 + 8 * v45);
          swift_retain(v47);
          v48 = v45 - 3;
          if (__OFADD__(v46, 1))
            goto LABEL_67;
        }
        v49 = *(_QWORD *)(v47 + 48);
        swift_retain(v49);
        swift_bridgeObjectRetain(v78);
        swift_bridgeObjectRetain(v77);
        sub_100102BE8(v47, v49, (uint64_t)v78, (uint64_t)v77);
        if (v2)
          break;
        swift_release(v47);
        swift_release(v49);
        swift_bridgeObjectRelease(v78);
        swift_bridgeObjectRelease(v77);
        ++v45;
        v3 = (uint64_t)v72;
        if (v48 == v42)
        {
          swift_bridgeObjectRelease(v72);
          goto LABEL_58;
        }
      }
      swift_bridgeObjectRelease(v72);
      swift_release(v47);
      swift_release(v49);
      swift_bridgeObjectRelease_n(v78, 2);
      return swift_bridgeObjectRelease_n(v77, 2);
    }
  }
  else
  {
    v42 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v3);
    if (v42)
      goto LABEL_39;
  }
  swift_bridgeObjectRelease(v3);
  v44 = v77;
  v43 = v78;
LABEL_58:
  swift_bridgeObjectRelease(v43);
  return swift_bridgeObjectRelease(v44);
}

void sub_100102304()
{
  __int128 *v0;
  _QWORD v1[4];

  sub_100014C50(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

unint64_t sub_10010234C()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  void *v4;

  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1._countAndFlagsBits = v0;
  v1._object = v4;
  String.append(_:)(v1);
  v2._countAndFlagsBits = 11815;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  return 0xD000000000000023;
}

void sub_100102B00()
{
  JUMPOUT(0x100102AE4);
}

void sub_100102BB4()
{
  __int128 *v0;
  _BYTE v1[40];

  sub_100014C50(v0, (uint64_t)v1);
  sub_100102304();
}

uint64_t sub_100102BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;

  v6 = v5;
  v11 = type metadata accessor for QuestionCondition();
  v12 = swift_dynamicCastClass(a2, v11);
  if (v12)
  {
    v14 = *(_QWORD *)(v12 + 24);
    v13 = *(_QWORD *)(v12 + 32);
    swift_retain(a2);
    swift_bridgeObjectRetain(v13);
    v15 = sub_1000671D8(v14, v13, a3);
    swift_bridgeObjectRelease(v13);
    if ((v15 & 1) != 0)
    {
      v17 = *(_QWORD *)(a1 + 16);
      v16 = *(_QWORD *)(a1 + 24);
      v18 = v17 == v14 && v16 == v13;
      if (v18
        || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v14, v13, 0) & 1) != 0)
      {
        v19 = sub_10008BA68();
        swift_allocError(&type metadata for QuestionnaireError, v19, 0, 0);
        *(_QWORD *)v20 = v17;
        *(_QWORD *)(v20 + 8) = v16;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)(v20 + 24) = 0;
        v21 = 12;
LABEL_37:
        *(_BYTE *)(v20 + 32) = v21;
        v52 = v16;
        goto LABEL_40;
      }
      v53 = *(_QWORD *)(v4 + 104);
      if (*(_QWORD *)(v53 + 16))
      {
        swift_bridgeObjectRetain(v13);
        v54 = sub_10017D3B0(v14, v13);
        if ((v55 & 1) != 0)
        {
          v29 = *(_QWORD *)(*(_QWORD *)(v53 + 56) + 8 * v54);
          swift_retain(v29);
          swift_bridgeObjectRelease(v13);
          if (*(_BYTE *)(v29 + 32) != 3 || *(_BYTE *)(a1 + 32) == 3)
            goto LABEL_59;
          v56 = sub_10008BA68();
          swift_allocError(&type metadata for QuestionnaireError, v56, 0, 0);
          *(_QWORD *)v57 = v17;
          *(_QWORD *)(v57 + 8) = v16;
          *(_QWORD *)(v57 + 16) = 0;
          *(_QWORD *)(v57 + 24) = 0;
          *(_BYTE *)(v57 + 32) = 13;
          v38 = v16;
          goto LABEL_20;
        }
        swift_bridgeObjectRelease(v13);
      }
    }
    v67 = sub_10008BA68();
    swift_allocError(&type metadata for QuestionnaireError, v67, 0, 0);
    *(_QWORD *)v68 = v14;
    *(_QWORD *)(v68 + 8) = v13;
    *(_QWORD *)(v68 + 16) = 0;
    *(_QWORD *)(v68 + 24) = 0;
    *(_BYTE *)(v68 + 32) = 6;
    v52 = v13;
    goto LABEL_40;
  }
  v22 = type metadata accessor for OptionCondition();
  v23 = swift_dynamicCastClass(a2, v22);
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 16);
    v16 = *(_QWORD *)(v23 + 24);
    swift_retain(a2);
    swift_bridgeObjectRetain(v16);
    v25 = sub_1000671D8(v24, v16, a4);
    swift_bridgeObjectRelease(v16);
    if ((v25 & 1) == 0)
    {
      v49 = *(_QWORD *)(a1 + 16);
      v48 = *(_QWORD *)(a1 + 24);
      v50 = sub_10008BA68();
      swift_allocError(&type metadata for QuestionnaireError, v50, 0, 0);
      *(_QWORD *)v51 = v49;
      *(_QWORD *)(v51 + 8) = v48;
      *(_QWORD *)(v51 + 16) = v24;
      *(_QWORD *)(v51 + 24) = v16;
      *(_BYTE *)(v51 + 32) = 9;
      swift_bridgeObjectRetain(v16);
      v52 = v48;
LABEL_40:
      swift_bridgeObjectRetain(v52);
      swift_willThrow(v69);
      v70 = a2;
      return swift_release(v70);
    }
    v26 = *(_QWORD *)(v4 + 112);
    if (*(_QWORD *)(v26 + 16))
    {
      swift_bridgeObjectRetain(v16);
      v27 = sub_10017D3B0(v24, v16);
      if ((v28 & 1) != 0)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v27);
        swift_retain(v29);
        swift_bridgeObjectRelease(v16);
        v30 = *(_QWORD *)(v29 + 16);
        v31 = *(_QWORD *)(v29 + 24);
        v33 = *(_QWORD *)(a1 + 16);
        v32 = *(_QWORD *)(a1 + 24);
        v34 = v30 == v33 && v31 == v32;
        if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v33, v32, 0) & 1) != 0)
        {
          v35 = sub_10008BA68();
          swift_allocError(&type metadata for QuestionnaireError, v35, 0, 0);
          *(_QWORD *)v36 = v33;
          *(_QWORD *)(v36 + 8) = v32;
          *(_QWORD *)(v36 + 16) = 0;
          *(_QWORD *)(v36 + 24) = 0;
          v37 = 12;
        }
        else
        {
          if (*(_BYTE *)(v29 + 32) != 3)
            goto LABEL_59;
          v83 = sub_10008BA68();
          swift_allocError(&type metadata for QuestionnaireError, v83, 0, 0);
          *(_QWORD *)v36 = v33;
          *(_QWORD *)(v36 + 8) = v32;
          *(_QWORD *)(v36 + 16) = 0;
          *(_QWORD *)(v36 + 24) = 0;
          v37 = 13;
        }
        *(_BYTE *)(v36 + 32) = v37;
        v38 = v32;
LABEL_20:
        swift_bridgeObjectRetain(v38);
        swift_willThrow(v39);
LABEL_59:
        swift_release(a2);
        v70 = v29;
        return swift_release(v70);
      }
      swift_bridgeObjectRelease(v16);
    }
    v66 = sub_10008BA68();
    swift_allocError(&type metadata for QuestionnaireError, v66, 0, 0);
    *(_QWORD *)v20 = v24;
    *(_QWORD *)(v20 + 8) = v16;
    *(_QWORD *)(v20 + 16) = 0;
    *(_QWORD *)(v20 + 24) = 0;
    v21 = 7;
    goto LABEL_37;
  }
  v40 = type metadata accessor for BuiltInCondition();
  result = swift_dynamicCastClass(a2, v40);
  if (result)
  {
    if (*(_BYTE *)(a1 + 32) != 3)
    {
      v42 = sub_100176E64();
      v44 = v43;
      v45 = sub_10008BA68();
      v46 = swift_allocError(&type metadata for QuestionnaireError, v45, 0, 0);
      *(_QWORD *)v47 = v42;
      *(_QWORD *)(v47 + 8) = v44;
      *(_QWORD *)(v47 + 16) = 0;
      *(_QWORD *)(v47 + 24) = 0;
      *(_BYTE *)(v47 + 32) = 14;
      return swift_willThrow(v46);
    }
    return result;
  }
  v58 = type metadata accessor for LogicalCondition();
  v59 = swift_dynamicCastClass(a2, v58);
  if (!v59)
  {
    v71 = type metadata accessor for NoPrerequisites();
    result = swift_dynamicCastClass(a2, v71);
    if (!result)
    {
      v73 = *(_QWORD *)(a1 + 16);
      v72 = *(_QWORD *)(a1 + 24);
      v74 = sub_10008BA68();
      swift_allocError(&type metadata for QuestionnaireError, v74, 0, 0);
      *(_QWORD *)v75 = v73;
      *(_QWORD *)(v75 + 8) = v72;
      *(_QWORD *)(v75 + 16) = 0;
      *(_QWORD *)(v75 + 24) = 0;
      *(_BYTE *)(v75 + 32) = 15;
      swift_bridgeObjectRetain(v72);
      return swift_willThrow(v76);
    }
    return result;
  }
  v60 = v59;
  v61 = type metadata accessor for NotCondition();
  v62 = swift_dynamicCastClass(v60, v61);
  if (!v62)
  {
    swift_retain(a2);
    while (1)
    {
      v77 = *(_QWORD *)(v60 + 24);
      if ((unint64_t)v77 >> 62)
      {
        if (v77 < 0)
          v91 = *(_QWORD *)(v60 + 24);
        else
          v91 = v77 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*(_QWORD *)(v60 + 24));
        v78 = _CocoaArrayWrapper.endIndex.getter(v91);
        if (!v78)
        {
LABEL_56:
          swift_release(a2);
          v82 = v77;
          return swift_bridgeObjectRelease(v82);
        }
      }
      else
      {
        v78 = *(_QWORD *)((v77 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(*(_QWORD *)(v60 + 24));
        if (!v78)
          goto LABEL_56;
      }
      v92 = v77;
      v93 = a4;
      v94 = v77 & 0xC000000000000001;
      v64 = 4;
      while (1)
      {
        a4 = v78;
        v79 = v64 - 4;
        if (!v94)
          break;
        v80 = specialized _ArrayBuffer._getElementSlowPath(_:)(v64 - 4, v77);
        v81 = __OFADD__(v79, 1);
        v60 = v64 - 3;
        if (v81)
          goto LABEL_62;
LABEL_54:
        sub_100102BE8(a1, v80, a3, v93);
        if (v6)
        {
          swift_release(a2);
          swift_release(v80);
          v82 = v92;
          return swift_bridgeObjectRelease(v82);
        }
        swift_release(v80);
        ++v64;
        v77 = v92;
        if (v60 == v78)
          goto LABEL_56;
      }
      v80 = *(_QWORD *)(v77 + 8 * v64);
      v63 = swift_retain(v80);
      v81 = __OFADD__(v79, 1);
      v60 = v64 - 3;
      if (!v81)
        goto LABEL_54;
LABEL_62:
      __break(1u);
LABEL_63:
      if (v64 < 0)
        v84 = v64;
      else
        v84 = v64 & 0xFFFFFFFFFFFFFF8;
      swift_retain_n(a2, v63);
      swift_bridgeObjectRetain(v64);
      v85 = _CocoaArrayWrapper.endIndex.getter(v84);
      swift_bridgeObjectRelease(v64);
      if (v85 != 1)
        goto LABEL_67;
LABEL_34:
      swift_release(a2);
    }
  }
  v64 = *(_QWORD *)(v62 + 24);
  if ((unint64_t)v64 >> 62)
    goto LABEL_63;
  v65 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_retain_n(a2, v63);
  if (v65 == 1)
    goto LABEL_34;
LABEL_67:
  v87 = *(_QWORD *)(a1 + 16);
  v86 = *(_QWORD *)(a1 + 24);
  v88 = sub_10008BA68();
  swift_allocError(&type metadata for QuestionnaireError, v88, 0, 0);
  *(_QWORD *)v89 = v87;
  *(_QWORD *)(v89 + 8) = v86;
  *(_QWORD *)(v89 + 16) = 0;
  *(_QWORD *)(v89 + 24) = 0;
  *(_BYTE *)(v89 + 32) = 5;
  swift_bridgeObjectRetain(v86);
  swift_willThrow(v90);
  return swift_release_n(a2);
}

uint64_t sub_10010324C(_BYTE *a1, uint64_t a2)
{
  return sub_1001036F4(a1, a2, &qword_100329B10, (uint64_t)&type metadata for StewieState.StewieService);
}

uint64_t sub_100103260(_BYTE *a1, uint64_t a2)
{
  return sub_1001036F4(a1, a2, &qword_10031FE80, (uint64_t)&type metadata for GuidanceModel.SuggestedAction);
}

uint64_t sub_100103274(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_1001044BC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100103420(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  Swift::Int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  _QWORD v37[9];
  uint64_t v38;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain(a2);
    v9 = __CocoaSet.member(for:)(v8);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      v38 = v9;
      v10 = type metadata accessor for Option();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(v37, &v38, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v37[0];
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v25 = sub_100103828(v7, result + 1);
    v37[0] = v25;
    v26 = *(_QWORD *)(v25 + 16);
    if (*(_QWORD *)(v25 + 24) <= v26)
    {
      v28 = v26 + 1;
      swift_retain(a2);
      sub_100103D20(v28);
      v27 = v37[0];
    }
    else
    {
      v27 = v25;
      swift_retain(a2);
    }
    sub_1001042AC(a2, v27);
    v29 = *v3;
    *v3 = v27;
  }
  else
  {
    Hasher.init(_seed:)(v37, *(_QWORD *)(v6 + 40));
    v12 = *(_QWORD *)(a2 + 16);
    v13 = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v13);
    String.hash(into:)(v37, v12, v13);
    swift_bridgeObjectRelease(v13);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v6 + 32);
    v16 = v14 & ~v15;
    if (((*(_QWORD *)(v6 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
    {
      v17 = *(_QWORD *)(v6 + 48);
      v18 = *(_QWORD *)(v17 + 8 * v16);
      v19 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v18 + 24);
      v21 = *(_QWORD *)(a2 + 16);
      v22 = *(_QWORD *)(a2 + 24);
      v23 = v19 == v21 && v20 == v22;
      if (v23
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), 0) & 1) != 0)
      {
LABEL_13:
        swift_release(a2);
        swift_bridgeObjectRelease(v6);
        v24 = *(_QWORD *)(*(_QWORD *)(*v3 + 48) + 8 * v16);
        *a1 = v24;
        swift_retain(v24);
        return 0;
      }
      v30 = ~v15;
      while (1)
      {
        v16 = (v16 + 1) & v30;
        if (((*(_QWORD *)(v6 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
          break;
        v31 = *(_QWORD *)(v17 + 8 * v16);
        v32 = *(_QWORD *)(v31 + 16);
        v33 = *(_QWORD *)(v31 + 24);
        v34 = v32 == v21 && v33 == v22;
        if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v21, v22, 0) & 1) != 0)
          goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v37[0] = *v3;
    *v3 = 0x8000000000000000;
    swift_retain(a2);
    sub_100104654(v36, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v37[0];
  }
  swift_bridgeObjectRelease(v29);
  *a1 = a2;
  return 1;
}

uint64_t sub_1001036E0(_BYTE *a1, uint64_t a2)
{
  return sub_1001036F4(a1, a2, &qword_10031FE78, (uint64_t)&type metadata for SessionUserAttentionTracker.EventAssertion);
}

uint64_t sub_1001036F4(_BYTE *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  _QWORD v18[9];

  v9 = *v4;
  Hasher.init(_seed:)(v18, *(_QWORD *)(*v4 + 40));
  Hasher._combine(_:)(a2);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v18[0] = *v4;
    *v4 = 0x8000000000000000;
    sub_100104364(a2, v12, isUniquelyReferenced_nonNull_native, a3, a4);
    v17 = *v4;
    *v4 = v18[0];
    swift_bridgeObjectRelease(v17);
    result = 1;
    goto LABEL_8;
  }
  v13 = *(_QWORD *)(v9 + 48);
  if (*(unsigned __int8 *)(v13 + v12) != a2)
  {
    v14 = ~v11;
    do
    {
      v12 = (v12 + 1) & v14;
      if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v13 + v12) != a2);
  }
  result = 0;
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(*v4 + 48) + v12);
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int sub_100103828(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[9];
  uint64_t v25;
  uint64_t v26;

  if (a2)
  {
    sub_100003DB8(&qword_10031FE88);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v26 = v4;
    v6 = __CocoaSet.makeIterator()(a1, v5);
    v7 = __CocoaSet.Iterator.next()(v6);
    if (v7)
    {
      v8 = v7;
      v9 = type metadata accessor for Option();
      do
      {
        v24[0] = v8;
        swift_dynamicCast(&v25, v24, (char *)&type metadata for Swift.AnyObject + 8, v9, 7);
        v4 = v26;
        v19 = *(_QWORD *)(v26 + 16);
        if (*(_QWORD *)(v26 + 24) <= v19)
        {
          sub_100103D20(v19 + 1);
          v4 = v26;
        }
        v10 = v25;
        Hasher.init(_seed:)(v24, *(_QWORD *)(v4 + 40));
        v11 = *(_QWORD *)(v10 + 16);
        v12 = *(_QWORD *)(v10 + 24);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v24, v11, v12);
        swift_bridgeObjectRelease(v12);
        result = Hasher._finalize()();
        v14 = v4 + 56;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 56 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 56 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v20 = 0;
          v21 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v21 && (v20 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v22 = v17 == v21;
            if (v17 == v21)
              v17 = 0;
            v20 |= v22;
            v23 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v23 == -1);
          v18 = __clz(__rbit64(~v23)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v18) = v10;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaSet.Iterator.next()(result);
      }
      while (v8);
    }
    swift_release(v6);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

void sub_100103A44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100003DB8(&qword_10031FE70);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v21, v22);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_100103D20(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100003DB8(&qword_10031FE88);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v31 = v2;
    v32 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v16 >= v10)
          goto LABEL_36;
        v17 = v32[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v10)
            goto LABEL_36;
          v17 = v32[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v10)
              goto LABEL_36;
            v17 = v32[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v31;
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v17 = v32[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v17 = v32[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_26;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_26:
        v9 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
      Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
      v20 = *(_QWORD *)(v19 + 16);
      v21 = *(_QWORD *)(v19 + 24);
      swift_bridgeObjectRetain(v21);
      String.hash(into:)(v33, v20, v21);
      swift_bridgeObjectRelease(v21);
      v22 = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v11 + 8 * v25);
        }
        while (v29 == -1);
        v13 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

Swift::Int sub_100104008(uint64_t a1, uint64_t *a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::Int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int *v30;
  uint64_t v31[9];

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_100003DB8(a2);
  result = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = result;
  if (*(_QWORD *)(v4 + 16))
  {
    v30 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v4 + 56);
    v10 = 1 << *(_BYTE *)(v4 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v4 + 56);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 56;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_36;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_36;
          v19 = v9[v8];
          if (!v19)
          {
            v8 = v18 + 2;
            if (v18 + 2 >= v13)
              goto LABEL_36;
            v19 = v9[v8];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v13)
              {
LABEL_36:
                v29 = 1 << *(_BYTE *)(v4 + 32);
                if (v29 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v29;
                v3 = v30;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v19 = v9[v20];
              if (!v19)
              {
                while (1)
                {
                  v8 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v8 >= v13)
                    goto LABEL_36;
                  v19 = v9[v8];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v8 = v20;
            }
          }
        }
LABEL_26:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v17);
      Hasher.init(_seed:)(v31, *(_QWORD *)(v7 + 40));
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release(v4);
  *v3 = v7;
  return result;
}

unint64_t sub_1001042AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  unint64_t result;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, *(_QWORD *)(a2 + 40));
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v8, v4, v5);
  swift_bridgeObjectRelease(v5);
  v6 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v6 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_100104364(uint64_t result, unint64_t a2, char a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  Swift::UInt v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD v20[9];

  v8 = result;
  v9 = *(_QWORD *)(*v5 + 16);
  v10 = *(_QWORD *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0)
    goto LABEL_14;
  v11 = v9 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100104008(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_100104B70(a4);
      goto LABEL_14;
    }
    sub_10010525C(v11, a4);
  }
  v12 = *v5;
  Hasher.init(_seed:)(v20, *(_QWORD *)(*v5 + 40));
  Hasher._combine(_:)(v8);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a2 = result & ~v13;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v14 = *(_QWORD *)(v12 + 48);
    if (*(unsigned __int8 *)(v14 + a2) == (_DWORD)v8)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(a5);
      __break(1u);
    }
    else
    {
      v15 = ~v13;
      while (1)
      {
        a2 = (a2 + 1) & v15;
        if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v14 + a2) == (_DWORD)v8)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v5;
  *(_QWORD *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v16 + 48) + a2) = v8;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
  return result;
}

void sub_1001044BC(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100103A44(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_10010480C();
      goto LABEL_22;
    }
    sub_100104CF8(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

void sub_100104654(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD v33[9];

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_22;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100103D20(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_1001049BC();
      goto LABEL_22;
    }
    sub_100104FA4(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v33, *(_QWORD *)(*v3 + 40));
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain(v12);
  String.hash(into:)(v33, v11, v12);
  swift_bridgeObjectRelease(v12);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v13 & ~v14;
  v15 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = type metadata accessor for Option();
    v17 = *(_QWORD *)(v10 + 48);
    v18 = *(_QWORD *)(v17 + 8 * a2);
    v19 = *(_QWORD *)(v18 + 16);
    v20 = *(_QWORD *)(v18 + 24);
    v21 = *(_QWORD *)(a1 + 16);
    v22 = *(_QWORD *)(a1 + 24);
    v23 = v19 == v21 && v20 == v22;
    if (v23
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v16);
      __break(1u);
    }
    else
    {
      v24 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v24;
        if (((*(_QWORD *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v25 = *(_QWORD *)(v17 + 8 * a2);
        v26 = *(_QWORD *)(v25 + 16);
        v27 = *(_QWORD *)(v25 + 24);
        v28 = v26 == v21 && v27 == v22;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v21, v22, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v29 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v29 + 48) + 8 * a2) = a1;
  v30 = *(_QWORD *)(v29 + 16);
  v31 = __OFADD__(v30, 1);
  v32 = v30 + 1;
  if (v31)
    __break(1u);
  else
    *(_QWORD *)(v29 + 16) = v32;
}

void sub_10010480C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100003DB8(&qword_10031FE70);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_1001049BC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100003DB8(&qword_10031FE88);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    swift_retain(v17);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void *sub_100104B64()
{
  return sub_100104B70(&qword_10031FE78);
}

void *sub_100104B70(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = v1;
  sub_100003DB8(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v7 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v7 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16) = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_100104CF8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100003DB8(&qword_10031FE70);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v33, v21, v22);
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v21;
    v14[1] = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    swift_release_n(v3);
    v2 = v31;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_100104FA4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  int64_t v31;
  _QWORD v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100003DB8(&qword_10031FE88);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v30 = v2;
  v31 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_27;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v31)
      goto LABEL_36;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v31)
        goto LABEL_36;
      v17 = *(_QWORD *)(v8 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v31)
          goto LABEL_36;
        v17 = *(_QWORD *)(v8 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_26:
    v10 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_27:
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
    Hasher.init(_seed:)(v32, *(_QWORD *)(v6 + 40));
    v20 = *(_QWORD *)(v19 + 16);
    v21 = *(_QWORD *)(v19 + 24);
    swift_retain(v19);
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v32, v20, v21);
    swift_bridgeObjectRelease(v21);
    v22 = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v25);
      }
      while (v29 == -1);
      v13 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v6 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v31)
  {
LABEL_36:
    swift_release_n(v3);
    v2 = v30;
    goto LABEL_38;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v31)
      goto LABEL_36;
    v17 = *(_QWORD *)(v8 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

Swift::Int sub_10010525C(uint64_t a1, uint64_t *a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v7;
  int64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::Int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  Swift::Int *v29;
  uint64_t v30[9];

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_100003DB8(a2);
  result = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0);
  v7 = result;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release(v4);
LABEL_38:
    *v3 = v7;
    return result;
  }
  v29 = v3;
  v8 = 0;
  v9 = v4 + 56;
  v10 = 1 << *(_BYTE *)(v4 + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v4 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = result + 56;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v8 << 6);
      goto LABEL_27;
    }
    v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v13)
      goto LABEL_36;
    v19 = *(_QWORD *)(v9 + 8 * v18);
    ++v8;
    if (!v19)
    {
      v8 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_36;
      v19 = *(_QWORD *)(v9 + 8 * v8);
      if (!v19)
      {
        v8 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_36;
        v19 = *(_QWORD *)(v9 + 8 * v8);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v12 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_27:
    v21 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v17);
    Hasher.init(_seed:)(v30, *(_QWORD *)(v7 + 40));
    Hasher._combine(_:)(v21);
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v7 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v14 + 8 * v24);
      }
      while (v28 == -1);
      v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v21;
    ++*(_QWORD *)(v7 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
  {
LABEL_36:
    result = swift_release(v4);
    v3 = v29;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v9 + 8 * v20);
  if (v19)
  {
    v8 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v8 >= v13)
      goto LABEL_36;
    v19 = *(_QWORD *)(v9 + 8 * v8);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1001054D0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_100105570(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  _QWORD v31[9];
  uint64_t v32;

  v5 = a2;
  v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if ((a3 & 1) != 0)
    {
      if (a4 < 0)
        v7 = a4;
      else
        v7 = a4 & 0xFFFFFFFFFFFFFF8;
      v8 = __CocoaSet.element(at:)(a1, a2, v7);
      v32 = v8;
      v9 = type metadata accessor for Option();
      swift_unknownObjectRetain(v8);
      swift_dynamicCast(v31, &v32, (char *)&type metadata for Swift.AnyObject + 8, v9, 7);
      v10 = v31[0];
      swift_unknownObjectRelease(v8);
      return v10;
    }
    goto LABEL_34;
  }
  if ((a3 & 1) == 0)
  {
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) == 0)
    {
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
    {
LABEL_21:
      v10 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v6);
      swift_retain(v10);
      return v10;
    }
    __break(1u);
  }
  if (__CocoaSet.Index.age.getter(a1, a2) != *(_DWORD *)(a4 + 36))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v11 = __CocoaSet.Index.element.getter(v6, v5);
  v32 = v11;
  v12 = type metadata accessor for Option();
  swift_unknownObjectRetain(v11);
  swift_dynamicCast(v31, &v32, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
  v5 = v31[0];
  swift_unknownObjectRelease(v11);
  Hasher.init(_seed:)(v31, *(_QWORD *)(a4 + 40));
  v13 = *(_QWORD *)(v5 + 16);
  v14 = *(_QWORD *)(v5 + 24);
  swift_bridgeObjectRetain(v14);
  String.hash(into:)(v31, v13, v14);
  swift_bridgeObjectRelease(v14);
  v15 = Hasher._finalize()();
  v16 = -1 << *(_BYTE *)(a4 + 32);
  v6 = v15 & ~v16;
  v17 = a4 + 56;
  if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_35:
    swift_release(v5);
    __break(1u);
    goto LABEL_36;
  }
  v18 = *(_QWORD *)(a4 + 48);
  v19 = *(_QWORD *)(v18 + 8 * v6);
  v20 = *(_QWORD *)(v19 + 16);
  v21 = *(_QWORD *)(v19 + 24);
  v22 = *(_QWORD *)(v5 + 16);
  v23 = *(_QWORD *)(v5 + 24);
  v24 = v20 == v22 && v21 == v23;
  if (v24
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), 0) & 1) != 0)
  {
    goto LABEL_20;
  }
  v26 = ~v16;
  v6 = (v6 + 1) & v26;
  if (((*(_QWORD *)(v17 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    while (1)
    {
      v27 = *(_QWORD *)(v18 + 8 * v6);
      v28 = *(_QWORD *)(v27 + 16);
      v29 = *(_QWORD *)(v27 + 24);
      v30 = v28 == v22 && v29 == v23;
      if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v22, v23, 0) & 1) != 0)
        break;
      v6 = (v6 + 1) & v26;
      if (((*(_QWORD *)(v17 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        swift_release(v5);
        __break(1u);
        goto LABEL_31;
      }
    }
LABEL_20:
    swift_release(v5);
    goto LABEL_21;
  }
LABEL_36:
  result = swift_release(v5);
  __break(1u);
  return result;
}

uint64_t sub_100105818(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4)
    v7 = 4;
  v8 = v7 - 4;
  v9 = (unint64_t *)(a1 + 96);
  v2 = 192;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1001058C8(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * result);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_100105920(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * result);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_100105978(uint64_t a1, uint64_t a2)
{
  char v4;
  BOOL v6;

  if (a1 != 65 || a2 != 0xE100000000000000)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 65, 0xE100000000000000, 1) & 1) != 0)
      goto LABEL_6;
    if (a1 == 90 && a2 == 0xE100000000000000)
      return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(90, 0xE100000000000000, a1, a2, 1) & 1) != 0)
  {
LABEL_6:
    if (a1 != 97 || a2 != 0xE100000000000000)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 97, 0xE100000000000000, 1) & 1) != 0)
      {
        if (a1 == 95 && a2 == 0xE100000000000000)
          return 1;
        return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 95, 0xE100000000000000, 0);
      }
      if (a1 == 122 && a2 == 0xE100000000000000)
        return 1;
    }
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(122, 0xE100000000000000, a1, a2, 1);
    v6 = a1 == 95 && a2 == 0xE100000000000000;
    if ((v4 & 1) == 0 || v6)
      return 1;
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 95, 0xE100000000000000, 0);
  }
  return 1;
}

uint64_t sub_100105ABC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  Swift::String_optional v8;
  uint64_t countAndFlagsBits;
  void *object;
  char v11;
  BOOL v12;
  Swift::String_optional v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  swift_bridgeObjectRetain(a2);
  v4 = sub_100100D88(a1, a2);
  v6 = v5;
  swift_bridgeObjectRelease(a2);
  if (!v6 || (v7 = sub_100105978(v4, v6), swift_bridgeObjectRelease(v6), (v7 & 1) == 0))
  {
    v15 = sub_10008BA68();
    swift_allocError(&type metadata for QuestionnaireError, v15, 0, 0);
    *(_QWORD *)v16 = a1;
    *(_QWORD *)(v16 + 8) = a2;
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)(v16 + 24) = 0;
    *(_BYTE *)(v16 + 32) = 0;
    swift_bridgeObjectRetain(a2);
    return swift_willThrow(v17);
  }
  swift_bridgeObjectRetain(a2);
  v8 = String.Iterator.next()();
  if (!v8.value._object)
    return swift_bridgeObjectRelease(a2);
  countAndFlagsBits = v8.value._countAndFlagsBits;
  object = v8.value._object;
  while (1)
  {
    if (countAndFlagsBits != 65 || object != (void *)0xE100000000000000)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 65, 0xE100000000000000, 1) & 1) != 0)
        goto LABEL_10;
      if (countAndFlagsBits == 90 && object == (void *)0xE100000000000000)
        goto LABEL_31;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(90, 0xE100000000000000, countAndFlagsBits, object, 1) & 1) == 0)
      goto LABEL_31;
LABEL_10:
    if (countAndFlagsBits == 97 && object == (void *)0xE100000000000000)
      goto LABEL_12;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 97, 0xE100000000000000, 1) & 1) == 0)
    {
      if (countAndFlagsBits == 122 && object == (void *)0xE100000000000000)
        goto LABEL_31;
LABEL_12:
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(122, 0xE100000000000000, countAndFlagsBits, object, 1);
      v12 = object == (void *)0xE100000000000000 && countAndFlagsBits == 95;
      if (v12 || (v11 & 1) == 0)
        goto LABEL_31;
      goto LABEL_17;
    }
    if (countAndFlagsBits == 95 && object == (void *)0xE100000000000000)
      goto LABEL_31;
LABEL_17:
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 95, 0xE100000000000000, 0) & 1) != 0)
      goto LABEL_31;
    if (countAndFlagsBits != 48 || object != (void *)0xE100000000000000)
      break;
LABEL_20:
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(57, 0xE100000000000000, countAndFlagsBits, object, 1) & 1) != 0)
      goto LABEL_35;
LABEL_31:
    swift_bridgeObjectRelease(object);
LABEL_32:
    v13 = String.Iterator.next()();
    countAndFlagsBits = v13.value._countAndFlagsBits;
    object = v13.value._object;
    if (!v13.value._object)
      return swift_bridgeObjectRelease(a2);
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 48, 0xE100000000000000, 1) & 1) == 0)
  {
    if (countAndFlagsBits == 57 && object == (void *)0xE100000000000000)
      goto LABEL_31;
    goto LABEL_20;
  }
LABEL_35:
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 95, 0xE100000000000000, 0);
  swift_bridgeObjectRelease(object);
  if ((v14 & 1) != 0)
    goto LABEL_32;
  v19 = sub_10008BA68();
  swift_allocError(&type metadata for QuestionnaireError, v19, 0, 0);
  *(_QWORD *)v20 = a1;
  *(_QWORD *)(v20 + 8) = a2;
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 24) = 0;
  *(_BYTE *)(v20 + 32) = 0;
  swift_bridgeObjectRetain(a2);
  swift_willThrow(v21);
  return swift_bridgeObjectRelease(a2);
}

void sub_100105DA8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  BOOL v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  const char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v65;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;

  v2 = (_QWORD *)a1[14];
  if (!v2)
    return;
  v69 = &_swiftEmptySetSingleton;
  v3 = v2[2];
  if (!v3)
  {
    v30 = *((_QWORD *)&_swiftEmptySetSingleton + 2);
    swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
    if (v30)
      return;
    goto LABEL_56;
  }
  v4 = v2 + 4;
  swift_bridgeObjectRetain(v2);
  v5 = 0;
  v65 = v3;
  do
  {
    if (v5 >= v2[2])
    {
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
      return;
    }
    v6 = &v4[2 * v5];
    v8 = *v6;
    v7 = (void *)v6[1];
    v9 = *v6 == 45 && v7 == (void *)0xE100000000000000;
    if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v6, v6[1], 45, 0xE100000000000000, 0) & 1) == 0)
    {
      v11 = a1[5];
      if ((unint64_t)v11 >> 62)
      {
        if (v11 < 0)
          v29 = a1[5];
        else
          v29 = v11 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(a1[5], 3, v10);
        swift_bridgeObjectRetain(v7);
        v12 = _CocoaArrayWrapper.endIndex.getter(v29);
        swift_bridgeObjectRelease(v11);
        if (!v12)
        {
LABEL_54:
          swift_bridgeObjectRelease_n(v11, 2);
          swift_bridgeObjectRelease(v2);
          swift_bridgeObjectRelease(v69);
          v40 = sub_1000671D8(v8, (uint64_t)v7, a2);
          v41 = a1[2];
          v42 = a1[3];
          if ((v40 & 1) == 0)
          {
            v67 = 0;
            v68 = 0xE000000000000000;
            swift_bridgeObjectRetain(v42);
            _StringGuts.grow(_:)(19);
            swift_bridgeObjectRelease(v68);
            v67 = 0xD000000000000011;
            v68 = 0x80000001002696D0;
            goto LABEL_60;
          }
          v67 = 0;
          v68 = 0xE000000000000000;
          swift_bridgeObjectRetain(v42);
          _StringGuts.grow(_:)(43);
          swift_bridgeObjectRelease(v68);
          v67 = 0x64496E6F6974706FLL;
          v68 = 0xE900000000000020;
          v43._countAndFlagsBits = v8;
          v43._object = v7;
          String.append(_:)(v43);
          swift_bridgeObjectRelease(v7);
          v44._countAndFlagsBits = 0xD000000000000020;
          v44._object = (void *)0x80000001002696F0;
          String.append(_:)(v44);
LABEL_61:
          v49 = v67;
          v50 = v68;
          v51 = sub_10008BA68();
          v47 = swift_allocError(&type metadata for QuestionnaireError, v51, 0, 0);
          *(_QWORD *)v52 = v41;
          *(_QWORD *)(v52 + 8) = v42;
          *(_QWORD *)(v52 + 16) = v49;
          *(_QWORD *)(v52 + 24) = v50;
          *(_BYTE *)(v52 + 32) = 8;
          goto LABEL_62;
        }
      }
      else
      {
        v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n(a1[5], 2, v10);
        swift_bridgeObjectRetain(v7);
        if (!v12)
          goto LABEL_54;
      }
      if ((v11 & 0xC000000000000001) != 0)
      {
        v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v11);
      }
      else
      {
        v13 = *(_QWORD *)(v11 + 32);
        swift_retain(v13);
      }
      v14 = *(_QWORD *)(v13 + 16);
      v15 = *(void **)(v13 + 24);
      if ((v14 != v8 || v15 != v7) && (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v8, v7, 0) & 1) == 0)
      {
        swift_release(v13);
        if (v12 == 1)
          goto LABEL_54;
        if ((v11 & 0xC000000000000001) != 0)
        {
          v18 = 1;
          while (1)
          {
            v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v11);
            v20 = v18 + 1;
            if (__OFADD__(v18, 1))
              goto LABEL_78;
            v13 = v19;
            v21 = *(_QWORD *)(v19 + 16);
            v22 = *(void **)(v13 + 24);
            v23 = v21 == v8 && v22 == v7;
            if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v8, v7, 0) & 1) != 0)
              goto LABEL_18;
            swift_unknownObjectRelease(v13);
            ++v18;
            if (v20 == v12)
              goto LABEL_54;
          }
        }
        v24 = 5;
        while (1)
        {
          v25 = v24 - 3;
          if (__OFADD__(v24 - 4, 1))
            goto LABEL_79;
          v13 = *(_QWORD *)(v11 + 8 * v24);
          v26 = *(_QWORD *)(v13 + 16);
          v27 = *(void **)(v13 + 24);
          v28 = v26 == v8 && v27 == v7;
          if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v8, v7, 0) & 1) != 0)
            break;
          ++v24;
          if (v25 == v12)
            goto LABEL_54;
        }
        swift_retain(v13);
      }
LABEL_18:
      swift_bridgeObjectRelease_n(v11, 2);
      swift_release(v13);
      v16 = (uint64_t)v69;
      swift_bridgeObjectRetain(v69);
      v17 = sub_1000671D8(v8, (uint64_t)v7, v16);
      swift_bridgeObjectRelease(v16);
      if ((v17 & 1) != 0)
      {
        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(v2);
        v41 = a1[2];
        v42 = a1[3];
        v67 = 0;
        v68 = 0xE000000000000000;
        swift_bridgeObjectRetain(v42);
        _StringGuts.grow(_:)(21);
        swift_bridgeObjectRelease(v68);
        v67 = 0xD000000000000013;
        v68 = 0x8000000100269890;
LABEL_60:
        v48._countAndFlagsBits = v8;
        v48._object = v7;
        String.append(_:)(v48);
        swift_bridgeObjectRelease(v7);
        goto LABEL_61;
      }
      sub_100103274(&v67, v8, (uint64_t)v7);
      swift_bridgeObjectRelease(v68);
      v4 = v2 + 4;
      v3 = v65;
    }
    ++v5;
  }
  while (v5 != v3);
  swift_bridgeObjectRelease(v2);
  v31 = v69[2];
  swift_bridgeObjectRelease(v69);
  if (!v31)
  {
LABEL_56:
    v45 = a1[2];
    v35 = a1[3];
    v46 = sub_10008BA68();
    swift_allocError(&type metadata for QuestionnaireError, v46, 0, 0);
    *(_QWORD *)v37 = v45;
    *(_QWORD *)(v37 + 8) = v35;
    v38 = 0xD000000000000024;
    v39 = "at least one option should be listed";
    goto LABEL_57;
  }
  v32 = v2[4];
  v33 = v2[5];
  if (v32 == 45 && v33 == 0xE100000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, 45, 0xE100000000000000, 0) & 1) != 0)
  {
    v34 = a1[2];
    v35 = a1[3];
    v36 = sub_10008BA68();
    swift_allocError(&type metadata for QuestionnaireError, v36, 0, 0);
    *(_QWORD *)v37 = v34;
    *(_QWORD *)(v37 + 8) = v35;
    v38 = 0xD000000000000019;
    v39 = "separator cannot be first";
    goto LABEL_57;
  }
  if (v3 == 1)
    return;
  v53 = 0;
  v54 = v2 + 7;
  v55 = 1;
  v56 = 1;
  while (1)
  {
    v57 = *(v54 - 1);
    v58 = *v54;
    v59 = v57 == 45 && v58 == 0xE100000000000000;
    if (!v59 && (_stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, 45, 0xE100000000000000, 0) & 1) == 0)
      goto LABEL_66;
    if (v56 == v2[2] - 1)
    {
      v60 = a1[2];
      v35 = a1[3];
      v61 = sub_10008BA68();
      swift_allocError(&type metadata for QuestionnaireError, v61, 0, 0);
      *(_QWORD *)v37 = v60;
      *(_QWORD *)(v37 + 8) = v35;
      v38 = 0xD000000000000018;
      v39 = "separator cannot be last";
      goto LABEL_57;
    }
    if (!(v55 & 1 | (v56 - 1 != v53)))
      break;
    v55 = 0;
    v53 = v56;
LABEL_66:
    ++v56;
    v54 += 2;
    if (v3 == v56)
      return;
  }
  v62 = a1[2];
  v35 = a1[3];
  v63 = sub_10008BA68();
  swift_allocError(&type metadata for QuestionnaireError, v63, 0, 0);
  *(_QWORD *)v37 = v62;
  *(_QWORD *)(v37 + 8) = v35;
  v38 = 0xD000000000000025;
  v39 = "adjacent separators are not supported";
LABEL_57:
  *(_QWORD *)(v37 + 16) = v38;
  *(_QWORD *)(v37 + 24) = (unint64_t)(v39 - 32) | 0x8000000000000000;
  *(_BYTE *)(v37 + 32) = 8;
  swift_bridgeObjectRetain(v35);
LABEL_62:
  swift_willThrow(v47);
}

uint64_t sub_100106418(uint64_t result, uint64_t a2)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  unint64_t v9;
  const char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  unint64_t v22;
  const char *v23;
  Swift::String v24;
  Swift::String v25;
  char v26;
  Swift::String v27;
  _QWORD *v28;
  Swift::String v29;
  Swift::String v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v2 = *(void **)(result + 128);
  if (v2)
  {
    v3 = (_QWORD *)result;
    v4 = *(_QWORD *)(result + 120);
    if (*(_BYTE *)(result + 32))
    {
      v6 = *(_QWORD *)(result + 16);
      v5 = *(_QWORD *)(result + 24);
      v35 = 0;
      v36 = 0xE000000000000000;
      swift_bridgeObjectRetain(v5);
      _StringGuts.grow(_:)(77);
      v7._countAndFlagsBits = 0x206E6F6974704FLL;
      v7._object = (void *)0xE700000000000000;
      String.append(_:)(v7);
      v8._countAndFlagsBits = v4;
      v8._object = v2;
      String.append(_:)(v8);
      v9 = 0xD000000000000044;
      v10 = ": optionPresentedAsSkip is supported for SingleChoice questions only";
      goto LABEL_4;
    }
    if (!*(_QWORD *)(*(_QWORD *)(result + 56) + 16))
    {
      v6 = *(_QWORD *)(result + 16);
      v5 = *(_QWORD *)(result + 24);
      v35 = 0;
      v36 = 0xE000000000000000;
      swift_bridgeObjectRetain(v5);
      _StringGuts.grow(_:)(74);
      v24._countAndFlagsBits = 0x206E6F6974704FLL;
      v24._object = (void *)0xE700000000000000;
      String.append(_:)(v24);
      v25._countAndFlagsBits = v4;
      v25._object = v2;
      String.append(_:)(v25);
      v9 = 0xD000000000000041;
      v10 = ": optionPresentedAsSkip is supported for mandatory questions only";
      goto LABEL_4;
    }
    v16 = *(_QWORD *)(result + 40);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v2);
    v17 = sub_10008C580(v16, v4, (uint64_t)v2);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v2);
    if (!v17)
    {
      v26 = sub_1000671D8(v4, (uint64_t)v2, a2);
      v6 = v3[2];
      v5 = v3[3];
      if ((v26 & 1) == 0)
      {
        swift_bridgeObjectRetain(v5);
        _StringGuts.grow(_:)(19);
        swift_bridgeObjectRelease(0xE000000000000000);
        v35 = 0xD000000000000011;
        v36 = 0x80000001002696D0;
        v9 = v4;
        v11 = (unint64_t)v2;
        goto LABEL_5;
      }
      swift_bridgeObjectRetain(v5);
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease(0xE000000000000000);
      v35 = 0x64496E6F6974706FLL;
      v36 = 0xE900000000000020;
      v27._countAndFlagsBits = v4;
      v27._object = v2;
      String.append(_:)(v27);
      v9 = 0xD000000000000020;
      v10 = " belongs to a different question";
LABEL_4:
      v11 = (unint64_t)(v10 - 32) | 0x8000000000000000;
LABEL_5:
      String.append(_:)(*(Swift::String *)&v9);
      v12 = sub_10008BA68();
      v13 = swift_allocError(&type metadata for QuestionnaireError, v12, 0, 0);
      *(_QWORD *)v14 = v6;
      *(_QWORD *)(v14 + 8) = v5;
      *(_QWORD *)(v14 + 16) = v35;
      *(_QWORD *)(v14 + 24) = v36;
      *(_BYTE *)(v14 + 32) = 11;
      return swift_willThrow(v13);
    }
    if ((*(_BYTE *)(v17 + 40) & 1) != 0)
    {
      v19 = v3[2];
      v18 = v3[3];
      swift_bridgeObjectRetain(v18);
      _StringGuts.grow(_:)(72);
      v20._countAndFlagsBits = 0x206E6F6974704FLL;
      v20._object = (void *)0xE700000000000000;
      String.append(_:)(v20);
      v21._countAndFlagsBits = v4;
      v21._object = v2;
      String.append(_:)(v21);
      v22 = 0xD00000000000003FLL;
      v23 = ": optionPresentedAsSkip is supported for Selection options only";
    }
    else
    {
      v28 = (_QWORD *)v3[14];
      if (!v28 || (sub_100101040(v4, (uint64_t)v2, v28) & 1) != 0)
        return swift_release(v17);
      v19 = v3[2];
      v18 = v3[3];
      swift_bridgeObjectRetain(v18);
      _StringGuts.grow(_:)(66);
      v29._countAndFlagsBits = 0x206E6F6974704FLL;
      v29._object = (void *)0xE700000000000000;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v4;
      v30._object = v2;
      String.append(_:)(v30);
      v22 = 0xD000000000000039;
      v23 = ": optionPresentedAsSkip must be mentioned in optionsOrder";
    }
    v31 = (unint64_t)(v23 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v22);
    v32 = sub_10008BA68();
    v33 = swift_allocError(&type metadata for QuestionnaireError, v32, 0, 0);
    *(_QWORD *)v34 = v19;
    *(_QWORD *)(v34 + 8) = v18;
    *(_QWORD *)(v34 + 16) = 0;
    *(_QWORD *)(v34 + 24) = 0xE000000000000000;
    *(_BYTE *)(v34 + 32) = 11;
    swift_willThrow(v33);
    return swift_release(v17);
  }
  return result;
}

double sub_1001067FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;
  double result;

  switch(a5)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      v6 = a2;
      goto LABEL_3;
    case 8:
    case 9:
    case 11:
      swift_bridgeObjectRetain(a2);
      v6 = a4;
LABEL_3:
      swift_bridgeObjectRetain(v6);
      break;
    case 10:
      swift_bridgeObjectRetain(a2);
      *(_QWORD *)&result = swift_retain(a3).n128_u64[0];
      break;
    default:
      return result;
  }
  return result;
}

void destroy for QuestionnaireError(uint64_t a1)
{
  sub_100106890(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

void sub_100106890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;

  switch(a5)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      v6 = a2;
      goto LABEL_3;
    case 8:
    case 9:
    case 11:
      swift_bridgeObjectRelease(a2);
      v6 = a4;
LABEL_3:
      swift_bridgeObjectRelease(v6);
      break;
    case 10:
      swift_bridgeObjectRelease(a2);
      swift_release(a3);
      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for QuestionnaireError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1001067FC(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for QuestionnaireError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1001067FC(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_100106890(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for QuestionnaireError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_100106890(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionnaireError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xEF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 239);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 0x11)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnaireError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 239;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xEF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xEF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_100106AB8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 0x10u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 17);
}

uint64_t sub_100106AD0(uint64_t result, unsigned int a2)
{
  if (a2 >= 0x11)
  {
    *(_QWORD *)result = a2 - 17;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 17;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for QuestionnaireError()
{
  return &type metadata for QuestionnaireError;
}

void sub_100106B14()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  double v8;
  double v9;
  double Width;
  double v11;
  double v12;
  double Height;
  double v14;
  objc_super v15;
  CGRect v16;
  CGRect v17;

  v1 = v0;
  v15.receiver = v0;
  v15.super_class = (Class)type metadata accessor for MetalView();
  objc_msgSendSuper2(&v15, "layoutSubviews");
  v2 = objc_msgSend(v0, "layer");
  v3 = objc_opt_self(CAMetalLayer);
  v4 = swift_dynamicCastObjCClass(v2, v3);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = v2;
    v7 = objc_msgSend(v1, "traitCollection");
    objc_msgSend(v7, "displayScale");
    v9 = v8;

    objc_msgSend(v5, "setContentsScale:", v9);
    objc_msgSend(v5, "bounds");
    Width = CGRectGetWidth(v16);
    objc_msgSend(v5, "contentsScale");
    v12 = Width * v11;
    objc_msgSend(v5, "bounds");
    Height = CGRectGetHeight(v17);
    objc_msgSend(v5, "contentsScale");
    objc_msgSend(v5, "setDrawableSize:", v12, Height * v14);
  }

}

id sub_100106E04()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MetalView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MetalView()
{
  return objc_opt_self(_TtC8SOSBuddy9MetalView);
}

unint64_t sub_100106E54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031FEB8[0];
  if (!qword_10031FEB8[0])
  {
    v1 = objc_opt_self(CAMetalLayer);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, qword_10031FEB8);
  }
  return result;
}

uint64_t sub_100106E90(uint64_t result, uint64_t a2, float32x2_t a3, float32x2_t a4, float32x2_t a5)
{
  float32x2_t v5;
  float32x2_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;

  v5 = vdiv_f32(a3, a5);
  v6 = vdiv_f32(a4, a5);
  v7 = (float)a2;
  v8 = (float)(1.0 - (float)(vmuls_lane_f32(0.5, v6, 1) + 0.5)) * (float)a2;
  v9 = (float)((float)(0.5 * v6.f32[0]) + 0.5) * (float)result;
  v10 = (float)(1.0 - (float)(vmuls_lane_f32(0.5, v5, 1) + 0.5)) * (float)a2;
  v11 = floorf((float)((float)(0.5 * v5.f32[0]) + 0.5) * (float)result);
  if (v11 > (float)result)
    v11 = (float)result;
  if (v11 < 0.0)
    v11 = 0.0;
  v12 = floorf(v8);
  if (v12 > v7)
    v12 = (float)a2;
  if (v12 < 0.0)
    v12 = 0.0;
  v13 = ceilf(v9) - v11;
  v14 = (float)result - v11;
  if (v14 >= v13)
    v14 = v13;
  if (v14 < 0.0)
    v14 = 0.0;
  v15 = ceilf(v10) - v12;
  v16 = v7 - v12;
  if (v16 >= v15)
    v16 = v15;
  if (v16 < 0.0)
    v16 = 0.0;
  if (v11 <= -9.2234e18)
  {
    __break(1u);
    goto LABEL_35;
  }
  if (v11 >= 9.2234e18)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v12 <= -9.2234e18)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v12 >= 9.2234e18)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v14 <= -9.2234e18)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v14 >= 9.2234e18)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if ((LODWORD(v11) & 0x7F800000) == 0x7F800000 || (LODWORD(v12) & 0x7F800000) == 2139095040)
    goto LABEL_40;
  if ((LODWORD(v14) & 0x7F800000) == 0x7F800000 || (LODWORD(v16) & 0x7F800000) == 2139095040)
    goto LABEL_40;
  if (v16 <= -9.2234e18)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v16 < 9.2234e18)
    return (uint64_t)v11;
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_100107028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 88);
}

uint64_t sub_100107030(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[3]);
  swift_release(a1[5]);
  swift_release(a1[7]);
  swift_release(a1[11]);
  swift_release(a1[13]);
  swift_release(a1[16]);
  swift_release(a1[19]);
  return swift_release(a1[22]);
}

uint64_t sub_100107090(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  v12 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 24) = v12;
  v5 = a2[7];
  v13 = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 56) = v5;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  v6 = a2[11];
  *(_QWORD *)(a1 + 88) = v6;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  v7 = a2[13];
  *(_QWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
  v8 = a2[16];
  *(_QWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  v9 = a2[19];
  *(_QWORD *)(a1 + 152) = v9;
  *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
  v10 = a2[22];
  *(_QWORD *)(a1 + 176) = v10;
  swift_retain(v3);
  swift_retain(v12);
  swift_retain(v13);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  return a1;
}

uint64_t *sub_1001071A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[7];
  v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_retain(v10);
  swift_release(v11);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  a1[9] = a2[9];
  a1[10] = a2[10];
  v12 = a1[11];
  v13 = a2[11];
  a1[11] = v13;
  swift_retain(v13);
  swift_release(v12);
  *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
  v14 = a1[13];
  v15 = a2[13];
  a1[13] = v15;
  swift_retain(v15);
  swift_release(v14);
  a1[14] = a2[14];
  a1[15] = a2[15];
  v16 = a1[16];
  v17 = a2[16];
  a1[16] = v17;
  swift_retain(v17);
  swift_release(v16);
  a1[17] = a2[17];
  a1[18] = a2[18];
  v18 = a1[19];
  v19 = a2[19];
  a1[19] = v19;
  swift_retain(v19);
  swift_release(v18);
  a1[20] = a2[20];
  a1[21] = a2[21];
  v20 = a1[22];
  v21 = a2[22];
  a1[22] = v21;
  swift_retain(v21);
  swift_release(v20);
  return a1;
}

__n128 sub_100107300(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t *sub_10010733C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  swift_release(v5);
  v6 = a1[5];
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  swift_release(v6);
  v7 = a1[7];
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  swift_release(v7);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  v8 = a1[11];
  a1[11] = a2[11];
  swift_release(v8);
  *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
  v9 = a1[13];
  a1[13] = a2[13];
  swift_release(v9);
  *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
  v10 = a1[16];
  a1[16] = a2[16];
  swift_release(v10);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  v11 = a1[19];
  a1[19] = a2[19];
  swift_release(v11);
  *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
  v12 = a1[22];
  a1[22] = a2[22];
  swift_release(v12);
  return a1;
}

uint64_t sub_100107428(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 184))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_100107470(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 184) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 184) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for ScrollableContentWithPanelsView(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for ScrollableContentWithPanelsView);
}

uint64_t sub_1001074E8(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[2];
  v4[0] = a2[1];
  v4[1] = v2;
  v4[2] = a2[3];
  return swift_getOpaqueTypeConformance2(v4, &unk_10029A888, 1);
}

uint64_t sub_100107524@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata3;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[16];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[5];

  v66 = a2;
  v4 = a1[2];
  v3 = a1[3];
  v5 = sub_100007FAC(&qword_10031CA58);
  v6 = v3;
  v60 = v3;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v4, v3, v5, 0, 0);
  v8 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v8);
  v10 = type metadata accessor for VStack(255, v8, WitnessTable);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v10);
  v12 = type metadata accessor for ScrollView(255, v10, v11);
  v13 = sub_100007FAC(&qword_10031CA60);
  v61 = a1[4];
  v14 = type metadata accessor for ModifiedContent(255, v61, &type metadata for _PaddingLayout);
  v15 = sub_100007FAC(&qword_10031CA68);
  v16 = type metadata accessor for ModifiedContent(255, v14, v15);
  v17 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v18 = type metadata accessor for ModifiedContent(255, v16, v17);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v13, v18, 0, 0);
  v20 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v21 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v20);
  v22 = type metadata accessor for ZStack(255, v20, v21);
  v23 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v22, 0, 0);
  v24 = type metadata accessor for TupleView(255, v23);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v24);
  v26 = type metadata accessor for VStack(255, v24, v25);
  v27 = type metadata accessor for ModifiedContent(255, v26, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v28 = swift_getTupleTypeMetadata2(255, v12, v27, 0, 0);
  v29 = type metadata accessor for TupleView(255, v28);
  v30 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v29);
  v31 = type metadata accessor for ZStack(255, v29, v30);
  v32 = a1[7];
  v63 = a1[6];
  v64 = a1;
  v62 = v32;
  v79[0] = v6;
  v79[1] = v61;
  v79[2] = v63;
  v79[3] = v32;
  v33 = type metadata accessor for ScrollableContentWithFloatingPanelView(255, (uint64_t)v79);
  v34 = swift_getTupleTypeMetadata2(255, v4, v33, 0, 0);
  v35 = type metadata accessor for TupleView(255, v34);
  v36 = type metadata accessor for _ConditionalContent(255, v31, v35);
  v77 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v31);
  v78 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v35);
  v37 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v36);
  v38 = type metadata accessor for VStack(0, v36, v37);
  v39 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38, v40);
  v42 = (char *)&v59 - v41;
  v43 = sub_100007FAC(&qword_10031CA70);
  v44 = type metadata accessor for ModifiedContent(0, v38, v43);
  v59 = *(_QWORD *)(v44 - 8);
  v46 = __chkstk_darwin(v44, v45);
  v48 = (char *)&v59 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __chkstk_darwin(v46, v49);
  v52 = (char *)&v59 - v51;
  v68 = v4;
  v69 = v60;
  v53 = v64[5];
  v70 = v61;
  v71 = v53;
  v72 = v63;
  v73 = v62;
  v74 = v65;
  v54 = static HorizontalAlignment.center.getter(v50);
  VStack.init(alignment:spacing:content:)(v54, 0, 0, sub_1001097C4, v67, v36, v37);
  LOBYTE(v35) = sub_100091590();
  v55 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v38);
  sub_100092868(v35 & 1, v38, v55);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v38);
  v56 = sub_1000084FC(&qword_10031CA78, &qword_10031CA70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v75 = v55;
  v76 = v56;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v44);
  sub_100092E98((uint64_t)v48, v44, (uint64_t)v52);
  v57 = *(void (**)(char *, uint64_t))(v59 + 8);
  v57(v48, v44);
  sub_1000903EC((uint64_t)v52, v44, v66);
  return ((uint64_t (*)(char *, uint64_t))v57)(v52, v44);
}

uint64_t sub_1001079C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TupleTypeMetadata3;
  uint64_t v23;
  uint64_t WitnessTable;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD v115[2];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128[2];
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  _OWORD v141[12];
  _OWORD v142[12];
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;

  v98 = a7;
  v99 = a1;
  v109 = a4;
  v110 = a6;
  v107 = a8;
  v108 = a5;
  *(_QWORD *)&v155 = a3;
  *((_QWORD *)&v155 + 1) = a4;
  *(_QWORD *)&v156 = a6;
  *((_QWORD *)&v156 + 1) = a7;
  v94 = type metadata accessor for ScrollableContentWithFloatingPanelView(255, (uint64_t)&v155);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, a2, v94, 0, 0);
  v12 = type metadata accessor for TupleView(0, TupleTypeMetadata2);
  v97 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12, v13);
  v96 = (char *)&v91 - v15;
  v93 = *(_QWORD *)(a2 - 8);
  v17 = __chkstk_darwin(v14, v16);
  v95 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  v105 = (uint64_t *)((char *)&v91 - v20);
  v21 = sub_100007FAC(&qword_10031CA58);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, a2, a3, v21, 0, 0);
  v23 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v23);
  v25 = type metadata accessor for VStack(255, v23, WitnessTable);
  v26 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v25);
  v27 = type metadata accessor for ScrollView(255, v25, v26);
  v28 = sub_100007FAC(&qword_10031CA60);
  v29 = type metadata accessor for ModifiedContent(255, a4, &type metadata for _PaddingLayout);
  v30 = sub_100007FAC(&qword_10031CA68);
  v31 = type metadata accessor for ModifiedContent(255, v29, v30);
  v32 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v33 = type metadata accessor for ModifiedContent(255, v31, v32);
  v34 = swift_getTupleTypeMetadata2(255, v28, v33, 0, 0);
  v35 = type metadata accessor for TupleView(255, v34);
  v36 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v35);
  v37 = type metadata accessor for ZStack(255, v35, v36);
  v38 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v37, 0, 0);
  v39 = type metadata accessor for TupleView(255, v38);
  v40 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v39);
  v41 = type metadata accessor for VStack(255, v39, v40);
  v42 = type metadata accessor for ModifiedContent(255, v41, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v43 = swift_getTupleTypeMetadata2(255, v27, v42, 0, 0);
  v44 = type metadata accessor for TupleView(255, v43);
  v45 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v44);
  v46 = type metadata accessor for ZStack(0, v44, v45);
  v92 = *(_QWORD *)(v46 - 8);
  v47 = __chkstk_darwin(v46, v46);
  v49 = (char *)&v91 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47, v50);
  v52 = (char *)&v91 - v51;
  v100 = v53;
  v106 = v12;
  v54 = type metadata accessor for _ConditionalContent(0, v53, v12);
  v103 = *(_QWORD *)(v54 - 8);
  v104 = v54;
  __chkstk_darwin(v54, v55);
  v101 = a3;
  v102 = (char *)&v91 - v56;
  v57 = a2;
  *(_QWORD *)&v155 = a2;
  *((_QWORD *)&v155 + 1) = a3;
  *(_QWORD *)&v156 = v109;
  v58 = v108;
  *((_QWORD *)&v156 + 1) = v108;
  *(_QWORD *)&v157 = v110;
  v59 = v98;
  *((_QWORD *)&v157 + 1) = v98;
  type metadata accessor for ScrollableContentWithPanelsView(0, (uint64_t)&v155);
  v60 = v99;
  v61 = sub_100091590();
  if ((v61 & 1) != 0)
  {
    v105 = &v91;
    v63 = __chkstk_darwin(v61, v62);
    v64 = v101;
    *(&v91 - 8) = a2;
    *(&v91 - 7) = v64;
    *(&v91 - 6) = v109;
    *(&v91 - 5) = v58;
    *(&v91 - 4) = v110;
    *(&v91 - 3) = v59;
    v90 = v60;
    v65 = static Alignment.center.getter(v63);
    ZStack.init(alignment:content:)(v65);
    v66 = v100;
    v67 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v100);
    sub_100092E98((uint64_t)v49, v66, (uint64_t)v52);
    v68 = *(void (**)(char *, uint64_t))(v92 + 8);
    v68(v49, v66);
    sub_1000903EC((uint64_t)v52, v66, (uint64_t)v49);
    v69 = v106;
    v70 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v106);
    v71 = (uint64_t)v102;
    sub_100090404((uint64_t)v49, v66, v69, v67, v70);
    v68(v49, v66);
    v68(v52, v66);
  }
  else
  {
    v72 = (uint64_t)v95;
    (*(void (**)(void))(v60 + 16))();
    sub_100092E98(v72, a2, (uint64_t)v105);
    v73 = v93;
    v92 = *(_QWORD *)(v93 + 8);
    ((void (*)(uint64_t, uint64_t))v92)(v72, a2);
    v74 = *(_QWORD *)(v60 + 32);
    v75 = *(_QWORD *)(v60 + 40);
    v76 = *(_QWORD *)(v60 + 48);
    v77 = *(_QWORD *)(v60 + 56);
    v78 = *(_BYTE *)(v60 + 64);
    swift_retain(v75);
    swift_retain(v77);
    v90 = v59;
    sub_1001E7F24(v74, v75, v76, v77, v78, (uint64_t)&v155);
    v151 = v163;
    v152 = v164;
    v153 = v165;
    v154 = v166;
    v147 = v159;
    v148 = v160;
    v149 = v161;
    v150 = v162;
    v143 = v155;
    v144 = v156;
    v145 = v157;
    v146 = v158;
    v79 = v94;
    v80 = swift_getWitnessTable(&unk_10025DE7C, v94);
    sub_100092E98((uint64_t)&v143, v79, (uint64_t)&v129);
    sub_1001097D0((uint64_t *)&v155);
    v81 = (uint64_t)v105;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v73 + 16))(v72, v105, v57);
    v141[8] = v137;
    v141[9] = v138;
    v141[10] = v139;
    v141[11] = v140;
    v141[4] = v133;
    v141[5] = v134;
    v141[6] = v135;
    v141[7] = v136;
    v141[0] = v129;
    v141[1] = v130;
    v141[2] = v131;
    v141[3] = v132;
    v124 = v137;
    v125 = v138;
    v126 = v139;
    v127 = v140;
    v120 = v133;
    v121 = v134;
    v122 = v135;
    v123 = v136;
    v116 = v129;
    v117 = v130;
    v118 = v131;
    v119 = v132;
    v128[0] = v72;
    v128[1] = (uint64_t)&v116;
    sub_100109864((uint64_t *)v141);
    v115[0] = v57;
    v115[1] = v79;
    v113 = v108;
    v114 = v80;
    v82 = (uint64_t)v96;
    sub_10009058C(v128, 2uLL, (uint64_t)v115);
    v142[8] = v124;
    v142[9] = v125;
    v142[10] = v126;
    v142[11] = v127;
    v142[4] = v120;
    v142[5] = v121;
    v142[6] = v122;
    v142[7] = v123;
    v142[0] = v116;
    v142[1] = v117;
    v142[2] = v118;
    v142[3] = v119;
    sub_1001097D0((uint64_t *)v142);
    v83 = (void (*)(uint64_t, uint64_t))v92;
    ((void (*)(uint64_t, uint64_t))v92)(v72, v57);
    v66 = v100;
    v84 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v100);
    v69 = v106;
    v85 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v106);
    v71 = (uint64_t)v102;
    sub_1000904C8(v82, v66, v69, v84, v85);
    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v82, v69);
    v151 = v137;
    v152 = v138;
    v153 = v139;
    v154 = v140;
    v147 = v133;
    v148 = v134;
    v149 = v135;
    v150 = v136;
    v143 = v129;
    v144 = v130;
    v145 = v131;
    v146 = v132;
    sub_1001097D0((uint64_t *)&v143);
    v83(v81, v57);
  }
  v86 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v66);
  v87 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v69);
  v111 = v86;
  v112 = v87;
  v88 = v104;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v104);
  sub_1000903EC(v71, v88, v107);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v103 + 8))(v71, v88);
}

uint64_t sub_100108204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t WitnessTable;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t TupleTypeMetadata3;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  char *v69;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89[16];
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97[16];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[2];
  uint64_t v108[4];

  v86 = a7;
  v85 = a6;
  v84 = a1;
  v87 = a8;
  v12 = sub_100007FAC(&qword_10031CA60);
  v13 = type metadata accessor for ModifiedContent(255, a4, &type metadata for _PaddingLayout);
  v14 = sub_100007FAC(&qword_10031CA68);
  v15 = type metadata accessor for ModifiedContent(255, v13, v14);
  v16 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v17 = type metadata accessor for ModifiedContent(255, v15, v16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v12, v17, 0, 0);
  v19 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v19);
  v21 = type metadata accessor for ZStack(255, v19, WitnessTable);
  v22 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v21, 0, 0);
  v80 = type metadata accessor for TupleView(255, v22);
  v79 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v80);
  v23 = type metadata accessor for VStack(0, v80, v79);
  v24 = *(_QWORD *)(v23 - 8);
  v78 = v23;
  v82 = v24;
  __chkstk_darwin(v23, v23);
  v76 = (char *)&v71 - v25;
  v75 = type metadata accessor for ModifiedContent(0, v26, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v83 = *(_QWORD *)(v75 - 8);
  v28 = __chkstk_darwin(v75, v27);
  v77 = (char *)&v71 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v30);
  v81 = (uint64_t)&v71 - v31;
  v32 = sub_100007FAC(&qword_10031CA58);
  v33 = a2;
  v71 = a2;
  v72 = a3;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, a2, a3, v32, 0, 0);
  v35 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v36 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v35);
  v37 = type metadata accessor for VStack(255, v35, v36);
  v38 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v37);
  v39 = type metadata accessor for ScrollView(0, v37, v38);
  v88 = *(_QWORD *)(v39 - 8);
  v41 = __chkstk_darwin(v39, v40);
  v43 = (char *)&v71 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __chkstk_darwin(v41, v44);
  v47 = (char *)&v71 - v46;
  v73 = (char *)&v71 - v46;
  v48 = static Axis.Set.vertical.getter(v45);
  v98 = v33;
  v99 = a3;
  v100 = a4;
  v101 = a5;
  v49 = v85;
  v50 = v86;
  v102 = v85;
  v103 = v86;
  v51 = v84;
  v104 = v84;
  ScrollView.init(_:showsIndicators:content:)(v48, 0, sub_100109904, v97, v37, v38);
  v74 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v39);
  sub_100092E98((uint64_t)v43, v39, (uint64_t)v47);
  v52 = *(uint64_t (**)(char *, uint64_t))(v88 + 8);
  v53 = v52(v43, v39);
  v90 = v71;
  v91 = v72;
  v92 = a4;
  v93 = a5;
  v94 = v49;
  v95 = v50;
  v96 = v51;
  v54 = static HorizontalAlignment.center.getter(v53);
  v55 = v76;
  v56 = VStack.init(alignment:spacing:content:)(v54, 0, 0, sub_100109910, v89, v80, v79);
  v57 = static SafeAreaRegions.all.getter(v56);
  v59 = static Edge.Set.all.getter(v58);
  v60 = v78;
  v61 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v78);
  v62 = (uint64_t)v77;
  View.ignoresSafeArea(_:edges:)(v57, v59, v60, v61);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v55, v60);
  v108[2] = v61;
  v108[3] = (uint64_t)&protocol witness table for _SafeAreaRegionsIgnoringLayout;
  v63 = v75;
  v64 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v75);
  v65 = v81;
  sub_100092E98(v62, v63, v81);
  v66 = v83;
  v67 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
  v68 = v62;
  v67(v62, v63);
  v69 = v73;
  (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v43, v73, v39);
  v108[0] = (uint64_t)v43;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v68, v65, v63);
  v108[1] = v68;
  v107[0] = v39;
  v107[1] = v63;
  v105 = v74;
  v106 = v64;
  sub_10009058C(v108, 2uLL, (uint64_t)v107);
  v67(v65, v63);
  v52(v69, v39);
  v67(v68, v63);
  return v52(v43, v39);
}

uint64_t sub_10010878C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t TupleTypeMetadata3;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v30 = a6;
  v31 = a7;
  v29 = a5;
  v32 = a8;
  v12 = sub_100007FAC(&qword_10031CA58);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, a2, a3, v12, 0, 0);
  v14 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v14);
  v16 = type metadata accessor for VStack(0, v14, WitnessTable);
  v17 = *(_QWORD *)(v16 - 8);
  v19 = __chkstk_darwin(v16, v18);
  v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v19, v22);
  v25 = (char *)&v29 - v24;
  v34 = a2;
  v35 = a3;
  v36 = a4;
  v37 = v29;
  v38 = v30;
  v39 = v31;
  v40 = a1;
  v26 = static HorizontalAlignment.center.getter(v23);
  VStack.init(alignment:spacing:content:)(v26, 0, 0, sub_1001099A0, v33, v14, WitnessTable);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v16);
  sub_100092E98((uint64_t)v21, v16, (uint64_t)v25);
  v27 = *(void (**)(char *, uint64_t))(v17 + 8);
  v27(v21, v16);
  sub_1000903EC((uint64_t)v25, v16, v32);
  return ((uint64_t (*)(char *, uint64_t))v27)(v25, v16);
}

uint64_t sub_10010892C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  char *v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  _QWORD *v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t (*v47)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t (*v65)(char *, uint64_t);
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD v74[3];
  uint64_t v75;
  double v76;
  __int128 *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  unsigned __int8 v83;
  uint64_t v84;
  unsigned __int8 v85;
  uint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;

  v68 = a5;
  v64 = a4;
  v8 = a1;
  v66 = a6;
  v58 = *(_QWORD *)(a3 - 8);
  v9 = __chkstk_darwin(a1, a2);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v9, v12);
  v15 = (char *)&v49 - v14;
  v69 = (char *)&v49 - v14;
  v61 = *(_QWORD *)(v16 - 8);
  v17 = v61;
  v18 = __chkstk_darwin(v13, v16);
  v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = v20;
  v22 = __chkstk_darwin(v18, v21);
  v24 = (char *)&v49 - v23;
  v70 = (char *)&v49 - v23;
  (*(void (**)(void))(v22 + 16))();
  v62 = a2;
  sub_100092E98((uint64_t)v20, a2, (uint64_t)v24);
  v65 = *(uint64_t (**)(char *, uint64_t))(v17 + 8);
  v25 = v65(v20, a2);
  v26 = *(void (**)(uint64_t))(v8 + 32);
  v27 = v11;
  v59 = v11;
  v26(v25);
  v60 = a3;
  sub_100092E98((uint64_t)v11, a3, (uint64_t)v15);
  v28 = v58;
  v63 = *(double (**)(char *, uint64_t))(v58 + 8);
  v29.n128_f64[0] = v63(v27, a3);
  v30 = static Color.clear.getter(v29);
  v78 = *(_OWORD *)(v8 + 72);
  v79 = *(_QWORD *)(v8 + 88);
  v31 = sub_100003DB8(&qword_10031B660);
  State.wrappedValue.getter(&v75, v31);
  v32 = v76;
  v78 = *(_OWORD *)(v8 + 72);
  v79 = *(_QWORD *)(v8 + 88);
  v33 = State.wrappedValue.getter(&v75, v31);
  v34 = v76;
  v35 = static Alignment.center.getter(v33);
  sub_100132164(0.0, 1, 0.0, 1, INFINITY, 0, v32, 0, (uint64_t)&v78, 0.0, 1, v34, 0, v35, v36, v30);
  swift_release(v30);
  v37 = v78;
  LOBYTE(v30) = v79;
  v38 = v80;
  LOBYTE(v8) = v81;
  v39 = v82;
  v57 = v83;
  v56 = v84;
  v55 = v85;
  v40 = v86;
  v54 = v87;
  v53 = v88;
  v52 = v89;
  v51 = v90;
  v50 = v91;
  v41 = (uint64_t)v67;
  v42 = v62;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v67, v70, v62);
  v75 = v41;
  v43 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  v44 = v59;
  v45 = v60;
  v43(v59, v69, v60);
  v78 = v37;
  LOBYTE(v79) = v30;
  v80 = v38;
  v81 = v8;
  v82 = v39;
  v83 = v57;
  v84 = v56;
  v85 = v55;
  v86 = v40;
  v87 = v54;
  v88 = v53;
  v89 = v52;
  v90 = v51;
  v91 = v50;
  v76 = *(double *)&v44;
  v77 = &v78;
  swift_retain(v37);
  v74[0] = v42;
  v74[1] = v45;
  v74[2] = sub_100003DB8(&qword_10031CA58);
  v71 = v64;
  v72 = v68;
  v73 = sub_100092B10();
  sub_10009058C(&v75, 3uLL, (uint64_t)v74);
  swift_release(v37);
  v46 = (void (*)(char *, uint64_t))v63;
  v63(v69, v45);
  v47 = v65;
  v65(v70, v42);
  swift_release(v78);
  v46(v44, v45);
  return v47(v67, v42);
}

uint64_t sub_100108DA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t WitnessTable;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[2];
  uint64_t v49;
  char v50;
  uint64_t v51[3];

  v36 = a6;
  v37 = a7;
  v35 = a5;
  v38 = a8;
  v12 = sub_100007FAC(&qword_10031CA60);
  v13 = type metadata accessor for ModifiedContent(255, a4, &type metadata for _PaddingLayout);
  v14 = sub_100007FAC(&qword_10031CA68);
  v15 = type metadata accessor for ModifiedContent(255, v13, v14);
  v16 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v17 = type metadata accessor for ModifiedContent(255, v15, v16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v12, v17, 0, 0);
  v19 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v19);
  v21 = type metadata accessor for ZStack(0, v19, WitnessTable);
  v22 = *(_QWORD *)(v21 - 8);
  v24 = __chkstk_darwin(v21, v23);
  v26 = (char *)&v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v24, v27);
  v30 = (char *)&v35 - v29;
  v31 = static Alignment.bottom.getter(v28);
  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = v35;
  v43 = v36;
  v44 = v37;
  v45 = a1;
  ZStack.init(alignment:content:)(v31);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v21);
  sub_100092E98((uint64_t)v26, v21, (uint64_t)v30);
  v33 = *(void (**)(char *, uint64_t))(v22 + 8);
  v33(v26, v21);
  v49 = 0;
  v50 = 1;
  v51[0] = (uint64_t)&v49;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v26, v30, v21);
  v51[1] = (uint64_t)v26;
  v48[0] = &type metadata for Spacer;
  v48[1] = v21;
  v46 = &protocol witness table for Spacer;
  v47 = v32;
  sub_10009058C(v51, 2uLL, (uint64_t)v48);
  v33(v30, v21);
  return ((uint64_t (*)(char *, uint64_t))v33)(v26, v21);
}

uint64_t sub_100108FE0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  _QWORD *v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t WitnessTable;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  void (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t result;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD v91[2];
  _OWORD v92[8];
  uint64_t v93;
  uint64_t v94[8];
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;

  v78 = a6;
  v79 = a7;
  v76 = a3;
  v77 = a5;
  v88 = a8;
  v74 = *(_QWORD *)(a4 - 8);
  v75 = a2;
  __chkstk_darwin(a1, a2);
  v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ModifiedContent(0, v12, &type metadata for _PaddingLayout);
  v81 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v73 - v15;
  v17 = sub_100007FAC(&qword_10031CA68);
  v18 = type metadata accessor for ModifiedContent(0, v13, v17);
  v84 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v19);
  v82 = (char *)&v73 - v20;
  v21 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v80 = v18;
  v22 = type metadata accessor for ModifiedContent(0, v18, v21);
  v85 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22, v23);
  v87 = (char *)&v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24, v26);
  v83 = (char *)&v73 - v28;
  __chkstk_darwin(v27, v29);
  v86 = (uint64_t)&v73 - v30;
  v95 = *(_OWORD *)(a1 + 9);
  v96 = a1[11];
  v97 = *(_OWORD *)(a1 + 9);
  *(_QWORD *)&v98 = a1[11];
  v31 = sub_100003DB8(&qword_10031B660);
  State.wrappedValue.getter(v92, v31);
  v32 = *((double *)v92 + 1);
  v97 = v95;
  *(_QWORD *)&v98 = v96;
  v33 = State.wrappedValue.getter(v92, v31);
  v34 = *((double *)v92 + 1);
  v35 = static Alignment.center.getter(v33);
  v37 = sub_10013230C(0.0, 1, 0.0, 1, INFINITY, 0, v32, 0, (uint64_t)&v97, 0.0, 1.0, 0.0, 1, v34, 0, v35, v36, 6);
  v38 = ((uint64_t (*)(double))a1[6])(v37);
  v39 = static Edge.Set.bottom.getter(v38);
  v40 = *a1;
  if (*a1)
  {
    v41 = v39;
    v42 = qword_100315788;
    swift_retain(*a1);
    if (v42 != -1)
      swift_once(&qword_100315788, sub_10006F500);
    v43 = qword_10033FC50;
    swift_release(v40);
    v44 = v79;
    View.padding(_:_:)(v41, v43, 0, a4, v79);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v11, a4);
    v45 = swift_allocObject(&unk_1002F0560, 248, 7);
    v46 = v76;
    *(_QWORD *)(v45 + 16) = v75;
    *(_QWORD *)(v45 + 24) = v46;
    v47 = v77;
    *(_QWORD *)(v45 + 32) = a4;
    *(_QWORD *)(v45 + 40) = v47;
    *(_QWORD *)(v45 + 48) = v78;
    *(_QWORD *)(v45 + 56) = v44;
    v48 = *((_OWORD *)a1 + 9);
    *(_OWORD *)(v45 + 192) = *((_OWORD *)a1 + 8);
    *(_OWORD *)(v45 + 208) = v48;
    *(_OWORD *)(v45 + 224) = *((_OWORD *)a1 + 10);
    *(_QWORD *)(v45 + 240) = a1[22];
    v49 = *((_OWORD *)a1 + 5);
    *(_OWORD *)(v45 + 128) = *((_OWORD *)a1 + 4);
    *(_OWORD *)(v45 + 144) = v49;
    v50 = *((_OWORD *)a1 + 7);
    *(_OWORD *)(v45 + 160) = *((_OWORD *)a1 + 6);
    *(_OWORD *)(v45 + 176) = v50;
    v51 = *((_OWORD *)a1 + 1);
    *(_OWORD *)(v45 + 64) = *(_OWORD *)a1;
    *(_OWORD *)(v45 + 80) = v51;
    v52 = *((_OWORD *)a1 + 3);
    *(_OWORD *)(v45 + 96) = *((_OWORD *)a1 + 2);
    *(_OWORD *)(v45 + 112) = v52;
    sub_100007DC0(a1);
    type metadata accessor for CGSize(0);
    v54 = v53;
    v94[6] = v44;
    v94[7] = (uint64_t)&protocol witness table for _PaddingLayout;
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
    v56 = sub_1000052EC(&qword_1003185D8, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
    v57 = v82;
    View.onGeometryChange<A>(of:do:)(sub_10002EB40, 0, sub_10010998C, v45, v13, v54, WitnessTable, v56);
    swift_release(v45);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v16, v13);
    v58 = sub_1000084FC(&qword_10031CA80, &qword_10031CA68, (uint64_t)&protocol conformance descriptor for _GeometryActionModifier<A>);
    v94[4] = WitnessTable;
    v94[5] = v58;
    v59 = v80;
    v60 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v80);
    v61 = (uint64_t)v83;
    View.accessibilitySortPriority(_:)(v59, v60, -1.0);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v57, v59);
    v62 = sub_1000052EC(&qword_100316C10, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    v94[2] = v60;
    v94[3] = v62;
    v63 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v22);
    v64 = v86;
    sub_100092E98(v61, v22, v86);
    v65 = v85;
    v66 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
    v66(v61, v22);
    v92[6] = v103;
    v92[7] = v104;
    v93 = v105;
    v92[2] = v99;
    v92[3] = v100;
    v92[4] = v101;
    v92[5] = v102;
    v92[0] = v97;
    v92[1] = v98;
    v94[0] = (uint64_t)v92;
    v67 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
    v68 = (uint64_t)v87;
    v67(v87, v64, v22);
    v94[1] = v68;
    v91[0] = sub_100003DB8(&qword_10031CA60);
    v91[1] = v22;
    v89 = sub_100092A40();
    v90 = v63;
    sub_10009058C(v94, 2uLL, (uint64_t)v91);
    v66(v64, v22);
    return ((uint64_t (*)(uint64_t, uint64_t))v66)(v68, v22);
  }
  else
  {
    v70 = a1[1];
    v71 = type metadata accessor for UIMetrics();
    v72 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v70, v71, v72);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001095A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18[2];
  __int128 v19;
  uint64_t v20;

  v3 = *a1;
  v4 = a1[1];
  if (qword_1003158D8 != -1)
    swift_once(&qword_1003158D8, sub_1000D9904);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10000D744(v5, (uint64_t)qword_10033FF40);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v18[0] = v10;
    *(_DWORD *)v9 = 136446210;
    *(_QWORD *)&v19 = v3;
    *((_QWORD *)&v19 + 1) = v4;
    type metadata accessor for CGSize(0);
    v13 = String.init<A>(describing:)(&v19, v11, v12);
    v15 = v14;
    *(_QWORD *)&v19 = sub_100172BEC(v13, v14, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, (char *)&v19 + 8, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Floating panel size changed: %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }

  v19 = *(_OWORD *)(a2 + 72);
  v20 = *(_QWORD *)(a2 + 88);
  v18[0] = v3;
  v18[1] = v4;
  v16 = sub_100003DB8(&qword_10031B660);
  return State.wrappedValue.setter(v18, v16);
}

uint64_t sub_100109764@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100107524(a1, a2);
}

uint64_t sub_1001097C4()
{
  return sub_1001099AC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001079C4);
}

uint64_t *sub_1001097D0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[3];
  v4 = a1[8];
  v5 = a1[11];
  v6 = a1[16];
  v7 = a1[21];
  v8 = a1[23];
  swift_release(a1[5]);
  swift_release(v3);
  swift_release(v2);
  swift_release(v4);
  swift_release(v5);
  swift_release(v6);
  swift_release(v7);
  swift_release(v8);
  return a1;
}

uint64_t *sub_100109864(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[8];
  v6 = a1[11];
  v7 = a1[16];
  v8 = a1[21];
  swift_retain(a1[23]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  return a1;
}

uint64_t sub_1001098F8()
{
  return sub_1001099AC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100108204);
}

uint64_t sub_100109904()
{
  return sub_1001099AC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10010878C);
}

uint64_t sub_100109910()
{
  return sub_1001099AC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100108DA4);
}

uint64_t sub_10010991C()
{
  return sub_1001099AC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100108FE0);
}

uint64_t sub_100109928()
{
  _QWORD *v0;

  swift_release(v0[8]);
  swift_release(v0[11]);
  swift_release(v0[13]);
  swift_release(v0[15]);
  swift_release(v0[19]);
  swift_release(v0[21]);
  swift_release(v0[24]);
  swift_release(v0[27]);
  swift_release(v0[30]);
  return swift_deallocObject(v0, 248, 7);
}

uint64_t sub_10010998C(uint64_t *a1)
{
  uint64_t v1;

  return sub_1001095A0(a1, v1 + 64);
}

uint64_t sub_1001099A0()
{
  return sub_1001099AC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10010892C);
}

uint64_t sub_1001099AC(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[8], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1001099C4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata3;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v40[2];
  __int128 v41;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = sub_100007FAC(&qword_10031CA58);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v2, v3, v5, 0, 0);
  v7 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v7);
  v9 = type metadata accessor for VStack(255, v7, WitnessTable);
  v10 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v9);
  v11 = type metadata accessor for ScrollView(255, v9, v10);
  v12 = sub_100007FAC(&qword_10031CA60);
  v13 = type metadata accessor for ModifiedContent(255, v4, &type metadata for _PaddingLayout);
  v14 = sub_100007FAC(&qword_10031CA68);
  v15 = type metadata accessor for ModifiedContent(255, v13, v14);
  v16 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v17 = type metadata accessor for ModifiedContent(255, v15, v16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v12, v17, 0, 0);
  v19 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v19);
  v21 = type metadata accessor for ZStack(255, v19, v20);
  v22 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v21, 0, 0);
  v23 = type metadata accessor for TupleView(255, v22);
  v24 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v23);
  v25 = type metadata accessor for VStack(255, v23, v24);
  v26 = type metadata accessor for ModifiedContent(255, v25, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v27 = swift_getTupleTypeMetadata2(255, v11, v26, 0, 0);
  v28 = type metadata accessor for TupleView(255, v27);
  v29 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v28);
  v30 = type metadata accessor for ZStack(255, v28, v29);
  v40[0] = v3;
  v40[1] = v4;
  v41 = *((_OWORD *)a1 + 2);
  v31 = type metadata accessor for ScrollableContentWithFloatingPanelView(255, (uint64_t)v40);
  v32 = swift_getTupleTypeMetadata2(255, v2, v31, 0, 0);
  v33 = type metadata accessor for TupleView(255, v32);
  v34 = type metadata accessor for _ConditionalContent(255, v30, v33);
  swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v30);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v33);
  v35 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v34);
  v36 = type metadata accessor for VStack(255, v34, v35);
  v37 = sub_100007FAC(&qword_10031CA70);
  v38 = type metadata accessor for ModifiedContent(255, v36, v37);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v36);
  sub_1000084FC(&qword_10031CA78, &qword_10031CA70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v38);
}

uint64_t Angle.debugDescription.getter(double a1)
{
  Swift::String v2;
  Swift::String v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0xE000000000000000;
  v2._countAndFlagsBits = 0x203A6765643CLL;
  v2._object = (void *)0xE600000000000000;
  String.append(_:)(v2);
  Double.write<A>(to:)(v5, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a1 * 57.2957795);
  v3._countAndFlagsBits = 62;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return v5[0];
}

uint64_t sub_100109D68()
{
  double *v0;
  double v1;
  Swift::String v2;
  Swift::String v3;
  _QWORD v5[2];

  v1 = *v0;
  v5[0] = 0;
  v5[1] = 0xE000000000000000;
  v2._countAndFlagsBits = 0x203A6765643CLL;
  v2._object = (void *)0xE600000000000000;
  String.append(_:)(v2);
  Double.write<A>(to:)(v5, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v1 * 57.2957795);
  v3._countAndFlagsBits = 62;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return v5[0];
}

uint64_t destroy for BuiltInSelectRoadsidePhoneNumberContentView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[6]);
  swift_release(a1[7]);
  return swift_release(a1[9]);
}

uint64_t initializeWithCopy for BuiltInSelectRoadsidePhoneNumberContentView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v8 = a2[4];
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  v9 = a2[6];
  *(_QWORD *)(a1 + 48) = v9;
  v10 = a2[9];
  v12 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 72) = v10;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v12);
  swift_retain(v10);
  return a1;
}

uint64_t *assignWithCopy for BuiltInSelectRoadsidePhoneNumberContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a1[4];
  v9 = a2[4];
  a1[4] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[5] = a2[5];
  v10 = a2[6];
  v11 = a1[6];
  a1[6] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[7];
  v13 = a1[7];
  a1[7] = v12;
  swift_retain(v12);
  swift_release(v13);
  v15 = a2[8];
  v14 = a2[9];
  v16 = a1[9];
  a1[8] = v15;
  a1[9] = v14;
  swift_retain(v14);
  swift_release(v16);
  return a1;
}

uint64_t *assignWithTake for BuiltInSelectRoadsidePhoneNumberContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  v7 = a1[4];
  v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_release(v7);
  a1[5] = a2[5];
  swift_release(a1[6]);
  v9 = a1[7];
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  swift_release(v9);
  v10 = a1[9];
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  swift_release(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for BuiltInSelectRoadsidePhoneNumberContentView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BuiltInSelectRoadsidePhoneNumberContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BuiltInSelectRoadsidePhoneNumberContentView()
{
  return &type metadata for BuiltInSelectRoadsidePhoneNumberContentView;
}

uint64_t sub_10010A0D4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029A8F0, 1);
}

uint64_t sub_10010A0E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t KeyPath;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  Swift::String *v26;
  uint64_t (*v27)();
  _OWORD *v28;
  id v29;
  Swift::String v30;
  Swift::String_optional v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  __n128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t, __n128);
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  double v48;
  void (*v49)(char *, uint64_t, double);
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  Swift::String v60;

  v4 = sub_100003DB8(&qword_10031FF48);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v58 = (char *)&v54 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    swift_retain(*(_QWORD *)(a1 + 16));
    v13 = sub_100062C88();
    swift_release(v12);
    v56 = a2;
    v57 = v5;
    if (v13)
    {
      v14 = v13;
      v15 = (_QWORD *)v13;
    }
    else
    {
      v16 = *(_QWORD *)(v12 + 160);
      if (v16)
        v15 = *(_QWORD **)(v12 + 160);
      else
        v15 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v16);
      v14 = 0;
    }
    v59 = v15;
    KeyPath = swift_getKeyPath(&unk_100256398);
    v18 = (_OWORD *)swift_allocObject(&unk_1002F0660, 96, 7);
    v19 = *(_OWORD *)(a1 + 48);
    v18[3] = *(_OWORD *)(a1 + 32);
    v18[4] = v19;
    v18[5] = *(_OWORD *)(a1 + 64);
    v20 = *(_OWORD *)(a1 + 16);
    v18[1] = *(_OWORD *)a1;
    v18[2] = v20;
    sub_10010A7A8((uint64_t *)a1);
    swift_bridgeObjectRetain(v14);
    v21 = sub_100003DB8(&qword_100317980);
    v22 = sub_1000084FC(&qword_100319618, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
    v23 = sub_10007E1D8();
    ForEach<>.init(_:id:content:)(&v59, KeyPath, sub_10010A7A0, v18, v21, &type metadata for QuestionnaireButton, v22, &protocol witness table for String, v23);
    if (v13)
    {
      v24 = swift_bridgeObjectRelease(v14);
      v55 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
    }
    else
    {
      v29 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v60._countAndFlagsBits = 0xD00000000000005ELL;
      v60._object = (void *)0x8000000100269DE0;
      v30._object = (void *)0x8000000100269DC0;
      v31.value._object = (void *)0x80000001002621B0;
      v30._countAndFlagsBits = 0xD000000000000012;
      v31.value._countAndFlagsBits = 0xD000000000000012;
      v32._countAndFlagsBits = 0;
      v32._object = (void *)0xE000000000000000;
      v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v30, v31, (NSBundle)v29, v32, v60);

      v34 = type metadata accessor for OptionPresentation();
      v26 = (Swift::String *)swift_allocObject(v34, 72, 7);
      v26[1] = v33;
      v26[3]._countAndFlagsBits = 0;
      v26[3]._object = 0;
      v26[4]._countAndFlagsBits = static Color.clear.getter(v35);
      v26[2]._countAndFlagsBits = 0;
      v26[2]._object = 0;
      v28 = (_OWORD *)swift_allocObject(&unk_1002F0688, 96, 7);
      v36 = *(_OWORD *)(a1 + 48);
      v28[3] = *(_OWORD *)(a1 + 32);
      v28[4] = v36;
      v28[5] = *(_OWORD *)(a1 + 64);
      v37 = *(_OWORD *)(a1 + 16);
      v28[1] = *(_OWORD *)a1;
      v28[2] = v37;
      sub_10010A7A8((uint64_t *)a1);
      v38 = type metadata accessor for UIMetrics();
      v39 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
      v55 = EnvironmentObject.init()(v38, v39);
      v25 = v40;
      v27 = sub_10010A868;
    }
    v42 = v57;
    v41 = v58;
    v43 = *(void (**)(char *, char *, uint64_t, __n128))(v57 + 16);
    v44 = v4;
    v43(v9, v58, v4, v24);
    v45 = v56;
    ((void (*)(uint64_t, char *, uint64_t))v43)(v56, v9, v44);
    v46 = (uint64_t *)(v45 + *(int *)(sub_100003DB8(&qword_10031FF50) + 48));
    v47 = v55;
    *v46 = v55;
    v46[1] = v25;
    v46[2] = (uint64_t)v26;
    v46[3] = 0;
    v46[4] = 0;
    v46[5] = (uint64_t)v27;
    v46[6] = (uint64_t)v28;
    v48 = sub_10010A870(v47, v25, (uint64_t)v26, 0, 0, (uint64_t)v27, (uint64_t)v28);
    v49 = *(void (**)(char *, uint64_t, double))(v42 + 8);
    v49(v41, v44, v48);
    sub_10010A8A8(v47, v25, (uint64_t)v26, 0, 0, (uint64_t)v27, (uint64_t)v28);
    return ((uint64_t (*)(char *, uint64_t))v49)(v9, v44);
  }
  else
  {
    v51 = *(_QWORD *)(a1 + 24);
    v52 = type metadata accessor for RoadsideAssistanceModel();
    v53 = sub_100056D60(&qword_100318688, (uint64_t (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel);
    result = EnvironmentObject.error()(0, v51, v52, v53);
    __break(1u);
  }
  return result;
}

uint64_t sub_10010A4EC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __n128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v6 = *a1;
  v5 = a1[1];
  v7 = type metadata accessor for OptionPresentation();
  v8 = (_QWORD *)swift_allocObject(v7, 72, 7);
  v8[2] = v6;
  v8[3] = v5;
  v8[6] = 0;
  v8[7] = 0;
  v9 = swift_bridgeObjectRetain(v5);
  v8[8] = static Color.clear.getter(v9);
  v8[4] = 0;
  v8[5] = 0;
  v10 = swift_allocObject(&unk_1002F06B0, 112, 7);
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v10 + 64) = v11;
  *(_OWORD *)(v10 + 80) = *(_OWORD *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 96) = v6;
  *(_QWORD *)(v10 + 104) = v5;
  swift_bridgeObjectRetain(v5);
  sub_10010A7A8((uint64_t *)a2);
  v13 = type metadata accessor for UIMetrics();
  v14 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
  result = EnvironmentObject.init()(v13, v14);
  *a3 = result;
  a3[1] = v16;
  a3[2] = (uint64_t)v8;
  a3[3] = 0;
  a3[4] = 0;
  a3[5] = (uint64_t)sub_10010A938;
  a3[6] = v10;
  return result;
}

uint64_t sub_10010A5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v4 = *(_QWORD *)(a1 + 56);
  v7[3] = &type metadata for String;
  v7[0] = a2;
  v7[1] = a3;
  swift_bridgeObjectRetain(a3);
  sub_1000B35F8(v4, (uint64_t)v7);
  v5 = sub_10004B678((uint64_t)v7);
  return (*(uint64_t (**)(uint64_t))(a1 + 64))(v5);
}

uint64_t sub_10010A640(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD v5[2];

  v2 = *(_QWORD *)(a1 + 56);
  memset(v5, 0, sizeof(v5));
  sub_1000B35F8(v2, (uint64_t)v5);
  v3 = sub_10004B678((uint64_t)v5);
  return (*(uint64_t (**)(uint64_t))(a1 + 64))(v3);
}

uint64_t sub_10010A688@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v3 = v1[3];
  v20 = v1[2];
  v21 = v3;
  v22 = v1[4];
  v4 = v1[1];
  v19[0] = *v1;
  v19[1] = v4;
  if ((_QWORD)v20)
  {
    v5 = *(_QWORD *)(v20 + 72);
    v6 = *(_QWORD *)(v20 + 80);
    sub_100007BBC((_QWORD *)(v20 + 48), v5);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 24))(v16, v5, v6);
    v7 = v17;
    v8 = v18;
    sub_100007BBC(v16, v17);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 232))(v7, v8);
    v11 = v10;
    *(_QWORD *)a1 = static HorizontalAlignment.center.getter(v9);
    *(_QWORD *)(a1 + 8) = v11;
    *(_BYTE *)(a1 + 16) = 0;
    v12 = sub_100003DB8(&qword_10031FF40);
    sub_10010A0E4((uint64_t)v19, a1 + *(int *)(v12 + 44));
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v16);
  }
  else
  {
    v14 = type metadata accessor for UIMetrics();
    v15 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
    result = EnvironmentObject.error()(0, *((_QWORD *)&v20 + 1), v14, v15);
    __break(1u);
  }
  return result;
}

uint64_t sub_10010A7A0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_10010A4EC(a1, v2 + 16, a2);
}

uint64_t *sub_10010A7A8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[6];
  v5 = a1[7];
  v6 = a1[9];
  swift_retain(a1[4]);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v2);
  swift_retain(v3);
  return a1;
}

uint64_t sub_10010A81C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[11]);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10010A868()
{
  uint64_t v0;

  return sub_10010A640(v0 + 16);
}

double sub_10010A870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  double result;

  if (a3)
  {
    swift_retain(a1);
    swift_retain(a3);
    *(_QWORD *)&result = swift_retain(a7).n128_u64[0];
  }
  return result;
}

uint64_t sub_10010A8A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;

  if (a3)
  {
    v8 = result;
    swift_release(a3);
    swift_release(a7);
    return swift_release(v8);
  }
  return result;
}

uint64_t sub_10010A8E4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[11]);
  swift_bridgeObjectRelease(v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_10010A938()
{
  uint64_t v0;

  return sub_10010A5DC(v0 + 16, *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
}

uint64_t sub_10010A944()
{
  return sub_1000084FC(&qword_10031FF58, &qword_10031FF60, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

ValueMetadata *type metadata accessor for CurrentStateView()
{
  return &type metadata for CurrentStateView;
}

uint64_t sub_10010A980(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029A934, 1);
}

uint64_t sub_10010A990@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeConformance2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[5];

  v43 = a1;
  v2 = type metadata accessor for StackNavigationViewStyle(0);
  v41 = *(_QWORD *)(v2 - 8);
  v42 = v2;
  __chkstk_darwin(v2, v3);
  v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8(&qword_10031FF68);
  v39 = *(_QWORD *)(v6 - 8);
  v40 = v6;
  __chkstk_darwin(v6, v7);
  v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_10031FF70);
  v37 = *(_QWORD *)(v10 - 8);
  v38 = v10;
  __chkstk_darwin(v10, v11);
  v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD **)(v1 + 32);
  if (v14)
  {
    v16 = v14[9];
    v15 = v14[10];
    sub_100007BBC(v14 + 6, v16);
    v17 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v15 + 32))(v48, v16, v15);
    v36[1] = v36;
    __chkstk_darwin(v17, v18);
    v36[-2] = v48;
    v36[-1] = v1;
    v19 = sub_100003DB8(&qword_10031FF78);
    v20 = sub_100007FAC(&qword_10031FF80);
    v21 = sub_100007FAC(&qword_10031CAE0);
    v22 = sub_100007FAC(&qword_10031FF88);
    v23 = sub_1000084FC(&qword_10031FF90, &qword_10031FF88, (uint64_t)&unk_1002525D0);
    v44 = v22;
    v45 = v23;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v44, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v25 = sub_1000084FC(&qword_10031CAF8, &qword_10031CAE0, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v44 = v20;
    v45 = v21;
    v46 = OpaqueTypeConformance2;
    v47 = v25;
    v26 = swift_getOpaqueTypeConformance2(&v44, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    v27 = NavigationView.init(content:)(sub_10010B4EC, &v36[-4], v19, v26);
    StackNavigationViewStyle.init()(v27);
    v28 = sub_1000084FC(&qword_10031FF98, &qword_10031FF68, (uint64_t)&protocol conformance descriptor for NavigationView<A>);
    v29 = sub_1000052EC(&qword_10031CB08, (uint64_t (*)(uint64_t))&type metadata accessor for StackNavigationViewStyle, (uint64_t)&protocol conformance descriptor for StackNavigationViewStyle);
    v30 = v40;
    v31 = v42;
    View.navigationViewStyle<A>(_:)(v5, v40, v42, v28, v29);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v5, v31);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v43, v13, v38);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v48);
  }
  else
  {
    v33 = *(_QWORD *)(v1 + 40);
    v34 = type metadata accessor for UIMetrics();
    v35 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v33, v34, v35);
    __break(1u);
  }
  return result;
}

uint64_t sub_10010ACAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t OpaqueTypeConformance2;
  uint64_t v29;
  _QWORD v31[2];
  char v32[16];
  uint64_t v33;
  __int128 v34;
  double (*v35)@<D0>(uint64_t@<X8>);
  uint64_t v36;
  double (*v37)@<D0>(uint64_t@<X8>);
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _QWORD v41[2];
  __int128 v42;
  uint64_t v43;
  __int128 v44[3];

  v31[0] = a2;
  v31[1] = a3;
  v4 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_10031FF80);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007CBC(a1, (uint64_t)&v34);
  v14 = swift_allocObject(&unk_1002F0798, 56, 7);
  sub_100007D04(&v34, v14 + 16);
  sub_100007CBC(a1, (uint64_t)v44);
  v15 = swift_allocObject(&unk_1002F07C0, 56, 7);
  sub_100007D04(v44, v15 + 16);
  v16 = type metadata accessor for UIMetrics();
  v17 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v18 = EnvironmentObject.init()(v16, v17);
  v20 = v19;
  type metadata accessor for CGSize(0);
  v41[0] = 0;
  v41[1] = 0;
  State.init(wrappedValue:)(&v42, v41, v21);
  *(_QWORD *)&v34 = v18;
  *((_QWORD *)&v34 + 1) = v20;
  v35 = sub_10010B518;
  v36 = v14;
  v37 = sub_100094CA8;
  v38 = v15;
  v39 = v42;
  v40 = v43;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v4);
  v22 = sub_100003DB8(&qword_10031FF88);
  v23 = sub_1000084FC(&qword_10031FF90, &qword_10031FF88, (uint64_t)&unk_1002525D0);
  View.navigationBarTitleDisplayMode(_:)(v8, v22, v23);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v24 = v34;
  v25 = v36;
  v26 = v40;
  swift_release(v38);
  swift_release(v25);
  swift_release(v24);
  swift_release(v26);
  v33 = v31[0];
  v27 = sub_100003DB8(&qword_10031CAE0);
  *(_QWORD *)&v34 = v22;
  *((_QWORD *)&v34 + 1) = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v34, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v29 = sub_1000084FC(&qword_10031CAF8, &qword_10031CAE0, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  View.toolbar<A>(content:)(sub_100094CB0, v32, v9, v27, OpaqueTypeConformance2, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

__n128 sub_10010AF88@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __n128 **v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;
  __n128 v17;
  _OWORD v18[15];
  _BYTE v19[247];
  char v20;

  v4 = static HorizontalAlignment.center.getter(a1);
  sub_10010B15C((uint64_t)v18);
  *(_OWORD *)&v19[183] = v18[11];
  *(_OWORD *)&v19[199] = v18[12];
  *(_OWORD *)&v19[215] = v18[13];
  *(_OWORD *)&v19[231] = v18[14];
  *(_OWORD *)&v19[119] = v18[7];
  *(_OWORD *)&v19[135] = v18[8];
  *(_OWORD *)&v19[151] = v18[9];
  *(_OWORD *)&v19[167] = v18[10];
  *(_OWORD *)&v19[55] = v18[3];
  *(_OWORD *)&v19[71] = v18[4];
  *(_OWORD *)&v19[87] = v18[5];
  *(_OWORD *)&v19[103] = v18[6];
  *(_OWORD *)&v19[7] = v18[0];
  *(_OWORD *)&v19[23] = v18[1];
  v20 = 0;
  *(_OWORD *)&v19[39] = v18[2];
  v5 = (__n128 **)sub_100007BBC(a1, a1[3]);
  v17 = (*v5)[3];
  v6 = (*v5)[4].n128_u64[0];
  v7 = (*v5)[4].n128_u64[1];
  v8 = static Edge.Set.all.getter((*v5)[3].n128_f64[0]);
  v9 = *(_OWORD *)&v19[208];
  *(_OWORD *)(a2 + 209) = *(_OWORD *)&v19[192];
  *(_OWORD *)(a2 + 225) = v9;
  *(_OWORD *)(a2 + 241) = *(_OWORD *)&v19[224];
  v10 = *(_OWORD *)&v19[144];
  *(_OWORD *)(a2 + 145) = *(_OWORD *)&v19[128];
  *(_OWORD *)(a2 + 161) = v10;
  v11 = *(_OWORD *)&v19[176];
  *(_OWORD *)(a2 + 177) = *(_OWORD *)&v19[160];
  *(_OWORD *)(a2 + 193) = v11;
  v12 = *(_OWORD *)&v19[80];
  *(_OWORD *)(a2 + 81) = *(_OWORD *)&v19[64];
  *(_OWORD *)(a2 + 97) = v12;
  v13 = *(_OWORD *)&v19[112];
  *(_OWORD *)(a2 + 113) = *(_OWORD *)&v19[96];
  *(_OWORD *)(a2 + 129) = v13;
  v14 = *(_OWORD *)&v19[16];
  *(_OWORD *)(a2 + 17) = *(_OWORD *)v19;
  *(_OWORD *)(a2 + 33) = v14;
  v15 = *(_OWORD *)&v19[48];
  *(_OWORD *)(a2 + 49) = *(_OWORD *)&v19[32];
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 256) = *(_QWORD *)&v19[239];
  *(_OWORD *)(a2 + 65) = v15;
  *(_BYTE *)(a2 + 264) = v8;
  result = v17;
  *(__n128 *)(a2 + 272) = v17;
  *(_QWORD *)(a2 + 288) = v6;
  *(_QWORD *)(a2 + 296) = v7;
  *(_BYTE *)(a2 + 304) = 0;
  return result;
}

uint64_t sub_10010B15C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v2 = type metadata accessor for ConnectionClosedModel(0);
  v3 = sub_1000052EC(&qword_10031CB58, type metadata accessor for ConnectionClosedModel, (uint64_t)&unk_10024D2FC);
  v60 = EnvironmentObject.init()(v2, v3);
  v61 = v4;
  v5 = type metadata accessor for ConnectivityModel();
  v6 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
  v7 = v5;
  v58 = EnvironmentObject.init()(v5, v6);
  v59 = v8;
  v9 = type metadata accessor for GuidanceModel();
  v10 = sub_1000052EC(&qword_100316B08, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceModel, (uint64_t)&unk_10024D2FC);
  v56 = EnvironmentObject.init()(v9, v10);
  v57 = v11;
  v12 = type metadata accessor for OrientationModel();
  v13 = sub_1000052EC(&qword_10031CB60, (uint64_t (*)(uint64_t))type metadata accessor for OrientationModel, (uint64_t)&unk_10024D2FC);
  v55 = EnvironmentObject.init()(v12, v13);
  v15 = v14;
  v16 = type metadata accessor for StewieModel();
  v17 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
  v53 = EnvironmentObject.init()(v16, v17);
  v54 = v18;
  v19 = type metadata accessor for UIMetrics();
  v20 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v51 = EnvironmentObject.init()(v19, v20);
  v52 = v21;
  v22 = v7;
  v49 = EnvironmentObject.init()(v7, v6);
  v50 = v23;
  v47 = EnvironmentObject.init()(v19, v20);
  v48 = v24;
  v25 = type metadata accessor for GuidanceMessagesModel();
  v26 = sub_1000052EC(&qword_1003195D8, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel, (uint64_t)&unk_10024D2FC);
  v27 = EnvironmentObject.init()(v25, v26);
  v45 = v28;
  v46 = v27;
  v29 = EnvironmentObject.init()(v19, v20);
  v43 = v30;
  v44 = v29;
  v31 = type metadata accessor for ConnectionModel(0);
  v32 = sub_1000052EC(&qword_100316B10, type metadata accessor for ConnectionModel, (uint64_t)&unk_10024D2FC);
  v33 = EnvironmentObject.init()(v31, v32);
  v41 = v34;
  v42 = v33;
  v35 = EnvironmentObject.init()(v22, v6);
  v37 = v36;
  v38 = EnvironmentObject.init()(v19, v20);
  *(_QWORD *)a1 = v60;
  *(_QWORD *)(a1 + 8) = v61;
  *(_QWORD *)(a1 + 16) = v58;
  *(_QWORD *)(a1 + 24) = v59;
  *(_QWORD *)(a1 + 32) = v56;
  *(_QWORD *)(a1 + 40) = v57;
  *(_QWORD *)(a1 + 48) = v55;
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v53;
  *(_QWORD *)(a1 + 72) = v54;
  *(_QWORD *)(a1 + 80) = v51;
  *(_QWORD *)(a1 + 88) = v52;
  *(_BYTE *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = v49;
  *(_QWORD *)(a1 + 120) = v50;
  *(_QWORD *)(a1 + 128) = v47;
  *(_QWORD *)(a1 + 136) = v48;
  *(_QWORD *)(a1 + 144) = 32;
  *(_QWORD *)(a1 + 152) = 0xE100000000000000;
  *(_QWORD *)(a1 + 160) = v46;
  *(_QWORD *)(a1 + 168) = v45;
  *(_QWORD *)(a1 + 176) = v44;
  *(_QWORD *)(a1 + 184) = v43;
  *(_QWORD *)(a1 + 192) = v42;
  *(_QWORD *)(a1 + 200) = v41;
  *(_QWORD *)(a1 + 208) = v35;
  *(_QWORD *)(a1 + 216) = v37;
  *(_QWORD *)(a1 + 224) = v38;
  *(_QWORD *)(a1 + 232) = v39;
  swift_retain(v60);
  swift_retain(v58);
  swift_retain(v56);
  swift_retain(v55);
  swift_retain(v53);
  swift_retain(v51);
  swift_retain(v49);
  swift_retain(v47);
  swift_release(v51);
  swift_release(v53);
  swift_release(v55);
  swift_release(v56);
  swift_release(v58);
  swift_release(v60);
  swift_release(v47);
  return swift_release(v49);
}

uint64_t sub_10010B4B4@<X0>(uint64_t a1@<X8>)
{
  return sub_10010A990(a1);
}

uint64_t sub_10010B4EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10010ACAC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10010B4F4()
{
  uint64_t v0;

  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

double sub_10010B518@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_10010AF88((_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

uint64_t sub_10010B520()
{
  _QWORD v1[4];

  v1[0] = sub_100007FAC(&qword_10031FF68);
  v1[1] = type metadata accessor for StackNavigationViewStyle(255);
  v1[2] = sub_1000084FC(&qword_10031FF98, &qword_10031FF68, (uint64_t)&protocol conformance descriptor for NavigationView<A>);
  v1[3] = sub_1000052EC(&qword_10031CB08, (uint64_t (*)(uint64_t))&type metadata accessor for StackNavigationViewStyle, (uint64_t)&protocol conformance descriptor for StackNavigationViewStyle);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.navigationViewStyle<A>(_:)>>, 1);
}

ValueMetadata *type metadata accessor for FullScreenGuidanceTransmissionProgressView()
{
  return &type metadata for FullScreenGuidanceTransmissionProgressView;
}

uint64_t sub_10010B5D4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029A978, 1);
}

uint64_t sub_10010B5E4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t);
  unint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[6];

  v2 = v1;
  v58 = a1;
  v3 = sub_100003DB8(&qword_10031FFA0);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_10031FFA8);
  v56 = *(_QWORD *)(v7 - 8);
  v57 = v7;
  __chkstk_darwin(v7, v8);
  v55 = (uint64_t)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_100316B68);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TransmissionProgress(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v54 = (uint64_t)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003DB8(&qword_10031FFB0);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (_QWORD *)v1[4];
  if (v22)
  {
    v23 = (uint64_t)(v22 + 6);
    v24 = v22[9];
    v25 = v22[10];
    sub_100007BBC(v22 + 6, v24);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v25 + 32))(v62, v24, v25);
    v26 = *v1;
    if (*v2)
    {
      swift_retain(*v2);
      sub_1001BF244((uint64_t)v13);
      swift_release(v26);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
      {
        sub_100007FF0((uint64_t)v13, &qword_100316B68);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v21, 1, 1, v57);
LABEL_7:
        sub_10000B458((uint64_t)v21, v58, &qword_10031FFB0);
        return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v62);
      }
      v27 = v54;
      sub_10000AFB0((uint64_t)v13, v54);
      sub_100007CBC(v23, (uint64_t)v59);
      v28 = v60;
      v29 = v61;
      sub_100007BBC(v59, v60);
      v30 = v2[2];
      if (v30)
      {
        v31 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 112))(v27, *(unsigned __int8 *)(*(_QWORD *)(v30 + 48) + 120), v28, v29);
        v33 = v32;
        v34 = _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v59);
        *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v34);
        *((_QWORD *)v6 + 1) = 0;
        v6[16] = 0;
        v35 = sub_100003DB8(&qword_10031FFB8);
        sub_10010B9EC((uint64_t)v2, v27, v62, v31, v33, (uint64_t)&v6[*(int *)(v35 + 44)]);
        swift_bridgeObjectRelease(v33);
        LOBYTE(v31) = static Edge.Set.top.getter(v36);
        v37 = sub_100007BBC(v62, v62[3]);
        v38 = EdgeInsets.init(_all:)(*(double *)(*v37 + 144));
        v40 = v39;
        v42 = v41;
        v44 = v43;
        v45 = v55;
        sub_10000B234((uint64_t)v6, v55, &qword_10031FFA0);
        v46 = v57;
        v47 = v45 + *(int *)(v57 + 36);
        *(_BYTE *)v47 = v31;
        *(double *)(v47 + 8) = v38;
        *(_QWORD *)(v47 + 16) = v40;
        *(_QWORD *)(v47 + 24) = v42;
        *(_QWORD *)(v47 + 32) = v44;
        *(_BYTE *)(v47 + 40) = 0;
        sub_100007FF0((uint64_t)v6, &qword_10031FFA0);
        sub_10000B458(v45, (uint64_t)v21, &qword_10031FFA8);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v21, 0, 1, v46);
        sub_10010CC90(v27);
        goto LABEL_7;
      }
      v49 = v2[3];
      v50 = type metadata accessor for ConnectivityModel();
      v51 = (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel;
      v52 = &qword_100316B00;
    }
    else
    {
      v49 = v2[1];
      v50 = type metadata accessor for ConnectionModel(0);
      v51 = type metadata accessor for ConnectionModel;
      v52 = &qword_100316B10;
    }
  }
  else
  {
    v49 = v1[5];
    v50 = type metadata accessor for UIMetrics();
    v51 = (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics;
    v52 = (unint64_t *)&qword_100316A00;
  }
  v53 = sub_100056D60(v52, v51);
  result = EnvironmentObject.error()(0, v49, v50, v53);
  __break(1u);
  return result;
}

uint64_t sub_10010B9EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  UIContentSizeCategory v68;
  id *v69;
  id v70;
  char v71;
  uint64_t KeyPath;
  id v73;
  char v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __n128 v103;
  __n128 v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  __n128 v113;
  uint64_t v114;
  unint64_t v115;
  int v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id *v127;
  id v128;
  char v129;
  uint64_t v130;
  id v131;
  char v132;
  BOOL v133;
  uint64_t v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  char v146;
  double v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t result;
  uint64_t v161;
  char v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  __n128 v166;
  id v167;
  char v168;
  double v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  __n128 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  char v201;
  unint64_t v202;
  NSString v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t (*v206)(__n128);
  __n128 v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  unint64_t v214;
  id v215;
  uint64_t v216;
  id v217;
  id v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  __n128 v233;
  id v234;
  char v235;
  double v236;
  uint64_t v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  NSString v248;
  uint64_t v249;
  uint64_t (*v250)();
  unint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  __int128 v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  __int128 v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  UIContentSizeCategory v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  UIContentSizeCategory v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  _BYTE v278[280];
  _QWORD v279[35];
  _BYTE v280[280];
  _BYTE v281[280];
  char v282;
  char v283;
  char v284;
  __n128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  BOOL v294;
  _BYTE v295[264];
  __n128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  BOOL v305;

  v271 = a4;
  v272 = a5;
  v258 = a2;
  v270 = sub_100003DB8(&qword_10031FFC0);
  __chkstk_darwin(v270, v9);
  v264 = (uint64_t)&v253 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003DB8(&qword_100316B28);
  v259 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v253 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003DB8(&qword_10031FFC8);
  v261 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)&v262 = v15;
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v253 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100003DB8(&qword_10031FFD0);
  __chkstk_darwin(v19, v20);
  v263 = (uint64_t)&v253 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v260 = sub_100003DB8(&qword_10031FFD8);
  v23 = __chkstk_darwin(v260, v22);
  v265 = (uint64_t)&v253 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  v266 = (uint64_t)&v253 - v26;
  v274 = sub_100003DB8(&qword_10031FFE0);
  __chkstk_darwin(v274, v27);
  v29 = (char *)&v253 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v267 = sub_100003DB8(&qword_10031FFE8);
  __chkstk_darwin(v267, v30);
  v268 = (uint64_t)&v253 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v275 = sub_100003DB8(&qword_10031FFF0);
  __chkstk_darwin(v275, v32);
  v269 = (UIContentSizeCategory)((char *)&v253 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = type metadata accessor for Font.Leading(0);
  v35 = *(_QWORD *)(v34 - 8);
  v37 = __chkstk_darwin(v34, v36);
  v39 = (char *)&v253 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v273 = (UIContentSizeCategory)a1;
  v40 = *(_QWORD *)(a1 + 16);
  if (!v40)
  {
    v248 = v273[3];
    v249 = type metadata accessor for ConnectivityModel();
    v250 = type metadata accessor for ConnectivityModel;
    v251 = &qword_100316B00;
LABEL_31:
    v252 = sub_100056D60(v251, (uint64_t (*)(uint64_t))v250);
    result = EnvironmentObject.error()(0, v248, v249, v252);
    __break(1u);
    return result;
  }
  v41 = 1 << *(_BYTE *)(*(_QWORD *)(v40 + 48) + 120);
  v276 = v29;
  v277 = a6;
  if ((v41 & 0x1D8) != 0)
  {
    v42 = v272;
    *(_QWORD *)v281 = v271;
    *(_QWORD *)&v281[8] = v272;
    v43 = v37;
    v44 = sub_10002B3F4();
    v45 = swift_bridgeObjectRetain(v42);
    v46 = Text.init<A>(_:)(v281, &type metadata for String, v44, v45);
    v48 = v47;
    v50 = v49;
    v52 = v51 & 1;
    v53 = static Font.body.getter(v46);
    static Font.Weight.semibold.getter(v53);
    v54 = Font.weight(_:)(v53);
    swift_release(v53);
    (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v39, enum case for Font.Leading.tight(_:), v43);
    v55 = Font.leading(_:)(v39, v54);
    swift_release(v54);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v39, v43);
    v56 = Text.font(_:)(v55, v46, v48, v52, v50);
    v58 = v57;
    LOBYTE(v54) = v59;
    v61 = v60;
    swift_release(v55);
    sub_10002B438(v46, v48, v52);
    swift_bridgeObjectRelease(v50);
    v63 = static Color.white.getter(v62);
    v64 = Text.foregroundColor(_:)(v63, v56, v58, v54 & 1, v61);
    v271 = v65;
    v272 = v66;
    LODWORD(v266) = v67;
    swift_release(v63);
    sub_10002B438(v56, v58, v54 & 1);
    swift_bridgeObjectRelease(v61);
    v68 = v273;
    v69 = (id *)v273[4];
    if (v69)
    {
      v70 = v69[14];
      v71 = static UIContentSizeCategory.>= infix(_:_:)(v70, UIContentSizeCategoryAccessibilityExtraLarge);

      v264 = (v71 & 1) == 0;
      KeyPath = swift_getKeyPath(&unk_100256500);
      v73 = v69[14];
      v74 = static UIContentSizeCategory.>= infix(_:_:)(v73, UIContentSizeCategoryAccessibilityExtraLarge);

      LODWORD(v263) = (v74 & 1) == 0;
      v75 = swift_getKeyPath(&unk_100256530);
      v76 = v69[14];
      v77 = static Alignment.center.getter(v76);
      v79 = v78;
      v80 = static UIContentSizeCategory.>= infix(_:_:)(v76, UIContentSizeCategoryAccessibilityExtraLarge);
      v273 = UIContentSizeCategoryAccessibilityExtraLarge;
      v265 = v75;
      if ((v80 & 1) != 0
        && (v81 = static Alignment.center.getter(v80),
            v83 = static Alignment.== infix(_:_:)(v77, v79, v81, v82),
            (v83 & 1) != 0))
      {
        v85 = v71;
        v86 = KeyPath;
        v77 = static Alignment.leading.getter(v83, v84);
        v79 = v87;
      }
      else
      {
        v85 = v71;
        v86 = KeyPath;
      }

      v279[0] = v64;
      v161 = v271;
      v279[1] = v271;
      v162 = v266 & 1;
      LOBYTE(v279[2]) = v266 & 1;
      v163 = v64;
      v164 = v272;
      v279[3] = v272;
      v279[4] = v86;
      v279[5] = v264;
      LOBYTE(v279[6]) = v85 & 1;
      v165 = v265;
      v279[7] = v265;
      LOBYTE(v279[8]) = v263;
      sub_100132880(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v280, v166, 0.0, 1, 0.0, 1, v77, v79);
      sub_10002B438(v163, v161, v162);
      swift_release(v165);
      swift_release(v86);
      swift_bridgeObjectRelease(v164);
      v167 = v69[14];
      v168 = static UIContentSizeCategory.>= infix(_:_:)(v167, v273);

      if ((v168 & 1) != 0)
        v169 = 1.0;
      else
        v169 = 0.5;
      v170 = swift_getKeyPath(&unk_100256560);
      *(_OWORD *)&v281[128] = *(_OWORD *)&v280[128];
      *(_OWORD *)&v281[144] = *(_OWORD *)&v280[144];
      *(_OWORD *)&v281[160] = *(_OWORD *)&v280[160];
      *(_OWORD *)&v281[64] = *(_OWORD *)&v280[64];
      *(_OWORD *)&v281[80] = *(_OWORD *)&v280[80];
      *(_OWORD *)&v281[96] = *(_OWORD *)&v280[96];
      *(_OWORD *)&v281[112] = *(_OWORD *)&v280[112];
      *(_OWORD *)v281 = *(_OWORD *)v280;
      *(_OWORD *)&v281[16] = *(_OWORD *)&v280[16];
      *(_OWORD *)&v281[32] = *(_OWORD *)&v280[32];
      *(_OWORD *)&v281[48] = *(_OWORD *)&v280[48];
      *(_QWORD *)&v281[176] = *(_QWORD *)&v280[176];
      *(_QWORD *)&v281[184] = v170;
      *(double *)&v281[192] = v169;
      v171 = *(_OWORD *)&v280[112];
      v172 = v268;
      *(_OWORD *)(v268 + 96) = *(_OWORD *)&v280[96];
      *(_OWORD *)(v172 + 112) = v171;
      v173 = *(_OWORD *)&v281[144];
      *(_OWORD *)(v172 + 128) = *(_OWORD *)&v281[128];
      *(_OWORD *)(v172 + 144) = v173;
      v174 = *(_OWORD *)&v281[48];
      *(_OWORD *)(v172 + 32) = *(_OWORD *)&v281[32];
      *(_OWORD *)(v172 + 48) = v174;
      v175 = *(_OWORD *)&v281[80];
      *(_OWORD *)(v172 + 64) = *(_OWORD *)&v281[64];
      *(_OWORD *)(v172 + 80) = v175;
      v176 = *(_OWORD *)&v281[16];
      *(_OWORD *)v172 = *(_OWORD *)v281;
      *(_OWORD *)(v172 + 16) = v176;
      v177 = *(_OWORD *)&v281[176];
      *(_OWORD *)(v172 + 160) = *(_OWORD *)&v281[160];
      *(_OWORD *)(v172 + 176) = v177;
      *(_QWORD *)(v172 + 192) = *(_QWORD *)&v281[192];
      swift_storeEnumTagMultiPayload(v172, v267, 1);
      sub_10010D1B8((uint64_t)v281);
      v178 = sub_100003DB8(&qword_100320010);
      v179 = sub_1000084FC(&qword_100320018, &qword_10031FFC0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v180 = sub_10010CF3C();
      v181 = (uint64_t)v269;
      _ConditionalContent<>.init(storage:)(v172, v270, v178, v179, v180);
      v182 = (uint64_t)v276;
      sub_10000B234(v181, (uint64_t)v276, &qword_10031FFF0);
      swift_storeEnumTagMultiPayload(v182, v274, 0);
      v183 = sub_10010D134();
      _ConditionalContent<>.init(storage:)(v182, v275, v178, v183, v180);
      sub_100007FF0(v181, &qword_10031FFF0);
      return sub_10010D224((uint64_t)v281);
    }
    goto LABEL_30;
  }
  if ((v41 & 0x203) != 0)
  {
    v257 = v37;
    *(double *)v281 = (double)*(uint64_t *)(v258 + *(int *)(type metadata accessor for TransmissionProgress(0) + 28));
    v281[8] = 0;
    *(_QWORD *)v280 = 0x4059000000000000;
    v88 = sub_10010CCCC();
    ProgressView.init<A>(value:total:)(v281, v280, &type metadata for Double, v88);
    v90 = a3[3];
    v89 = a3[4];
    v91 = sub_100007BBC(a3, v90);
    *(_QWORD *)&v281[24] = v90;
    *(_QWORD *)&v281[32] = *(_QWORD *)(v89 + 8);
    v92 = sub_10010CD10(v281);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v90 - 8) + 16))(v92, v91, v90);
    v93 = sub_1000084FC(&qword_100316C20, &qword_100316B28, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    v94 = sub_10010CD4C();
    View.progressViewStyle<A>(_:)(v281, v11, &type metadata for MessageProgressViewStyle, v93, v94);
    sub_10010CD90(v281);
    (*(void (**)(char *, uint64_t))(v259 + 8))(v14, v11);
    v96 = a3[3];
    v95 = a3[4];
    sub_100007BBC(a3, v96);
    v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v95 + 8) + 8))(v96);
    v99 = v98;
    v100 = static Alignment.center.getter(v97);
    v101 = v263;
    v104 = sub_100132A38(0, 1, 0.0, 1, 0.0, 1, 0, 1, v263, v103, 0.0, 1, v99, 0, v100, v102);
    (*(void (**)(char *, _QWORD, __n128))(v261 + 8))(v18, v262, v104);
    v105 = sub_100007BBC(a3, a3[3]);
    v106 = *v105;
    v262 = *(_OWORD *)(*v105 + 152);
    v107 = *(_QWORD *)(v106 + 168);
    v108 = *(_QWORD *)(v106 + 176);
    LOBYTE(v95) = static Edge.Set.all.getter(*(double *)&v262);
    v109 = v265;
    sub_10000B234(v101, v265, &qword_10031FFD0);
    v110 = v109 + *(int *)(v260 + 36);
    *(_BYTE *)v110 = v95;
    *(_OWORD *)(v110 + 8) = v262;
    *(_QWORD *)(v110 + 24) = v107;
    *(_QWORD *)(v110 + 32) = v108;
    *(_BYTE *)(v110 + 40) = 0;
    sub_100007FF0(v101, &qword_10031FFD0);
    sub_10000B458(v109, v266, &qword_10031FFD8);
    v111 = v272;
    *(_QWORD *)v281 = v271;
    *(_QWORD *)&v281[8] = v272;
    v112 = sub_10002B3F4();
    v113 = swift_bridgeObjectRetain(v111);
    v114 = Text.init<A>(_:)(v281, &type metadata for String, v112, v113);
    v271 = v115;
    v272 = v114;
    LODWORD(v258) = v116;
    v263 = v117;
    v118 = sub_100007BBC(a3, a3[3]);
    v119 = *v118;
    v120 = *(_QWORD *)(*v118 + 184);
    v261 = *(_QWORD *)(*v118 + 192);
    *(_QWORD *)&v262 = v120;
    v121 = *(_QWORD *)(v119 + 200);
    v259 = *(_QWORD *)(v119 + 208);
    v260 = v121;
    v123 = static Edge.Set.all.getter(v122);
    v256 = v123;
    v124 = static Font.body.getter(v123);
    static Font.Weight.semibold.getter(v124);
    v125 = Font.weight(_:)(v124);
    swift_release(v124);
    v126 = v257;
    (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v39, enum case for Font.Leading.tight(_:), v257);
    v255 = Font.leading(_:)(v39, v125);
    swift_release(v125);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v39, v126);
    v257 = swift_getKeyPath(&unk_1002564A0);
    *((_QWORD *)&v254 + 1) = static Color.white.getter(v257);
    *(_QWORD *)&v254 = swift_getKeyPath(&unk_1002564D0);
    v68 = v273;
    v127 = (id *)v273[4];
    if (v127)
    {
      v128 = v127[14];
      v129 = static UIContentSizeCategory.>= infix(_:_:)(v128, UIContentSizeCategoryAccessibilityExtraLarge);

      v273 = (UIContentSizeCategory)((v129 & 1) == 0);
      v130 = swift_getKeyPath(&unk_100256500);
      v131 = v127[14];
      v132 = static UIContentSizeCategory.>= infix(_:_:)(v131, UIContentSizeCategoryAccessibilityExtraLarge);

      v133 = (v132 & 1) == 0;
      v134 = swift_getKeyPath(&unk_100256530);
      v135 = v127[14];
      v136 = static Alignment.center.getter(v135);
      v138 = v137;
      v139 = static UIContentSizeCategory.>= infix(_:_:)(v135, UIContentSizeCategoryAccessibilityExtraLarge);
      if ((v139 & 1) != 0)
      {
        v140 = static Alignment.center.getter(v139);
        v142 = static Alignment.== infix(_:_:)(v136, v138, v140, v141);
        if ((v142 & 1) != 0)
        {
          v136 = static Alignment.leading.getter(v142, v143);
          v138 = v144;
        }
      }

      v284 = v258 & 1;
      v283 = 0;
      v282 = v129 & 1;
      v285.n128_u64[0] = v272;
      v285.n128_u64[1] = v271;
      LOBYTE(v286) = v258 & 1;
      *((_QWORD *)&v286 + 1) = v263;
      LOBYTE(v287) = v256;
      *((_QWORD *)&v287 + 1) = v262;
      *(_QWORD *)&v288 = v261;
      *((_QWORD *)&v288 + 1) = v260;
      *(_QWORD *)&v289 = v259;
      BYTE8(v289) = 0;
      *(_QWORD *)&v290 = v257;
      *((_QWORD *)&v290 + 1) = v255;
      v291 = v254;
      *(_QWORD *)&v292 = v130;
      *((_QWORD *)&v292 + 1) = v273;
      LOBYTE(v293) = v129 & 1;
      *((_QWORD *)&v293 + 1) = v134;
      v294 = v133;
      v300 = v289;
      v301 = v290;
      v298 = v287;
      v299 = v288;
      v305 = v133;
      v303 = v292;
      v304 = v293;
      v302 = v254;
      v296 = v285;
      v297 = v286;
      sub_10013196C(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v295, v285, 0.0, 1, 0.0, 1, v136, v138);
      sub_10004D6C4((uint64_t)&v285);
      v145 = v127[14];
      v146 = static UIContentSizeCategory.>= infix(_:_:)(v145, UIContentSizeCategoryAccessibilityExtraLarge);

      if ((v146 & 1) != 0)
        v147 = 1.0;
      else
        v147 = 0.5;
      v148 = swift_getKeyPath(&unk_100256560);
      memcpy(v279, v295, 0x108uLL);
      v279[33] = v148;
      *(double *)&v279[34] = v147;
      v149 = v265;
      v150 = v266;
      sub_10000B234(v266, v265, &qword_10031FFD8);
      memcpy(v278, v279, sizeof(v278));
      v151 = v264;
      sub_10000B234(v149, v264, &qword_10031FFD8);
      v152 = (void *)(v151 + *(int *)(sub_100003DB8(&qword_100320008) + 48));
      memcpy(v280, v278, sizeof(v280));
      memcpy(v152, v278, 0x118uLL);
      memcpy(v281, v278, sizeof(v281));
      sub_10010CDEC((uint64_t)v279);
      sub_10010CDEC((uint64_t)v280);
      sub_10010CE94((uint64_t)v281);
      sub_100007FF0(v149, &qword_10031FFD8);
      v153 = v268;
      sub_10000B234(v151, v268, &qword_10031FFC0);
      swift_storeEnumTagMultiPayload(v153, v267, 0);
      v154 = sub_100003DB8(&qword_100320010);
      v155 = sub_1000084FC(&qword_100320018, &qword_10031FFC0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v156 = sub_10010CF3C();
      v157 = (uint64_t)v269;
      _ConditionalContent<>.init(storage:)(v153, v270, v154, v155, v156);
      sub_100007FF0(v151, &qword_10031FFC0);
      v158 = (uint64_t)v276;
      sub_10000B234(v157, (uint64_t)v276, &qword_10031FFF0);
      swift_storeEnumTagMultiPayload(v158, v274, 0);
      v159 = sub_10010D134();
      _ConditionalContent<>.init(storage:)(v158, v275, v154, v159, v156);
      sub_100007FF0(v157, &qword_10031FFF0);
      sub_10010CE94((uint64_t)v279);
      return sub_100007FF0(v150, &qword_10031FFD8);
    }
LABEL_30:
    v248 = v68[5];
    v249 = type metadata accessor for UIMetrics();
    v250 = type metadata accessor for UIMetrics;
    v251 = (unint64_t *)&qword_100316A00;
    goto LABEL_31;
  }
  v184 = v272;
  *(_QWORD *)v281 = v271;
  *(_QWORD *)&v281[8] = v272;
  v185 = sub_10002B3F4();
  v186 = swift_bridgeObjectRetain(v184);
  v187 = Text.init<A>(_:)(v281, &type metadata for String, v185, v186);
  v189 = v188;
  v191 = v190;
  v193 = v192 & 1;
  v195 = a3[3];
  v194 = a3[4];
  sub_100007BBC(a3, v195);
  v196 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v194 + 8) + 32))(v195);
  v197 = Text.font(_:)(v196, v187, v189, v193, v191);
  v199 = v198;
  v201 = v200;
  v271 = v202;
  swift_release(v196);
  sub_10002B438(v187, v189, v193);
  swift_bridgeObjectRelease(v191);
  v68 = v273;
  v203 = v273[4];
  if (!v203)
    goto LABEL_30;
  v204 = v201 & 1;
  v205 = *((_QWORD *)v203 + 10);
  sub_100007BBC((_QWORD *)v203 + 6, *((_QWORD *)v203 + 9));
  v206 = *(uint64_t (**)(__n128))(v205 + 96);
  v207 = swift_retain(v40);
  v208 = v206(v207);
  swift_release(v40);
  v209 = v271;
  v210 = Text.foregroundColor(_:)(v208, v197, v199, v204, v271);
  v212 = v211;
  LODWORD(v273) = v213;
  v272 = v214;
  sub_10002B438(v197, v199, v204);
  swift_release(v208);
  swift_bridgeObjectRelease(v209);
  v215 = *((id *)v203 + 14);
  LODWORD(v204) = static UIContentSizeCategory.>= infix(_:_:)(v215, UIContentSizeCategoryAccessibilityExtraLarge);

  LODWORD(v271) = v204;
  v268 = (v204 & 1) == 0;
  v216 = swift_getKeyPath(&unk_100256500);
  v217 = *((id *)v203 + 14);
  LOBYTE(v204) = static UIContentSizeCategory.>= infix(_:_:)(v217, UIContentSizeCategoryAccessibilityExtraLarge);

  LODWORD(v267) = (v204 & 1) == 0;
  v270 = swift_getKeyPath(&unk_100256530);
  v218 = *((id *)v203 + 14);
  v219 = static Alignment.center.getter(v218);
  v221 = v220;
  v222 = static UIContentSizeCategory.>= infix(_:_:)(v218, UIContentSizeCategoryAccessibilityExtraLarge);
  v269 = UIContentSizeCategoryAccessibilityExtraLarge;
  if ((v222 & 1) != 0)
  {
    v223 = static Alignment.center.getter(v222);
    v225 = static Alignment.== infix(_:_:)(v219, v221, v223, v224);
    if ((v225 & 1) != 0)
    {
      v219 = static Alignment.leading.getter(v225, v226);
      v221 = v227;
    }
  }

  *(_QWORD *)v280 = v210;
  *(_QWORD *)&v280[8] = v212;
  v228 = v273 & 1;
  v280[16] = v273 & 1;
  v229 = v212;
  v230 = v210;
  v231 = v272;
  *(_QWORD *)&v280[24] = v272;
  *(_QWORD *)&v280[32] = v216;
  *(_QWORD *)&v280[40] = v268;
  v280[48] = v271 & 1;
  v232 = v270;
  *(_QWORD *)&v280[56] = v270;
  v280[64] = v267;
  sub_100132880(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v281, v233, 0.0, 1, 0.0, 1, v219, v221);
  sub_10002B438(v230, v229, v228);
  swift_release(v232);
  swift_release(v216);
  swift_bridgeObjectRelease(v231);
  v234 = *((id *)v203 + 14);
  v235 = static UIContentSizeCategory.>= infix(_:_:)(v234, v269);

  if ((v235 & 1) != 0)
    v236 = 1.0;
  else
    v236 = 0.5;
  v237 = swift_getKeyPath(&unk_100256560);
  v238 = *(_OWORD *)&v281[144];
  v239 = (uint64_t)v276;
  *((_OWORD *)v276 + 8) = *(_OWORD *)&v281[128];
  *(_OWORD *)(v239 + 144) = v238;
  *(_OWORD *)(v239 + 160) = *(_OWORD *)&v281[160];
  v240 = *(_QWORD *)&v281[176];
  v241 = *(_OWORD *)&v281[80];
  *(_OWORD *)(v239 + 64) = *(_OWORD *)&v281[64];
  *(_OWORD *)(v239 + 80) = v241;
  v242 = *(_OWORD *)&v281[112];
  *(_OWORD *)(v239 + 96) = *(_OWORD *)&v281[96];
  *(_OWORD *)(v239 + 112) = v242;
  v243 = *(_OWORD *)&v281[16];
  *(_OWORD *)v239 = *(_OWORD *)v281;
  *(_OWORD *)(v239 + 16) = v243;
  v244 = *(_OWORD *)&v281[48];
  *(_OWORD *)(v239 + 32) = *(_OWORD *)&v281[32];
  *(_OWORD *)(v239 + 48) = v244;
  *(_QWORD *)(v239 + 176) = v240;
  *(_QWORD *)(v239 + 184) = v237;
  *(double *)(v239 + 192) = v236;
  swift_storeEnumTagMultiPayload(v239, v274, 1);
  v245 = sub_100003DB8(&qword_100320010);
  v246 = sub_10010D134();
  v247 = sub_10010CF3C();
  return _ConditionalContent<>.init(storage:)(v239, v275, v245, v246, v247);
}

uint64_t sub_10010CC58@<X0>(uint64_t a1@<X8>)
{
  return sub_10010B5E4(a1);
}

uint64_t sub_10010CC90(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TransmissionProgress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10010CCCC()
{
  unint64_t result;

  result = qword_10031FFF8;
  if (!qword_10031FFF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_10031FFF8);
  }
  return result;
}

_QWORD *sub_10010CD10(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

unint64_t sub_10010CD4C()
{
  unint64_t result;

  result = qword_100320000;
  if (!qword_100320000)
  {
    result = swift_getWitnessTable(&unk_10025F54C, &type metadata for MessageProgressViewStyle);
    atomic_store(result, (unint64_t *)&qword_100320000);
  }
  return result;
}

_QWORD *sub_10010CD90(_QWORD *a1)
{
  destroy for CallEmergencyServicesButtonLabelView(a1);
  return a1;
}

uint64_t sub_10010CDEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 136);
  v9 = *(_QWORD *)(a1 + 264);
  sub_10002B750(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t sub_10010CE94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 136);
  v9 = *(_QWORD *)(a1 + 264);
  sub_10002B438(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v9);
  swift_release(v8);
  swift_release(v7);
  swift_release(v5);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v4);
  swift_release(v6);
  return a1;
}

unint64_t sub_10010CF3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100320020;
  if (!qword_100320020)
  {
    v1 = sub_100007FAC(&qword_100320010);
    sub_10010CFC0();
    sub_1000084FC(&qword_1003192C0, &qword_1003192C8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320020);
  }
  return result;
}

unint64_t sub_10010CFC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100320028;
  if (!qword_100320028)
  {
    v1 = sub_100007FAC(&qword_100320030);
    sub_10010D02C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320028);
  }
  return result;
}

unint64_t sub_10010D02C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100320038;
  if (!qword_100320038)
  {
    v1 = sub_100007FAC(&qword_100320040);
    sub_10010D0B0();
    sub_1000084FC(&qword_100318300, &qword_100318308, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320038);
  }
  return result;
}

unint64_t sub_10010D0B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100320048;
  if (!qword_100320048)
  {
    v1 = sub_100007FAC(&qword_100320050);
    sub_1000084FC(&qword_1003183B8, &qword_1003183C0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320048);
  }
  return result;
}

unint64_t sub_10010D134()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100320058;
  if (!qword_100320058)
  {
    v1 = sub_100007FAC(&qword_10031FFF0);
    sub_1000084FC(&qword_100320018, &qword_10031FFC0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    sub_10010CF3C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320058);
  }
  return result;
}

uint64_t sub_10010D1B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 184);
  sub_10002B750(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t sub_10010D224(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 184);
  sub_10002B438(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_10010D294()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100320060;
  if (!qword_100320060)
  {
    v1 = sub_100007FAC(&qword_10031FFB0);
    sub_10010D2F8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100320060);
  }
  return result;
}

unint64_t sub_10010D2F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100320068;
  if (!qword_100320068)
  {
    v1 = sub_100007FAC(&qword_10031FFA8);
    sub_1000084FC(&qword_100320070, &qword_10031FFA0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320068);
  }
  return result;
}

uint64_t type metadata accessor for AnalyticsEntryPoint()
{
  return objc_opt_self(_TtC8SOSBuddy19AnalyticsEntryPoint);
}

void sub_10010D39C(char a1)
{
  uint64_t v2;
  uint64_t inited;
  _BYTE v4[56];

  v2 = sub_100003DB8(&qword_100319FC8);
  inited = swift_initStackObject(v2, v4);
  *(_OWORD *)(inited + 16) = xmmword_10024E070;
  *(_QWORD *)(inited + 32) = 0x696F507972746E65;
  *(_QWORD *)(inited + 40) = 0xEA0000000000746ELL;
  __asm { BR              X10 }
}

unint64_t sub_10010D424()
{
  uint64_t v0;
  NSString v1;

  v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE800000000000000);
  *(_QWORD *)(v0 + 48) = v1;
  return sub_100224F60(v0);
}

uint64_t destroy for TryOutMessagesIntroView(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);
  swift_release(*(_QWORD *)(a1 + 16));
  sub_100040294(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  return swift_release(*(_QWORD *)(a1 + 56));
}

uint64_t initializeWithCopy for TryOutMessagesIntroView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  v7 = a2[2];
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  v8 = a2[4];
  v9 = *((_BYTE *)a2 + 40);
  swift_retain(v4);
  swift_retain(v7);
  sub_100040244(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v10 = a2[7];
  *(_QWORD *)(a1 + 56) = v10;
  swift_retain(v10);
  return a1;
}

uint64_t *assignWithCopy for TryOutMessagesIntroView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = *((_BYTE *)a2 + 40);
  sub_100040244(v8, v9);
  v10 = a1[4];
  v11 = *((_BYTE *)a1 + 40);
  a1[4] = v8;
  *((_BYTE *)a1 + 40) = v9;
  sub_100040294(v10, v11);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  v12 = a1[7];
  v13 = a2[7];
  a1[7] = v13;
  swift_retain(v13);
  swift_release(v12);
  return a1;
}

uint64_t *assignWithTake for TryOutMessagesIntroView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  v7 = *((_BYTE *)a2 + 40);
  v8 = a1[4];
  v9 = *((_BYTE *)a1 + 40);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  *((_BYTE *)a1 + 40) = v7;
  sub_100040294(v8, v9);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  v10 = a1[7];
  a1[7] = a2[7];
  swift_release(v10);
  return a1;
}

ValueMetadata *type metadata accessor for TryOutMessagesIntroView()
{
  return &type metadata for TryOutMessagesIntroView;
}

uint64_t sub_10010D730(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029AA2C, 1);
}

uint64_t sub_10010D740@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char *v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD v66[11];
  uint64_t v67;
  __int128 v68[11];
  uint64_t v69;
  _QWORD v70[7];

  v2 = v1;
  v65 = a1;
  v55 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v3 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55, v4);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100003DB8(&qword_100320128);
  v56 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54, v7);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_100320130);
  v59 = *(_QWORD *)(v10 - 8);
  v60 = v10;
  __chkstk_darwin(v10, v11);
  v57 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003DB8(&qword_100320138);
  v63 = *(_QWORD *)(v13 - 8);
  v64 = v13;
  __chkstk_darwin(v13, v14);
  v58 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100003DB8(&qword_100320140);
  __chkstk_darwin(v61, v16);
  v62 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD **)(v1 + 16);
  if (v18)
  {
    v19 = v18[9];
    v20 = v18[10];
    sub_100007BBC(v18 + 6, v19);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v20 + 24))(v70, v19, v20);
    sub_100007CBC((uint64_t)v70, (uint64_t)v68);
    v21 = (_OWORD *)swift_allocObject(&unk_1002F0990, 120, 7);
    v22 = *(_OWORD *)(v2 + 16);
    v21[1] = *(_OWORD *)v2;
    v21[2] = v22;
    v23 = *(_OWORD *)(v2 + 48);
    v21[3] = *(_OWORD *)(v2 + 32);
    v21[4] = v23;
    sub_100007D04(v68, (uint64_t)(v21 + 5));
    sub_100007CBC((uint64_t)v70, (uint64_t)v68);
    v24 = (_OWORD *)swift_allocObject(&unk_1002F09B8, 120, 7);
    v25 = *(_OWORD *)(v2 + 16);
    v24[1] = *(_OWORD *)v2;
    v24[2] = v25;
    v26 = *(_OWORD *)(v2 + 48);
    v24[3] = *(_OWORD *)(v2 + 32);
    v24[4] = v26;
    sub_100007D04(v68, (uint64_t)(v24 + 5));
    sub_100110210((uint64_t *)v2);
    sub_100110210((uint64_t *)v2);
    sub_10012E328(v66, ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter, 0, sub_1001101AC, v21, sub_100110204, v24, 0);
    v27 = v55;
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v55);
    v28 = sub_100003DB8(&qword_100320148);
    v29 = sub_1000084FC(&qword_100320150, &qword_100320148, (uint64_t)&unk_100256288);
    View.navigationBarTitleDisplayMode(_:)(v6, v28, v29);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v27);
    v68[8] = v66[8];
    v68[9] = v66[9];
    v68[10] = v66[10];
    v69 = v67;
    v68[4] = v66[4];
    v68[5] = v66[5];
    v68[6] = v66[6];
    v68[7] = v66[7];
    v68[0] = v66[0];
    v68[1] = v66[1];
    v68[2] = v66[2];
    v68[3] = v66[3];
    sub_100007E9C((uint64_t *)v68);
    *(_QWORD *)&v66[0] = v28;
    *((_QWORD *)&v66[0] + 1) = v29;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v66, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v31 = v57;
    v32 = v54;
    View.navigationBarBackButtonHidden(_:)(1, v54, OpaqueTypeConformance2);
    v33 = (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v9, v32);
    __chkstk_darwin(v33, v34);
    *(&v53 - 2) = v2;
    v35 = sub_100003DB8(&qword_100320158);
    *(_QWORD *)&v66[0] = v32;
    *((_QWORD *)&v66[0] + 1) = OpaqueTypeConformance2;
    v36 = swift_getOpaqueTypeConformance2(v66, &opaque type descriptor for <<opaque return type of View.navigationBarBackButtonHidden(_:)>>, 1);
    v37 = sub_1000084FC(&qword_100320160, &qword_100320158, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v38 = v58;
    v39 = v60;
    View.toolbar<A>(content:)(sub_100110274, &v53 - 4, v60, v35, v36, v37);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v31, v39);
    v40 = *(_QWORD *)(v2 + 32);
    LOBYTE(v36) = *(_BYTE *)(v2 + 40);
    sub_100040244(v40, v36);
    v41 = sub_100042548(v40, v36);
    v42 = sub_100040294(v40, v36);
    v43 = v38;
    if ((v41 & 1) != 0)
      v44 = static Edge.Set.top.getter(v42);
    else
      v44 = Edge.Set.init(rawValue:)(0);
    v45 = v44;
    v47 = (uint64_t)v62;
    v46 = v63;
    v48 = v64;
    (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v62, v43, v64);
    *(_BYTE *)(v47 + *(int *)(v61 + 36)) = v45;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v43, v48);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v70);
    return sub_10000B458(v47, v65, &qword_100320140);
  }
  else
  {
    v50 = *(_QWORD *)(v1 + 24);
    v51 = type metadata accessor for UIMetrics();
    v52 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v50, v51, v52);
    __break(1u);
  }
  return result;
}

void sub_10010DC74(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;

  v6 = sub_100003DB8(&qword_100319248);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100003DB8(&qword_100319250);
  v11 = __chkstk_darwin(v53, v10);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v48 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v18 = (void *)objc_opt_self(UIApplication);
    v19 = objc_msgSend(v18, "sharedApplication", swift_retain(v17).n128_f64[0]);
    v20 = objc_msgSend(v19, "userInterfaceLayoutDirection");

    swift_release(v17);
    v21 = 0xD000000000000016;
    v22 = 0xD00000000000001ALL;
    if (v20 != (id)1)
      v22 = 0xD000000000000016;
    v52 = v22;
    v23 = 0x8000000100269F30;
    if (v20 != (id)1)
    {
      v23 = 0x8000000100269F10;
      v21 = 0;
    }
    v50 = v21;
    v51 = v23;
    if (v20 == (id)1)
      v24 = 0x8000000100269F10;
    else
      v24 = 0;
    KeyPath = swift_getKeyPath(&unk_100256740);
    v26 = type metadata accessor for UIMetrics();
    v27 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v28 = EnvironmentObject.init()(v26, v27);
    v49 = v29;
    *(_QWORD *)v9 = static HorizontalAlignment.center.getter(v28);
    *((_QWORD *)v9 + 1) = 0;
    v9[16] = 0;
    v30 = sub_100003DB8(&qword_100319258);
    sub_10010DFFC(a1, (uint64_t)&v9[*(int *)(v30 + 44)]);
    v32 = a2[3];
    v31 = a2[4];
    sub_100007BBC(a2, v32);
    v33 = (*(double (**)(uint64_t, uint64_t))(v31 + 24))(v32, v31);
    v35 = v34;
    v37 = v36;
    v39 = v38;
    v40 = static Edge.Set.all.getter(v33);
    sub_10000B234((uint64_t)v9, (uint64_t)v13, &qword_100319248);
    v41 = &v13[*(int *)(v53 + 36)];
    *v41 = v40;
    *((double *)v41 + 1) = v33;
    *((_QWORD *)v41 + 2) = v35;
    *((_QWORD *)v41 + 3) = v37;
    *((_QWORD *)v41 + 4) = v39;
    v41[40] = 0;
    sub_100007FF0((uint64_t)v9, &qword_100319248);
    sub_10000B458((uint64_t)v13, (uint64_t)v16, &qword_100319250);
    sub_10000B234((uint64_t)v16, (uint64_t)v13, &qword_100319250);
    v42 = v49;
    *(_QWORD *)a3 = v28;
    *(_QWORD *)(a3 + 8) = v42;
    *(_QWORD *)(a3 + 16) = KeyPath;
    *(_BYTE *)(a3 + 24) = 0;
    v43 = v51;
    *(_QWORD *)(a3 + 32) = v52;
    *(_QWORD *)(a3 + 40) = v43;
    *(_QWORD *)(a3 + 48) = v50;
    *(_QWORD *)(a3 + 56) = v24;
    v44 = sub_100003DB8(&qword_100319260);
    sub_10000B234((uint64_t)v13, a3 + *(int *)(v44 + 48), &qword_100319250);
    swift_retain(v28);
    sub_100040244(KeyPath, 0);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v43);
    sub_100007FF0((uint64_t)v16, &qword_100319250);
    sub_100007FF0((uint64_t)v13, &qword_100319250);
    swift_release(v28);
    sub_100040294(KeyPath, 0);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v43);
  }
  else
  {
    v45 = *(_QWORD *)(a1 + 24);
    v46 = type metadata accessor for UIMetrics();
    v47 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, v45, v46, v47);
    __break(1u);
  }
}

uint64_t sub_10010DFFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char v33;
  BOOL v34;
  uint64_t KeyPath;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  UIContentSizeCategory v50;
  char v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  int v64;
  id v65;
  BOOL v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  id v84;
  UIContentSizeCategory v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  double v106;
  uint64_t v107;
  double v108;
  uint64_t v109;
  id v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  char v119;
  char v120;
  _OWORD *v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  char v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t result;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  UIContentSizeCategory v151;
  uint64_t v152;
  unsigned __int8 v153;
  _OWORD v154[17];
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  _OWORD v166[3];
  _OWORD v167[10];
  uint64_t v168;
  double v169;
  char v170;
  __int128 v171;
  __int128 v172;
  char v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  unsigned __int8 v184;
  unsigned __int8 v185;
  _BYTE v186[7];
  _BYTE v187[7];
  _BYTE v188[7];
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _OWORD v199[10];
  _OWORD v200[17];
  char v201;
  char v202;
  _OWORD v203[10];
  _BYTE v204[280];
  uint64_t v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  BOOL v210;
  __int16 v211;
  uint64_t v212;
  char *v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  BOOL v217;
  __int16 v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  BOOL v224;
  __int16 v225;

  v146 = a2;
  v3 = type metadata accessor for AccessibilityTraits(0);
  v147 = *(_QWORD *)(v3 - 8);
  v148 = v3;
  __chkstk_darwin(v3, v4);
  v145 = (char *)&v139 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8(&qword_100319268);
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)&v139 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v8, v11);
  v144 = (char *)&v139 - v13;
  __chkstk_darwin(v12, v14);
  v149 = (uint64_t)&v139 - v15;
  v16 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002ELL, 0x8000000100269F50);
  v17 = Text.init(_:tableName:bundle:comment:)(v16);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = static Font.title.getter();
  static Font.Weight.semibold.getter(v24);
  v25 = Font.weight(_:)(v24);
  swift_release(v24);
  v26 = Text.font(_:)(v25, v17, v19, v23, v21);
  v28 = v27;
  LODWORD(v142) = v29;
  v143 = v30;
  swift_release(v25);
  sub_10002B438(v17, v19, v23);
  swift_bridgeObjectRelease(v21);
  v31 = *(_QWORD *)(a1 + 16);
  if (v31)
  {
    v32 = *(id *)(v31 + 112);
    v33 = static UIContentSizeCategory.>= infix(_:_:)(v32, UIContentSizeCategoryAccessibilityExtraLarge);

    v34 = (v33 & 1) == 0;
    KeyPath = swift_getKeyPath(&unk_100256710);
    v152 = v31;
    v36 = *(id *)(v31 + 112);
    v37 = static Alignment.center.getter(v36);
    v39 = v38;
    v151 = UIContentSizeCategoryAccessibilityExtraLarge;
    v40 = static UIContentSizeCategory.>= infix(_:_:)(v36, UIContentSizeCategoryAccessibilityExtraLarge);
    v150 = v10;
    if ((v40 & 1) != 0)
    {
      v41 = static Alignment.center.getter(v40);
      v43 = static Alignment.== infix(_:_:)(v37, v39, v41, v42);
      if ((v43 & 1) != 0)
      {
        v37 = static Alignment.leading.getter(v43, v44);
        v39 = v45;
      }
    }

    v219 = v26;
    v220 = v28;
    v46 = v142 & 1;
    v221 = v142 & 1;
    v47 = v143;
    v222 = v143;
    v223 = KeyPath;
    v224 = v34;
    v225 = 256;
    sub_1001317C8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v203, 0.0, 1, 0.0, 1, v37, v39);
    sub_10002B438(v26, v28, v46);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v47);
    v48 = v152;
    v49 = *(id *)(v152 + 112);
    v50 = v151;
    v51 = static UIContentSizeCategory.>= infix(_:_:)(v49, v151);

    if ((v51 & 1) != 0)
      v52 = 1.0;
    else
      v52 = 0.5;
    v53 = swift_getKeyPath(&unk_100256768);
    v54 = static Edge.Set.top.getter(v53);
    v55 = v54;
    v201 = 1;
    v56 = static Edge.Set.bottom.getter(v54);
    v202 = 1;
    v200[6] = v203[6];
    v200[7] = v203[7];
    v200[8] = v203[8];
    v200[9] = v203[9];
    v200[2] = v203[2];
    v200[3] = v203[3];
    v200[4] = v203[4];
    v200[5] = v203[5];
    v200[0] = v203[0];
    v200[1] = v203[1];
    *(_QWORD *)&v200[10] = v53;
    *((double *)&v200[10] + 1) = v52;
    LOBYTE(v200[11]) = v55;
    *(_OWORD *)((char *)&v200[11] + 8) = 0u;
    *(_OWORD *)((char *)&v200[12] + 8) = 0u;
    BYTE8(v200[13]) = v201;
    LOBYTE(v200[14]) = v56;
    *(_OWORD *)((char *)&v200[14] + 8) = 0u;
    *(_OWORD *)((char *)&v200[15] + 8) = 0u;
    BYTE8(v200[16]) = 1;
    v57 = v145;
    static AccessibilityTraits.isHeader.getter();
    v58 = sub_100003DB8(&qword_100319270);
    v59 = sub_10002B614(&qword_100319278, &qword_100319270, (void (*)(void))sub_100042BC8);
    v60 = (uint64_t)v144;
    View.accessibility(addTraits:)(v57, v58, v59);
    (*(void (**)(char *, uint64_t))(v147 + 8))(v57, v148);
    memcpy(v204, v200, 0x109uLL);
    sub_100038994((uint64_t)v204);
    sub_10000B458(v60, v149, &qword_100319268);
    v61 = LocalizedStringKey.init(stringLiteral:)(0x100000000000003DLL, 0x8000000100269FC0);
    v147 = Text.init(_:tableName:bundle:comment:)(v61);
    v148 = v62;
    v144 = v63;
    LODWORD(v145) = v64;
    v65 = *(id *)(v48 + 112);
    LOBYTE(v60) = static UIContentSizeCategory.>= infix(_:_:)(v65, v50);

    v66 = (v60 & 1) == 0;
    v67 = swift_getKeyPath(&unk_100256710);
    v68 = *(id *)(v48 + 112);
    v69 = static Alignment.center.getter(v68);
    v71 = v70;
    v72 = static UIContentSizeCategory.>= infix(_:_:)(v68, v50);
    if ((v72 & 1) != 0
      && (v73 = static Alignment.center.getter(v72),
          v75 = static Alignment.== infix(_:_:)(v69, v71, v73, v74),
          (v75 & 1) != 0))
    {
      v77 = v66;
      v69 = static Alignment.leading.getter(v75, v76);
      v71 = v78;
    }
    else
    {
      v77 = v66;
    }

    v80 = v147;
    v79 = v148;
    v81 = (uint64_t)v144;
    v212 = v147;
    v213 = v144;
    v82 = v145 & 1;
    v214 = v145 & 1;
    v215 = v148;
    v216 = v67;
    v217 = v77;
    v218 = 256;
    sub_1001317C8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v199, 0.0, 1, 0.0, 1, v69, v71);
    sub_10002B438(v80, v81, v82);
    swift_release(v67);
    swift_bridgeObjectRelease(v79);
    v195 = v199[6];
    v196 = v199[7];
    v197 = v199[8];
    v198 = v199[9];
    v191 = v199[2];
    v192 = v199[3];
    v193 = v199[4];
    v194 = v199[5];
    v189 = v199[0];
    v190 = v199[1];
    v83 = v152;
    v84 = *(id *)(v152 + 112);
    v85 = v151;
    LODWORD(v143) = static UIContentSizeCategory.>= infix(_:_:)(v84, v151);

    v148 = swift_getKeyPath(&unk_100256768);
    v86 = static Edge.Set.top.getter(v148);
    LODWORD(v147) = v86;
    v184 = 1;
    LODWORD(v145) = static Edge.Set.bottom.getter(v86);
    LODWORD(v144) = v184;
    v185 = 1;
    v87 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000048, 0x800000010026A040);
    v142 = Text.init(_:tableName:bundle:comment:)(v87);
    v89 = v88;
    v140 = v90;
    v92 = v91;
    v93 = *(id *)(v83 + 112);
    v139 = static UIContentSizeCategory.>= infix(_:_:)(v93, v85);

    v141 = swift_getKeyPath(&unk_100256710);
    v94 = *(id *)(v83 + 112);
    v95 = static Alignment.center.getter(v94);
    v97 = v96;
    v98 = static UIContentSizeCategory.>= infix(_:_:)(v94, v85);
    if ((v98 & 1) != 0)
    {
      v99 = static Alignment.center.getter(v98);
      v101 = static Alignment.== infix(_:_:)(v95, v97, v99, v100);
      if ((v101 & 1) != 0)
      {
        v95 = static Alignment.leading.getter(v101, v102);
        v97 = v103;
      }
    }

    v104 = v92;
    v105 = v140 & 1;
    v106 = 0.5;
    v107 = v142;
    v205 = v142;
    v206 = v89;
    v207 = v140 & 1;
    if ((v143 & 1) != 0)
      v108 = 1.0;
    else
      v108 = 0.5;
    v208 = v92;
    v109 = v141;
    v209 = v141;
    v210 = (v139 & 1) == 0;
    v211 = 256;
    sub_1001317C8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v174, 0.0, 1, 0.0, 1, v95, v97);
    sub_10002B438(v107, v89, v105);
    swift_release(v109);
    swift_bridgeObjectRelease(v104);
    v110 = *(id *)(v152 + 112);
    v111 = static UIContentSizeCategory.>= infix(_:_:)(v110, v151);

    if ((v111 & 1) != 0)
      v106 = 1.0;
    v142 = swift_getKeyPath(&unk_100256768);
    LODWORD(v151) = static Edge.Set.top.getter(v142);
    v153 = 1;
    v113 = v149;
    v112 = (uint64_t)v150;
    sub_10000B234(v149, (uint64_t)v150, &qword_100319268);
    v114 = v185;
    LODWORD(v152) = v185;
    LODWORD(v143) = v153;
    v115 = v112;
    v116 = v146;
    sub_10000B234(v115, v146, &qword_100319268);
    v117 = sub_100003DB8(&qword_1003192D0);
    v118 = (void *)(v116 + *(int *)(v117 + 48));
    v154[6] = v195;
    v154[7] = v196;
    v154[8] = v197;
    v154[9] = v198;
    v154[4] = v193;
    v154[5] = v194;
    v154[2] = v191;
    v154[3] = v192;
    v154[0] = v189;
    v154[1] = v190;
    *(_QWORD *)&v154[10] = v148;
    *((double *)&v154[10] + 1) = v108;
    LOBYTE(v154[11]) = v147;
    *(_DWORD *)((char *)&v154[11] + 1) = *(_DWORD *)v188;
    DWORD1(v154[11]) = *(_DWORD *)&v188[3];
    *(_OWORD *)((char *)&v154[11] + 8) = 0u;
    *(_OWORD *)((char *)&v154[12] + 8) = 0u;
    v119 = (char)v144;
    BYTE8(v154[13]) = (_BYTE)v144;
    *(_DWORD *)((char *)&v154[13] + 9) = *(_DWORD *)v187;
    HIDWORD(v154[13]) = *(_DWORD *)&v187[3];
    v120 = (char)v145;
    LOBYTE(v154[14]) = (_BYTE)v145;
    *(_DWORD *)((char *)&v154[14] + 1) = *(_DWORD *)v186;
    DWORD1(v154[14]) = *(_DWORD *)&v186[3];
    *(_OWORD *)((char *)&v154[15] + 8) = 0u;
    *(_OWORD *)((char *)&v154[14] + 8) = 0u;
    BYTE8(v154[16]) = v114;
    memcpy(v118, v154, 0x109uLL);
    v121 = (_OWORD *)(v116 + *(int *)(v117 + 64));
    v161 = v180;
    v162 = v181;
    v163 = v182;
    v164 = v183;
    v159 = v178;
    v160 = v179;
    v122 = v176;
    v157 = v176;
    v158 = v177;
    v155 = v174;
    v156 = v175;
    v123 = v142;
    *(_QWORD *)&v165 = v142;
    *((double *)&v165 + 1) = v106;
    v124 = v181;
    v125 = v182;
    v126 = v179;
    v121[6] = v180;
    v121[7] = v124;
    v127 = v164;
    v128 = v165;
    v121[8] = v125;
    v121[9] = v127;
    v129 = v158;
    v130 = v159;
    v121[2] = v122;
    v121[3] = v129;
    v131 = (char)v151;
    LOBYTE(v166[0]) = (_BYTE)v151;
    *(_OWORD *)((char *)v166 + 8) = 0u;
    *(_OWORD *)((char *)&v166[1] + 8) = 0u;
    LOBYTE(v117) = v143;
    BYTE8(v166[2]) = v143;
    v121[4] = v130;
    v121[5] = v126;
    v132 = v156;
    *v121 = v155;
    v121[1] = v132;
    v133 = v166[0];
    v134 = v166[1];
    v121[10] = v128;
    v121[11] = v133;
    v121[12] = v134;
    *(_OWORD *)((char *)v121 + 201) = *(_OWORD *)((char *)&v166[1] + 9);
    sub_10003893C((uint64_t)v154);
    sub_10003893C((uint64_t)&v155);
    sub_100007FF0(v113, &qword_100319268);
    v167[6] = v180;
    v167[7] = v181;
    v167[8] = v182;
    v167[9] = v183;
    v167[2] = v176;
    v167[3] = v177;
    v167[4] = v178;
    v167[5] = v179;
    v167[0] = v174;
    v167[1] = v175;
    v168 = v123;
    v169 = v106;
    v170 = v131;
    v171 = 0u;
    v172 = 0u;
    v173 = v117;
    sub_100038994((uint64_t)v167);
    v200[6] = v195;
    v200[7] = v196;
    v200[8] = v197;
    v200[9] = v198;
    v200[2] = v191;
    v200[3] = v192;
    v200[4] = v193;
    v200[5] = v194;
    v200[0] = v189;
    v200[1] = v190;
    *(_QWORD *)&v200[10] = v148;
    *((double *)&v200[10] + 1) = v108;
    LOBYTE(v200[11]) = v147;
    *(_DWORD *)((char *)&v200[11] + 1) = *(_DWORD *)v188;
    DWORD1(v200[11]) = *(_DWORD *)&v188[3];
    *(_OWORD *)((char *)&v200[11] + 8) = 0u;
    *(_OWORD *)((char *)&v200[12] + 8) = 0u;
    BYTE8(v200[13]) = v119;
    *(_DWORD *)((char *)&v200[13] + 9) = *(_DWORD *)v187;
    HIDWORD(v200[13]) = *(_DWORD *)&v187[3];
    LOBYTE(v200[14]) = v120;
    *(_DWORD *)((char *)&v200[14] + 1) = *(_DWORD *)v186;
    DWORD1(v200[14]) = *(_DWORD *)&v186[3];
    *(_OWORD *)((char *)&v200[15] + 8) = 0u;
    *(_OWORD *)((char *)&v200[14] + 8) = 0u;
    BYTE8(v200[16]) = v152;
    sub_100038994((uint64_t)v200);
    return sub_100007FF0((uint64_t)v150, &qword_100319268);
  }
  else
  {
    v136 = *(_QWORD *)(a1 + 24);
    v137 = type metadata accessor for UIMetrics();
    v138 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v136, v137, v138);
    __break(1u);
  }
  return result;
}

uint64_t sub_10010EBD4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v6 = sub_100003DB8(&qword_100320170);
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = static HorizontalAlignment.center.getter(v8);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 0;
  v11 = sub_100003DB8(&qword_100320178);
  sub_10010ED00(a1, a2, &v10[*(int *)(v11 + 44)]);
  v12 = a2[3];
  v13 = a2[4];
  sub_100007BBC(a2, v12);
  v14 = (*(double (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  LOBYTE(a2) = static Edge.Set.all.getter(v14);
  sub_10000B234((uint64_t)v10, a3, &qword_100320170);
  v21 = a3 + *(int *)(sub_100003DB8(&qword_100320180) + 36);
  *(_BYTE *)v21 = (_BYTE)a2;
  *(double *)(v21 + 8) = v14;
  *(_QWORD *)(v21 + 16) = v16;
  *(_QWORD *)(v21 + 24) = v18;
  *(_QWORD *)(v21 + 32) = v20;
  *(_BYTE *)(v21 + 40) = 0;
  return sub_100007FF0((uint64_t)v10, &qword_100320170);
}

uint64_t sub_10010ED00@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  Swift::String v100;
  Swift::String v101;
  Swift::String v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(char *, char *, uint64_t);
  char *v125;
  uint64_t *v126;
  double v127;
  void (*v128)(char *, uint64_t, double);
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  char *v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  unsigned __int8 v167;
  Swift::String v168;
  Swift::String v169;

  v162 = a2;
  v163 = a3;
  v4 = type metadata accessor for KeyboardShortcut(0);
  v159 = *(_QWORD *)(v4 - 8);
  v160 = v4;
  __chkstk_darwin(v4, v5);
  v157 = (char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for ButtonBorderShape(0);
  v152 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156, v7);
  v144 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for BorderedProminentButtonStyle(0);
  v145 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143, v9);
  v139 = (char *)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ControlSize(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = v11;
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_100003DB8(&qword_100320188);
  v135 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136, v17);
  v19 = (char *)&v132 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_100003DB8(&qword_100320190);
  __chkstk_darwin(v133, v20);
  v22 = (char *)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100003DB8(&qword_100320198);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141, v23);
  v134 = (char *)&v132 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_100003DB8(&qword_1003201A0);
  __chkstk_darwin(v137, v25);
  v27 = (char *)&v132 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_100003DB8(&qword_1003201A8);
  v148 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149, v28);
  v138 = (char *)&v132 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_100003DB8(&qword_1003201B0);
  __chkstk_darwin(v146, v30);
  v32 = (char *)&v132 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_100003DB8(&qword_1003201B8);
  __chkstk_darwin(v147, v33);
  v142 = (uint64_t)&v132 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = sub_100003DB8(&qword_1003201C0);
  __chkstk_darwin(v153, v35);
  v150 = (uint64_t)&v132 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_100003DB8(&qword_1003201C8);
  v155 = *(_QWORD *)(v161 - 8);
  v38 = __chkstk_darwin(v161, v37);
  v151 = (char *)&v132 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38, v40);
  v158 = (char *)&v132 - v41;
  v42 = (_OWORD *)swift_allocObject(&unk_1002F09E0, 80, 7);
  v154 = a1;
  v43 = *(_OWORD *)(a1 + 16);
  v42[1] = *(_OWORD *)a1;
  v42[2] = v43;
  v44 = *(_OWORD *)(a1 + 48);
  v42[3] = *(_OWORD *)(a1 + 32);
  v42[4] = v44;
  sub_100110210((uint64_t *)a1);
  v45 = sub_100003DB8(&qword_1003199C8);
  v46 = sub_10002B614(&qword_1003199E8, &qword_1003199C8, (void (*)(void))sub_100055918);
  Button.init(action:label:)(sub_100110ADC, v42, sub_10010F810, 0, v45, v46);
  v47 = v13;
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v16, enum case for ControlSize.large(_:), v13);
  KeyPath = swift_getKeyPath(&unk_100256680);
  v49 = v133;
  v50 = (uint64_t *)&v22[*(int *)(v133 + 36)];
  v51 = sub_100003DB8(&qword_100316C38);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))((char *)v50 + *(int *)(v51 + 28), v16, v47);
  *v50 = KeyPath;
  v52 = v135;
  v53 = v136;
  (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v22, v19, v136);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v47);
  v54 = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v19, v53);
  v55 = v139;
  BorderedProminentButtonStyle.init()(v54);
  v56 = sub_100110BA0();
  v57 = sub_1000052EC(&qword_100318960, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v58 = v134;
  v59 = v143;
  View.buttonStyle<A>(_:)(v55, v49, v143, v56, v57);
  (*(void (**)(char *, uint64_t))(v145 + 8))(v55, v59);
  v60 = sub_100007FF0((uint64_t)v22, &qword_100320190);
  v61 = v144;
  static ButtonBorderShape.roundedRectangle.getter(v60);
  v62 = swift_getKeyPath(&unk_1002566B0);
  v63 = v137;
  v64 = (uint64_t *)&v27[*(int *)(v137 + 36)];
  v65 = sub_100003DB8(&qword_100318968);
  v66 = v152;
  v67 = v156;
  (*(void (**)(char *, char *, uint64_t))(v152 + 16))((char *)v64 + *(int *)(v65 + 28), v61, v156);
  *v64 = v62;
  v68 = v140;
  v69 = v141;
  (*(void (**)(char *, char *, uint64_t))(v140 + 16))(v27, v58, v141);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v61, v67);
  v70 = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v58, v69);
  v71 = v157;
  static KeyboardShortcut.defaultAction.getter(v70);
  v72 = sub_100110D80();
  v73 = v138;
  View.keyboardShortcut(_:)(v71, v63, v72);
  (*(void (**)(char *, uint64_t))(v159 + 8))(v71, v160);
  v74 = sub_100007FF0((uint64_t)v27, &qword_1003201A0);
  v75 = static Color.white.getter(v74);
  v76 = swift_getKeyPath(&unk_1002566E0);
  v165 = v75;
  v77 = swift_retain(v75);
  v78 = AnyShapeStyle.init<A>(_:)(&v165, &type metadata for Color, &protocol witness table for Color, v77);
  v79 = v148;
  v80 = v149;
  (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v32, v73, v149);
  swift_release(v75);
  v81 = (uint64_t *)&v32[*(int *)(v146 + 36)];
  *v81 = v76;
  v81[1] = v78;
  v82 = (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v73, v80);
  LOBYTE(v75) = static Edge.Set.top.getter(v82);
  v83 = v142;
  sub_10000B234((uint64_t)v32, v142, &qword_1003201B0);
  v84 = v83 + *(int *)(v147 + 36);
  *(_BYTE *)v84 = v75;
  *(_OWORD *)(v84 + 8) = 0u;
  *(_OWORD *)(v84 + 24) = 0u;
  *(_BYTE *)(v84 + 40) = 1;
  v85 = sub_100007FF0((uint64_t)v32, &qword_1003201B0);
  LOBYTE(v80) = static Edge.Set.bottom.getter(v85);
  v86 = v162[3];
  v87 = v162[4];
  sub_100007BBC(v162, v86);
  v88 = (*(double (**)(uint64_t, uint64_t))(v87 + 112))(v86, v87);
  v89 = EdgeInsets.init(_all:)(v88);
  v91 = v90;
  v93 = v92;
  v95 = v94;
  v96 = v150;
  sub_10000B234(v83, v150, &qword_1003201B8);
  v97 = v153;
  v98 = v96 + *(int *)(v153 + 36);
  *(_BYTE *)v98 = v80;
  *(double *)(v98 + 8) = v89;
  *(_QWORD *)(v98 + 16) = v91;
  *(_QWORD *)(v98 + 24) = v93;
  *(_QWORD *)(v98 + 32) = v95;
  *(_BYTE *)(v98 + 40) = 0;
  sub_100007FF0(v83, &qword_1003201B8);
  v99 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v169._countAndFlagsBits = 0xD00000000000007ALL;
  v169._object = (void *)0x8000000100267720;
  v100._object = (void *)0x8000000100267700;
  v100._countAndFlagsBits = 0xD00000000000001ELL;
  v101._countAndFlagsBits = 0;
  v101._object = (void *)0xE000000000000000;
  v102 = NSLocalizedString(_:tableName:bundle:value:comment:)(v100, (Swift::String_optional)0, (NSBundle)v99, v101, v169);

  v168 = v102;
  v103 = v154;
  v164 = *(_OWORD *)(v154 + 48);
  v104 = sub_100003DB8(&qword_100316780);
  State.projectedValue.getter(&v165, v104);
  v105 = v165;
  v106 = v166;
  v107 = v167;
  v108 = sub_10002B614(&qword_1003201E8, &qword_1003201C0, (void (*)(void))sub_100110EC0);
  v109 = sub_10002B3F4();
  v110 = sub_10009A25C();
  v131 = v109;
  v111 = v161;
  v130 = v108;
  v112 = v151;
  View.alert<A, B, C>(_:isPresented:actions:message:)(&v168, v105, v106, v107, sub_10010FBCC, 0, sub_100097290, 0, v97, &type metadata for String, &type metadata for TryOutConnectionAlertButtonsView, &type metadata for Text, v130, v131, v110, &protocol witness table for Text);
  swift_bridgeObjectRelease(v102._object);
  swift_release(v106);
  swift_release(v105);
  sub_100007FF0(v96, &qword_1003201C0);
  v113 = v155;
  v114 = v158;
  v115 = v112;
  (*(void (**)(void))(v155 + 32))();
  v116 = *(_QWORD *)(v103 + 32);
  LOBYTE(v107) = *(_BYTE *)(v103 + 40);
  sub_100040244(v116, v107);
  LOBYTE(v105) = sub_100042548(v116, v107);
  sub_100040294(v116, v107);
  if ((v105 & 1) != 0)
  {
    v117 = 0;
    v118 = 0;
    v119 = 0;
    v120 = 1;
  }
  else
  {
    v121 = type metadata accessor for TryOutModel(0);
    v122 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    v120 = EnvironmentObject.init()(v121, v122);
    v117 = v123;
    LOBYTE(v168._countAndFlagsBits) = 0;
    State.init(wrappedValue:)(&v165, &v168, &type metadata for Bool);
    v118 = v165;
    v119 = v166;
  }
  v124 = *(void (**)(char *, char *, uint64_t))(v113 + 16);
  v124(v112, v114, v111);
  v125 = v163;
  v124(v163, v115, v111);
  v126 = (uint64_t *)&v125[*(int *)(sub_100003DB8(&qword_100320200) + 48)];
  *v126 = v120;
  v126[1] = v117;
  v126[2] = v118;
  v126[3] = v119;
  v127 = sub_100110F90(v120, v117, v118, v119);
  v128 = *(void (**)(char *, uint64_t, double))(v113 + 8);
  v128(v114, v111, v127);
  sub_100110FC4(v120, v117, v118, v119);
  return ((uint64_t (*)(char *, uint64_t))v128)(v115, v111);
}

uint64_t sub_10010F810@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  char *v34;
  uint64_t KeyPath;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;

  v53 = a1;
  v47 = sub_100003DB8(&qword_100316A20);
  __chkstk_darwin(v47, v1);
  v3 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003DB8(&qword_1003199B0);
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  __chkstk_darwin(v4, v5);
  v48 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100003DB8(&qword_1003199B8);
  __chkstk_darwin(v46, v7);
  v51 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_1003199C0);
  __chkstk_darwin(v9, v10);
  v52 = (uint64_t)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000019, 0x8000000100269EB0);
  v13 = Text.init(_:tableName:bundle:comment:)(v12);
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  v21 = static Color.black.getter(v20);
  v22 = Text.foregroundColor(_:)(v21, v13, v15, v19, v17);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  swift_release(v21);
  sub_10002B438(v13, v15, v19);
  swift_bridgeObjectRelease(v17);
  v54 = v22;
  v55 = v24;
  v56 = v26 & 1;
  v57 = v28;
  v29 = enum case for DynamicTypeSize.accessibility2(_:);
  v30 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v3, v29, v30);
  v31 = sub_1000052EC(&qword_100316A30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v3, v3, v30, v31);
  if ((result & 1) != 0)
  {
    v33 = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    v34 = v48;
    View.dynamicTypeSize<A>(_:)(v3, &type metadata for Text, v47, &protocol witness table for Text, v33);
    sub_100007FF0((uint64_t)v3, &qword_100316A20);
    sub_10002B438(v54, v55, v56);
    swift_bridgeObjectRelease(v57);
    KeyPath = swift_getKeyPath(&unk_100256710);
    v37 = v49;
    v36 = v50;
    v38 = (uint64_t)v51;
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v51, v34, v50);
    v39 = v38 + *(int *)(v46 + 36);
    *(_QWORD *)v39 = KeyPath;
    *(_BYTE *)(v39 + 8) = 1;
    v40 = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v34, v36);
    v41 = static Alignment.center.getter(v40);
    v42 = v52;
    sub_100131EE8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v52, 0.0, 1, 0.0, 1, v41, v43);
    sub_100007FF0(v38, &qword_1003199B8);
    v44 = v53;
    sub_10000B234(v42, v53, &qword_1003199C0);
    *(_WORD *)(v44 + *(int *)(sub_100003DB8(&qword_1003199C8) + 36)) = 256;
    return sub_100007FF0(v42, &qword_1003199C0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10010FBCC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = type metadata accessor for AppEvents();
  v3 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  result = EnvironmentObject.init()(v2, v3);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_10010FC24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t OpaqueTypeConformance2;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v64 = a2;
  v63 = sub_100003DB8(&qword_100320168);
  __chkstk_darwin(v63, v3);
  v56 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003DB8(&qword_100319200);
  v61 = *(_QWORD *)(v5 - 8);
  v62 = v5;
  __chkstk_darwin(v5, v6);
  v60 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100319208);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003DB8(&qword_100319210);
  v15 = __chkstk_darwin(v13, v14);
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  v20 = (char *)&v55 - v19;
  v21 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100003DB8(&qword_10031CFD0);
  v58 = *(_QWORD *)(v25 - 8);
  v59 = v25;
  v27 = __chkstk_darwin(v25, v26);
  v29 = (char *)&v55 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.navigationBarLeading.getter(v27);
  v30 = type metadata accessor for TryOutBackButtonView(0);
  v31 = sub_1000052EC(&qword_10031CFE0, type metadata accessor for TryOutBackButtonView, (uint64_t)&unk_10025B588);
  v57 = v29;
  ToolbarItem<>.init(placement:content:)(v24, sub_1001100B4, 0, v30, v31);
  v32 = *(_QWORD *)(a1 + 32);
  LOBYTE(a1) = *(_BYTE *)(a1 + 40);
  sub_100040244(v32, a1);
  v33 = sub_100042548(v32, a1);
  v34 = sub_100040294(v32, a1);
  if ((v33 & 1) != 0)
  {
    v35 = sub_100003DB8(&qword_100319220);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v17, 1, 1, v35);
    v36 = sub_1000084FC(&qword_100319218, &qword_100319208, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    v65 = v8;
    v66 = v36;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v65, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    v38 = (uint64_t)v20;
    static ToolbarContentBuilder.buildIf<A>(_:)(v17, v35, OpaqueTypeConformance2);
    v39 = sub_100007FF0((uint64_t)v17, &qword_100319210);
  }
  else
  {
    static ToolbarItemPlacement.principal.getter(v34);
    ToolbarItem<>.init(placement:content:)(v24, sub_1000421E0, 0, &type metadata for Text, &protocol witness table for Text);
    v40 = sub_1000084FC(&qword_100319218, &qword_100319208, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    static ToolbarContentBuilder.buildBlock<A>(_:)(v12, v8, v40);
    v41 = sub_100003DB8(&qword_100319220);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v17, 0, 1, v41);
    v65 = v8;
    v66 = v40;
    v42 = swift_getOpaqueTypeConformance2(&v65, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    v38 = (uint64_t)v20;
    static ToolbarContentBuilder.buildIf<A>(_:)(v17, v41, v42);
    sub_100007FF0((uint64_t)v17, &qword_100319210);
    v39 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  static ToolbarItemPlacement.navigationBarTrailing.getter(v39);
  v43 = sub_100042930();
  v44 = v60;
  ToolbarItem<>.init(placement:content:)(v24, sub_1001100F8, 0, &type metadata for TryOutCancelIntroButton, v43);
  v45 = v63;
  v47 = v56;
  v46 = v57;
  v48 = (uint64_t)&v56[*(int *)(v63 + 48)];
  v49 = &v56[*(int *)(v63 + 64)];
  v50 = v58;
  v51 = v59;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v56, v57, v59);
  sub_10000B234(v38, v48, &qword_100319210);
  v53 = v61;
  v52 = v62;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v49, v44, v62);
  TupleToolbarContent.init(_:)(v47, v45);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v44, v52);
  sub_100007FF0(v38, &qword_100319210);
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v46, v51);
}

uint64_t sub_1001100B4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  *a1 = swift_getKeyPath(&unk_100256650);
  v2 = sub_100003DB8(&qword_1003192E0);
  return swift_storeEnumTagMultiPayload(a1, v2, 0);
}

uint64_t sub_1001100F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = type metadata accessor for AppEvents();
  v3 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  v4 = EnvironmentObject.init()(v2, v3);
  v6 = v5;
  result = swift_getKeyPath(&unk_100256628);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_100110170@<X0>(uint64_t a1@<X8>)
{
  return sub_10010D740(a1);
}

void sub_1001101AC(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10010DC74(v1 + 16, (_QWORD *)(v1 + 80), a1);
}

uint64_t sub_1001101BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  sub_100040294(*(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 72));
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_100110204@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10010EBD4(v1 + 16, (_QWORD *)(v1 + 80), a1);
}

uint64_t *sub_100110210(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[4];
  v4 = *((_BYTE *)a1 + 40);
  v5 = a1[7];
  swift_retain(a1[2]);
  swift_retain(v2);
  sub_100040244(v3, v4);
  swift_retain(v5);
  return a1;
}

uint64_t sub_100110274@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10010FC24(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10011027C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  id v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t OpaqueTypeConformance2;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  __n128 v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[4];
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  Swift::String v65;
  Swift::String v66;

  v58 = a5;
  v9 = sub_100003DB8(&qword_100320210);
  v56 = *(_QWORD *)(v9 - 8);
  v57 = v9;
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003DB8(&qword_100320218);
  v54 = *(_QWORD *)(v13 - 8);
  v55 = v13;
  v15 = __chkstk_darwin(v13, v14);
  v53 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = static HorizontalAlignment.center.getter(v15);
  v60 = 0;
  LOBYTE(v61) = 1;
  if (a1)
  {
    v17 = *(void **)(a1 + 72);
    v65._countAndFlagsBits = *(_QWORD *)(a1 + 64);
    v65._object = v17;
    v18 = swift_allocObject(&unk_1002F0A88, 48, 7);
    *(_QWORD *)(v18 + 16) = a1;
    *(_QWORD *)(v18 + 24) = a2;
    v19 = a3 & 1;
    *(_BYTE *)(v18 + 32) = v19;
    *(_QWORD *)(v18 + 40) = a4;
    swift_retain(a4);
    swift_bridgeObjectRetain(v17);
    swift_retain(a1);
    v20 = sub_100003DB8(&qword_10031CC80);
    v49 = v20;
    v21 = sub_100003DB8(&qword_100318260);
    v50 = v21;
    v22 = sub_1000084FC(&qword_10031CC88, &qword_10031CC80, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v51 = v22;
    v52 = sub_100099FD4();
    View.onChange<A>(of:initial:_:)(&v65, 1, sub_100111280, v18, v20, v21, v22, v52, v23);
    swift_release(v18);
    swift_bridgeObjectRelease(v65._object);
    v24 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v66._countAndFlagsBits = 0xD00000000000004ELL;
    v66._object = (void *)0x8000000100265F80;
    v25._object = (void *)0x8000000100265F60;
    v25._countAndFlagsBits = 0xD000000000000012;
    v26._countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)v24, v26, v66);
    v28 = v12;

    v65 = v27;
    v63 = v19;
    v64 = a4;
    v29 = sub_100003DB8(&qword_100316780);
    v30 = State.projectedValue.getter(&v59, v29);
    v48 = (uint64_t)&v48;
    v31 = v59;
    v32 = v60;
    v33 = v61;
    v35 = __chkstk_darwin(v30, v34);
    __chkstk_darwin(v35, v36);
    v37 = sub_100003DB8(&qword_100318730);
    v59 = v49;
    v60 = v50;
    v61 = v51;
    v62 = v52;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v39 = sub_10002B3F4();
    v66._object = (void *)sub_1000084FC(&qword_100318738, &qword_100318730, (uint64_t)&protocol conformance descriptor for Button<A>);
    v47 = &protocol witness table for Text;
    v46[2] = OpaqueTypeConformance2;
    v46[3] = v39;
    v46[0] = v37;
    v46[1] = &type metadata for Text;
    v40 = v57;
    v41 = v53;
    ((void (*)(Swift::String *, uint64_t, uint64_t, uint64_t, uint64_t (*)(), _QWORD *, uint64_t (*)@<X0>(uint64_t@<X8>), _QWORD *, uint64_t, void *))View.alert<A, B, C>(_:isPresented:actions:message:))(&v65, v31, v32, v33, sub_1001112DC, v46, sub_1001112EC, v46, v57, &type metadata for String);
    swift_release(v32);
    swift_release(v31);
    v42 = swift_bridgeObjectRelease(v65._object);
    (*(void (**)(char *, uint64_t, __n128))(v56 + 8))(v28, v40, v42);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v54 + 32))(v58, v41, v55);
  }
  else
  {
    v44 = type metadata accessor for TryOutModel(0);
    v45 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v44, v45);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001106A4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  Swift::String v22;
  Swift::String v23;

  v8 = sub_100003DB8(&qword_100319400);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v23._object = (void *)0x8000000100267830;
  v13._countAndFlagsBits = 19279;
  v13._object = (void *)0xE200000000000000;
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0xD000000000000017;
  v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v23);

  v22 = v15;
  static ButtonRole.cancel.getter(v16, v17);
  v18 = type metadata accessor for ButtonRole(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v11, 0, 1, v18);
  v19 = swift_allocObject(&unk_1002F0AB0, 48, 7);
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  *(_BYTE *)(v19 + 32) = a3;
  *(_QWORD *)(v19 + 40) = a4;
  v20 = sub_10002B3F4();
  swift_retain(a1);
  swift_retain(a4);
  return Button<>.init<A>(_:role:action:)(&v22, v11, sub_10011132C, v19, &type metadata for String, v20);
}

void sub_100110834(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4 = *(_QWORD *)(a1 + 72);
    v5 = (_QWORD *)(a1 + 64);
    if (v4)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(a1 + 72));
      swift_retain(a1);
      v6 = sub_100003DB8(&qword_10032B0E0);
      v7 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v6, v7);
      v8 = *(_QWORD *)(a1 + 72);
      v9 = v4;
    }
    else
    {
      swift_retain(a1);
      v9 = 0;
      v8 = 0;
    }
    *v5 = 0;
    v5[1] = 0;
    swift_bridgeObjectRelease(v8);
    sub_1002365A0(v3, v4);
    swift_release(a1);
    swift_bridgeObjectRelease(v9);
  }
  else
  {
    v11 = type metadata accessor for TryOutModel(0);
    v12 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, a2, v11, v12);
    __break(1u);
  }
}

uint64_t sub_100110944@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t countAndFlagsBits;
  uint64_t v5;
  void *object;
  id v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  unint64_t v11;
  __n128 v12;
  uint64_t result;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  Swift::String v21;

  if (a1)
  {
    countAndFlagsBits = *(_QWORD *)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
    if (v5)
    {
      object = *(void **)(a1 + 72);
    }
    else
    {
      v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v21._countAndFlagsBits = 0xD00000000000006BLL;
      v21._object = (void *)0x80000001002677C0;
      v8._object = (void *)0x80000001002677A0;
      v8._countAndFlagsBits = 0xD000000000000010;
      v9._countAndFlagsBits = 0;
      v9._object = (void *)0xE000000000000000;
      v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)(unint64_t)countAndFlagsBits, (NSBundle)v7, v9, v21);
      countAndFlagsBits = v10._countAndFlagsBits;
      object = v10._object;

      v5 = 0;
    }
    v20[0] = countAndFlagsBits;
    v20[1] = object;
    v11 = sub_10002B3F4();
    v12 = swift_bridgeObjectRetain(v5);
    result = Text.init<A>(_:)(v20, &type metadata for String, v11, v12);
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = v14;
    *(_BYTE *)(a3 + 16) = v15 & 1;
    *(_QWORD *)(a3 + 24) = v16;
  }
  else
  {
    v18 = type metadata accessor for TryOutModel(0);
    v19 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v18, v19);
    __break(1u);
  }
  return result;
}

uint64_t sub_100110A80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10011027C(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100110A9C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  sub_100040294(*(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100110ADC()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;

  v4 = *(_OWORD *)(v0 + 64);
  v3 = 1;
  v1 = sub_100003DB8(&qword_100316780);
  return State.wrappedValue.setter(&v3, v1);
}

uint64_t sub_100110B28()
{
  return EnvironmentValues.controlSize.getter();
}

uint64_t sub_100110B48()
{
  return EnvironmentValues.controlSize.getter();
}

uint64_t sub_100110B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100110CE0(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for ControlSize, (uint64_t (*)(char *))&EnvironmentValues.controlSize.setter);
}

uint64_t sub_100110B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100110CE0(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for ControlSize, (uint64_t (*)(char *))&EnvironmentValues.controlSize.setter);
}

unint64_t sub_100110BA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003201D0;
  if (!qword_1003201D0)
  {
    v1 = sub_100007FAC(&qword_100320190);
    sub_1000084FC(&qword_1003201D8, &qword_100320188, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_1000084FC(&qword_100316C30, &qword_100316C38, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003201D0);
  }
  return result;
}

uint64_t sub_100110C3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100110C64(_QWORD *a1)
{
  __n128 v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tint.setter(v1);
}

uint64_t sub_100110C8C()
{
  return EnvironmentValues._buttonBorderShape.getter();
}

uint64_t sub_100110CAC()
{
  return EnvironmentValues._buttonBorderShape.getter();
}

uint64_t sub_100110CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100110CE0(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for ButtonBorderShape, (uint64_t (*)(char *))&EnvironmentValues._buttonBorderShape.setter);
}

uint64_t sub_100110CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  a5(0);
  __chkstk_darwin();
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_100110D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100110CE0(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for ButtonBorderShape, (uint64_t (*)(char *))&EnvironmentValues._buttonBorderShape.setter);
}

unint64_t sub_100110D80()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1003201E0;
  if (!qword_1003201E0)
  {
    v1 = sub_100007FAC(&qword_1003201A0);
    v2[0] = sub_100007FAC(&qword_100320190);
    v2[1] = type metadata accessor for BorderedProminentButtonStyle(255);
    v2[2] = sub_100110BA0();
    v2[3] = sub_1000052EC(&qword_100318960, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_1000084FC(&qword_100318978, &qword_100318968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003201E0);
  }
  return result;
}

uint64_t sub_100110E70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100110E98(_QWORD *a1)
{
  __n128 v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tint.setter(v1);
}

uint64_t sub_100110EC0()
{
  return sub_10002B614(&qword_1003201F0, &qword_1003201B8, (void (*)(void))sub_100110EE4);
}

unint64_t sub_100110EE4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1003201F8;
  if (!qword_1003201F8)
  {
    v1 = sub_100007FAC(&qword_1003201B0);
    v2[0] = sub_100007FAC(&qword_1003201A0);
    v2[1] = sub_100110D80();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.keyboardShortcut(_:)>>, 1);
    sub_1000084FC(&qword_100318880, &qword_100318888, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003201F8);
  }
  return result;
}

double sub_100110F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  if (a1 != 1)
  {
    swift_retain(a4);
    *(_QWORD *)&result = swift_retain(a1).n128_u64[0];
  }
  return result;
}

uint64_t sub_100110FC4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result != 1)
  {
    swift_release(result);
    return swift_release(a4);
  }
  return result;
}

uint64_t initializeWithCopy for TryOutErrorView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v5 = a2[3];
  *(_QWORD *)(a1 + 24) = v5;
  swift_retain(v3);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for TryOutErrorView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v6 = a1[3];
  v7 = a2[3];
  a1[3] = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

uint64_t *assignWithTake for TryOutErrorView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v5 = a1[3];
  a1[3] = a2[3];
  swift_release(v5);
  return a1;
}

ValueMetadata *type metadata accessor for TryOutErrorView()
{
  return &type metadata for TryOutErrorView;
}

unint64_t sub_100111124()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = qword_100320208;
  if (!qword_100320208)
  {
    v1 = sub_100007FAC(&qword_100320140);
    v2 = sub_100007FAC(&qword_100320130);
    v3 = sub_100007FAC(&qword_100320158);
    v4 = sub_100007FAC(&qword_100320128);
    v8 = sub_100007FAC(&qword_100320148);
    v9 = sub_1000084FC(&qword_100320150, &qword_100320148, (uint64_t)&unk_100256288);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v8 = v4;
    v9 = OpaqueTypeConformance2;
    v6 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.navigationBarBackButtonHidden(_:)>>, 1);
    v7 = sub_1000084FC(&qword_100320160, &qword_100320158, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v8 = v2;
    v9 = v3;
    v10 = v6;
    v11 = v7;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320208);
  }
  return result;
}

uint64_t sub_10011126C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029AA54, 1);
}

uint64_t sub_100111280(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  _BYTE v7[9];
  uint64_t v8;

  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(a2 + 8) != 0;
  v7[1] = *(_BYTE *)(v2 + 32);
  v8 = v3;
  v7[0] = v4;
  v5 = sub_100003DB8(&qword_100316780);
  return State.wrappedValue.setter(v7, v5);
}

uint64_t sub_1001112DC()
{
  uint64_t v0;

  return sub_1001106A4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1001112EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100110944(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100111300()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_10011132C()
{
  uint64_t v0;

  sub_100110834(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10011133C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v0 = sub_100007FAC(&qword_100320210);
  v1 = sub_100007FAC(&qword_100318730);
  v6 = sub_100007FAC(&qword_10031CC80);
  v7 = (void *)sub_100007FAC(&qword_100318260);
  v8 = sub_1000084FC(&qword_10031CC88, &qword_10031CC80, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v9 = (void *)sub_100099FD4();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v3 = sub_10002B3F4();
  v4 = sub_1000084FC(&qword_100318738, &qword_100318730, (uint64_t)&protocol conformance descriptor for Button<A>);
  v6 = v0;
  v7 = &type metadata for String;
  v8 = v1;
  v9 = &type metadata for Text;
  v10 = OpaqueTypeConformance2;
  v11 = v3;
  v12 = v4;
  v13 = &protocol witness table for Text;
  return swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.alert<A, B, C>(_:isPresented:actions:message:)>>, 1);
}

ValueMetadata *type metadata accessor for BuiltInEnterRoadsidePhoneNumberHeaderView()
{
  return &type metadata for BuiltInEnterRoadsidePhoneNumberHeaderView;
}

uint64_t sub_100111460(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029AA98, 1);
}

uint64_t sub_100111470@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSString *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char v64;
  char *v65;
  uint64_t v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  NSString *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[3];
  uint64_t v77;
  uint64_t v78;
  _OWORD v79[7];

  v70 = a4;
  v75 = a5;
  v8 = sub_100003DB8(&qword_100320220);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100003DB8(&qword_100320228);
  __chkstk_darwin(v71, v12);
  v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100003DB8(&qword_100320230);
  __chkstk_darwin(v72, v15);
  v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100003DB8(&qword_100320238);
  v19 = __chkstk_darwin(v73, v18);
  v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v22);
  v74 = (uint64_t)&v70 - v23;
  if (a3)
  {
    v24 = *(_QWORD *)(a3 + 72);
    v25 = *(_QWORD *)(a3 + 80);
    sub_100007BBC((_QWORD *)(a3 + 48), v24);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v25 + 24))(v76, v24, v25);
    v26 = sub_100112204(a1, a2);
    v28 = v27;
    *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v26);
    *((_QWORD *)v11 + 1) = 0;
    v11[16] = 0;
    v29 = sub_100003DB8(&qword_100320240);
    sub_100111980(v76, a3, v70, v26, v28, (uint64_t)&v11[*(int *)(v29 + 44)]);
    swift_bridgeObjectRelease(v28);
    v30 = *(id *)(a3 + 112);
    LOBYTE(v28) = static UIContentSizeCategory.>= infix(_:_:)(v30, UIContentSizeCategoryAccessibilityExtraLarge);

    v31 = 0.0;
    if ((v28 & 1) == 0)
    {
      v32 = v77;
      v33 = v78;
      sub_100007BBC(v76, v77);
      v31 = (*(double (**)(uint64_t, uint64_t))(v33 + 120))(v32, v33);
    }
    v34 = *(id *)(a3 + 112);
    v35 = static UIContentSizeCategory.>= infix(_:_:)(v34, UIContentSizeCategoryAccessibilityExtraLarge);

    if ((v35 & 1) != 0)
    {
      v37 = INFINITY;
    }
    else
    {
      v38 = v77;
      v39 = v78;
      sub_100007BBC(v76, v77);
      v37 = (*(double (**)(uint64_t, uint64_t))(v39 + 120))(v38, v39);
    }
    v40 = static Alignment.center.getter(v36);
    v43 = v42;
    if (v31 > v37)
    {
      v44 = static os_log_type_t.fault.getter(v41);
      v45 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v45, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    }
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v79, 0, 1, 0, 1, 0, 1, *(_QWORD *)&v31, 0, 0, 1, *(_QWORD *)&v37, 0, v40, v43);
    sub_10000B234((uint64_t)v11, (uint64_t)v14, &qword_100320220);
    v46 = &v14[*(int *)(v71 + 36)];
    v47 = v79[5];
    *((_OWORD *)v46 + 4) = v79[4];
    *((_OWORD *)v46 + 5) = v47;
    *((_OWORD *)v46 + 6) = v79[6];
    v48 = v79[1];
    *(_OWORD *)v46 = v79[0];
    *((_OWORD *)v46 + 1) = v48;
    v49 = v79[3];
    *((_OWORD *)v46 + 2) = v79[2];
    *((_OWORD *)v46 + 3) = v49;
    v50 = sub_100007FF0((uint64_t)v11, &qword_100320220);
    v51 = static Edge.Set.top.getter(v50);
    v52 = v77;
    v53 = v78;
    sub_100007BBC(v76, v77);
    v54 = (*(double (**)(uint64_t, uint64_t))(v53 + 128))(v52, v53);
    v55 = EdgeInsets.init(_all:)(v54);
    v57 = v56;
    v59 = v58;
    v61 = v60;
    sub_10000B234((uint64_t)v14, (uint64_t)v17, &qword_100320228);
    v62 = &v17[*(int *)(v72 + 36)];
    *v62 = v51;
    *((double *)v62 + 1) = v55;
    *((_QWORD *)v62 + 2) = v57;
    *((_QWORD *)v62 + 3) = v59;
    *((_QWORD *)v62 + 4) = v61;
    v62[40] = 0;
    v63 = sub_100007FF0((uint64_t)v14, &qword_100320228);
    v64 = static Edge.Set.bottom.getter(v63);
    sub_10000B234((uint64_t)v17, (uint64_t)v21, &qword_100320230);
    v65 = &v21[*(int *)(v73 + 36)];
    *v65 = v64;
    *(_OWORD *)(v65 + 8) = 0u;
    *(_OWORD *)(v65 + 24) = 0u;
    v65[40] = 1;
    sub_100007FF0((uint64_t)v17, &qword_100320230);
    v66 = v74;
    sub_10000B458((uint64_t)v21, v74, &qword_100320238);
    sub_10000B458(v66, v75, &qword_100320238);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v76);
  }
  else
  {
    v68 = type metadata accessor for UIMetrics();
    v69 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
    result = EnvironmentObject.error()(0, v70, v68, v69);
    __break(1u);
  }
  return result;
}

uint64_t sub_100111980@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X3>, NSString *a3@<X4>, uint64_t a4@<X5>, void *a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  char v40;
  BOOL v41;
  uint64_t KeyPath;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  id v55;
  char v56;
  double v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  Swift::String v64;
  Swift::String v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  _QWORD *v81;
  uint64_t v82;
  id v83;
  UIContentSizeCategory v84;
  char v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  id v102;
  double v103;
  uint64_t v104;
  char v105;
  _BYTE *v106;
  _BYTE *v107;
  char v108;
  uint64_t v109;
  _OWORD *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t result;
  uint64_t v120;
  uint64_t v121;
  _BYTE v122[12];
  int v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  char *v129;
  _BYTE *v130;
  Swift::String v131;
  _QWORD *v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE *v135;
  UIContentSizeCategory v136;
  uint64_t v137;
  char v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  _OWORD v150[3];
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  char v162;
  __int128 v163;
  __int128 v164;
  char v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  _OWORD v176[10];
  _OWORD v177[12];
  uint64_t v178;
  uint64_t v179;
  char v180;
  _QWORD *v181;
  uint64_t v182;
  BOOL v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  BOOL v189;

  v131._countAndFlagsBits = a4;
  v131._object = a5;
  v136 = a3;
  v137 = a2;
  v133 = a6;
  v7 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v7, v8);
  v130 = &v122[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v128 = type metadata accessor for AccessibilityTraits(0);
  v126 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128, v10);
  v125 = &v122[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_100003DB8(&qword_10031D258);
  v14 = __chkstk_darwin(v12, v13);
  v134 = &v122[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v14, v16);
  v127 = &v122[-v18];
  __chkstk_darwin(v17, v19);
  v135 = &v122[-v20];
  v21 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001ALL, 0x8000000100267FD0);
  v129 = "nce via Satellite";
  v22 = Text.init(_:tableName:bundle:comment:)(v21);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v29 = a1[3];
  v30 = a1[4];
  v132 = a1;
  sub_100007BBC(a1, v29);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 152))(v29, v30);
  v32 = Text.font(_:)(v31, v22, v24, v28, v26);
  v34 = v33;
  v123 = v35;
  v124 = v36;
  swift_release(v31);
  sub_10002B438(v22, v24, v28);
  v37 = v26;
  v38 = v137;
  swift_bridgeObjectRelease(v37);
  if (v38)
  {
    v39 = *(id *)(v38 + 112);
    v40 = static UIContentSizeCategory.>= infix(_:_:)(v39, UIContentSizeCategoryAccessibilityExtraLarge);

    v41 = (v40 & 1) == 0;
    KeyPath = swift_getKeyPath(&unk_100256880);
    v43 = *(id *)(v38 + 112);
    v44 = static Alignment.center.getter(v43);
    v46 = v45;
    v136 = UIContentSizeCategoryAccessibilityExtraLarge;
    v47 = static UIContentSizeCategory.>= infix(_:_:)(v43, UIContentSizeCategoryAccessibilityExtraLarge);
    if ((v47 & 1) != 0)
    {
      v48 = static Alignment.center.getter(v47);
      v50 = static Alignment.== infix(_:_:)(v44, v46, v48, v49);
      if ((v50 & 1) != 0)
      {
        v44 = static Alignment.leading.getter(v50, v51);
        v46 = v52;
      }
    }

    v53 = v124;
    v184 = v32;
    v185 = v34;
    v54 = v123 & 1;
    v186 = v123 & 1;
    v187 = v124;
    v188 = KeyPath;
    v189 = v41;
    sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v176, 0.0, 1, 0.0, 1, v44, v46);
    sub_10002B438(v32, v34, v54);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v53);
    v55 = *(id *)(v137 + 112);
    v56 = static UIContentSizeCategory.>= infix(_:_:)(v55, v136);

    if ((v56 & 1) != 0)
      v57 = 1.0;
    else
      v57 = 0.5;
    v58 = swift_getKeyPath(&unk_1002568B0);
    v157 = v176[6];
    v158 = v176[7];
    v159 = v176[8];
    v160 = v176[9];
    v153 = v176[2];
    v154 = v176[3];
    v155 = v176[4];
    v156 = v176[5];
    v151 = v176[0];
    v152 = v176[1];
    *(_QWORD *)&v161 = v58;
    *((double *)&v161 + 1) = v57;
    v59 = v125;
    static AccessibilityTraits.isHeader.getter();
    v60 = sub_100003DB8(&qword_10031D278);
    v61 = sub_1000A9FC0();
    v62 = (uint64_t)v127;
    View.accessibility(addTraits:)(v59, v60, v61);
    (*(void (**)(_BYTE *, uint64_t))(v126 + 8))(v59, v128);
    v177[8] = v159;
    v177[9] = v160;
    v177[10] = v161;
    v177[4] = v155;
    v177[5] = v156;
    v177[6] = v157;
    v177[7] = v158;
    v177[0] = v151;
    v177[1] = v152;
    v177[2] = v153;
    v177[3] = v154;
    sub_100038994((uint64_t)v177);
    sub_10000B458(v62, (uint64_t)v135, &qword_10031D258);
    v63 = v130;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(151, 1);
    v64._object = (void *)0x800000010026A110;
    v64._countAndFlagsBits = 0x1000000000000041;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v64);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v131);
    v65._countAndFlagsBits = 0x1000000000000056;
    v65._object = (void *)0x800000010026A160;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v65);
    v66 = LocalizedStringKey.init(stringInterpolation:)(v63);
    v67 = Text.init(_:tableName:bundle:comment:)(v66);
    v69 = v68;
    v71 = v70;
    v73 = v72 & 1;
    v74 = v132[3];
    v75 = v132[4];
    sub_100007BBC(v132, v74);
    v76 = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 160))(v74, v75);
    v77 = Text.font(_:)(v76, v67, v69, v73, v71);
    v79 = v78;
    LODWORD(v131._object) = v80;
    v132 = v81;
    swift_release(v76);
    sub_10002B438(v67, v69, v73);
    swift_bridgeObjectRelease(v71);
    v82 = v137;
    v83 = *(id *)(v137 + 112);
    v84 = v136;
    v85 = static UIContentSizeCategory.>= infix(_:_:)(v83, v136);

    v86 = swift_getKeyPath(&unk_100256880);
    v87 = *(id *)(v82 + 112);
    v88 = static Alignment.center.getter(v87);
    v90 = v89;
    v91 = static UIContentSizeCategory.>= infix(_:_:)(v87, v84);
    if ((v91 & 1) != 0
      && (v92 = static Alignment.center.getter(v91),
          v94 = static Alignment.== infix(_:_:)(v88, v90, v92, v93),
          (v94 & 1) != 0))
    {
      v96 = v86;
      v88 = static Alignment.leading.getter(v94, v95);
      v90 = v97;
    }
    else
    {
      v96 = v86;
    }

    v98 = (uint64_t)v131._object & 1;
    v178 = v77;
    v179 = v79;
    v180 = (uint64_t)v131._object & 1;
    v99 = v79;
    v100 = v77;
    v101 = v132;
    v181 = v132;
    v182 = v96;
    v183 = (v85 & 1) == 0;
    sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v166, 0.0, 1, 0.0, 1, v88, v90);
    sub_10002B438(v100, v99, v98);
    swift_release(v96);
    swift_bridgeObjectRelease(v101);
    v102 = *(id *)(v137 + 112);
    LOBYTE(v100) = static UIContentSizeCategory.>= infix(_:_:)(v102, v136);

    if ((v100 & 1) != 0)
      v103 = 1.0;
    else
      v103 = 0.5;
    v104 = swift_getKeyPath(&unk_1002568B0);
    v105 = static Edge.Set.top.getter(v104);
    v138 = 1;
    v106 = v134;
    v107 = v135;
    sub_10000B234((uint64_t)v135, (uint64_t)v134, &qword_10031D258);
    v108 = v138;
    v109 = v133;
    sub_10000B234((uint64_t)v106, v133, &qword_10031D258);
    v110 = (_OWORD *)(v109 + *(int *)(sub_100003DB8(&qword_100320248) + 48));
    v145 = v172;
    v146 = v173;
    v147 = v174;
    v148 = v175;
    v143 = v170;
    v144 = v171;
    v141 = v168;
    v111 = v168;
    v142 = v169;
    v139 = v166;
    v140 = v167;
    *(_QWORD *)&v149 = v104;
    *((double *)&v149 + 1) = v103;
    LOBYTE(v150[0]) = v105;
    v112 = v173;
    v110[6] = v172;
    v110[7] = v112;
    v113 = v148;
    v110[8] = v147;
    v110[9] = v113;
    v114 = v142;
    v115 = v143;
    v116 = v144;
    v110[2] = v111;
    v110[3] = v114;
    *(_OWORD *)((char *)v150 + 8) = 0u;
    *(_OWORD *)((char *)&v150[1] + 8) = 0u;
    BYTE8(v150[2]) = v108;
    v110[4] = v115;
    v110[5] = v116;
    v117 = v140;
    *v110 = v139;
    v110[1] = v117;
    v118 = v150[0];
    v110[10] = v149;
    v110[11] = v118;
    v110[12] = v150[1];
    *(_OWORD *)((char *)v110 + 201) = *(_OWORD *)((char *)&v150[1] + 9);
    sub_10003893C((uint64_t)&v139);
    sub_100007FF0((uint64_t)v107, &qword_10031D258);
    v157 = v172;
    v158 = v173;
    v159 = v174;
    v160 = v175;
    v153 = v168;
    v154 = v169;
    v155 = v170;
    v156 = v171;
    v151 = v166;
    v152 = v167;
    *(_QWORD *)&v161 = v104;
    *((double *)&v161 + 1) = v103;
    v162 = v105;
    v163 = 0u;
    v164 = 0u;
    v165 = v108;
    sub_100038994((uint64_t)&v151);
    return sub_100007FF0((uint64_t)v106, &qword_10031D258);
  }
  else
  {
    v120 = type metadata accessor for UIMetrics();
    v121 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
    result = EnvironmentObject.error()(0, v136, v120, v121);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001121F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100111470(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(NSString **)(v1 + 24), a1);
}

uint64_t sub_100112204(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  id v6;
  id v7;
  Swift::String v8;
  Swift::String_optional v9;
  Swift::String v10;
  uint64_t countAndFlagsBits;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  Swift::String v21;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 248) == 3 || (*(_BYTE *)(a1 + 216) & 1) != 0)
    {
      v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
LABEL_8:
      v7 = v6;
      v8._countAndFlagsBits = 0xD000000000000013;
      v21._countAndFlagsBits = 0xD000000000000038;
      v21._object = (void *)0x8000000100265EE0;
      v8._object = (void *)0x8000000100262940;
      v9.value._object = (void *)0x80000001002621B0;
      v9.value._countAndFlagsBits = 0xD000000000000012;
      v10._countAndFlagsBits = 0;
      v10._object = (void *)0xE000000000000000;
      countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, (NSBundle)v7, v10, v21)._countAndFlagsBits;

      return countAndFlagsBits;
    }
    v3 = *(_QWORD *)(a1 + 208);
    swift_beginAccess(a1 + 112, v20, 0, 0);
    v4 = *(_QWORD *)(a1 + 112);
    if (v4)
    {
      v5 = v4;
      if (!*(_QWORD *)(v4 + 16))
        goto LABEL_13;
    }
    else
    {
      v5 = sub_10022710C((uint64_t)_swiftEmptyArrayStorage);
      if (!*(_QWORD *)(v5 + 16))
      {
LABEL_13:
        swift_bridgeObjectRetain(v4);
        swift_bridgeObjectRelease(v5);
        v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        goto LABEL_8;
      }
    }
    v13 = sub_10018647C(v3);
    if ((v14 & 1) != 0)
    {
      v15 = *(_QWORD *)(v5 + 56) + 40 * v13;
      countAndFlagsBits = *(_QWORD *)(v15 + 8);
      v16 = *(_QWORD *)(v15 + 16);
      swift_bridgeObjectRetain(v4);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v5);
      return countAndFlagsBits;
    }
    goto LABEL_13;
  }
  v18 = type metadata accessor for RoadsideAssistanceModel();
  v19 = sub_100056D60(&qword_100318688, (uint64_t (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel);
  result = EnvironmentObject.error()(0, a2, v18, v19);
  __break(1u);
  return result;
}

uint64_t sub_1001123D4()
{
  return sub_10002B614(&qword_100320250, &qword_100320238, (void (*)(void))sub_100112408);
}

uint64_t sub_100112408()
{
  return sub_10002B614(&qword_100320258, &qword_100320230, (void (*)(void))sub_10011242C);
}

unint64_t sub_10011242C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100320260;
  if (!qword_100320260)
  {
    v1 = sub_100007FAC(&qword_100320228);
    sub_1000084FC(&qword_100320268, &qword_100320220, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320260);
  }
  return result;
}

uint64_t sub_1001124B0(uint64_t a1, uint64_t a2)
{
  return (*(_QWORD *)a1 == *(_QWORD *)a2) & ~(*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8));
}

_QWORD *sub_1001124D4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t started;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v54;
  uint64_t v55;

  v1 = v0;
  v2 = type metadata accessor for CoreAnalyticsAgent();
  swift_allocObject(v2, 24, 7);
  v3 = sub_100175C88();
  v0[2] = v3;
  v4 = sub_100003DB8(&qword_1003203B8);
  v5 = swift_allocObject(v4, 312, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1002568E0;
  v6 = type metadata accessor for AnalyticsObstruction();
  v7 = swift_allocObject(v6, 75, 7);
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_BYTE *)(v7 + 72) = 1;
  *(_WORD *)(v7 + 73) = 512;
  *(_QWORD *)(v7 + 16) = v3;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = &off_1002F67C8;
  *(_QWORD *)(v5 + 32) = v7;
  v8 = type metadata accessor for AnalyticsQuestionnaireProgressTiming(0);
  v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v10 = v9 + OBJC_IVAR____TtC8SOSBuddy36AnalyticsQuestionnaireProgressTiming_data;
  v11 = _s8SOSBuddy4DataVMa_1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = v9 + OBJC_IVAR____TtC8SOSBuddy36AnalyticsQuestionnaireProgressTiming_currentQuestionnaireId;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  *(_QWORD *)(v9 + 16) = v3;
  *(_QWORD *)(v5 + 96) = v8;
  *(_QWORD *)(v5 + 104) = &off_1002EE830;
  *(_QWORD *)(v5 + 72) = v9;
  v13 = v1[2];
  v14 = type metadata accessor for AnalyticsSatelliteConnectionAttempt(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v15 = sub_100209E30(v13);
  *(_QWORD *)(v5 + 136) = v14;
  *(_QWORD *)(v5 + 144) = &off_1002FA420;
  *(_QWORD *)(v5 + 112) = v15;
  v16 = v1[2];
  v17 = type metadata accessor for AnalyticsSatelliteConnectionStats();
  swift_allocObject(v17, 120, 7);
  v18 = sub_100071700(v16);
  *(_QWORD *)(v5 + 176) = v17;
  *(_QWORD *)(v5 + 184) = &off_1002E96D8;
  *(_QWORD *)(v5 + 152) = v18;
  v19 = v1[2];
  v20 = type metadata accessor for AnalyticsSessionStart(0);
  v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v22 = v21 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_data;
  v23 = _s8SOSBuddy4DataVMa_2(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v24 = v21 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentTarget;
  *(_OWORD *)v24 = 0u;
  *(_OWORD *)(v24 + 16) = 0u;
  *(_QWORD *)(v24 + 32) = 0;
  *(_BYTE *)(v24 + 40) = 1;
  *(_QWORD *)(v21 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentSuggestedActions) = &_swiftEmptySetSingleton;
  v25 = v21 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentLinkState;
  v26 = type metadata accessor for LinkState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  *(_QWORD *)(v21 + 16) = v19;
  *(_QWORD *)(v5 + 216) = v20;
  *(_QWORD *)(v5 + 224) = &off_1002F1378;
  *(_QWORD *)(v5 + 192) = v21;
  v27 = v1[2];
  started = type metadata accessor for AnalyticsStartMessage(0);
  v29 = swift_allocObject(started, *(unsigned int *)(started + 48), *(unsigned __int16 *)(started + 52));
  v30 = v29 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsStartMessage_data;
  v31 = type metadata accessor for Data(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  v32 = v29 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsStartMessage_currentTarget;
  *(_OWORD *)v32 = 0u;
  *(_OWORD *)(v32 + 16) = 0u;
  *(_QWORD *)(v32 + 32) = 0;
  *(_BYTE *)(v32 + 40) = 1;
  *(_QWORD *)(v29 + 16) = v27;
  *(_QWORD *)(v5 + 256) = started;
  *(_QWORD *)(v5 + 264) = &off_1002E87D0;
  *(_QWORD *)(v5 + 232) = v29;
  v33 = v1[2];
  v34 = type metadata accessor for AnalyticsStateRetention(0);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  v35 = sub_10008E5D4(v33);
  *(_QWORD *)(v5 + 296) = v34;
  *(_QWORD *)(v5 + 304) = &off_1002EB298;
  *(_QWORD *)(v5 + 272) = v35;
  v1[3] = v5;
  v36 = v1[2];
  v37 = type metadata accessor for AnalyticsEntryPoint();
  v38 = swift_allocObject(v37, 24, 7);
  *(_QWORD *)(v38 + 16) = v36;
  v1[4] = v38;
  v39 = qword_100315820;
  swift_retain_n(v3, v40);
  swift_retain(v13);
  swift_retain(v16);
  swift_retain(v19);
  swift_retain(v27);
  swift_retain(v33);
  swift_retain(v36);
  if (v39 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v41 = type metadata accessor for Logger(0);
  sub_10000D744(v41, (uint64_t)qword_10033FD18);
  v43 = swift_retain_n(v1, v42);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(12, -1);
    v47 = swift_slowAlloc(32, -1);
    v54 = (uint64_t)v1;
    v55 = v47;
    *(_DWORD *)v46 = 136446210;
    v48 = type metadata accessor for Analytics();
    v49 = swift_retain(v1);
    v50 = String.init<A>(describing:)(&v54, v48, v49);
    v52 = v51;
    v54 = sub_100172BEC(v50, v51, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v46 + 4, v46 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v52);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "[%{public}s] init", v46, 0xCu);
    swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v46, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  return v1;
}

_QWORD *sub_1001129F4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = swift_retain_n(v0, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = (uint64_t)v1;
    v16 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for Analytics();
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v9, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] deinit", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  swift_release(v1[2]);
  swift_bridgeObjectRelease(v1[3]);
  swift_release(v1[4]);
  return v1;
}

uint64_t sub_100112BC8()
{
  uint64_t v0;

  sub_1001129F4();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for Analytics()
{
  return objc_opt_self(_TtC8SOSBuddy9Analytics);
}

uint64_t sub_100112C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 32;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
    do
    {
      sub_100007CBC(v3, (uint64_t)v7);
      v4 = v8;
      v5 = v9;
      sub_100007BBC(v7, v8);
      (*(void (**)(uint64_t, uint64_t))(v5 + 112))(v4, v5);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v7);
      v3 += 40;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease(v1);
  }
  return result;
}

uint64_t sub_100112CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __n128 v5;
  uint64_t v6;
  void (*v7)(_QWORD *, uint64_t, uint64_t);
  char v8;
  uint64_t (*v9)(_QWORD *, uint64_t);
  uint64_t result;
  __n128 v11;
  char v12;
  uint64_t v13;

  v0 = type metadata accessor for DispatchPredicate(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v4 = static OS_dispatch_queue.main.getter(v5);
  v6 = enum case for DispatchPredicate.onQueue(_:);
  v7 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v1 + 104);
  v7(v4, enum case for DispatchPredicate.onQueue(_:), v0);
  v8 = _dispatchPreconditionTest(_:)(v4);
  v9 = *(uint64_t (**)(_QWORD *, uint64_t))(v1 + 8);
  result = v9(v4, v0);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  *v4 = static OS_dispatch_queue.main.getter(v11);
  v7(v4, v6, v0);
  v12 = _dispatchPreconditionTest(_:)(v4);
  result = v9(v4, v0);
  if ((v12 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_100112D9C(uint64_t a1)
{
  if (sub_100067058(0, a1))
    return 0x636E656772656D45;
  if (sub_100067058(1u, a1))
    return 4281170;
  if (sub_100067058(4u, a1))
    return 0x794D646E6946;
  if (sub_100067058(2u, a1))
    return 0x6E6967617373654DLL;
  if (sub_100067058(3u, a1))
    return 0x74756F797254;
  return 0;
}

ValueMetadata *type metadata accessor for AnalyticsConversationId()
{
  return &type metadata for AnalyticsConversationId;
}

uint64_t getEnumTagSinglePayload for AnalyticsConversationState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 127);
  v3 = (*(_BYTE *)(a1 + 40) & 0x7E | (*(unsigned __int8 *)(a1 + 40) >> 7)) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AnalyticsConversationState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 32) = 0;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 40) = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
    }
  }
  return result;
}

uint64_t sub_100112F44(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40) >> 7;
}

uint64_t sub_100112F50(uint64_t result)
{
  *(_BYTE *)(result + 40) &= ~0x80u;
  return result;
}

uint64_t sub_100112F60(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = *(_BYTE *)(result + 40) & 1 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsConversationState()
{
  return &type metadata for AnalyticsConversationState;
}

double sub_100112F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v7;
  double result;

  v7 = a7 >> 62;
  if (!(a7 >> 62))
    goto LABEL_6;
  if ((_DWORD)v7 == 2)
  {
    a6 = a7 & 0x3FFFFFFFFFFFFFFFLL;
    goto LABEL_6;
  }
  a6 = a2;
  if ((_DWORD)v7 == 1)
LABEL_6:
    *(_QWORD *)&result = swift_retain(a6).n128_u64[0];
  return result;
}

uint64_t destroy for AnalyticsRequestContext(uint64_t a1)
{
  return sub_100112FC8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t sub_100112FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v7;
  uint64_t result;

  v7 = a7 >> 62;
  if (!(a7 >> 62))
    return swift_release(a6);
  if ((_DWORD)v7 == 2)
  {
    a6 = a7 & 0x3FFFFFFFFFFFFFFFLL;
    return swift_release(a6);
  }
  a6 = a2;
  if ((_DWORD)v7 == 1)
    return swift_release(a6);
  return result;
}

uint64_t *initializeWithCopy for AnalyticsRequestContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  sub_100112F84(*a2, v4, v5, v6, v7, v8, v9);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  return a1;
}

uint64_t *assignWithCopy for AnalyticsRequestContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  sub_100112F84(*a2, v4, v5, v6, v7, v8, v9);
  v10 = *a1;
  v11 = a1[1];
  v12 = a1[2];
  v13 = a1[3];
  v14 = a1[4];
  v15 = a1[5];
  v16 = a1[6];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  sub_100112FC8(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t *assignWithTake for AnalyticsRequestContext(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = *a1;
  v6 = a1[1];
  v5 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v11;
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  a1[6] = v3;
  sub_100112FC8(v4, v6, v5, v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsRequestContext(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >> 1 >= 0xFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 8190);
  v3 = (((*(_QWORD *)(a1 + 48) >> 51) >> 11) | (4
                                                            * ((*(_QWORD *)(a1 + 48) >> 51) & 0x600 | ((*(_QWORD *)(a1 + 48) & 7) << 6) | (*(_QWORD *)(a1 + 40) >> 58) & 0x3C | (*(_QWORD *)(a1 + 40) >> 1) & 3))) ^ 0x1FFF;
  if (v3 >= 0x1FFD)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AnalyticsRequestContext(uint64_t result, unsigned int a2, unsigned int a3, double a4, uint64x2_t a5)
{
  uint64x2_t v5;
  int8x16_t v6;

  if (a2 >> 1 > 0xFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 8190;
    if (a3 >> 1 >= 0xFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >> 1 >= 0xFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
    {
      v5 = (uint64x2_t)vdupq_n_s64((-a2 >> 2) & 0x7FF | ((-a2 & 0x1FFF) << 11));
      a5.i64[0] = (-a2 >> 2) & 0x7FF | ((-a2 & 0x1FFF) << 11);
      v6.i64[0] = vshlq_u64(a5, (uint64x2_t)xmmword_1002568F0).u64[0];
      v6.i64[1] = vshlq_u64(v5, (uint64x2_t)xmmword_100256900).i64[1];
      *(_QWORD *)(result + 32) = 0;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(int8x16_t *)(result + 40) = vorrq_s8(vandq_s8(v6, (int8x16_t)xmmword_100256910), vandq_s8((int8x16_t)vshlq_u64(v5, (uint64x2_t)xmmword_100256920), (int8x16_t)vdupq_n_s64(0xF000000000000000)));
    }
  }
  return result;
}

uint64_t sub_100113280(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48) >> 62;
}

uint64_t sub_10011328C(uint64_t result)
{
  *(_QWORD *)(result + 48) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_10011329C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  *(_QWORD *)(result + 40) &= 0xFFFFFFFFFFFFFF9uLL;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsRequestContext()
{
  return &type metadata for AnalyticsRequestContext;
}

id sub_100113390()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WeakCADisplayLinkTarget();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for WeakCADisplayLinkTarget()
{
  return objc_opt_self(_TtC8SOSBuddy23WeakCADisplayLinkTarget);
}

uint64_t sub_1001133F0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10011341C + 4 * byte_100256A28[*v0]))(0x747865742ELL, 0xE500000000000000);
}

uint64_t sub_10011341C()
{
  return 0x6C6C61632ELL;
}

uint64_t sub_10011342C()
{
  return 0x7465446C6C61662ELL;
}

uint64_t sub_100113450()
{
  return 0x617070616B2ELL;
}

uint64_t sub_100113464()
{
  _BYTE *v0;

  if (*v0)
    return 0x7474696D6D6F632ELL;
  else
    return 0x6D6D6F43746F6E2ELL;
}

uint64_t sub_1001134D8()
{
  uint64_t v0;

  return sub_1001134FC(*(_QWORD *)v0, *(_BYTE *)(v0 + 8), (uint64_t)&type metadata for EmergencyModel.ConversationState);
}

uint64_t sub_1001134FC(uint64_t a1, char a2, uint64_t a3)
{
  Swift::String v6;
  Swift::String v7;
  void *object;
  Swift::String v9;
  Swift::String v10;
  uint64_t v12;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  v6._countAndFlagsBits = 0x203A646928;
  v6._object = (void *)0xE500000000000000;
  String.append(_:)(v6);
  v12 = a1;
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9._countAndFlagsBits = 8236;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  LOBYTE(v12) = a2;
  _print_unlocked<A, B>(_:_:)(&v12, v13, a3, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v10._countAndFlagsBits = 41;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return v13[0];
}

uint64_t sub_1001135C8()
{
  uint64_t v0;

  return sub_1001134FC(*(_QWORD *)v0, *(_BYTE *)(v0 + 8), (uint64_t)&type metadata for RoadsideAssistanceModel.ConversationState);
}

uint64_t sub_1001135EC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100113628 + 4 * byte_100256A2C[a1]))(0xD00000000000001CLL, 0x800000010026A340);
}

uint64_t sub_100113628()
{
  return 0x75646F72746E692ELL;
}

uint64_t sub_10011364C()
{
  return 0x6F6974736575712ELL;
}

unint64_t sub_100113668()
{
  return 0xD000000000000012;
}

uint64_t sub_100113684()
{
  return 0x6F5479646165722ELL;
}

uint64_t sub_1001136A4()
{
  unsigned __int8 *v0;

  return sub_1001135EC(*v0);
}

uint64_t sub_1001136AC()
{
  uint64_t v0;

  return sub_1001141B8(*(_BYTE *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

void sub_1001136BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v1 = type metadata accessor for ConnectionClosed(0);
  __chkstk_darwin(v1, v2);
  v3 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100114310(v0, (uint64_t)v6);
  v7 = (char *)sub_100113790 + 4 * byte_100256A31[swift_getEnumCaseMultiPayload(v6, v3)];
  __asm { BR              X10 }
}

uint64_t sub_100113790()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;

  v3 = *v1;
  *(_QWORD *)(v2 - 64) = 0;
  *(_QWORD *)(v2 - 56) = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  v4 = *(_QWORD *)(v2 - 56);
  *(_QWORD *)(v2 - 64) = *(_QWORD *)(v2 - 64);
  *(_QWORD *)(v2 - 56) = v4;
  v5._countAndFlagsBits = v0 + 1;
  v5._object = (void *)0x800000010026A400;
  String.append(_:)(v5);
  *(_BYTE *)(v2 - 65) = v3;
  _print_unlocked<A, B>(_:_:)(v2 - 65, v2 - 64, &type metadata for QuestionnairePolicy.QuestionnaireScope, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return *(_QWORD *)(v2 - 64);
}

uint64_t sub_100113978()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6C616D696E696D2ELL;
  if (*v0 != 1)
    v1 = 0x6D6F747375632ELL;
  if (*v0)
    return v1;
  else
    return 0x746361706D6F632ELL;
}

uint64_t sub_1001139D4()
{
  uint64_t v0;
  double *v1;
  Swift::String v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  __n128 v13;
  Swift::String v14;
  void *v15;
  Swift::String v16;

  v1 = (double *)v0;
  _StringGuts.grow(_:)(65);
  v2._countAndFlagsBits = 0x203A657A697328;
  v2._object = (void *)0xE700000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = sub_1000DB284(2, *v1, v1[1]);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._object = (void *)0x800000010026A420;
  v5._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v5);
  v6._countAndFlagsBits = sub_1000E128C(2, v1[2], v1[3], v1[4], v1[5]);
  v7 = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v7);
  v8._countAndFlagsBits = 0x646E61707865202CLL;
  v8._object = (void *)0xEC000000203A6465;
  String.append(_:)(v8);
  if ((*(_BYTE *)(v0 + 48) & 1) != 0)
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 48) & 1) != 0)
    v10 = 0xE400000000000000;
  else
    v10 = 0xE500000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 0xD000000000000013;
  v12._object = (void *)0x800000010026A440;
  String.append(_:)(v12);
  sub_100114354(v0);
  sub_10011437C();
  v14._countAndFlagsBits = Set.description.getter(v13);
  v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  sub_1001143C0(v0);
  v16._countAndFlagsBits = 41;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return 0;
}

uint64_t sub_100113B78()
{
  return sub_1001139D4();
}

uint64_t sub_100113BB0(char a1)
{
  BOOL v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;

  v1 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v2 = 1702195828;
  else
    v2 = 0x65736C6166;
  if (v1)
    v3 = 0xE500000000000000;
  else
    v3 = 0xE400000000000000;
  v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease(v3);
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0x65646E6170786528;
}

uint64_t sub_100113C40()
{
  char *v0;

  return sub_100113BB0(*v0);
}

uint64_t sub_100113C48(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100113C88 + 4 * byte_100256A37[a1]))(0x716552726573752ELL, 0xEE00646574736575);
}

unint64_t sub_100113C88()
{
  return 0xD000000000000015;
}

void sub_100113CC8()
{
  JUMPOUT(0x100113CDCLL);
}

uint64_t sub_100113CE8()
{
  unsigned __int8 *v0;

  return sub_100113C48(*v0);
}

uint64_t sub_100113CF0()
{
  unsigned __int8 *v0;
  int v1;
  Swift::String v3;
  Swift::String v4;
  char v5;
  _QWORD v6[2];

  v1 = *v0;
  if (v1 == 5)
    return 7237422;
  v6[0] = 0;
  v6[1] = 0xE000000000000000;
  v3._countAndFlagsBits = 0x2866666F2ELL;
  v3._object = (void *)0xE500000000000000;
  String.append(_:)(v3);
  v5 = v1;
  _print_unlocked<A, B>(_:_:)(&v5, v6, &type metadata for StewieState.OffReason, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v6[0];
}

uint64_t sub_100113D88()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100113DBC + 4 * byte_100256A3C[*v0]))(0xD000000000000012, 0x800000010026A4B0);
}

uint64_t sub_100113DBC(uint64_t a1)
{
  return a1 + 3;
}

uint64_t sub_100113DD4()
{
  return 0x6E616C707269612ELL;
}

uint64_t sub_100113DF8()
{
  return 0x747365676E6F632ELL;
}

uint64_t sub_100113E14()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100113E48 + 4 * byte_100256A40[*v0]))(0x6E656772656D652ELL, 0xEA00000000007963);
}

uint64_t sub_100113E48()
{
  return 0x64697364616F722ELL;
}

uint64_t sub_100113E64()
{
  return 0x6967617373656D2ELL;
}

uint64_t sub_100113E80()
{
  return 0x74754F7972742ELL;
}

uint64_t sub_100113E98()
{
  return 0x794D646E69662ELL;
}

uint64_t sub_100113EB0()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x696C6C657461732ELL;
  if (*v0 != 1)
    v1 = 0x656E7265746E692ELL;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E752ELL;
}

uint64_t sub_100113F14(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100113F54 + 4 * byte_100256A45[a1]))(0x716552726573752ELL, 0xEE00646574736575);
}

uint64_t sub_100113F54()
{
  return 0x794D646E69662ELL;
}

uint64_t sub_100113F6C()
{
  return 0x6E616C707269612ELL;
}

unint64_t sub_100113F90()
{
  return 0xD000000000000012;
}

uint64_t sub_10011406C()
{
  unsigned __int8 *v0;

  return sub_100113F14(*v0);
}

uint64_t sub_100114074()
{
  return 0x72676F72506E692ELL;
}

uint64_t sub_100114094(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001140CC + 4 * byte_100256A51[a1]))(0x7463656E6E6F632ELL, 0xEA00000000006465);
}

unint64_t sub_1001140CC()
{
  return 0xD000000000000011;
}

uint64_t sub_1001141B0()
{
  unsigned __int8 *v0;

  return sub_100114094(*v0);
}

uint64_t sub_1001141B8(char a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  char v16;
  uint64_t v17;
  unint64_t v18;

  if (a1 == 2)
  {
    if (!a2)
      return 4144465;
    v17 = 15697;
    v18 = 0xE200000000000000;
    if (a4)
    {
      v7 = *(_QWORD *)(a2 + 16);
      v8 = *(void **)(a2 + 24);
      sub_10007BB44(a2, a3, (uint64_t)a4);
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRetain(v8);
      v9._countAndFlagsBits = v7;
      v9._object = v8;
      String.append(_:)(v9);
      swift_bridgeObjectRelease(v8);
      v10._countAndFlagsBits = 43;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      v11._countAndFlagsBits = a3;
      v11._object = a4;
      String.append(_:)(v11);
      swift_release(a2);
      swift_bridgeObjectRelease_n(a4, 2);
    }
    else
    {
      v13 = *(_QWORD *)(a2 + 16);
      v14 = *(void **)(a2 + 24);
      sub_10007BB44(a2, a3, 0);
      swift_bridgeObjectRetain(v14);
      v15._countAndFlagsBits = v13;
      v15._object = v14;
      String.append(_:)(v15);
      swift_release(a2);
      swift_bridgeObjectRelease(v14);
    }
  }
  else
  {
    v17 = 0;
    v18 = 0xE000000000000000;
    v16 = a1;
    _print_unlocked<A, B>(_:_:)(&v16, &v17, &type metadata for QuestionnaireState.Stage, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  }
  return v17;
}

uint64_t sub_100114310(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100114354(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 56));
  return a1;
}

unint64_t sub_10011437C()
{
  unint64_t result;

  result = qword_1003203F0;
  if (!qword_1003203F0)
  {
    result = swift_getWitnessTable(&unk_10025C9D8, &type metadata for PreferredBannerLayout.Mode);
    atomic_store(result, (unint64_t *)&qword_1003203F0);
  }
  return result;
}

uint64_t sub_1001143C0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  return a1;
}

uint64_t destroy for BuiltInSelectRoadsideProviderContentView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[6]);
  swift_release(a1[7]);
  swift_release(a1[9]);
  return swift_release(a1[11]);
}

uint64_t initializeWithCopy for BuiltInSelectRoadsideProviderContentView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v8 = a2[4];
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  v9 = a2[6];
  *(_QWORD *)(a1 + 48) = v9;
  v10 = a2[9];
  v13 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  v11 = a2[11];
  *(_QWORD *)(a1 + 88) = v11;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v13);
  swift_retain(v10);
  swift_retain(v11);
  return a1;
}

uint64_t *assignWithCopy for BuiltInSelectRoadsideProviderContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a1[4];
  v9 = a2[4];
  a1[4] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[5] = a2[5];
  v10 = a2[6];
  v11 = a1[6];
  a1[6] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[7];
  v13 = a1[7];
  a1[7] = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = a2[9];
  v15 = a1[9];
  a1[8] = a2[8];
  a1[9] = v14;
  swift_retain(v14);
  swift_release(v15);
  *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
  v16 = a1[11];
  v17 = a2[11];
  a1[11] = v17;
  swift_retain(v17);
  swift_release(v16);
  return a1;
}

__n128 initializeWithTake for BuiltInSelectRoadsideProviderContentView(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t *assignWithTake for BuiltInSelectRoadsideProviderContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  v7 = a1[4];
  v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_release(v7);
  a1[5] = a2[5];
  swift_release(a1[6]);
  v9 = a1[7];
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  swift_release(v9);
  v10 = a1[9];
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  swift_release(v10);
  *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
  v11 = a1[11];
  a1[11] = a2[11];
  swift_release(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for BuiltInSelectRoadsideProviderContentView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BuiltInSelectRoadsideProviderContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BuiltInSelectRoadsideProviderContentView()
{
  return &type metadata for BuiltInSelectRoadsideProviderContentView;
}

uint64_t sub_10011474C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029AD24, 1);
}

void sub_10011475C(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1;
    sub_10017E3E8(0, v1, 0);
    v4 = sub_1000BABBC(v2);
    v5 = 0;
    v6 = v2 + 64;
    v22 = v2 + 80;
    v23 = v1;
    v24 = v3;
    v25 = v2 + 64;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(v2 + 32))
    {
      v9 = (unint64_t)v4 >> 6;
      if ((*(_QWORD *)(v6 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0)
        goto LABEL_23;
      if (*(_DWORD *)(v2 + 36) != v3)
        goto LABEL_24;
      v26 = v5;
      v10 = *(_QWORD *)(v2 + 56) + 40 * v4;
      v11 = *(_QWORD *)(v10 + 16);
      v29 = *(_QWORD *)(v10 + 8);
      v30 = *(_QWORD *)v10;
      v27 = *(_BYTE *)(v10 + 25);
      v28 = *(_BYTE *)(v10 + 24);
      v12 = *(_QWORD *)(v10 + 32);
      v13 = v2;
      v15 = _swiftEmptyArrayStorage[2];
      v14 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
      if (v15 >= v14 >> 1)
        sub_10017E3E8(v14 > 1, v15 + 1, 1);
      _swiftEmptyArrayStorage[2] = v15 + 1;
      v16 = &_swiftEmptyArrayStorage[5 * v15];
      v16[4] = v30;
      v16[5] = v29;
      v16[6] = v11;
      *((_BYTE *)v16 + 56) = v28;
      *((_BYTE *)v16 + 57) = v27;
      v16[8] = v12;
      v7 = 1 << *(_BYTE *)(v13 + 32);
      if (v4 >= v7)
        goto LABEL_25;
      v6 = v25;
      v17 = *(_QWORD *)(v25 + 8 * v9);
      if ((v17 & (1 << v4)) == 0)
        goto LABEL_26;
      v2 = v13;
      v3 = v24;
      if (*(_DWORD *)(v13 + 36) != v24)
        goto LABEL_27;
      v18 = v17 & (-2 << (v4 & 0x3F));
      if (v18)
      {
        v7 = __clz(__rbit64(v18)) | v4 & 0xFFFFFFFFFFFFFFC0;
        v8 = v23;
      }
      else
      {
        v19 = v9 + 1;
        v20 = (unint64_t)(v7 + 63) >> 6;
        v8 = v23;
        if (v9 + 1 < v20)
        {
          v21 = *(_QWORD *)(v25 + 8 * v19);
          if (v21)
          {
LABEL_20:
            v7 = __clz(__rbit64(v21)) + (v19 << 6);
          }
          else
          {
            while (v20 - 2 != v9)
            {
              v21 = *(_QWORD *)(v22 + 8 * v9++);
              if (v21)
              {
                v19 = v9 + 1;
                goto LABEL_20;
              }
            }
          }
        }
      }
      v5 = v26 + 1;
      v4 = v7;
      if (v26 + 1 == v8)
        return;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
}

void sub_1001149B8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_100192334(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_1001168B8(v4);
  *a1 = v2;
}

uint64_t sub_100114A20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[5];

  v3 = sub_100003DB8(&qword_1003203F8);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v24[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_100320400);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v24[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD **)(v1 + 32);
  if (v11)
  {
    v12 = v11[9];
    v13 = v11[10];
    sub_100007BBC(v11 + 6, v12);
    v14 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v13 + 24))(v24, v12, v13);
    *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v14);
    *((_QWORD *)v6 + 1) = 0;
    v6[16] = 1;
    v15 = sub_100003DB8(&qword_100320408);
    v16 = sub_100114BDC(v1, v24, (uint64_t)&v6[*(int *)(v15 + 44)]);
    v17 = static Edge.Set.bottom.getter(v16);
    sub_10000B234((uint64_t)v6, (uint64_t)v10, &qword_1003203F8);
    v18 = &v10[*(int *)(v7 + 36)];
    *v18 = v17;
    *(_OWORD *)(v18 + 8) = 0u;
    *(_OWORD *)(v18 + 24) = 0u;
    v18[40] = 1;
    sub_100007FF0((uint64_t)v6, &qword_1003203F8);
    sub_10000B458((uint64_t)v10, a1, &qword_100320400);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v24);
  }
  else
  {
    v20 = *(_QWORD *)(v1 + 40);
    v21 = type metadata accessor for UIMetrics();
    v22 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v20, v21, v22);
    __break(1u);
  }
  return result;
}

uint64_t sub_100114BDC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t OpaqueTypeConformance2;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  Swift::String v54;
  Swift::String_optional v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  char v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  id v104;
  char v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  char v110;
  void *object;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t KeyPath;
  _OWORD *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _BYTE *v128;
  _BYTE *v129;
  uint64_t v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE v139[4];
  _BOOL4 v140;
  uint64_t v141;
  UIContentSizeCategory v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  Swift::String v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE *v152;
  uint64_t *v153;
  _BYTE *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  _BYTE v163[272];
  _BYTE v164[272];
  _BYTE v165[280];
  _QWORD v166[34];
  _QWORD v167[43];
  _BYTE v168[344];
  _BYTE v169[337];
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  double v181;
  char v182;
  __int128 v183;
  __int128 v184;
  char v185;
  char v186;
  __int128 v187;
  __int128 v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  BOOL v195;
  Swift::String v196;

  v156 = a2;
  v161 = a3;
  v162 = sub_100003DB8(&qword_100320410);
  __chkstk_darwin(v162, v4);
  v154 = &v139[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100003DB8(&qword_100320418);
  v8 = __chkstk_darwin(v6, v7);
  v152 = &v139[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8, v10);
  v153 = (uint64_t *)&v139[-v11];
  v12 = sub_100003DB8(&qword_100320420);
  __chkstk_darwin(v12, v13);
  v160 = &v139[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v158 = type metadata accessor for CircularProgressViewStyle(0);
  v151 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158, v15);
  v17 = &v139[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v157 = sub_100003DB8(&qword_100316B28);
  v18 = *(_QWORD **)(v157 - 8);
  __chkstk_darwin(v157, v19);
  v21 = &v139[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = sub_100003DB8(&qword_100316B30);
  v23 = *(_QWORD *)(v22 - 8);
  v25 = __chkstk_darwin(v22, v24);
  v27 = &v139[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v29 = __chkstk_darwin(v25, v28);
  v31 = &v139[-v30];
  v32 = *(_QWORD *)(a1 + 16);
  if (v32)
  {
    v159 = v29;
    if ((*(_BYTE *)(v32 + 249) & 1) != 0)
    {
      v33 = ProgressView<>.init<>()(v29);
      CircularProgressViewStyle.init()(v33);
      v34 = sub_1000084FC(&qword_100316C20, &qword_100316B28, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
      v156 = v18;
      v35 = v34;
      v36 = sub_1000052EC(&qword_100316C28, (uint64_t (*)(uint64_t))&type metadata accessor for CircularProgressViewStyle, (uint64_t)&protocol conformance descriptor for CircularProgressViewStyle);
      v37 = v157;
      v155 = v12;
      v38 = v158;
      View.progressViewStyle<A>(_:)(v17, v157, v158, v35, v36);
      (*(void (**)(_BYTE *, uint64_t))(v151 + 8))(v17, v38);
      ((void (*)(_BYTE *, uint64_t))v156[1])(v21, v37);
      v39 = v27;
      v40 = v159;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v23 + 32))(v31, v39, v159);
      v41 = v160;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v23 + 16))(v160, v31, v40);
      swift_storeEnumTagMultiPayload(v41, v155, 0);
      *(_QWORD *)&v170 = v37;
      *((_QWORD *)&v170 + 1) = v38;
      *(_QWORD *)&v171 = v35;
      *((_QWORD *)&v171 + 1) = v36;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v170, &opaque type descriptor for <<opaque return type of View.progressViewStyle<A>(_:)>>, 1);
      v43 = sub_1000084FC(&qword_100320458, &qword_100320410, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      _ConditionalContent<>.init(storage:)(v41, v40, v162, OpaqueTypeConformance2, v43);
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v23 + 8))(v31, v40);
    }
    v45 = sub_10011585C();
    v46 = v45;
    v47 = *(_QWORD *)(v32 + 136);
    if (!v47)
    {
      sub_1001160B0((uint64_t)v169);
      sub_10000B458((uint64_t)v169, (uint64_t)&v170, &qword_100320428);
LABEL_18:
      v113 = v156[3];
      v114 = v156[4];
      sub_100007BBC(v156, v113);
      v115 = (*(uint64_t (**)(uint64_t, uint64_t))(v114 + 232))(v113, v114);
      v117 = v116;
      v118 = static HorizontalAlignment.center.getter(v115);
      v119 = (uint64_t)v153;
      *v153 = v118;
      *(_QWORD *)(v119 + 8) = v117;
      *(_BYTE *)(v119 + 16) = 0;
      sub_100003DB8(&qword_100320430);
      *(_QWORD *)v169 = v46;
      KeyPath = swift_getKeyPath(&unk_100256DE0);
      v121 = (_OWORD *)swift_allocObject(&unk_1002F0E70, 112, 7);
      v122 = *(_OWORD *)(a1 + 48);
      v121[3] = *(_OWORD *)(a1 + 32);
      v121[4] = v122;
      v123 = *(_OWORD *)(a1 + 80);
      v121[5] = *(_OWORD *)(a1 + 64);
      v121[6] = v123;
      v124 = *(_OWORD *)(a1 + 16);
      v121[1] = *(_OWORD *)a1;
      v121[2] = v124;
      sub_100116144((uint64_t *)a1);
      v125 = sub_100003DB8(&qword_100320438);
      v126 = sub_1000084FC(&qword_100320440, &qword_100320438, (uint64_t)&protocol conformance descriptor for [A]);
      v127 = sub_1001161C8();
      ForEach<>.init(_:id:content:)(v169, KeyPath, sub_10011613C, v121, v125, &type metadata for QuestionnaireLikeButton, v126, &protocol witness table for UInt64, v127);
      sub_10000B458((uint64_t)&v170, (uint64_t)v167, &qword_100320428);
      v128 = v152;
      sub_10000B234(v119, (uint64_t)v152, &qword_100320418);
      sub_10000B458((uint64_t)v167, (uint64_t)v168, &qword_100320428);
      v129 = v154;
      sub_10000B458((uint64_t)v168, (uint64_t)v154, &qword_100320428);
      v130 = sub_100003DB8(&qword_100320450);
      sub_10000B234((uint64_t)v128, (uint64_t)&v129[*(int *)(v130 + 48)], &qword_100320418);
      sub_10011642C((uint64_t)&v170, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10011620C);
      sub_10011642C((uint64_t)v168, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10011620C);
      sub_100007FF0((uint64_t)v128, &qword_100320418);
      sub_10000B458((uint64_t)v167, (uint64_t)v169, &qword_100320428);
      sub_10011642C((uint64_t)v169, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1001164C0);
      v131 = v160;
      sub_10000B234((uint64_t)v129, (uint64_t)v160, &qword_100320410);
      swift_storeEnumTagMultiPayload(v131, v12, 1);
      v132 = sub_1000084FC(&qword_100316C20, &qword_100316B28, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
      v133 = sub_1000052EC(&qword_100316C28, (uint64_t (*)(uint64_t))&type metadata accessor for CircularProgressViewStyle, (uint64_t)&protocol conformance descriptor for CircularProgressViewStyle);
      v166[0] = v157;
      v166[1] = v158;
      v166[2] = v132;
      v166[3] = v133;
      v134 = swift_getOpaqueTypeConformance2(v166, &opaque type descriptor for <<opaque return type of View.progressViewStyle<A>(_:)>>, 1);
      v135 = sub_1000084FC(&qword_100320458, &qword_100320410, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      _ConditionalContent<>.init(storage:)(v131, v159, v162, v134, v135);
      sub_10011642C((uint64_t)&v170, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1001164C0);
      sub_100007FF0((uint64_t)v129, &qword_100320410);
      return sub_100007FF0(v119, &qword_100320418);
    }
    v155 = v12;
    v48 = *(_QWORD *)(v32 + 144);
    v49 = *(_QWORD *)(v32 + 152);
    v151 = v45;
    v51 = *(_QWORD *)(v32 + 120);
    v50 = *(_QWORD *)(v32 + 128);
    LODWORD(v147) = v48 & 1;
    v52 = (void *)objc_opt_self(NSBundle);
    sub_1000648A4(v51, v50, v47, v48, v49);
    v53 = objc_msgSend(v52, "mainBundle", swift_bridgeObjectRetain(v47).n128_f64[0]);
    v54._countAndFlagsBits = 0xD000000000000017;
    v196._countAndFlagsBits = 0xD0000000000000AALL;
    v196._object = (void *)0x800000010026A650;
    v54._object = (void *)0x800000010026A630;
    v55.value._countAndFlagsBits = 0xD000000000000012;
    v55.value._object = (void *)0x80000001002621B0;
    v56._countAndFlagsBits = 0;
    v56._object = (void *)0xE000000000000000;
    v148 = NSLocalizedString(_:tableName:bundle:value:comment:)(v54, v55, (NSBundle)v53, v56, v196);

    v57 = swift_allocObject(&unk_1002F0E98, 152, 7);
    v58 = v47;
    v59 = v57;
    v60 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v57 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v57 + 64) = v60;
    v61 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v57 + 80) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v57 + 96) = v61;
    v62 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v57 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v57 + 32) = v62;
    *(_QWORD *)(v57 + 112) = v51;
    *(_QWORD *)(v57 + 120) = v50;
    v46 = v151;
    v149 = v50;
    v150 = v58;
    *(_QWORD *)(v57 + 128) = v58;
    *(_BYTE *)(v57 + 136) = v147;
    *(_BYTE *)(v57 + 137) = BYTE1(v48) & 1;
    *(_QWORD *)(v57 + 144) = v49;
    sub_100116144((uint64_t *)a1);
    v63 = type metadata accessor for UIMetrics();
    v64 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v65 = EnvironmentObject.init()(v63, v64);
    v67 = v65;
    v68 = v66;
    if (!*(_QWORD *)(v46 + 16))
    {
      sub_100116788(&v170);
      sub_10000B458((uint64_t)&v170, (uint64_t)v166, &qword_100320460);
      object = v148._object;
LABEL_17:
      sub_10000B458((uint64_t)v166, (uint64_t)v163, &qword_100320460);
      sub_10000B458((uint64_t)v163, (uint64_t)v164, &qword_100320460);
      v167[0] = v67;
      v167[1] = v68;
      v112 = v150;
      v167[2] = v149;
      v167[3] = v150;
      v167[4] = v148._countAndFlagsBits;
      v167[5] = object;
      LOBYTE(v167[6]) = 0;
      v167[7] = sub_1001166E8;
      v167[8] = v59;
      sub_10000B458((uint64_t)v164, (uint64_t)&v167[9], &qword_100320460);
      memcpy(v168, v167, 0x151uLL);
      sub_10000B458((uint64_t)v163, (uint64_t)v165, &qword_100320460);
      swift_retain(v67);
      swift_bridgeObjectRetain(v112);
      swift_bridgeObjectRetain(object);
      swift_retain(v59);
      sub_100116704((uint64_t)v164, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10002B700);
      sub_100116704((uint64_t)v165, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10002B984);
      swift_release(v59);
      swift_bridgeObjectRelease(object);
      swift_bridgeObjectRelease(v112);
      swift_release(v67);
      memcpy(v169, v168, sizeof(v169));
      ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(v169);
      sub_10000B458((uint64_t)v169, (uint64_t)&v170, &qword_100320428);
      v12 = v155;
      goto LABEL_18;
    }
    v141 = v64;
    v142 = (UIContentSizeCategory)v63;
    v146 = v66;
    v147 = v65;
    v69 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000005ELL, 0x800000010026A700);
    v70 = Text.init(_:tableName:bundle:comment:)(v69);
    v72 = v71;
    v74 = v73;
    v76 = v75 & 1;
    v77 = v156[3];
    v78 = v156[4];
    sub_100007BBC(v156, v77);
    v79 = (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 160))(v77, v78);
    v80 = Text.font(_:)(v79, v70, v72, v76, v74);
    v143 = v81;
    v144 = v80;
    v83 = v82;
    v145 = v84;
    swift_release(v79);
    sub_10002B438(v70, v72, v76);
    swift_bridgeObjectRelease(v74);
    v85 = *(_QWORD *)(a1 + 32);
    if (v85)
    {
      v86 = *(id *)(v85 + 112);
      v87 = static UIContentSizeCategory.>= infix(_:_:)(v86, UIContentSizeCategoryAccessibilityExtraLarge);

      v140 = (v87 & 1) == 0;
      v88 = swift_getKeyPath(&unk_100256E00);
      v141 = v85;
      v89 = *(id *)(v85 + 112);
      v90 = static Alignment.center.getter(v89);
      v92 = v91;
      v93 = static UIContentSizeCategory.>= infix(_:_:)(v89, UIContentSizeCategoryAccessibilityExtraLarge);
      v142 = UIContentSizeCategoryAccessibilityExtraLarge;
      if ((v93 & 1) != 0
        && (v94 = static Alignment.center.getter(v93),
            v96 = static Alignment.== infix(_:_:)(v90, v92, v94, v95),
            (v96 & 1) != 0))
      {
        v98 = v83;
        v90 = static Alignment.leading.getter(v96, v97);
        v92 = v99;
      }
      else
      {
        v98 = v83;
      }

      v101 = v143;
      v100 = v144;
      v190 = v144;
      v191 = v143;
      v102 = v98 & 1;
      v192 = v102;
      v103 = v145;
      v193 = v145;
      v194 = v88;
      v195 = v140;
      sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v169, 0.0, 1, 0.0, 1, v90, v92);
      sub_10002B438(v100, v101, v102);
      swift_release(v88);
      swift_bridgeObjectRelease(v103);
      v104 = *(id *)(v141 + 112);
      v105 = static UIContentSizeCategory.>= infix(_:_:)(v104, v142);

      if ((v105 & 1) != 0)
        v106 = 1.0;
      else
        v106 = 0.5;
      v107 = swift_getKeyPath(&unk_100256E30);
      v108 = static Edge.Set.top.getter(v107);
      v109 = v108;
      LOBYTE(v167[0]) = 1;
      v110 = static Edge.Set.top.getter(v108);
      v168[0] = 1;
      v176 = *(_OWORD *)&v169[96];
      v177 = *(_OWORD *)&v169[112];
      v178 = *(_OWORD *)&v169[128];
      v179 = *(_OWORD *)&v169[144];
      v172 = *(_OWORD *)&v169[32];
      v173 = *(_OWORD *)&v169[48];
      v174 = *(_OWORD *)&v169[64];
      v175 = *(_OWORD *)&v169[80];
      v170 = *(_OWORD *)v169;
      v171 = *(_OWORD *)&v169[16];
      v180 = v107;
      v181 = v106;
      v182 = v109;
      v183 = 0u;
      v184 = 0u;
      v185 = v167[0];
      v186 = v110;
      v187 = 0u;
      v188 = 0u;
      v189 = 1;
      ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(&v170);
      sub_10000B458((uint64_t)&v170, (uint64_t)v166, &qword_100320460);
      v46 = v151;
      object = v148._object;
      v68 = v146;
      v67 = v147;
      goto LABEL_17;
    }
  }
  else
  {
    v136 = *(_QWORD *)(a1 + 24);
    v137 = type metadata accessor for RoadsideAssistanceModel();
    v138 = sub_1000052EC(&qword_100318688, (uint64_t (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, v136, v137, v138);
    __break(1u);
  }
  result = EnvironmentObject.error()(0, *(_QWORD *)(a1 + 40), v142, v141);
  __break(1u);
  return result;
}

uint64_t sub_10011585C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _QWORD v13[5];

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    sub_10000B458(v1 + 120, (uint64_t)v13, &qword_100319D68);
    swift_beginAccess(v1 + 112, v12, 0, 0);
    v2 = *(_QWORD *)(v1 + 112);
    if (v2)
      v3 = *(_QWORD *)(v1 + 112);
    else
      v3 = sub_10022710C((uint64_t)_swiftEmptyArrayStorage);
    sub_100064870(v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
    swift_bridgeObjectRetain(v2);
    v4 = sub_100117A0C(v3, v13);
    swift_bridgeObjectRelease(v3);
    sub_100064870(v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
    sub_10011475C((uint64_t)v4);
    v6 = v5;
    swift_release(v4);
    v11 = v6;
    swift_bridgeObjectRetain(v6);
    sub_1001149B8(&v11);
    swift_bridgeObjectRelease(v6);
    return v11;
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 24);
    v9 = type metadata accessor for RoadsideAssistanceModel();
    v10 = sub_1000052EC(&qword_100318688, (uint64_t (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, v8, v9, v10);
    __break(1u);
    result = swift_release(v11);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001159A4@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  char v14;
  void *v15;
  unint64_t v16;
  Swift::String_optional v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v4 = v3;
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    v9 = (void *)objc_opt_self(NSBundle);
    v10 = objc_msgSend(v9, "mainBundle", swift_bridgeObjectRetain(v7).n128_f64[0]);
    v11 = 0xD000000000000017;
    v12 = 0xD0000000000000AALL;
    v29 = 0x800000010026A650;
    v13 = "Continue Active Request";
  }
  else
  {
    v14 = *(_BYTE *)(a1 + 24);
    v15 = (void *)objc_opt_self(NSBundle);
    v10 = objc_msgSend(v15, "mainBundle", swift_bridgeObjectRetain(v7).n128_f64[0]);
    if ((v14 & 1) != 0)
    {
      v11 = 0xD000000000000018;
      v12 = 0xD0000000000000A9;
      v29 = 0x800000010026A900;
      v13 = "No Subscription Required";
    }
    else
    {
      v11 = 0xD000000000000010;
      v12 = 0xD0000000000000AALL;
      v29 = 0x800000010026A830;
      v13 = "Subscribers Only";
    }
  }
  v16 = (unint64_t)(v13 - 32) | 0x8000000000000000;
  v17.value._object = (void *)0x80000001002621B0;
  v17.value._countAndFlagsBits = 0xD000000000000012;
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v11, v17, (NSBundle)v10, v18, *(Swift::String *)&v12);

  sub_10000B458(a1 + 32, (uint64_t)&v30, &qword_100319D70);
  v20 = swift_allocObject(&unk_1002F0EE8, 152, 7);
  v21 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)(v20 + 48) = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(v20 + 64) = v21;
  v22 = *(_OWORD *)(v4 + 80);
  *(_OWORD *)(v20 + 80) = *(_OWORD *)(v4 + 64);
  *(_OWORD *)(v20 + 96) = v22;
  v23 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(v20 + 16) = *(_OWORD *)v4;
  *(_OWORD *)(v20 + 32) = v23;
  v24 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v20 + 112) = *(_OWORD *)a1;
  *(_OWORD *)(v20 + 128) = v24;
  *(_QWORD *)(v20 + 144) = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain(v7);
  sub_100116144((uint64_t *)v4);
  sub_100034218(&v30);
  v25 = type metadata accessor for UIMetrics();
  v26 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.init()(v25, v26);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v28;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v7;
  *(Swift::String *)(a3 + 32) = v19;
  *(_BYTE *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = sub_100117CB4;
  *(_QWORD *)(a3 + 64) = v20;
  return result;
}

__n128 sub_100115BD4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __n128 result;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  char v12;
  __n128 v13;
  _OWORD v14[2];
  uint64_t v15;

  v3 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v3;
  v15 = *(_QWORD *)(a1 + 32);
  sub_1001159A4((uint64_t)v14, 0, (uint64_t)v9);
  v4 = v10;
  v5 = v11;
  v6 = v12;
  result = v13;
  v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = v6;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

_QWORD *sub_100115C3C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  v20 = *((_OWORD *)a1 + 5);
  v16 = *((_OWORD *)a1 + 5);
  v4 = sub_100003DB8(&qword_100316780);
  result = State.wrappedValue.getter(&v19, v4);
  if ((v19 & 1) == 0)
  {
    v16 = v20;
    LOBYTE(v19) = 1;
    State.wrappedValue.setter(&v19, v4);
    if (*a1)
    {
      v6 = *(_QWORD *)(*a1 + 128);
      v7 = *a2;
      v19 = *(_OWORD *)(a2 + 1);
      sub_10000B458((uint64_t)(a2 + 4), (uint64_t)&v18, &qword_100319D70);
      v8 = swift_allocObject(&unk_1002F0EC0, 152, 7);
      v9 = *((_OWORD *)a1 + 3);
      *(_OWORD *)(v8 + 48) = *((_OWORD *)a1 + 2);
      *(_OWORD *)(v8 + 64) = v9;
      v10 = *((_OWORD *)a1 + 5);
      *(_OWORD *)(v8 + 80) = *((_OWORD *)a1 + 4);
      *(_OWORD *)(v8 + 96) = v10;
      v11 = *((_OWORD *)a1 + 1);
      *(_OWORD *)(v8 + 16) = *(_OWORD *)a1;
      *(_OWORD *)(v8 + 32) = v11;
      v12 = *((_OWORD *)a2 + 1);
      *(_OWORD *)(v8 + 112) = *(_OWORD *)a2;
      *(_OWORD *)(v8 + 128) = v12;
      *(_QWORD *)(v8 + 144) = a2[4];
      *(_QWORD *)&v16 = v7;
      *((_QWORD *)&v16 + 1) = sub_1001167B8;
      v17 = v8;
      swift_retain(v6);
      sub_100116144(a1);
      sub_100030F08((uint64_t)&v19);
      sub_100034218(&v18);
      PassthroughSubject.send(_:)(&v16);
      swift_release(v8);
      return (_QWORD *)swift_release(v6);
    }
    else
    {
      v13 = a1[1];
      v14 = type metadata accessor for AppEvents();
      v15 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
      result = (_QWORD *)EnvironmentObject.error()(0, v13, v14, v15);
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100115DC0(unsigned __int16 a1, uint64_t a2, NSObject **a3)
{
  int v6;
  uint64_t v7;
  uint64_t *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v6 = a1;
  v7 = type metadata accessor for Logger(0);
  sub_10000D744(v7, (uint64_t)qword_10033FEC8);
  sub_100116144((uint64_t *)a2);
  v8 = sub_100116144((uint64_t *)a2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v29 = v12;
    *(_DWORD *)v11 = 136446466;
    v13 = sub_1000AD18C();
    v15 = v14;
    v28 = sub_100172BEC(v13, v14, (uint64_t *)&v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v15);
    sub_1001167CC((uint64_t *)a2);
    sub_1001167CC((uint64_t *)a2);
    *(_WORD *)(v11 + 12) = 2080;
    LOWORD(v28) = v6 & 0x101;
    v17 = String.init<A>(describing:)(&v28, &type metadata for CoreTelephonySPIAgent.SelectRoadsideProviderResponse, v16);
    v19 = v18;
    v28 = sub_100172BEC(v17, v18, (uint64_t *)&v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "[%{public}s] selectRoadsideProviderRequested response: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    sub_1001167CC((uint64_t *)a2);
    sub_1001167CC((uint64_t *)a2);
  }

  v29 = *(_OWORD *)(a2 + 80);
  LOBYTE(v28) = 0;
  v20 = sub_100003DB8(&qword_100316780);
  result = State.wrappedValue.setter(&v28, v20);
  if ((v6 & 0x1010101) == 1)
  {
    v22 = *(_QWORD *)(a2 + 16);
    if (v22)
    {
      v23 = *a3;
      swift_retain(*(_QWORD *)(a2 + 16));
      sub_10005D918(v23);
      v24 = swift_release(v22);
      return (*(uint64_t (**)(uint64_t))(a2 + 64))(v24);
    }
    else
    {
      v25 = *(_QWORD *)(a2 + 24);
      v26 = type metadata accessor for RoadsideAssistanceModel();
      v27 = sub_1000052EC(&qword_100318688, (uint64_t (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel, (uint64_t)&unk_10024D2FC);
      result = EnvironmentObject.error()(0, v25, v26, v27);
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100116070@<X0>(uint64_t a1@<X8>)
{
  return sub_100114A20(a1);
}

double sub_1001160B0(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 336) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1001160E8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[11]);
  swift_release(v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

double sub_10011613C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_100115BD4(a1, a2).n128_u64[0];
  return result;
}

uint64_t *sub_100116144(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[9];
  swift_retain(a1[11]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

unint64_t sub_1001161C8()
{
  unint64_t result;

  result = qword_100320448;
  if (!qword_100320448)
  {
    result = swift_getWitnessTable(&unk_10025A748, &type metadata for QuestionnaireLikeButton);
    atomic_store(result, (unint64_t *)&qword_100320448);
  }
  return result;
}

double sub_10011620C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  double result;

  if (a4)
  {
    swift_retain(a1);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_retain(a9);
    return sub_10002B700(a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28,
             a29,
             a30);
  }
  return result;
}

uint64_t sub_10011642C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v10 = *(_BYTE *)(a1 + 336);
  v8 = *(_OWORD *)(a1 + 288);
  v9 = *(_OWORD *)(a1 + 304);
  v6 = *(_OWORD *)(a1 + 256);
  v7 = *(_OWORD *)(a1 + 272);
  v4 = *(_OWORD *)(a1 + 224);
  v5 = *(_OWORD *)(a1 + 240);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4,
    *((_QWORD *)&v4 + 1),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    v7,
    *((_QWORD *)&v7 + 1),
    v8,
    *((_QWORD *)&v8 + 1),
    v9,
    *((_QWORD *)&v9 + 1),
    *(_QWORD *)(a1 + 320),
    *(_QWORD *)(a1 + 328),
    v10);
  return a1;
}

double sub_1001164C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  double result;

  if (a4)
  {
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_release(a9);
    swift_release(a1);
    return sub_10002B984(a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28,
             a29,
             a30);
  }
  return result;
}

_QWORD *sub_1001166E8()
{
  uint64_t v0;

  return sub_100115C3C((uint64_t *)(v0 + 16), (uint64_t *)(v0 + 112));
}

uint64_t sub_100116704(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  __int128 v4;
  char v5;

  v5 = *(_BYTE *)(a1 + 264);
  v4 = *(_OWORD *)(a1 + 224);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4,
    *((_QWORD *)&v4 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    *(_QWORD *)(a1 + 256),
    v5);
  return a1;
}

double sub_100116788(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 249) = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_1001167B8(__int16 a1)
{
  uint64_t v1;

  return sub_100115DC0(a1 & 0x101, v1 + 16, (NSObject **)(v1 + 112));
}

uint64_t *sub_1001167CC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[11];
  swift_release(a1[9]);
  swift_release(v6);
  swift_release(v5);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v7);
  return a1;
}

uint64_t sub_100116854()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[11]);
  swift_release(v0[13]);
  swift_bridgeObjectRelease(v0[16]);
  swift_bridgeObjectRelease(v0[18]);
  return swift_deallocObject(v0, 152, 7);
}

void sub_1001168B8(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  Swift::Int v22;
  uint64_t *v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  Swift::Int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::Int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  _OWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  char v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  _QWORD *v122;
  Swift::Int v123;
  Swift::Int v124;
  uint64_t v125;
  char *__dst;
  uint64_t v127;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_100117008(0, v3, 1, a1);
      return;
    }
    goto LABEL_153;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_161:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return;
  }
  v123 = v4;
  v127 = v1;
  v120 = a1;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
LABEL_119:
      v112 = v11;
      v122 = v8;
      if (v12 < 2)
        goto LABEL_116;
      v113 = *v120;
      while (1)
      {
        v114 = v12 - 2;
        if (v12 < 2)
          goto LABEL_148;
        if (!v113)
          goto LABEL_160;
        v111 = v112;
        v115 = *(_QWORD *)&v112[16 * v114 + 32];
        v116 = *(_QWORD *)&v112[16 * v12 + 24];
        sub_100117104((char *)(v113 + 40 * v115), (char *)(v113 + 40 * *(_QWORD *)&v112[16 * v12 + 16]), v113 + 40 * v116, __dst);
        if (v127)
          goto LABEL_115;
        if (v116 < v115)
          goto LABEL_149;
        if ((swift_isUniquelyReferenced_nonNull_native(v111) & 1) == 0)
          v111 = sub_100192320((uint64_t)v111);
        if (v114 >= *((_QWORD *)v111 + 2))
          goto LABEL_150;
        v117 = &v111[16 * v114 + 32];
        *(_QWORD *)v117 = v115;
        *((_QWORD *)v117 + 1) = v116;
        v118 = *((_QWORD *)v111 + 2);
        if (v12 > v118)
          goto LABEL_151;
        memmove(&v111[16 * v12 + 16], &v111[16 * v12 + 32], 16 * (v118 - v12));
        v112 = v111;
        *((_QWORD *)v111 + 2) = v118 - 1;
        v12 = v118 - 1;
        if (v118 <= 2)
          goto LABEL_116;
      }
    }
    v122 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for RoadsideAssistanceProvider);
    *(_QWORD *)(v7 + 16) = v6;
    v122 = (_QWORD *)v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v121 = *a1 + 16;
  v119 = *a1 + 32;
  v11 = (char *)_swiftEmptyArrayStorage;
  v124 = v3;
  v125 = v10;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = v10 + 40 * v9;
      v15 = *(_QWORD *)(v14 + 8);
      v16 = *(_QWORD *)(v14 + 16);
      v17 = v10 + 40 * v13;
      v18 = *(_QWORD *)(v17 + 8);
      v19 = *(_QWORD *)(v17 + 16);
      if (v18 == v15 && v19 == v16)
      {
        v22 = v13 + 2;
        if (v13 + 2 >= v3)
        {
LABEL_37:
          if (v13 < v22)
          {
            v31 = 40 * v22;
            v32 = 40 * v13;
            v33 = v22;
            v34 = v13;
            while (1)
            {
              if (v34 != --v33)
              {
                if (!v10)
                  goto LABEL_159;
                v35 = v10 + v32;
                v36 = *(_QWORD *)(v10 + v32 + 16);
                v37 = v10 + v31;
                v38 = *(_BYTE *)(v10 + v32 + 24);
                v39 = *(_BYTE *)(v10 + v32 + 25);
                v40 = *(_QWORD *)(v10 + v32 + 32);
                v41 = *(_OWORD *)(v10 + v32);
                v42 = *(_QWORD *)(v10 + v31 - 8);
                v43 = *(_OWORD *)(v10 + v31 - 24);
                *(_OWORD *)v35 = *(_OWORD *)(v10 + v31 - 40);
                *(_OWORD *)(v35 + 16) = v43;
                *(_QWORD *)(v35 + 32) = v42;
                *(_OWORD *)(v37 - 40) = v41;
                *(_QWORD *)(v37 - 24) = v36;
                *(_BYTE *)(v37 - 16) = v38;
                *(_BYTE *)(v37 - 15) = v39;
                *(_QWORD *)(v37 - 8) = v40;
              }
              ++v34;
              v31 -= 40;
              v32 += 40;
              if (v34 >= v33)
                goto LABEL_44;
            }
          }
          goto LABEL_44;
        }
        v21 = 0;
      }
      else
      {
        v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v15, v16, 1);
        v22 = v13 + 2;
        if (v13 + 2 >= v3)
        {
LABEL_33:
          if ((v21 & 1) != 0)
          {
LABEL_44:
            v9 = v22;
            goto LABEL_45;
          }
          goto LABEL_36;
        }
      }
      v23 = (uint64_t *)(v121 + 40 * v22);
      do
      {
        v25 = *(v23 - 1);
        v26 = *v23;
        v27 = v10 + 40 * v9;
        v28 = *(_QWORD *)(v27 + 8);
        v29 = *(_QWORD *)(v27 + 16);
        if (v28 == v25 && v29 == v26)
        {
          if ((v21 & 1) != 0)
            goto LABEL_44;
        }
        else if (((v21 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v25, v26, 1)) & 1) != 0)
        {
          goto LABEL_33;
        }
        v24 = v22 + 1;
        v23 += 5;
        v9 = v22;
        v22 = v24;
      }
      while (v24 < v3);
      v22 = v24;
      if ((v21 & 1) != 0)
        goto LABEL_44;
LABEL_36:
      if (v22 < v13)
        goto LABEL_154;
      goto LABEL_37;
    }
LABEL_45:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_152;
      if (v9 - v13 < v123)
      {
        if (__OFADD__(v13, v123))
          goto LABEL_155;
        if (v13 + v123 >= v3)
          v44 = v3;
        else
          v44 = v13 + v123;
        if (v44 < v13)
          goto LABEL_156;
        if (v9 != v44)
        {
          v45 = v119 + 40 * v9;
          do
          {
            v46 = v10 + 40 * v9;
            v47 = *(_QWORD *)(v46 + 8);
            v48 = *(_QWORD *)(v46 + 16);
            v49 = v13;
            v50 = v45;
            do
            {
              v51 = *(_QWORD *)(v50 - 64);
              v52 = *(_QWORD *)(v50 - 56);
              v53 = v51 == v47 && v52 == v48;
              if (!v53 && (_stringCompareWithSmolCheck(_:_:expecting:)(v51, v52, v47, v48, 1) & 1) != 0)
                break;
              if (!v10)
                goto LABEL_157;
              v54 = v50 - 32;
              v55 = (_OWORD *)(v50 - 72);
              v56 = *(_QWORD *)(v50 - 40);
              *(_QWORD *)(v50 - 40) = *(_QWORD *)v50;
              v50 -= 40;
              v57 = *(_QWORD *)(v50 + 8);
              v47 = *(_QWORD *)(v50 + 16);
              v48 = *(_QWORD *)(v50 + 24);
              v58 = *(_BYTE *)(v50 + 32);
              v59 = *(_BYTE *)(v50 + 33);
              v60 = v55[1];
              *(_OWORD *)v54 = *v55;
              *(_OWORD *)(v54 + 16) = v60;
              *(_QWORD *)(v54 + 32) = v56;
              *(_QWORD *)(v50 - 32) = v57;
              *(_QWORD *)(v50 - 24) = v47;
              *(_QWORD *)(v50 - 16) = v48;
              *(_BYTE *)(v50 - 8) = v58;
              *(_BYTE *)(v50 - 7) = v59;
              ++v49;
            }
            while (v9 != v49);
            ++v9;
            v45 += 40;
          }
          while (v9 != v44);
          v9 = v44;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
      goto LABEL_161;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_100191FA8(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v62 = *((_QWORD *)v11 + 2);
    v61 = *((_QWORD *)v11 + 3);
    v12 = v62 + 1;
    if (v62 >= v61 >> 1)
      v11 = sub_100191FA8((char *)(v61 > 1), v62 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v63 = v11 + 32;
    v64 = &v11[16 * v62 + 32];
    *(_QWORD *)v64 = v13;
    *((_QWORD *)v64 + 1) = v9;
    if (v62)
      break;
    v12 = 1;
    v10 = v125;
LABEL_15:
    v3 = v124;
    if (v9 >= v124)
    {
      v8 = v122;
      goto LABEL_119;
    }
  }
  v10 = v125;
  while (1)
  {
    v65 = v12 - 1;
    if (v12 >= 4)
    {
      v70 = &v63[16 * v12];
      v71 = *((_QWORD *)v70 - 8);
      v72 = *((_QWORD *)v70 - 7);
      v76 = __OFSUB__(v72, v71);
      v73 = v72 - v71;
      if (v76)
        goto LABEL_136;
      v75 = *((_QWORD *)v70 - 6);
      v74 = *((_QWORD *)v70 - 5);
      v76 = __OFSUB__(v74, v75);
      v68 = v74 - v75;
      v69 = v76;
      if (v76)
        goto LABEL_137;
      v77 = v12 - 2;
      v78 = &v63[16 * v12 - 32];
      v80 = *(_QWORD *)v78;
      v79 = *((_QWORD *)v78 + 1);
      v76 = __OFSUB__(v79, v80);
      v81 = v79 - v80;
      if (v76)
        goto LABEL_139;
      v76 = __OFADD__(v68, v81);
      v82 = v68 + v81;
      if (v76)
        goto LABEL_142;
      if (v82 >= v73)
      {
        v100 = &v63[16 * v65];
        v102 = *(_QWORD *)v100;
        v101 = *((_QWORD *)v100 + 1);
        v76 = __OFSUB__(v101, v102);
        v103 = v101 - v102;
        if (v76)
          goto LABEL_146;
        v93 = v68 < v103;
        goto LABEL_104;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v94 = *((_QWORD *)v11 + 4);
        v95 = *((_QWORD *)v11 + 5);
        v76 = __OFSUB__(v95, v94);
        v87 = v95 - v94;
        v88 = v76;
        goto LABEL_98;
      }
      v67 = *((_QWORD *)v11 + 4);
      v66 = *((_QWORD *)v11 + 5);
      v76 = __OFSUB__(v66, v67);
      v68 = v66 - v67;
      v69 = v76;
    }
    if ((v69 & 1) != 0)
      goto LABEL_138;
    v77 = v12 - 2;
    v83 = &v63[16 * v12 - 32];
    v85 = *(_QWORD *)v83;
    v84 = *((_QWORD *)v83 + 1);
    v86 = __OFSUB__(v84, v85);
    v87 = v84 - v85;
    v88 = v86;
    if (v86)
      goto LABEL_141;
    v89 = &v63[16 * v65];
    v91 = *(_QWORD *)v89;
    v90 = *((_QWORD *)v89 + 1);
    v76 = __OFSUB__(v90, v91);
    v92 = v90 - v91;
    if (v76)
      goto LABEL_144;
    if (__OFADD__(v87, v92))
      goto LABEL_145;
    if (v87 + v92 >= v68)
    {
      v93 = v68 < v92;
LABEL_104:
      if (v93)
        v65 = v77;
      goto LABEL_106;
    }
LABEL_98:
    if ((v88 & 1) != 0)
      goto LABEL_140;
    v96 = &v63[16 * v65];
    v98 = *(_QWORD *)v96;
    v97 = *((_QWORD *)v96 + 1);
    v76 = __OFSUB__(v97, v98);
    v99 = v97 - v98;
    if (v76)
      goto LABEL_143;
    if (v99 < v87)
      goto LABEL_15;
LABEL_106:
    v104 = v65 - 1;
    if (v65 - 1 >= v12)
    {
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
    if (!v10)
      goto LABEL_158;
    v105 = v10;
    v106 = &v63[16 * v104];
    v107 = *(_QWORD *)v106;
    v108 = &v63[16 * v65];
    v109 = *((_QWORD *)v108 + 1);
    sub_100117104((char *)(v105 + 40 * *(_QWORD *)v106), (char *)(v105 + 40 * *(_QWORD *)v108), v105 + 40 * v109, __dst);
    if (v127)
      break;
    if (v109 < v107)
      goto LABEL_133;
    if (v65 > *((_QWORD *)v11 + 2))
      goto LABEL_134;
    *(_QWORD *)v106 = v107;
    *(_QWORD *)&v63[16 * v104 + 8] = v109;
    v110 = *((_QWORD *)v11 + 2);
    if (v65 >= v110)
      goto LABEL_135;
    v12 = v110 - 1;
    memmove(&v63[16 * v65], v108 + 16, 16 * (v110 - 1 - v65));
    *((_QWORD *)v11 + 2) = v110 - 1;
    v93 = v110 > 2;
    v10 = v125;
    if (!v93)
      goto LABEL_15;
  }
  v111 = v11;
LABEL_115:
  v112 = v111;
LABEL_116:
  swift_bridgeObjectRelease(v112);
  v122[2] = 0;
  swift_bridgeObjectRelease(v122);
}

uint64_t sub_100117008(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  __int128 v22;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 40 * a3 + 32;
LABEL_5:
    v9 = v7 + 40 * v4;
    v10 = *(_QWORD *)(v9 + 8);
    v11 = *(_QWORD *)(v9 + 16);
    v12 = v6;
    v13 = v8;
    while (1)
    {
      result = *(_QWORD *)(v13 - 64);
      v14 = *(_QWORD *)(v13 - 56);
      if (result != v10 || v14 != v11)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v14, v10, v11, 1);
        if ((result & 1) != 0)
        {
LABEL_4:
          ++v4;
          v8 += 40;
          if (v4 == a2)
            return result;
          goto LABEL_5;
        }
      }
      if (!v7)
        break;
      v16 = v13 - 32;
      v17 = (_OWORD *)(v13 - 72);
      v18 = *(_QWORD *)(v13 - 40);
      *(_QWORD *)(v13 - 40) = *(_QWORD *)v13;
      v13 -= 40;
      v19 = *(_QWORD *)(v13 + 8);
      v10 = *(_QWORD *)(v13 + 16);
      v11 = *(_QWORD *)(v13 + 24);
      v20 = *(_BYTE *)(v13 + 32);
      v21 = *(_BYTE *)(v13 + 33);
      v22 = v17[1];
      *(_OWORD *)v16 = *v17;
      *(_OWORD *)(v16 + 16) = v22;
      *(_QWORD *)(v16 + 32) = v18;
      *(_QWORD *)(v13 - 32) = v19;
      *(_QWORD *)(v13 - 24) = v10;
      *(_QWORD *)(v13 - 16) = v11;
      *(_BYTE *)(v13 - 8) = v20;
      *(_BYTE *)(v13 - 7) = v21;
      if (v4 == ++v12)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100117104(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  uint64_t result;
  char *v37;
  const void *v38;
  char *v39;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 40;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  v39 = __src;
  v38 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -39)
    {
      if (__dst != a2 || &a2[40 * v11] <= __dst)
        memmove(__dst, a2, 40 * v11);
      v23 = &v4[40 * v11];
      v37 = v23;
      v39 = v6;
      if (v7 < v6 && v10 >= 40)
      {
        v24 = a3 - 40;
        do
        {
          v25 = (char *)(v24 + 40);
          v26 = *((_QWORD *)v23 - 4);
          v27 = *((_QWORD *)v23 - 3);
          v28 = *((_QWORD *)v6 - 4);
          v29 = *((_QWORD *)v6 - 3);
          v30 = v28 == v26 && v29 == v27;
          if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v26, v27, 1) & 1) == 0)
          {
            v33 = v6 - 40;
            if (v25 != v6 || v24 >= (unint64_t)v6)
            {
              v34 = *(_OWORD *)v33;
              v35 = *(_OWORD *)(v6 - 24);
              *(_QWORD *)(v24 + 32) = *((_QWORD *)v6 - 1);
              *(_OWORD *)v24 = v34;
              *(_OWORD *)(v24 + 16) = v35;
            }
            v39 = v6 - 40;
            if (v33 <= v7)
              break;
          }
          else
          {
            v37 = v23 - 40;
            if (v25 < v23 || v24 >= (unint64_t)v23 || v25 != v23)
            {
              v31 = *(_OWORD *)(v23 - 40);
              v32 = *(_OWORD *)(v23 - 24);
              *(_QWORD *)(v24 + 32) = *((_QWORD *)v23 - 1);
              *(_OWORD *)v24 = v31;
              *(_OWORD *)(v24 + 16) = v32;
            }
            v33 = v6;
            v23 -= 40;
            if (v6 <= v7)
              break;
          }
          v24 -= 40;
          v6 = v33;
        }
        while (v23 > v4);
      }
LABEL_48:
      sub_100192268((void **)&v39, &v38, &v37);
      return 1;
    }
  }
  else if (v8 >= -39)
  {
    if (__dst != __src || &__src[40 * v9] <= __dst)
      memmove(__dst, __src, 40 * v9);
    v12 = &v4[40 * v9];
    v37 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      v13 = v4;
      while (1)
      {
        v14 = *((_QWORD *)v6 + 1);
        v15 = *((_QWORD *)v6 + 2);
        v16 = *((_QWORD *)v13 + 1);
        v17 = *((_QWORD *)v13 + 2);
        v18 = v16 == v14 && v17 == v15;
        if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v14, v15, 1) & 1) == 0)
        {
          v20 = v6 + 40;
          v19 = v6;
          if (v7 == v6 && v7 < v20)
            goto LABEL_22;
        }
        else
        {
          v4 = v13 + 40;
          v19 = v13;
          v20 = v6;
          if (v7 == v13)
          {
            v13 += 40;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v13 += 40;
          }
        }
        v21 = *(_OWORD *)v19;
        v22 = *((_OWORD *)v19 + 1);
        *((_QWORD *)v7 + 4) = *((_QWORD *)v19 + 4);
        *(_OWORD *)v7 = v21;
        *((_OWORD *)v7 + 1) = v22;
LABEL_22:
        v7 += 40;
        if (v13 < v12)
        {
          v6 = v20;
          if ((unint64_t)v20 < a3)
            continue;
        }
        v38 = v4;
        v39 = v7;
        goto LABEL_48;
      }
    }
    goto LABEL_48;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_1001173DC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  if (!a3)
    return;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return;
  }
  sub_100003DB8((uint64_t *)&unk_10032A6D0);
  v8 = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = v8;
  v37 = a1;
  v38 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = v8 + 64;
  v39 = v4;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v40 = v11;
      v14 = v13 | (v11 << 6);
      goto LABEL_25;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= v38)
      return;
    v16 = v37[v15];
    v17 = v11 + 1;
    if (!v16)
    {
      v17 = v11 + 2;
      if (v11 + 2 >= v38)
        return;
      v16 = v37[v17];
      if (!v16)
      {
        v17 = v11 + 3;
        if (v11 + 3 >= v38)
          return;
        v16 = v37[v17];
        if (!v16)
          break;
      }
    }
LABEL_24:
    v10 = (v16 - 1) & v16;
    v40 = v17;
    v14 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_25:
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    v20 = *(_QWORD *)(v4 + 56) + 40 * v14;
    v22 = *(_QWORD *)v20;
    v21 = *(_QWORD *)(v20 + 8);
    v23 = *(_QWORD *)(v20 + 16);
    v24 = *(_BYTE *)(v20 + 24);
    v41 = *(_BYTE *)(v20 + 25);
    v25 = *(_QWORD *)(v20 + 32);
    v26 = static Hasher._hash(seed:_:)(*(_QWORD *)(v9 + 40), v19);
    v27 = -1 << *(_BYTE *)(v9 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      v30 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v33 = v29 == v32;
        if (v29 == v32)
          v29 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v29);
      }
      while (v34 == -1);
      v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(_QWORD *)(v12 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v30) = v19;
    v35 = *(_QWORD *)(v9 + 56) + 40 * v30;
    *(_QWORD *)v35 = v22;
    *(_QWORD *)(v35 + 8) = v21;
    *(_QWORD *)(v35 + 16) = v23;
    *(_BYTE *)(v35 + 24) = v24;
    *(_BYTE *)(v35 + 25) = v41;
    *(_QWORD *)(v35 + 32) = v25;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v23);
    v4 = v39;
    v11 = v40;
    if (!v5)
      return;
  }
  v18 = v11 + 4;
  if (v11 + 4 >= v38)
    return;
  v16 = v37[v18];
  if (v16)
  {
    v17 = v11 + 4;
    goto LABEL_24;
  }
  while (1)
  {
    v17 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v17 >= v38)
      return;
    v16 = v37[v17];
    ++v18;
    if (v16)
      goto LABEL_24;
  }
LABEL_40:
  __break(1u);
}

void sub_10011769C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v43;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v54[4];
  uint64_t v55;
  char v56[16];
  uint64_t v57;
  uint64_t v58;

  sub_10000B458(a4, (uint64_t)v54, &qword_100319D68);
  v45 = 0;
  v5 = 0;
  v51 = v54[1];
  v52 = v54[0];
  v49 = v54[3];
  v50 = v54[2];
  v58 = a3;
  v8 = *(_QWORD *)(a3 + 64);
  v7 = a3 + 64;
  v6 = v8;
  v9 = 1 << *(_BYTE *)(v7 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v6;
  v48 = v55;
  v46 = v7;
  v47 = (unint64_t)(v9 + 63) >> 6;
  v43 = (uint64_t *)(v55 + 56);
LABEL_5:
  while (v11)
  {
    v12 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v13 = v12 | (v5 << 6);
LABEL_18:
    v17 = *(_QWORD *)(v58 + 56) + 40 * v13;
    v19 = *(_QWORD *)v17;
    v18 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(unsigned __int8 *)(v17 + 24);
    v22 = *(unsigned __int8 *)(v17 + 25);
    v23 = *(_QWORD **)(v17 + 32);
    sub_10000B458(a4, (uint64_t)v56, &qword_100319D68);
    if (!v57)
    {
      v40 = 256;
      if (!v22)
        v40 = 0;
      v41 = v40 | v21;
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v20);
      sub_100034464(v19, v18, v20, v41, (uint64_t)v23);
      sub_100034464(v52, v51, v50, v49, v48);
      goto LABEL_56;
    }
    if (v19 == v52)
    {
      if (v18 == v51 && v50 == v20)
      {
        v25 = (_QWORD *)v48;
        if (((v49 ^ v21) & 1) != 0 || (((v49 >> 8) & 1 ^ v22) & 1) != 0)
          goto LABEL_56;
      }
      else
      {
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v51, v50, 0) & 1) == 0)
          goto LABEL_56;
        v25 = (_QWORD *)v48;
        if (((v49 ^ v21) & 1) != 0 || ((v49 >> 8) & 1) != v22)
          goto LABEL_56;
      }
      if (v23)
      {
        if (!v25)
          goto LABEL_56;
        v26 = v23[2];
        if (v26 != v25[2])
          goto LABEL_56;
        if (v26 && v23 != v25)
        {
          v27 = v23[4];
          v28 = v23[5];
          v29 = v25[4];
          v30 = v25[5];
          v31 = v27 == v29 && v28 == v30;
          if (!v31 && (_stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v29, v30, 0) & 1) == 0)
            goto LABEL_56;
          v32 = v26 - 1;
          if (v32)
          {
            v33 = v23 + 7;
            v34 = v43;
            while (1)
            {
              v35 = *(v33 - 1);
              v36 = *v33;
              v37 = *(v34 - 1);
              v38 = *v34;
              v39 = v35 == v37 && v36 == v38;
              if (!v39 && (_stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, v37, v38, 0) & 1) == 0)
                goto LABEL_56;
              v34 += 2;
              v33 += 2;
              if (!--v32)
                goto LABEL_5;
            }
          }
        }
      }
      else if (v25)
      {
        goto LABEL_56;
      }
    }
    else
    {
LABEL_56:
      *(unint64_t *)((char *)a1 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = __OFADD__(v45++, 1);
      if (v14)
      {
        __break(1u);
LABEL_59:
        sub_1001173DC(a1, a2, v45, v58);
        return;
      }
    }
  }
  v14 = __OFADD__(v5++, 1);
  if (v14)
  {
    __break(1u);
    goto LABEL_61;
  }
  if (v5 >= v47)
    goto LABEL_59;
  v15 = *(_QWORD *)(v46 + 8 * v5);
  if (v15)
  {
LABEL_17:
    v11 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v5 << 6);
    goto LABEL_18;
  }
  v16 = v5 + 1;
  if (v5 + 1 >= v47)
    goto LABEL_59;
  v15 = *(_QWORD *)(v46 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v5 + 2;
  if (v5 + 2 >= v47)
    goto LABEL_59;
  v15 = *(_QWORD *)(v46 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v5 + 3;
  if (v5 + 3 >= v47)
    goto LABEL_59;
  v15 = *(_QWORD *)(v46 + 8 * v16);
  if (v15)
  {
LABEL_16:
    v5 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v47)
      goto LABEL_59;
    v15 = *(_QWORD *)(v46 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_17;
  }
LABEL_61:
  __break(1u);
}

uint64_t (*sub_100117A0C(uint64_t a1, _QWORD *a2))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v13;
  void *v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  sub_100064870(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
  isStackAllocationSafe = (uint64_t)sub_100064870(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v8, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, v10);
    bzero((char *)&v17 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    sub_100064870(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
    sub_10011769C((unint64_t *)((char *)&v17 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, (uint64_t)a2);
    v12 = v11;
    v13 = sub_100064870(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
    if (v2)
    {
      swift_willThrow(v13);
      v12 = sub_100034464;
    }
    sub_100064870(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
    sub_100064870(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
  }
  else
  {
    v14 = (void *)swift_slowAlloc(v8, -1);
    bzero(v14, v8);
    sub_100064870(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
    sub_10011769C((unint64_t *)v14, v7, a1, (uint64_t)a2);
    v12 = v15;
    sub_100064870(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
    swift_slowDealloc(v14, -1, -1);
    sub_100064870(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
    sub_100064870(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
  }
  return v12;
}

unint64_t sub_100117C30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100320468;
  if (!qword_100320468)
  {
    v1 = sub_100007FAC(&qword_100320400);
    sub_1000084FC((unint64_t *)&unk_100320470, &qword_1003203F8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320468);
  }
  return result;
}

uint64_t sub_100117CB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  const char *v15;
  uint64_t v16;
  id v18;
  void *v19;
  void *v20;
  NSObject *v21;
  id v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint8_t *v27;
  NSObject *v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint8_t *v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v9 = OBJC_IVAR____TtC8SOSBuddy23StewieStateMonitorAgent_monitor;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy23StewieStateMonitorAgent_monitor))
  {
    if (qword_1003158C8 == -1)
    {
LABEL_4:
      v10 = type metadata accessor for Logger(0);
      v11 = sub_10000D744(v10, (uint64_t)qword_10033FF10);
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v12, v13))
      {
LABEL_7:
        v16 = 0;
        goto LABEL_8;
      }
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      v15 = "Already started";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v12, v13, v15, v14, 2u);
      swift_slowDealloc(v14, -1, -1);
      goto LABEL_7;
    }
LABEL_27:
    swift_once(&qword_1003158C8, sub_1000D98C4);
    goto LABEL_4;
  }
  v18 = objc_msgSend(objc_allocWithZone((Class)CTStewieStateMonitor), "initWithDelegate:queue:", v1, *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy23StewieStateMonitorAgent_queue));
  v19 = *(void **)(v1 + v9);
  *(_QWORD *)(v1 + v9) = v18;

  v20 = *(void **)(v1 + v9);
  if (!v20)
  {
    if (qword_1003158C8 != -1)
      swift_once(&qword_1003158C8, sub_1000D98C4);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_10000D744(v35, (uint64_t)qword_10033FF10);
    v12 = Logger.logObject.getter(v36);
    v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13))
      goto LABEL_7;
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    v15 = "monitor must be allocated prior to start";
    goto LABEL_6;
  }
  v21 = v20;
  if (-[NSObject start](v21, "start"))
  {
    v22 = -[NSObject getState](v21, "getState");
    if (qword_1003158C8 != -1)
      swift_once(&qword_1003158C8, sub_1000D98C4);
    v23 = type metadata accessor for Logger(0);
    sub_10000D744(v23, (uint64_t)qword_10033FF10);
    v12 = v22;
    v24 = Logger.logObject.getter(v12);
    v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v47 = v45;
      *(_DWORD *)v26 = 136446210;
      v27 = v26 + 12;
      v43 = v26 + 4;
      v44 = v26;
      v28 = v12;
      v29 = -[NSObject description](v28, "description");
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v32 = v31;

      v46 = sub_100172BEC(v30, v32, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v43, v27);

      swift_bridgeObjectRelease(v32);
      v33 = v44;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Initial state: %{public}s", v44, 0xCu);
      v34 = v45;
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {

    }
    (*(void (**))(v1 + OBJC_IVAR____TtC8SOSBuddy23StewieStateMonitorAgent_handler))(v12);

    v16 = 1;
  }
  else
  {
    if (qword_1003158C8 != -1)
      swift_once(&qword_1003158C8, sub_1000D98C4);
    v37 = type metadata accessor for Logger(0);
    v38 = sub_10000D744(v37, (uint64_t)qword_10033FF10);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Failed to start monitor", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    v16 = 0;
    v12 = v21;
  }
LABEL_8:

  return v16;
}

id sub_1001181BC(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  char *v14;
  id v15;
  id v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;
  unint64_t v21;
  void *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  objc_class *ObjectType;
  uint64_t v51;
  uint64_t v52;
  objc_super v53;
  void *v54;
  unint64_t v55;

  v51 = a2;
  v49 = a1;
  ObjectType = (objc_class *)swift_getObjectType(v2);
  v48 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v46 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48, v3);
  v47 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v2[OBJC_IVAR____TtC8SOSBuddy23StewieStateMonitorAgent_monitor] = 0;
  v13 = (void *)objc_opt_self(NSBundle);
  v14 = v2;
  v15 = objc_msgSend(v13, "mainBundle");
  v16 = objc_msgSend(v15, "bundleIdentifier");

  if (v16)
  {
    v17 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

  }
  else
  {
    v19 = 0x8000000100260990;
    v17 = (void *)0xD000000000000012;
  }
  sub_10000D75C();
  v54 = v17;
  v55 = v19;
  swift_bridgeObjectRetain(v19);
  v20._countAndFlagsBits = 0xD000000000000013;
  v20._object = (void *)0x800000010026AA20;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v19);
  v22 = v54;
  v21 = v55;
  static DispatchQoS.unspecified.getter(v23);
  v54 = &_swiftEmptyArrayStorage;
  v24 = sub_1000052EC((unint64_t *)&unk_1003178B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v25 = sub_100003DB8((uint64_t *)&unk_100324AE0);
  v26 = sub_10000F138((unint64_t *)&unk_1003178C0, (uint64_t *)&unk_100324AE0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v25, v26, v5, v24);
  v27 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v47, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v48);
  *(_QWORD *)&v14[OBJC_IVAR____TtC8SOSBuddy23StewieStateMonitorAgent_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v22, v21, v12, v8, v27, 0);
  v28 = &v14[OBJC_IVAR____TtC8SOSBuddy23StewieStateMonitorAgent_handler];
  v29 = v51;
  *(_QWORD *)v28 = v49;
  *((_QWORD *)v28 + 1) = v29;
  swift_retain(v29);

  v53.receiver = v14;
  v53.super_class = ObjectType;
  v30 = objc_msgSendSuper2(&v53, "init");
  v31 = qword_100315820;
  v32 = v30;
  if (v31 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v33 = type metadata accessor for Logger(0);
  sub_10000D744(v33, (uint64_t)qword_10033FD18);
  v34 = v32;
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = (void *)swift_slowAlloc(32, -1);
    v54 = v38;
    *(_DWORD *)v37 = 136446210;
    ObjectType = (objc_class *)(v37 + 4);
    v39 = v34;
    v40 = objc_msgSend(v39, "description");
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v43 = v42;

    v52 = sub_100172BEC(v41, v43, (uint64_t *)&v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, ObjectType, v37 + 12);

    swift_bridgeObjectRelease(v43);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "[%{public}s] init", v37, 0xCu);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);

    swift_release(v51);
  }
  else
  {

    swift_release(v51);
  }
  return v34;
}

id sub_100118644()
{
  void *v0;
  objc_class *ObjectType;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint8_t *v15;
  objc_class *v16;
  uint64_t v17;
  uint64_t v18;
  objc_super v19;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v3 = v0;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v16 = ObjectType;
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v18 = v7;
    *(_DWORD *)v6 = 136446210;
    v15 = v6 + 4;
    v8 = v3;
    v9 = objc_msgSend(v8, "description");
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    v13 = v10;
    ObjectType = v16;
    v17 = sub_100172BEC(v13, v12, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v6 + 4, v6 + 12);

    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%{public}s] deinit", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
  v19.receiver = v3;
  v19.super_class = ObjectType;
  return objc_msgSendSuper2(&v19, "dealloc", v15);
}

uint64_t sub_1001188AC(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  id v24;
  id v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  __n128 v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  _QWORD *v39;
  id v40;
  char *v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t aBlock[5];
  _QWORD *v58;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v53 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v55 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v54 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (uint64_t *)((char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v52 = v1;
  v15 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy23StewieStateMonitorAgent_queue);
  *v14 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  v16 = v15;
  v17 = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v14, v10);
  if ((v17 & 1) != 0)
  {
    if (qword_1003158C8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003158C8, sub_1000D98C4);
LABEL_3:
  v51 = v7;
  v18 = type metadata accessor for Logger(0);
  sub_10000D744(v18, (uint64_t)qword_10033FF10);
  v19 = a1;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(12, -1);
    v50 = v3;
    v23 = (uint8_t *)v22;
    v49 = swift_slowAlloc(32, -1);
    aBlock[0] = v49;
    *(_DWORD *)v23 = 136446210;
    v48 = v23 + 4;
    v24 = v19;
    v25 = objc_msgSend(v24, "description");
    v26 = v6;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v29 = v28;

    v30 = v27;
    v6 = v26;
    v56 = sub_100172BEC(v30, v29, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, aBlock, v48, v23 + 12);

    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "stateChanged: %{public}s", v23, 0xCu);
    v31 = v49;
    swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    v32 = v23;
    v3 = v50;
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

  }
  sub_10000D75C();
  v34 = (void *)static OS_dispatch_queue.main.getter(v33);
  v36 = *(_QWORD *)(v52 + OBJC_IVAR____TtC8SOSBuddy23StewieStateMonitorAgent_handler);
  v35 = *(_QWORD *)(v52 + OBJC_IVAR____TtC8SOSBuddy23StewieStateMonitorAgent_handler + 8);
  v37 = (_QWORD *)swift_allocObject(&unk_1002F0F58, 40, 7);
  v37[2] = v36;
  v37[3] = v35;
  v37[4] = v19;
  aBlock[4] = (uint64_t)sub_100118DD8;
  v58 = v37;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1001BAACC;
  aBlock[3] = (uint64_t)&unk_1002F0F70;
  v38 = _Block_copy(aBlock);
  v39 = v58;
  v40 = v19;
  swift_retain(v35);
  swift_release(v39);
  v41 = v54;
  static DispatchQoS.unspecified.getter(v42);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  v43 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v44 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v45 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v44, v45, v3, v43);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v41, v6, v38);
  _Block_release(v38);

  (*(void (**)(char *, uint64_t))(v53 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v41, v51);
}

uint64_t type metadata accessor for StewieStateMonitorAgent()
{
  return objc_opt_self(_TtC8SOSBuddy23StewieStateMonitorAgent);
}

uint64_t sub_100118DAC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100118DD8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

double sub_100118E00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_100118E10(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_100118E18()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v14;
  __n128 v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48[3];
  id v49;
  uint64_t v50;

  v1 = v0;
  v2 = *v0;
  v3 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8((uint64_t *)&unk_10032B170);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_allocWithZone((Class)type metadata accessor for LockScreenSource());
  v1[4] = objc_msgSend(v12, "init", swift_retain(v1).n128_f64[0]);
  v46 = v11;
  v47 = v8;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100209204((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v13 = &_swiftEmptySetSingleton;
  }
  v1[5] = v13;
  *((_BYTE *)v1 + 48) = 2;
  swift_release(v1);
  v14 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v1[2] = PassthroughSubject.init()(v15);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v1[3] = PassthroughSubject.init()(v16);
  v17 = qword_100315820;
  swift_retain(v1);
  if (v17 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v18 = type metadata accessor for Logger(0);
  sub_10000D744(v18, (uint64_t)qword_10033FD18);
  v20 = swift_retain_n(v1, v19);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = v2;
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v45 = v7;
    v26 = v25;
    v48[0] = v25;
    *(_DWORD *)v24 = 136446210;
    v49 = v1;
    v27 = swift_retain(v1);
    v28 = String.init<A>(describing:)(&v49, v23, v27);
    v30 = v29;
    v49 = (id)sub_100172BEC(v28, v29, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v24 + 4, v24 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%{public}s] init", v24, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    v31 = v26;
    v7 = v45;
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  v48[0] = *(_QWORD *)(v1[4] + OBJC_IVAR____TtC8SOSBuddy16LockScreenSource_lockedStateDidChange);
  v32 = v48[0];
  v33 = sub_10000D75C();
  v34 = swift_retain(v32);
  v49 = (id)static OS_dispatch_queue.main.getter(v34);
  v35 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v6, 1, 1, v35);
  v36 = sub_100003DB8(&qword_10031D150);
  v37 = sub_1000084FC((unint64_t *)&unk_10032B180, &qword_10031D150, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v38 = sub_10002158C();
  v39 = v46;
  Publisher.receive<A>(on:options:)(&v49, v6, v36, v33, v37, v38);
  sub_1000215D4((uint64_t)v6);

  swift_release(v48[0]);
  v40 = sub_1000084FC(&qword_1003205E0, (uint64_t *)&unk_10032B170, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v41 = swift_retain(v1);
  v42 = Publisher<>.sink(receiveValue:)(sub_1001197C0, v1, v7, v40, v41);
  swift_release(v1);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v39, v7);
  swift_beginAccess(v1 + 5, v48, 33, 0);
  AnyCancellable.store(in:)(v1 + 5);
  swift_endAccess(v48);
  swift_release(v42);
  swift_release(v1);
  return v1;
}

double sub_100119288(unsigned __int8 *a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(unsigned __int8 *)(a2 + 48);
  if (v4 == 2 || ((v3 ^ v4) & 1) != 0)
  {
    v5 = sub_100003DB8(&qword_10032B0E0);
    v6 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v5, v6);
  }
  *(_BYTE *)(a2 + 48) = v3;
  return sub_10011954C(v4);
}

uint64_t sub_100119318()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
}

_QWORD *sub_100119334()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = *v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v3 = type metadata accessor for Logger(0);
  sub_10000D744(v3, (uint64_t)qword_10033FD18);
  v5 = swift_retain_n(v0, v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v15 = (uint64_t)v1;
    v16 = v9;
    *(_DWORD *)v8 = 136446210;
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v2, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v8 + 4, v8 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%{public}s] deinit", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  swift_release(v1[2]);
  swift_release(v1[3]);

  swift_bridgeObjectRelease(v1[5]);
  return v1;
}

uint64_t sub_10011950C()
{
  uint64_t v0;

  sub_100119334();
  return swift_deallocClassInstance(v0, 49, 7);
}

uint64_t type metadata accessor for LockScreenModel()
{
  return objc_opt_self(_TtC8SOSBuddy15LockScreenModel);
}

double sub_10011954C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = *(unsigned __int8 *)(v1 + 48);
  if (v4 == 2)
  {
    if (a1 == 2)
      return result;
  }
  else if (a1 != 2 && ((((a1 & 1) == 0) ^ v4) & 1) != 0)
  {
    return result;
  }
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FD18);
  v7 = swift_retain_n(v1, v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v25 = v11;
    *(_DWORD *)v10 = 136446466;
    LOBYTE(v24) = a1;
    v12 = sub_100003DB8((uint64_t *)&unk_1003263F0);
    v14 = String.init<A>(describing:)(&v24, v12, v13);
    v16 = v15;
    v24 = sub_100172BEC(v14, v15, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 4, v10 + 12);
    v17 = swift_bridgeObjectRelease(v16);
    *(_WORD *)(v10 + 12) = 2082;
    LOBYTE(v24) = *(_BYTE *)(v2 + 48);
    v18 = String.init<A>(describing:)(&v24, v12, v17);
    v20 = v19;
    v24 = sub_100172BEC(v18, v19, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 14, v10 + 22);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "screenLocked changed from: %{public}s to: %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(v2);
  }
  v21 = sub_100003DB8(&qword_10032B0E0);
  v22 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  *(_QWORD *)&result = Subject<>.send()(v21, v22).n128_u64[0];
  return result;
}

double sub_1001197C0(unsigned __int8 *a1)
{
  uint64_t v1;

  return sub_100119288(a1, v1);
}

uint64_t *initializeWithCopy for ShowMessagesButtonView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain(v3);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for ShowMessagesButtonView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v7 = a2[2];
  v6 = a2[3];
  v8 = a1[3];
  a1[2] = v7;
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v8);
  return a1;
}

uint64_t *assignWithTake for ShowMessagesButtonView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  swift_release(v5);
  return a1;
}

ValueMetadata *type metadata accessor for ShowMessagesButtonView()
{
  return &type metadata for ShowMessagesButtonView;
}

uint64_t sub_1001198C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029AE04, 1);
}

uint64_t sub_1001198D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t KeyPath;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  double v64;
  _QWORD *v65;
  double v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t result;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD v113[3];
  uint64_t v114;
  _OWORD v115[7];

  v95 = a4;
  v93 = a3;
  v112 = a5;
  v108 = type metadata accessor for KeyboardShortcut(0);
  v107 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108, v7);
  v106 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for ButtonBorderShape(0);
  v103 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105, v9);
  v11 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for BorderedButtonStyle(0);
  v94 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96, v12);
  v14 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003DB8(&qword_1003205E8);
  v92 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100003DB8(&qword_1003205F0);
  v97 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99, v19);
  v21 = (char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100003DB8(&qword_1003205F8);
  __chkstk_darwin(v98, v22);
  v24 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100003DB8(&qword_100320600);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102, v25);
  v27 = (char *)&v92 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100003DB8(&qword_100320608);
  __chkstk_darwin(v100, v28);
  v104 = (char *)&v92 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_100003DB8(&qword_100320610);
  __chkstk_darwin(v110, v30);
  v111 = (uint64_t)&v92 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100003DB8(&qword_100320618);
  __chkstk_darwin(v32, v33);
  v109 = (char *)&v92 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v36 = a1[9];
    v35 = a1[10];
    sub_100007BBC(a1 + 6, v36);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v35 + 32))(v113, v36, v35);
    v37 = sub_10011A144();
    v38 = v95;
    swift_retain(v95);
    v39 = Button.init(action:label:)(v93, v38, sub_10011A0E4, 0, &type metadata for ShowMessagesButtonLabelView, v37);
    BorderedButtonStyle.init()(v39);
    v40 = sub_1000084FC(&qword_100320628, &qword_1003205E8, (uint64_t)&protocol conformance descriptor for Button<A>);
    v41 = sub_1000052EC((unint64_t *)&qword_100319760, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedButtonStyle);
    v42 = v96;
    View.buttonStyle<A>(_:)(v14, v15, v96, v40, v41);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v14, v42);
    v43 = (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v18, v15);
    static ButtonBorderShape.capsule.getter(v43);
    KeyPath = swift_getKeyPath(&unk_100256F18);
    v45 = v98;
    v46 = (uint64_t *)&v24[*(int *)(v98 + 36)];
    v47 = sub_100003DB8(&qword_100318968);
    v48 = v103;
    v49 = v105;
    (*(void (**)(char *, char *, uint64_t))(v103 + 16))((char *)v46 + *(int *)(v47 + 28), v11, v105);
    *v46 = KeyPath;
    v50 = v97;
    v51 = v99;
    (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v24, v21, v99);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v11, v49);
    v52 = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v21, v51);
    v53 = v106;
    static KeyboardShortcut.defaultAction.getter(v52);
    v54 = sub_10011AF58();
    View.keyboardShortcut(_:)(v53, v45, v54);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v53, v108);
    sub_100007FF0((uint64_t)v24, &qword_1003205F8);
    v56 = static Color.green.getter(v55);
    v57 = swift_getKeyPath(&unk_100256F48);
    *(_QWORD *)&v115[0] = v56;
    v58 = swift_retain(v56);
    v59 = AnyShapeStyle.init<A>(_:)(v115, &type metadata for Color, &protocol witness table for Color, v58);
    v60 = v101;
    v61 = (uint64_t)v104;
    v62 = v102;
    (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v104, v27, v102);
    swift_release(v56);
    v63 = (uint64_t *)(v61 + *(int *)(v100 + 36));
    *v63 = v57;
    v63[1] = v59;
    (*(void (**)(char *, uint64_t))(v60 + 8))(v27, v62);
    v64 = *(double *)(*sub_100007BBC(v113, v114) + 216);
    v65 = sub_100007BBC(v113, v114);
    v66 = *(double *)(*v65 + 216);
    v67 = static Alignment.center.getter(v65);
    v70 = v69;
    if (v64 > v66)
    {
      v71 = static os_log_type_t.fault.getter(v68);
      v72 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)(v71, &_mh_execute_header, v72, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    }
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v115, *(_QWORD *)&v64, 0, 0, 1, *(_QWORD *)&v66, 0, 0, 1, 0, 1, 0, 1, v67, v70);
    v73 = v111;
    sub_10000B234(v61, v111, &qword_100320608);
    v74 = v110;
    v75 = (_OWORD *)(v73 + *(int *)(v110 + 36));
    v76 = v115[5];
    v75[4] = v115[4];
    v75[5] = v76;
    v75[6] = v115[6];
    v77 = v115[1];
    *v75 = v115[0];
    v75[1] = v77;
    v78 = v115[3];
    v75[2] = v115[2];
    v75[3] = v78;
    sub_100007FF0(v61, &qword_100320608);
    v79 = LocalizedStringKey.init(stringLiteral:)(0x73654D20776F6853, 0xED00007365676173);
    v80 = Text.init(_:tableName:bundle:comment:)(v79);
    v82 = v81;
    v84 = v83;
    v86 = v85 & 1;
    v87 = sub_10011B068();
    v88 = (uint64_t)v109;
    View.accessibility(label:)(v80, v82, v86, v84, v74, v87);
    sub_10002B438(v80, v82, v86);
    swift_bridgeObjectRelease(v84);
    sub_100007FF0(v73, &qword_100320610);
    sub_10000B458(v88, v112, &qword_100320618);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v113);
  }
  else
  {
    v90 = type metadata accessor for UIMetrics();
    v91 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v90, v91);
    __break(1u);
  }
  return result;
}

uint64_t sub_10011A0E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = type metadata accessor for UIMetrics();
  v3 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.init()(v2, v3);
  *a1 = result;
  a1[1] = v5;
  return result;
}

uint64_t sub_10011A138@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001198D4(*(_QWORD **)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_10011A144()
{
  unint64_t result;

  result = qword_100320620;
  if (!qword_100320620)
  {
    result = swift_getWitnessTable(&unk_100256F9C, &type metadata for ShowMessagesButtonLabelView);
    atomic_store(result, (unint64_t *)&qword_100320620);
  }
  return result;
}

uint64_t sub_10011A188@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  _OWORD v34[7];

  v6 = sub_100003DB8(&qword_100320650);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_100320658);
  __chkstk_darwin(v10, v11);
  v13 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003DB8(&qword_100320660);
  __chkstk_darwin(v14, v15);
  v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v18 = a1[9];
    v19 = a1[10];
    sub_100007BBC(a1 + 6, v18);
    v20 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v19 + 32))(v33, v18, v19);
    *(_QWORD *)v9 = static VerticalAlignment.center.getter(v20);
    *((_QWORD *)v9 + 1) = 0;
    v9[16] = 1;
    v21 = sub_100003DB8(&qword_100320668);
    v22 = sub_10011A408((uint64_t)a1, a2, &v9[*(int *)(v21 + 44)]);
    v23 = static Alignment.center.getter(v22);
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v34, 0, 1, 0, 1, 0x7FF0000000000000, 0, 0x4042000000000000, 0, 0, 1, 0, 1, v23, v24);
    sub_10000B234((uint64_t)v9, (uint64_t)v13, &qword_100320650);
    v25 = &v13[*(int *)(v10 + 36)];
    v26 = v34[5];
    *((_OWORD *)v25 + 4) = v34[4];
    *((_OWORD *)v25 + 5) = v26;
    *((_OWORD *)v25 + 6) = v34[6];
    v27 = v34[1];
    *(_OWORD *)v25 = v34[0];
    *((_OWORD *)v25 + 1) = v27;
    v28 = v34[3];
    *((_OWORD *)v25 + 2) = v34[2];
    *((_OWORD *)v25 + 3) = v28;
    sub_100007FF0((uint64_t)v9, &qword_100320650);
    v29 = sub_10011B1CC();
    View.accessibility(hidden:)(1, v10, v29);
    sub_100007FF0((uint64_t)v13, &qword_100320658);
    sub_10000B458((uint64_t)v17, a3, &qword_100320660);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v33);
  }
  else
  {
    v31 = type metadata accessor for UIMetrics();
    v32 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v31, v32);
    __break(1u);
  }
  return result;
}

uint64_t sub_10011A408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  char v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t KeyPath;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  UIContentSizeCategory v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _OWORD *v114;
  __int128 v115;
  id v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  int *v126;
  char *v127;
  uint64_t result;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  UIContentSizeCategory v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  char v160;

  v148 = a3;
  v136 = sub_100003DB8(&qword_100316A20);
  __chkstk_darwin(v136, v5);
  v154 = (char *)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100003DB8(&qword_100320680);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141, v7);
  v138 = (char *)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_100003DB8(&qword_100320688);
  __chkstk_darwin(v137, v9);
  v142 = (char *)&v131 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = sub_100003DB8(&qword_100320690);
  __chkstk_darwin(v139, v11);
  v145 = (uint64_t)&v131 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100003DB8(&qword_100320698);
  v14 = __chkstk_darwin(v144, v13);
  v147 = (uint64_t)&v131 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14, v16);
  v143 = (uint64_t)&v131 - v18;
  __chkstk_darwin(v17, v19);
  v146 = (uint64_t)&v131 - v20;
  v21 = type metadata accessor for Font.Leading(0);
  v151 = *(_QWORD *)(v21 - 8);
  v152 = v21;
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v131 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100003DB8(&qword_10031A218);
  __chkstk_darwin(v132, v25);
  v27 = (uint64_t *)((char *)&v131 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = type metadata accessor for Image.Scale(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28, v30);
  v32 = (char *)&v131 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100003DB8(&qword_10031A208);
  __chkstk_darwin(v33, v34);
  v36 = (uint64_t *)((char *)&v131 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v133 = sub_100003DB8(&qword_10031A1F0);
  __chkstk_darwin(v133, v37);
  v39 = (char *)&v131 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100003DB8(&qword_1003206A0);
  v149 = *(_QWORD *)(v40 - 8);
  v150 = v40;
  __chkstk_darwin(v40, v41);
  v134 = (uint64_t)&v131 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100003DB8(&qword_1003206A8);
  v45 = __chkstk_darwin(v43, v44);
  v135 = (uint64_t)&v131 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45, v47);
  v156 = (uint64_t)&v131 - v48;
  if (!a1)
    goto LABEL_11;
  v155 = a1;
  v49 = *(id *)(a1 + 112);
  v153 = UIContentSizeCategoryAccessibilityExtraLarge;
  v50 = static UIContentSizeCategory.>= infix(_:_:)(v49, UIContentSizeCategoryAccessibilityExtraLarge);

  if ((v50 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v149 + 56))(v156, 1, 1, v150);
    v52 = enum case for Font.Leading.tight(_:);
    v54 = v151;
    v53 = v152;
  }
  else
  {
    v55 = Image.init(systemName:)(0x2E6567617373656DLL, 0xEC0000006C6C6966, v51);
    (*(void (**)(char *, _QWORD, uint64_t))(v29 + 104))(v32, enum case for Image.Scale.medium(_:), v28);
    KeyPath = swift_getKeyPath(&unk_100256FF0);
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))((char *)v27 + *(int *)(v132 + 28), v32, v28);
    *v27 = KeyPath;
    sub_10000B234((uint64_t)v27, (uint64_t)v36 + *(int *)(v33 + 36), &qword_10031A218);
    *v36 = v55;
    swift_retain(v55);
    sub_100007FF0((uint64_t)v27, &qword_10031A218);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v28);
    v57 = swift_release(v55);
    v58 = static Font.title3.getter(v57);
    static Font.Weight.semibold.getter(v58);
    v59 = Font.weight(_:)(v58);
    swift_release(v58);
    v52 = enum case for Font.Leading.tight(_:);
    v54 = v151;
    v53 = v152;
    (*(void (**)(char *, _QWORD, uint64_t))(v151 + 104))(v24, enum case for Font.Leading.tight(_:), v152);
    v60 = Font.leading(_:)(v24, v59);
    swift_release(v59);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v24, v53);
    v61 = swift_getKeyPath(&unk_100257020);
    sub_10000B234((uint64_t)v36, (uint64_t)v39, &qword_10031A208);
    v62 = (uint64_t *)&v39[*(int *)(v133 + 36)];
    *v62 = v61;
    v62[1] = v60;
    sub_100007FF0((uint64_t)v36, &qword_10031A208);
    v64 = static Color.green.getter(v63);
    v65 = v134;
    sub_10000B234((uint64_t)v39, v134, &qword_10031A1F0);
    v66 = v150;
    *(_QWORD *)(v65 + *(int *)(v150 + 36)) = v64;
    sub_100007FF0((uint64_t)v39, &qword_10031A1F0);
    v67 = v156;
    sub_10000B458(v65, v156, &qword_1003206A0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v149 + 56))(v67, 0, 1, v66);
  }
  v68 = LocalizedStringKey.init(stringLiteral:)(0x73654D20776F6853, 0xED00007365676173);
  v69 = Text.init(_:tableName:bundle:comment:)(v68);
  v71 = v70;
  v73 = v72;
  v75 = v74 & 1;
  v76 = static Font.title3.getter(v69);
  static Font.Weight.semibold.getter(v76);
  v77 = Font.weight(_:)(v76);
  swift_release(v76);
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 104))(v24, v52, v53);
  v78 = Font.leading(_:)(v24, v77);
  swift_release(v77);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v24, v53);
  v79 = Text.font(_:)(v78, v69, v71, v75, v73);
  v81 = v80;
  v83 = v82;
  v85 = v84;
  swift_release(v78);
  LOBYTE(v78) = v83 & 1;
  sub_10002B438(v69, v71, v75);
  v86 = swift_bridgeObjectRelease(v73);
  v87 = static Color.green.getter(v86);
  v88 = Text.foregroundColor(_:)(v87, v79, v81, v83 & 1, v85);
  v90 = v89;
  LOBYTE(v75) = v91;
  v93 = v92;
  swift_release(v87);
  sub_10002B438(v79, v81, v78);
  swift_bridgeObjectRelease(v85);
  a2 = v155;
  v94 = *(id *)(v155 + 112);
  v95 = v153;
  LOBYTE(v78) = static UIContentSizeCategory.>= infix(_:_:)(v94, v153);

  v96 = swift_getKeyPath(&unk_100257050);
  *(_QWORD *)&v157 = v88;
  *((_QWORD *)&v157 + 1) = v90;
  LOBYTE(v158) = v75 & 1;
  *((_QWORD *)&v158 + 1) = v93;
  *(_QWORD *)&v159 = v96;
  *((_QWORD *)&v159 + 1) = (v78 & 1) == 0;
  v160 = v78 & 1;
  v97 = enum case for DynamicTypeSize.accessibility2(_:);
  v98 = type metadata accessor for DynamicTypeSize(0);
  v99 = (uint64_t)v154;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 104))(v154, v97, v98);
  v100 = sub_1000052EC(&qword_100316A30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v99, v99, v98, v100) & 1) == 0)
  {
    __break(1u);
LABEL_11:
    v129 = type metadata accessor for UIMetrics();
    v130 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v129, v130);
    __break(1u);
    return result;
  }
  v101 = sub_100003DB8(&qword_100320050);
  v102 = sub_10010D0B0();
  v103 = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  v104 = v138;
  View.dynamicTypeSize<A>(_:)(v99, v101, v136, v102, v103);
  sub_100007FF0(v99, &qword_100316A20);
  sub_10002B438(v157, *((uint64_t *)&v157 + 1), v158);
  swift_bridgeObjectRelease(*((_QWORD *)&v158 + 1));
  swift_release(v159);
  v105 = swift_getKeyPath(&unk_100257080);
  v106 = v140;
  v107 = (uint64_t)v142;
  v108 = v141;
  (*(void (**)(char *, char *, uint64_t))(v140 + 16))(v142, v104, v141);
  v109 = v107 + *(int *)(v137 + 36);
  *(_QWORD *)v109 = v105;
  *(_BYTE *)(v109 + 8) = 1;
  v110 = (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v104, v108);
  v111 = static Alignment.center.getter(v110);
  _FrameLayout.init(width:height:alignment:)(&v157, 0, 1, 0, 1, v111, v112);
  v113 = v145;
  sub_10000B234(v107, v145, &qword_100320688);
  v114 = (_OWORD *)(v113 + *(int *)(v139 + 36));
  v115 = v158;
  *v114 = v157;
  v114[1] = v115;
  v114[2] = v159;
  sub_100007FF0(v107, &qword_100320688);
  v116 = *(id *)(a2 + 112);
  LOBYTE(v107) = static UIContentSizeCategory.>= infix(_:_:)(v116, v95);

  if ((v107 & 1) != 0)
    v117 = 1.0;
  else
    v117 = 0.5;
  v118 = swift_getKeyPath(&unk_1002570B0);
  v119 = v143;
  sub_10000B234(v113, v143, &qword_100320690);
  v120 = v119 + *(int *)(v144 + 36);
  *(_QWORD *)v120 = v118;
  *(double *)(v120 + 8) = v117;
  sub_100007FF0(v113, &qword_100320690);
  v121 = v146;
  sub_10000B458(v119, v146, &qword_100320698);
  v122 = v156;
  v123 = v135;
  sub_10000B234(v156, v135, &qword_1003206A8);
  v124 = v147;
  sub_10000B234(v121, v147, &qword_100320698);
  v125 = v148;
  *v148 = 0;
  *((_BYTE *)v125 + 8) = 1;
  v126 = (int *)sub_100003DB8(&qword_1003206B0);
  sub_10000B234(v123, (uint64_t)v125 + v126[12], &qword_1003206A8);
  sub_10000B234(v124, (uint64_t)v125 + v126[16], &qword_100320698);
  v127 = (char *)v125 + v126[20];
  *(_QWORD *)v127 = 0;
  v127[8] = 1;
  sub_100007FF0(v121, &qword_100320698);
  sub_100007FF0(v122, &qword_1003206A8);
  sub_100007FF0(v124, &qword_100320698);
  return sub_100007FF0(v123, &qword_1003206A8);
}

uint64_t sub_10011AF48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10011A188(*(_QWORD **)v1, *(_QWORD *)(v1 + 8), a1);
}

unint64_t sub_10011AF58()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100320630;
  if (!qword_100320630)
  {
    v1 = sub_100007FAC(&qword_1003205F8);
    v2[0] = sub_100007FAC(&qword_1003205E8);
    v2[1] = type metadata accessor for BorderedButtonStyle(255);
    v2[2] = sub_1000084FC(&qword_100320628, &qword_1003205E8, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_1000052EC((unint64_t *)&qword_100319760, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_1000084FC(&qword_100318978, &qword_100318968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320630);
  }
  return result;
}

unint64_t sub_10011B068()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100320638;
  if (!qword_100320638)
  {
    v1 = sub_100007FAC(&qword_100320610);
    sub_10011B0D4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320638);
  }
  return result;
}

unint64_t sub_10011B0D4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100320640;
  if (!qword_100320640)
  {
    v1 = sub_100007FAC(&qword_100320608);
    v2[0] = sub_100007FAC(&qword_1003205F8);
    v2[1] = sub_10011AF58();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.keyboardShortcut(_:)>>, 1);
    sub_1000084FC(&qword_100318880, &qword_100318888, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320640);
  }
  return result;
}

ValueMetadata *type metadata accessor for ShowMessagesButtonLabelView()
{
  return &type metadata for ShowMessagesButtonLabelView;
}

uint64_t sub_10011B190()
{
  return sub_10000A9B0(&qword_100320648, &qword_100320618, (void (*)(void))sub_10011B068);
}

uint64_t sub_10011B1BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029AE2C, 1);
}

unint64_t sub_10011B1CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100320670;
  if (!qword_100320670)
  {
    v1 = sub_100007FAC(&qword_100320658);
    sub_1000084FC(&qword_100320678, &qword_100320650, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320670);
  }
  return result;
}

uint64_t sub_10011B278()
{
  return sub_10000A9B0(&qword_1003206B8, &qword_100320660, (void (*)(void))sub_10011B1CC);
}

uint64_t destroy for BuiltInEnterRoadsidePhoneNumberContentView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[6]);
  swift_release(a1[7]);
  swift_release(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_release(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[16]);
  return swift_release(a1[17]);
}

uint64_t initializeWithCopy for BuiltInEnterRoadsidePhoneNumberContentView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v8 = a2[4];
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  v9 = a2[6];
  *(_QWORD *)(a1 + 48) = v9;
  v18 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 56) = v18;
  v11 = a2[9];
  v10 = a2[10];
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v10;
  v12 = a2[11];
  v13 = a2[12];
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = v13;
  v14 = a2[14];
  *(_QWORD *)(a1 + 104) = a2[13];
  *(_QWORD *)(a1 + 112) = v14;
  v15 = a2[16];
  *(_QWORD *)(a1 + 120) = a2[15];
  *(_QWORD *)(a1 + 128) = v15;
  v16 = a2[17];
  *(_QWORD *)(a1 + 136) = v16;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v18);
  swift_retain(v11);
  swift_bridgeObjectRetain(v12);
  swift_retain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_retain(v16);
  return a1;
}

uint64_t *assignWithCopy for BuiltInEnterRoadsidePhoneNumberContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a1[4];
  v9 = a2[4];
  a1[4] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[5] = a2[5];
  v10 = a2[6];
  v11 = a1[6];
  a1[6] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[7];
  v13 = a1[7];
  a1[7] = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = a2[9];
  v15 = a1[9];
  a1[8] = a2[8];
  a1[9] = v14;
  swift_retain(v14);
  swift_release(v15);
  a1[10] = a2[10];
  v16 = a2[11];
  v17 = a1[11];
  a1[11] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a1[12];
  v19 = a2[12];
  a1[12] = v19;
  swift_retain(v19);
  swift_release(v18);
  a1[13] = a2[13];
  v20 = a2[14];
  v21 = a1[14];
  a1[14] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  a1[15] = a2[15];
  v22 = a2[16];
  v23 = a1[16];
  a1[16] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = a1[17];
  v25 = a2[17];
  a1[17] = v25;
  swift_retain(v25);
  swift_release(v24);
  return a1;
}

uint64_t *assignWithTake for BuiltInEnterRoadsidePhoneNumberContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  v7 = a1[4];
  v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_release(v7);
  a1[5] = a2[5];
  swift_release(a1[6]);
  v9 = a1[7];
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  swift_release(v9);
  v10 = a1[9];
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  swift_release(v10);
  a1[10] = a2[10];
  swift_bridgeObjectRelease(a1[11]);
  v11 = a1[12];
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  swift_release(v11);
  v12 = a2[14];
  v13 = a1[14];
  a1[13] = a2[13];
  a1[14] = v12;
  swift_bridgeObjectRelease(v13);
  a1[15] = a2[15];
  swift_bridgeObjectRelease(a1[16]);
  v14 = a1[17];
  *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
  swift_release(v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for BuiltInEnterRoadsidePhoneNumberContentView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BuiltInEnterRoadsidePhoneNumberContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BuiltInEnterRoadsidePhoneNumberContentView()
{
  return &type metadata for BuiltInEnterRoadsidePhoneNumberContentView;
}

uint64_t sub_10011B6FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029AE70, 1);
}

uint64_t sub_10011B70C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[3];
  uint64_t v55;
  uint64_t v56;

  v2 = v1;
  v4 = *(_QWORD **)(v1 + 32);
  if (v4)
  {
    v5 = v4[9];
    v6 = v4[10];
    sub_100007BBC(v4 + 6, v5);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 24))(v54, v5, v6);
    v7 = v55;
    v8 = v56;
    sub_100007BBC(v54, v55);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 408))(v7, v8);
    v11 = v10;
    v47 = static HorizontalAlignment.center.getter(v9);
    v12 = *(_QWORD *)(v1 + 56);
    v51 = *(_OWORD *)(v1 + 120);
    v52 = *(_QWORD *)(v1 + 136);
    v13 = sub_100003DB8(&qword_100318290);
    State.projectedValue.getter(&v48, v13);
    v14 = v48;
    v15 = v49;
    v16 = (_OWORD *)swift_allocObject(&unk_1002F11C0, 160, 7);
    v17 = *(_OWORD *)(v1 + 112);
    v16[7] = *(_OWORD *)(v1 + 96);
    v16[8] = v17;
    v16[9] = *(_OWORD *)(v1 + 128);
    v18 = *(_OWORD *)(v1 + 48);
    v16[3] = *(_OWORD *)(v1 + 32);
    v16[4] = v18;
    v19 = *(_OWORD *)(v1 + 80);
    v16[5] = *(_OWORD *)(v1 + 64);
    v16[6] = v19;
    v20 = *(_OWORD *)(v1 + 16);
    v16[1] = *(_OWORD *)v1;
    v16[2] = v20;
    sub_100030F30((uint64_t *)v1);
    v21 = sub_10011BBF4(v12, v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), (uint64_t)sub_10011CE78, (uint64_t)v16);
    v46 = v22;
    v24 = v23;
    v26 = v25;
    swift_release(*((_QWORD *)&v14 + 1));
    swift_release(v16);
    swift_release(v14);
    swift_bridgeObjectRelease(*((_QWORD *)&v15 + 1));
    v27 = *(_OWORD *)(v1 + 96);
    v48 = *(_OWORD *)(v1 + 80);
    v49 = v27;
    v50 = *(_QWORD *)(v1 + 112);
    v28 = sub_100003DB8(&qword_100318250);
    FocusState.projectedValue.getter(&v51, v28);
    v45 = v51;
    v29 = v52;
    v30 = v53;
    v31 = type metadata accessor for UIMetrics();
    v32 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v33 = EnvironmentObject.init()(v31, v32);
    v35 = v34;
    LOBYTE(v51) = 0;
    v36 = (_OWORD *)swift_allocObject(&unk_1002F11E8, 160, 7);
    v37 = *(_OWORD *)(v2 + 112);
    v36[7] = *(_OWORD *)(v2 + 96);
    v36[8] = v37;
    v36[9] = *(_OWORD *)(v2 + 128);
    v38 = *(_OWORD *)(v2 + 48);
    v36[3] = *(_OWORD *)(v2 + 32);
    v36[4] = v38;
    v39 = *(_OWORD *)(v2 + 80);
    v36[5] = *(_OWORD *)(v2 + 64);
    v36[6] = v39;
    v40 = *(_OWORD *)(v2 + 16);
    v36[1] = *(_OWORD *)v2;
    v36[2] = v40;
    *(_QWORD *)a1 = v47;
    *(_QWORD *)(a1 + 8) = v11;
    *(_BYTE *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 17) = v48;
    *(_DWORD *)(a1 + 20) = *(_DWORD *)((char *)&v48 + 3);
    *(_QWORD *)(a1 + 24) = v33;
    *(_QWORD *)(a1 + 32) = v35;
    *(_QWORD *)(a1 + 40) = v21;
    *(_QWORD *)(a1 + 48) = v46;
    *(_QWORD *)(a1 + 56) = v24;
    *(_QWORD *)(a1 + 64) = v26;
    *(_OWORD *)(a1 + 72) = xmmword_1002570E0;
    *(_QWORD *)(a1 + 88) = 20048;
    *(_QWORD *)(a1 + 96) = 0xE200000000000000;
    *(_OWORD *)(a1 + 104) = v45;
    *(_QWORD *)(a1 + 120) = v29;
    *(_QWORD *)(a1 + 128) = v30;
    *(_QWORD *)(a1 + 136) = sub_10011CE84;
    *(_QWORD *)(a1 + 144) = v36;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    sub_100030F30((uint64_t *)v2);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v54);
  }
  else
  {
    v42 = *(_QWORD *)(v1 + 40);
    v43 = type metadata accessor for UIMetrics();
    v44 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v42, v43, v44);
    __break(1u);
  }
  return result;
}

void sub_10011B9F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];

  v2 = *(_QWORD *)(a1 + 48);
  swift_beginAccess(v2 + 48, v21, 0, 0);
  v3 = *(_QWORD *)(v2 + 136);
  if (v3
    && ((v4 = *(_QWORD *)(a1 + 56),
         v5 = *(_QWORD *)(v3 + 16),
         v6 = *(_QWORD *)(v3 + 24),
         v7 = *(_QWORD *)(v4 + 16),
         v8 = *(_QWORD *)(v4 + 24),
         v5 == v7)
      ? (v9 = v6 == v8)
      : (v9 = 0),
        v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0) & 1) != 0))
  {
    (*(void (**)(void))(a1 + 64))();
  }
  else
  {
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    v10 = type metadata accessor for Logger(0);
    sub_10000D744(v10, (uint64_t)qword_10033FEC8);
    sub_100030F30((uint64_t *)a1);
    v11 = sub_100030F30((uint64_t *)a1);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v20 = v15;
      *(_DWORD *)v14 = 136446210;
      v16 = sub_1000AD18C();
      v18 = v17;
      v19 = sub_100172BEC(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease(v18);
      sub_100030FF0((uint64_t *)a1);
      sub_100030FF0((uint64_t *)a1);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%{public}s] BuiltInSelectRoadsidePhoneNumberContentView: return tapped in the free form text when it is not a current question anymore", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      sub_100030FF0((uint64_t *)a1);
      sub_100030FF0((uint64_t *)a1);
    }

  }
}

uint64_t sub_10011BBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _OWORD *v7;
  _OWORD *v8;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v31;

  v8 = v7;
  type metadata accessor for MainActor(0);
  swift_retain(a1);
  sub_100030F30((uint64_t *)v7);
  v15 = static MainActor.shared.getter(v14);
  v16 = swift_allocObject(&unk_1002F1210, 184, 7);
  v17 = v7[4];
  *(_OWORD *)(v16 + 120) = v7[5];
  v18 = v7[7];
  *(_OWORD *)(v16 + 136) = v7[6];
  *(_OWORD *)(v16 + 152) = v18;
  *(_OWORD *)(v16 + 168) = v7[8];
  v19 = *v7;
  *(_OWORD *)(v16 + 56) = v7[1];
  v20 = v7[3];
  *(_OWORD *)(v16 + 72) = v7[2];
  *(_OWORD *)(v16 + 88) = v20;
  *(_OWORD *)(v16 + 104) = v17;
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v16 + 32) = a1;
  *(_OWORD *)(v16 + 40) = v19;
  swift_retain(a1);
  sub_100030F30((uint64_t *)v7);
  swift_bridgeObjectRetain(a5);
  swift_retain(a7);
  swift_retain(a2);
  v21 = swift_retain(a3);
  v22 = static MainActor.shared.getter(v21);
  v23 = swift_allocObject(&unk_1002F1238, 232, 7);
  *(_QWORD *)(v23 + 16) = v22;
  *(_QWORD *)(v23 + 24) = &protocol witness table for MainActor;
  v24 = v8[7];
  *(_OWORD *)(v23 + 128) = v8[6];
  *(_OWORD *)(v23 + 144) = v24;
  *(_OWORD *)(v23 + 160) = v8[8];
  v25 = v8[3];
  *(_OWORD *)(v23 + 64) = v8[2];
  *(_OWORD *)(v23 + 80) = v25;
  v26 = v8[5];
  *(_OWORD *)(v23 + 96) = v8[4];
  *(_OWORD *)(v23 + 112) = v26;
  v27 = v8[1];
  *(_OWORD *)(v23 + 32) = *v8;
  *(_OWORD *)(v23 + 48) = v27;
  *(_QWORD *)(v23 + 176) = a1;
  *(_QWORD *)(v23 + 184) = a2;
  *(_QWORD *)(v23 + 192) = a3;
  *(_QWORD *)(v23 + 200) = a4;
  *(_QWORD *)(v23 + 208) = a5;
  *(_QWORD *)(v23 + 216) = a6;
  *(_QWORD *)(v23 + 224) = a7;
  Binding.init(get:set:)(&v31, sub_10011CF60, v16, sub_10011D014, v23, &type metadata for String);
  return v31;
}

uint64_t sub_10011BD94()
{
  return Character.isNumber.getter() & 1;
}

void sub_10011BDBC(uint64_t a1@<X2>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[2];
  _BYTE v12[24];
  _BYTE v13[32];

  v4 = *(unsigned __int8 *)(a1 + 64);
  if ((_DWORD)v4 != 7
    && (v5 = *(_QWORD *)(a2 + 48),
        swift_beginAccess(v5 + 48, v12, 0, 0),
        v6 = *(_QWORD *)(v5 + 64),
        *(_QWORD *)(v6 + 16))
    && (v7 = sub_10017D294(v4), (v8 & 1) != 0)
    && (sub_10008CAC4(*(_QWORD *)(v6 + 56) + 32 * v7, (uint64_t)v13),
        swift_dynamicCast(v11, v13, (char *)&type metadata for Any + 8, &type metadata for String, 6)))
  {
    v9 = v11[0];
    v10 = v11[1];
  }
  else
  {
    v9 = 0;
    v10 = 0xE000000000000000;
  }
  *a3 = v9;
  a3[1] = v10;
}

void sub_10011BE70(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6, uint64_t a7, uint64_t (*a8)(uint64_t a1), void *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  void **v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  NSObject *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  uint8_t *v54;
  void **v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  __n128 v59;
  void *v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  void *v66;
  _OWORD *v67;
  char *v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  Swift::String_optional v78;
  void **object;
  uint64_t countAndFlagsBits;
  Swift::String_optional v81;
  Swift::String v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t *v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  __n128 v96;
  uint64_t v97;
  void *v98;
  _OWORD *v99;
  __n128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t *v118;
  NSObject *v119;
  os_log_type_t v120;
  uint8_t *v121;
  void **v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  __n128 v126;
  void *v127;
  _OWORD *v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  void *v133;
  _OWORD *v134;
  __n128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  void **aBlock;
  uint64_t v158;
  uint64_t (*v159)(uint64_t);
  void *v160;
  uint64_t (*v161)();
  _OWORD *v162;
  uint64_t v163;
  unint64_t v164;
  char v165[32];

  v17 = type metadata accessor for DispatchWorkItemFlags(0);
  v153 = *(_QWORD *)(v17 - 8);
  v154 = v17;
  __chkstk_darwin(v17, v18);
  v152 = (char *)&v145 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS(0);
  v150 = *(_QWORD *)(v20 - 8);
  v151 = v20;
  __chkstk_darwin(v20, v21);
  v149 = (char *)&v145 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a1;
  v24 = a1[1];
  v25 = *(_QWORD *)(a4 + 48);
  swift_beginAccess(v25 + 48, v165, 0, 0);
  v26 = *(_QWORD *)(v25 + 136);
  if (!v26
    || ((v27 = *(_QWORD *)(v26 + 16),
         v28 = *(_QWORD *)(v26 + 24),
         v29 = *(_QWORD *)(a5 + 16),
         v30 = *(_QWORD *)(a5 + 24),
         v27 == v29)
      ? (v31 = v28 == v30)
      : (v31 = 0),
        !v31 && (_stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v29, v30, 0) & 1) == 0))
  {
    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_10000D744(v34, (uint64_t)qword_10033FD18);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Phone number: Updating value when it is not a current question anymore", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    return;
  }
  v147 = v25;
  v148 = a5;
  aBlock = a6;
  v158 = a7;
  v159 = a8;
  v160 = a9;
  swift_bridgeObjectRetain(v24);
  v32 = sub_100003DB8(&qword_100318310);
  Binding.wrappedValue.getter(&v163);
  v33 = v164;
  if (v164)
  {
    if (v23 == v163 && v164 == v24)
    {
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v33);
      LODWORD(v146) = 1;
    }
    else
    {
      LODWORD(v146) = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v163, v164, 0);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v33);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v24);
    LODWORD(v146) = 0;
  }
  aBlock = a6;
  v158 = a7;
  v159 = a8;
  v160 = a9;
  v163 = v23;
  v164 = v24;
  v39 = swift_bridgeObjectRetain(v24);
  Binding.wrappedValue.setter(&v163, v32, v39);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v40 = type metadata accessor for Logger(0);
  sub_10000D744(v40, (uint64_t)qword_10033FD18);
  swift_bridgeObjectRetain(v24);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.default.getter(v42);
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v44 = 134349056;
    if ((v24 & 0x1000000000000000) != 0)
    {
      v45 = (void **)String.UTF8View._foreignCount()();
    }
    else if ((v24 & 0x2000000000000000) != 0)
    {
      v45 = (void **)(HIBYTE(v24) & 0xF);
    }
    else
    {
      v45 = (void **)(v23 & 0xFFFFFFFFFFFFLL);
    }
    aBlock = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v158, v44 + 4, v44 + 12);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Phone number: Text length == %{public}ld", v44, 0xCu);
    swift_slowDealloc(v44, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease(v24);
  }
  v47 = sub_10011D0EC(v23, v24);
  v48 = v46;
  v163 = v47;
  v164 = v46;
  if ((v23 != v47 || v24 != v46) && (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v47, v46, 0) & 1) == 0)
  {
    v49 = qword_1003158B0;
    swift_bridgeObjectRetain(v48);
    if (v49 == -1)
      goto LABEL_32;
    goto LABEL_80;
  }
  swift_bridgeObjectRetain(v48);
  while (1)
  {
    v76 = 0xE000000000000000;
    v155 = 0;
    v156 = 0xE000000000000000;
    v77 = HIBYTE(v48) & 0xF;
    if ((v48 & 0x2000000000000000) == 0)
      v77 = v47 & 0xFFFFFFFFFFFFLL;
    aBlock = (void **)v47;
    v158 = v48;
    v159 = 0;
    v160 = (void *)v77;
    swift_bridgeObjectRetain(v48);
    v78 = String.Iterator.next()();
    object = (void **)v78.value._object;
    if (v78.value._object)
    {
      countAndFlagsBits = v78.value._countAndFlagsBits;
      do
      {
        if ((countAndFlagsBits != 10 || object != (void **)0xE100000000000000)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 10, 0xE100000000000000, 0) & 1) == 0)
        {
          v82._countAndFlagsBits = countAndFlagsBits;
          v82._object = object;
          String.append(_:)(v82);
        }
        swift_bridgeObjectRelease(object);
        v81 = String.Iterator.next()();
        countAndFlagsBits = v81.value._countAndFlagsBits;
        object = (void **)v81.value._object;
      }
      while (v81.value._object);
      object = (void **)v155;
      v76 = v156;
    }
    swift_bridgeObjectRelease(v158);
    aBlock = object;
    v158 = v76;
    v83 = String.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
    if (v47 == v83 && v48 == v84)
    {
      swift_bridgeObjectRelease_n(v48, 2);
    }
    else
    {
      v86 = v83;
      v87 = v84;
      v88 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v48, v83, v84, 0);
      swift_bridgeObjectRelease(v48);
      if ((v88 & 1) != 0)
      {
        swift_bridgeObjectRelease(v87);
      }
      else
      {
        swift_bridgeObjectRelease(v164);
        if (qword_1003158B0 != -1)
          swift_once(&qword_1003158B0, sub_1000D9854);
        sub_10000D744(v40, (uint64_t)qword_10033FEC8);
        sub_100030F30((uint64_t *)a4);
        v89 = sub_100030F30((uint64_t *)a4);
        v90 = Logger.logObject.getter(v89);
        v91 = static os_log_type_t.default.getter(v90);
        if (os_log_type_enabled(v90, v91))
        {
          v92 = (uint8_t *)swift_slowAlloc(12, -1);
          v48 = swift_slowAlloc(32, -1);
          aBlock = (void **)v48;
          *(_DWORD *)v92 = 136446210;
          v145 = v40;
          v93 = sub_1000AD18C();
          v95 = v94;
          v155 = sub_100172BEC(v93, v94, (uint64_t *)&aBlock);
          v40 = v145;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156, v92 + 4, v92 + 12);
          swift_bridgeObjectRelease(v95);
          sub_100030FF0((uint64_t *)a4);
          sub_100030FF0((uint64_t *)a4);
          _os_log_impl((void *)&_mh_execute_header, v90, v91, "[%{public}s] Phone number: Return symbol entered", v92, 0xCu);
          swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v48, -1, -1);
          swift_slowDealloc(v92, -1, -1);
        }
        else
        {
          sub_100030FF0((uint64_t *)a4);
          sub_100030FF0((uint64_t *)a4);
        }

        if ((v146 & 1) == 0)
        {
          sub_10000D75C();
          v146 = static OS_dispatch_queue.main.getter(v96);
          v97 = swift_allocObject(&unk_1002F12B0, 32, 7);
          *(_QWORD *)(v97 + 16) = a10;
          *(_QWORD *)(v97 + 24) = a11;
          v161 = sub_10002BF7C;
          v162 = (_OWORD *)v97;
          aBlock = _NSConcreteStackBlock;
          v158 = 1107296256;
          v159 = sub_1001BAACC;
          v160 = &unk_1002F12C8;
          v98 = _Block_copy(&aBlock);
          v99 = v162;
          swift_retain(a11);
          swift_release(v99);
          v48 = (unint64_t)v149;
          static DispatchQoS.unspecified.getter(v100);
          aBlock = (void **)_swiftEmptyArrayStorage;
          v101 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v102 = v40;
          v103 = sub_100003DB8((uint64_t *)&unk_1003178D0);
          v104 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
          v105 = v152;
          v106 = v103;
          v107 = v154;
          dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v106, v104, v154, v101);
          v108 = (void *)v146;
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v48, v105, v98);
          _Block_release(v98);

          v109 = v107;
          v40 = v102;
          (*(void (**)(char *, uint64_t))(v153 + 8))(v105, v109);
          (*(void (**)(unint64_t, uint64_t))(v150 + 8))(v48, v151);
        }
        v163 = v86;
        v164 = v87;
      }
    }
    v110 = v163;
    v111 = v164;
    swift_bridgeObjectRetain(v164);
    v112 = sub_100100D88(v110, v111);
    v114 = v113;
    swift_bridgeObjectRelease(v111);
    if (!v114)
    {
      v47 = 15;
      v115 = v148;
      goto LABEL_69;
    }
    if (v112 == 43 && v114 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease(0xE100000000000000);
      v115 = v148;
LABEL_67:
      v47 = 16;
      goto LABEL_69;
    }
    v116 = _stringCompareWithSmolCheck(_:_:expecting:)(v112, v114, 43, 0xE100000000000000, 0);
    swift_bridgeObjectRelease(v114);
    v115 = v148;
    if ((v116 & 1) != 0)
      goto LABEL_67;
    v47 = 15;
LABEL_69:
    swift_bridgeObjectRetain(v111);
    v117 = String.count.getter(v110, v111);
    swift_bridgeObjectRelease(v111);
    if (v47 >= v117)
      goto LABEL_77;
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    sub_10000D744(v40, (uint64_t)qword_10033FEC8);
    sub_100030F30((uint64_t *)a4);
    v118 = sub_100030F30((uint64_t *)a4);
    v119 = Logger.logObject.getter(v118);
    v120 = static os_log_type_t.default.getter(v119);
    if (os_log_type_enabled(v119, v120))
    {
      v121 = (uint8_t *)swift_slowAlloc(12, -1);
      v122 = (void **)swift_slowAlloc(32, -1);
      aBlock = v122;
      *(_DWORD *)v121 = 136446210;
      v123 = sub_1000AD18C();
      v125 = v124;
      v155 = sub_100172BEC(v123, v124, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156, v121 + 4, v121 + 12);
      swift_bridgeObjectRelease(v125);
      sub_100030FF0((uint64_t *)a4);
      sub_100030FF0((uint64_t *)a4);
      _os_log_impl((void *)&_mh_execute_header, v119, v120, "[%{public}s] Phone number: Entered text is over the limit", v121, 0xCu);
      swift_arrayDestroy(v122, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v122, -1, -1);
      swift_slowDealloc(v121, -1, -1);
    }
    else
    {
      sub_100030FF0((uint64_t *)a4);
      sub_100030FF0((uint64_t *)a4);
    }

    sub_10000D75C();
    v127 = (void *)static OS_dispatch_queue.main.getter(v126);
    v128 = (_OWORD *)swift_allocObject(&unk_1002F1300, 160, 7);
    v129 = *(_OWORD *)(a4 + 112);
    v128[7] = *(_OWORD *)(a4 + 96);
    v128[8] = v129;
    v128[9] = *(_OWORD *)(a4 + 128);
    v130 = *(_OWORD *)(a4 + 48);
    v128[3] = *(_OWORD *)(a4 + 32);
    v128[4] = v130;
    v131 = *(_OWORD *)(a4 + 80);
    v128[5] = *(_OWORD *)(a4 + 64);
    v128[6] = v131;
    v132 = *(_OWORD *)(a4 + 16);
    v128[1] = *(_OWORD *)a4;
    v128[2] = v132;
    v161 = sub_10002C024;
    v162 = v128;
    aBlock = _NSConcreteStackBlock;
    v158 = 1107296256;
    v159 = sub_1001BAACC;
    v160 = &unk_1002F1318;
    v133 = _Block_copy(&aBlock);
    v134 = v162;
    sub_100030F30((uint64_t *)a4);
    swift_release(v134);
    v40 = (uint64_t)v149;
    static DispatchQoS.unspecified.getter(v135);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v136 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v137 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v138 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
    v139 = v152;
    v140 = v137;
    v141 = v154;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v140, v138, v154, v136);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v40, v139, v133);
    _Block_release(v133);

    (*(void (**)(char *, uint64_t))(v153 + 8))(v139, v141);
    (*(void (**)(uint64_t, uint64_t))(v150 + 8))(v40, v151);
    v142 = v163;
    v143 = v164;
    swift_bridgeObjectRetain(v164);
    v144 = String.count.getter(v142, v143);
    swift_bridgeObjectRelease(v143);
    if (!__OFSUB__(v144, v47))
      break;
    __break(1u);
LABEL_80:
    swift_once(&qword_1003158B0, sub_1000D9854);
LABEL_32:
    sub_10000D744(v40, (uint64_t)qword_10033FEC8);
    sub_100030F30((uint64_t *)a4);
    v50 = sub_100030F30((uint64_t *)a4);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.default.getter(v51);
    v53 = os_log_type_enabled(v51, v52);
    v145 = v40;
    if (v53)
    {
      v54 = (uint8_t *)swift_slowAlloc(12, -1);
      v55 = (void **)swift_slowAlloc(32, -1);
      aBlock = v55;
      *(_DWORD *)v54 = 136446210;
      v56 = sub_1000AD18C();
      v58 = v57;
      v155 = sub_100172BEC(v56, v57, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease(v58);
      sub_100030FF0((uint64_t *)a4);
      sub_100030FF0((uint64_t *)a4);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "[%{public}s] Phone number: Disallowed character entered", v54, 0xCu);
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v54, -1, -1);
    }
    else
    {
      sub_100030FF0((uint64_t *)a4);
      sub_100030FF0((uint64_t *)a4);
    }

    sub_10000D75C();
    v60 = (void *)static OS_dispatch_queue.main.getter(v59);
    v61 = (_OWORD *)swift_allocObject(&unk_1002F1260, 160, 7);
    v62 = *(_OWORD *)(a4 + 112);
    v61[7] = *(_OWORD *)(a4 + 96);
    v61[8] = v62;
    v61[9] = *(_OWORD *)(a4 + 128);
    v63 = *(_OWORD *)(a4 + 48);
    v61[3] = *(_OWORD *)(a4 + 32);
    v61[4] = v63;
    v64 = *(_OWORD *)(a4 + 80);
    v61[5] = *(_OWORD *)(a4 + 64);
    v61[6] = v64;
    v65 = *(_OWORD *)(a4 + 16);
    v61[1] = *(_OWORD *)a4;
    v61[2] = v65;
    v161 = sub_10002BF24;
    v162 = v61;
    aBlock = _NSConcreteStackBlock;
    v158 = 1107296256;
    v159 = sub_1001BAACC;
    v160 = &unk_1002F1278;
    v66 = _Block_copy(&aBlock);
    v67 = v162;
    sub_100030F30((uint64_t *)a4);
    swift_release(v67);
    v68 = v149;
    static DispatchQoS.unspecified.getter(v69);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v70 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v71 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v72 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
    v73 = v152;
    v74 = v71;
    v75 = v154;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v74, v72, v154, v70);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v68, v73, v66);
    _Block_release(v66);

    (*(void (**)(char *, uint64_t))(v153 + 8))(v73, v75);
    (*(void (**)(char *, uint64_t))(v150 + 8))(v68, v151);
    v40 = v145;
  }
  sub_10011CD88(v144 - v47);
  v110 = v163;
  v111 = v164;
  v115 = v148;
LABEL_77:
  v160 = &type metadata for String;
  aBlock = (void **)v110;
  v158 = v111;
  sub_1000B35F8(v115, (uint64_t)&aBlock);
  sub_10004B678((uint64_t)&aBlock);
}

unint64_t sub_10011CD88(unint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v2 = v1[1];
      if ((v2 & 0x2000000000000000) != 0)
        v3 = HIBYTE(v2) & 0xF;
      else
        v3 = *v1 & 0xFFFFFFFFFFFFLL;
      v4 = 7;
      if (((v2 >> 60) & ((*v1 & 0x800000000000000) == 0)) != 0)
        v4 = 11;
      result = String.index(_:offsetBy:limitedBy:)(v4 | (v3 << 16), -(uint64_t)result, 15);
      if ((v5 & 1) != 0)
        goto LABEL_14;
      if (4 * v3 >= result >> 14)
        return String.removeSubrange(_:)();
    }
    __break(1u);
LABEL_14:
    __break(1u);
  }
  return result;
}

uint64_t sub_10011CE24@<X0>(uint64_t a1@<X8>)
{
  return sub_10011B70C(a1);
}

void sub_10011CE78()
{
  uint64_t v0;

  sub_10011B9F8(v0 + 16);
}

uint64_t sub_10011CE84()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  _OWORD v4[3];
  uint64_t v5;

  v1 = *(_OWORD *)(v0 + 112);
  v4[1] = *(_OWORD *)(v0 + 96);
  v4[2] = v1;
  v5 = *(_QWORD *)(v0 + 128);
  v4[0] = xmmword_1002570F0;
  v2 = sub_100003DB8(&qword_100318250);
  return FocusState.wrappedValue.setter(v4, v2);
}

uint64_t sub_10011CEDC()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  swift_release(v0[11]);
  swift_release(v0[12]);
  swift_release(v0[14]);
  swift_bridgeObjectRelease(v0[16]);
  swift_release(v0[17]);
  swift_bridgeObjectRelease(v0[19]);
  swift_bridgeObjectRelease(v0[21]);
  swift_release(v0[22]);
  return swift_deallocObject(v0, 184, 7);
}

void sub_10011CF60(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10011BDBC(*(_QWORD *)(v1 + 32), v1 + 40, a1);
}

uint64_t sub_10011CF70()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  swift_release(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  swift_release(v0[16]);
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[20]);
  swift_release(v0[21]);
  swift_release(v0[22]);
  swift_release(v0[23]);
  swift_release(v0[24]);
  swift_bridgeObjectRelease(v0[26]);
  swift_release(v0[28]);
  return swift_deallocObject(v0, 232, 7);
}

void sub_10011D014(uint64_t *a1)
{
  uint64_t v1;

  sub_10011BE70(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + 32, *(_QWORD *)(v1 + 176), *(void ***)(v1 + 184), *(_QWORD *)(v1 + 192), *(uint64_t (**)(uint64_t))(v1 + 200), *(void **)(v1 + 208), *(_QWORD *)(v1 + 216), *(_QWORD *)(v1 + 224));
}

unint64_t sub_10011D050(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)(15, result, v5);
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t sub_10011D0EC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  __n128 v4;
  Swift::String_optional v5;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v8;
  void *v9;
  Swift::String_optional v10;
  Swift::String_optional v11;
  uint64_t v12;
  void *v13;
  Swift::String_optional v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  Swift::String v36;
  void *v37;
  Swift::String_optional v38;
  void *v39;
  uint64_t v40;
  Swift::String_optional v41;
  Swift::String v42;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;

  v2 = 0xE000000000000000;
  v48 = 0;
  v49 = 0xE000000000000000;
  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  v44 = a1;
  v45 = a2;
  v46 = 0;
  v47 = v3;
  swift_bridgeObjectRetain(a2);
  v5 = String.Iterator.next()();
  object = v5.value._object;
  if (v5.value._object)
  {
    countAndFlagsBits = v5.value._countAndFlagsBits;
    while (1)
    {
      swift_bridgeObjectRetain_n(object, 2, v4);
      v11 = String.Iterator.next()();
      if (!v11.value._object)
      {
LABEL_5:
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(object);
        v8._countAndFlagsBits = countAndFlagsBits;
        v8._object = object;
        String.append(_:)(v8);
        v9 = object;
        goto LABEL_6;
      }
      v12 = v11.value._countAndFlagsBits;
      v13 = v11.value._object;
      while ((Character.isNumber.getter(v12) & 1) != 0 || v12 == 43 && v13 == (void *)0xE100000000000000)
      {
        swift_bridgeObjectRelease(v13);
LABEL_10:
        v14 = String.Iterator.next()();
        v12 = v14.value._countAndFlagsBits;
        v13 = v14.value._object;
        if (!v14.value._object)
          goto LABEL_5;
      }
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, 43, 0xE100000000000000, 0);
      swift_bridgeObjectRelease(v13);
      if ((v15 & 1) != 0)
        goto LABEL_10;
      swift_bridgeObjectRelease_n(object, 2);
      v9 = object;
LABEL_6:
      swift_bridgeObjectRelease(v9);
      v10 = String.Iterator.next()();
      countAndFlagsBits = v10.value._countAndFlagsBits;
      object = v10.value._object;
      if (!v10.value._object)
      {
        object = v48;
        v2 = v49;
        break;
      }
    }
  }
  swift_bridgeObjectRelease(v45);
  v44 = (uint64_t)object;
  v45 = v2;
  v16 = String.init<A>(_:)(&v44, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v18 = v16;
  v19 = v17;
  if ((v17 & 0x2000000000000000) != 0)
    v20 = HIBYTE(v17) & 0xF;
  else
    v20 = v16 & 0xFFFFFFFFFFFFLL;
  if (v20)
  {
    swift_bridgeObjectRetain(v17);
    v21 = sub_100100D88(v18, v19);
    v23 = v22;
    swift_bridgeObjectRelease(v19);
    if (v23)
    {
      if (v21 == 43 && v23 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease(0xE100000000000000);
LABEL_26:
        v25 = sub_10011D050(1uLL, v18, v19);
        v27 = v26;
        v29 = v28;
        v31 = v30;
        v32 = swift_bridgeObjectRelease(v19);
        v33 = Substring.filter(_:)(sub_10011BD94, 0, v25, v27, v29, v31, v32);
        v35 = v34;
        swift_bridgeObjectRelease(v31);
        v44 = v33;
        v45 = v35;
        v36._countAndFlagsBits = String.init<A>(_:)(&v44, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
        v37 = v36._object;
        v44 = 43;
        v45 = 0xE100000000000000;
        String.append(_:)(v36);
        swift_bridgeObjectRelease(v37);
        return v44;
      }
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, 43, 0xE100000000000000, 0);
      swift_bridgeObjectRelease(v23);
      if ((v24 & 1) != 0)
        goto LABEL_26;
    }
    v44 = v18;
    v45 = v19;
    v46 = 0;
    v47 = v20;
    v38 = String.Iterator.next()();
    v39 = v38.value._object;
    if (v38.value._object)
    {
      v40 = v38.value._countAndFlagsBits;
      do
      {
        if ((Character.isNumber.getter(v40) & 1) != 0)
        {
          v42._countAndFlagsBits = v40;
          v42._object = v39;
          String.append(_:)(v42);
        }
        swift_bridgeObjectRelease(v39);
        v41 = String.Iterator.next()();
        v40 = v41.value._countAndFlagsBits;
        v39 = v41.value._object;
      }
      while (v41.value._object);
      v39 = 0;
    }
    swift_bridgeObjectRelease(v45);
    v44 = (uint64_t)v39;
    v45 = 0xE000000000000000;
    return String.init<A>(_:)(&v44, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  }
  return v18;
}

double sub_10011D468(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_10011D478(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011D480()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011D4A8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[11]);
  swift_bridgeObjectRelease(v0[13]);
  swift_release(v0[14]);
  swift_bridgeObjectRelease(v0[16]);
  swift_bridgeObjectRelease(v0[18]);
  swift_release(v0[19]);
  return swift_deallocObject(v0, 160, 7);
}

unint64_t sub_10011D520()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003206C0;
  if (!qword_1003206C0)
  {
    v1 = sub_100007FAC(&qword_1003206C8);
    sub_1000084FC(&qword_1003206D0, &qword_1003206D8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003206C0);
  }
  return result;
}

id sub_10011D5B4()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  objc_class *v12;
  uint64_t v14;
  uint64_t v15;
  objc_super v16;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FD18);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v15 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = v2;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v14 = sub_100172BEC(v9, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] deinit", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v12 = (objc_class *)type metadata accessor for MedicalIDAgent();
  v16.receiver = v2;
  v16.super_class = v12;
  return objc_msgSendSuper2(&v16, "dealloc");
}

uint64_t type metadata accessor for MedicalIDAgent()
{
  return objc_opt_self(_TtC8SOSBuddy14MedicalIDAgent);
}

void *sub_10011D868(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_data, a1, 33, 0);
  return &j__swift_endAccess;
}

void sub_10011D8AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t, __n128);
  int v11;
  __n128 v12;
  _BYTE v13[24];
  _BYTE v14[24];

  v3 = sub_100003DB8(&qword_100320A80);
  __chkstk_darwin(v3, v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = v1 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentLinkState;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentLinkState, v14, 33, 0);
  sub_100124070(a1, v7);
  swift_endAccess(v14);
  v8 = v1 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_data;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_data, v14, 0, 0);
  sub_10000B234(v8, (uint64_t)v6, &qword_100320A80);
  v9 = _s8SOSBuddy4DataVMa_2(0);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v9 - 8) + 48);
  v11 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v10)(v6, 1, v9);
  sub_100007FF0((uint64_t)v6, &qword_100320A80);
  if (v11 != 1)
  {
    v12 = swift_beginAccess(v8, v13, 33, 0);
    if (v10(v8, 1, v9, v12) == 1)
    {
      __break(1u);
    }
    else
    {
      sub_10011DA08(a1);
      swift_endAccess(v13);
    }
  }
}

uint64_t sub_10011DA08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v2 = sub_100003DB8(&qword_1003180C8);
  v4 = __chkstk_darwin(v2, v3);
  v51 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v51 - v8;
  v11 = __chkstk_darwin(v7, v10);
  v13 = (char *)&v51 - v12;
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v51 - v15;
  v17 = sub_100003DB8((uint64_t *)&unk_10031B230);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LinkState(0);
  v22 = *(_QWORD *)(v21 - 8);
  v24 = __chkstk_darwin(v21, v23);
  v26 = (char *)&v51 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v27);
  v29 = (char *)&v51 - v28;
  sub_10000B234(a1, (uint64_t)v20, (uint64_t *)&unk_10031B230);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
    return sub_100007FF0((uint64_t)v20, (uint64_t *)&unk_10031B230);
  sub_1000E8D6C((uint64_t)v20, (uint64_t)v29, type metadata accessor for LinkState);
  v31 = v29[1];
  sub_1000E1F30((uint64_t)v29, (uint64_t)v26, type metadata accessor for LinkState);
  if (v31 != 2)
  {
    sub_10000AFFC((uint64_t)v26, type metadata accessor for LinkState);
    v34 = v52;
    goto LABEL_8;
  }
  v32 = v26[2];
  sub_10000AFFC((uint64_t)v26, type metadata accessor for LinkState);
  v33 = v32 == 2;
  v34 = v52;
  if (!v33)
  {
LABEL_8:
    v35 = v34 + *(int *)(_s8SOSBuddy4DataVMa_2(0) + 32);
    sub_10000B234(v35, (uint64_t)v16, &qword_1003180C8);
    v36 = type metadata accessor for DispatchTime(0);
    v37 = *(_QWORD *)(v36 - 8);
    v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48))(v16, 1, v36);
    v39 = sub_100007FF0((uint64_t)v16, &qword_1003180C8);
    if (v38 == 1)
    {
      static DispatchTime.now()(v39);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v13, 0, 1, v36);
      sub_100123FDC((uint64_t)v13, v35, &qword_1003180C8);
    }
  }
  if ((v29[1] & 1) != 0)
  {
    v40 = v34 + *(int *)(_s8SOSBuddy4DataVMa_2(0) + 36);
    sub_10000B234(v40, (uint64_t)v9, &qword_1003180C8);
    v41 = type metadata accessor for DispatchTime(0);
    v42 = *(_QWORD *)(v41 - 8);
    v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48))(v9, 1, v41);
    v44 = sub_100007FF0((uint64_t)v9, &qword_1003180C8);
    if (v43 == 1)
    {
      static DispatchTime.now()(v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v13, 0, 1, v41);
      sub_100123FDC((uint64_t)v13, v40, &qword_1003180C8);
    }
  }
  if ((v29[2] & 1) == 0)
    return sub_10000AFFC((uint64_t)v29, type metadata accessor for LinkState);
  v45 = v34 + *(int *)(_s8SOSBuddy4DataVMa_2(0) + 40);
  v46 = v51;
  sub_10000B234(v45, v51, &qword_1003180C8);
  v47 = type metadata accessor for DispatchTime(0);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47);
  v50 = sub_100007FF0(v46, &qword_1003180C8);
  if (v49 != 1)
    return sub_10000AFFC((uint64_t)v29, type metadata accessor for LinkState);
  static DispatchTime.now()(v50);
  sub_10000AFFC((uint64_t)v29, type metadata accessor for LinkState);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v13, 0, 1, v47);
  return sub_100123FDC((uint64_t)v13, v45, &qword_1003180C8);
}

void sub_10011DE1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t, __n128);
  int v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _BYTE v29[24];
  _BYTE v30[24];

  v3 = sub_100003DB8(&qword_1003180C8);
  v5 = __chkstk_darwin(v3, v4);
  v7 = &v29[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5, v8);
  v10 = &v29[-v9];
  v11 = sub_100003DB8(&qword_100320A80);
  __chkstk_darwin(v11, v12);
  v14 = &v29[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = *(_QWORD *)(a1 + 200);
  v16 = OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentSuggestedActions;
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentSuggestedActions);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentSuggestedActions) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v17);
  v18 = v1 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_data;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_data, v30, 0, 0);
  sub_10000B234(v18, (uint64_t)v14, &qword_100320A80);
  v19 = _s8SOSBuddy4DataVMa_2(0);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v19 - 8) + 48);
  v21 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v20)(v14, 1, v19);
  sub_100007FF0((uint64_t)v14, &qword_100320A80);
  if (v21 != 1)
  {
    v22 = *(_QWORD *)(v1 + v16);
    v23 = swift_beginAccess(v18, v29, 33, 0);
    if (v20(v18, 1, v19, v23) == 1)
    {
      __break(1u);
    }
    else
    {
      if (sub_100067058(0, v22))
      {
        v24 = v18 + *(int *)(v19 + 28);
        sub_10000B234(v24, (uint64_t)v10, &qword_1003180C8);
        v25 = type metadata accessor for DispatchTime(0);
        v26 = *(_QWORD *)(v25 - 8);
        v27 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48))(v10, 1, v25);
        swift_bridgeObjectRetain(v22);
        v28 = sub_100007FF0((uint64_t)v10, &qword_1003180C8);
        if (v27 == 1)
        {
          static DispatchTime.now()(v28);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v7, 0, 1, v25);
          sub_100123FDC((uint64_t)v7, v24, &qword_1003180C8);
        }
      }
      else
      {
        swift_bridgeObjectRetain(v22);
      }
      swift_endAccess(v29);
      swift_bridgeObjectRelease(v22);
    }
  }
}

_BYTE *sub_10011E074(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _BYTE *result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];
  _OWORD v35[4];
  __int16 v36;
  _OWORD v37[4];
  __int16 v38;
  char v39;
  _BYTE v40[17];

  v2 = sub_100003DB8(&qword_100320928);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for EmergencyData(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (uint64_t *)((char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v32 - v13;
  v15 = sub_100003DB8(&qword_100320A80);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = _s8SOSBuddy4DataVMa_2(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B458(a1, (uint64_t)v35, &qword_100319FD8);
  if (!*((_QWORD *)&v35[0] + 1)
    || (v37[2] = v35[2],
        v37[3] = v35[3],
        v38 = v36,
        v37[0] = v35[0],
        v37[1] = v35[1],
        sub_10001AE10(v37, &v39),
        result = sub_10001AE10(&v39, v40),
        v40[0] != 5))
  {
    v25 = v32 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_data;
    swift_beginAccess(v32 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_data, v34, 0, 0);
    sub_10000B234(v25, (uint64_t)v18, &qword_100320A80);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
    {
      return (_BYTE *)sub_100007FF0((uint64_t)v18, &qword_100320A80);
    }
    else
    {
      sub_1000E8D6C((uint64_t)v18, (uint64_t)v23, _s8SOSBuddy4DataVMa_2);
      sub_10000B234((uint64_t)&v23[*(int *)(v19 + 20)], (uint64_t)v5, &qword_100320928);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
      {
        sub_100007FF0((uint64_t)v5, &qword_100320928);
      }
      else
      {
        sub_1000E8D6C((uint64_t)v5, (uint64_t)v14, type metadata accessor for EmergencyData);
        if (qword_100315818 != -1)
          swift_once(&qword_100315818, sub_1000D95C0);
        v26 = type metadata accessor for Logger(0);
        sub_10000D744(v26, (uint64_t)qword_10033FD00);
        v27 = sub_1000E1F30((uint64_t)v14, (uint64_t)v11, type metadata accessor for EmergencyData);
        v28 = Logger.logObject.getter(v27);
        v29 = static os_log_type_t.default.getter(v28);
        if (os_log_type_enabled(v28, v29))
        {
          v30 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v30 = 134349056;
          v31 = *v11;
          sub_10000AFFC((uint64_t)v11, type metadata accessor for EmergencyData);
          v33 = v31;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v30 + 4, v30 + 12);
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Emergency conversation ID %{public}llu was not committed, considering start message not ACKed and dropped, finalizing session start event.", v30, 0xCu);
          swift_slowDealloc(v30, -1, -1);
        }
        else
        {
          sub_10000AFFC((uint64_t)v11, type metadata accessor for EmergencyData);
        }

        sub_10000AFFC((uint64_t)v14, type metadata accessor for EmergencyData);
      }
      sub_10012079C();
      return (_BYTE *)sub_10000AFFC((uint64_t)v23, _s8SOSBuddy4DataVMa_2);
    }
  }
  return result;
}

uint64_t sub_10011E444(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, int *);
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, int *, __n128);
  uint64_t v72;
  uint64_t v73;
  uint64_t result;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  char *v84;
  uint8_t *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(char *, uint64_t, int *);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  __int128 v99;
  char v100;
  uint64_t v101[3];
  char v102[31];
  char v103;

  v3 = sub_100003DB8((uint64_t *)&unk_10031B230);
  __chkstk_darwin(v3, v4);
  v87 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8(&qword_1003180C8);
  v8 = __chkstk_darwin(v6, v7);
  v84 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  v86 = (uint64_t)&v84 - v11;
  v12 = (int *)_s8SOSBuddy4DataVMa_2(0);
  v13 = *((_QWORD *)v12 - 1);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for EmergencyData(0);
  v88 = *(_QWORD *)(v92 - 8);
  v18 = __chkstk_darwin(v92, v17);
  v90 = (uint64_t)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  v96 = (uint64_t)&v84 - v21;
  v22 = sub_100003DB8(&qword_100320A80);
  v24 = __chkstk_darwin(v22, v23);
  v91 = (uint64_t)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24, v26);
  v89 = (uint64_t)&v84 - v28;
  __chkstk_darwin(v27, v29);
  v31 = (char *)&v84 - v30;
  v95 = v1;
  v32 = v1 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_data;
  swift_beginAccess(v32, v102, 0, 0);
  v97 = v32;
  sub_10000B234(v32, (uint64_t)v31, &qword_100320A80);
  v93 = v13;
  v33 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  LODWORD(v13) = v33(v31, 1, v12);
  sub_100007FF0((uint64_t)v31, &qword_100320A80);
  v94 = v33;
  if ((_DWORD)v13 == 1)
  {
    if (qword_100315818 != -1)
      swift_once(&qword_100315818, sub_1000D95C0);
    v34 = type metadata accessor for Logger(0);
    sub_10000D744(v34, (uint64_t)qword_10033FD00);
    sub_1000C71A0(a1);
    v35 = sub_1000C71A0(a1);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v101[0] = v39;
      *(_DWORD *)v38 = 136446210;
      v85 = v38 + 4;
      v40 = *(_OWORD *)(a1 + 16);
      v98 = *(__n128 *)a1;
      v99 = v40;
      v100 = *(_BYTE *)(a1 + 32);
      v41 = String.init<A>(describing:)(&v98, &type metadata for EmergencyRequest, v98);
      v43 = v42;
      v98.n128_u64[0] = sub_100172BEC(v41, v42, v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v98.n128_i8[8], v85, v38 + 12);
      swift_bridgeObjectRelease(v43);
      sub_1000C71C8(a1);
      sub_1000C71C8(a1);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Tracking session start for %{public}s", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      v44 = v38;
LABEL_10:
      swift_slowDealloc(v44, -1, -1);
      goto LABEL_12;
    }
  }
  else
  {
    if (qword_100315818 != -1)
      swift_once(&qword_100315818, sub_1000D95C0);
    v45 = type metadata accessor for Logger(0);
    sub_10000D744(v45, (uint64_t)qword_10033FD00);
    sub_1000C71A0(a1);
    v46 = sub_1000C71A0(a1);
    v36 = Logger.logObject.getter(v46);
    v47 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      v101[0] = v49;
      *(_DWORD *)v48 = 136446210;
      v85 = v48 + 4;
      v50 = *(_OWORD *)(a1 + 16);
      v98 = *(__n128 *)a1;
      v99 = v50;
      v100 = *(_BYTE *)(a1 + 32);
      v51 = String.init<A>(describing:)(&v98, &type metadata for EmergencyRequest, v98);
      v53 = v52;
      v98.n128_u64[0] = sub_100172BEC(v51, v52, v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v98.n128_i8[8], v85, v48 + 12);
      swift_bridgeObjectRelease(v53);
      sub_1000C71C8(a1);
      sub_1000C71C8(a1);
      _os_log_impl((void *)&_mh_execute_header, v36, v47, "Resetting tracking session start for %{public}s", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      v44 = v48;
      goto LABEL_10;
    }
  }
  sub_1000C71C8(a1);
  sub_1000C71C8(a1);
LABEL_12:

  v54 = *(_BYTE *)a1;
  v55 = *(_QWORD *)(a1 + 8);
  v103 = *(_BYTE *)(a1 + 33);
  v56 = v92;
  v57 = v96;
  v58 = v96 + *(int *)(v92 + 28);
  v59 = type metadata accessor for DispatchTime(0);
  v85 = *(uint8_t **)(v59 - 8);
  v60 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)v85 + 7);
  v60(v58, 1, 1, v59);
  *(_QWORD *)v57 = v55;
  *(_BYTE *)(v57 + 8) = v54;
  *(_BYTE *)(v57 + 9) = v103;
  *(_BYTE *)(v57 + *(int *)(v56 + 32)) = 0;
  v61 = v57;
  v62 = v90;
  sub_1000E1F30(v61, v90, type metadata accessor for EmergencyData);
  v63 = (uint64_t)&v16[v12[5]];
  v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56);
  v64(v63, 1, 1, v56);
  v16[v12[6]] = 1;
  v60((uint64_t)&v16[v12[7]], 1, 1, v59);
  v60((uint64_t)&v16[v12[8]], 1, 1, v59);
  v60((uint64_t)&v16[v12[9]], 1, 1, v59);
  v65 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v60)(&v16[v12[10]], 1, 1, v59);
  v66 = &v16[v12[11]];
  *((_QWORD *)v66 + 4) = 0;
  *(_OWORD *)v66 = 0u;
  *((_OWORD *)v66 + 1) = 0u;
  v66[40] = 1;
  static DispatchTime.now()(v65);
  sub_100007FF0(v63, &qword_100320928);
  sub_1000E8D6C(v62, v63, type metadata accessor for EmergencyData);
  v64(v63, 0, 1, v56);
  v67 = v89;
  sub_1000E8D6C((uint64_t)v16, v89, _s8SOSBuddy4DataVMa_2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v93 + 56))(v67, 0, 1, v12);
  v68 = v67;
  v69 = v91;
  sub_10000B458(v68, v91, &qword_100320A80);
  v70 = v97;
  swift_beginAccess(v97, &v98, 33, 0);
  sub_100123FDC(v69, v70, &qword_100320A80);
  v71 = (uint64_t (*)(uint64_t, uint64_t, int *, __n128))v94;
  v72 = v95;
  v73 = *(_QWORD *)(v95 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentSuggestedActions);
  result = v94((char *)v70, 1, v12);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    if (sub_100067058(0, v73))
    {
      v75 = v97 + v12[7];
      v76 = v86;
      sub_10000B234(v75, v86, &qword_1003180C8);
      v77 = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t))v85 + 6))(v76, 1, v59);
      swift_bridgeObjectRetain(v73);
      v78 = sub_100007FF0(v76, &qword_1003180C8);
      v79 = (uint64_t)v87;
      if (v77 == 1)
      {
        v80 = (uint64_t)v84;
        static DispatchTime.now()(v78);
        v60(v80, 0, 1, v59);
        sub_100123FDC(v80, v75, &qword_1003180C8);
      }
    }
    else
    {
      swift_bridgeObjectRetain(v73);
      v79 = (uint64_t)v87;
    }
    swift_endAccess(&v98);
    swift_bridgeObjectRelease(v73);
    v81 = v72 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentLinkState;
    swift_beginAccess(v72 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentLinkState, &v98, 0, 0);
    sub_10000B234(v81, v79, (uint64_t *)&unk_10031B230);
    v82 = v97;
    v83 = swift_beginAccess(v97, v101, 33, 0);
    result = v71(v82, 1, v12, v83);
    if ((_DWORD)result != 1)
    {
      sub_10011DA08(v79);
      sub_100007FF0(v79, (uint64_t *)&unk_10031B230);
      swift_endAccess(v101);
      return sub_10000AFFC(v96, type metadata accessor for EmergencyData);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10011ED30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t result;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  char *v79;
  uint8_t *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(char *, uint64_t, int *);
  __int128 v93;
  _OWORD v94[2];
  uint64_t v95[3];
  _BYTE v96[31];
  char v97;

  v3 = sub_100003DB8((uint64_t *)&unk_10031B230);
  __chkstk_darwin(v3, v4);
  v82 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8(&qword_1003180C8);
  v8 = __chkstk_darwin(v6, v7);
  v79 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  v81 = (uint64_t)&v79 - v11;
  v12 = (int *)_s8SOSBuddy4DataVMa_2(0);
  v13 = *((_QWORD *)v12 - 1);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for EmergencyData(0);
  v84 = *(_QWORD *)(v88 - 8);
  v18 = __chkstk_darwin(v88, v17);
  v83 = (uint64_t)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  v91 = (uint64_t)&v79 - v21;
  v22 = sub_100003DB8(&qword_100320A80);
  v24 = __chkstk_darwin(v22, v23);
  v87 = (uint64_t)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24, v26);
  v85 = (uint64_t)&v79 - v28;
  __chkstk_darwin(v27, v29);
  v31 = (char *)&v79 - v30;
  v90 = v1;
  v32 = v1 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_data;
  swift_beginAccess(v32, v96, 0, 0);
  v86 = v32;
  sub_10000B234(v32, (uint64_t)v31, &qword_100320A80);
  v89 = v13;
  v92 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  LODWORD(v13) = v92(v31, 1, v12);
  sub_100007FF0((uint64_t)v31, &qword_100320A80);
  if ((_DWORD)v13 == 1)
  {
    if (qword_100315818 != -1)
      swift_once(&qword_100315818, sub_1000D95C0);
    v33 = type metadata accessor for Logger(0);
    sub_10000D744(v33, (uint64_t)qword_10033FD00);
    sub_100124020(a1);
    v34 = sub_100124020(a1);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(32, -1);
      v95[0] = v38;
      *(_DWORD *)v37 = 136446210;
      v80 = v37 + 4;
      v39 = *(_OWORD *)(a1 + 16);
      v93 = *(_OWORD *)a1;
      v94[0] = v39;
      *(_OWORD *)((char *)v94 + 9) = *(_OWORD *)(a1 + 25);
      v40 = String.init<A>(describing:)(&v93, &type metadata for RoadsideAssistanceRequest, *(__n128 *)((char *)v94 + 9));
      v42 = v41;
      *(_QWORD *)&v93 = sub_100172BEC(v40, v41, v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, (char *)&v93 + 8, v80, v37 + 12);
      swift_bridgeObjectRelease(v42);
      sub_100124048(a1);
      sub_100124048(a1);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Tracking session start for %{public}s", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      v43 = v37;
LABEL_10:
      swift_slowDealloc(v43, -1, -1);
      goto LABEL_12;
    }
  }
  else
  {
    if (qword_100315818 != -1)
      swift_once(&qword_100315818, sub_1000D95C0);
    v44 = type metadata accessor for Logger(0);
    sub_10000D744(v44, (uint64_t)qword_10033FD00);
    sub_100124020(a1);
    v45 = sub_100124020(a1);
    v35 = Logger.logObject.getter(v45);
    v46 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = swift_slowAlloc(32, -1);
      v95[0] = v48;
      *(_DWORD *)v47 = 136446210;
      v80 = v47 + 4;
      v49 = *(_OWORD *)(a1 + 16);
      v93 = *(_OWORD *)a1;
      v94[0] = v49;
      *(_OWORD *)((char *)v94 + 9) = *(_OWORD *)(a1 + 25);
      v50 = String.init<A>(describing:)(&v93, &type metadata for RoadsideAssistanceRequest, *(__n128 *)((char *)v94 + 9));
      v52 = v51;
      *(_QWORD *)&v93 = sub_100172BEC(v50, v51, v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, (char *)&v93 + 8, v80, v47 + 12);
      swift_bridgeObjectRelease(v52);
      sub_100124048(a1);
      sub_100124048(a1);
      _os_log_impl((void *)&_mh_execute_header, v35, v46, "Resetting tracking session start for %{public}s", v47, 0xCu);
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      v43 = v47;
      goto LABEL_10;
    }
  }
  sub_100124048(a1);
  sub_100124048(a1);
LABEL_12:

  v53 = *(_QWORD *)a1;
  v97 = *(_BYTE *)(a1 + 41);
  v54 = v88;
  v55 = v91;
  v56 = v91 + *(int *)(v88 + 28);
  v57 = type metadata accessor for DispatchTime(0);
  v80 = *(uint8_t **)(v57 - 8);
  v58 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)v80 + 7);
  v58(v56, 1, 1, v57);
  *(_QWORD *)v55 = v53;
  *(_BYTE *)(v55 + 8) = 4;
  *(_BYTE *)(v55 + 9) = v97;
  *(_BYTE *)(v55 + *(int *)(v54 + 32)) = 0;
  v59 = v83;
  sub_1000E1F30(v55, v83, type metadata accessor for EmergencyData);
  v60 = (uint64_t)&v16[v12[5]];
  v61 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56);
  v61(v60, 1, 1, v54);
  v16[v12[6]] = 1;
  v58((uint64_t)&v16[v12[7]], 1, 1, v57);
  v58((uint64_t)&v16[v12[8]], 1, 1, v57);
  v58((uint64_t)&v16[v12[9]], 1, 1, v57);
  v62 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v58)(&v16[v12[10]], 1, 1, v57);
  v63 = &v16[v12[11]];
  *((_QWORD *)v63 + 4) = 0;
  *(_OWORD *)v63 = 0u;
  *((_OWORD *)v63 + 1) = 0u;
  v63[40] = 1;
  static DispatchTime.now()(v62);
  sub_100007FF0(v60, &qword_100320928);
  sub_1000E8D6C(v59, v60, type metadata accessor for EmergencyData);
  v61(v60, 0, 1, v54);
  v64 = v85;
  sub_1000E8D6C((uint64_t)v16, v85, _s8SOSBuddy4DataVMa_2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v89 + 56))(v64, 0, 1, v12);
  v65 = v64;
  v66 = v87;
  sub_10000B458(v65, v87, &qword_100320A80);
  v67 = v86;
  swift_beginAccess(v86, &v93, 33, 0);
  sub_100123FDC(v66, v67, &qword_100320A80);
  v68 = v90;
  v69 = *(_QWORD *)(v90 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentSuggestedActions);
  result = v92((char *)v67, 1, v12);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    if (sub_100067058(0, v69))
    {
      v71 = v67 + v12[7];
      v72 = v81;
      sub_10000B234(v71, v81, &qword_1003180C8);
      v73 = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t))v80 + 6))(v72, 1, v57);
      swift_bridgeObjectRetain(v69);
      v74 = sub_100007FF0(v72, &qword_1003180C8);
      v75 = (uint64_t)v82;
      if (v73 == 1)
      {
        v76 = (uint64_t)v79;
        static DispatchTime.now()(v74);
        v58(v76, 0, 1, v57);
        sub_100123FDC(v76, v71, &qword_1003180C8);
      }
    }
    else
    {
      swift_bridgeObjectRetain(v69);
      v75 = (uint64_t)v82;
    }
    swift_endAccess(&v93);
    swift_bridgeObjectRelease(v69);
    v77 = v68 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentLinkState;
    swift_beginAccess(v68 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentLinkState, &v93, 0, 0);
    sub_10000B234(v77, v75, (uint64_t *)&unk_10031B230);
    v78 = swift_beginAccess(v67, v95, 33, 0);
    result = ((uint64_t (*)(uint64_t, uint64_t, int *, __n128))v92)(v67, 1, v12, v78);
    if ((_DWORD)result != 1)
    {
      sub_10011DA08(v75);
      sub_100007FF0(v75, (uint64_t *)&unk_10031B230);
      swift_endAccess(v95);
      return sub_10000AFFC(v91, type metadata accessor for EmergencyData);
    }
  }
  __break(1u);
  return result;
}

void sub_10011F61C(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, int *);
  int v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  const char *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(char *, uint64_t, int *);
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  uint64_t v90;
  uint8_t *v91;
  char *v92;
  uint64_t v93;
  uint64_t (*v94)(char *, uint64_t, int *);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100[3];
  uint64_t v101;
  _QWORD v102[2];
  char v103[24];

  v95 = a2;
  LODWORD(v94) = a1;
  v3 = sub_100003DB8((uint64_t *)&unk_10031B230);
  __chkstk_darwin(v3, v4);
  v99 = (uint64_t)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8(&qword_1003180C8);
  v8 = __chkstk_darwin(v6, v7);
  v92 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  v93 = (uint64_t)&v91 - v11;
  v12 = sub_100003DB8(&qword_100320928);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003DB8(&qword_100320A80);
  v18 = __chkstk_darwin(v16, v17);
  v97 = (uint64_t)&v91 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18, v20);
  v23 = (char *)&v91 - v22;
  v25 = __chkstk_darwin(v21, v24);
  v27 = (char *)&v91 - v26;
  __chkstk_darwin(v25, v28);
  v30 = (char *)&v91 - v29;
  v98 = v2;
  v31 = v2 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_data;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_data, v103, 0, 0);
  sub_10000B234(v31, (uint64_t)v30, &qword_100320A80);
  v32 = (int *)_s8SOSBuddy4DataVMa_2(0);
  v33 = *((_QWORD *)v32 - 1);
  v34 = *(uint64_t (**)(char *, uint64_t, int *))(v33 + 48);
  v35 = v34(v30, 1, v32);
  sub_100007FF0((uint64_t)v30, &qword_100320A80);
  v96 = v33;
  if (v35 != 1)
  {
    sub_10000B234(v31, (uint64_t)v27, &qword_100320A80);
    if (v34(v27, 1, v32) == 1)
      goto LABEL_27;
    sub_10000B234((uint64_t)&v27[v32[5]], (uint64_t)v15, &qword_100320928);
    v50 = type metadata accessor for EmergencyData(0);
    v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 48))(v15, 1, v50);
    sub_100007FF0((uint64_t)v15, &qword_100320928);
    sub_10000AFFC((uint64_t)v27, _s8SOSBuddy4DataVMa_2);
    if (v51 == 1)
    {
      v37 = v95;
      if (qword_100315818 != -1)
        swift_once(&qword_100315818, sub_1000D95C0);
      v52 = type metadata accessor for Logger(0);
      sub_10000D744(v52, (uint64_t)qword_10033FD00);
      v54 = swift_retain_n(v37, v53);
      v40 = Logger.logObject.getter(v54);
      v41 = static os_log_type_t.default.getter(v40);
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(12, -1);
        v43 = swift_slowAlloc(32, -1);
        *(_DWORD *)v42 = 136446210;
        v100[0] = v43;
        v91 = v42 + 4;
        LOBYTE(v101) = v94 & 1;
        v102[0] = v37;
        v55 = swift_retain(v37);
        v56 = String.init<A>(describing:)(&v101, &type metadata for DeepLinkHandler.FindMyRequestContext, v55);
        v94 = v34;
        v58 = v57;
        v101 = sub_100172BEC(v56, v57, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v91, v42 + 12);
        swift_release_n(v37);
        v59 = v58;
        v34 = v94;
        swift_bridgeObjectRelease(v59);
        v49 = "Resetting tracking FindMy start for %{public}s";
        goto LABEL_16;
      }
    }
    else
    {
      v37 = v95;
      if (qword_100315818 != -1)
        swift_once(&qword_100315818, sub_1000D95C0);
      v60 = type metadata accessor for Logger(0);
      sub_10000D744(v60, (uint64_t)qword_10033FD00);
      v62 = swift_retain_n(v37, v61);
      v40 = Logger.logObject.getter(v62);
      v41 = static os_log_type_t.default.getter(v40);
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(12, -1);
        v43 = swift_slowAlloc(32, -1);
        *(_DWORD *)v42 = 136446210;
        v100[0] = v43;
        v91 = v42 + 4;
        LOBYTE(v101) = v94 & 1;
        v102[0] = v37;
        v63 = swift_retain(v37);
        v64 = String.init<A>(describing:)(&v101, &type metadata for DeepLinkHandler.FindMyRequestContext, v63);
        v94 = v34;
        v66 = v65;
        v101 = sub_100172BEC(v64, v65, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v91, v42 + 12);
        swift_release_n(v37);
        v67 = v66;
        v34 = v94;
        swift_bridgeObjectRelease(v67);
        v49 = "Session is already in progress, ignoring FindMy start for %{public}s";
        goto LABEL_16;
      }
    }
LABEL_17:

    swift_release_n(v37);
    goto LABEL_18;
  }
  if (qword_100315818 != -1)
    swift_once(&qword_100315818, sub_1000D95C0);
  v36 = type metadata accessor for Logger(0);
  sub_10000D744(v36, (uint64_t)qword_10033FD00);
  v37 = v95;
  v39 = swift_retain_n(v95, v38);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter(v40);
  if (!os_log_type_enabled(v40, v41))
    goto LABEL_17;
  v42 = (uint8_t *)swift_slowAlloc(12, -1);
  v43 = swift_slowAlloc(32, -1);
  *(_DWORD *)v42 = 136446210;
  v100[0] = v43;
  v91 = v42 + 4;
  LOBYTE(v101) = v94 & 1;
  v102[0] = v37;
  v44 = swift_retain(v37);
  v45 = String.init<A>(describing:)(&v101, &type metadata for DeepLinkHandler.FindMyRequestContext, v44);
  v94 = v34;
  v47 = v46;
  v101 = sub_100172BEC(v45, v46, v100);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v91, v42 + 12);
  swift_release_n(v37);
  v48 = v47;
  v34 = v94;
  swift_bridgeObjectRelease(v48);
  v49 = "Tracking FindMy start for %{public}s";
LABEL_16:
  _os_log_impl((void *)&_mh_execute_header, v40, v41, v49, v42, 0xCu);
  swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v43, -1, -1);
  swift_slowDealloc(v42, -1, -1);

LABEL_18:
  v68 = &v23[v32[5]];
  v69 = type metadata accessor for EmergencyData(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v68, 1, 1, v69);
  v70 = v32[6];
  v71 = &v23[v32[7]];
  v72 = type metadata accessor for DispatchTime(0);
  v73 = *(_QWORD *)(v72 - 8);
  v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v73 + 56);
  v74(v71, 1, 1, v72);
  v74(&v23[v32[8]], 1, 1, v72);
  v74(&v23[v32[9]], 1, 1, v72);
  v75 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v74)(&v23[v32[10]], 1, 1, v72);
  v76 = &v23[v32[11]];
  *((_QWORD *)v76 + 4) = 0;
  *(_OWORD *)v76 = 0u;
  *((_OWORD *)v76 + 1) = 0u;
  v76[40] = 1;
  static DispatchTime.now()(v75);
  v23[v70] = 0;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v96 + 56))(v23, 0, 1, v32);
  v77 = v97;
  sub_10000B458((uint64_t)v23, v97, &qword_100320A80);
  swift_beginAccess(v31, &v101, 33, 0);
  sub_100123FDC(v77, v31, &qword_100320A80);
  v78 = v98;
  v79 = *(_QWORD *)(v98 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentSuggestedActions);
  if (v34((char *)v31, 1, v32) == 1)
  {
    __break(1u);
  }
  else
  {
    if (sub_100067058(0, v79))
    {
      v80 = v31 + v32[7];
      v81 = v31;
      v82 = v34;
      v83 = v93;
      sub_10000B234(v80, v93, &qword_1003180C8);
      v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v83, 1, v72);
      swift_bridgeObjectRetain(v79);
      v85 = v83;
      v34 = v82;
      v31 = v81;
      v86 = sub_100007FF0(v85, &qword_1003180C8);
      if (v84 == 1)
      {
        v87 = (uint64_t)v92;
        static DispatchTime.now()(v86);
        v74((char *)v87, 0, 1, v72);
        sub_100123FDC(v87, v80, &qword_1003180C8);
      }
    }
    else
    {
      swift_bridgeObjectRetain(v79);
    }
    swift_endAccess(&v101);
    swift_bridgeObjectRelease(v79);
    v88 = v78 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentLinkState;
    swift_beginAccess(v78 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentLinkState, &v101, 0, 0);
    sub_10000B234(v88, v99, (uint64_t *)&unk_10031B230);
    v89 = swift_beginAccess(v31, v100, 33, 0);
    if (((unsigned int (*)(uint64_t, uint64_t, int *, __n128))v34)(v31, 1, v32, v89) != 1)
    {
      v90 = v99;
      sub_10011DA08(v99);
      sub_100007FF0(v90, (uint64_t *)&unk_10031B230);
      swift_endAccess(v100);
      return;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
}

void sub_10011FF60(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[16];
  char v58[24];
  uint64_t v59;
  uint64_t v60;
  char v61;

  v53 = a1;
  v2 = sub_100003DB8(&qword_100320A80);
  v4 = __chkstk_darwin(v2, v3);
  v52 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v47 - v7;
  v9 = sub_100003DB8(&qword_100320928);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for EmergencyData(0);
  v13 = *(_QWORD *)(v55 - 8);
  v15 = __chkstk_darwin(v55, v14);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  v20 = (_QWORD **)((char *)&v47 - v19);
  v54 = v1;
  v21 = (uint64_t)v1 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_data;
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_data, v58, 1, 0);
  sub_10000B234(v21, (uint64_t)v8, &qword_100320A80);
  v22 = _s8SOSBuddy4DataVMa_2(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v24(v8, 1, v22))
  {
    sub_100007FF0((uint64_t)v8, &qword_100320A80);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v12, 1, 1, v55);
LABEL_4:
    sub_100007FF0((uint64_t)v12, &qword_100320928);
    return;
  }
  v48 = v23;
  v49 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v24;
  v47 = v17;
  v50 = v21;
  v51 = v20;
  sub_10000B234((uint64_t)&v8[*(int *)(v22 + 20)], (uint64_t)v12, &qword_100320928);
  sub_100007FF0((uint64_t)v8, &qword_100320A80);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v26 = v55;
  if (v25(v12, 1, v55) == 1)
    goto LABEL_4;
  v27 = v51;
  sub_1000E8D6C((uint64_t)v12, (uint64_t)v51, type metadata accessor for EmergencyData);
  sub_100066F60(v53, (uint64_t)&v59);
  if ((v61 & 0x80000000) == 0)
  {
    v28 = v60;
    v29 = v49;
    if ((v60 & 0x8000000000000000) == 0)
      goto LABEL_7;
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
    goto LABEL_21;
  }
  v61 &= ~0x80u;
  v28 = v59;
  v29 = v49;
  if (v59 < 0)
    goto LABEL_20;
LABEL_7:
  if (v28 != *v27)
  {
    if (qword_100315818 != -1)
      swift_once(&qword_100315818, sub_1000D95C0);
    v39 = type metadata accessor for Logger(0);
    sub_10000D744(v39, (uint64_t)qword_10033FD00);
    v20 = v47;
    v40 = sub_1000E1F30((uint64_t)v27, (uint64_t)v47, type metadata accessor for EmergencyData);
    v1 = Logger.logObject.getter(v40);
    v41 = static os_log_type_t.default.getter(v1);
    if (os_log_type_enabled(v1, v41))
    {
      v42 = swift_slowAlloc(22, -1);
      *(_DWORD *)v42 = 134349312;
      v43 = *v20;
      sub_10000AFFC((uint64_t)v20, type metadata accessor for EmergencyData);
      v56 = v43;
      v27 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v42 + 4, v42 + 12);
      *(_WORD *)(v42 + 12) = 2050;
      v56 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v42 + 14, v42 + 22);
      _os_log_impl((void *)&_mh_execute_header, v1, v41, "Conversation ID for the pending start session %{public}llu does not match the current one %{public}llu, resetting.", (uint8_t *)v42, 0x16u);
      swift_slowDealloc(v42, -1, -1);
LABEL_22:
      v44 = (uint64_t)v52;
      v45 = v48;

      sub_10000AFFC((uint64_t)v27, type metadata accessor for EmergencyData);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v44, 1, 1, v22);
      v46 = v50;
      swift_beginAccess(v50, &v56, 33, 0);
      sub_100123FDC(v44, v46, &qword_100320A80);
      swift_endAccess(&v56);
      return;
    }
LABEL_21:
    sub_10000AFFC((uint64_t)v20, type metadata accessor for EmergencyData);
    goto LABEL_22;
  }
  if (qword_100315818 != -1)
    swift_once(&qword_100315818, sub_1000D95C0);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_10000D744(v30, (uint64_t)qword_10033FD00);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = v22;
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v35 = 134349056;
    v56 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v35 + 4, v35 + 12);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Conversation ID %{public}llu is committed, considering start message ACKed, finalizing session start event.", v35, 0xCu);
    v36 = v35;
    v22 = v34;
    swift_slowDealloc(v36, -1, -1);
  }

  v37 = v50;
  if (v29(v50, 1, v22) == 1)
  {
    __break(1u);
  }
  else
  {
    v38 = v37 + *(int *)(v22 + 20);
    if (v25((char *)v38, 1, v26) != 1)
    {
      *(_BYTE *)(v38 + *(int *)(v26 + 32)) = 1;
      sub_10012079C();
      sub_10000AFFC((uint64_t)v51, type metadata accessor for EmergencyData);
      return;
    }
  }
  __break(1u);
}

void sub_100120510(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[32];
  _BYTE v9[24];

  swift_beginAccess(a1 + 48, v9, 0, 0);
  v2 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    if (*(_BYTE *)(v3 + v2 + 31) == 4)
    {
      v4 = sub_10011D868((uint64_t)v8);
      v6 = v5;
      v7 = _s8SOSBuddy4DataVMa_2(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
        sub_1001205AC();
      ((void (*)(_BYTE *, _QWORD))v4)(v8, 0);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001205AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v1 = sub_100003DB8(&qword_1003180C8);
  v3 = __chkstk_darwin(v1, v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3, v6);
  v8 = (char *)&v21 - v7;
  v9 = sub_100003DB8(&qword_100320928);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v0 + *(int *)(_s8SOSBuddy4DataVMa_2(0) + 20);
  sub_10000B234(v13, (uint64_t)v12, &qword_100320928);
  v14 = type metadata accessor for EmergencyData(0);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48);
  v16 = v15(v12, 1, v14);
  result = sub_100007FF0((uint64_t)v12, &qword_100320928);
  if (v16 != 1)
  {
    result = v15((char *)v13, 1, v14);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      sub_10000B234(v13 + *(int *)(v14 + 28), (uint64_t)v8, &qword_1003180C8);
      v18 = type metadata accessor for DispatchTime(0);
      v19 = *(_QWORD *)(v18 - 8);
      v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v8, 1, v18);
      result = sub_100007FF0((uint64_t)v8, &qword_1003180C8);
      if (v20 != 1)
        return result;
      static DispatchTime.now()(result);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v5, 0, 1, v18);
      result = v15((char *)v13, 1, v14);
      if ((_DWORD)result != 1)
        return sub_100123FDC((uint64_t)v5, v13 + *(int *)(v14 + 28), &qword_1003180C8);
    }
    __break(1u);
  }
  return result;
}

void sub_10012079C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t (*v32)(char *, uint64_t, int *);
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[24];
  _BYTE v55[24];

  v1 = sub_100003DB8(&qword_100320928);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for EmergencyData(0);
  v52 = *(_QWORD *)(v5 - 8);
  v53 = v5;
  __chkstk_darwin(v5, v6);
  v48 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100320A80);
  v10 = __chkstk_darwin(v8, v9);
  v51 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10, v12);
  v47 = (uint64_t)&v46 - v14;
  v16 = __chkstk_darwin(v13, v15);
  v18 = (char *)&v46 - v17;
  v20 = __chkstk_darwin(v16, v19);
  v49 = (char *)&v46 - v21;
  v23 = __chkstk_darwin(v20, v22);
  v25 = (char *)&v46 - v24;
  __chkstk_darwin(v23, v26);
  v28 = (char *)&v46 - v27;
  v29 = v0;
  v30 = v0 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_data;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_data, v55, 1, 0);
  sub_10000B234(v30, (uint64_t)v28, &qword_100320A80);
  v31 = (int *)_s8SOSBuddy4DataVMa_2(0);
  v50 = *((_QWORD *)v31 - 1);
  v32 = *(uint64_t (**)(char *, uint64_t, int *))(v50 + 48);
  v33 = v32(v28, 1, v31);
  sub_100007FF0((uint64_t)v28, &qword_100320A80);
  if (v33 != 1)
  {
    if (v32((char *)v30, 1, v31) == 1)
    {
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    v34 = *(_BYTE *)(v29 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentTarget + 40);
    v35 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentTarget + 32);
    v36 = v30 + v31[11];
    v37 = *(_OWORD *)(v29 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentTarget + 16);
    *(_OWORD *)v36 = *(_OWORD *)(v29 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentTarget);
    *(_OWORD *)(v36 + 16) = v37;
    *(_QWORD *)(v36 + 32) = v35;
    *(_BYTE *)(v36 + 40) = v34;
    sub_10000B234(v30, (uint64_t)v25, &qword_100320A80);
    if (v32(v25, 1, v31))
    {
      sub_100007FF0((uint64_t)v25, &qword_100320A80);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v4, 1, 1, v53);
LABEL_6:
      sub_100007FF0((uint64_t)v4, &qword_100320928);
      sub_10000B234(v30, (uint64_t)v18, &qword_100320A80);
      if (v32(v18, 1, v31))
      {
        sub_100007FF0((uint64_t)v18, &qword_100320A80);
LABEL_18:
        v45 = (uint64_t)v51;
        (*(void (**)(char *, uint64_t, uint64_t, int *))(v50 + 56))(v51, 1, 1, v31);
        swift_beginAccess(v30, v54, 33, 0);
        sub_100123FDC(v45, v30, &qword_100320A80);
        swift_endAccess(v54);
        return;
      }
      v38 = v18[v31[6]];
      sub_100007FF0((uint64_t)v18, &qword_100320A80);
      if ((v38 & 1) != 0)
        goto LABEL_18;
      v39 = v47;
      sub_10000B234(v30, v47, &qword_100320A80);
      if (v32((char *)v39, 1, v31) != 1)
      {
        v40 = sub_100120CA0();
        sub_10000AFFC(v39, _s8SOSBuddy4DataVMa_2);
        sub_100176278(4, v40);
        swift_bridgeObjectRelease(v40);
        goto LABEL_18;
      }
      goto LABEL_21;
    }
    sub_10000B234((uint64_t)&v25[v31[5]], (uint64_t)v4, &qword_100320928);
    sub_100007FF0((uint64_t)v25, &qword_100320A80);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v4, 1, v53) == 1)
      goto LABEL_6;
    v41 = v48;
    sub_1000E8D6C((uint64_t)v4, v48, type metadata accessor for EmergencyData);
    if ((*(_BYTE *)(v41 + 9) & 1) != 0)
    {
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100260550, 0xD000000000000011, 0x8000000100260530, 0);
      swift_bridgeObjectRelease(0x8000000100260550);
      v43 = (uint64_t)v49;
      if ((v42 & 1) == 0)
        goto LABEL_17;
    }
    else
    {
      swift_bridgeObjectRelease(0x8000000100260530);
      v43 = (uint64_t)v49;
    }
    sub_10000B234(v30, v43, &qword_100320A80);
    if (v32((char *)v43, 1, v31) == 1)
    {
LABEL_22:
      __break(1u);
      return;
    }
    v44 = sub_100120CA0();
    sub_10000AFFC(v43, _s8SOSBuddy4DataVMa_2);
    sub_100176278(4, v44);
    swift_bridgeObjectRelease(v44);
LABEL_17:
    sub_10000AFFC(v41, type metadata accessor for EmergencyData);
    goto LABEL_18;
  }
}

unint64_t sub_100120CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int *v56;
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t inited;
  NSString v62;
  NSString v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  Class v89;
  char v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  Class v97;
  char v98;
  __n128 v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  Class v106;
  char v107;
  __n128 v108;
  uint64_t v109;
  uint64_t *v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  Class v114;
  char v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  Class v122;
  char v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  Class v129;
  char v130;
  __n128 v131;
  Class v132;
  char v133;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  unsigned int (*v141)(uint64_t, uint64_t, uint64_t);
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int *v156;
  unint64_t v157;
  char v158[80];

  v1 = type metadata accessor for DispatchTime(0);
  v153 = *(_QWORD *)(v1 - 8);
  v154 = v1;
  v3 = __chkstk_darwin(v1, v2);
  v136 = (char *)&v135 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3, v5);
  v137 = (char *)&v135 - v7;
  v9 = __chkstk_darwin(v6, v8);
  v139 = (char *)&v135 - v10;
  v12 = __chkstk_darwin(v9, v11);
  v143 = (char *)&v135 - v13;
  v15 = __chkstk_darwin(v12, v14);
  v146 = (char *)&v135 - v16;
  __chkstk_darwin(v15, v17);
  v148 = (char *)&v135 - v18;
  v19 = sub_100003DB8(&qword_1003180C8);
  v21 = __chkstk_darwin(v19, v20);
  v138 = (uint64_t)&v135 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21, v23);
  v144 = (uint64_t)&v135 - v25;
  v27 = __chkstk_darwin(v24, v26);
  v147 = (uint64_t)&v135 - v28;
  v30 = __chkstk_darwin(v27, v29);
  v149 = (uint64_t)&v135 - v31;
  v33 = __chkstk_darwin(v30, v32);
  v152 = (uint64_t)&v135 - v34;
  v36 = __chkstk_darwin(v33, v35);
  v151 = (uint64_t)&v135 - v37;
  __chkstk_darwin(v36, v38);
  v40 = (char *)&v135 - v39;
  v41 = sub_100003DB8(&qword_100320928);
  v43 = __chkstk_darwin(v41, v42);
  v142 = (uint64_t)&v135 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43, v45);
  v47 = (char *)&v135 - v46;
  v48 = type metadata accessor for EmergencyData(0);
  v49 = *(_QWORD *)(v48 - 8);
  v51 = __chkstk_darwin(v48, v50);
  v150 = (char *)&v135 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51, v53);
  v55 = (char *)&v135 - v54;
  v56 = (int *)_s8SOSBuddy4DataVMa_2(0);
  v140 = v0 + v56[5];
  sub_10000B234(v140, (uint64_t)v47, &qword_100320928);
  v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  v155 = v48;
  v141 = v57;
  if (v57((uint64_t)v47, 1, v48) != 1)
  {
    sub_1000E8D6C((uint64_t)v47, (uint64_t)v55, type metadata accessor for EmergencyData);
    __asm { BR              X10 }
  }
  sub_100007FF0((uint64_t)v47, &qword_100320928);
  if ((*(_BYTE *)(v0 + v56[6]) & 1) != 0)
    v58 = 0xE000000000000000;
  else
    v58 = 0xE600000000000000;
  if ((*(_BYTE *)(v0 + v56[6]) & 1) != 0)
    v59 = 0xE000000000000000;
  else
    v59 = 0xE500000000000000;
  v156 = v56;
  v60 = sub_100003DB8(&qword_100319FC8);
  inited = swift_initStackObject(v60, v158);
  *(_OWORD *)(inited + 16) = xmmword_10024EEB0;
  *(_QWORD *)(inited + 32) = 0x707954746E657665;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  v62 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v59);
  *(_QWORD *)(inited + 48) = v62;
  *(_QWORD *)(inited + 56) = 0x6767697254777473;
  *(_QWORD *)(inited + 64) = 0xEA00000000007265;
  v63 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v58);
  *(_QWORD *)(inited + 72) = v63;
  *(_QWORD *)(inited + 80) = 0x74617453636E7973;
  *(_QWORD *)(inited + 88) = 0xEA00000000007375;
  v145 = v0 + v56[9];
  sub_10000B234(v145, (uint64_t)v40, &qword_1003180C8);
  v65 = v153;
  v64 = v154;
  v66 = *(void (**)(char *, uint64_t, uint64_t))(v153 + 48);
  v66(v40, 1, v154);
  sub_100007FF0((uint64_t)v40, &qword_1003180C8);
  *(NSNumber *)(inited + 96) = Bool._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 104) = 0x7574617453676572;
  *(_QWORD *)(inited + 112) = 0xE900000000000073;
  v67 = v0 + v56[10];
  v68 = v151;
  sub_10000B234(v67, v151, &qword_1003180C8);
  v66((char *)v68, 1, v64);
  sub_100007FF0(v68, &qword_1003180C8);
  v69 = v64;
  *(NSNumber *)(inited + 120) = Bool._bridgeToObjectiveC()();
  v70 = sub_100224F60(inited);
  v71 = v152;
  sub_10000B234(v0 + v56[7], v152, &qword_1003180C8);
  v72 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v66)(v71, 1, v64);
  v73 = v0;
  if (v72 == 1)
  {
    sub_100007FF0(v71, &qword_1003180C8);
    v74 = v65;
    v75 = (uint64_t)v150;
    goto LABEL_16;
  }
  v76 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 32))(v148, v71, v69);
  v77 = DispatchTime.uptimeNanoseconds.getter(v76);
  v78 = DispatchTime.uptimeNanoseconds.getter(v77);
  v74 = v65;
  if (v78 >= v77)
    goto LABEL_14;
  v79 = DispatchTime.uptimeNanoseconds.getter(v78);
  v80 = DispatchTime.uptimeNanoseconds.getter(v79);
  v75 = (uint64_t)v150;
  if (v79 < v80)
  {
    __break(1u);
LABEL_14:
    v75 = (uint64_t)v150;
  }
  isa = UInt64._bridgeToObjectiveC()().super.super.isa;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v70);
  v157 = v70;
  sub_10020D010((uint64_t)isa, 0xD000000000000011, 0x800000010026AC40, isUniquelyReferenced_nonNull_native);
  v70 = v157;
  v83 = swift_bridgeObjectRelease(0x8000000000000000);
  (*(void (**)(char *, uint64_t, __n128))(v65 + 8))(v148, v69, v83);
LABEL_16:
  v84 = v149;
  sub_10000B234(v0 + v156[8], v149, &qword_1003180C8);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v66)(v84, 1, v69) == 1)
  {
    sub_100007FF0(v84, &qword_1003180C8);
  }
  else
  {
    v85 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 32))(v146, v84, v69);
    v86 = DispatchTime.uptimeNanoseconds.getter(v85);
    v87 = DispatchTime.uptimeNanoseconds.getter(v86);
    if (v87 < v86)
    {
      v88 = DispatchTime.uptimeNanoseconds.getter(v87);
      if (v88 < DispatchTime.uptimeNanoseconds.getter(v88))
        __break(1u);
    }
    v89 = UInt64._bridgeToObjectiveC()().super.super.isa;
    v90 = swift_isUniquelyReferenced_nonNull_native(v70);
    v157 = v70;
    sub_10020D010((uint64_t)v89, 0xD000000000000012, 0x800000010026AC20, v90);
    v70 = v157;
    v91 = swift_bridgeObjectRelease(0x8000000000000000);
    (*(void (**)(char *, uint64_t, __n128))(v74 + 8))(v146, v69, v91);
  }
  v92 = v147;
  sub_10000B234(v145, v147, &qword_1003180C8);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v66)(v92, 1, v69) == 1)
  {
    sub_100007FF0(v92, &qword_1003180C8);
  }
  else
  {
    v93 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 32))(v143, v92, v69);
    v94 = DispatchTime.uptimeNanoseconds.getter(v93);
    v95 = DispatchTime.uptimeNanoseconds.getter(v94);
    if (v95 < v94)
    {
      v96 = DispatchTime.uptimeNanoseconds.getter(v95);
      if (v96 < DispatchTime.uptimeNanoseconds.getter(v96))
        __break(1u);
    }
    v97 = UInt64._bridgeToObjectiveC()().super.super.isa;
    v98 = swift_isUniquelyReferenced_nonNull_native(v70);
    v157 = v70;
    sub_10020D010((uint64_t)v97, 0x4379636E6574616CLL, 0xEC0000004D706D61, v98);
    v70 = v157;
    v99 = swift_bridgeObjectRelease(0x8000000000000000);
    (*(void (**)(char *, uint64_t, __n128))(v74 + 8))(v143, v69, v99);
  }
  v100 = v144;
  sub_10000B234(v67, v144, &qword_1003180C8);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v66)(v100, 1, v69) == 1)
  {
    sub_100007FF0(v100, &qword_1003180C8);
  }
  else
  {
    v101 = v139;
    v102 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 32))(v139, v100, v69);
    v103 = DispatchTime.uptimeNanoseconds.getter(v102);
    v104 = DispatchTime.uptimeNanoseconds.getter(v103);
    if (v104 < v103)
    {
      v105 = DispatchTime.uptimeNanoseconds.getter(v104);
      if (v105 < DispatchTime.uptimeNanoseconds.getter(v105))
        __break(1u);
    }
    v106 = UInt64._bridgeToObjectiveC()().super.super.isa;
    v107 = swift_isUniquelyReferenced_nonNull_native(v70);
    v157 = v70;
    sub_10020D010((uint64_t)v106, 0x5279636E6574616CLL, 0xEB000000004D6765, v107);
    v70 = v157;
    v108 = swift_bridgeObjectRelease(0x8000000000000000);
    (*(void (**)(char *, uint64_t, __n128))(v74 + 8))(v101, v69, v108);
  }
  v109 = v142;
  sub_10000B234(v140, v142, &qword_100320928);
  if (v141(v109, 1, v155) == 1)
  {
    v110 = &qword_100320928;
LABEL_48:
    sub_100007FF0(v109, v110);
    goto LABEL_54;
  }
  sub_1000E8D6C(v109, v75, type metadata accessor for EmergencyData);
  if ((*(_BYTE *)(v75 + 9) & 1) != 0)
  {
    v111 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100260550, 0xD000000000000011, 0x8000000100260530, 0);
    swift_bridgeObjectRelease(0x8000000100260550);
    if ((v111 & 1) == 0)
      goto LABEL_53;
  }
  else
  {
    swift_bridgeObjectRelease(0x8000000100260530);
  }
  v112 = v73;
  v113 = *(int *)(v155 + 32);
  v114 = Bool._bridgeToObjectiveC()().super.super.isa;
  v115 = swift_isUniquelyReferenced_nonNull_native(v70);
  v157 = v70;
  sub_10020D010((uint64_t)v114, 0x74617453766E6F63, 0xEA00000000007375, v115);
  v70 = v157;
  swift_bridgeObjectRelease(0x8000000000000000);
  if (*(_BYTE *)(v75 + v113) == 1)
  {
    v117 = v137;
    v118 = static DispatchTime.now()(v116);
    v119 = DispatchTime.uptimeNanoseconds.getter(v118);
    v73 = v112;
    v120 = DispatchTime.uptimeNanoseconds.getter(v119);
    if (v120 >= v119
      || (v121 = DispatchTime.uptimeNanoseconds.getter(v120), v121 >= DispatchTime.uptimeNanoseconds.getter(v121)))
    {
      (*(void (**)(char *, uint64_t))(v74 + 8))(v117, v69);
      v122 = UInt64._bridgeToObjectiveC()().super.super.isa;
      v123 = swift_isUniquelyReferenced_nonNull_native(v70);
      v157 = v70;
      sub_10020D010((uint64_t)v122, 0xD000000000000010, 0x800000010026AC00, v123);
      v70 = v157;
      swift_bridgeObjectRelease(0x8000000000000000);
      goto LABEL_46;
    }
    __break(1u);
  }
  v73 = v112;
LABEL_46:
  v109 = v138;
  sub_10000B234(v75 + *(int *)(v155 + 28), v138, &qword_1003180C8);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v66)(v109, 1, v69) == 1)
  {
    sub_10000AFFC(v75, type metadata accessor for EmergencyData);
    v110 = &qword_1003180C8;
    goto LABEL_48;
  }
  v124 = v136;
  v125 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 32))(v136, v109, v69);
  v126 = DispatchTime.uptimeNanoseconds.getter(v125);
  v127 = DispatchTime.uptimeNanoseconds.getter(v126);
  if (v127 < v126)
  {
    v128 = DispatchTime.uptimeNanoseconds.getter(v127);
    if (v128 < DispatchTime.uptimeNanoseconds.getter(v128))
      __break(1u);
  }
  v129 = UInt64._bridgeToObjectiveC()().super.super.isa;
  v130 = swift_isUniquelyReferenced_nonNull_native(v70);
  v157 = v70;
  sub_10020D010((uint64_t)v129, 0xD000000000000011, 0x800000010026ABE0, v130);
  v70 = v157;
  v131 = swift_bridgeObjectRelease(0x8000000000000000);
  (*(void (**)(char *, uint64_t, __n128))(v74 + 8))(v124, v69, v131);
LABEL_53:
  sub_10000AFFC(v75, type metadata accessor for EmergencyData);
LABEL_54:
  if ((*(_BYTE *)(v73 + v156[11] + 40) & 1) == 0)
  {
    v132 = Int64._bridgeToObjectiveC()().super.super.isa;
    v133 = swift_isUniquelyReferenced_nonNull_native(v70);
    v157 = v70;
    sub_10020D010((uint64_t)v132, 0x6449746173, 0xE500000000000000, v133);
    v70 = v157;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  return v70;
}

uint64_t sub_100121AC8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_100007FF0((uint64_t)v0 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_data, &qword_100320A80);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentSuggestedActions));
  sub_100007FF0((uint64_t)v0 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentLinkState, (uint64_t *)&unk_10031B230);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100121B30()
{
  return type metadata accessor for AnalyticsSessionStart(0);
}

uint64_t type metadata accessor for AnalyticsSessionStart(uint64_t a1)
{
  return sub_10003D8E8(a1, (uint64_t *)&unk_100320778, (uint64_t)&nominal type descriptor for AnalyticsSessionStart);
}

void sub_100121B4C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1000F03D4(319, (unint64_t *)&unk_100320788, _s8SOSBuddy4DataVMa_2);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = ")";
    v6[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_1000F03D4(319, &qword_10031F9A8, type metadata accessor for LinkState);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 5, v6, a1 + 80);
    }
  }
}

uint64_t _s8SOSBuddy4DataVMa_2(uint64_t a1)
{
  return sub_10003D8E8(a1, (uint64_t *)&unk_100320988, (uint64_t)&_s8SOSBuddy4DataVMn_2);
}

_QWORD *sub_100121C2C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(_BYTE *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  _OWORD *v39;
  __int128 v40;
  uint64_t v42;
  _BYTE *__dst;
  void (*v44)(_BYTE *, _BYTE *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = type metadata accessor for DispatchTime(0);
    v8 = *(_QWORD *)(v7 - 8);
    v44 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16);
    v44(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for EmergencyData(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_100003DB8(&qword_100320928);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      v15 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48);
    }
    else
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v10[8] = v11[8];
      v10[9] = v11[9];
      v17 = *(int *)(v12 + 28);
      __dst = &v10[v17];
      v18 = v8;
      v19 = &v11[v17];
      v42 = v18;
      v15 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48);
      if (v15(&v11[v17], 1, v7))
      {
        v20 = sub_100003DB8(&qword_1003180C8);
        memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        v8 = v42;
      }
      else
      {
        v44(__dst, v19, v7);
        v8 = v42;
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v42 + 56))(__dst, 0, 1, v7);
      }
      v10[*(int *)(v12 + 32)] = v11[*(int *)(v12 + 32)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v21 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    if (v15((_BYTE *)a2 + v21, 1, v7))
    {
      v24 = sub_100003DB8(&qword_1003180C8);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v44(v22, v23, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v22, 0, 1, v7);
    }
    v25 = a3[8];
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    if (v15((_BYTE *)a2 + v25, 1, v7))
    {
      v28 = sub_100003DB8(&qword_1003180C8);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v44(v26, v27, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v26, 0, 1, v7);
    }
    v29 = a3[9];
    v30 = (char *)a1 + v29;
    v31 = (char *)a2 + v29;
    if (v15((_BYTE *)a2 + v29, 1, v7))
    {
      v32 = sub_100003DB8(&qword_1003180C8);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v44(v30, v31, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v30, 0, 1, v7);
    }
    v33 = a3[10];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    if (v15((_BYTE *)a2 + v33, 1, v7))
    {
      v36 = sub_100003DB8(&qword_1003180C8);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      v44(v34, v35, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v34, 0, 1, v7);
    }
    v37 = a3[11];
    v38 = (_OWORD *)((char *)a1 + v37);
    v39 = (_OWORD *)((char *)a2 + v37);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    *(_OWORD *)((char *)v38 + 25) = *(_OWORD *)((char *)v39 + 25);
  }
  return a1;
}

uint64_t type metadata accessor for EmergencyData(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100320A38, (uint64_t)&nominal type descriptor for EmergencyData);
}

uint64_t sub_100121FD4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  void (*v15)(uint64_t, uint64_t);

  v4 = type metadata accessor for DispatchTime(0);
  v5 = *(_QWORD *)(v4 - 8);
  v15 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v15(a1, v4);
  v6 = a1 + a2[5];
  v7 = type metadata accessor for EmergencyData(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  }
  else
  {
    v9 = v6 + *(int *)(v7 + 28);
    v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (!v8(v9, 1, v4))
      v15(v9, v4);
  }
  v10 = a1 + a2[7];
  if (!v8(v10, 1, v4))
    v15(v10, v4);
  v11 = a1 + a2[8];
  if (!v8(v11, 1, v4))
    v15(v11, v4);
  v12 = a1 + a2[9];
  if (!v8(v12, 1, v4))
    v15(v12, v4);
  v13 = a1 + a2[10];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v13, 1, v4);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v15)(v13, v4);
  return result;
}

uint64_t sub_10012215C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(_BYTE *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  __int128 v38;
  uint64_t v40;
  _BYTE *__dst;
  void (*v42)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v42(a1, a2, v6);
  v8 = a3[5];
  v9 = (_BYTE *)(a1 + v8);
  v10 = (_BYTE *)(a2 + v8);
  v11 = type metadata accessor for EmergencyData(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100003DB8(&qword_100320928);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    v14 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48);
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
    v9[9] = v10[9];
    v15 = *(int *)(v11 + 28);
    __dst = &v9[v15];
    v16 = v7;
    v17 = &v10[v15];
    v40 = v16;
    v14 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48);
    if (v14(&v10[v15], 1, v6))
    {
      v18 = sub_100003DB8(&qword_1003180C8);
      memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      v7 = v40;
    }
    else
    {
      v42((uint64_t)__dst, (uint64_t)v17, v6);
      v7 = v40;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v40 + 56))(__dst, 0, 1, v6);
    }
    v9[*(int *)(v11 + 32)] = v10[*(int *)(v11 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v19 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  if (v14((_BYTE *)(a2 + v19), 1, v6))
  {
    v22 = sub_100003DB8(&qword_1003180C8);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v42((uint64_t)v20, (uint64_t)v21, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v20, 0, 1, v6);
  }
  v23 = a3[8];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  if (v14((_BYTE *)(a2 + v23), 1, v6))
  {
    v26 = sub_100003DB8(&qword_1003180C8);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v42((uint64_t)v24, (uint64_t)v25, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v24, 0, 1, v6);
  }
  v27 = a3[9];
  v28 = (void *)(a1 + v27);
  v29 = (const void *)(a2 + v27);
  if (v14((_BYTE *)(a2 + v27), 1, v6))
  {
    v30 = sub_100003DB8(&qword_1003180C8);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v42((uint64_t)v28, (uint64_t)v29, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v28, 0, 1, v6);
  }
  v31 = a3[10];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  if (v14((_BYTE *)(a2 + v31), 1, v6))
  {
    v34 = sub_100003DB8(&qword_1003180C8);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v42((uint64_t)v32, (uint64_t)v33, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v32, 0, 1, v6);
  }
  v35 = a3[11];
  v36 = (_OWORD *)(a1 + v35);
  v37 = (_OWORD *)(a2 + v35);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  *(_OWORD *)((char *)v36 + 25) = *(_OWORD *)((char *)v37 + 25);
  return a1;
}

uint64_t sub_1001224C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_BYTE *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t (*v24)(void);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const void *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  __int128 *v56;
  __int128 v57;
  __int128 v58;
  _BYTE *v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  int *v62;

  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v61(a1, a2, v6);
  v62 = a3;
  v8 = a3[5];
  v9 = (_BYTE *)(a1 + v8);
  v10 = (_BYTE *)(a2 + v8);
  v11 = type metadata accessor for EmergencyData(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      sub_10000AFFC((uint64_t)v9, type metadata accessor for EmergencyData);
      goto LABEL_7;
    }
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
    v9[9] = v10[9];
    v22 = *(int *)(v11 + 28);
    v23 = &v10[v22];
    v24 = *(uint64_t (**)(void))(v7 + 48);
    v60 = &v9[v22];
    v25 = v24();
    v26 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v24)(v23, 1, v6);
    if (v25)
    {
      if (v26)
      {
        v27 = sub_100003DB8(&qword_1003180C8);
        memcpy(v60, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
LABEL_17:
        v21 = v7;
        goto LABEL_18;
      }
      v21 = v7;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v60, v23, v6);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v60, 0, 1, v6);
    }
    else
    {
      if (!v26)
      {
        v61((uint64_t)v60, (uint64_t)v23, v6);
        goto LABEL_17;
      }
      v21 = v7;
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v60, v6);
      v28 = sub_100003DB8(&qword_1003180C8);
      memcpy(v60, v23, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
LABEL_18:
    v9[*(int *)(v11 + 32)] = v10[*(int *)(v11 + 32)];
    goto LABEL_19;
  }
  if (v15)
  {
LABEL_7:
    v20 = sub_100003DB8(&qword_100320928);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    v21 = v7;
    goto LABEL_19;
  }
  *(_QWORD *)v9 = *(_QWORD *)v10;
  v9[8] = v10[8];
  v9[9] = v10[9];
  v16 = *(int *)(v11 + 28);
  v17 = &v9[v16];
  v18 = &v10[v16];
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(&v10[v16], 1, v6))
  {
    v19 = sub_100003DB8(&qword_1003180C8);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v17, v18, v6);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  }
  v21 = v7;
  v9[*(int *)(v11 + 32)] = v10[*(int *)(v11 + 32)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_19:
  *(_BYTE *)(a1 + v62[6]) = *(_BYTE *)(a2 + v62[6]);
  v29 = v62[7];
  v30 = (void *)(a1 + v29);
  v31 = (const void *)(a2 + v29);
  v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  v33 = v32(a1 + v29, 1, v6);
  v34 = v32((uint64_t)v31, 1, v6);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v30, v31, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v30, 0, 1, v6);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v34)
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(v30, v6);
LABEL_24:
    v35 = sub_100003DB8(&qword_1003180C8);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_25;
  }
  v61((uint64_t)v30, (uint64_t)v31, v6);
LABEL_25:
  v36 = v62[8];
  v37 = (void *)(a1 + v36);
  v38 = (const void *)(a2 + v36);
  v39 = v32(a1 + v36, 1, v6);
  v40 = v32((uint64_t)v38, 1, v6);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v37, v38, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v37, 0, 1, v6);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v40)
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(v37, v6);
LABEL_30:
    v41 = sub_100003DB8(&qword_1003180C8);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_31;
  }
  v61((uint64_t)v37, (uint64_t)v38, v6);
LABEL_31:
  v42 = v62[9];
  v43 = (void *)(a1 + v42);
  v44 = (const void *)(a2 + v42);
  v45 = v32(a1 + v42, 1, v6);
  v46 = v32((uint64_t)v44, 1, v6);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v43, v44, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v43, 0, 1, v6);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v46)
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(v43, v6);
LABEL_36:
    v47 = sub_100003DB8(&qword_1003180C8);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_37;
  }
  v61((uint64_t)v43, (uint64_t)v44, v6);
LABEL_37:
  v48 = v62[10];
  v49 = (void *)(a1 + v48);
  v50 = (const void *)(a2 + v48);
  v51 = v32(a1 + v48, 1, v6);
  v52 = v32((uint64_t)v50, 1, v6);
  if (!v51)
  {
    if (!v52)
    {
      v61((uint64_t)v49, (uint64_t)v50, v6);
      goto LABEL_43;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v49, v6);
    goto LABEL_42;
  }
  if (v52)
  {
LABEL_42:
    v53 = sub_100003DB8(&qword_1003180C8);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v49, v50, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v49, 0, 1, v6);
LABEL_43:
  v54 = v62[11];
  v55 = (_OWORD *)(a1 + v54);
  v56 = (__int128 *)(a2 + v54);
  v57 = *v56;
  v58 = v56[1];
  *(_OWORD *)((char *)v55 + 25) = *(__int128 *)((char *)v56 + 25);
  *v55 = v57;
  v55[1] = v58;
  return a1;
}

uint64_t sub_100122A90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(_BYTE *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  __int128 v38;
  uint64_t v40;
  _BYTE *__dst;
  void (*v42)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v42(a1, a2, v6);
  v8 = a3[5];
  v9 = (_BYTE *)(a1 + v8);
  v10 = (_BYTE *)(a2 + v8);
  v11 = type metadata accessor for EmergencyData(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100003DB8(&qword_100320928);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    v14 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48);
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
    v9[9] = v10[9];
    v15 = *(int *)(v11 + 28);
    __dst = &v9[v15];
    v16 = v7;
    v17 = &v10[v15];
    v40 = v16;
    v14 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48);
    if (v14(&v10[v15], 1, v6))
    {
      v18 = sub_100003DB8(&qword_1003180C8);
      memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      v7 = v40;
    }
    else
    {
      v42((uint64_t)__dst, (uint64_t)v17, v6);
      v7 = v40;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v40 + 56))(__dst, 0, 1, v6);
    }
    v9[*(int *)(v11 + 32)] = v10[*(int *)(v11 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v19 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  if (v14((_BYTE *)(a2 + v19), 1, v6))
  {
    v22 = sub_100003DB8(&qword_1003180C8);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v42((uint64_t)v20, (uint64_t)v21, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v20, 0, 1, v6);
  }
  v23 = a3[8];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  if (v14((_BYTE *)(a2 + v23), 1, v6))
  {
    v26 = sub_100003DB8(&qword_1003180C8);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v42((uint64_t)v24, (uint64_t)v25, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v24, 0, 1, v6);
  }
  v27 = a3[9];
  v28 = (void *)(a1 + v27);
  v29 = (const void *)(a2 + v27);
  if (v14((_BYTE *)(a2 + v27), 1, v6))
  {
    v30 = sub_100003DB8(&qword_1003180C8);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v42((uint64_t)v28, (uint64_t)v29, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v28, 0, 1, v6);
  }
  v31 = a3[10];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  if (v14((_BYTE *)(a2 + v31), 1, v6))
  {
    v34 = sub_100003DB8(&qword_1003180C8);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v42((uint64_t)v32, (uint64_t)v33, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v32, 0, 1, v6);
  }
  v35 = a3[11];
  v36 = (_OWORD *)(a1 + v35);
  v37 = (_OWORD *)(a2 + v35);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  *(_OWORD *)((char *)v36 + 25) = *(_OWORD *)((char *)v37 + 25);
  return a1;
}

uint64_t sub_100122DF8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_BYTE *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t (*v24)(void);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const void *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  _OWORD *v56;
  __int128 v57;
  _BYTE *v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  int *v61;

  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v60(a1, a2, v6);
  v61 = a3;
  v8 = a3[5];
  v9 = (_BYTE *)(a1 + v8);
  v10 = (_BYTE *)(a2 + v8);
  v11 = type metadata accessor for EmergencyData(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      sub_10000AFFC((uint64_t)v9, type metadata accessor for EmergencyData);
      goto LABEL_7;
    }
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
    v9[9] = v10[9];
    v22 = *(int *)(v11 + 28);
    v23 = &v10[v22];
    v24 = *(uint64_t (**)(void))(v7 + 48);
    v59 = &v9[v22];
    v25 = v24();
    v26 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v24)(v23, 1, v6);
    if (v25)
    {
      if (v26)
      {
        v27 = sub_100003DB8(&qword_1003180C8);
        memcpy(v59, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
LABEL_17:
        v21 = v7;
        goto LABEL_18;
      }
      v21 = v7;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v59, v23, v6);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v59, 0, 1, v6);
    }
    else
    {
      if (!v26)
      {
        v60((uint64_t)v59, (uint64_t)v23, v6);
        goto LABEL_17;
      }
      v21 = v7;
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v59, v6);
      v28 = sub_100003DB8(&qword_1003180C8);
      memcpy(v59, v23, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
LABEL_18:
    v9[*(int *)(v11 + 32)] = v10[*(int *)(v11 + 32)];
    goto LABEL_19;
  }
  if (v15)
  {
LABEL_7:
    v20 = sub_100003DB8(&qword_100320928);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    v21 = v7;
    goto LABEL_19;
  }
  *(_QWORD *)v9 = *(_QWORD *)v10;
  v9[8] = v10[8];
  v9[9] = v10[9];
  v16 = *(int *)(v11 + 28);
  v17 = &v9[v16];
  v18 = &v10[v16];
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(&v10[v16], 1, v6))
  {
    v19 = sub_100003DB8(&qword_1003180C8);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v17, v18, v6);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  }
  v21 = v7;
  v9[*(int *)(v11 + 32)] = v10[*(int *)(v11 + 32)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_19:
  v29 = v61[7];
  *(_BYTE *)(a1 + v61[6]) = *(_BYTE *)(a2 + v61[6]);
  v30 = (void *)(a1 + v29);
  v31 = (const void *)(a2 + v29);
  v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  v33 = v32(a1 + v29, 1, v6);
  v34 = v32((uint64_t)v31, 1, v6);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v30, v31, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v30, 0, 1, v6);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v34)
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(v30, v6);
LABEL_24:
    v35 = sub_100003DB8(&qword_1003180C8);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_25;
  }
  v60((uint64_t)v30, (uint64_t)v31, v6);
LABEL_25:
  v36 = v61[8];
  v37 = (void *)(a1 + v36);
  v38 = (const void *)(a2 + v36);
  v39 = v32(a1 + v36, 1, v6);
  v40 = v32((uint64_t)v38, 1, v6);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v37, v38, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v37, 0, 1, v6);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v40)
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(v37, v6);
LABEL_30:
    v41 = sub_100003DB8(&qword_1003180C8);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_31;
  }
  v60((uint64_t)v37, (uint64_t)v38, v6);
LABEL_31:
  v42 = v61[9];
  v43 = (void *)(a1 + v42);
  v44 = (const void *)(a2 + v42);
  v45 = v32(a1 + v42, 1, v6);
  v46 = v32((uint64_t)v44, 1, v6);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v43, v44, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v43, 0, 1, v6);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v46)
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(v43, v6);
LABEL_36:
    v47 = sub_100003DB8(&qword_1003180C8);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_37;
  }
  v60((uint64_t)v43, (uint64_t)v44, v6);
LABEL_37:
  v48 = v61[10];
  v49 = (void *)(a1 + v48);
  v50 = (const void *)(a2 + v48);
  v51 = v32(a1 + v48, 1, v6);
  v52 = v32((uint64_t)v50, 1, v6);
  if (!v51)
  {
    if (!v52)
    {
      v60((uint64_t)v49, (uint64_t)v50, v6);
      goto LABEL_43;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v49, v6);
    goto LABEL_42;
  }
  if (v52)
  {
LABEL_42:
    v53 = sub_100003DB8(&qword_1003180C8);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v49, v50, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v49, 0, 1, v6);
LABEL_43:
  v54 = v61[11];
  v55 = (_OWORD *)(a1 + v54);
  v56 = (_OWORD *)(a2 + v54);
  v57 = v56[1];
  *v55 = *v56;
  v55[1] = v57;
  *(_OWORD *)((char *)v55 + 25) = *(_OWORD *)((char *)v56 + 25);
  return a1;
}

uint64_t sub_1001233C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001233CC);
}

uint64_t sub_1001233CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_100003DB8(&qword_100320928);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_100003DB8(&qword_1003180C8);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 28);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10012346C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100123478);
}

uint64_t sub_100123478(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_100003DB8(&qword_100320928);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_100003DB8(&qword_1003180C8);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 28);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100123520(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;

  v2 = type metadata accessor for DispatchTime(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000F03D4(319, (unint64_t *)&unk_100320998, type metadata accessor for EmergencyData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = (char *)&value witness table for Builtin.Int8 + 64;
      sub_1000F03D4(319, (unint64_t *)&qword_100323F10, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime);
      if (v7 <= 0x3F)
      {
        v9 = *(_QWORD *)(v6 - 8) + 64;
        v10 = v9;
        v11 = v9;
        v12 = v9;
        v13 = ")";
        swift_initStructMetadata(a1, 256, 8, v8, a1 + 16);
      }
    }
  }
}

_QWORD *sub_1001235FC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
    v7 = *(int *)(a3 + 28);
    v8 = (void *)(a1 + v7);
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for DispatchTime(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_100003DB8(&qword_1003180C8);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *((_BYTE *)v4 + *(int *)(a3 + 32)) = *((_BYTE *)a2 + *(int *)(a3 + 32));
  }
  return v4;
}

uint64_t sub_100123710(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1 + *(int *)(a2 + 28);
  v3 = type metadata accessor for DispatchTime(0);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return result;
}

uint64_t sub_10012377C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v6 = *(int *)(a3 + 28);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100003DB8(&qword_1003180C8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_BYTE *)(a1 + *(int *)(a3 + 32)) = *(_BYTE *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_100123864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v6 = *(int *)(a3 + 28);
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = sub_100003DB8(&qword_1003180C8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(_BYTE *)(a1 + *(int *)(a3 + 32)) = *(_BYTE *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_100123998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v6 = *(int *)(a3 + 28);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100003DB8(&qword_1003180C8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_BYTE *)(a1 + *(int *)(a3 + 32)) = *(_BYTE *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_100123A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v6 = *(int *)(a3 + 28);
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = sub_100003DB8(&qword_1003180C8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(_BYTE *)(a1 + *(int *)(a3 + 32)) = *(_BYTE *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_100123BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100123BC0);
}

uint64_t sub_100123BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 9);
    if (v4 >= 2)
      return v4 - 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_100003DB8(&qword_1003180C8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_100123C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100123C44);
}

uint64_t sub_100123C44(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 9) = a2 + 1;
  }
  else
  {
    v7 = sub_100003DB8(&qword_1003180C8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void sub_100123CB8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_1002571E8;
  v4[2] = &unk_100257200;
  sub_1000F03D4(319, (unint64_t *)&qword_100323F10, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_100257200;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t sub_100123D54(uint64_t a1)
{
  _QWORD *v1;

  return sub_10000B458(a1, *v1 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsSessionStart_currentTarget, &qword_100319FB8);
}

void sub_100123D80(uint64_t a1)
{
  sub_10011D8AC(a1);
}

void sub_100123DA0(uint64_t a1)
{
  sub_10011DE1C(a1);
}

_BYTE *sub_100123DC0(uint64_t a1)
{
  return sub_10011E074(a1);
}

uint64_t sub_100123DE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v10[8];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_100123F6C(a1, (uint64_t)v10);
  v2 = v11;
  v3 = v12;
  v4 = v13;
  sub_100123F6C(a1, (uint64_t)&v14);
  v5 = v20 >> 62;
  if (v20 >> 62)
  {
    v6 = v20 & 0x3FFFFFFFFFFFFFFFLL;
    v20 &= 0x3FFFFFFFFFFFFFFFuLL;
    if ((_DWORD)v5 == 1)
    {
      v7 = v14;
      v8 = v15;
      swift_retain(v2);
      sub_10011F61C(v7, v8);
    }
    else
    {
      v21 = v14;
      LOBYTE(v22) = v15;
      v23 = v16;
      LOBYTE(v24) = v17;
      v25 = v18;
      LOWORD(v26) = v19;
      BYTE2(v26) = BYTE2(v19);
      v27 = v6;
      swift_retain(v4 & 0x3FFFFFFFFFFFFFFFLL);
      sub_10011ED30((uint64_t)&v21);
    }
  }
  else
  {
    v20 &= 0x3FFFFFFFFFFFFFFFuLL;
    LOBYTE(v21) = v14;
    v22 = v15;
    LOBYTE(v23) = v16;
    v24 = v17;
    LOWORD(v25) = v18;
    BYTE2(v25) = BYTE2(v18);
    v26 = v19;
    swift_retain(v3);
    sub_10011E444((uint64_t)&v21);
  }
  return sub_100123FA8(a1);
}

void sub_100123F2C(uint64_t a1)
{
  sub_100120510(a1);
}

void sub_100123F4C(uint64_t a1)
{
  sub_10011FF60(a1);
}

uint64_t sub_100123F6C(uint64_t a1, uint64_t a2)
{
  initializeWithTake for TransitionAlertModel.Alert(a2, a1);
  return a2;
}

uint64_t sub_100123FA8(uint64_t a1)
{
  sub_100112FC8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return a1;
}

uint64_t sub_100123FDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003DB8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100124020(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 48));
  return a1;
}

uint64_t sub_100124048(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 48));
  return a1;
}

uint64_t sub_100124070(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8((uint64_t *)&unk_10031B230);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for FindMyData()
{
  return &type metadata for FindMyData;
}

uint64_t sub_1001240C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8SOSBuddy18ThrottledExecution__interval;
  v2 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1001241F4(v0 + OBJC_IVAR____TtC8SOSBuddy18ThrottledExecution__lastRun);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100124128()
{
  return type metadata accessor for ThrottledExecution(0);
}

uint64_t type metadata accessor for ThrottledExecution(uint64_t a1)
{
  uint64_t result;

  result = qword_100320AC0;
  if (!qword_100320AC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ThrottledExecution);
  return result;
}

void sub_10012416C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for DispatchTimeInterval(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100025B34(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 2, v6, a1 + 80);
    }
  }
}

uint64_t sub_1001241F4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003DB8(&qword_1003180C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_100124234()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  __n128 v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  id v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59[3];
  id v60;
  uint64_t v61;

  v1 = v0;
  v2 = *v0;
  v3 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8((uint64_t *)&unk_10032B170);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003DB8(&qword_10031D150);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = swift_retain(v0);
  v0[4] = PassthroughSubject.init()(v13);
  v14 = sub_100003DB8(&qword_100320D28);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v0[5] = PassthroughSubject.init()(v15);
  v16 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v0[6] = PassthroughSubject.init()(v17);
  v0[7] = (uint64_t)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ApplicationActiveStateSource()), "init");
  v57 = v12;
  v58 = v6;
  v55 = v2;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100209204((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v18 = &_swiftEmptySetSingleton;
  }
  v0[8] = (uint64_t)v18;
  v56 = v0 + 8;
  v19 = type metadata accessor for PreventSuspension();
  v20 = (_QWORD *)swift_allocObject(v19, 40, 7);
  v20[2] = 0xD000000000000011;
  v20[3] = 0x800000010026AE40;
  v20[4] = 0;
  v0[9] = (uint64_t)v20;
  *((_BYTE *)v0 + 80) = 2;
  v21 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v22 = objc_msgSend(v21, "applicationState");

  *((_BYTE *)v1 + 81) = v22 == 0;
  swift_release(v1);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v1[2] = PassthroughSubject.init()(v23);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v1[3] = PassthroughSubject.init()(v24);
  v25 = qword_100315820;
  swift_retain(v1);
  if (v25 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v26 = type metadata accessor for Logger(0);
  sub_10000D744(v26, (uint64_t)qword_10033FD18);
  v28 = swift_retain_n(v1, v27);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    v59[0] = v32;
    *(_DWORD *)v31 = 136446210;
    v54 = v31 + 4;
    v60 = v1;
    v33 = swift_retain(v1);
    v34 = String.init<A>(describing:)(&v60, v55, v33);
    v35 = v11;
    v36 = v7;
    v38 = v37;
    v60 = (id)sub_100172BEC(v34, v37, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v54, v31 + 12);
    swift_release_n(v1);
    v39 = v38;
    v7 = v36;
    v11 = v35;
    swift_bridgeObjectRelease(v39);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "[%{public}s] init", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  v40 = (uint64_t)v58;
  v59[0] = *(_QWORD *)(v1[7] + OBJC_IVAR____TtC8SOSBuddy28ApplicationActiveStateSource_appForegroundDidChange);
  v41 = v59[0];
  v42 = sub_10000D75C();
  v43 = swift_retain(v41);
  v60 = (id)static OS_dispatch_queue.main.getter(v43);
  v44 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v40, 1, 1, v44);
  v45 = sub_1000084FC((unint64_t *)&unk_10032B180, &qword_10031D150, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v46 = sub_10002158C();
  Publisher.receive<A>(on:options:)(&v60, v40, v57, v42, v45, v46);
  sub_1000215D4(v40);

  swift_release(v59[0]);
  v47 = swift_allocObject(&unk_1002F14C8, 24, 7);
  swift_weakInit(v47 + 16);
  v48 = sub_1000084FC(&qword_1003205E0, (uint64_t *)&unk_10032B170, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v50 = Publisher<>.sink(receiveValue:)(sub_100125FB4, v47, v7, v48, v49);
  swift_release(v47);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v51 = v56;
  swift_beginAccess(v56, v59, 33, 0);
  AnyCancellable.store(in:)(v51);
  swift_endAccess(v59);
  swift_release(v50);
  swift_release(v1);
  return v1;
}

uint64_t sub_100124798(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(unsigned __int8 *)(result + 81);
    if (v2 != (_DWORD)v6)
    {
      v7 = sub_100003DB8(&qword_10032B0E0);
      v8 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v7, v8);
    }
    *(_BYTE *)(v5 + 81) = v2;
    sub_100124DD8(v6);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_100124854()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_release(*(_QWORD *)(v0 + 72));
}

_QWORD *sub_100124890()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = *v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v3 = type metadata accessor for Logger(0);
  sub_10000D744(v3, (uint64_t)qword_10033FD18);
  v5 = swift_retain_n(v0, v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v15 = (uint64_t)v1;
    v16 = v9;
    *(_DWORD *)v8 = 136446210;
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v2, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v8 + 4, v8 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%{public}s] deinit", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  swift_release(v1[2]);
  swift_release(v1[3]);
  swift_release(v1[4]);
  swift_release(v1[5]);
  swift_release(v1[6]);

  swift_bridgeObjectRelease(v1[8]);
  swift_release(v1[9]);
  return v1;
}

uint64_t sub_100124A88()
{
  uint64_t v0;

  sub_100124890();
  return swift_deallocClassInstance(v0, 82, 7);
}

uint64_t type metadata accessor for AppPropertiesModel()
{
  return objc_opt_self(_TtC8SOSBuddy18AppPropertiesModel);
}

uint64_t sub_100124AC8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = v1;
  v3 = result;
  v4 = *(unsigned __int8 *)(v1 + 80);
  if (v4 == 2)
  {
    if (result == 2)
      return result;
  }
  else if (result != 2 && ((((result & 1) == 0) ^ v4) & 1) != 0)
  {
    return result;
  }
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FD18);
  v7 = swift_retain_n(v1, v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v31 = v11;
    *(_DWORD *)v10 = 136446466;
    LOBYTE(v30) = v3;
    v12 = sub_100003DB8((uint64_t *)&unk_1003263F0);
    v14 = String.init<A>(describing:)(&v30, v12, v13);
    v16 = v15;
    v30 = sub_100172BEC(v14, v15, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v10 + 4, v10 + 12);
    v17 = swift_bridgeObjectRelease(v16);
    *(_WORD *)(v10 + 12) = 2082;
    LOBYTE(v30) = *(_BYTE *)(v2 + 80);
    v18 = String.init<A>(describing:)(&v30, v12, v17);
    v20 = v19;
    v30 = sub_100172BEC(v18, v19, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v10 + 14, v10 + 22);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "mainSceneIsForeground changed from: %{public}s to: %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(v2);
  }
  v21 = sub_100003DB8(&qword_10032B0E0);
  v22 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  Subject<>.send()(v21, v22);
  LOBYTE(v31) = *(_BYTE *)(v2 + 80);
  result = PassthroughSubject.send(_:)(&v31);
  v23 = *(_QWORD **)(v2 + 72);
  v24 = *(_BYTE *)(v2 + 80);
  v25 = v23[4];
  if ((v24 & 1) != 0)
  {
    if (v25)
      return result;
    v26 = v23[2];
    v27 = v23[3];
    v28 = type metadata accessor for PreventSuspensionAssertion();
    swift_allocObject(v28, 32, 7);
    swift_retain(v23);
    swift_bridgeObjectRetain(v27);
    v29 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, v26, v27);
    v25 = v23[4];
    v23[4] = v29;
    swift_release(v23);
  }
  else
  {
    v23[4] = 0;
  }
  return swift_release(v25);
}

uint64_t sub_100124DD8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_BYTE *)(v1 + 81) != (result & 1))
  {
    v2 = v1;
    v3 = result;
    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    v4 = type metadata accessor for Logger(0);
    sub_10000D744(v4, (uint64_t)qword_10033FD18);
    v6 = swift_retain_n(v1, v5);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(64, -1);
      v18 = v10;
      *(_DWORD *)v9 = 136446466;
      if ((v3 & 1) != 0)
        v11 = 1702195828;
      else
        v11 = 0x65736C6166;
      if ((v3 & 1) != 0)
        v12 = 0xE400000000000000;
      else
        v12 = 0xE500000000000000;
      v17 = sub_100172BEC(v11, v12, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease(v12);
      *(_WORD *)(v9 + 12) = 2082;
      if (*(_BYTE *)(v2 + 81))
        v13 = 1702195828;
      else
        v13 = 0x65736C6166;
      if (*(_BYTE *)(v2 + 81))
        v14 = 0xE400000000000000;
      else
        v14 = 0xE500000000000000;
      v17 = sub_100172BEC(v13, v14, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v9 + 14, v9 + 22);
      swift_release_n(v2);
      swift_bridgeObjectRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "appIsForeground changed from: %{public}s to: %{public}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {

      swift_release_n(v2);
    }
    v15 = sub_100003DB8(&qword_10032B0E0);
    v16 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v15, v16);
    LOBYTE(v18) = *(_BYTE *)(v2 + 81);
    return PassthroughSubject.send(_:)(&v18);
  }
  return result;
}

void sub_100125058(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Class isa;
  id v18;
  void *v19;
  id v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  NSString v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  id v29;
  _QWORD v30[5];
  _QWORD *v31;
  char v32[128];

  v3 = v2;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000D744(v6, (uint64_t)qword_10033FD18);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "bringForegroundWith()", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = objc_msgSend(objc_allocWithZone((Class)_LSOpenConfiguration), "init");
  v12 = sub_100003DB8((uint64_t *)&unk_100318F28);
  inited = swift_initStackObject(v12, v32);
  *(_OWORD *)(inited + 16) = xmmword_10024DEE0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyPromptUnlockDevice);
  *(_QWORD *)(inited + 40) = v14;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyUnlockDevice);
  *(_QWORD *)(inited + 88) = v15;
  *(_QWORD *)(inited + 120) = &type metadata for Bool;
  *(_BYTE *)(inited + 96) = 1;
  v16 = sub_10022499C(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v16);
  objc_msgSend(v11, "setFrontBoardOptions:", isa);

  objc_msgSend(v11, "setSensitive:", 1);
  v18 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (v18)
  {
    v19 = v18;
    v20 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v21 = objc_msgSend(v20, "bundleIdentifier");

    if (v21)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v23 = v22;

    }
    else
    {
      v23 = 0x8000000100260990;
    }
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v23);
    v25 = swift_allocObject(&unk_1002F14C8, 24, 7);
    swift_weakInit(v25 + 16, v3);
    v26 = (_QWORD *)swift_allocObject(&unk_1002F14F0, 40, 7);
    v26[2] = v25;
    v26[3] = a1;
    v26[4] = a2;
    v30[4] = sub_100125F90;
    v31 = v26;
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 1107296256;
    v30[2] = sub_1001256D4;
    v30[3] = &unk_1002F1508;
    v27 = _Block_copy(v30);
    v28 = v31;
    v29 = v11;
    swift_retain(a2);
    swift_release(v28);
    objc_msgSend(v19, "openApplicationWithBundleIdentifier:configuration:completionHandler:", v24, v29, v27);
    _Block_release(v27);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001253C4(char a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30[3];
  uint64_t v31;
  uint64_t v32;

  if ((a1 & 1) != 0)
  {
    v6 = a3 + 16;
    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10000D744(v7, (uint64_t)qword_10033FD18);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "bringForegroundWith()) succeeded", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    swift_beginAccess(v6, v30, 0, 0);
    Strong = swift_weakLoadStrong(v6);
    if (Strong)
    {
      v13 = Strong;
      v14 = *(_QWORD *)(Strong + 48);
      swift_retain(v14);
      swift_release(v13);
      v15 = sub_100003DB8(&qword_10032B0E0);
      v16 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v15, v16);
      swift_release(v14);
    }
  }
  else
  {
    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    v18 = type metadata accessor for Logger(0);
    sub_10000D744(v18, (uint64_t)qword_10033FD18);
    swift_errorRetain(a2);
    v19 = swift_errorRetain(a2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v30[0] = swift_slowAlloc(32, -1);
      v23 = v30[0];
      *(_DWORD *)v22 = 136446210;
      v31 = a2;
      swift_errorRetain(a2);
      v24 = sub_100003DB8(&qword_10031CF20);
      v26 = String.init<A>(describing:)(&v31, v24, v25);
      v28 = v27;
      v31 = sub_100172BEC(v26, v27, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease(v28);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "bringForegroundWith() failed: %{public}s", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

  }
  return a4(a1 & 1);
}

void sub_1001256D4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_100125734(char a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *oslog;
  int v7;
  uint64_t v8;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FD18);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 67240192;
    v7 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, &v8, v5 + 4, v5 + 8);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "bringForeground: success - %{BOOL,public}d", v5, 8u);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_100125854(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (*(unsigned __int8 *)(v1 + 41) != result)
  {
    v2 = v1;
    v3 = result;
    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    v4 = type metadata accessor for Logger(0);
    sub_10000D744(v4, (uint64_t)qword_10033FD18);
    v6 = swift_retain_n(v1, 2, v5);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(64, -1);
      v22 = v10;
      v11.n128_u64[0] = 136446466;
      *(_DWORD *)v9 = 136446466;
      LOBYTE(v21) = v3;
      v12 = String.init<A>(describing:)(&v21, &type metadata for AppRuntimeStateModel.Stage, v11);
      v14 = v13;
      v21 = sub_100172BEC(v12, v13, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease(v14);
      *(_WORD *)(v9 + 12) = 2082;
      LOBYTE(v21) = *(_BYTE *)(v2 + 41);
      v16 = String.init<A>(describing:)(&v21, &type metadata for AppRuntimeStateModel.Stage, v15);
      v18 = v17;
      v21 = sub_100172BEC(v16, v17, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v9 + 14, v9 + 22);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "App stage changed from: %{public}s to: %{public}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {

      swift_release_n(v2, 2);
    }
    v19 = sub_100003DB8(&qword_10032B0E0);
    v20 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    return Subject<>.send()(v19, v20);
  }
  return result;
}

uint64_t sub_100125A9C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  v3 = result;
  v4 = *(unsigned __int8 *)(v1 + 42);
  if (v4 == 2)
  {
    if (result == 2)
      return result;
  }
  else if (result != 2 && ((((result & 1) == 0) ^ v4) & 1) != 0)
  {
    return result;
  }
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FD18);
  v7 = swift_retain_n(v1, 2, v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v24 = v11;
    *(_DWORD *)v10 = 136446466;
    LOBYTE(v23) = v3;
    v12 = sub_100003DB8((uint64_t *)&unk_1003263F0);
    v14 = String.init<A>(describing:)(&v23, v12, v13);
    v16 = v15;
    v23 = sub_100172BEC(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v10 + 12) = 2082;
    LOBYTE(v23) = *(_BYTE *)(v2 + 42);
    v18 = String.init<A>(describing:)(&v23, v12, v17);
    v20 = v19;
    v23 = sub_100172BEC(v18, v19, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v10 + 14, v10 + 22);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "guidanceUIRequired changed from: %{public}s to: %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(v2, 2);
  }
  v21 = sub_100003DB8(&qword_10032B0E0);
  v22 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  Subject<>.send()(v21, v22);
  LOBYTE(v24) = *(_BYTE *)(v2 + 42);
  return PassthroughSubject.send(_:)(&v24);
}

uint64_t sub_100125D24()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  __n128 v4;
  __n128 v5;

  v1 = sub_100003DB8(&qword_100320D28);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v2 = swift_retain(v0);
  *(_QWORD *)(v0 + 32) = PassthroughSubject.init()(v2);
  *(_WORD *)(v0 + 40) = 0;
  *(_BYTE *)(v0 + 42) = 2;
  swift_release(v0);
  v3 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)(v0 + 16) = PassthroughSubject.init()(v4);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)(v0 + 24) = PassthroughSubject.init()(v5);
  return v0;
}

uint64_t sub_100125DD0()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 32));
}

uint64_t sub_100125DD8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocClassInstance(v0, 43, 7);
}

uint64_t type metadata accessor for AppRuntimeStateModel()
{
  return objc_opt_self(_TtC8SOSBuddy20AppRuntimeStateModel);
}

uint64_t storeEnumTagSinglePayload for AppRuntimeStateModel.Stage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_100125E78 + 4 * byte_100257265[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_100125EAC + 4 * asc_100257260[v4]))();
}

uint64_t sub_100125EAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100125EB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100125EBCLL);
  return result;
}

uint64_t sub_100125EC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100125ED0);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_100125ED4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100125EDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppRuntimeStateModel.Stage()
{
  return &type metadata for AppRuntimeStateModel.Stage;
}

unint64_t sub_100125EFC()
{
  unint64_t result;

  result = qword_100320D20;
  if (!qword_100320D20)
  {
    result = swift_getWitnessTable(&unk_10025734C, &type metadata for AppRuntimeStateModel.Stage);
    atomic_store(result, (unint64_t *)&qword_100320D20);
  }
  return result;
}

uint64_t sub_100125F40()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100125F64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100125F90(char a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1001253C4(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t (**)(_QWORD))(v2 + 24));
}

double sub_100125F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_100125FAC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100125FB4(unsigned __int8 *a1)
{
  uint64_t v1;

  return sub_100124798(a1, v1);
}

uint64_t destroy for RoadsideAssistanceQuestionnaireView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_release(a1[9]);
  return swift_release(a1[11]);
}

uint64_t initializeWithCopy for RoadsideAssistanceQuestionnaireView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v8 = a2[4];
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  v10 = a2[6];
  v9 = a2[7];
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v9;
  v11 = a2[8];
  v12 = a2[9];
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v12;
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  v13 = a2[11];
  *(_QWORD *)(a1 + 88) = v13;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v8);
  swift_retain(v10);
  swift_bridgeObjectRetain(v11);
  swift_retain(v12);
  swift_retain(v13);
  return a1;
}

uint64_t *assignWithCopy for RoadsideAssistanceQuestionnaireView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a1[4];
  v9 = a2[4];
  a1[4] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[5] = a2[5];
  v10 = a1[6];
  v11 = a2[6];
  a1[6] = v11;
  swift_retain(v11);
  swift_release(v10);
  a1[7] = a2[7];
  v12 = a2[8];
  v13 = a1[8];
  a1[8] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a1[9];
  v15 = a2[9];
  a1[9] = v15;
  swift_retain(v15);
  swift_release(v14);
  *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
  v16 = a1[11];
  v17 = a2[11];
  a1[11] = v17;
  swift_retain(v17);
  swift_release(v16);
  return a1;
}

uint64_t *assignWithTake for RoadsideAssistanceQuestionnaireView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  v7 = a1[4];
  v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_release(v7);
  v9 = a1[6];
  v10 = a2[6];
  a1[5] = a2[5];
  a1[6] = v10;
  swift_release(v9);
  a1[7] = a2[7];
  swift_bridgeObjectRelease(a1[8]);
  v11 = a1[9];
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  swift_release(v11);
  *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
  v12 = a1[11];
  a1[11] = a2[11];
  swift_release(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for RoadsideAssistanceQuestionnaireView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RoadsideAssistanceQuestionnaireView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RoadsideAssistanceQuestionnaireView()
{
  return &type metadata for RoadsideAssistanceQuestionnaireView;
}

uint64_t sub_1001262F8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029B1E8, 1);
}

uint64_t sub_100126308@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t OpaqueTypeConformance2;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t KeyPath;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  void (*v56)();
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  void (**v62)();
  _OWORD *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  __n128 v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (**v81)(uint64_t);
  void (*v82)(char *, uint64_t, __n128);
  __n128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  _OWORD *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t result;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)();
  unint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE v133[24];
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  _BYTE v137[24];
  __int128 v138;

  v2 = v1;
  v4 = sub_100003DB8(&qword_100320D30);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100320D38);
  v126 = *(_QWORD *)(v8 - 8);
  v127 = v8;
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100003DB8(&qword_100320D40);
  __chkstk_darwin(v125, v12);
  v14 = (char *)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_100003DB8(&qword_100320D48);
  __chkstk_darwin(v128, v15);
  v129 = (uint64_t)&v111 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003DB8(&qword_100320D50);
  v131 = *(_QWORD *)(v17 - 8);
  v132 = v17;
  __chkstk_darwin(v17, v18);
  v130 = (char *)&v111 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003DB8(&qword_100320D58);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v111 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100003DB8(&qword_100320D60);
  v26 = __chkstk_darwin(v24, v25);
  __chkstk_darwin(v26, v27);
  v31 = *(_QWORD *)(v2 + 32);
  if (!v31)
  {
    v105 = *(_QWORD *)(v2 + 40);
    v106 = type metadata accessor for RoadsideAssistanceModel();
    v107 = type metadata accessor for RoadsideAssistanceModel;
    v108 = &qword_100318688;
LABEL_9:
    v109 = sub_100056D60(v108, (uint64_t (*)(uint64_t))v107);
    result = EnvironmentObject.error()(0, v105, v106, v109);
    __break(1u);
    return result;
  }
  v32 = *(_QWORD *)(v31 + 104);
  if (v32)
  {
    v113 = v14;
    v114 = v31;
    v116 = v30;
    v117 = v23;
    v118 = (char *)&v111 - v28;
    v119 = v29;
    v120 = v20;
    v121 = v24;
    v122 = v4;
    v123 = v7;
    v124 = a1;
    v138 = *(_OWORD *)(v2 + 64);
    *(_OWORD *)v137 = *(_OWORD *)(v2 + 64);
    swift_retain(v32);
    v112 = sub_100003DB8(&qword_100320D78);
    State.projectedValue.getter(v133, v112);
    *(_QWORD *)v137 = *(_QWORD *)v133;
    *(_OWORD *)&v137[8] = *(_OWORD *)&v133[8];
    v33 = v11;
    v34 = sub_100003DB8(&qword_100320D80);
    v35 = sub_100003DB8(&qword_100320D88);
    v36 = sub_1000084FC(&qword_100320D90, &qword_100320D80, (uint64_t)&protocol conformance descriptor for [A]);
    v37 = sub_1000084FC(&qword_100320D98, &qword_100320D80, (uint64_t)&protocol conformance descriptor for [A]);
    v38 = sub_1000084FC(&qword_100320DA0, &qword_100320D80, (uint64_t)&protocol conformance descriptor for [A]);
    v39 = v32;
    v40 = sub_10012820C();
    v41 = sub_100128250();
    *(_QWORD *)v133 = &type metadata for QuestionnairePageView;
    *(_QWORD *)&v133[8] = &type metadata for QuestionnaireNavigationPage;
    *(_QWORD *)&v133[16] = &type metadata for QuestionnairePageView;
    v134 = v40;
    v135 = v41;
    v136 = v40;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v133, &opaque type descriptor for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>, 1);
    v110 = v41;
    v43 = v34;
    v44 = v33;
    v115 = v39;
    NavigationStack.init<>(path:root:)(v137, sub_100128204, v39, v43, v35, v36, v37, v38, OpaqueTypeConformance2, v110);
    v45 = *(_QWORD **)(v2 + 48);
    if (v45)
    {
      v46 = v45[9];
      v47 = v45[10];
      sub_100007BBC(v45 + 6, v46);
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(v47 + 24))(v133, v46, v47);
      v48 = v134;
      v49 = v135;
      sub_100007BBC(v133, v134);
      v50 = (*(uint64_t (**)(uint64_t, unint64_t))(v49 + 568))(v48, v49);
      KeyPath = swift_getKeyPath(&unk_1002573F8);
      v53 = v126;
      v52 = v127;
      v54 = (uint64_t)v113;
      (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v113, v44, v127);
      v55 = (uint64_t *)(v54 + *(int *)(v125 + 36));
      *v55 = KeyPath;
      v55[1] = v50;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v44, v52);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v133);
      v56 = (void (*)())swift_allocObject(&unk_1002F1618, 112, 7);
      v57 = *(_OWORD *)(v2 + 48);
      *((_OWORD *)v56 + 3) = *(_OWORD *)(v2 + 32);
      *((_OWORD *)v56 + 4) = v57;
      v58 = *(_OWORD *)(v2 + 80);
      *((_OWORD *)v56 + 5) = *(_OWORD *)(v2 + 64);
      *((_OWORD *)v56 + 6) = v58;
      v59 = *(_OWORD *)(v2 + 16);
      *((_OWORD *)v56 + 1) = *(_OWORD *)v2;
      *((_OWORD *)v56 + 2) = v59;
      v60 = v129;
      sub_100128340(v54, v129);
      v61 = v128;
      v62 = (void (**)())(v60 + *(int *)(v128 + 36));
      *v62 = sub_100128338;
      v62[1] = v56;
      v62[2] = 0;
      v62[3] = 0;
      sub_100128388((uint64_t *)v2);
      sub_100007FF0(v54, &qword_100320D40);
      *(_OWORD *)v133 = v138;
      State.wrappedValue.getter(v137, v112);
      v63 = (_OWORD *)swift_allocObject(&unk_1002F1640, 112, 7);
      v64 = *(_OWORD *)(v2 + 48);
      v63[3] = *(_OWORD *)(v2 + 32);
      v63[4] = v64;
      v65 = *(_OWORD *)(v2 + 80);
      v63[5] = *(_OWORD *)(v2 + 64);
      v63[6] = v65;
      v66 = *(_OWORD *)(v2 + 16);
      v63[1] = *(_OWORD *)v2;
      v63[2] = v66;
      sub_100128388((uint64_t *)v2);
      v67 = sub_100128418();
      v68 = sub_100128520();
      v69 = v130;
      View.onChange<A>(of:initial:_:)(v137, 0, sub_100128410, v63, v61, v43, v67, v68, v70);
      swift_release(v63);
      swift_bridgeObjectRelease(*(_QWORD *)v137);
      sub_100007FF0(v60, &qword_100320D48);
      v71 = *(_QWORD *)(v114 + 32);
      v72 = (_OWORD *)swift_allocObject(&unk_1002F1668, 112, 7);
      v73 = *(_OWORD *)(v2 + 48);
      v72[3] = *(_OWORD *)(v2 + 32);
      v72[4] = v73;
      v74 = *(_OWORD *)(v2 + 80);
      v72[5] = *(_OWORD *)(v2 + 64);
      v72[6] = v74;
      v75 = *(_OWORD *)(v2 + 16);
      v72[1] = *(_OWORD *)v2;
      v72[2] = v75;
      v76 = swift_allocObject(&unk_1002F1690, 32, 7);
      *(_QWORD *)(v76 + 16) = sub_100128588;
      *(_QWORD *)(v76 + 24) = v72;
      v77 = v131;
      v78 = v132;
      v79 = (uint64_t)v117;
      (*(void (**)(char *, char *, uint64_t))(v131 + 16))(v117, v69, v132);
      v80 = v120;
      *(_QWORD *)(v79 + *(int *)(v120 + 52)) = v71;
      v81 = (uint64_t (**)(uint64_t))(v79 + *(int *)(v80 + 56));
      *v81 = sub_100021640;
      v81[1] = (uint64_t (*)(uint64_t))v76;
      sub_100128388((uint64_t *)v2);
      v82 = *(void (**)(char *, uint64_t, __n128))(v77 + 8);
      v83 = swift_retain(v71);
      v82(v69, v78, v83);
      *(_OWORD *)v137 = *(_OWORD *)(v2 + 80);
      v84 = sub_100003DB8(&qword_100316780);
      State.projectedValue.getter(v133, v84);
      v85 = *(_OWORD *)v133;
      v86 = v133[16];
      v87 = (_OWORD *)swift_allocObject(&unk_1002F16B8, 112, 7);
      v88 = *(_OWORD *)(v2 + 48);
      v87[3] = *(_OWORD *)(v2 + 32);
      v87[4] = v88;
      v89 = *(_OWORD *)(v2 + 80);
      v87[5] = *(_OWORD *)(v2 + 64);
      v87[6] = v89;
      v90 = *(_OWORD *)(v2 + 16);
      v87[1] = *(_OWORD *)v2;
      v87[2] = v90;
      sub_100128388((uint64_t *)v2);
      v91 = sub_1000084FC(&qword_100320D68, &qword_100320D58, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
      v92 = sub_1000AA0DC();
      v93 = v116;
      View.fullScreenCover<A>(isPresented:onDismiss:content:)(v85, *((_QWORD *)&v85 + 1), v86, 0, 0, sub_1001285B8, v87, v80, &type metadata for BusinessOnboardingView, v91, v92);
      swift_release(*((_QWORD *)&v85 + 1));
      swift_release(v87);
      swift_release(v85);
      sub_100007FF0(v79, &qword_100320D58);
      v94 = v119;
      v95 = v118;
      v96 = v121;
      (*(void (**)(char *, uint64_t, uint64_t))(v119 + 32))(v118, v93, v121);
      v97 = v123;
      (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v123, v95, v96);
      swift_storeEnumTagMultiPayload(v97, v122, 0);
      *(_QWORD *)v133 = v80;
      *(_QWORD *)&v133[8] = &type metadata for BusinessOnboardingView;
      *(_QWORD *)&v133[16] = v91;
      v134 = v92;
      v98 = swift_getOpaqueTypeConformance2(v133, &opaque type descriptor for <<opaque return type of View.fullScreenCover<A>(isPresented:onDismiss:content:)>>, 1);
      v99 = sub_1001281C0();
      _ConditionalContent<>.init(storage:)(v97, v96, &type metadata for FallbackQuestionnairePageView, v98, v99);
      swift_release(v115);
      return (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v95, v96);
    }
    v105 = *(_QWORD *)(v2 + 56);
    v106 = type metadata accessor for UIMetrics();
    v107 = type metadata accessor for UIMetrics;
    v108 = (unint64_t *)&qword_100316A00;
    goto LABEL_9;
  }
  swift_storeEnumTagMultiPayload(v7, v4, 1);
  v101 = sub_1000084FC(&qword_100320D68, &qword_100320D58, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
  v102 = sub_1000AA0DC();
  *(_QWORD *)v133 = v20;
  *(_QWORD *)&v133[8] = &type metadata for BusinessOnboardingView;
  *(_QWORD *)&v133[16] = v101;
  v134 = v102;
  v103 = swift_getOpaqueTypeConformance2(v133, &opaque type descriptor for <<opaque return type of View.fullScreenCover<A>(isPresented:onDismiss:content:)>>, 1);
  v104 = sub_1001281C0();
  return _ConditionalContent<>.init(storage:)(v7, v24, &type metadata for FallbackQuestionnairePageView, v103, v104);
}

uint64_t sub_100126C18()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  _QWORD v16[3];
  uint64_t v17[3];

  sub_1000AD2FC((uint64_t)&v14);
  v0 = v14;
  v1 = v15;
  v2 = v16[0];
  v3 = v16[1];
  v4 = v16[2];
  sub_1000D6344((uint64_t)v16, (uint64_t)v17);
  swift_retain(v0);
  sub_1000D638C(v17);
  v5 = type metadata accessor for UIMetrics();
  v6 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
  v7 = EnvironmentObject.init()(v5, v6);
  v12 = v8;
  v13 = v1;
  v9 = sub_10012820C();
  v10 = sub_100128250();
  View.navigationDestination<A, B>(for:destination:)(&type metadata for QuestionnaireNavigationPage, sub_100126D4C, 0, &type metadata for QuestionnairePageView, &type metadata for QuestionnaireNavigationPage, &type metadata for QuestionnairePageView, v9, v10, v9, v7, v12, v0, v13, v2, v3, v4);
  swift_release(v0);
  sub_1000D63B8(v17);
  swift_release(v0);
  swift_release(v7);
  return sub_10007BB74(v2, v3, v4);
}

uint64_t sub_100126D4C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  swift_retain(*a1);
  sub_10007BB44(v5, v6, v7);
  v8 = type metadata accessor for UIMetrics();
  v9 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
  result = EnvironmentObject.init()(v8, v9);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  return result;
}

void sub_100126DE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 104);
    if (v3)
    {
      swift_retain(*(_QWORD *)(v2 + 104));
      v4 = sub_1000AD388();
      swift_release(v3);
    }
    else
    {
      v4 = _swiftEmptyArrayStorage;
    }
    v10 = *(_OWORD *)(a1 + 64);
    v9 = v4;
    v5 = sub_100003DB8(&qword_100320D78);
    State.wrappedValue.setter(&v9, v5);
    sub_100126EB8();
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40);
    v7 = type metadata accessor for RoadsideAssistanceModel();
    v8 = sub_100056D60(&qword_100318688, (uint64_t (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel);
    EnvironmentObject.error()(0, v6, v7, v8);
    __break(1u);
  }
}

void sub_100126EB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;

  v1 = v0;
  v12 = *(_OWORD *)(v0 + 80);
  v2 = sub_100003DB8(&qword_100316780);
  State.wrappedValue.getter(&v11, v2);
  if ((v11 & 1) != 0)
    return;
  v3 = *(_QWORD *)(v0 + 32);
  if (!v3)
  {
LABEL_10:
    v7 = *(_QWORD *)(v1 + 40);
    v8 = type metadata accessor for RoadsideAssistanceModel();
    v9 = sub_100056D60(&qword_100318688, (uint64_t (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel);
    EnvironmentObject.error()(0, v7, v8, v9);
    __break(1u);
    return;
  }
  v4 = *(_QWORD *)(v3 + 104);
  if (!v4)
    return;
  swift_beginAccess(v4 + 48, &v12, 0, 0);
  v5 = *(_QWORD *)(v4 + 144);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(_BYTE *)(v6 + v5 + 31) == 2)
  {
    if (objc_msgSend((id)objc_opt_self(CKBusinessOnboardingController), "shouldShowBusinessOnboarding"))
    {
      v11 = *(_OWORD *)(v1 + 80);
      v10 = 1;
      State.wrappedValue.setter(&v10, v2);
    }
  }
}

void sub_100126FD0(uint64_t **a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, char *);
  unint64_t v23;
  void (*v24)(uint64_t, char *);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void (*v35)(uint64_t, char *);
  uint64_t *v36;
  __n128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __n128 v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  os_log_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  __n128 v49;
  uint64_t v50;
  uint64_t *v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  Swift::String v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v90;
  Swift::String v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  __n128 v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)();
  unint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  os_log_t v109;
  unint64_t v110;
  int v111;
  unint64_t v112;
  void (*v113)(uint64_t, uint64_t, char *);
  void (*v114)(uint64_t, char *);
  char *v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = __chkstk_darwin(v9, v10);
  __chkstk_darwin(v11, v12);
  v16 = (uint64_t)&v106 - v15;
  v17 = *a1;
  v18 = *a2;
  v19 = (*a2)[2];
  if (v19 < v17[2])
  {
    v20 = a3[4];
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 104);
      v119 = v13;
      *(_QWORD *)&v118 = v14;
      if (v21)
      {
        swift_retain(v21);
        v22 = (void (*)(uint64_t, char *))sub_1000AD388();
        swift_release(v21);
      }
      else
      {
        v22 = (void (*)(uint64_t, char *))_swiftEmptyArrayStorage;
      }
      v23 = *((_QWORD *)v22 + 2);
      v24 = v22;
      v25 = v23 - v19;
      if (v23 <= v19)
      {
        swift_bridgeObjectRelease(v24);
        return;
      }
      v114 = v24;
      v110 = v23;
      v112 = v19;
      if (qword_1003158B0 != -1)
        goto LABEL_53;
LABEL_8:
      v26 = (char *)v6;
      v6 = sub_10000D744(v6, (uint64_t)qword_10033FEC8);
      v113 = *(void (**)(uint64_t, uint64_t, char *))(v7 + 16);
      v113(v16, v6, v26);
      sub_100128388(a3);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      sub_100128388(a3);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      v28 = Logger.logObject.getter(v27);
      v111 = static os_log_type_t.default.getter(v28);
      v29 = os_log_type_enabled(v28, (os_log_type_t)v111);
      v120 = a3;
      v116 = v6;
      v117 = v20;
      v115 = v26;
      if (v29)
      {
        v109 = v28;
        v30 = swift_slowAlloc(32, -1);
        v108 = swift_slowAlloc(96, -1);
        v121 = v108;
        *(_DWORD *)v30 = 136446723;
        v31 = *(_QWORD *)(v20 + 104);
        if (v31)
        {
          swift_retain(*(_QWORD *)(v20 + 104));
          v32 = sub_1000AD18C();
          v34 = v33;
          swift_release(v31);
        }
        else
        {
          v34 = 0xE100000000000000;
          v32 = 63;
        }
        v123 = sub_100172BEC(v32, v34, &v121);
        v107 = &v124;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124, v30 + 4, v30 + 12);
        swift_bridgeObjectRelease(v34);
        v36 = v120;
        sub_1001286BC(v120);
        sub_1001286BC(v36);
        *(_WORD *)(v30 + 12) = 2081;
        v106 = v30 + 14;
        v37 = swift_bridgeObjectRetain(v17);
        v38 = Array.description.getter(v37);
        v40 = v39;
        swift_bridgeObjectRelease(v17);
        v123 = sub_100172BEC(v38, v40, &v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124, v106, v30 + 22);
        swift_bridgeObjectRelease_n(v17, 2);
        swift_bridgeObjectRelease(v40);
        *(_WORD *)(v30 + 22) = 2081;
        v41 = swift_bridgeObjectRetain(v18);
        v42 = Array.description.getter(v41);
        v44 = v43;
        swift_bridgeObjectRelease(v18);
        v123 = sub_100172BEC(v42, v44, &v121);
        a3 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v107, v30 + 24, v30 + 32);
        swift_bridgeObjectRelease_n(v18, 2);
        swift_bridgeObjectRelease(v44);
        v45 = v109;
        _os_log_impl((void *)&_mh_execute_header, v109, (os_log_type_t)v111, "[%{public}s] Path reduced from %{private}s to %{private}s", (uint8_t *)v30, 0x20u);
        v46 = v108;
        swift_arrayDestroy(v108, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v30, -1, -1);

        v35 = *(void (**)(uint64_t, char *))(v7 + 8);
        v35(v16, v115);
        v6 = v116;
        v20 = v117;
      }
      else
      {
        sub_1001286BC(a3);
        sub_1001286BC(a3);

        swift_bridgeObjectRelease_n(v18, 2);
        swift_bridgeObjectRelease_n(v17, 2);
        v35 = *(void (**)(uint64_t, char *))(v7 + 8);
        v35(v16, v26);
      }
      v47 = a3[2];
      if (!v47)
      {
        v101 = a3[3];
        v102 = type metadata accessor for AppRuntimeStateModel();
        v103 = type metadata accessor for AppRuntimeStateModel;
        v104 = &qword_100318498;
        goto LABEL_57;
      }
      v48 = *(unsigned __int8 *)(v47 + 41);
      v49 = swift_bridgeObjectRelease(v114);
      if (v48 == 8)
      {
        v114 = v35;
        v50 = v118;
        v7 = (uint64_t)v115;
        ((void (*)(_QWORD, uint64_t, char *, __n128))v113)(v118, v6, v115, v49);
        sub_100128388(a3);
        v51 = sub_100128388(a3);
        v52 = Logger.logObject.getter(v51);
        v16 = static os_log_type_t.default.getter(v52);
        if (os_log_type_enabled(v52, (os_log_type_t)v16))
        {
          v53 = swift_slowAlloc(22, -1);
          v54 = swift_slowAlloc(32, -1);
          v121 = v54;
          *(_DWORD *)v53 = 136446466;
          v55 = *(_QWORD *)(v20 + 104);
          if (v55)
          {
            swift_retain(*(_QWORD *)(v20 + 104));
            v56 = sub_1000AD18C();
            v58 = v57;
            swift_release(v55);
          }
          else
          {
            v58 = 0xE100000000000000;
            v56 = 63;
          }
          v123 = sub_100172BEC(v56, v58, &v121);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124, v53 + 4, v53 + 12);
          swift_bridgeObjectRelease(v58);
          a3 = v120;
          sub_1001286BC(v120);
          sub_1001286BC(a3);
          *(_WORD *)(v53 + 12) = 2050;
          v123 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124, v53 + 14, v53 + 22);
          _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v16, "[%{public}s] Going back %{public}ld page(s)", (uint8_t *)v53, 0x16u);
          swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v54, -1, -1);
          swift_slowDealloc(v53, -1, -1);

          v114(v118, (char *)v7);
          v6 = v116;
          v20 = v117;
        }
        else
        {
          sub_1001286BC(a3);
          sub_1001286BC(a3);

          v114(v50, (char *)v7);
        }
        if (v25 < 0)
        {
          __break(1u);
          goto LABEL_55;
        }
        if (v110 == v112)
          return;
        v18 = &qword_10032B0E0;
        v17 = &qword_100317750;
        *(_QWORD *)&v71 = 136446210;
        v118 = v71;
        v115 = (char *)&type metadata for Any + 8;
        while (1)
        {
          v72 = *(_QWORD *)(v20 + 104);
          if (v72)
          {
            v73 = *(_QWORD *)(v72 + 32);
            v74 = __CFADD__(v73, 1);
            v75 = v73 + 1;
            if (v74)
            {
              __break(1u);
LABEL_53:
              swift_once(&qword_1003158B0, sub_1000D9854);
              goto LABEL_8;
            }
            *(_QWORD *)(v72 + 32) = v75;
            swift_retain(v72);
            v16 = sub_1000B147C();
            v76 = *(_QWORD *)(v72 + 32);
            if (!v76 || (v77 = v76 - 1, (*(_QWORD *)(v72 + 32) = v77) == 0))
            {
              if ((*(_BYTE *)(v72 + 40) & 1) != 0)
              {
                *(_BYTE *)(v72 + 40) = 0;
                v7 = sub_100003DB8(&qword_10032B0E0);
                v78 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
                Subject<>.send()(v7, v78);
              }
              if (*(_BYTE *)(v72 + 41) == 1)
              {
                *(_BYTE *)(v72 + 41) = 0;
                v7 = sub_100003DB8(&qword_10032B0E0);
                v79 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
                Subject<>.send()(v7, v79);
              }
            }
            swift_release(v72);
            if ((v16 & 1) == 0)
            {
              sub_100128388(a3);
              v80 = sub_100128388(a3);
              v81 = Logger.logObject.getter(v80);
              v16 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v81, (os_log_type_t)v16))
              {
                v82 = swift_slowAlloc(12, -1);
                v7 = swift_slowAlloc(32, -1);
                v123 = v7;
                *(_DWORD *)v82 = v118;
                v83 = *(_QWORD *)(v20 + 104);
                if (v83)
                {
                  if (*(_BYTE *)(*(_QWORD *)(v83 + 264) + 32))
                    v84 = 82;
                  else
                    v84 = 69;
                  v121 = v84;
                  v122 = 0xE100000000000000;
                  swift_bridgeObjectRetain(0xE100000000000000);
                  v85._countAndFlagsBits = 46;
                  v85._object = (void *)0xE100000000000000;
                  String.append(_:)(v85);
                  v119 = v7;
                  v87 = v121;
                  v86 = v122;
                  swift_retain(v83);
                  swift_bridgeObjectRelease(0xE100000000000000);
                  v121 = *(_QWORD *)(v83 + 272);
                  v88 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
                  v90 = v89;
                  v121 = v87;
                  v122 = v86;
                  v7 = v119;
                  swift_bridgeObjectRetain(v86);
                  v91._countAndFlagsBits = v88;
                  v20 = v117;
                  v91._object = v90;
                  String.append(_:)(v91);
                  swift_release(v83);
                  v92 = v86;
                  v6 = v116;
                  swift_bridgeObjectRelease(v92);
                  v93 = v90;
                  a3 = v120;
                  swift_bridgeObjectRelease(v93);
                  v94 = v121;
                  v95 = v122;
                }
                else
                {
                  v95 = 0xE100000000000000;
                  v94 = 63;
                }
                v18 = &qword_10032B0E0;
                *(_QWORD *)(v82 + 4) = sub_100172BEC(v94, v95, &v123);
                swift_bridgeObjectRelease(v95);
                sub_1001286BC(a3);
                sub_1001286BC(a3);
                _os_log_impl((void *)&_mh_execute_header, v81, (os_log_type_t)v16, "[%{public}s] Failed trying to go back", (uint8_t *)v82, 0xCu);
                swift_arrayDestroy(v7, 1, v115);
                swift_slowDealloc(v7, -1, -1);
                swift_slowDealloc(v82, -1, -1);

                v17 = &qword_100317750;
              }
              else
              {
                sub_1001286BC(a3);
                sub_1001286BC(a3);

              }
            }
          }
          if (!--v25)
            return;
        }
      }
      v59 = v119;
      v60 = v115;
      ((void (*)(uint64_t, uint64_t, char *, __n128))v113)(v119, v6, v115, v49);
      sub_100128388(a3);
      sub_100128388(a3);
      sub_100128388(a3);
      v61 = sub_100128388(a3);
      v62 = Logger.logObject.getter(v61);
      v63 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v62, v63))
      {
        v114 = v35;
        v64 = v20;
        v65 = swift_slowAlloc(22, -1);
        v66 = swift_slowAlloc(64, -1);
        v121 = v66;
        *(_DWORD *)v65 = 136446466;
        v67 = *(_QWORD *)(v64 + 104);
        if (v67)
        {
          swift_retain(*(_QWORD *)(v64 + 104));
          v68 = sub_1000AD18C();
          v70 = v69;
          swift_release(v67);
        }
        else
        {
          v70 = 0xE100000000000000;
          v68 = 63;
        }
        v123 = sub_100172BEC(v68, v70, &v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124, v65 + 4, v65 + 12);
        swift_bridgeObjectRelease(v70);
        v96 = v120;
        sub_1001286BC(v120);
        sub_1001286BC(v96);
        *(_WORD *)(v65 + 12) = 2082;
        LOBYTE(v123) = *(_BYTE *)(v47 + 41);
        v98 = String.init<A>(describing:)(&v123, &type metadata for AppRuntimeStateModel.Stage, v97);
        v100 = v99;
        v123 = sub_100172BEC(v98, v99, &v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124, v65 + 14, v65 + 22);
        swift_bridgeObjectRelease(v100);
        sub_1001286BC(v96);
        sub_1001286BC(v96);
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "[%{public}s] RoadsideAssistanceQuestionnaireView: requesting going back on %{public}s stage", (uint8_t *)v65, 0x16u);
        swift_arrayDestroy(v66, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v66, -1, -1);
        swift_slowDealloc(v65, -1, -1);

        v114(v119, v60);
      }
      else
      {
        sub_1001286BC(a3);
        sub_1001286BC(a3);
        sub_1001286BC(a3);
        sub_1001286BC(a3);

        v35(v59, v60);
      }
    }
    else
    {
LABEL_55:
      v101 = a3[5];
      v102 = type metadata accessor for RoadsideAssistanceModel();
      v103 = type metadata accessor for RoadsideAssistanceModel;
      v104 = &qword_100318688;
LABEL_57:
      v105 = sub_100056D60(v104, (uint64_t (*)(uint64_t))v103);
      EnvironmentObject.error()(0, v101, v102, v105);
      __break(1u);
    }
  }
}

void sub_100127B74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __n128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  os_log_t v52;
  uint64_t v53;
  _OWORD v54[2];
  _QWORD *v55;
  __int128 v56;

  v2 = type metadata accessor for AccessibilityNotification.ScreenChanged(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 104);
    if (v8)
    {
      swift_retain(*(_QWORD *)(v7 + 104));
      v9 = sub_1000AD388();
      swift_release(v8);
      v56 = *(_OWORD *)(a1 + 64);
      v54[0] = *(_OWORD *)(a1 + 64);
      v10 = sub_100003DB8(&qword_100320D78);
      State.wrappedValue.getter(&v55, v10);
      v11 = (uint64_t)v55;
      v12 = sub_1001DD1CC((uint64_t)v9, (uint64_t)v55);
      swift_bridgeObjectRelease(v11);
      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease(v9);
        if (qword_1003158B0 != -1)
          swift_once(&qword_1003158B0, sub_1000D9854);
        v13 = type metadata accessor for Logger(0);
        sub_10000D744(v13, (uint64_t)qword_10033FEC8);
        sub_100128388((uint64_t *)a1);
        v14 = sub_100128388((uint64_t *)a1);
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v15, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc(12, -1);
          v18 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v54[0] = v18;
          *(_DWORD *)v17 = 136446210;
          v19 = *(_QWORD *)(v7 + 104);
          if (v19)
          {
            swift_retain(*(_QWORD *)(v7 + 104));
            v20 = sub_1000AD18C();
            v22 = v21;
            swift_release(v19);
          }
          else
          {
            v22 = 0xE100000000000000;
            v20 = 63;
          }
          v55 = (_QWORD *)sub_100172BEC(v20, v22, (uint64_t *)v54);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v17 + 4, v17 + 12);
          swift_bridgeObjectRelease(v22);
          sub_1001286BC((uint64_t *)a1);
          sub_1001286BC((uint64_t *)a1);
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%{public}s] Questionnaire path has not changed", v17, 0xCu);
          swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v18, -1, -1);
          swift_slowDealloc(v17, -1, -1);
        }
        else
        {
          sub_1001286BC((uint64_t *)a1);
          sub_1001286BC((uint64_t *)a1);
        }

      }
      else
      {
        if (qword_1003158B0 != -1)
          swift_once(&qword_1003158B0, sub_1000D9854);
        v23 = type metadata accessor for Logger(0);
        sub_10000D744(v23, (uint64_t)qword_10033FEC8);
        sub_100128388((uint64_t *)a1);
        sub_100128388((uint64_t *)a1);
        sub_100128388((uint64_t *)a1);
        swift_bridgeObjectRetain(v9);
        sub_100128388((uint64_t *)a1);
        swift_bridgeObjectRetain(v9);
        v25 = Logger.logObject.getter(v24);
        v26 = static os_log_type_t.default.getter(v25);
        if (os_log_type_enabled(v25, (os_log_type_t)v26))
        {
          v51 = v26;
          v52 = v25;
          v27 = v10;
          v28 = swift_slowAlloc(32, -1);
          v50 = swift_slowAlloc(96, -1);
          v55 = (_QWORD *)v50;
          *(_DWORD *)v28 = 136446723;
          v29 = *(_QWORD *)(v7 + 104);
          if (v29)
          {
            swift_retain(*(_QWORD *)(v7 + 104));
            v30 = sub_1000AD18C();
            v32 = v31;
            swift_release(v29);
          }
          else
          {
            v32 = 0xE100000000000000;
            v30 = 63;
          }
          *(_QWORD *)&v54[0] = sub_100172BEC(v30, v32, (uint64_t *)&v55);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v54, (char *)v54 + 8, v28 + 4, v28 + 12);
          swift_bridgeObjectRelease(v32);
          sub_1001286BC((uint64_t *)a1);
          sub_1001286BC((uint64_t *)a1);
          *(_WORD *)(v28 + 12) = 2081;
          v54[0] = v56;
          v49 = v27;
          State.wrappedValue.getter(&v53, v27);
          v33 = v53;
          v35 = Array.description.getter(v34);
          v37 = v36;
          swift_bridgeObjectRelease(v33);
          *(_QWORD *)&v54[0] = sub_100172BEC(v35, v37, (uint64_t *)&v55);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v54, (char *)v54 + 8, v28 + 14, v28 + 22);
          swift_bridgeObjectRelease(v37);
          sub_1001286BC((uint64_t *)a1);
          sub_1001286BC((uint64_t *)a1);
          *(_WORD *)(v28 + 22) = 2081;
          v38 = swift_bridgeObjectRetain(v9);
          v39 = Array.description.getter(v38);
          v41 = v40;
          swift_bridgeObjectRelease(v9);
          *(_QWORD *)&v54[0] = sub_100172BEC(v39, v41, (uint64_t *)&v55);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v54, (char *)v54 + 8, v28 + 24, v28 + 32);
          swift_bridgeObjectRelease_n(v9, 2);
          swift_bridgeObjectRelease(v41);
          v42 = v52;
          _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v51, "[%{public}s] Questionnaire path changed from %{private}s to %{private}s", (uint8_t *)v28, 0x20u);
          v43 = v50;
          swift_arrayDestroy(v50, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v43, -1, -1);
          v44 = v28;
          v10 = v49;
          swift_slowDealloc(v44, -1, -1);

        }
        else
        {
          sub_1001286BC((uint64_t *)a1);
          sub_1001286BC((uint64_t *)a1);
          sub_1001286BC((uint64_t *)a1);
          sub_1001286BC((uint64_t *)a1);

          swift_bridgeObjectRelease_n(v9, 2);
        }
        v54[0] = v56;
        v55 = v9;
        State.wrappedValue.setter(&v55, v10);
        sub_100126EB8();
        memset(v54, 0, sizeof(v54));
        AccessibilityNotification.ScreenChanged.init(_:)(v54);
        _AccessibilityNotifications.post()();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      }
    }
  }
  else
  {
    v45 = *(_QWORD *)(a1 + 40);
    v46 = type metadata accessor for RoadsideAssistanceModel();
    v47 = sub_100056D60(&qword_100318688, (uint64_t (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel);
    EnvironmentObject.error()(0, v45, v46, v47);
    __break(1u);
  }
}

uint64_t sub_100128180@<X0>(uint64_t a1@<X8>)
{
  return sub_100126308(a1);
}

unint64_t sub_1001281C0()
{
  unint64_t result;

  result = qword_100320D70;
  if (!qword_100320D70)
  {
    result = swift_getWitnessTable(&unk_100253CE8, &type metadata for FallbackQuestionnairePageView);
    atomic_store(result, (unint64_t *)&qword_100320D70);
  }
  return result;
}

uint64_t sub_100128204()
{
  return sub_100126C18();
}

unint64_t sub_10012820C()
{
  unint64_t result;

  result = qword_100320DA8;
  if (!qword_100320DA8)
  {
    result = swift_getWitnessTable(&unk_100253C98, &type metadata for QuestionnairePageView);
    atomic_store(result, (unint64_t *)&qword_100320DA8);
  }
  return result;
}

unint64_t sub_100128250()
{
  unint64_t result;

  result = qword_100320DB0;
  if (!qword_100320DB0)
  {
    result = swift_getWitnessTable(&unk_10025126C, &type metadata for QuestionnaireNavigationPage);
    atomic_store(result, (unint64_t *)&qword_100320DB0);
  }
  return result;
}

uint64_t sub_100128294@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accentColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001282BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accentColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001282E4(_QWORD *a1)
{
  __n128 v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.accentColor.setter(v1);
}

uint64_t sub_10012830C(_QWORD *a1)
{
  __n128 v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.accentColor.setter(v1);
}

void sub_100128338()
{
  uint64_t v0;

  sub_100126DE8(v0 + 16);
}

uint64_t sub_100128340(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100320D40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100128388(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[6];
  v6 = a1[8];
  v7 = a1[9];
  swift_retain(a1[11]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v6);
  swift_retain(v7);
  return a1;
}

void sub_100128410(uint64_t **a1, uint64_t **a2)
{
  uint64_t v2;

  sub_100126FD0(a1, a2, (uint64_t *)(v2 + 16));
}

unint64_t sub_100128418()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100320DB8;
  if (!qword_100320DB8)
  {
    v1 = sub_100007FAC(&qword_100320D48);
    sub_100128484();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320DB8);
  }
  return result;
}

unint64_t sub_100128484()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100320DC0;
  if (!qword_100320DC0)
  {
    v1 = sub_100007FAC(&qword_100320D40);
    sub_1000084FC(&qword_100320DC8, &qword_100320D38, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
    sub_1000084FC(&qword_100316C00, &qword_100316C08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320DC0);
  }
  return result;
}

unint64_t sub_100128520()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100320DD0;
  if (!qword_100320DD0)
  {
    v1 = sub_100007FAC(&qword_100320D80);
    sub_10007BB00();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100320DD0);
  }
  return result;
}

void sub_100128588()
{
  uint64_t v0;

  sub_100127B74(v0 + 16);
}

uint64_t sub_100128590()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t *sub_1001285B8@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t v1;
  uint64_t (*v3)();
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v3 = (uint64_t (*)())swift_allocObject(&unk_1002F16E0, 112, 7);
  v4 = *(_OWORD *)(v1 + 64);
  *((_OWORD *)v3 + 3) = *(_OWORD *)(v1 + 48);
  *((_OWORD *)v3 + 4) = v4;
  v5 = *(_OWORD *)(v1 + 96);
  *((_OWORD *)v3 + 5) = *(_OWORD *)(v1 + 80);
  *((_OWORD *)v3 + 6) = v5;
  v6 = *(_OWORD *)(v1 + 32);
  *((_OWORD *)v3 + 1) = *(_OWORD *)(v1 + 16);
  *((_OWORD *)v3 + 2) = v6;
  *a1 = sub_100128674;
  a1[1] = v3;
  return sub_100128388((uint64_t *)(v1 + 16));
}

uint64_t sub_100128620()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  swift_release(v0[11]);
  swift_release(v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100128674()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;

  v4 = *(_OWORD *)(v0 + 96);
  v3 = 0;
  v1 = sub_100003DB8(&qword_100316780);
  return State.wrappedValue.setter(&v3, v1);
}

uint64_t *sub_1001286BC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[6];
  v6 = a1[9];
  v7 = a1[11];
  swift_bridgeObjectRelease(a1[8]);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  swift_release(v6);
  swift_release(v7);
  return a1;
}

unint64_t sub_100128748()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100320DD8;
  if (!qword_100320DD8)
  {
    v1 = sub_100007FAC(&qword_100320DE0);
    v2[0] = sub_100007FAC(&qword_100320D58);
    v2[1] = &type metadata for BusinessOnboardingView;
    v2[2] = sub_1000084FC(&qword_100320D68, &qword_100320D58, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
    v2[3] = sub_1000AA0DC();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fullScreenCover<A>(isPresented:onDismiss:content:)>>, 1);
    sub_1001281C0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320DD8);
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionHeaderView()
{
  return &type metadata for QuestionHeaderView;
}

uint64_t sub_100128820(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029B264, 1);
}

double sub_100128830@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double result;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  char v22;

  v4 = *(unsigned __int8 *)(a1 + 32);
  if (v4 < 2)
  {
    v16 = a1;
    LOBYTE(v17) = 0;
LABEL_6:
    v8 = sub_100128994();
    v9 = sub_1001289D8();
    swift_retain(a1);
    _ConditionalContent<>.init(storage:)(&v16, &type metadata for DefaultQuestionHeaderView, &type metadata for BuiltInQuestionHeaderView, v8, v9);
    v16 = v20;
    v17 = BYTE8(v20);
    v18 = 0;
    v19 = 0;
    goto LABEL_7;
  }
  if (v4 != 2)
  {
    v16 = a1;
    LOBYTE(v17) = 1;
    goto LABEL_6;
  }
  v5 = type metadata accessor for UIMetrics();
  v6 = sub_10007DE90();
  swift_retain(a1);
  v16 = EnvironmentObject.init()(v5, v6);
  v17 = v7;
  v18 = a1;
  v19 = 1;
LABEL_7:
  v10 = sub_100003DB8(&qword_100320DE8);
  v11 = sub_100128970();
  v12 = sub_100128A1C();
  _ConditionalContent<>.init(storage:)(&v16, v10, &type metadata for FreeFormQuestionHeaderView, v11, v12);
  result = *(double *)&v20;
  v14 = v21;
  v15 = v22;
  *(_OWORD *)a2 = v20;
  *(_QWORD *)(a2 + 16) = v14;
  *(_BYTE *)(a2 + 24) = v15;
  return result;
}

double sub_100128968@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100128830(*v1, a1);
}

uint64_t sub_100128970()
{
  return sub_100008140(&qword_100320DF0, &qword_100320DE8, (void (*)(void))sub_100128994, (void (*)(void))sub_1001289D8);
}

unint64_t sub_100128994()
{
  unint64_t result;

  result = qword_100320DF8;
  if (!qword_100320DF8)
  {
    result = swift_getWitnessTable(&unk_10025752C, &type metadata for DefaultQuestionHeaderView);
    atomic_store(result, (unint64_t *)&qword_100320DF8);
  }
  return result;
}

unint64_t sub_1001289D8()
{
  unint64_t result;

  result = qword_100320E00;
  if (!qword_100320E00)
  {
    result = swift_getWitnessTable(&unk_10025B99C, &type metadata for BuiltInQuestionHeaderView);
    atomic_store(result, (unint64_t *)&qword_100320E00);
  }
  return result;
}

unint64_t sub_100128A1C()
{
  unint64_t result;

  result = qword_100320E08;
  if (!qword_100320E08)
  {
    result = swift_getWitnessTable(&unk_1002574DC, &type metadata for FreeFormQuestionHeaderView);
    atomic_store(result, (unint64_t *)&qword_100320E08);
  }
  return result;
}

uint64_t *sub_100128A64(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_retain(v3);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for FreeFormQuestionHeaderView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

uint64_t *assignWithTake for FreeFormQuestionHeaderView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_release(v6);
  return a1;
}

ValueMetadata *type metadata accessor for FreeFormQuestionHeaderView()
{
  return &type metadata for FreeFormQuestionHeaderView;
}

ValueMetadata *type metadata accessor for DefaultQuestionHeaderView()
{
  return &type metadata for DefaultQuestionHeaderView;
}

uint64_t sub_100128B68()
{
  return sub_100008140(&qword_100320E10, &qword_100320E18, (void (*)(void))sub_100128970, (void (*)(void))sub_100128A1C);
}

uint64_t sub_100128B9C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029B2D0, 1);
}

uint64_t sub_100128BAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;

  v3 = *v1;
  v5 = *(_QWORD *)(*v1 + 72);
  v4 = *(_QWORD *)(*v1 + 80);
  v7 = *(_QWORD *)(v3 + 88);
  v6 = *(_QWORD *)(v3 + 96);
  v8 = type metadata accessor for UIMetrics();
  v9 = sub_10007DE90();
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  result = EnvironmentObject.init()(v8, v9);
  *a1 = result;
  a1[1] = v11;
  a1[2] = v5;
  a1[3] = v4;
  a1[4] = v7;
  a1[5] = v6;
  return result;
}

uint64_t sub_100128C28@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];
  uint64_t v69;
  uint64_t v70;
  _OWORD v71[7];

  v67 = a1;
  v2 = sub_100003DB8(&qword_100320E80);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100003DB8(&qword_100320E88);
  __chkstk_darwin(v64, v6);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100003DB8(&qword_100320E90);
  __chkstk_darwin(v65, v9);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100003DB8(&qword_100320E98);
  v13 = __chkstk_darwin(v66, v12);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  v18 = (char *)&v64 - v17;
  v19 = *v1;
  if (*v1)
  {
    v20 = *(_QWORD *)(v19 + 72);
    v21 = *(_QWORD *)(v19 + 80);
    sub_100007BBC((_QWORD *)(v19 + 48), v20);
    v22 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v21 + 24))(v68, v20, v21);
    *(_QWORD *)v5 = static HorizontalAlignment.center.getter(v22);
    *((_QWORD *)v5 + 1) = 0;
    v5[16] = 0;
    v23 = sub_100003DB8(&qword_100320EA0);
    sub_1001290D8(v1, v68, (uint64_t)&v5[*(int *)(v23 + 44)]);
    v24 = *(id *)(v19 + 112);
    LOBYTE(v20) = static UIContentSizeCategory.>= infix(_:_:)(v24, UIContentSizeCategoryAccessibilityExtraLarge);

    v25 = 0.0;
    if ((v20 & 1) == 0)
    {
      v26 = v69;
      v27 = v70;
      sub_100007BBC(v68, v69);
      v25 = (*(double (**)(uint64_t, uint64_t))(v27 + 120))(v26, v27);
    }
    v28 = *(id *)(v19 + 112);
    v29 = static UIContentSizeCategory.>= infix(_:_:)(v28, UIContentSizeCategoryAccessibilityExtraLarge);

    if ((v29 & 1) != 0)
    {
      v31 = INFINITY;
    }
    else
    {
      v32 = v69;
      v33 = v70;
      sub_100007BBC(v68, v69);
      v31 = (*(double (**)(uint64_t, uint64_t))(v33 + 120))(v32, v33);
    }
    v34 = static Alignment.center.getter(v30);
    v37 = v36;
    if (v25 > v31)
    {
      v38 = static os_log_type_t.fault.getter(v35);
      v39 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    }
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v71, 0, 1, 0, 1, 0, 1, *(_QWORD *)&v25, 0, 0, 1, *(_QWORD *)&v31, 0, v34, v37);
    sub_10000B234((uint64_t)v5, (uint64_t)v8, &qword_100320E80);
    v40 = &v8[*(int *)(v64 + 36)];
    v41 = v71[5];
    *((_OWORD *)v40 + 4) = v71[4];
    *((_OWORD *)v40 + 5) = v41;
    *((_OWORD *)v40 + 6) = v71[6];
    v42 = v71[1];
    *(_OWORD *)v40 = v71[0];
    *((_OWORD *)v40 + 1) = v42;
    v43 = v71[3];
    *((_OWORD *)v40 + 2) = v71[2];
    *((_OWORD *)v40 + 3) = v43;
    v44 = sub_100007FF0((uint64_t)v5, &qword_100320E80);
    v45 = static Edge.Set.top.getter(v44);
    v46 = v69;
    v47 = v70;
    sub_100007BBC(v68, v69);
    v48 = (*(double (**)(uint64_t, uint64_t))(v47 + 128))(v46, v47);
    v49 = EdgeInsets.init(_all:)(v48);
    v51 = v50;
    v53 = v52;
    v55 = v54;
    sub_10000B234((uint64_t)v8, (uint64_t)v11, &qword_100320E88);
    v56 = &v11[*(int *)(v65 + 36)];
    *v56 = v45;
    *((double *)v56 + 1) = v49;
    *((_QWORD *)v56 + 2) = v51;
    *((_QWORD *)v56 + 3) = v53;
    *((_QWORD *)v56 + 4) = v55;
    v56[40] = 0;
    v57 = sub_100007FF0((uint64_t)v8, &qword_100320E88);
    v58 = static Edge.Set.bottom.getter(v57);
    sub_10000B234((uint64_t)v11, (uint64_t)v15, &qword_100320E90);
    v59 = &v15[*(int *)(v66 + 36)];
    *v59 = v58;
    *(_OWORD *)(v59 + 8) = 0u;
    *(_OWORD *)(v59 + 24) = 0u;
    v59[40] = 1;
    sub_100007FF0((uint64_t)v11, &qword_100320E90);
    sub_10000B458((uint64_t)v15, (uint64_t)v18, &qword_100320E98);
    sub_10000B458((uint64_t)v18, v67, &qword_100320E98);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v68);
  }
  else
  {
    v61 = v1[1];
    v62 = type metadata accessor for UIMetrics();
    v63 = sub_10007DE90();
    result = EnvironmentObject.error()(0, v61, v62, v63);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001290D8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  id v34;
  char v35;
  BOOL v36;
  uint64_t KeyPath;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  id v52;
  char v53;
  double v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  id v79;
  BOOL v80;
  uint64_t v81;
  void *v82;
  UIContentSizeCategory v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  id v98;
  double v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t result;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  UIContentSizeCategory v125;
  _BYTE v126[224];
  _OWORD v127[14];
  _OWORD v128[10];
  uint64_t v129;
  double v130;
  char v131;
  __int128 v132;
  __int128 v133;
  char v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _OWORD v146[12];
  _OWORD v147[10];
  uint64_t v148;
  uint64_t v149;
  char v150;
  _QWORD *v151;
  uint64_t v152;
  BOOL v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  BOOL v159;

  v121 = a3;
  v119 = type metadata accessor for AccessibilityTraits(0);
  v117 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119, v5);
  v116 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_10031D258);
  v9 = __chkstk_darwin(v7, v8);
  v122 = (uint64_t)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9, v11);
  v118 = (char *)&v110 - v13;
  __chkstk_darwin(v12, v14);
  v124 = (uint64_t)&v110 - v15;
  v16 = a1[3];
  *(_QWORD *)&v135 = a1[2];
  *((_QWORD *)&v135 + 1) = v16;
  v17 = sub_10002B3F4();
  v18 = swift_bridgeObjectRetain(v16);
  v111 = v17;
  v19 = Text.init<A>(_:)(&v135, &type metadata for String, v17, v18);
  v21 = v20;
  v23 = v22;
  v25 = v24 & 1;
  v26 = a2[3];
  v27 = a2[4];
  v112 = a2;
  sub_100007BBC(a2, v26);
  v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 152))(v26, v27);
  v114 = Text.font(_:)(v28, v19, v21, v25, v23);
  v115 = v29;
  v31 = v30;
  v113 = v32;
  swift_release(v28);
  sub_10002B438(v19, v21, v25);
  swift_bridgeObjectRelease(v23);
  v120 = a1;
  v33 = *a1;
  if (*a1)
  {
    v34 = *(id *)(v33 + 112);
    v35 = static UIContentSizeCategory.>= infix(_:_:)(v34, UIContentSizeCategoryAccessibilityExtraLarge);

    v36 = (v35 & 1) == 0;
    KeyPath = swift_getKeyPath(&unk_100257580);
    v123 = v33;
    v38 = *(id *)(v33 + 112);
    v39 = static Alignment.center.getter(v38);
    v41 = v40;
    v125 = UIContentSizeCategoryAccessibilityExtraLarge;
    v42 = static UIContentSizeCategory.>= infix(_:_:)(v38, UIContentSizeCategoryAccessibilityExtraLarge);
    if ((v42 & 1) != 0)
    {
      v43 = static Alignment.center.getter(v42);
      v45 = static Alignment.== infix(_:_:)(v39, v41, v43, v44);
      if ((v45 & 1) != 0)
      {
        v39 = static Alignment.leading.getter(v45, v46);
        v41 = v47;
      }
    }

    v49 = v114;
    v48 = v115;
    v154 = v114;
    v155 = v31;
    v50 = v113 & 1;
    v156 = v113 & 1;
    v157 = v115;
    v158 = KeyPath;
    v159 = v36;
    sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v147, 0.0, 1, 0.0, 1, v39, v41);
    sub_10002B438(v49, v31, v50);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v48);
    v51 = v123;
    v52 = *(id *)(v123 + 112);
    v53 = static UIContentSizeCategory.>= infix(_:_:)(v52, v125);

    if ((v53 & 1) != 0)
      v54 = 1.0;
    else
      v54 = 0.5;
    v55 = swift_getKeyPath(&unk_1002575B0);
    v141 = v147[6];
    v142 = v147[7];
    v143 = v147[8];
    v144 = v147[9];
    v137 = v147[2];
    v138 = v147[3];
    v139 = v147[4];
    v140 = v147[5];
    v135 = v147[0];
    v136 = v147[1];
    *(_QWORD *)&v145 = v55;
    *((double *)&v145 + 1) = v54;
    v56 = v116;
    static AccessibilityTraits.isHeader.getter();
    v57 = sub_100003DB8(&qword_10031D278);
    v58 = sub_1000A9FC0();
    v59 = (uint64_t)v118;
    View.accessibility(addTraits:)(v56, v57, v58);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v56, v119);
    v146[8] = v143;
    v146[9] = v144;
    v146[10] = v145;
    v146[4] = v139;
    v146[5] = v140;
    v146[7] = v142;
    v146[6] = v141;
    v146[0] = v135;
    v146[1] = v136;
    v146[3] = v138;
    v146[2] = v137;
    sub_100038994((uint64_t)v146);
    sub_10000B458(v59, v124, &qword_10031D258);
    v60 = v120[5];
    v61 = HIBYTE(v60) & 0xF;
    if ((v60 & 0x2000000000000000) == 0)
      v61 = v120[4] & 0xFFFFFFFFFFFFLL;
    if (v61)
    {
      *(_QWORD *)&v135 = v120[4];
      *((_QWORD *)&v135 + 1) = v60;
      v62 = swift_bridgeObjectRetain(v60);
      v63 = v51;
      v64 = Text.init<A>(_:)(&v135, &type metadata for String, v111, v62);
      v66 = v65;
      v68 = v67;
      v70 = v69 & 1;
      v71 = v112[3];
      v72 = v112[4];
      sub_100007BBC(v112, v71);
      v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 160))(v71, v72);
      v74 = Text.font(_:)(v73, v64, v66, v70, v68);
      v76 = v75;
      LODWORD(v119) = v77;
      v120 = v78;
      swift_release(v73);
      sub_10002B438(v64, v66, v70);
      swift_bridgeObjectRelease(v68);
      v79 = *(id *)(v63 + 112);
      LOBYTE(v66) = static UIContentSizeCategory.>= infix(_:_:)(v79, v125);

      v80 = (v66 & 1) == 0;
      v81 = swift_getKeyPath(&unk_100257580);
      v82 = *(void **)(v63 + 112);
      v83 = v125;
      v84 = v82;
      v85 = static Alignment.center.getter(v84);
      v87 = v86;
      v88 = static UIContentSizeCategory.>= infix(_:_:)(v84, v83);
      if ((v88 & 1) != 0)
      {
        v89 = static Alignment.center.getter(v88);
        v91 = static Alignment.== infix(_:_:)(v85, v87, v89, v90);
        if ((v91 & 1) != 0)
        {
          v85 = static Alignment.leading.getter(v91, v92);
          v87 = v93;
        }
      }

      v148 = v74;
      v149 = v76;
      v94 = v119 & 1;
      v150 = v119 & 1;
      v95 = v76;
      v96 = v74;
      v97 = v120;
      v151 = v120;
      v152 = v81;
      v153 = v80;
      sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v127, 0.0, 1, 0.0, 1, v85, v87);
      sub_10002B438(v96, v95, v94);
      swift_release(v81);
      swift_bridgeObjectRelease(v97);
      v98 = *(id *)(v123 + 112);
      LOBYTE(v96) = static UIContentSizeCategory.>= infix(_:_:)(v98, v83);

      if ((v96 & 1) != 0)
        v99 = 1.0;
      else
        v99 = 0.5;
      v100 = swift_getKeyPath(&unk_1002575B0);
      v101 = static Edge.Set.top.getter(v100);
      v126[0] = 1;
      v128[6] = v127[6];
      v128[7] = v127[7];
      v128[8] = v127[8];
      v128[9] = v127[9];
      v128[2] = v127[2];
      v128[3] = v127[3];
      v128[4] = v127[4];
      v128[5] = v127[5];
      v128[0] = v127[0];
      v128[1] = v127[1];
      v129 = v100;
      v130 = v99;
      v131 = v101;
      v132 = 0u;
      v133 = 0u;
      v134 = 1;
      ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(v128);
    }
    else
    {
      sub_10012A1D0(v128);
    }
    sub_10000B458((uint64_t)v128, (uint64_t)&v135, &qword_100320EA8);
    v102 = v124;
    v103 = v122;
    sub_10000B234(v124, v122, &qword_10031D258);
    sub_10000B458((uint64_t)&v135, (uint64_t)v126, &qword_100320EA8);
    v104 = v121;
    sub_10000B234(v103, v121, &qword_10031D258);
    v105 = v104 + *(int *)(sub_100003DB8(&qword_100320EB0) + 48);
    sub_10000B458((uint64_t)v126, (uint64_t)v127, &qword_100320EA8);
    sub_10000B458((uint64_t)v127, v105, &qword_100320EA8);
    sub_10012A154((uint64_t)v127, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10002B700);
    sub_100007FF0(v102, &qword_10031D258);
    sub_10000B458((uint64_t)v126, (uint64_t)v128, &qword_100320EA8);
    sub_10012A154((uint64_t)v128, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10002B984);
    return sub_100007FF0(v103, &qword_10031D258);
  }
  else
  {
    v107 = v120[1];
    v108 = type metadata accessor for UIMetrics();
    v109 = sub_10007DE90();
    result = EnvironmentObject.error()(0, v107, v108, v109);
    __break(1u);
  }
  return result;
}

uint64_t sub_100129888@<X0>(uint64_t a1@<X8>)
{
  return sub_100128C28(a1);
}

uint64_t sub_1001298C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t result;
  uint64_t v39;
  unint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[7];

  v8 = sub_100003DB8(&qword_100320E20);
  __chkstk_darwin(v8, v9);
  v11 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003DB8(&qword_100320E28);
  __chkstk_darwin(v12, v13);
  v15 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v16 = a1[9];
    v17 = a1[10];
    sub_100007BBC(a1 + 6, v16);
    v18 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v17 + 24))(v41, v16, v17);
    *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v18);
    *((_QWORD *)v11 + 1) = 0;
    v11[16] = 0;
    v19 = sub_100003DB8(&qword_100320E30);
    sub_100129B7C(a3, v41, (uint64_t)&v11[*(int *)(v19 + 44)]);
    v20 = v42;
    v21 = v43;
    sub_100007BBC(v41, v42);
    v22 = (*(double (**)(uint64_t, uint64_t))(v21 + 144))(v20, v21) * 0.5;
    v23 = v42;
    v24 = v43;
    sub_100007BBC(v41, v42);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 144))(v23, v24);
    v27 = v26;
    v28 = static Alignment.center.getter(v25);
    v31 = v30;
    if (v22 > v27)
    {
      v32 = static os_log_type_t.fault.getter(v29);
      v33 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    }
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, 0, 1, 0, 1, 0, 1, *(_QWORD *)&v22, 0, 0, 1, *(_QWORD *)&v27, 0, v28, v31);
    sub_10000B234((uint64_t)v11, (uint64_t)v15, &qword_100320E20);
    v34 = &v15[*(int *)(v12 + 36)];
    v35 = v44[5];
    *((_OWORD *)v34 + 4) = v44[4];
    *((_OWORD *)v34 + 5) = v35;
    *((_OWORD *)v34 + 6) = v44[6];
    v36 = v44[1];
    *(_OWORD *)v34 = v44[0];
    *((_OWORD *)v34 + 1) = v36;
    v37 = v44[3];
    *((_OWORD *)v34 + 2) = v44[2];
    *((_OWORD *)v34 + 3) = v37;
    sub_100007FF0((uint64_t)v11, &qword_100320E20);
    sub_10000B458((uint64_t)v15, a4, &qword_100320E28);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v41);
  }
  else
  {
    v39 = type metadata accessor for UIMetrics();
    v40 = sub_10007DE90();
    result = EnvironmentObject.error()(0, a2, v39, v40);
    __break(1u);
  }
  return result;
}

double sub_100129B7C@<D0>(uint64_t a1@<X2>, _QWORD *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double result;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;

  v47 = a3;
  v46 = type metadata accessor for AccessibilityTraits(0);
  v45 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46, v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  v48 = v8;
  v49 = v9;
  v10 = sub_10002B3F4();
  v11 = swift_bridgeObjectRetain(v9);
  v12 = Text.init<A>(_:)(&v48, &type metadata for String, v10, v11);
  v14 = v13;
  v16 = v15;
  v18 = v17 & 1;
  v19 = a2[3];
  v20 = a2[4];
  sub_100007BBC(a2, v19);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 152))(v19, v20);
  v22 = Text.font(_:)(v21, v12, v14, v18, v16);
  v24 = v23;
  v43 = v25;
  v44 = v26;
  swift_release(v21);
  sub_10002B438(v12, v14, v18);
  swift_bridgeObjectRelease(v16);
  v28 = static Alignment.center.getter(v27);
  _FrameLayout.init(width:height:alignment:)(&v62, 0, 1, 0, 1, v28, v29);
  v30 = v62;
  LOBYTE(v16) = v63;
  v31 = v64;
  LOBYTE(v12) = v65;
  v33 = v66;
  v32 = v67;
  KeyPath = swift_getKeyPath(&unk_100257580);
  v35 = swift_getKeyPath(&unk_1002575B0);
  v48 = v22;
  v49 = v24;
  v50 = v43 & 1;
  v51 = v44;
  v52 = v30;
  v53 = v16;
  v54 = v31;
  v55 = v12;
  v56 = v33;
  v57 = v32;
  v58 = KeyPath;
  v59 = 1;
  v60 = v35;
  v61 = 0x3FE0000000000000;
  static AccessibilityTraits.isHeader.getter();
  v36 = sub_100003DB8(&qword_100320E38);
  v37 = sub_100129E08();
  View.accessibility(addTraits:)(v7, v36, v37);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v7, v46);
  v38 = v51;
  v39 = v58;
  v40 = v60;
  sub_10002B438(v48, v49, v50);
  swift_release(v40);
  swift_release(v39);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v38).n128_u64[0];
  return result;
}

uint64_t sub_100129DDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001298C0(*(_QWORD **)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100129DE8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029B2A8, 1);
}

unint64_t sub_100129E08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100320E40;
  if (!qword_100320E40)
  {
    v1 = sub_100007FAC(&qword_100320E38);
    sub_100129E8C();
    sub_1000084FC(&qword_1003192C0, &qword_1003192C8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320E40);
  }
  return result;
}

unint64_t sub_100129E8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100320E48;
  if (!qword_100320E48)
  {
    v1 = sub_100007FAC(&qword_100320E50);
    sub_100129F10();
    sub_1000084FC(&qword_100318300, &qword_100318308, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320E48);
  }
  return result;
}

unint64_t sub_100129F10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100320E58;
  if (!qword_100320E58)
  {
    v1 = sub_100007FAC(&qword_100320E60);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320E58);
  }
  return result;
}

uint64_t initializeWithCopy for DefaultQuestionnaireHeaderView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  v5 = a2[3];
  v4 = a2[4];
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  v6 = a2[5];
  *(_QWORD *)(a1 + 40) = v6;
  swift_retain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for DefaultQuestionnaireHeaderView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t *assignWithTake for DefaultQuestionnaireHeaderView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  v5 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v5);
  v6 = a2[5];
  v7 = a1[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for DefaultQuestionnaireHeaderView()
{
  return &type metadata for DefaultQuestionnaireHeaderView;
}

unint64_t sub_10012A0CC()
{
  unint64_t result;

  result = qword_100320E68;
  if (!qword_100320E68)
  {
    result = swift_getWitnessTable(&unk_100257600, &type metadata for DefaultQuestionnaireHeaderView);
    atomic_store(result, (unint64_t *)&qword_100320E68);
  }
  return result;
}

uint64_t sub_10012A110()
{
  return sub_10012A2B8(&qword_100320E70, &qword_100320E28, &qword_100320E78, &qword_100320E20);
}

uint64_t sub_10012A144(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029B2F8, 1);
}

uint64_t sub_10012A154(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 216);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    v4);
  return a1;
}

double sub_10012A1D0(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 201) = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_10012A1F8()
{
  return sub_10002B614(&qword_100320EB8, &qword_100320E98, (void (*)(void))sub_10012A22C);
}

unint64_t sub_10012A22C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100320EC0;
  if (!qword_100320EC0)
  {
    v1 = sub_100007FAC(&qword_100320E90);
    sub_10012A2B8(&qword_100320EC8, &qword_100320E88, &qword_100320ED0, &qword_100320E80);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100320EC0);
  }
  return result;
}

uint64_t sub_10012A2B8(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100007FAC(a2);
    sub_1000084FC(a3, a4, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ConnectionAssistantEarthRenderer.__allocating_init(device:buffers:renderPipelines:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, 64, 7);
  ConnectionAssistantEarthRenderer.init(device:buffers:renderPipelines:)(a1, a2, a3);
  return v7;
}

_QWORD *ConnectionAssistantEarthRenderer.init(device:buffers:renderPipelines:)(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  double v12;
  id v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3[2] = a2;
  v3[3] = a3;
  v7 = type metadata accessor for ConnectionAssistantRendererEarthOutline();
  v8 = swift_allocObject(v7, 106, 7);
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_WORD *)(v8 + 104) = 1;
  *(_QWORD *)(v8 + 16) = a1;
  v3[7] = v8;
  swift_unknownObjectRetain_n(a1, 2);
  swift_retain(a2);
  v9 = objc_msgSend(a1, "newBufferWithLength:options:", 192, 1, swift_retain(a3).n128_f64[0]);
  if (v9
    && (swift_unknownObjectRelease(a1),
        v3[4] = v9,
        (v10 = objc_msgSend((id)swift_unknownObjectRetain(a1), "newBufferWithLength:options:", 176, 1)) != 0))
  {
    v11 = v10;
    *(_QWORD *)&v12 = swift_unknownObjectRelease(a1).n128_u64[0];
    v3[5] = v11;
    v13 = objc_msgSend(a1, "newBufferWithLength:options:", 48, 1, v12);
    if (v13)
    {
      v14 = v13;
      swift_release(a2);
      swift_release(a3);
      swift_unknownObjectRelease(a1);
      v3[6] = v14;
      return v3;
    }
    v18 = sub_10001D534();
    v19 = swift_allocError(&type metadata for ConnectionAssistantRenderer.Buffers.Error, v18, 0, 0);
    swift_willThrow(v19);
    swift_release(a2);
    swift_release(a3);
    v17 = 1;
  }
  else
  {
    v15 = sub_10001D534();
    v16 = swift_allocError(&type metadata for ConnectionAssistantRenderer.Buffers.Error, v15, 0, 0);
    swift_willThrow(v16);
    swift_release(a2);
    swift_release(a3);
    swift_unknownObjectRelease(a1);
    v17 = 0;
  }
  swift_unknownObjectRelease(a1);
  swift_release(v3[2]);
  swift_release(v3[3]);
  if (v9)
    swift_unknownObjectRelease(v3[4]);
  if (v17)
    swift_unknownObjectRelease(v3[5]);
  swift_release(v3[7]);
  v20 = type metadata accessor for ConnectionAssistantEarthRenderer();
  swift_deallocPartialClassInstance(v3, v20, 64, 7);
  return v3;
}

_QWORD *ConnectionAssistantEarthRenderer.deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_unknownObjectRelease(v0[4]);
  swift_unknownObjectRelease(v0[5]);
  swift_unknownObjectRelease(v0[6]);
  swift_release(v0[7]);
  return v0;
}

uint64_t ConnectionAssistantEarthRenderer.__deallocating_deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_unknownObjectRelease(v0[4]);
  swift_unknownObjectRelease(v0[5]);
  swift_unknownObjectRelease(v0[6]);
  swift_release(v0[7]);
  return swift_deallocClassInstance(v0, 64, 7);
}

void sub_10012A638(float32x4_t *a1, uint64_t a2, void *a3, double a4, double a5)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  float v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  float v21;
  float v22;
  int v23;
  int v24;
  void *v25;
  float *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int32 v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  void *v41;
  float v42;
  float32x4_t v43;
  float v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t *v49;
  id v50;
  void *v51;
  float *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSString v59;
  simd_float4 v60;
  float32x4_t v61;
  simd_float4 v62;
  float32x4_t v63;
  uint64_t v64;
  simd_float4 v65;
  float32x4_t v66;
  float32x4_t v67;
  simd_float4 v68;
  float32x4_t v69;
  float32x4_t v70;
  int v71;
  float32x4_t v72;
  uint64_t v73;
  float32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  float32x4_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  float v82;
  __int128 v83;
  float v84;
  __int128 v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  char v94[24];
  char v95[24];
  char v96[24];
  _BYTE v97[112];
  _OWORD v98[4];
  uint64_t v99;
  uint64_t v100;
  int v101;
  char v102;
  simd_float4x4 v103;
  simd_float4x4 v104;

  v6 = v5;
  ConnectionAssistantEarth.project(camera:)((float32x4_t *)a2, (uint64_t)v97, a5);
  sub_10012AD50((uint64_t)v97, (uint64_t)v98);
  if ((v102 & 1) == 0)
  {
    v83 = v98[2];
    v85 = v98[1];
    v78 = v98[0];
    v81 = v98[3];
    v75 = v99;
    v73 = v100;
    v71 = v101;
    v10 = (_QWORD *)v5[7];
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = *(double *)(a2 + 16);
    ConnectionAssistantRendererEarthOutline.loadTexturesIfNecessary(in:)(*(_QWORD *)a2, v12, v13);
    v15 = a1[4].f32[1];
    v14 = a1[4].f32[2];
    v90 = *(float32x4_t *)(a2 + 208);
    v92 = *(float32x4_t *)(a2 + 192);
    v86 = *(float32x4_t *)(a2 + 240);
    v88 = *(float32x4_t *)(a2 + 224);
    *(double *)v16.i64 = ConnectionAssistantEarth.model.getter();
    v20 = v15 * v14;
    v103.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, v16.f32[0]), v90, *(float32x2_t *)v16.f32, 1), v88, v16, 2), v86, v16, 3);
    v103.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, v17.f32[0]), v90, *(float32x2_t *)v17.f32, 1), v88, v17, 2), v86, v17, 3);
    v103.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, v18.f32[0]), v90, *(float32x2_t *)v18.f32, 1), v88, v18, 2), v86, v18, 3);
    v103.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, v19.f32[0]), v90, *(float32x2_t *)v19.f32, 1), v88, v19, 2), v86, v19, 3);
    v104 = __invert_f4(v103);
    v104.columns[0].i32[3] = 0;
    v104.columns[1].i32[3] = 0;
    v65 = v104.columns[1];
    v68 = v104.columns[0];
    v104.columns[2].i32[3] = 0;
    v104.columns[3].i32[3] = 0;
    v60 = v104.columns[3];
    v62 = v104.columns[2];
    v21 = ConnectionAssistantCamera.Viewport.normalizedPointSize.getter(v11, v12, v13);
    v22 = v13;
    v23 = *(_DWORD *)(a2 + 32);
    v24 = a1[4].i32[3];
    v25 = (void *)v5[4];
    v26 = (float *)objc_msgSend((id)swift_unknownObjectRetain(v6[4]), "contents");
    v27 = v25;
    *(_OWORD *)v26 = v85;
    *((_OWORD *)v26 + 1) = v83;
    *((_OWORD *)v26 + 2) = v81;
    *((simd_float4 *)v26 + 3) = v68;
    *((simd_float4 *)v26 + 4) = v65;
    *((simd_float4 *)v26 + 5) = v62;
    *((simd_float4 *)v26 + 6) = v60;
    v84 = v21;
    v26[28] = v21;
    v26[29] = v22;
    v82 = v13;
    *((_DWORD *)v26 + 30) = v23;
    *((_DWORD *)v26 + 31) = v24;
    *((_OWORD *)v26 + 8) = v78;
    v26[36] = v15;
    v26[37] = v15 * v15;
    *((_QWORD *)v26 + 19) = v75;
    *((_QWORD *)v26 + 20) = v73;
    *((_DWORD *)v26 + 42) = v71;
    v26[43] = v15 * 0.6;
    v26[44] = v15;
    v26[45] = v20;
    v28 = v6[3];
    v29 = sub_10022634C(1);
    if (v29)
    {
      v30 = v29;
      v76 = v12;
      v79 = v11;
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(a3, "setLabel:", v31);

      objc_msgSend(a3, "setRenderPipelineState:", v30);
      v32 = v6[2];
      objc_msgSend(a3, "setVertexBuffer:offset:atIndex:", *(_QWORD *)(v32 + 24), 0, 0);
      objc_msgSend(a3, "setVertexBuffer:offset:atIndex:", *(_QWORD *)(v32 + 32), 0, 1);
      objc_msgSend(a3, "setFragmentBuffer:offset:atIndex:", v27, 0, 0);
      v33 = swift_beginAccess(v10 + 7, v94, 0, 0).n128_u64[0];
      v34 = v10[7];
      if (v34)
      {
        v35 = v10[8];
        v36 = v10[9];
        swift_unknownObjectRetain(v10[7]);
        swift_unknownObjectRetain(v35);
        swift_unknownObjectRetain(v36);
        objc_msgSend(a3, "setFragmentTexture:atIndex:", v34, 0);
        objc_msgSend(a3, "setFragmentTexture:atIndex:", v35, 1);
        objc_msgSend(a3, "setFragmentTexture:atIndex:", v36, 2);
        swift_unknownObjectRelease(v36);
        swift_unknownObjectRelease(v35);
        v33 = swift_unknownObjectRelease(v34).n128_u64[0];
      }
      objc_msgSend(a3, "drawPrimitives:vertexStart:vertexCount:", 4, 0, 4, *(double *)&v33, *(_OWORD *)&v60);
      swift_unknownObjectRelease(v30);
      v11 = v79;
      v12 = v76;
    }
    swift_beginAccess(v28 + 48, v96, 0, 0);
    v37 = *(_DWORD *)(v28 + 108);
    v80 = *(_OWORD *)(v28 + 128);
    v61 = *(float32x4_t *)(a2 + 320);
    v63 = *(float32x4_t *)(a2 + 336);
    v66 = *(float32x4_t *)(a2 + 352);
    v69 = *(float32x4_t *)(a2 + 368);
    *(double *)v38.i64 = ConnectionAssistantEarth.model.getter();
    v74 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v61, v39.f32[0]), v63, *(float32x2_t *)v39.f32, 1), v66, v39, 2), v69, v39, 3);
    v77 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v61, v38.f32[0]), v63, *(float32x2_t *)v38.f32, 1), v66, v38, 2), v69, v38, 3);
    v72 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v61, v43.f32[0]), v63, *(float32x2_t *)v43.f32, 1), v66, v43, 2), v69, v43, 3);
    v70 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v61, v40.f32[0]), v63, *(float32x2_t *)v40.f32, 1), v66, v40, 2), v69, v40, 3);
    v41 = (void *)v6[5];
    v42 = 1.0;
    v43.i32[0] = 1.0;
    if (v11)
    {
      v43.i32[0] = 1.0;
      if (v12)
      {
        v44 = (float)v11 / (float)v12;
        v42 = fminf(v44, 1.0);
        v43.f32[0] = fmaxf(v44, 1.0);
      }
    }
    v43.f32[1] = 1.0 / v42;
    v45 = v92;
    v45.i32[3] = 0;
    v93 = v45;
    v46 = v90;
    v46.i32[3] = 0;
    v91 = v46;
    v47 = v88;
    v47.i32[3] = 0;
    v89 = v47;
    v48 = v86;
    v48.i32[3] = 0;
    v87 = v48;
    v64 = v43.i64[0];
    v67 = *a1;
    v49 = (float32x4_t *)objc_msgSend((id)swift_unknownObjectRetain(v41), "contents");
    v50 = v41;
    v49->i64[0] = v64;
    v49->f32[2] = v84;
    v49->f32[3] = v82;
    v49[1] = v77;
    v49[2] = v74;
    v49[3] = v72;
    v49[4] = v70;
    v49[5] = v93;
    v49[6] = v91;
    v49[7] = v89;
    v49[8] = v87;
    v49[9] = v67;
    v49[10].f32[0] = v15;
    v49[10].i32[1] = v37;
    v51 = (void *)v6[6];
    v52 = (float *)objc_msgSend((id)swift_unknownObjectRetain(v51), "contents");
    v53 = v51;
    *v52 = v84;
    v52[1] = v82;
    *((_DWORD *)v52 + 2) = v23;
    *((_OWORD *)v52 + 1) = v80;
    *((_DWORD *)v52 + 8) = v37;
    *((_DWORD *)v52 + 9) = v24;
    v54 = sub_10022634C(3);
    if (v54)
    {
      v55 = v54;
      swift_beginAccess(v10 + 3, v95, 0, 0);
      v56 = v10[4];
      if (v56)
      {
        v58 = v10[5];
        v57 = v10[6];
        swift_unknownObjectRetain(v10[4]);
        swift_unknownObjectRetain(v57);
        v59 = String._bridgeToObjectiveC()();
        objc_msgSend(a3, "setLabel:", v59);

        objc_msgSend(a3, "setRenderPipelineState:", v55);
        objc_msgSend(a3, "setVertexBuffer:offset:atIndex:", v50, 0, 0);
        objc_msgSend(a3, "setVertexBuffer:offset:atIndex:", v56, 0, 1);
        objc_msgSend(a3, "setVertexBuffer:offset:atIndex:", v57, 0, 2);
        objc_msgSend(a3, "setFragmentBuffer:offset:atIndex:", v53, 0, 0);
        if ((unsigned __int128)(v58 * (__int128)6) >> 64 != (6 * v58) >> 63)
        {
          __break(1u);
          return;
        }
        objc_msgSend(a3, "drawPrimitives:vertexStart:vertexCount:", 3, 0);
        swift_unknownObjectRelease(v55);
        swift_unknownObjectRelease(v57);
        v55 = v56;
      }
      swift_unknownObjectRelease(v55);
    }
  }
}

void sub_10012AD10(float32x4_t *a1, uint64_t a2, void *a3, double a4, double a5)
{
  sub_10012A638(a1, a2, a3, a4, a5);
}

uint64_t type metadata accessor for ConnectionAssistantEarthRenderer()
{
  return objc_opt_self(_TtC8SOSBuddy32ConnectionAssistantEarthRenderer);
}

uint64_t sub_10012AD50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_1003191B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012AD98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t WitnessTable;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;

  v30 = a5;
  v9 = type metadata accessor for VStack(0, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v29 - v12;
  v14 = type metadata accessor for ModifiedContent(0, v9, &type metadata for _PaddingLayout);
  v29 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14, v15);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v16, v19);
  v22 = (char *)&v29 - v21;
  v32 = a3;
  v33 = a4;
  v34 = a1;
  v35 = a2;
  v23 = static HorizontalAlignment.center.getter(v20);
  VStack.init(alignment:spacing:content:)(v23, 0x4040000000000000, 0, sub_10012BEC4, v31, a3, a4);
  v25 = static Edge.Set.all.getter(v24);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v9);
  View.padding(_:_:)(v25, 0, 1, v9, WitnessTable);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v36 = WitnessTable;
  v37 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  sub_100092E98((uint64_t)v18, v14, (uint64_t)v22);
  v27 = *(void (**)(char *, uint64_t))(v29 + 8);
  v27(v18, v14);
  sub_1000903EC((uint64_t)v22, v14, v30);
  return ((uint64_t (*)(char *, uint64_t))v27)(v22, v14);
}

uint64_t sub_10012AF70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v6 = *(_QWORD *)(a3 - 8);
  v7 = __chkstk_darwin(a1, a2);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (void (*)(void))__chkstk_darwin(v7, v10);
  v13 = (char *)&v16 - v12;
  v11();
  sub_100092E98((uint64_t)v9, a3, (uint64_t)v13);
  v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v9, a3);
  sub_1000903EC((uint64_t)v13, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v14)(v13, a3);
}

uint64_t sub_10012B048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10012AD98(*v2, v2[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_10012B058@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t TupleTypeMetadata2;
  uint64_t v28;
  uint64_t WitnessTable;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[16];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v46 = a8;
  v47 = a4;
  v44 = a2;
  v45 = a3;
  v48 = a9;
  v13 = type metadata accessor for VStack(255, a5, a7);
  v14 = sub_100007FAC(&qword_1003210A0);
  v15 = type metadata accessor for ModifiedContent(255, v13, v14);
  v16 = sub_100007FAC(&qword_100318808);
  v17 = type metadata accessor for ModifiedContent(255, v15, v16);
  v18 = sub_100007FAC(&qword_100316BF8);
  v19 = type metadata accessor for ModifiedContent(255, a6, v18);
  v20 = sub_100007FAC(&qword_1003210A8);
  v21 = type metadata accessor for ModifiedContent(255, v19, v20);
  v22 = sub_100007FAC(&qword_100318308);
  v23 = type metadata accessor for ModifiedContent(255, v21, v22);
  v24 = type metadata accessor for ModifiedContent(255, v23, &type metadata for _FlexFrameLayout);
  v25 = type metadata accessor for ModifiedContent(255, v24, &type metadata for _PaddingLayout);
  v26 = type metadata accessor for ModifiedContent(255, v25, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v17, v26, 0, 0);
  v28 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v28);
  v30 = type metadata accessor for VStack(0, v28, WitnessTable);
  v31 = *(_QWORD *)(v30 - 8);
  v33 = __chkstk_darwin(v30, v32);
  v35 = (char *)&v43 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v33, v36);
  v39 = (char *)&v43 - v38;
  v50 = a5;
  v51 = a6;
  v52 = a7;
  v53 = v46;
  v54 = a1;
  v55 = v44;
  v56 = v45;
  v57 = v47;
  v40 = static HorizontalAlignment.center.getter(v37);
  VStack.init(alignment:spacing:content:)(v40, 0, 0, sub_10012BED0, v49, v28, WitnessTable);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v30);
  sub_100092E98((uint64_t)v35, v30, (uint64_t)v39);
  v41 = *(void (**)(char *, uint64_t))(v31 + 8);
  v41(v35, v30);
  sub_1000903EC((uint64_t)v39, v30, v48);
  return ((uint64_t (*)(char *, uint64_t))v41)(v39, v30);
}

uint64_t sub_10012B2D8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(char *, uint64_t)@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t WitnessTable;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(uint64_t, uint64_t);
  char v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t (*v122)(char *, uint64_t);
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t (*v146)(uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD v151[13];
  _QWORD v152[2];
  uint64_t v153[19];

  v147 = a8;
  v148 = a4;
  v145 = a6;
  v146 = a3;
  v121 = a1;
  v122 = a2;
  v144 = a9;
  v129 = *(_QWORD *)(a6 - 8);
  __chkstk_darwin(a1, a2);
  v124 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007FAC(&qword_100316BF8);
  v14 = type metadata accessor for ModifiedContent(0, a6, v13);
  v132 = *(_QWORD *)(v14 - 8);
  v126 = v14;
  __chkstk_darwin(v14, v15);
  v123 = (char *)&v115 - v16;
  v17 = sub_100007FAC(&qword_1003210A8);
  v18 = type metadata accessor for ModifiedContent(0, v14, v17);
  v19 = *(_QWORD *)(v18 - 8);
  v128 = v18;
  v133 = v19;
  __chkstk_darwin(v18, v20);
  v125 = (char *)&v115 - v21;
  v22 = sub_100007FAC(&qword_100318308);
  v23 = type metadata accessor for ModifiedContent(0, v18, v22);
  v24 = *(_QWORD *)(v23 - 8);
  v131 = v23;
  v138 = v24;
  __chkstk_darwin(v23, v23);
  v127 = (char *)&v115 - v25;
  v27 = type metadata accessor for ModifiedContent(0, v26, &type metadata for _FlexFrameLayout);
  v140 = *(_QWORD *)(v27 - 8);
  v135 = v27;
  __chkstk_darwin(v27, v27);
  v130 = (char *)&v115 - v28;
  v30 = type metadata accessor for ModifiedContent(0, v29, &type metadata for _PaddingLayout);
  v142 = *(_QWORD *)(v30 - 8);
  v137 = v30;
  __chkstk_darwin(v30, v30);
  v134 = (char *)&v115 - v31;
  v141 = type metadata accessor for ModifiedContent(0, v32, &type metadata for _PaddingLayout);
  v143 = *(_QWORD *)(v141 - 8);
  v34 = __chkstk_darwin(v141, v33);
  v136 = (char *)&v115 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34, v36);
  v139 = (uint64_t)&v115 - v37;
  v38 = type metadata accessor for Material(0);
  v118 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38, v39);
  v41 = (char *)&v115 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for VStack(0, a5, a7);
  v116 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42, v43);
  v45 = (char *)&v115 - v44;
  v46 = sub_100007FAC(&qword_1003210A0);
  v47 = type metadata accessor for ModifiedContent(0, v42, v46);
  v119 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47, v48);
  v50 = (char *)&v115 - v49;
  v51 = sub_100007FAC(&qword_100318808);
  v117 = type metadata accessor for ModifiedContent(0, v47, v51);
  v150 = *(_QWORD *)(v117 - 8);
  v53 = __chkstk_darwin(v117, v52);
  v55 = (char *)&v115 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __chkstk_darwin(v53, v56);
  v149 = (uint64_t)&v115 - v58;
  v151[2] = a5;
  v151[3] = v145;
  v151[4] = a7;
  v151[5] = v147;
  v151[6] = v121;
  v151[7] = v122;
  v151[8] = v146;
  v151[9] = v148;
  v59 = static HorizontalAlignment.center.getter(v57);
  v60 = VStack.init(alignment:spacing:content:)(v59, 0, 0, sub_10012BEDC, v151, a5, a7);
  v61 = static Material.ultraThin.getter(v60);
  v62 = static Edge.Set.all.getter(v61);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v42);
  View.background<A>(_:ignoresSafeAreaEdges:)(v41, v62, v42, v38, WitnessTable, &protocol witness table for Material);
  (*(void (**)(char *, uint64_t))(v118 + 8))(v41, v38);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v45, v42);
  v64 = sub_1000084FC(&qword_1003210B0, &qword_1003210A0, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
  v153[16] = WitnessTable;
  v153[17] = v64;
  v65 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v47);
  View.cornerRadius(_:antialiased:)(1, v47, v65, 10.0);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v50, v47);
  v66 = sub_1000084FC(&qword_100318850, &qword_100318808, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
  v153[14] = v65;
  v153[15] = v66;
  v67 = v117;
  v68 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v117);
  v120 = v55;
  v121 = v68;
  sub_100092E98((uint64_t)v55, v67, v149);
  v122 = *(uint64_t (**)(char *, uint64_t))(v150 + 8);
  v69 = v122(v55, v67);
  v70 = v124;
  v71 = v146(v69);
  v72 = static Font.footnote.getter(v71);
  v73 = v123;
  v74 = v145;
  v75 = v147;
  View.font(_:)(v72, v145, v147);
  swift_release(v72);
  v76.n128_f64[0] = (*(double (**)(char *, uint64_t))(v129 + 8))(v70, v74);
  LODWORD(v153[0]) = static HierarchicalShapeStyle.secondary.getter(v76);
  v77 = sub_1000084FC(&qword_100316BF0, &qword_100316BF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v153[12] = v75;
  v153[13] = v77;
  v78 = v126;
  v79 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v126);
  v80 = v125;
  View.foregroundStyle<A>(_:)(v153, v78, &type metadata for HierarchicalShapeStyle, v79, &protocol witness table for HierarchicalShapeStyle);
  (*(void (**)(char *, uint64_t))(v132 + 8))(v73, v78);
  v81 = sub_1000084FC(&qword_1003210B8, &qword_1003210A8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
  v153[10] = v79;
  v153[11] = v81;
  v82 = v128;
  v83 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v128);
  v84 = v127;
  View.multilineTextAlignment(_:)(0, v82, v83);
  v85 = (*(uint64_t (**)(char *, uint64_t))(v133 + 8))(v80, v82);
  v87 = static Alignment.leading.getter(v85, v86);
  v89 = v88;
  v90 = sub_1000084FC(&qword_100318300, &qword_100318308, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v153[8] = v83;
  v153[9] = v90;
  v91 = v131;
  v92 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v131);
  v114 = 1;
  v113 = 1;
  v93 = v130;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0, 1, 0, 1, 0x7FF0000000000000, 0, 0, 1, 0, v113, 0, v114, v87, v89, v91, v92);
  v94 = (*(uint64_t (**)(char *, uint64_t))(v138 + 8))(v84, v91);
  v95 = static Edge.Set.top.getter(v94);
  v153[6] = v92;
  v153[7] = (uint64_t)&protocol witness table for _FlexFrameLayout;
  v96 = v135;
  v97 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v135);
  v98 = v134;
  View.padding(_:_:)(v95, 0x4018000000000000, 0, v96, v97);
  v99 = (*(uint64_t (**)(char *, uint64_t))(v140 + 8))(v93, v96);
  v100 = static Edge.Set.leading.getter(v99);
  v153[4] = v97;
  v153[5] = (uint64_t)&protocol witness table for _PaddingLayout;
  v101 = v137;
  v102 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v137);
  v103 = (uint64_t)v136;
  View.padding(_:_:)(v100, 0x4034000000000000, 0, v101, v102);
  (*(void (**)(char *, uint64_t))(v142 + 8))(v98, v101);
  v153[2] = v102;
  v153[3] = (uint64_t)&protocol witness table for _PaddingLayout;
  v104 = v141;
  v105 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v141);
  v106 = v139;
  sub_100092E98(v103, v104, v139);
  v107 = v143;
  v108 = *(void (**)(uint64_t, uint64_t))(v143 + 8);
  v108(v103, v104);
  v109 = v149;
  v110 = (uint64_t)v120;
  (*(void (**)(char *, uint64_t, uint64_t))(v150 + 16))(v120, v149, v67);
  v153[0] = v110;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 16))(v103, v106, v104);
  v153[1] = v103;
  v152[0] = v67;
  v152[1] = v104;
  v151[11] = v121;
  v151[12] = v105;
  sub_10009058C(v153, 2uLL, (uint64_t)v152);
  v108(v106, v104);
  v111 = (uint64_t (*)(uint64_t, uint64_t))v122;
  v122((char *)v109, v67);
  v108(v103, v104);
  return v111(v110, v67);
}

uint64_t sub_10012BBB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v6 = *(_QWORD *)(a3 - 8);
  v7 = __chkstk_darwin(a1, a2);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (void (*)(void))__chkstk_darwin(v7, v10);
  v13 = (char *)&v16 - v12;
  v11();
  sub_100092E98((uint64_t)v9, a3, (uint64_t)v13);
  v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v9, a3);
  sub_1000903EC((uint64_t)v13, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v14)(v13, a3);
}

uint64_t sub_10012BC8C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10012B058(*v2, v2[1], v2[2], v2[3], a1[2], a1[3], a1[4], a1[5], a2);
}

uint64_t sub_10012BCA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_10012BCAC(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t sub_10012BCD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain(v4);
  swift_retain(v3);
  return a1;
}

_QWORD *sub_10012BD1C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  v7 = a2[2];
  v6 = a2[3];
  v8 = a1[3];
  a1[2] = v7;
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v8);
  return a1;
}

uint64_t sub_10012BD78(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantConeRenderer(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantConeRenderer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for ExplorerFloatingContentSection(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for ExplorerFloatingContentSection);
}

uint64_t type metadata accessor for ExplorerFloatingContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ExplorerFloatingContent);
}

uint64_t sub_10012BE5C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v4[2];

  v2 = *(_OWORD *)(a2 + 32);
  v4[0] = *(_OWORD *)(a2 + 16);
  v4[1] = v2;
  return swift_getOpaqueTypeConformance2(v4, &unk_10029B414, 1);
}

uint64_t sub_10012BE90(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10029B3E0, 1);
}

uint64_t sub_10012BEC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10012AF70(v1[4], v1[5], v1[2], a1);
}

uint64_t sub_10012BED0()
{
  return sub_10012BEE8((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10012B2D8);
}

uint64_t sub_10012BEDC()
{
  return sub_10012BEE8((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10012BBB4);
}

uint64_t sub_10012BEE8(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[6], v1[7], v1[8], v1[9], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10012BF00(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for VStack(255, *a1, a1[1]);
  v2 = type metadata accessor for ModifiedContent(255, v1, &type metadata for _PaddingLayout);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
}

uint64_t sub_10012BF78(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t v19;

  v1 = a1[1];
  v2 = type metadata accessor for VStack(255, *a1, a1[2]);
  v3 = sub_100007FAC(&qword_1003210A0);
  v4 = type metadata accessor for ModifiedContent(255, v2, v3);
  v5 = sub_100007FAC(&qword_100318808);
  v6 = type metadata accessor for ModifiedContent(255, v4, v5);
  v7 = sub_100007FAC(&qword_100316BF8);
  v8 = type metadata accessor for ModifiedContent(255, v1, v7);
  v9 = sub_100007FAC(&qword_1003210A8);
  v10 = type metadata accessor for ModifiedContent(255, v8, v9);
  v11 = sub_100007FAC(&qword_100318308);
  v12 = type metadata accessor for ModifiedContent(255, v10, v11);
  v13 = type metadata accessor for ModifiedContent(255, v12, &type metadata for _FlexFrameLayout);
  v14 = type metadata accessor for ModifiedContent(255, v13, &type metadata for _PaddingLayout);
  v15 = type metadata accessor for ModifiedContent(255, v14, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v6, v15, 0, 0);
  v17 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v17);
  v19 = type metadata accessor for VStack(255, v17, WitnessTable);
  return swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v19);
}

__n128 ConnectionAssistantArrow.init(curveRadius:startAngle:endAngle:color:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>)
{
  __int128 v7;
  __n128 result;
  _OWORD v9[4];
  int v10;

  sub_10012C668(a1, (uint64_t)v9, a3, a4, a5);

  v7 = v9[3];
  *(_OWORD *)(a2 + 32) = v9[2];
  *(_OWORD *)(a2 + 48) = v7;
  *(_DWORD *)(a2 + 64) = v10;
  result = (__n128)v9[1];
  *(_OWORD *)a2 = v9[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t ConnectionAssistantArrow.project(center:camera:)(float32x2_t *a1, float32x4_t a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float32x2_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  float v10;
  float v11;
  float32x4_t v12;
  unsigned __int8 v13;
  float v15;
  float32x2_t v16;

  v15 = *(float *)(v2 + 12);
  v16 = *(float32x2_t *)a2.f32;
  v3 = a1[15].f32[0];
  v4 = a2.f32[2];
  v5 = a1[14];
  *(float32x2_t *)a2.f32 = vadd_f32(*(float32x2_t *)a2.f32, vmul_n_f32(v5, v15));
  a2.f32[2] = a2.f32[2] + (float)(v3 * v15);
  a2.i32[3] = 0;
  ConnectionAssistantCamera.projectUV(point:)(a2);
  v7 = v6;
  v9 = v8;
  v10 = v15 + *(float *)(v2 + 8);
  v11 = v3 * v10;
  *(float32x2_t *)v12.f32 = vadd_f32(v16, vmul_n_f32(v5, v10));
  v12.f32[2] = v4 + v11;
  v12.i32[3] = 0;
  ConnectionAssistantCamera.projectUV(point:)(v12);
  if (((v9 | v13) & 1) != 0)
    return 0;
  return v7;
}

float32x2_t ConnectionAssistantArrow.boundingBox(pointSize:projection:)(float a1, float32x2_t a2, float a3)
{
  uint64_t v3;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  __float2 v12;
  __float2 v13;
  float32x2_t v14;
  float32x2_t v15;
  __float2 v16;
  __float2 v17;
  float32x2_t v18;
  float32x2_t v19;
  int32x2_t v20;
  float v22;

  v6 = *(float *)(v3 + 16);
  v7 = *(float *)(v3 + 20);
  v8 = (float)(v6 + v7) * 0.5;
  v9 = fminf(fmaxf((float)(roundf(v8 / 3.1416) * 3.1416) + 6.2832, v6), v7);
  v10 = fminf(fmaxf((float)(roundf((float)(v8 + -1.5708) / 3.1416) * 3.1416) + 1.5708, v6), v7);
  v11 = v6 + 1.5708;
  v12 = __sincosf_stret(v6);
  v13 = __sincosf_stret(v11);
  v14 = vsub_f32(vadd_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v12.__sinval), LODWORD(v12.__cosval)), a3), a2), vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v13.__sinval), LODWORD(v13.__cosval)), COERCE_FLOAT(*(_QWORD *)(v3 + 24))));
  v22 = cosf(v9);
  v15 = vadd_f32(vmul_n_f32((float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sinf(v10)), LODWORD(v22)), a3), a2);
  v16 = __sincosf_stret(v7);
  v17 = __sincosf_stret(v7 + -1.5708);
  v18 = vsub_f32(vadd_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v16.__sinval), LODWORD(v16.__cosval)), a3), a2), vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v17.__sinval), LODWORD(v17.__cosval)), COERCE_FLOAT(*(_QWORD *)(v3 + 28))));
  v19 = vminnm_f32(v14, vminnm_f32(v15, v18));
  v20 = (int32x2_t)vmaxnm_f32(v15, v18);
  v20.i32[0] = *(_DWORD *)(v3 + 36);
  if (*(float *)v20.i32 <= *(float *)(v3 + 40))
    v20.i32[0] = *(_DWORD *)(v3 + 40);
  *(float *)v20.i32 = (float)((float)(*(float *)v20.i32 * a1) + (float)((float)(*(float *)v3 * 0.5) * a1))
                    + (float)((float)(*(float *)(v3 + 4) * a1) * 2.8);
  return vsub_f32(v19, (float32x2_t)vdup_lane_s32(v20, 0));
}

float ConnectionAssistantSatellite.radius.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void ConnectionAssistantSatellite.radius.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

float ConnectionAssistantSatellite.angle.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

void ConnectionAssistantSatellite.angle.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 4) = a1;
}

uint64_t (*ConnectionAssistantSatellite.angle.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

float ConnectionAssistantSatellite.pointHeight.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void ConnectionAssistantSatellite.pointHeight.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*ConnectionAssistantSatellite.pointHeight.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

float ConnectionAssistantArrow.centerRadius.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 12);
}

void ConnectionAssistantArrow.centerRadius.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 12) = a1;
}

uint64_t (*ConnectionAssistantArrow.centerRadius.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

void ConnectionAssistantArrow.startAngle.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 16) = a1;
}

void ConnectionAssistantArrow.endAngle.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 20) = a1;
}

uint64_t (*ConnectionAssistantArrow.endAngle.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

void ConnectionAssistantArrow.startExtensionLength.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 24) = a1;
}

uint64_t (*ConnectionAssistantArrow.startExtensionLength.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

void ConnectionAssistantArrow.endExtensionLength.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 28) = a1;
}

uint64_t (*ConnectionAssistantArrow.endExtensionLength.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

void ConnectionAssistantArrow.leftTipPointLength.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 36) = a1;
}

void ConnectionAssistantArrow.rightTipPointLength.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 40) = a1;
}

uint64_t (*ConnectionAssistantArrow.rightTipPointLength.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

void ConnectionAssistantArrow.color.setter(__n128 a1)
{
  __n128 *v1;

  v1[3] = a1;
}

void ConnectionAssistantArrow.opacity.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 64) = a1;
}

uint64_t (*ConnectionAssistantArrow.opacity.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

void ConnectionAssistantArrow.Projection.center.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

float ConnectionAssistantRendererProjection.Circle.radius.getter(double a1, float a2)
{
  return a2;
}

BOOL sub_10012C4C8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  int v8;
  _OWORD v9[4];
  int v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_DWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_DWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return _s8SOSBuddy24ConnectionAssistantArrowV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v7, (uint64_t)v9);
}

BOOL _s8SOSBuddy24ConnectionAssistantArrowV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  BOOL v5;
  uint64_t v6;
  float v8;
  float v9;
  __int128 v10;
  __int128 v11;

  if (*(float *)a1 != *(float *)a2
    || *(float *)(a1 + 4) != *(float *)(a2 + 4)
    || *(float *)(a1 + 8) != *(float *)(a2 + 8)
    || *(float *)(a1 + 12) != *(float *)(a2 + 12)
    || *(float *)(a1 + 16) != *(float *)(a2 + 16)
    || *(float *)(a1 + 20) != *(float *)(a2 + 20)
    || *(float *)(a1 + 24) != *(float *)(a2 + 24)
    || *(float *)(a1 + 28) != *(float *)(a2 + 28)
    || *(float *)(a1 + 32) != *(float *)(a2 + 32)
    || *(float *)(a1 + 36) != *(float *)(a2 + 36)
    || *(float *)(a1 + 40) != *(float *)(a2 + 40))
  {
    return 0;
  }
  v2 = 0;
  v3 = *(_OWORD *)(a1 + 48);
  v4 = *(_OWORD *)(a2 + 48);
  while (1)
  {
    v10 = v3;
    v8 = *(float *)((unint64_t)&v10 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v11 = v4;
    v9 = *(float *)((unint64_t)&v11 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v5 = v8 == v9;
    if (v2 == 3)
      break;
    while (1)
    {
      ++v2;
      if (v5)
        break;
      v5 = 0;
      v6 = 0;
      if (v2 == 3)
        return v6;
    }
  }
  return v8 == v9 && *(float *)(a1 + 64) == *(float *)(a2 + 64);
}

id sub_10012C668@<X0>(void *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>)
{
  float v7;
  float v8;
  id result;
  float64x2_t v10;
  float64x2_t v11;
  float64_t v12;
  float64_t v13;
  float64_t v14;
  float64_t v15;

  v7 = a4 + 1.5708;
  v8 = a5 + 1.5708;
  v14 = 0.0;
  v15 = 0.0;
  v12 = 0.0;
  v13 = 0.0;
  result = objc_msgSend(a1, "getRed:green:blue:alpha:", &v15, &v14, &v13, &v12);
  v10.f64[0] = v15;
  v11.f64[0] = v13;
  v10.f64[1] = v14;
  v11.f64[1] = v12;
  *(_QWORD *)a2 = 0x4180000040400000;
  *(float *)(a2 + 8) = a3;
  *(_DWORD *)(a2 + 12) = 0;
  *(float *)(a2 + 16) = v7;
  *(float *)(a2 + 20) = v8;
  *(_OWORD *)(a2 + 24) = xmmword_1002577F0;
  *(_DWORD *)(a2 + 40) = 0;
  *(float32x4_t *)(a2 + 48) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v10), v11);
  *(_DWORD *)(a2 + 64) = 1065353216;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantArrow()
{
  return &type metadata for ConnectionAssistantArrow;
}

uint64_t initializeBufferWithCopyOfBuffer for ConnectionAssistantRendererProjection.Circle(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantArrow.Projection()
{
  return &type metadata for ConnectionAssistantArrow.Projection;
}

uint64_t initializeWithCopy for BuiltInNotifyContactsConsentFooterView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v7 = a2[6];
  v9 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 48) = v7;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v9);
  swift_retain(v7);
  return a1;
}

uint64_t *assignWithCopy for BuiltInNotifyContactsConsentFooterView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_retain(v8);
  swift_release(v9);
  v11 = a2[5];
  v10 = a2[6];
  v12 = a1[6];
  a1[5] = v11;
  a1[6] = v10;
  swift_retain(v10);
  swift_release(v12);
  return a1;
}

_QWORD *assignWithTake for BuiltInNotifyContactsConsentFooterView(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  *a1 = *(_QWORD *)a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = *(_QWORD *)(a2 + 16);
  a1[1] = *(_QWORD *)(a2 + 8);
  a1[2] = v6;
  swift_release(v5);
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_release(a1[4]);
  v7 = *(_QWORD *)(a2 + 48);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  v8 = a1[6];
  a1[6] = v7;
  swift_release(v8);
  return a1;
}

ValueMetadata *type metadata accessor for BuiltInNotifyContactsConsentFooterView()
{
  return &type metadata for BuiltInNotifyContactsConsentFooterView;
}

uint64_t sub_10012C920(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029B4A8, 1);
}

uint64_t sub_10012C930@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  _QWORD v48[3];
  uint64_t v49;
  uint64_t v50;
  char v51;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;

  v2 = *(_QWORD **)v1;
  if (*(_QWORD *)v1)
  {
    v4 = v2[9];
    v5 = v2[10];
    sub_100007BBC(v2 + 6, v4);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 24))(v52, v4, v5);
    v6 = v2[9];
    v7 = v2[10];
    sub_100007BBC(v2 + 6, v6);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 24))(v48, v6, v7);
    v8 = v49;
    v9 = v50;
    sub_100007BBC(v48, v49);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 232))(v8, v9);
    v37 = v11;
    v12 = static HorizontalAlignment.center.getter(v10);
    sub_10012CB2C((__int128 *)v1, (uint64_t *)&v38);
    v13 = v39;
    v14 = v40;
    v15 = v41;
    v35 = v38;
    v36 = v43;
    v16 = v44;
    v18 = v45;
    v17 = v46;
    v33 = v42;
    v34 = v47;
    v51 = 0;
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v48);
    v19 = v53;
    v20 = v54;
    sub_100007BBC(v52, v53);
    v21 = (*(double (**)(uint64_t, uint64_t))(v20 + 320))(v19, v20);
    v23 = v22;
    v25 = v24;
    v27 = v26;
    v28 = static Edge.Set.all.getter(v21);
    LOBYTE(v38) = 0;
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v37;
    *(_BYTE *)(a1 + 16) = 0;
    *(_OWORD *)(a1 + 24) = v35;
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = v15;
    *(_OWORD *)(a1 + 64) = v33;
    *(_OWORD *)(a1 + 80) = v36;
    *(_QWORD *)(a1 + 96) = v16;
    *(_QWORD *)(a1 + 104) = v18;
    *(_QWORD *)(a1 + 112) = v17;
    *(_OWORD *)(a1 + 120) = v34;
    *(_BYTE *)(a1 + 136) = v28;
    *(double *)(a1 + 144) = v21;
    *(_QWORD *)(a1 + 152) = v23;
    *(_QWORD *)(a1 + 160) = v25;
    *(_QWORD *)(a1 + 168) = v27;
    *(_BYTE *)(a1 + 176) = v38;
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v52);
  }
  else
  {
    v30 = *(_QWORD *)(v1 + 8);
    v31 = type metadata accessor for UIMetrics();
    v32 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
    result = EnvironmentObject.error()(0, v30, v31, v32);
    __break(1u);
  }
  return result;
}

uint64_t sub_10012CB2C@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String *v10;
  __n128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String *v25;
  __n128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  Swift::String v36;
  Swift::String v37;

  v4 = (void *)objc_opt_self(NSBundle);
  v5 = objc_msgSend(v4, "mainBundle");
  v36._object = (void *)0x800000010026AF10;
  v6._countAndFlagsBits = 0x796669746F4ELL;
  v6._object = (void *)0xE600000000000000;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v36._countAndFlagsBits = 0xD00000000000005CLL;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v36);

  v9 = type metadata accessor for OptionPresentation();
  v10 = (Swift::String *)swift_allocObject(v9, 72, 7);
  v10[1] = v8;
  v10[3]._countAndFlagsBits = 0;
  v10[3]._object = 0;
  v10[4]._countAndFlagsBits = static Color.clear.getter(v11);
  v10[2]._countAndFlagsBits = 0;
  v10[2]._object = 0;
  v12 = *a1;
  v34 = a1[1];
  v35 = v12;
  v13 = *((_QWORD *)a1 + 4);
  v14 = *((_QWORD *)a1 + 6);
  v31 = v14;
  v15 = swift_allocObject(&unk_1002F1BB0, 72, 7);
  v16 = a1[1];
  *(_OWORD *)(v15 + 16) = *a1;
  *(_OWORD *)(v15 + 32) = v16;
  *(_OWORD *)(v15 + 48) = a1[2];
  *(_QWORD *)(v15 + 64) = *((_QWORD *)a1 + 6);
  sub_100031A88(&v35);
  sub_100031A88(&v34);
  v17 = type metadata accessor for UIMetrics();
  v18 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
  swift_retain(v13);
  swift_retain(v14);
  v19 = EnvironmentObject.init()(v17, v18);
  v32 = v20;
  v33 = v19;
  v21 = objc_msgSend(v4, "mainBundle");
  v37._countAndFlagsBits = 0xD000000000000062;
  v37._object = (void *)0x800000010026AF70;
  v22._countAndFlagsBits = 0x20749980E26E6F44;
  v22._object = (void *)0xAE00796669746F4ELL;
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, (Swift::String_optional)0, (NSBundle)v21, v23, v37);

  v25 = (Swift::String *)swift_allocObject(v9, 72, 7);
  v25[1] = v24;
  v25[3]._countAndFlagsBits = 0;
  v25[3]._object = 0;
  v25[4]._countAndFlagsBits = static Color.clear.getter(v26);
  v25[2]._countAndFlagsBits = 0;
  v25[2]._object = 0;
  v27 = swift_allocObject(&unk_1002F1BD8, 72, 7);
  v28 = a1[1];
  *(_OWORD *)(v27 + 16) = *a1;
  *(_OWORD *)(v27 + 32) = v28;
  *(_OWORD *)(v27 + 48) = a1[2];
  *(_QWORD *)(v27 + 64) = *((_QWORD *)a1 + 6);
  sub_100031A88(&v35);
  sub_100031A88(&v34);
  swift_retain(v13);
  swift_retain(v31);
  result = EnvironmentObject.init()(v17, v18);
  *a2 = v33;
  a2[1] = v32;
  a2[2] = (uint64_t)v10;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = (uint64_t)sub_10012D7F0;
  a2[6] = v15;
  a2[7] = result;
  a2[8] = v30;
  a2[9] = (uint64_t)v25;
  a2[10] = 0;
  a2[11] = 0;
  a2[12] = (uint64_t)sub_10012D818;
  a2[13] = v27;
  return result;
}

uint64_t sub_10012CDEC(int a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56[4];
  __int128 v57;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v8 = sub_10000D744(v3, (uint64_t)qword_10033FEC8);
  v9 = *(void (**)(char *))(v4 + 16);
  v53 = v8;
  v9(v7);
  v57 = *v1;
  v10 = *((_QWORD *)v1 + 2);
  v49 = *((_QWORD *)v1 + 3);
  v11 = (_QWORD *)*((_QWORD *)v1 + 4);
  v54 = (uint64_t (*)(uint64_t))*((_QWORD *)v1 + 5);
  v12 = *((_QWORD *)v1 + 6);
  sub_100031A88(&v57);
  swift_retain(v10);
  swift_retain(v11);
  swift_retain(v12);
  sub_100031A88(&v57);
  swift_retain(v10);
  swift_retain(v11);
  swift_retain(v12);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (!os_log_type_enabled(v14, v15))
  {
    sub_100042AD0(&v57);
    swift_release(v12);
    swift_release(v11);
    swift_release(v10);
    sub_100042AD0(&v57);

    swift_release(v12);
    swift_release(v11);
    swift_release(v10);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    if (v10)
      goto LABEL_7;
LABEL_17:
    v46 = type metadata accessor for QuestionnaireState();
    v47 = sub_100056D60(&qword_100316A18, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireState);
    result = EnvironmentObject.error()(0, v49, v46, v47);
    __break(1u);
    return result;
  }
  v50 = v4;
  v51 = a1;
  v52 = v12;
  v16 = swift_slowAlloc(18, -1);
  v48 = swift_slowAlloc(32, -1);
  v56[0] = v48;
  *(_DWORD *)v16 = 136446467;
  if (!v10)
  {
    sub_100042AD0(&v57);
    swift_release(v52);
    swift_release(v11);
    goto LABEL_17;
  }
  swift_retain(v10);
  v17 = sub_1000AD18C();
  v19 = v18;
  swift_release(v10);
  v55 = sub_100172BEC(v17, v19, v56);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v16 + 4, v16 + 12);
  swift_bridgeObjectRelease(v19);
  sub_100042AD0(&v57);
  v12 = v52;
  swift_release(v52);
  swift_release(v11);
  swift_release(v10);
  sub_100042AD0(&v57);
  swift_release(v12);
  swift_release(v11);
  swift_release(v10);
  *(_WORD *)(v16 + 12) = 1025;
  LOBYTE(a1) = v51;
  LODWORD(v55) = v51 & 1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, (char *)&v55 + 4, v16 + 14, v16 + 18);
  _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%{public}s] QuestionnaireBodyView: notify contacts: %{BOOL,private}d", (uint8_t *)v16, 0x12u);
  v20 = v48;
  swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v20, -1, -1);
  swift_slowDealloc(v16, -1, -1);

  (*(void (**)(char *, uint64_t))(v50 + 8))(v7, v3);
LABEL_7:
  v56[3] = (uint64_t)&type metadata for Bool;
  LOBYTE(v56[0]) = a1 & 1;
  swift_retain(v10);
  v21 = sub_1000B35F8((uint64_t)v11, (uint64_t)v56);
  swift_release(v10);
  sub_10004B678((uint64_t)v56);
  if (!v21)
  {
    sub_100031A88(&v57);
    swift_retain(v10);
    swift_retain(v11);
    swift_retain(v12);
    sub_100031A88(&v57);
    swift_retain(v10);
    swift_retain(v11);
    swift_retain(v12);
    sub_100031A88(&v57);
    swift_retain(v10);
    swift_retain(v11);
    swift_retain(v12);
    sub_100031A88(&v57);
    swift_retain(v10);
    swift_retain(v11);
    swift_retain(v12);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(22, -1);
      v52 = swift_slowAlloc(64, -1);
      v56[0] = v52;
      *(_DWORD *)v25 = 136446467;
      swift_retain(v10);
      v26 = sub_1000AD18C();
      v28 = v27;
      swift_release(v10);
      v55 = sub_100172BEC(v26, v28, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease(v28);
      sub_100042AD0(&v57);
      swift_release(v12);
      swift_release(v11);
      swift_release(v10);
      sub_100042AD0(&v57);
      swift_release(v12);
      swift_release(v11);
      swift_release(v10);
      *(_WORD *)(v25 + 12) = 2081;
      v29 = v11[2];
      v30 = v11[3];
      swift_bridgeObjectRetain(v30);
      v55 = sub_100172BEC(v29, v30, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v25 + 14, v25 + 22);
      swift_bridgeObjectRelease(v30);
      sub_100042AD0(&v57);
      swift_release(v12);
      swift_release(v11);
      swift_release(v10);
      sub_100042AD0(&v57);
      swift_release(v12);
      swift_release(v11);
      swift_release(v10);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%{public}s] QuestionnaireBodyView: failed to update data for %{private}s", (uint8_t *)v25, 0x16u);
      v31 = v52;
      swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {
      sub_100042AD0(&v57);
      swift_release(v12);
      swift_release(v11);
      swift_release(v10);
      sub_100042AD0(&v57);
      swift_release(v12);
      swift_release(v11);
      swift_release(v10);
      sub_100042AD0(&v57);
      swift_release(v12);
      swift_release(v11);
      swift_release(v10);
      sub_100042AD0(&v57);

      swift_release(v12);
      swift_release(v11);
      swift_release(v10);
    }
  }
  swift_retain(v10);
  v32 = sub_1000AE9AC(v11, 0, 4);
  v33 = swift_release(v10);
  if ((v32 & 1) == 0)
  {
    sub_100031A88(&v57);
    swift_retain(v10);
    swift_retain(v11);
    swift_retain(v12);
    sub_100031A88(&v57);
    swift_retain(v10);
    swift_retain(v11);
    swift_retain(v12);
    sub_100031A88(&v57);
    swift_retain(v10);
    swift_retain(v11);
    swift_retain(v12);
    sub_100031A88(&v57);
    swift_retain(v10);
    swift_retain(v11);
    swift_retain(v12);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = v12;
      v38 = swift_slowAlloc(22, -1);
      v53 = swift_slowAlloc(64, -1);
      v56[0] = v53;
      *(_DWORD *)v38 = 136446467;
      swift_retain(v10);
      v39 = sub_1000AD18C();
      v41 = v40;
      swift_release(v10);
      v55 = sub_100172BEC(v39, v41, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v38 + 4, v38 + 12);
      swift_bridgeObjectRelease(v41);
      sub_100042AD0(&v57);
      swift_release(v37);
      swift_release(v11);
      swift_release(v10);
      sub_100042AD0(&v57);
      swift_release(v37);
      swift_release(v11);
      swift_release(v10);
      *(_WORD *)(v38 + 12) = 2081;
      v42 = v11[2];
      v43 = v11[3];
      swift_bridgeObjectRetain(v43);
      v55 = sub_100172BEC(v42, v43, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v38 + 14, v38 + 22);
      swift_bridgeObjectRelease(v43);
      sub_100042AD0(&v57);
      swift_release(v37);
      swift_release(v11);
      swift_release(v10);
      sub_100042AD0(&v57);
      swift_release(v37);
      swift_release(v11);
      swift_release(v10);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "[%{public}s] QuestionnaireBodyView: failed to record answer for %{private}s", (uint8_t *)v38, 0x16u);
      v44 = v53;
      swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v38, -1, -1);

    }
    else
    {
      sub_100042AD0(&v57);
      swift_release(v12);
      swift_release(v11);
      swift_release(v10);
      sub_100042AD0(&v57);
      swift_release(v12);
      swift_release(v11);
      swift_release(v10);
      sub_100042AD0(&v57);
      swift_release(v12);
      swift_release(v11);
      swift_release(v10);
      sub_100042AD0(&v57);

      swift_release(v12);
      swift_release(v11);
      v33 = swift_release(v10);
    }
  }
  return v54(v33);
}

uint64_t sub_10012D7AC@<X0>(uint64_t a1@<X8>)
{
  return sub_10012C930(a1);
}

uint64_t sub_10012D7F0()
{
  return sub_10012CDEC(1);
}

uint64_t sub_10012D818()
{
  return sub_10012CDEC(0);
}

unint64_t sub_10012D840()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003210C0;
  if (!qword_1003210C0)
  {
    v1 = sub_100007FAC(&qword_1003210C8);
    sub_10012D8AC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003210C0);
  }
  return result;
}

unint64_t sub_10012D8AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003210D0;
  if (!qword_1003210D0)
  {
    v1 = sub_100007FAC(&qword_1003210D8);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1003210D0);
  }
  return result;
}

uint64_t destroy for TryOutConnectionDemoView(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_release(a1[1]);
}

uint64_t *_s8SOSBuddy24TryOutConnectionDemoViewVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for TryOutConnectionDemoView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

_QWORD *assignWithTake for TryOutConnectionDemoView(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for TryOutConnectionDemoView()
{
  return &type metadata for TryOutConnectionDemoView;
}

uint64_t sub_10012DA00(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029B4EC, 1);
}

uint64_t sub_10012DA10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];

  v38[0] = a1;
  v38[1] = a2;
  v2 = sub_100003DB8(&qword_10031F198);
  State.projectedValue.getter(&v27, v2);
  v3 = v27;
  v4 = v28;
  v5 = v29;
  v6 = type metadata accessor for AppEvents();
  v7 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  v8 = EnvironmentObject.init()(v6, v7);
  v10 = v9;
  v11 = type metadata accessor for ConnectionModel(0);
  v12 = sub_1000052EC(&qword_100316B10, type metadata accessor for ConnectionModel, (uint64_t)&unk_10024D2FC);
  v13 = EnvironmentObject.init()(v11, v12);
  v15 = v14;
  v16 = type metadata accessor for UIMetrics();
  v17 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v18 = EnvironmentObject.init()(v16, v17);
  v20 = v19;
  LOBYTE(v38[0]) = 0;
  State.init(wrappedValue:)(&v27, v38, &type metadata for Bool);
  v21 = v27;
  v22 = v28;
  v27 = v8;
  v28 = v10;
  v29 = v13;
  v30 = v15;
  v31 = v18;
  v32 = v20;
  v33 = v21;
  v34 = v22;
  v35 = v3;
  v36 = v4;
  v37 = v5;
  v23 = sub_100003DB8(&qword_1003210E8);
  v24 = sub_10012DF10();
  v25 = sub_10012DF54();
  View.navigationDestination<A, B>(for:destination:)(&type metadata for String, sub_10012DBF8, 0, &type metadata for TryOutInitialConnectionView, &type metadata for String, v23, v24, &protocol witness table for String, v25);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  swift_release(v8);
  swift_release(v13);
  swift_release(v18);
  swift_release(v22);
  return swift_release(v3);
}

uint64_t sub_10012DBF8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;

  v4 = *a1;
  v5 = a1[1];
  if (v4 == 0xD000000000000024 && v5 == 0x800000010026AFE0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, 0xD000000000000024, 0x800000010026AFE0, 0) & 1) != 0)
  {
    v6 = type metadata accessor for AppEvents();
    v7 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    v8 = EnvironmentObject.init()(v6, v7);
    v10 = v9;
    v11 = type metadata accessor for ConnectionModel(0);
    v12 = sub_1000052EC(&qword_100316B10, type metadata accessor for ConnectionModel, (uint64_t)&unk_10024D2FC);
    v13 = EnvironmentObject.init()(v11, v12);
    v15 = v14;
    v16 = type metadata accessor for EmergencyModel();
    v17 = sub_1000052EC(&qword_100318690, (uint64_t (*)(uint64_t))type metadata accessor for EmergencyModel, (uint64_t)&unk_10024D2FC);
    v18 = EnvironmentObject.init()(v16, v17);
    v20 = v19;
    v21 = type metadata accessor for UIMetrics();
    v22 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.init()(v21, v22);
  }
  else
  {
    v10 = 0;
    v13 = 0;
    v15 = 0;
    v18 = 0;
    v20 = 0;
    result = 0;
    v24 = 0;
    v8 = 1;
  }
  *a2 = v8;
  a2[1] = v10;
  a2[2] = v13;
  a2[3] = v15;
  a2[4] = v18;
  a2[5] = v20;
  a2[6] = result;
  a2[7] = v24;
  return result;
}

uint64_t sub_10012DD9C()
{
  ValueMetadata **v0;
  ValueMetadata *v1;
  ValueMetadata *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t OpaqueTypeConformance2;
  char v14[16];
  ValueMetadata *v15;
  ValueMetadata *v16;
  ValueMetadata *v17;
  __int128 v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  ValueMetadata *v22;
  __int128 v23;

  v2 = v0[1];
  v22 = *v0;
  v1 = v22;
  *(_QWORD *)&v23 = v2;
  v3 = sub_100003DB8(&qword_10031F198);
  State.projectedValue.getter(&v17, v3);
  v22 = v17;
  v23 = v18;
  v15 = v1;
  v16 = v2;
  v4 = sub_100003DB8(&qword_100317980);
  v5 = sub_100003DB8(&qword_1003210E0);
  v6 = sub_1000084FC(&qword_10031F1A8, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
  v7 = sub_1000084FC(&qword_100319618, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
  v8 = sub_1000084FC(&qword_10031F1B0, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
  v9 = sub_100007FAC(&qword_1003210E8);
  v10 = sub_10012DF10();
  v11 = sub_10012DF54();
  v17 = &type metadata for TryOutInitialConnectionView;
  *(_QWORD *)&v18 = &type metadata for String;
  *((_QWORD *)&v18 + 1) = v9;
  v19 = v10;
  v20 = &protocol witness table for String;
  v21 = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v17, &opaque type descriptor for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>, 1);
  return NavigationStack.init<>(path:root:)(&v22, sub_10012DF08, v14, v4, v5, v6, v7, v8, OpaqueTypeConformance2, &protocol witness table for String);
}

uint64_t sub_10012DF08()
{
  uint64_t v0;

  return sub_10012DA10(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_10012DF10()
{
  unint64_t result;

  result = qword_1003210F0;
  if (!qword_1003210F0)
  {
    result = swift_getWitnessTable(&unk_10025A67C, &type metadata for TryOutInitialConnectionView);
    atomic_store(result, (unint64_t *)&qword_1003210F0);
  }
  return result;
}

unint64_t sub_10012DF54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003210F8;
  if (!qword_1003210F8)
  {
    v1 = sub_100007FAC(&qword_1003210E8);
    sub_10012DFB8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1003210F8);
  }
  return result;
}

unint64_t sub_10012DFB8()
{
  unint64_t result;

  result = qword_100321100;
  if (!qword_100321100)
  {
    result = swift_getWitnessTable(&unk_10025B0D4, &type metadata for TryOutMessagesView);
    atomic_store(result, (unint64_t *)&qword_100321100);
  }
  return result;
}

uint64_t sub_10012DFFC()
{
  return sub_1000084FC(&qword_100321108, &qword_100321110, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
}

uint64_t destroy for ActiveTransitionAlertView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  return swift_bridgeObjectRelease(a1[10]);
}

uint64_t initializeWithCopy for ActiveTransitionAlertView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  v7 = a2[5];
  v6 = a2[6];
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v6;
  v9 = a2[7];
  v8 = a2[8];
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v8;
  v10 = a2[9];
  v11 = a2[10];
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v11;
  swift_retain(v3);
  swift_retain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t *assignWithCopy for ActiveTransitionAlertView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  v12 = a2[9];
  v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a2[10];
  v15 = a1[10];
  a1[10] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t *assignWithTake for ActiveTransitionAlertView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  v7 = a1[5];
  a1[5] = a2[5];
  swift_bridgeObjectRelease(v7);
  v8 = a2[7];
  v9 = a1[7];
  a1[6] = a2[6];
  a1[7] = v8;
  swift_bridgeObjectRelease(v9);
  a1[8] = a2[8];
  swift_bridgeObjectRelease(a1[9]);
  v10 = a1[10];
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActiveTransitionAlertView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActiveTransitionAlertView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActiveTransitionAlertView()
{
  return &type metadata for ActiveTransitionAlertView;
}

uint64_t sub_10012E318(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029B530, 1);
}

__n128 sub_10012E32C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;

  v10 = type metadata accessor for UIMetrics();
  v11 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
  v12 = EnvironmentObject.init()(v10, v11);
  v14 = v13;
  type metadata accessor for CGSize(0);
  v16 = v15;
  v33 = 0;
  v34 = 0;
  State.init(wrappedValue:)(&v35, &v33, v15);
  v17 = v35;
  v18 = v36;
  LOBYTE(v33) = 0;
  State.init(wrappedValue:)(&v35, &v33, &type metadata for Bool);
  v19 = v35.n128_u8[0];
  v20 = v35.n128_u64[1];
  v33 = 0;
  v34 = 0;
  State.init(wrappedValue:)(&v35, &v33, v16);
  v21 = v35;
  v22 = v36;
  v33 = 0;
  v34 = 0;
  State.init(wrappedValue:)(&v35, &v33, v16);
  v23 = v35;
  v24 = v36;
  v33 = 0;
  v34 = 0;
  State.init(wrappedValue:)(&v35, &v33, v16);
  v25 = v36;
  result = v35;
  *(_QWORD *)a8 = v12;
  *(_QWORD *)(a8 + 8) = v14;
  *(_QWORD *)(a8 + 16) = a1;
  *(_QWORD *)(a8 + 24) = a2;
  *(_QWORD *)(a8 + 32) = a3;
  *(_QWORD *)(a8 + 40) = a4;
  *(_QWORD *)(a8 + 48) = a5;
  *(_QWORD *)(a8 + 56) = a6;
  *(_BYTE *)(a8 + 64) = a7;
  *(_DWORD *)(a8 + 65) = v35.n128_u32[0];
  *(_DWORD *)(a8 + 68) = *(unsigned __int32 *)((char *)v35.n128_u32 + 3);
  *(__n128 *)(a8 + 72) = v17;
  *(_QWORD *)(a8 + 88) = v18;
  *(_BYTE *)(a8 + 96) = v19;
  *(_DWORD *)(a8 + 100) = *(_DWORD *)((char *)&v33 + 3);
  *(_DWORD *)(a8 + 97) = v33;
  *(_QWORD *)(a8 + 104) = v20;
  *(__n128 *)(a8 + 112) = v21;
  *(_QWORD *)(a8 + 128) = v22;
  *(__n128 *)(a8 + 136) = v23;
  *(_QWORD *)(a8 + 152) = v24;
  *(__n128 *)(a8 + 160) = result;
  *(_QWORD *)(a8 + 176) = v25;
  return result;
}

uint64_t sub_10012E4E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _OWORD v28[11];
  uint64_t v29;

  v2 = v1;
  v4 = *(_QWORD **)(v1 + 16);
  if (v4)
  {
    v5 = v4[9];
    v6 = v4[10];
    sub_100007BBC(v4 + 6, v5);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 24))(v27, v5, v6);
    sub_100007CBC((uint64_t)v27, (uint64_t)v26);
    v7 = swift_allocObject(&unk_1002F1D78, 144, 7);
    v8 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(v7 + 48) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v7 + 64) = v8;
    *(_OWORD *)(v7 + 80) = *(_OWORD *)(v2 + 64);
    *(_QWORD *)(v7 + 96) = *(_QWORD *)(v2 + 80);
    v9 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v7 + 32) = v9;
    sub_100007D04(v26, v7 + 104);
    sub_100007CBC((uint64_t)v27, (uint64_t)v25);
    v10 = swift_allocObject(&unk_1002F1DA0, 144, 7);
    sub_100007D04(v25, v10 + 16);
    v11 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(v10 + 88) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v10 + 104) = v11;
    *(_OWORD *)(v10 + 120) = *(_OWORD *)(v2 + 64);
    *(_QWORD *)(v10 + 136) = *(_QWORD *)(v2 + 80);
    v12 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v10 + 56) = *(_OWORD *)v2;
    *(_OWORD *)(v10 + 72) = v12;
    sub_10012FB78((uint64_t *)v2);
    sub_10012FB78((uint64_t *)v2);
    sub_10012E32C((uint64_t)ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter, 0, (uint64_t)sub_10012FB0C, v7, (uint64_t)sub_10012FB6C, v10, 1, (uint64_t)v28);
    result = _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v27);
    v14 = v28[9];
    v15 = v28[10];
    v16 = v28[7];
    *(_OWORD *)(a1 + 128) = v28[8];
    *(_OWORD *)(a1 + 144) = v14;
    *(_OWORD *)(a1 + 160) = v15;
    v17 = v28[5];
    v18 = v28[6];
    v19 = v28[3];
    *(_OWORD *)(a1 + 64) = v28[4];
    *(_OWORD *)(a1 + 80) = v17;
    *(_OWORD *)(a1 + 96) = v18;
    *(_OWORD *)(a1 + 112) = v16;
    v20 = v28[1];
    v21 = v28[2];
    *(_OWORD *)a1 = v28[0];
    *(_OWORD *)(a1 + 16) = v20;
    *(_QWORD *)(a1 + 176) = v29;
    *(_OWORD *)(a1 + 32) = v21;
    *(_OWORD *)(a1 + 48) = v19;
  }
  else
  {
    v22 = *(_QWORD *)(v1 + 24);
    v23 = type metadata accessor for UIMetrics();
    v24 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
    result = EnvironmentObject.error()(0, v22, v23, v24);
    __break(1u);
  }
  return result;
}

uint64_t sub_10012E6B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char v23;
  double v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  id v32;
  char v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD v81[7];

  v80 = a3;
  v5 = sub_100003DB8(&qword_100321160);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_100321168);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100003DB8(&qword_100321170);
  __chkstk_darwin(v78, v13);
  v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100003DB8(&qword_100321178);
  v17 = __chkstk_darwin(v79, v16);
  v19 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v17);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v20 = sub_100003DB8(&qword_100321180);
  sub_10012EB58(a1, a2, (uint64_t)&v8[*(int *)(v20 + 44)]);
  v21 = *(_QWORD *)(a1 + 16);
  if (v21)
  {
    v22 = *(id *)(v21 + 112);
    v23 = static UIContentSizeCategory.>= infix(_:_:)(v22, UIContentSizeCategoryAccessibilityExtraLarge);

    v24 = 0.0;
    if ((v23 & 1) == 0)
    {
      v77 = v12;
      v25 = v15;
      v26 = v19;
      v27 = v9;
      v28 = a2[3];
      v29 = a2[4];
      sub_100007BBC(a2, v28);
      v30 = *(double (**)(uint64_t, uint64_t))(v29 + 120);
      v31 = v29;
      v9 = v27;
      v19 = v26;
      v15 = v25;
      v12 = v77;
      v24 = v30(v28, v31);
    }
    v32 = *(id *)(v21 + 112);
    v33 = static UIContentSizeCategory.>= infix(_:_:)(v32, UIContentSizeCategoryAccessibilityExtraLarge);

    if ((v33 & 1) != 0)
    {
      v35 = INFINITY;
    }
    else
    {
      v36 = a2[3];
      v37 = a2[4];
      sub_100007BBC(a2, v36);
      v35 = (*(double (**)(uint64_t, uint64_t))(v37 + 120))(v36, v37);
    }
    v38 = static Alignment.center.getter(v34);
    v41 = v40;
    if (v24 > v35)
    {
      v42 = static os_log_type_t.fault.getter(v39);
      v43 = v9;
      v44 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v44, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

      v9 = v43;
    }
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v81, 0, 1, 0, 1, 0, 1, *(_QWORD *)&v24, 0, 0, 1, *(_QWORD *)&v35, 0, v38, v41);
    sub_10000B234((uint64_t)v8, (uint64_t)v12, &qword_100321160);
    v45 = &v12[*(int *)(v9 + 36)];
    v46 = v81[5];
    *((_OWORD *)v45 + 4) = v81[4];
    *((_OWORD *)v45 + 5) = v46;
    *((_OWORD *)v45 + 6) = v81[6];
    v47 = v81[1];
    *(_OWORD *)v45 = v81[0];
    *((_OWORD *)v45 + 1) = v47;
    v48 = v81[3];
    *((_OWORD *)v45 + 2) = v81[2];
    *((_OWORD *)v45 + 3) = v48;
    v49 = sub_100007FF0((uint64_t)v8, &qword_100321160);
    v50 = static Edge.Set.top.getter(v49);
    v51 = a2[3];
    v52 = a2[4];
    sub_100007BBC(a2, v51);
    v53 = (*(double (**)(uint64_t, uint64_t))(v52 + 128))(v51, v52);
    v54 = EdgeInsets.init(_all:)(v53);
    v56 = v55;
    v58 = v57;
    v60 = v59;
    sub_10000B234((uint64_t)v12, (uint64_t)v15, &qword_100321168);
    v61 = &v15[*(int *)(v78 + 36)];
    *v61 = v50;
    *((double *)v61 + 1) = v54;
    *((_QWORD *)v61 + 2) = v56;
    *((_QWORD *)v61 + 3) = v58;
    *((_QWORD *)v61 + 4) = v60;
    v61[40] = 0;
    sub_100007FF0((uint64_t)v12, &qword_100321168);
    v62 = a2[3];
    v63 = a2[4];
    sub_100007BBC(a2, v62);
    v64 = (*(double (**)(uint64_t, uint64_t))(v63 + 24))(v62, v63);
    v66 = v65;
    v68 = v67;
    v70 = v69;
    LOBYTE(v62) = static Edge.Set.all.getter(v64);
    sub_10000B234((uint64_t)v15, (uint64_t)v19, &qword_100321170);
    v71 = &v19[*(int *)(v79 + 36)];
    *v71 = v62;
    *((double *)v71 + 1) = v64;
    *((_QWORD *)v71 + 2) = v66;
    *((_QWORD *)v71 + 3) = v68;
    *((_QWORD *)v71 + 4) = v70;
    v71[40] = 0;
    sub_100007FF0((uint64_t)v15, &qword_100321170);
    return sub_10000B458((uint64_t)v19, v80, &qword_100321178);
  }
  else
  {
    v73 = *(_QWORD *)(a1 + 24);
    v74 = type metadata accessor for UIMetrics();
    v75 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
    result = EnvironmentObject.error()(0, v73, v74, v75);
    __break(1u);
  }
  return result;
}

uint64_t sub_10012EB58@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  id *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  id *v46;
  id v47;
  char v48;
  BOOL v49;
  uint64_t KeyPath;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  __n128 v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  id *v110;
  id v111;
  UIContentSizeCategory v112;
  char v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  __n128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t result;
  NSString v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  UIContentSizeCategory v156;
  id *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _OWORD v162[10];
  uint64_t v163;
  _OWORD v164[10];
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  char v179;
  char v180;
  _BYTE v181[7];
  _OWORD v182[13];
  char v183;
  _OWORD v184[10];
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  __int16 v190;
  uint64_t v191;
  BOOL v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  __int16 v197;
  uint64_t v198;
  BOOL v199;

  v159 = a3;
  v153 = type metadata accessor for AccessibilityTraits(0);
  v151 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153, v5);
  v150 = (char *)&v145 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_100321188);
  v9 = __chkstk_darwin(v7, v8);
  v160 = (uint64_t)&v145 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9, v11);
  v155 = (char *)&v145 - v13;
  __chkstk_darwin(v12, v14);
  v161 = (uint64_t)&v145 - v15;
  v16 = a1;
  v156 = (UIContentSizeCategory)a1;
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_QWORD *)(a1 + 56);
  v19 = *(_QWORD *)(v16 + 72);
  *(_QWORD *)&v152 = *(_QWORD *)(v16 + 64);
  *((_QWORD *)&v152 + 1) = v19;
  *(_QWORD *)&v182[0] = v17;
  *((_QWORD *)&v182[0] + 1) = v18;
  v20 = sub_10002B3F4();
  v21 = swift_bridgeObjectRetain(v18);
  v154 = v20;
  v22 = Text.init<A>(_:)(v182, &type metadata for String, v20, v21);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v29 = a2[3];
  v30 = a2[4];
  sub_100007BBC(a2, v29);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 64))(v29, v30);
  v32 = Text.font(_:)(v31, v22, v24, v28, v26);
  v34 = v33;
  v36 = v35;
  v157 = v37;
  swift_release(v31);
  v38 = v36 & 1;
  sub_10002B438(v22, v24, v28);
  swift_bridgeObjectRelease(v26);
  v39 = a2[3];
  v40 = a2[4];
  v158 = a2;
  sub_100007BBC(a2, v39);
  v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 56))(v39, v40);
  v42 = v157;
  v148 = Text.foregroundColor(_:)(v41, v32, v34, v38, v157);
  v149 = v43;
  v146 = v44;
  v147 = v45;
  swift_release(v41);
  sub_10002B438(v32, v34, v38);
  swift_bridgeObjectRelease(v42);
  v46 = (id *)v156[2];
  if (v46)
  {
    v47 = v46[14];
    v48 = static UIContentSizeCategory.>= infix(_:_:)(v47, UIContentSizeCategoryAccessibilityExtraLarge);

    v49 = (v48 & 1) == 0;
    KeyPath = swift_getKeyPath(&unk_1002579E0);
    v51 = v46[14];
    v52 = static Alignment.center.getter(v51);
    v54 = v53;
    v156 = UIContentSizeCategoryAccessibilityExtraLarge;
    v55 = static UIContentSizeCategory.>= infix(_:_:)(v51, UIContentSizeCategoryAccessibilityExtraLarge);
    v157 = v46;
    if ((v55 & 1) != 0
      && (v56 = static Alignment.center.getter(v55),
          v58 = static Alignment.== infix(_:_:)(v52, v54, v56, v57),
          (v58 & 1) != 0))
    {
      v60 = v146;
      v52 = static Alignment.leading.getter(v58, v59);
      v54 = v61;
    }
    else
    {
      v60 = v146;
    }

    v62 = v49;
    v63 = v148;
    v64 = v149;
    v193 = v148;
    v194 = v60;
    v65 = v147 & 1;
    v195 = v147 & 1;
    v196 = v149;
    v197 = 256;
    v198 = KeyPath;
    v199 = v62;
    sub_100132C04(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v184, v66, 0.0, 1, 0.0, 1, v52, v54);
    sub_10002B438(v63, v60, v65);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v64);
    v67 = v158;
    v68 = v158[3];
    v69 = v158[4];
    sub_100007BBC(v158, v68);
    v70 = (*(double (**)(uint64_t, uint64_t))(v69 + 48))(v68, v69);
    v72 = v71;
    v74 = v73;
    v76 = v75;
    v77 = static Edge.Set.all.getter(v70);
    v180 = 0;
    v174 = v184[8];
    v175 = v184[9];
    *(_QWORD *)&v176 = v185;
    v170 = v184[4];
    v171 = v184[5];
    v172 = v184[6];
    v173 = v184[7];
    v166 = v184[0];
    v167 = v184[1];
    v168 = v184[2];
    v169 = v184[3];
    BYTE8(v176) = v77;
    *(_DWORD *)((char *)&v176 + 9) = *(_DWORD *)v181;
    HIDWORD(v176) = *(_DWORD *)&v181[3];
    *(double *)&v177 = v70;
    *((_QWORD *)&v177 + 1) = v72;
    *(_QWORD *)&v178 = v74;
    *((_QWORD *)&v178 + 1) = v76;
    v179 = 0;
    v78 = v150;
    static AccessibilityTraits.isHeader.getter();
    v79 = sub_100003DB8(&qword_100321190);
    v80 = sub_10002B614(&qword_100321198, &qword_100321190, (void (*)(void))sub_10012FC44);
    v81 = (uint64_t)v155;
    View.accessibility(addTraits:)(v78, v79, v80);
    (*(void (**)(char *, uint64_t))(v151 + 8))(v78, v153);
    v182[10] = v176;
    v182[11] = v177;
    v182[12] = v178;
    v183 = v179;
    v182[6] = v172;
    v182[7] = v173;
    v182[8] = v174;
    v182[9] = v175;
    v182[2] = v168;
    v182[3] = v169;
    v182[4] = v170;
    v182[5] = v171;
    v182[0] = v166;
    v182[1] = v167;
    sub_10012FDA0((uint64_t)v182);
    sub_10000B458(v81, v161, &qword_100321188);
    v166 = v152;
    v82 = swift_bridgeObjectRetain(*((_QWORD *)&v152 + 1));
    v83 = Text.init<A>(_:)(&v166, &type metadata for String, v154, v82);
    v85 = v84;
    v87 = v86;
    v89 = v88 & 1;
    v90 = v67[3];
    v91 = v67[4];
    sub_100007BBC(v67, v90);
    v92 = (*(uint64_t (**)(uint64_t, uint64_t))(v91 + 88))(v90, v91);
    v93 = Text.font(_:)(v92, v83, v85, v89, v87);
    v95 = v94;
    v97 = v96;
    v155 = v98;
    swift_release(v92);
    v99 = v97 & 1;
    sub_10002B438(v83, v85, v89);
    swift_bridgeObjectRelease(v87);
    v100 = v67[3];
    v101 = v67[4];
    sub_100007BBC(v67, v100);
    v102 = (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 56))(v100, v101);
    v103 = v155;
    v104 = Text.foregroundColor(_:)(v102, v93, v95, v99, v155);
    v106 = v105;
    LODWORD(v158) = v107;
    v109 = v108;
    swift_release(v102);
    sub_10002B438(v93, v95, v99);
    swift_bridgeObjectRelease(v103);
    v110 = v157;
    v111 = v157[14];
    v112 = v156;
    v113 = static UIContentSizeCategory.>= infix(_:_:)(v111, v156);

    v114 = swift_getKeyPath(&unk_1002579E0);
    v115 = v110[14];
    v116 = static Alignment.center.getter(v115);
    v118 = v117;
    v119 = static UIContentSizeCategory.>= infix(_:_:)(v115, v112);
    if ((v119 & 1) != 0)
    {
      v120 = static Alignment.center.getter(v119);
      v122 = static Alignment.== infix(_:_:)(v116, v118, v120, v121);
      if ((v122 & 1) != 0)
      {
        v116 = static Alignment.leading.getter(v122, v123);
        v118 = v124;
      }
    }

    v125 = v158 & 1;
    v186 = v104;
    v187 = v106;
    v188 = v158 & 1;
    v189 = v109;
    v190 = 256;
    v191 = v114;
    v192 = (v113 & 1) == 0;
    sub_100132C04(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)&v166, v126, 0.0, 1, 0.0, 1, v116, v118);
    sub_10002B438(v104, v106, v125);
    swift_release(v114);
    swift_bridgeObjectRelease(v109);
    v127 = v160;
    v128 = v161;
    sub_10000B234(v161, v160, &qword_100321188);
    v129 = v159;
    sub_10000B234(v127, v159, &qword_100321188);
    v130 = *(int *)(sub_100003DB8(&qword_1003211D0) + 48);
    v131 = v175;
    v162[8] = v174;
    v162[9] = v175;
    v132 = v170;
    v133 = v171;
    v162[4] = v170;
    v162[5] = v171;
    v135 = v172;
    v134 = v173;
    v162[6] = v172;
    v162[7] = v173;
    v136 = v166;
    v137 = v167;
    v162[0] = v166;
    v162[1] = v167;
    v139 = v168;
    v138 = v169;
    v162[2] = v168;
    v162[3] = v169;
    v140 = v129 + v130;
    *(_OWORD *)(v140 + 128) = v174;
    *(_OWORD *)(v140 + 144) = v131;
    *(_OWORD *)(v140 + 64) = v132;
    *(_OWORD *)(v140 + 80) = v133;
    *(_OWORD *)(v140 + 96) = v135;
    *(_OWORD *)(v140 + 112) = v134;
    *(_OWORD *)v140 = v136;
    *(_OWORD *)(v140 + 16) = v137;
    v163 = v176;
    *(_QWORD *)(v140 + 160) = v176;
    *(_OWORD *)(v140 + 32) = v139;
    *(_OWORD *)(v140 + 48) = v138;
    sub_10012FD50((uint64_t)v162);
    sub_100007FF0(v128, &qword_100321188);
    v164[8] = v174;
    v164[9] = v175;
    v165 = v176;
    v164[4] = v170;
    v164[5] = v171;
    v164[6] = v172;
    v164[7] = v173;
    v164[0] = v166;
    v164[1] = v167;
    v164[2] = v168;
    v164[3] = v169;
    sub_10012FDA0((uint64_t)v164);
    return sub_100007FF0(v127, &qword_100321188);
  }
  else
  {
    v142 = v156[3];
    v143 = type metadata accessor for UIMetrics();
    v144 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
    result = EnvironmentObject.error()(0, v142, v143, v144);
    __break(1u);
  }
  return result;
}

uint64_t sub_10012F3D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;

  v50 = a3;
  v5 = sub_100003DB8(&qword_100321118);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_100321120);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003DB8(&qword_100321128);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v18 = a1[4];
  sub_100007BBC(a1, v17);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 232))(v17, v18);
  v21 = v20;
  *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v19);
  *((_QWORD *)v8 + 1) = v21;
  v8[16] = 0;
  v22 = sub_100003DB8(&qword_100321130);
  v23 = sub_10012F680(a2, &v8[*(int *)(v22 + 44)]);
  LOBYTE(v17) = static Edge.Set.top.getter(v23);
  sub_10000B234((uint64_t)v8, (uint64_t)v12, &qword_100321118);
  v24 = &v12[*(int *)(v9 + 36)];
  *v24 = v17;
  *(_OWORD *)(v24 + 8) = 0u;
  *(_OWORD *)(v24 + 24) = 0u;
  v24[40] = 1;
  v25 = sub_100007FF0((uint64_t)v8, &qword_100321118);
  LOBYTE(v17) = static Edge.Set.bottom.getter(v25);
  v26 = a1[3];
  v27 = a1[4];
  sub_100007BBC(a1, v26);
  v28 = (*(double (**)(uint64_t, uint64_t))(v27 + 112))(v26, v27);
  v29 = EdgeInsets.init(_all:)(v28);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  sub_10000B234((uint64_t)v12, (uint64_t)v16, &qword_100321120);
  v36 = &v16[*(int *)(v13 + 36)];
  *v36 = v17;
  *((double *)v36 + 1) = v29;
  *((_QWORD *)v36 + 2) = v31;
  *((_QWORD *)v36 + 3) = v33;
  *((_QWORD *)v36 + 4) = v35;
  v36[40] = 0;
  sub_100007FF0((uint64_t)v12, &qword_100321120);
  v37 = a1[3];
  v38 = a1[4];
  sub_100007BBC(a1, v37);
  v39 = (*(double (**)(uint64_t, uint64_t))(v38 + 24))(v37, v38);
  v41 = v40;
  v43 = v42;
  v45 = v44;
  LOBYTE(v37) = static Edge.Set.all.getter(v39);
  v46 = v50;
  sub_10000B234((uint64_t)v16, v50, &qword_100321128);
  v47 = v46 + *(int *)(sub_100003DB8(&qword_100321138) + 36);
  *(_BYTE *)v47 = v37;
  *(double *)(v47 + 8) = v39;
  *(_QWORD *)(v47 + 16) = v41;
  *(_QWORD *)(v47 + 24) = v43;
  *(_QWORD *)(v47 + 32) = v45;
  *(_BYTE *)(v47 + 40) = 0;
  return sub_100007FF0((uint64_t)v16, &qword_100321128);
}

uint64_t sub_10012F680@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  void (*v33)(char *, uint64_t, __n128);
  __n128 v34;
  uint64_t countAndFlagsBits;
  uint64_t v37;
  Swift::String v38;

  v4 = sub_100003DB8(&qword_100321140);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&countAndFlagsBits - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v12 = (char *)&countAndFlagsBits - v11;
  v37 = *(_QWORD *)(a1 + 80);
  v13 = v37;
  KeyPath = swift_getKeyPath(&unk_1002579C0);
  swift_bridgeObjectRetain(v13);
  v15 = sub_100003DB8(&qword_100321148);
  v16 = sub_1000084FC(&qword_100321150, &qword_100321148, (uint64_t)&protocol conformance descriptor for [A]);
  v17 = sub_1001161C8();
  ForEach<>.init(_:id:content:)(&v37, KeyPath, sub_10012F95C, 0, v15, &type metadata for QuestionnaireLikeButton, v16, &protocol witness table for String, v17);
  v18 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v38._object = (void *)0x800000010026B010;
  v19._countAndFlagsBits = 0x6C65636E6143;
  v19._object = (void *)0xE600000000000000;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v38._countAndFlagsBits = 0xD00000000000001BLL;
  v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, (NSBundle)v18, v20, v38);
  countAndFlagsBits = v21._countAndFlagsBits;

  v22 = swift_allocObject(&unk_1002F1DC8, 104, 7);
  v23 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v22 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v22 + 64) = v23;
  *(_OWORD *)(v22 + 80) = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(v22 + 96) = *(_QWORD *)(a1 + 80);
  v24 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v22 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v22 + 32) = v24;
  sub_10012FB78((uint64_t *)a1);
  v25 = type metadata accessor for UIMetrics();
  v26 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
  v27 = EnvironmentObject.init()(v25, v26);
  v29 = v28;
  v30 = v5;
  v31 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v31(v9, v12, v4);
  v31(a2, v9, v4);
  v32 = &a2[*(int *)(sub_100003DB8(&qword_100321158) + 48)];
  *(_QWORD *)v32 = v27;
  *((_QWORD *)v32 + 1) = v29;
  *((_QWORD *)v32 + 2) = countAndFlagsBits;
  *((_QWORD *)v32 + 3) = v21._object;
  *((_QWORD *)v32 + 4) = 0;
  *((_QWORD *)v32 + 5) = 0xE000000000000000;
  v32[48] = 0;
  *((_QWORD *)v32 + 7) = sub_10012FC34;
  *((_QWORD *)v32 + 8) = v22;
  v33 = *(void (**)(char *, uint64_t, __n128))(v30 + 8);
  swift_retain(v27);
  swift_bridgeObjectRetain(v21._object);
  swift_bridgeObjectRetain(0xE000000000000000);
  v34 = swift_retain(v22);
  v33(v12, v4, v34);
  swift_release(v22);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRelease(v21._object);
  swift_release(v27);
  return ((uint64_t (*)(char *, uint64_t))v33)(v9, v4);
}

uint64_t sub_10012F95C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *a1;
  v3 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v7 = type metadata accessor for UIMetrics();
  v8 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
  swift_bridgeObjectRetain(v3);
  swift_retain(v5);
  result = EnvironmentObject.init()(v7, v8);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0xE000000000000000;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v6;
  *(_QWORD *)(a2 + 64) = v5;
  return result;
}

uint64_t sub_10012F9F0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  if (*a1)
  {
    v2 = a1[4];
    v3 = a1[5];
    swift_retain(*a1);
    sub_100186480(v2, v3);
    return swift_release(v1);
  }
  else
  {
    v5 = a1[1];
    v6 = type metadata accessor for TransitionAlertModel();
    v7 = sub_100056D60((unint64_t *)&unk_1003184A0, (uint64_t (*)(uint64_t))type metadata accessor for TransitionAlertModel);
    result = EnvironmentObject.error()(0, v5, v6, v7);
    __break(1u);
  }
  return result;
}

uint64_t sub_10012FA70@<X0>(uint64_t a1@<X8>)
{
  return sub_10012E4E0(a1);
}

uint64_t sub_10012FAB8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 13);
  return swift_deallocObject(v0, 144, 7);
}

uint64_t sub_10012FB0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10012E6B8(v1 + 16, (_QWORD *)(v1 + 104), a1);
}

uint64_t sub_10012FB18()
{
  _QWORD *v0;

  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 2);
  swift_release(v0[7]);
  swift_release(v0[9]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[14]);
  swift_bridgeObjectRelease(v0[16]);
  swift_bridgeObjectRelease(v0[17]);
  return swift_deallocObject(v0, 144, 7);
}

uint64_t sub_10012FB6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10012F3D0((_QWORD *)(v1 + 16), v1 + 56, a1);
}

uint64_t *sub_10012FB78(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = a1[5];
  v4 = a1[7];
  v5 = a1[9];
  v6 = a1[10];
  swift_retain(a1[2]);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_retain(v2);
  return a1;
}

uint64_t sub_10012FBE8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_10012FC34()
{
  uint64_t v0;

  return sub_10012F9F0((_QWORD *)(v0 + 16));
}

uint64_t sub_10012FC44()
{
  return sub_10002B614(&qword_1003211A0, &qword_1003211A8, (void (*)(void))sub_10012FC68);
}

unint64_t sub_10012FC68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003211B0;
  if (!qword_1003211B0)
  {
    v1 = sub_100007FAC(&qword_1003211B8);
    sub_10012FCEC();
    sub_1000084FC(&qword_100318300, &qword_100318308, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003211B0);
  }
  return result;
}

unint64_t sub_10012FCEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003211C0;
  if (!qword_1003211C0)
  {
    v1 = sub_100007FAC(&qword_1003211C8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003211C0);
  }
  return result;
}

uint64_t sub_10012FD50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  sub_10002B750(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return a1;
}

uint64_t sub_10012FDA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  sub_10002B438(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_10012FDF0()
{
  return sub_1000084FC(&qword_1003211D8, &qword_1003211E0, (uint64_t)&unk_100256288);
}

uint64_t sub_10012FE1C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)NSUserDefaults), "init");
  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 24) = v2;
  *(_QWORD *)(v0 + 32) = 0xD000000000000010;
  *(_QWORD *)(v0 + 40) = 0x800000010026B060;
  *(_BYTE *)(v0 + 48) = 2;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0xD000000000000012;
  *(_QWORD *)(v0 + 72) = 0x800000010026ADE0;
  *(_BYTE *)(v0 + 80) = 2;
  *(_QWORD *)(v0 + 88) = v2;
  *(_QWORD *)(v0 + 96) = 0xD000000000000021;
  *(_QWORD *)(v0 + 104) = 0x800000010026B080;
  *(_BYTE *)(v0 + 112) = 2;
  v3 = qword_100315820;
  v4 = v2;
  if (v3 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FD18);
  v7 = swift_retain_n(v1, v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v18 = v1;
    v19 = v11;
    *(_DWORD *)v10 = 136446210;
    v12 = type metadata accessor for SOSBuddyPersistence();
    v13 = swift_retain(v1);
    v14 = String.init<A>(describing:)(&v18, v12, v13);
    v16 = v15;
    v18 = sub_100172BEC(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 4, v10 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s] init", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  return v1;
}

uint64_t sub_100130064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;

  v1 = v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = swift_retain_n(v0, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v18 = v1;
    v19 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for SOSBuddyPersistence();
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v18, v9, v10);
    v13 = v12;
    v18 = sub_100172BEC(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v7 + 4, v7 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] deinit", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }

  v14 = *(void **)(v1 + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 40));

  v15 = *(void **)(v1 + 56);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 72));

  v16 = *(void **)(v1 + 88);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 104));

  return v1;
}

uint64_t sub_100130258()
{
  uint64_t v0;

  sub_100130064();
  return swift_deallocClassInstance(v0, 113, 7);
}

uint64_t type metadata accessor for SOSBuddyPersistence()
{
  return objc_opt_self(_TtC8SOSBuddy19SOSBuddyPersistence);
}

uint64_t sub_100130298(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = &unk_100257A70;
  result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 24);
    return 0;
  }
  return result;
}

void **sub_10013031C(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  char *v10;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  unsigned int (*v18)(const void *, uint64_t, uint64_t);
  char *v19;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  v10 = (char *)*a2;
  *a1 = *a2;
  if (v7 > 7 || v9 != 0 || ((v7 + 24) & ~v7) + v8 > 0x18)
  {
    a1 = (void **)&v10[(v7 & 0xF8 ^ 0x1F8) & (v7 + 16)];
    swift_retain(v10);
  }
  else
  {
    v13 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *v14;
    v15 = v14[1];
    v13[1] = v15;
    v16 = (void *)(((unint64_t)v13 + v7 + 16) & ~v7);
    v17 = (const void *)(((unint64_t)v14 + v7 + 16) & ~v7);
    v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    v19 = v10;
    swift_bridgeObjectRetain(v15);
    if (v18(v17, 1, v4))
    {
      memcpy(v16, v17, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v16, v17, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
    }
  }
  return a1;
}

uint64_t sub_100130454(id *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = (unint64_t)a1 + 15;

  v3 &= 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + 8));
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (v3 + *(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  return result;
}

void **sub_1001304DC(void **a1, void **a2, uint64_t a3)
{
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  id v14;
  size_t v15;

  v4 = *a2;
  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = v6[1];
  v5[1] = v7;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)(((unint64_t)v5 + v10 + 16) & ~v10);
  v12 = (const void *)(((unint64_t)v6 + v10 + 16) & ~v10);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  v14 = v4;
  swift_bridgeObjectRetain(v7);
  if (v13(v12, 1, v8))
  {
    if (*(_DWORD *)(v9 + 84))
      v15 = *(_QWORD *)(v9 + 64);
    else
      v15 = *(_QWORD *)(v9 + 64) + 1;
    memcpy(v11, v12, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v11, v12, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
  }
  return a1;
}

void **sub_1001305C8(void **a1, void **a2, uint64_t a3)
{
  void *v5;
  unint64_t v6;
  void *v7;
  unint64_t v8;
  id v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  size_t v21;

  v6 = (unint64_t)a2 + 15;
  v5 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = (unint64_t)a1 + 15;
  v9 = v5;

  v10 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  v11 = v6 & 0xFFFFFFFFFFFFFFF8;
  *v10 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  v12 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 8);
  v13 = v10[1];
  v10[1] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = (void *)(((unint64_t)v10 + v16 + 16) & ~v16);
  v18 = (void *)((v16 + 16 + v11) & ~v16);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v11) = v19(v17, 1, v14);
  v20 = v19(v18, 1, v14);
  if ((_DWORD)v11)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v17, v18, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v17, 0, 1, v14);
      return a1;
    }
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v17, v18, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  }
  if (*(_DWORD *)(v15 + 84))
    v21 = *(_QWORD *)(v15 + 64);
  else
    v21 = *(_QWORD *)(v15 + 64) + 1;
  memcpy(v17, v18, v21);
  return a1;
}

_QWORD *sub_100130710(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  size_t v11;

  *a1 = *a2;
  v4 = (_OWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_OWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 16) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 16) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84))
      v11 = *(_QWORD *)(v7 + 64);
    else
      v11 = *(_QWORD *)(v7 + 64) + 1;
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

void **sub_1001307E0(void **a1, void **a2, uint64_t a3)
{
  unint64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  size_t v17;

  v5 = (unint64_t)a2 + 15;
  v6 = *a1;
  *a1 = *a2;
  v7 = (unint64_t)a1 + 15;

  v7 &= 0xFFFFFFFFFFFFFFF8;
  v8 = v5 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v9 = *(_QWORD *)(v7 + 8);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (void *)((v12 + 16 + v7) & ~v12);
  v14 = (void *)((v12 + 16 + v8) & ~v12);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v8) = v15(v13, 1, v10);
  v16 = v15(v14, 1, v10);
  if ((_DWORD)v8)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v13, v14, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
      return a1;
    }
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v13, v14, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  }
  if (*(_DWORD *)(v11 + 84))
    v17 = *(_QWORD *)(v11 + 64);
  else
    v17 = *(_QWORD *)(v11 + 64) + 1;
  memcpy(v13, v14, v17);
  return a1;
}

uint64_t sub_10013091C(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_28;
  v11 = v8 + ((v9 + 24) & ~v9);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(_WORD *)((char *)a1 + v11))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 < 2)
    {
LABEL_28:
      if ((v6 & 0x80000000) != 0)
      {
        v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                     + v9
                                                                     + 16) & ~v9);
        if (v18 >= 2)
          return v18 - 1;
        else
          return 0;
      }
      else
      {
        v17 = *a1;
        if (*a1 >= 0xFFFFFFFFuLL)
          LODWORD(v17) = -1;
        return (v17 + 1);
      }
    }
  }
  v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((_BYTE *)a1 + v11))
    goto LABEL_28;
LABEL_21:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X12 }
  }
  return v7 + v16 + 1;
}

void sub_100130AA0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v11;
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = &_mh_execute_header.magic + 1;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = &dword_100000004;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X15 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_100130CF8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_100130D00()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_100130D20()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_100130D28()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_100130D38()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t type metadata accessor for StoredValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StoredValue);
}

id ConnectionAssistantRenderer.Buffers.Buffer.init(device:)(void *a1, uint64_t a2)
{
  id v3;
  unint64_t v4;
  uint64_t v5;

  v3 = objc_msgSend(a1, "newBufferWithLength:options:", *(_QWORD *)(*(_QWORD *)(a2 - 8) + 64), 1);
  if (!v3)
  {
    v4 = sub_10001D534();
    v5 = swift_allocError(&type metadata for ConnectionAssistantRenderer.Buffers.Error, v4, 0, 0);
    swift_willThrow(v5);
  }
  swift_unknownObjectRelease(a1);
  return v3;
}

uint64_t *ConnectionAssistantRenderer.Buffers.texCoords.unsafeMutableAddressor()
{
  if (qword_1003158F0 != -1)
    swift_once(&qword_1003158F0, sub_100130FFC);
  return &static ConnectionAssistantRenderer.Buffers.texCoords;
}

uint64_t ConnectionAssistantRenderer.Buffers.Buffer.contents.setter(uint64_t a1, void *a2, uint64_t a3)
{
  id v6;
  id v7;

  swift_unknownObjectRetain(a2);
  v6 = objc_msgSend(a2, "contents");
  v7 = a2;
  return (*(uint64_t (**)(id, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 40))(v6, a1, a3);
}

uint64_t ConnectionAssistantRenderer.Buffers.rectVerticesBuffer.getter()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 24));
}

uint64_t ConnectionAssistantRenderer.Buffers.Buffer.contents.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v6;
  id v7;

  v6 = objc_msgSend((id)swift_unknownObjectRetain(a1), "contents");
  v7 = a1;
  return (*(uint64_t (**)(uint64_t, id, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v6, a2);
}

void (*ConnectionAssistantRenderer.Buffers.Buffer.contents.modify(_QWORD *a1, void *a2, uint64_t a3))(uint64_t *a1, char a2)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  *v6 = a2;
  v6[1] = a3;
  v7 = *(_QWORD *)(a3 - 8);
  v6[2] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v6[3] = malloc(v8);
  v9 = malloc(v8);
  v6[4] = v9;
  ConnectionAssistantRenderer.Buffers.Buffer.contents.getter(a2, a3, (uint64_t)v9);
  return sub_100130F60;
}

void sub_100130F60(uint64_t *a1, char a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *a1;
  v3 = *(void **)(*a1 + 24);
  v4 = *(void **)(*a1 + 32);
  if ((a2 & 1) != 0)
  {
    v5 = *(_QWORD *)(v2 + 8);
    v6 = *(_QWORD *)(v2 + 16);
    v7 = *(void **)v2;
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*a1 + 24), v4, v5);
    ConnectionAssistantRenderer.Buffers.Buffer.contents.setter((uint64_t)v3, v7, v5);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    ConnectionAssistantRenderer.Buffers.Buffer.contents.setter(*(_QWORD *)(*a1 + 32), *(void **)v2, *(_QWORD *)(v2 + 8));
  }
  free(v4);
  free(v3);
  free((void *)v2);
}

uint64_t ConnectionAssistantRenderer.Buffers.vertexUniformsBuffer.getter()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 32));
}

double sub_100130FFC()
{
  double result;

  static ConnectionAssistantRenderer.Buffers.texCoords = 0;
  qword_10033FF80 = 1065353216;
  qword_10033FF88 = 0x3F80000000000000;
  __asm { FMOV            V0.2S, #1.0 }
  qword_10033FF90 = *(_QWORD *)&result;
  return result;
}

double static ConnectionAssistantRenderer.Buffers.texCoords.getter()
{
  if (qword_1003158F0 != -1)
    swift_once(&qword_1003158F0, sub_100130FFC);
  return *(double *)&static ConnectionAssistantRenderer.Buffers.texCoords;
}

uint64_t ConnectionAssistantRenderer.Buffers.__allocating_init(device:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 40, 7);
  ConnectionAssistantRenderer.Buffers.init(device:)(a1);
  return v3;
}

_QWORD *ConnectionAssistantRenderer.Buffers.init(device:)(id a1)
{
  _QWORD *v1;
  id v9;
  id v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[8];

  v1[2] = 4;
  if (qword_1003158F0 != -1)
    swift_once(&qword_1003158F0, sub_100130FFC);
  __asm { FMOV            V0.2S, #-1.0 }
  v18[0] = _D0;
  v18[1] = qword_10033FF88;
  v18[2] = 0xBF8000003F800000;
  v18[3] = qword_10033FF90;
  v18[4] = 0x3F800000BF800000;
  v18[5] = static ConnectionAssistantRenderer.Buffers.texCoords;
  __asm { FMOV            V0.2S, #1.0 }
  v18[6] = _D0;
  v18[7] = qword_10033FF80;
  v9 = objc_msgSend(a1, "newBufferWithBytes:length:options:", v18, 64, 1);
  if (!v9)
  {
    v12 = sub_10001D534();
    v13 = swift_allocError(&type metadata for ConnectionAssistantRenderer.Buffers.Error, v12, 0, 0);
    swift_willThrow(v13);
LABEL_8:
    swift_unknownObjectRelease(a1);
    v16 = type metadata accessor for ConnectionAssistantRenderer.Buffers();
    swift_deallocPartialClassInstance(v1, v16, 40, 7);
    return v1;
  }
  v1[3] = v9;
  v10 = objc_msgSend(a1, "newBufferWithLength:options:", 80, 1);
  if (!v10)
  {
    v14 = sub_10001D534();
    v15 = swift_allocError(&type metadata for ConnectionAssistantRenderer.Buffers.Error, v14, 0, 0);
    swift_willThrow(v15);
    swift_unknownObjectRelease(a1);
    a1 = (id)v1[3];
    goto LABEL_8;
  }
  v11 = v10;
  swift_unknownObjectRelease(a1);
  v1[4] = v11;
  return v1;
}

uint64_t type metadata accessor for ConnectionAssistantRenderer.Buffers()
{
  return objc_opt_self(_TtCC8SOSBuddy27ConnectionAssistantRenderer7Buffers);
}

uint64_t ConnectionAssistantRenderer.Buffers.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t ConnectionAssistantRenderer.Buffers.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

unint64_t sub_1001312AC()
{
  unint64_t result;

  result = qword_100321368;
  if (!qword_100321368)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ConnectionAssistantRenderer.Buffers.Error, &type metadata for ConnectionAssistantRenderer.Buffers.Error);
    atomic_store(result, (unint64_t *)&qword_100321368);
  }
  return result;
}

uint64_t _s7BuffersC5ErrorOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100131330 + 4 * byte_100257AB8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100131350 + 4 * byte_100257ABD[v4]))();
}

_BYTE *sub_100131330(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100131350(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100131358(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100131360(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100131368(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100131370(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantRenderer.Buffers.Error()
{
  return &type metadata for ConnectionAssistantRenderer.Buffers.Error;
}

uint64_t type metadata accessor for ConnectionAssistantRenderer.Buffers.Buffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConnectionAssistantRenderer.Buffers.Buffer);
}

ValueMetadata *type metadata accessor for ConnectionAssistantLockScreenView()
{
  return &type metadata for ConnectionAssistantLockScreenView;
}

uint64_t sub_1001313A8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029B6B0, 1);
}

_QWORD *sub_1001313B8@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  __int128 *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned int v41;
  double v42;
  double v43;
  double v44;
  double v45;
  _OWORD v46[7];
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _BYTE v52[32];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a5;
    v45 = a7;
    v43 = a3;
    v42 = a1;
    v41 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v41;
    v19 = a10;
    a1 = v42;
    a3 = v43;
    v18 = a12;
    a5 = v44;
    a7 = v45;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v46, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v15[1];
  v49 = *v15;
  v50 = v34;
  sub_100135174((uint64_t)&v49, (uint64_t)v52);
  v51 = *((_QWORD *)&v50 + 1);
  v47 = *((_QWORD *)v15 + 4);
  v48 = *((_BYTE *)v15 + 40);
  v35 = v15[1];
  *a9 = *v15;
  a9[1] = v35;
  *(_OWORD *)((char *)a9 + 25) = *(__int128 *)((char *)v15 + 25);
  v36 = v46[6];
  v37 = v46[4];
  a9[8] = v46[5];
  a9[9] = v36;
  v38 = v46[1];
  a9[3] = v46[0];
  a9[4] = v38;
  v39 = v46[2];
  a9[6] = v46[3];
  a9[7] = v37;
  a9[5] = v39;
  sub_1001351B0((uint64_t)v52);
  sub_100034218(&v51);
  return sub_100031A88(&v47);
}

double sub_100131590@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100131F40(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100318350, &qword_100318358).n128_u64[0];
  return result;
}

double sub_1001315E8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  double v34;
  double v36;
  double v37;
  double v38;
  uint64_t v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  double result;
  unsigned int v46;
  unsigned int v47;
  double v48;
  double v49;
  double v50;
  double v51;
  _OWORD v52[7];

  v20 = a19;
  v21 = a18;
  v22 = a17;
  v24 = a14;
  v23 = a15;
  v25 = a12;
  v26 = a10;
  v27 = a2 & 1;
  v28 = a1;
  if ((_DWORD)v27)
    v28 = -INFINITY;
  v29 = a4 & 1;
  v30 = a3;
  if ((_DWORD)v29)
    v30 = v28;
  v31 = a6 & 1;
  v32 = a8 & 1;
  v33 = a13 & 1;
  v34 = a5;
  if ((a6 & 1) != 0)
    v34 = v30;
  if (v28 > v30 || v30 > v34)
    goto LABEL_22;
  v36 = a7;
  if ((a8 & 1) != 0)
    v36 = -INFINITY;
  v37 = a10;
  if ((a11 & 1) != 0)
    v37 = v36;
  v38 = a12;
  if ((a13 & 1) != 0)
    v38 = v37;
  if (v36 > v37 || v37 > v38)
  {
LABEL_22:
    v50 = a7;
    v51 = a5;
    v48 = a1;
    v49 = a3;
    v47 = v27;
    v46 = v29;
    v40 = static os_log_type_t.fault.getter();
    v41 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v33 = a13 & 1;
    v29 = v46;
    v24 = a14;
    v23 = a15;
    v27 = v47;
    v26 = a10;
    v25 = a12;
    a1 = v48;
    a3 = v49;
    a7 = v50;
    a5 = v51;
    v21 = a18;
    v20 = a19;
    v22 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v52, *(_QWORD *)&a1, v27, *(_QWORD *)&a3, v29, *(_QWORD *)&a5, v31, *(_QWORD *)&a7, v32, *(_QWORD *)&v26, a11 & 1, *(_QWORD *)&v25, v33, v24, v23);
  *(_QWORD *)a9 = a16;
  *(_QWORD *)(a9 + 8) = v22;
  *(_BYTE *)(a9 + 16) = v21 & 1;
  *(_QWORD *)(a9 + 24) = v20;
  v42 = v52[5];
  *(_OWORD *)(a9 + 96) = v52[4];
  *(_OWORD *)(a9 + 112) = v42;
  *(_OWORD *)(a9 + 128) = v52[6];
  v43 = v52[1];
  *(_OWORD *)(a9 + 32) = v52[0];
  *(_OWORD *)(a9 + 48) = v43;
  v44 = v52[3];
  *(_OWORD *)(a9 + 64) = v52[2];
  *(_OWORD *)(a9 + 80) = v44;
  sub_10002B750(a16, v22, v21 & 1);
  *(_QWORD *)&result = swift_bridgeObjectRetain(v20).n128_u64[0];
  return result;
}

uint64_t sub_1001317C8@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  _OWORD *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unsigned int v39;
  double v40;
  double v41;
  double v42;
  double v43;
  _OWORD v44[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v42 = a5;
    v43 = a7;
    v41 = a3;
    v40 = a1;
    v39 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v39;
    v19 = a10;
    a1 = v40;
    a3 = v41;
    v18 = a12;
    a5 = v42;
    a7 = v43;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v15[1];
  *a9 = *v15;
  a9[1] = v34;
  *(_OWORD *)((char *)a9 + 27) = *(_OWORD *)((char *)v15 + 27);
  v35 = v44[5];
  a9[7] = v44[4];
  a9[8] = v35;
  a9[9] = v44[6];
  v36 = v44[1];
  a9[3] = v44[0];
  a9[4] = v36;
  v37 = v44[3];
  a9[5] = v44[2];
  a9[6] = v37;
  return sub_100055758((uint64_t)v15);
}

uint64_t sub_10013196C@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned int v41;
  double v42;
  unint64_t v43;
  double v44;
  unint64_t v45;
  _OWORD v46[7];

  v18 = a16;
  v19 = a13;
  v20 = a11;
  v21 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v21)
    a10.n128_f64[0] = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = a10.n128_f64[0];
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (a10.n128_f64[0] > v23 || v23 > v26)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v28 = a11;
  if ((a12 & 1) != 0)
    v28 = a10.n128_f64[0];
  v29 = a13;
  if ((a14 & 1) != 0)
    v29 = v28;
  if (a10.n128_f64[0] > v28 || v28 > v29)
  {
LABEL_22:
    v45 = a7;
    v43 = a1;
    v44 = a5;
    v42 = a3;
    v41 = v21;
    v31 = static os_log_type_t.fault.getter(a10);
    v32 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a16;
    v20 = a11;
    v21 = v41;
    a3 = v42;
    a1 = v43;
    a5 = v44;
    v19 = a13;
    a7 = v45;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v46, a1, v21, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, a7, v25, *(_QWORD *)&v20, a12 & 1, *(_QWORD *)&v19, a14 & 1, a15, v18);
  v33 = *(_OWORD *)(v16 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v16 + 96);
  *(_OWORD *)(a9 + 112) = v33;
  *(_OWORD *)(a9 + 128) = *(_OWORD *)(v16 + 128);
  v34 = *(_OWORD *)(v16 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v16 + 32);
  *(_OWORD *)(a9 + 48) = v34;
  v35 = *(_OWORD *)(v16 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v16 + 64);
  *(_OWORD *)(a9 + 80) = v35;
  v36 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v16;
  *(_OWORD *)(a9 + 16) = v36;
  v37 = v46[2];
  *(_OWORD *)(a9 + 200) = v46[3];
  v38 = v46[5];
  *(_OWORD *)(a9 + 216) = v46[4];
  *(_OWORD *)(a9 + 232) = v38;
  *(_OWORD *)(a9 + 248) = v46[6];
  v39 = v46[1];
  *(_OWORD *)(a9 + 152) = v46[0];
  *(_OWORD *)(a9 + 168) = v39;
  *(_BYTE *)(a9 + 144) = *(_BYTE *)(v16 + 144);
  *(_OWORD *)(a9 + 184) = v37;
  return sub_1001352CC(v16);
}

uint64_t sub_100131B3C@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unsigned int v43;
  double v44;
  unint64_t v45;
  double v46;
  unint64_t v47;
  _OWORD v48[7];

  v18 = a16;
  v19 = a13;
  v20 = a11;
  v21 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v21)
    a10.n128_f64[0] = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = a10.n128_f64[0];
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (a10.n128_f64[0] > v23 || v23 > v26)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v28 = a11;
  if ((a12 & 1) != 0)
    v28 = a10.n128_f64[0];
  v29 = a13;
  if ((a14 & 1) != 0)
    v29 = v28;
  if (a10.n128_f64[0] > v28 || v28 > v29)
  {
LABEL_22:
    v47 = a7;
    v45 = a1;
    v46 = a5;
    v44 = a3;
    v43 = v21;
    v31 = static os_log_type_t.fault.getter(a10);
    v32 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a16;
    v20 = a11;
    v21 = v43;
    a3 = v44;
    a1 = v45;
    a5 = v46;
    v19 = a13;
    a7 = v47;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v48, a1, v21, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, a7, v25, *(_QWORD *)&v20, a12 & 1, *(_QWORD *)&v19, a14 & 1, a15, v18);
  v33 = *(_OWORD *)(v16 + 176);
  *(_OWORD *)(a9 + 160) = *(_OWORD *)(v16 + 160);
  *(_OWORD *)(a9 + 176) = v33;
  v34 = *(_OWORD *)(v16 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v16 + 96);
  *(_OWORD *)(a9 + 112) = v34;
  v35 = *(_OWORD *)(v16 + 144);
  *(_OWORD *)(a9 + 128) = *(_OWORD *)(v16 + 128);
  *(_OWORD *)(a9 + 144) = v35;
  v36 = *(_OWORD *)(v16 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v16 + 32);
  *(_OWORD *)(a9 + 48) = v36;
  v37 = *(_OWORD *)(v16 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v16 + 64);
  *(_OWORD *)(a9 + 80) = v37;
  v38 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v16;
  *(_OWORD *)(a9 + 16) = v38;
  v39 = v48[2];
  *(_OWORD *)(a9 + 248) = v48[3];
  v40 = v48[5];
  *(_OWORD *)(a9 + 264) = v48[4];
  *(_OWORD *)(a9 + 280) = v40;
  *(_OWORD *)(a9 + 296) = v48[6];
  v41 = v48[1];
  *(_OWORD *)(a9 + 200) = v48[0];
  *(_OWORD *)(a9 + 216) = v41;
  *(_BYTE *)(a9 + 192) = *(_BYTE *)(v16 + 192);
  *(_OWORD *)(a9 + 232) = v39;
  return sub_1001351E0(v16);
}

double sub_100131D14@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, __int16 a18)
{
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  double result;
  unsigned int v44;
  double v45;
  double v46;
  double v47;
  double v48;
  _OWORD v49[7];

  v19 = a18;
  v20 = a16;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((a4 & 1) != 0)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v47 = a5;
    v48 = a7;
    v45 = a1;
    v46 = a3;
    v44 = v25;
    v37 = static os_log_type_t.fault.getter();
    v38 = (void *)static Log.runtimeIssuesLog.getter();
    v39 = v37;
    v20 = a16;
    os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v38, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v22 = a14;
    v21 = a15;
    v25 = v44;
    v24 = a10;
    v23 = a12;
    a1 = v45;
    a3 = v46;
    a5 = v47;
    a7 = v48;
    v19 = a18;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v49, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  v40 = v49[2];
  *(_OWORD *)(a9 + 72) = v49[3];
  v41 = v49[5];
  *(_OWORD *)(a9 + 88) = v49[4];
  *(_OWORD *)(a9 + 104) = v41;
  *(_OWORD *)(a9 + 120) = v49[6];
  v42 = v49[1];
  *(_OWORD *)(a9 + 24) = v49[0];
  *(_OWORD *)(a9 + 40) = v42;
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = a17;
  *(_BYTE *)(a9 + 16) = v19 & 1;
  *(_BYTE *)(a9 + 17) = HIBYTE(v19) & 1;
  *(_OWORD *)(a9 + 56) = v40;
  *(_QWORD *)&result = swift_retain(v20).n128_u64[0];
  return result;
}

double sub_100131EE8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100131F40(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1003199B8, &qword_1003199C0).n128_u64[0];
  return result;
}

__n128 sub_100131F40@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = v17;
  v19 = a9;
  v20 = a17;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((_DWORD)v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v49 = a5;
    v50 = a7;
    v47 = a3;
    v48 = a1;
    v46 = v25;
    v45 = v27;
    v38 = static os_log_type_t.fault.getter();
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v27 = v45;
    v22 = a14;
    v21 = a15;
    v25 = v46;
    v24 = a10;
    v23 = a12;
    a3 = v47;
    a1 = v48;
    a5 = v49;
    a7 = v50;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  sub_10000B234(v18, v19, a16);
  v41 = v19 + *(int *)(sub_100003DB8(v20) + 36);
  v42 = v51[5];
  *(_OWORD *)(v41 + 64) = v51[4];
  *(_OWORD *)(v41 + 80) = v42;
  *(_OWORD *)(v41 + 96) = v51[6];
  v43 = v51[1];
  *(_OWORD *)v41 = v51[0];
  *(_OWORD *)(v41 + 16) = v43;
  result = (__n128)v51[3];
  *(_OWORD *)(v41 + 32) = v51[2];
  *(__n128 *)(v41 + 48) = result;
  return result;
}

double sub_10013210C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100131F40(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100319AF8, &qword_100319B00).n128_u64[0];
  return result;
}

double sub_100132164@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  double result;
  unsigned int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  _OWORD v43[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v42 = a7;
    v40 = a1;
    v41 = a5;
    v39 = a3;
    v38 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v38;
    v19 = a10;
    a3 = v39;
    a1 = v40;
    a5 = v41;
    v18 = a12;
    a7 = v42;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v43, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v43[2];
  *(_OWORD *)(a9 + 56) = v43[3];
  v35 = v43[5];
  *(_OWORD *)(a9 + 72) = v43[4];
  *(_OWORD *)(a9 + 88) = v35;
  *(_OWORD *)(a9 + 104) = v43[6];
  v36 = v43[1];
  *(_OWORD *)(a9 + 8) = v43[0];
  *(_OWORD *)(a9 + 24) = v36;
  *(_QWORD *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v34;
  *(_QWORD *)&result = swift_retain(a16).n128_u64[0];
  return result;
}

double sub_10013230C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12, char a13, double a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v32;
  double v33;
  double v34;
  uint64_t v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  double result;
  __int128 v41;
  unsigned int v42;
  double v43;
  double v44;
  double v45;
  double v46;
  _OWORD v47[7];

  v21 = a17;
  v22 = a14;
  v23 = a12;
  v24 = a2 & 1;
  v25 = a1;
  if ((_DWORD)v24)
    v25 = -INFINITY;
  v26 = a4 & 1;
  v27 = a3;
  if ((a4 & 1) != 0)
    v27 = v25;
  v28 = a6 & 1;
  v29 = a8 & 1;
  v30 = a5;
  if ((a6 & 1) != 0)
    v30 = v27;
  if (v25 > v27 || v27 > v30)
    goto LABEL_22;
  v32 = a7;
  if ((a8 & 1) != 0)
    v32 = -INFINITY;
  v33 = a12;
  if ((a13 & 1) != 0)
    v33 = v32;
  v34 = a14;
  if ((a15 & 1) != 0)
    v34 = v33;
  if (v32 > v33 || v33 > v34)
  {
LABEL_22:
    v45 = a5;
    v46 = a7;
    v44 = a3;
    v43 = a1;
    v42 = v24;
    v36 = static os_log_type_t.fault.getter();
    v37 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v21 = a17;
    v24 = v42;
    v23 = a12;
    a1 = v43;
    v22 = a14;
    a3 = v44;
    a5 = v45;
    a7 = v46;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v47, *(_QWORD *)&a1, v24, *(_QWORD *)&a3, v26, *(_QWORD *)&a5, v28, *(_QWORD *)&a7, v29, *(_QWORD *)&v23, a13 & 1, *(_QWORD *)&v22, a15 & 1, a16, v21);
  *(double *)a9 = a10;
  *(double *)(a9 + 16) = a11;
  v38 = v47[2];
  *(_OWORD *)(a9 + 72) = v47[3];
  v39 = v47[5];
  *(_OWORD *)(a9 + 88) = v47[4];
  *(_OWORD *)(a9 + 104) = v39;
  *(_OWORD *)(a9 + 120) = v47[6];
  result = *(double *)v47;
  v41 = v47[1];
  *(_OWORD *)(a9 + 24) = v47[0];
  *(_QWORD *)(a9 + 8) = a18;
  *(_OWORD *)(a9 + 40) = v41;
  *(_OWORD *)(a9 + 56) = v38;
  return result;
}

uint64_t sub_1001324C8@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  const void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  double v28;
  double v30;
  double v31;
  uint64_t v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v39;
  double v40;
  double v41;
  unint64_t v42;
  _OWORD v44[7];

  v17 = v16;
  v18 = a9;
  v19 = a16;
  v20 = a13;
  v21 = a11;
  v22 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((a2 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = a10.n128_f64[0];
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a14 & 1;
  v28 = a5;
  if ((a6 & 1) != 0)
    v28 = v24;
  if (a10.n128_f64[0] > v24 || v24 > v28)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v30 = a11;
  if ((a12 & 1) != 0)
    v30 = a10.n128_f64[0];
  v31 = a13;
  if ((a14 & 1) != 0)
    v31 = v30;
  if (a10.n128_f64[0] > v30 || v30 > v31)
  {
LABEL_22:
    v42 = a7;
    v41 = a5;
    v39 = a1;
    v40 = a3;
    v33 = static os_log_type_t.fault.getter(a10);
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v27 = a14 & 1;
    v19 = a16;
    v21 = a11;
    a1 = v39;
    a3 = v40;
    v20 = a13;
    a5 = v41;
    a7 = v42;
    v18 = a9;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, a1, v22, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, a7, v26, *(_QWORD *)&v21, a12 & 1, *(_QWORD *)&v20, v27, a15, v19);
  memcpy((void *)v18, v17, 0x412uLL);
  v35 = v44[5];
  *(_OWORD *)(v18 + 1112) = v44[4];
  *(_OWORD *)(v18 + 1128) = v35;
  *(_OWORD *)(v18 + 1144) = v44[6];
  v36 = v44[1];
  *(_OWORD *)(v18 + 1048) = v44[0];
  *(_OWORD *)(v18 + 1064) = v36;
  v37 = v44[3];
  *(_OWORD *)(v18 + 1080) = v44[2];
  *(_OWORD *)(v18 + 1096) = v37;
  return sub_1000C0AB0((uint64_t)v17);
}

double sub_100132678@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100131F40(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10031F2F8, &qword_10031F300).n128_u64[0];
  return result;
}

uint64_t sub_1001326D0@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  const void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  double v28;
  double v30;
  double v31;
  uint64_t v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v39;
  double v40;
  double v41;
  unint64_t v42;
  _OWORD v44[7];

  v17 = v16;
  v18 = a9;
  v19 = a16;
  v20 = a13;
  v21 = a11;
  v22 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((a2 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = a10.n128_f64[0];
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a14 & 1;
  v28 = a5;
  if ((a6 & 1) != 0)
    v28 = v24;
  if (a10.n128_f64[0] > v24 || v24 > v28)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v30 = a11;
  if ((a12 & 1) != 0)
    v30 = a10.n128_f64[0];
  v31 = a13;
  if ((a14 & 1) != 0)
    v31 = v30;
  if (a10.n128_f64[0] > v30 || v30 > v31)
  {
LABEL_22:
    v42 = a7;
    v41 = a5;
    v39 = a1;
    v40 = a3;
    v33 = static os_log_type_t.fault.getter(a10);
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v27 = a14 & 1;
    v19 = a16;
    v21 = a11;
    a1 = v39;
    a3 = v40;
    v20 = a13;
    a5 = v41;
    a7 = v42;
    v18 = a9;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, a1, v22, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, a7, v26, *(_QWORD *)&v21, a12 & 1, *(_QWORD *)&v20, v27, a15, v19);
  memcpy((void *)v18, v17, 0x191uLL);
  v35 = v44[5];
  *(_OWORD *)(v18 + 472) = v44[4];
  *(_OWORD *)(v18 + 488) = v35;
  *(_OWORD *)(v18 + 504) = v44[6];
  v36 = v44[1];
  *(_OWORD *)(v18 + 408) = v44[0];
  *(_OWORD *)(v18 + 424) = v36;
  v37 = v44[3];
  *(_OWORD *)(v18 + 440) = v44[2];
  *(_OWORD *)(v18 + 456) = v37;
  return sub_1001355E8((uint64_t)v17);
}

uint64_t sub_100132880@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unsigned int v39;
  double v40;
  unint64_t v41;
  double v42;
  unint64_t v43;
  _OWORD v44[7];

  v18 = a16;
  v19 = a13;
  v20 = a11;
  v21 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v21)
    a10.n128_f64[0] = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = a10.n128_f64[0];
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (a10.n128_f64[0] > v23 || v23 > v26)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v28 = a11;
  if ((a12 & 1) != 0)
    v28 = a10.n128_f64[0];
  v29 = a13;
  if ((a14 & 1) != 0)
    v29 = v28;
  if (a10.n128_f64[0] > v28 || v28 > v29)
  {
LABEL_22:
    v43 = a7;
    v41 = a1;
    v42 = a5;
    v40 = a3;
    v39 = v21;
    v31 = static os_log_type_t.fault.getter(a10);
    v32 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a16;
    v20 = a11;
    v21 = v39;
    a3 = v40;
    a1 = v41;
    a5 = v42;
    v19 = a13;
    a7 = v43;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, a1, v21, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, a7, v25, *(_QWORD *)&v20, a12 & 1, *(_QWORD *)&v19, a14 & 1, a15, v18);
  v33 = *(_OWORD *)(v16 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v16 + 32);
  *(_OWORD *)(a9 + 48) = v33;
  v34 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v16;
  *(_OWORD *)(a9 + 16) = v34;
  v35 = v44[2];
  *(_OWORD *)(a9 + 120) = v44[3];
  v36 = v44[5];
  *(_OWORD *)(a9 + 136) = v44[4];
  *(_OWORD *)(a9 + 152) = v36;
  *(_OWORD *)(a9 + 168) = v44[6];
  v37 = v44[1];
  *(_OWORD *)(a9 + 72) = v44[0];
  *(_OWORD *)(a9 + 88) = v37;
  *(_BYTE *)(a9 + 64) = *(_BYTE *)(v16 + 64);
  *(_OWORD *)(a9 + 104) = v35;
  return sub_100135274(v16);
}

__n128 sub_100132A38@<Q0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __n128 result;
  unsigned int v39;
  unint64_t v40;
  double v41;
  double v42;
  unint64_t v43;
  _OWORD v44[7];

  v17 = v16;
  v19 = a16;
  v20 = a13;
  v21 = a11;
  v22 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v22)
    a10.n128_f64[0] = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = a10.n128_f64[0];
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (a10.n128_f64[0] > v24 || v24 > v27)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v29 = a11;
  if ((a12 & 1) != 0)
    v29 = a10.n128_f64[0];
  v30 = a13;
  if ((a14 & 1) != 0)
    v30 = v29;
  if (a10.n128_f64[0] > v29 || v29 > v30)
  {
LABEL_22:
    v42 = a5;
    v43 = a7;
    v41 = a3;
    v40 = a1;
    v39 = v22;
    v32 = static os_log_type_t.fault.getter(a10);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v19 = a16;
    v22 = v39;
    a1 = v40;
    v21 = a11;
    a3 = v41;
    v20 = a13;
    a5 = v42;
    a7 = v43;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, a1, v22, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, a7, v26, *(_QWORD *)&v21, a12 & 1, *(_QWORD *)&v20, a14 & 1, a15, v19);
  v34 = sub_100003DB8(&qword_10031FFC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(a9, v17, v34);
  v35 = a9 + *(int *)(sub_100003DB8(&qword_10031FFD0) + 36);
  v36 = v44[5];
  *(_OWORD *)(v35 + 64) = v44[4];
  *(_OWORD *)(v35 + 80) = v36;
  *(_OWORD *)(v35 + 96) = v44[6];
  v37 = v44[1];
  *(_OWORD *)v35 = v44[0];
  *(_OWORD *)(v35 + 16) = v37;
  result = (__n128)v44[3];
  *(_OWORD *)(v35 + 32) = v44[2];
  *(__n128 *)(v35 + 48) = result;
  return result;
}

uint64_t sub_100132C04@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v38;
  double v39;
  unint64_t v40;
  double v41;
  unint64_t v42;
  _OWORD v43[7];

  v18 = a16;
  v19 = a13;
  v20 = a11;
  v21 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v21)
    a10.n128_f64[0] = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = a10.n128_f64[0];
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (a10.n128_f64[0] > v23 || v23 > v26)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v28 = a11;
  if ((a12 & 1) != 0)
    v28 = a10.n128_f64[0];
  v29 = a13;
  if ((a14 & 1) != 0)
    v29 = v28;
  if (a10.n128_f64[0] > v28 || v28 > v29)
  {
LABEL_22:
    v42 = a7;
    v40 = a1;
    v41 = a5;
    v39 = a3;
    v38 = v21;
    v31 = static os_log_type_t.fault.getter(a10);
    v32 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a16;
    v20 = a11;
    v21 = v38;
    a3 = v39;
    a1 = v40;
    a5 = v41;
    v19 = a13;
    a7 = v42;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v43, a1, v21, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, a7, v25, *(_QWORD *)&v20, a12 & 1, *(_QWORD *)&v19, a14 & 1, a15, v18);
  v33 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v16;
  *(_OWORD *)(a9 + 16) = v33;
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v16 + 32);
  v34 = v43[2];
  *(_OWORD *)(a9 + 104) = v43[3];
  v35 = v43[5];
  *(_OWORD *)(a9 + 120) = v43[4];
  *(_OWORD *)(a9 + 136) = v35;
  *(_OWORD *)(a9 + 152) = v43[6];
  v36 = v43[1];
  *(_OWORD *)(a9 + 56) = v43[0];
  *(_OWORD *)(a9 + 72) = v36;
  *(_BYTE *)(a9 + 48) = *(_BYTE *)(v16 + 48);
  *(_OWORD *)(a9 + 88) = v34;
  return sub_10012FD50(v16);
}

uint64_t sub_100132DBC@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  const void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  double v28;
  double v30;
  double v31;
  uint64_t v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v39;
  double v40;
  double v41;
  unint64_t v42;
  _OWORD v44[7];

  v17 = v16;
  v18 = a9;
  v19 = a16;
  v20 = a13;
  v21 = a11;
  v22 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((a2 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = a10.n128_f64[0];
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a14 & 1;
  v28 = a5;
  if ((a6 & 1) != 0)
    v28 = v24;
  if (a10.n128_f64[0] > v24 || v24 > v28)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v30 = a11;
  if ((a12 & 1) != 0)
    v30 = a10.n128_f64[0];
  v31 = a13;
  if ((a14 & 1) != 0)
    v31 = v30;
  if (a10.n128_f64[0] > v30 || v30 > v31)
  {
LABEL_22:
    v42 = a7;
    v41 = a5;
    v39 = a1;
    v40 = a3;
    v33 = static os_log_type_t.fault.getter(a10);
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v27 = a14 & 1;
    v19 = a16;
    v21 = a11;
    a1 = v39;
    a3 = v40;
    v20 = a13;
    a5 = v41;
    a7 = v42;
    v18 = a9;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, a1, v22, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, a7, v26, *(_QWORD *)&v21, a12 & 1, *(_QWORD *)&v20, v27, a15, v19);
  memcpy((void *)v18, v17, 0x231uLL);
  v35 = v44[5];
  *(_OWORD *)(v18 + 632) = v44[4];
  *(_OWORD *)(v18 + 648) = v35;
  *(_OWORD *)(v18 + 664) = v44[6];
  v36 = v44[1];
  *(_OWORD *)(v18 + 568) = v44[0];
  *(_OWORD *)(v18 + 584) = v36;
  v37 = v44[3];
  *(_OWORD *)(v18 + 600) = v44[2];
  *(_OWORD *)(v18 + 616) = v37;
  return sub_100134B78((uint64_t)v17);
}

uint64_t sub_100132F70@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  const void *v16;
  const void *v17;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v38;
  unint64_t v39;
  double v40;
  double v41;
  unint64_t v42;
  _OWORD v43[7];

  v17 = v16;
  v19 = a16;
  v20 = a13;
  v21 = a11;
  v22 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v22)
    a10.n128_f64[0] = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = a10.n128_f64[0];
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (a10.n128_f64[0] > v24 || v24 > v27)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v29 = a11;
  if ((a12 & 1) != 0)
    v29 = a10.n128_f64[0];
  v30 = a13;
  if ((a14 & 1) != 0)
    v30 = v29;
  if (a10.n128_f64[0] > v29 || v29 > v30)
  {
LABEL_22:
    v41 = a5;
    v42 = a7;
    v40 = a3;
    v39 = a1;
    v38 = v22;
    v32 = static os_log_type_t.fault.getter(a10);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v19 = a16;
    v22 = v38;
    v21 = a11;
    a1 = v39;
    a3 = v40;
    v20 = a13;
    a5 = v41;
    a7 = v42;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v43, a1, v22, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, a7, v26, *(_QWORD *)&v21, a12 & 1, *(_QWORD *)&v20, a14 & 1, a15, v19);
  memcpy(a9, v17, 0x359uLL);
  v34 = v43[5];
  a9[58] = v43[4];
  a9[59] = v34;
  a9[60] = v43[6];
  v35 = v43[1];
  a9[54] = v43[0];
  a9[55] = v35;
  v36 = v43[3];
  a9[56] = v43[2];
  a9[57] = v36;
  return sub_100135438((uint64_t)v17);
}

uint64_t sub_100133118@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  const void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  double v28;
  double v30;
  double v31;
  uint64_t v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v39;
  double v40;
  double v41;
  unint64_t v42;
  _OWORD v44[7];

  v17 = v16;
  v18 = a9;
  v19 = a16;
  v20 = a13;
  v21 = a11;
  v22 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((a2 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = a10.n128_f64[0];
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a14 & 1;
  v28 = a5;
  if ((a6 & 1) != 0)
    v28 = v24;
  if (a10.n128_f64[0] > v24 || v24 > v28)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v30 = a11;
  if ((a12 & 1) != 0)
    v30 = a10.n128_f64[0];
  v31 = a13;
  if ((a14 & 1) != 0)
    v31 = v30;
  if (a10.n128_f64[0] > v30 || v30 > v31)
  {
LABEL_22:
    v42 = a7;
    v41 = a5;
    v39 = a1;
    v40 = a3;
    v33 = static os_log_type_t.fault.getter(a10);
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v27 = a14 & 1;
    v19 = a16;
    v21 = a11;
    a1 = v39;
    a3 = v40;
    v20 = a13;
    a5 = v41;
    a7 = v42;
    v18 = a9;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, a1, v22, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, a7, v26, *(_QWORD *)&v21, a12 & 1, *(_QWORD *)&v20, v27, a15, v19);
  memcpy((void *)v18, v17, 0x1D1uLL);
  v35 = v44[5];
  *(_OWORD *)(v18 + 536) = v44[4];
  *(_OWORD *)(v18 + 552) = v35;
  *(_OWORD *)(v18 + 568) = v44[6];
  v36 = v44[1];
  *(_OWORD *)(v18 + 472) = v44[0];
  *(_OWORD *)(v18 + 488) = v36;
  v37 = v44[3];
  *(_OWORD *)(v18 + 504) = v44[2];
  *(_OWORD *)(v18 + 520) = v37;
  return sub_100135540((uint64_t)v17);
}

uint64_t sub_1001332C8@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unsigned int v39;
  double v40;
  unint64_t v41;
  double v42;
  unint64_t v43;
  _OWORD v44[7];

  v18 = a16;
  v19 = a13;
  v20 = a11;
  v21 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v21)
    a10.n128_f64[0] = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = a10.n128_f64[0];
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (a10.n128_f64[0] > v23 || v23 > v26)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v28 = a11;
  if ((a12 & 1) != 0)
    v28 = a10.n128_f64[0];
  v29 = a13;
  if ((a14 & 1) != 0)
    v29 = v28;
  if (a10.n128_f64[0] > v28 || v28 > v29)
  {
LABEL_22:
    v43 = a7;
    v41 = a1;
    v42 = a5;
    v40 = a3;
    v39 = v21;
    v31 = static os_log_type_t.fault.getter(a10);
    v32 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a16;
    v20 = a11;
    v21 = v39;
    a3 = v40;
    a1 = v41;
    a5 = v42;
    v19 = a13;
    a7 = v43;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, a1, v21, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, a7, v25, *(_QWORD *)&v20, a12 & 1, *(_QWORD *)&v19, a14 & 1, a15, v18);
  v33 = *(_OWORD *)(v16 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v16 + 32);
  *(_OWORD *)(a9 + 48) = v33;
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v16 + 64);
  v34 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v16;
  *(_OWORD *)(a9 + 16) = v34;
  v35 = v44[2];
  *(_OWORD *)(a9 + 136) = v44[3];
  v36 = v44[5];
  *(_OWORD *)(a9 + 152) = v44[4];
  *(_OWORD *)(a9 + 168) = v36;
  *(_OWORD *)(a9 + 184) = v44[6];
  v37 = v44[1];
  *(_OWORD *)(a9 + 88) = v44[0];
  *(_OWORD *)(a9 + 104) = v37;
  *(_QWORD *)(a9 + 80) = *(_QWORD *)(v16 + 80);
  *(_OWORD *)(a9 + 120) = v35;
  return sub_100135360(v16);
}

uint64_t sub_10013348C@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned int v41;
  double v42;
  unint64_t v43;
  double v44;
  unint64_t v45;
  _OWORD v46[7];

  v18 = a16;
  v19 = a13;
  v20 = a11;
  v21 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v21)
    a10.n128_f64[0] = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = a10.n128_f64[0];
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (a10.n128_f64[0] > v23 || v23 > v26)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v28 = a11;
  if ((a12 & 1) != 0)
    v28 = a10.n128_f64[0];
  v29 = a13;
  if ((a14 & 1) != 0)
    v29 = v28;
  if (a10.n128_f64[0] > v28 || v28 > v29)
  {
LABEL_22:
    v45 = a7;
    v43 = a1;
    v44 = a5;
    v42 = a3;
    v41 = v21;
    v31 = static os_log_type_t.fault.getter(a10);
    v32 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a16;
    v20 = a11;
    v21 = v41;
    a3 = v42;
    a1 = v43;
    a5 = v44;
    v19 = a13;
    a7 = v45;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v46, a1, v21, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, a7, v25, *(_QWORD *)&v20, a12 & 1, *(_QWORD *)&v19, a14 & 1, a15, v18);
  v33 = *(_OWORD *)(v16 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v16 + 96);
  *(_OWORD *)(a9 + 112) = v33;
  v34 = *(_OWORD *)(v16 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v16 + 32);
  *(_OWORD *)(a9 + 48) = v34;
  v35 = *(_OWORD *)(v16 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v16 + 64);
  *(_OWORD *)(a9 + 80) = v35;
  v36 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v16;
  *(_OWORD *)(a9 + 16) = v36;
  v37 = v46[2];
  *(_OWORD *)(a9 + 184) = v46[3];
  v38 = v46[5];
  *(_OWORD *)(a9 + 200) = v46[4];
  *(_OWORD *)(a9 + 216) = v38;
  *(_OWORD *)(a9 + 232) = v46[6];
  v39 = v46[1];
  *(_OWORD *)(a9 + 136) = v46[0];
  *(_OWORD *)(a9 + 152) = v39;
  *(_BYTE *)(a9 + 128) = *(_BYTE *)(v16 + 128);
  *(_OWORD *)(a9 + 168) = v37;
  return sub_100135360(v16);
}

double sub_100133658@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100131F40(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1003214E8, &qword_1003214F0).n128_u64[0];
  return result;
}

double sub_1001336B0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100131F40(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1003214F8, &qword_100321500).n128_u64[0];
  return result;
}

__n128 sub_100133708@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __n128 result;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unsigned int v43;
  double v44;
  double v45;
  double v46;
  double v47;
  _OWORD v48[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v47 = a7;
    v45 = a1;
    v46 = a5;
    v44 = a3;
    v43 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v19 = a10;
    v20 = v43;
    a3 = v44;
    a1 = v45;
    a5 = v46;
    v18 = a12;
    a7 = v47;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v48, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v34;
  result = *(__n128 *)(v15 + 64);
  v36 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v36;
  v37 = v48[4];
  v38 = v48[5];
  v39 = v48[2];
  *(_OWORD *)(a9 + 128) = v48[3];
  *(_OWORD *)(a9 + 144) = v37;
  v40 = v48[6];
  *(_OWORD *)(a9 + 160) = v38;
  *(_OWORD *)(a9 + 176) = v40;
  v41 = v48[0];
  v42 = v48[1];
  *(__n128 *)(a9 + 64) = result;
  *(_OWORD *)(a9 + 80) = v41;
  *(_OWORD *)(a9 + 96) = v42;
  *(_OWORD *)(a9 + 112) = v39;
  return result;
}

double sub_1001338AC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, char a18)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v32;
  double v33;
  double v34;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  double result;
  unsigned int v43;
  double v44;
  double v45;
  double v46;
  double v47;
  _OWORD v48[7];

  v19 = a15;
  v20 = a16;
  v21 = a14;
  v22 = a12;
  v23 = a10;
  v24 = a2 & 1;
  v25 = a1;
  if ((_DWORD)v24)
    v25 = -INFINITY;
  v26 = a4 & 1;
  v27 = a3;
  if ((a4 & 1) != 0)
    v27 = v25;
  v28 = a6 & 1;
  v29 = a8 & 1;
  v30 = a5;
  if ((a6 & 1) != 0)
    v30 = v27;
  if (v25 > v27 || v27 > v30)
    goto LABEL_22;
  v32 = a7;
  if ((a8 & 1) != 0)
    v32 = -INFINITY;
  v33 = a10;
  if ((a11 & 1) != 0)
    v33 = v32;
  v34 = a12;
  if ((a13 & 1) != 0)
    v34 = v33;
  if (v32 > v33 || v33 > v34)
  {
LABEL_22:
    v46 = a5;
    v47 = a7;
    v44 = a1;
    v45 = a3;
    v43 = v24;
    v36 = static os_log_type_t.fault.getter();
    v37 = (void *)static Log.runtimeIssuesLog.getter();
    v38 = v36;
    v20 = a16;
    os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v37, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v21 = a14;
    v19 = a15;
    v24 = v43;
    v23 = a10;
    v22 = a12;
    a1 = v44;
    a3 = v45;
    a5 = v46;
    a7 = v47;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v48, *(_QWORD *)&a1, v24, *(_QWORD *)&a3, v26, *(_QWORD *)&a5, v28, *(_QWORD *)&a7, v29, *(_QWORD *)&v23, a11 & 1, *(_QWORD *)&v22, a13 & 1, v21, v19);
  *(_QWORD *)a9 = v20;
  *(_BYTE *)(a9 + 8) = a17 & 1;
  *(_BYTE *)(a9 + 9) = a18 & 1;
  v39 = v48[5];
  *(_OWORD *)(a9 + 80) = v48[4];
  *(_OWORD *)(a9 + 96) = v39;
  *(_OWORD *)(a9 + 112) = v48[6];
  v40 = v48[1];
  *(_OWORD *)(a9 + 16) = v48[0];
  *(_OWORD *)(a9 + 32) = v40;
  v41 = v48[3];
  *(_OWORD *)(a9 + 48) = v48[2];
  *(_OWORD *)(a9 + 64) = v41;
  *(_QWORD *)&result = swift_retain(v20).n128_u64[0];
  return result;
}

double sub_100133A64@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100131F40(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1003214B8, &qword_1003214C0).n128_u64[0];
  return result;
}

double sub_100133ABC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100131F40(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1003214C8, &qword_1003214D0).n128_u64[0];
  return result;
}

double sub_100133B14@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100131F40(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1003214D8, &qword_1003214E0).n128_u64[0];
  return result;
}

uint64_t sub_100133B6C@<X0>(unint64_t a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, unint64_t a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, __n128 a10@<Q0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  _OWORD *v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unsigned int v44;
  unint64_t v45;
  double v46;
  double v47;
  unint64_t v48;
  _OWORD v49[7];

  v18 = a16;
  v19 = a13;
  v20 = a11;
  v21 = a2 & 1;
  a10.n128_u64[0] = a1;
  if ((_DWORD)v21)
    a10.n128_f64[0] = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = a10.n128_f64[0];
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (a10.n128_f64[0] > v23 || v23 > v26)
    goto LABEL_22;
  a10.n128_u64[0] = a7;
  if ((a8 & 1) != 0)
    a10.n128_f64[0] = -INFINITY;
  v28 = a11;
  if ((a12 & 1) != 0)
    v28 = a10.n128_f64[0];
  v29 = a13;
  if ((a14 & 1) != 0)
    v29 = v28;
  if (a10.n128_f64[0] > v28 || v28 > v29)
  {
LABEL_22:
    v47 = a5;
    v48 = a7;
    v46 = a3;
    v45 = a1;
    v44 = v21;
    v31 = static os_log_type_t.fault.getter(a10);
    v32 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a16;
    v21 = v44;
    v20 = a11;
    a1 = v45;
    a3 = v46;
    v19 = a13;
    a5 = v47;
    a7 = v48;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v49, a1, v21, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, a7, v25, *(_QWORD *)&v20, a12 & 1, *(_QWORD *)&v19, a14 & 1, a15, v18);
  v33 = v16[5];
  a9[4] = v16[4];
  a9[5] = v33;
  v34 = v16[6];
  v35 = v16[1];
  *a9 = *v16;
  a9[1] = v35;
  v36 = v16[3];
  a9[2] = v16[2];
  a9[3] = v36;
  v37 = v49[0];
  v38 = v49[1];
  a9[6] = v34;
  a9[7] = v37;
  v39 = v49[2];
  v40 = v49[3];
  a9[8] = v38;
  a9[9] = v39;
  v41 = v49[4];
  v42 = v49[6];
  a9[12] = v49[5];
  a9[13] = v42;
  a9[10] = v40;
  a9[11] = v41;
  return sub_1001353CC((uint64_t)v16);
}

double sub_100133D1C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100131F40(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100321518, &qword_100321520).n128_u64[0];
  return result;
}

double sub_100133D74@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100131F40(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100321508, &qword_100321510).n128_u64[0];
  return result;
}

uint64_t sub_100133DCC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _BYTE v58[696];
  _BYTE v59[552];
  _BYTE v60[681];
  _BYTE v61[7];
  char v62;
  _BYTE v63[7];
  char v64;
  _BYTE v65[680];
  _QWORD v66[7];
  _BYTE v67[545];
  Swift::String v68;

  v55 = a1;
  v56 = type metadata accessor for Font.Leading(0);
  v2 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56, v3);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = v1;
  v6 = (_QWORD *)v1[4];
  if (v6)
  {
    v7 = v6[9];
    v8 = v6[10];
    sub_100007BBC(v6 + 6, v7);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v8 + 8))(v66, v7, v8);
    v9 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v68._object = (void *)0x800000010026B120;
    v10._countAndFlagsBits = 0x6E6E6F4320534F53;
    v10._object = (void *)0xEE006E6F69746365;
    v11._countAndFlagsBits = 0;
    v11._object = (void *)0xE000000000000000;
    v68._countAndFlagsBits = 0xD000000000000057;
    v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v68);

    *(Swift::String *)v65 = v12;
    v13 = sub_10002B3F4();
    v15 = Text.init<A>(_:)(v65, &type metadata for String, v13, v14);
    v17 = v16;
    v19 = v18;
    v21 = v20 & 1;
    v22 = static Font.footnote.getter(v15);
    static Font.Weight.medium.getter(v22);
    v23 = Font.weight(_:)(v22);
    swift_release(v22);
    v24 = v56;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for Font.Leading.tight(_:), v56);
    v25 = Font.leading(_:)(v5, v23);
    swift_release(v23);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v24);
    v26 = Text.font(_:)(v25, v15, v17, v21, v19);
    v28 = v27;
    v30 = v29;
    v32 = v31;
    swift_release(v25);
    LOBYTE(v25) = v30 & 1;
    sub_10002B438(v15, v17, v21);
    swift_bridgeObjectRelease(v19);
    v34 = static Color.white.getter(v33);
    v35 = Text.foregroundColor(_:)(v34, v26, v28, v30 & 1, v32);
    v37 = v36;
    LOBYTE(v17) = v38;
    v56 = v39;
    swift_release(v34);
    sub_10002B438(v26, v28, v25);
    swift_bridgeObjectRelease(v32);
    v41 = static Alignment.center.getter(v40);
    v43 = v42;
    sub_1001341DC((uint64_t)v66, v57, (uint64_t)v59);
    v44 = memcpy(v67, v59, sizeof(v67));
    v66[5] = v41;
    v66[6] = v43;
    v45 = static Alignment.center.getter(v44);
    sub_100132DBC(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v58, v47, 0.0, 1, 120.0, 0, v45, v46);
    sub_100134A00((uint64_t)v59);
    memcpy(v60, v58, 0x2A8uLL);
    v64 = 1;
    v62 = v17 & 1;
    v60[680] = 1;
    v49 = v55;
    v48 = v56;
    *v55 = 0;
    *((_BYTE *)v49 + 8) = 1;
    *(_DWORD *)((char *)v49 + 9) = *(_DWORD *)v63;
    *((_DWORD *)v49 + 3) = *(_DWORD *)&v63[3];
    v49[2] = v35;
    v49[3] = v37;
    *((_BYTE *)v49 + 32) = v17 & 1;
    *((_DWORD *)v49 + 9) = *(_DWORD *)&v61[3];
    *(_DWORD *)((char *)v49 + 33) = *(_DWORD *)v61;
    v49[5] = v48;
    memcpy(v49 + 6, v58, 0x2A8uLL);
    v49[91] = 0;
    *((_BYTE *)v49 + 736) = 1;
    memcpy(v65, v58, sizeof(v65));
    sub_10002B750(v35, v37, v17 & 1);
    swift_bridgeObjectRetain(v48);
    sub_100134B78((uint64_t)v60);
    sub_100134ABC((uint64_t)v65);
    sub_10002B438(v35, v37, v17 & 1);
    swift_bridgeObjectRelease(v48);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v66);
  }
  else
  {
    v51 = v57[5];
    v52 = type metadata accessor for UIMetrics();
    v53 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
    result = EnvironmentObject.error()(0, v51, v52, v53);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001341DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  char v10;
  char v11;
  _BYTE v13[312];
  _BYTE __src[320];
  char v15;
  char v16;
  _QWORD v17[54];
  _BYTE v18[448];
  _QWORD v19[2];
  char v20;
  _BYTE v21[327];
  __int128 v22;
  __int128 v23;
  char v24;
  char v25;
  __int128 v26;
  __int128 v27;
  char v28;

  v5 = static Edge.Set.leading.getter(a1);
  v6 = static Edge.Set.trailing.getter();
  v7 = v6;
  v8 = static VerticalAlignment.center.getter(v6);
  sub_100134388(a2, (uint64_t)v13);
  __src[312] = 1;
  v9 = memcpy(&__src[7], v13, 0x131uLL);
  LOBYTE(a2) = static Edge.Set.leading.getter(v9);
  v15 = 1;
  v10 = static Edge.Set.trailing.getter();
  v11 = v15;
  v16 = 1;
  v17[0] = v8;
  v17[1] = 0;
  LOBYTE(v17[2]) = 1;
  memcpy((char *)&v17[2] + 1, __src, 0x138uLL);
  LOBYTE(v17[42]) = (_BYTE)a2;
  memset(&v17[43], 0, 32);
  LOBYTE(v17[47]) = v15;
  LOBYTE(v17[48]) = v10;
  memset(&v17[49], 0, 32);
  LOBYTE(v17[53]) = 1;
  v18[440] = 1;
  v18[432] = 1;
  memcpy(&v18[7], v17, 0x1A9uLL);
  *(_QWORD *)a3 = 0x403E000000000000;
  *(_QWORD *)(a3 + 8) = 16;
  *(_QWORD *)(a3 + 16) = 0x3FF0000000000000;
  *(_BYTE *)(a3 + 24) = v5;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_BYTE *)(a3 + 64) = 1;
  *(_BYTE *)(a3 + 72) = v7;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_BYTE *)(a3 + 112) = 1;
  memcpy((void *)(a3 + 113), v18, 0x1B0uLL);
  v19[0] = v8;
  v19[1] = 0;
  v20 = 1;
  memcpy(v21, __src, 0x138uLL);
  v21[319] = (_BYTE)a2;
  v22 = 0u;
  v23 = 0u;
  v24 = v11;
  v25 = v10;
  v26 = 0u;
  v27 = 0u;
  v28 = 1;
  sub_100134C34((uint64_t)v17);
  return sub_100134CF0((uint64_t)v19);
}

uint64_t sub_100134388@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  char v78;
  __int128 v79;
  __int128 v80;
  char v81;
  char v82;
  __int128 v83;
  __int128 v84;
  char v85;

  v4 = type metadata accessor for ConnectionClosedModel(0);
  v5 = sub_100056D60(&qword_10031CB58, type metadata accessor for ConnectionClosedModel);
  v52 = EnvironmentObject.init()(v4, v5);
  v53 = v6;
  v7 = type metadata accessor for ConnectivityModel();
  v8 = sub_100056D60(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel);
  v51 = EnvironmentObject.init()(v7, v8);
  v43 = v9;
  v10 = type metadata accessor for GuidanceModel();
  v11 = sub_100056D60(&qword_100316B08, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceModel);
  v50 = EnvironmentObject.init()(v10, v11);
  v42 = v12;
  v13 = type metadata accessor for OrientationModel();
  v14 = sub_100056D60(&qword_10031CB60, (uint64_t (*)(uint64_t))type metadata accessor for OrientationModel);
  v48 = EnvironmentObject.init()(v13, v14);
  v49 = v15;
  v16 = type metadata accessor for StewieModel();
  v17 = sub_100056D60(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel);
  v46 = EnvironmentObject.init()(v16, v17);
  v47 = v18;
  v19 = type metadata accessor for UIMetrics();
  v20 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
  v44 = EnvironmentObject.init()(v19, v20);
  v45 = v21;
  v22 = static HorizontalAlignment.leading.getter(v44);
  sub_1001346E4(a1, (uint64_t)&v67);
  v23 = v67;
  v24 = v69;
  v25 = v70;
  v40 = v68;
  v41 = v71;
  v26 = v72;
  v27 = v73;
  LOBYTE(a1) = v74;
  v29 = static Edge.Set.top.getter(v28);
  v30 = static Edge.Set.trailing.getter();
  v54 = (unint64_t)v22;
  LOBYTE(v55) = 1;
  *((_QWORD *)&v55 + 1) = v23;
  *(_QWORD *)&v56 = v40;
  BYTE8(v56) = v24;
  *(_QWORD *)&v57 = v25;
  *((_QWORD *)&v57 + 1) = v41;
  LOBYTE(v58) = v26;
  *((_QWORD *)&v58 + 1) = v27;
  LOBYTE(v59) = (_BYTE)a1;
  BYTE8(v59) = v29;
  v60 = 0u;
  v61 = 0u;
  LOBYTE(v62) = 1;
  BYTE8(v62) = v30;
  v63 = 0u;
  v64 = 0u;
  v65 = 1;
  v31 = v55;
  v32 = v57;
  *(_OWORD *)(a2 + 144) = v56;
  *(_OWORD *)(a2 + 160) = v32;
  *(_OWORD *)(a2 + 112) = (unint64_t)v22;
  *(_OWORD *)(a2 + 128) = v31;
  v33 = v58;
  v34 = v59;
  v35 = v61;
  *(_OWORD *)(a2 + 208) = v60;
  *(_OWORD *)(a2 + 224) = v35;
  *(_OWORD *)(a2 + 176) = v33;
  *(_OWORD *)(a2 + 192) = v34;
  v36 = v62;
  v37 = v63;
  v38 = v64;
  *(_BYTE *)(a2 + 288) = 1;
  *(_OWORD *)(a2 + 256) = v37;
  *(_OWORD *)(a2 + 272) = v38;
  *(_OWORD *)(a2 + 240) = v36;
  v66 = 1;
  *(_QWORD *)a2 = v52;
  *(_QWORD *)(a2 + 8) = v53;
  *(_QWORD *)(a2 + 16) = v51;
  *(_QWORD *)(a2 + 24) = v43;
  *(_QWORD *)(a2 + 32) = v50;
  *(_QWORD *)(a2 + 40) = v42;
  *(_QWORD *)(a2 + 48) = v48;
  *(_QWORD *)(a2 + 56) = v49;
  *(_QWORD *)(a2 + 64) = v46;
  *(_QWORD *)(a2 + 72) = v47;
  *(_QWORD *)(a2 + 80) = v44;
  *(_QWORD *)(a2 + 88) = v45;
  *(_BYTE *)(a2 + 96) = 2;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  *(_BYTE *)(a2 + 304) = 1;
  v67 = v22;
  v68 = 0;
  v69 = 1;
  v70 = v23;
  v71 = v40;
  v72 = v24;
  v73 = v25;
  v74 = v41;
  v75 = v26;
  v76 = v27;
  v77 = (char)a1;
  v78 = v29;
  v79 = 0u;
  v80 = 0u;
  v81 = 1;
  v82 = v30;
  v83 = 0u;
  v84 = 0u;
  v85 = 1;
  swift_retain(v44);
  swift_retain(v52);
  swift_retain(v51);
  swift_retain(v50);
  swift_retain(v48);
  swift_retain(v46);
  sub_100134DAC((uint64_t)&v54);
  sub_100134DF8((uint64_t)&v67);
  swift_release(v44);
  swift_release(v46);
  swift_release(v48);
  swift_release(v50);
  swift_release(v51);
  return swift_release(v52);
}

void sub_1001346E4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t inited;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v52[2];
  _BYTE v53[48];

  v4 = type metadata accessor for Font.Leading(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_1003214A0);
  inited = swift_initStackObject(v9, v53);
  *(_OWORD *)(inited + 16) = xmmword_10024E070;
  if (*a1)
  {
    v11 = (_QWORD *)inited;
    v12 = *(_QWORD *)(*a1 + 48);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 16);
      swift_bridgeObjectRetain(*(_QWORD *)(v12 + 24));
    }
    else
    {
      v13 = 0;
      v14 = 0xE000000000000000;
    }
    v11[4] = v13;
    v15 = v11 + 4;
    v11[5] = v14;
    v16 = sub_100134E90((uint64_t)v11, 5.0);
    v18 = v17;
    swift_setDeallocating(v11);
    v19 = v11[2];
    v20 = sub_100003DB8(&qword_100318260);
    swift_arrayDestroy(v15, v19, v20);
    v52[0] = v16;
    v52[1] = v18;
    v21 = sub_10002B3F4();
    v23 = Text.init<A>(_:)(v52, &type metadata for String, v21, v22);
    v25 = v24;
    v27 = v26;
    v29 = v28 & 1;
    v30 = static Font.body.getter(v23);
    static Font.Weight.medium.getter(v30);
    v31 = Font.weight(_:)(v30);
    swift_release(v30);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for Font.Leading.tight(_:), v4);
    v32 = Font.leading(_:)(v8, v31);
    swift_release(v31);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v33 = Text.font(_:)(v32, v23, v25, v29, v27);
    v35 = v34;
    LOBYTE(v31) = v36;
    v38 = v37;
    swift_release(v32);
    LOBYTE(v32) = v31 & 1;
    sub_10002B438(v23, v25, v29);
    swift_bridgeObjectRelease(v27);
    v40 = static Color.white.getter(v39);
    v41 = Text.foregroundColor(_:)(v40, v33, v35, v31 & 1, v38);
    v43 = v42;
    LOBYTE(v29) = v44;
    v46 = v45;
    swift_release(v40);
    sub_10002B438(v33, v35, v32);
    swift_bridgeObjectRelease(v38);
    KeyPath = swift_getKeyPath(&unk_100257C38);
    *(_QWORD *)a2 = v41;
    *(_QWORD *)(a2 + 8) = v43;
    *(_BYTE *)(a2 + 16) = v29 & 1;
    *(_QWORD *)(a2 + 24) = v46;
    *(_QWORD *)(a2 + 32) = KeyPath;
    *(_BYTE *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 56) = 1;
    sub_10002B750(v41, v43, v29 & 1);
    swift_bridgeObjectRetain(v46);
    swift_retain(KeyPath);
    sub_10002B438(v41, v43, v29 & 1);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v46);
  }
  else
  {
    v48 = a1[1];
    v49 = type metadata accessor for GuidanceMessagesModel();
    v50 = sub_100056D60(&qword_1003195D8, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel);
    EnvironmentObject.error()(0, v48, v49, v50);
    __break(1u);
  }
}

uint64_t sub_1001349C8@<X0>(_QWORD *a1@<X8>)
{
  return sub_100133DCC(a1);
}

uint64_t sub_100134A00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 160);
  v3 = *(_QWORD *)(a1 + 176);
  v4 = *(_QWORD *)(a1 + 192);
  v5 = *(_QWORD *)(a1 + 208);
  v6 = *(_QWORD *)(a1 + 224);
  v7 = *(_QWORD *)(a1 + 280);
  v8 = *(_QWORD *)(a1 + 288);
  v9 = *(_BYTE *)(a1 + 296);
  v10 = *(_QWORD *)(a1 + 312);
  v12 = *(_QWORD *)(a1 + 304);
  swift_release(*(_QWORD *)(a1 + 144));
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  swift_release(v6);
  sub_10002B438(v7, v8, v9);
  swift_release(v10);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_100134ABC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 176);
  v3 = *(_QWORD *)(a1 + 192);
  v4 = *(_QWORD *)(a1 + 208);
  v5 = *(_QWORD *)(a1 + 224);
  v6 = *(_QWORD *)(a1 + 240);
  v7 = *(_QWORD *)(a1 + 296);
  v8 = *(_QWORD *)(a1 + 304);
  v9 = *(_BYTE *)(a1 + 312);
  v10 = *(_QWORD *)(a1 + 328);
  v12 = *(_QWORD *)(a1 + 320);
  swift_release(*(_QWORD *)(a1 + 160));
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  swift_release(v6);
  sub_10002B438(v7, v8, v9);
  swift_release(v10);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_100134B78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 160);
  v3 = *(_QWORD *)(a1 + 176);
  v4 = *(_QWORD *)(a1 + 192);
  v5 = *(_QWORD *)(a1 + 208);
  v6 = *(_QWORD *)(a1 + 224);
  v7 = *(_QWORD *)(a1 + 296);
  v8 = *(_QWORD *)(a1 + 304);
  v9 = *(_BYTE *)(a1 + 312);
  v10 = *(_QWORD *)(a1 + 320);
  v12 = *(_QWORD *)(a1 + 328);
  swift_retain(*(_QWORD *)(a1 + 240));
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  sub_10002B750(v7, v8, v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v12);
  return a1;
}

uint64_t sub_100134C34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(_BYTE *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 184);
  v12 = *(_QWORD *)(a1 + 192);
  swift_retain(*(_QWORD *)(a1 + 104));
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  sub_10002B750(v7, v8, v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v12);
  return a1;
}

uint64_t sub_100134CF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(_BYTE *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 192);
  v12 = *(_QWORD *)(a1 + 184);
  swift_release(*(_QWORD *)(a1 + 24));
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  swift_release(v6);
  sub_10002B438(v7, v8, v9);
  swift_release(v10);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_100134DAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  sub_10002B750(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return a1;
}

uint64_t sub_100134DF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  sub_10002B438(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100134E44@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100134E6C(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_100134E90(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  double v24;
  uint64_t result;
  double v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
    v13 = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
      goto LABEL_20;
LABEL_28:
    swift_release(v13);
    return 0;
  }
  v31 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = v5;
  v33 = v4;
  v11 = swift_bridgeObjectRetain(a1);
  v12 = (unint64_t *)(a1 + 40);
  v13 = _swiftEmptyArrayStorage;
  do
  {
    v15 = *(v12 - 1);
    v14 = *v12;
    v16 = v15 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(*v12, 2, v11);
    if (v14)
      v17 = v14;
    else
      v17 = 0xE000000000000000;
    if (!v14)
      v16 = 0;
    swift_bridgeObjectRelease(v17);
    if ((v17 & 0x2000000000000000) != 0)
      v18 = HIBYTE(v17) & 0xF;
    else
      v18 = v16;
    if (v18)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
      v34 = v13;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10017E308(0, v13[2] + 1, 1);
        v13 = v34;
      }
      v21 = v13[2];
      v20 = v13[3];
      if (v21 >= v20 >> 1)
      {
        sub_10017E308(v20 > 1, v21 + 1, 1);
        v13 = v34;
      }
      v13[2] = v21 + 1;
      v22 = &v13[2 * v21];
      v22[4] = v15;
      v22[5] = v14;
    }
    else
    {
      v11 = swift_bridgeObjectRelease(v14);
    }
    v12 += 2;
    --v10;
  }
  while (v10);
  swift_bridgeObjectRelease(a1);
  v5 = v32;
  v4 = v33;
  v9 = v31;
  if (!v13[2])
    goto LABEL_28;
LABEL_20:
  v23 = Date.init()(v7);
  v24 = Date.timeIntervalSince1970.getter(v23);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  v26 = floor(v24 / a2);
  if ((~*(_QWORD *)&v26 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v26 <= -1.0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v26 >= 1.84467441e19)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v27 = v13[2];
  if (!v27)
  {
LABEL_32:
    __break(1u);
    return result;
  }
  v28 = &v13[2 * ((unint64_t)v26 % v27)];
  v30 = v28[4];
  v29 = v28[5];
  swift_bridgeObjectRetain(v29);
  swift_release(v13);
  if (v29)
    return v30;
  else
    return 0;
}

uint64_t sub_1001350D8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100135100(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

unint64_t sub_100135128()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003214A8;
  if (!qword_1003214A8)
  {
    v1 = sub_100007FAC(&qword_1003214B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1003214A8);
  }
  return result;
}

uint64_t sub_100135174(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for Text.Storage - 1) + 32))(a2, a1);
  return a2;
}

uint64_t sub_1001351B0(uint64_t a1)
{
  sub_10002B750(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t sub_1001351E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 184);
  sub_10002B750(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t sub_100135274(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  sub_10002B750(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t sub_1001352CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 136);
  sub_10002B750(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t sub_100135360(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 72);
  sub_10002B750(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t sub_1001353CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 96);
  sub_10002B750(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t sub_100135438(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 232);
  v3 = *(_QWORD *)(a1 + 240);
  v4 = *(_QWORD *)(a1 + 304);
  v5 = *(_QWORD *)(a1 + 328);
  v6 = *(_QWORD *)(a1 + 336);
  v7 = *(_BYTE *)(a1 + 344);
  v12 = *(_QWORD *)(a1 + 352);
  v13 = *(_QWORD *)(a1 + 360);
  v14 = *(_QWORD *)(a1 + 424);
  v15 = *(_QWORD *)(a1 + 632);
  v16 = *(_QWORD *)(a1 + 648);
  v17 = *(_QWORD *)(a1 + 664);
  v8 = *(_QWORD *)(a1 + 680);
  v9 = *(_QWORD *)(a1 + 744);
  v10 = *(_QWORD *)(a1 + 760);
  sub_10002B750(*(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), *(_BYTE *)(a1 + 224));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  sub_10002B750(v5, v6, v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  swift_bridgeObjectRetain(v12);
  swift_retain(v13);
  swift_retain(v14);
  swift_retain(v15);
  swift_retain(v16);
  swift_retain(v17);
  return a1;
}

uint64_t sub_100135540(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 208);
  v3 = *(_QWORD *)(a1 + 216);
  v4 = *(_QWORD *)(a1 + 280);
  v5 = *(_QWORD *)(a1 + 304);
  v6 = *(_QWORD *)(a1 + 312);
  v7 = *(_BYTE *)(a1 + 320);
  v8 = *(_QWORD *)(a1 + 328);
  v9 = *(_QWORD *)(a1 + 336);
  v10 = *(_QWORD *)(a1 + 400);
  sub_10002B750(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_BYTE *)(a1 + 200));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  sub_10002B750(v5, v6, v7);
  swift_bridgeObjectRetain(v8);
  swift_retain(v9);
  swift_retain(v10);
  return a1;
}

uint64_t sub_1001355E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = *(_QWORD *)(a1 + 128);
  v7 = *(_BYTE *)(a1 + 136);
  v8 = *(_QWORD *)(a1 + 144);
  v9 = *(_QWORD *)(a1 + 152);
  v12 = *(_QWORD *)(a1 + 168);
  v13 = *(_QWORD *)(a1 + 256);
  v14 = *(_QWORD *)(a1 + 272);
  v15 = *(_QWORD *)(a1 + 288);
  v10 = *(_QWORD *)(a1 + 304);
  sub_10002B750(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  sub_10002B750(v5, v6, v7);
  swift_retain(v10);
  swift_bridgeObjectRetain(v8);
  swift_retain(v9);
  swift_retain(v12);
  swift_retain(v13);
  swift_retain(v14);
  swift_retain(v15);
  return a1;
}

id sub_1001356D0()
{
  char *v0;
  id v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  objc_super v18;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy22LockScreenContentAgent__assertion] = 0;
  v18.receiver = v0;
  v18.super_class = (Class)type metadata accessor for LockScreenContentAgent();
  v1 = objc_msgSendSuper2(&v18, "init");
  v2 = qword_100315820;
  v3 = v1;
  if (v2 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FD18);
  v5 = v3;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v17 = v9;
    *(_DWORD *)v8 = 136446210;
    v10 = v5;
    v11 = objc_msgSend(v10, "description");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v16 = sub_100172BEC(v12, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v8 + 4, v8 + 12);

    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%{public}s] init", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  return v5;
}

id sub_1001358F4()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  objc_class *v12;
  uint64_t v14;
  uint64_t v15;
  objc_super v16;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FD18);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v15 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = v2;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v14 = sub_100172BEC(v9, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] deinit", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v12 = (objc_class *)type metadata accessor for LockScreenContentAgent();
  v16.receiver = v2;
  v16.super_class = v12;
  return objc_msgSendSuper2(&v16, "dealloc");
}

uint64_t type metadata accessor for LockScreenContentAgent()
{
  return objc_opt_self(_TtC8SOSBuddy22LockScreenContentAgent);
}

Swift::Int sub_100135B30(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if ((a1 & 1) != 0)
    v2 = 0xD000000000000012;
  else
    v2 = 0xD000000000000011;
  if ((a1 & 1) != 0)
    v3 = 0x8000000100260550;
  else
    v3 = 0x8000000100260530;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_100135BB0(char a1)
{
  unint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, 0);
  if ((a1 & 1) != 0)
    v2 = 0x80000001002605B0;
  else
    v2 = 0x8000000100260590;
  String.hash(into:)(v4, 0xD000000000000013, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

void sub_100135C2C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100135C70(uint64_t a1)
{
  String.hash(into:)(a1, 0x5F544F4E5F544153, 0xEC000000434E5953);
  return swift_bridgeObjectRelease(0xEC000000434E5953);
}

void sub_100135D1C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_100135D6C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x5F544F4E5F544153, 0xEC000000434E5953);
  swift_bridgeObjectRelease(0xEC000000434E5953);
  return Hasher._finalize()();
}

Swift::Int sub_100135E2C(uint64_t a1, char a2)
{
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, a1);
  if ((a2 & 1) != 0)
    v3 = 0x80000001002605B0;
  else
    v3 = 0x8000000100260590;
  String.hash(into:)(v5, 0xD000000000000013, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_100135EA4(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 0xD000000000000012;
  else
    v3 = 0xD000000000000011;
  if ((a2 & 1) != 0)
    v4 = 0x8000000100260550;
  else
    v4 = 0x8000000100260530;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t RequestCommandReason.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100135F60 + 4 * byte_100257C9E[a1]))(0x636E656772656D45, 0xE900000000000079);
}

unint64_t sub_100135F88()
{
  return 0xD000000000000016;
}

uint64_t sub_100135FB8()
{
  return 0x6564697364616F52;
}

uint64_t sub_100135FD0()
{
  return 0x6E6967617373654DLL;
}

uint64_t sub_100135FEC()
{
  return 0x6567617373654D49;
}

uint64_t sub_10013600C()
{
  return 0x736D53746153;
}

uint64_t sub_100136020()
{
  return 0x794D646E6946;
}

uint64_t sub_100136034(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = RequestCommandReason.rawValue.getter(*a1);
  v5 = v4;
  v6 = RequestCommandReason.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_1001360BC()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = RequestCommandReason.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double sub_10013611C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = RequestCommandReason.rawValue.getter(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int sub_10013615C(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = RequestCommandReason.rawValue.getter(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_1001361B8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s8SOSBuddy20RequestCommandReasonO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001361E4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = RequestCommandReason.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t RequestCommandEntryPoint.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10013623C + 4 * byte_100257CA8[a1]))(1819042115, 0xE400000000000000);
}

uint64_t sub_10013623C()
{
  return 1954047316;
}

uint64_t sub_100136248()
{
  return 0x657465446C6C6146;
}

uint64_t sub_10013626C()
{
  return 0x617070614BLL;
}

void sub_100136280(char *a1)
{
  sub_10022B2B0(*a1);
}

void sub_10013628C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1001362D0()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 1954047316, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

void sub_10013633C()
{
  __asm { BR              X10 }
}

uint64_t sub_100136370(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 1954047316, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_1001363C8(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_100136408()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 1954047316, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

unint64_t sub_100136474@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s8SOSBuddy24RequestCommandEntryPointO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001364A0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1001364C8 + 4 * byte_100257CB8[*v0]))();
}

void sub_1001364C8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 1954047316;
  a1[1] = v1;
}

void sub_1001364D8(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "FallDetection");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_100136500(_QWORD *a1@<X8>)
{
  *a1 = 0x617070614BLL;
  a1[1] = 0xE500000000000000;
}

SOSBuddy::RequestCommandFromService_optional __swiftcall RequestCommandFromService.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_1002E02E0;
  return (SOSBuddy::RequestCommandFromService_optional)sub_100136B34(rawValue, v1);
}

uint64_t RequestCommandFromService.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6564697364616F52;
  else
    return 0x636E656772656D45;
}

uint64_t sub_100136560(char *a1, char *a2)
{
  return sub_10022B208(*a1, *a2);
}

Swift::Int sub_10013656C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6564697364616F52;
  else
    v2 = 0x636E656772656D45;
  if (v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xE900000000000079;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001365F0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6564697364616F52;
  else
    v2 = 0x636E656772656D45;
  if (*v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xE900000000000079;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100136650(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6564697364616F52;
  else
    v3 = 0x636E656772656D45;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE900000000000079;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001366D0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1002E02E0;
  return sub_100136C34(v2, a1, a2);
}

void sub_1001366DC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x636E656772656D45;
  if (*v1)
    v2 = 0x6564697364616F52;
  v3 = 0xE900000000000079;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

SOSBuddy::RequestCommandAction_optional __swiftcall RequestCommandAction.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_1002E0290;
  return (SOSBuddy::RequestCommandAction_optional)sub_100136B34(rawValue, v1);
}

unint64_t RequestCommandAction.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000012;
  else
    return 0xD000000000000011;
}

uint64_t sub_100136764(char *a1, char *a2)
{
  return sub_10022B538(*a1, *a2);
}

Swift::Int sub_100136770()
{
  char *v0;

  return sub_100135B30(*v0);
}

uint64_t sub_100136778(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000012;
  else
    v2 = 0xD000000000000011;
  if (*v1)
    v3 = 0x8000000100260550;
  else
    v3 = 0x8000000100260530;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1001367D4(uint64_t a1)
{
  char *v1;

  return sub_100135EA4(a1, *v1);
}

uint64_t sub_1001367DC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1002E0290;
  return sub_100136C34(v2, a1, a2);
}

void sub_1001367E8(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0xD000000000000011;
  if (*v1)
    v2 = 0xD000000000000012;
  v3 = 0x8000000100260550;
  if (!*v1)
    v3 = 0x8000000100260530;
  *a1 = v2;
  a1[1] = v3;
}

BOOL ExitCommandReason.init(rawValue:)(Swift::String a1)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_1002E1B50;
  return sub_100136CD4(a1, v1);
}

uint64_t ExitCommandReason.rawValue.getter()
{
  return 0x7571655272657355;
}

Swift::Int sub_100136858(uint64_t a1, uint64_t a2)
{
  return sub_100136D54(a1, a2, 0x7571655272657355, 0xED00006465747365);
}

uint64_t sub_10013687C(uint64_t a1)
{
  return String.hash(into:)(a1, 0x7571655272657355, 0xED00006465747365);
}

Swift::Int sub_1001368A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100136DE0(a1, a2, a3, 0x7571655272657355, 0xED00006465747365);
}

uint64_t sub_1001368C4@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1002E1B88;
  return sub_100136E34(v2, a1, a2);
}

void sub_1001368D0(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "UserRequested");
  *(_WORD *)(a1 + 14) = -4864;
}

SOSBuddy::OpenCommandRequester_optional __swiftcall OpenCommandRequester.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_1002E0368;
  return (SOSBuddy::OpenCommandRequester_optional)sub_100136B34(rawValue, v1);
}

uint64_t OpenCommandRequester.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x73676E6974746553;
  else
    return 0x436C6F72746E6F43;
}

uint64_t sub_100136948(char *a1, char *a2)
{
  return sub_10022B5DC(*a1, *a2);
}

Swift::Int sub_100136954()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x73676E6974746553;
  else
    v2 = 0x436C6F72746E6F43;
  if (v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xED00007265746E65;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001369E0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x73676E6974746553;
  else
    v2 = 0x436C6F72746E6F43;
  if (*v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xED00007265746E65;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100136A48(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x73676E6974746553;
  else
    v3 = 0x436C6F72746E6F43;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xED00007265746E65;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100136AD0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1002E0368;
  return sub_100136C34(v2, a1, a2);
}

void sub_100136ADC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x436C6F72746E6F43;
  if (*v1)
    v2 = 0x73676E6974746553;
  v3 = 0xED00007265746E65;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

SOSBuddy::AlertCommandKind_optional __swiftcall AlertCommandKind.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_1002E03B8;
  return (SOSBuddy::AlertCommandKind_optional)sub_100136B34(rawValue, v1);
}

uint64_t sub_100136B34(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  unsigned int v6;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (v5)
    return v6;
  else
    return 0;
}

unint64_t AlertCommandKind.rawValue.getter()
{
  return 0xD000000000000013;
}

uint64_t sub_100136BB4(char *a1, char *a2)
{
  return sub_10022B68C(*a1, *a2);
}

Swift::Int sub_100136BC0()
{
  char *v0;

  return sub_100135BB0(*v0);
}

uint64_t sub_100136BC8(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;

  if (*v1)
    v2 = 0x80000001002605B0;
  else
    v2 = 0x8000000100260590;
  String.hash(into:)(a1, 0xD000000000000013, v2);
  return swift_bridgeObjectRelease(v2);
}

Swift::Int sub_100136C20(uint64_t a1)
{
  char *v1;

  return sub_100135E2C(a1, *v1);
}

uint64_t sub_100136C28@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1002E03B8;
  return sub_100136C34(v2, a1, a2);
}

uint64_t sub_100136C34@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, char *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;
  char v8;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

void sub_100136C8C(_QWORD *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;

  v2 = 0x8000000100260590;
  if (*v1)
    v2 = 0x80000001002605B0;
  *a1 = 0xD000000000000013;
  a1[1] = v2;
}

BOOL OfferCommandKind.init(rawValue:)(Swift::String a1)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_1002E1BC0;
  return sub_100136CD4(a1, v1);
}

BOOL sub_100136CD4(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  return v5 != 0;
}

uint64_t OfferCommandKind.rawValue.getter()
{
  return 0x4D6469724766666FLL;
}

Swift::Int sub_100136D34(uint64_t a1, uint64_t a2)
{
  return sub_100136D54(a1, a2, 0x4D6469724766666FLL, 0xEB0000000065646FLL);
}

Swift::Int sub_100136D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, 0);
  String.hash(into:)(v7, a3, a4);
  return Hasher._finalize()();
}

uint64_t sub_100136DA0(uint64_t a1)
{
  return String.hash(into:)(a1, 0x4D6469724766666FLL, 0xEB0000000065646FLL);
}

Swift::Int sub_100136DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100136DE0(a1, a2, a3, 0x4D6469724766666FLL, 0xEB0000000065646FLL);
}

Swift::Int sub_100136DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, a4, a5);
  return Hasher._finalize()();
}

uint64_t sub_100136E28@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1002E1BF8;
  return sub_100136E34(v2, a1, a2);
}

uint64_t sub_100136E34@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, BOOL *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  *a3 = v6 != 0;
  return result;
}

void sub_100136E80(_QWORD *a1@<X8>)
{
  *a1 = 0x4D6469724766666FLL;
  a1[1] = 0xEB0000000065646FLL;
}

uint64_t sub_100136EA4(int a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  unint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  id v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint8_t *v50;
  id v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  void (*v63)(char *, uint64_t);
  uint8_t *v64;
  uint8_t *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  NSObject *v74;
  os_log_type_t v75;
  int v76;
  uint8_t *v77;
  uint8_t *v78;
  id v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint8_t *v84;
  uint8_t *v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  void *v89;
  void *v90;
  Swift::String v91;
  char *v92;
  uint8_t *v93;
  uint8_t *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  void (*v100)(char *, uint64_t);
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;

  LODWORD(v98) = a1;
  v3 = sub_100003DB8(&qword_1003216D8);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URLComponents(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v99 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v14, v17);
  v101 = (char *)&v93 - v19;
  __chkstk_darwin(v18, v20);
  v22 = (char *)&v93 - v21;
  v23 = objc_msgSend(a2, "URL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v23);

  v24 = URL.scheme.getter();
  v26 = v25;
  v27 = *(void (**)(char *, uint64_t))(v12 + 8);
  v28 = v11;
  v29 = v22;
  v30 = v27;
  v27(v29, v11);
  if (v26
    && (v104 = v24,
        v105 = v26,
        v102 = 0xD000000000000010,
        v103 = 0x800000010026B410,
        v31 = sub_10002B3F4(),
        v32 = StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(&v102, &type metadata for String, &type metadata for String, v31, v31), *(_QWORD *)&v33 = swift_bridgeObjectRelease(v26).n128_u64[0], !v32))
  {
    v52 = objc_msgSend(a2, "URL", v33);
    v53 = v101;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v52);

    v54 = URL.absoluteString.getter();
    v56 = v55;
    v30(v53, v28);
    v57 = String.count.getter(v54, v56);
    swift_bridgeObjectRelease(v56);
    if (v57 == 2047)
    {
      if (qword_100315820 != -1)
        swift_once(&qword_100315820, sub_1000D95E4);
      v58 = type metadata accessor for Logger(0);
      v59 = sub_10000D744(v58, (uint64_t)qword_10033FD18);
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc(2, -1);
        v100 = (void (*)(char *, uint64_t))v7;
        v63 = v30;
        v64 = v62;
        *(_WORD *)v62 = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Deeplink is too long, it might have been cut off", v62, 2u);
        v65 = v64;
        v30 = v63;
        v7 = (uint64_t)v100;
        swift_slowDealloc(v65, -1, -1);
      }

    }
    v66 = objc_msgSend(a2, "URL");
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v66);

    URLComponents.init(url:resolvingAgainstBaseURL:)(v53, 0);
    v30(v53, v28);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v99, v6, v7);
      if (qword_100315820 != -1)
        swift_once(&qword_100315820, sub_1000D95E4);
      v71 = type metadata accessor for Logger(0);
      v72 = sub_10000D744(v71, (uint64_t)qword_10033FD18);
      v73 = a2;
      v97 = v72;
      v74 = Logger.logObject.getter(v73);
      v75 = static os_log_type_t.default.getter(v74);
      v76 = v75;
      if (os_log_type_enabled(v74, v75))
      {
        v96 = v76;
        v77 = (uint8_t *)swift_slowAlloc(12, -1);
        v95 = swift_slowAlloc(32, -1);
        v104 = v95;
        v100 = v30;
        *(_DWORD *)v77 = 136446210;
        v78 = v77 + 12;
        v93 = v77 + 4;
        v94 = v77;
        v79 = objc_msgSend(v73, "URL");
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v79);

        v80 = sub_10013D794();
        v81 = dispatch thunk of CustomStringConvertible.description.getter(v28, v80);
        v83 = v82;
        v100(v53, v28);
        v102 = sub_100172BEC(v81, v83, &v104);
        v84 = v78;
        v30 = v100;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v93, v84);

        swift_bridgeObjectRelease(v83);
        v85 = v94;
        _os_log_impl((void *)&_mh_execute_header, v74, (os_log_type_t)v96, "handleURLContext(%{public}s)", v94, 0xCu);
        v86 = v95;
        swift_arrayDestroy(v95, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v86, -1, -1);
        swift_slowDealloc(v85, -1, -1);

      }
      else
      {

      }
      v87 = objc_msgSend(v73, "URL");
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v87);

      v88 = URL.host.getter();
      v90 = v89;
      v30(v16, v28);
      if (v90)
        v91._countAndFlagsBits = v88;
      else
        v91._countAndFlagsBits = 0;
      if (v90)
        v91._object = v90;
      else
        v91._object = (void *)0xE000000000000000;
      v92 = (char *)&loc_100137648 + *((int *)qword_100137918 + sub_10013C730(v91));
      __asm { BR              X10 }
    }
    sub_100007FF0((uint64_t)v6, &qword_1003216D8);
    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    v67 = type metadata accessor for Logger(0);
    v68 = sub_10000D744(v67, (uint64_t)qword_10033FD18);
    v36 = Logger.logObject.getter(v68);
    v69 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v36, v69))
      goto LABEL_8;
    v70 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v70 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v69, "Failed to parse URL components", v70, 2u);
    v50 = v70;
  }
  else
  {
    v99 = (char *)v11;
    v100 = v30;
    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    v34 = type metadata accessor for Logger(0);
    sub_10000D744(v34, (uint64_t)qword_10033FD18);
    v35 = a2;
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v36, v37))
    {

      return 0;
    }
    v38 = (uint8_t *)swift_slowAlloc(12, -1);
    v39 = swift_slowAlloc(32, -1);
    v102 = v39;
    *(_DWORD *)v38 = 136446210;
    v40 = objc_msgSend(v35, "URL");
    v41 = v101;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v40);

    v42 = URL.scheme.getter();
    v44 = v43;
    v100(v41, (uint64_t)v99);
    v104 = v42;
    v105 = v44;
    v45 = sub_100003DB8(&qword_100318260);
    v47 = String.init<A>(describing:)(&v104, v45, v46);
    v49 = v48;
    v104 = sub_100172BEC(v47, v48, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v38 + 4, v38 + 12);

    swift_bridgeObjectRelease(v49);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Unexpected URL scheme: %{public}s", v38, 0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    v50 = v38;
  }
  swift_slowDealloc(v50, -1, -1);
LABEL_8:

  return 0;
}

uint64_t sub_100137930(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, unint64_t, uint64_t, __n128);
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  __n128 v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  __n128 v62;
  unsigned int (*v63)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t (*v67)(uint64_t, uint64_t);
  unint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  char v77;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(char *, unint64_t, uint64_t, __n128);
  __n128 v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  __n128 v94;
  unsigned int v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(char *, unint64_t, uint64_t, __n128);
  __n128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  __n128 v106;
  uint64_t v107;
  uint64_t v108;
  __n128 v109;
  unsigned int v110;
  uint8_t *v111;
  unsigned int (*v112)(uint64_t, uint64_t, uint64_t, __n128);
  int v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  Swift::String v124;

  v4 = type metadata accessor for URLQueryItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v116 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7, v9);
  v120 = (char *)&v111 - v11;
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v111 - v13;
  v15 = sub_100003DB8(&qword_1003216C8);
  v17 = __chkstk_darwin(v15, v16);
  v115 = (char *)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17, v19);
  v114 = (char *)&v111 - v21;
  __chkstk_darwin(v20, v22);
  v118 = (char *)&v111 - v23;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v24 = a1;
  v25 = type metadata accessor for Logger(0);
  v26 = sub_10000D744(v25, (uint64_t)qword_10033FD18);
  v28 = swift_bridgeObjectRetain_n(a2, 2, v27);
  v119 = v26;
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter(v29);
  v31 = os_log_type_enabled(v29, v30);
  v121 = v5;
  v113 = v24;
  if (v31)
  {
    v32 = swift_slowAlloc(22, -1);
    v33 = swift_slowAlloc(64, -1);
    v123 = v33;
    *(_DWORD *)v32 = 136446466;
    LOBYTE(v122) = v24;
    v34 = sub_100003DB8((uint64_t *)&unk_1003263F0);
    v36 = String.init<A>(describing:)(&v122, v34, v35);
    v38 = v37;
    v122 = sub_100172BEC(v36, v37, &v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v32 + 4, v32 + 12);
    swift_bridgeObjectRelease(v38);
    *(_WORD *)(v32 + 12) = 2082;
    v122 = a2;
    swift_bridgeObjectRetain(a2);
    v39 = sub_100003DB8(&qword_1003216D0);
    v41 = String.init<A>(describing:)(&v122, v39, v40);
    v43 = v42;
    v122 = sub_100172BEC(v41, v42, &v123);
    v5 = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v32 + 14, v32 + 22);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v43);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "handleRequest(wasActive = %{public}s, items = %{public}s)", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);

    if (!a2)
      goto LABEL_24;
  }
  else
  {

    v44 = swift_bridgeObjectRelease_n(a2, 2);
    if (!a2)
    {
LABEL_24:
      v74 = Logger.logObject.getter(v44);
      v75 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v74, v75))
      {
        v76 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v76 = 0;
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "request command: reason is missing", v76, 2u);
        swift_slowDealloc(v76, -1, -1);
      }

      v77 = 0;
      return v77 & 1;
    }
  }
  v45 = *(_QWORD *)(a2 + 16);
  v117 = a2;
  if (v45)
  {
    v46 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v47 = *(_QWORD *)(v5 + 72);
    v48 = a2;
    v49 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16);
    v50 = swift_bridgeObjectRetain(v48);
    while (1)
    {
      v51 = v49(v14, v46, v4, v50);
      v52 = URLQueryItem.name.getter(v51);
      v54 = v53;
      if (v52 == 0x6E6F73616572 && v53 == 0xE600000000000000)
        break;
      v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v53, 0x6E6F73616572, 0xE600000000000000, 0);
      v56 = swift_bridgeObjectRelease(v54);
      if ((v55 & 1) != 0)
        goto LABEL_17;
      (*(void (**)(char *, uint64_t, __n128))(v121 + 8))(v14, v4, v56);
      v46 += v47;
      if (!--v45)
        goto LABEL_15;
    }
    v56 = swift_bridgeObjectRelease(0xE600000000000000);
LABEL_17:
    v57 = (_QWORD *)v121;
    v59 = (uint64_t)v118;
    (*(void (**)(char *, char *, uint64_t, __n128))(v121 + 32))(v118, v14, v4, v56);
    v58 = (char *)v57[7];
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))v58)(v59, 0, 1, v4, v60);
  }
  else
  {
    v50 = swift_bridgeObjectRetain(a2);
LABEL_15:
    v57 = (_QWORD *)v121;
    v58 = *(char **)(v121 + 56);
    v59 = (uint64_t)v118;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v58)(v118, 1, 1, v4, v50);
  }
  v61 = v117;
  v62 = swift_bridgeObjectRelease(v117);
  v63 = (unsigned int (*)(uint64_t, uint64_t, uint64_t, __n128))v57[6];
  if (v63(v59, 1, v4, v62) == 1)
  {
    v44 = sub_100007FF0(v59, &qword_1003216C8);
    goto LABEL_24;
  }
  v64 = URLQueryItem.value.getter();
  v66 = v65;
  v67 = (uint64_t (*)(uint64_t, uint64_t))v57[1];
  v44 = v67(v59, v4);
  if (!v66)
    goto LABEL_24;
  swift_bridgeObjectRetain(v66);
  v124._countAndFlagsBits = v64;
  v124._object = v66;
  v68 = _s8SOSBuddy20RequestCommandReasonO8rawValueACSgSS_tcfC_0(v124);
  if (v68 == 10)
  {
    swift_bridgeObjectRetain(v66);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc(12, -1);
      v119 = swift_slowAlloc(32, -1);
      v123 = v119;
      *(_DWORD *)v72 = 136446210;
      v111 = v72 + 4;
      swift_bridgeObjectRetain(v66);
      v122 = sub_100172BEC(v64, (unint64_t)v66, &v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v111, v72 + 12);
      swift_bridgeObjectRelease_n(v66, 3);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "request command: reason '%{public}s' is not supported", v72, 0xCu);
      v73 = v119;
      swift_arrayDestroy(v119, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1, -1);
      swift_slowDealloc(v72, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v66, 2);
    }
    v119 = 9;
    v61 = v117;
  }
  else
  {
    v119 = v68;
    swift_bridgeObjectRelease(v66);
  }
  v79 = *(_QWORD *)(v61 + 16);
  v118 = v58;
  v112 = v63;
  if (v79)
  {
    v80 = v61 + ((*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80));
    v81 = *(_QWORD *)(v121 + 72);
    v82 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v121 + 16);
    v83 = swift_bridgeObjectRetain(v61);
    v84 = v79;
    v85 = v120;
    while (1)
    {
      v86 = v82(v85, v80, v4, v83);
      v87 = URLQueryItem.name.getter(v86);
      v89 = v88;
      if (v87 == 0x68636E75616C6572 && v88 == 0xE800000000000000)
        break;
      v90 = _stringCompareWithSmolCheck(_:_:expecting:)(v87, v88, 0x68636E75616C6572, 0xE800000000000000, 0);
      v91 = swift_bridgeObjectRelease(v89);
      if ((v90 & 1) != 0)
        goto LABEL_40;
      v85 = v120;
      ((void (*)(char *, uint64_t, __n128))v67)(v120, v4, v91);
      v80 += v81;
      if (!--v84)
      {
        v92 = 1;
        v61 = v117;
        v93 = (uint64_t)v114;
        goto LABEL_41;
      }
    }
    v91 = swift_bridgeObjectRelease(0xE800000000000000);
LABEL_40:
    v93 = (uint64_t)v114;
    (*(void (**)(char *, char *, uint64_t, __n128))(v121 + 32))(v114, v120, v4, v91);
    v92 = 0;
    v61 = v117;
LABEL_41:
    v58 = v118;
    v63 = v112;
  }
  else
  {
    v83 = swift_bridgeObjectRetain(v61);
    v92 = 1;
    v93 = (uint64_t)v114;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))v58)(v93, v92, 1, v4, v83);
  v94 = swift_bridgeObjectRelease(v61);
  v95 = v63(v93, 1, v4, v94);
  sub_100007FF0(v93, &qword_1003216C8);
  v96 = v116;
  if (v79)
  {
    LODWORD(v120) = v95;
    v97 = v61 + ((*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80));
    v98 = *(_QWORD *)(v121 + 72);
    v99 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v121 + 16);
    v100 = swift_bridgeObjectRetain(v61);
    while (1)
    {
      v101 = v99(v96, v97, v4, v100);
      v102 = URLQueryItem.name.getter(v101);
      v104 = v103;
      if (v102 == 0x654468636E75616CLL && v103 == 0xEA00000000006F6DLL)
        break;
      v105 = _stringCompareWithSmolCheck(_:_:expecting:)(v102, v103, 0x654468636E75616CLL, 0xEA00000000006F6DLL, 0);
      v106 = swift_bridgeObjectRelease(v104);
      if ((v105 & 1) != 0)
        goto LABEL_51;
      ((void (*)(char *, uint64_t, __n128))v67)(v96, v4, v106);
      v97 += v98;
      if (!--v79)
      {
        v107 = 1;
        v61 = v117;
        v108 = (uint64_t)v115;
        goto LABEL_52;
      }
    }
    v106 = swift_bridgeObjectRelease(0xEA00000000006F6DLL);
LABEL_51:
    v108 = (uint64_t)v115;
    (*(void (**)(char *, char *, uint64_t, __n128))(v121 + 32))(v115, v96, v4, v106);
    v107 = 0;
    v61 = v117;
LABEL_52:
    v58 = v118;
    v63 = v112;
  }
  else
  {
    v100 = swift_bridgeObjectRetain(v61);
    v107 = 1;
    v108 = (uint64_t)v115;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))v58)(v108, v107, 1, v4, v100);
  v109 = swift_bridgeObjectRelease(v61);
  v110 = v63(v108, 1, v4, v109);
  sub_100007FF0(v108, &qword_1003216C8);
  if (v110 == 1)
    __asm { BR              X11 }
  sub_10013BEE8(byte_10025845A[(char)v119]);
  v77 = 1;
  return v77 & 1;
}

void sub_100138300(char a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD v52[2];
  int v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v4 = v3;
  v62 = type metadata accessor for URLQueryItem(0);
  v64 = *(_QWORD *)(v62 - 8);
  v9 = __chkstk_darwin(v62, v8);
  v11 = (char *)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v9, v12);
  v59 = (char *)v52 - v14;
  v16 = __chkstk_darwin(v13, v15);
  v63 = (char *)v52 - v17;
  __chkstk_darwin(v16, v18);
  v60 = (char *)v52 - v19;
  v20 = sub_100003DB8(&qword_1003216C8);
  v22 = __chkstk_darwin(v20, v21);
  v52[1] = (char *)v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22, v24);
  v27 = (char *)v52 - v26;
  v29 = __chkstk_darwin(v25, v28);
  v58 = (char *)v52 - v30;
  __chkstk_darwin(v29, v31);
  v33 = (char *)v52 - v32;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v34 = type metadata accessor for Logger(0);
  v35 = sub_10000D744(v34, (uint64_t)qword_10033FD18);
  v37 = swift_bridgeObjectRetain_n(a3, 2, v36);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter(v38);
  v40 = os_log_type_enabled(v38, v39);
  v54 = v11;
  v55 = v4;
  v53 = a2;
  v56 = v27;
  if (v40)
  {
    v41 = swift_slowAlloc(28, -1);
    v42 = swift_slowAlloc(64, -1);
    v65 = v42;
    *(_DWORD *)v41 = 67240706;
    LODWORD(v66) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, (char *)&v66 + 4, v41 + 4, v41 + 8);
    *(_WORD *)(v41 + 8) = 2082;
    v61 = v35;
    LOBYTE(v66) = a1;
    v44 = String.init<A>(describing:)(&v66, &type metadata for RequestCommandReason, v43);
    v57 = v33;
    v46 = v45;
    v66 = sub_100172BEC(v44, v45, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v41 + 10, v41 + 18);
    swift_bridgeObjectRelease(v46);
    *(_WORD *)(v41 + 18) = 2082;
    v66 = a3;
    swift_bridgeObjectRetain(a3);
    v47 = sub_100003DB8(&qword_1003216D0);
    v49 = String.init<A>(describing:)(&v66, v47, v48);
    v51 = v50;
    v66 = sub_100172BEC(v49, v50, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v41 + 20, v41 + 28);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease(v51);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "handleEmergencyRequest(bringForeground = %{BOOL,public}d, reason = %{public}s, items = %{public}s)", (uint8_t *)v41, 0x1Cu);
    swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  __asm { BR              X10 }
}

uint64_t sub_100139668(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, unint64_t, uint64_t, __n128);
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  __n128 v57;
  char *v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  __n128 v62;
  unsigned int (*v63)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t);
  __n128 v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(char *, unint64_t, uint64_t, __n128);
  __n128 v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  __n128 v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  const char *v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  __n128 v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  const char *v100;
  unint64_t v101;
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  Swift::String v108;
  Swift::Int v109;
  int v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(char *, unint64_t, uint64_t, __n128);
  __n128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  __n128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  NSObject *v129;
  os_log_type_t v130;
  uint8_t *v131;
  uint64_t v132;
  __n128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  __n128 v139;
  uint64_t v140;
  char v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t (*v144)(char *, unint64_t, uint64_t, __n128);
  uint64_t v145;
  __n128 v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  __n128 v153;
  uint64_t v154;
  char v155;
  __n128 v156;
  uint64_t v157;
  void *v158;
  void *v159;
  Swift::String v160;
  Swift::Int v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  NSObject *v166;
  os_log_type_t v167;
  uint8_t *v168;
  uint64_t v169;
  unint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int (*v177)(uint64_t, uint64_t, uint64_t, __n128);
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD v189[2];
  char v190;
  uint64_t v191;
  char v192;
  char v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;

  v4 = type metadata accessor for URLQueryItem(0);
  v187 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4, v5);
  v181 = (char *)&v174 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6, v8);
  v182 = (char *)&v174 - v10;
  v12 = __chkstk_darwin(v9, v11);
  v185 = (char *)&v174 - v13;
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v174 - v15;
  v17 = sub_100003DB8(&qword_1003216C8);
  v19 = __chkstk_darwin(v17, v18);
  v21 = (char *)&v174 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v19, v22);
  v178 = (char *)&v174 - v24;
  v26 = __chkstk_darwin(v23, v25);
  v180 = (char *)&v174 - v27;
  __chkstk_darwin(v26, v28);
  v184 = (char *)&v174 - v29;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_10000D744(v30, (uint64_t)qword_10033FD18);
  v33 = swift_bridgeObjectRetain_n(a2, 2, v32);
  v186 = v31;
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter(v34);
  v36 = os_log_type_enabled(v34, v35);
  v179 = v21;
  if (v36)
  {
    v37 = swift_slowAlloc(18, -1);
    v38 = swift_slowAlloc(32, -1);
    v188 = v38;
    *(_DWORD *)v37 = 67240450;
    LODWORD(v196) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, (char *)&v196 + 4, v37 + 4, v37 + 8);
    *(_WORD *)(v37 + 8) = 2082;
    v196 = a2;
    swift_bridgeObjectRetain(a2);
    v39 = sub_100003DB8(&qword_1003216D0);
    v41 = String.init<A>(describing:)(&v196, v39, v40);
    v43 = v42;
    v196 = sub_100172BEC(v41, v42, &v188);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v37 + 10, v37 + 18);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v43);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "handleRoadsideAssistanceRequest(bringForeground = %{BOOL,public}d, items = %{public}s)", (uint8_t *)v37, 0x12u);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);

    v45 = v187;
    if (!a2)
      goto LABEL_29;
  }
  else
  {

    v44 = swift_bridgeObjectRelease_n(a2, 2);
    v45 = v187;
    if (!a2)
    {
LABEL_29:
      v84 = Logger.logObject.getter(v44);
      v85 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v84, v85))
      {
LABEL_33:

        return 0;
      }
      v86 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v86 = 0;
      v87 = "request command: conversationId is missing";
      goto LABEL_31;
    }
  }
  v46 = *(_QWORD *)(a2 + 16);
  v183 = a2;
  if (v46)
  {
    v47 = a2 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
    v48 = *(_QWORD *)(v45 + 72);
    v49 = a2;
    v50 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v45 + 16);
    v51 = swift_bridgeObjectRetain(v49);
    while (1)
    {
      v52 = v50(v16, v47, v4, v51);
      v53 = URLQueryItem.name.getter(v52);
      v55 = v54;
      if (v53 == 0x61737265766E6F63 && v54 == 0xEE0064496E6F6974)
        break;
      v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v54, 0x61737265766E6F63, 0xEE0064496E6F6974, 0);
      v57 = swift_bridgeObjectRelease(v55);
      if ((v56 & 1) != 0)
        goto LABEL_17;
      v45 = v187;
      (*(void (**)(char *, uint64_t, __n128))(v187 + 8))(v16, v4, v57);
      v47 += v48;
      if (!--v46)
        goto LABEL_15;
    }
    v57 = swift_bridgeObjectRelease(0xEE0064496E6F6974);
LABEL_17:
    v45 = v187;
    v59 = (uint64_t)v184;
    (*(void (**)(char *, char *, uint64_t, __n128))(v187 + 32))(v184, v16, v4, v57);
    v58 = *(char **)(v45 + 56);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))v58)(v59, 0, 1, v4, v60);
  }
  else
  {
    v51 = swift_bridgeObjectRetain(a2);
LABEL_15:
    v58 = *(char **)(v45 + 56);
    v59 = (uint64_t)v184;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v58)(v184, 1, 1, v4, v51);
  }
  v61 = v183;
  v62 = swift_bridgeObjectRelease(v183);
  v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v45 + 48);
  if (v63(v59, 1, v4, v62) == 1)
  {
    v44 = sub_100007FF0(v59, &qword_1003216C8);
    goto LABEL_29;
  }
  v64 = URLQueryItem.value.getter();
  v66 = v65;
  v67 = *(uint64_t (**)(uint64_t, uint64_t))(v45 + 8);
  v44 = v67(v59, v4);
  if (!v66)
    goto LABEL_29;
  v68 = swift_bridgeObjectRetain(v66);
  v69 = sub_100176F3C(v64, v66, v68);
  if ((v70 & 1) != 0)
  {
    swift_bridgeObjectRetain(v66);
    v84 = Logger.logObject.getter(v91);
    v92 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v84, v92))
    {
      v93 = (uint8_t *)swift_slowAlloc(12, -1);
      v94 = swift_slowAlloc(32, -1);
      v196 = v94;
      *(_DWORD *)v93 = 136446210;
      v188 = v64;
      v189[0] = v66;
      swift_bridgeObjectRetain(v66);
      v95 = sub_100003DB8(&qword_100318260);
      v97 = String.init<A>(describing:)(&v188, v95, v96);
      v99 = v98;
      v188 = sub_100172BEC(v97, v98, &v196);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, v189, v93 + 4, v93 + 12);
      swift_bridgeObjectRelease_n(v66, 2);
      swift_bridgeObjectRelease(v99);
      v100 = "request command: conversationId '%{public}s' is invalid, uint expected";
LABEL_38:
      _os_log_impl((void *)&_mh_execute_header, v84, v92, v100, v93, 0xCu);
      swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v94, -1, -1);
      v88 = v93;
      goto LABEL_32;
    }

    v101 = v66;
LABEL_40:
    swift_bridgeObjectRelease_n(v101, 2);
    return 0;
  }
  v175 = v69;
  swift_bridgeObjectRelease(v66);
  v71 = *(_QWORD *)(v61 + 16);
  v176 = v71;
  if (v71)
  {
    v177 = v63;
    v184 = v58;
    v72 = v61 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
    v73 = *(_QWORD *)(v45 + 72);
    v74 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v45 + 16);
    v75 = swift_bridgeObjectRetain(v61);
    v76 = v185;
    while (1)
    {
      v77 = v74(v76, v72, v4, v75);
      v78 = URLQueryItem.name.getter(v77);
      v80 = v79;
      if (v78 == 0x6E6F69746361 && v79 == 0xE600000000000000)
        break;
      v81 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v79, 0x6E6F69746361, 0xE600000000000000, 0);
      v82 = swift_bridgeObjectRelease(v80);
      if ((v81 & 1) != 0)
        goto LABEL_44;
      v76 = v185;
      ((void (*)(char *, uint64_t, __n128))v67)(v185, v4, v82);
      v72 += v73;
      if (!--v71)
      {
        v83 = 1;
        v61 = v183;
        v58 = v184;
        v63 = v177;
        goto LABEL_42;
      }
    }
    v82 = swift_bridgeObjectRelease(0xE600000000000000);
LABEL_44:
    v102 = (uint64_t)v180;
    (*(void (**)(char *, char *, uint64_t, __n128))(v187 + 32))(v180, v185, v4, v82);
    v83 = 0;
    v61 = v183;
    v58 = v184;
    v63 = v177;
  }
  else
  {
    swift_bridgeObjectRetain(v61);
    v83 = 1;
LABEL_42:
    v102 = (uint64_t)v180;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v58)(v102, v83, 1, v4);
  v103 = swift_bridgeObjectRelease(v61);
  if (v63(v102, 1, v4, v103) == 1)
  {
    v104 = sub_100007FF0(v102, &qword_1003216C8);
LABEL_51:
    v84 = Logger.logObject.getter(v104);
    v85 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v84, v85))
      goto LABEL_33;
    v86 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v86 = 0;
    v87 = "request command: action is missing";
LABEL_31:
    _os_log_impl((void *)&_mh_execute_header, v84, v85, v87, v86, 2u);
    v88 = v86;
LABEL_32:
    swift_slowDealloc(v88, -1, -1);
    goto LABEL_33;
  }
  v105 = URLQueryItem.value.getter();
  v107 = v106;
  v104 = v67(v102, v4);
  if (!v107)
    goto LABEL_51;
  swift_bridgeObjectRetain(v107);
  v108._countAndFlagsBits = v105;
  v108._object = v107;
  v109 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002E0290, v108);
  swift_bridgeObjectRelease(v107);
  if (v109)
  {
    if (v109 != 1)
    {
      swift_bridgeObjectRetain(v107);
      v129 = Logger.logObject.getter(v128);
      v130 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v129, v130))
      {
        v131 = (uint8_t *)swift_slowAlloc(12, -1);
        v132 = swift_slowAlloc(32, -1);
        v188 = v132;
        *(_DWORD *)v131 = 136446210;
        swift_bridgeObjectRetain(v107);
        v196 = sub_100172BEC(v105, (unint64_t)v107, &v188);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v131 + 4, v131 + 12);
        swift_bridgeObjectRelease_n(v107, 3);
        _os_log_impl((void *)&_mh_execute_header, v129, v130, "request command: action '%{public}s' is not supported", v131, 0xCu);
        swift_arrayDestroy(v132, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v132, -1, -1);
        swift_slowDealloc(v131, -1, -1);

        return 0;
      }

      v101 = (unint64_t)v107;
      goto LABEL_40;
    }
    v110 = 1;
  }
  else
  {
    v110 = 0;
  }
  swift_bridgeObjectRelease(v107);
  v111 = v182;
  v112 = v176;
  LODWORD(v185) = v110;
  v184 = v58;
  v177 = v63;
  if (v176)
  {
    v113 = v61 + ((*(unsigned __int8 *)(v187 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v187 + 80));
    v114 = *(_QWORD *)(v187 + 72);
    v115 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v187 + 16);
    v116 = swift_bridgeObjectRetain(v61);
    v117 = v112;
    v118 = v112;
    while (1)
    {
      v119 = v115(v111, v113, v4, v116);
      v120 = URLQueryItem.name.getter(v119);
      v122 = v121;
      if (v120 == 0x72656469766F7270 && v121 == 0xEA00000000006449)
        break;
      v123 = _stringCompareWithSmolCheck(_:_:expecting:)(v120, v121, 0x72656469766F7270, 0xEA00000000006449, 0);
      v124 = swift_bridgeObjectRelease(v122);
      if ((v123 & 1) != 0)
        goto LABEL_66;
      v111 = v182;
      ((void (*)(char *, uint64_t, __n128))v67)(v182, v4, v124);
      v113 += v114;
      if (!--v118)
      {
        v125 = 1;
        v61 = v183;
        v126 = v187;
        v127 = (uint64_t)v178;
        goto LABEL_67;
      }
    }
    v124 = swift_bridgeObjectRelease(0xEA00000000006449);
LABEL_66:
    v126 = v187;
    v127 = (uint64_t)v178;
    (*(void (**)(char *, char *, uint64_t, __n128))(v187 + 32))(v178, v182, v4, v124);
    v125 = 0;
    v61 = v183;
LABEL_67:
    LOBYTE(v110) = (_BYTE)v185;
    v58 = v184;
    v63 = v177;
  }
  else
  {
    v117 = 0;
    v116 = swift_bridgeObjectRetain(v61);
    v125 = 1;
    v126 = v187;
    v127 = (uint64_t)v178;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))v58)(v127, v125, 1, v4, v116);
  v133 = swift_bridgeObjectRelease(v61);
  if (v63(v127, 1, v4, v133) == 1)
  {
    sub_100007FF0(v127, &qword_1003216C8);
    v182 = 0;
    LODWORD(v180) = 1;
    v134 = (uint64_t)v179;
    goto LABEL_75;
  }
  v135 = v61;
  v136 = URLQueryItem.value.getter();
  v138 = v137;
  v67(v127, v4);
  if (!v138)
  {
    v182 = 0;
    LODWORD(v180) = 1;
    goto LABEL_74;
  }
  v139 = swift_bridgeObjectRetain(v138);
  v140 = sub_100176F3C(v136, v138, v139);
  if ((v141 & 1) != 0)
  {
    swift_bridgeObjectRetain(v138);
    v84 = Logger.logObject.getter(v164);
    v92 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v84, v92))
    {
      v93 = (uint8_t *)swift_slowAlloc(12, -1);
      v94 = swift_slowAlloc(32, -1);
      v188 = v94;
      *(_DWORD *)v93 = 136446210;
      swift_bridgeObjectRetain(v138);
      v196 = sub_100172BEC(v136, v138, &v188);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v93 + 4, v93 + 12);
      swift_bridgeObjectRelease_n(v138, 3);
      v100 = "request command: providerId '%{public}s' is invalid, uint expected";
      goto LABEL_38;
    }

    v101 = v138;
    goto LABEL_40;
  }
  v182 = (char *)v140;
  swift_bridgeObjectRelease(v138);
  LODWORD(v180) = 0;
LABEL_74:
  v61 = v135;
  v134 = (uint64_t)v179;
  v126 = v187;
LABEL_75:
  if (v117)
  {
    v142 = v61 + ((*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80));
    v143 = *(_QWORD *)(v126 + 72);
    v144 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v126 + 16);
    v145 = v61;
    v146 = swift_bridgeObjectRetain(v61);
    v147 = v181;
    while (1)
    {
      v148 = v144(v147, v142, v4, v146);
      v149 = URLQueryItem.name.getter(v148);
      v151 = v150;
      if (v149 == 0x767265536D6F7266 && v150 == 0xEB00000000656369)
        break;
      v152 = _stringCompareWithSmolCheck(_:_:expecting:)(v149, v150, 0x767265536D6F7266, 0xEB00000000656369, 0);
      v153 = swift_bridgeObjectRelease(v151);
      if ((v152 & 1) != 0)
        goto LABEL_84;
      v147 = v181;
      ((void (*)(char *, uint64_t, __n128))v67)(v181, v4, v153);
      v142 += v143;
      if (!--v117)
      {
        v154 = 1;
        v61 = v145;
        v134 = (uint64_t)v179;
        goto LABEL_85;
      }
    }
    v153 = swift_bridgeObjectRelease(0xEB00000000656369);
LABEL_84:
    v134 = (uint64_t)v179;
    (*(void (**)(char *, char *, uint64_t, __n128))(v187 + 32))(v179, v181, v4, v153);
    v154 = 0;
    v61 = v145;
LABEL_85:
    v58 = v184;
    v63 = v177;
    v155 = (char)v185;
  }
  else
  {
    v146 = swift_bridgeObjectRetain(v61);
    v154 = 1;
    v155 = v110;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))v58)(v134, v154, 1, v4, v146);
  v156 = swift_bridgeObjectRelease(v61);
  if (v63(v134, 1, v4, v156) == 1)
  {
    sub_100007FF0(v134, &qword_1003216C8);
LABEL_99:
    v163 = 0;
    v162 = 1;
    goto LABEL_100;
  }
  v157 = URLQueryItem.value.getter();
  v159 = v158;
  v67(v134, v4);
  if (!v159)
    goto LABEL_99;
  swift_bridgeObjectRetain(v159);
  v160._countAndFlagsBits = v157;
  v160._object = v159;
  v161 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002E02E0, v160);
  swift_bridgeObjectRelease(v159);
  if (v161 == 1)
  {
    swift_bridgeObjectRelease(v159);
    v162 = 0;
    v163 = 8;
  }
  else if (v161)
  {
    swift_bridgeObjectRetain(v159);
    v166 = Logger.logObject.getter(v165);
    v167 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v166, v167))
    {

      swift_bridgeObjectRelease_n(v159, 2);
      goto LABEL_99;
    }
    v168 = (uint8_t *)swift_slowAlloc(12, -1);
    v169 = swift_slowAlloc(32, -1);
    v188 = v169;
    *(_DWORD *)v168 = 136446210;
    swift_bridgeObjectRetain(v159);
    v196 = sub_100172BEC(v157, (unint64_t)v159, &v188);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v168 + 4, v168 + 12);
    swift_bridgeObjectRelease_n(v159, 3);
    _os_log_impl((void *)&_mh_execute_header, v166, v167, "request command: fromService '%{public}s' is not supported", v168, 0xCu);
    v162 = 1;
    swift_arrayDestroy(v169, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v169, -1, -1);
    swift_slowDealloc(v168, -1, -1);

    v163 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v159);
    v162 = 0;
    v163 = 1;
  }
LABEL_100:
  v170 = 0x8000000100260550;
  v89 = 1;
  if ((v155 & 1) != 0)
  {
    v171 = 1;
  }
  else
  {
    v171 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100260530, 0xD000000000000012, 0x8000000100260550, 0);
    v170 = 0x8000000100260530;
  }
  swift_bridgeObjectRelease(v170);
  v172 = type metadata accessor for PreventSuspensionAssertion();
  swift_allocObject(v172, 32, 7);
  v173 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, 0xD000000000000024, 0x800000010026B3C0);
  v188 = v175;
  LOBYTE(v189[0]) = v171 & 1;
  v189[1] = v182;
  v190 = (char)v180;
  v191 = v163;
  v192 = v162;
  v193 = v155;
  v194 = 1;
  v195 = v173;
  PassthroughSubject.send(_:)(&v188);
  swift_release(v173);
  return v89;
}

uint64_t sub_10013A6FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(_BYTE *, unint64_t, uint64_t, __n128);
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __n128 v50;
  void (*v51)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  __n128 v55;
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v57;
  void *v58;
  void *v59;
  Swift::String v60;
  Swift::Int v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(_BYTE *, unint64_t, uint64_t, __n128);
  __n128 v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  unint64_t v88;
  __n128 v89;
  _BYTE *v90;
  int v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(_BYTE *, unint64_t, uint64_t, __n128);
  __n128 v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  __n128 v108;
  uint64_t v109;
  char v110;
  __n128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __n128 v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  os_log_type_t v123;
  uint8_t *v124;
  uint64_t v125;
  uint64_t v126;
  os_log_type_t v127;
  uint64_t v128;
  uint64_t v129;
  __n128 v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  _BYTE v134[4];
  int v135;
  unsigned int (*v136)(uint64_t, uint64_t, uint64_t, __n128);
  void (*v137)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  _BYTE *v138;
  _BYTE *v139;
  uint64_t v140;
  _BYTE *v141;
  uint64_t v142;
  _BYTE *v143;
  uint64_t (*v144)(uint64_t, uint64_t);
  uint64_t v145;
  uint64_t v146;
  _BYTE *v147;
  char v148;
  uint64_t v149;
  char v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;

  v2 = type metadata accessor for URLQueryItem(0);
  v145 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2, v3);
  v141 = &v134[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v4, v6);
  v143 = &v134[-v8];
  __chkstk_darwin(v7, v9);
  v11 = &v134[-v10];
  v12 = sub_100003DB8(&qword_1003216C8);
  v14 = __chkstk_darwin(v12, v13);
  v16 = &v134[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = __chkstk_darwin(v14, v17);
  v139 = &v134[-v19];
  __chkstk_darwin(v18, v20);
  v22 = (uint64_t (*)(uint64_t, uint64_t))&v134[-v21];
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10000D744(v23, (uint64_t)qword_10033FD18);
  v26 = swift_bridgeObjectRetain_n(a1, 2, v25);
  v142 = v24;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  v29 = os_log_type_enabled(v27, v28);
  v138 = v16;
  v144 = v22;
  if (v29)
  {
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    v31 = swift_slowAlloc(32, -1);
    v146 = v31;
    *(_DWORD *)v30 = 136446210;
    v153 = a1;
    swift_bridgeObjectRetain(a1);
    v32 = sub_100003DB8(&qword_1003216D0);
    v34 = String.init<A>(describing:)(&v153, v32, v33);
    v36 = v35;
    v153 = sub_100172BEC(v34, v35, &v146);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "handleAlert(%{public}s)", v30, 0xCu);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);

    v38 = v145;
    if (!a1)
      goto LABEL_24;
  }
  else
  {

    v37 = swift_bridgeObjectRelease_n(a1, 2);
    v38 = v145;
    if (!a1)
      goto LABEL_24;
  }
  v39 = *(_QWORD *)(a1 + 16);
  v140 = a1;
  if (v39)
  {
    v40 = a1 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
    v41 = *(_QWORD *)(v38 + 72);
    v42 = a1;
    v43 = *(uint64_t (**)(_BYTE *, unint64_t, uint64_t, __n128))(v38 + 16);
    v44 = swift_bridgeObjectRetain(v42);
    while (1)
    {
      v45 = v43(v11, v40, v2, v44);
      v46 = URLQueryItem.name.getter(v45);
      v48 = v47;
      if (v46 == 0x6E694B7472656C61 && v47 == 0xE900000000000064)
        break;
      v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, 0x6E694B7472656C61, 0xE900000000000064, 0);
      v50 = swift_bridgeObjectRelease(v48);
      if ((v49 & 1) != 0)
        goto LABEL_17;
      v38 = v145;
      (*(void (**)(_BYTE *, uint64_t, __n128))(v145 + 8))(v11, v2, v50);
      v40 += v41;
      if (!--v39)
        goto LABEL_15;
    }
    v50 = swift_bridgeObjectRelease(0xE900000000000064);
LABEL_17:
    v52 = (uint64_t)v144;
    v38 = v145;
    (*(void (**)(uint64_t (*)(uint64_t, uint64_t), _BYTE *, uint64_t, __n128))(v145 + 32))(v144, v11, v2, v50);
    v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v38 + 56);
    v51(v52, 0, 1, v2, v53);
  }
  else
  {
    v44 = swift_bridgeObjectRetain(a1);
LABEL_15:
    v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v38 + 56);
    v52 = (uint64_t)v144;
    v51((uint64_t)v144, 1, 1, v2, v44);
  }
  v54 = v140;
  v55 = swift_bridgeObjectRelease(v140);
  v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v38 + 48);
  if (v56(v52, 1, v2, v55) == 1)
  {
    v37 = sub_100007FF0(v52, &qword_1003216C8);
    goto LABEL_24;
  }
  v57 = URLQueryItem.value.getter();
  v59 = v58;
  v144 = *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8);
  v37 = v144(v52, v2);
  if (v59)
  {
    swift_bridgeObjectRetain(v59);
    v60._countAndFlagsBits = v57;
    v60._object = v59;
    v61 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002E03B8, v60);
    swift_bridgeObjectRelease(v59);
    if (v61)
    {
      if (v61 != 1)
      {
        swift_bridgeObjectRetain(v59);
        v84 = Logger.logObject.getter(v83);
        v85 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v84, v85))
        {
          v86 = (uint8_t *)swift_slowAlloc(12, -1);
          v87 = swift_slowAlloc(32, -1);
          v146 = v87;
          *(_DWORD *)v86 = 136446210;
          swift_bridgeObjectRetain(v59);
          v153 = sub_100172BEC(v57, (unint64_t)v59, &v146);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v86 + 4, v86 + 12);
          swift_bridgeObjectRelease_n(v59, 3);
          _os_log_impl((void *)&_mh_execute_header, v84, v85, "alert command: alertKind '%{public}s' is not supported", v86, 0xCu);
          swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v87, -1, -1);
          swift_slowDealloc(v86, -1, -1);

          return 0;
        }

        v88 = (unint64_t)v59;
        goto LABEL_75;
      }
      v135 = 1;
    }
    else
    {
      v135 = 0;
    }
    swift_bridgeObjectRelease(v59);
    v68 = *(_QWORD *)(v54 + 16);
    v136 = v56;
    v137 = v51;
    if (v68)
    {
      v69 = v54 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
      v70 = *(_QWORD *)(v38 + 72);
      v71 = *(uint64_t (**)(_BYTE *, unint64_t, uint64_t, __n128))(v38 + 16);
      v72 = swift_bridgeObjectRetain(v54);
      v73 = v68;
      v74 = v143;
      while (1)
      {
        v75 = v71(v74, v69, v2, v72);
        v76 = URLQueryItem.name.getter(v75);
        v78 = v77;
        if (v76 == 0xD000000000000013 && v77 == 0x800000010026B360)
          break;
        v79 = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v77, 0xD000000000000013, 0x800000010026B360, 0);
        v80 = swift_bridgeObjectRelease(v78);
        if ((v79 & 1) != 0)
          goto LABEL_43;
        v74 = v143;
        ((void (*)(_BYTE *, uint64_t, __n128))v144)(v143, v2, v80);
        v69 += v70;
        if (!--v73)
        {
          v81 = 1;
          v82 = (uint64_t)v139;
          v54 = v140;
          v38 = v145;
          goto LABEL_44;
        }
      }
      v80 = swift_bridgeObjectRelease(0x800000010026B360);
LABEL_43:
      v38 = v145;
      v82 = (uint64_t)v139;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t, __n128))(v145 + 32))(v139, v143, v2, v80);
      v81 = 0;
      v54 = v140;
LABEL_44:
      v56 = v136;
      v51 = v137;
    }
    else
    {
      v72 = swift_bridgeObjectRetain(v54);
      v81 = 1;
      v82 = (uint64_t)v139;
    }
    v51(v82, v81, 1, v2, v72);
    v89 = swift_bridgeObjectRelease(v54);
    if (v56(v82, 1, v2, v89) == 1)
    {
      sub_100007FF0(v82, &qword_1003216C8);
      v90 = 0;
      v91 = 1;
      if (v68)
        goto LABEL_47;
      goto LABEL_58;
    }
    v105 = URLQueryItem.value.getter();
    v107 = v106;
    v144(v82, v2);
    if (!v107)
    {
      v90 = 0;
      v91 = 1;
LABEL_57:
      v38 = v145;
      if (v68)
      {
LABEL_47:
        LODWORD(v139) = v91;
        v143 = v90;
        v92 = v54 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
        v93 = *(_QWORD *)(v38 + 72);
        v94 = *(uint64_t (**)(_BYTE *, unint64_t, uint64_t, __n128))(v38 + 16);
        v95 = swift_bridgeObjectRetain(v54);
        v96 = v141;
        while (1)
        {
          v97 = v94(v96, v92, v2, v95);
          v98 = URLQueryItem.name.getter(v97);
          v100 = v99;
          if (v98 == 0xD000000000000013 && v99 == 0x800000010026B380)
            break;
          v101 = _stringCompareWithSmolCheck(_:_:expecting:)(v98, v99, 0xD000000000000013, 0x800000010026B380, 0);
          v102 = swift_bridgeObjectRelease(v100);
          if ((v101 & 1) != 0)
            goto LABEL_60;
          v96 = v141;
          ((void (*)(_BYTE *, uint64_t, __n128))v144)(v141, v2, v102);
          v92 += v93;
          if (!--v68)
          {
            v103 = 1;
            v104 = (uint64_t)v138;
            goto LABEL_61;
          }
        }
        v102 = swift_bridgeObjectRelease(0x800000010026B380);
LABEL_60:
        v104 = (uint64_t)v138;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t, __n128))(v145 + 32))(v138, v141, v2, v102);
        v103 = 0;
LABEL_61:
        v56 = v136;
        v51 = v137;
        v90 = v143;
        LOBYTE(v91) = (_BYTE)v139;
        goto LABEL_62;
      }
LABEL_58:
      v95 = swift_bridgeObjectRetain(v54);
      v103 = 1;
      v104 = (uint64_t)v138;
LABEL_62:
      v51(v104, v103, 1, v2, v95);
      v111 = swift_bridgeObjectRelease(v54);
      if (v56(v104, 1, v2, v111) == 1)
      {
        sub_100007FF0(v104, &qword_1003216C8);
LABEL_67:
        v117 = 0;
        v119 = 1;
        goto LABEL_68;
      }
      v112 = URLQueryItem.value.getter();
      v114 = v113;
      v144(v104, v2);
      if (!v114)
        goto LABEL_67;
      v116 = sub_100176F3C(v112, v114, v115);
      v117 = v116;
      if ((v118 & 1) == 0)
      {
        v119 = 0;
LABEL_68:
        v120 = type metadata accessor for PreventSuspensionAssertion();
        swift_allocObject(v120, 32, 7);
        v121 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, 0xD000000000000017, 0x800000010026B3A0);
        LOBYTE(v146) = v135;
        v147 = v90;
        v148 = v91;
        v149 = v117;
        v150 = v119;
        v66 = 1;
        v151 = 1;
        v152 = v121;
        PassthroughSubject.send(_:)(&v146);
        swift_release(v121);
        return v66;
      }
      v62 = Logger.logObject.getter(v116);
      v127 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v62, v127))
        goto LABEL_27;
      v124 = (uint8_t *)swift_slowAlloc(12, -1);
      v128 = swift_slowAlloc(32, -1);
      *(_DWORD *)v124 = 136446210;
      v153 = v128;
      v146 = v117;
      LOBYTE(v147) = 1;
      v129 = sub_100003DB8(&qword_100319D40);
      v131 = String.init<A>(describing:)(&v146, v129, v130);
      v133 = v132;
      v146 = sub_100172BEC(v131, v132, &v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v124 + 4, v124 + 12);
      swift_bridgeObjectRelease(v133);
      _os_log_impl((void *)&_mh_execute_header, v62, v127, "alert command: resumableProviderId '%{public}s' is invalid, uint expected", v124, 0xCu);
      swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
      v126 = v128;
LABEL_73:
      swift_slowDealloc(v126, -1, -1);
      v65 = v124;
      goto LABEL_26;
    }
    v108 = swift_bridgeObjectRetain(v107);
    v109 = sub_100176F3C(v105, v107, v108);
    if ((v110 & 1) == 0)
    {
      v90 = (_BYTE *)v109;
      swift_bridgeObjectRelease(v107);
      v91 = 0;
      goto LABEL_57;
    }
    swift_bridgeObjectRetain(v107);
    v62 = Logger.logObject.getter(v122);
    v123 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v123))
    {
      v124 = (uint8_t *)swift_slowAlloc(12, -1);
      v125 = swift_slowAlloc(32, -1);
      v146 = v125;
      *(_DWORD *)v124 = 136446210;
      swift_bridgeObjectRetain(v107);
      v153 = sub_100172BEC(v105, v107, &v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v124 + 4, v124 + 12);
      swift_bridgeObjectRelease_n(v107, 3);
      _os_log_impl((void *)&_mh_execute_header, v62, v123, "alert command: requestedProviderId '%{public}s' is invalid, uint expected", v124, 0xCu);
      swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
      v126 = v125;
      goto LABEL_73;
    }

    v88 = v107;
LABEL_75:
    swift_bridgeObjectRelease_n(v88, 2);
    return 0;
  }
LABEL_24:
  v62 = Logger.logObject.getter(v37);
  v63 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v62, v63))
  {
    v64 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "alert command: alertKind is missing", v64, 2u);
    v65 = v64;
LABEL_26:
    swift_slowDealloc(v65, -1, -1);
  }
LABEL_27:

  return 0;
}

uint64_t sub_10013B314(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, unint64_t, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __n128 v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  __n128 v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v47;
  uint8_t *v48;
  uint8_t *v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  Swift::String v51;
  Swift::Int v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint8_t *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(char *, unint64_t, uint64_t, __n128);
  __n128 v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  unsigned int v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint8_t *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95[2];
  uint64_t v96;
  uint64_t v97;

  v2 = type metadata accessor for URLQueryItem(0);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = __chkstk_darwin(v2, v4);
  v92 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v87 - v8;
  v10 = sub_100003DB8(&qword_1003216C8);
  v12 = __chkstk_darwin(v10, v11);
  v90 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  v93 = (char *)&v87 - v15;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10000D744(v16, (uint64_t)qword_10033FD18);
  v19 = swift_bridgeObjectRetain_n(a1, 2, v18);
  v94 = v17;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v95[0] = v23;
    *(_DWORD *)v22 = 136446210;
    v89 = v22 + 4;
    v96 = a1;
    swift_bridgeObjectRetain(a1);
    v24 = sub_100003DB8(&qword_1003216D0);
    v26 = String.init<A>(describing:)(&v96, v24, v25);
    v28 = v27;
    v96 = sub_100172BEC(v26, v27, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v89, v22 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "handleOffer(%{public}s)", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    if (!a1)
      goto LABEL_24;
  }
  else
  {

    v29 = swift_bridgeObjectRelease_n(a1, 2);
    if (!a1)
    {
LABEL_24:
      v54 = Logger.logObject.getter(v29);
      v59 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v54, v59))
      {
LABEL_27:

        return 0;
      }
      v60 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v59, "offer command: offerKind is missing", v60, 2u);
      v58 = v60;
LABEL_26:
      swift_slowDealloc(v58, -1, -1);
      goto LABEL_27;
    }
  }
  v30 = *(_QWORD *)(a1 + 16);
  v91 = a1;
  if (v30)
  {
    v31 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v32 = *(_QWORD *)(v3 + 72);
    v33 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v3 + 16);
    v34 = swift_bridgeObjectRetain(a1);
    while (1)
    {
      v35 = v33(v9, v31, v2, v34);
      v36 = URLQueryItem.name.getter(v35);
      v38 = v37;
      if (v36 == 0x6E694B726566666FLL && v37 == 0xE900000000000064)
        break;
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, 0x6E694B726566666FLL, 0xE900000000000064, 0);
      v40 = swift_bridgeObjectRelease(v38);
      if ((v39 & 1) != 0)
        goto LABEL_17;
      (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v9, v2, v40);
      v31 += v32;
      if (!--v30)
        goto LABEL_15;
    }
    v40 = swift_bridgeObjectRelease(0xE900000000000064);
LABEL_17:
    v42 = (uint64_t)v93;
    (*(void (**)(char *, char *, uint64_t, __n128))(v3 + 32))(v93, v9, v2, v40);
    v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v3 + 56);
    v41(v42, 0, 1, v2, v43);
  }
  else
  {
    v34 = swift_bridgeObjectRetain(a1);
LABEL_15:
    v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v3 + 56);
    v42 = (uint64_t)v93;
    v41((uint64_t)v93, 1, 1, v2, v34);
  }
  v44 = v91;
  v45 = swift_bridgeObjectRelease(v91);
  v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v3 + 48);
  if (v46(v42, 1, v2, v45) == 1)
  {
    v29 = sub_100007FF0(v42, &qword_1003216C8);
    goto LABEL_24;
  }
  v47 = URLQueryItem.value.getter();
  v49 = v48;
  v50 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  v29 = v50(v42, v2);
  if (!v49)
    goto LABEL_24;
  swift_bridgeObjectRetain(v49);
  v51._countAndFlagsBits = v47;
  v51._object = v49;
  v52 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002E0408, v51);
  swift_bridgeObjectRelease(v49);
  if (v52)
  {
    swift_bridgeObjectRetain(v49);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v54, v55))
    {

      swift_bridgeObjectRelease_n(v49, 2);
      return 0;
    }
    v56 = (uint8_t *)swift_slowAlloc(12, -1);
    v57 = swift_slowAlloc(32, -1);
    v95[0] = v57;
    *(_DWORD *)v56 = 136446210;
    swift_bridgeObjectRetain(v49);
    v96 = sub_100172BEC(v47, (unint64_t)v49, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v56 + 4, v56 + 12);
    swift_bridgeObjectRelease_n(v49, 3);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "offer command: offerKind '%{public}s' is not supported", v56, 0xCu);
    swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    v58 = v56;
    goto LABEL_26;
  }
  v93 = (char *)v47;
  v62 = *(_QWORD *)(v44 + 16);
  if (v62)
  {
    v88 = v41;
    v89 = v49;
    v63 = v44 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v64 = *(_QWORD *)(v3 + 72);
    v65 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v3 + 16);
    v66 = swift_bridgeObjectRetain(v44);
    v67 = v92;
    while (1)
    {
      v68 = v65(v67, v63, v2, v66);
      v69 = URLQueryItem.name.getter(v68);
      v71 = v70;
      if (v69 == 0x66664F7473726966 && v70 == 0xEA00000000007265)
        break;
      v72 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, 0x66664F7473726966, 0xEA00000000007265, 0);
      v73 = swift_bridgeObjectRelease(v71);
      if ((v72 & 1) != 0)
        goto LABEL_39;
      v67 = v92;
      ((void (*)(char *, uint64_t, __n128))v50)(v92, v2, v73);
      v63 += v64;
      if (!--v62)
      {
        v74 = 1;
        v44 = v91;
        v75 = (uint64_t)v90;
        goto LABEL_40;
      }
    }
    v73 = swift_bridgeObjectRelease(0xEA00000000007265);
LABEL_39:
    v75 = (uint64_t)v90;
    (*(void (**)(char *, char *, uint64_t, __n128))(v3 + 32))(v90, v92, v2, v73);
    v74 = 0;
    v44 = v91;
LABEL_40:
    v41 = v88;
    v49 = v89;
  }
  else
  {
    v66 = swift_bridgeObjectRetain(v44);
    v74 = 1;
    v75 = (uint64_t)v90;
  }
  v41(v75, v74, 1, v2, v66);
  v76 = swift_bridgeObjectRelease(v44);
  v77 = v46(v75, 1, v2, v76);
  sub_100007FF0(v75, &qword_1003216C8);
  swift_bridgeObjectRetain(v49);
  v79 = Logger.logObject.getter(v78);
  v80 = static os_log_type_t.default.getter(v79);
  v81 = os_log_type_enabled(v79, v80);
  v82 = (uint64_t)v93;
  if (v81)
  {
    v83 = swift_slowAlloc(18, -1);
    v84 = swift_slowAlloc(32, -1);
    v95[0] = v84;
    *(_DWORD *)v83 = 136446466;
    swift_bridgeObjectRetain(v49);
    v96 = sub_100172BEC(v82, (unint64_t)v49, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v83 + 4, v83 + 12);
    swift_bridgeObjectRelease_n(v49, 3);
    *(_WORD *)(v83 + 12) = 1026;
    LODWORD(v96) = v77 != 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, (char *)&v96 + 4, v83 + 14, v83 + 18);
    _os_log_impl((void *)&_mh_execute_header, v79, v80, "offer command: offerKind: '%{public}s', first offer: '%{BOOL,public}d'", (uint8_t *)v83, 0x12u);
    swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1, -1);
    swift_slowDealloc(v83, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v49, 2);
  }
  v85 = type metadata accessor for PreventSuspensionAssertion();
  swift_allocObject(v85, 32, 7);
  v86 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, 0xD000000000000017, 0x800000010026B340);
  LOBYTE(v95[0]) = v77 != 1;
  v95[1] = v86;
  PassthroughSubject.send(_:)(v95);
  swift_release(v86);
  return 1;
}

uint64_t sub_10013BBDC(char a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  _BYTE v11[12];

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67240192;
    v10 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, v11, v6 + 4, v6 + 8);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "handleMessagingRequest(bringForeground = %{BOOL,public}d)", v6, 8u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = type metadata accessor for PreventSuspensionAssertion();
  swift_allocObject(v7, 32, 7);
  v8 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, 0xD00000000000001BLL, 0x800000010026B320);
  LOBYTE(v10) = 0;
  *(_QWORD *)&v11[4] = v8;
  PassthroughSubject.send(_:)(&v10);
  swift_release(v8);
  return 1;
}

uint64_t sub_10013BD64(char a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  _BYTE v11[12];

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67240192;
    v10 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, v11, v6 + 4, v6 + 8);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "handleFindMyRequest(bringForeground = %{BOOL,public}d)", v6, 8u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = type metadata accessor for PreventSuspensionAssertion();
  swift_allocObject(v7, 32, 7);
  v8 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, 0xD000000000000018, 0x800000010026B300);
  LOBYTE(v10) = 0;
  *(_QWORD *)&v11[4] = v8;
  PassthroughSubject.send(_:)(&v10);
  swift_release(v8);
  return 1;
}

uint64_t sub_10013BEE8(char a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16[2];

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v16[0] = v7;
    v8.n128_u64[0] = 136446210;
    *(_DWORD *)v6 = 136446210;
    LOBYTE(v15) = a1;
    v9 = String.init<A>(describing:)(&v15, &type metadata for StewieAppId, v8);
    v11 = v10;
    v15 = sub_100172BEC(v9, v10, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, v16, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "handleTryOut(stewieAppId = %{public}s)", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  v12 = type metadata accessor for PreventSuspensionAssertion();
  swift_allocObject(v12, 32, 7);
  v13 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, 0xD00000000000001DLL, 0x800000010026B2E0);
  LOBYTE(v16[0]) = a1;
  BYTE1(v16[0]) = 1;
  v16[1] = v13;
  PassthroughSubject.send(_:)(v16);
  swift_release(v13);
  return 1;
}

uint64_t sub_10013C0EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t (*v32)(char *, unint64_t, uint64_t, __n128);
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  Swift::Int v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint8_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[2];

  v2 = v1;
  v4 = type metadata accessor for URLQueryItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_1003216C8);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v13 = type metadata accessor for Logger(0);
  sub_10000D744(v13, (uint64_t)qword_10033FD18);
  v15 = swift_bridgeObjectRetain_n(a1, 2, v14);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  v18 = os_log_type_enabled(v16, v17);
  v54 = v12;
  if (v18)
  {
    v19 = swift_slowAlloc(12, -1);
    v55 = v2;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v56 = a1;
    v57[0] = v21;
    *(_DWORD *)v20 = 136446210;
    v53 = v20 + 4;
    swift_bridgeObjectRetain(a1);
    v22 = sub_100003DB8(&qword_1003216D0);
    v24 = String.init<A>(describing:)(&v56, v22, v23);
    v26 = v25;
    v56 = sub_100172BEC(v24, v25, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v53, v20 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "handleOpen(%{public}s)", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    v27 = v20;
    v2 = v55;
    swift_slowDealloc(v27, -1, -1);

    if (!a1)
      goto LABEL_21;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    if (!a1)
      goto LABEL_21;
  }
  v28 = *(_QWORD *)(a1 + 16);
  if (v28)
  {
    v55 = v2;
    v29 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v30 = *(_QWORD *)(v5 + 72);
    v31 = (uint8_t *)a1;
    v32 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16);
    v53 = v31;
    v33 = swift_bridgeObjectRetain(v31);
    while (1)
    {
      v34 = v32(v8, v29, v4, v33);
      v35 = URLQueryItem.name.getter(v34);
      v37 = v36;
      if (v35 == 0x6574736575716572 && v36 == 0xE900000000000072)
        break;
      v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, 0x6574736575716572, 0xE900000000000072, 0);
      v39 = swift_bridgeObjectRelease(v37);
      if ((v38 & 1) != 0)
        goto LABEL_17;
      (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v8, v4, v39);
      v29 += v30;
      if (!--v28)
      {
        v40 = 1;
        a1 = (uint64_t)v53;
        goto LABEL_15;
      }
    }
    v39 = swift_bridgeObjectRelease(0xE900000000000072);
LABEL_17:
    v41 = (uint64_t)v54;
    (*(void (**)(char *, char *, uint64_t, __n128))(v5 + 32))(v54, v8, v4, v39);
    v40 = 0;
    a1 = (uint64_t)v53;
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    v40 = 1;
LABEL_15:
    v41 = (uint64_t)v54;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v41, v40, 1, v4);
  v42 = swift_bridgeObjectRelease(a1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v5 + 48))(v41, 1, v4, v42) == 1)
  {
    sub_100007FF0(v41, &qword_1003216C8);
  }
  else
  {
    v43 = URLQueryItem.value.getter();
    v45 = v44;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v41, v4);
    if (v45)
      goto LABEL_22;
  }
LABEL_21:
  swift_bridgeObjectRelease(0);
  v43 = 0;
  v45 = (void *)0xE000000000000000;
LABEL_22:
  v46._countAndFlagsBits = v43;
  v46._object = v45;
  v47 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002E0368, v46);
  swift_bridgeObjectRelease(v45);
  if (v47 == 1)
    v48 = 1;
  else
    v48 = 2;
  if (v47)
    v49 = v48;
  else
    v49 = 0;
  v50 = type metadata accessor for PreventSuspensionAssertion();
  swift_allocObject(v50, 32, 7);
  v51 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, 0x69737365636F7250, 0xEF6E65704F20676ELL);
  LOBYTE(v57[0]) = 1;
  BYTE1(v57[0]) = v49;
  v57[1] = v51;
  PassthroughSubject.send(_:)(v57);
  swift_release(v51);
  return 1;
}

_QWORD *sub_10013C57C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  return v0;
}

uint64_t sub_10013C5D0()
{
  uint64_t v0;

  sub_10013C57C();
  return swift_deallocClassInstance(v0, 80, 7);
}

_QWORD *sub_10013C5F0()
{
  _QWORD *v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  __n128 v16;

  v1 = sub_100003DB8(&qword_1003216E8);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v0[2] = PassthroughSubject.init()(v2);
  v3 = sub_100003DB8(&qword_1003216F0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v0[3] = PassthroughSubject.init()(v4);
  v5 = sub_100003DB8(&qword_1003216F8);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v0[4] = PassthroughSubject.init()(v6);
  v7 = sub_100003DB8(&qword_100321700);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v0[5] = PassthroughSubject.init()(v8);
  v9 = sub_100003DB8(&qword_100321708);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v0[6] = PassthroughSubject.init()(v10);
  v11 = sub_100003DB8(&qword_100321710);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v0[7] = PassthroughSubject.init()(v12);
  v13 = sub_100003DB8(&qword_100321718);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v0[8] = PassthroughSubject.init()(v14);
  v15 = sub_100003DB8(&qword_100321720);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v0[9] = PassthroughSubject.init()(v16);
  return v0;
}

unint64_t sub_10013C730(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002E0068, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

unint64_t _s8SOSBuddy20RequestCommandReasonO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002E0100, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

unint64_t _s8SOSBuddy24RequestCommandEntryPointO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002E0210, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t sub_10013C80C()
{
  unint64_t result;

  result = qword_100321558;
  if (!qword_100321558)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RequestCommandReason, &type metadata for RequestCommandReason);
    atomic_store(result, (unint64_t *)&qword_100321558);
  }
  return result;
}

unint64_t sub_10013C854()
{
  unint64_t result;

  result = qword_100321560;
  if (!qword_100321560)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RequestCommandEntryPoint, &type metadata for RequestCommandEntryPoint);
    atomic_store(result, (unint64_t *)&qword_100321560);
  }
  return result;
}

unint64_t sub_10013C89C()
{
  unint64_t result;

  result = qword_100321568;
  if (!qword_100321568)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RequestCommandFromService, &type metadata for RequestCommandFromService);
    atomic_store(result, (unint64_t *)&qword_100321568);
  }
  return result;
}

unint64_t sub_10013C8E4()
{
  unint64_t result;

  result = qword_100321570;
  if (!qword_100321570)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RequestCommandAction, &type metadata for RequestCommandAction);
    atomic_store(result, (unint64_t *)&qword_100321570);
  }
  return result;
}

unint64_t sub_10013C92C()
{
  unint64_t result;

  result = qword_100321578;
  if (!qword_100321578)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ExitCommandReason, &type metadata for ExitCommandReason);
    atomic_store(result, (unint64_t *)&qword_100321578);
  }
  return result;
}

unint64_t sub_10013C974()
{
  unint64_t result;

  result = qword_100321580;
  if (!qword_100321580)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenCommandRequester, &type metadata for OpenCommandRequester);
    atomic_store(result, (unint64_t *)&qword_100321580);
  }
  return result;
}

unint64_t sub_10013C9BC()
{
  unint64_t result;

  result = qword_100321588;
  if (!qword_100321588)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AlertCommandKind, &type metadata for AlertCommandKind);
    atomic_store(result, (unint64_t *)&qword_100321588);
  }
  return result;
}

unint64_t sub_10013CA04()
{
  unint64_t result;

  result = qword_100321590;
  if (!qword_100321590)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OfferCommandKind, &type metadata for OfferCommandKind);
    atomic_store(result, (unint64_t *)&qword_100321590);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RequestCommandReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_10013CA94 + 4 * byte_100257CD5[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_10013CAC8 + 4 * byte_100257CD0[v4]))();
}

uint64_t sub_10013CAC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013CAD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013CAD8);
  return result;
}

uint64_t sub_10013CAE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10013CAECLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_10013CAF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013CAF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RequestCommandReason()
{
  return &type metadata for RequestCommandReason;
}

uint64_t storeEnumTagSinglePayload for RequestCommandEntryPoint(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10013CB60 + 4 * byte_100257CDF[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10013CB94 + 4 * byte_100257CDA[v4]))();
}

uint64_t sub_10013CB94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013CB9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013CBA4);
  return result;
}

uint64_t sub_10013CBB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10013CBB8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10013CBBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013CBC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RequestCommandEntryPoint()
{
  return &type metadata for RequestCommandEntryPoint;
}

ValueMetadata *type metadata accessor for RequestCommandFromService()
{
  return &type metadata for RequestCommandFromService;
}

ValueMetadata *type metadata accessor for RequestCommandAction()
{
  return &type metadata for RequestCommandAction;
}

ValueMetadata *type metadata accessor for ExitCommandReason()
{
  return &type metadata for ExitCommandReason;
}

ValueMetadata *type metadata accessor for OpenCommandRequester()
{
  return &type metadata for OpenCommandRequester;
}

uint64_t _s8SOSBuddy20RequestCommandActionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10013CC74 + 4 * byte_100257CE9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10013CCA8 + 4 * byte_100257CE4[v4]))();
}

uint64_t sub_10013CCA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013CCB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013CCB8);
  return result;
}

uint64_t sub_10013CCC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10013CCCCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10013CCD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013CCD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AlertCommandKind()
{
  return &type metadata for AlertCommandKind;
}

uint64_t _s8SOSBuddy16OfferCommandKindOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10013CD34 + 4 * byte_100257CEE[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10013CD54 + 4 * byte_100257CF3[v4]))();
}

_BYTE *sub_10013CD34(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10013CD54(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10013CD5C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10013CD64(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10013CD6C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10013CD74(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for OfferCommandKind()
{
  return &type metadata for OfferCommandKind;
}

uint64_t type metadata accessor for DeepLinkHandler()
{
  return objc_opt_self(_TtC8SOSBuddy15DeepLinkHandler);
}

uint64_t assignWithCopy for DeepLinkHandler.OfferTryOutRequestContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for DeepLinkHandler.OfferTryOutRequestContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v3);
  return a1;
}

ValueMetadata *type metadata accessor for DeepLinkHandler.OpenCommandContext()
{
  return &type metadata for DeepLinkHandler.OpenCommandContext;
}

uint64_t _s8SOSBuddy15DeepLinkHandlerC25OfferTryOutRequestContextVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_retain(v3);
  return a1;
}

ValueMetadata *type metadata accessor for DeepLinkHandler.OfferTryOutRequestContext()
{
  return &type metadata for DeepLinkHandler.OfferTryOutRequestContext;
}

ValueMetadata *type metadata accessor for DeepLinkHandler.FindMyRequestContext()
{
  return &type metadata for DeepLinkHandler.FindMyRequestContext;
}

ValueMetadata *type metadata accessor for DeepLinkHandler.MessagingRequestContext()
{
  return &type metadata for DeepLinkHandler.MessagingRequestContext;
}

ValueMetadata *type metadata accessor for DeepLinkHandler.OfferRequestContext()
{
  return &type metadata for DeepLinkHandler.OfferRequestContext;
}

uint64_t destroy for DeepLinkHandler.AlertRequestContext(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for DeepLinkHandler.AlertRequestContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for DeepLinkHandler.AlertRequestContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  swift_retain(v5);
  swift_release(v6);
  return a1;
}

uint64_t assignWithTake for DeepLinkHandler.AlertRequestContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v3);
  return a1;
}

ValueMetadata *type metadata accessor for DeepLinkHandler.AlertRequestContext()
{
  return &type metadata for DeepLinkHandler.AlertRequestContext;
}

uint64_t destroy for DeepLinkHandler.RoadsideAssistanceRequestContext(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 48));
}

uint64_t initializeWithCopy for DeepLinkHandler.RoadsideAssistanceRequestContext(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for DeepLinkHandler.RoadsideAssistanceRequestContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  swift_retain(v5);
  swift_release(v6);
  return a1;
}

uint64_t assignWithTake for DeepLinkHandler.RoadsideAssistanceRequestContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeepLinkHandler.RoadsideAssistanceRequestContext(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DeepLinkHandler.RoadsideAssistanceRequestContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeepLinkHandler.RoadsideAssistanceRequestContext()
{
  return &type metadata for DeepLinkHandler.RoadsideAssistanceRequestContext;
}

uint64_t initializeWithCopy for DeepLinkHandler.EmergencyRequestContext(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for DeepLinkHandler.EmergencyRequestContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  swift_retain(v4);
  swift_release(v5);
  return a1;
}

uint64_t assignWithTake for DeepLinkHandler.EmergencyRequestContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for OpeningMessagesButtonView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OpeningMessagesButtonView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeepLinkHandler.EmergencyRequestContext()
{
  return &type metadata for DeepLinkHandler.EmergencyRequestContext;
}

BOOL sub_10013D3B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, unint64_t, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  void *v39;
  void *v40;
  Swift::String v41;
  Swift::Int v42;
  uint8_t *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;

  v2 = type metadata accessor for URLQueryItem(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_1003216C8);
  __chkstk_darwin(v7, v8);
  v45 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v10 = type metadata accessor for Logger(0);
  sub_10000D744(v10, (uint64_t)qword_10033FD18);
  v12 = swift_bridgeObjectRetain_n(a1, 2, v11);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v46 = a1;
    v47 = v16;
    *(_DWORD *)v15 = 136446210;
    v44 = v15 + 4;
    swift_bridgeObjectRetain(a1);
    v17 = sub_100003DB8(&qword_1003216D0);
    v19 = String.init<A>(describing:)(&v46, v17, v18);
    v20 = a1;
    v22 = v21;
    v46 = sub_100172BEC(v19, v21, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v44, v15 + 12);
    swift_bridgeObjectRelease_n(v20, 2);
    v23 = v22;
    a1 = v20;
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "handleExit(%{public}s)", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    if (!v20)
      goto LABEL_21;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    if (!a1)
    {
LABEL_21:
      swift_bridgeObjectRelease(0);
      v38 = 0;
      v40 = (void *)0xE000000000000000;
      goto LABEL_22;
    }
  }
  v24 = *(_QWORD *)(a1 + 16);
  if (v24)
  {
    v25 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v26 = *(_QWORD *)(v3 + 72);
    v27 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v3 + 16);
    v44 = (uint8_t *)a1;
    v28 = swift_bridgeObjectRetain(a1);
    while (1)
    {
      v29 = v27(v6, v25, v2, v28);
      v30 = URLQueryItem.name.getter(v29);
      v32 = v31;
      if (v30 == 0x6E6F73616572 && v31 == 0xE600000000000000)
        break;
      v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, 0x6E6F73616572, 0xE600000000000000, 0);
      v34 = swift_bridgeObjectRelease(v32);
      if ((v33 & 1) != 0)
        goto LABEL_17;
      (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v6, v2, v34);
      v25 += v26;
      if (!--v24)
      {
        v35 = 1;
        a1 = (uint64_t)v44;
        goto LABEL_15;
      }
    }
    v34 = swift_bridgeObjectRelease(0xE600000000000000);
LABEL_17:
    v36 = (uint64_t)v45;
    (*(void (**)(char *, char *, uint64_t, __n128))(v3 + 32))(v45, v6, v2, v34);
    v35 = 0;
    a1 = (uint64_t)v44;
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    v35 = 1;
LABEL_15:
    v36 = (uint64_t)v45;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v36, v35, 1, v2);
  v37 = swift_bridgeObjectRelease(a1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v3 + 48))(v36, 1, v2, v37) == 1)
  {
    sub_100007FF0(v36, &qword_1003216C8);
    goto LABEL_21;
  }
  v38 = URLQueryItem.value.getter();
  v40 = v39;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v36, v2);
  if (!v40)
    goto LABEL_21;
LABEL_22:
  v41._countAndFlagsBits = v38;
  v41._object = v40;
  v42 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002E0330, v41);
  swift_bridgeObjectRelease(v40);
  return v42 == 0;
}

unint64_t sub_10013D794()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003216E0;
  if (!qword_1003216E0)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_1003216E0);
  }
  return result;
}

uint64_t sub_10013D7E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v3 = sub_100003DB8(&qword_1003180C8);
  v5 = __chkstk_darwin(v3, v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = __chkstk_darwin(v5, v8);
  v11 = &v21[-v10 - 8];
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_BYTE *)(a1 + 104);
  v14 = *(_OWORD *)(a1 + 48);
  v15 = *(_OWORD *)(a1 + 64);
  v16 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 40) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 56) = v14;
  *(_OWORD *)(v1 + 72) = v15;
  *(_OWORD *)(v1 + 88) = v16;
  *(_QWORD *)(v1 + 104) = v12;
  *(_BYTE *)(v1 + 112) = v13;
  static DispatchTime.now()(v9);
  v17 = type metadata accessor for DispatchTime(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v11, 0, 1, v17);
  sub_10013E3D4((uint64_t)v11, (uint64_t)v7);
  v18 = v1 + OBJC_IVAR____TtC8SOSBuddy24DeviceOrientationTracker_currentDeviceOrientationAt;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy24DeviceOrientationTracker_currentDeviceOrientationAt, v21, 33, 0);
  sub_100025C08((uint64_t)v7, v18);
  swift_endAccess(v21);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8SOSBuddy24DeviceOrientationTracker_currentIsStationary) = 0;
  sub_10013D914();
  return sub_10013DEC0(0xEA60uLL);
}

void sub_10013D914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  int v8;
  double v9;
  uint64_t v10;
  void *v11;
  id v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  id v19;
  Class isa;
  double v21;
  uint64_t Strong;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  NSObject *v30;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v0 + 112) & 1) != 0)
    return;
  v7 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8SOSBuddy24DeviceOrientationTracker_currentTargetInGreenZone);
  if (v7 == 2)
    return;
  v8 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8SOSBuddy24DeviceOrientationTracker_currentIsStationary);
  if (v8 == 2)
    return;
  v9 = *(double *)(v0 + 40);
  v10 = OBJC_IVAR____TtC8SOSBuddy24DeviceOrientationTracker_lastDataSent;
  v11 = *(void **)(v0 + OBJC_IVAR____TtC8SOSBuddy24DeviceOrientationTracker_lastDataSent);
  if (v11)
  {
    v12 = v11;
    if (((v7 ^ objc_msgSend(v12, "targetLocked")) & 1) != 0)
    {

    }
    else
    {
      v13 = objc_msgSend(v12, "isDeviceStationary");

      if (((v8 ^ v13) & 1) == 0)
        return;
    }
  }
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    if (qword_100315848 != -1)
      swift_once(&qword_100315848, sub_1000D9674);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10000D744(v14, (uint64_t)qword_10033FD90);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Device orientation data changed, reporting", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    v19 = objc_msgSend(objc_allocWithZone((Class)CTStewieDeviceOrientationData), "init");
    static Date.now.getter(v19);
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    objc_msgSend(v19, "setTimestamp:", isa);

    objc_msgSend(v19, "setTargetLocked:", v7 & 1);
    objc_msgSend(v19, "setIsDeviceStationary:", v8 & 1);
    v21 = v9 * 57.2957795;
    if ((~COERCE__INT64(v9 * 57.2957795) & 0x7FF0000000000000) != 0)
    {
      if (v21 > -9.22337204e18)
      {
        if (v21 >= 9.22337204e18)
        {
          __break(1u);
        }
        else
        {
          objc_msgSend(v19, "setX:", (uint64_t)v21);
          Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
          if (Strong)
          {
            v23 = (void *)Strong;
            sub_10021881C(v19);

          }
          v24 = *(void **)(v1 + v10);
          *(_QWORD *)(v1 + v10) = v19;

        }
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_26;
  }
  if (qword_100315848 != -1)
LABEL_26:
    swift_once(&qword_100315848, sub_1000D9674);
  v25 = type metadata accessor for Logger(0);
  v26 = sub_10000D744(v25, (uint64_t)qword_10033FD90);
  v30 = Logger.logObject.getter(v26);
  v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v27, "Device orientation data changed, but tracking is off, reporting skipped", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

}

unint64_t sub_10013DCA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(char *, uint64_t);
  _BYTE v26[24];

  v1 = v0;
  v2 = sub_100003DB8(&qword_1003180C8);
  __chkstk_darwin(v2, v3);
  v5 = &v26[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = &v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v9, v12);
  v14 = &v26[-v13 - 8];
  v15 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  result = swift_release(v15);
  if ((*(_BYTE *)(v1 + 112) & 1) == 0)
  {
    v17 = v1 + OBJC_IVAR____TtC8SOSBuddy24DeviceOrientationTracker_currentDeviceOrientationAt;
    swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy24DeviceOrientationTracker_currentDeviceOrientationAt, v26, 0, 0);
    sub_10013E2E0(v17, (uint64_t)v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
      return sub_1001241F4((uint64_t)v5);
    v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v14, v5, v6);
    v19 = static DispatchTime.now()(v18);
    v20 = DispatchTime.uptimeNanoseconds.getter(v19);
    v21 = DispatchTime.uptimeNanoseconds.getter(v20);
    if (v21 >= v20)
    {
      v24 = *(void (**)(char *, uint64_t))(v7 + 8);
      v24(v11, v6);
      v23 = 0;
    }
    else
    {
      v22 = DispatchTime.uptimeNanoseconds.getter(v21);
      result = DispatchTime.uptimeNanoseconds.getter(v22);
      v23 = v22 - result;
      if (v22 < result)
      {
        __break(1u);
        return result;
      }
      v24 = *(void (**)(char *, uint64_t))(v7 + 8);
      v24(v11, v6);
      if (v23 > 0xDF84757FFLL)
      {
        *(_BYTE *)(v1 + OBJC_IVAR____TtC8SOSBuddy24DeviceOrientationTracker_currentIsStationary) = 1;
LABEL_10:
        sub_10013D914();
        return ((uint64_t (*)(char *, uint64_t))v24)(v14, v6);
      }
    }
    *(_BYTE *)(v1 + OBJC_IVAR____TtC8SOSBuddy24DeviceOrientationTracker_currentIsStationary) = 0;
    sub_10013DEC0(60000 - v23 / 0xF4240);
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_10013DEC0(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v13;
  char v14;
  uint64_t result;
  double v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = v1;
  v4 = sub_100003DB8(&qword_10031B208);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v12 = static OS_dispatch_queue.main.getter(v13);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = _dispatchPreconditionTest(_:)(v12);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v14 & 1) != 0)
  {
    if (!*(_QWORD *)(v2 + 32))
    {
      v16 = (double)a1 / 1000.0;
      v17 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
      v18 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v7, 1, 1, v18);
      v19 = type metadata accessor for NSTimer.TimerPublisher(0);
      swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
      v20 = NSTimer.TimerPublisher.init(interval:tolerance:runLoop:mode:options:)(0, 1, v17, NSDefaultRunLoopMode, v7, v16);
      v30 = v20;
      v21 = sub_100074700();
      v22 = ConnectablePublisher.autoconnect()(v19, v21);
      swift_release(v20);
      v30 = v22;
      v23 = swift_allocObject(&unk_1002F2960, 24, 7);
      swift_weakInit(v23 + 16);
      v24 = sub_100003DB8(&qword_10031B220);
      v25 = sub_100074774();
      v27 = Publisher<>.sink(receiveValue:)(sub_10013E2D8, v23, v24, v25, v26);
      swift_release(v23);
      swift_release(v30);
      v28 = *(_QWORD *)(v2 + 32);
      *(_QWORD *)(v2 + 32) = v27;
      return swift_release(v28);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10013E11C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_10013DCA8();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_10013E170()
{
  _QWORD *v0;

  swift_unknownObjectWeakDestroy(v0 + 2);
  swift_release(v0[4]);
  sub_1001241F4((uint64_t)v0 + OBJC_IVAR____TtC8SOSBuddy24DeviceOrientationTracker_currentDeviceOrientationAt);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10013E1C0()
{
  return type metadata accessor for DeviceOrientationTracker(0);
}

uint64_t type metadata accessor for DeviceOrientationTracker(uint64_t a1)
{
  uint64_t result;

  result = qword_100321778;
  if (!qword_100321778)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeviceOrientationTracker);
  return result;
}

void sub_10013E204(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = "\b";
  v4[1] = &unk_1002584D8;
  v4[2] = &unk_1002584F0;
  v4[3] = &unk_100258508;
  sub_100025B34(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = &unk_100258520;
    v4[6] = &unk_100258520;
    v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[8] = &unk_1002584F0;
    swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
  }
}

uint64_t sub_10013E2B4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10013E2D8(uint64_t a1)
{
  uint64_t v1;

  return sub_10013E11C(a1, v1);
}

uint64_t sub_10013E2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_1003180C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013E328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectWeakInit(v0 + 16, 0);
  *(_BYTE *)(v0 + 24) = 1;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_BYTE *)(v0 + 112) = 1;
  v1 = v0 + OBJC_IVAR____TtC8SOSBuddy24DeviceOrientationTracker_currentDeviceOrientationAt;
  v2 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC8SOSBuddy24DeviceOrientationTracker_currentTargetInGreenZone) = 2;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC8SOSBuddy24DeviceOrientationTracker_currentIsStationary) = 2;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC8SOSBuddy24DeviceOrientationTracker_kMsOfNoMovementToConsiderStationary) = 60000;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC8SOSBuddy24DeviceOrientationTracker_lastDataSent) = 0;
  return v0;
}

uint64_t sub_10013E3D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_1003180C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for BuiltInSwitchToEmergencyFooterView()
{
  return &type metadata for BuiltInSwitchToEmergencyFooterView;
}

uint64_t sub_10013E42C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029BB04, 1);
}

uint64_t sub_10013E43C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];
  char v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  __int128 v27;
  __int128 v28;
  char v29;
  _BYTE v30[128];

  if (a1)
  {
    if (*(_QWORD *)(a1 + 64)
      && (v4 = *(_WORD *)(a1 + 120), sub_100067058(0, *(_QWORD *)(a1 + 88)))
      && ((v4 & 0xFF00) != 0x200 ? (v5 = (v4 & 0x100) == 0) : (v5 = 1), !v5))
    {
      v6 = type metadata accessor for AppEvents();
      v7 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
      v8 = EnvironmentObject.init()(v6, v7);
      v10 = v9;
      v11 = type metadata accessor for UIMetrics();
      v12 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
      v13 = EnvironmentObject.init()(v11, v12);
      v15 = v14;
      v16 = static Edge.Set.top.getter(v13);
      v21[0] = v8;
      v21[1] = v10;
      v21[2] = v13;
      v21[3] = v15;
      v22 = v16;
      v23 = 0u;
      v24 = 0u;
      v25 = 1;
      v26 = static Edge.Set.bottom.getter(v16);
      v27 = 0u;
      v28 = 0u;
      v29 = 1;
      ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(v21);
    }
    else
    {
      sub_10013E5DC((uint64_t)v21);
    }
    sub_10013E60C((uint64_t)v21, (uint64_t)v30);
    return sub_10013E60C((uint64_t)v30, a3);
  }
  else
  {
    v19 = type metadata accessor for StewieModel();
    v20 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v19, v20);
    __break(1u);
  }
  return result;
}

uint64_t sub_10013E5D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10013E43C(*v1, v1[1], a1);
}

double sub_10013E5DC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_BYTE *)(a1 + 120) = 0;
  return result;
}

uint64_t sub_10013E60C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100321940);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10013E658()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100321948;
  if (!qword_100321948)
  {
    v1 = sub_100007FAC(&qword_100321940);
    sub_10013E6F0(&qword_100321950, &qword_100321958, (void (*)(void))sub_10013E6D4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100321948);
  }
  return result;
}

uint64_t sub_10013E6D4()
{
  return sub_10013E6F0(&qword_100321960, &qword_100321968, (void (*)(void))sub_10013E75C);
}

uint64_t sub_10013E6F0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007FAC(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10013E75C()
{
  unint64_t result;

  result = qword_100321970;
  if (!qword_100321970)
  {
    result = swift_getWitnessTable("Ѯ\t", &type metadata for CallEmergencyServicesButtonView);
    atomic_store(result, (unint64_t *)&qword_100321970);
  }
  return result;
}

void sub_10013E7A0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[3];
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100003DB8(&qword_100321AA8);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v28)
      goto LABEL_37;
    v14 = *(_QWORD *)(v29 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v28)
        goto LABEL_37;
      v14 = *(_QWORD *)(v29 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v28)
          goto LABEL_37;
        v14 = *(_QWORD *)(v29 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v28)
            goto LABEL_37;
          v14 = *(_QWORD *)(v29 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    sub_10008CAC4(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v41);
    *(_QWORD *)&v40 = v19;
    *((_QWORD *)&v40 + 1) = v18;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(_QWORD *)&v38[0] = v19;
    *((_QWORD *)&v38[0] + 1) = v18;
    swift_bridgeObjectRetain(v18);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_10003E704(v39, v33);
    v34 = v30;
    v35 = v31;
    v36 = v32;
    sub_10003E704(v33, v37);
    v30 = v34;
    v31 = v35;
    v32 = v36;
    sub_10003E704(v37, v38);
    sub_10003E704(v38, &v34);
    v20 = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v9 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v9 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    v10 = v3[6] + 40 * v9;
    *(_OWORD *)v10 = v30;
    *(_OWORD *)(v10 + 16) = v31;
    *(_QWORD *)(v10 + 32) = v32;
    sub_10003E704(&v34, (_OWORD *)(v3[7] + 32 * v9));
    ++v3[2];
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_1000647F4(a1);
    return;
  }
  v14 = *(_QWORD *)(v29 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v28)
      goto LABEL_37;
    v14 = *(_QWORD *)(v29 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
}

void sub_10013EB64(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _OWORD v35[4];
  _OWORD v36[2];
  _OWORD v37[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100003DB8(&qword_10032A730);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v32 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v31 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  v33 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v33 << 6);
      goto LABEL_28;
    }
    v11 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v31)
      goto LABEL_37;
    v12 = *(_QWORD *)(v32 + 8 * v11);
    v13 = v33 + 1;
    if (!v12)
    {
      v13 = v33 + 2;
      if (v33 + 2 >= v31)
        goto LABEL_37;
      v12 = *(_QWORD *)(v32 + 8 * v13);
      if (!v12)
      {
        v13 = v33 + 3;
        if (v33 + 3 >= v31)
          goto LABEL_37;
        v12 = *(_QWORD *)(v32 + 8 * v13);
        if (!v12)
        {
          v13 = v33 + 4;
          if (v33 + 4 >= v31)
            goto LABEL_37;
          v12 = *(_QWORD *)(v32 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v33 = v13;
LABEL_28:
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10);
    *(_QWORD *)&v37[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
    *(_QWORD *)&v36[0] = v15;
    v16 = *(id *)&v37[0];
    swift_bridgeObjectRetain(v15);
    v17 = sub_100003DB8(&qword_100321AD0);
    swift_dynamicCast((char *)v37 + 8, v36, v17, (char *)&type metadata for Any + 8, 7);
    v18 = *(_QWORD *)&v37[0];
    sub_10003E704((_OWORD *)((char *)v37 + 8), v35);
    sub_10003E704(v35, v37);
    sub_10003E704(v37, v36);
    v19 = v3[5];
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v22 = v21;
    Hasher.init(_seed:)(&v34, v19);
    String.hash(into:)(&v34, v20, v22);
    v23 = Hasher._finalize()();
    swift_bridgeObjectRelease(v22);
    v24 = -1 << *((_BYTE *)v3 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)&v7[8 * (v25 >> 6)]) != 0)
    {
      v8 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)&v7[8 * (v25 >> 6)])) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)&v7[8 * v26];
      }
      while (v30 == -1);
      v8 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)&v7[(v8 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v8;
    *(_QWORD *)(v3[6] + 8 * v8) = v18;
    sub_10003E704(v36, (_OWORD *)(v3[7] + 32 * v8));
    ++v3[2];
  }
  v14 = v33 + 5;
  if (v33 + 5 >= v31)
  {
LABEL_37:
    swift_release(v3);
    sub_1000647F4(a1);
    return;
  }
  v12 = *(_QWORD *)(v32 + 8 * v14);
  if (v12)
  {
    v13 = v33 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v31)
      goto LABEL_37;
    v12 = *(_QWORD *)(v32 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
}

uint64_t sub_10013EF08(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  id v7;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (a2)
    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  else
    v6 = 0;
  swift_retain(v4);
  v7 = a3;
  v5(v6, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_10013EF9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  Swift::String v21;
  __n128 v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  _QWORD *v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;

  v1 = v0;
  v44 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v42 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44, v2);
  v43 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003DB8(&qword_100321AD8);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(_QWORD *)(v0 + 16) = PassthroughSubject.init()(v13);
  v14 = v0 + OBJC_IVAR____TtC8SOSBuddy13MessagesAgent__lastTransmissionProgress;
  v15 = type metadata accessor for TransmissionProgress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v17 = objc_msgSend(v16, "bundleIdentifier");

  if (v17)
  {
    v18 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

  }
  else
  {
    v20 = 0x8000000100260990;
    v18 = (_QWORD *)0xD000000000000012;
  }
  sub_10000D75C();
  v46 = v18;
  v47 = v20;
  swift_bridgeObjectRetain(v20);
  v21._countAndFlagsBits = 0x746E6567616D692ELL;
  v21._object = (void *)0xE800000000000000;
  String.append(_:)(v21);
  v22 = swift_bridgeObjectRelease(v20);
  v23 = v46;
  v24 = v47;
  static DispatchQoS.unspecified.getter(v22);
  v46 = _swiftEmptyArrayStorage;
  v25 = sub_1000052EC((unint64_t *)&unk_1003178B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v26 = sub_100003DB8((uint64_t *)&unk_100324AE0);
  v27 = sub_10000F138((unint64_t *)&unk_1003178C0, (uint64_t *)&unk_100324AE0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v26, v27, v4, v25);
  v28 = v43;
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v43, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v44);
  *(_QWORD *)(v1 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v23, v24, v11, v7, v28, 0);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v29 = type metadata accessor for Logger(0);
  sub_10000D744(v29, (uint64_t)qword_10033FD18);
  v31 = swift_retain_n(v1, v30);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = (_QWORD *)swift_slowAlloc(32, -1);
    v45 = v1;
    v46 = v35;
    *(_DWORD *)v34 = 136446210;
    v36 = type metadata accessor for MessagesAgent(0);
    v37 = swift_retain(v1);
    v38 = String.init<A>(describing:)(&v45, v36, v37);
    v40 = v39;
    v45 = sub_100172BEC(v38, v39, (uint64_t *)&v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v34 + 4, v34 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v40);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "[%{public}s] init", v34, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  return v1;
}

uint64_t sub_10013F3CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = swift_retain_n(v0, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v1;
    v16 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for MessagesAgent(0);
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v9, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] deinit", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  swift_release(*(_QWORD *)(v1 + 16));

  sub_100007FF0(v1 + OBJC_IVAR____TtC8SOSBuddy13MessagesAgent__lastTransmissionProgress, &qword_100316B68);
  return v1;
}

uint64_t sub_10013F5B4()
{
  uint64_t v0;

  sub_10013F3CC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10013F5D8()
{
  return type metadata accessor for MessagesAgent(0);
}

uint64_t type metadata accessor for MessagesAgent(uint64_t a1)
{
  uint64_t result;

  result = qword_1003219A8;
  if (!qword_1003219A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MessagesAgent);
  return result;
}

void sub_10013F61C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100142000(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

uint64_t sub_10013F6A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v15[24];

  v1 = v0;
  v2 = sub_100003DB8(&qword_100316B68);
  __chkstk_darwin(v2, v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_100315890 != -1)
    swift_once(&qword_100315890, sub_1000D97D4);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000D744(v6, (uint64_t)qword_10033FE68);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "MessagesAgent stop", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = type metadata accessor for TransmissionProgress(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v5, 1, 1, v11);
  v12 = v1 + OBJC_IVAR____TtC8SOSBuddy13MessagesAgent__lastTransmissionProgress;
  swift_beginAccess(v12, v15, 33, 0);
  sub_100145794((uint64_t)v5, v12);
  return swift_endAccess(v15);
}

void sub_10013F814(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  NSObject *oslog;
  uint64_t v20;
  uint64_t v21;

  if (qword_100315890 != -1)
    swift_once(&qword_100315890, sub_1000D97D4);
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FE68);
  swift_bridgeObjectRetain(a1);
  swift_errorRetain(a2);
  swift_bridgeObjectRetain(a1);
  v5 = swift_errorRetain(a2);
  oslog = Logger.logObject.getter(v5);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v20 = a1;
    v21 = v8;
    *(_DWORD *)v7 = 136446466;
    swift_bridgeObjectRetain(a1);
    v9 = sub_100003DB8(&qword_10031B3F8);
    v11 = String.init<A>(describing:)(&v20, v9, v10);
    v13 = v12;
    v20 = sub_100172BEC(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v7 + 12) = 2082;
    v20 = a2;
    swift_errorRetain(a2);
    v14 = sub_100003DB8(&qword_10031CF20);
    v16 = String.init<A>(describing:)(&v20, v14, v15);
    v18 = v17;
    v20 = sub_100172BEC(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Opening Messages result: %{public}s, %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(a1, 2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);

  }
}

uint64_t sub_10013FA74(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint8_t *v34;
  uint8_t *v35;
  unsigned int v36;
  __n128 v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  __n128 v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  char v91;
  NSObject *v92;
  os_log_type_t v93;
  _BOOL4 v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  unint64_t v135;
  uint64_t v136;
  void *v137;
  char *v138;
  __n128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  __n128 v151;
  unint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)();
  uint64_t v160;
  _QWORD *v161;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  _QWORD *v170;
  void (*v171)();
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  __int128 v180;
  uint64_t (*v181)(uint64_t);
  uint64_t v182;
  void (*v183)();
  _BOOL8 v184;
  char *v185;
  uint64_t v186;
  _OWORD v187[2];
  char v188[24];
  unint64_t v189;
  unint64_t v190[3];
  __int128 v191;

  v5 = v4;
  v174 = a4;
  v175 = a1;
  v176 = a2;
  v177 = type metadata accessor for DispatchWorkItemFlags(0);
  v173 = *(_QWORD **)(v177 - 8);
  __chkstk_darwin(v177, v7);
  v171 = (void (*)())((char *)&v163 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for DispatchQoS(0);
  v169 = *(_QWORD *)(v9 - 8);
  v170 = (_QWORD *)v9;
  __chkstk_darwin(v9, v10);
  v168 = (char *)&v163 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003DB8(&qword_100319D48);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v163 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = type metadata accessor for Locale.Language(0);
  v16 = *(_QWORD *)(v178 - 8);
  v18 = __chkstk_darwin(v178, v17);
  v20 = (char *)&v163 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  v23 = (char *)&v163 - v22;
  v24 = sub_100003DB8(&qword_100321AB0);
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v163 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315890 != -1)
    goto LABEL_53;
  while (1)
  {
    v28 = type metadata accessor for Logger(0);
    v29 = sub_10000D744(v28, (uint64_t)qword_10033FE68);
    swift_retain(a3);
    v167 = v29;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter();
    v33 = os_log_type_enabled(v31, v32);
    v172 = v5;
    v179 = a3;
    if (v33)
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v34 = 134349056;
      *(_QWORD *)&v180 = v175;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, (char *)&v180 + 8, v34 + 4, v34 + 12);
      swift_release(v179);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "startEmergencyThread - conversationId:%{public}llu", v34, 0xCu);
      v35 = v34;
      a3 = v179;
      swift_slowDealloc(v35, -1, -1);

    }
    else
    {

      swift_release(a3);
    }
    v36 = v176 & 0x100;
    v191 = xmmword_1002585C0;
    if (!a3)
    {
      v166 = 0;
      v45 = 1;
LABEL_28:
      v174 = v45;
      goto LABEL_29;
    }
    LODWORD(v174) = v176 & 0x100;
    v37 = swift_retain(a3);
    v38 = Locale.language.getter(v37);
    Locale.Language.languageCode.getter(v38);
    v39 = *(void (**)(char *, uint64_t))(v16 + 8);
    v39(v23, v178);
    v40 = type metadata accessor for Locale.LanguageCode(0);
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v27, 1, v40) == 1)
    {
      sub_100007FF0((uint64_t)v27, &qword_100321AB0);
      v43 = 0;
      v44 = 0;
    }
    else
    {
      v46 = Locale.LanguageCode.identifier.getter();
      v44 = v47;
      v48 = v40;
      v43 = v46;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v27, v48);
    }
    v49 = Locale.language.getter(v42);
    Locale.Language.region.getter(v49);
    v39(v20, v178);
    v50 = type metadata accessor for Locale.Region(0);
    v51 = *(_QWORD *)(v50 - 8);
    v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v51 + 48))(v15, 1, v50);
    v53 = v179;
    if (v52 == 1)
    {
      sub_100007FF0((uint64_t)v15, &qword_100319D48);
      v54 = 0;
      v55 = 0;
    }
    else
    {
      v54 = Locale.Region.identifier.getter();
      v55 = v56;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v15, v50);
    }
    swift_beginAccess(v53 + 6, v188, 0, 0);
    sub_100007CBC((uint64_t)(v53 + 10), (uint64_t)v187);
    v57 = v53[33];
    v58 = *(_QWORD *)(v57 + 88);
    v59 = *(_BYTE *)(v57 + 32);
    sub_10008CB00(v53 + 6, (uint64_t)&v180);
    v60 = sub_100200568(v58, v59, v43, v44, v54, v55, v187, (unint64_t)&v180);
    v61 = 0;
    v62 = v43;
    v63 = v60;
    v65 = v64;
    v178 = v62;
    sub_10008CB3C(&v180);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v187);
    sub_10000D730(v191, *((unint64_t *)&v191 + 1));
    *(_QWORD *)&v191 = v63;
    *((_QWORD *)&v191 + 1) = v65;
    sub_10000CC50(v63, v65);
    sub_10000CC50(v63, v65);
    swift_bridgeObjectRetain(v55);
    v66 = swift_bridgeObjectRetain(v44);
    v67 = Logger.logObject.getter(v66);
    v68 = static os_log_type_t.default.getter();
    v165 = v68;
    if (os_log_type_enabled(v67, v68))
    {
      v69 = swift_slowAlloc(32, -1);
      v166 = 0;
      v70 = v69;
      v164 = swift_slowAlloc(96, -1);
      *(_QWORD *)&v187[0] = v164;
      *(_DWORD *)v70 = 136381187;
      *(_QWORD *)&v180 = v63;
      *((_QWORD *)&v180 + 1) = v65;
      sub_10000CC50(v63, v65);
      v71 = sub_100003DB8(&qword_100321AC0);
      v73 = String.init<A>(describing:)(&v180, v71, v72);
      v75 = v74;
      *(_QWORD *)&v180 = sub_100172BEC(v73, v74, (uint64_t *)v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, (char *)&v180 + 8, v70 + 4, v70 + 12);
      swift_bridgeObjectRelease(v75);
      sub_10000CCCC(v63, v65);
      sub_10000CCCC(v63, v65);
      *(_WORD *)(v70 + 12) = 2082;
      *(_QWORD *)&v180 = v178;
      *((_QWORD *)&v180 + 1) = v44;
      swift_bridgeObjectRetain(v44);
      v76 = sub_100003DB8(&qword_100318260);
      v78 = String.init<A>(describing:)(&v180, v76, v77);
      v80 = v79;
      *(_QWORD *)&v180 = sub_100172BEC(v78, v79, (uint64_t *)v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, (char *)&v180 + 8, v70 + 14, v70 + 22);
      swift_bridgeObjectRelease_n(v44, 2);
      v81 = v80;
      v53 = v179;
      swift_bridgeObjectRelease(v81);
      *(_WORD *)(v70 + 22) = 2082;
      *(_QWORD *)&v180 = v54;
      *((_QWORD *)&v180 + 1) = v55;
      swift_bridgeObjectRetain(v55);
      v83 = String.init<A>(describing:)(&v180, v76, v82);
      v85 = v84;
      *(_QWORD *)&v180 = sub_100172BEC(v83, v84, (uint64_t *)v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, (char *)&v180 + 8, v70 + 24, v70 + 32);
      swift_bridgeObjectRelease_n(v55, 2);
      swift_bridgeObjectRelease(v85);
      _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v165, "startEmergencyThread - serializedQuestionnaire: %{private}s for language: %{public}s, country: %{public}s", (uint8_t *)v70, 0x20u);
      v86 = v164;
      swift_arrayDestroy(v164, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      v87 = v70;
      v61 = v166;
      swift_slowDealloc(v87, -1, -1);

    }
    else
    {
      sub_10000CCCC(v63, v65);
      sub_10000CCCC(v63, v65);

      swift_bridgeObjectRelease_n(v55, 2);
      v88 = swift_bridgeObjectRelease_n(v44, 2);
    }
    v89 = v53[8];
    if (*(_QWORD *)(v89 + 16))
    {
      v88 = sub_10017D294(0);
      v90 = 2;
      if ((v91 & 1) != 0)
      {
        sub_10008CAC4(*(_QWORD *)(v89 + 56) + 32 * v88, (uint64_t)&v180);
        v88 = swift_dynamicCast(v187, &v180, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
        if ((_DWORD)v88)
          v90 = LOBYTE(v187[0]);
        else
          v90 = 2;
      }
    }
    else
    {
      v90 = 2;
    }
    v92 = Logger.logObject.getter(v88);
    v93 = static os_log_type_t.default.getter();
    v94 = os_log_type_enabled(v92, v93);
    v166 = v61;
    if (v94)
    {
      v95 = (uint8_t *)swift_slowAlloc(12, -1);
      v96 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v180 = v96;
      *(_DWORD *)v95 = 136380675;
      LOBYTE(v187[0]) = v90;
      v97 = sub_100003DB8((uint64_t *)&unk_1003263F0);
      v99 = String.init<A>(describing:)(v187, v97, v98);
      v101 = v100;
      *(_QWORD *)&v187[0] = sub_100172BEC(v99, v100, (uint64_t *)&v180);
      v53 = v179;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v187, (char *)v187 + 8, v95 + 4, v95 + 12);
      swift_bridgeObjectRelease(v101);
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "startEmergencyThread - recorded notifyEmergencyContacts: %{private}s", v95, 0xCu);
      swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v96, -1, -1);
      swift_slowDealloc(v95, -1, -1);
    }

    swift_release(v53);
    v36 = v174;
    v174 = 1;
    if (v36 && v90 != 2)
    {
      v45 = 3;
      if (!v90)
        v45 = 1;
      goto LABEL_28;
    }
LABEL_29:
    v102 = sub_10022499C((uint64_t)&_swiftEmptyArrayStorage);
    v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieServiceTypeKey);
    v105 = v104;
    v182 = (uint64_t)&type metadata for Int;
    *(_QWORD *)&v180 = 1;
    sub_10003E704(&v180, v187);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v102);
    v190[0] = v102;
    sub_10020CAD4(v187, v103, v105, isUniquelyReferenced_nonNull_native);
    v107 = v190[0];
    swift_bridgeObjectRelease(v105);
    swift_bridgeObjectRelease(0x8000000000000000);
    v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieConversationIDKey);
    v110 = v109;
    v182 = (uint64_t)&type metadata for UInt64;
    *(_QWORD *)&v180 = v175;
    sub_10003E704(&v180, v187);
    v111 = swift_isUniquelyReferenced_nonNull_native(v107);
    v190[0] = v107;
    sub_10020CAD4(v187, v108, v110, v111);
    v112 = v190[0];
    swift_bridgeObjectRelease(v110);
    swift_bridgeObjectRelease(0x8000000000000000);
    v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieSummaryPresentationKey);
    v115 = v114;
    sub_100144238(v176);
    v117 = v116;
    v182 = sub_100003DB8(&qword_100321AB8);
    *(_QWORD *)&v180 = v117;
    sub_10003E704(&v180, v187);
    v118 = swift_isUniquelyReferenced_nonNull_native(v112);
    v190[0] = v112;
    sub_10020CAD4(v187, v113, v115, v118);
    v119 = v190[0];
    swift_bridgeObjectRelease(v115);
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_beginAccess(&v191, v190, 0, 0);
    v120 = *((_QWORD *)&v191 + 1);
    if (*((_QWORD *)&v191 + 1) >> 60 != 15)
    {
      v121 = v191;
      v122 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieSerializedQuestionnaireAnswersKey);
      v124 = v123;
      v182 = (uint64_t)&type metadata for Data;
      *(_QWORD *)&v180 = v121;
      *((_QWORD *)&v180 + 1) = v120;
      sub_10003E704(&v180, v187);
      sub_10000CC50(v121, v120);
      sub_10000CC50(v121, v120);
      v125 = swift_isUniquelyReferenced_nonNull_native(v119);
      v189 = v119;
      sub_10020CAD4(v187, v122, v124, v125);
      v119 = v189;
      swift_bridgeObjectRelease(v124);
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_10000D730(v121, v120);
    }
    v126 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieNotifyOptionKey);
    v128 = v127;
    v182 = (uint64_t)&type metadata for Int;
    *(_QWORD *)&v180 = v174;
    sub_10003E704(&v180, v187);
    v129 = swift_isUniquelyReferenced_nonNull_native(v119);
    v189 = v119;
    sub_10020CAD4(v187, v126, v128, v129);
    v130 = v189;
    swift_bridgeObjectRelease(v128);
    swift_bridgeObjectRelease(0x8000000000000000);
    v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieShareEEDKey);
    v133 = v132;
    v182 = (uint64_t)&type metadata for Bool;
    v167 = v36 >> 8;
    LOBYTE(v180) = BYTE1(v36);
    sub_10003E704(&v180, v187);
    v134 = swift_isUniquelyReferenced_nonNull_native(v130);
    v189 = v130;
    sub_10020CAD4(v187, v131, v133, v134);
    v135 = v189;
    swift_bridgeObjectRelease(v133);
    swift_bridgeObjectRelease(0x8000000000000000);
    v136 = swift_allocObject(&unk_1002F2C10, 24, 7);
    *(_QWORD *)(v136 + 16) = v135;
    v183 = sub_10014576C;
    v184 = v136;
    *(_QWORD *)&v180 = _NSConcreteStackBlock;
    *((_QWORD *)&v180 + 1) = 1107296256;
    v181 = sub_1001BAACC;
    v182 = (uint64_t)&unk_1002F2C28;
    v137 = _Block_copy(&v180);
    v138 = v168;
    static DispatchQoS.unspecified.getter(v139);
    *(_QWORD *)&v187[0] = &_swiftEmptyArrayStorage;
    v140 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v141 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v142 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
    v143 = (char *)v171;
    v144 = v141;
    v145 = v177;
    dispatch thunk of SetAlgebra.init<A>(_:)(v187, v144, v142, v177, v140);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v138, v143, v137);
    _Block_release(v137);
    ((void (*)(char *, uint64_t))v173[1])(v143, v145);
    (*(void (**)(char *, _QWORD *))(v169 + 8))(v138, v170);
    swift_release(v184);
    v146 = v179;
    if (!v179)
    {
      v27 = 0;
      v5 = 0;
      v159 = 0;
      v160 = v167;
      goto LABEL_51;
    }
    v171 = *(void (**)())(v179[33] + 88);
    v147 = sub_1000B7720();
    v177 = v147[2];
    if (!v177)
      break;
    v173 = v147 + 4;
    v178 = v146[33];
    v170 = v147;
    swift_bridgeObjectRetain(v147);
    a3 = 0;
    while (1)
    {
      v148 = *(_QWORD *)(v178 + 104);
      if (!*(_QWORD *)(v148 + 16))
        goto LABEL_35;
      v149 = &v173[11 * (_QWORD)a3];
      v15 = (char *)v149[3];
      v27 = (char *)v149[4];
      v5 = v149[5];
      v23 = (char *)v149[7];
      v150 = v149[10];
      v16 = *v149;
      v20 = (char *)v149[1];
      swift_bridgeObjectRetain(v150);
      swift_bridgeObjectRetain_n(v20, 2, v151);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v23);
      v152 = sub_10017D3B0(v16, (uint64_t)v20);
      if ((v153 & 1) != 0)
        break;
      swift_bridgeObjectRelease(v150);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease_n(v20, 2);
LABEL_35:
      a3 = (uint64_t *)((char *)a3 + 1);
      if (a3 == (uint64_t *)v177)
      {
        swift_bridgeObjectRelease_n(v170, 2);
        v27 = 0;
        v5 = 0;
        goto LABEL_50;
      }
    }
    v154 = *(_QWORD *)(*(_QWORD *)(v148 + 56) + 8 * v152);
    swift_retain(v154);
    swift_bridgeObjectRelease(v20);
    v155 = *(_QWORD *)(v154 + 104);
    v156 = *(_QWORD *)(v155 + 16);
    if (!v156)
      goto LABEL_45;
    if ((*(_BYTE *)(v155 + 32) & 1) == 0)
    {
LABEL_47:
      v161 = v170;
      swift_bridgeObjectRelease(v170);
      swift_release(v154);
      swift_bridgeObjectRelease(v150);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v161);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v20);
      goto LABEL_50;
    }
    if (v156 == 1)
    {
LABEL_45:
      swift_bridgeObjectRelease(v150);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v20);
      swift_release(v154);
      goto LABEL_35;
    }
    v157 = 33;
    while (1)
    {
      v158 = v157 - 31;
      if (__OFADD__(v157 - 32, 1))
        break;
      if ((*(_BYTE *)(v155 + v157) & 1) == 0)
        goto LABEL_47;
      ++v157;
      if (v158 == v156)
        goto LABEL_45;
    }
    __break(1u);
LABEL_53:
    swift_once(&qword_100315890, sub_1000D97D4);
  }
  swift_bridgeObjectRelease(v147);
  v27 = 0;
  v5 = 0;
LABEL_50:
  v160 = v167;
  v159 = v171;
LABEL_51:
  *(_QWORD *)&v180 = v175;
  *((_QWORD *)&v180 + 1) = v160;
  v181 = (uint64_t (*)(uint64_t))v174;
  v182 = v176;
  v183 = v159;
  v184 = v179 == 0;
  v185 = v27;
  v186 = v5;
  PassthroughSubject.send(_:)(&v180);
  swift_bridgeObjectRelease(v5);
  return sub_10000D730(v191, *((unint64_t *)&v191 + 1));
}

uint64_t sub_100140B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __n128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[6];

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v1);
  v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v13 = static OS_dispatch_queue.main.getter(v14);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  v15 = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  if ((v15 & 1) != 0)
  {
    if (qword_100315890 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315890, sub_1000D97D4);
LABEL_3:
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10000D744(v16, (uint64_t)qword_10033FE68);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "openEmergencyThread", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  aBlock[4] = sub_100140E34;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002F2BD8;
  v21 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v22);
  v28 = _swiftEmptyArrayStorage;
  v23 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v25 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v24, v25, v0, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v3, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v3, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void sub_100140E34()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[80];

  v0 = sub_100003DB8((uint64_t *)&unk_100318F28);
  inited = swift_initStackObject(v0, v25);
  *(_OWORD *)(inited + 16) = xmmword_10024E070;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieServiceTypeKey);
  *(_QWORD *)(inited + 40) = v2;
  *(_QWORD *)(inited + 72) = &type metadata for Int;
  *(_QWORD *)(inited + 48) = 1;
  v3 = sub_10022499C(inited);
  if (qword_100315890 != -1)
    swift_once(&qword_100315890, sub_1000D97D4);
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FE68);
  v6 = swift_bridgeObjectRetain_n(v3, 2, v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v24 = v10;
    *(_DWORD *)v9 = 136380675;
    swift_bridgeObjectRetain(v3);
    v12 = Dictionary.description.getter(v11, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v14 = v13;
    swift_bridgeObjectRelease(v3);
    v23 = sub_100172BEC(v12, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v3, 2);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "openEmergencyThread - sending dictionary - %{private}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v3, 2);
  }
  v15 = objc_msgSend(objc_allocWithZone((Class)IMStewieChat), "init");
  sub_10013E7A0(v3);
  v17 = v16;
  swift_bridgeObjectRelease(v3);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  objc_msgSend(v15, "openStewieChatWithContext:", isa);

  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "openEmergencyThread - sent", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

}

uint64_t sub_10014114C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD aBlock[5];
  uint64_t v54;
  char v55[32];

  v44 = a3;
  v43 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v5 - 8);
  v50 = v5;
  __chkstk_darwin(v5, v6);
  v48 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v8 - 8);
  v47 = v8;
  __chkstk_darwin(v8, v9);
  v45 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TransmissionProgress(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (uint64_t *)((char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_100003DB8(&qword_100316B68);
  __chkstk_darwin(v16, v17);
  v19 = (uint64_t *)((char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = sub_100003DB8(&qword_10031FA30);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = v3;
  v24 = v3 + OBJC_IVAR____TtC8SOSBuddy13MessagesAgent__lastTransmissionProgress;
  swift_beginAccess(v3 + OBJC_IVAR____TtC8SOSBuddy13MessagesAgent__lastTransmissionProgress, v55, 0, 0);
  v25 = (uint64_t)&v23[*(int *)(v20 + 48)];
  sub_10000B234(v24, (uint64_t)v23, &qword_100316B68);
  sub_10000B234(a1, v25, &qword_100316B68);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v26((uint64_t)v23, 1, v11) == 1)
  {
    if (v26(v25, 1, v11) == 1)
      return sub_100007FF0((uint64_t)v23, &qword_100316B68);
  }
  else
  {
    sub_10000B234((uint64_t)v23, (uint64_t)v19, &qword_100316B68);
    if (v26(v25, 1, v11) != 1)
    {
      sub_10000AFB0(v25, (uint64_t)v15);
      v28 = sub_1000FD360(v19, v15);
      sub_10010CC90((uint64_t)v15);
      sub_10010CC90((uint64_t)v19);
      result = sub_100007FF0((uint64_t)v23, &qword_100316B68);
      if ((v28 & 1) != 0)
        return result;
      goto LABEL_8;
    }
    sub_10010CC90((uint64_t)v19);
  }
  sub_100007FF0((uint64_t)v23, &qword_10031FA30);
LABEL_8:
  v29 = a1;
  v30 = sub_100141A70(a1);
  if ((v31 & 1) == 0)
  {
    v32 = v30;
    v33 = swift_allocObject(&unk_1002F2B98, 33, 7);
    v34 = v43;
    *(_QWORD *)(v33 + 16) = v32;
    *(_QWORD *)(v33 + 24) = v34;
    *(_BYTE *)(v33 + 32) = v44 & 1;
    aBlock[4] = sub_10014573C;
    v54 = v33;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001BAACC;
    aBlock[3] = &unk_1002F2BB0;
    v35 = _Block_copy(aBlock);
    v36 = v45;
    static DispatchQoS.unspecified.getter(v37);
    v52 = _swiftEmptyArrayStorage;
    v38 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v39 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v40 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
    v41 = v48;
    v42 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v39, v40, v50, v38);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v41, v35);
    _Block_release(v35);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v41, v42);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v36, v47);
    swift_release(v54);
  }
  swift_beginAccess(v24, aBlock, 33, 0);
  sub_1001456E4(v29, v24);
  return swift_endAccess(aBlock);
}

uint64_t sub_100141560(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Class isa;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  unint64_t v46;
  unint64_t v47;
  _OWORD v49[2];
  __int128 v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[80];
  _QWORD v54[2];

  if (qword_100315890 != -1)
    swift_once(&qword_100315890, sub_1000D97D4);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000D744(v6, (uint64_t)qword_10033FE68);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v50 = v11;
    *(_DWORD *)v10 = 136315138;
    *(_QWORD *)&v49[0] = a1;
    type metadata accessor for CTStewieServiceType(0);
    v14 = String.init<A>(describing:)(v49, v12, v13);
    v16 = v15;
    *(_QWORD *)&v49[0] = sub_100172BEC(v14, v15, (uint64_t *)&v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v49, (char *)v49 + 8, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "notifyAboutLocationUpdate - %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  v17 = sub_100003DB8((uint64_t *)&unk_100318F28);
  inited = swift_initStackObject(v17, v53);
  *(_OWORD *)(inited + 16) = xmmword_10024E070;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieServiceTypeKey);
  *(_QWORD *)(inited + 40) = v19;
  *(_QWORD *)(inited + 72) = &type metadata for Int;
  *(_QWORD *)(inited + 48) = a1;
  v20 = sub_10022499C(inited);
  v21 = v20;
  v54[0] = v20;
  if (a1 == 8)
  {
    if ((a3 & 1) != 0)
    {
      v47 = sub_10022499C((uint64_t)_swiftEmptyArrayStorage);
      v54[0] = v47;
      v20 = swift_bridgeObjectRelease(v21);
      v21 = v47;
      if (*(_QWORD *)(v47 + 16))
        goto LABEL_9;
LABEL_15:
      v46 = v21;
      return swift_bridgeObjectRelease(v46);
    }
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieProviderIdKey);
    v24 = v23;
    v51 = &type metadata for UInt64;
    *(_QWORD *)&v50 = a2;
    sub_10003E704(&v50, v49);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
    v52 = v21;
    v54[0] = 0x8000000000000000;
    sub_10020CAD4(v49, v22, v24, isUniquelyReferenced_nonNull_native);
    v26 = v54[0];
    v54[0] = v52;
    swift_bridgeObjectRelease(v24);
    v20 = swift_bridgeObjectRelease(v26);
    v21 = v54[0];
  }
  if (!*(_QWORD *)(v21 + 16))
    goto LABEL_15;
LABEL_9:
  v27 = Logger.logObject.getter(v20);
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v50 = v30;
    *(_DWORD *)v29 = 136380675;
    swift_beginAccess(v54, v49, 0, 0);
    v31 = v54[0];
    swift_bridgeObjectRetain(v54[0]);
    v33 = Dictionary.description.getter(v32, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v35 = v34;
    swift_bridgeObjectRelease(v31);
    v52 = sub_100172BEC(v33, v35, (uint64_t *)&v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease(v35);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "notifyAboutLocationUpdate - sending dictionary - %{private}s", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }

  v36 = objc_msgSend(objc_allocWithZone((Class)IMStewieChat), "init");
  swift_beginAccess(v54, &v50, 0, 0);
  v37 = v54[0];
  swift_bridgeObjectRetain(v54[0]);
  sub_10013E7A0(v38);
  v40 = v39;
  swift_bridgeObjectRelease(v37);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v40);
  objc_msgSend(v36, "locationUpdateDelivered:", isa);

  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "notifyAboutLocationUpdate - sent", v45, 2u);
    swift_slowDealloc(v45, -1, -1);
  }

  v46 = v54[0];
  return swift_bridgeObjectRelease(v46);
}

uint64_t sub_100141A70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD v33[5];
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _BYTE v38[24];

  v37 = a1;
  v34 = type metadata accessor for Date(0);
  v33[3] = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34, v2);
  v33[1] = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003DB8(&qword_100317D58);
  __chkstk_darwin(v4, v5);
  v33[2] = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_10031FA20);
  __chkstk_darwin(v7, v8);
  v33[4] = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_100316B68);
  v12 = __chkstk_darwin(v10, v11);
  __chkstk_darwin(v12, v13);
  v15 = (char *)v33 - v14;
  v16 = type metadata accessor for TransmissionProgress(0);
  v17 = *(_QWORD *)(v16 - 8);
  v19 = __chkstk_darwin(v16, v18);
  v35 = (char *)v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19, v21);
  v36 = (char *)v33 - v23;
  v25 = __chkstk_darwin(v22, v24);
  v27 = __chkstk_darwin(v25, v26);
  __chkstk_darwin(v27, v28);
  v30 = (char *)v33 - v29;
  v31 = v1 + OBJC_IVAR____TtC8SOSBuddy13MessagesAgent__lastTransmissionProgress;
  swift_beginAccess(v31, v38, 0, 0);
  sub_10000B234(v31, (uint64_t)v15, &qword_100316B68);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
  {
    sub_10000AFB0((uint64_t)v15, (uint64_t)v30);
    __asm { BR              X9 }
  }
  sub_100007FF0((uint64_t)v15, &qword_100316B68);
  return 0;
}

void sub_100141D1C()
{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, int *);
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(uint64_t, uint64_t);

  if (*(_QWORD *)(v4 + v3[7]) != 100)
    JUMPOUT(0x100141CE8);
  sub_10000B234(*(_QWORD *)(v8 - 112), v0, &qword_100316B68);
  if (v1(v0, 1, v3) == 1)
  {
    sub_10010CC90(v4);
    v9 = &qword_100316B68;
    v10 = v0;
LABEL_4:
    sub_100007FF0(v10, v9);
    goto LABEL_20;
  }
  sub_10000AFB0(v0, v5);
  v11 = *(unsigned __int8 *)(v5 + v3[8]);
  if (v11 == 7)
  {
    sub_1001456A0(v5, v2);
    v12 = *(_QWORD *)(v8 - 120);
  }
  else
  {
    sub_1001456A0(v5, v2);
    v12 = *(_QWORD *)(v8 - 120);
    if (v11 == v6)
    {
      v13 = *(_QWORD *)(v2 + v3[7]);
      sub_10010CC90(v2);
      sub_1001456A0(v5, v12);
      v14 = *(_QWORD *)(v8 - 128);
      sub_1001456A0(v4, v14);
      if (v13 == 100)
      {
        v15 = v3[5];
        v16 = v14 + v15;
        v17 = *(_QWORD *)(v8 - 144);
        v18 = v17 + *(int *)(v7 + 48);
        v19 = v14;
        sub_10000B234(v12 + v15, v17, &qword_100317D58);
        sub_10000B234(v16, v18, &qword_100317D58);
        v20 = *(_QWORD *)(v8 - 152);
        v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
        v22 = *(_QWORD *)(v8 - 136);
        if (v21(v17, 1, v22) == 1)
        {
          sub_10010CC90(v19);
          sub_10010CC90(v12);
          sub_10010CC90(v5);
          sub_10010CC90(v4);
          if (v21(v18, 1, v22) == 1)
            JUMPOUT(0x100141CB0);
        }
        else
        {
          v23 = *(_QWORD *)(v8 - 160);
          sub_10000B234(v17, v23, &qword_100317D58);
          if (v21(v18, 1, v22) != 1)
          {
            v24 = *(_QWORD *)(v8 - 168);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v24, v18, v22);
            v25 = sub_1000052EC(&qword_10031E4D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v26 = dispatch thunk of static Equatable.== infix(_:_:)(v23, v24, v22, v25);
            v27 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
            v27(v24, v22);
            sub_10010CC90(*(_QWORD *)(v8 - 128));
            sub_10010CC90(*(_QWORD *)(v8 - 120));
            sub_10010CC90(v5);
            sub_10010CC90(v4);
            v27(v23, v22);
            sub_100007FF0(v17, &qword_100317D58);
            if ((v26 & 1) != 0)
              JUMPOUT(0x100141CF0);
LABEL_20:
            JUMPOUT(0x100141CF8);
          }
          sub_10010CC90(*(_QWORD *)(v8 - 128));
          sub_10010CC90(*(_QWORD *)(v8 - 120));
          sub_10010CC90(v5);
          sub_10010CC90(v4);
          (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v23, v22);
        }
        v9 = &qword_10031FA20;
        v10 = v17;
        goto LABEL_4;
      }
LABEL_13:
      sub_10010CC90(v14);
      sub_10010CC90(v12);
      sub_10010CC90(v5);
      sub_10010CC90(v4);
      goto LABEL_20;
    }
  }
  sub_10010CC90(v2);
  sub_1001456A0(v5, v12);
  v14 = *(_QWORD *)(v8 - 128);
  sub_1001456A0(v4, v14);
  goto LABEL_13;
}

void sub_100142000(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10031F840)
  {
    v2 = type metadata accessor for TransmissionProgress(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10031F840);
  }
}

uint64_t destroy for MessagesAgent.StartMessageSentEvent(uint64_t *a1)
{
  return sub_10006656C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
}

uint64_t *initializeWithCopy for MessagesAgent.StartMessageSentEvent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  sub_10006650C(*a2, v4, v5, v6, v7, v8, v9, v10);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  return a1;
}

uint64_t *assignWithCopy for MessagesAgent.StartMessageSentEvent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  sub_10006650C(*a2, v4, v5, v6, v7, v8, v9, v10);
  v11 = *a1;
  v12 = a1[1];
  v13 = a1[2];
  v14 = a1[3];
  v15 = a1[4];
  v16 = a1[5];
  v17 = a1[6];
  v18 = a1[7];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  sub_10006656C(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

uint64_t *assignWithTake for MessagesAgent.StartMessageSentEvent(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  v11 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v11;
  v12 = a2[3];
  *((_OWORD *)a1 + 2) = a2[2];
  *((_OWORD *)a1 + 3) = v12;
  sub_10006656C(v3, v5, v4, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagesAgent.StartMessageSentEvent(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_DWORD *)(a1 + 25);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for MessagesAgent.StartMessageSentEvent(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 56) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = (unint64_t)-a2 << 8;
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_100142280(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >> 63;
}

uint64_t sub_10014228C(uint64_t result)
{
  *(_QWORD *)(result + 24) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_10014229C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = *(unsigned __int8 *)(result + 24) | (unint64_t)(a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for MessagesAgent.StartMessageSentEvent()
{
  return &type metadata for MessagesAgent.StartMessageSentEvent;
}

uint64_t sub_1001422BC(uint64_t a1, uint64_t a2, void (*a3)(), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  _BYTE *v32;
  uint64_t v33;
  uint8_t *v34;
  uint8_t *v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  void (*v39)(_BYTE *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  __n128 v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  __n128 v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  Swift::String_optional v99;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String v102;
  unint64_t v103;
  Swift::String_optional v104;
  uint64_t v105;
  Swift::String_optional v106;
  char v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  uint8_t *v116;
  uint64_t v117;
  uint64_t v118;
  __n128 v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __n128 v147;
  unint64_t v148;
  char v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  void *v165;
  _BYTE *v166;
  __n128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE *v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE *v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  __n128 v180;
  unint64_t v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  _BYTE v190[4];
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _BYTE *v195;
  uint64_t v196;
  _QWORD *v197;
  _BYTE *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  uint64_t (*v207)(uint64_t);
  _QWORD *v208;
  void (*v209)();
  _BYTE *v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  char v216[24];
  unint64_t v217;
  unint64_t v218[3];
  unint64_t v219;
  unint64_t v220;
  __int128 v221;
  __int128 v222;

  v199 = a2;
  v194 = a4;
  v201 = a1;
  v202 = type metadata accessor for DispatchWorkItemFlags(0);
  v200 = *(_QWORD **)(v202 - 8);
  __chkstk_darwin(v202, v5);
  v198 = &v190[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for DispatchQoS(0);
  v196 = *(_QWORD *)(v7 - 8);
  v197 = (_QWORD *)v7;
  __chkstk_darwin(v7, v8);
  v195 = &v190[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_100003DB8(&qword_100319D48);
  __chkstk_darwin(v10, v11);
  v13 = &v190[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v203 = type metadata accessor for Locale.Language(0);
  v14 = *(_QWORD *)(v203 - 8);
  v16 = __chkstk_darwin(v203, v15);
  v18 = &v190[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16, v19);
  v21 = &v190[-v20];
  v22 = sub_100003DB8(&qword_100321AB0);
  __chkstk_darwin(v22, v23);
  v25 = &v190[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100315890 != -1)
    goto LABEL_74;
  while (1)
  {
    v26 = type metadata accessor for Logger(0);
    v27 = sub_10000D744(v26, (uint64_t)qword_10033FE68);
    swift_retain(a3);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    v31 = os_log_type_enabled(v29, v30);
    v193 = v27;
    if (v31)
    {
      v32 = v13;
      v33 = v14;
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v34 = 134349056;
      *(_QWORD *)&v206 = v201;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v206, (char *)&v206 + 8, v34 + 4, v34 + 12);
      swift_release(a3);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "startRoadsideAssistanceThread - conversationId:%{public}llu", v34, 0xCu);
      v35 = v34;
      v14 = v33;
      v13 = v32;
      swift_slowDealloc(v35, -1, -1);

    }
    else
    {

      swift_release(a3);
    }
    v36 = (uint64_t)a3;
    v222 = xmmword_1002585C0;
    v221 = 0uLL;
    v204 = (uint64_t)a3;
    if (a3)
    {
      v37 = swift_retain(a3);
      v38 = Locale.language.getter(v37);
      Locale.Language.languageCode.getter(v38);
      v39 = *(void (**)(_BYTE *, uint64_t))(v14 + 8);
      v39(v21, v203);
      v40 = type metadata accessor for Locale.LanguageCode(0);
      v41 = *(_QWORD *)(v40 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v41 + 48))(v25, 1, v40) == 1)
      {
        sub_100007FF0((uint64_t)v25, &qword_100321AB0);
        v43 = 0;
        v44 = 0;
      }
      else
      {
        v46 = Locale.LanguageCode.identifier.getter();
        v44 = v47;
        v48 = v40;
        v43 = v46;
        v42.n128_f64[0] = (*(double (**)(_BYTE *, uint64_t))(v41 + 8))(v25, v48);
      }
      v49 = Locale.language.getter(v42);
      Locale.Language.region.getter(v49);
      v39(v18, v203);
      v50 = type metadata accessor for Locale.Region(0);
      v51 = *(_QWORD *)(v50 - 8);
      v52 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v51 + 48))(v13, 1, v50);
      v53 = v204;
      if (v52 == 1)
      {
        sub_100007FF0((uint64_t)v13, &qword_100319D48);
        v54 = 0;
        v55 = 0;
      }
      else
      {
        v54 = Locale.Region.identifier.getter();
        v55 = v56;
        (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v13, v50);
      }
      swift_beginAccess(v53 + 48, v216, 0, 0);
      sub_100007CBC(v53 + 80, (uint64_t)&v213);
      v57 = *(_QWORD *)(v53 + 264);
      v58 = *(_QWORD *)(v57 + 88);
      v59 = *(_BYTE *)(v57 + 32);
      sub_10008CB00((uint64_t *)(v53 + 48), (uint64_t)&v206);
      v60 = sub_100200568(v58, v59, v43, v44, v54, v55, &v213, (unint64_t)&v206);
      v61 = 0;
      v62 = v43;
      v63 = v60;
      v65 = v64;
      v203 = v62;
      sub_10008CB3C(&v206);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(&v213);
      sub_10000D730(v222, *((unint64_t *)&v222 + 1));
      *(_QWORD *)&v222 = v63;
      *((_QWORD *)&v222 + 1) = v65;
      sub_10000CC50(v63, v65);
      sub_10000CC50(v63, v65);
      swift_bridgeObjectRetain(v55);
      v66 = swift_bridgeObjectRetain(v44);
      v67 = Logger.logObject.getter(v66);
      v68 = static os_log_type_t.default.getter();
      v69 = v68;
      if (os_log_type_enabled(v67, v68))
      {
        v70 = swift_slowAlloc(32, -1);
        v194 = 0;
        v71 = v70;
        v192 = swift_slowAlloc(96, -1);
        *(_QWORD *)&v213 = v192;
        *(_DWORD *)v71 = 136381187;
        *(_QWORD *)&v206 = v63;
        *((_QWORD *)&v206 + 1) = v65;
        sub_10000CC50(v63, v65);
        v72 = sub_100003DB8(&qword_100321AC0);
        v74 = String.init<A>(describing:)(&v206, v72, v73);
        v191 = v69;
        v76 = v75;
        *(_QWORD *)&v206 = sub_100172BEC(v74, v75, (uint64_t *)&v213);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v206, (char *)&v206 + 8, v71 + 4, v71 + 12);
        swift_bridgeObjectRelease(v76);
        sub_10000CCCC(v63, v65);
        sub_10000CCCC(v63, v65);
        *(_WORD *)(v71 + 12) = 2082;
        *(_QWORD *)&v206 = v203;
        *((_QWORD *)&v206 + 1) = v44;
        swift_bridgeObjectRetain(v44);
        v77 = sub_100003DB8(&qword_100318260);
        v79 = String.init<A>(describing:)(&v206, v77, v78);
        v81 = v80;
        *(_QWORD *)&v206 = sub_100172BEC(v79, v80, (uint64_t *)&v213);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v206, (char *)&v206 + 8, v71 + 14, v71 + 22);
        swift_bridgeObjectRelease_n(v44, 2);
        swift_bridgeObjectRelease(v81);
        *(_WORD *)(v71 + 22) = 2082;
        *(_QWORD *)&v206 = v54;
        *((_QWORD *)&v206 + 1) = v55;
        swift_bridgeObjectRetain(v55);
        v83 = String.init<A>(describing:)(&v206, v77, v82);
        v85 = v84;
        *(_QWORD *)&v206 = sub_100172BEC(v83, v84, (uint64_t *)&v213);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v206, (char *)&v206 + 8, v71 + 24, v71 + 32);
        swift_bridgeObjectRelease_n(v55, 2);
        swift_bridgeObjectRelease(v85);
        _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v191, "startRoadsideAssistanceThread - serializedQuestionnaire: %{private}s for language: %{public}s, country: %{public}s", (uint8_t *)v71, 0x20u);
        v86 = v192;
        swift_arrayDestroy(v192, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v86, -1, -1);
        v87 = v71;
        v61 = v194;
        swift_slowDealloc(v87, -1, -1);

      }
      else
      {
        sub_10000CCCC(v63, v65);
        sub_10000CCCC(v63, v65);

        swift_bridgeObjectRelease_n(v55, 2);
        swift_bridgeObjectRelease_n(v44, 2);
      }
      v45 = v199;
      v36 = v204;
      v88 = *(_QWORD *)(v204 + 64);
      if (*(_QWORD *)(v88 + 16)
        && (v89 = sub_10017D294(5), (v90 & 1) != 0)
        && (sub_10008CAC4(*(_QWORD *)(v88 + 56) + 32 * v89, (uint64_t)&v206),
            (swift_dynamicCast(&v213, &v206, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0))
      {
        v92 = *((_QWORD *)&v213 + 1);
        v91 = v213;
      }
      else
      {
        v93 = *(_QWORD *)(v36 + 64);
        if (*(_QWORD *)(v93 + 16)
          && (v94 = sub_10017D294(6), (v95 & 1) != 0)
          && (sub_10008CAC4(*(_QWORD *)(v93 + 56) + 32 * v94, (uint64_t)&v206),
              swift_dynamicCast(&v213, &v206, (char *)&type metadata for Any + 8, &type metadata for String, 6)))
        {
          v92 = *((_QWORD *)&v213 + 1);
          v91 = v213;
        }
        else
        {
          v92 = 0;
          v91 = 0;
          v213 = 0uLL;
        }
      }
      v96 = swift_bridgeObjectRelease(*((_QWORD *)&v221 + 1));
      *(_QWORD *)&v221 = v91;
      *((_QWORD *)&v221 + 1) = v92;
      if (v92)
      {
        v97 = 0xE000000000000000;
        v219 = 0;
        v220 = 0xE000000000000000;
        v98 = HIBYTE(v92) & 0xF;
        if ((v92 & 0x2000000000000000) == 0)
          v98 = v91 & 0xFFFFFFFFFFFFLL;
        *(_QWORD *)&v206 = v91;
        *((_QWORD *)&v206 + 1) = v92;
        v207 = 0;
        v208 = (_QWORD *)v98;
        swift_bridgeObjectRetain(v92);
        v99 = String.Iterator.next()();
        if (v99.value._object)
        {
          countAndFlagsBits = v99.value._countAndFlagsBits;
          object = (unint64_t)v99.value._object;
          do
          {
            v105 = HIBYTE(object) & 0xF;
            *(_QWORD *)&v213 = countAndFlagsBits;
            *((_QWORD *)&v213 + 1) = object;
            if ((object & 0x2000000000000000) == 0)
              v105 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            v214 = 0;
            v215 = v105;
            swift_bridgeObjectRetain(object);
            do
            {
              v106 = String.Iterator.next()();
              if (!v106.value._object)
              {
                swift_bridgeObjectRelease(*((_QWORD *)&v213 + 1));
                v102._countAndFlagsBits = countAndFlagsBits;
                v102._object = (void *)object;
                String.append(_:)(v102);
                v103 = object;
                goto LABEL_31;
              }
              v107 = Character.isNumber.getter(v106.value._countAndFlagsBits);
              swift_bridgeObjectRelease(v106.value._object);
            }
            while ((v107 & 1) != 0);
            v108 = *((_QWORD *)&v213 + 1);
            swift_bridgeObjectRelease(object);
            v103 = v108;
LABEL_31:
            swift_bridgeObjectRelease(v103);
            v104 = String.Iterator.next()();
            countAndFlagsBits = v104.value._countAndFlagsBits;
            object = (unint64_t)v104.value._object;
          }
          while (v104.value._object);
          v109 = v219;
          v97 = v220;
        }
        else
        {
          v109 = 0;
        }
        swift_bridgeObjectRelease(*((_QWORD *)&v206 + 1));
        *(_QWORD *)&v206 = v109;
        *((_QWORD *)&v206 + 1) = v97;
        v110 = String.init<A>(_:)(&v206, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
        v112 = v111;
        v96 = swift_bridgeObjectRelease(v92);
        *(_QWORD *)&v221 = v110;
        *((_QWORD *)&v221 + 1) = v112;
        v113 = HIBYTE(v112) & 0xF;
        if ((v112 & 0x2000000000000000) == 0)
          v113 = v110 & 0xFFFFFFFFFFFFLL;
        if (!v113)
        {
          v96 = swift_bridgeObjectRelease(v112);
          v221 = 0uLL;
        }
      }
      v194 = v61;
      v114 = Logger.logObject.getter(v96);
      v115 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v114, v115))
      {
        v116 = (uint8_t *)swift_slowAlloc(12, -1);
        v117 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v213 = v117;
        *(_DWORD *)v116 = 136380675;
        swift_beginAccess(&v221, &v205, 0, 0);
        v206 = v221;
        swift_bridgeObjectRetain(*((_QWORD *)&v221 + 1));
        v118 = sub_100003DB8(&qword_100318260);
        v120 = String.init<A>(describing:)(&v206, v118, v119);
        v122 = v121;
        *(_QWORD *)&v206 = sub_100172BEC(v120, v121, (uint64_t *)&v213);
        v36 = v204;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v206, (char *)&v206 + 8, v116 + 4, v116 + 12);
        swift_bridgeObjectRelease(v122);
        _os_log_impl((void *)&_mh_execute_header, v114, v115, "startRoadsideAssistanceThread - recorded phone number: %{private}s", v116, 0xCu);
        swift_arrayDestroy(v117, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v117, -1, -1);
        swift_slowDealloc(v116, -1, -1);
      }

      swift_release(v36);
    }
    else
    {
      v194 = 0;
      v45 = v199;
    }
    v123 = sub_10022499C((uint64_t)&_swiftEmptyArrayStorage);
    v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieServiceTypeKey);
    v126 = v125;
    v208 = &type metadata for Int;
    *(_QWORD *)&v206 = 8;
    sub_10003E704(&v206, &v213);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v123);
    v219 = v123;
    sub_10020CAD4(&v213, v124, v126, isUniquelyReferenced_nonNull_native);
    v128 = v219;
    swift_bridgeObjectRelease(v126);
    swift_bridgeObjectRelease(0x8000000000000000);
    v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieProviderIdKey);
    v131 = v130;
    v208 = &type metadata for UInt64;
    *(_QWORD *)&v206 = v45;
    sub_10003E704(&v206, &v213);
    v132 = swift_isUniquelyReferenced_nonNull_native(v128);
    v219 = v128;
    sub_10020CAD4(&v213, v129, v131, v132);
    v133 = v219;
    swift_bridgeObjectRelease(v131);
    swift_bridgeObjectRelease(0x8000000000000000);
    v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieIsPayPerUseKey);
    v136 = v135;
    v208 = &type metadata for Bool;
    LOBYTE(v206) = 0;
    sub_10003E704(&v206, &v213);
    v137 = swift_isUniquelyReferenced_nonNull_native(v133);
    v219 = v133;
    sub_10020CAD4(&v213, v134, v136, v137);
    v138 = v219;
    swift_bridgeObjectRelease(v136);
    swift_bridgeObjectRelease(0x8000000000000000);
    v139 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieConversationIDKey);
    v141 = v140;
    v208 = &type metadata for UInt64;
    *(_QWORD *)&v206 = v201;
    sub_10003E704(&v206, &v213);
    v142 = swift_isUniquelyReferenced_nonNull_native(v138);
    v219 = v138;
    sub_10020CAD4(&v213, v139, v141, v142);
    v143 = v219;
    swift_bridgeObjectRelease(v141);
    swift_bridgeObjectRelease(0x8000000000000000);
    v144 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieSummaryPresentationKey);
    v146 = v145;
    v148 = sub_100144E60(v36, v147);
    v208 = (_QWORD *)sub_100003DB8(&qword_100321AB8);
    *(_QWORD *)&v206 = v148;
    sub_10003E704(&v206, &v213);
    v149 = swift_isUniquelyReferenced_nonNull_native(v143);
    v219 = v143;
    sub_10020CAD4(&v213, v144, v146, v149);
    v150 = v219;
    swift_bridgeObjectRelease(v146);
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_beginAccess(&v222, &v219, 0, 0);
    v151 = *((_QWORD *)&v222 + 1);
    if (*((_QWORD *)&v222 + 1) >> 60 != 15)
    {
      v152 = v222;
      v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieSerializedQuestionnaireAnswersKey);
      v155 = v154;
      v208 = &type metadata for Data;
      *(_QWORD *)&v206 = v152;
      *((_QWORD *)&v206 + 1) = v151;
      sub_10003E704(&v206, &v213);
      sub_10000CC50(v152, v151);
      sub_10000CC50(v152, v151);
      v156 = swift_isUniquelyReferenced_nonNull_native(v150);
      v218[0] = v150;
      sub_10020CAD4(&v213, v153, v155, v156);
      v150 = v218[0];
      swift_bridgeObjectRelease(v155);
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_10000D730(v152, v151);
    }
    swift_beginAccess(&v221, v218, 0, 0);
    v157 = *((_QWORD *)&v221 + 1);
    v158 = v45;
    if (*((_QWORD *)&v221 + 1))
    {
      v159 = v221;
      v160 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewiePhoneNumberKey);
      v162 = v161;
      v208 = &type metadata for String;
      *(_QWORD *)&v206 = v159;
      *((_QWORD *)&v206 + 1) = v157;
      sub_10003E704(&v206, &v213);
      swift_bridgeObjectRetain(v157);
      v163 = swift_isUniquelyReferenced_nonNull_native(v150);
      v217 = v150;
      sub_10020CAD4(&v213, v160, v162, v163);
      v150 = v217;
      swift_bridgeObjectRelease(v162);
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    v164 = swift_allocObject(&unk_1002F2B48, 24, 7);
    *(_QWORD *)(v164 + 16) = v150;
    v209 = sub_100145678;
    v210 = (_BYTE *)v164;
    *(_QWORD *)&v206 = _NSConcreteStackBlock;
    *((_QWORD *)&v206 + 1) = 1107296256;
    v207 = sub_1001BAACC;
    v208 = &unk_1002F2B60;
    v165 = _Block_copy(&v206);
    v166 = v195;
    static DispatchQoS.unspecified.getter(v167);
    *(_QWORD *)&v213 = &_swiftEmptyArrayStorage;
    v168 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v169 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v170 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
    v171 = v198;
    v172 = v169;
    v173 = v202;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v213, v172, v170, v202, v168);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v166, v171, v165);
    _Block_release(v165);
    ((void (*)(_BYTE *, uint64_t))v200[1])(v171, v173);
    (*(void (**)(_BYTE *, _QWORD *))(v196 + 8))(v166, v197);
    swift_release(v210);
    if (!v36)
    {
      a3 = 0;
      v25 = 0;
      v174 = 0;
      goto LABEL_72;
    }
    v174 = *(_BYTE **)(*(_QWORD *)(v36 + 264) + 88);
    v175 = sub_1000B7720();
    v202 = v175[2];
    if (!v202)
      break;
    v197 = v175;
    v198 = v174;
    v200 = v175 + 4;
    v203 = *(_QWORD *)(v36 + 264);
    swift_bridgeObjectRetain(v175);
    v18 = 0;
    while (1)
    {
      v176 = *(_QWORD *)(v203 + 104);
      if (!*(_QWORD *)(v176 + 16))
        goto LABEL_56;
      v177 = &v200[11 * (_QWORD)v18];
      v13 = (_BYTE *)v177[3];
      a3 = (void (*)())v177[4];
      v25 = (_BYTE *)v177[5];
      v178 = v177[7];
      v179 = v177[10];
      v14 = *v177;
      v21 = (_BYTE *)v177[1];
      swift_bridgeObjectRetain(v179);
      swift_bridgeObjectRetain_n(v21, 2, v180);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v178);
      v181 = sub_10017D3B0(v14, (uint64_t)v21);
      if ((v182 & 1) != 0)
        break;
      swift_bridgeObjectRelease(v179);
      swift_bridgeObjectRelease(v178);
      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease_n(v21, 2);
LABEL_55:
      v36 = v204;
LABEL_56:
      if (++v18 == (_BYTE *)v202)
      {
        swift_bridgeObjectRelease_n(v197, 2);
        a3 = 0;
        v25 = 0;
        v158 = v199;
        goto LABEL_71;
      }
    }
    v183 = *(_QWORD *)(*(_QWORD *)(v176 + 56) + 8 * v181);
    swift_retain(v183);
    swift_bridgeObjectRelease(v21);
    v184 = *(_QWORD *)(v183 + 104);
    v185 = *(_QWORD *)(v184 + 16);
    if (!v185)
      goto LABEL_66;
    if (*(_BYTE *)(v184 + 32) == 1)
    {
LABEL_68:
      v188 = v197;
      swift_bridgeObjectRelease(v197);
      swift_release(v183);
      swift_bridgeObjectRelease(v179);
      swift_bridgeObjectRelease(v178);
      swift_bridgeObjectRelease(v188);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v21);
      v158 = v199;
      v36 = v204;
LABEL_71:
      v174 = v198;
      goto LABEL_72;
    }
    if (v185 == 1)
    {
LABEL_66:
      swift_bridgeObjectRelease(v179);
      swift_bridgeObjectRelease(v178);
      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v21);
      swift_release(v183);
      goto LABEL_55;
    }
    v186 = 33;
    while (1)
    {
      v187 = v186 - 31;
      if (__OFADD__(v186 - 32, 1))
        break;
      if (*(_BYTE *)(v184 + v186) == 1)
        goto LABEL_68;
      ++v186;
      if (v187 == v185)
        goto LABEL_66;
    }
    __break(1u);
LABEL_74:
    swift_once(&qword_100315890, sub_1000D97D4);
  }
  swift_bridgeObjectRelease(v175);
  a3 = 0;
  v25 = 0;
LABEL_72:
  *(_QWORD *)&v206 = v201;
  *((_QWORD *)&v206 + 1) = v158;
  v207 = (uint64_t (*)(uint64_t))v174;
  v208 = (_QWORD *)((v36 == 0) | 0x8000000000000000);
  v209 = a3;
  v210 = v25;
  v211 = 0;
  v212 = 0;
  PassthroughSubject.send(_:)(&v206);
  swift_bridgeObjectRelease(v25);
  sub_10000D730(v222, *((unint64_t *)&v222 + 1));
  return swift_bridgeObjectRelease(*((_QWORD *)&v221 + 1));
}

void sub_1001435BC(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  Class isa;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;

  if (qword_100315890 != -1)
    swift_once(&qword_100315890, sub_1000D97D4);
  v6 = type metadata accessor for Logger(0);
  sub_10000D744(v6, (uint64_t)qword_10033FE68);
  v8 = swift_bridgeObjectRetain_n(a1, 2, v7);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v28 = v12;
    *(_DWORD *)v11 = 136380675;
    v13 = swift_bridgeObjectRetain(a1);
    v14 = a3;
    v15 = Dictionary.description.getter(v13, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v17 = v16;
    swift_bridgeObjectRelease(a1);
    v18 = v15;
    a3 = v14;
    v27 = sub_100172BEC(v18, v17, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, a2, v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v19 = objc_msgSend(objc_allocWithZone((Class)IMStewieChat), "init");
  sub_10013E7A0(a1);
  v21 = v20;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v21);
  objc_msgSend(v19, "sendQuestionnaire:", isa);

  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, a3, v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

}

uint64_t sub_100143884(void **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  void *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void **aBlock;
  _QWORD v34[4];
  uint64_t v35;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (uint64_t *)((char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v15 = static OS_dispatch_queue.main.getter(v16);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  v17 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v17 & 1) != 0)
  {
    if (qword_100315890 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315890, sub_1000D97D4);
LABEL_3:
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10000D744(v18, (uint64_t)qword_10033FE68);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v22 = 134217984;
    aBlock = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v34, v22 + 4, v22 + 12);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "openRoadsideAssistanceThread for %llu", v22, 0xCu);
    swift_slowDealloc(v22, -1, -1);
  }

  v23 = swift_allocObject(&unk_1002F2AD0, 24, 7);
  *(_QWORD *)(v23 + 16) = a1;
  v34[3] = sub_100143F18;
  v35 = v23;
  aBlock = _NSConcreteStackBlock;
  v34[0] = 1107296256;
  v34[1] = sub_1001BAACC;
  v34[2] = &unk_1002F2AE8;
  v24 = _Block_copy(&aBlock);
  static DispatchQoS.unspecified.getter(v25);
  v32 = _swiftEmptyArrayStorage;
  v26 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v28 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v27, v28, v2, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v5, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return swift_release(v35);
}

void sub_100143BC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  Class isa;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[136];

  v2 = sub_100003DB8((uint64_t *)&unk_100318F28);
  inited = swift_initStackObject(v2, v28);
  *(_OWORD *)(inited + 16) = xmmword_10024DEE0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieServiceTypeKey);
  *(_QWORD *)(inited + 40) = v4;
  *(_QWORD *)(inited + 72) = &type metadata for Int;
  *(_QWORD *)(inited + 48) = 8;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieProviderIdKey);
  *(_QWORD *)(inited + 88) = v5;
  *(_QWORD *)(inited + 120) = &type metadata for UInt64;
  *(_QWORD *)(inited + 96) = a1;
  v6 = sub_10022499C(inited);
  if (qword_100315890 != -1)
    swift_once(&qword_100315890, sub_1000D97D4);
  v7 = type metadata accessor for Logger(0);
  sub_10000D744(v7, (uint64_t)qword_10033FE68);
  v9 = swift_bridgeObjectRetain_n(v6, 2, v8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v27 = v13;
    *(_DWORD *)v12 = 136380675;
    swift_bridgeObjectRetain(v6);
    v15 = Dictionary.description.getter(v14, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v17 = v16;
    swift_bridgeObjectRelease(v6);
    v26 = sub_100172BEC(v15, v17, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v6, 2);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "openRoadsideAssistanceThread - sending dictionary - %{private}s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v6, 2);
  }
  v18 = objc_msgSend(objc_allocWithZone((Class)IMStewieChat), "init");
  sub_10013E7A0(v6);
  v20 = v19;
  swift_bridgeObjectRelease(v6);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v20);
  objc_msgSend(v18, "openStewieChatWithContext:", isa);

  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "openRoadsideAssistanceThread - sent", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }

}

uint64_t sub_100143F08()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100143F18()
{
  uint64_t v0;

  sub_100143BC8(*(_QWORD *)(v0 + 16));
}

double sub_100143F20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_100143F30(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100143F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  id v18;
  NSURL *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  _QWORD aBlock[6];

  v0 = sub_100003DB8(&qword_100317D60);
  __chkstk_darwin(v0, v1);
  v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315890 != -1)
    swift_once(&qword_100315890, sub_1000D97D4);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FE68);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "openMessages", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  URL.init(string:)(0x736567617373656DLL, 0xEB000000002F2F3ALL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    v14 = sub_100007FF0((uint64_t)v3, &qword_100317D60);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to form Messages URL", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
    v18 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
    if (v18)
    {
      v20 = v18;
      URL._bridgeToObjectiveC()(v19);
      v22 = v21;
      v23 = objc_msgSend(objc_allocWithZone((Class)_LSOpenConfiguration), "init");
      aBlock[4] = sub_10013F814;
      aBlock[5] = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10013EF08;
      aBlock[3] = &unk_1002F2B10;
      v24 = _Block_copy(aBlock);
      objc_msgSend(v20, "openURL:configuration:completionHandler:", v22, v23, v24);
      _Block_release(v24);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_100144238(char a1)
{
  __asm { BR              X10 }
}

unint64_t sub_1001442A8()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  _UNKNOWN **v30;
  void *v31;
  id v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  char v45;
  void *v46;
  id v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t inited;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v68;
  unint64_t v69;
  uint64_t v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;

  v5 = _stringCompareWithSmolCheck(_:_:expecting:)(1954047348, v1, 0x657465446C6C6166, 0xED00006E6F697463, 0);
  swift_bridgeObjectRelease(v1);
  if ((v5 & 1) == 0)
    __asm { BR              X10 }
  v6 = objc_msgSend((id)objc_opt_self(*(_QWORD *)(v2 + 1600)), "mainBundle");
  v71._countAndFlagsBits = v3 + 62;
  v71._object = (void *)0x800000010026B7B0;
  v7._countAndFlagsBits = 0x746544206C6C6146;
  v7._object = (void *)0xEE006E6F69746365;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v71);

  v69 = sub_10022499C((uint64_t)_swiftEmptyArrayStorage);
  v10 = (void *)objc_opt_self(*(_QWORD *)(v2 + 1600));
  v11 = objc_msgSend(v10, "mainBundle");
  v12 = v3 + 7;
  v13 = v3 + 99;
  v72._object = (void *)0x800000010026B730;
  v14._countAndFlagsBits = v3 + 7;
  v14._object = (void *)0x800000010026B710;
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  v72._countAndFlagsBits = v3 + 99;
  v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v11, v15, v72);

  v17 = sub_100171738(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v18 = v17;
  v20 = *((_QWORD *)v17 + 2);
  v19 = *((_QWORD *)v17 + 3);
  if (v20 >= v19 >> 1)
    v18 = sub_100171738((char *)(v19 > 1), v20 + 1, 1, v17);
  *((_QWORD *)v18 + 2) = v20 + 1;
  *(Swift::String *)&v18[16 * v20 + 32] = v16;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieInformationSentSummaryItemsReportKey);
  v23 = v22;
  v24 = objc_msgSend(v10, "mainBundle");
  v73._object = (void *)0x800000010026B730;
  v25._countAndFlagsBits = v12;
  v25._object = (void *)0x800000010026B710;
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  v73._countAndFlagsBits = v13;
  v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)v24, v26, v73);

  *(_QWORD *)(v4 - 96) = &type metadata for String;
  *(Swift::String *)(v4 - 120) = v27;
  sub_10003E704((_OWORD *)(v4 - 120), (_OWORD *)(v4 - 152));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v69);
  *(_QWORD *)(v4 - 160) = v69;
  sub_10020CAD4((_OWORD *)(v4 - 152), v21, v23, isUniquelyReferenced_nonNull_native);
  v29 = *(_QWORD *)(v4 - 160);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(0x8000000000000000);
  v30 = &_ss20_SwiftNewtypeWrapperPsSHRzSH8RawValueSYRpzrlE20_toCustomAnyHashables0hI0VSgyF_ptr;
  if ((v68 & 1) != 0)
  {
    v31 = (void *)objc_opt_self(NSBundle);
    v32 = objc_msgSend(v31, "mainBundle");
    v74._countAndFlagsBits = 0xD00000000000006ALL;
    v74._object = (void *)0x800000010026B6A0;
    v33._countAndFlagsBits = 0x206C61636964654DLL;
    v33._object = (void *)0xEA00000000004449;
    v34._countAndFlagsBits = 0;
    v34._object = (void *)0xE000000000000000;
    v35 = NSLocalizedString(_:tableName:bundle:value:comment:)(v33, (Swift::String_optional)0, (NSBundle)v32, v34, v74);

    if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
      v18 = sub_100171738(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
    v37 = *((_QWORD *)v18 + 2);
    v36 = *((_QWORD *)v18 + 3);
    if (v37 >= v36 >> 1)
      v18 = sub_100171738((char *)(v36 > 1), v37 + 1, 1, v18);
    *((_QWORD *)v18 + 2) = v37 + 1;
    *(Swift::String *)&v18[16 * v37 + 32] = v35;
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieInformationSentSummaryItemsMedicalIDKey);
    v40 = v39;
    v41 = objc_msgSend(v31, "mainBundle");
    v75._countAndFlagsBits = 0xD00000000000006ALL;
    v75._object = (void *)0x800000010026B6A0;
    v42._countAndFlagsBits = 0x206C61636964654DLL;
    v42._object = (void *)0xEA00000000004449;
    v43._countAndFlagsBits = 0;
    v43._object = (void *)0xE000000000000000;
    v44 = NSLocalizedString(_:tableName:bundle:value:comment:)(v42, (Swift::String_optional)0, (NSBundle)v41, v43, v75);

    *(_QWORD *)(v4 - 96) = &type metadata for String;
    *(Swift::String *)(v4 - 120) = v44;
    sub_10003E704((_OWORD *)(v4 - 120), (_OWORD *)(v4 - 152));
    v45 = swift_isUniquelyReferenced_nonNull_native(v29);
    *(_QWORD *)(v4 - 160) = v29;
    sub_10020CAD4((_OWORD *)(v4 - 152), v38, v40, v45);
    v29 = *(_QWORD *)(v4 - 160);
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease(0x8000000000000000);
    v30 = &_ss20_SwiftNewtypeWrapperPsSHRzSH8RawValueSYRpzrlE20_toCustomAnyHashables0hI0VSgyF_ptr;
  }
  v46 = (void *)objc_opt_self(v30[200]);
  v47 = objc_msgSend(v46, "mainBundle");
  v76._countAndFlagsBits = 0xD000000000000070;
  v76._object = (void *)0x800000010026B5B0;
  v48._object = (void *)0x800000010026B590;
  v48._countAndFlagsBits = 0xD000000000000010;
  v49._countAndFlagsBits = 0;
  v49._object = (void *)0xE000000000000000;
  v50 = NSLocalizedString(_:tableName:bundle:value:comment:)(v48, (Swift::String_optional)0, (NSBundle)v47, v49, v76);

  if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
    v18 = sub_100171738(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
  v52 = *((_QWORD *)v18 + 2);
  v51 = *((_QWORD *)v18 + 3);
  if (v52 >= v51 >> 1)
    v18 = sub_100171738((char *)(v51 > 1), v52 + 1, 1, v18);
  *((_QWORD *)v18 + 2) = v52 + 1;
  *(Swift::String *)&v18[16 * v52 + 32] = v50;
  v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieInformationSentSummaryItemsLocationKey);
  v55 = v54;
  v56 = objc_msgSend(v46, "mainBundle");
  v77._countAndFlagsBits = 0xD000000000000070;
  v77._object = (void *)0x800000010026B5B0;
  v57._object = (void *)0x800000010026B590;
  v57._countAndFlagsBits = 0xD000000000000010;
  v58._countAndFlagsBits = 0;
  v58._object = (void *)0xE000000000000000;
  v59 = NSLocalizedString(_:tableName:bundle:value:comment:)(v57, (Swift::String_optional)0, (NSBundle)v56, v58, v77);

  *(_QWORD *)(v4 - 96) = &type metadata for String;
  *(Swift::String *)(v4 - 120) = v59;
  sub_10003E704((_OWORD *)(v4 - 120), (_OWORD *)(v4 - 152));
  v60 = swift_isUniquelyReferenced_nonNull_native(v29);
  *(_QWORD *)(v4 - 160) = v29;
  sub_10020CAD4((_OWORD *)(v4 - 152), v53, v55, v60);
  v61 = *(_QWORD *)(v4 - 160);
  swift_bridgeObjectRelease(v55);
  swift_bridgeObjectRelease(0x8000000000000000);
  v62 = sub_100003DB8((uint64_t *)&unk_100318F28);
  inited = swift_initStackObject(v62, &v70);
  *(_OWORD *)(inited + 16) = xmmword_10024EEB0;
  *(_QWORD *)(inited + 32) = 0x795474726F706572;
  *(_QWORD *)(inited + 40) = 0xEA00000000006570;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(Swift::String *)(inited + 48) = v9;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieEmergencyTypeKey);
  *(_QWORD *)(inited + 88) = v64;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(Swift::String *)(inited + 96) = v9;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieInformationSentSummaryItemsKey);
  *(_QWORD *)(inited + 136) = v65;
  *(_QWORD *)(inited + 168) = sub_100003DB8(&qword_100317980);
  *(_QWORD *)(inited + 144) = v18;
  *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieInformationSentSummaryItemsSetKey);
  *(_QWORD *)(inited + 184) = v66;
  *(_QWORD *)(inited + 216) = sub_100003DB8(&qword_100321AB8);
  *(_QWORD *)(inited + 192) = v61;
  swift_bridgeObjectRetain(v9._object);
  return sub_10022499C(inited);
}

unint64_t sub_100144E60(uint64_t a1, __n128 a2)
{
  char **v2;
  const char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void *object;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t countAndFlagsBits;
  uint64_t v16;
  __n128 v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  char **p_name;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  Swift::String v40;
  Swift::String_optional v41;
  Swift::String v42;
  Swift::String v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  Swift::String v49;
  Swift::String_optional v50;
  Swift::String v51;
  Swift::String v52;
  char isUniquelyReferenced_nonNull_native;
  id v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t inited;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v75;
  uint64_t v76;
  uint64_t comment;
  uint64_t comment_8;
  unint64_t v79;
  char v80[24];
  char v81[176];
  unint64_t v82;
  _OWORD v83[2];
  Swift::String v84;
  const char *v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;
  Swift::String v89;

  v2 = (char **)(&ResourceBundleClass + 24);
  v3 = (const char *)&type metadata for String;
  if (!a1)
  {
    if (qword_100315890 != -1)
      swift_once(&qword_100315890, sub_1000D97D4);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_10000D744(v26, (uint64_t)qword_10033FE68);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Questionnaire state is not defined for roadside report", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    v12 = (char *)&_swiftEmptyArrayStorage;
    v21 = sub_10022499C((uint64_t)&_swiftEmptyArrayStorage);
    comment_8 = 0;
    v79 = 0xE000000000000000;
    p_name = (char **)(&ResourceBundleClass + 24);
LABEL_38:
    v7 = (char *)objc_opt_self(NSBundle);
    v54 = objc_msgSend(v7, p_name[72]);
    v88._countAndFlagsBits = 0xD000000000000070;
    v8 = (unint64_t)"Current Location";
    v88._object = (void *)0x800000010026B5B0;
    v13 = (unint64_t)"_lastTransmissionProgress";
    v55._object = (void *)0x800000010026B590;
    v55._countAndFlagsBits = 0xD000000000000010;
    v56._countAndFlagsBits = 0;
    v56._object = (void *)0xE000000000000000;
    v57 = NSLocalizedString(_:tableName:bundle:value:comment:)(v55, (Swift::String_optional)0, (NSBundle)v54, v56, v88);
    countAndFlagsBits = v57._countAndFlagsBits;
    object = v57._object;

    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      goto LABEL_43;
    goto LABEL_39;
  }
  v4 = a1;
  swift_retain_n(a1, a2);
  v5 = sub_1000B7720();
  v6 = v5;
  v3 = (const char *)v5[2];
  if (!v3)
  {
    swift_release(v4);
    swift_bridgeObjectRelease(v6);
    comment_8 = 0;
    v20 = 0xE000000000000000;
    v3 = (const char *)&type metadata for String;
LABEL_25:
    swift_beginAccess(v4 + 48, v80, 0, 0);
    v32 = *(_QWORD *)(v4 + 64);
    v79 = v20;
    if (*(_QWORD *)(v32 + 16) && (v33 = sub_10017D294(5), (v34 & 1) != 0))
    {
      v35 = v4;
      sub_10008CAC4(*(_QWORD *)(v32 + 56) + 32 * v33, (uint64_t)&v84);
      if (swift_dynamicCast(v83, &v84, (char *)&type metadata for Any + 8, &type metadata for String, 6))
      {
        v36 = *((_QWORD *)&v83[0] + 1);
        v37 = *(_QWORD *)&v83[0] & 0xFFFFFFFFFFFFLL;
LABEL_31:
        swift_bridgeObjectRelease(v36);
        swift_release(v35);
        if ((v36 & 0x2000000000000000) != 0)
          v37 = HIBYTE(v36) & 0xF;
        v12 = (char *)&_swiftEmptyArrayStorage;
        v21 = sub_10022499C((uint64_t)&_swiftEmptyArrayStorage);
        if (v37)
        {
          v38 = (void *)objc_opt_self(NSBundle);
          v39 = objc_msgSend(v38, v2[72]);
          v86._countAndFlagsBits = 0xD00000000000006CLL;
          v86._object = (void *)0x800000010026B630;
          v40._countAndFlagsBits = 0x754E20656E6F6850;
          v40._object = (void *)0xEC0000007265626DLL;
          v41.value._countAndFlagsBits = 0xD000000000000012;
          v41.value._object = (void *)0x80000001002621B0;
          v42._countAndFlagsBits = 0;
          v42._object = (void *)0xE000000000000000;
          v43 = NSLocalizedString(_:tableName:bundle:value:comment:)(v40, v41, (NSBundle)v39, v42, v86);

          v12 = sub_100171738(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
          v45 = *((_QWORD *)v12 + 2);
          v44 = *((_QWORD *)v12 + 3);
          if (v45 >= v44 >> 1)
            v12 = sub_100171738((char *)(v44 > 1), v45 + 1, 1, v12);
          *((_QWORD *)v12 + 2) = v45 + 1;
          *(Swift::String *)&v12[16 * v45 + 32] = v43;
          v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewiePhoneNumberKey);
          v47 = v46;
          p_name = &ResourceBundleClass.name;
          v48 = objc_msgSend(v38, "mainBundle");
          v87._object = (void *)0x800000010026B630;
          v49._countAndFlagsBits = 0x754E20656E6F6850;
          v49._object = (void *)0xEC0000007265626DLL;
          v50.value._countAndFlagsBits = 0xD000000000000012;
          v50.value._object = (void *)0x80000001002621B0;
          v51._countAndFlagsBits = 0;
          v51._object = (void *)0xE000000000000000;
          v87._countAndFlagsBits = 0xD00000000000006CLL;
          v52 = NSLocalizedString(_:tableName:bundle:value:comment:)(v49, v50, (NSBundle)v48, v51, v87);

          v3 = (const char *)&type metadata for String;
          v85 = (const char *)&type metadata for String;
          v84 = v52;
          sub_10003E704(&v84, v83);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
          v82 = v21;
          sub_10020CAD4(v83, v76, v47, isUniquelyReferenced_nonNull_native);
          v21 = v82;
          swift_bridgeObjectRelease(v47);
          swift_bridgeObjectRelease(0x8000000000000000);
        }
        else
        {
          p_name = v2;
        }
        goto LABEL_38;
      }
    }
    else
    {
      v35 = v4;
    }
    v37 = 0;
    v36 = 0xE000000000000000;
    goto LABEL_31;
  }
  v7 = (char *)(v5 + 4);
  v75 = v5;
  comment = v4;
  v79 = *(_QWORD *)(v4 + 264);
  swift_bridgeObjectRetain(v5);
  v8 = 0;
  while (1)
  {
    v9 = *(_QWORD *)(v79 + 104);
    if (!*(_QWORD *)(v9 + 16))
      goto LABEL_5;
    v10 = (uint64_t *)&v7[88 * v8];
    object = (void *)v10[3];
    v12 = (char *)v10[7];
    comment_8 = v10[6];
    v13 = v10[10];
    v14 = v10[5];
    v16 = *v10;
    countAndFlagsBits = v10[1];
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain_n(countAndFlagsBits, 2, v17);
    swift_bridgeObjectRetain(object);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v12);
    v18 = sub_10017D3B0(v16, countAndFlagsBits);
    if ((v19 & 1) != 0)
      break;
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(object);
    swift_bridgeObjectRelease_n(countAndFlagsBits, 2);
LABEL_5:
    if ((const char *)++v8 == v3)
    {
      v4 = comment;
      swift_release(comment);
      swift_bridgeObjectRelease_n(v75, 2);
      comment_8 = 0;
      v20 = 0xE000000000000000;
      goto LABEL_24;
    }
  }
  v20 = (unint64_t)v12;
  v21 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v18);
  swift_retain(v21);
  swift_bridgeObjectRelease(countAndFlagsBits);
  v22 = *(_QWORD *)(v21 + 104);
  v23 = *(_QWORD *)(v22 + 16);
  if (!v23)
    goto LABEL_15;
  if (*(_BYTE *)(v22 + 32) == 1)
  {
LABEL_21:
    swift_bridgeObjectRelease(v75);
    swift_release(v21);
    swift_bridgeObjectRelease(v13);
    v4 = comment;
    swift_release(comment);
    swift_bridgeObjectRelease(v75);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(object);
    swift_bridgeObjectRelease(countAndFlagsBits);
LABEL_24:
    v3 = (const char *)&type metadata for String;
    v2 = &ResourceBundleClass.name;
    goto LABEL_25;
  }
  if (v23 == 1)
  {
LABEL_15:
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(object);
    swift_bridgeObjectRelease(countAndFlagsBits);
    swift_release(v21);
    goto LABEL_5;
  }
  v24 = 33;
  while (1)
  {
    v25 = v24 - 31;
    if (__OFADD__(v24 - 32, 1))
      break;
    if (*(_BYTE *)(v22 + v24) == 1)
      goto LABEL_21;
    ++v24;
    if (v25 == v23)
      goto LABEL_15;
  }
  __break(1u);
LABEL_43:
  v12 = sub_100171738(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
LABEL_39:
  v59 = *((_QWORD *)v12 + 2);
  v58 = *((_QWORD *)v12 + 3);
  if (v59 >= v58 >> 1)
    v12 = sub_100171738((char *)(v58 > 1), v59 + 1, 1, v12);
  *((_QWORD *)v12 + 2) = v59 + 1;
  v60 = &v12[16 * v59];
  *((_QWORD *)v60 + 4) = countAndFlagsBits;
  *((_QWORD *)v60 + 5) = object;
  v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieInformationSentSummaryItemsLocationKey);
  v63 = v62;
  v64 = objc_msgSend(v7, "mainBundle");
  v89._countAndFlagsBits = 0xD000000000000070;
  v89._object = (void *)(v8 | 0x8000000000000000);
  v65._object = (void *)(v13 | 0x8000000000000000);
  v65._countAndFlagsBits = 0xD000000000000010;
  v66._countAndFlagsBits = 0;
  v66._object = (void *)0xE000000000000000;
  v67 = NSLocalizedString(_:tableName:bundle:value:comment:)(v65, (Swift::String_optional)0, (NSBundle)v64, v66, v89);

  v85 = v3;
  v84 = v67;
  sub_10003E704(&v84, v83);
  v68 = swift_isUniquelyReferenced_nonNull_native(v21);
  v82 = v21;
  sub_10020CAD4(v83, v61, v63, v68);
  v69 = v82;
  swift_bridgeObjectRelease(v63);
  swift_bridgeObjectRelease(0x8000000000000000);
  v70 = sub_100003DB8((uint64_t *)&unk_100318F28);
  inited = swift_initStackObject(v70, v81);
  *(_OWORD *)(inited + 16) = xmmword_10024FB80;
  *(_QWORD *)(inited + 32) = 0x795474726F706572;
  *(_QWORD *)(inited + 40) = 0xEA00000000006570;
  *(_QWORD *)(inited + 72) = v3;
  *(_QWORD *)(inited + 48) = comment_8;
  *(_QWORD *)(inited + 56) = v79;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieInformationSentSummaryItemsKey);
  *(_QWORD *)(inited + 88) = v72;
  *(_QWORD *)(inited + 120) = sub_100003DB8(&qword_100317980);
  *(_QWORD *)(inited + 96) = v12;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieInformationSentSummaryItemsSetKey);
  *(_QWORD *)(inited + 136) = v73;
  *(_QWORD *)(inited + 168) = sub_100003DB8(&qword_100321AB8);
  *(_QWORD *)(inited + 144) = v69;
  return sub_10022499C(inited);
}

void sub_100145678()
{
  uint64_t v0;

  sub_1001435BC(*(_QWORD *)(v0 + 16), "startRoadsideAssistanceThread - sending dictionary - %{private}s", "startRoadsideAssistanceThread - sent");
}

uint64_t sub_1001456A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TransmissionProgress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001456E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100316B68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014572C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_10014573C()
{
  uint64_t v0;

  return sub_100141560(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_100145748()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10014576C()
{
  uint64_t v0;

  sub_1001435BC(*(_QWORD *)(v0 + 16), "startEmergencyThread - sending emergency dictionary - %{private}s", "startEmergencyThread - sent");
}

uint64_t sub_100145794(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100316B68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t destroy for MessagesAgent.RoadsideStartMessageSent(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for MessagesAgent.RoadsideStartMessageSent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for MessagesAgent.RoadsideStartMessageSent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t assignWithTake for MessagesAgent.RoadsideStartMessageSent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagesAgent.RoadsideStartMessageSent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MessagesAgent.RoadsideStartMessageSent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MessagesAgent.RoadsideStartMessageSent()
{
  return &type metadata for MessagesAgent.RoadsideStartMessageSent;
}

uint64_t destroy for PreferredBannerLayout(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
}

uint64_t initializeWithCopy for MessagesAgent.EmergencyStartMessageSent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for MessagesAgent.EmergencyStartMessageSent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t assignWithTake for MessagesAgent.EmergencyStartMessageSent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagesAgent.EmergencyStartMessageSent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MessagesAgent.EmergencyStartMessageSent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 56) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MessagesAgent.EmergencyStartMessageSent()
{
  return &type metadata for MessagesAgent.EmergencyStartMessageSent;
}

uint64_t sub_100145CE4()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(id, double, double);
  id v18;
  double v19;
  double v20;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;

  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FD60);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v24 = v6;
    *(_DWORD *)v5 = 136446210;
    objc_msgSend(v2, "frame");
    v22 = v7;
    v23[0] = v8;
    v23[1] = v9;
    v23[2] = v10;
    type metadata accessor for CGRect(0);
    v13 = String.init<A>(describing:)(&v22, v11, v12);
    v15 = v14;
    v22 = sub_100172BEC(v13, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "SizeReaderView frame: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v17 = *(void (**)(id, double, double))&v2[OBJC_IVAR____TtC8SOSBuddy16SizeReaderUIView__onSizeChanged];
  v16 = *(_QWORD *)&v2[OBJC_IVAR____TtC8SOSBuddy16SizeReaderUIView__onSizeChanged + 8];
  v18 = objc_msgSend(v2, "frame", swift_retain(v16).n128_f64[0]);
  v17(v18, v19, v20);
  return swift_release(v16);
}

id sub_100145F08()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SizeReaderUIView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SizeReaderUIView()
{
  return objc_opt_self(_TtC8SOSBuddy16SizeReaderUIView);
}

id sub_100145F6C()
{
  double *v0;
  double v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  char *v7;
  id v8;
  objc_super v10;

  v1 = *v0;
  v2 = v0[1];
  v4 = *((_QWORD *)v0 + 2);
  v3 = *((_QWORD *)v0 + 3);
  v5 = (objc_class *)type metadata accessor for SizeReaderUIView();
  v6 = (char *)objc_allocWithZone(v5);
  v7 = &v6[OBJC_IVAR____TtC8SOSBuddy16SizeReaderUIView__onSizeChanged];
  *(_QWORD *)v7 = v4;
  *((_QWORD *)v7 + 1) = v3;
  v10.receiver = v6;
  v10.super_class = v5;
  swift_retain(v3);
  v8 = objc_msgSendSuper2(&v10, "initWithFrame:", 0.0, 0.0, v1, v2);
  objc_msgSend(v8, "setAutoresizingMask:", 16, v10.receiver, v10.super_class);
  return v8;
}

uint64_t sub_10014600C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001461DC();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10014605C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001461DC();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1001460AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001461DC();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t destroy for SizeReaderView(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for SizeReaderView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain(v3);
  return a1;
}

_QWORD *assignWithCopy for SizeReaderView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[3];
  v4 = a1[3];
  a1[2] = a2[2];
  a1[3] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for SizeReaderView(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v4;
  swift_release(v3);
  return a1;
}

ValueMetadata *type metadata accessor for SizeReaderView()
{
  return &type metadata for SizeReaderView;
}

unint64_t sub_100146198()
{
  unint64_t result;

  result = qword_100321B10;
  if (!qword_100321B10)
  {
    result = swift_getWitnessTable(&unk_100258680, &type metadata for SizeReaderView);
    atomic_store(result, (unint64_t *)&qword_100321B10);
  }
  return result;
}

unint64_t sub_1001461DC()
{
  unint64_t result;

  result = qword_100321B18;
  if (!qword_100321B18)
  {
    result = swift_getWitnessTable(&unk_1002586D0, &type metadata for SizeReaderView);
    atomic_store(result, (unint64_t *)&qword_100321B18);
  }
  return result;
}

uint64_t initializeWithCopy for TryOutConnectionToolbarView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  v5 = a2[4];
  *(_QWORD *)(a1 + 32) = v5;
  swift_retain(v3);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for TryOutConnectionToolbarView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v6 = a1[4];
  v7 = a2[4];
  a1[4] = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

uint64_t *assignWithTake for TryOutConnectionToolbarView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  v5 = a1[4];
  a1[4] = a2[4];
  swift_release(v5);
  return a1;
}

ValueMetadata *type metadata accessor for TryOutConnectionToolbarView()
{
  return &type metadata for TryOutConnectionToolbarView;
}

uint64_t sub_10014633C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029BCBC, 1);
}

uint64_t sub_10014634C()
{
  uint64_t result;

  result = sub_100093708(0x7EFFFFu);
  qword_10033FF98 = result;
  return result;
}

uint64_t sub_10014636C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  char v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  double v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v25[126];
  char v26;
  _BYTE v27[759];
  __int128 v28;
  __int128 v29;
  char v30;
  char v31;
  __int128 v32;
  __int128 v33;
  char v34;
  _BYTE v35[744];
  _BYTE v36[760];
  char v37;
  char v38;
  _OWORD v39[61];
  _BYTE v40[1000];

  v1 = sub_100003DB8(&qword_100316A20);
  v3 = __chkstk_darwin(v1, v2);
  v5 = (char *)&v25[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static VerticalAlignment.center.getter(v3);
  sub_100146634(v0, v35);
  v36[752] = 0;
  v7 = memcpy(&v36[7], v35, 0x2E8uLL);
  v8 = static Edge.Set.leading.getter(v7);
  v37 = 1;
  v9 = static Edge.Set.trailing.getter();
  v38 = 1;
  v25[124] = v6;
  v25[125] = 0;
  v26 = 0;
  v10 = memcpy(v27, v36, 0x2EFuLL);
  v27[751] = v8;
  v28 = 0u;
  v29 = 0u;
  v30 = v37;
  v31 = v9;
  v32 = 0u;
  v33 = 0u;
  v34 = 1;
  v11 = static Alignment.center.getter(v10);
  sub_100132F70(0, 1, 0.0, 1, INFINITY, 0, 0x404C000000000000uLL, 0, v39, v13, 0.0, 1, 0.0, 1, v11, v12);
  sub_1001476E0((uint64_t)v35);
  if (qword_1003158F8 != -1)
    swift_once(&qword_1003158F8, sub_10014634C);
  v14 = qword_10033FF98;
  *(_QWORD *)&v15 = swift_retain(qword_10033FF98).n128_u64[0];
  v16 = static Edge.Set.all.getter(v15);
  memcpy(v25, v39, 0x3D0uLL);
  v25[122] = v14;
  LOBYTE(v25[123]) = v16;
  v17 = enum case for DynamicTypeSize.xLarge(_:);
  v18 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v5, v17, v18);
  v19 = sub_1000052EC(&qword_100316A30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v5, v5, v18, v19);
  if ((result & 1) != 0)
  {
    v21 = sub_100003DB8(&qword_100321B20);
    v22 = sub_1001477EC();
    v23 = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    View.dynamicTypeSize<A>(_:)(v5, v21, v1, v22, v23);
    sub_1000EA564((uint64_t)v5);
    memcpy(v40, v25, 0x3D9uLL);
    return sub_100147938((uint64_t)v40);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100146634@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _BYTE v37[448];
  _BYTE __src[448];
  _BYTE v39[456];
  _BYTE v40[587];
  _BYTE v41[7];
  _BYTE v42[7];
  _BYTE v43[7];
  char v44;
  _BYTE v45[7];
  _BYTE __dst[584];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[48];
  void (*v53)(uint64_t@<X8>);
  uint64_t v54;
  __int128 v55;
  _QWORD v56[93];
  _QWORD v57[2];
  char v58;
  _BYTE v59[7];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  _BYTE v66[7];
  uint64_t v67;
  char v68;
  _BYTE v69[7];
  __int128 v70;
  __int128 v71;
  char v72;
  _BYTE v73[7];
  void (*v74)(uint64_t@<X8>);
  uint64_t v75;
  uint64_t (*v76)(uint64_t *);
  uint64_t v77;
  _BYTE v78[600];

  v3 = static VerticalAlignment.center.getter(a1);
  sub_100146A7C(a1, (uint64_t)__src);
  v39[448] = 0;
  memcpy(&v39[7], __src, 0x1B9uLL);
  v34 = v3;
  v35 = 0;
  v36 = 0;
  v4 = memcpy(v37, v39, sizeof(v37));
  v5 = static Alignment.center.getter(v4);
  sub_100133118(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v40, v7, 0.0, 1, 0.0, 1, v5, v6);
  v8 = sub_100147A50((uint64_t)__src);
  v29 = static HorizontalAlignment.center.getter(v8);
  if (qword_1003158F8 != -1)
    swift_once(&qword_1003158F8, sub_10014634C);
  v9 = qword_10033FF98;
  v28 = qword_10033FF98;
  v10 = type metadata accessor for AppEvents();
  v11 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  swift_retain(v9);
  v12 = EnvironmentObject.init()(v10, v11);
  v27 = v13;
  v14 = type metadata accessor for TryOutModel(0);
  v15 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
  v16 = EnvironmentObject.init()(v14, v15);
  v18 = v17;
  v25 = v17;
  v78[0] = 0;
  v19 = State.init(wrappedValue:)(v56, v78, &type metadata for Bool);
  v20 = v56[0];
  v26 = v56[1];
  LOBYTE(v10) = static Edge.Set.leading.getter(v19);
  v21 = *(_OWORD *)(a1 + 16);
  v33 = *(_OWORD *)a1;
  v44 = 0;
  v40[584] = 1;
  *(_DWORD *)v59 = *(_DWORD *)v43;
  *(_DWORD *)v66 = *(_DWORD *)v42;
  *(_DWORD *)&v59[3] = *(_DWORD *)&v43[3];
  *(_DWORD *)&v66[3] = *(_DWORD *)&v42[3];
  *(_DWORD *)v69 = *(_DWORD *)v41;
  *(_DWORD *)&v69[3] = *(_DWORD *)&v41[3];
  v31 = v21;
  v32 = *(_QWORD *)(a1 + 32);
  v22 = swift_allocObject(&unk_1002F2F28, 56, 7);
  v23 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v22 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v22 + 32) = v23;
  *(_QWORD *)(v22 + 48) = *(_QWORD *)(a1 + 32);
  *(_DWORD *)v73 = *(_DWORD *)v45;
  *(_DWORD *)&v73[3] = *(_DWORD *)&v45[3];
  memcpy(__dst, v40, sizeof(__dst));
  v47 = (unint64_t)v29;
  LOBYTE(v48) = 0;
  *(_DWORD *)((char *)&v48 + 1) = *(_DWORD *)v43;
  DWORD1(v48) = *(_DWORD *)&v43[3];
  *((_QWORD *)&v48 + 1) = v12;
  *(_QWORD *)&v49 = v27;
  *((_QWORD *)&v49 + 1) = v16;
  *(_QWORD *)&v50 = v18;
  *((_QWORD *)&v50 + 1) = v28;
  LOBYTE(v51) = v20;
  *(_DWORD *)((char *)&v51 + 1) = *(_DWORD *)v42;
  DWORD1(v51) = *(_DWORD *)&v42[3];
  *((_QWORD *)&v51 + 1) = v26;
  v52[0] = v10;
  *(_DWORD *)&v52[4] = *(_DWORD *)&v41[3];
  *(_DWORD *)&v52[1] = *(_DWORD *)v41;
  memset(&v52[8], 0, 32);
  v52[40] = 1;
  *(_DWORD *)&v52[41] = *(_DWORD *)v45;
  *(_DWORD *)&v52[44] = *(_DWORD *)&v45[3];
  v53 = sub_10002EB40;
  v54 = 0;
  *(_QWORD *)&v55 = sub_100147B24;
  *((_QWORD *)&v55 + 1) = v22;
  memcpy(v56, v40, 0x248uLL);
  *(_OWORD *)&v56[85] = *(_OWORD *)&v52[16];
  *(_OWORD *)&v56[87] = *(_OWORD *)&v52[32];
  *(_OWORD *)&v56[89] = (unint64_t)sub_10002EB40;
  *(_OWORD *)&v56[91] = v55;
  *(_OWORD *)&v56[77] = v49;
  *(_OWORD *)&v56[79] = v50;
  *(_OWORD *)&v56[81] = v51;
  *(_OWORD *)&v56[83] = *(_OWORD *)v52;
  *(_OWORD *)&v56[73] = (unint64_t)v29;
  *(_OWORD *)&v56[75] = v48;
  memcpy(a2, v56, 0x2E8uLL);
  v57[0] = v29;
  v57[1] = 0;
  v58 = 0;
  v60 = v12;
  v61 = v27;
  v62 = v16;
  v63 = v25;
  v64 = v28;
  v65 = v20;
  v67 = v26;
  v68 = v10;
  v70 = 0u;
  v71 = 0u;
  v72 = 1;
  v74 = sub_10002EB40;
  v75 = 0;
  v76 = sub_100147B24;
  v77 = v22;
  sub_100135540((uint64_t)__dst);
  sub_100147B2C(&v47);
  sub_100031A88(&v33);
  sub_100147BA0((uint64_t)&v31);
  sub_100147BC8(v57);
  memcpy(v78, v40, 0x248uLL);
  return sub_100147C3C((uint64_t)v78);
}

uint64_t sub_100146A7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  double v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  char v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[13];
  _OWORD v41[2];
  _BYTE v42[241];
  char v43;
  char v44;
  _QWORD __src[39];
  __int128 v46;
  _BYTE v47[17];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char v62;
  char v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;

  v46 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)v47 = *(_QWORD *)(a1 + 32);
  v4 = sub_100003DB8(&qword_10031B660);
  v5 = State.wrappedValue.getter(__src, v4);
  v6 = *(double *)__src;
  v7 = static Alignment.center.getter(v5);
  v10 = v9;
  if (v6 < 0.0)
  {
    v11 = static os_log_type_t.fault.getter(v8);
    v12 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

  }
  v13 = _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v69, 0, 0, 0, 1, *(_QWORD *)&v6, 0, 0, 1, 0, 1, 0, 1, v7, v10);
  v31 = v70;
  v38 = v71;
  v39 = v69;
  v37 = v73;
  v36 = v75;
  v14 = v78;
  v34 = v79;
  v35 = v77;
  v15 = v80;
  v32 = v82;
  v33 = v81;
  v30 = v72;
  v29 = v74;
  v28 = v76;
  v16 = static HorizontalAlignment.center.getter(v13);
  sub_100146E6C((uint64_t *)a1, (uint64_t)v40);
  *(_OWORD *)&v42[183] = v40[11];
  *(_OWORD *)&v42[199] = v40[12];
  *(_OWORD *)&v42[215] = v41[0];
  *(_OWORD *)&v42[225] = *(_OWORD *)((char *)v41 + 10);
  *(_OWORD *)&v42[119] = v40[7];
  *(_OWORD *)&v42[135] = v40[8];
  *(_OWORD *)&v42[151] = v40[9];
  *(_OWORD *)&v42[167] = v40[10];
  *(_OWORD *)&v42[55] = v40[3];
  *(_OWORD *)&v42[71] = v40[4];
  *(_OWORD *)&v42[87] = v40[5];
  *(_OWORD *)&v42[103] = v40[6];
  *(_OWORD *)&v42[7] = v40[0];
  *(_OWORD *)&v42[23] = v40[1];
  v43 = 1;
  *(_OWORD *)&v42[39] = v40[2];
  v18 = static Edge.Set.bottom.getter(v17);
  v19 = EdgeInsets.init(_all:)(4.0);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  *(_OWORD *)((char *)&__src[26] + 1) = *(_OWORD *)&v42[192];
  *(_OWORD *)((char *)&__src[28] + 1) = *(_OWORD *)&v42[208];
  *(_OWORD *)((char *)&__src[30] + 1) = *(_OWORD *)&v42[224];
  *(_OWORD *)((char *)&__src[18] + 1) = *(_OWORD *)&v42[128];
  *(_OWORD *)((char *)&__src[20] + 1) = *(_OWORD *)&v42[144];
  *(_OWORD *)((char *)&__src[22] + 1) = *(_OWORD *)&v42[160];
  *(_OWORD *)((char *)&__src[24] + 1) = *(_OWORD *)&v42[176];
  *(_OWORD *)((char *)&__src[10] + 1) = *(_OWORD *)&v42[64];
  *(_OWORD *)((char *)&__src[12] + 1) = *(_OWORD *)&v42[80];
  *(_OWORD *)((char *)&__src[14] + 1) = *(_OWORD *)&v42[96];
  *(_OWORD *)((char *)&__src[16] + 1) = *(_OWORD *)&v42[112];
  *(_OWORD *)((char *)&__src[2] + 1) = *(_OWORD *)v42;
  *(_OWORD *)((char *)&__src[4] + 1) = *(_OWORD *)&v42[16];
  *(_OWORD *)((char *)&__src[6] + 1) = *(_OWORD *)&v42[32];
  v44 = 0;
  __src[0] = v16;
  __src[1] = 0;
  LOBYTE(__src[2]) = 1;
  BYTE1(__src[32]) = v42[240];
  *(_OWORD *)((char *)&__src[8] + 1) = *(_OWORD *)&v42[48];
  LOBYTE(__src[33]) = v18;
  *(double *)&__src[34] = v19;
  __src[35] = v20;
  __src[36] = v22;
  __src[37] = v24;
  LOBYTE(__src[38]) = 0;
  memcpy((void *)(a2 + 136), __src, 0x131uLL);
  v59 = *(_OWORD *)&v42[192];
  v60 = *(_OWORD *)&v42[208];
  v61 = *(_OWORD *)&v42[224];
  v55 = *(_OWORD *)&v42[128];
  v56 = *(_OWORD *)&v42[144];
  v57 = *(_OWORD *)&v42[160];
  v58 = *(_OWORD *)&v42[176];
  v51 = *(_OWORD *)&v42[64];
  v52 = *(_OWORD *)&v42[80];
  v53 = *(_OWORD *)&v42[96];
  v54 = *(_OWORD *)&v42[112];
  *(_OWORD *)&v47[1] = *(_OWORD *)v42;
  v48 = *(_OWORD *)&v42[16];
  v26 = *(_OWORD *)&v42[48];
  v49 = *(_OWORD *)&v42[32];
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v39;
  *(_BYTE *)(a2 + 24) = v31;
  *(_QWORD *)(a2 + 32) = v38;
  *(_BYTE *)(a2 + 40) = v30;
  *(_QWORD *)(a2 + 48) = v37;
  *(_BYTE *)(a2 + 56) = v29;
  *(_QWORD *)(a2 + 64) = v36;
  *(_BYTE *)(a2 + 72) = v28;
  *(_QWORD *)(a2 + 80) = v35;
  *(_BYTE *)(a2 + 88) = v14;
  *(_QWORD *)(a2 + 96) = v34;
  *(_BYTE *)(a2 + 104) = v15;
  *(_QWORD *)(a2 + 112) = v33;
  *(_QWORD *)(a2 + 120) = v32;
  *(_QWORD *)(a2 + 128) = 0xBFF0000000000000;
  v46 = (unint64_t)v16;
  v47[0] = 1;
  v62 = v42[240];
  v50 = v26;
  v63 = v18;
  v64 = v19;
  v65 = v21;
  v66 = v23;
  v67 = v25;
  v68 = 0;
  sub_100147CE4((uint64_t)__src);
  return sub_100147D8C((uint64_t)&v46);
}

void sub_100146E6C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  unint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t KeyPath;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  char v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  double v73;
  double v74;
  char object;
  char v76;
  id v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  uint64_t countAndFlagsBits;
  uint64_t v100;
  char v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  Swift::String v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  Swift::String v118;
  Swift::String v119;

  v4 = (void *)objc_opt_self(NSBundle);
  v5 = objc_msgSend(v4, "mainBundle");
  v118._countAndFlagsBits = 0xD00000000000004ELL;
  v118._object = (void *)0x8000000100265F80;
  v6._object = (void *)0x8000000100265F60;
  v6._countAndFlagsBits = 0xD000000000000012;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v118);

  v113 = v8;
  v9 = sub_10002B3F4();
  v11 = Text.init<A>(_:)(&v113, &type metadata for String, v9, v10);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = static Font.headline.getter(v11);
  static Font.Weight.semibold.getter(v18);
  v19 = Font.weight(_:)(v18);
  swift_release(v18);
  v20 = Text.font(_:)(v19, v11, v13, v17, v15);
  v104 = v21;
  v105 = v20;
  v101 = v22;
  v24 = v23;
  swift_release(v19);
  sub_10002B438(v11, v13, v17);
  swift_bridgeObjectRelease(v15);
  v25 = *a1;
  if (*a1)
  {
    v26 = *(id *)(v25 + 112);
    v98 = static UIContentSizeCategory.>= infix(_:_:)(v26, UIContentSizeCategoryAccessibilityExtraLarge);

    KeyPath = swift_getKeyPath(&unk_1002587D0);
    v28 = *(id *)(v25 + 112);
    v29 = static Alignment.center.getter(v28);
    v31 = v30;
    v32 = static UIContentSizeCategory.>= infix(_:_:)(v28, UIContentSizeCategoryAccessibilityExtraLarge);
    v106 = v24;
    v103 = KeyPath;
    if ((v32 & 1) != 0)
    {
      v33 = static Alignment.center.getter(v32);
      v35 = static Alignment.== infix(_:_:)(v29, v31, v33, v34);
      if ((v35 & 1) != 0)
      {
        v29 = static Alignment.leading.getter(v35, v36);
        v31 = v37;
      }
    }

    _FrameLayout.init(width:height:alignment:)(&v107, 0, 1, 0, 1, v29, v31);
    v97 = v107;
    v96 = v108;
    v95 = v109;
    v94 = v110;
    v92 = v112;
    v93 = v111;
    v38 = *(id *)(v25 + 112);
    v88 = static UIContentSizeCategory.>= infix(_:_:)(v38, UIContentSizeCategoryAccessibilityExtraLarge);

    v100 = swift_getKeyPath(&unk_100258800);
    v39 = objc_msgSend(v4, "mainBundle");
    v40._countAndFlagsBits = 0xD000000000000028;
    v119._countAndFlagsBits = 0xD00000000000003FLL;
    v119._object = (void *)0x800000010026B940;
    v40._object = (void *)0x800000010026B910;
    v41._countAndFlagsBits = 0;
    v41._object = (void *)0xE000000000000000;
    v42 = NSLocalizedString(_:tableName:bundle:value:comment:)(v40, (Swift::String_optional)0, (NSBundle)v39, v41, v119);

    v113 = v42;
    v44 = Text.init<A>(_:)(&v113, &type metadata for String, v9, v43);
    v46 = v45;
    v48 = v47;
    v50 = v49 & 1;
    v51 = static Font.caption.getter(v44, v45);
    static Font.Weight.semibold.getter(v51);
    v52 = Font.weight(_:)(v51);
    swift_release(v51);
    v53 = Text.font(_:)(v52, v44, v46, v50, v48);
    v90 = v54;
    v91 = v53;
    v85 = v55;
    v57 = v56;
    swift_release(v52);
    sub_10002B438(v44, v46, v50);
    swift_bridgeObjectRelease(v48);
    v58 = *(id *)(v25 + 112);
    v59 = static UIContentSizeCategory.>= infix(_:_:)(v58, UIContentSizeCategoryAccessibilityExtraLarge);

    v60 = swift_getKeyPath(&unk_1002587D0);
    v61 = *(id *)(v25 + 112);
    v62 = static Alignment.center.getter(v61);
    v64 = v63;
    v65 = static UIContentSizeCategory.>= infix(_:_:)(v61, UIContentSizeCategoryAccessibilityExtraLarge);
    v87 = v60;
    if ((v65 & 1) != 0)
    {
      v66 = static Alignment.center.getter(v65);
      v68 = static Alignment.== infix(_:_:)(v62, v64, v66, v67);
      if ((v68 & 1) != 0)
      {
        v62 = static Alignment.leading.getter(v68, v69);
        v64 = v70;
      }
    }

    v71 = v85 & 1;
    v72 = v101 & 1;
    v102 = (v59 & 1) == 0;
    v73 = 0.5;
    if ((v88 & 1) != 0)
      v74 = 1.0;
    else
      v74 = 0.5;
    v83 = (v98 & 1) == 0;
    _FrameLayout.init(width:height:alignment:)(&v113, 0, 1, 0, 1, v62, v64);
    countAndFlagsBits = v113._countAndFlagsBits;
    object = (char)v113._object;
    v89 = v114;
    v76 = v115;
    v84 = v117;
    v86 = v116;
    v77 = *(id *)(v25 + 112);
    v78 = static UIContentSizeCategory.>= infix(_:_:)(v77, UIContentSizeCategoryAccessibilityExtraLarge);

    if ((v78 & 1) != 0)
      v73 = 1.0;
    v79 = swift_getKeyPath(&unk_100258800);
    *(_QWORD *)a2 = v105;
    *(_QWORD *)(a2 + 8) = v104;
    *(_BYTE *)(a2 + 16) = v72;
    *(_QWORD *)(a2 + 24) = v106;
    *(_QWORD *)(a2 + 32) = v103;
    *(_BYTE *)(a2 + 40) = v83;
    *(_QWORD *)(a2 + 48) = v97;
    *(_BYTE *)(a2 + 56) = v96;
    *(_QWORD *)(a2 + 64) = v95;
    *(_BYTE *)(a2 + 72) = v94;
    *(_QWORD *)(a2 + 80) = v93;
    *(_QWORD *)(a2 + 88) = v92;
    *(_QWORD *)(a2 + 96) = v100;
    *(double *)(a2 + 104) = v74;
    *(_WORD *)(a2 + 112) = 256;
    *(_QWORD *)(a2 + 120) = v91;
    *(_QWORD *)(a2 + 128) = v90;
    *(_BYTE *)(a2 + 136) = v71;
    *(_QWORD *)(a2 + 144) = v57;
    *(_QWORD *)(a2 + 152) = v87;
    *(_BYTE *)(a2 + 160) = v102;
    *(_QWORD *)(a2 + 168) = countAndFlagsBits;
    *(_BYTE *)(a2 + 176) = object;
    *(_QWORD *)(a2 + 184) = v89;
    *(_BYTE *)(a2 + 192) = v76;
    *(_QWORD *)(a2 + 200) = v86;
    *(_QWORD *)(a2 + 208) = v84;
    *(_QWORD *)(a2 + 216) = v79;
    *(double *)(a2 + 224) = v73;
    *(_WORD *)(a2 + 232) = 256;
    sub_10002B750(v105, v104, v72);
    swift_bridgeObjectRetain(v106);
    swift_retain(v103);
    swift_retain(v100);
    sub_10002B750(v91, v90, v71);
    swift_bridgeObjectRetain(v57);
    swift_retain(v87);
    swift_retain(v79);
    sub_10002B438(v91, v90, v71);
    swift_release(v79);
    swift_release(v87);
    swift_bridgeObjectRelease(v57);
    sub_10002B438(v105, v104, v72);
    swift_release(v100);
    swift_release(v103);
    swift_bridgeObjectRelease(v106);
  }
  else
  {
    v80 = a1[1];
    v81 = type metadata accessor for UIMetrics();
    v82 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, v80, v81, v82);
    __break(1u);
  }
}

uint64_t sub_1001474E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18[2];
  __int128 v19;
  uint64_t v20;

  v3 = *a1;
  v4 = a1[1];
  if (qword_1003158D8 != -1)
    swift_once(&qword_1003158D8, sub_1000D9904);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10000D744(v5, (uint64_t)qword_10033FF40);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v18[0] = v10;
    *(_DWORD *)v9 = 136446210;
    *(_QWORD *)&v19 = v3;
    *((_QWORD *)&v19 + 1) = v4;
    type metadata accessor for CGSize(0);
    v13 = String.init<A>(describing:)(&v19, v11, v12);
    v15 = v14;
    *(_QWORD *)&v19 = sub_100172BEC(v13, v14, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, (char *)&v19 + 8, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "End button size changed: %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }

  v19 = *(_OWORD *)(a2 + 16);
  v20 = *(_QWORD *)(a2 + 32);
  v18[0] = v3;
  v18[1] = v4;
  v16 = sub_100003DB8(&qword_10031B660);
  return State.wrappedValue.setter(v18, v16);
}

uint64_t sub_1001476A8()
{
  return sub_10014636C();
}

uint64_t sub_1001476E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 208);
  v3 = *(_QWORD *)(a1 + 216);
  v4 = *(_QWORD *)(a1 + 280);
  v5 = *(_QWORD *)(a1 + 304);
  v6 = *(_QWORD *)(a1 + 312);
  v7 = *(_BYTE *)(a1 + 320);
  v13 = *(_QWORD *)(a1 + 336);
  v14 = *(_QWORD *)(a1 + 328);
  v12 = *(_QWORD *)(a1 + 400);
  v15 = *(_QWORD *)(a1 + 608);
  v16 = *(_QWORD *)(a1 + 624);
  v8 = *(_QWORD *)(a1 + 640);
  v17 = *(_QWORD *)(a1 + 656);
  v9 = *(_QWORD *)(a1 + 720);
  v10 = *(_QWORD *)(a1 + 736);
  sub_10002B438(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_BYTE *)(a1 + 200));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  sub_10002B438(v5, v6, v7);
  swift_release(v10);
  swift_release(v9);
  swift_release(v8);
  swift_release(v12);
  swift_release(v13);
  swift_bridgeObjectRelease(v14);
  swift_release(v15);
  swift_release(v16);
  swift_release(v17);
  return a1;
}

unint64_t sub_1001477EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100321B28;
  if (!qword_100321B28)
  {
    v1 = sub_100007FAC(&qword_100321B20);
    sub_10002B614(&qword_100321B30, &qword_100321B38, (void (*)(void))sub_100147890);
    sub_1000084FC(&qword_10031F3D0, &qword_10031F3D8, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100321B28);
  }
  return result;
}

uint64_t sub_100147890()
{
  return sub_10002B614(&qword_100321B40, &qword_100321B48, (void (*)(void))sub_1001478B4);
}

unint64_t sub_1001478B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100321B50;
  if (!qword_100321B50)
  {
    v1 = sub_100007FAC(&qword_100321B58);
    sub_1000084FC(&qword_100321B60, &qword_100321B68, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100321B50);
  }
  return result;
}

uint64_t sub_100147938(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 232);
  v3 = *(_QWORD *)(a1 + 240);
  v4 = *(_QWORD *)(a1 + 304);
  v5 = *(_QWORD *)(a1 + 328);
  v6 = *(_QWORD *)(a1 + 336);
  v7 = *(_BYTE *)(a1 + 344);
  v14 = *(_QWORD *)(a1 + 360);
  v15 = *(_QWORD *)(a1 + 352);
  v16 = *(_QWORD *)(a1 + 632);
  v17 = *(_QWORD *)(a1 + 648);
  v12 = *(_QWORD *)(a1 + 664);
  v13 = *(_QWORD *)(a1 + 424);
  v18 = *(_QWORD *)(a1 + 680);
  v8 = *(_QWORD *)(a1 + 744);
  v9 = *(_QWORD *)(a1 + 760);
  v10 = *(_QWORD *)(a1 + 976);
  sub_10002B438(*(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), *(_BYTE *)(a1 + 224));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  sub_10002B438(v5, v6, v7);
  swift_release(v10);
  swift_release(v9);
  swift_release(v8);
  swift_release(v12);
  swift_release(v13);
  swift_release(v14);
  swift_bridgeObjectRelease(v15);
  swift_release(v16);
  swift_release(v17);
  swift_release(v18);
  return a1;
}

uint64_t sub_100147A50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 184);
  v3 = *(_QWORD *)(a1 + 192);
  v4 = *(_QWORD *)(a1 + 256);
  v5 = *(_QWORD *)(a1 + 280);
  v6 = *(_QWORD *)(a1 + 288);
  v7 = *(_BYTE *)(a1 + 296);
  v8 = *(_QWORD *)(a1 + 304);
  v9 = *(_QWORD *)(a1 + 312);
  v10 = *(_QWORD *)(a1 + 376);
  sub_10002B438(*(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(_BYTE *)(a1 + 176));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  sub_10002B438(v5, v6, v7);
  swift_release(v10);
  swift_release(v9);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_100147AF8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100147B24(uint64_t *a1)
{
  uint64_t v1;

  return sub_1001474E4(a1, v1 + 16);
}

_QWORD *sub_100147B2C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[7];
  v5 = a1[17];
  v6 = a1[19];
  swift_retain(a1[9]);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t sub_100147BA0(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 16));
  return a1;
}

_QWORD *sub_100147BC8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[7];
  v5 = a1[9];
  v6 = a1[17];
  swift_release(a1[19]);
  swift_release(v6);
  swift_release(v4);
  swift_release(v2);
  swift_release(v3);
  swift_release(v5);
  return a1;
}

uint64_t sub_100147C3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 208);
  v3 = *(_QWORD *)(a1 + 216);
  v4 = *(_QWORD *)(a1 + 280);
  v5 = *(_QWORD *)(a1 + 304);
  v6 = *(_QWORD *)(a1 + 312);
  v7 = *(_BYTE *)(a1 + 320);
  v8 = *(_QWORD *)(a1 + 328);
  v9 = *(_QWORD *)(a1 + 336);
  v10 = *(_QWORD *)(a1 + 400);
  sub_10002B438(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_BYTE *)(a1 + 200));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  sub_10002B438(v5, v6, v7);
  swift_release(v10);
  swift_release(v9);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_100147CE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 152);
  v7 = *(_BYTE *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(_QWORD *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 240);
  sub_10002B750(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  sub_10002B750(v5, v6, v7);
  swift_bridgeObjectRetain(v8);
  swift_retain(v9);
  swift_retain(v10);
  return a1;
}

uint64_t sub_100147D8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 152);
  v7 = *(_BYTE *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(_QWORD *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 240);
  sub_10002B438(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  sub_10002B438(v5, v6, v7);
  swift_release(v10);
  swift_release(v9);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_100147E44()
{
  _QWORD v1[4];

  v1[0] = sub_100007FAC(&qword_100321B20);
  v1[1] = sub_100007FAC(&qword_100316A20);
  v1[2] = sub_1001477EC();
  v1[3] = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
}

ValueMetadata *type metadata accessor for ConnectionAssitantBannerView()
{
  return &type metadata for ConnectionAssitantBannerView;
}

uint64_t sub_100147EDC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029BD30, 1);
}

uint64_t sub_100147EEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  _BYTE v32[24];

  v6 = type metadata accessor for CABannerView(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = &v32[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = sub_100003DB8(&qword_100316AD8);
  __chkstk_darwin(v11, v12);
  v14 = &v32[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v15 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = &v32[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (a1)
  {
    v20 = a1 + OBJC_IVAR____TtC8SOSBuddy21BannerAppearanceModel_bannerMode;
    swift_beginAccess(a1 + OBJC_IVAR____TtC8SOSBuddy21BannerAppearanceModel_bannerMode, v32, 0, 0);
    sub_10000B234(v20, (uint64_t)v14, &qword_100316AD8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    {
      sub_100007FF0((uint64_t)v14, &qword_100316AD8);
      v21 = 1;
    }
    else
    {
      sub_1000E8D6C((uint64_t)v14, (uint64_t)v19, type metadata accessor for ConnectionAssitantBannerMode.Mode);
      sub_1000E1F30((uint64_t)v19, (uint64_t)v10 + *(int *)(v6 + 24), type metadata accessor for ConnectionAssitantBannerMode.Mode);
      v22 = type metadata accessor for AppEvents();
      v23 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
      *v10 = EnvironmentObject.init()(v22, v23);
      v10[1] = v24;
      v25 = type metadata accessor for UIMetrics();
      v26 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
      v10[2] = EnvironmentObject.init()(v25, v26);
      v10[3] = v27;
      sub_10000AFFC((uint64_t)v19, type metadata accessor for ConnectionAssitantBannerMode.Mode);
      sub_1000E8D6C((uint64_t)v10, a3, type metadata accessor for CABannerView);
      v21 = 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v21, 1, v6);
  }
  else
  {
    v29 = type metadata accessor for BannerAppearanceModel(0);
    v30 = sub_1000052EC(&qword_100316AA8, type metadata accessor for BannerAppearanceModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v29, v30);
    __break(1u);
  }
  return result;
}

uint64_t sub_100148164@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100147EEC(*v1, v1[1], a1);
}

uint64_t type metadata accessor for CABannerView(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100321BC8, (uint64_t)&nominal type descriptor for CABannerView);
}

uint64_t *sub_100148180(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    a1[3] = a2[3];
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    swift_retain(v4);
    swift_retain(v6);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      *v8 = *v9;
      v11 = type metadata accessor for ConnectionClosed(0);
      v12 = *(int *)(v11 + 20);
      v13 = &v8[v12];
      v14 = &v9[v12];
      v15 = type metadata accessor for Date(0);
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        v17 = sub_100003DB8(&qword_100317D58);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      v18 = *(int *)(v11 + 24);
      v19 = *(_QWORD *)&v9[v18];
      *(_QWORD *)&v8[v18] = v19;
      swift_bridgeObjectRetain(v19);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  return v5;
}

double sub_10014830C(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  swift_release(*a1);
  swift_release(a1[2]);
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v7 = type metadata accessor for ConnectionClosed(0);
    v8 = &v4[*(int *)(v7 + 20)];
    v9 = type metadata accessor for Date(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)&v4[*(int *)(v7 + 24)]).n128_u64[0];
  }
  return result;
}

uint64_t *sub_1001483D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v7 = a2[2];
  v6 = a2[3];
  a1[2] = v7;
  a1[3] = v6;
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  swift_retain(v5);
  swift_retain(v7);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    *v9 = *v10;
    v12 = type metadata accessor for ConnectionClosed(0);
    v13 = *(int *)(v12 + 20);
    v14 = &v9[v13];
    v15 = &v10[v13];
    v16 = type metadata accessor for Date(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = sub_100003DB8(&qword_100317D58);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v19 = *(int *)(v12 + 24);
    v20 = *(_QWORD *)&v10[v19];
    *(_QWORD *)&v9[v19] = v20;
    swift_bridgeObjectRetain(v20);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_100148534(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  a1[1] = a2[1];
  v8 = a1[2];
  v9 = a2[2];
  a1[2] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[3] = a2[3];
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 24);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    sub_10000AFFC((uint64_t)a1 + v10, type metadata accessor for ConnectionAssitantBannerMode.Mode);
    v13 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      *v11 = *v12;
      v14 = type metadata accessor for ConnectionClosed(0);
      v15 = *(int *)(v14 + 20);
      v16 = &v11[v15];
      v17 = &v12[v15];
      v18 = type metadata accessor for Date(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        v20 = sub_100003DB8(&qword_100317D58);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v19 + 16))(v16, v17, v18);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      v21 = *(int *)(v14 + 24);
      v22 = *(_QWORD *)&v12[v21];
      *(_QWORD *)&v11[v21] = v22;
      swift_bridgeObjectRetain(v22);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  return a1;
}

_OWORD *sub_1001486D0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    *v6 = *v7;
    v9 = type metadata accessor for ConnectionClosed(0);
    v10 = *(int *)(v9 + 20);
    v11 = &v6[v10];
    v12 = &v7[v10];
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = sub_100003DB8(&qword_100317D58);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *(_QWORD *)&v6[*(int *)(v9 + 24)] = *(_QWORD *)&v7[*(int *)(v9 + 24)];
    swift_storeEnumTagMultiPayload(v6, v8, 1);
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_100148810(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[2];
  v8 = a2[2];
  a1[1] = a2[1];
  a1[2] = v8;
  swift_release(v7);
  a1[3] = a2[3];
  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    sub_10000AFFC((uint64_t)a1 + v9, type metadata accessor for ConnectionAssitantBannerMode.Mode);
    v12 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      *v10 = *v11;
      v13 = type metadata accessor for ConnectionClosed(0);
      v14 = *(int *)(v13 + 20);
      v15 = &v10[v14];
      v16 = &v11[v14];
      v17 = type metadata accessor for Date(0);
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = sub_100003DB8(&qword_100317D58);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 32))(v15, v16, v17);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      *(_QWORD *)&v10[*(int *)(v13 + 24)] = *(_QWORD *)&v11[*(int *)(v13 + 24)];
      swift_storeEnumTagMultiPayload(v10, v12, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100148990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014899C);
}

uint64_t sub_10014899C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v9);
  }
}

uint64_t sub_100148A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100148A30);
}

char *sub_100148A30(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v7 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100148AA4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1002588F0;
  v4[1] = &unk_1002588F0;
  result = type metadata accessor for ConnectionAssitantBannerMode.Mode(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_100148B1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100321C08;
  if (!qword_100321C08)
  {
    v1 = sub_100007FAC(&qword_100321C10);
    sub_1000052EC(&qword_100321C18, type metadata accessor for CABannerView, (uint64_t)&unk_100258908);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100321C08);
  }
  return result;
}

uint64_t sub_100148B98(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029BDE8, 1);
}

uint64_t sub_100148BA8@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = (char *)a1 + *(int *)(type metadata accessor for CABannerView(0) + 24);
  v3 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  swift_storeEnumTagMultiPayload(v2, v3, 4);
  v4 = type metadata accessor for AppEvents();
  v5 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  *a1 = EnvironmentObject.init()(v4, v5);
  a1[1] = v6;
  v7 = type metadata accessor for UIMetrics();
  v8 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.init()(v7, v8);
  a1[2] = result;
  a1[3] = v10;
  return result;
}

uint64_t sub_100148C5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];

  v2 = v1;
  v26 = a1;
  v3 = sub_100003DB8(&qword_100321C20);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v27[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100321C28);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v27[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD **)(v1 + 16);
  if (v13)
  {
    v14 = v13[9];
    v15 = v13[10];
    sub_100007BBC(v13 + 6, v14);
    v16 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v15 + 8))(v27, v14, v15);
    v17 = static Axis.Set.vertical.getter(v16);
    __chkstk_darwin(v17, v18);
    *(&v26 - 2) = v2;
    *(&v26 - 1) = (uint64_t)v27;
    v19 = sub_100003DB8(&qword_100321C30);
    v20 = sub_100149B20();
    ScrollView.init(_:showsIndicators:content:)(v17, 0, sub_100149B18, &v26 - 4, v19, v20);
    v21 = sub_1000084FC(&qword_100321C70, &qword_100321C20, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
    View.scrollDisabled(_:)(1, v3, v21);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v26, v12, v8);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v27);
  }
  else
  {
    v23 = *(_QWORD *)(v1 + 24);
    v24 = type metadata accessor for UIMetrics();
    v25 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v23, v24, v25);
    __break(1u);
  }
  return result;
}

uint64_t sub_100148E5C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;

  v6 = type metadata accessor for CABannerView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  v10 = sub_100003DB8(&qword_100321C58);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003DB8(&qword_100321C48);
  v16 = __chkstk_darwin(v14, v15);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v13 = static HorizontalAlignment.center.getter(v16);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 0;
  v19 = sub_100003DB8(&qword_100321C78);
  sub_100149064(a1, (uint64_t)&v13[*(int *)(v19 + 44)]);
  sub_10000B234((uint64_t)v13, (uint64_t)v18, &qword_100321C58);
  *(_WORD *)&v18[*(int *)(v14 + 36)] = 256;
  sub_100007FF0((uint64_t)v13, &qword_100321C58);
  v20 = sub_100007BBC(a2, a2[3]);
  v21 = *(_QWORD *)(*v20 + 16);
  v22 = *(_QWORD *)(*v20 + 24);
  sub_1000E1F30(a1, (uint64_t)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CABannerView);
  v23 = *(unsigned __int8 *)(v7 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = swift_allocObject(&unk_1002F3018, v24 + v8, v23 | 7);
  v26 = sub_1000E8D6C((uint64_t)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v25 + v24, type metadata accessor for CABannerView);
  v27 = static Alignment.center.getter(v26);
  v29 = v28;
  sub_10000B234((uint64_t)v18, a3, &qword_100321C48);
  v30 = (_QWORD *)(a3 + *(int *)(sub_100003DB8(&qword_100321C30) + 36));
  *v30 = v21;
  v30[1] = v22;
  v30[2] = sub_100149D1C;
  v30[3] = v25;
  v30[4] = v27;
  v30[5] = v29;
  return sub_100007FF0((uint64_t)v18, &qword_100321C48);
}

uint64_t sub_100149064@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v63 = a2;
  v64 = sub_100003DB8(&qword_100321C80);
  __chkstk_darwin(v64, v3);
  v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8(&qword_100321C88);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + *(int *)(type metadata accessor for CABannerView(0) + 24);
  swift_storeEnumTagMultiPayload(v13, v10, 5);
  sub_10019E824(v14, (uint64_t)v13);
  LOBYTE(v10) = v15;
  v16 = sub_10000AFFC((uint64_t)v13, type metadata accessor for ConnectionAssitantBannerMode.Mode);
  if ((v10 & 1) != 0)
  {
    v17 = type metadata accessor for ConnectivityModel();
    v18 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
    v19 = EnvironmentObject.init()(v17, v18);
    v61 = v20;
    v62 = v19;
    v21 = type metadata accessor for GeoLocationModel();
    v22 = sub_1000052EC(&qword_10031CD28, (uint64_t (*)(uint64_t))type metadata accessor for GeoLocationModel, (uint64_t)&unk_10024D2FC);
    v23 = EnvironmentObject.init()(v21, v22);
    v59 = v24;
    v60 = v23;
    v25 = type metadata accessor for GuidanceMessagesModel();
    v26 = sub_1000052EC(&qword_1003195D8, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel, (uint64_t)&unk_10024D2FC);
    v27 = EnvironmentObject.init()(v25, v26);
    v57 = v28;
    v58 = v27;
    v29 = type metadata accessor for GuidanceModel();
    v30 = sub_1000052EC(&qword_100316B08, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceModel, (uint64_t)&unk_10024D2FC);
    v31 = EnvironmentObject.init()(v29, v30);
    v33 = v32;
    v34 = type metadata accessor for StewieModel();
    v35 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
    v36 = EnvironmentObject.init()(v34, v35);
    v38 = v37;
    v39 = type metadata accessor for TimeZoneModel(0);
    v40 = sub_1000052EC(&qword_10031CD30, type metadata accessor for TimeZoneModel, (uint64_t)&unk_10024D2FC);
    v41 = EnvironmentObject.init()(v39, v40);
    v43 = v42;
    v44 = type metadata accessor for TryOutModel(0);
    v45 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    v46 = EnvironmentObject.init()(v44, v45);
    v47 = v61;
    *(_QWORD *)v9 = v62;
    *((_QWORD *)v9 + 1) = v47;
    v48 = v59;
    *((_QWORD *)v9 + 2) = v60;
    *((_QWORD *)v9 + 3) = v48;
    v49 = v57;
    *((_QWORD *)v9 + 4) = v58;
    *((_QWORD *)v9 + 5) = v49;
    *((_QWORD *)v9 + 6) = v31;
    *((_QWORD *)v9 + 7) = v33;
    *((_QWORD *)v9 + 8) = v36;
    *((_QWORD *)v9 + 9) = v38;
    *((_QWORD *)v9 + 10) = v41;
    *((_QWORD *)v9 + 11) = v43;
    *((_QWORD *)v9 + 12) = v46;
    *((_QWORD *)v9 + 13) = v50;
    *((_OWORD *)v9 + 7) = 0u;
    *((_OWORD *)v9 + 8) = 0u;
    swift_storeEnumTagMultiPayload(v9, v6, 0);
    v51 = sub_10015027C();
    v52 = sub_1000084FC(&qword_100321CA0, &qword_100321C80, (uint64_t)&protocol conformance descriptor for HStack<A>);
    return _ConditionalContent<>.init(storage:)(v9, &type metadata for ExplorerConnectionAssistantBannerView, v64, v51, v52);
  }
  else
  {
    *(_QWORD *)v5 = static VerticalAlignment.top.getter(v16);
    *((_QWORD *)v5 + 1) = 0;
    v5[16] = 0;
    v54 = sub_100003DB8(&qword_100321C90);
    sub_100149450(a1, (uint64_t)&v5[*(int *)(v54 + 44)]);
    sub_10000B234((uint64_t)v5, (uint64_t)v9, &qword_100321C80);
    swift_storeEnumTagMultiPayload(v9, v6, 1);
    v55 = sub_10015027C();
    v56 = sub_1000084FC(&qword_100321CA0, &qword_100321C80, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v9, &type metadata for ExplorerConnectionAssistantBannerView, v64, v55, v56);
    return sub_100007FF0((uint64_t)v5, &qword_100321C80);
  }
}

uint64_t sub_100149450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;

  v4 = sub_100003DB8(&qword_100321CA8);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100321CB0);
  v10 = __chkstk_darwin(v8, v9);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v33 - v14;
  v16 = type metadata accessor for CABannerStaticContentLeadingView(0);
  v18 = __chkstk_darwin(v16, v17);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  v23 = (uint64_t *)((char *)&v33 - v22);
  v24 = type metadata accessor for CABannerView(0);
  sub_1000E1F30(a1 + *(int *)(v24 + 24), (uint64_t)v23 + *(int *)(v16 + 20), type metadata accessor for ConnectionAssitantBannerMode.Mode);
  v25 = type metadata accessor for UIMetrics();
  v26 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  *v23 = EnvironmentObject.init()(v25, v26);
  v23[1] = v27;
  *(_QWORD *)v7 = static VerticalAlignment.top.getter();
  *((_QWORD *)v7 + 1) = 0x4020000000000000;
  v7[16] = 0;
  v28 = sub_100003DB8(&qword_100321CB8);
  sub_1001496F0(a1, (uint64_t)&v7[*(int *)(v28 + 44)]);
  LOBYTE(v25) = static Edge.Set.all.getter(v29);
  sub_10000B234((uint64_t)v7, (uint64_t)v12, &qword_100321CA8);
  v30 = &v12[*(int *)(v8 + 36)];
  *v30 = v25;
  *(_OWORD *)(v30 + 8) = xmmword_100258830;
  *(_OWORD *)(v30 + 24) = xmmword_100258840;
  v30[40] = 0;
  sub_100007FF0((uint64_t)v7, &qword_100321CA8);
  sub_10000B458((uint64_t)v12, (uint64_t)v15, &qword_100321CB0);
  sub_1000E1F30((uint64_t)v23, (uint64_t)v20, type metadata accessor for CABannerStaticContentLeadingView);
  sub_10000B234((uint64_t)v15, (uint64_t)v12, &qword_100321CB0);
  sub_1000E1F30((uint64_t)v20, a2, type metadata accessor for CABannerStaticContentLeadingView);
  v31 = sub_100003DB8(&qword_100321CC0);
  sub_10000B234((uint64_t)v12, a2 + *(int *)(v31 + 48), &qword_100321CB0);
  sub_100007FF0((uint64_t)v15, &qword_100321CB0);
  sub_10000AFFC((uint64_t)v23, type metadata accessor for CABannerStaticContentLeadingView);
  sub_100007FF0((uint64_t)v12, &qword_100321CB0);
  return sub_10000AFFC((uint64_t)v20, type metadata accessor for CABannerStaticContentLeadingView);
}

uint64_t sub_1001496F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v4 = type metadata accessor for CABannerStaticContentTrailingView(0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v25 - v10;
  v12 = sub_100003DB8(&qword_100321CC8);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v14, v17);
  v20 = (char *)&v25 - v19;
  *(_QWORD *)v20 = static HorizontalAlignment.center.getter(v18);
  *((_QWORD *)v20 + 1) = 0;
  v20[16] = 0;
  v21 = (uint64_t)&v20[*(int *)(sub_100003DB8(&qword_100321CD0) + 44)];
  v22 = a1 + *(int *)(type metadata accessor for CABannerView(0) + 24);
  sub_1000E1F30(v22, v21, type metadata accessor for ConnectionAssitantBannerMode.Mode);
  sub_1000E1F30(v22, (uint64_t)v11, type metadata accessor for ConnectionAssitantBannerMode.Mode);
  sub_10000B234((uint64_t)v20, (uint64_t)v16, &qword_100321CC8);
  sub_1000E1F30((uint64_t)v11, (uint64_t)v8, type metadata accessor for CABannerStaticContentTrailingView);
  sub_10000B234((uint64_t)v16, a2, &qword_100321CC8);
  v23 = sub_100003DB8(&qword_100321CD8);
  sub_1000E1F30((uint64_t)v8, a2 + *(int *)(v23 + 48), type metadata accessor for CABannerStaticContentTrailingView);
  sub_10000AFFC((uint64_t)v11, type metadata accessor for CABannerStaticContentTrailingView);
  sub_100007FF0((uint64_t)v20, &qword_100321CC8);
  sub_10000AFFC((uint64_t)v8, type metadata accessor for CABannerStaticContentTrailingView);
  return sub_100007FF0((uint64_t)v16, &qword_100321CC8);
}

uint64_t sub_1001498BC(_QWORD *a1, double a2, double a3)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;

  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v6 = ceil(a3);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10000D744(v7, (uint64_t)qword_10033FD60);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v28 = v12;
    *(_DWORD *)v11 = 136446466;
    v29 = *(_QWORD *)&a2;
    v30 = a3;
    type metadata accessor for CGSize(0);
    v14 = v13;
    v16 = String.init<A>(describing:)(&v29, v13, v15);
    v18 = v17;
    v29 = sub_100172BEC(v16, v17, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v11 + 4, v11 + 12);
    v19 = swift_bridgeObjectRelease(v18);
    *(_WORD *)(v11 + 12) = 2082;
    v29 = *(_QWORD *)&a2;
    v30 = v6;
    v20 = String.init<A>(describing:)(&v29, v14, v19);
    v22 = v21;
    v29 = sub_100172BEC(v20, v21, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Banner content changed, size: %{public}s, reporting: %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }

  if (*a1)
  {
    v23 = *(_QWORD *)(*a1 + 184);
    v29 = *(_QWORD *)&a2;
    v30 = v6;
    swift_retain(v23);
    PassthroughSubject.send(_:)(&v29);
    return swift_release(v23);
  }
  else
  {
    v25 = a1[1];
    v26 = type metadata accessor for AppEvents();
    v27 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    result = EnvironmentObject.error()(0, v25, v26, v27);
    __break(1u);
  }
  return result;
}

uint64_t sub_100149B18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100148E5C(*(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24), a1);
}

unint64_t sub_100149B20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100321C38;
  if (!qword_100321C38)
  {
    v1 = sub_100007FAC(&qword_100321C30);
    sub_100149BA4();
    sub_1000084FC(&qword_100321C60, &qword_100321C68, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100321C38);
  }
  return result;
}

unint64_t sub_100149BA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100321C40;
  if (!qword_100321C40)
  {
    v1 = sub_100007FAC(&qword_100321C48);
    sub_1000084FC(&qword_100321C50, &qword_100321C58, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100321C40);
  }
  return result;
}

uint64_t sub_100149C28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for CABannerView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  v6 = v0 + v4 + *(int *)(v1 + 24);
  v7 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ConnectionClosed(0);
    v9 = v6 + *(int *)(v8 + 20);
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v8 + 24)));
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100149D1C(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CABannerView(0) - 8) + 80);
  return sub_1001498BC((_QWORD *)(v2 + ((v5 + 16) & ~v5)), a1, a2);
}

uint64_t sub_100149D60@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  double v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  _QWORD v87[6];

  v86 = a1;
  v84 = sub_100003DB8(&qword_100321F30);
  __chkstk_darwin(v84, v2);
  v85 = (uint64_t *)((char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_100003DB8(&qword_1003214D8);
  __chkstk_darwin(v4, v5);
  v69 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100003DB8(&qword_100321F38);
  __chkstk_darwin(v68, v7);
  v71 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100003DB8(&qword_100321F40);
  v10 = __chkstk_darwin(v76, v9);
  v70 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  v72 = (char *)&v63 - v13;
  v78 = sub_100003DB8(&qword_100321F48);
  __chkstk_darwin(v78, v14);
  v81 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100003DB8(&qword_100321F50);
  __chkstk_darwin(v74, v16);
  v75 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100003DB8(&qword_100321F58);
  __chkstk_darwin(v79, v18);
  v77 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003DB8(&qword_1003214C8);
  __chkstk_darwin(v20, v21);
  v64 = sub_100003DB8(&qword_100321F60);
  __chkstk_darwin(v64, v22);
  v66 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100003DB8(&qword_100321F68);
  v25 = __chkstk_darwin(v73, v24);
  v65 = (char *)&v63 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v27);
  v67 = (char *)&v63 - v28;
  v29 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  __chkstk_darwin(v29, v30);
  v32 = (char *)&v63 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100003DB8(&qword_100321F70);
  __chkstk_darwin(v83, v33);
  v80 = (char *)&v63 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100003DB8(&qword_100321F78);
  __chkstk_darwin(v35, v36);
  v82 = (char *)&v63 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v1;
  v39 = *v1;
  if (*v1)
  {
    v41 = *(_QWORD *)(v39 + 72);
    v40 = *(_QWORD *)(v39 + 80);
    sub_100007BBC((_QWORD *)(v39 + 48), v41);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v40 + 8))(v87, v41, v40);
    v42 = *(id *)(v39 + 112);
    v43 = static UIContentSizeCategory.>= infix(_:_:)(v42, UIContentSizeCategoryAccessibilityExtraLarge);

    if ((v43 & 1) == 0)
    {
      v57 = type metadata accessor for CABannerStaticContentLeadingView(0);
      sub_1000E1F30((uint64_t)v38 + *(int *)(v57 + 20), (uint64_t)v32, type metadata accessor for ConnectionAssitantBannerMode.Mode);
      v58 = (char *)&loc_10014A228 + 4 * word_100258850[swift_getEnumCaseMultiPayload(v32, v29)];
      __asm { BR              X10 }
    }
    v45 = static HorizontalAlignment.center.getter(v44);
    v46 = static Edge.Set.leading.getter(v45);
    v47 = EdgeInsets.init(_all:)(16.0);
    v48 = v84;
    v49 = v85;
    *v85 = v45;
    v49[1] = 0;
    *((_BYTE *)v49 + 16) = 1;
    *((_BYTE *)v49 + 24) = v46;
    *((double *)v49 + 4) = v47;
    v49[5] = v50;
    v49[6] = v51;
    v49[7] = v52;
    *((_BYTE *)v49 + 64) = 0;
    swift_storeEnumTagMultiPayload(v49, v48, 1);
    v53 = sub_100003DB8(&qword_10031E2B0);
    v54 = sub_100151904();
    v55 = sub_1000D148C();
    v56 = (uint64_t)v82;
    _ConditionalContent<>.init(storage:)(v49, v83, v53, v54, v55);
    sub_10000B458(v56, v86, &qword_100321F78);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v87);
  }
  else
  {
    v60 = v1[1];
    v61 = type metadata accessor for UIMetrics();
    v62 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v60, v61, v62);
    __break(1u);
  }
  return result;
}

uint64_t sub_10014AA84@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  unint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t OpaqueTypeConformance2;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;

  v63 = a2;
  v3 = type metadata accessor for Image.Scale(0);
  v61 = *(_QWORD *)(v3 - 8);
  v62 = v3;
  __chkstk_darwin(v3, v4);
  v60 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SymbolVariants(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100003DB8(&qword_10031AAF0);
  v57 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54, v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100003DB8(&qword_10031E778);
  v56 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58, v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100003DB8(&qword_10031E780);
  __chkstk_darwin(v53, v17);
  v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100003DB8(&qword_100321FF8);
  __chkstk_darwin(v55, v20);
  v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100003DB8(&qword_100322000);
  __chkstk_darwin(v23, v24);
  v59 = (char *)&v53 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
    v27 = 7496035;
  else
    v27 = 7565171;
  v28 = Image.init(_internalSystemName:)(v27, 0xE300000000000000, v25);
  v29 = static Font.largeTitle.getter();
  KeyPath = swift_getKeyPath(&unk_100258AC8);
  v64 = v28;
  v65 = KeyPath;
  v66 = v29;
  static SymbolVariants.circle.getter();
  v31 = sub_100003DB8(&qword_100316BE8);
  v32 = sub_10000AAB8();
  View.symbolVariant(_:)(v10, v31, v32);
  v33 = *(void (**)(char *, uint64_t))(v7 + 8);
  v33(v10, v6);
  swift_release(v64);
  swift_release(v65);
  v34 = swift_release(v66);
  static SymbolVariants.fill.getter(v34);
  v64 = v31;
  v65 = v32;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v64, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
  v36 = v54;
  View.symbolVariant(_:)(v10, v54, OpaqueTypeConformance2);
  v33(v10, v6);
  v37 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v13, v36);
  v38 = static Color.white.getter(v37);
  v39 = static Color.red.getter();
  v40 = v56;
  v41 = v58;
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v19, v16, v58);
  v42 = (uint64_t *)&v19[*(int *)(v53 + 36)];
  *v42 = v38;
  v42[1] = v39;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v41);
  v44 = v60;
  v43 = v61;
  v45 = v62;
  (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v60, enum case for Image.Scale.large(_:), v62);
  v46 = swift_getKeyPath(&unk_100258AF8);
  v47 = v55;
  v48 = (uint64_t *)&v22[*(int *)(v55 + 36)];
  v49 = sub_100003DB8(&qword_10031A218);
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))((char *)v48 + *(int *)(v49 + 28), v44, v45);
  *v48 = v46;
  sub_10000B234((uint64_t)v19, (uint64_t)v22, &qword_10031E780);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
  sub_100007FF0((uint64_t)v19, &qword_10031E780);
  v50 = sub_10015195C();
  v51 = (uint64_t)v59;
  View.accessibility(hidden:)(1, v47, v50);
  sub_100007FF0((uint64_t)v22, &qword_100321FF8);
  return sub_10000B458(v51, v63, &qword_100322000);
}

void sub_10014AEA0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(_QWORD);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v28 = a2;
  v3 = type metadata accessor for CABannerConnectionClosedView(0);
  __chkstk_darwin(v3, v4);
  v5 = type metadata accessor for ConnectionClosed(0);
  __chkstk_darwin(v5, v6);
  v25 = sub_100003DB8(&qword_100321EB0);
  __chkstk_darwin(v25, v7);
  v27 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100003DB8(&qword_100321EB8);
  __chkstk_darwin(v22, v9);
  v10 = sub_100003DB8(&qword_100321EC0);
  __chkstk_darwin(v10, v11);
  v23 = sub_100003DB8(&qword_100321EC8);
  __chkstk_darwin(v23, v12);
  v26 = sub_100003DB8(&qword_100321ED0);
  __chkstk_darwin(v26, v13);
  v24 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E1F30(a1, (uint64_t)v18, v19);
  v20 = (char *)sub_10014B0DC + 4 * word_10025885C[swift_getEnumCaseMultiPayload(v18, v15)];
  __asm { BR              X10 }
}

uint64_t sub_10014B0DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v6 = type metadata accessor for UIMetrics();
  v7 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v8 = EnvironmentObject.init()(v6, v7);
  *v2 = v8;
  v2[1] = v9;
  swift_storeEnumTagMultiPayload(v2, v4, 0);
  v10 = sub_1001514C0();
  v11 = sub_1000052EC(&qword_100321F00, type metadata accessor for CABannerConnectionClosedView, (uint64_t)&unk_100258C9C);
  swift_retain(v8);
  _ConditionalContent<>.init(storage:)(v2, &type metadata for CABannerQuestionnaireView, v0, v10, v11);
  sub_10000B234(v1, v3, &qword_100321EC8);
  swift_storeEnumTagMultiPayload(v3, *(_QWORD *)(v5 - 232), 0);
  v12 = sub_100003DB8(&qword_100321F10);
  v13 = sub_10015143C();
  v14 = sub_100151504();
  v15 = *(_QWORD *)(v5 - 216);
  _ConditionalContent<>.init(storage:)(v3, *(_QWORD *)(v5 - 224), v12, v13, v14);
  sub_100007FF0(v1, &qword_100321EC8);
  v16 = *(_QWORD *)(v5 - 192);
  sub_10000B234(v15, v16, &qword_100321ED0);
  swift_storeEnumTagMultiPayload(v16, *(_QWORD *)(v5 - 208), 0);
  v17 = sub_100003DB8(&qword_100321EE0);
  v18 = sub_100008140(&qword_100321EE8, &qword_100321ED0, (void (*)(void))sub_10015143C, (void (*)(void))sub_100151504);
  v19 = sub_1001515B0();
  _ConditionalContent<>.init(storage:)(v16, *(_QWORD *)(v5 - 200), v17, v18, v19);
  sub_100007FF0(v15, &qword_100321ED0);
  return swift_release(v8);
}

uint64_t sub_10014B868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = sub_100003DB8(&qword_100316A20);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003DB8(&qword_100321E98);
  v7 = __chkstk_darwin(v5, v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = static HorizontalAlignment.leading.getter(v7);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 0;
  v10 = sub_100003DB8(&qword_100321EA0);
  sub_10014AEA0(v0, (uint64_t)&v9[*(int *)(v10 + 44)]);
  v11 = enum case for DynamicTypeSize.xxLarge(_:);
  v12 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v4, v11, v12);
  v13 = sub_1000052EC(&qword_100316A30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v4, v4, v12, v13);
  if ((result & 1) != 0)
  {
    v15 = sub_1000084FC(&qword_100321EA8, &qword_100321E98, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v16 = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    View.dynamicTypeSize<A>(_:)(v4, v5, v1, v15, v16);
    sub_100007FF0((uint64_t)v4, &qword_100316A20);
    return sub_100007FF0((uint64_t)v9, &qword_100321E98);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10014BA2C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD);
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t KeyPath;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, _QWORD, uint64_t);
  unint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t result;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t);
  unsigned int v120;
  void (*v121)(char *, _QWORD, uint64_t);
  unint64_t v122;
  char *v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  char v127;
  _BYTE v128[7];
  _BYTE v129[7];
  _BYTE v130[7];
  char v131;
  _BYTE v132[7];
  char v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  _OWORD v150[12];
  uint64_t v151;
  _OWORD v152[15];
  uint64_t v153;
  _OWORD v154[28];
  _OWORD v155[15];
  uint64_t v156;
  _OWORD v157[12];
  uint64_t v158;
  _OWORD v159[15];
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  _OWORD v174[12];
  uint64_t v175;
  _QWORD v176[7];
  char v177;
  _BYTE v178[7];
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  _BYTE v183[7];
  uint64_t v184;
  char v185;
  _BYTE v186[7];
  uint64_t v187;
  uint64_t v188;
  char v189;
  _BYTE v190[7];
  double v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  Swift::String v207;

  v125 = a1;
  v2 = type metadata accessor for Font.Leading(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = v1;
  v7 = (_QWORD *)*v1;
  if (!*v1)
    goto LABEL_5;
  v8 = v7[9];
  v9 = v7[10];
  sub_100007BBC(v7 + 6, v8);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v9 + 8))(v176, v8, v9);
  v10 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v207._countAndFlagsBits = 0xD00000000000003DLL;
  v207._object = (void *)0x8000000100269360;
  v11._object = (void *)0x8000000100269340;
  v11._countAndFlagsBits = 0xD000000000000010;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v207);

  v154[0] = v13;
  v122 = sub_10002B3F4();
  v15 = Text.init<A>(_:)(v154, &type metadata for String, v122, v14);
  v17 = v16;
  v19 = v18;
  v21 = v20 & 1;
  v22 = static Font.footnote.getter(v15);
  static Font.Weight.medium.getter(v22);
  v23 = Font.weight(_:)(v22);
  swift_release(v22);
  v24 = *(void (**)(_QWORD))(v3 + 104);
  v120 = enum case for Font.Leading.tight(_:);
  v121 = (void (*)(char *, _QWORD, uint64_t))v24;
  v24(v6);
  v25 = v6;
  v26 = Font.leading(_:)(v6, v23);
  swift_release(v23);
  v27 = *(void (**)(char *, uint64_t))(v3 + 8);
  v123 = v25;
  v124 = v2;
  v119 = v27;
  v27(v25, v2);
  v28 = Text.font(_:)(v26, v15, v17, v21, v19);
  v30 = v29;
  v32 = v31;
  v118 = v33;
  swift_release(v26);
  sub_10002B438(v15, v17, v21);
  swift_bridgeObjectRelease(v19);
  v34 = (_QWORD *)*v126;
  if (!*v126)
    goto LABEL_5;
  v35 = v32 & 1;
  v36 = v34[9];
  v37 = v34[10];
  sub_100007BBC(v34 + 6, v36);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 80))(v36, v37);
  v39 = v118;
  v40 = Text.foregroundColor(_:)(v38, v28, v30, v32 & 1, v118);
  v42 = v41;
  v117 = v43;
  LOBYTE(v36) = v44 & 1;
  sub_10002B438(v28, v30, v35);
  swift_release(v38);
  swift_bridgeObjectRelease(v39);
  KeyPath = swift_getKeyPath(&unk_100258DE0);
  v46 = swift_getKeyPath(&unk_100258E10);
  v47 = swift_getKeyPath(&unk_100258E40);
  v196 = v40;
  v197 = v42;
  v198 = v36;
  v48 = v117;
  v199 = v117;
  v200 = KeyPath;
  v201 = 2;
  v202 = 0;
  v203 = v46;
  v204 = 0;
  v205 = v47;
  v206 = 0x3FE0000000000000;
  v50 = static Alignment.leading.getter(v47, v49);
  sub_1001332C8(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v174, v52, 0.0, 1, 0.0, 1, v50, v51);
  sub_10002B438(v40, v42, v36);
  swift_release(v47);
  swift_release(v46);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v48);
  v170 = v174[9];
  v171 = v174[10];
  v172 = v174[11];
  v173 = v175;
  v166 = v174[5];
  v167 = v174[6];
  v168 = v174[7];
  v169 = v174[8];
  v162 = v174[1];
  v163 = v174[2];
  v164 = v174[3];
  v165 = v174[4];
  v161 = v174[0];
  v53 = (_QWORD *)*v126;
  if (*v126)
  {
    v54 = v53[9];
    v55 = v53[10];
    sub_100007BBC(v53 + 6, v54);
    v56 = type metadata accessor for CABannerConnectionClosedView(0);
    *(_QWORD *)&v154[0] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 120))((uint64_t)v126 + *(int *)(v56 + 20), v54, v55);
    *((_QWORD *)&v154[0] + 1) = v57;
    v59 = Text.init<A>(_:)(v154, &type metadata for String, v122, v58);
    v61 = v60;
    v63 = v62;
    LODWORD(v126) = v64 & 1;
    v65 = static Font.body.getter(v59);
    static Font.Weight.medium.getter(v65);
    v66 = Font.weight(_:)(v65);
    swift_release(v65);
    v68 = v123;
    v67 = v124;
    v121(v123, v120, v124);
    v69 = Font.leading(_:)(v68, v66);
    swift_release(v66);
    v119(v68, v67);
    LOBYTE(v67) = (_BYTE)v126;
    v70 = Text.font(_:)(v69, v59, v61, v126, v63);
    v121 = v71;
    v122 = v72;
    LOBYTE(v66) = v73;
    swift_release(v69);
    LOBYTE(v69) = v66 & 1;
    sub_10002B438(v59, v61, v67);
    swift_bridgeObjectRelease(v63);
    v75 = static Color.white.getter(v74);
    v76 = (uint64_t)v121;
    v77 = v122;
    v78 = (_QWORD *)Text.foregroundColor(_:)(v75, v70, v121, v66 & 1, v122);
    v126 = v78;
    v123 = v80;
    v124 = v79;
    LOBYTE(v61) = v81;
    swift_release(v75);
    LOBYTE(v61) = v61 & 1;
    sub_10002B438(v70, v76, v69);
    swift_bridgeObjectRelease(v77);
    v82 = swift_getKeyPath(&unk_100258DE0);
    v83 = swift_getKeyPath(&unk_100258E10);
    v84 = swift_getKeyPath(&unk_100258E40);
    LOBYTE(v75) = static Edge.Set.top.getter(v84);
    v85 = EdgeInsets.init(_all:)(0.0);
    v133 = v61;
    v131 = 0;
    v127 = 0;
    v176[5] = v78;
    v86 = v123;
    v87 = v124;
    v176[6] = v124;
    v177 = v61;
    *(_DWORD *)v178 = *(_DWORD *)v132;
    *(_DWORD *)&v178[3] = *(_DWORD *)&v132[3];
    v179 = v123;
    v180 = v82;
    v181 = 3;
    v182 = 0;
    *(_DWORD *)&v183[3] = *(_DWORD *)&v130[3];
    *(_DWORD *)v183 = *(_DWORD *)v130;
    v184 = v83;
    v185 = 0;
    *(_DWORD *)&v186[3] = *(_DWORD *)&v129[3];
    *(_DWORD *)v186 = *(_DWORD *)v129;
    v187 = v84;
    v188 = 0x3FE0000000000000;
    v189 = v75;
    *(_DWORD *)&v190[3] = *(_DWORD *)&v128[3];
    *(_DWORD *)v190 = *(_DWORD *)v128;
    v191 = v85;
    v192 = v88;
    v193 = v89;
    v194 = v90;
    v195 = 0;
    v93 = static Alignment.leading.getter(v91, v92);
    sub_10013348C(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v159, v95, 0.0, 1, 0.0, 1, v93, v94);
    sub_10002B438((uint64_t)v126, v87, v61);
    swift_release(v84);
    swift_release(v83);
    swift_release(v82);
    swift_bridgeObjectRelease(v86);
    v147 = v159[13];
    v148 = v159[14];
    v149 = v160;
    v143 = v159[9];
    v144 = v159[10];
    v145 = v159[11];
    v146 = v159[12];
    v139 = v159[5];
    v140 = v159[6];
    v141 = v159[7];
    v142 = v159[8];
    v134 = v159[0];
    v135 = v159[1];
    v136 = v159[2];
    v137 = v159[3];
    v138 = v159[4];
    v96 = type metadata accessor for ConnectionModel(0);
    v97 = sub_1000052EC(&qword_100316B10, type metadata accessor for ConnectionModel, (uint64_t)&unk_10024D2FC);
    v98 = EnvironmentObject.init()(v96, v97);
    v100 = v99;
    v101 = type metadata accessor for ConnectivityModel();
    v102 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
    v103 = EnvironmentObject.init()(v101, v102);
    v105 = v104;
    v106 = type metadata accessor for UIMetrics();
    v107 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v108 = EnvironmentObject.init()(v106, v107);
    v110 = v109;
    v150[10] = v171;
    v150[11] = v172;
    v150[6] = v167;
    v150[7] = v168;
    v150[8] = v169;
    v150[9] = v170;
    v150[2] = v163;
    v150[3] = v164;
    v150[4] = v165;
    v150[5] = v166;
    v150[0] = v161;
    v150[1] = v162;
    v152[12] = v146;
    v152[13] = v147;
    v152[14] = v148;
    v152[8] = v142;
    v152[9] = v143;
    v152[10] = v144;
    v152[11] = v145;
    v152[4] = v138;
    v152[5] = v139;
    v152[6] = v140;
    v152[7] = v141;
    v152[0] = v134;
    v152[1] = v135;
    v152[2] = v136;
    v152[3] = v137;
    v154[10] = v171;
    v154[11] = v172;
    v154[6] = v167;
    v154[7] = v168;
    v154[8] = v169;
    v154[9] = v170;
    v154[2] = v163;
    v154[3] = v164;
    v154[4] = v165;
    v154[5] = v166;
    v154[0] = v161;
    v154[1] = v162;
    *(_OWORD *)((char *)&v154[24] + 8) = v146;
    *(_OWORD *)((char *)&v154[25] + 8) = v147;
    *(_OWORD *)((char *)&v154[26] + 8) = v148;
    *(_OWORD *)((char *)&v154[20] + 8) = v142;
    *(_OWORD *)((char *)&v154[21] + 8) = v143;
    *(_OWORD *)((char *)&v154[22] + 8) = v144;
    *(_OWORD *)((char *)&v154[23] + 8) = v145;
    *(_OWORD *)((char *)&v154[16] + 8) = v138;
    *(_OWORD *)((char *)&v154[17] + 8) = v139;
    *(_OWORD *)((char *)&v154[18] + 8) = v140;
    *(_OWORD *)((char *)&v154[19] + 8) = v141;
    *(_OWORD *)((char *)&v154[12] + 8) = v134;
    *(_OWORD *)((char *)&v154[13] + 8) = v135;
    *(_OWORD *)((char *)&v154[14] + 8) = v136;
    v151 = v173;
    v153 = v149;
    *(_QWORD *)&v154[12] = v173;
    *((_QWORD *)&v154[27] + 1) = v149;
    *(_OWORD *)((char *)&v154[15] + 8) = v137;
    v111 = v125;
    memcpy(v125, v154, 0x1C0uLL);
    v111[56] = v98;
    v111[57] = v100;
    v111[58] = v103;
    v111[59] = v105;
    v111[60] = v108;
    v111[61] = v110;
    sub_100135360((uint64_t)v150);
    sub_100135360((uint64_t)v152);
    v155[12] = v146;
    v155[13] = v147;
    v155[14] = v148;
    v155[8] = v142;
    v155[9] = v143;
    v155[10] = v144;
    v155[11] = v145;
    v155[4] = v138;
    v155[5] = v139;
    v156 = v149;
    v155[6] = v140;
    v155[7] = v141;
    v155[0] = v134;
    v155[1] = v135;
    v155[2] = v136;
    v155[3] = v137;
    sub_100152A78((uint64_t)v155);
    v157[10] = v171;
    v157[11] = v172;
    v158 = v173;
    v157[6] = v167;
    v157[7] = v168;
    v157[8] = v169;
    v157[9] = v170;
    v157[2] = v163;
    v157[3] = v164;
    v157[4] = v165;
    v157[5] = v166;
    v157[0] = v161;
    v157[1] = v162;
    sub_100152A78((uint64_t)v157);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v176);
  }
  else
  {
LABEL_5:
    v113 = v126[1];
    v114 = type metadata accessor for UIMetrics();
    v115 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v113, v114, v115);
    __break(1u);
  }
  return result;
}

uint64_t sub_10014C478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t KeyPath;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __n128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t result;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  unsigned int v113;
  void (*v114)(char *);
  unint64_t v115;
  unsigned int v116;
  void *v117;
  uint64_t v118;
  _QWORD *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  char v149;
  _BYTE v150[7];
  _BYTE v151[7];
  _BYTE v152[7];
  char v153;
  _BYTE v154[7];
  char v155;
  _OWORD v156[12];
  uint64_t v157;
  _OWORD v158[15];
  uint64_t v159;
  _OWORD v160[28];
  _OWORD v161[15];
  uint64_t v162;
  _OWORD v163[12];
  uint64_t v164;
  _QWORD v165[7];
  char v166;
  _BYTE v167[7];
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  _BYTE v172[7];
  uint64_t v173;
  char v174;
  _BYTE v175[7];
  uint64_t v176;
  uint64_t v177;
  char v178;
  _BYTE v179[7];
  double v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  Swift::String v196;

  v116 = a3;
  v117 = a4;
  v6 = type metadata accessor for Font.Leading(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v11 = (_QWORD *)(a1 + 48);
    v118 = a1;
    v119 = (_QWORD *)(a1 + 48);
    v12 = a1;
    v13 = *(_QWORD *)(a1 + 72);
    v14 = *(_QWORD *)(v12 + 80);
    sub_100007BBC(v11, v13);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v14 + 8))(v165, v13, v14);
    v15 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v196._countAndFlagsBits = 0xD00000000000003DLL;
    v196._object = (void *)0x8000000100269360;
    v16._object = (void *)0x8000000100269340;
    v16._countAndFlagsBits = 0xD000000000000010;
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v196);

    v160[0] = v18;
    v115 = sub_10002B3F4();
    v20 = Text.init<A>(_:)(v160, &type metadata for String, v115, v19);
    v22 = v21;
    v24 = v23;
    v26 = v25 & 1;
    v27 = static Font.footnote.getter(v20);
    static Font.Weight.medium.getter(v27);
    v28 = Font.weight(_:)(v27);
    swift_release(v27);
    v113 = enum case for Font.Leading.tight(_:);
    v114 = *(void (**)(char *))(v7 + 104);
    v114(v10);
    v29 = Font.leading(_:)(v10, v28);
    swift_release(v28);
    v112 = *(void (**)(char *, uint64_t))(v7 + 8);
    v112(v10, v6);
    v30 = Text.font(_:)(v29, v20, v22, v26, v24);
    v110 = v10;
    v111 = v6;
    v32 = v31;
    LOBYTE(v28) = v33;
    v35 = v34;
    swift_release(v29);
    LOBYTE(v29) = v28 & 1;
    sub_10002B438(v20, v22, v26);
    swift_bridgeObjectRelease(v24);
    v36 = *(_QWORD *)(v118 + 72);
    v37 = *(_QWORD *)(v118 + 80);
    sub_100007BBC(v119, v36);
    v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 80))(v36, v37);
    v39 = Text.foregroundColor(_:)(v38, v30, v32, v28 & 1, v35);
    v41 = v40;
    v43 = v42;
    LOBYTE(v36) = v44 & 1;
    sub_10002B438(v30, v32, v29);
    swift_release(v38);
    swift_bridgeObjectRelease(v35);
    KeyPath = swift_getKeyPath(&unk_100258DE0);
    v46 = swift_getKeyPath(&unk_100258E10);
    v47 = swift_getKeyPath(&unk_100258E40);
    v185 = v39;
    v186 = v41;
    v187 = v36;
    v188 = v43;
    v189 = KeyPath;
    v190 = 2;
    v191 = 0;
    v192 = v46;
    v193 = 0;
    v194 = v47;
    v195 = 0x3FE0000000000000;
    v49 = static Alignment.leading.getter(v47, v48);
    sub_1001332C8(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v160, v51, 0.0, 1, 0.0, 1, v49, v50);
    sub_10002B438(v39, v41, v36);
    swift_release(v47);
    swift_release(v46);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v43);
    v146 = v160[10];
    v147 = v160[11];
    v148 = *(_QWORD *)&v160[12];
    v142 = v160[6];
    v143 = v160[7];
    v144 = v160[8];
    v145 = v160[9];
    v138 = v160[2];
    v139 = v160[3];
    v140 = v160[4];
    v141 = v160[5];
    v136 = v160[0];
    v137 = v160[1];
    v52 = *(_QWORD *)(v118 + 72);
    v53 = *(_QWORD *)(v118 + 80);
    sub_100007BBC(v119, v52);
    *(_QWORD *)&v160[0] = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v53 + 136))(v116, v52, v53);
    *((_QWORD *)&v160[0] + 1) = v54;
    v56 = Text.init<A>(_:)(v160, &type metadata for String, v115, v55);
    v58 = v57;
    v60 = v59;
    v62 = v61 & 1;
    v63 = static Font.body.getter(v56);
    static Font.Weight.medium.getter(v63);
    v64 = Font.weight(_:)(v63);
    swift_release(v63);
    v66 = v110;
    v65 = v111;
    ((void (*)(char *, _QWORD, uint64_t))v114)(v110, v113, v111);
    v67 = Font.leading(_:)(v66, v64);
    swift_release(v64);
    v112(v66, v65);
    v68 = Text.font(_:)(v67, v56, v58, v62, v60);
    v70 = v69;
    LOBYTE(v64) = v71;
    v73 = v72;
    swift_release(v67);
    LOBYTE(v67) = v64 & 1;
    sub_10002B438(v56, v58, v62);
    swift_bridgeObjectRelease(v60);
    v75 = static Color.white.getter(v74);
    v76 = Text.foregroundColor(_:)(v75, v68, v70, v64 & 1, v73);
    v78 = v77;
    LOBYTE(v62) = v79;
    v119 = v80;
    swift_release(v75);
    LOBYTE(v64) = v62 & 1;
    sub_10002B438(v68, v70, v67);
    swift_bridgeObjectRelease(v73);
    v81 = swift_getKeyPath(&unk_100258DE0);
    v82 = swift_getKeyPath(&unk_100258E10);
    v83 = swift_getKeyPath(&unk_100258E40);
    LOBYTE(v75) = static Edge.Set.top.getter(v83);
    v84 = EdgeInsets.init(_all:)(0.0);
    v155 = v64;
    v153 = 0;
    v149 = 0;
    v165[5] = v76;
    v165[6] = v78;
    v166 = v64;
    *(_DWORD *)v167 = *(_DWORD *)v154;
    *(_DWORD *)&v167[3] = *(_DWORD *)&v154[3];
    v85 = v119;
    v168 = v119;
    v169 = v81;
    v170 = 3;
    v171 = 0;
    *(_DWORD *)&v172[3] = *(_DWORD *)&v152[3];
    *(_DWORD *)v172 = *(_DWORD *)v152;
    v173 = v82;
    v174 = 0;
    *(_DWORD *)&v175[3] = *(_DWORD *)&v151[3];
    *(_DWORD *)v175 = *(_DWORD *)v151;
    v176 = v83;
    v177 = 0x3FE0000000000000;
    v178 = v75;
    *(_DWORD *)&v179[3] = *(_DWORD *)&v150[3];
    *(_DWORD *)v179 = *(_DWORD *)v150;
    v180 = v84;
    v181 = v86;
    v182 = v87;
    v183 = v88;
    v184 = 0;
    v91 = static Alignment.leading.getter(v89, v90);
    sub_10013348C(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v160, v93, 0.0, 1, 0.0, 1, v91, v92);
    sub_10002B438(v76, v78, v64);
    swift_release(v83);
    swift_release(v82);
    swift_release(v81);
    swift_bridgeObjectRelease(v85);
    v132 = v160[12];
    v133 = v160[13];
    v134 = v160[14];
    v128 = v160[8];
    v129 = v160[9];
    v130 = v160[10];
    v131 = v160[11];
    v124 = v160[4];
    v125 = v160[5];
    v126 = v160[6];
    v127 = v160[7];
    v120 = v160[0];
    v121 = v160[1];
    v122 = v160[2];
    v123 = v160[3];
    v156[10] = v146;
    v156[11] = v147;
    v156[6] = v142;
    v156[7] = v143;
    v156[8] = v144;
    v156[9] = v145;
    v156[2] = v138;
    v156[3] = v139;
    v156[4] = v140;
    v156[5] = v141;
    v156[0] = v136;
    v156[1] = v137;
    v158[12] = v160[12];
    v158[13] = v160[13];
    v158[14] = v160[14];
    v94 = v160[8];
    v95 = v160[9];
    v158[8] = v160[8];
    v158[9] = v160[9];
    v96 = v160[10];
    v97 = v160[11];
    v158[10] = v160[10];
    v158[11] = v160[11];
    v98 = v160[4];
    v99 = v160[5];
    v158[4] = v160[4];
    v158[5] = v160[5];
    v101 = v160[6];
    v100 = v160[7];
    v158[6] = v160[6];
    v158[7] = v160[7];
    v103 = v160[0];
    v102 = v160[1];
    v158[0] = v160[0];
    v158[1] = v160[1];
    v104 = v160[2];
    v105 = v160[3];
    v158[2] = v160[2];
    v158[3] = v160[3];
    v160[10] = v146;
    v160[11] = v147;
    v160[6] = v142;
    v160[7] = v143;
    v160[9] = v145;
    v160[8] = v144;
    v160[2] = v138;
    v160[3] = v139;
    v160[5] = v141;
    v160[4] = v140;
    v160[1] = v137;
    v160[0] = v136;
    *(_OWORD *)((char *)&v160[24] + 8) = v160[12];
    *(_OWORD *)((char *)&v160[25] + 8) = v160[13];
    *(_OWORD *)((char *)&v160[26] + 8) = v160[14];
    *(_OWORD *)((char *)&v160[20] + 8) = v94;
    *(_OWORD *)((char *)&v160[21] + 8) = v95;
    *(_OWORD *)((char *)&v160[22] + 8) = v96;
    *(_OWORD *)((char *)&v160[23] + 8) = v97;
    *(_OWORD *)((char *)&v160[16] + 8) = v98;
    *(_OWORD *)((char *)&v160[17] + 8) = v99;
    *(_OWORD *)((char *)&v160[18] + 8) = v101;
    *(_OWORD *)((char *)&v160[19] + 8) = v100;
    v106 = *(_QWORD *)&v160[15];
    *(_OWORD *)((char *)&v160[12] + 8) = v103;
    *(_OWORD *)((char *)&v160[13] + 8) = v102;
    *(_OWORD *)((char *)&v160[14] + 8) = v104;
    v135 = v106;
    v157 = v148;
    v159 = v106;
    *(_QWORD *)&v160[12] = v148;
    *((_QWORD *)&v160[27] + 1) = v106;
    *(_OWORD *)((char *)&v160[15] + 8) = v105;
    memcpy(v117, v160, 0x1C0uLL);
    v161[12] = v132;
    v161[13] = v133;
    v161[14] = v134;
    v162 = v135;
    v161[8] = v128;
    v161[9] = v129;
    v161[10] = v130;
    v161[11] = v131;
    v161[4] = v124;
    v161[5] = v125;
    v161[6] = v126;
    v161[7] = v127;
    v161[0] = v120;
    v161[1] = v121;
    v161[2] = v122;
    v161[3] = v123;
    sub_100135360((uint64_t)v156);
    sub_100135360((uint64_t)v158);
    sub_100152A78((uint64_t)v161);
    v163[10] = v146;
    v163[11] = v147;
    v164 = v148;
    v163[6] = v142;
    v163[7] = v143;
    v163[9] = v145;
    v163[8] = v144;
    v163[2] = v138;
    v163[3] = v139;
    v163[5] = v141;
    v163[4] = v140;
    v163[1] = v137;
    v163[0] = v136;
    sub_100152A78((uint64_t)v163);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v165);
  }
  else
  {
    v108 = type metadata accessor for UIMetrics();
    v109 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v108, v109);
    __break(1u);
  }
  return result;
}

uint64_t sub_10014CDE8@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return sub_10014C478(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16), a1);
}

uint64_t sub_10014CDF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t KeyPath;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t result;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD v70[12];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  char v75;
  _BYTE v76[7];
  _BYTE v77[7];
  _BYTE v78[7];
  char v79;
  _BYTE v80[7];
  char v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  _QWORD v98[7];
  char v99;
  _BYTE v100[7];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  _BYTE v105[7];
  uint64_t v106;
  char v107;
  _BYTE v108[7];
  uint64_t v109;
  uint64_t v110;
  char v111;
  _BYTE v112[7];
  double v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;

  v68 = a4;
  v69 = type metadata accessor for Font.Leading(0);
  v7 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69, v8);
  v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v11 = a1 + 6;
    v12 = a1[9];
    v13 = a1[10];
    sub_100007BBC(a1 + 6, v12);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v13 + 8))(v98, v12, v13);
    v15 = a1[9];
    v14 = a1[10];
    sub_100007BBC(v11, v15);
    *(_QWORD *)&v82 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v14 + 168))(a3 & 1, v15, v14);
    *((_QWORD *)&v82 + 1) = v16;
    v17 = sub_10002B3F4();
    v19 = Text.init<A>(_:)(&v82, &type metadata for String, v17, v18);
    v21 = v20;
    v23 = v22;
    v25 = v24 & 1;
    v26 = static Font.body.getter(v19);
    static Font.Weight.medium.getter(v26);
    v27 = Font.weight(_:)(v26);
    swift_release(v26);
    v28 = v69;
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for Font.Leading.tight(_:), v69);
    v29 = Font.leading(_:)(v10, v27);
    swift_release(v27);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v28);
    v30 = Text.font(_:)(v29, v19, v21, v25, v23);
    v32 = v31;
    v34 = v33;
    v36 = v35;
    swift_release(v29);
    LOBYTE(v29) = v34 & 1;
    sub_10002B438(v19, v21, v25);
    swift_bridgeObjectRelease(v23);
    v38 = static Color.white.getter(v37);
    v39 = Text.foregroundColor(_:)(v38, v30, v32, v34 & 1, v36);
    v69 = v39;
    v41 = v40;
    LOBYTE(v21) = v42;
    v44 = v43;
    swift_release(v38);
    LOBYTE(v38) = v21 & 1;
    sub_10002B438(v30, v32, v29);
    swift_bridgeObjectRelease(v36);
    KeyPath = swift_getKeyPath(&unk_100258DE0);
    v46 = swift_getKeyPath(&unk_100258E10);
    v47 = swift_getKeyPath(&unk_100258E40);
    LOBYTE(v36) = static Edge.Set.top.getter(v47);
    v48 = EdgeInsets.init(_all:)(0.0);
    v81 = v38;
    v79 = 0;
    v75 = 0;
    v98[5] = v39;
    v98[6] = v41;
    v99 = v38;
    *(_DWORD *)v100 = *(_DWORD *)v80;
    *(_DWORD *)&v100[3] = *(_DWORD *)&v80[3];
    v101 = v44;
    v102 = KeyPath;
    v103 = 3;
    v104 = 0;
    *(_DWORD *)&v105[3] = *(_DWORD *)&v78[3];
    *(_DWORD *)v105 = *(_DWORD *)v78;
    v106 = v46;
    v107 = 0;
    *(_DWORD *)&v108[3] = *(_DWORD *)&v77[3];
    *(_DWORD *)v108 = *(_DWORD *)v77;
    v109 = v47;
    v110 = 0x3FE0000000000000;
    v111 = v36;
    *(_DWORD *)&v112[3] = *(_DWORD *)&v76[3];
    *(_DWORD *)v112 = *(_DWORD *)v76;
    v113 = v48;
    v114 = v49;
    v115 = v50;
    v116 = v51;
    v117 = 0;
    v54 = static Alignment.leading.getter(v52, v53);
    sub_10013348C(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v70, v56, 0.0, 1, 0.0, 1, v54, v55);
    sub_10002B438(v69, v41, v38);
    swift_release(v47);
    swift_release(v46);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v44);
    v94 = v71;
    v95 = v72;
    v96 = v73;
    v97 = v74;
    v90 = v70[8];
    v91 = v70[9];
    v92 = v70[10];
    v93 = v70[11];
    v86 = v70[4];
    v87 = v70[5];
    v88 = v70[6];
    v89 = v70[7];
    v82 = v70[0];
    v83 = v70[1];
    v84 = v70[2];
    v85 = v70[3];
    v57 = v72;
    v58 = v68;
    *(_OWORD *)(v68 + 192) = v71;
    *(_OWORD *)(v58 + 208) = v57;
    *(_OWORD *)(v58 + 224) = v96;
    *(_QWORD *)(v58 + 240) = v97;
    v59 = v91;
    *(_OWORD *)(v58 + 128) = v90;
    *(_OWORD *)(v58 + 144) = v59;
    v60 = v93;
    *(_OWORD *)(v58 + 160) = v92;
    *(_OWORD *)(v58 + 176) = v60;
    v61 = v87;
    *(_OWORD *)(v58 + 64) = v86;
    *(_OWORD *)(v58 + 80) = v61;
    v62 = v89;
    *(_OWORD *)(v58 + 96) = v88;
    *(_OWORD *)(v58 + 112) = v62;
    v63 = v83;
    *(_OWORD *)v58 = v82;
    *(_OWORD *)(v58 + 16) = v63;
    v64 = v85;
    *(_OWORD *)(v58 + 32) = v84;
    *(_OWORD *)(v58 + 48) = v64;
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v98);
  }
  else
  {
    v66 = type metadata accessor for UIMetrics();
    v67 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v66, v67);
    __break(1u);
  }
  return result;
}

uint64_t sub_10014D23C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10014CDF4(*(_QWORD **)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), a1);
}

uint64_t sub_10014D248@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t KeyPath;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t result;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD v69[12];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  char v74;
  _BYTE v75[7];
  _BYTE v76[7];
  _BYTE v77[7];
  char v78;
  _BYTE v79[7];
  char v80;
  Swift::String v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  _QWORD v97[7];
  char v98;
  _BYTE v99[7];
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  _BYTE v104[7];
  uint64_t v105;
  char v106;
  _BYTE v107[7];
  uint64_t v108;
  uint64_t v109;
  char v110;
  _BYTE v111[7];
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  Swift::String v117;

  v67 = a3;
  v68 = type metadata accessor for Font.Leading(0);
  v5 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68, v6);
  v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v9 = a1 + 6;
    v11 = a1[9];
    v10 = a1[10];
    sub_100007BBC(v9, v11);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v97, v11, v10);
    v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v117._countAndFlagsBits = 0xD000000000000067;
    v117._object = (void *)0x8000000100262500;
    v13._object = (void *)0x80000001002624D0;
    v13._countAndFlagsBits = 0xD00000000000002FLL;
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v117);

    v81 = v15;
    v16 = sub_10002B3F4();
    v18 = Text.init<A>(_:)(&v81, &type metadata for String, v16, v17);
    v20 = v19;
    v22 = v21;
    v24 = v23 & 1;
    v25 = static Font.body.getter(v18);
    static Font.Weight.medium.getter(v25);
    v26 = Font.weight(_:)(v25);
    swift_release(v25);
    v27 = v68;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for Font.Leading.tight(_:), v68);
    v28 = Font.leading(_:)(v8, v26);
    swift_release(v26);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v27);
    v29 = Text.font(_:)(v28, v18, v20, v24, v22);
    v31 = v30;
    v33 = v32;
    v35 = v34;
    swift_release(v28);
    LOBYTE(v28) = v33 & 1;
    sub_10002B438(v18, v20, v24);
    swift_bridgeObjectRelease(v22);
    v37 = static Color.white.getter(v36);
    v38 = Text.foregroundColor(_:)(v37, v29, v31, v33 & 1, v35);
    v68 = v38;
    v40 = v39;
    LOBYTE(v20) = v41;
    v43 = v42;
    swift_release(v37);
    LOBYTE(v37) = v20 & 1;
    sub_10002B438(v29, v31, v28);
    swift_bridgeObjectRelease(v35);
    KeyPath = swift_getKeyPath(&unk_100258DE0);
    v45 = swift_getKeyPath(&unk_100258E10);
    v46 = swift_getKeyPath(&unk_100258E40);
    LOBYTE(v35) = static Edge.Set.top.getter(v46);
    v47 = EdgeInsets.init(_all:)(0.0);
    v80 = v37;
    v78 = 0;
    v74 = 0;
    v97[5] = v38;
    v97[6] = v40;
    v98 = v37;
    *(_DWORD *)v99 = *(_DWORD *)v79;
    *(_DWORD *)&v99[3] = *(_DWORD *)&v79[3];
    v100 = v43;
    v101 = KeyPath;
    v102 = 3;
    v103 = 0;
    *(_DWORD *)&v104[3] = *(_DWORD *)&v77[3];
    *(_DWORD *)v104 = *(_DWORD *)v77;
    v105 = v45;
    v106 = 0;
    *(_DWORD *)&v107[3] = *(_DWORD *)&v76[3];
    *(_DWORD *)v107 = *(_DWORD *)v76;
    v108 = v46;
    v109 = 0x3FE0000000000000;
    v110 = v35;
    *(_DWORD *)&v111[3] = *(_DWORD *)&v75[3];
    *(_DWORD *)v111 = *(_DWORD *)v75;
    v112 = v47;
    v113 = v48;
    v114 = v49;
    v115 = v50;
    v116 = 0;
    v53 = static Alignment.leading.getter(v51, v52);
    sub_10013348C(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v69, v55, 0.0, 1, 0.0, 1, v53, v54);
    sub_10002B438(v68, v40, v37);
    swift_release(v46);
    swift_release(v45);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v43);
    v93 = v70;
    v94 = v71;
    v95 = v72;
    v96 = v73;
    v89 = v69[8];
    v90 = v69[9];
    v91 = v69[10];
    v92 = v69[11];
    v85 = v69[4];
    v86 = v69[5];
    v87 = v69[6];
    v88 = v69[7];
    v81 = (Swift::String)v69[0];
    v82 = v69[1];
    v83 = v69[2];
    v84 = v69[3];
    v56 = v71;
    v57 = v67;
    *(_OWORD *)(v67 + 192) = v70;
    *(_OWORD *)(v57 + 208) = v56;
    *(_OWORD *)(v57 + 224) = v95;
    *(_QWORD *)(v57 + 240) = v96;
    v58 = v90;
    *(_OWORD *)(v57 + 128) = v89;
    *(_OWORD *)(v57 + 144) = v58;
    v59 = v92;
    *(_OWORD *)(v57 + 160) = v91;
    *(_OWORD *)(v57 + 176) = v59;
    v60 = v86;
    *(_OWORD *)(v57 + 64) = v85;
    *(_OWORD *)(v57 + 80) = v60;
    v61 = v88;
    *(_OWORD *)(v57 + 96) = v87;
    *(_OWORD *)(v57 + 112) = v61;
    v62 = v82;
    *(Swift::String *)v57 = v81;
    *(_OWORD *)(v57 + 16) = v62;
    v63 = v84;
    *(_OWORD *)(v57 + 32) = v83;
    *(_OWORD *)(v57 + 48) = v63;
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v97);
  }
  else
  {
    v65 = type metadata accessor for UIMetrics();
    v66 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v65, v66);
    __break(1u);
  }
  return result;
}

uint64_t sub_10014D6E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10014D248(*(_QWORD **)v1, *(_QWORD *)(v1 + 8), a1);
}

uint64_t sub_10014D6EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t (*v42)(__n128);
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t KeyPath;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t result;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  _OWORD v121[12];
  uint64_t v122;
  _OWORD v123[12];
  uint64_t v124;
  _OWORD v125[12];
  uint64_t v126;
  _QWORD v127[7];
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;

  v10 = type metadata accessor for Font.Leading(0);
  v12 = __chkstk_darwin(v10, v11);
  v15 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v105 = v13;
    v106 = v12;
    v16 = a3[9];
    v17 = a3[10];
    v104 = a3;
    v107 = a3 + 6;
    sub_100007BBC(a3 + 6, v16);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v17 + 8))(v127, v16, v17);
    if (a1)
    {
      swift_retain(a1);
      sub_1001BFA30();
      v19 = v18;
      v21 = v20;
      v23 = v22;
      swift_release(a1);
      swift_bridgeObjectRelease(v23);
      *(_QWORD *)&v125[0] = v19;
      *((_QWORD *)&v125[0] + 1) = v21;
      v24 = sub_10002B3F4();
      v26 = Text.init<A>(_:)(v125, &type metadata for String, v24, v25);
      v102 = v27;
      v103 = v28;
      v30 = v29 & 1;
      v31 = static Font.footnote.getter(v26);
      static Font.Weight.medium.getter(v31);
      v32 = Font.weight(_:)(v31);
      swift_release(v31);
      v34 = v105;
      v33 = v106;
      (*(void (**)(char *, _QWORD, uint64_t))(v105 + 104))(v15, enum case for Font.Leading.tight(_:), v106);
      v35 = Font.leading(_:)(v15, v32);
      swift_release(v32);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v33);
      v37 = v102;
      v36 = v103;
      v105 = Text.font(_:)(v35, v26, v102, v30, v103);
      v106 = v38;
      v101 = v39;
      LOBYTE(v34) = v40;
      swift_release(v35);
      LOBYTE(v32) = v34 & 1;
      sub_10002B438(v26, v37, v30);
      swift_bridgeObjectRelease(v36);
      v41 = v104[10];
      sub_100007BBC(v107, v104[9]);
      v42 = *(uint64_t (**)(__n128))(v41 + 96);
      v43 = swift_retain(a1);
      v44 = v42(v43);
      swift_release(a1);
      v46 = v105;
      v45 = v106;
      v47 = v101;
      v107 = (_QWORD *)Text.foregroundColor(_:)(v44, v105, v101, v34 & 1, v106);
      v49 = v48;
      v51 = v50;
      LOBYTE(v26) = v52 & 1;
      sub_10002B438(v46, v47, v32);
      swift_release(v44);
      swift_bridgeObjectRelease(v45);
      KeyPath = swift_getKeyPath(&unk_100258DE0);
      v54 = swift_getKeyPath(&unk_100258E10);
      v55 = swift_getKeyPath(&unk_100258E40);
      v56 = v107;
      v127[5] = v107;
      v127[6] = v49;
      v128 = v26;
      v129 = v51;
      v130 = KeyPath;
      v131 = 2;
      v132 = 0;
      v133 = v54;
      v134 = 0;
      v135 = v55;
      v136 = 0x3FE0000000000000;
      v58 = static Alignment.leading.getter(v55, v57);
      sub_1001332C8(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v125, v60, 0.0, 1, 0.0, 1, v58, v59);
      sub_10002B438((uint64_t)v56, v49, v26);
      swift_release(v55);
      swift_release(v54);
      swift_release(KeyPath);
      swift_bridgeObjectRelease(v51);
      v118 = v125[10];
      v119 = v125[11];
      v120 = v126;
      v114 = v125[6];
      v115 = v125[7];
      v116 = v125[8];
      v117 = v125[9];
      v110 = v125[2];
      v111 = v125[3];
      v112 = v125[4];
      v113 = v125[5];
      v108 = v125[0];
      v109 = v125[1];
      v61 = type metadata accessor for GuidanceMessagesModel();
      v62 = sub_1000052EC(&qword_1003195D8, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel, (uint64_t)&unk_10024D2FC);
      v63 = (_QWORD *)EnvironmentObject.init()(v61, v62);
      v106 = v64;
      v107 = v63;
      v65 = type metadata accessor for UIMetrics();
      v66 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
      v67 = EnvironmentObject.init()(v65, v66);
      v69 = v68;
      v70 = type metadata accessor for ConnectionModel(0);
      v71 = sub_1000052EC(&qword_100316B10, type metadata accessor for ConnectionModel, (uint64_t)&unk_10024D2FC);
      v72 = EnvironmentObject.init()(v70, v71);
      v74 = v73;
      v75 = type metadata accessor for ConnectivityModel();
      v76 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
      v77 = EnvironmentObject.init()(v75, v76);
      v79 = v78;
      v80 = EnvironmentObject.init()(v65, v66);
      v81 = v119;
      v121[10] = v118;
      v121[11] = v119;
      v82 = v114;
      v83 = v115;
      v121[6] = v114;
      v121[7] = v115;
      v85 = v116;
      v84 = v117;
      v121[8] = v116;
      v121[9] = v117;
      v86 = v110;
      v87 = v111;
      v121[2] = v110;
      v121[3] = v111;
      v89 = v112;
      v88 = v113;
      v121[4] = v112;
      v121[5] = v113;
      v91 = v108;
      v90 = v109;
      v121[0] = v108;
      v121[1] = v109;
      *(_OWORD *)(a5 + 160) = v118;
      *(_OWORD *)(a5 + 176) = v81;
      *(_OWORD *)(a5 + 96) = v82;
      *(_OWORD *)(a5 + 112) = v83;
      *(_OWORD *)(a5 + 128) = v85;
      *(_OWORD *)(a5 + 144) = v84;
      *(_OWORD *)(a5 + 32) = v86;
      *(_OWORD *)(a5 + 48) = v87;
      *(_OWORD *)(a5 + 64) = v89;
      *(_OWORD *)(a5 + 80) = v88;
      v92 = v120;
      v122 = v120;
      *(_OWORD *)a5 = v91;
      *(_OWORD *)(a5 + 16) = v90;
      v93 = v107;
      *(_QWORD *)(a5 + 192) = v92;
      *(_QWORD *)(a5 + 200) = v93;
      *(_QWORD *)(a5 + 208) = v106;
      *(_QWORD *)(a5 + 216) = v67;
      *(_QWORD *)(a5 + 224) = v69;
      *(_QWORD *)(a5 + 232) = v72;
      *(_QWORD *)(a5 + 240) = v74;
      *(_QWORD *)(a5 + 248) = v77;
      *(_QWORD *)(a5 + 256) = v79;
      *(_QWORD *)(a5 + 264) = v80;
      *(_QWORD *)(a5 + 272) = v94;
      sub_100135360((uint64_t)v121);
      v123[10] = v118;
      v123[11] = v119;
      v124 = v120;
      v123[6] = v114;
      v123[7] = v115;
      v123[8] = v116;
      v123[9] = v117;
      v123[2] = v110;
      v123[3] = v111;
      v123[4] = v112;
      v123[5] = v113;
      v123[0] = v108;
      v123[1] = v109;
      sub_100152A78((uint64_t)v123);
      return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v127);
    }
  }
  else
  {
    v96 = type metadata accessor for UIMetrics();
    v97 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, a4, v96, v97);
    __break(1u);
  }
  v98 = type metadata accessor for ConnectivityModel();
  v99 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, a2, v98, v99);
  __break(1u);
  return result;
}

uint64_t sub_10014DCB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10014D6EC(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10014DCC0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t);
  unint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[3];
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[6];

  v2 = v1;
  v74 = a1;
  v3 = sub_100003DB8(&qword_100322178);
  __chkstk_darwin(v3, v4);
  v68 = (uint64_t *)((char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v65 = sub_100003DB8(&qword_100322180);
  __chkstk_darwin(v65, v6);
  v67 = (uint64_t)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322188);
  v70 = *(_QWORD *)(v8 - 8);
  v71 = v8;
  __chkstk_darwin(v8, v9);
  v66 = (uint64_t)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003DB8(&qword_100322190);
  v72 = *(_QWORD *)(v11 - 8);
  v73 = v11;
  __chkstk_darwin(v11, v12);
  v69 = (uint64_t)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003DB8(&qword_100316B68);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for TransmissionProgress(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100003DB8(&qword_100322198);
  __chkstk_darwin(v23, v24);
  v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = (_QWORD *)v1[4];
  if (v27)
  {
    v28 = (uint64_t)(v27 + 6);
    v30 = v27[9];
    v29 = v27[10];
    sub_100007BBC(v27 + 6, v30);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v29 + 8))(v78, v30, v29);
    v31 = *v1;
    if (*v2)
    {
      swift_retain(*v2);
      sub_1001BF244((uint64_t)v17);
      swift_release(v31);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
      {
        sub_100007FF0((uint64_t)v17, &qword_100316B68);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56))(v26, 1, 1, v73);
LABEL_12:
        sub_10000B458((uint64_t)v26, v74, &qword_100322198);
        return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v78);
      }
      sub_1000E8D6C((uint64_t)v17, (uint64_t)v22, type metadata accessor for TransmissionProgress);
      sub_100007CBC(v28, (uint64_t)v75);
      v32 = v76;
      v33 = v77;
      sub_100007BBC(v75, v76);
      v34 = v2[2];
      if (v34)
      {
        v35 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 112))(v22, *(unsigned __int8 *)(*(_QWORD *)(v34 + 48) + 120), v32, v33);
        v37 = v36;
        v38 = _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v75);
        v39 = HIBYTE(v37) & 0xF;
        if ((v37 & 0x2000000000000000) == 0)
          v39 = v35 & 0xFFFFFFFFFFFFLL;
        if (v39)
        {
          v40 = static HorizontalAlignment.leading.getter(v38);
          v41 = (uint64_t)v68;
          *v68 = v40;
          *(_QWORD *)(v41 + 8) = 0;
          *(_BYTE *)(v41 + 16) = 0;
          v42 = sub_100003DB8(&qword_1003221A0);
          sub_10014E1FC((uint64_t)v2, (uint64_t)v22, v78, v35, v37, v41 + *(int *)(v42 + 44));
          swift_bridgeObjectRelease(v37);
          v44 = static Edge.Set.top.getter(v43);
          v45 = EdgeInsets.init(_all:)(12.0);
          v47 = v46;
          v49 = v48;
          v51 = v50;
          v52 = v67;
          sub_10000B234(v41, v67, &qword_100322178);
          v53 = v52 + *(int *)(v65 + 36);
          *(_BYTE *)v53 = v44;
          *(double *)(v53 + 8) = v45;
          *(_QWORD *)(v53 + 16) = v47;
          *(_QWORD *)(v53 + 24) = v49;
          *(_QWORD *)(v53 + 32) = v51;
          *(_BYTE *)(v53 + 40) = 0;
          sub_100007FF0(v41, &qword_100322178);
          v54 = v66;
          sub_10000B234(v52, v66, &qword_100322180);
          v55 = v71;
          *(_WORD *)(v54 + *(int *)(v71 + 36)) = 256;
          sub_100007FF0(v52, &qword_100322180);
          v56 = v69;
          sub_10000B458(v54, v69, &qword_100322188);
          v57 = 0;
        }
        else
        {
          swift_bridgeObjectRelease(v37);
          v57 = 1;
          v55 = v71;
          v56 = v69;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56))(v56, v57, 1, v55);
        sub_10000B458(v56, (uint64_t)v26, &qword_100322190);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v26, 0, 1, v73);
        sub_10000AFFC((uint64_t)v22, type metadata accessor for TransmissionProgress);
        goto LABEL_12;
      }
      v59 = v2[3];
      v60 = type metadata accessor for ConnectivityModel();
      v61 = (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel;
      v62 = &qword_100316B00;
    }
    else
    {
      v59 = v2[1];
      v60 = type metadata accessor for ConnectionModel(0);
      v61 = type metadata accessor for ConnectionModel;
      v62 = &qword_100316B10;
    }
  }
  else
  {
    v59 = v1[5];
    v60 = type metadata accessor for UIMetrics();
    v61 = (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics;
    v62 = (unint64_t *)&qword_100316A00;
  }
  v63 = sub_1000052EC(v62, v61, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v59, v60, v63);
  __break(1u);
  return result;
}

void sub_10014E1FC(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  _BYTE *v63;
  id v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  char v70;
  uint64_t v71;
  uint64_t KeyPath;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  unint64_t v91;
  _BYTE *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  double v104;
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  __n128 v108;
  __n128 v109;
  uint64_t v110;
  unint64_t v111;
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE *v148;
  uint64_t v149;
  _BYTE *v150;
  uint64_t v151;
  int v152;
  int v153;
  _OWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _BYTE *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  __n128 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t (*v212)(__n128);
  __n128 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  double v228;
  char v229;
  uint64_t v230;
  char v231;
  char v232;
  uint64_t *v233;
  int v234;
  int v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t (*v241)();
  unint64_t *v242;
  uint64_t v243;
  _BYTE v244[4];
  int v245;
  int v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _BYTE *v258;
  uint64_t v259;
  _BYTE *v260;
  uint64_t v261;
  _BYTE *v262;
  _BYTE *v263;
  double v264;
  double v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  unsigned __int8 v270;
  _DWORD v271[2];
  _DWORD v272[2];
  _DWORD v273[2];
  unsigned __int8 v274;
  _DWORD v275[2];
  char v276;
  _BYTE v277[7];
  unsigned __int8 v278;
  _BYTE v279[7];
  char v280;
  _BYTE v281[7];
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  _OWORD v292[2];
  double v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  __int128 v297;
  char v298;
  _BYTE v299[7];
  uint64_t v300;
  char v301;
  _BYTE v302[7];
  uint64_t v303;
  uint64_t v304;
  char v305;
  _BYTE v306[7];
  double v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char v311;
  _BYTE v312[7];
  uint64_t v313;
  char v314;
  _BYTE v315[7];
  uint64_t v316;
  char v317;
  _BYTE v318[7];
  uint64_t v319;
  uint64_t v320;
  __int16 v321;
  uint64_t v322;
  char v323;
  uint64_t v324;
  unsigned __int8 v325;
  uint64_t v326;
  uint64_t v327;

  v264 = *(double *)&a4;
  v265 = *(double *)&a5;
  v255 = a2;
  v261 = sub_100003DB8(&qword_1003221A8);
  __chkstk_darwin(v261, v9);
  v258 = &v244[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_100003DB8(&qword_100316B28);
  v256 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  v14 = &v244[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = sub_100003DB8(&qword_10031FFC8);
  v257 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  v18 = &v244[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = sub_100003DB8(&qword_10031FFD0);
  v21 = __chkstk_darwin(v19, v20);
  v262 = &v244[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v21, v23);
  v263 = &v244[-v24];
  v266 = sub_100003DB8(&qword_1003221B0);
  __chkstk_darwin(v266, v25);
  v27 = (uint64_t *)&v244[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v259 = sub_100003DB8(&qword_1003221B8);
  __chkstk_darwin(v259, v28);
  v30 = &v244[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v267 = sub_100003DB8(&qword_1003221C0);
  __chkstk_darwin(v267, v31);
  v260 = &v244[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v33 = type metadata accessor for Font.Leading(0);
  v35 = __chkstk_darwin(v33, v34);
  v38 = &v244[-((v37 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v254 = a1;
  v39 = *(_QWORD *)(a1 + 16);
  if (!v39)
  {
    v239 = *(_QWORD *)(v254 + 24);
    v240 = type metadata accessor for ConnectivityModel();
    v241 = type metadata accessor for ConnectivityModel;
    v242 = &qword_100316B00;
    goto LABEL_9;
  }
  v40 = 1 << *(_BYTE *)(*(_QWORD *)(v39 + 48) + 120);
  v268 = v27;
  v269 = a6;
  if ((v40 & 0x1D8) != 0)
  {
    v41 = *(_QWORD *)&v265;
    v293 = v264;
    v294 = *(_QWORD *)&v265;
    v42 = v35;
    v43 = v36;
    v44 = v38;
    v45 = sub_10002B3F4();
    v46 = swift_bridgeObjectRetain(v41);
    v47 = Text.init<A>(_:)(&v293, &type metadata for String, v45, v46);
    v264 = *(double *)&v48;
    v265 = *(double *)&v47;
    v50 = v49;
    v52 = v51 & 1;
    v53 = static Font.footnote.getter(v47);
    static Font.Weight.medium.getter(v53);
    v54 = Font.weight(_:)(v53);
    swift_release(v53);
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v43 + 104))(v44, enum case for Font.Leading.tight(_:), v42);
    v55 = Font.leading(_:)(v44, v54);
    swift_release(v54);
    (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v44, v42);
    v56 = *(_QWORD *)&v264;
    v57 = *(_QWORD *)&v265;
    v58 = v50;
    v59 = Text.font(_:)(v55, *(_QWORD *)&v265, *(_QWORD *)&v264, v52, v50);
    v61 = v60;
    LOBYTE(v50) = v62;
    v262 = v63;
    swift_release(v55);
    LOBYTE(v55) = v50 & 1;
    sub_10002B438(v57, v56, v52);
    swift_bridgeObjectRelease(v58);
    v64 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
    v65 = Color.init(_:)(v64);
    v66 = v262;
    *(double *)&v67 = COERCE_DOUBLE(Text.foregroundColor(_:)(v65, v59, v61, v50 & 1, v262));
    v69 = v68;
    LOBYTE(v57) = v70;
    v265 = *(double *)&v71;
    swift_release(v65);
    LOBYTE(v65) = v57 & 1;
    sub_10002B438(v59, v61, v55);
    swift_bridgeObjectRelease(v66);
    KeyPath = swift_getKeyPath(&unk_100258DE0);
    v73 = swift_getKeyPath(&unk_100258E10);
    v74 = swift_getKeyPath(&unk_100258E40);
    v76 = static Alignment.leading.getter(v74, v75);
    _FrameLayout.init(width:height:alignment:)(&v293, 0, 1, 0, 1, v76, v77);
    v78 = v293;
    v79 = v294;
    v80 = v295;
    v81 = v296;
    LOBYTE(v275[0]) = v65;
    LOBYTE(v273[0]) = 0;
    LOBYTE(v272[0]) = v294;
    LOBYTE(v271[0]) = v296;
    v263 = v69;
    v264 = *(double *)&v67;
    *(double *)v30 = *(double *)&v67;
    *((_QWORD *)v30 + 1) = v69;
    v82 = (uint64_t)v69;
    v30[16] = v65;
    *(_DWORD *)(v30 + 17) = v282;
    *((_DWORD *)v30 + 5) = *(_DWORD *)((char *)&v282 + 3);
    v83 = *(_QWORD *)&v265;
    *((double *)v30 + 3) = v265;
    *((_QWORD *)v30 + 4) = KeyPath;
    *((_QWORD *)v30 + 5) = 1;
    v30[48] = 0;
    v84 = v322;
    *((_DWORD *)v30 + 13) = *(_DWORD *)((char *)&v322 + 3);
    *(_DWORD *)(v30 + 49) = v84;
    *((_QWORD *)v30 + 7) = v73;
    v30[64] = 0;
    v85 = *(_DWORD *)v281;
    *((_DWORD *)v30 + 17) = *(_DWORD *)&v281[3];
    *(_DWORD *)(v30 + 65) = v85;
    *((_QWORD *)v30 + 9) = v74;
    *((_QWORD *)v30 + 10) = 0x3FE0000000000000;
    *((double *)v30 + 11) = v78;
    v30[96] = v79;
    LODWORD(v78) = *(_DWORD *)v279;
    *((_DWORD *)v30 + 25) = *(_DWORD *)&v279[3];
    *(_DWORD *)(v30 + 97) = LODWORD(v78);
    *((_QWORD *)v30 + 13) = v80;
    v30[112] = v81;
    LODWORD(v78) = *(_DWORD *)v277;
    *((_DWORD *)v30 + 29) = *(_DWORD *)&v277[3];
    *(_DWORD *)(v30 + 113) = LODWORD(v78);
    *(_OWORD *)(v30 + 120) = v297;
    *((_WORD *)v30 + 68) = 256;
    swift_storeEnumTagMultiPayload(v30, v259, 1);
    sub_10002B750(v67, v82, v65);
    swift_bridgeObjectRetain(v83);
    swift_retain(KeyPath);
    swift_retain(v73);
    swift_retain(v74);
    v86 = sub_100003DB8(&qword_1003221D0);
    v87 = sub_1000084FC(&qword_1003221D8, &qword_1003221A8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v88 = sub_100152AE4();
    v89 = (uint64_t)v260;
    _ConditionalContent<>.init(storage:)(v30, v261, v86, v87, v88);
    v90 = v268;
    sub_10000B234(v89, (uint64_t)v268, &qword_1003221C0);
    swift_storeEnumTagMultiPayload(v90, v266, 0);
    v91 = sub_100152BBC();
    _ConditionalContent<>.init(storage:)(v90, v267, v86, v91, v88);
    sub_100007FF0(v89, &qword_1003221C0);
    sub_10002B438(*(uint64_t *)&v264, (uint64_t)v263, v65);
    swift_release(v74);
    swift_release(v73);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(*(_QWORD *)&v265);
  }
  else if ((v40 & 0x203) != 0)
  {
    v253 = v36;
    v254 = v35;
    v252 = v15;
    v92 = v38;
    v293 = (double)*(uint64_t *)(v255 + *(int *)(type metadata accessor for TransmissionProgress(0) + 28));
    LOBYTE(v294) = 0;
    *(_QWORD *)&v282 = 0x4059000000000000;
    v93 = sub_10010CCCC();
    ProgressView.init<A>(value:total:)(&v293, &v282, &type metadata for Double, v93);
    v94 = a3[3];
    v95 = a3[4];
    v96 = sub_100007BBC(a3, v94);
    v296 = v94;
    *(_QWORD *)&v297 = *(_QWORD *)(v95 + 8);
    v97 = sub_10010CD10(&v293);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(v97, v96, v94);
    v98 = sub_1000084FC(&qword_100316C20, &qword_100316B28, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    v99 = sub_10010CD4C();
    View.progressViewStyle<A>(_:)(&v293, v11, &type metadata for MessageProgressViewStyle, v98, v99);
    sub_10010CD90(&v293);
    (*(void (**)(_BYTE *, uint64_t))(v256 + 8))(v14, v11);
    v101 = a3[3];
    v100 = a3[4];
    sub_100007BBC(a3, v101);
    v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v100 + 8) + 8))(v101);
    v104 = v103;
    v105 = static Alignment.center.getter(v102);
    v106 = v262;
    v109 = sub_100132A38(0, 1, 0.0, 1, 0.0, 1, 0, 1, (uint64_t)v262, v108, 0.0, 1, v104, 0, v105, v107);
    (*(void (**)(_BYTE *, uint64_t, __n128))(v257 + 8))(v18, v252, v109);
    sub_10000B458((uint64_t)v106, (uint64_t)v263, &qword_10031FFD0);
    v110 = *(_QWORD *)&v265;
    v293 = v264;
    v294 = *(_QWORD *)&v265;
    v111 = sub_10002B3F4();
    v112 = swift_bridgeObjectRetain(v110);
    v113 = Text.init<A>(_:)(&v293, &type metadata for String, v111, v112);
    v115 = v114;
    v265 = *(double *)&v116;
    v118 = v117 & 1;
    v119 = static Font.footnote.getter(v113);
    static Font.Weight.medium.getter(v119);
    v120 = Font.weight(_:)(v119);
    swift_release(v119);
    v122 = v253;
    v121 = v254;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v253 + 104))(v92, enum case for Font.Leading.tight(_:), v254);
    v123 = Font.leading(_:)(v92, v120);
    swift_release(v120);
    (*(void (**)(_BYTE *, uint64_t))(v122 + 8))(v92, v121);
    v124 = *(_QWORD *)&v265;
    v125 = Text.font(_:)(v123, v113, v115, v118, *(_QWORD *)&v265);
    v127 = v126;
    LOBYTE(v92) = v128;
    v256 = v129;
    swift_release(v123);
    v130 = v92 & 1;
    sub_10002B438(v113, v115, v118);
    swift_bridgeObjectRelease(v124);
    v131 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
    v132 = Color.init(_:)(v131);
    v133 = v256;
    v265 = COERCE_DOUBLE(Text.foregroundColor(_:)(v132, v125, v127, v130, v256));
    v255 = v134;
    LOBYTE(v113) = v135;
    v257 = v136;
    swift_release(v132);
    LODWORD(v264) = v113 & 1;
    sub_10002B438(v125, v127, v130);
    swift_bridgeObjectRelease(v133);
    v256 = swift_getKeyPath(&unk_100258DE0);
    v254 = swift_getKeyPath(&unk_100258E10);
    v253 = swift_getKeyPath(&unk_100258E40);
    LODWORD(v252) = static Edge.Set.top.getter(v253);
    v137 = EdgeInsets.init(_all:)(4.0);
    v139 = v138;
    v141 = v140;
    v143 = v142;
    v276 = v113 & 1;
    v274 = 0;
    v270 = 0;
    v146 = static Alignment.leading.getter(v144, v145);
    _FrameLayout.init(width:height:alignment:)(&v322, 0, 1, 0, 1, v146, v147);
    LOBYTE(v125) = v323;
    v250 = v324;
    v251 = v322;
    v248 = v327;
    v249 = v326;
    LOBYTE(v118) = v276;
    v245 = v325;
    v246 = v274;
    v247 = v270;
    v280 = v323;
    v278 = v325;
    v148 = v262;
    sub_10000B234((uint64_t)v263, (uint64_t)v262, &qword_10031FFD0);
    v149 = (uint64_t)v148;
    v150 = v258;
    sub_10000B234(v149, (uint64_t)v258, &qword_10031FFD0);
    v151 = *(int *)(sub_100003DB8(&qword_1003221C8) + 48);
    *(_DWORD *)((char *)&v283 + 1) = v275[0];
    DWORD1(v283) = *(_DWORD *)((char *)v275 + 3);
    *(_DWORD *)((char *)&v285 + 1) = v273[0];
    DWORD1(v285) = *(_DWORD *)((char *)v273 + 3);
    DWORD1(v286) = *(_DWORD *)((char *)v272 + 3);
    LODWORD(v130) = v272[0];
    *(_DWORD *)((char *)&v286 + 1) = v272[0];
    HIDWORD(v287) = *(_DWORD *)((char *)v271 + 3);
    LODWORD(v127) = v271[0];
    *(_DWORD *)((char *)&v287 + 9) = v271[0];
    DWORD1(v290) = *(_DWORD *)&v281[3];
    LODWORD(v115) = *(_DWORD *)v281;
    *(_DWORD *)((char *)&v290 + 1) = *(_DWORD *)v281;
    v152 = *(_DWORD *)v279;
    *(_DWORD *)((char *)&v291 + 1) = *(_DWORD *)v279;
    DWORD1(v291) = *(_DWORD *)&v279[3];
    v153 = *(_DWORD *)v277;
    *(_DWORD *)((char *)v292 + 1) = *(_DWORD *)v277;
    DWORD1(v292[0]) = *(_DWORD *)&v277[3];
    v154 = &v150[v151];
    *(double *)&v155 = v265;
    v156 = v255;
    v157 = v256;
    *(double *)&v282 = v265;
    *((_QWORD *)&v282 + 1) = v255;
    v158 = v118;
    LOBYTE(v283) = v118;
    v159 = v257;
    *((_QWORD *)&v283 + 1) = v257;
    *(_QWORD *)&v284 = v256;
    *((_QWORD *)&v284 + 1) = 1;
    v160 = v246;
    LOBYTE(v285) = v246;
    v162 = v253;
    v161 = v254;
    *((_QWORD *)&v285 + 1) = v254;
    LOBYTE(v286) = 0;
    *(_DWORD *)((char *)&v295 + 1) = v275[0];
    *((_QWORD *)&v286 + 1) = v253;
    *(_QWORD *)&v287 = 0x3FE0000000000000;
    v163 = v252;
    BYTE8(v287) = v252;
    *(double *)&v288 = v137;
    *((_QWORD *)&v288 + 1) = v139;
    *(_QWORD *)&v289 = v141;
    *((_QWORD *)&v289 + 1) = v143;
    v164 = v247;
    LOBYTE(v290) = v247;
    v165 = v250;
    v166 = v251;
    *((_QWORD *)&v290 + 1) = v251;
    LOBYTE(v291) = v125;
    *((_QWORD *)&v291 + 1) = v250;
    v167 = v245;
    LOBYTE(v292[0]) = v245;
    v169 = v248;
    v168 = v249;
    *((_QWORD *)&v292[0] + 1) = v249;
    *(_QWORD *)&v292[1] = v248;
    *(_DWORD *)v299 = v273[0];
    WORD4(v292[1]) = 256;
    v170 = v282;
    v171 = v283;
    v172 = v285;
    v173 = v286;
    v154[2] = v284;
    v154[3] = v172;
    *v154 = v170;
    v154[1] = v171;
    v174 = v287;
    v175 = v289;
    v176 = v290;
    v154[6] = v288;
    v154[7] = v175;
    v154[4] = v173;
    v154[5] = v174;
    v177 = v291;
    v178 = v292[0];
    *(_OWORD *)((char *)v154 + 170) = *(_OWORD *)((char *)v292 + 10);
    v154[9] = v177;
    v154[10] = v178;
    v154[8] = v176;
    LOBYTE(v295) = v158;
    HIDWORD(v295) = *(_DWORD *)((char *)v275 + 3);
    *((_QWORD *)&v297 + 1) = 1;
    v293 = *(double *)&v155;
    v294 = v156;
    v296 = v159;
    *(_QWORD *)&v297 = v157;
    v298 = v160;
    *(_DWORD *)&v299[3] = *(_DWORD *)((char *)v273 + 3);
    v300 = v161;
    v179 = v161;
    v301 = 0;
    *(_DWORD *)&v302[3] = *(_DWORD *)((char *)v272 + 3);
    *(_DWORD *)v302 = v130;
    v303 = v162;
    v180 = v162;
    v304 = 0x3FE0000000000000;
    v305 = v163;
    *(_DWORD *)&v306[3] = *(_DWORD *)((char *)v271 + 3);
    *(_DWORD *)v306 = v127;
    v307 = v137;
    v308 = v139;
    v309 = v141;
    v310 = v143;
    v311 = v164;
    *(_DWORD *)v312 = v115;
    *(_DWORD *)&v312[3] = *(_DWORD *)&v281[3];
    v313 = v166;
    v314 = v125;
    *(_DWORD *)v315 = v152;
    *(_DWORD *)&v315[3] = *(_DWORD *)&v279[3];
    v316 = v165;
    v317 = v167;
    *(_DWORD *)v318 = v153;
    *(_DWORD *)&v318[3] = *(_DWORD *)&v277[3];
    v319 = v168;
    v320 = v169;
    v321 = 256;
    sub_10002B750(v155, v156, SLOBYTE(v264));
    swift_bridgeObjectRetain(v159);
    swift_retain(v157);
    swift_retain(v179);
    v181 = v180;
    swift_retain(v180);
    sub_100135360((uint64_t)&v282);
    sub_100152A78((uint64_t)&v293);
    sub_100007FF0((uint64_t)v262, &qword_10031FFD0);
    v182 = v258;
    sub_10000B234((uint64_t)v258, (uint64_t)v30, &qword_1003221A8);
    swift_storeEnumTagMultiPayload(v30, v259, 0);
    v183 = sub_100003DB8(&qword_1003221D0);
    v184 = sub_1000084FC(&qword_1003221D8, &qword_1003221A8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v185 = sub_100152AE4();
    v186 = (uint64_t)v260;
    _ConditionalContent<>.init(storage:)(v30, v261, v183, v184, v185);
    sub_100007FF0((uint64_t)v182, &qword_1003221A8);
    v187 = v268;
    sub_10000B234(v186, (uint64_t)v268, &qword_1003221C0);
    swift_storeEnumTagMultiPayload(v187, v266, 0);
    v188 = sub_100152BBC();
    _ConditionalContent<>.init(storage:)(v187, v267, v183, v188, v185);
    sub_100007FF0(v186, &qword_1003221C0);
    sub_10002B438(*(uint64_t *)&v265, v255, SLOBYTE(v264));
    swift_release(v181);
    swift_release(v179);
    swift_release(v256);
    swift_bridgeObjectRelease(v257);
    sub_100007FF0((uint64_t)v263, &qword_10031FFD0);
  }
  else
  {
    v189 = *(_QWORD *)&v265;
    v293 = v264;
    v294 = *(_QWORD *)&v265;
    v190 = sub_10002B3F4();
    v191 = swift_bridgeObjectRetain(v189);
    v192 = Text.init<A>(_:)(&v293, &type metadata for String, v190, v191);
    v194 = v193;
    v196 = v195;
    v198 = v197 & 1;
    v200 = a3[3];
    v199 = a3[4];
    sub_100007BBC(a3, v200);
    v201 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v199 + 8) + 32))(v200);
    v202 = Text.font(_:)(v201, v192, v194, v198, v196);
    v204 = v203;
    v206 = v205;
    v265 = *(double *)&v207;
    swift_release(v201);
    sub_10002B438(v192, v194, v198);
    swift_bridgeObjectRelease(v196);
    v208 = v254;
    v209 = *(_QWORD **)(v254 + 32);
    if (!v209)
    {
      while (1)
      {
        v239 = *(_QWORD *)(v208 + 40);
        v240 = type metadata accessor for UIMetrics();
        v241 = type metadata accessor for UIMetrics;
        v242 = (unint64_t *)&qword_100316A00;
LABEL_9:
        v243 = sub_1000052EC(v242, (uint64_t (*)(uint64_t))v241, (uint64_t)&unk_10024D2FC);
        EnvironmentObject.error()(0, v239, v240, v243);
        __break(1u);
      }
    }
    v210 = v206 & 1;
    v211 = v209[10];
    sub_100007BBC(v209 + 6, v209[9]);
    v212 = *(uint64_t (**)(__n128))(v211 + 96);
    v213 = swift_retain(v39);
    v214 = v212(v213);
    swift_release(v39);
    v215 = *(_QWORD *)&v265;
    v216 = Text.foregroundColor(_:)(v214, v202, v204, v210, *(_QWORD *)&v265);
    v218 = v217;
    LOBYTE(v212) = v219;
    v221 = v220;
    sub_10002B438(v202, v204, v210);
    swift_release(v214);
    swift_bridgeObjectRelease(v215);
    v222 = swift_getKeyPath(&unk_100258DE0);
    v223 = swift_getKeyPath(&unk_100258E10);
    v224 = swift_getKeyPath(&unk_100258E40);
    v226 = static Alignment.leading.getter(v224, v225);
    _FrameLayout.init(width:height:alignment:)(&v293, 0, 1, 0, 1, v226, v227);
    v228 = v293;
    v229 = v294;
    v230 = v295;
    v231 = v296;
    v232 = v212 & 1;
    LOBYTE(v275[0]) = v212 & 1;
    LOBYTE(v273[0]) = 0;
    LOBYTE(v272[0]) = v294;
    LOBYTE(v271[0]) = v296;
    v233 = v268;
    *v268 = v216;
    v233[1] = v218;
    *((_BYTE *)v233 + 16) = v232;
    *(_DWORD *)((char *)v233 + 17) = v282;
    *((_DWORD *)v233 + 5) = *(_DWORD *)((char *)&v282 + 3);
    v233[3] = v221;
    v233[4] = v222;
    v233[5] = 1;
    *((_BYTE *)v233 + 48) = 0;
    v234 = v322;
    *((_DWORD *)v233 + 13) = *(_DWORD *)((char *)&v322 + 3);
    *(_DWORD *)((char *)v233 + 49) = v234;
    v233[7] = v223;
    *((_BYTE *)v233 + 64) = 0;
    v235 = *(_DWORD *)v281;
    *((_DWORD *)v233 + 17) = *(_DWORD *)&v281[3];
    *(_DWORD *)((char *)v233 + 65) = v235;
    v233[9] = v224;
    v233[10] = 0x3FE0000000000000;
    *((double *)v233 + 11) = v228;
    *((_BYTE *)v233 + 96) = v229;
    LODWORD(v228) = *(_DWORD *)v279;
    *((_DWORD *)v233 + 25) = *(_DWORD *)&v279[3];
    *(_DWORD *)((char *)v233 + 97) = LODWORD(v228);
    v233[13] = v230;
    *((_BYTE *)v233 + 112) = v231;
    LODWORD(v228) = *(_DWORD *)v277;
    *((_DWORD *)v233 + 29) = *(_DWORD *)&v277[3];
    *(_DWORD *)((char *)v233 + 113) = LODWORD(v228);
    *(_OWORD *)(v233 + 15) = v297;
    *((_WORD *)v233 + 68) = 256;
    swift_storeEnumTagMultiPayload(v233, v266, 1);
    v236 = sub_100003DB8(&qword_1003221D0);
    v237 = sub_100152BBC();
    v238 = sub_100152AE4();
    _ConditionalContent<>.init(storage:)(v233, v267, v236, v237, v238);
  }
}

uint64_t sub_10014F354@<X0>(uint64_t a1@<X8>)
{
  return sub_10014DCC0(a1);
}

double sub_10014F38C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double result;
  __int128 v26;
  __int128 v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;

  v2 = v1;
  v4 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E1F30(v2, (uint64_t)v7, v8);
  v9 = 1 << swift_getEnumCaseMultiPayload(v7, v4);
  if ((v9 & 0x19) != 0)
  {
    v10 = type metadata accessor for AppEvents();
    v11 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    v12 = EnvironmentObject.init()(v10, v11);
    v14 = v13;
    v15 = type metadata accessor for StewieModel();
    v16 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
    v17 = EnvironmentObject.init()(v15, v16);
    v19 = v18;
    v20 = type metadata accessor for UIMetrics();
    v21 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v22 = EnvironmentObject.init()(v20, v21);
    *(_QWORD *)&v29 = v12;
    *((_QWORD *)&v29 + 1) = v14;
    *(_QWORD *)&v30 = v17;
    *((_QWORD *)&v30 + 1) = v19;
    *(_QWORD *)&v31 = v22;
    *((_QWORD *)&v31 + 1) = v23;
    v32 = 0;
  }
  else
  {
    if ((v9 & 0x24) == 0)
      sub_10000AFFC((uint64_t)v7, type metadata accessor for ConnectionClosed);
    v30 = 0u;
    v31 = 0u;
    v29 = 0u;
    v32 = 1;
  }
  v24 = sub_1001513A0();
  _ConditionalContent<>.init(storage:)(&v29, &type metadata for CABannerPossibleCallTrailingView, &type metadata for EmptyView, v24, &protocol witness table for EmptyView);
  result = *(double *)&v33;
  v26 = v34;
  v27 = v35;
  v28 = v36;
  *(_OWORD *)a1 = v33;
  *(_OWORD *)(a1 + 16) = v26;
  *(_OWORD *)(a1 + 32) = v27;
  *(_BYTE *)(a1 + 48) = v28;
  return result;
}

uint64_t sub_10014F570@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  BOOL v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t OpaqueTypeConformance2;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)();
  unint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[5];
  __int128 v86;

  v2 = v1;
  v80 = a1;
  v74 = type metadata accessor for KeyboardShortcut(0);
  v72 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74, v3);
  v70 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for BorderlessButtonStyle(0);
  v67 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69, v5);
  v7 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_1003220B8);
  v66 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100003DB8(&qword_1003220C0);
  v68 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73, v12);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003DB8(&qword_1003220C8);
  v76 = *(_QWORD *)(v15 - 8);
  v77 = v15;
  __chkstk_darwin(v15, v16);
  v75 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003DB8(&qword_1003220D0);
  v78 = *(_QWORD *)(v18 - 8);
  v79 = v18;
  __chkstk_darwin(v18, v19);
  v71 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100003DB8(&qword_1003220D8);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (_QWORD *)v1[4];
  if (!v25)
  {
    v58 = v1[5];
    v59 = type metadata accessor for UIMetrics();
    v60 = type metadata accessor for UIMetrics;
    v61 = (unint64_t *)&qword_100316A00;
LABEL_12:
    v62 = sub_1000052EC(v61, (uint64_t (*)(uint64_t))v60, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v58, v59, v62);
    __break(1u);
    return result;
  }
  v27 = v25[9];
  v26 = v25[10];
  sub_100007BBC(v25 + 6, v27);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v26 + 8))(v85, v27, v26);
  v28 = v1[2];
  if (!v28)
  {
    v58 = v2[3];
    v59 = type metadata accessor for StewieModel();
    v60 = type metadata accessor for StewieModel;
    v61 = &qword_1003186E0;
    goto LABEL_12;
  }
  if (*(_QWORD *)(v28 + 64))
  {
    v29 = *(_WORD *)(v28 + 120);
    v30 = sub_100067058(0, *(_QWORD *)(v28 + 88));
    v31 = 1;
    if (v30 && (v29 & 0xFF00) != 0x200 && (v29 & 0x100) != 0)
    {
      v86 = *(_OWORD *)v2;
      v32 = (_OWORD *)swift_allocObject(&unk_1002F32C8, 64, 7);
      v65 = (uint64_t)&v65;
      v33 = *((_OWORD *)v2 + 1);
      v32[1] = *(_OWORD *)v2;
      v32[2] = v33;
      v32[3] = *((_OWORD *)v2 + 2);
      __chkstk_darwin(v32, v34);
      v63 = (uint64_t)v85;
      sub_100031A88(&v86);
      v35 = sub_1001525E4();
      swift_retain(v28);
      swift_retain(v25);
      v36 = Button.init(action:label:)(sub_1001525C0, v32, sub_1001525C8, &v65 - 4, &type metadata for CallEmergencyServicesButtonLabelView, v35);
      BorderlessButtonStyle.init()(v36);
      v37 = sub_1000084FC(&qword_1003220E8, &qword_1003220B8, (uint64_t)&protocol conformance descriptor for Button<A>);
      v38 = sub_1000052EC(&qword_100319590, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
      v39 = v69;
      View.buttonStyle<A>(_:)(v7, v8, v69, v37, v38);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v7, v39);
      v40 = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v11, v8);
      v41 = v70;
      static KeyboardShortcut.defaultAction.getter(v40);
      v81 = v8;
      v82 = v39;
      v83 = v37;
      v84 = v38;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v81, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      v43 = v75;
      v44 = v73;
      View.keyboardShortcut(_:)(v41, v73, OpaqueTypeConformance2);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v41, v74);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v14, v44);
      v45 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000017, 0x800000010026B980);
      v64 = 2;
      v63 = 58;
      v46 = Text.init(_:tableName:bundle:comment:)(v45);
      v48 = v47;
      v50 = v49;
      v52 = v51 & 1;
      v81 = v44;
      v82 = OpaqueTypeConformance2;
      v53 = swift_getOpaqueTypeConformance2(&v81, &opaque type descriptor for <<opaque return type of View.keyboardShortcut(_:)>>, 1);
      v54 = (uint64_t)v71;
      v55 = v77;
      View.accessibility(label:)(v46, v48, v52, v50, v77, v53);
      sub_10002B438(v46, v48, v52);
      v56 = swift_bridgeObjectRelease(v50);
      (*(void (**)(char *, uint64_t, __n128))(v76 + 8))(v43, v55, v56);
      sub_10000B458(v54, (uint64_t)v24, &qword_1003220D0);
      v31 = 0;
    }
  }
  else
  {
    v31 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56))(v24, v31, 1, v79);
  sub_10000B458((uint64_t)v24, v80, &qword_1003220D8);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v85);
}

uint64_t sub_10014FB54(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v1 = *a1;
  if (*a1)
  {
    v2 = *(_QWORD *)(v1 + 168);
    v10 = 0;
    swift_retain(v2);
    PassthroughSubject.send(_:)(&v10);
    swift_release(v2);
    v3 = *(_QWORD *)(v1 + 96);
    swift_retain(v3);
    v4 = sub_100003DB8(&qword_10032B0E0);
    v5 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v4, v5);
    return swift_release(v3);
  }
  else
  {
    v7 = a1[1];
    v8 = type metadata accessor for AppEvents();
    v9 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    result = EnvironmentObject.error()(0, v7, v8, v9);
    __break(1u);
  }
  return result;
}

uint64_t sub_10014FC34@<X0>(uint64_t a1@<X8>)
{
  return sub_10014F570(a1);
}

uint64_t sub_10014FC6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v71 = a1;
  v1 = sub_100003DB8(&qword_10031A218);
  __chkstk_darwin(v1, v2);
  v4 = (uint64_t *)((char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for Image.Scale(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_10031A208);
  __chkstk_darwin(v10, v11);
  v13 = (uint64_t *)((char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v69 = sub_100003DB8(&qword_10031A1F0);
  __chkstk_darwin(v69, v14);
  v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100003DB8(&qword_100322168);
  v18 = __chkstk_darwin(v70, v17);
  v73 = (uint64_t)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  v72 = (uint64_t)&v68 - v21;
  v23 = Image.init(systemName:)(0xD000000000000011, 0x800000010026B9E0, v22);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for Image.Scale.large(_:), v5);
  KeyPath = swift_getKeyPath(&unk_100258AF8);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)v4 + *(int *)(v1 + 28), v9, v5);
  *v4 = KeyPath;
  sub_10000B234((uint64_t)v4, (uint64_t)v13 + *(int *)(v10 + 36), &qword_10031A218);
  *v13 = v23;
  swift_retain(v23);
  sub_100007FF0((uint64_t)v4, &qword_10031A218);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v25 = swift_release(v23);
  v26 = static Font.title.getter(v25);
  static Font.Weight.semibold.getter(v26);
  v27 = Font.weight(_:)(v26);
  swift_release(v26);
  v28 = swift_getKeyPath(&unk_100258AC8);
  sub_10000B234((uint64_t)v13, (uint64_t)v16, &qword_10031A208);
  v29 = (uint64_t *)&v16[*(int *)(v69 + 36)];
  *v29 = v28;
  v29[1] = v27;
  sub_100007FF0((uint64_t)v13, &qword_10031A208);
  v31 = static Color.green.getter(v30);
  v32 = static Color.white.getter(v31);
  v33 = v73;
  sub_10000B234((uint64_t)v16, v73, &qword_10031A1F0);
  v34 = (uint64_t *)(v33 + *(int *)(v70 + 36));
  *v34 = v31;
  v34[1] = v32;
  sub_100007FF0((uint64_t)v16, &qword_10031A1F0);
  v35 = v33;
  v36 = v72;
  sub_10000B458(v35, v72, &qword_100322168);
  v37 = LocalizedStringKey.init(stringLiteral:)(5459795, 0xE300000000000000);
  v38 = Text.init(_:tableName:bundle:comment:)(v37);
  v40 = v39;
  v42 = v41;
  v44 = v43 & 1;
  v45 = static Font.footnote.getter(v38);
  static Font.Weight.semibold.getter(v45);
  v46 = Font.weight(_:)(v45);
  swift_release(v45);
  v47 = Text.font(_:)(v46, v38, v40, v44, v42);
  v49 = v48;
  LOBYTE(v45) = v50;
  v52 = v51;
  swift_release(v46);
  LOBYTE(v46) = v45 & 1;
  sub_10002B438(v38, v40, v44);
  swift_bridgeObjectRelease(v42);
  v54 = static Color.white.getter(v53);
  v55 = Text.foregroundColor(_:)(v54, v47, v49, v45 & 1, v52);
  v57 = v56;
  LOBYTE(v45) = v58;
  v60 = v59;
  swift_release(v54);
  LOBYTE(v45) = v45 & 1;
  sub_10002B438(v47, v49, v46);
  swift_bridgeObjectRelease(v52);
  v61 = swift_getKeyPath(&unk_100258DE0);
  v62 = swift_getKeyPath(&unk_100258E10);
  v63 = swift_getKeyPath(&unk_100258E40);
  v64 = v73;
  sub_10000B234(v36, v73, &qword_100322168);
  v65 = v71;
  sub_10000B234(v64, v71, &qword_100322168);
  v66 = v65 + *(int *)(sub_100003DB8(&qword_100322170) + 48);
  *(_QWORD *)v66 = v55;
  *(_QWORD *)(v66 + 8) = v57;
  *(_BYTE *)(v66 + 16) = v45;
  *(_QWORD *)(v66 + 24) = v60;
  *(_QWORD *)(v66 + 32) = v61;
  *(_QWORD *)(v66 + 40) = 1;
  *(_BYTE *)(v66 + 48) = 0;
  *(_QWORD *)(v66 + 56) = v62;
  *(_BYTE *)(v66 + 64) = 1;
  *(_QWORD *)(v66 + 72) = v63;
  *(_QWORD *)(v66 + 80) = 0x3FE0000000000000;
  sub_10002B750(v55, v57, v45);
  swift_bridgeObjectRetain(v60);
  swift_retain(v61);
  swift_retain(v62);
  swift_retain(v63);
  sub_100007FF0(v72, &qword_100322168);
  sub_10002B438(v55, v57, v45);
  swift_release(v63);
  swift_release(v62);
  swift_release(v61);
  swift_bridgeObjectRelease(v60);
  return sub_100007FF0(v64, &qword_100322168);
}

uint64_t sub_100150198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v3 = sub_100003DB8(&qword_100322160);
  return sub_10014FC6C(a2 + *(int *)(v3 + 44));
}

uint64_t sub_1001501E0()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_100150200(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for Image.Scale(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.imageScale.setter(v3);
}

unint64_t sub_10015027C()
{
  unint64_t result;

  result = qword_100321C98;
  if (!qword_100321C98)
  {
    result = swift_getWitnessTable(&unk_10025FD10, &type metadata for ExplorerConnectionAssistantBannerView);
    atomic_store(result, (unint64_t *)&qword_100321C98);
  }
  return result;
}

uint64_t type metadata accessor for CABannerStaticContentLeadingView(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100321E58, (uint64_t)&nominal type descriptor for CABannerStaticContentLeadingView);
}

uint64_t type metadata accessor for CABannerStaticContentTrailingView(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100321D38, (uint64_t)&nominal type descriptor for CABannerStaticContentTrailingView);
}

uint64_t sub_100150300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10015030C);
}

uint64_t sub_100150310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10015031C);
}

uint64_t *sub_100150324(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v15);
  }
  else
  {
    v7 = v4;
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v8 = type metadata accessor for ConnectionClosed(0);
      v9 = *(int *)(v8 + 20);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for Date(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = sub_100003DB8(&qword_100317D58);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      v16 = *(int *)(v8 + 24);
      v17 = *(uint64_t *)((char *)a2 + v16);
      *(uint64_t *)((char *)a1 + v16) = v17;
      swift_bridgeObjectRetain(v17);
      swift_storeEnumTagMultiPayload(a1, v7, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
  }
  return a1;
}

double sub_100150478(uint64_t a1)
{
  uint64_t v2;
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  if (swift_getEnumCaseMultiPayload(a1, v2) == 1)
  {
    v4 = type metadata accessor for ConnectionClosed(0);
    v5 = a1 + *(int *)(v4 + 20);
    v6 = type metadata accessor for Date(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v4 + 24))).n128_u64[0];
  }
  return result;
}

_BYTE *sub_100150528(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    *a1 = *a2;
    v5 = type metadata accessor for ConnectionClosed(0);
    v6 = *(int *)(v5 + 20);
    v7 = &a1[v6];
    v8 = &a2[v6];
    v9 = type metadata accessor for Date(0);
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      v11 = sub_100003DB8(&qword_100317D58);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
    v12 = *(int *)(v5 + 24);
    v13 = *(_QWORD *)&a2[v12];
    *(_QWORD *)&a1[v12] = v13;
    swift_bridgeObjectRetain(v13);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

_BYTE *sub_100150654(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    sub_10000AFFC((uint64_t)a1, type metadata accessor for ConnectionAssitantBannerMode.Mode);
    v4 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      *a1 = *a2;
      v5 = type metadata accessor for ConnectionClosed(0);
      v6 = *(int *)(v5 + 20);
      v7 = &a1[v6];
      v8 = &a2[v6];
      v9 = type metadata accessor for Date(0);
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        v11 = sub_100003DB8(&qword_100317D58);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
      v12 = *(int *)(v5 + 24);
      v13 = *(_QWORD *)&a2[v12];
      *(_QWORD *)&a1[v12] = v13;
      swift_bridgeObjectRetain(v13);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

_BYTE *sub_100150798(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    *a1 = *a2;
    v5 = type metadata accessor for ConnectionClosed(0);
    v6 = *(int *)(v5 + 20);
    v7 = &a1[v6];
    v8 = &a2[v6];
    v9 = type metadata accessor for Date(0);
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      v11 = sub_100003DB8(&qword_100317D58);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
    *(_QWORD *)&a1[*(int *)(v5 + 24)] = *(_QWORD *)&a2[*(int *)(v5 + 24)];
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

_BYTE *sub_1001508C0(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_10000AFFC((uint64_t)a1, type metadata accessor for ConnectionAssitantBannerMode.Mode);
    v4 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      *a1 = *a2;
      v5 = type metadata accessor for ConnectionClosed(0);
      v6 = *(int *)(v5 + 20);
      v7 = &a1[v6];
      v8 = &a2[v6];
      v9 = type metadata accessor for Date(0);
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        v11 = sub_100003DB8(&qword_100317D58);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
      *(_QWORD *)&a1[*(int *)(v5 + 24)] = *(_QWORD *)&a2[*(int *)(v5 + 24)];
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100150A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100150A0C);
}

uint64_t sub_100150A10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100150A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100150A58);
}

uint64_t sub_100150A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for CABannerVariableContentView(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100321DC8, (uint64_t)&nominal type descriptor for CABannerVariableContentView);
}

uint64_t sub_100150AB0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for ConnectionAssitantBannerMode.Mode(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100150B18(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    a1[1] = a2[1];
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    swift_retain(v4);
    if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
    {
      *v7 = *v8;
      v10 = type metadata accessor for ConnectionClosed(0);
      v11 = *(int *)(v10 + 20);
      v12 = &v7[v11];
      v13 = &v8[v11];
      v14 = type metadata accessor for Date(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = sub_100003DB8(&qword_100317D58);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      v17 = *(int *)(v10 + 24);
      v18 = *(_QWORD *)&v8[v17];
      *(_QWORD *)&v7[v17] = v18;
      swift_bridgeObjectRetain(v18);
      swift_storeEnumTagMultiPayload(v7, v9, 1);
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
  }
  return v5;
}

double sub_100150C94(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  swift_release(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v7 = type metadata accessor for ConnectionClosed(0);
    v8 = &v4[*(int *)(v7 + 20)];
    v9 = type metadata accessor for Date(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)&v4[*(int *)(v7 + 24)]).n128_u64[0];
  }
  return result;
}

uint64_t *sub_100150D58(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  swift_retain(v5);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    *v7 = *v8;
    v10 = type metadata accessor for ConnectionClosed(0);
    v11 = *(int *)(v10 + 20);
    v12 = &v7[v11];
    v13 = &v8[v11];
    v14 = type metadata accessor for Date(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = sub_100003DB8(&qword_100317D58);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v17 = *(int *)(v10 + 24);
    v18 = *(_QWORD *)&v8[v17];
    *(_QWORD *)&v7[v17] = v18;
    swift_bridgeObjectRetain(v18);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_100150EA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  a1[1] = a2[1];
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_10000AFFC((uint64_t)a1 + v8, type metadata accessor for ConnectionAssitantBannerMode.Mode);
    v11 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      *v9 = *v10;
      v12 = type metadata accessor for ConnectionClosed(0);
      v13 = *(int *)(v12 + 20);
      v14 = &v9[v13];
      v15 = &v10[v13];
      v16 = type metadata accessor for Date(0);
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        v18 = sub_100003DB8(&qword_100317D58);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 16))(v14, v15, v16);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      v19 = *(int *)(v12 + 24);
      v20 = *(_QWORD *)&v10[v19];
      *(_QWORD *)&v9[v19] = v20;
      swift_bridgeObjectRetain(v20);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  return a1;
}

_OWORD *sub_100151020(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    *v5 = *v6;
    v8 = type metadata accessor for ConnectionClosed(0);
    v9 = *(int *)(v8 + 20);
    v10 = &v5[v9];
    v11 = &v6[v9];
    v12 = type metadata accessor for Date(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_100003DB8(&qword_100317D58);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    *(_QWORD *)&v5[*(int *)(v8 + 24)] = *(_QWORD *)&v6[*(int *)(v8 + 24)];
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_100151160(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  a1[1] = a2[1];
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_10000AFFC((uint64_t)a1 + v7, type metadata accessor for ConnectionAssitantBannerMode.Mode);
    v10 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      *v8 = *v9;
      v11 = type metadata accessor for ConnectionClosed(0);
      v12 = *(int *)(v11 + 20);
      v13 = &v8[v12];
      v14 = &v9[v12];
      v15 = type metadata accessor for Date(0);
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        v17 = sub_100003DB8(&qword_100317D58);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 32))(v13, v14, v15);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      *(_QWORD *)&v8[*(int *)(v11 + 24)] = *(_QWORD *)&v9[*(int *)(v11 + 24)];
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1001512D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001512DC);
}

uint64_t sub_1001512DC(char *a1, uint64_t a2, uint64_t a3)
{
  return sub_100152244(a1, a2, a3, type metadata accessor for ConnectionAssitantBannerMode.Mode);
}

uint64_t sub_1001512E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001512F4);
}

char *sub_1001512F4(char *a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1001522E4(a1, a2, a3, a4, type metadata accessor for ConnectionAssitantBannerMode.Mode);
}

uint64_t sub_100151300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100152364(a1, a2, a3, type metadata accessor for ConnectionAssitantBannerMode.Mode);
}

uint64_t sub_10015130C()
{
  _QWORD v1[2];

  v1[0] = sub_100007FAC(&qword_100321C20);
  v1[1] = sub_1000084FC(&qword_100321C70, &qword_100321C20, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
}

uint64_t sub_100151370(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029BF44, 1);
}

uint64_t sub_100151380(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029BF1C, 1);
}

uint64_t sub_100151390(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029BEF4, 1);
}

unint64_t sub_1001513A0()
{
  unint64_t result;

  result = qword_100321E90;
  if (!qword_100321E90)
  {
    result = swift_getWitnessTable(&unk_100258D8C, &type metadata for CABannerPossibleCallTrailingView);
    atomic_store(result, (unint64_t *)&qword_100321E90);
  }
  return result;
}

uint64_t type metadata accessor for CABannerConnectionClosedView(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100322068, (uint64_t)&nominal type descriptor for CABannerConnectionClosedView);
}

unint64_t sub_1001513F8()
{
  unint64_t result;

  result = qword_100321ED8;
  if (!qword_100321ED8)
  {
    result = swift_getWitnessTable(&unk_100258D3C, &type metadata for CABannerConnectionActiveView);
    atomic_store(result, (unint64_t *)&qword_100321ED8);
  }
  return result;
}

unint64_t sub_10015143C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100321EF0;
  if (!qword_100321EF0)
  {
    v1 = sub_100007FAC(&qword_100321EC8);
    sub_1001514C0();
    sub_1000052EC(&qword_100321F00, type metadata accessor for CABannerConnectionClosedView, (uint64_t)&unk_100258C9C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100321EF0);
  }
  return result;
}

unint64_t sub_1001514C0()
{
  unint64_t result;

  result = qword_100321EF8;
  if (!qword_100321EF8)
  {
    result = swift_getWitnessTable(&unk_100258CEC, &type metadata for CABannerQuestionnaireView);
    atomic_store(result, (unint64_t *)&qword_100321EF8);
  }
  return result;
}

uint64_t sub_100151504()
{
  return sub_100008140(&qword_100321F08, &qword_100321F10, (void (*)(void))sub_100151528, (void (*)(void))sub_10015156C);
}

unint64_t sub_100151528()
{
  unint64_t result;

  result = qword_100321F18;
  if (!qword_100321F18)
  {
    result = swift_getWitnessTable(&unk_100258C4C, &type metadata for CABannerStewieUnavailableView);
    atomic_store(result, (unint64_t *)&qword_100321F18);
  }
  return result;
}

unint64_t sub_10015156C()
{
  unint64_t result;

  result = qword_100321F20;
  if (!qword_100321F20)
  {
    result = swift_getWitnessTable(&unk_100258BFC, &type metadata for CABannerOverInternetView);
    atomic_store(result, (unint64_t *)&qword_100321F20);
  }
  return result;
}

unint64_t sub_1001515B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100321F28;
  if (!qword_100321F28)
  {
    v1 = sub_100007FAC(&qword_100321EE0);
    sub_1001513F8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100321F28);
  }
  return result;
}

uint64_t sub_10015161C(uint64_t result)
{
  *(_BYTE *)(result + 153) = 1;
  return result;
}

unint64_t sub_100151628()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100321F90;
  if (!qword_100321F90)
  {
    v1 = sub_100007FAC(&qword_100321F88);
    sub_1000D7CD4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100321F90);
  }
  return result;
}

uint64_t sub_100151694()
{
  return sub_100008140(&qword_100321FA0, &qword_100321F58, (void (*)(void))sub_1001516B8, (void (*)(void))sub_1001517A8);
}

unint64_t sub_1001516B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100321FA8;
  if (!qword_100321FA8)
  {
    v1 = sub_100007FAC(&qword_100321F68);
    sub_100151724();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100321FA8);
  }
  return result;
}

unint64_t sub_100151724()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100321FB0;
  if (!qword_100321FB0)
  {
    v1 = sub_100007FAC(&qword_100321F60);
    sub_1000084FC(&qword_100321FB8, &qword_1003214C8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100321FB0);
  }
  return result;
}

unint64_t sub_1001517A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100321FC0;
  if (!qword_100321FC0)
  {
    v1 = sub_100007FAC(&qword_100321F40);
    sub_100151814();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100321FC0);
  }
  return result;
}

unint64_t sub_100151814()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100321FC8;
  if (!qword_100321FC8)
  {
    v1 = sub_100007FAC(&qword_100321F38);
    sub_1000084FC(&qword_100321FD0, &qword_1003214D8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100321FC8);
  }
  return result;
}

unint64_t sub_100151898()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100321FD8;
  if (!qword_100321FD8)
  {
    v1 = sub_100007FAC(&qword_100321F98);
    sub_100151628();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100321FD8);
  }
  return result;
}

uint64_t sub_100151904()
{
  return sub_100008140(&qword_100321FE0, &qword_100321F70, (void (*)(void))sub_100151694, (void (*)(void))sub_100151898);
}

uint64_t sub_100151928(uint64_t result)
{
  *(_BYTE *)(result + 153) = 0;
  return result;
}

uint64_t sub_100151938()
{
  return EnvironmentValues.imageScale.getter();
}

unint64_t sub_10015195C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100322008;
  if (!qword_100322008)
  {
    v1 = sub_100007FAC(&qword_100321FF8);
    sub_1000D7B94();
    sub_1000084FC(&qword_10031A210, &qword_10031A218, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100322008);
  }
  return result;
}

ValueMetadata *type metadata accessor for CABannerPossibleCallTrailingView()
{
  return &type metadata for CABannerPossibleCallTrailingView;
}

ValueMetadata *type metadata accessor for CABannerConnectionActiveView()
{
  return &type metadata for CABannerConnectionActiveView;
}

uint64_t *assignWithCopy for CABannerOverInternetView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

uint64_t *assignWithTake for CABannerOverInternetView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for CABannerOverInternetView()
{
  return &type metadata for CABannerOverInternetView;
}

uint64_t _s8SOSBuddy24CABannerOverInternetViewVwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  swift_retain(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for TryOutConnectionAlertButtonsView(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 17))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TryOutConnectionAlertButtonsView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CABannerStewieUnavailableView()
{
  return &type metadata for CABannerStewieUnavailableView;
}

_QWORD *sub_100151BA8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    a1[1] = a2[1];
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    *((_BYTE *)a1 + v6) = *((_BYTE *)a2 + v6);
    v9 = type metadata accessor for ConnectionClosed(0);
    v10 = *(int *)(v9 + 20);
    v11 = &v7[v10];
    v12 = &v8[v10];
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v14 + 48);
    v16 = swift_retain(v4);
    if (v15(v12, 1, v13, v16))
    {
      v17 = sub_100003DB8(&qword_100317D58);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v18 = *(int *)(v9 + 24);
    v19 = *(_QWORD *)&v8[v18];
    *(_QWORD *)&v7[v18] = v19;
    swift_bridgeObjectRetain(v19);
  }
  return v5;
}

double sub_100151CDC(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  swift_release(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for ConnectionClosed(0);
  v6 = &v4[*(int *)(v5 + 20)];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)&v4[*(int *)(v5 + 24)]).n128_u64[0];
  return result;
}

_QWORD *sub_100151D70(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *((_BYTE *)a1 + v6) = *((_BYTE *)a2 + v6);
  v9 = type metadata accessor for ConnectionClosed(0);
  v10 = *(int *)(v9 + 20);
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v14 + 48);
  v16 = swift_retain(v5);
  if (v15(v12, 1, v13, v16))
  {
    v17 = sub_100003DB8(&qword_100317D58);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v18 = *(int *)(v9 + 24);
  v19 = *(_QWORD *)&v8[v18];
  *(_QWORD *)&v7[v18] = v19;
  swift_bridgeObjectRetain(v19);
  return a1;
}

_QWORD *sub_100151E74(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  a1[1] = a2[1];
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  v11 = type metadata accessor for ConnectionClosed(0);
  v12 = *(int *)(v11 + 20);
  v13 = &v9[v12];
  v14 = &v10[v12];
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = sub_100003DB8(&qword_100317D58);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  v21 = *(int *)(v11 + 24);
  v22 = *(_QWORD *)&v10[v21];
  v23 = *(_QWORD *)&v9[v21];
  *(_QWORD *)&v9[v21] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  return a1;
}

_OWORD *sub_100151FE0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *((_BYTE *)a1 + v4) = *((_BYTE *)a2 + v4);
  v7 = type metadata accessor for ConnectionClosed(0);
  v8 = *(int *)(v7 + 20);
  v9 = &v5[v8];
  v10 = &v6[v8];
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100003DB8(&qword_100317D58);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_QWORD *)&v5[*(int *)(v7 + 24)] = *(_QWORD *)&v6[*(int *)(v7 + 24)];
  return a1;
}

_QWORD *sub_1001520D0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  a1[1] = a2[1];
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *((_BYTE *)a1 + v7) = *((_BYTE *)a2 + v7);
  v10 = type metadata accessor for ConnectionClosed(0);
  v11 = *(int *)(v10 + 20);
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = sub_100003DB8(&qword_100317D58);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  v20 = *(int *)(v10 + 24);
  v21 = *(_QWORD *)&v8[v20];
  *(_QWORD *)&v8[v20] = *(_QWORD *)&v9[v20];
  swift_bridgeObjectRelease(v21);
  return a1;
}

uint64_t sub_10015222C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100152238);
}

uint64_t sub_100152238(char *a1, uint64_t a2, uint64_t a3)
{
  return sub_100152244(a1, a2, a3, type metadata accessor for ConnectionClosed);
}

uint64_t sub_100152244(char *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 2147483646)
  {
    v5 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v5) = -1;
    v6 = v5 - 1;
    if (v6 < 0)
      v6 = -1;
    return (v6 + 1);
  }
  else
  {
    v10 = a4(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v10);
  }
}

uint64_t sub_1001522CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001522D8);
}

char *sub_1001522D8(char *a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1001522E4(a1, a2, a3, a4, type metadata accessor for ConnectionClosed);
}

char *sub_1001522E4(char *result, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  char *v6;
  uint64_t v8;

  v6 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v8 = a5(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(&v6[*(int *)(a4 + 20)], a2, a2, v8);
  }
  return result;
}

uint64_t sub_100152358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100152364(a1, a2, a3, type metadata accessor for ConnectionClosed);
}

uint64_t sub_100152364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v6;
  _QWORD v7[2];

  v7[0] = &unk_1002588F0;
  result = a4(319);
  if (v6 <= 0x3F)
  {
    v7[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v7, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CABannerQuestionnaireView()
{
  return &type metadata for CABannerQuestionnaireView;
}

unint64_t sub_1001523EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003220A0;
  if (!qword_1003220A0)
  {
    v1 = sub_100007FAC(&qword_1003220A8);
    sub_1001513A0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003220A0);
  }
  return result;
}

uint64_t sub_100152458()
{
  _QWORD v1[4];

  v1[0] = sub_100007FAC(&qword_100321E98);
  v1[1] = sub_100007FAC(&qword_100316A20);
  v1[2] = sub_1000084FC(&qword_100321EA8, &qword_100321E98, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v1[3] = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
}

uint64_t sub_1001524F8()
{
  return sub_100008140(&qword_1003220B0, &qword_100321F78, (void (*)(void))sub_100151904, (void (*)(void))sub_1000D148C);
}

uint64_t sub_10015252C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029C098, 1);
}

uint64_t sub_10015253C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029C070, 1);
}

uint64_t sub_10015254C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029C048, 1);
}

uint64_t sub_10015255C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029C020, 1);
}

uint64_t sub_10015256C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029BFF8, 1);
}

uint64_t sub_10015257C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029BFD0, 1);
}

uint64_t sub_10015258C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001525C0()
{
  uint64_t v0;

  return sub_10014FB54((uint64_t *)(v0 + 16));
}

uint64_t sub_1001525C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100007CBC(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1001525E4()
{
  unint64_t result;

  result = qword_1003220E0;
  if (!qword_1003220E0)
  {
    result = swift_getWitnessTable(&unk_100258F94, &type metadata for CallEmergencyServicesButtonLabelView);
    atomic_store(result, (unint64_t *)&qword_1003220E0);
  }
  return result;
}

uint64_t initializeWithCopy for CallEmergencyServicesButtonLabelView(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

_QWORD *assignWithCopy for CallEmergencyServicesButtonLabelView(_QWORD *a1, _QWORD *a2)
{
  sub_1000B8938(a1, a2);
  return a1;
}

uint64_t assignWithTake for CallEmergencyServicesButtonLabelView(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for CallEmergencyServicesButtonLabelView()
{
  return &type metadata for CallEmergencyServicesButtonLabelView;
}

ValueMetadata *type metadata accessor for CABannerTransmissionProgressView()
{
  return &type metadata for CABannerTransmissionProgressView;
}

ValueMetadata *type metadata accessor for ConnectionAssitantTryOutBannerView()
{
  return &type metadata for ConnectionAssitantTryOutBannerView;
}

uint64_t sub_100152708()
{
  return sub_100152C98(&qword_1003220F0, &qword_1003220D8, (void (*)(void))sub_100152734);
}

unint64_t sub_100152734()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = qword_1003220F8;
  if (!qword_1003220F8)
  {
    v1 = sub_100007FAC(&qword_1003220D0);
    v2 = sub_100007FAC(&qword_1003220C0);
    v4 = sub_100007FAC(&qword_1003220B8);
    v5 = type metadata accessor for BorderlessButtonStyle(255);
    v6 = sub_1000084FC(&qword_1003220E8, &qword_1003220B8, (uint64_t)&protocol conformance descriptor for Button<A>);
    v7 = sub_1000052EC(&qword_100319590, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.keyboardShortcut(_:)>>, 1);
    sub_1000052EC(&qword_100316C10, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003220F8);
  }
  return result;
}

uint64_t sub_100152864()
{
  return sub_1000084FC(&qword_100322100, &qword_100322108, (uint64_t)&protocol conformance descriptor for TupleView<A>);
}

unint64_t sub_100152894()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100322110;
  if (!qword_100322110)
  {
    v1 = sub_100007FAC(&qword_100322118);
    sub_100152900();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100322110);
  }
  return result;
}

unint64_t sub_100152900()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100322120;
  if (!qword_100322120)
  {
    v1 = sub_100007FAC(&qword_100322128);
    sub_10015296C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100322120);
  }
  return result;
}

unint64_t sub_10015296C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100322130;
  if (!qword_100322130)
  {
    v1 = sub_100007FAC(&qword_100322138);
    sub_10010D02C();
    sub_1000084FC(&qword_1003192C0, &qword_1003192C8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100322130);
  }
  return result;
}

uint64_t sub_1001529F0()
{
  return sub_1000084FC(&qword_100322140, &qword_100322148, (uint64_t)&protocol conformance descriptor for TupleView<A>);
}

uint64_t sub_100152A1C()
{
  return sub_1000084FC(&qword_100322150, &qword_100322158, (uint64_t)&protocol conformance descriptor for TupleView<A>);
}

uint64_t sub_100152A48(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029C110, 1);
}

uint64_t sub_100152A58(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029C0E8, 1);
}

uint64_t sub_100152A68(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029C0C0, 1);
}

uint64_t sub_100152A78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 72);
  sub_10002B438(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_100152AE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003221E0;
  if (!qword_1003221E0)
  {
    v1 = sub_100007FAC(&qword_1003221D0);
    sub_100152B50();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003221E0);
  }
  return result;
}

unint64_t sub_100152B50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003221E8;
  if (!qword_1003221E8)
  {
    v1 = sub_100007FAC(&qword_1003221F0);
    sub_10015296C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003221E8);
  }
  return result;
}

unint64_t sub_100152BBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003221F8;
  if (!qword_1003221F8)
  {
    v1 = sub_100007FAC(&qword_1003221C0);
    sub_1000084FC(&qword_1003221D8, &qword_1003221A8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    sub_100152AE4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003221F8);
  }
  return result;
}

uint64_t sub_100152C40()
{
  return sub_1000084FC(&qword_100322200, &qword_100322208, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_100152C6C()
{
  return sub_100152C98(&qword_100322210, &qword_100322198, (void (*)(void))sub_100152CFC);
}

uint64_t sub_100152C98(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007FAC(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100152CFC()
{
  return sub_100152C98(&qword_100322218, &qword_100322190, (void (*)(void))sub_100152D18);
}

unint64_t sub_100152D18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100322220;
  if (!qword_100322220)
  {
    v1 = sub_100007FAC(&qword_100322188);
    sub_100152D84();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100322220);
  }
  return result;
}

unint64_t sub_100152D84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100322228;
  if (!qword_100322228)
  {
    v1 = sub_100007FAC(&qword_100322180);
    sub_1000084FC(&qword_100322230, &qword_100322178, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100322228);
  }
  return result;
}

uint64_t sub_100152E08()
{
  return sub_1000052EC(&qword_100321C18, type metadata accessor for CABannerView, (uint64_t)&unk_100258908);
}

ValueMetadata *type metadata accessor for FallbackStartView()
{
  return &type metadata for FallbackStartView;
}

uint64_t sub_100152E44(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029C154, 1);
}

uint64_t sub_100152E54@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t OpaqueTypeConformance2;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v46 = a2;
  v55 = a3;
  v4 = type metadata accessor for StackNavigationViewStyle(0);
  v5 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  v51 = v5;
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_100322238);
  v10 = *(_QWORD *)(v9 - 8);
  v48 = v9;
  v49 = v10;
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003DB8(&qword_100322240);
  v53 = *(_QWORD *)(v14 - 8);
  v54 = v14;
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100003DB8(&qword_100322248);
  __chkstk_darwin(v52, v18);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100003DB8(&qword_100322250);
  v21 = sub_100007FAC(&qword_100322258);
  v22 = sub_100007FAC(&qword_10031CAE0);
  v23 = sub_100007FAC(&qword_100322260);
  v24 = sub_1000084FC(&qword_100322268, &qword_100322260, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v56 = v23;
  v57 = v24;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v56, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v26 = sub_1000084FC(&qword_10031CAF8, &qword_10031CAE0, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v56 = v21;
  v57 = v22;
  v58 = OpaqueTypeConformance2;
  v59 = v26;
  v27 = swift_getOpaqueTypeConformance2(&v56, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v28 = NavigationView.init(content:)(sub_1001531D8, 0, v47, v27);
  StackNavigationViewStyle.init()(v28);
  v29 = sub_1000084FC(&qword_100322270, &qword_100322238, (uint64_t)&protocol conformance descriptor for NavigationView<A>);
  v30 = sub_1000052EC(&qword_10031CB08, (uint64_t (*)(uint64_t))&type metadata accessor for StackNavigationViewStyle, (uint64_t)&protocol conformance descriptor for StackNavigationViewStyle);
  v31 = v48;
  v32 = v50;
  View.navigationViewStyle<A>(_:)(v8, v48, v50, v29, v30);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v8, v32);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v31);
  if (a1)
  {
    v33 = a1[9];
    v34 = a1[10];
    sub_100007BBC(a1 + 6, v33);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v34 + 24))(&v56, v33, v34);
    v35 = v59;
    v36 = v60;
    sub_100007BBC(&v56, v59);
    v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 568))(v35, v36);
    KeyPath = swift_getKeyPath(&unk_100259058);
    v40 = v53;
    v39 = v54;
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v20, v17, v54);
    v41 = (uint64_t *)&v20[*(int *)(v52 + 36)];
    *v41 = KeyPath;
    v41[1] = v37;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v17, v39);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(&v56);
    return sub_100153894((uint64_t)v20, v55);
  }
  else
  {
    v43 = type metadata accessor for UIMetrics();
    v44 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v46, v43, v44);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001531D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OpaqueTypeConformance2;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];

  v49 = a1;
  v1 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v47 = *(_QWORD *)(v1 - 8);
  v48 = v1;
  __chkstk_darwin(v1, v2);
  v46 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CircularProgressViewStyle(0);
  v43 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100316B28);
  v42 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003DB8(&qword_100316B30);
  v40 = *(_QWORD *)(v12 - 8);
  v41 = v12;
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003DB8(&qword_100322260);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003DB8(&qword_100322258);
  v21 = *(_QWORD *)(v20 - 8);
  v44 = v20;
  v45 = v21;
  v23 = __chkstk_darwin(v20, v22);
  v25 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v19 = static HorizontalAlignment.center.getter(v23);
  *((_QWORD *)v19 + 1) = 0;
  v19[16] = 1;
  v26 = sub_100003DB8(&qword_100322278);
  v27 = &v19[*(int *)(v26 + 44)];
  v28 = ProgressView<>.init<>()(v26);
  CircularProgressViewStyle.init()(v28);
  v29 = sub_1000084FC(&qword_100316C20, &qword_100316B28, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
  v30 = sub_1000052EC(&qword_100316C28, (uint64_t (*)(uint64_t))&type metadata accessor for CircularProgressViewStyle, (uint64_t)&protocol conformance descriptor for CircularProgressViewStyle);
  View.progressViewStyle<A>(_:)(v7, v8, v4, v29, v30);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v8);
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v27, v15, v41);
  v32 = v46;
  v31 = v47;
  v33 = v48;
  (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v46, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v48);
  v34 = sub_1000084FC(&qword_100322268, &qword_100322260, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.navigationBarTitleDisplayMode(_:)(v32, v16, v34);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
  sub_1001538DC((uint64_t)v19);
  v35 = sub_100003DB8(&qword_10031CAE0);
  v50[0] = v16;
  v50[1] = v34;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v37 = sub_1000084FC(&qword_10031CAF8, &qword_10031CAE0, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v38 = v44;
  View.toolbar<A>(content:)(sub_10015354C, 0, v44, v35, OpaqueTypeConformance2, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v25, v38);
}

uint64_t sub_10015354C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v23;

  v0 = sub_100003DB8(&qword_10031CB10);
  __chkstk_darwin(v0, v1);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003DB8(&qword_10031CB18);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003DB8(&qword_100319208);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = __chkstk_darwin(v13, v15);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.principal.getter(v16);
  v19 = ToolbarItem<>.init(placement:content:)(v12, sub_100153734, 0, &type metadata for Text, &protocol witness table for Text);
  static ToolbarItemPlacement.navigationBarTrailing.getter(v19);
  v20 = sub_100094CC0();
  ToolbarItem<>.init(placement:content:)(v12, sub_100094AD8, 0, &type metadata for EndSessionButton, v20);
  v21 = &v3[*(int *)(v0 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v3, v18, v13);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v21, v8, v4);
  TupleToolbarContent.init(_:)(v3, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v13);
}

void sub_100153734(uint64_t a1@<X8>)
{
  id v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;

  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v24._object = (void *)0x8000000100265F20;
  v3._countAndFlagsBits = 0x636E656772656D45;
  v3._object = (void *)0xED0000534F532079;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0xD000000000000032;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v24);

  v23 = v5;
  v6 = sub_10002B3F4();
  v8 = Text.init<A>(_:)(&v23, &type metadata for String, v6, v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = static Font.headline.getter(v8);
  v16 = Text.font(_:)(v15, v8, v10, v14, v12);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  swift_release(v15);
  sub_10002B438(v8, v10, v14);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 16) = v20 & 1;
  *(_QWORD *)(a1 + 24) = v22;
}

uint64_t sub_100153884@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100152E54(*(_QWORD **)v1, *(_QWORD *)(v1 + 8), a1);
}

uint64_t sub_100153894(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100322248);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001538DC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003DB8(&qword_100322260);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100153920()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100322280;
  if (!qword_100322280)
  {
    v1 = sub_100007FAC(&qword_100322248);
    v2[0] = sub_100007FAC(&qword_100322238);
    v2[1] = type metadata accessor for StackNavigationViewStyle(255);
    v2[2] = sub_1000084FC(&qword_100322270, &qword_100322238, (uint64_t)&protocol conformance descriptor for NavigationView<A>);
    v2[3] = sub_1000052EC(&qword_10031CB08, (uint64_t (*)(uint64_t))&type metadata accessor for StackNavigationViewStyle, (uint64_t)&protocol conformance descriptor for StackNavigationViewStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.navigationViewStyle<A>(_:)>>, 1);
    sub_1000084FC(&qword_100316C00, &qword_100316C08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100322280);
  }
  return result;
}

uint64_t sub_100153A28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  __n128 v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;

  v1 = v0;
  v41 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v39 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41, v2);
  v40 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v13 = objc_msgSend(v12, "bundleIdentifier");

  if (v13)
  {
    v14 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

  }
  else
  {
    v16 = 0x8000000100260990;
    v14 = (_QWORD *)0xD000000000000012;
  }
  sub_10000D75C();
  v43 = v14;
  v44 = v16;
  swift_bridgeObjectRetain(v16);
  v17._countAndFlagsBits = 0x67416863726F542ELL;
  v17._object = (void *)0xEB00000000746E65;
  String.append(_:)(v17);
  v18 = swift_bridgeObjectRelease(v16);
  v19 = v43;
  v20 = v44;
  static DispatchQoS.unspecified.getter(v18);
  v43 = _swiftEmptyArrayStorage;
  v21 = sub_1000052EC((unint64_t *)&unk_1003178B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = sub_100003DB8((uint64_t *)&unk_100324AE0);
  v23 = sub_10000F138((unint64_t *)&unk_1003178C0, (uint64_t *)&unk_100324AE0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v22, v23, v4, v21);
  v24 = v40;
  (*(void (**)(char *, _QWORD, uint64_t))(v39 + 104))(v40, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v41);
  v25 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v19, v20, v11, v7, v24, 0);
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 16) = v25;
  *(_BYTE *)(v1 + 40) = 1;
  *(_QWORD *)(v1 + 48) = 0;
  if (qword_100315870 != -1)
    swift_once(&qword_100315870, sub_1000D975C);
  v26 = type metadata accessor for Logger(0);
  sub_10000D744(v26, (uint64_t)qword_10033FE08);
  v28 = swift_retain_n(v1, v27);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = (_QWORD *)swift_slowAlloc(32, -1);
    v42 = v1;
    v43 = v32;
    *(_DWORD *)v31 = 136446210;
    v33 = type metadata accessor for TorchAgent();
    v34 = swift_retain(v1);
    v35 = String.init<A>(describing:)(&v42, v33, v34);
    v37 = v36;
    v42 = sub_100172BEC(v35, v36, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v31 + 4, v31 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "[%{public}s] init", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  return v1;
}

uint64_t sub_100153E18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  if (qword_100315870 != -1)
    swift_once(&qword_100315870, sub_1000D975C);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FE08);
  v4 = swift_retain_n(v0, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v1;
    v16 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for TorchAgent();
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v9, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] deinit", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }

  return v1;
}

uint64_t sub_100153FE4()
{
  uint64_t v0;

  sub_100153E18();
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for TorchAgent()
{
  return objc_opt_self(_TtC8SOSBuddy10TorchAgent);
}

uint64_t sub_100154024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t result;
  _QWORD aBlock[5];
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (_QWORD *)((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if (qword_100315870 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315870, sub_1000D975C);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FE08);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Stopping TorchAgent", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = *(NSObject **)(v1 + 16);
  v15 = swift_allocObject(&unk_1002F3628, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_100155704;
  *(_QWORD *)(v15 + 24) = v1;
  aBlock[4] = sub_1000452F4;
  v20 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100187B58;
  aBlock[3] = &unk_1002F3640;
  v16 = _Block_copy(aBlock);
  v17 = v20;
  swift_retain(v1);
  swift_retain(v15);
  swift_release(v17);
  dispatch_sync(v14, v16);
  _Block_release(v16);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation(v15, "", 79, 34, 21, 1);
  swift_release(v1);
  result = swift_release(v15);
  if ((v14 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_100154268(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(_QWORD *)(v1 + 16);
  v12 = swift_allocObject(&unk_1002F3538, 24, 7);
  swift_weakInit(v12 + 16);
  v13 = swift_allocObject(&unk_1002F35D8, 32, 7);
  *(_QWORD *)(v13 + 16) = v12;
  *(double *)(v13 + 24) = a1;
  aBlock[4] = sub_1001556F8;
  v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002F35F0;
  v14 = _Block_copy(aBlock);
  v15 = swift_retain(v12);
  static DispatchQoS.unspecified.getter(v15);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v18 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v3, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v6, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v19 = v25;
  swift_release(v12);
  return swift_release(v19);
}

uint64_t sub_100154494(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_100154A20(a2);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_1001544F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v19 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v2);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *(_QWORD *)(v0 + 16);
  v10 = swift_allocObject(&unk_1002F3538, 24, 7);
  swift_weakInit(v10 + 16);
  aBlock[4] = sub_1001556CC;
  v22 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002F35A0;
  v11 = _Block_copy(aBlock);
  v12 = swift_retain(v10);
  static DispatchQoS.unspecified.getter(v12);
  v20 = _swiftEmptyArrayStorage;
  v13 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v14 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v15 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v14, v15, v1, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v4, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v16 = v22;
  swift_release(v10);
  return swift_release(v16);
}

uint64_t sub_1001546FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = *(void **)(result + 32);
    v4 = *(_BYTE *)(result + 40);
    result = swift_release(result);
    if ((v4 & 1) == 0)
    {
      swift_beginAccess(v1, &v6, 0, 0);
      result = swift_weakLoadStrong(v1);
      if (result)
      {
        v5 = result;
        sub_1001550C0(v3);
        return swift_release(v5);
      }
    }
  }
  return result;
}

void *sub_100154790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  NSObject *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  id v23;
  uint64_t v25;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (uint64_t *)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v0 + 16);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = *(_QWORD *)(v0 + 24);
  v8 = (void *)v2;
  if (!v2)
  {
    v9 = objc_msgSend((id)objc_opt_self(AVCaptureDevice), "defaultDeviceWithMediaType:", AVMediaTypeVideo);
    if (v9)
    {
      v10 = v9;
      v11 = v9;
      if (-[NSObject hasTorch](v11, "hasTorch"))
      {

        v12 = *(void **)(v0 + 24);
        *(_QWORD *)(v0 + 24) = v10;

        v8 = *(void **)(v0 + 24);
        v13 = v8;
        goto LABEL_15;
      }
      if (qword_100315870 != -1)
        swift_once(&qword_100315870, sub_1000D975C);
      v18 = type metadata accessor for Logger(0);
      v19 = sub_10000D744(v18, (uint64_t)qword_10033FE08);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "AVCaptureDevice does not support torch functionality", v22, 2u);
        swift_slowDealloc(v22, -1, -1);
      }

LABEL_14:
      v8 = 0;
      goto LABEL_15;
    }
    if (qword_100315870 == -1)
    {
LABEL_7:
      v14 = type metadata accessor for Logger(0);
      v15 = sub_10000D744(v14, (uint64_t)qword_10033FE08);
      v11 = Logger.logObject.getter(v15);
      v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v16, "Failed to create AVCaptureDevice", v17, 2u);
        swift_slowDealloc(v17, -1, -1);
      }
      goto LABEL_14;
    }
LABEL_17:
    swift_once(&qword_100315870, sub_1000D975C);
    goto LABEL_7;
  }
LABEL_15:
  v23 = (id)v2;
  return v8;
}

void sub_100154A20(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  unsigned int v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  __n128 v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  void *v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  id v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  id aBlock;
  _QWORD v71[4];
  uint64_t v72;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v63 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v65 = *(_QWORD *)(v8 - 8);
  v66 = v8;
  __chkstk_darwin(v8, v9);
  v64 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for DispatchTime(0);
  v11 = *(_QWORD *)(v67 - 8);
  v13 = __chkstk_darwin(v67, v12);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  v18 = (char *)&v60 - v17;
  v19 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v20 = *(v19 - 1);
  __chkstk_darwin(v19, v21);
  v23 = (void (**)(char *, uint64_t))((char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = *(void **)(v2 + 16);
  *v23 = v24;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v20 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v19);
  v62 = v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)(v23);
  (*(void (**)(_QWORD *, _QWORD *))(v20 + 8))(v23, v19);
  if ((v24 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once(&qword_100315870, sub_1000D975C);
    goto LABEL_4;
  }
  v25 = sub_100154790();
  if (!v25)
    return;
  v19 = v25;
  v61 = v7;
  if (qword_100315870 != -1)
    goto LABEL_14;
LABEL_4:
  v26 = type metadata accessor for Logger(0);
  v27 = sub_10000D744(v26, (uint64_t)qword_10033FE08);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v30 = 134217984;
    aBlock = *(id *)&a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v71, v30 + 4, v30 + 12);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "torchOn for %f seconds", v30, 0xCu);
    swift_slowDealloc(v30, -1, -1);
  }

  aBlock = 0;
  v31 = objc_msgSend(v19, "lockForConfiguration:", &aBlock);
  v32 = aBlock;
  if (v31)
  {
    v33 = aBlock;
    objc_msgSend(v19, "setTorchMode:", 1);
    v34 = objc_msgSend(v19, "unlockForConfiguration");
    v35 = *(_QWORD *)(v2 + 48);
    v36 = v35 + 1;
    if (v35 == -1)
      __break(1u);
    *(_QWORD *)(v2 + 48) = v36;
    *(_QWORD *)(v2 + 32) = v36;
    *(_BYTE *)(v2 + 40) = 0;
    static DispatchTime.now()(v34);
    + infix(_:_:)(v15, a1);
    v60 = *(void (**)(char *, uint64_t))(v11 + 8);
    v60(v15, v67);
    v37 = swift_allocObject(&unk_1002F3538, 24, 7);
    swift_weakInit(v37 + 16);
    v38 = swift_allocObject(&unk_1002F3560, 32, 7);
    *(_QWORD *)(v38 + 16) = v37;
    *(_QWORD *)(v38 + 24) = v36;
    v71[3] = sub_1001556AC;
    v72 = v38;
    aBlock = _NSConcreteStackBlock;
    v71[0] = 1107296256;
    v71[1] = sub_1001BAACC;
    v71[2] = &unk_1002F3578;
    v39 = _Block_copy(&aBlock);
    v40 = swift_retain(v37);
    v41 = v64;
    static DispatchQoS.unspecified.getter(v40);
    v68 = _swiftEmptyArrayStorage;
    v42 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v43 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v44 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
    v45 = v61;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v68, v43, v44, v4, v42);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v18, v41, v45, v39);
    _Block_release(v39);

    (*(void (**)(char *, uint64_t))(v63 + 8))(v45, v4);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v41, v66);
    v60(v18, v67);
    v46 = v72;
    swift_release(v37);
    swift_release(v46);
  }
  else
  {
    v47 = aBlock;
    v48 = _convertNSErrorToError(_:)(v32);

    swift_willThrow(v49);
    swift_errorRetain(v48);
    v50 = swift_errorRetain(v48);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = (void *)swift_slowAlloc(32, -1);
      aBlock = v54;
      *(_DWORD *)v53 = 136315138;
      v68 = (_QWORD *)v48;
      swift_errorRetain(v48);
      v55 = sub_100003DB8((uint64_t *)&unk_100324AA0);
      v57 = String.init<A>(describing:)(&v68, v55, v56);
      v59 = v58;
      v68 = (_QWORD *)sub_100172BEC(v57, v58, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v53 + 4, v53 + 12);
      swift_bridgeObjectRelease(v59);
      swift_errorRelease(v48);
      swift_errorRelease(v48);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Failed to turn torch on: %s", v53, 0xCu);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);

      swift_errorRelease(v48);
    }
    else
    {

      swift_errorRelease(v48);
      swift_errorRelease(v48);
      swift_errorRelease(v48);

    }
  }
}

uint64_t sub_100155064(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_1001550C0(a2);
    return swift_release(v5);
  }
  return result;
}

void sub_1001550C0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unsigned int v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;

  v2 = v1;
  v4 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v5 = *(v4 - 1);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v2 + 16);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, _QWORD *))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_18:
    swift_once(&qword_100315870, sub_1000D975C);
    goto LABEL_4;
  }
  v11 = *(void **)(v2 + 24);
  if (!v11)
    return;
  v12 = qword_100315870;
  v4 = v11;
  if (v12 != -1)
    goto LABEL_18;
LABEL_4:
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10000D744(v13, (uint64_t)qword_10033FE08);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v17 = 134217984;
    v40 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v17 + 4, v17 + 12);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "torchOff with version %llu", v17, 0xCu);
    swift_slowDealloc(v17, -1, -1);
  }

  if ((*(_BYTE *)(v2 + 40) & 1) != 0 || *(void **)(v2 + 32) != a1)
  {
    v22 = Logger.logObject.getter(v18);
    v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v24 = 134217984;
      v40 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v24 + 4, v24 + 12);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Torch version %llu has already expired", v24, 0xCu);
      swift_slowDealloc(v24, -1, -1);
    }

  }
  else
  {
    v40 = 0;
    v19 = objc_msgSend(v4, "lockForConfiguration:", &v40);
    v20 = v40;
    if (v19)
    {
      v21 = v40;
      objc_msgSend(v4, "setTorchMode:", 0);
      objc_msgSend(v4, "unlockForConfiguration");

      *(_QWORD *)(v2 + 32) = 0;
      *(_BYTE *)(v2 + 40) = 1;
    }
    else
    {
      v25 = v40;
      v26 = _convertNSErrorToError(_:)(v20);

      swift_willThrow(v27);
      swift_errorRetain(v26);
      v28 = swift_errorRetain(v26);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(12, -1);
        v32 = (void *)swift_slowAlloc(32, -1);
        v40 = v32;
        *(_DWORD *)v31 = 136315138;
        v38 = v26;
        swift_errorRetain(v26);
        v33 = sub_100003DB8((uint64_t *)&unk_100324AA0);
        v35 = String.init<A>(describing:)(&v38, v33, v34);
        v37 = v36;
        v38 = sub_100172BEC(v35, v36, (uint64_t *)&v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v31 + 4, v31 + 12);
        swift_bridgeObjectRelease(v37);
        swift_errorRelease(v26);
        swift_errorRelease(v26);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to turn torch off: %s", v31, 0xCu);
        swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v31, -1, -1);

        swift_errorRelease(v26);
      }
      else
      {

        swift_errorRelease(v26);
        swift_errorRelease(v26);
        swift_errorRelease(v26);

      }
    }
  }
}

uint64_t sub_100155528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __n128 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v13;

  v0 = type metadata accessor for DispatchPredicate(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v4 = static OS_dispatch_queue.main.getter(v5);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v0);
  v6 = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v1 + 8))(v4, v0);
  if ((v6 & 1) != 0)
  {
    if (qword_100315870 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315870, sub_1000D975C);
LABEL_3:
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10000D744(v7, (uint64_t)qword_10033FE08);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Starting TorchAgent", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  return 1;
}

uint64_t sub_100155688()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001556AC()
{
  uint64_t v0;

  return sub_100155064(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

double sub_1001556B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1001556C4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001556CC()
{
  uint64_t v0;

  return sub_1001546FC(v0);
}

uint64_t sub_1001556D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001556F8()
{
  uint64_t v0;

  return sub_100154494(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

void sub_100155704()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 40) & 1) == 0)
    sub_1001550C0(*(void **)(v0 + 32));
}

uint64_t sub_100155718()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void *sub_100155744(char a1)
{
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  void *v8;

  v8 = &_swiftEmptySetSingleton;
  if ((a1 & 1) != 0)
  {
    sub_10010324C(&v7, 0);
    if ((a1 & 8) == 0)
    {
LABEL_3:
      if ((a1 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_3;
  }
  sub_10010324C(&v6, 1);
  if ((a1 & 2) == 0)
  {
LABEL_4:
    if ((a1 & 4) == 0)
      goto LABEL_5;
LABEL_11:
    sub_10010324C(&v4, 4);
    if ((a1 & 0x30) == 0)
      return v8;
    goto LABEL_6;
  }
LABEL_10:
  sub_10010324C(&v5, 3);
  if ((a1 & 4) != 0)
    goto LABEL_11;
LABEL_5:
  if ((a1 & 0x30) != 0)
LABEL_6:
    sub_10010324C(&v3, 2);
  return v8;
}

ValueMetadata *type metadata accessor for RoadsideAssistanceIntroductionView()
{
  return &type metadata for RoadsideAssistanceIntroductionView;
}

uint64_t sub_100155808(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029C278, 1);
}

uint64_t sub_100155818@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _OWORD v26[11];
  uint64_t v27;
  _BYTE v28[191];
  _QWORD v29[5];
  __int128 v30;
  __int128 v31;

  v2 = (__int128 *)v1;
  v3 = *(_QWORD **)(v1 + 32);
  if (v3)
  {
    v5 = v3[9];
    v6 = v3[10];
    sub_100007BBC(v3 + 6, v5);
    v7 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 24))(v29, v5, v6);
    v8 = static HorizontalAlignment.center.getter(v7);
    v9 = v2[1];
    v31 = *v2;
    v30 = v9;
    sub_100007CBC((uint64_t)v29, (uint64_t)v28);
    v10 = (_OWORD *)swift_allocObject(&unk_1002F3700, 104, 7);
    v11 = v2[1];
    v10[1] = *v2;
    v10[2] = v11;
    v10[3] = v2[2];
    sub_100007D04((__int128 *)v28, (uint64_t)(v10 + 4));
    sub_100007CBC((uint64_t)v29, (uint64_t)&v25);
    v12 = swift_allocObject(&unk_1002F3728, 104, 7);
    sub_100007D04(&v25, v12 + 16);
    v13 = v2[1];
    *(_OWORD *)(v12 + 56) = *v2;
    *(_OWORD *)(v12 + 72) = v13;
    *(_OWORD *)(v12 + 88) = v2[2];
    sub_100031A88(&v31);
    sub_100031A88(&v30);
    swift_retain(v3);
    sub_100031A88(&v31);
    sub_100031A88(&v30);
    swift_retain(v3);
    sub_10012E328(v26, ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter, 0, sub_1001582B4, v10, sub_1001582FC, v12, 0);
    *(_OWORD *)&v28[135] = v26[8];
    *(_OWORD *)&v28[151] = v26[9];
    *(_OWORD *)&v28[167] = v26[10];
    *(_OWORD *)&v28[71] = v26[4];
    *(_OWORD *)&v28[87] = v26[5];
    *(_OWORD *)&v28[103] = v26[6];
    *(_OWORD *)&v28[119] = v26[7];
    *(_OWORD *)&v28[7] = v26[0];
    *(_OWORD *)&v28[23] = v26[1];
    *(_OWORD *)&v28[39] = v26[2];
    LOBYTE(v25) = 0;
    *(_QWORD *)&v28[183] = v27;
    *(_OWORD *)&v28[55] = v26[3];
    v14 = (_OWORD *)swift_allocObject(&unk_1002F3750, 64, 7);
    v15 = v2[1];
    v14[1] = *v2;
    v14[2] = v15;
    v14[3] = v2[2];
    v16 = *(_OWORD *)&v28[144];
    *(_OWORD *)(a1 + 145) = *(_OWORD *)&v28[128];
    *(_OWORD *)(a1 + 161) = v16;
    *(_OWORD *)(a1 + 177) = *(_OWORD *)&v28[160];
    *(_OWORD *)(a1 + 192) = *(_OWORD *)&v28[175];
    v17 = *(_OWORD *)&v28[80];
    *(_OWORD *)(a1 + 81) = *(_OWORD *)&v28[64];
    *(_OWORD *)(a1 + 97) = v17;
    v18 = *(_OWORD *)&v28[112];
    *(_OWORD *)(a1 + 113) = *(_OWORD *)&v28[96];
    *(_OWORD *)(a1 + 129) = v18;
    v19 = *(_OWORD *)&v28[16];
    *(_OWORD *)(a1 + 17) = *(_OWORD *)v28;
    *(_OWORD *)(a1 + 33) = v19;
    v20 = *(_OWORD *)&v28[48];
    *(_OWORD *)(a1 + 49) = *(_OWORD *)&v28[32];
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    *(_OWORD *)(a1 + 65) = v20;
    *(_QWORD *)(a1 + 208) = sub_10015830C;
    *(_QWORD *)(a1 + 216) = v14;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    sub_100031A88(&v31);
    sub_100031A88(&v30);
    swift_retain(v3);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v29);
  }
  else
  {
    v22 = *(_QWORD *)(v1 + 40);
    v23 = type metadata accessor for UIMetrics();
    v24 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v22, v23, v24);
    __break(1u);
  }
  return result;
}

uint64_t sub_100155B08@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v6 = sub_100003DB8(&qword_1003198B8);
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = static HorizontalAlignment.center.getter(v8);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 0;
  v11 = sub_100003DB8(&qword_1003198C0);
  sub_100155C34(a1, a2, (uint64_t)&v10[*(int *)(v11 + 44)]);
  v12 = a2[3];
  v13 = a2[4];
  sub_100007BBC(a2, v12);
  v14 = (*(double (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  LOBYTE(a2) = static Edge.Set.all.getter(v14);
  sub_10000B234((uint64_t)v10, a3, &qword_1003198B8);
  v21 = a3 + *(int *)(sub_100003DB8(&qword_1003198C8) + 36);
  *(_BYTE *)v21 = (_BYTE)a2;
  *(double *)(v21 + 8) = v14;
  *(_QWORD *)(v21 + 16) = v16;
  *(_QWORD *)(v21 + 24) = v18;
  *(_QWORD *)(v21 + 32) = v20;
  *(_BYTE *)(v21 + 40) = 0;
  return sub_100007FF0((uint64_t)v10, &qword_1003198B8);
}

uint64_t sub_100155C34@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  char v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  UIContentSizeCategory v92;
  char v93;
  uint64_t KeyPath;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  BOOL v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  id v126;
  Swift::String v127;
  Swift::String v128;
  Swift::String v129;
  id v130;
  Swift::String v131;
  Swift::String v132;
  Swift::String v133;
  id v134;
  Swift::String v135;
  Swift::String v136;
  Swift::String v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t result;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  UIContentSizeCategory v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  _OWORD v182[2];
  char v183;
  _BYTE v184[7];
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  _OWORD v196[3];
  _OWORD v197[10];
  uint64_t v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  BOOL v203;
  Swift::String v204;
  Swift::String v205;
  Swift::String v206;

  v170 = a2;
  v166 = a3;
  v4 = sub_100003DB8(&qword_1003198D0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v153 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (uint64_t *)((char *)&v153 - v10);
  v12 = type metadata accessor for AccessibilityTraits(0);
  v160 = *(_QWORD *)(v12 - 8);
  v161 = v12;
  __chkstk_darwin(v12, v13);
  v159 = (char *)&v153 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003DB8(&qword_1003198D8);
  v17 = __chkstk_darwin(v15, v16);
  v19 = (char *)&v153 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v17, v20);
  v162 = (char *)&v153 - v22;
  __chkstk_darwin(v21, v23);
  v169 = (uint64_t)&v153 - v24;
  v25 = type metadata accessor for Image.ResizingMode(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25, v27);
  v29 = (char *)&v153 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100003DB8(&qword_1003198E0);
  v32 = __chkstk_darwin(v30, v31);
  v163 = (uint64_t)&v153 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32, v34);
  v168 = (uint64_t)&v153 - v35;
  v36 = *(_QWORD *)(a1 + 32);
  if (v36)
  {
    v157 = *(_QWORD *)(a1 + 32);
    v37 = *(id *)(v36 + 112);
    v158 = UIContentSizeCategoryAccessibilityExtraLarge;
    v38 = static UIContentSizeCategory.>= infix(_:_:)(v37, UIContentSizeCategoryAccessibilityExtraLarge);

    v167 = v8;
    v164 = v19;
    v165 = v11;
    if ((v38 & 1) != 0)
    {
      v39 = sub_100003DB8(&qword_100319908);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v168, 1, 1, v39);
      v40 = v170;
    }
    else
    {
      v41 = Image.init(_:bundle:)(0xD000000000000021, 0x8000000100264C10, 0);
      (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v29, enum case for Image.ResizingMode.stretch(_:), v25);
      v42 = Image.resizable(capInsets:resizingMode:)(v29, v41, 0.0, 0.0, 0.0, 0.0);
      swift_release(v41);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v25);
      v40 = v170;
      v43 = v170[3];
      v44 = v170[4];
      sub_100007BBC(v170, v43);
      v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 32))(v43, v44);
      v47 = v46;
      v48 = static Alignment.center.getter(v45);
      sub_100131D14(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v185, 0.0, 1, v47, 0, v48, v49, v42, 0, 1);
      swift_release(v42);
      v177 = v191;
      v178 = v192;
      *(_QWORD *)&v179 = v193;
      v173 = v187;
      v174 = v188;
      v175 = v189;
      v176 = v190;
      v171 = v185;
      v172 = v186;
      v50 = v40[3];
      v51 = v40[4];
      sub_100007BBC(v40, v50);
      v52 = (*(double (**)(uint64_t, uint64_t))(v51 + 40))(v50, v51);
      v54 = v53;
      v56 = v55;
      v58 = v57;
      v59 = static Edge.Set.all.getter(v52);
      v191 = v177;
      v192 = v178;
      *(_QWORD *)&v193 = v179;
      v187 = v173;
      v188 = v174;
      v189 = v175;
      v190 = v176;
      v185 = v171;
      v186 = v172;
      LOBYTE(v198) = 0;
      BYTE8(v193) = v59;
      *(_DWORD *)((char *)&v193 + 9) = v197[0];
      HIDWORD(v193) = *(_DWORD *)((char *)v197 + 3);
      *(double *)&v194 = v52;
      *((_QWORD *)&v194 + 1) = v54;
      *(_QWORD *)&v195 = v56;
      *((_QWORD *)&v195 + 1) = v58;
      LOBYTE(v196[0]) = 0;
      v60 = sub_100003DB8(&qword_1003198E8);
      v61 = sub_10002B614(&qword_1003198F0, &qword_1003198E8, (void (*)(void))sub_1000557A4);
      v62 = v168;
      View.accessibility(hidden:)(1, v60, v61);
      sub_100042AD0(&v171);
      v63 = sub_100003DB8(&qword_100319908);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v62, 0, 1, v63);
    }
    v64 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000021, 0x8000000100262180);
    v65 = Text.init(_:tableName:bundle:comment:)(v64);
    v67 = v66;
    v69 = v68;
    v71 = v70 & 1;
    v72 = v40[3];
    v73 = v40[4];
    sub_100007BBC(v40, v72);
    v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 64))(v72, v73);
    v75 = Text.font(_:)(v74, v65, v67, v71, v69);
    v77 = v76;
    LOBYTE(v73) = v78;
    v154 = v79;
    swift_release(v74);
    v80 = v73 & 1;
    sub_10002B438(v65, v67, v71);
    swift_bridgeObjectRelease(v69);
    v81 = v40[3];
    v82 = v40[4];
    sub_100007BBC(v40, v81);
    v83 = (*(uint64_t (**)(uint64_t, uint64_t))(v82 + 56))(v81, v82);
    v84 = v154;
    v156 = Text.foregroundColor(_:)(v83, v75, v77, v80, v154);
    v86 = v85;
    v155 = v87;
    v89 = v88;
    swift_release(v83);
    sub_10002B438(v75, v77, v80);
    swift_bridgeObjectRelease(v84);
    v90 = v157;
    v91 = *(id *)(v157 + 112);
    v92 = v158;
    v93 = static UIContentSizeCategory.>= infix(_:_:)(v91, v158);

    KeyPath = swift_getKeyPath(&unk_100259138);
    v95 = *(id *)(v90 + 112);
    v96 = static Alignment.center.getter(v95);
    v98 = v97;
    v99 = static UIContentSizeCategory.>= infix(_:_:)(v95, v92);
    if ((v99 & 1) != 0)
    {
      v100 = static Alignment.center.getter(v99);
      v102 = static Alignment.== infix(_:_:)(v96, v98, v100, v101);
      if ((v102 & 1) != 0)
      {
        v96 = static Alignment.leading.getter(v102, v103);
        v98 = v104;
      }
    }

    v105 = v155 & 1;
    v106 = (v93 & 1) == 0;
    v107 = v156;
    v198 = v156;
    v199 = v86;
    v200 = v155 & 1;
    v201 = v89;
    v202 = KeyPath;
    v203 = v106;
    sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v197, 0.0, 1, 0.0, 1, v96, v98);
    sub_10002B438(v107, v86, v105);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v89);
    v108 = v170;
    v109 = v170[3];
    v110 = v170[4];
    sub_100007BBC(v170, v109);
    v111 = (*(double (**)(uint64_t, uint64_t))(v110 + 48))(v109, v110);
    v113 = v112;
    v115 = v114;
    v117 = v116;
    v118 = static Edge.Set.all.getter(v111);
    v183 = 0;
    v177 = v197[6];
    v178 = v197[7];
    v179 = v197[8];
    v180 = v197[9];
    v173 = v197[2];
    v174 = v197[3];
    v175 = v197[4];
    v176 = v197[5];
    v171 = v197[0];
    v172 = v197[1];
    LOBYTE(v181) = v118;
    *(_DWORD *)((char *)&v181 + 1) = *(_DWORD *)v184;
    DWORD1(v181) = *(_DWORD *)&v184[3];
    *((double *)&v181 + 1) = v111;
    *(_QWORD *)&v182[0] = v113;
    *((_QWORD *)&v182[0] + 1) = v115;
    *(_QWORD *)&v182[1] = v117;
    BYTE8(v182[1]) = 0;
    v119 = v159;
    static AccessibilityTraits.isHeader.getter();
    v120 = sub_100003DB8(&qword_100319910);
    v121 = sub_10002B614(&qword_100319918, &qword_100319910, (void (*)(void))sub_10002B5F0);
    v122 = (uint64_t)v162;
    View.accessibility(addTraits:)(v119, v120, v121);
    (*(void (**)(char *, uint64_t))(v160 + 8))(v119, v161);
    v195 = v181;
    v196[0] = v182[0];
    *(_OWORD *)((char *)v196 + 9) = *(_OWORD *)((char *)v182 + 9);
    v191 = v177;
    v192 = v178;
    v193 = v179;
    v194 = v180;
    v187 = v173;
    v188 = v174;
    v189 = v175;
    v190 = v176;
    v185 = v171;
    v186 = v172;
    sub_1000557C8((uint64_t)&v185);
    sub_10000B458(v122, v169, &qword_1003198D8);
    v123 = sub_100003DB8((uint64_t *)&unk_10031B300);
    v124 = swift_allocObject(v123, 80, 7);
    *(_OWORD *)(v124 + 16) = xmmword_10024FB80;
    v125 = (void *)objc_opt_self(NSBundle);
    v126 = objc_msgSend(v125, "mainBundle");
    v127._countAndFlagsBits = 0xD00000000000001FLL;
    v204._object = (void *)0x8000000100264C90;
    v127._object = (void *)0x8000000100264C70;
    v128._countAndFlagsBits = 0;
    v128._object = (void *)0xE000000000000000;
    v204._countAndFlagsBits = 0xD000000000000058;
    v129 = NSLocalizedString(_:tableName:bundle:value:comment:)(v127, (Swift::String_optional)0, (NSBundle)v126, v128, v204);

    *(Swift::String *)(v124 + 32) = v129;
    v130 = objc_msgSend(v125, "mainBundle");
    v131._countAndFlagsBits = 0xD000000000000022;
    v205._object = (void *)0x8000000100264C90;
    v131._object = (void *)0x8000000100264CF0;
    v132._countAndFlagsBits = 0;
    v132._object = (void *)0xE000000000000000;
    v205._countAndFlagsBits = 0xD000000000000058;
    v133 = NSLocalizedString(_:tableName:bundle:value:comment:)(v131, (Swift::String_optional)0, (NSBundle)v130, v132, v205);

    *(Swift::String *)(v124 + 48) = v133;
    v134 = objc_msgSend(v125, "mainBundle");
    v135._countAndFlagsBits = 0xD00000000000002FLL;
    v206._object = (void *)0x8000000100264C90;
    v135._object = (void *)0x80000001002624D0;
    v136._countAndFlagsBits = 0;
    v136._object = (void *)0xE000000000000000;
    v206._countAndFlagsBits = 0xD000000000000058;
    v137 = NSLocalizedString(_:tableName:bundle:value:comment:)(v135, (Swift::String_optional)0, (NSBundle)v134, v136, v206);

    *(Swift::String *)(v124 + 64) = v137;
    v139 = static VerticalAlignment.top.getter(v138);
    v140 = (uint64_t)v165;
    *v165 = v139;
    *(_QWORD *)(v140 + 8) = 0;
    *(_BYTE *)(v140 + 16) = 1;
    v141 = sub_100003DB8(&qword_100319920);
    sub_1001567A8(v124, (uint64_t)v108, 10649826, 0xA300000000000000, v140 + *(int *)(v141 + 44));
    swift_bridgeObjectRelease(v124);
    v142 = v168;
    v143 = v163;
    sub_10000B234(v168, v163, &qword_1003198E0);
    v144 = v169;
    v145 = (uint64_t)v164;
    sub_10000B234(v169, (uint64_t)v164, &qword_1003198D8);
    v146 = (uint64_t)v167;
    sub_10000B234(v140, (uint64_t)v167, &qword_1003198D0);
    v147 = v166;
    sub_10000B234(v143, v166, &qword_1003198E0);
    v148 = sub_100003DB8(&qword_100319928);
    sub_10000B234(v145, v147 + *(int *)(v148 + 48), &qword_1003198D8);
    sub_10000B234(v146, v147 + *(int *)(v148 + 64), &qword_1003198D0);
    sub_100007FF0(v140, &qword_1003198D0);
    sub_100007FF0(v144, &qword_1003198D8);
    sub_100007FF0(v142, &qword_1003198E0);
    sub_100007FF0(v146, &qword_1003198D0);
    sub_100007FF0(v145, &qword_1003198D8);
    return sub_100007FF0(v143, &qword_1003198E0);
  }
  else
  {
    v150 = *(_QWORD *)(a1 + 40);
    v151 = type metadata accessor for UIMetrics();
    v152 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v150, v151, v152);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001567A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v27[2];
  uint64_t v28;

  v10 = sub_100003DB8(&qword_100319930);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v12, v15);
  v18 = (char *)v27 - v17;
  *(_QWORD *)v18 = static HorizontalAlignment.leading.getter(v16);
  *((_QWORD *)v18 + 1) = 0;
  v18[16] = 0;
  sub_100003DB8(&qword_100319938);
  v28 = a1;
  KeyPath = swift_getKeyPath(&unk_100259230);
  sub_100007CBC(a2, (uint64_t)v27);
  v20 = swift_allocObject(&unk_1002F37C8, 72, 7);
  sub_100007D04(v27, v20 + 16);
  *(_QWORD *)(v20 + 56) = a3;
  *(_QWORD *)(v20 + 64) = a4;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a4);
  v21 = sub_100003DB8(&qword_100317980);
  v22 = sub_100003DB8(&qword_100319940);
  v23 = sub_1000084FC(&qword_100319618, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
  v24 = sub_1000084FC(&qword_100319948, &qword_100319940, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  ForEach<>.init(_:id:content:)(&v28, KeyPath, sub_100159004, v20, v21, v22, v23, &protocol witness table for String, v24);
  sub_10000B234((uint64_t)v18, (uint64_t)v14, &qword_100319930);
  sub_10000B234((uint64_t)v14, a5, &qword_100319930);
  v25 = a5 + *(int *)(sub_100003DB8(&qword_100319950) + 48);
  *(_QWORD *)v25 = 0;
  *(_BYTE *)(v25 + 8) = 0;
  sub_100007FF0((uint64_t)v18, &qword_100319930);
  return sub_100007FF0((uint64_t)v14, &qword_100319930);
}

uint64_t sub_1001569B8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;

  v57 = a5;
  v9 = sub_100003DB8(&qword_100319958);
  v11 = __chkstk_darwin(v9, v10);
  v58 = (uint64_t)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (double *)((char *)&v47 - v15);
  v17 = *a1;
  v18 = a1[1];
  v19 = static VerticalAlignment.firstTextLineCenter.getter(v14);
  v21 = a2[3];
  v20 = a2[4];
  sub_100007BBC(a2, v21);
  v22 = (*(double (**)(uint64_t, uint64_t))(v20 + 72))(v21, v20);
  *(_QWORD *)v16 = v19;
  v16[1] = v22;
  *((_BYTE *)v16 + 16) = 0;
  v23 = sub_100003DB8(&qword_100319960);
  sub_100156D50(a3, a4, a2, v17, v18, (uint64_t)v16 + *(int *)(v23 + 44));
  v24 = a2[3];
  v25 = a2[4];
  sub_100007BBC(a2, v24);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 80))(v24, v25);
  v28 = v27;
  v29 = static Alignment.center.getter(v26);
  v31 = v30;
  v32.n128_u64[0] = 8.0;
  if (v28 < 8.0)
  {
    v33 = static os_log_type_t.fault.getter(v32);
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v66, 0, 1, 0, 1, 0, 1, 0x4020000000000000, 0, 0, 1, *(_QWORD *)&v28, 0, v29, v31);
  v56 = v66;
  v55 = v68;
  v54 = v70;
  v53 = v72;
  v52 = v74;
  v51 = v76;
  v50 = v78;
  v49 = v79;
  v65 = 1;
  v64 = v67;
  v63 = v69;
  v62 = v71;
  v61 = v73;
  v60 = v75;
  v59 = v77;
  v35 = v58;
  v48 = v16;
  sub_10000B234((uint64_t)v16, v58, &qword_100319958);
  v36 = v65;
  v37 = v64;
  v38 = v63;
  v39 = v62;
  v40 = v61;
  v41 = v60;
  v42 = v59;
  v43 = v57;
  sub_10000B234(v35, v57, &qword_100319958);
  v44 = v43 + *(int *)(sub_100003DB8(&qword_100319968) + 48);
  *(_QWORD *)v44 = 0;
  *(_BYTE *)(v44 + 8) = v36;
  *(_QWORD *)(v44 + 16) = v56;
  *(_BYTE *)(v44 + 24) = v37;
  *(_QWORD *)(v44 + 32) = v55;
  *(_BYTE *)(v44 + 40) = v38;
  *(_QWORD *)(v44 + 48) = v54;
  *(_BYTE *)(v44 + 56) = v39;
  *(_QWORD *)(v44 + 64) = v53;
  *(_BYTE *)(v44 + 72) = v40;
  *(_QWORD *)(v44 + 80) = v52;
  *(_BYTE *)(v44 + 88) = v41;
  *(_QWORD *)(v44 + 96) = v51;
  *(_BYTE *)(v44 + 104) = v42;
  v45 = v49;
  *(_QWORD *)(v44 + 112) = v50;
  *(_QWORD *)(v44 + 120) = v45;
  sub_100007FF0((uint64_t)v48, &qword_100319958);
  return sub_100007FF0(v35, &qword_100319958);
}

uint64_t sub_100156D50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t KeyPath;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v76;
  uint64_t (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;

  v81 = a4;
  v82 = a5;
  v84 = a6;
  v9 = sub_100003DB8(&qword_100319970);
  v11 = __chkstk_darwin(v9, v10);
  v83 = (uint64_t)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  v85 = (uint64_t)&v76 - v14;
  v86 = a1;
  v87 = a2;
  v15 = sub_10002B3F4();
  v80 = v15;
  v16 = swift_bridgeObjectRetain(a2);
  v17 = Text.init<A>(_:)(&v86, &type metadata for String, v15, v16);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = a3[3];
  v25 = a3[4];
  v79 = v24;
  v26 = sub_100007BBC(a3, v24);
  v78 = v25;
  v27 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 88);
  v76 = v26;
  v77 = v27;
  v28 = v27(v24, v25);
  v29 = Text.font(_:)(v28, v17, v19, v23, v21);
  v31 = v30;
  LOBYTE(v24) = v32;
  v34 = v33;
  swift_release(v28);
  v35 = v24 & 1;
  sub_10002B438(v17, v19, v23);
  swift_bridgeObjectRelease(v21);
  v36 = a3[3];
  v37 = a3[4];
  sub_100007BBC(a3, v36);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 56))(v36, v37);
  v39 = Text.foregroundColor(_:)(v38, v29, v31, v35, v34);
  v41 = v40;
  LOBYTE(v21) = v42;
  v44 = v43;
  swift_release(v38);
  LOBYTE(v21) = v21 & 1;
  sub_10002B438(v29, v31, v35);
  swift_bridgeObjectRelease(v34);
  v86 = v39;
  v87 = v41;
  v88 = v21;
  v89 = v44;
  View.accessibility(hidden:)(1, &type metadata for Text, &protocol witness table for Text);
  sub_10002B438(v39, v41, v21);
  swift_bridgeObjectRelease(v44);
  v86 = v81;
  v87 = v82;
  v45 = swift_bridgeObjectRetain(v82);
  v46 = Text.init<A>(_:)(&v86, &type metadata for String, v80, v45);
  v48 = v47;
  v50 = v49;
  v52 = v51 & 1;
  v53 = v77(v79, v78);
  v54 = Text.font(_:)(v53, v46, v48, v52, v50);
  v56 = v55;
  LOBYTE(v29) = v57;
  v59 = v58;
  swift_release(v53);
  v60 = v29 & 1;
  sub_10002B438(v46, v48, v52);
  swift_bridgeObjectRelease(v50);
  v61 = a3[3];
  v62 = a3[4];
  sub_100007BBC(a3, v61);
  v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 56))(v61, v62);
  v64 = Text.foregroundColor(_:)(v63, v54, v56, v60, v59);
  v66 = v65;
  LOBYTE(v50) = v67;
  v69 = v68;
  swift_release(v63);
  sub_10002B438(v54, v56, v60);
  swift_bridgeObjectRelease(v59);
  KeyPath = swift_getKeyPath(&unk_100259138);
  v71 = v85;
  v72 = v83;
  sub_10000B234(v85, v83, &qword_100319970);
  v73 = v84;
  sub_10000B234(v72, v84, &qword_100319970);
  v74 = v73 + *(int *)(sub_100003DB8(&qword_100319978) + 48);
  *(_QWORD *)v74 = v64;
  *(_QWORD *)(v74 + 8) = v66;
  *(_BYTE *)(v74 + 16) = v50 & 1;
  *(_QWORD *)(v74 + 24) = v69;
  *(_QWORD *)(v74 + 32) = KeyPath;
  *(_WORD *)(v74 + 40) = 0;
  *(_BYTE *)(v74 + 42) = 1;
  sub_10002B750(v64, v66, v50 & 1);
  swift_bridgeObjectRetain(v69);
  swift_retain(KeyPath);
  sub_100007FF0(v71, &qword_100319970);
  sub_10002B438(v64, v66, v50 & 1);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v69);
  return sub_100007FF0(v72, &qword_100319970);
}

uint64_t sub_10015712C@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v6 = sub_100003DB8(&qword_1003223C0);
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = static HorizontalAlignment.center.getter(v8);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 0;
  v11 = sub_100003DB8(&qword_1003223C8);
  sub_100157260(a1, a2, &v10[*(int *)(v11 + 44)]);
  v12 = a1[3];
  v13 = a1[4];
  sub_100007BBC(a1, v12);
  v14 = (*(double (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  LOBYTE(a2) = static Edge.Set.all.getter(v14);
  sub_10000B234((uint64_t)v10, a3, &qword_1003223C0);
  v21 = a3 + *(int *)(sub_100003DB8(&qword_1003223D0) + 36);
  *(_BYTE *)v21 = (_BYTE)a2;
  *(double *)(v21 + 8) = v14;
  *(_QWORD *)(v21 + 16) = v16;
  *(_QWORD *)(v21 + 24) = v18;
  *(_QWORD *)(v21 + 32) = v20;
  *(_BYTE *)(v21 + 40) = 0;
  return sub_100007FF0((uint64_t)v10, &qword_1003223C0);
}

uint64_t sub_100157260@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  unint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  id v72;
  char v73;
  BOOL v74;
  uint64_t KeyPath;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  __int128 *v103;
  __int128 v104;
  __int128 v105;
  __int128 *v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __n128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  char v162;
  char v163;
  __int128 v164;
  _OWORD *v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  uint64_t result;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _OWORD *v216;
  __int128 *v217;
  _QWORD *v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  _OWORD v229[3];
  __int128 v230;
  _OWORD v231[2];
  _OWORD v232[10];
  char v233;
  _BYTE v234[7];
  __int128 v235;
  __int128 v236;
  char v237;
  _BYTE v238[7];
  char v239;
  _BYTE v240[7];
  double v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char v245;
  unsigned __int8 v246;
  _BYTE v247[7];
  unsigned __int8 v248;
  _BYTE v249[7];
  _BYTE v250[7];
  _DWORD v251[2];
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  _OWORD v262[10];
  __int128 v263;
  uint64_t v264;
  uint64_t v265;
  char v266;
  uint64_t v267;
  uint64_t v268;
  BOOL v269;
  Swift::String v270;

  v216 = a3;
  v217 = a2;
  v4 = type metadata accessor for KeyboardShortcut(0);
  v212 = *(_QWORD *)(v4 - 8);
  v213 = v4;
  __chkstk_darwin(v4, v5);
  v211 = (char *)&v179 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ButtonBorderShape(0);
  v207 = *(_QWORD *)(v7 - 8);
  v208 = v7;
  __chkstk_darwin(v7, v8);
  v204 = (char *)&v179 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BorderedProminentButtonStyle(0);
  v197 = *(_QWORD *)(v10 - 8);
  v198 = v10;
  __chkstk_darwin(v10, v11);
  v196 = (char *)&v179 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ControlSize(0);
  v188 = *(_QWORD *)(v13 - 8);
  v189 = v13;
  __chkstk_darwin(v13, v14);
  v186 = (char *)&v179 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003DB8(&qword_1003223D8);
  v184 = *(_QWORD *)(v16 - 8);
  v185 = v16;
  __chkstk_darwin(v16, v17);
  v183 = (char *)&v179 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = sub_100003DB8(&qword_1003223E0);
  __chkstk_darwin(v187, v19);
  v190 = (char *)&v179 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_100003DB8(&qword_1003223E8);
  v192 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194, v21);
  v191 = (char *)&v179 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = sub_100003DB8(&qword_1003223F0);
  __chkstk_darwin(v193, v23);
  v195 = (char *)&v179 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100003DB8(&qword_1003223F8);
  v201 = *(_QWORD *)(v25 - 8);
  v202 = v25;
  __chkstk_darwin(v25, v26);
  v200 = (char *)&v179 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = sub_100003DB8(&qword_100322400);
  __chkstk_darwin(v199, v28);
  v209 = (char *)&v179 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = sub_100003DB8(&qword_100322408);
  __chkstk_darwin(v203, v30);
  v210 = (uint64_t)&v179 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = sub_100003DB8(&qword_100322410);
  v33 = __chkstk_darwin(v206, v32);
  v215 = (uint64_t)&v179 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v33, v35);
  v205 = (uint64_t)&v179 - v37;
  __chkstk_darwin(v36, v38);
  v214 = (uint64_t)&v179 - v39;
  v40 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v270._countAndFlagsBits = 0xD000000000000069;
  v270._object = (void *)0x8000000100264B00;
  v41._object = (void *)0x8000000100264AE0;
  v41._countAndFlagsBits = 0xD00000000000001DLL;
  v42._countAndFlagsBits = 0;
  v42._object = (void *)0xE000000000000000;
  v43 = NSLocalizedString(_:tableName:bundle:value:comment:)(v41, (Swift::String_optional)0, (NSBundle)v40, v42, v270);

  v232[0] = v43;
  v44 = sub_10002B3F4();
  v46 = Text.init<A>(_:)(v232, &type metadata for String, v44, v45);
  v48 = v47;
  v50 = v49;
  v52 = v51 & 1;
  v218 = a1;
  v53 = a1[3];
  v54 = a1[4];
  sub_100007BBC(a1, v53);
  v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 96))(v53, v54);
  v56 = Text.font(_:)(v55, v46, v48, v52, v50);
  v58 = v57;
  v60 = v59;
  v62 = v61;
  swift_release(v55);
  v63 = v60 & 1;
  sub_10002B438(v46, v48, v52);
  swift_bridgeObjectRelease(v50);
  v64 = v218[3];
  v65 = v218[4];
  sub_100007BBC(v218, v64);
  v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 56))(v64, v65);
  v181 = Text.foregroundColor(_:)(v66, v56, v58, v63, v62);
  v182 = v67;
  v69 = v68;
  v180 = v70;
  swift_release(v66);
  sub_10002B438(v56, v58, v63);
  swift_bridgeObjectRelease(v62);
  v71 = *((_QWORD *)v217 + 4);
  if (v71)
  {
    v72 = *(id *)(v71 + 112);
    v73 = static UIContentSizeCategory.>= infix(_:_:)(v72, UIContentSizeCategoryAccessibilityExtraLarge);

    v74 = (v73 & 1) == 0;
    KeyPath = swift_getKeyPath(&unk_100259138);
    v76 = *(id *)(v71 + 112);
    v77 = static Alignment.center.getter(v76);
    v79 = v78;
    v80 = static UIContentSizeCategory.>= infix(_:_:)(v76, UIContentSizeCategoryAccessibilityExtraLarge);
    if ((v80 & 1) != 0)
    {
      v81 = static Alignment.center.getter(v80);
      v83 = static Alignment.== infix(_:_:)(v77, v79, v81, v82);
      if ((v83 & 1) != 0)
      {
        v77 = static Alignment.leading.getter(v83, v84);
        v79 = v85;
      }
    }

    v86 = v181;
    v87 = v182;
    v264 = v181;
    v265 = v69;
    v88 = v180 & 1;
    v266 = v180 & 1;
    v267 = v182;
    v268 = KeyPath;
    v269 = v74;
    sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v262, 0.0, 1, 0.0, 1, v77, v79);
    sub_10002B438(v86, v69, v88);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v87);
    v258 = v262[6];
    v259 = v262[7];
    v260 = v262[8];
    v261 = v262[9];
    v254 = v262[2];
    v255 = v262[3];
    v256 = v262[4];
    v257 = v262[5];
    v252 = v262[0];
    v253 = v262[1];
    v90 = static Edge.Set.top.getter(v89);
    LODWORD(v181) = v90;
    v246 = 1;
    LODWORD(v182) = static Edge.Set.bottom.getter(v90);
    v91 = v218;
    v92 = v218[3];
    v93 = v218[4];
    sub_100007BBC(v218, v92);
    v94 = (*(double (**)(uint64_t, uint64_t))(v93 + 104))(v92, v93);
    v95 = EdgeInsets.init(_all:)(v94);
    v97 = v96;
    v99 = v98;
    v101 = v100;
    v251[0] = *(_DWORD *)v247;
    *(_DWORD *)((char *)v251 + 3) = *(_DWORD *)&v247[3];
    v180 = v246;
    v248 = 0;
    v102 = (_OWORD *)swift_allocObject(&unk_1002F3778, 64, 7);
    v103 = v217;
    v104 = *v217;
    v105 = v217[1];
    v102[1] = *v217;
    v102[2] = v105;
    v102[3] = v103[2];
    v263 = v104;
    v107 = *((_QWORD *)v103 + 2);
    v106 = (__int128 *)*((_QWORD *)v103 + 3);
    v179 = v107;
    v217 = v106;
    swift_retain(v71);
    sub_100031A88(&v263);
    v108 = sub_100158DD8();
    swift_retain(v107);
    v109 = v183;
    Button.init(action:label:)(sub_100158DD0, v102, sub_100158108, 0, &type metadata for RequestAssistanceButtonLabelView, v108);
    v111 = v188;
    v110 = v189;
    v112 = v186;
    (*(void (**)(char *, _QWORD, uint64_t))(v188 + 104))(v186, enum case for ControlSize.large(_:), v189);
    v113 = swift_getKeyPath(&unk_100259168);
    v114 = v187;
    v115 = (uint64_t)v190;
    v116 = (uint64_t *)&v190[*(int *)(v187 + 36)];
    v117 = sub_100003DB8(&qword_100316C38);
    (*(void (**)(char *, char *, uint64_t))(v111 + 16))((char *)v116 + *(int *)(v117 + 28), v112, v110);
    *v116 = v113;
    v119 = v184;
    v118 = v185;
    (*(void (**)(uint64_t, char *, uint64_t))(v184 + 16))(v115, v109, v185);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v112, v110);
    v120 = (*(uint64_t (**)(char *, uint64_t))(v119 + 8))(v109, v118);
    v121 = v196;
    BorderedProminentButtonStyle.init()(v120);
    v122 = sub_100158E24();
    v123 = sub_1000052EC(&qword_100318960, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
    v124 = v191;
    v125 = v198;
    View.buttonStyle<A>(_:)(v121, v114, v198, v122, v123);
    (*(void (**)(char *, uint64_t))(v197 + 8))(v121, v125);
    v126 = sub_100007FF0(v115, &qword_1003223E0);
    v127 = v204;
    static ButtonBorderShape.roundedRectangle.getter(v126);
    v128 = swift_getKeyPath(&unk_100259198);
    v129 = v193;
    v130 = (uint64_t)v195;
    v131 = (uint64_t *)&v195[*(int *)(v193 + 36)];
    v132 = sub_100003DB8(&qword_100318968);
    v134 = v207;
    v133 = v208;
    (*(void (**)(char *, char *, uint64_t))(v207 + 16))((char *)v131 + *(int *)(v132 + 28), v127, v208);
    *v131 = v128;
    v135 = v192;
    v136 = v194;
    (*(void (**)(uint64_t, char *, uint64_t))(v192 + 16))(v130, v124, v194);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v127, v133);
    v137 = (*(uint64_t (**)(char *, uint64_t))(v135 + 8))(v124, v136);
    v138 = v211;
    static KeyboardShortcut.defaultAction.getter(v137);
    v139 = sub_100158EC8();
    v140 = v200;
    View.keyboardShortcut(_:)(v138, v129, v139);
    (*(void (**)(char *, uint64_t))(v212 + 8))(v138, v213);
    sub_100007FF0(v130, &qword_1003223F0);
    v141 = v91[3];
    v142 = v91[4];
    sub_100007BBC(v91, v141);
    v143 = (*(uint64_t (**)(uint64_t, uint64_t))(v142 + 296))(v141, v142);
    v144 = swift_getKeyPath(&unk_1002591C8);
    *(_QWORD *)&v232[0] = v143;
    v145 = swift_retain(v143);
    v146 = AnyShapeStyle.init<A>(_:)(v232, &type metadata for Color, &protocol witness table for Color, v145);
    v148 = v201;
    v147 = v202;
    v149 = (uint64_t)v209;
    (*(void (**)(char *, char *, uint64_t))(v201 + 16))(v209, v140, v202);
    swift_release(v143);
    v150 = (uint64_t *)(v149 + *(int *)(v199 + 36));
    *v150 = v144;
    v150[1] = v146;
    (*(void (**)(char *, uint64_t))(v148 + 8))(v140, v147);
    if (v179)
    {
      v151 = *(_BYTE *)(v179 + 249);
      v152 = swift_getKeyPath(&unk_1002591F8);
      v153 = swift_allocObject(&unk_1002F37A0, 17, 7);
      *(_BYTE *)(v153 + 16) = v151;
      v154 = v210;
      sub_10000B234(v149, v210, &qword_100322400);
      v155 = (uint64_t *)(v154 + *(int *)(v203 + 36));
      *v155 = v152;
      v155[1] = (uint64_t)sub_10006E0A8;
      v155[2] = v153;
      v156 = sub_100007FF0(v149, &qword_100322400);
      LOBYTE(v152) = static Edge.Set.bottom.getter(v156);
      v157 = v205;
      sub_10000B234(v154, v205, &qword_100322408);
      v158 = v157 + *(int *)(v206 + 36);
      *(_BYTE *)v158 = v152;
      *(_OWORD *)(v158 + 8) = 0u;
      *(_OWORD *)(v158 + 24) = 0u;
      *(_BYTE *)(v158 + 40) = 1;
      sub_100007FF0(v154, &qword_100322408);
      v159 = v214;
      sub_10000B458(v157, v214, &qword_100322410);
      LOBYTE(v157) = v248;
      LODWORD(v218) = v248;
      v160 = v215;
      sub_10000B234(v159, v215, &qword_100322410);
      v225 = v258;
      v226 = v259;
      v227 = v260;
      v228 = v261;
      v221 = v254;
      v222 = v255;
      v223 = v256;
      v224 = v257;
      v219 = v252;
      v220 = v253;
      v162 = v180;
      v161 = v181;
      LOBYTE(v229[0]) = v181;
      *(_DWORD *)((char *)v229 + 1) = v251[0];
      DWORD1(v229[0]) = *(_DWORD *)((char *)v251 + 3);
      *(_OWORD *)((char *)v229 + 8) = 0u;
      *(_OWORD *)((char *)&v229[1] + 8) = 0u;
      BYTE8(v229[2]) = v180;
      HIDWORD(v229[2]) = *(_DWORD *)&v250[3];
      *(_DWORD *)((char *)&v229[2] + 9) = *(_DWORD *)v250;
      v163 = v182;
      LOBYTE(v230) = v182;
      *(_DWORD *)((char *)&v230 + 1) = *(_DWORD *)v249;
      DWORD1(v230) = *(_DWORD *)&v249[3];
      *((double *)&v230 + 1) = v95;
      *(_QWORD *)&v231[0] = v97;
      *((_QWORD *)&v231[0] + 1) = v99;
      *(_QWORD *)&v231[1] = v101;
      BYTE8(v231[1]) = v157;
      v164 = v255;
      v165 = v216;
      v216[2] = v254;
      v165[3] = v164;
      v166 = v220;
      *v165 = v219;
      v165[1] = v166;
      v167 = v226;
      v165[6] = v225;
      v165[7] = v167;
      v168 = v224;
      v165[4] = v223;
      v165[5] = v168;
      v169 = v229[1];
      v165[10] = v229[0];
      v165[11] = v169;
      v170 = v228;
      v165[8] = v227;
      v165[9] = v170;
      v171 = v230;
      v165[12] = v229[2];
      v165[13] = v171;
      *(_OWORD *)((char *)v165 + 233) = *(_OWORD *)((char *)v231 + 9);
      v165[14] = v231[0];
      v172 = sub_100003DB8(&qword_100322438);
      sub_10000B234(v160, (uint64_t)v165 + *(int *)(v172 + 48), &qword_100322410);
      sub_100055758((uint64_t)&v219);
      sub_100007FF0(v159, &qword_100322410);
      sub_100007FF0(v160, &qword_100322410);
      v232[6] = v258;
      v232[7] = v259;
      v232[8] = v260;
      v232[9] = v261;
      v232[2] = v254;
      v232[3] = v255;
      v232[4] = v256;
      v232[5] = v257;
      v232[0] = v252;
      v232[1] = v253;
      v233 = v161;
      *(_DWORD *)v234 = v251[0];
      *(_DWORD *)&v234[3] = *(_DWORD *)((char *)v251 + 3);
      v235 = 0u;
      v236 = 0u;
      v237 = v162;
      *(_DWORD *)v238 = *(_DWORD *)v250;
      *(_DWORD *)&v238[3] = *(_DWORD *)&v250[3];
      v239 = v163;
      *(_DWORD *)v240 = *(_DWORD *)v249;
      *(_DWORD *)&v240[3] = *(_DWORD *)&v249[3];
      v241 = v95;
      v242 = v97;
      v243 = v99;
      v244 = v101;
      v245 = (char)v218;
      return sub_1000557C8((uint64_t)v232);
    }
  }
  else
  {
    v174 = *((_QWORD *)v217 + 5);
    v175 = type metadata accessor for UIMetrics();
    v176 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, v174, v175, v176);
    __break(1u);
  }
  v177 = type metadata accessor for RoadsideAssistanceModel();
  v178 = sub_1000052EC(&qword_100318688, (uint64_t (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v217, v177, v178);
  __break(1u);
  return result;
}

uint64_t *sub_100157FC8(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11[8];
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = result[2];
  if (!v1)
  {
    v2 = result[3];
    v6 = type metadata accessor for RoadsideAssistanceModel();
    v7 = sub_1000052EC(&qword_100318688, (uint64_t (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel, (uint64_t)&unk_10024D2FC);
    result = (uint64_t *)EnvironmentObject.error()(0, v2, v6, v7);
    __break(1u);
    goto LABEL_7;
  }
  v2 = *(_QWORD *)(v1 + 104);
  if (!v2)
    return result;
  v3 = *result;
  if (!*result)
  {
LABEL_7:
    v8 = result[1];
    v9 = type metadata accessor for AppEvents();
    v10 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    swift_retain(v2);
    result = (uint64_t *)EnvironmentObject.error()(0, v8, v9, v10);
    __break(1u);
    return result;
  }
  v4 = *(_QWORD *)(v3 + 200);
  v11[0] = 1;
  v12 = v2;
  v13 = 1;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  swift_retain(v2);
  swift_retain(v4);
  PassthroughSubject.send(_:)(v11);
  swift_release(v4);
  sub_1000AE2F0();
  v5 = *(_QWORD *)(v3 + 168);
  v11[0] = 0;
  swift_retain(v5);
  PassthroughSubject.send(_:)(v11);
  swift_release(v2);
  return (uint64_t *)swift_release(v5);
}

uint64_t sub_100158108@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = type metadata accessor for RoadsideAssistanceModel();
  v3 = sub_1000052EC(&qword_100318688, (uint64_t (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.init()(v2, v3);
  *a1 = result;
  a1[1] = v5;
  return result;
}

_QWORD *sub_10015815C(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[8];
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = result[2];
  if (!v1)
  {
    v2 = result[3];
    v4 = type metadata accessor for RoadsideAssistanceModel();
    v5 = sub_1000052EC(&qword_100318688, (uint64_t (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel, (uint64_t)&unk_10024D2FC);
    result = (_QWORD *)EnvironmentObject.error()(0, v2, v4, v5);
    __break(1u);
    goto LABEL_7;
  }
  v2 = *(_QWORD *)(v1 + 104);
  if (!v2)
    return result;
  if (!*result)
  {
LABEL_7:
    v6 = result[1];
    v7 = type metadata accessor for AppEvents();
    v8 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    swift_retain(v2);
    result = (_QWORD *)EnvironmentObject.error()(0, v6, v7, v8);
    __break(1u);
    return result;
  }
  v3 = *(_QWORD *)(*result + 200);
  v9[0] = 0;
  v10 = v2;
  v11 = 1;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  swift_retain(v2);
  swift_retain(v3);
  PassthroughSubject.send(_:)(v9);
  swift_release(v2);
  return (_QWORD *)swift_release(v3);
}

uint64_t sub_100158278()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 8);
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_1001582B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100155B08(v1 + 16, (_QWORD *)(v1 + 64), a1);
}

uint64_t sub_1001582C0()
{
  _QWORD *v0;

  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 2);
  swift_release(v0[7]);
  swift_release(v0[9]);
  swift_release(v0[11]);
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_1001582FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10015712C((_QWORD *)(v1 + 16), (__int128 *)(v1 + 56), a1);
}

_QWORD *sub_10015830C()
{
  uint64_t v0;

  return sub_10015815C((_QWORD *)(v0 + 16));
}

uint64_t sub_100158314@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;
  uint64_t v58;
  uint64_t KeyPath;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;

  v126 = a1;
  v132 = a2;
  v118 = type metadata accessor for ControlSize(0);
  v117 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118, v2);
  v115 = (char *)&v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for CircularProgressViewStyle(0);
  v109 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110, v4);
  v108 = (char *)&v103 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_100003DB8(&qword_100316B28);
  v106 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107, v6);
  v105 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100003DB8(&qword_100316B30);
  v112 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113, v8);
  v111 = (char *)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100003DB8(&qword_100316B38);
  __chkstk_darwin(v104, v10);
  v116 = (char *)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003DB8(&qword_1003199A0);
  v128 = *(_QWORD *)(v12 - 8);
  v129 = v12;
  __chkstk_darwin(v12, v13);
  v114 = (uint64_t)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003DB8(&qword_1003199A8);
  v17 = __chkstk_darwin(v15, v16);
  v131 = (uint64_t)&v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  v130 = (char *)&v103 - v20;
  v120 = sub_100003DB8(&qword_100316A20);
  __chkstk_darwin(v120, v21);
  v23 = (char *)&v103 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_100003DB8(&qword_1003199B0);
  v122 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124, v24);
  v26 = (char *)&v103 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_100003DB8(&qword_1003199B8);
  __chkstk_darwin(v119, v27);
  v29 = (char *)&v103 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100003DB8(&qword_1003199C0);
  __chkstk_darwin(v30, v31);
  v33 = (char *)&v103 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_100003DB8(&qword_1003199C8);
  __chkstk_darwin(v121, v34);
  v36 = (char *)&v103 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100003DB8(&qword_1003199D0);
  __chkstk_darwin(v125, v37);
  v39 = (char *)&v103 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100003DB8(&qword_1003199D8);
  v42 = __chkstk_darwin(v40, v41);
  v127 = (uint64_t)&v103 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __chkstk_darwin(v42, v44);
  v47 = (char *)&v103 - v46;
  __chkstk_darwin(v45, v48);
  v123 = (uint64_t)&v103 - v49;
  v50 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000012, 0x800000010026BB20);
  v133 = Text.init(_:tableName:bundle:comment:)(v50);
  v134 = v51;
  v135 = v52 & 1;
  v136 = v53;
  v54 = enum case for DynamicTypeSize.accessibility2(_:);
  v55 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 104))(v23, v54, v55);
  v56 = sub_1000052EC(&qword_100316A30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v23, v23, v55, v56);
  if ((result & 1) != 0)
  {
    v58 = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    View.dynamicTypeSize<A>(_:)(v23, &type metadata for Text, v120, &protocol witness table for Text, v58);
    sub_100007FF0((uint64_t)v23, &qword_100316A20);
    sub_10002B438(v133, v134, v135);
    swift_bridgeObjectRelease(v136);
    KeyPath = swift_getKeyPath(&unk_100259138);
    v60 = v122;
    v61 = v124;
    (*(void (**)(char *, char *, uint64_t))(v122 + 16))(v29, v26, v124);
    v62 = &v29[*(int *)(v119 + 36)];
    *(_QWORD *)v62 = KeyPath;
    v63 = 1;
    v62[8] = 1;
    v64 = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v26, v61);
    v65 = static Alignment.center.getter(v64);
    sub_100131EE8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v33, 0.0, 1, 0.0, 1, v65, v66);
    sub_100007FF0((uint64_t)v29, &qword_1003199B8);
    sub_10000B234((uint64_t)v33, (uint64_t)v36, &qword_1003199C0);
    *(_WORD *)&v36[*(int *)(v121 + 36)] = 256;
    sub_100007FF0((uint64_t)v33, &qword_1003199C0);
    v67 = v126;
    if ((v126 & 1) != 0)
      v68 = 0.0;
    else
      v68 = 1.0;
    sub_10000B234((uint64_t)v36, (uint64_t)v39, &qword_1003199C8);
    v69 = v125;
    *(double *)&v39[*(int *)(v125 + 36)] = v68;
    sub_100007FF0((uint64_t)v36, &qword_1003199C8);
    v70 = sub_10002B614(&qword_1003199E0, &qword_1003199D0, (void (*)(void))sub_1000558F4);
    View.accessibilityHidden(_:)(v67 & 1, v69, v70);
    sub_100007FF0((uint64_t)v39, &qword_1003199D0);
    v71 = v123;
    v72 = sub_10000B458((uint64_t)v47, v123, &qword_1003199D8);
    v74 = v129;
    v73 = (uint64_t)v130;
    if ((v67 & 1) != 0)
    {
      v75 = v105;
      v76 = ProgressView<>.init<>()(v72);
      v77 = v108;
      CircularProgressViewStyle.init()(v76);
      v78 = sub_1000084FC(&qword_100316C20, &qword_100316B28, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
      v79 = sub_1000052EC(&qword_100316C28, (uint64_t (*)(uint64_t))&type metadata accessor for CircularProgressViewStyle, (uint64_t)&protocol conformance descriptor for CircularProgressViewStyle);
      v80 = v111;
      v81 = v107;
      v82 = v110;
      View.progressViewStyle<A>(_:)(v77, v107, v110, v78, v79);
      (*(void (**)(char *, uint64_t))(v109 + 8))(v77, v82);
      (*(void (**)(char *, uint64_t))(v106 + 8))(v75, v81);
      v83 = v117;
      v84 = v115;
      v85 = v118;
      (*(void (**)(char *, _QWORD, uint64_t))(v117 + 104))(v115, enum case for ControlSize.small(_:), v118);
      v86 = swift_getKeyPath(&unk_100259168);
      v87 = (uint64_t)v116;
      v88 = (uint64_t *)&v116[*(int *)(v104 + 36)];
      v89 = sub_100003DB8(&qword_100316C38);
      (*(void (**)(char *, char *, uint64_t))(v83 + 16))((char *)v88 + *(int *)(v89 + 28), v84, v85);
      *v88 = v86;
      v90 = v112;
      v91 = v113;
      (*(void (**)(uint64_t, char *, uint64_t))(v112 + 16))(v87, v80, v113);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v85);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v80, v91);
      v92 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
      v93 = Color.init(uiColor:)(v92);
      v94 = swift_getKeyPath(&unk_1002591C8);
      v133 = v93;
      v95 = swift_retain(v93);
      v96 = AnyShapeStyle.init<A>(_:)(&v133, &type metadata for Color, &protocol witness table for Color, v95);
      v97 = v114;
      sub_10000B234(v87, v114, &qword_100316B38);
      swift_release(v93);
      v98 = (uint64_t *)(v97 + *(int *)(v74 + 36));
      *v98 = v94;
      v98[1] = v96;
      sub_100007FF0(v87, &qword_100316B38);
      sub_10000B458(v97, v73, &qword_1003199A0);
      v63 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v128 + 56))(v73, v63, 1, v74);
    v99 = v127;
    sub_10000B234(v71, v127, &qword_1003199D8);
    v100 = v131;
    sub_10000B234(v73, v131, &qword_1003199A8);
    v101 = v132;
    sub_10000B234(v99, v132, &qword_1003199D8);
    v102 = sub_100003DB8(&qword_100319A00);
    sub_10000B234(v100, v101 + *(int *)(v102 + 48), &qword_1003199A8);
    sub_100007FF0(v73, &qword_1003199A8);
    sub_100007FF0(v71, &qword_1003199D8);
    sub_100007FF0(v100, &qword_1003199A8);
    return sub_100007FF0(v99, &qword_1003199D8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100158D34@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*v2)
  {
    v4 = *(unsigned __int8 *)(*v2 + 249);
    *a2 = static Alignment.center.getter(a1);
    a2[1] = v5;
    v6 = sub_100003DB8(&qword_100319998);
    return sub_100158314(v4, (uint64_t)a2 + *(int *)(v6 + 44));
  }
  else
  {
    v8 = v2[1];
    v9 = type metadata accessor for RoadsideAssistanceModel();
    v10 = sub_1000052EC(&qword_100318688, (uint64_t (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v8, v9, v10);
    __break(1u);
  }
  return result;
}

uint64_t *sub_100158DD0()
{
  uint64_t v0;

  return sub_100157FC8((uint64_t *)(v0 + 16));
}

unint64_t sub_100158DD8()
{
  unint64_t result;

  result = qword_100322418;
  if (!qword_100322418)
  {
    result = swift_getWitnessTable(&unk_100259274, &type metadata for RequestAssistanceButtonLabelView);
    atomic_store(result, (unint64_t *)&qword_100322418);
  }
  return result;
}

unint64_t sub_100158E24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100322420;
  if (!qword_100322420)
  {
    v1 = sub_100007FAC(&qword_1003223E0);
    sub_1000084FC(&qword_100322428, &qword_1003223D8, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_1000084FC(&qword_100316C30, &qword_100316C38, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100322420);
  }
  return result;
}

unint64_t sub_100158EC8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100322430;
  if (!qword_100322430)
  {
    v1 = sub_100007FAC(&qword_1003223F0);
    v2[0] = sub_100007FAC(&qword_1003223E0);
    v2[1] = type metadata accessor for BorderedProminentButtonStyle(255);
    v2[2] = sub_100158E24();
    v2[3] = sub_1000052EC(&qword_100318960, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_1000084FC(&qword_100318978, &qword_100318968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100322430);
  }
  return result;
}

uint64_t sub_100158FC8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100158FD8()
{
  uint64_t v0;

  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100159004@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;

  return sub_1001569B8(a1, v2 + 2, v2[7], v2[8], a2);
}

ValueMetadata *type metadata accessor for RequestAssistanceButtonLabelView()
{
  return &type metadata for RequestAssistanceButtonLabelView;
}

unint64_t sub_100159024()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100322440;
  if (!qword_100322440)
  {
    v1 = sub_100007FAC(&qword_100322448);
    sub_1000084FC(&qword_100322450, &qword_100322458, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100322440);
  }
  return result;
}

uint64_t sub_1001590A8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029C2A0, 1);
}

uint64_t getEnumTagSinglePayload for Loop(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Loop(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 49) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Loop()
{
  return &type metadata for Loop;
}

void sub_100159124(char a1, double a2)
{
  uint64_t v2;
  double v3;
  long double v4;
  double v5;

  if ((a1 & 1) != 0)
  {
    v3 = *(double *)(v2 + 24);
    if (*(_BYTE *)(v2 + 32))
      v3 = a2;
    *(double *)(v2 + 24) = v3;
    *(_BYTE *)(v2 + 32) = 0;
    v4 = *(double *)(v2 + 8);
    if ((*(_BYTE *)(v2 + 48) & 1) != 0)
      v5 = a2 - v3 - *(double *)(v2 + 16);
    else
      v5 = a2 - *(double *)(v2 + 40) - v4 * ceil((v3 - *(double *)(v2 + 40)) / v4) - *(double *)(v2 + 16);
    if (v5 < 0.0)
      v5 = 0.0;
    fmod(v5, v4);
  }
  else
  {
    *(_QWORD *)(v2 + 24) = 0;
    *(_BYTE *)(v2 + 32) = 1;
  }
}

float sub_1001591C4(char a1, double a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;

  if ((a1 & 1) != 0)
  {
    v3 = *(double *)(v2 + 24);
    if (*(_BYTE *)(v2 + 32))
      v3 = a2;
    *(double *)(v2 + 24) = v3;
    *(_BYTE *)(v2 + 32) = 0;
    if ((*(_BYTE *)(v2 + 48) & 1) != 0)
    {
      v4 = a2 - v3;
      v5 = *(double *)(v2 + 8);
      v6 = v4 - *(double *)(v2 + 16);
    }
    else
    {
      v8 = *(double *)(v2 + 40);
      v9 = v3 - v8;
      v5 = *(double *)(v2 + 8);
      v6 = a2 - v8 - v5 * ceil(v9 / v5) - *(double *)(v2 + 16);
    }
    v10 = (v6 + v6) * 3.14159265;
    v11 = v6 < 0.0;
    v12 = 0.0;
    if (!v11)
      v12 = v10;
    return 0.5 - cos(v12 / v5) * 0.5;
  }
  else
  {
    *(_QWORD *)(v2 + 24) = 0;
    *(_BYTE *)(v2 + 32) = 1;
    return *(float *)v2;
  }
}

_QWORD *sub_100159278()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  __n128 v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;

  v1 = v0;
  v41 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v39 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41, v2);
  v40 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v13 = objc_msgSend(v12, "bundleIdentifier");

  if (v13)
  {
    v14 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

  }
  else
  {
    v14 = (_QWORD *)0xD000000000000012;
    v16 = 0x8000000100260990;
  }
  sub_10000D75C();
  v43 = v14;
  v44 = v16;
  swift_bridgeObjectRetain(v16);
  v17._object = (void *)0x800000010026BBF0;
  v17._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v17);
  v18 = swift_bridgeObjectRelease(v16);
  v19 = v43;
  v20 = v44;
  static DispatchQoS.unspecified.getter(v18);
  v43 = _swiftEmptyArrayStorage;
  v21 = sub_1000052EC((unint64_t *)&unk_1003178B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = sub_100003DB8((uint64_t *)&unk_100324AE0);
  v23 = sub_10000F138((unint64_t *)&unk_1003178C0, (uint64_t *)&unk_100324AE0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v22, v23, v4, v21);
  v24 = v40;
  (*(void (**)(char *, _QWORD, uint64_t))(v39 + 104))(v40, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v41);
  v25 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v19, v20, v11, v7, v24, 0);
  v1[3] = 0;
  v1[4] = 0;
  v1[2] = v25;
  if (qword_100315870 != -1)
    swift_once(&qword_100315870, sub_1000D975C);
  v26 = type metadata accessor for Logger(0);
  sub_10000D744(v26, (uint64_t)qword_10033FE08);
  v28 = swift_retain_n(v1, v27);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = (_QWORD *)swift_slowAlloc(32, -1);
    v42 = (uint64_t)v1;
    v43 = v32;
    *(_DWORD *)v31 = 136446210;
    v33 = type metadata accessor for ToneLibraryAgent();
    v34 = swift_retain(v1);
    v35 = String.init<A>(describing:)(&v42, v33, v34);
    v37 = v36;
    v42 = sub_100172BEC(v35, v36, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v31 + 4, v31 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "[%{public}s] init", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  return v1;
}

id *sub_10015965C()
{
  id *v0;
  id *v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  if (qword_100315870 != -1)
    swift_once(&qword_100315870, sub_1000D975C);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FE08);
  v4 = swift_retain_n(v0, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = (uint64_t)v1;
    v16 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for ToneLibraryAgent();
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v9, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] deinit", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }

  return v1;
}

uint64_t sub_100159830()
{
  uint64_t v0;

  sub_10015965C();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for ToneLibraryAgent()
{
  return objc_opt_self(_TtC8SOSBuddy16ToneLibraryAgent);
}

uint64_t sub_100159870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t result;
  _QWORD aBlock[5];
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (_QWORD *)((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if (qword_100315870 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315870, sub_1000D975C);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FE08);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Stopping ToneLibraryAgent", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = *(NSObject **)(v1 + 16);
  v15 = swift_allocObject(&unk_1002F3A00, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_10015A9A0;
  *(_QWORD *)(v15 + 24) = v1;
  aBlock[4] = sub_1000452F4;
  v20 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100187B58;
  aBlock[3] = &unk_1002F3A18;
  v16 = _Block_copy(aBlock);
  v17 = v20;
  swift_retain(v1);
  swift_retain(v15);
  swift_release(v17);
  dispatch_sync(v14, v16);
  _Block_release(v16);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation(v15, "", 85, 47, 21, 1);
  swift_release(v1);
  result = swift_release(v15);
  if ((v14 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_100159AB4(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(_QWORD *)(v1 + 16);
  v12 = swift_allocObject(&unk_1002F3960, 24, 7);
  swift_weakInit(v12 + 16);
  v13 = swift_allocObject(&unk_1002F39B0, 25, 7);
  *(_QWORD *)(v13 + 16) = v12;
  *(_BYTE *)(v13 + 24) = a1;
  aBlock[4] = sub_10015A994;
  v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002F39C8;
  v14 = _Block_copy(aBlock);
  v15 = swift_retain(v12);
  static DispatchQoS.unspecified.getter(v15);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v18 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v3, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v6, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v19 = v25;
  swift_release(v12);
  return swift_release(v19);
}

uint64_t sub_100159CD8(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_100159F8C(a2 & 1);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_100159D34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v19 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v2);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *(_QWORD *)(v0 + 16);
  v10 = swift_allocObject(&unk_1002F3960, 24, 7);
  swift_weakInit(v10 + 16);
  aBlock[4] = sub_10015A950;
  v22 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002F3978;
  v11 = _Block_copy(aBlock);
  v12 = swift_retain(v10);
  static DispatchQoS.unspecified.getter(v12);
  v20 = _swiftEmptyArrayStorage;
  v13 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v14 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v15 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v14, v15, v1, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v4, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v16 = v22;
  swift_release(v10);
  return swift_release(v16);
}

uint64_t sub_100159F38(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_10015A564();
    return swift_release(v3);
  }
  return result;
}

void sub_100159F8C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint8_t *v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint8_t *v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v2 + 16);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    if (qword_100315870 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315870, sub_1000D975C);
LABEL_3:
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10000D744(v11, (uint64_t)qword_10033FE08);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v57 = v16;
    v17.n128_u64[0] = 136315138;
    *(_DWORD *)v15 = 136315138;
    LOBYTE(v56) = a1 & 1;
    v18 = String.init<A>(describing:)(&v56, &type metadata for ToneLibraryAgent.PlayRequest, v17);
    v20 = v19;
    v56 = sub_100172BEC(v18, v19, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Play %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }

  sub_10015A564();
  v21 = objc_msgSend(objc_allocWithZone((Class)TLAlertConfiguration), "initWithType:", 22);
  objc_msgSend(v21, "setTopic:", TLAlertTopicSOSCountdownTick);
  objc_msgSend(v21, "setMaximumDuration:", 0.85);
  if ((a1 & 1) != 0)
    objc_msgSend(v21, "setToneIdentifier:", TLToneIdentifierNone);
  v22 = objc_msgSend((id)objc_opt_self(TLAlert), "alertWithConfiguration:", v21);
  if (v22)
  {
    v23 = v22;
    v24 = objc_msgSend(objc_allocWithZone((Class)TLAlertActivationAssertion), "initWithAlert:", v22);
    v25 = *(void **)(v2 + 32);
    *(_QWORD *)(v2 + 32) = v24;

    objc_msgSend(*(id *)(v2 + 32), "acquire");
    v26 = v21;
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v55 = swift_slowAlloc(32, -1);
      v57 = v55;
      *(_DWORD *)v29 = 136315138;
      v30 = v29 + 12;
      v53 = v29 + 4;
      v54 = v29;
      v31 = v26;
      v32 = objc_msgSend(v31, "description");
      v33 = v26;
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v36 = v35;

      v37 = v34;
      v26 = v33;
      v56 = sub_100172BEC(v37, v36, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v53, v30);

      swift_bridgeObjectRelease(v36);
      v38 = v54;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Playing alert with configuration: %s", v54, 0xCu);
      v39 = v55;
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);

    }
    else
    {

    }
    v50 = *(void **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = v23;
    v51 = v23;

    objc_msgSend(v51, "play");
  }
  else
  {
    v40 = v21;
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      v57 = v44;
      *(_DWORD *)v43 = 136315138;
      v45 = v40;
      v46 = objc_msgSend(v45, "description");
      v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      v49 = v48;

      v56 = sub_100172BEC(v47, v49, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v43 + 4, v43 + 12);

      swift_bridgeObjectRelease(v49);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Failed to create alert with configuration: %s", v43, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);

    }
    else
    {

    }
  }
}

void sub_10015A564()
{
  _QWORD *v0;
  _UNKNOWN **v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  void *v26;
  uint64_t v27;

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (void *)v2[2];
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once(&qword_100315870, sub_1000D975C);
    goto LABEL_4;
  }
  v10 = (void *)v2[3];
  v1 = &off_100315000;
  if (!v10)
    goto LABEL_7;
  v11 = qword_100315870;
  v7 = v10;
  if (v11 != -1)
    goto LABEL_15;
LABEL_4:
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10000D744(v12, (uint64_t)qword_10033FE08);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Stopping current alert", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  objc_msgSend(v7, "stop");
  v17 = (void *)v2[3];
  v2[3] = 0;

LABEL_7:
  v18 = (void *)v2[4];
  if (v18)
  {
    v19 = v1[270];
    v20 = v18;
    if (v19 != (void *)-1)
      swift_once(&qword_100315870, sub_1000D975C);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_10000D744(v21, (uint64_t)qword_10033FE08);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Releasing alert activation assertion", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    objc_msgSend(v20, "relinquish");
    v26 = (void *)v2[4];
    v2[4] = 0;

  }
}

uint64_t sub_10015A7CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __n128 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v13;

  v0 = type metadata accessor for DispatchPredicate(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v4 = static OS_dispatch_queue.main.getter(v5);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v0);
  v6 = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v1 + 8))(v4, v0);
  if ((v6 & 1) != 0)
  {
    if (qword_100315870 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315870, sub_1000D975C);
LABEL_3:
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10000D744(v7, (uint64_t)qword_10033FE08);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Starting ToneLibraryAgent", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  return 1;
}

uint64_t sub_10015A92C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10015A950()
{
  uint64_t v0;

  return sub_100159F38(v0);
}

double sub_10015A958(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_10015A968(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10015A970()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10015A994()
{
  uint64_t v0;

  return sub_100159CD8(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10015A9A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t storeEnumTagSinglePayload for ToneLibraryAgent.PlayRequest(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10015AA00 + 4 * byte_1002592D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10015AA34 + 4 * asc_1002592D0[v4]))();
}

uint64_t sub_10015AA34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015AA3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10015AA44);
  return result;
}

uint64_t sub_10015AA50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10015AA58);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10015AA5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015AA64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToneLibraryAgent.PlayRequest()
{
  return &type metadata for ToneLibraryAgent.PlayRequest;
}

uint64_t storeEnumTagSinglePayload for ToneLibraryAgent.ToneType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10015AAC0 + 4 * byte_1002592DA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10015AAE0 + 4 * byte_1002592DF[v4]))();
}

_BYTE *sub_10015AAC0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10015AAE0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10015AAE8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10015AAF0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10015AAF8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10015AB00(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ToneLibraryAgent.ToneType()
{
  return &type metadata for ToneLibraryAgent.ToneType;
}

unint64_t sub_10015AB20()
{
  unint64_t result;

  result = qword_100322578;
  if (!qword_100322578)
  {
    result = swift_getWitnessTable(&unk_100259368, &type metadata for ToneLibraryAgent.ToneType);
    atomic_store(result, (unint64_t *)&qword_100322578);
  }
  return result;
}

uint64_t ConnectionAssistantRenderer.__allocating_init(style:device:pixelFormat:)(char a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  char v6;
  uint64_t v7;

  v6 = a1 & 1;
  v7 = swift_allocObject(v3, 168, 7);
  ConnectionAssistantRenderer.init(style:device:pixelFormat:)(v6, a2, a3);
  return v7;
}

_QWORD *ConnectionAssistantRenderer.init(style:device:pixelFormat:)(char a1, void *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _UNKNOWN **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v29;
  uint64_t v30;
  _UNKNOWN **v31;
  _OWORD v32[9];

  v8 = type metadata accessor for ConnectionAssistantRenderer.Buffers();
  swift_allocObject(v8, 40, 7);
  v9 = (void *)swift_unknownObjectRetain(a2);
  v10 = ConnectionAssistantRenderer.Buffers.init(device:)(v9);
  if (v4)
  {
    swift_unknownObjectRelease(a2);
    v27 = type metadata accessor for ConnectionAssistantRenderer();
    swift_deallocPartialClassInstance(v3, v27, 168, 7);
  }
  else
  {
    v3[2] = v10;
    v11 = qword_1003159B0;
    swift_unknownObjectRetain(a2);
    if (v11 != -1)
      swift_once(&qword_1003159B0, sub_100225990);
    v32[6] = xmmword_1003400B0;
    v32[7] = *(_OWORD *)&qword_1003400C0;
    v32[8] = xmmword_1003400D0;
    v32[2] = xmmword_100340070;
    v32[3] = *(_OWORD *)&dword_100340080;
    v32[4] = xmmword_100340090;
    v32[5] = xmmword_1003400A0;
    v32[0] = static ConnectionAssistantRenderer.RenderPipelines.Constants.default;
    v32[1] = xmmword_100340060;
    v12 = type metadata accessor for ConnectionAssistantRenderer.RenderPipelines();
    swift_allocObject(v12, 224, 15);
    v13 = ConnectionAssistantRenderer.RenderPipelines.init(device:constants:pixelFormat:)(a2, (unsigned int *)v32, a3);
    v3[3] = v13;
    v14 = v3[2];
    v15 = type metadata accessor for ConnectionAssistantStarsRenderer();
    swift_allocObject(v15, 96, 7);
    swift_unknownObjectRetain(a2);
    swift_retain(v14);
    swift_retain(v13);
    v3[4] = ConnectionAssistantStarsRenderer.init(device:buffers:renderPipelines:)(a2, v14, v13);
    if ((a1 & 1) != 0)
    {
      v16 = type metadata accessor for ConnectionAssistantEarthTexturedRenderer();
      swift_allocObject(v16, 48, 7);
      swift_unknownObjectRetain(a2);
      swift_retain(v14);
      swift_retain(v13);
      v17 = ConnectionAssistantEarthTexturedRenderer.init(device:buffers:renderPipelines:)(a2, v14, v13);
      v18 = &off_1002E6CE0;
    }
    else
    {
      v16 = type metadata accessor for ConnectionAssistantEarthRenderer();
      swift_allocObject(v16, 64, 7);
      swift_unknownObjectRetain(a2);
      swift_retain(v14);
      swift_retain(v13);
      v17 = ConnectionAssistantEarthRenderer.init(device:buffers:renderPipelines:)(a2, v14, v13);
      v18 = &off_1002F18D8;
    }
    v30 = v16;
    v31 = v18;
    *(_QWORD *)&v29 = v17;
    sub_100007D04(&v29, (uint64_t)(v3 + 5));
    swift_unknownObjectRetain(a2);
    swift_retain(v14);
    swift_retain(v13);
    v3[10] = sub_100234138(a2, v14, v13);
    v3[11] = v19;
    v3[12] = v20;
    swift_unknownObjectRetain(a2);
    swift_retain(v14);
    swift_retain(v13);
    v3[13] = sub_1001B0888(a2, v14, v13);
    v3[14] = v21;
    v3[15] = v22;
    v3[16] = v23;
    swift_unknownObjectRetain(a2);
    swift_retain(v14);
    swift_retain(v13);
    v3[17] = sub_10003EA2C(a2, v14, v13);
    v3[18] = v24;
    v3[19] = v25;
    v26 = type metadata accessor for ConnectionAssistantSatelliteRenderer();
    swift_allocObject(v26, 120, 7);
    swift_retain(v14);
    swift_retain(v13);
    v3[20] = ConnectionAssistantSatelliteRenderer.init(device:buffers:renderPipelines:)((uint64_t)a2, v14, v13);
  }
  return v3;
}

uint64_t type metadata accessor for ConnectionAssistantRenderer()
{
  return objc_opt_self(_TtC8SOSBuddy27ConnectionAssistantRenderer);
}

void ConnectionAssistantRenderer.render(dt:earth:camera:commandBuffer:renderPassDescriptor:)(float32x4_t *a1, float32x4_t *a2, id a3, void *a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  id v12;
  double v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  float v18;
  float32x2_t v19;
  float32x2_t v20;
  uint64_t v21;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float v31;
  float32x2_t v32;
  float32x2_t v33;
  uint64_t v34;
  float32x4_t v36;
  id v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  NSString v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  void *v47;
  float v48;
  uint64_t v49;
  float v50;
  float v51;
  simd_float4 *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  simd_float4 v56;
  simd_float4 v57;
  simd_float4 v58;
  float32x4_t v59;
  float32x4_t v60;
  simd_float4 v61;
  float32x4_t v62;
  float32x4_t v63;
  uint64_t v64;
  float32x4_t v65;
  __n128 v66;
  _BYTE v67[128];
  _QWORD v68[2];
  float32x4_t v69;
  float v70;
  float32x4_t v71;
  char v72;
  _BYTE v73[160];
  _BYTE v74[80];
  _BYTE v75[80];
  _BYTE v76[128];
  _BYTE v77[160];
  _BYTE v78[128];
  _OWORD v79[9];
  __int16 v80;
  _OWORD v81[4];
  int v82;
  _OWORD v83[4];
  int v84;
  _OWORD v85[7];
  char v86;
  _QWORD v87[4];
  float32x4_t v88;
  uint64_t v89;
  __int128 v90;
  char v91;
  float32x4_t v92;
  char v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int16 v104;
  _QWORD v105[4];
  float32x4_t v106;
  uint64_t v107;
  __int128 v108;
  char v109;
  float32x4_t v110;
  char v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  __int128 v122;
  _QWORD v123[2];
  float32x4_t v124;
  float v125;
  float32x4_t v126;
  char v127;
  _OWORD v128[9];
  __int16 v129;
  _OWORD v130[7];
  char v131;
  char v132;
  _OWORD v133[4];
  int v134;
  char v135;
  _OWORD v136[4];
  int v137;
  char v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int16 v148;
  char v149;
  char v150;

  v6 = v5;
  v150 = 1;
  v149 = 1;
  v113 = 2000;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v117 = 0;
  v118 = 1;
  v120 = 0;
  v119 = 0;
  v121 = 1;
  v122 = xmmword_100250F80;
  v65 = a1[2];
  v66 = *(__n128 *)a1;
  v12 = objc_msgSend(a3, "computeCommandEncoder");
  if (v12)
  {
    v14 = v12;
    ConnectionAssistantStarsRenderer.compute(dt:stars:computeCommandEncoder:)((uint64_t)&v113, v12, a5);
    sub_10000B458((uint64_t)&a1[10], (uint64_t)v78, &qword_10031EC00);
    sub_10000B458((uint64_t)v78, (uint64_t)v123, &qword_10031EC00);
    if ((v127 & 1) == 0)
    {
      v15 = v123[1];
      v16 = v123[0];
      v17 = vmulq_f32(v124, v124);
      LODWORD(v18) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).u32[0];
      v19 = vrsqrte_f32((float32x2_t)LODWORD(v18));
      v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)LODWORD(v18), vmul_f32(v19, v19)));
      v59 = vmulq_n_f32(v124, vmul_f32(v20, vrsqrts_f32((float32x2_t)LODWORD(v18), vmul_f32(v20, v20))).f32[0]);
      v62 = v126;
      v21 = COERCE_UNSIGNED_INT(atan2f(v125, sqrtf(v18))) | 0x3B03126F00000000;
      __asm { FMOV            V0.4S, #1.0 }
      v27.i64[0] = 0x3F0000003F000000;
      v27.i64[1] = 0x3F0000003F000000;
      LOBYTE(v139) = 0;
      LOBYTE(v128[0]) = 0;
      v105[0] = 100;
      v105[2] = v16;
      v105[3] = v15;
      v106 = v59;
      v107 = v21;
      v108 = xmmword_100254F60;
      v109 = 0;
      v110 = vmlaq_f32(v62, v27, vsubq_f32(_Q0, v62));
      v111 = 0;
      v112 = xmmword_100254F70;
      ConnectionAssistantStarsRenderer.compute(dt:stars:computeCommandEncoder:)((uint64_t)v105, v14, a5);
    }
    sub_10000B458((uint64_t)&a1[23], (uint64_t)v77, &qword_100316058);
    sub_10000B458((uint64_t)v77, (uint64_t)v128, &qword_100316058);
    if (sub_1000DB268((uint64_t)v128) != 1)
    {
      v101 = v128[6];
      v102 = v128[7];
      v103 = v128[8];
      v104 = v129;
      v97 = v128[2];
      v98 = v128[3];
      v99 = v128[4];
      v100 = v128[5];
      v95 = v128[0];
      v96 = v128[1];
      ConnectionAssistantSatellite.cone(camera:earth:)(a2, (uint64_t)a1, (uint64_t)v67);
      sub_10000B458((uint64_t)v67, (uint64_t)v68, &qword_10031EC00);
      if ((v72 & 1) == 0)
      {
        v28 = v68[0];
        v29 = v68[1];
        v30 = vmulq_f32(v69, v69);
        LODWORD(v31) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).u32[0];
        v32 = vrsqrte_f32((float32x2_t)LODWORD(v31));
        v33 = vmul_f32(v32, vrsqrts_f32((float32x2_t)LODWORD(v31), vmul_f32(v32, v32)));
        v60 = vmulq_n_f32(v69, vmul_f32(v33, vrsqrts_f32((float32x2_t)LODWORD(v31), vmul_f32(v33, v33))).f32[0]);
        v63 = v71;
        v34 = COERCE_UNSIGNED_INT(atan2f(v70, sqrtf(v31))) | 0x3B03126F00000000;
        __asm { FMOV            V0.4S, #1.0 }
        v36.i64[0] = 0x3F0000003F000000;
        v36.i64[1] = 0x3F0000003F000000;
        LOBYTE(v139) = 0;
        v73[0] = 0;
        v87[0] = 100;
        v87[2] = v28;
        v87[3] = v29;
        v88 = v60;
        v89 = v34;
        v90 = xmmword_100254F60;
        v91 = 0;
        v92 = vmlaq_f32(v63, v36, vsubq_f32(_Q0, v63));
        v93 = 0;
        v94 = xmmword_100254F70;
        ConnectionAssistantStarsRenderer.compute(dt:stars:computeCommandEncoder:)((uint64_t)v87, v14, a5);
      }
    }
    objc_msgSend(v14, "endEncoding");
    *(_QWORD *)&v13 = swift_unknownObjectRelease(v14).n128_u64[0];
  }
  v37 = objc_msgSend(a4, "colorAttachments", v13);
  v38 = objc_msgSend(v37, "objectAtIndexedSubscript:", 0);

  if (v38)
  {
    v39 = objc_msgSend(v38, "texture");

    if (v39)
    {
      v40 = objc_msgSend(a3, "renderCommandEncoderWithDescriptor:", a4);
      if (v40)
      {
        v41 = v40;
        v42 = String._bridgeToObjectiveC()();
        objc_msgSend(v41, "setLabel:", v42);

        v43 = a2->i64[0];
        v44 = a2->i64[1];
        v45 = (double)a2->i64[0];
        v46 = *(double *)a2[1].i64;
        v139 = 0uLL;
        *(double *)&v140 = v45;
        *((double *)&v140 + 1) = (double)v44;
        v141 = xmmword_1002520D0;
        objc_msgSend(v41, "setViewport:", &v139);
        objc_msgSend(v41, "setCullMode:", 0);
        v47 = *(void **)(*(_QWORD *)(v6 + 16) + 32);
        v48 = 1.0;
        LODWORD(v49) = 1.0;
        if (v43)
        {
          LODWORD(v49) = 1.0;
          if (v44)
          {
            v50 = (float)v43 / (float)v44;
            v48 = fminf(v50, 1.0);
            *(float *)&v49 = fmaxf(v50, 1.0);
          }
        }
        *((float *)&v49 + 1) = 1.0 / v48;
        v64 = v49;
        v51 = ConnectionAssistantCamera.Viewport.normalizedPointSize.getter(v43, v44, v46);
        v58 = matrix_identity_float4x4.columns[1];
        v61 = matrix_identity_float4x4.columns[0];
        v56 = matrix_identity_float4x4.columns[3];
        v57 = matrix_identity_float4x4.columns[2];
        v52 = (simd_float4 *)objc_msgSend((id)swift_unknownObjectRetain_n(v47, 2), "contents");
        v53 = v47;
        v52->i64[0] = v64;
        v52->f32[2] = v51;
        v52[1] = v61;
        v52[2] = v58;
        v52[3] = v57;
        v52[4] = v56;
        swift_unknownObjectRelease(v53);
        sub_10001DD44((uint64_t)a2, v41, v66, 1.0);
        v54 = *(_QWORD *)(v6 + 64);
        v55 = *(_QWORD *)(v6 + 72);
        sub_100007BBC((_QWORD *)(v6 + 40), v54);
        (*(void (**)(float32x4_t *, float32x4_t *, void *, uint64_t, uint64_t))(v55 + 8))(a1, a2, v41, v54, v55);
        sub_10000B458((uint64_t)&a1[10], (uint64_t)v76, &qword_10031EC00);
        sub_10000B458((uint64_t)v76, (uint64_t)v130, &qword_10031EC00);
        if ((v132 & 1) == 0)
        {
          v85[4] = v130[4];
          v85[5] = v130[5];
          v85[6] = v130[6];
          v86 = v131;
          v85[0] = v130[0];
          v85[1] = v130[1];
          v85[2] = v130[2];
          v85[3] = v130[3];
          ConnectionAssistantConeRenderer.render(cone:parameters:camera:destination:renderCommandEncoder:)((uint64_t)v85, (uint64_t)a2, v39, v41, *(_QWORD *)(v6 + 104), *(_QWORD *)(v6 + 112), *(void **)(v6 + 120), v66, v65);
        }
        sub_10000B458((uint64_t)&a1[5], (uint64_t)v75, &qword_100317490);
        sub_10000B458((uint64_t)v75, (uint64_t)v133, &qword_100317490);
        if ((v135 & 1) == 0)
        {
          v83[2] = v133[2];
          v83[3] = v133[3];
          v84 = v134;
          v83[1] = v133[1];
          v83[0] = v133[0];
          ConnectionAssistantLocationDotRenderer.render(dot:parameters:camera:destination:renderCommandEncoder:)((uint64_t)v83, (float32x2_t *)a2, v39, v41, *(_QWORD *)(v6 + 80), v66, *(_QWORD *)(v6 + 88), *(void **)(v6 + 96));
        }
        sub_10000B458((uint64_t)&a1[18], (uint64_t)v74, &qword_10031EC08);
        sub_10000B458((uint64_t)v74, (uint64_t)v136, &qword_10031EC08);
        if ((v138 & 1) == 0)
        {
          v81[2] = v136[2];
          v81[3] = v136[3];
          v82 = v137;
          v81[1] = v136[1];
          v81[0] = v136[0];
          ConnectionAssistantArrowRenderer.render(arrow:earthCenter:camera:destination:renderCommandEncoder:)((uint64_t)v81, (float32x2_t *)a2, v39, v41, *(_QWORD *)(v6 + 136), (float32x4_t)v66, *(_QWORD *)(v6 + 144), *(void **)(v6 + 152));
        }
        sub_10000B458((uint64_t)&a1[23], (uint64_t)v73, &qword_100316058);
        sub_10000B458((uint64_t)v73, (uint64_t)&v139, &qword_100316058);
        if (sub_1000DB268((uint64_t)&v139) != 1)
        {
          v79[6] = v145;
          v79[7] = v146;
          v79[8] = v147;
          v80 = v148;
          v79[2] = v141;
          v79[3] = v142;
          v79[4] = v143;
          v79[5] = v144;
          v79[0] = v139;
          v79[1] = v140;
          ConnectionAssistantSatelliteRenderer.render(satellite:earth:camera:destination:renderCommandEncoder:)((uint64_t)v79, (uint64_t)a1, (uint64_t)a2, v39, v41);
        }
        objc_msgSend(v41, "endEncoding");
        swift_unknownObjectRelease(v39);
      }
      else
      {
        v41 = v39;
      }
      swift_unknownObjectRelease(v41);
    }
  }
}

_QWORD *ConnectionAssistantRenderer.deinit()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 5);
  v1 = v0[10];
  v2 = v0[11];
  swift_unknownObjectRelease(v0[12]);
  swift_release(v2);
  swift_release(v1);
  v3 = v0[13];
  v4 = v0[14];
  v5 = v0[15];
  swift_release(v0[16]);
  swift_unknownObjectRelease(v5);
  swift_release(v4);
  swift_release(v3);
  v6 = v0[17];
  v7 = v0[18];
  swift_unknownObjectRelease(v0[19]);
  swift_release(v7);
  swift_release(v6);
  swift_release(v0[20]);
  return v0;
}

uint64_t ConnectionAssistantRenderer.__deallocating_deinit()
{
  uint64_t v0;

  ConnectionAssistantRenderer.deinit();
  return swift_deallocClassInstance(v0, 168, 7);
}

unint64_t sub_10015B990()
{
  unint64_t result;

  result = qword_100322580;
  if (!qword_100322580)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ConnectionAssistantRenderer.Style, &type metadata for ConnectionAssistantRenderer.Style);
    atomic_store(result, (unint64_t *)&qword_100322580);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantRenderer.Style(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10015BA20 + 4 * byte_100259395[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10015BA54 + 4 * byte_100259390[v4]))();
}

uint64_t sub_10015BA54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015BA5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10015BA64);
  return result;
}

uint64_t sub_10015BA70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10015BA78);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10015BA7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015BA84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantRenderer.Style()
{
  return &type metadata for ConnectionAssistantRenderer.Style;
}

uint64_t sub_10015BAA0(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  NSString v6;
  id v7;
  uint64_t v8;
  unsigned __int8 v9;
  _OWORD v11[2];
  _OWORD v12[2];

  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(a1, "objectForKey:", v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v11, v7);
    swift_unknownObjectRelease(v7);
    sub_10003E704(v11, v12);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  v8 = sub_100003DB8(&qword_100324AC0);
  v9 = swift_dynamicCast(v11, v12, v8, &type metadata for Bool, 6);
  if (((LOBYTE(v11[0]) != 2) & v9) != 0)
    return LOBYTE(v11[0]);
  else
    return a4;
}

void sub_10015BB74(char a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  char v11;
  void *v12;
  __n128 v13;
  uint64_t v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  NSObject *oslog;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(v1 + 8);
  v2 = *(_QWORD *)(v1 + 16);
  if (a1 == 2)
  {
    v4 = *(void **)v1;
    swift_bridgeObjectRetain(v2);
    v5 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "removeObjectForKey:", v5);

    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    v6 = type metadata accessor for Logger(0);
    sub_10000D744(v6, (uint64_t)qword_10033FD18);
    swift_bridgeObjectRetain(v2);
    oslog = Logger.logObject.getter(v7);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v28 = v10;
      *(_DWORD *)v9 = 136446210;
      swift_bridgeObjectRetain(v2);
      v27 = sub_100172BEC(v3, v2, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease_n(v2, 3);
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "UserDefaults: %{public}s removed", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(v2, 2);

    }
  }
  else
  {
    v11 = a1 & 1;
    v12 = *(void **)v1;
    LOBYTE(v28) = a1 & 1;
    v13 = swift_bridgeObjectRetain(v2);
    v14 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v28, &type metadata for Bool, v13);
    v15 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "setObject:forKey:", v14, v15);
    swift_unknownObjectRelease(v14);

    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    v16 = type metadata accessor for Logger(0);
    sub_10000D744(v16, (uint64_t)qword_10033FD18);
    swift_bridgeObjectRetain(v2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(22, -1);
      v21 = swift_slowAlloc(64, -1);
      v28 = v21;
      *(_DWORD *)v20 = 136446466;
      swift_bridgeObjectRetain(v2);
      v27 = sub_100172BEC(v3, v2, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease_n(v2, 3);
      *(_WORD *)(v20 + 12) = 2082;
      LOBYTE(v27) = v11;
      v23 = String.init<A>(describing:)(&v27, &type metadata for Bool, v22);
      v25 = v24;
      v27 = sub_100172BEC(v23, v24, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v20 + 14, v20 + 22);
      swift_bridgeObjectRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "UserDefaults: %{public}s = %{public}s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v2, 2);
    }

  }
}

uint64_t sub_10015BF60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _UNKNOWN **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  unint64_t v36;
  char v37;
  int v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  id v57;
  char v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  void (*v71)(uint64_t *, uint64_t);
  __n128 v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __n128 v131;
  void *v132;
  char *v133;
  char *v134;
  _UNKNOWN **v135;
  void *v136;
  uint64_t v137;
  char *v138;
  __n128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  void (*v146)(char *, _UNKNOWN **);
  uint64_t v147;
  char *v148;
  uint64_t v149;
  NSObject *v150;
  os_log_type_t v151;
  uint8_t *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  _UNKNOWN **v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t *v180;
  uint64_t v181;
  _QWORD *v182;
  __n128 v183;
  uint64_t v184;
  uint64_t v185;
  void **aBlock;
  _QWORD v187[2];
  ValueMetadata *v188;
  unint64_t v189;
  uint64_t v190;

  v170 = type metadata accessor for DispatchWorkItemFlags(0);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170, v0);
  v168 = (char *)&v161 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = type metadata accessor for DispatchQoS(0);
  v166 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167, v2);
  v165 = (char *)&v161 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = type metadata accessor for DispatchPredicate(0);
  v175 = *(_QWORD **)(v181 - 8);
  __chkstk_darwin(v181, v4);
  v6 = (uint64_t *)((char *)&v161 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (_UNKNOWN **)type metadata accessor for DispatchTime(0);
  v176 = (uint64_t)*(v7 - 1);
  v9 = __chkstk_darwin(v7, v8);
  v11 = (char *)&v161 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v9, v12);
  v15 = (uint64_t)&v161 - v14;
  v17 = __chkstk_darwin(v13, v16);
  v163 = (char *)&v161 - v18;
  v20 = __chkstk_darwin(v17, v19);
  v164 = (char *)&v161 - v21;
  __chkstk_darwin(v20, v22);
  v24 = (char *)&v161 - v23;
  if (qword_100315820 != -1)
LABEL_56:
    swift_once(&qword_100315820, sub_1000D95E4);
  v180 = v6;
  v162 = v11;
  v171 = v15;
  v173 = v7;
  v177 = type metadata accessor for Logger(0);
  v184 = sub_10000D744(v177, (uint64_t)qword_10033FD18);
  v25 = Logger.logObject.getter(v184);
  v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "SOSBuddyEnvironment start", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }

  v172 = v24;
  static DispatchTime.now()(v28);
  type metadata accessor for LockScreenViewController();
  v29 = v182;
  sub_1000805B4((uint64_t)v182);
  v30 = v29[27];
  v11 = (char *)v29[28];
  v179 = v29 + 24;
  sub_100007BBC(v29 + 24, v30);
  (*((void (**)(_QWORD *, _UNKNOWN **, uint64_t, char *))v11 + 6))(v29, &off_1002F3D28, v30, v11);
  v174 = v29[36];
  v31 = v174;
  *(_QWORD *)(v174 + 112) = &off_1002F3D78;
  swift_unknownObjectWeakAssign(v31 + 104, v29);
  v32 = v29[33];
  v178 = v29 + 30;
  v33 = *sub_100007BBC(v29 + 30, v32);
  *(_QWORD *)(v33 + 64) = &off_1002F3DB0;
  v35 = swift_unknownObjectWeakAssign(v33 + 56, v29);
  v15 = 0;
  v36 = 0;
  v24 = (char *)&off_1002E0000;
  v7 = &off_1002E0040;
  v35.n128_u64[0] = 136315650;
  v183 = v35;
  do
  {
    if (v36 >= 2)
    {
      __break(1u);
      goto LABEL_56;
    }
    v37 = v15;
    v38 = *((unsigned __int8 *)&off_1002E0040 + v36 + 32);
    v39 = Logger.logObject.getter(v34);
    v40 = static os_log_type_t.default.getter();
    v6 = (uint64_t *)v40;
    if (os_log_type_enabled(v39, v40))
    {
      v11 = (char *)swift_slowAlloc(28, -1);
      v41 = swift_slowAlloc(64, -1);
      v185 = v41;
      *(_DWORD *)v11 = v183.n128_u32[0];
      v42 = StaticString.description.getter("CoreTelephony", 13, 2);
      v44 = v43;
      *(_QWORD *)(v11 + 4) = sub_100172BEC(v42, v43, &v185);
      swift_bridgeObjectRelease(v44);
      *((_WORD *)v11 + 6) = 2080;
      if (v38)
        v45 = "IML";
      else
        v45 = "Bifrost";
      if (v38)
        v46 = 3;
      else
        v46 = 7;
      v47 = StaticString.description.getter(v45, v46, 2);
      v49 = v48;
      *(_QWORD *)(v11 + 14) = sub_100172BEC(v47, v48, &v185);
      swift_bridgeObjectRelease(v49);
      *((_WORD *)v11 + 11) = 1024;
      v188 = &type metadata for UIFeatureFlags;
      v189 = sub_100175A2C();
      LOBYTE(aBlock) = v38;
      LOBYTE(v49) = isFeatureEnabled(_:)(&aBlock);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(&aBlock);
      *((_DWORD *)v11 + 6) = v49 & 1;
      _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v6, "Feature flag: (%s-%s) -> %{BOOL}d", (uint8_t *)v11, 0x1Cu);
      swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }

    v15 = 1;
    v36 = &_mh_execute_header.magic + 1;
  }
  while ((v37 & 1) == 0);
  v50 = (uint64_t)v182;
  v51 = v182[4];
  v188 = &type metadata for UIFeatureFlags;
  v189 = sub_100175A2C();
  LOBYTE(aBlock) = 1;
  v52 = isFeatureEnabled(_:)(&aBlock);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(&aBlock);
  if ((v52 & 1) != 0)
  {
    v53 = *(_QWORD *)(v50 + 296);
    v54 = *(_QWORD *)(v53 + 64);
    v55 = *(_QWORD *)(v53 + 72);
    v56 = *(unsigned __int8 *)(v53 + 80);
    v57 = *(id *)(v53 + 56);
    swift_bridgeObjectRetain(v55);
    v58 = sub_10015BAA0(v57, v54, v55, v56);
    swift_bridgeObjectRelease(v55);

    if (v58 == 2)
      v59 = 1;
    else
      v59 = v58 & 1;
  }
  else
  {
    v59 = 0;
  }
  *(_BYTE *)(v51 + 40) = v59;
  v60 = v182;
  sub_1001646E4();
  v61 = v60[27];
  v62 = v60[28];
  sub_100007BBC(v179, v61);
  (*(void (**)(uint64_t, uint64_t))(v62 + 56))(v61, v62);
  sub_100023D54();
  sub_100007BBC(v178, v60[33]);
  sub_10019AAE0();
  v63 = (_QWORD *)v60[17];
  sub_10006FB84();
  sub_100112C9C();
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v65 = static OS_dispatch_queue.main.getter(v64);
  v67 = v180;
  v66 = v181;
  *v180 = v65;
  v68 = enum case for DispatchPredicate.onQueue(_:);
  v69 = v175;
  v70 = (_QWORD *)v175[13];
  ((void (*)(uint64_t *, _QWORD, uint64_t))v70)(v67, enum case for DispatchPredicate.onQueue(_:), v66);
  LOBYTE(v61) = _dispatchPreconditionTest(_:)(v67);
  v71 = (void (*)(uint64_t *, uint64_t))v69[1];
  v71(v67, v66);
  if ((v61 & 1) == 0)
  {
    __break(1u);
    goto LABEL_58;
  }
  v73 = v70;
  v74 = v60[39];
  v75 = v60[19];
  v76 = static OS_dispatch_queue.main.getter(v72);
  v77 = v181;
  *v67 = v76;
  v175 = v73;
  ((void (*)(uint64_t *, uint64_t, uint64_t))v73)(v67, v68, v77);
  LOBYTE(v73) = _dispatchPreconditionTest(_:)(v67);
  v71(v67, v77);
  if ((v73 & 1) == 0)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v183.n128_u64[0] = v75;
  swift_unknownObjectWeakAssign(v74 + 16, v75);
  *(_BYTE *)(v74 + 24) = 1;
  v78 = (_QWORD *)v60[6];
  v79 = v78[7];
  v80 = v78[8];
  swift_retain(v79);
  swift_retain(v80);
  sub_10003ECE0(v79, v80);
  swift_release(v79);
  swift_release(v80);
  v81 = sub_1001FC810();
  if ((v81 & 1) == 0)
  {
    v82 = Logger.logObject.getter(v81);
    v83 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v82, v83))
    {
      v84 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v84 = 0;
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Failed to start ApplicationActiveStateSource", v84, 2u);
      swift_slowDealloc(v84, -1, -1);
    }

  }
  if ((sub_100019540() & 1) != 0)
    goto LABEL_31;
  if (qword_1003158C8 != -1)
    goto LABEL_61;
  while (1)
  {
    v85 = sub_10000D744(v177, (uint64_t)qword_10033FF10);
    v86 = Logger.logObject.getter(v85);
    v87 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v86, v87))
    {
      v88 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v88 = 0;
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "Failed to start source", v88, 2u);
      swift_slowDealloc(v88, -1, -1);
    }

LABEL_31:
    sub_1001C4ED0();
    v89 = (_QWORD *)v60[7];
    v90 = v78[13];
    v91 = *(_QWORD *)(v90 + 48);
    v92 = *(_QWORD *)(v90 + 56);
    swift_bridgeObjectRetain(v92);
    sub_100173B34(v91, v92, (uint64_t)v60, v89);
    swift_bridgeObjectRelease(v92);
    v93 = (_QWORD *)v60[11];
    v94 = v78[13];
    v95 = *(_QWORD *)(v94 + 48);
    v96 = *(_QWORD *)(v94 + 56);
    swift_bridgeObjectRetain(v96);
    sub_100173CA0(v95, v96, (uint64_t)v60, v183.n128_i64[0], (uint64_t)v60, v93);
    swift_bridgeObjectRelease(v96);
    v97 = sub_100059644();
    if ((v97 & 1) == 0)
    {
      if (qword_100315888 != -1)
        swift_once(&qword_100315888, sub_1000D97B0);
      v98 = sub_10000D744(v177, (uint64_t)qword_10033FE50);
      v99 = Logger.logObject.getter(v98);
      v100 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v99, v100))
      {
        v101 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v101 = 0;
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "Failed to start source", v101, 2u);
        swift_slowDealloc(v101, -1, -1);
      }

    }
    v102 = Logger.logObject.getter(v97);
    v103 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v102, v103))
    {
      v104 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v104 = 0;
      _os_log_impl((void *)&_mh_execute_header, v102, v103, "FindMyAgent start", v104, 2u);
      swift_slowDealloc(v104, -1, -1);
    }

    if (qword_100315890 != -1)
LABEL_59:
      swift_once(&qword_100315890, sub_1000D97D4);
    v78 = (_QWORD *)sub_10000D744(v177, (uint64_t)qword_10033FE68);
    v105 = Logger.logObject.getter(v78);
    v106 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v105, v106))
    {
      v107 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v107 = 0;
      _os_log_impl((void *)&_mh_execute_header, v105, v106, "MessagesAgent start", v107, 2u);
      swift_slowDealloc(v107, -1, -1);
    }

    v109 = Logger.logObject.getter(v108);
    v110 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v109, v110))
    {
      v111 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v111 = 0;
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "SettingsAgent start", v111, 2u);
      swift_slowDealloc(v111, -1, -1);
    }

    v113 = static OS_dispatch_queue.main.getter(v112);
    v115 = v180;
    v114 = v181;
    *v180 = v113;
    ((void (*)(uint64_t *, uint64_t, uint64_t))v175)(v115, v68, v114);
    v116 = _dispatchPreconditionTest(_:)(v115);
    v71(v115, v114);
    if ((v116 & 1) != 0)
      break;
    __break(1u);
LABEL_61:
    swift_once(&qword_1003158C8, sub_1000D98C4);
  }
  sub_10007758C();
  sub_10001E9B8();
  sub_1000797D0();
  sub_100016080();
  sub_100007BBC(v178, v60[33]);
  sub_10019B37C();
  v117 = v60[27];
  v118 = v60[28];
  sub_100007BBC(v179, v117);
  v119 = v63 + 6;
  v121 = v63[9];
  v120 = v63[10];
  sub_100007BBC(v119, v121);
  (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(v120 + 8))(&aBlock, v121, v120);
  v122 = sub_100007BBC(&aBlock, (uint64_t)v188);
  (*(void (**)(_QWORD *, uint64_t, uint64_t, double, double))(v118 + 72))(v60, v117, v118, *(double *)(*v122 + 16), *(double *)(*v122 + 24));
  v123 = _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(&aBlock);
  v124 = v60[23];
  v125 = Logger.logObject.getter(v123);
  v126 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v125, v126))
  {
    v127 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v127 = 0;
    _os_log_impl((void *)&_mh_execute_header, v125, v126, "TelephonyUtilitiesAgent start", v127, 2u);
    swift_slowDealloc(v127, -1, -1);
  }

  v128 = *(_QWORD *)(v124 + 32);
  *(_QWORD *)(v124 + 24) = 0;
  *(_QWORD *)(v124 + 32) = 0;
  swift_bridgeObjectRelease(v128);
  sub_10021981C(1);
  v129 = type metadata accessor for PreventSuspensionAssertion();
  swift_allocObject(v129, 32, 7);
  v130 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, 0xD000000000000019, 0x800000010026C2B0);
  v132 = (void *)static OS_dispatch_queue.main.getter(v131);
  v133 = v163;
  static DispatchTime.now()(v132);
  v134 = v164;
  + infix(_:_:)(v133, 1.5);
  v183.n128_u64[0] = *(_QWORD *)(v176 + 8);
  v135 = v173;
  ((void (*)(char *, _UNKNOWN **))v183.n128_u64[0])(v133, v173);
  v189 = (unint64_t)sub_100175A70;
  v190 = v130;
  aBlock = _NSConcreteStackBlock;
  v187[0] = 1107296256;
  v187[1] = sub_1001BAACC;
  v188 = (ValueMetadata *)&unk_1002F4570;
  v136 = _Block_copy(&aBlock);
  v137 = v190;
  v182 = (_QWORD *)v130;
  swift_retain(v130);
  swift_release(v137);
  v138 = v165;
  static DispatchQoS.unspecified.getter(v139);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v140 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v141 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v142 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
  v143 = v168;
  v144 = v170;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v141, v142, v170, v140);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v134, v138, v143, v136);
  _Block_release(v136);

  (*(void (**)(char *, uint64_t))(v169 + 8))(v143, v144);
  (*(void (**)(char *, uint64_t))(v166 + 8))(v138, v167);
  v145 = v134;
  v146 = (void (*)(char *, _UNKNOWN **))v183.n128_u64[0];
  ((void (*)(char *, _UNKNOWN **))v183.n128_u64[0])(v145, v135);
  v147 = v171;
  v148 = v172;
  v149 = (*(uint64_t (**)(uint64_t, char *, _UNKNOWN **))(v176 + 16))(v171, v172, v135);
  v150 = Logger.logObject.getter(v149);
  v151 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v150, v151))
    goto LABEL_51;
  v152 = (uint8_t *)swift_slowAlloc(12, -1);
  *(_DWORD *)v152 = 134217984;
  v153 = static DispatchTime.now()(v152);
  v154 = DispatchTime.uptimeNanoseconds.getter(v153);
  v155 = DispatchTime.uptimeNanoseconds.getter(v154);
  if (v155 >= v154)
  {
    v158 = 0;
    goto LABEL_53;
  }
  v156 = DispatchTime.uptimeNanoseconds.getter(v155);
  v157 = DispatchTime.uptimeNanoseconds.getter(v156);
  v158 = v156 - v157;
  if (v156 >= v157)
  {
LABEL_53:
    v159 = v158 / 0xF4240;
    v146(v162, v135);
    v146((char *)v147, v135);
    aBlock = (void **)v159;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v187, v152 + 4, v152 + 12);
    _os_log_impl((void *)&_mh_execute_header, v150, v151, "SOSBuddyEnvironment started in %llu ms", v152, 0xCu);
    swift_slowDealloc(v152, -1, -1);
    goto LABEL_54;
  }
  __break(1u);
LABEL_51:
  v146((char *)v147, v135);
LABEL_54:
  swift_release(v182);

  v146(v148, v135);
  return 1;
}

uint64_t sub_10015CF40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  char *v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(_QWORD *, uint64_t, uint64_t);
  char v65;
  uint64_t (*v66)(_QWORD *, uint64_t);
  uint64_t result;
  uint64_t v68;
  __n128 v69;
  char v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  void (*v84)(char *, uint64_t);
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char v98[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v93 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  v5 = (char **)((char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for DispatchTime(0);
  v88 = *(_QWORD *)(v6 - 8);
  v89 = v6;
  v8 = __chkstk_darwin(v6, v7);
  v86 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8, v10);
  v87 = (char *)&v86 - v12;
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v86 - v14;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v16 = type metadata accessor for Logger(0);
  v95 = sub_10000D744(v16, (uint64_t)qword_10033FD18);
  v17 = Logger.logObject.getter(v95);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "SOSBuddyEnvironment stop", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  v94 = v15;
  static DispatchTime.now()(v20);
  v21 = *(_QWORD *)(v1 + 264);
  v92 = (_QWORD *)(v1 + 240);
  v22 = sub_100007BBC((_QWORD *)(v1 + 240), v21);
  v23 = *v22;
  v24 = *(_QWORD *)(*v22 + 72);
  *(_QWORD *)(v23 + 72) = 0;
  swift_release(v24);
  v25 = *(_QWORD *)(v1 + 288);
  v26 = *(_QWORD *)(v25 + 120);
  *(_QWORD *)(v25 + 120) = 0;
  swift_release(v26);
  v27 = *(_QWORD *)(v1 + 216);
  v28 = *(_QWORD *)(v1 + 224);
  v91 = (_QWORD *)(v1 + 192);
  sub_100007BBC((_QWORD *)(v1 + 192), v27);
  (*(void (**)(uint64_t, uint64_t))(v28 + 64))(v27, v28);
  swift_beginAccess(v1 + 320, v98, 1, 0);
  v29 = *(_QWORD *)(v1 + 320);
  *(_QWORD *)(v1 + 320) = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v29);
  v90 = *(_QWORD *)(v1 + 48);
  v30 = *(_QWORD *)(v90 + 32);
  if (*(_QWORD *)(v30 + 64) && sub_100067058(3u, *(_QWORD *)(v30 + 88)))
    sub_100218018(3, (uint64_t)sub_10021865C, 0);
  if (qword_100315890 != -1)
    swift_once(&qword_100315890, sub_1000D97D4);
  v31 = sub_10000D744(v16, (uint64_t)qword_10033FE68);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "TelephonyUtilitiesAgent stop", v34, 2u);
    swift_slowDealloc(v34, -1, -1);
  }

  v35 = *(_QWORD *)(v1 + 64);
  v36 = *(id *)(v35 + 32);
  sub_1000A4558();

  v37 = *(_QWORD *)(v35 + 40);
  *(_QWORD *)(v35 + 40) = 0;
  swift_release(v37);
  v38 = *(unsigned __int8 *)(v35 + 48);
  if ((_DWORD)v38 != 2)
  {
    v39 = sub_100003DB8(&qword_10032B0E0);
    v40 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v39, v40);
  }
  *(_BYTE *)(v35 + 48) = 2;
  sub_10001632C(v38);
  v41 = *(_QWORD *)(v1 + 112);
  v42 = *(id *)(v41 + 32);
  sub_100015478();

  v43 = *(_QWORD *)(v41 + 40);
  *(_QWORD *)(v41 + 40) = 0;
  swift_release(v43);
  sub_10001EC7C();
  v44 = *(_QWORD *)(v1 + 120);
  *(_WORD *)(v44 + 89) = 514;
  v45 = *(unsigned __int8 *)(v44 + 91);
  if ((_DWORD)v45 != 2)
  {
    v46 = sub_100003DB8(&qword_10032B0E0);
    v47 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v46, v47);
  }
  *(_BYTE *)(v44 + 91) = 2;
  sub_10023700C(v45);
  sub_100235F44();
  v48 = sub_100024808();
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v49, v50))
  {
    v51 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v51 = 0;
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "SettingsAgent stop", v51, 2u);
    swift_slowDealloc(v51, -1, -1);
  }

  v52 = sub_10013F6A4();
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.debug.getter();
  v55 = os_log_type_enabled(v53, v54);
  v56 = v94;
  if (v55)
  {
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "FindMyAgent stop", v57, 2u);
    swift_slowDealloc(v57, -1, -1);
  }

  sub_1000599C8();
  sub_10005AE4C();
  sub_10022B904();
  sub_1001C5098();
  sub_100019A24();
  sub_1001FCD70();
  v58 = *(_QWORD *)(v1 + 216);
  v59 = *(_QWORD *)(v1 + 224);
  sub_100007BBC(v91, v58);
  (*(void (**)(uint64_t, uint64_t))(v59 + 80))(v58, v59);
  sub_100007BBC(v92, *(_QWORD *)(v1 + 264));
  sub_10019B608();
  v60 = *(_QWORD *)(v1 + 312);
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v5 = static OS_dispatch_queue.main.getter(v61);
  v62 = enum case for DispatchPredicate.onQueue(_:);
  v63 = v93;
  v64 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v93 + 104);
  v64(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v65 = _dispatchPreconditionTest(_:)(v5);
  v66 = *(uint64_t (**)(_QWORD *, uint64_t))(v63 + 8);
  result = v66(v5, v2);
  if ((v65 & 1) != 0)
  {
    *(_BYTE *)(v60 + 24) = 0;
    v68 = *(_QWORD *)(v60 + 32);
    *(_QWORD *)(v60 + 32) = 0;
    swift_release(v68);
    swift_unknownObjectWeakAssign(v60 + 16, 0);
    sub_10021981C(4);
    *v5 = static OS_dispatch_queue.main.getter(v69);
    v64(v5, v62, v2);
    v70 = _dispatchPreconditionTest(_:)(v5);
    result = v66(v5, v2);
    if ((v70 & 1) != 0)
    {
      sub_100112C9C(result);
      sub_1001B7C4C();
      type metadata accessor for LockScreenViewController();
      sub_1000805B4(0);
      *(_WORD *)(v1 + 336) = 1282;
      swift_beginAccess(*(_QWORD *)(v1 + 296) + 24, &v96, 33, 0);
      sub_10015BB74(0);
      swift_endAccess(&v96);
      v72 = v87;
      v71 = v88;
      v73 = v89;
      v74 = (*(uint64_t (**)(char *, char *, uint64_t))(v88 + 16))(v87, v56, v89);
      v75 = Logger.logObject.getter(v74);
      v76 = static os_log_type_t.default.getter(v75);
      if (os_log_type_enabled(v75, v76))
      {
        v77 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v77 = 134217984;
        v78 = static DispatchTime.now()(v77);
        v79 = DispatchTime.uptimeNanoseconds.getter(v78);
        v80 = DispatchTime.uptimeNanoseconds.getter(v79);
        if (v80 >= v79)
        {
          v83 = 0;
        }
        else
        {
          v81 = DispatchTime.uptimeNanoseconds.getter(v80);
          v82 = DispatchTime.uptimeNanoseconds.getter(v81);
          v83 = v81 - v82;
          if (v81 < v82)
          {
            __break(1u);
            goto LABEL_26;
          }
        }
        v85 = v83;
        v84 = *(void (**)(char *, uint64_t))(v71 + 8);
        v84(v86, v73);
        v84(v72, v73);
        v96 = v85 / 0xF4240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v77 + 4, v77 + 12);
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "SOSBuddyEnvironment stopped in %llu ms", v77, 0xCu);
        swift_slowDealloc(v77, -1, -1);
        goto LABEL_29;
      }
LABEL_26:
      v84 = *(void (**)(char *, uint64_t))(v71 + 8);
      v84(v72, v73);
LABEL_29:

      return ((uint64_t (*)(char *, uint64_t))v84)(v56, v73);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10015D75C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  char *v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  int64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  id v45;
  NSString v46;
  id v47;
  uint64_t v48;
  int v49;
  int v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67[32];
  _OWORD v68[2];
  _BYTE v69[24];
  uint64_t v70[6];

  v2 = v1;
  if (qword_100315820 != -1)
LABEL_52:
    swift_once(&qword_100315820, sub_1000D95E4);
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FD18);
  v6 = swift_bridgeObjectRetain_n(a1, 2, v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = "ontentView";
  v63 = v2;
  if (!os_log_type_enabled(v7, v8))
  {

    swift_bridgeObjectRelease_n(a1, 2);
    if ((a1 & 0xC000000000000001) != 0)
      goto LABEL_4;
LABEL_9:
    v28 = -1 << *(_BYTE *)(a1 + 32);
    v65 = a1 + 56;
    v29 = ~v28;
    v30 = -v28;
    if (v30 < 64)
      v31 = ~(-1 << v30);
    else
      v31 = -1;
    v27 = v31 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v25 = v29;
    v26 = 0;
    goto LABEL_13;
  }
  v10 = (uint8_t *)swift_slowAlloc(12, -1);
  v11 = swift_slowAlloc(32, -1);
  v70[0] = v11;
  *(_DWORD *)v10 = 136446210;
  sub_10006477C(0, (unint64_t *)&qword_100317D40, UIOpenURLContext_ptr);
  v12 = a1;
  sub_1000647B4((unint64_t *)&unk_1003184C0, (unint64_t *)&qword_100317D40, UIOpenURLContext_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  v13 = swift_bridgeObjectRetain(a1);
  v14 = Set.description.getter(v13);
  v16 = v15;
  swift_bridgeObjectRelease(v12);
  v17 = v14;
  a1 = v12;
  *(_QWORD *)&v68[0] = sub_100172BEC(v17, v16, v70);
  v9 = "SessionTrailingContentView" + 16;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v68, (char *)v68 + 8, v10 + 4, v10 + 12);
  swift_bridgeObjectRelease_n(v12, 2);
  v18 = v16;
  v2 = v63;
  swift_bridgeObjectRelease(v18);
  _os_log_impl((void *)&_mh_execute_header, v7, v8, "handleURLContexts: %{public}s]", v10, 0xCu);
  swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v11, -1, -1);
  swift_slowDealloc(v10, -1, -1);

  if ((v12 & 0xC000000000000001) == 0)
    goto LABEL_9;
LABEL_4:
  if (a1 < 0)
    v19 = a1;
  else
    v19 = a1 & 0xFFFFFFFFFFFFFF8;
  v20 = swift_bridgeObjectRetain(a1);
  v21 = __CocoaSet.makeIterator()(v19, v20);
  v22 = sub_10006477C(0, (unint64_t *)&qword_100317D40, UIOpenURLContext_ptr);
  v23 = sub_1000647B4((unint64_t *)&unk_1003184C0, (unint64_t *)&qword_100317D40, UIOpenURLContext_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  v24 = Set.Iterator.init(_cocoa:)(v70, v21, v22, v23);
  a1 = v70[0];
  v65 = v70[1];
  v25 = v70[2];
  v26 = v70[3];
  v27 = v70[4];
LABEL_13:
  v64 = (unint64_t)(v25 + 64) >> 6;
  v62 = *((_QWORD *)v9 + 106);
  v66 = a1;
  while (a1 < 0)
  {
    v35 = __CocoaSet.Iterator.next()(v24);
    if (!v35)
      return sub_1000647F4(a1);
    v36 = v35;
    *(_QWORD *)v67 = v35;
    v37 = sub_10006477C(0, (unint64_t *)&qword_100317D40, UIOpenURLContext_ptr);
    swift_unknownObjectRetain(v36);
    swift_dynamicCast(v68, v67, (char *)&type metadata for Swift.AnyObject + 8, v37, 7);
    v38 = *(id *)&v68[0];
    swift_unknownObjectRelease(v36);
    v34 = v26;
    v32 = v27;
    if (!v38)
      return sub_1000647F4(a1);
LABEL_38:
    v42 = *(_QWORD *)(v2 + 296);
    swift_beginAccess(v42 + 24, v69, 0, 0);
    v43 = *(_QWORD *)(v42 + 40);
    v44 = *(unsigned __int8 *)(v42 + 48);
    v45 = *(id *)(v42 + 24);
    swift_bridgeObjectRetain(v43);
    v46 = String._bridgeToObjectiveC()();
    v47 = objc_msgSend(v45, "objectForKey:", v46);

    if (v47)
    {
      _bridgeAnyObjectToAny(_:)(v67, v47);
      swift_unknownObjectRelease(v47);
      sub_10003E704(v67, v68);
    }
    else
    {
      memset(v68, 0, sizeof(v68));
    }
    v48 = sub_100003DB8(&qword_100324AC0);
    if (swift_dynamicCast(v67, v68, v48, &type metadata for Bool, 6))
    {
      v49 = v67[0];
    }
    else
    {
      v49 = 2;
      v67[0] = 2;
    }
    swift_bridgeObjectRelease(v43);

    if (v49 == 2)
      v50 = v44;
    else
      v50 = v49;
    if ((sub_100136EA4(v50, v38) & 1) != 0)
      goto LABEL_15;
    v38 = v38;
    v51 = Logger.logObject.getter(v38);
    v52 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v51, v52))
    {

LABEL_15:
      goto LABEL_16;
    }
    v53 = swift_slowAlloc(12, -1);
    v54 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v68[0] = v54;
    *(_DWORD *)v53 = v62;
    v55 = v38;
    v56 = objc_msgSend(v55, "description");
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    v59 = v58;

    *(_QWORD *)(v53 + 4) = sub_100172BEC(v57, v59, (uint64_t *)v68);
    v60 = v59;
    v2 = v63;
    swift_bridgeObjectRelease(v60);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Failed to handle URL [%{public}s]", (uint8_t *)v53, 0xCu);
    swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v53, -1, -1);

LABEL_16:
    v26 = v34;
    v27 = v32;
    a1 = v66;
  }
  if (v27)
  {
    v32 = (v27 - 1) & v27;
    v33 = __clz(__rbit64(v27)) | (v26 << 6);
    v34 = v26;
    goto LABEL_37;
  }
  v39 = v26 + 1;
  if (__OFADD__(v26, 1))
  {
    __break(1u);
    goto LABEL_52;
  }
  if (v39 >= v64)
    return sub_1000647F4(a1);
  v40 = *(_QWORD *)(v65 + 8 * v39);
  v34 = v26 + 1;
  if (v40)
    goto LABEL_36;
  v34 = v26 + 2;
  if (v26 + 2 >= v64)
    return sub_1000647F4(a1);
  v40 = *(_QWORD *)(v65 + 8 * v34);
  if (v40)
    goto LABEL_36;
  v34 = v26 + 3;
  if (v26 + 3 >= v64)
    return sub_1000647F4(a1);
  v40 = *(_QWORD *)(v65 + 8 * v34);
  if (v40)
    goto LABEL_36;
  v34 = v26 + 4;
  if (v26 + 4 >= v64)
    return sub_1000647F4(a1);
  v40 = *(_QWORD *)(v65 + 8 * v34);
  if (v40)
  {
LABEL_36:
    v32 = (v40 - 1) & v40;
    v33 = __clz(__rbit64(v40)) + (v34 << 6);
LABEL_37:
    v38 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v33);
    if (!v38)
      return sub_1000647F4(a1);
    goto LABEL_38;
  }
  v41 = v26 + 5;
  while (v64 != v41)
  {
    v40 = *(_QWORD *)(v65 + 8 * v41++);
    if (v40)
    {
      v34 = v41 - 1;
      goto LABEL_36;
    }
  }
  return sub_1000647F4(a1);
}

uint64_t sub_10015DE3C(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;

  v2 = v1;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000D744(v4, (uint64_t)qword_10033FD18);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 67240192;
    v14 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v8 + 4, v8 + 8);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "handleMainSceneActiveChange: %{BOOL,public}d", v8, 8u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = *(_QWORD *)(v2 + 24);
  v10 = *(unsigned __int8 *)(v9 + 80);
  if ((_DWORD)v10 == 2 || ((v10 ^ a1) & 1) != 0)
  {
    v11 = sub_100003DB8(&qword_10032B0E0);
    v12 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v11, v12);
  }
  *(_BYTE *)(v9 + 80) = a1 & 1;
  return sub_100124AC8(v10);
}

void sub_10015DFB4()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10000D744(v0, (uint64_t)qword_10033FD18);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "OffTheGrid mode request done", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

uint64_t sub_10015E080(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000D744(v4, (uint64_t)qword_10033FD18);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Requesting OffTheGrid mode", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = type metadata accessor for PreventSuspensionAssertion();
  swift_allocObject(v9, 32, 7);
  v10 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, 0xD000000000000021, 0x800000010026C280);
  sub_1000212A8(1, a1, *(_QWORD *)(v2 + 128), v10);
  return swift_release(v10);
}

uint64_t sub_10015E1C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint8_t *v24;
  __n128 v25;
  void *v26;
  void (*v27)(char *, uint64_t);
  void *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD aBlock[5];
  uint64_t v42;

  v37 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37, v2);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v5 - 8);
  v39 = v5;
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = __chkstk_darwin(v9, v11);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  v17 = (char *)&v37 - v16;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10000D744(v18, (uint64_t)qword_10033FD18);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = a1;
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "OffTheGrid mode request done", v23, 2u);
    v24 = v23;
    a1 = v22;
    swift_slowDealloc(v24, -1, -1);
  }

  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v26 = (void *)static OS_dispatch_queue.main.getter(v25);
  static DispatchTime.now()(v26);
  + infix(_:_:)(v14, 1.0);
  v27 = *(void (**)(char *, uint64_t))(v10 + 8);
  v27(v14, v9);
  aBlock[4] = sub_1001759FC;
  v42 = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002F4548;
  v28 = _Block_copy(aBlock);
  v29 = v42;
  swift_retain(a1);
  swift_release(v29);
  static DispatchQoS.unspecified.getter(v30);
  aBlock[0] = _swiftEmptyArrayStorage;
  v31 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v33 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
  v34 = v32;
  v35 = v37;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v34, v33, v37, v31);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v17, v8, v4, v28);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v40 + 8))(v4, v35);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v8, v39);
  return ((uint64_t (*)(char *, uint64_t))v27)(v17, v9);
}

void sub_10015E504(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*a2 != -1)
    swift_once(a2, a4);
  v6 = type metadata accessor for Logger(0);
  sub_10000D744(v6, a3);
  swift_retain(a1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v15 = v11;
    *(_DWORD *)v10 = 136315138;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain(v13);
    v14 = sub_100172BEC(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v10 + 4, v10 + 12);
    swift_release(a1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Done with '%s'", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release(a1);
  }
}

uint64_t sub_10015E6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30[3];

  v29 = a2;
  v27 = a1;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322D28);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v30[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_1003229F8);
  v17 = sub_1000084FC(&qword_100322D30, &qword_1003229F8, (uint64_t)&protocol conformance descriptor for Publishers.Merge3<A, B, C>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v30, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v28;
  swift_weakInit(v19 + 16, v28);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F4530, 40, 7);
  v22 = v29;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = a3;
  v23 = sub_1000084FC(&qword_100322D38, &qword_100322D28, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v24 = swift_retain(a3);
  v25 = Publisher<>.sink(receiveValue:)(sub_1001759E0, v21, v8, v23, v24);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v30, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v30);
  return swift_release(v25);
}

uint64_t sub_10015E934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30[3];

  v29 = a2;
  v27 = a1;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322D10);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v30[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_1003229E8);
  v17 = sub_1000084FC(&qword_100322D18, &qword_1003229E8, (uint64_t)&protocol conformance descriptor for Publishers.Merge6<A, B, C, D, E, F>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v30, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v28;
  swift_weakInit(v19 + 16, v28);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F4508, 40, 7);
  v22 = v29;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = a3;
  v23 = sub_1000084FC(&qword_100322D20, &qword_100322D10, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v24 = swift_retain(a3);
  v25 = Publisher<>.sink(receiveValue:)(sub_100175C48, v21, v8, v23, v24);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v30, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v30);
  return swift_release(v25);
}

uint64_t sub_10015EBB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30[3];

  v29 = a2;
  v27 = a1;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322CF8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v30[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_1003229E0);
  v17 = sub_1000084FC(&qword_100322D00, &qword_1003229E0, (uint64_t)&protocol conformance descriptor for Publishers.Merge5<A, B, C, D, E>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v30, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v28;
  swift_weakInit(v19 + 16, v28);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F44E0, 40, 7);
  v22 = v29;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = a3;
  v23 = sub_1000084FC(&qword_100322D08, &qword_100322CF8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v24 = swift_retain(a3);
  v25 = Publisher<>.sink(receiveValue:)(sub_100175C48, v21, v8, v23, v24);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v30, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v30);
  return swift_release(v25);
}

uint64_t sub_10015EE3C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8((uint64_t *)&unk_100326490);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_10032B0E0);
  v17 = sub_1000084FC((unint64_t *)&qword_1003264A0, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F44B8, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC((unint64_t *)&unk_1003264B0, (uint64_t *)&unk_100326490, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175C48, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_10015F0C8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322CD8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_100322CE0);
  v17 = sub_1000084FC(&qword_100322CE8, &qword_100322CE0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F4490, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322CF0, &qword_100322CD8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175980, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_10015F354(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322CB8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_100319D80);
  v17 = sub_1000084FC(&qword_100322CC0, &qword_100319D80, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F4468, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322CC8, &qword_100322CB8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175970, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_10015F5E0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322C98);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_100322CA0);
  v17 = sub_1000084FC(&qword_100322CA8, &qword_100322CA0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F4440, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322CB0, &qword_100322C98, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175960, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_10015F86C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322C60);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_100322C68);
  v17 = sub_1000084FC(&qword_100322C70, &qword_100322C68, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F43F0, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322C78, &qword_100322C60, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_1001758D0, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_10015FAF8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8((uint64_t *)&unk_10032B130);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_100322C50);
  v17 = sub_1000084FC((unint64_t *)&unk_10032B140, &qword_100322C50, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F43A0, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322C58, (uint64_t *)&unk_10032B130, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_1001758A8, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_10015FD84(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322C38);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_10031EF40);
  v17 = sub_1000084FC(&qword_100322C40, &qword_10031EF40, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F4378, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322C48, &qword_100322C38, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175C40, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_100160010(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322C18);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_10031EF48);
  v17 = sub_1000084FC(&qword_100322C20, &qword_10031EF48, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F4328, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322C28, &qword_100322C18, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175754, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_10016029C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322C00);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_10031EF50);
  v17 = sub_1000084FC(&qword_100322C08, &qword_10031EF50, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F4300, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322C10, &qword_100322C00, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175C40, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_100160528(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322BE8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_10031EF70);
  v17 = sub_1000084FC(&qword_100322BF0, &qword_10031EF70, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F42D8, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322BF8, &qword_100322BE8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_1001756D0, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_1001607B4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322BD0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_10031EF60);
  v17 = sub_1000084FC(&qword_100322BD8, &qword_10031EF60, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F4260, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322BE0, &qword_100322BD0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175744, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_100160A40(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322BB8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_10031EF68);
  v17 = sub_1000084FC(&qword_100322BC0, &qword_10031EF68, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F41C0, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322BC8, &qword_100322BB8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_1001757B4, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_100160CCC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8((uint64_t *)&unk_10032B190);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_10031EF78);
  v17 = sub_1000084FC(&qword_10032B1A0, &qword_10031EF78, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F4198, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322BB0, (uint64_t *)&unk_10032B190, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_1001757A4, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_100160F58(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322B98);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_100317E68);
  v17 = sub_1000084FC(&qword_100322BA0, &qword_100317E68, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F4170, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322BA8, &qword_100322B98, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175784, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_1001611E4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322B88);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_10031B330);
  v17 = sub_1000084FC(&qword_100322B90, &qword_10031B330, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F4148, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC((unint64_t *)&unk_10032B250, &qword_100322B88, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175774, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_100161470(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322B70);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(qword_1003180E0);
  v17 = sub_1000084FC(&qword_100322B78, qword_1003180E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F4120, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322B80, &qword_100322B70, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175754, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_1001616FC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8((uint64_t *)&unk_10032B150);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_10031EF80);
  v17 = sub_1000084FC((unint64_t *)&unk_10032B160, &qword_10031EF80, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F40F8, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322B68, (uint64_t *)&unk_10032B150, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175744, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_100161988(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322B50);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_1003216E8);
  v17 = sub_1000084FC(&qword_100322B58, &qword_1003216E8, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F40D0, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322B60, &qword_100322B50, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175734, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_100161C14(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322B38);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_1003216F0);
  v17 = sub_1000084FC(&qword_100322B40, &qword_1003216F0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F40A8, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322B48, &qword_100322B38, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175724, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_100161EA0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322B20);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_1003216F8);
  v17 = sub_1000084FC(&qword_100322B28, &qword_1003216F8, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F4080, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322B30, &qword_100322B20, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175714, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_10016212C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322B08);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_100321700);
  v17 = sub_1000084FC(&qword_100322B10, &qword_100321700, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F4058, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322B18, &qword_100322B08, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175C3C, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_1001623B8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322AF0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_100321708);
  v17 = sub_1000084FC(&qword_100322AF8, &qword_100321708, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F4030, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322B00, &qword_100322AF0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175C3C, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_100162644(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322AD8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_100321710);
  v17 = sub_1000084FC(&qword_100322AE0, &qword_100321710, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F4008, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322AE8, &qword_100322AD8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175C3C, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_1001628D0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322AC0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_100321718);
  v17 = sub_1000084FC(&qword_100322AC8, &qword_100321718, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F3FE0, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322AD0, &qword_100322AC0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_1001756F4, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_100162B5C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322AA8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_100321720);
  v17 = sub_1000084FC(&qword_100322AB0, &qword_100321720, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F3FB8, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322AB8, &qword_100322AA8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_1001756F4, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_100162DE8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8((uint64_t *)&unk_10032B170);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_10031D150);
  v17 = sub_1000084FC((unint64_t *)&unk_10032B180, &qword_10031D150, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F3F90, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_1003205E0, (uint64_t *)&unk_10032B170, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_1001756E4, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_100163074(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322A88);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_100322A90);
  v17 = sub_1000084FC(&qword_100322A98, &qword_100322A90, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F3F68, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322AA0, &qword_100322A88, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175C44, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_100163300(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322A68);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8((uint64_t *)&unk_10032B0F0);
  v17 = sub_1000084FC(&qword_100322A70, (uint64_t *)&unk_10032B0F0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F3F40, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322A78, &qword_100322A68, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_1001756D0, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_10016358C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8((uint64_t *)&unk_10032B110);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_100320D28);
  v17 = sub_1000084FC((unint64_t *)&unk_10032B120, &qword_100320D28, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F3F18, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322A60, (uint64_t *)&unk_10032B110, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_100175C40, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_100163818(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322A40);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_100321AD8);
  v17 = sub_1000084FC(&qword_100322A48, &qword_100321AD8, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F3EF0, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322A50, &qword_100322A40, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_1001756BC, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_100163AA4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];

  v30 = a2;
  v31 = a3;
  v4 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322A28);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a1;
  v13 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v32[0] = (id)static OS_dispatch_queue.main.getter(v14);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v16 = sub_100003DB8(&qword_10031EF88);
  v17 = sub_1000084FC(&qword_100322A30, &qword_10031EF88, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v18 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v32, v7, v16, v13, v17, v18);
  sub_100007FF0((uint64_t)v7, &qword_100329AF0);

  v19 = swift_allocObject(&unk_1002F3E00, 24, 7);
  v20 = v29;
  swift_weakInit(v19 + 16, v29);
  v21 = (_QWORD *)swift_allocObject(&unk_1002F3EC8, 40, 7);
  v22 = v30;
  v23 = v31;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000084FC(&qword_100322A38, &qword_100322A28, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  v25 = swift_retain(v23);
  v26 = Publisher<>.sink(receiveValue:)(sub_1001756AC, v21, v8, v24, v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v19);
  swift_beginAccess(v20 + 320, v32, 33, 0);
  AnyCancellable.store(in:)(v20 + 320);
  swift_endAccess(v32);
  return swift_release(v26);
}

uint64_t sub_100163D30(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    a3(result, a1);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_100163D9C@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  BOOL v19;
  uint64_t v20;
  BOOL *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BYTE v27[24];

  v4 = sub_100003DB8(&qword_1003180C0);
  __chkstk_darwin(v4, v5);
  v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for ConnectionClosed(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = &v27[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(v13 + 112) + OBJC_IVAR____TtC8SOSBuddy21ConnectionClosedModel__connectionClosed;
  swift_beginAccess(v14, v27, 0, 0);
  sub_10000B234(v14, (uint64_t)v7, &qword_1003180C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_100007FF0((uint64_t)v7, &qword_1003180C0);
    v15 = *(_QWORD *)(v13 + 32);
    if (!*(_QWORD *)(v15 + 64))
      goto LABEL_13;
    v16 = *(unsigned __int8 *)(v15 + 56);
    if (v16 != 5)
    {
      *a2 = v16;
      v20 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
      v21 = a2;
      v22 = v20;
      v23 = 2;
      goto LABEL_17;
    }
    if ((unint64_t)*(unsigned __int8 *)(v15 + 73) << 8 == 512)
    {
      v17 = *(_WORD *)(v15 + 120);
      v19 = (v17 & 1) == 0 || v17 == 2;
      *a2 = v19;
      v20 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
      v21 = a2;
      v22 = v20;
      v23 = 3;
    }
    else
    {
LABEL_13:
      v24 = sub_10016BB74();
      if (v24 == 2)
      {
        v20 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
        v21 = a2;
        v22 = v20;
        v23 = 4;
      }
      else
      {
        *a2 = v24;
        v20 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
        v21 = a2;
        v22 = v20;
        v23 = 0;
      }
    }
  }
  else
  {
    sub_100025B88((uint64_t)v7, (uint64_t)v12);
    sub_100025B88((uint64_t)v12, (uint64_t)a2);
    v20 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    v21 = a2;
    v22 = v20;
    v23 = 1;
  }
LABEL_17:
  swift_storeEnumTagMultiPayload(v21, v22, v23);
  return (*(uint64_t (**)(BOOL *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a2, 0, 1, v20);
}

uint64_t sub_100163FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  uint64_t v20;
  Swift::Int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v32;
  BOOL v34;
  uint64_t v35;
  BOOL *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  Swift::Int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  Swift::Int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _BYTE v51[24];

  v6 = sub_100003DB8(&qword_100316B68);
  __chkstk_darwin(v6, v7);
  v9 = &v51[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = sub_100003DB8(&qword_1003180C0);
  __chkstk_darwin(v10, v11);
  v13 = &v51[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v14 = type metadata accessor for ConnectionClosed(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = &v51[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 40) != 1)
  {
    sub_100163D9C(a2, a3);
    return swift_release(a2);
  }
  v19 = *(_QWORD **)(a1 + 48);
  v20 = v19[14] + OBJC_IVAR____TtC8SOSBuddy21ConnectionClosedModel__connectionClosed;
  swift_beginAccess(v20, v51, 0, 0);
  sub_10000B234(v20, (uint64_t)v13, &qword_1003180C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_100007FF0((uint64_t)v13, &qword_1003180C0);
    goto LABEL_7;
  }
  sub_100025B88((uint64_t)v13, (uint64_t)v18);
  v22 = sub_1002096C4((uint64_t)&off_1002E1C30);
  v23 = *(_QWORD *)&v18[*(int *)(v14 + 24)];
  swift_bridgeObjectRetain(v23);
  v24 = sub_100164494(v22, v23);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v22);
  if ((v24 & 1) == 0)
  {
    if (!*v18)
    {
      v45 = sub_1002096C4((uint64_t)&off_1002E1C80);
      v46 = sub_1001BF5E8(v23, v45);
      swift_bridgeObjectRelease(v45);
      if ((v46 & 1) == 0)
        goto LABEL_6;
      v47 = v19[9];
      swift_retain(v47);
      sub_1001BF244((uint64_t)v9);
      swift_release(v47);
      v48 = type metadata accessor for TransmissionProgress(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 48))(v9, 1, v48) == 1)
      {
        sub_100007FF0((uint64_t)v9, &qword_100316B68);
        goto LABEL_6;
      }
      v49 = v9[*(int *)(v48 + 32)];
      sub_10000AFFC((uint64_t)v9, type metadata accessor for TransmissionProgress);
      if (v49 != 3)
        goto LABEL_6;
    }
    sub_100025B88((uint64_t)v18, (uint64_t)a3);
    v35 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    v36 = a3;
    v37 = v35;
    v38 = 1;
LABEL_41:
    swift_storeEnumTagMultiPayload(v36, v37, v38);
    (*(void (**)(BOOL *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(a3, 0, 1, v35);
    return swift_release(a2);
  }
LABEL_6:
  sub_10000AFFC((uint64_t)v18, type metadata accessor for ConnectionClosed);
LABEL_7:
  v25 = v19[4];
  if (!*(_QWORD *)(v25 + 64))
  {
    v39 = sub_10016BB74();
    if (v39 == 2)
    {
      v40 = sub_1002096C4((uint64_t)&off_1002E1C58);
LABEL_24:
      swift_bridgeObjectRelease(v40);
      goto LABEL_25;
    }
LABEL_35:
    *a3 = v39;
    v35 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    v36 = a3;
    v37 = v35;
    v38 = 0;
    goto LABEL_41;
  }
  v26 = *(_QWORD *)(v25 + 88);
  v27 = *(_WORD *)(v25 + 120);
  v28 = *(_QWORD *)(v25 + 72);
  v29 = *(_QWORD *)(v25 + 56);
  v30 = v29;
  if (v29 != 5 && v29 != 0)
  {
    v32 = *(unsigned __int8 *)(a1 + 337);
    if (v32 == 5 || v32 != v30)
    {
      *a3 = v30;
      v35 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
      v36 = a3;
      v37 = v35;
      v38 = 2;
      goto LABEL_41;
    }
  }
  if ((v28 & 0xFF00) == 0x200)
  {
    v34 = (v27 & 1) == 0 || v27 == 2;
    *a3 = v34;
    v35 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    v36 = a3;
    v37 = v35;
    v38 = 3;
    goto LABEL_41;
  }
  v39 = sub_10016BB74();
  if (v39 != 2)
    goto LABEL_35;
  swift_bridgeObjectRetain(v26);
  v40 = sub_1002096C4((uint64_t)&off_1002E1C58);
  if (!v26)
    goto LABEL_24;
  v44 = sub_1001BF5E8(v26, v40);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v40);
  if ((v44 & 1) != 0)
  {
    v35 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    v36 = a3;
    v37 = v35;
    v38 = 5;
    goto LABEL_41;
  }
LABEL_25:
  v41 = v19[4];
  if (*(_QWORD *)(v41 + 64))
  {
    v42 = *(_QWORD *)(v41 + 88);
    if (*(_QWORD *)(v42 + 16))
    {
      if (!sub_100067058(3u, v42))
      {
        v35 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
        v36 = a3;
        v37 = v35;
        v38 = 4;
        goto LABEL_41;
      }
    }
  }
  v43 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  (*(void (**)(BOOL *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(a3, 1, 1, v43);
  return swift_release(a2);
}

Swift::Int sub_100164494(Swift::Int result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  Swift::Int v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25[9];

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return 1;
  v4 = 0;
  if (v2 >= v3)
    v5 = result;
  else
    v5 = a2;
  if (v2 >= v3)
    v6 = a2;
  else
    v6 = result;
  v7 = v5 + 56;
  v8 = -1 << *(_BYTE *)(v5 + 32);
  if (-v8 < 64)
    v9 = ~(-1 << -(char)v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 56);
  v24 = (unint64_t)(63 - v8) >> 6;
  v11 = v6 + 56;
  while (1)
  {
    while (1)
    {
      v12 = v4;
      if (!v10)
        break;
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v4 << 6);
      if (*(_QWORD *)(v6 + 16))
      {
LABEL_29:
        v18 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v14);
        Hasher.init(_seed:)(v25, *(_QWORD *)(v6 + 40));
        Hasher._combine(_:)(v18);
        result = Hasher._finalize()();
        v19 = -1 << *(_BYTE *)(v6 + 32);
        v20 = result & ~v19;
        if (((*(_QWORD *)(v11 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
        {
          v21 = *(_QWORD *)(v6 + 48);
          if (*(unsigned __int8 *)(v21 + v20) == (_DWORD)v18)
          {
LABEL_34:
            swift_bridgeObjectRetain(v5);
            v23 = 0;
LABEL_35:
            sub_1000647F4(v5);
            return v23;
          }
          v22 = ~v19;
          while (1)
          {
            v20 = (v20 + 1) & v22;
            if (((*(_QWORD *)(v11 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
              break;
            if (*(unsigned __int8 *)(v21 + v20) == (_DWORD)v18)
              goto LABEL_34;
          }
        }
      }
    }
    v15 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v15 >= v24)
      goto LABEL_38;
    v16 = *(_QWORD *)(v7 + 8 * v15);
    ++v4;
    if (!v16)
    {
      v4 = v12 + 2;
      if (v12 + 2 >= v24)
        goto LABEL_38;
      v16 = *(_QWORD *)(v7 + 8 * v4);
      if (!v16)
      {
        v4 = v12 + 3;
        if (v12 + 3 >= v24)
          goto LABEL_38;
        v16 = *(_QWORD *)(v7 + 8 * v4);
        if (!v16)
        {
          v17 = v12 + 4;
          if (v12 + 4 >= v24)
          {
LABEL_38:
            swift_bridgeObjectRetain(v5);
            v23 = 1;
            goto LABEL_35;
          }
          v16 = *(_QWORD *)(v7 + 8 * v17);
          v4 = v12 + 4;
          if (!v16)
            break;
        }
      }
    }
LABEL_28:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v4 << 6);
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_29;
  }
  while (1)
  {
    v4 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v4 >= v24)
      goto LABEL_38;
    v16 = *(_QWORD *)(v7 + 8 * v4);
    ++v17;
    if (v16)
      goto LABEL_28;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1001646E4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  _QWORD *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  void *v121;
  _QWORD *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  void *v217;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;

  v1 = v0;
  v2 = sub_100003DB8(&qword_1003229E0);
  v225 = *(_QWORD *)(v2 - 8);
  v226 = v2;
  __chkstk_darwin(v2, v3);
  v224 = (char *)&v219 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003DB8(&qword_1003229E8);
  v222 = *(_QWORD *)(v5 - 8);
  v223 = v5;
  __chkstk_darwin(v5, v6);
  v221 = (char *)&v219 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_1003229F0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v219 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v230 = sub_100003DB8(&qword_1003229F8);
  v228 = *(_QWORD *)(v230 - 8);
  __chkstk_darwin(v230, v13);
  v227 = (char *)&v219 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v229 = v0[3];
  v15 = *(_QWORD *)(v229 + 40);
  v236 = v15;
  swift_retain(v15);
  v16 = sub_100003DB8(&qword_100320D28);
  v17 = sub_1000084FC((unint64_t *)&unk_10032B120, &qword_100320D28, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  Publisher.map<A>(_:)(ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter, 0, v16, (char *)&type metadata for () + 8, v17);
  swift_release(v15);
  v18 = sub_1000084FC(&qword_100322A00, &qword_1003229F0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v19 = Publisher.eraseToAnyPublisher()(v8, v18);
  v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v12, v8);
  v220 = v1[4];
  v21 = *(_QWORD *)(v220 + 32);
  v235 = v21;
  v236 = v19;
  swift_retain(v21);
  Publisher.map<A>(_:)(ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter, 0, v16, (char *)&type metadata for () + 8, v17);
  swift_release(v21);
  v22 = Publisher.eraseToAnyPublisher()(v8, v18);
  v20(v12, v8);
  v23 = (_QWORD *)v1[6];
  v234 = *(_QWORD *)(v23[4] + 24);
  v235 = v22;
  v24 = sub_100003DB8(&qword_10032B0E0);
  v25 = sub_1000084FC((unint64_t *)&qword_1003264A0, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v234 = Publisher.eraseToAnyPublisher()(v24, v25);
  v26 = sub_100003DB8(&qword_100322A08);
  v27 = sub_1000084FC(&qword_100322A10, &qword_100322A08, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v28 = (uint64_t)v227;
  Publishers.Merge3.init(_:_:_:)(&v236, &v235, &v234, v26, v26, v26, v27, v27, v27);
  sub_10015E6B0(v28, (uint64_t)sub_100165904, 0);
  (*(void (**)(uint64_t, uint64_t))(v228 + 8))(v28, v230);
  v236 = *(_QWORD *)(v220 + 24);
  v29 = Publisher.eraseToAnyPublisher()(v24, v25);
  v235 = *(_QWORD *)(v23[14] + 24);
  v236 = v29;
  v30 = Publisher.eraseToAnyPublisher()(v24, v25);
  v31 = v1[7];
  v234 = *(_QWORD *)(v31 + 24);
  v235 = v30;
  v32 = Publisher.eraseToAnyPublisher()(v24, v25);
  v33 = *(_QWORD *)(v1[11] + 24);
  v230 = v1[11];
  v34 = v230;
  v233 = v33;
  v234 = v32;
  v35 = Publisher.eraseToAnyPublisher()(v24, v25);
  v232 = *(_QWORD *)(v23[4] + 24);
  v233 = v35;
  v36 = Publisher.eraseToAnyPublisher()(v24, v25);
  v227 = (char *)v1[10];
  v231 = *((_QWORD *)v227 + 3);
  v232 = v36;
  v231 = Publisher.eraseToAnyPublisher()(v24, v25);
  v37 = (uint64_t)v221;
  Publishers.Merge6.init(_:_:_:_:_:_:)(&v236, &v235, &v234, &v233, &v232, &v231, v26, v26, v26, v26, v26, v26, v27, v27, v27, v27, v27, v27);
  sub_10015E934(v37, (uint64_t)sub_100165AF0, 0);
  (*(void (**)(uint64_t, uint64_t))(v222 + 8))(v37, v223);
  v236 = *(_QWORD *)(v23[14] + 24);
  v38 = Publisher.eraseToAnyPublisher()(v24, v25);
  v235 = *(_QWORD *)(v31 + 24);
  v236 = v38;
  v39 = Publisher.eraseToAnyPublisher()(v24, v25);
  v234 = *(_QWORD *)(v34 + 24);
  v235 = v39;
  v40 = Publisher.eraseToAnyPublisher()(v24, v25);
  v41 = (_QWORD *)v1[12];
  v233 = v41[3];
  v234 = v40;
  v42 = Publisher.eraseToAnyPublisher()(v24, v25);
  v43 = (_QWORD *)v1[15];
  v232 = v43[3];
  v233 = v42;
  v232 = Publisher.eraseToAnyPublisher()(v24, v25);
  v44 = (uint64_t)v224;
  Publishers.Merge5.init(_:_:_:_:_:)(&v236, &v235, &v234, &v233, &v232, v26, v26, v26, v26, v26, v27, v27, v27, v27, v27);
  sub_10015EBB8(v44, (uint64_t)sub_100165C1C, 0);
  (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v44, v226);
  v45 = v31;
  v228 = v31;
  v46 = *(_QWORD *)(v31 + 32);
  swift_retain(v46);
  sub_10015EE3C(v47, (uint64_t)sub_100165C3C, 0);
  swift_release(v46);
  v48 = *(_QWORD *)(v45 + 40);
  swift_retain(v48);
  sub_10015F0C8(v49, (uint64_t)sub_100165DCC, 0);
  swift_release(v48);
  v50 = v230;
  v51 = *(_QWORD *)(v230 + 32);
  swift_retain(v51);
  sub_10015EE3C(v52, (uint64_t)sub_100165F38, 0);
  swift_release(v51);
  v53 = *(_QWORD *)(v50 + 40);
  swift_retain(v53);
  sub_10015F354(v54, (uint64_t)sub_100165F98, 0);
  swift_release(v53);
  v55 = v41[4];
  swift_retain(v55);
  sub_10015EE3C(v56, (uint64_t)sub_1001660F0, 0);
  swift_release(v55);
  v57 = v41[5];
  swift_retain(v57);
  sub_10015F5E0(v58, (uint64_t)sub_1001662A4, 0);
  swift_release(v57);
  v59 = *(_QWORD *)(v23[15] + 48);
  swift_retain(v59);
  sub_10015F86C(v60, (uint64_t)sub_1001663AC, 0);
  swift_release(v59);
  v61 = *(void **)(v23[14] + 48);
  swift_retain(v61);
  swift_retain(v1);
  sub_10015FAF8(v61, (uint64_t)sub_100175610, (uint64_t)v1);
  swift_release(v61);
  swift_release(v1);
  v62 = *(_QWORD *)(v23[9] + 24);
  swift_retain(v62);
  sub_10015EE3C(v63, (uint64_t)sub_100166D0C, 0);
  swift_release(v62);
  v64 = *(_QWORD *)(v23[13] + 24);
  swift_retain(v64);
  sub_10015EE3C(v65, (uint64_t)sub_100166E18, 0);
  swift_release(v64);
  v66 = v43[3];
  swift_retain(v66);
  sub_10015EE3C(v67, (uint64_t)sub_100166E90, 0);
  swift_release(v66);
  v68 = v43[5];
  swift_retain(v68);
  sub_10015EE3C(v69, (uint64_t)sub_100167024, 0);
  swift_release(v68);
  v70 = v43[6];
  swift_retain(v70);
  sub_10015EE3C(v71, (uint64_t)sub_1001670C4, 0);
  swift_release(v70);
  v72 = (_QWORD *)v1[2];
  v73 = v72[2];
  swift_retain(v73);
  sub_10015EE3C(v74, (uint64_t)sub_100167118, 0);
  swift_release(v73);
  v75 = v72[3];
  swift_retain(v75);
  sub_10015EE3C(v76, (uint64_t)sub_100167148, 0);
  swift_release(v75);
  v77 = v72[4];
  swift_retain(v77);
  sub_10015FD84(v78, (uint64_t)sub_10016724C, 0);
  swift_release(v77);
  v79 = v72[5];
  swift_retain(v79);
  sub_10015EE3C(v80, (uint64_t)sub_100167444, 0);
  swift_release(v79);
  v81 = v72[6];
  swift_retain(v1);
  swift_retain(v81);
  sub_100160010(v82, (uint64_t)sub_100175618, (uint64_t)v1);
  swift_release(v81);
  swift_release(v1);
  v83 = v72[7];
  swift_retain(v83);
  sub_10015FD84(v84, (uint64_t)sub_100167BD0, 0);
  swift_release(v83);
  v85 = v72[9];
  swift_retain(v85);
  sub_10015EE3C(v86, (uint64_t)sub_100167FE8, 0);
  swift_release(v85);
  v87 = v72[10];
  swift_retain(v87);
  sub_10015EE3C(v88, (uint64_t)sub_100168008, 0);
  swift_release(v87);
  v89 = v72[11];
  swift_retain(v89);
  sub_10016029C(v90, (uint64_t)sub_10016800C, 0);
  swift_release(v89);
  v91 = v72[12];
  swift_retain(v91);
  sub_10015EE3C(v92, (uint64_t)sub_100168014, 0);
  swift_release(v91);
  v93 = v72[17];
  swift_retain(v93);
  sub_100160528(v94, (uint64_t)sub_100168218, 0);
  swift_release(v93);
  v95 = v72[14];
  swift_retain(v95);
  sub_1001607B4(v96, (uint64_t)sub_100168240, 0);
  swift_release(v95);
  v97 = v72[15];
  swift_retain(v97);
  sub_1001607B4(v98, (uint64_t)sub_10016839C, 0);
  swift_release(v97);
  v99 = v72[16];
  swift_retain(v99);
  sub_100160A40(v100, (uint64_t)sub_1001686F4, 0);
  swift_release(v99);
  v101 = v72[18];
  swift_retain(v101);
  sub_100160CCC(v102, (uint64_t)sub_1001687F0, 0);
  swift_release(v101);
  v103 = *((_QWORD *)v227 + 4);
  swift_retain(v103);
  sub_100160F58(v104, (uint64_t)sub_100168874, 0);
  swift_release(v103);
  v105 = v1[36];
  v106 = *(_QWORD *)(v105 + 16);
  swift_retain(v106);
  sub_1001611E4(v107, (uint64_t)sub_100168AC4, 0);
  swift_release(v106);
  v108 = v72[20];
  swift_retain(v108);
  sub_10015EE3C(v109, (uint64_t)sub_100168C4C, 0);
  swift_release(v108);
  v110 = v72[19];
  swift_retain(v110);
  sub_10015EE3C(v111, (uint64_t)sub_100168D28, 0);
  swift_release(v110);
  v112 = v72[8];
  swift_retain(v112);
  sub_10015EE3C(v113, (uint64_t)sub_100168D48, 0);
  swift_release(v112);
  v114 = v72[21];
  swift_retain(v114);
  sub_100161470(v115, (uint64_t)sub_100168D74, 0);
  swift_release(v114);
  v116 = v72[22];
  swift_retain(v116);
  sub_10015EE3C(v117, (uint64_t)sub_100168D78, 0);
  swift_release(v116);
  v118 = v72[23];
  swift_retain(v118);
  sub_1001616FC(v119, (uint64_t)sub_100168DE8, 0);
  swift_release(v118);
  v120 = v72[24];
  swift_retain(v120);
  sub_1001616FC(v121, (uint64_t)sub_100168EC8, 0);
  swift_release(v120);
  v122 = (_QWORD *)v1[29];
  v123 = v122[2];
  swift_retain(v123);
  sub_100161988(v124, (uint64_t)sub_100168FA8, 0);
  swift_release(v123);
  v125 = v122[3];
  swift_retain(v125);
  sub_100161C14(v126, (uint64_t)sub_100168FE4, 0);
  swift_release(v125);
  v127 = v122[4];
  swift_retain(v127);
  sub_100161EA0(v128, (uint64_t)sub_100169028, 0);
  swift_release(v127);
  v129 = v122[5];
  swift_retain(v129);
  sub_10016212C(v130, (uint64_t)sub_100169064, 0);
  swift_release(v129);
  v131 = v122[6];
  swift_retain(v131);
  sub_1001623B8(v132, (uint64_t)sub_10016908C, 0);
  swift_release(v131);
  v133 = v122[7];
  swift_retain(v133);
  sub_100162644(v134, (uint64_t)sub_1001690B4, 0);
  swift_release(v133);
  v135 = v122[8];
  swift_retain(v135);
  sub_1001628D0(v136, (uint64_t)sub_1001690DC, 0);
  swift_release(v135);
  v137 = v122[9];
  swift_retain(v137);
  sub_100162B5C(v138, (uint64_t)sub_100169118, 0);
  swift_release(v137);
  v139 = v1[9];
  v140 = *(_QWORD *)(v139 + 24);
  swift_retain(v140);
  sub_10015EE3C(v141, (uint64_t)sub_10016914C, 0);
  swift_release(v140);
  v142 = *(_QWORD *)(v105 + 24);
  swift_retain(v142);
  sub_100161470(v143, (uint64_t)sub_100168D74, 0);
  swift_release(v142);
  v144 = v1[27];
  v145 = v1[28];
  sub_100007BBC(v1 + 24, v144);
  v146 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v145 + 32))(v144, v145);
  sub_100161470(v146, (uint64_t)sub_100168D74, 0);
  swift_release(v146);
  v147 = v1[27];
  v148 = v1[28];
  sub_100007BBC(v1 + 24, v147);
  v149 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v148 + 40))(v147, v148);
  sub_100162DE8(v149, (uint64_t)sub_100169388, 0);
  swift_release(v149);
  v150 = v1[27];
  v151 = v1[28];
  sub_100007BBC(v1 + 24, v150);
  v152 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v151 + 8))(v150, v151);
  sub_10015EE3C(v152, (uint64_t)sub_100175C74, 0);
  swift_release(v152);
  v153 = v1[27];
  v154 = v1[28];
  sub_100007BBC(v1 + 24, v153);
  v155 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v154 + 16))(v153, v154);
  sub_100163074(v155, (uint64_t)sub_1001693AC, 0);
  swift_release(v155);
  v156 = *(_QWORD *)(v23[4] + 48);
  swift_retain(v156);
  sub_100163300(v157, (uint64_t)sub_1001695CC, 0);
  swift_release(v156);
  v158 = *(_QWORD *)(v1[13] + 32);
  swift_retain(v158);
  sub_10015EE3C(v159, (uint64_t)sub_100169804, 0);
  swift_release(v158);
  v160 = v229;
  v161 = *(_QWORD *)(v229 + 40);
  swift_retain(v161);
  sub_10016358C(v162, (uint64_t)sub_1001699CC, 0);
  swift_release(v161);
  v163 = *(_QWORD *)(v23[10] + 24);
  swift_retain(v163);
  sub_10015EE3C(v164, (uint64_t)sub_100169A8C, 0);
  swift_release(v163);
  v165 = *(_QWORD *)(v23[11] + 24);
  swift_retain(v165);
  sub_10015EE3C(v166, (uint64_t)sub_100169ADC, 0);
  swift_release(v165);
  v167 = *(_QWORD *)(v23[3] + 24);
  swift_retain(v167);
  sub_10015EE3C(v168, (uint64_t)sub_100169B30, 0);
  swift_release(v167);
  v169 = *(_QWORD *)(v23[7] + 24);
  swift_retain(v169);
  sub_10015EE3C(v170, (uint64_t)sub_100169B64, 0);
  swift_release(v169);
  v171 = *(_QWORD *)(v23[4] + 48);
  swift_retain(v171);
  sub_100163300(v172, (uint64_t)sub_100169BB4, 0);
  swift_release(v171);
  v173 = *(_QWORD *)(v1[21] + 16);
  swift_retain(v173);
  sub_100163818(v174, (uint64_t)sub_100169C88, 0);
  swift_release(v173);
  v175 = *(_QWORD *)(v23[5] + 24);
  swift_retain(v175);
  sub_10015EE3C(v176, (uint64_t)sub_100169D24, 0);
  swift_release(v175);
  v177 = *(_QWORD *)(v23[3] + 24);
  swift_retain(v177);
  sub_10015EE3C(v178, (uint64_t)sub_100169ED8, 0);
  swift_release(v177);
  v179 = *(_QWORD *)(v23[9] + 24);
  swift_retain(v179);
  sub_10015EE3C(v180, (uint64_t)sub_100169F50, 0);
  swift_release(v179);
  v181 = *(_QWORD *)(v23[12] + 24);
  swift_retain(v181);
  sub_10015EE3C(v182, (uint64_t)sub_10016A004, 0);
  swift_release(v181);
  v183 = *(_QWORD *)(v23[7] + 24);
  swift_retain(v183);
  sub_10015EE3C(v184, (uint64_t)sub_10016A0B8, 0);
  swift_release(v183);
  v185 = *(_QWORD *)(v23[8] + 24);
  swift_retain(v185);
  sub_10015EE3C(v186, (uint64_t)sub_10016A16C, 0);
  swift_release(v185);
  v187 = *(_QWORD *)(v23[10] + 24);
  swift_retain(v187);
  sub_10015EE3C(v188, (uint64_t)sub_10016A220, 0);
  swift_release(v187);
  v189 = *(_QWORD *)(v23[11] + 24);
  swift_retain(v189);
  sub_10015EE3C(v190, (uint64_t)sub_10016A2F4, 0);
  swift_release(v189);
  v191 = *(_QWORD *)(v23[4] + 48);
  swift_retain(v191);
  sub_100163300(v192, (uint64_t)sub_10016A3D0, 0);
  swift_release(v191);
  v193 = v122[2];
  swift_retain(v193);
  sub_100161988(v194, (uint64_t)sub_10016A524, 0);
  swift_release(v193);
  v195 = v122[7];
  swift_retain(v195);
  sub_100162644(v196, (uint64_t)sub_10016A610, 0);
  swift_release(v195);
  v197 = *(_QWORD *)(v228 + 32);
  swift_retain(v197);
  sub_10015EE3C(v198, (uint64_t)sub_10016A6CC, 0);
  swift_release(v197);
  v199 = v122[3];
  swift_retain(v199);
  sub_100161C14(v200, (uint64_t)sub_10016A784, 0);
  swift_release(v199);
  v201 = *(_QWORD *)(v230 + 32);
  swift_retain(v201);
  sub_10015EE3C(v202, (uint64_t)sub_10016A878, 0);
  swift_release(v201);
  v203 = *(_QWORD *)(v139 + 24);
  swift_retain(v203);
  sub_10015EE3C(v204, (uint64_t)sub_10016A930, 0);
  swift_release(v203);
  v205 = *(_QWORD *)(v160 + 48);
  swift_retain(v205);
  sub_10015EE3C(v206, (uint64_t)sub_10016A9E0, 0);
  swift_release(v205);
  v207 = v1[27];
  v208 = v1[28];
  sub_100007BBC(v1 + 24, v207);
  v209 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v208 + 24))(v207, v208);
  sub_100162DE8(v209, (uint64_t)sub_10016AA0C, 0);
  swift_release(v209);
  v210 = v72[25];
  swift_retain(v210);
  sub_100163AA4(v211, (uint64_t)sub_10016AAB4, 0);
  swift_release(v210);
  v212 = v122[9];
  swift_retain(v212);
  sub_100162B5C(v213, (uint64_t)sub_10016AB60, 0);
  swift_release(v212);
  v214 = *(_QWORD *)(v105 + 16);
  swift_retain(v214);
  sub_1001611E4(v215, (uint64_t)sub_10016ABB8, 0);
  swift_release(v214);
  v216 = v122[8];
  swift_retain(v216);
  sub_1001628D0(v217, (uint64_t)sub_10016ADD8, 0);
  return swift_release(v216);
}

void sub_100165904(_QWORD *a1)
{
  uint64_t v2;
  BOOL v3;
  void *v4;
  id v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  int v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1[6] + 32);
  if (!*(_QWORD *)(v2 + 64))
    goto LABEL_6;
  if (!sub_100067058(0, *(_QWORD *)(v2 + 88)))
  {
    if (*(_QWORD *)(v2 + 64))
    {
      v3 = sub_100067058(1u, *(_QWORD *)(v2 + 88));
      goto LABEL_7;
    }
LABEL_6:
    v3 = 0;
    goto LABEL_7;
  }
  v3 = 1;
LABEL_7:
  if ((*(_BYTE *)(a1[3] + 80) & 1) == 0 || (*(_BYTE *)(a1[4] + 42) & 1) == 0)
    v3 = 0;
  v4 = (void *)objc_opt_self(UIApplication);
  v5 = objc_msgSend(v4, "sharedApplication");
  v6 = objc_msgSend(v5, "isIdleTimerDisabled");

  if (v3 != v6)
  {
    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10000D744(v7, (uint64_t)qword_10033FD18);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 67240192;
      v13 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v11 + 4, v11 + 8);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Do not dim screen = %{BOOL,public}d", v11, 8u);
      swift_slowDealloc(v11, -1, -1);
    }

    v12 = objc_msgSend(v4, "sharedApplication");
    objc_msgSend(v12, "setIdleTimerDisabled:", v3);

  }
}

uint64_t sub_100165AF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[24];
  _BYTE v15[24];

  v2 = sub_100003DB8(&qword_100316AD8);
  v4 = __chkstk_darwin(v2, v3);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4, v7);
  v9 = &v14[-v8];
  v10 = *(_QWORD *)(a1 + 40);
  swift_retain(a1);
  sub_100163FD4(v11, a1, v9);
  v12 = v10 + OBJC_IVAR____TtC8SOSBuddy21BannerAppearanceModel_bannerMode;
  swift_beginAccess(v10 + OBJC_IVAR____TtC8SOSBuddy21BannerAppearanceModel_bannerMode, v15, 0, 0);
  sub_10000B234(v12, (uint64_t)v6, &qword_100316AD8);
  sub_100229AE0((uint64_t)v9);
  swift_beginAccess(v12, v14, 33, 0);
  sub_100175998((uint64_t)v9, v12, &qword_100316AD8);
  swift_endAccess(v14);
  sub_100229CFC((uint64_t)v6);
  sub_100007FF0((uint64_t)v9, &qword_100316AD8);
  return sub_100007FF0((uint64_t)v6, &qword_100316AD8);
}

uint64_t sub_100165C1C()
{
  return sub_10016B1B8();
}

uint64_t sub_100165C3C(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[3];

  v1 = *(_QWORD *)(*(_QWORD *)(result + 56) + 88);
  if (v1)
  {
    v2 = (_QWORD *)result;
    v3 = *(_QWORD *)(*(_QWORD *)(result + 16) + 104);
    v13[0] = *(_QWORD *)(*(_QWORD *)(result + 56) + 88);
    swift_retain(v1);
    swift_retain(v3);
    PassthroughSubject.send(_:)(v13);
    swift_release(v3);
    swift_beginAccess(v1 + 48, v13, 0, 0);
    v4 = *(_QWORD *)(v1 + 144);
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      if (*(_BYTE *)(v5 + v4 + 31) != 3)
        return swift_release(v1);
      v2 = (_QWORD *)v2[12];
      if (qword_100315828 == -1)
      {
LABEL_5:
        v6 = type metadata accessor for Logger(0);
        v7 = sub_10000D744(v6, (uint64_t)qword_10033FD30);
        v8 = Logger.logObject.getter(v7);
        v9 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v8, v9))
        {
          v10 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v10 = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, v9, "cancelAllAlerts", v10, 2u);
          swift_slowDealloc(v10, -1, -1);
        }

        v11 = v2[7];
        if (v11)
        {
          v12 = v2[6];
          swift_bridgeObjectRetain(v2[7]);
          sub_100186480(v12, v11);
          swift_release(v1);
          return swift_bridgeObjectRelease(v11);
        }
        return swift_release(v1);
      }
    }
    else
    {
      __break(1u);
    }
    swift_once(&qword_100315828, sub_1000D95FC);
    goto LABEL_5;
  }
  return result;
}

void sub_100165DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;

  v3 = type metadata accessor for Locale(0);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = __chkstk_darwin(v3, v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)a2;
  v10 = *(unsigned __int8 *)(a2 + 8);
  v11 = *(unsigned __int8 *)(a2 + 9);
  v12 = *(uint64_t **)(a2 + 16);
  static Locale.autoupdatingCurrent.getter(v6);
  if (v11)
    v13 = 256;
  else
    v13 = 0;
  sub_10013FA74(v9, v13 | v10, v12, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10000D744(v14, (uint64_t)qword_10033FD18);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Forwarded emergency start message request to messagesAgent", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

}

uint64_t sub_100165F38(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 88) + 104);
  if (v1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 16) + 104);
    v3 = *(_QWORD *)(*(_QWORD *)(result + 88) + 104);
    swift_retain(v1);
    swift_retain(v2);
    PassthroughSubject.send(_:)(&v3);
    swift_release(v1);
    return swift_release(v2);
  }
  return result;
}

void sub_100165F98(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)();
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;

  v3 = type metadata accessor for Locale(0);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = __chkstk_darwin(v3, v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a2;
  v10 = a2[1];
  v11 = (void (*)())a2[2];
  static Locale.autoupdatingCurrent.getter(v6);
  sub_1001422BC(v9, v10, v11, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10000D744(v12, (uint64_t)qword_10033FD18);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Forwarded roadside assistance start message request to messagesAgent", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

}

void sub_1001660F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _BOOL8 v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "TransitionAlert: emergency requested", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32);
  if (*(_QWORD *)(v8 + 64) && (v7 = sub_100067058(0, *(_QWORD *)(v8 + 80))))
  {
    byte_100322668 = 2;
    sub_1002167F8(2, 0x80u, (uint64_t)sub_100166294, 0);
  }
  else
  {
    v9 = Logger.logObject.getter(v7);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "TransitionAlert - Stewie emergency is not allowed, placing a call", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    sub_1001EE234((uint64_t)sub_1001662A0, 0);
  }
}

void sub_100166294(uint64_t a1)
{
  sub_100167EA0(a1, "switchFromEmergencyToRoadside, success: %{BOOL,public}d");
}

void sub_1001662A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  v2 = *(_QWORD *)a2;
  v3 = *(_BYTE *)(a2 + 8);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000D744(v4, (uint64_t)qword_10033FD18);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "TransitionAlert: roadside requested", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  byte_100322668 = 2;
  sub_1002167F8(v2, v3, (uint64_t)sub_100166294, 0);
}

uint64_t sub_1001663AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  _BYTE v10[8];

  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10000D744(v3, (uint64_t)qword_10033FD48);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "targetTracksUpdateRequired", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  sub_1001758DC(a2, (uint64_t)v10);
  v8 = swift_allocObject(&unk_1002F4418, 24, 7);
  sub_100175918((uint64_t)v10, v8 + 16);
  sub_1002176B8((uint64_t)sub_100175954, v8);
  return swift_release(v8);
}

uint64_t sub_1001664DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = sub_100003DB8(&qword_100322C80);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315848 != -1)
    swift_once(&qword_100315848, sub_1000D9674);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000D744(v6, (uint64_t)qword_10033FD90);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Service plot received", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  if (a1)
  {
    sub_1000F968C((uint64_t)v5);
    v11 = type metadata accessor for TargetTracks(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v5, 0, 1, v11);
  }
  else
  {
    v12 = type metadata accessor for TargetTracks(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v5, 1, 1, v12);
  }
  sub_1001BFFDC((uint64_t)v5);
  return sub_100007FF0((uint64_t)v5, &qword_100322C80);
}

uint64_t sub_100166664(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  __n128 v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  void *v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v55[2];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD aBlock[5];
  uint64_t v61;

  v55[1] = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v58 = *(_QWORD *)(v5 - 8);
  v59 = v5;
  __chkstk_darwin(v5, v6);
  v8 = (char *)v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v56 = *(_QWORD *)(v9 - 8);
  v57 = v9;
  __chkstk_darwin(v9, v10);
  v12 = (char *)v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchTime(0);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = __chkstk_darwin(v13, v15);
  v18 = (char *)v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  v21 = (char *)v55 - v20;
  v22 = sub_100003DB8(&qword_100316B68);
  __chkstk_darwin(v22, v23);
  v25 = (char *)v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)&a2[*(int *)(type metadata accessor for ConnectionClosed(0) + 24)];
  if (sub_100067058(0, v26))
  {
    if ((*(_BYTE *)(a1[3] + 80) & 1) != 0 && !*a2 && (*(_BYTE *)(a1[7] + 80) & 1) != 0)
    {
      v27 = *(_QWORD *)(a1[2] + 72);
LABEL_27:
      swift_retain(v27);
      v52 = sub_100003DB8(&qword_10032B0E0);
      v53 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v52, v53);
      goto LABEL_28;
    }
  }
  else
  {
    if (!sub_100067058(1u, v26))
    {
      if (sub_100067058(3u, v26))
      {
        v29 = a1[15];
        v30 = *(unsigned __int16 *)(v29 + 56);
        if ((unsigned __int16)(v30 + 512) < 0x8201u)
        {
          v31 = sub_100003DB8(&qword_10032B0E0);
          v32 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
          Subject<>.send()(v31, v32);
        }
        *(_WORD *)(v29 + 56) = -32767;
        sub_1002361A8(v30);
        return sub_10016B1B8();
      }
      if (!sub_100067058(4u, v26) || (*(_BYTE *)(a1[3] + 80) & 1) == 0)
        return sub_10016B1B8();
      v33 = *(_QWORD *)(a1[6] + 72);
      swift_retain(v33);
      sub_1001BF244((uint64_t)v25);
      swift_release(v33);
      v34 = type metadata accessor for TransmissionProgress(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v25, 1, v34) == 1)
      {
        sub_100007FF0((uint64_t)v25, &qword_100316B68);
      }
      else
      {
        v35 = *(_QWORD *)&v25[*(int *)(v34 + 28)];
        sub_10000AFFC((uint64_t)v25, type metadata accessor for TransmissionProgress);
        if (v35 == 100)
        {
          if (qword_100315820 != -1)
            swift_once(&qword_100315820, sub_1000D95E4);
          v36 = type metadata accessor for Logger(0);
          v37 = sub_10000D744(v36, (uint64_t)qword_10033FD18);
          v38 = Logger.logObject.getter(v37);
          v39 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v38, v39))
          {
            v40 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v40 = 0;
            _os_log_impl((void *)&_mh_execute_header, v38, v39, "Delay transition to FindMy by 2 seconds", v40, 2u);
            swift_slowDealloc(v40, -1, -1);
          }

          sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
          v55[0] = static OS_dispatch_queue.main.getter(v41);
          static DispatchTime.now()(v55[0]);
          + infix(_:_:)(v18, 2.0);
          v42 = *(void (**)(char *, uint64_t))(v14 + 8);
          v42(v18, v13);
          v43 = swift_allocObject(&unk_1002F3E00, 24, 7);
          swift_weakInit(v43 + 16);
          aBlock[4] = sub_1001758C4;
          v61 = v43;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_1001BAACC;
          aBlock[3] = &unk_1002F43B8;
          v44 = _Block_copy(aBlock);
          swift_release(v61);
          static DispatchQoS.unspecified.getter(v45);
          aBlock[0] = _swiftEmptyArrayStorage;
          v46 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v47 = sub_100003DB8((uint64_t *)&unk_1003178D0);
          v48 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
          v49 = v47;
          v50 = v59;
          dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v49, v48, v59, v46);
          v51 = (void *)v55[0];
          OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v21, v12, v8, v44);
          _Block_release(v44);

          (*(void (**)(char *, uint64_t))(v58 + 8))(v8, v50);
          (*(void (**)(char *, uint64_t))(v56 + 8))(v12, v57);
          v42(v21, v13);
          return sub_10016B1B8();
        }
      }
      v27 = *(_QWORD *)(a1[2] + 80);
      goto LABEL_27;
    }
    if ((*(_BYTE *)(a1[3] + 80) & 1) != 0 && !*a2)
    {
      v28 = a1[11];
      if ((*(_BYTE *)(v28 + 168) & 1) != 0 && (*(_BYTE *)(v28 + 184) & 1) == 0)
      {
        v27 = *(_QWORD *)(a1[2] + 136);
        aBlock[0] = *(_QWORD *)(v28 + 176);
        swift_retain(v27);
        PassthroughSubject.send(_:)(aBlock);
LABEL_28:
        swift_release(v27);
      }
    }
  }
  return sub_10016B1B8();
}

uint64_t sub_100166C08(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 24);
    swift_retain(v4);
    swift_release(v3);
    LOBYTE(v3) = *(_BYTE *)(v4 + 80);
    result = swift_release(v4);
    if ((v3 & 1) != 0)
    {
      swift_beginAccess(v1, &v10, 0, 0);
      result = swift_weakLoadStrong(v1);
      if (result)
      {
        v5 = result;
        v6 = *(_QWORD *)(result + 16);
        swift_retain(v6);
        swift_release(v5);
        v7 = *(_QWORD *)(v6 + 80);
        swift_retain(v7);
        swift_release(v6);
        v8 = sub_100003DB8(&qword_10032B0E0);
        v9 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
        Subject<>.send()(v8, v9);
        return swift_release(v7);
      }
    }
  }
  return result;
}

uint64_t sub_100166D0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;

  v2 = sub_100003DB8(&qword_100316B68);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 72);
  sub_100235C6C(*(_BYTE *)(*(_QWORD *)(v6 + 56) + 120));
  sub_10022BB80(*(_BYTE *)(*(_QWORD *)(v6 + 56) + 106) & 1);
  v7 = *(_QWORD *)(a1 + 88);
  sub_10005BDBC(*(_BYTE *)(*(_QWORD *)(v6 + 56) + 106) & 1);
  swift_retain(v6);
  sub_1001BF244((uint64_t)v5);
  swift_release(v6);
  if (*(_BYTE *)(v7 + 248) == 3)
  {
    v8 = 0;
    v9 = 1;
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 208);
    v9 = *(_BYTE *)(v7 + 216) & 1;
  }
  sub_10014114C((uint64_t)v5, v8, v9);
  return sub_100007FF0((uint64_t)v5, &qword_100316B68);
}

uint64_t sub_100166E18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(v1 + 104);
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v2 + 56);
  swift_bridgeObjectRetain(v4);
  sub_10022BE1C(v3, v4);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(v1 + 104);
  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(_QWORD *)(v5 + 56);
  swift_bridgeObjectRetain(v7);
  sub_10005C058(v6, v7);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_100166E90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v19[24];
  _BYTE v20[24];
  _BYTE v21[24];

  v2 = sub_100003DB8(&qword_100316B68);
  v4 = __chkstk_darwin(v2, v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = __chkstk_darwin(v4, v7);
  v10 = &v19[-v9 - 8];
  __chkstk_darwin(v8, v11);
  v13 = &v19[-v12 - 8];
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 72);
  v15 = *(_QWORD *)(a1 + 120) + OBJC_IVAR____TtC8SOSBuddy11TryOutModel__simulatedTransmissionProgress;
  swift_beginAccess(v15, v21, 0, 0);
  sub_10000B234(v15, (uint64_t)v13, &qword_100316B68);
  sub_10000B234((uint64_t)v13, (uint64_t)v10, &qword_100316B68);
  v16 = v14 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__simulatedTransmissionProgress;
  swift_beginAccess(v14 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__simulatedTransmissionProgress, v20, 0, 0);
  sub_10000B234(v16, (uint64_t)v6, &qword_100316B68);
  swift_retain(v14);
  sub_1001CE084((uint64_t)v10);
  swift_beginAccess(v16, v19, 33, 0);
  sub_100175998((uint64_t)v10, v16, &qword_100316B68);
  swift_endAccess(v19);
  sub_1001CE2FC((uint64_t)v6);
  sub_100007FF0((uint64_t)v10, &qword_100316B68);
  sub_100007FF0((uint64_t)v6, &qword_100316B68);
  swift_release(v14);
  return sub_100007FF0((uint64_t)v13, &qword_100316B68);
}

uint64_t sub_100167024(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 120);
  if ((*(_WORD *)(v1 + 56) & 0xC000) == 0)
  {
    sub_10021981C(3);
    v2 = *(unsigned __int16 *)(v1 + 56);
    if ((_DWORD)v2 != 0x8000)
    {
      v3 = sub_100003DB8(&qword_10032B0E0);
      v4 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v3, v4);
    }
    *(_WORD *)(v1 + 56) = 0x8000;
    return sub_1002361A8(v2);
  }
  return result;
}

void sub_1001670C4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32);
  if (*(_QWORD *)(v1 + 64))
  {
    if (sub_100067058(3u, *(_QWORD *)(v1 + 88)))
      sub_100218018(3, (uint64_t)sub_10021865C, 0);
  }
}

void sub_100167118()
{
  sub_100218018(1, (uint64_t)sub_100218650, 0);
}

uint64_t sub_100167148(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  int v8;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "User acked end session screen", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  sub_10021981C(6);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32);
  if (*(_QWORD *)(v7 + 64))
  {
    v8 = *(unsigned __int8 *)(v7 + 56);
    if (v8 != 5)
      *(_BYTE *)(a1 + 337) = v8;
  }
  return sub_10016B1B8();
}

uint64_t sub_10016724C(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v3 = *a2;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000D744(v4, (uint64_t)qword_10033FD18);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v21 = v9;
    v10.n128_u64[0] = 136315138;
    *(_DWORD *)v8 = 136315138;
    LOBYTE(v20) = v3;
    v11 = String.init<A>(describing:)(&v20, &type metadata for StewieAppId, v10);
    v13 = v12;
    v20 = sub_100172BEC(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "tryOutRequested for %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  v14 = *(_QWORD *)(a1 + 120);
  v15 = *(unsigned __int16 *)(v14 + 56);
  if ((v15 & 0xC000) != 0 || (v3 == v15 ? (v16 = (v15 & 0x100) == 0) : (v16 = 1), v16))
  {
    v17 = sub_100003DB8(&qword_10032B0E0);
    v18 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v17, v18);
  }
  *(_WORD *)(v14 + 56) = v3 | 0x100;
  return sub_1002361A8(v15);
}

void sub_100167444(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "cancelTryOutOfferRequested", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(_QWORD *)(a1 + 120);
  if ((*(_WORD *)(v7 + 56) & 0xC000) == 0)
  {
    sub_10021981C(3);
    v8 = *(unsigned __int16 *)(v7 + 56);
    if ((_DWORD)v8 != 0x8000)
    {
      v9 = sub_100003DB8(&qword_10032B0E0);
      v10 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v9, v10);
    }
    *(_WORD *)(v7 + 56) = 0x8000;
    sub_1002361A8(v8);
  }
}

uint64_t sub_100167594(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v2 = *a2;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10000D744(v3, (uint64_t)qword_10033FD18);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v19 = v8;
    *(_DWORD *)v7 = 136446210;
    LOBYTE(v18) = v2;
    v9 = sub_100003DB8(&qword_100322C30);
    v11 = String.init<A>(describing:)(&v18, v9, v10);
    v13 = v12;
    v18 = sub_100172BEC(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "startTryOutConnectionDemoRequested for: %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }

  if (v2 == 5)
    v14 = 0;
  else
    v14 = v2;
  v15 = swift_allocObject(&unk_1002F3E00, 24, 7);
  swift_weakInit(v15 + 16);
  v16 = swift_allocObject(&unk_1002F4350, 25, 7);
  *(_QWORD *)(v16 + 16) = v15;
  *(_BYTE *)(v16 + 24) = v2;
  swift_retain(v15);
  sub_1002167F8(v14, 0x40u, (uint64_t)sub_100175894, v16);
  swift_release(v15);
  return swift_release(v16);
}

uint64_t sub_1001677A8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Strong;
  uint64_t v22;
  uint64_t v23;
  id v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[3];
  Swift::String v38;

  v3 = a2 + 16;
  if (!a1)
  {
    swift_beginAccess(v3, v37, 0, 0);
    result = swift_weakLoadStrong(v3);
    if (!result)
      return result;
    v18 = result;
    v19 = *(_QWORD *)(result + 120);
    swift_retain(v19);
    swift_release(v18);
    v20 = *(unsigned __int16 *)(v19 + 56);
    if (v20 >> 9 <= 0x7E && (v20 & 0xC000) == 0x4000)
    {
      if (*(_WORD *)(v19 + 56) == 5)
      {
        if (a3 == 5)
          goto LABEL_25;
      }
      else if (a3 != 5 && *(_WORD *)(v19 + 56) == a3)
      {
        goto LABEL_25;
      }
    }
    v34 = sub_100003DB8(&qword_10032B0E0);
    v35 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v34, v35);
LABEL_25:
    *(_WORD *)(v19 + 56) = a3 | 0x4000;
    sub_1002361A8(v20);
    v33 = v19;
    return swift_release(v33);
  }
  swift_errorRetain(a1);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FD18);
  swift_errorRetain(a1);
  v6 = swift_errorRetain(a1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v36 = a1;
    v37[0] = v10;
    *(_DWORD *)v9 = 136446210;
    swift_errorRetain(a1);
    v11 = sub_100003DB8((uint64_t *)&unk_100324AA0);
    v13 = String.init<A>(describing:)(&v36, v11, v12);
    v15 = v14;
    v36 = sub_100172BEC(v13, v14, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "activateTryOut failed: %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  swift_beginAccess(v3, v37, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (!Strong)
    return swift_errorRelease(a1);
  v22 = Strong;
  v23 = *(_QWORD *)(Strong + 120);
  swift_retain(v23);
  swift_release(v22);
  v24 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v25._countAndFlagsBits = 0xD000000000000025;
  v38._object = (void *)0x8000000100266100;
  v25._object = (void *)0x8000000100266280;
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  v38._countAndFlagsBits = 0xD000000000000022;
  v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)v24, v26, v38);

  v29 = *(_QWORD *)(v23 + 64);
  v28 = *(void **)(v23 + 72);
  if (v28
    && (v29 == v27._countAndFlagsBits && v28 == v27._object
     || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v23 + 64), *(_QWORD *)(v23 + 72), v27._countAndFlagsBits, v27._object, 0) & 1) != 0))
  {
    swift_bridgeObjectRetain(v28);
  }
  else
  {
    swift_bridgeObjectRetain(v28);
    v30 = sub_100003DB8(&qword_10032B0E0);
    v31 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v30, v31);
  }
  v32 = *(_QWORD *)(v23 + 72);
  *(Swift::String *)(v23 + 64) = v27;
  swift_bridgeObjectRelease(v32);
  sub_1002365A0(v29, (uint64_t)v28);
  swift_bridgeObjectRelease(v28);
  swift_errorRelease(a1);
  v33 = v23;
  return swift_release(v33);
}

void sub_100167BD0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a2;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10000D744(v3, (uint64_t)qword_10033FD18);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v14 = v8;
    v9.n128_u64[0] = 136315138;
    *(_DWORD *)v7 = 136315138;
    LOBYTE(v13) = v2;
    v10 = String.init<A>(describing:)(&v13, &type metadata for StewieAppId, v9);
    v12 = v11;
    v13 = sub_100172BEC(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "stewieAppRequested for %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }

  __asm { BR              X9 }
}

void sub_100167E88(uint64_t a1)
{
  sub_100167EA0(a1, "Requested emergency, success: %{BOOL,public}d");
}

void sub_100167E94(uint64_t a1)
{
  sub_100167EA0(a1, "Requested roadside assistance, success: %{BOOL,public}d");
}

void sub_100167EA0(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *oslog;
  _BOOL4 v9;
  uint64_t v10;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FD18);
  v5 = swift_errorRetain(a1);
  oslog = Logger.logObject.getter(v5);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 67240192;
    v9 = a1 == 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v7 + 4, v7 + 8);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, a2, v7, 8u);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {
    swift_errorRelease(a1);

  }
}

uint64_t sub_100167FE8()
{
  return sub_100140B40();
}

void sub_10016800C(uint64_t a1, char *a2)
{
  sub_100100194(*a2);
}

uint64_t sub_100168014()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10000D744(v0, (uint64_t)qword_10033FD18);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "emergencyCallRequested", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  return sub_1001EE234((uint64_t)sub_1001662A0, 0);
}

void sub_1001680F8(char a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *oslog;
  int v7;
  uint64_t v8;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FD18);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 67109120;
    v7 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, &v8, v5 + 4, v5 + 8);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Emergency call request, success: %{BOOL}d", v5, 8u);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_100168218(uint64_t a1, void ***a2)
{
  return sub_100143884(*a2);
}

uint64_t sub_100168240(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;

  v3 = *a2;
  v2 = a2[1];
  v4 = swift_allocObject(&unk_1002F4288, 32, 7);
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = qword_100315820;
  swift_retain(v2);
  if (v5 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000D744(v6, (uint64_t)qword_10033FD18);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "switchFromEmergencyToRoadsideRequested", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  byte_100322668 = 0;
  v11 = swift_allocObject(&unk_1002F42B0, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_1001757C0;
  *(_QWORD *)(v11 + 24) = v4;
  swift_retain(v4);
  sub_1002167F8(3, 0x80u, (uint64_t)sub_100175844, v11);
  swift_release(v4);
  return swift_release(v11);
}

uint64_t sub_10016839C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;

  v4 = *a2;
  v3 = a2[1];
  v5 = swift_allocObject(&unk_1002F41E8, 32, 7);
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  v6 = qword_100315820;
  swift_retain(v3);
  if (v6 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10000D744(v7, (uint64_t)qword_10033FD18);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "switchFromRoadsideToEmergencyRequested", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32);
  if (*(_QWORD *)(v13 + 64) && (v12 = sub_100067058(0, *(_QWORD *)(v13 + 80))))
  {
    byte_100322668 = 1;
    v14 = swift_allocObject(&unk_1002F4238, 32, 7);
    *(_QWORD *)(v14 + 16) = sub_1001757C0;
    *(_QWORD *)(v14 + 24) = v5;
    swift_retain(v5);
    sub_1002167F8(2, 0x80u, (uint64_t)sub_1001757F0, v14);
  }
  else
  {
    v15 = Logger.logObject.getter(v12);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "switchFromRoadsideToEmergencyRequested - Stewie emergency is not allowed, placing a call", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    v14 = swift_allocObject(&unk_1002F4210, 32, 7);
    *(_QWORD *)(v14 + 16) = sub_1001757C0;
    *(_QWORD *)(v14 + 24) = v5;
    swift_retain(v5);
    sub_1001EE234((uint64_t)sub_1001757E8, v14);
  }
  swift_release(v5);
  return swift_release(v14);
}

uint64_t sub_1001685CC(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  int v10;
  uint64_t v11;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000D744(v4, (uint64_t)qword_10033FD18);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 67109120;
    v10 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 4, v8 + 8);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Emergency call request, success: %{BOOL}d", v8, 8u);
    swift_slowDealloc(v8, -1, -1);
  }

  return a2(a1 & 1);
}

void sub_1001686F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10000D744(v5, (uint64_t)qword_10033FD18);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "selectRoadsideProviderRequested", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  sub_100216DF8(v2, v3, v4);
}

uint64_t sub_1001687F0(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result;
  v3 = *a2;
  v4 = a2[1];
  v5 = *(_QWORD *)(result + 56);
  v6 = *(_QWORD *)(v5 + 88);
  if (v6)
  {
    swift_retain(*(_QWORD *)(v5 + 88));
    sub_1000AC1E8(v3, v4);
    result = swift_release(v6);
  }
  v7 = *(_QWORD *)(v2 + 88);
  v8 = *(_QWORD *)(v7 + 104);
  if (v8)
  {
    swift_retain(*(_QWORD *)(v7 + 104));
    sub_1000AC1E8(v3, v4);
    return swift_release(v8);
  }
  return result;
}

void sub_100168874(uint64_t a1, char *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 1);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FD18);
  v7 = swift_retain_n(v4, v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v8, v9))
  {

    v17 = swift_release_n(v4);
    if ((v3 & 1) == 0)
      goto LABEL_5;
LABEL_9:
    sub_10021981C(7);
    return;
  }
  v21 = a1;
  v10 = (uint8_t *)swift_slowAlloc(12, -1);
  v11 = swift_slowAlloc(32, -1);
  v23 = v11;
  v12.n128_u64[0] = 136315138;
  *(_DWORD *)v10 = 136315138;
  LOBYTE(v22) = v3;
  v13 = String.init<A>(describing:)(&v22, &type metadata for OfferModel.OfferAction, v12);
  v15 = v14;
  v22 = sub_100172BEC(v13, v14, &v23);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v10 + 4, v10 + 12);
  swift_release_n(v4);
  swift_bridgeObjectRelease(v15);
  _os_log_impl((void *)&_mh_execute_header, v8, v9, "User acted upon offer: %s", v10, 0xCu);
  swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v11, -1, -1);
  v16 = v10;
  a1 = v21;
  swift_slowDealloc(v16, -1, -1);

  if ((v3 & 1) != 0)
    goto LABEL_9;
LABEL_5:
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Requesting OffTheGrid mode", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  sub_10001EE20(1, 2, *(_QWORD *)(a1 + 128));
}

void sub_100168AC4(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)a2 + 2);
  v12 = v4;
  v13 = v5;
  v10 = 0xD000000000000017;
  v11 = 0x800000010026C1E0;
  v6 = sub_100175620();
  v7 = sub_100175664();
  if ((BidirectionalCollection<>.starts<A>(with:)(&v10, &type metadata for String, &type metadata for String, v6, v7) & 1) != 0)
  {
    if (v3)
    {
      if (v3 == 1)
      {
        sub_10021981C(7);
        return;
      }
      sub_10021981C(8);
      v8 = 1;
      goto LABEL_11;
    }
    v12 = v4;
    v13 = v5;
    v10 = 0xD00000000000001ELL;
    v11 = 0x800000010026C200;
    if ((BidirectionalCollection<>.starts<A>(with:)(&v10, &type metadata for String, &type metadata for String, v6, v7) & 1) != 0)
    {
      v8 = 0;
LABEL_11:
      sub_10015E080(v8);
      return;
    }
    v9 = swift_allocObject(&unk_1002F3E00, 24, 7);
    swift_weakInit(v9 + 16, a1);
    swift_retain(v9);
    sub_100125058((uint64_t)sub_10017559C, v9);
    swift_release_n(v9);
  }
  else if (v3)
  {
    if (v3 == 1)
      sub_100023408();
    else
      sub_1000233F8();
  }
}

void sub_100168C4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Requesting OffTheGrid mode", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  sub_10001EE20(1, 2, *(_QWORD *)(a1 + 128));
}

void sub_100168D28()
{
  sub_1000233F8();
}

void sub_100168D48()
{
  sub_100125058((uint64_t)sub_100125734, 0);
}

uint64_t sub_100168D78(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject(&unk_1002F3E00, 24, 7);
  swift_weakInit(v2 + 16, a1);
  swift_retain(v2);
  sub_100125058((uint64_t)sub_10017559C, v2);
  return swift_release_n(v2);
}

uint64_t sub_100168DE8(uint64_t result, double *a2)
{
  double v2;
  double v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a2;
  v3 = a2[1];
  v4 = *(_QWORD *)(result + 40);
  v5 = *(double *)(v4 + 32);
  v6 = *(double *)(v4 + 40);
  if (v5 != *a2 || v6 != v3)
  {
    v8 = result;
    v9 = sub_100003DB8(&qword_10032B0E0);
    v10 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v9, v10);
    *(double *)(v4 + 32) = v2;
    *(double *)(v4 + 40) = v3;
    sub_100228D8C(v5, v6);
    v11 = *(_QWORD *)(v8 + 328);
    swift_retain(v11);
    Subject<>.send()(v9, v10);
    return swift_release(v11);
  }
  return result;
}

uint64_t sub_100168EC8(uint64_t result, double *a2)
{
  double v2;
  double v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a2;
  v3 = a2[1];
  v4 = *(_QWORD *)(result + 40);
  v5 = *(double *)(v4 + 64);
  v6 = *(double *)(v4 + 72);
  if (v5 != *a2 || v6 != v3)
  {
    v8 = result;
    v9 = sub_100003DB8(&qword_10032B0E0);
    v10 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v9, v10);
    *(double *)(v4 + 64) = v2;
    *(double *)(v4 + 72) = v3;
    sub_100229214(v5, v6);
    v11 = *(_QWORD *)(v8 + 328);
    swift_retain(v11);
    Subject<>.send()(v9, v10);
    return swift_release(v11);
  }
  return result;
}

void sub_100168FA8(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v3[3];

  v2 = a2[1];
  v3[0] = *a2;
  v3[1] = v2;
  v3[2] = a2[2];
  sub_10016BC00((unsigned __int8 *)v3);
}

void sub_100168FE4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v3[3];
  uint64_t v4;

  v2 = *(_OWORD *)(a2 + 16);
  v3[0] = *(_OWORD *)a2;
  v3[1] = v2;
  v3[2] = *(_OWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  sub_10016C0EC((uint64_t)v3);
}

uint64_t sub_100169028(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return sub_10016C5E4((uint64_t)v4);
}

uint64_t sub_100169064(uint64_t a1, uint64_t a2)
{
  return sub_10016C9A0(*(_BYTE *)a2, *(_QWORD *)(a2 + 8));
}

void sub_10016908C(uint64_t a1, uint64_t a2)
{
  sub_10016CD2C(*(_BYTE *)a2, *(_QWORD *)(a2 + 8));
}

void sub_1001690B4(uint64_t a1, uint64_t a2)
{
  sub_10016CD48(*(_BYTE *)a2, *(_QWORD *)(a2 + 8));
}

void sub_1001690DC(uint64_t a1, unsigned __int8 *a2)
{
  __int16 v2;
  int v3;
  uint64_t v4;
  __int16 v5;

  v2 = *a2;
  v3 = a2[1];
  v4 = *((_QWORD *)a2 + 1);
  if (v3)
    v5 = 256;
  else
    v5 = 0;
  sub_10016D154(v5 | v2, v4);
}

void sub_100169118(uint64_t a1, unsigned __int8 *a2)
{
  sub_10016D524(*a2 | (a2[1] << 8), *((_QWORD *)a2 + 1));
}

void sub_10016914C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *oslog;

  v2 = *(_QWORD *)(a1 + 72);
  sub_100235D98(*(_BYTE *)(v2 + 48) & 1);
  v3 = *(unsigned __int8 *)(v2 + 48);
  v4 = v3 != 2 && (v3 & 1) == 0;
  if (v4 && (*(_BYTE *)(a1 + 336) & 1) != 0)
  {
    *(_BYTE *)(a1 + 336) = 2;
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32);
    if (*(_QWORD *)(v5 + 64) && *(_BYTE *)(v5 + 56) == 5)
    {
      if (qword_100315820 != -1)
        swift_once(&qword_100315820, sub_1000D95E4);
      v6 = type metadata accessor for Logger(0);
      v7 = sub_10000D744(v6, (uint64_t)qword_10033FD18);
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Executing delayed bringForegroundOnUnlock request", v10, 2u);
        swift_slowDealloc(v10, -1, -1);
      }

      sub_100125058((uint64_t)sub_100125734, 0);
    }
    else
    {
      if (qword_100315820 != -1)
        swift_once(&qword_100315820, sub_1000D95E4);
      v11 = type metadata accessor for Logger(0);
      v12 = sub_10000D744(v11, (uint64_t)qword_10033FD18);
      oslog = Logger.logObject.getter(v12);
      v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(oslog, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, oslog, v13, "Ignoring delayed bringForegroundOnUnlock request, Stewie is off already", v14, 2u);
        swift_slowDealloc(v14, -1, -1);
      }

    }
  }
}

void sub_10016934C(uint64_t a1, unsigned __int8 *a2)
{
  int v2;

  v2 = *a2;
  sub_100007BBC((_QWORD *)(a1 + 240), *(_QWORD *)(a1 + 264));
  sub_10019B7DC(v2);
}

void sub_100169388(uint64_t a1, char *a2)
{
  sub_10016AF18(*a2);
}

void sub_1001693AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = sub_100003DB8(&qword_100316AD8);
  v5 = __chkstk_darwin(v3, v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  v10 = (char *)&v21 - v9;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v11 = type metadata accessor for Logger(0);
  sub_10000D744(v11, (uint64_t)qword_10033FD18);
  v12 = sub_10000B234(a2, (uint64_t)v10, &qword_100316AD8);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v22 = v16;
    *(_DWORD *)v15 = 136315138;
    sub_10000B234((uint64_t)v10, (uint64_t)v7, &qword_100316AD8);
    v18 = String.init<A>(describing:)(v7, v3, v17);
    v20 = v19;
    v21 = sub_100172BEC(v18, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v20);
    sub_100007FF0((uint64_t)v10, &qword_100316AD8);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Banner dismissed by user in mode: %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    sub_100007FF0((uint64_t)v10, &qword_100316AD8);
  }

}

uint64_t sub_1001695CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18[9];

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(v2 + 32);
  if ((!*(_QWORD *)(v3 + 64) || *(_BYTE *)(v3 + 56) == 5) && *(_BYTE *)(a1 + 337) != 5)
  {
    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    v4 = type metadata accessor for Logger(0);
    sub_10000D744(v4, (uint64_t)qword_10033FD18);
    v6 = swift_retain_n(a1, v5);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v18[0] = v10;
      *(_DWORD *)v9 = 136315138;
      LOBYTE(v17) = *(_BYTE *)(a1 + 337);
      v11 = sub_100003DB8(&qword_100322A80);
      v13 = String.init<A>(describing:)(&v17, v11, v12);
      v15 = v14;
      v17 = sub_100172BEC(v13, v14, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v9 + 4, v9 + 12);
      swift_release_n(a1);
      swift_bridgeObjectRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Stewie is on, resetting lastEndSessionDismissedReason (it was %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {

      swift_release_n(a1);
    }
    *(_BYTE *)(a1 + 337) = 5;
    v3 = *(_QWORD *)(v2 + 32);
  }
  sub_10000B458(v3 + 56, (uint64_t)v18, &qword_100319FD8);
  sub_10007F4D4((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007F464);
  sub_100235DC4((uint64_t)v18);
  sub_10007F4D4((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007ED6C);
  return sub_10016B1B8();
}

void sub_100169804(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;

  v1 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(v1 + 64))
  {
    v3 = *(_QWORD *)(v1 + 88);
    if (!*(_QWORD *)(v3 + 16))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32);
      if (!*(_QWORD *)(v4 + 64) || (sub_1001BF5E8(v3, *(_QWORD *)(v4 + 88)) & 1) == 0)
      {
        if (qword_1003158C8 != -1)
          swift_once(&qword_1003158C8, sub_1000D98C4);
        v5 = type metadata accessor for Logger(0);
        v6 = sub_10000D744(v5, (uint64_t)qword_10033FF10);
        v7 = Logger.logObject.getter(v6);
        v8 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v7, v8))
        {
          v9 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v9 = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, v8, "Active services changed to 0 on the monitor and are out of sync with caModels", v9, 2u);
          swift_slowDealloc(v9, -1, -1);
        }

        if (qword_100315830 != -1)
          swift_once(&qword_100315830, sub_1000D961C);
        v10 = sub_10000D744(v5, (uint64_t)qword_10033FD48);
        v11 = Logger.logObject.getter(v10);
        v12 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v11, v12))
        {
          v13 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v13 = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "fetchConnectionAssistantState", v13, 2u);
          swift_slowDealloc(v13, -1, -1);
        }

        sub_1000EF86C(0, 0);
      }
    }
  }
}

double sub_1001699CC(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  uint64_t v4;
  double result;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v3 = *a2;
  swift_beginAccess(*(_QWORD *)(a1 + 296) + 24, v9, 33, 0);
  sub_10015BB74(v3 & 1);
  swift_endAccess(v9);
  v4 = *(_QWORD *)(a1 + 120);
  *(_BYTE *)(v4 + 89) = v3;
  sub_100236838();
  if (v3 != 2 && (v3 & 1) == 0 && *(unsigned __int16 *)(v4 + 56) < 0x4000u)
  {
    v7 = sub_100003DB8(&qword_10032B0E0);
    v8 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v7, v8).n128_u64[0];
  }
  return result;
}

uint64_t sub_100169A8C(uint64_t a1)
{
  _BYTE v2[40];

  sub_10000B458(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 80) + 48, (uint64_t)v2, &qword_100322A58);
  sub_10022C0DC((uint64_t)v2);
  return sub_10016B1B8();
}

uint64_t sub_100169ADC(uint64_t a1)
{
  _BYTE v2[48];

  sub_10000B458(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 88) + 48, (uint64_t)v2, &qword_100319D78);
  sub_10005B9DC((uint64_t)v2);
  return sub_10016B1B8();
}

uint64_t sub_100169B30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24);
  swift_retain(v1);
  sub_10013D7E8(v2);
  return swift_release(v1);
}

uint64_t sub_100169B64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 312);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 56);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8SOSBuddy24DeviceOrientationTracker_currentTargetInGreenZone) = sub_100067058(0, *(_QWORD *)(v2 + 200));
  swift_retain(v2);
  sub_10013D914();
  return swift_release(v2);
}

uint64_t sub_100169BB4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;

  v1 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 32);
  v2 = v1[7];
  v3 = v1[8];
  v4 = v1[9];
  v5 = v1[10];
  v6 = v1[11];
  v7 = v1[12];
  v8 = v1[13];
  v9 = v1[14];
  if (v3)
    v10 = v2 == 5;
  else
    v10 = 0;
  v11 = v10 && (v1[9] & 0xFF00) == 256;
  *(_BYTE *)(*(_QWORD *)(a1 + 312) + 24) = v11;
  sub_10007F464(v2, v3, v4, v5, v6, v7, v8, v9);
  sub_10013D914();
  return sub_10007ED6C(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100169C88(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[64];

  result = sub_10006701C(a2, (uint64_t)v10);
  v4 = *(_QWORD *)(a1 + 304);
  v5 = *(_QWORD *)(v4 + 24);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 32);
    swift_bridgeObjectRetain(*(_QWORD *)(v4 + 24));
    do
    {
      v8 = v7[3];
      v9 = v7[4];
      sub_100007BBC(v7, v8);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 88))(v10, v8, v9);
      v7 += 5;
      --v6;
    }
    while (v6);
    return swift_bridgeObjectRelease(v5);
  }
  return result;
}

uint64_t sub_100169D24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE v24[48];

  v2 = sub_100003DB8((uint64_t *)&unk_10031B230);
  __chkstk_darwin(v2, v3);
  v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(a1 + 304);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 40);
  v8 = *(_QWORD *)(v6 + 24);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
    swift_retain(v7);
    return swift_release(v16);
  }
  v10 = (_QWORD *)(v8 + 32);
  v11 = v7 + 48;
  v22 = v7;
  swift_retain(v7);
  swift_bridgeObjectRetain(v8);
  do
  {
    v12 = v10[3];
    v13 = v10[4];
    sub_100007BBC(v10, v12);
    sub_10000B458(v11, (uint64_t)v24, &qword_100319FB8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 8))(v24, v12, v13);
    v10 += 5;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease(v8);
  v14 = *(_QWORD *)(v6 + 24);
  v15 = *(_QWORD *)(v14 + 16);
  v16 = v22;
  if (!v15)
    return swift_release(v16);
  v17 = (_QWORD *)(v14 + 32);
  v18 = v22 + OBJC_IVAR____TtC8SOSBuddy11TargetModel_link;
  swift_bridgeObjectRetain(v14);
  swift_beginAccess(v18, v23, 0, 0);
  do
  {
    v19 = v17[3];
    v20 = v17[4];
    sub_100007BBC(v17, v19);
    sub_10000B234(v18, (uint64_t)v5, (uint64_t *)&unk_10031B230);
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v5, v19, v20);
    sub_100007FF0((uint64_t)v5, (uint64_t *)&unk_10031B230);
    v17 += 5;
    --v15;
  }
  while (v15);
  swift_release(v22);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_100169ED8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 304) + 24);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(result + 48) + 24);
    v4 = (_QWORD *)(v1 + 32);
    do
    {
      v5 = v4[3];
      v6 = v4[4];
      sub_100007BBC(v4, v5);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v3, v5, v6);
      v4 += 5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_100169F50(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 304) + 24);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(result + 48) + 72);
    v4 = (_QWORD *)(v1 + 32);
    swift_retain(v3);
    swift_bridgeObjectRetain(v1);
    do
    {
      v5 = v4[3];
      v6 = v4[4];
      sub_100007BBC(v4, v5);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v3, v5, v6);
      v4 += 5;
      --v2;
    }
    while (v2);
    swift_release(v3);
    return swift_bridgeObjectRelease(v1);
  }
  return result;
}

uint64_t sub_10016A004(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 304) + 24);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(result + 48) + 96);
    v4 = (_QWORD *)(v1 + 32);
    swift_retain(v3);
    swift_bridgeObjectRetain(v1);
    do
    {
      v5 = v4[3];
      v6 = v4[4];
      sub_100007BBC(v4, v5);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40))(v3, v5, v6);
      v4 += 5;
      --v2;
    }
    while (v2);
    swift_release(v3);
    return swift_bridgeObjectRelease(v1);
  }
  return result;
}

uint64_t sub_10016A0B8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 304) + 24);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(result + 48) + 56);
    v4 = (_QWORD *)(v1 + 32);
    swift_retain(v3);
    swift_bridgeObjectRetain(v1);
    do
    {
      v5 = v4[3];
      v6 = v4[4];
      sub_100007BBC(v4, v5);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v3, v5, v6);
      v4 += 5;
      --v2;
    }
    while (v2);
    swift_release(v3);
    return swift_bridgeObjectRelease(v1);
  }
  return result;
}

uint64_t sub_10016A16C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 304) + 24);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(result + 48) + 64);
    v4 = (_QWORD *)(v1 + 32);
    swift_retain(v3);
    swift_bridgeObjectRetain(v1);
    do
    {
      v5 = v4[3];
      v6 = v4[4];
      sub_100007BBC(v4, v5);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 56))(v3, v5, v6);
      v4 += 5;
      --v2;
    }
    while (v2);
    swift_release(v3);
    return swift_bridgeObjectRelease(v1);
  }
  return result;
}

uint64_t sub_10016A220(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];
  char v15;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 48) + 80);
  if ((*(_BYTE *)(v1 + 64) & 1) != 0)
  {
    v2 = *(_QWORD *)(v1 + 72);
    v3 = *(_QWORD *)(v1 + 56);
    v4 = *(_QWORD *)(result + 304);
    v5 = *(_BYTE *)(v1 + 80) & 1;
    v14[0] = *(unsigned __int8 *)(v1 + 48);
    v14[1] = v3;
    v14[2] = 1;
    v14[3] = v2;
    v14[4] = v5;
    v15 = 0;
    v6 = *(_QWORD *)(v4 + 24);
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      v8 = v6 + 32;
      swift_bridgeObjectRetain(*(_QWORD *)(v4 + 24));
      do
      {
        sub_100007CBC(v8, (uint64_t)v11);
        v9 = v12;
        v10 = v13;
        sub_100007BBC(v11, v12);
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(v10 + 96))(v14, v9, v10);
        _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v11);
        v8 += 40;
        --v7;
      }
      while (v7);
      return swift_bridgeObjectRelease(v6);
    }
  }
  return result;
}

uint64_t sub_10016A2F4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[5];
  char v17;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 48) + 88);
  if ((*(_BYTE *)(v1 + 56) & 1) != 0)
  {
    v2 = *(_QWORD *)(v1 + 48);
    v3 = *(_QWORD *)(result + 304);
    v4 = *(_BYTE *)(v1 + 88);
    v5 = *(_QWORD *)(v1 + 64);
    v6 = *(_QWORD *)(v1 + 80);
    v7 = *(_QWORD *)(v1 + 72) & 1;
    v16[0] = v2;
    v16[1] = 1;
    v16[2] = v5;
    v16[3] = v7;
    v16[4] = v6;
    v17 = v4 & 1 | 0x80;
    v8 = *(_QWORD *)(v3 + 24);
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v10 = v8 + 32;
      swift_bridgeObjectRetain(*(_QWORD *)(v3 + 24));
      do
      {
        sub_100007CBC(v10, (uint64_t)v13);
        v11 = v14;
        v12 = v15;
        sub_100007BBC(v13, v14);
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(v12 + 96))(v16, v11, v12);
        _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v13);
        v10 += 40;
        --v9;
      }
      while (v9);
      return swift_bridgeObjectRelease(v8);
    }
  }
  return result;
}

uint64_t sub_10016A3D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];
  _BYTE v16[72];

  v2 = sub_100003DB8(&qword_1003180C0);
  __chkstk_darwin(v2, v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = *(_QWORD *)(a1 + 304);
  v7 = *(_QWORD *)(a1 + 48);
  sub_10000B458(*(_QWORD *)(v7 + 32) + 56, (uint64_t)v16, &qword_100319FD8);
  v8 = *(_QWORD *)(v7 + 112) + OBJC_IVAR____TtC8SOSBuddy21ConnectionClosedModel__connectionClosed;
  swift_beginAccess(v8, v15, 0, 0);
  sub_10000B234(v8, (uint64_t)v5, &qword_1003180C0);
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v11 = (_QWORD *)(v9 + 32);
    sub_10007F4D4((uint64_t)v16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007F464);
    swift_bridgeObjectRetain(v9);
    do
    {
      v12 = v11[3];
      v13 = v11[4];
      sub_100007BBC(v11, v12);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))(v13 + 64))(v16, v5, v12, v13);
      v11 += 5;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease(v9);
    sub_10007F4D4((uint64_t)v16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007ED6C);
  }
  return sub_100007FF0((uint64_t)v5, &qword_1003180C0);
}

uint64_t sub_10016A524(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[7];

  v2 = *((_QWORD *)a2 + 1);
  v3 = a2[16];
  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a2 + 5);
  v6 = *(_QWORD *)(result + 304);
  v7 = 256;
  if (!a2[33])
    v7 = 0;
  v8 = v7 | a2[32];
  v9 = 0x10000;
  if (!a2[34])
    v9 = 0;
  v15[0] = *a2;
  v15[1] = v2;
  v15[2] = v3;
  v15[3] = v4;
  v15[4] = v8 | v9;
  v15[5] = v5;
  v15[6] = 0;
  v10 = *(_QWORD *)(v6 + 24);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = (_QWORD *)(v10 + 32);
    swift_bridgeObjectRetain(*(_QWORD *)(v6 + 24));
    do
    {
      v13 = v12[3];
      v14 = v12[4];
      sub_100007BBC(v12, v13);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v14 + 72))(v15, v13, v14);
      v12 += 5;
      --v11;
    }
    while (v11);
    return swift_bridgeObjectRelease(v10);
  }
  return result;
}

uint64_t sub_10016A610(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *(_QWORD *)(result + 304);
  v9[0] = *a2;
  v9[1] = v2;
  v10 = 0u;
  v11 = 0u;
  v12 = 0x4000000000000000;
  v4 = *(_QWORD *)(v3 + 24);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(v4 + 32);
    swift_bridgeObjectRetain(*(_QWORD *)(v3 + 24));
    do
    {
      v7 = v6[3];
      v8 = v6[4];
      sub_100007BBC(v6, v7);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v8 + 72))(v9, v7, v8);
      v6 += 5;
      --v5;
    }
    while (v5);
    return swift_bridgeObjectRelease(v4);
  }
  return result;
}

uint64_t sub_10016A6CC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 56) + 88);
  if (v1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 304) + 24);
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      v4 = (_QWORD *)(v2 + 32);
      swift_retain(*(_QWORD *)(*(_QWORD *)(result + 56) + 88));
      swift_bridgeObjectRetain(v2);
      do
      {
        v5 = v4[3];
        v6 = v4[4];
        sub_100007BBC(v4, v5);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 80))(v1, v5, v6);
        v4 += 5;
        --v3;
      }
      while (v3);
      swift_release(v1);
      return swift_bridgeObjectRelease(v2);
    }
  }
  return result;
}

uint64_t sub_10016A784(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[7];

  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(unsigned __int8 *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(result + 304);
  v8 = 256;
  if (!*(_BYTE *)(a2 + 41))
    v8 = 0;
  v9 = v8 | *(unsigned __int8 *)(a2 + 40);
  v10 = 0x10000;
  if (!*(_BYTE *)(a2 + 42))
    v10 = 0;
  v16[0] = *(_QWORD *)a2;
  v16[1] = v2;
  v16[2] = v3;
  v16[3] = v4;
  v16[4] = v5;
  v16[5] = v9 | v10;
  v16[6] = v6 | 0x8000000000000000;
  v11 = *(_QWORD *)(v7 + 24);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = (_QWORD *)(v11 + 32);
    swift_bridgeObjectRetain(*(_QWORD *)(v7 + 24));
    do
    {
      v14 = v13[3];
      v15 = v13[4];
      sub_100007BBC(v13, v14);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v15 + 72))(v16, v14, v15);
      v13 += 5;
      --v12;
    }
    while (v12);
    return swift_bridgeObjectRelease(v11);
  }
  return result;
}

uint64_t sub_10016A878(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 88) + 104);
  if (v1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 304) + 24);
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      v4 = (_QWORD *)(v2 + 32);
      swift_retain(*(_QWORD *)(*(_QWORD *)(result + 88) + 104));
      swift_bridgeObjectRetain(v2);
      do
      {
        v5 = v4[3];
        v6 = v4[4];
        sub_100007BBC(v4, v5);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 80))(v1, v5, v6);
        v4 += 5;
        --v3;
      }
      while (v3);
      swift_release(v1);
      return swift_bridgeObjectRelease(v2);
    }
  }
  return result;
}

uint64_t sub_10016A930(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 304) + 24);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_BYTE *)(*(_QWORD *)(result + 72) + 48);
    v4 = v1 + 32;
    swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(result + 304) + 24));
    do
    {
      sub_100007CBC(v4, (uint64_t)v7);
      v5 = v8;
      v6 = v9;
      sub_100007BBC(v7, v8);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v6 + 104))(v3 & 1, v5, v6);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v7);
      v4 += 40;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease(v1);
  }
  return result;
}

uint64_t sub_10016A9E0()
{
  uint64_t result;

  result = sub_10016DCB4();
  if ((result & 1) != 0)
    return sub_100112C08();
  return result;
}

uint64_t sub_10016AA0C(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(result + 304);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = *a2;
    v6 = v3 + 32;
    swift_bridgeObjectRetain(*(_QWORD *)(v2 + 24));
    do
    {
      sub_100007CBC(v6, (uint64_t)v9);
      v7 = v10;
      v8 = v11;
      sub_100007BBC(v9, v10);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 120))(v5, v7, v8);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v9);
      v6 += 40;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease(v3);
  }
  return result;
}

uint64_t sub_10016AAB4(uint64_t result, _OWORD *a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[3];

  v2 = a2[1];
  v9[0] = *a2;
  v9[1] = v2;
  v9[2] = a2[2];
  v3 = *(_QWORD *)(result + 304);
  v4 = *(_QWORD *)(v3 + 24);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(v4 + 32);
    swift_bridgeObjectRetain(*(_QWORD *)(v3 + 24));
    do
    {
      v7 = v6[3];
      v8 = v6[4];
      sub_100007BBC(v6, v7);
      (*(void (**)(_OWORD *, uint64_t, uint64_t))(v8 + 128))(v9, v7, v8);
      v6 += 5;
      --v5;
    }
    while (v5);
    return swift_bridgeObjectRelease(v4);
  }
  return result;
}

uint64_t sub_10016AB60(uint64_t a1, uint64_t a2)
{
  int v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned __int8 *)(a2 + 1);
  if ((v2 & 1) != 0)
    v3 = 1;
  else
    v3 = 2;
  if (v2 == 2)
    v4 = 0;
  else
    v4 = v3;
  sub_10010D39C(v4);
  v6 = v5;
  sub_100176278(7, v5);
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_10016ABB8(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t inited;
  char v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE v13[56];
  _BYTE v14[56];
  _BYTE v15[56];
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *a2;
  v3 = *((_QWORD *)a2 + 1);
  v4 = *((_QWORD *)a2 + 2);
  v18 = v3;
  v19 = v4;
  v16 = 0xD000000000000017;
  v17 = 0x800000010026C1E0;
  v5 = sub_100175620();
  v6 = sub_100175664();
  result = BidirectionalCollection<>.starts<A>(with:)(&v16, &type metadata for String, &type metadata for String, v5, v6);
  if ((result & 1) != 0)
  {
    if (v2)
    {
      if (v2 == 1)
        return result;
      v8 = sub_100003DB8(&qword_100319FC8);
      inited = swift_initStackObject(v8, v15);
      *(_OWORD *)(inited + 16) = xmmword_10024E070;
      *(_QWORD *)(inited + 32) = 0x696F507972746E65;
      *(_QWORD *)(inited + 40) = 0xEA0000000000746ELL;
    }
    else
    {
      v18 = v3;
      v19 = v4;
      v16 = 0xD00000000000001ELL;
      v17 = 0x800000010026C200;
      v10 = BidirectionalCollection<>.starts<A>(with:)(&v16, &type metadata for String, &type metadata for String, v5, v6);
      v11 = sub_100003DB8(&qword_100319FC8);
      if ((v10 & 1) != 0)
        inited = swift_initStackObject(v11, v13);
      else
        inited = swift_initStackObject(v11, v14);
      *(_OWORD *)(inited + 16) = xmmword_10024E070;
      *(_QWORD *)(inited + 32) = 0x696F507972746E65;
      *(_QWORD *)(inited + 40) = 0xEA0000000000746ELL;
    }
    *(_QWORD *)(inited + 48) = String._bridgeToObjectiveC()();
    v12 = sub_100224F60(inited);
    sub_100176278(7, v12);
    return swift_bridgeObjectRelease(v12);
  }
  return result;
}

void sub_10016ADD8(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v8[56];

  v2 = *a2;
  if ((v2 - 1) >= 2)
  {
    if ((v2 - 3) >= 2)
    {
      v5 = sub_100003DB8(&qword_100319FC8);
      inited = swift_initStackObject(v5, &v7);
    }
    else
    {
      v3 = sub_100003DB8(&qword_100319FC8);
      inited = swift_initStackObject(v3, v8);
    }
    *(_OWORD *)(inited + 16) = xmmword_10024E070;
    *(_QWORD *)(inited + 32) = 0x696F507972746E65;
    *(_QWORD *)(inited + 40) = 0xEA0000000000746ELL;
    *(_QWORD *)(inited + 48) = String._bridgeToObjectiveC()();
    v6 = sub_100224F60(inited);
    sub_100176278(7, v6);
    swift_bridgeObjectRelease(v6);
  }
}

void sub_10016AF18(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  char *v9;
  int v10;
  uint64_t v11;

  v2 = v1;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000D744(v4, (uint64_t)qword_10033FD18);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 67109120;
    v10 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 4, v8 + 8);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "onStatusBarPillTapped: banner presented - %{BOOL}d", v8, 8u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = (char *)&loc_10016B01C + 4 * byte_1002594B5[sub_10016B120(v2)];
  __asm { BR              X10 }
}

uint64_t sub_10016B120(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32);
  if (!*(_QWORD *)(v1 + 64))
    return 5;
  v2 = 0;
  if (!sub_100067058(0, *(_QWORD *)(v1 + 88)))
  {
    if (!*(_QWORD *)(v1 + 64))
      return 5;
    v2 = 1;
    if (!sub_100067058(1u, *(_QWORD *)(v1 + 88)))
    {
      if (!*(_QWORD *)(v1 + 64))
        return 5;
      v2 = 4;
      if (!sub_100067058(4u, *(_QWORD *)(v1 + 88)))
      {
        if (!*(_QWORD *)(v1 + 64))
          return 5;
        v2 = 2;
        if (!sub_100067058(2u, *(_QWORD *)(v1 + 88)))
          return 5;
      }
    }
  }
  return v2;
}

uint64_t sub_10016B1B8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  char v26[8];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;

  v1 = v0;
  v2 = v0[4];
  v3 = *(_QWORD *)(v0[6] + 32);
  if (*(_QWORD *)(v3 + 64))
  {
    v4 = 0;
    if (*(_BYTE *)(v3 + 56) == 5 && (unint64_t)*(unsigned __int8 *)(v3 + 73) << 8 == 256)
      v4 = sub_10016BB74() == 2;
  }
  else
  {
    v4 = 0;
  }
  v5 = *(unsigned __int8 *)(v2 + 42);
  if ((_DWORD)v5 == 2 || ((v4 ^ v5) & 1) != 0)
  {
    v6 = sub_100003DB8(&qword_10032B0E0);
    v7 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v6, v7);
  }
  *(_BYTE *)(v2 + 42) = v4;
  result = sub_100125A9C(v5);
  v9 = *(_QWORD *)(v3 + 64);
  if (v9)
  {
    v11 = *(_QWORD *)(v3 + 104);
    v10 = *(_QWORD *)(v3 + 112);
    v13 = *(_QWORD *)(v3 + 88);
    v12 = *(_QWORD *)(v3 + 96);
    v14 = *(_QWORD *)(v3 + 80);
    v24 = *(_QWORD *)(v3 + 72);
    v25 = *(_QWORD *)(v3 + 56);
    v23 = *(_WORD *)(v3 + 120);
    v26[0] = v25;
    v27 = v9;
    v28 = v24 & 0xFF01;
    v29 = v14;
    v30 = v13;
    v31 = v12;
    v32 = v11;
    v33 = v10;
    v15 = v10;
    v34 = v23;
    v16 = v1[27];
    v17 = v1[28];
    sub_100007BBC(v1 + 24, v16);
    v22 = *(void (**)(uint64_t, uint64_t))(v17 + 88);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v15);
    v22(v16, v17);
    v18 = sub_10016B3F0((uint64_t)v26);
    sub_10007ED6C(v25, v9, v24, v14, v13, v12, v11, v15);
    v19 = *(unsigned __int8 *)(v2 + 41);
    if ((_DWORD)v19 != v18)
    {
      v20 = sub_100003DB8(&qword_10032B0E0);
      v21 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v20, v21);
    }
    *(_BYTE *)(v2 + 41) = v18;
    return sub_100125854(v19);
  }
  return result;
}

uint64_t sub_10016B3F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  Swift::Int v27;
  uint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  const char *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53[3];
  uint64_t v54;
  _BYTE v55[30];
  char v56;
  char v57;

  v2 = v1;
  v4 = type metadata accessor for ConnectionClosed(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (unsigned __int8 *)v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_1003180C0);
  v11 = __chkstk_darwin(v9, v10);
  v13 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)v53 - v15;
  sub_10001AE10((_BYTE *)a1, &v56);
  sub_10001AE10(&v56, &v57);
  if (v57 != 5
    || (v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 112)
            + OBJC_IVAR____TtC8SOSBuddy21ConnectionClosedModel__connectionClosed,
        swift_beginAccess(v17, v55, 0, 0),
        sub_10000B234(v17, (uint64_t)v16, &qword_1003180C0),
        LODWORD(v17) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v16, 1, v4),
        sub_100007FF0((uint64_t)v16, &qword_1003180C0),
        (_DWORD)v17 != 1))
  {
    if (*(_BYTE *)(*(_QWORD *)(v2 + 32) + 40) == 1)
    {
      v21 = *(_QWORD *)(v2 + 48);
      v22 = *(_QWORD *)(v21 + 112) + OBJC_IVAR____TtC8SOSBuddy21ConnectionClosedModel__connectionClosed;
      swift_beginAccess(v22, v53, 0, 0);
      sub_10000B234(v22, (uint64_t)v13, &qword_1003180C0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
      {
        sub_100007FF0((uint64_t)v13, &qword_1003180C0);
        v23 = *(_QWORD *)(v21 + 32);
        if (*(_QWORD *)(v23 + 64))
        {
          v24 = *(unsigned __int8 *)(v23 + 56);
          if (v24)
          {
            if (v24 != 5)
            {
              v25 = *(unsigned __int8 *)(v2 + 337);
              result = 1;
              if (v25 == 5 || v25 != v24)
                return result;
            }
          }
        }
        goto LABEL_24;
      }
      sub_100025B88((uint64_t)v13, (uint64_t)v8);
      v27 = sub_1002096C4((uint64_t)&off_1002E1E10);
      v28 = *(_QWORD *)&v8[*(int *)(v4 + 24)];
      swift_bridgeObjectRetain(v28);
      v29 = sub_100164494(v27, v28);
      swift_bridgeObjectRelease(v28);
      swift_bridgeObjectRelease(v27);
      if ((v29 & 1) != 0)
      {
        sub_10000AFFC((uint64_t)v8, type metadata accessor for ConnectionClosed);
        goto LABEL_24;
      }
      v30 = *v8;
      sub_10000AFFC((uint64_t)v8, type metadata accessor for ConnectionClosed);
      if (!v30)
      {
LABEL_24:
        if ((*(_WORD *)(*(_QWORD *)(v2 + 120) + 56) & 0xC100) != 0)
          return 6;
        else
          return 7;
      }
    }
    else
    {
      v26 = *(unsigned __int16 *)(*(_QWORD *)(v2 + 120) + 56);
      if (v26 >> 9 <= 0x7E)
      {
        if (v26 >= 0x4000)
          return 1;
        else
          return 10;
      }
    }
    return 1;
  }
  result = *(unsigned __int8 *)(a1 + 17);
  if (!*(_BYTE *)(a1 + 17))
  {
    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_10000D744(v31, (uint64_t)qword_10033FD18);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v33, v34))
      goto LABEL_32;
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    v36 = "Inconsistent state: transport == .unknown when status == .on";
    goto LABEL_31;
  }
  if ((_DWORD)result != 1)
    return result;
  v19 = *(_QWORD *)(a1 + 32);
  if (!sub_100067058(0, v19))
  {
    if (sub_100067058(1u, v19))
    {
      if (*(unsigned __int8 *)(*(_QWORD *)(v2 + 88) + 248) - 1 >= 2)
        return 8;
      else
        return 5;
    }
    if (sub_100067058(4u, v19))
      return 9;
    if (*(_BYTE *)(*(_QWORD *)(v2 + 32) + 40) == 1)
    {
      if (sub_100067058(2u, v19))
        return 6;
      if (sub_100067058(3u, v19))
      {
        v37 = *(_QWORD *)(v2 + 120);
        v38 = *(unsigned __int16 *)(v37 + 56);
        if (v38 >> 9 <= 0x7E && (v38 & 0xC000) == 0x4000)
        {
          if ((v38 - 1) >= 5u)
            return 11;
          else
            return 6;
        }
        else
        {
          if (qword_100315820 != -1)
            swift_once(&qword_100315820, sub_1000D95E4);
          v41 = type metadata accessor for Logger(0);
          sub_10000D744(v41, (uint64_t)qword_10033FD18);
          v43 = swift_retain_n(v2, 2, v42);
          v44 = Logger.logObject.getter(v43);
          v45 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v44, v45))
          {
            v46 = (uint8_t *)swift_slowAlloc(12, -1);
            v47 = swift_slowAlloc(32, -1);
            v53[0] = v47;
            *(_DWORD *)v46 = 136315138;
            LOWORD(v54) = *(_WORD *)(v37 + 56);
            v48 = sub_100003DB8(&qword_10031CBD8);
            v50 = String.init<A>(describing:)(&v54, v48, v49);
            v52 = v51;
            v54 = sub_100172BEC(v50, v51, v53);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v46 + 4, v46 + 12);
            swift_release_n(v2, 2);
            swift_bridgeObjectRelease(v52);
            _os_log_impl((void *)&_mh_execute_header, v44, v45, "Inconsistent state: tryOutModel state (%s does not match stewieModel state (.tryOut service is active), falling back to .explorer stage", v46, 0xCu);
            swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v47, -1, -1);
            swift_slowDealloc(v46, -1, -1);

          }
          else
          {

            swift_release_n(v2, 2);
          }
          return 6;
        }
      }
    }
    else
    {
      if (sub_100067058(3u, v19))
        return 11;
      if (*(_QWORD *)(v19 + 16))
        return 5;
    }
    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    v39 = type metadata accessor for Logger(0);
    v40 = sub_10000D744(v39, (uint64_t)qword_10033FD18);
    v33 = Logger.logObject.getter(v40);
    v34 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v33, v34))
    {
LABEL_32:

      return 0;
    }
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    v36 = "Inconsistent state: no known active services when status == .on";
LABEL_31:
    _os_log_impl((void *)&_mh_execute_header, v33, v34, v36, v35, 2u);
    swift_slowDealloc(v35, -1, -1);
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v2 + 56);
  if (*(unsigned __int8 *)(v20 + 128) - 1 < 2)
    return 5;
  if (*(_BYTE *)(v20 + 128) || *(unsigned __int8 *)(v20 + 96) >= 2u)
    return 4;
  else
    return 3;
}

uint64_t sub_10016BAC0(char a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[24];

  LODWORD(v2) = *(unsigned __int8 *)(v1[4] + 41);
  if ((a1 & 1) == 0)
  {
    if ((_DWORD)v2 != 3)
      return 0;
    v3 = *(_QWORD *)(v1[7] + 88);
    if (!v3)
      return 0;
    swift_beginAccess(v3 + 48, v7, 0, 0);
    v2 = *(_QWORD *)(v3 + 144);
    v4 = *(_QWORD *)(v2 + 16);
    if (v4)
      return *(unsigned __int8 *)(v4 + v2 + 31) != 4;
    __break(1u);
  }
  if ((_DWORD)v2 != 8)
    return 0;
  v5 = *(_QWORD *)(v1[11] + 104);
  if (!v5)
    return 0;
  result = swift_beginAccess(v5 + 48, v7, 0, 0);
  v2 = *(_QWORD *)(v5 + 144);
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
    return *(unsigned __int8 *)(v4 + v2 + 31) != 4;
  __break(1u);
  return result;
}

uint64_t sub_10016BB74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];

  if (*(_BYTE *)(*(_QWORD *)(v0 + 32) + 41) == 3)
  {
    v1 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 88);
    if (v1)
    {
      result = swift_beginAccess(v1 + 48, v5, 0, 0);
      v3 = *(_QWORD *)(v1 + 144);
      v4 = *(_QWORD *)(v3 + 16);
      if (!v4)
      {
        __break(1u);
        return result;
      }
      if (*(_BYTE *)(v4 + v3 + 31) != 4)
        return 0;
    }
  }
  if ((sub_10016BAC0(1) & 1) != 0)
    return 1;
  else
    return 2;
}

void sub_10016BC00(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  __int128 v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v2 = v1;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v39 = type metadata accessor for Logger(0);
  sub_10000D744(v39, (uint64_t)qword_10033FD18);
  sub_1000C71A0((uint64_t)a1);
  v4 = sub_1000C71A0((uint64_t)a1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v43 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = *((_OWORD *)a1 + 1);
    v40 = *(_OWORD *)a1;
    v41 = v9;
    v42 = *((_OWORD *)a1 + 2);
    sub_1000C71A0((uint64_t)a1);
    v11 = String.init<A>(describing:)(&v40, &type metadata for DeepLinkHandler.EmergencyRequestContext, v10);
    v13 = v12;
    *(_QWORD *)&v40 = sub_100172BEC(v11, v12, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, (char *)&v40 + 8, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v13);
    sub_1000C71C8((uint64_t)a1);
    sub_1000C71C8((uint64_t)a1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "handleEmergencyRequestStewie: %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    sub_1000C71C8((uint64_t)a1);
    sub_1000C71C8((uint64_t)a1);
  }

  v15 = swift_retain_n(v1, v14);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v20.n128_u64[0] = 136446210;
    *(_DWORD *)v18 = 136446210;
    *(_QWORD *)&v40 = v19;
    LOBYTE(v43) = *(_BYTE *)(*(_QWORD *)(v2 + 32) + 41);
    v21 = String.init<A>(describing:)(&v43, &type metadata for AppRuntimeStateModel.Stage, v20);
    v23 = v22;
    v43 = sub_100172BEC(v21, v22, (uint64_t *)&v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v18 + 4, v18 + 12);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "handleEmergencyRequestStewie: current stage: %{public}s", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

    swift_release_n(v2);
  }
  sub_100235F44();
  v24 = *(_QWORD *)(v2 + 96);
  if (qword_100315828 != -1)
    swift_once(&qword_100315828, sub_1000D95FC);
  v25 = sub_10000D744(v39, (uint64_t)qword_10033FD30);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "cancelAllAlerts", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

  v29 = *(_QWORD *)(v24 + 56);
  if (v29)
  {
    v30 = *(_QWORD *)(v24 + 48);
    swift_bridgeObjectRetain(*(_QWORD *)(v24 + 56));
    sub_100186480(v30, v29);
    swift_bridgeObjectRelease(v29);
  }
  v31 = *((_QWORD *)a1 + 1);
  v32 = a1[16];
  v33 = *((_QWORD *)a1 + 3);
  v34 = a1[32];
  *(_QWORD *)&v40 = *a1;
  *((_QWORD *)&v40 + 1) = v31;
  *(_QWORD *)&v41 = v32;
  *((_QWORD *)&v41 + 1) = v33;
  LOBYTE(v42) = v34;
  sub_10022C468((uint64_t)&v40);
  sub_10016D6FC(a1[34]);
  sub_10021981C(2);
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v35 = sub_10000D744(v39, (uint64_t)qword_10033FD48);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "fetchConnectionAssistantState", v38, 2u);
    swift_slowDealloc(v38, -1, -1);
  }

  sub_1000EF86C(0, 0);
}

void sub_10016C0EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  __int128 v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v2 = v1;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v40 = type metadata accessor for Logger(0);
  sub_10000D744(v40, (uint64_t)qword_10033FD18);
  sub_100124020(a1);
  v4 = sub_100124020(a1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    *(_DWORD *)v7 = 136446210;
    v9 = *(_OWORD *)(a1 + 16);
    v41 = *(_OWORD *)a1;
    v42 = v9;
    v43 = *(_OWORD *)(a1 + 32);
    v44 = *(_QWORD *)(a1 + 48);
    v45 = v8;
    sub_100124020(a1);
    v11 = String.init<A>(describing:)(&v41, &type metadata for DeepLinkHandler.RoadsideAssistanceRequestContext, v10);
    v13 = v12;
    *(_QWORD *)&v41 = sub_100172BEC(v11, v12, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, (char *)&v41 + 8, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v13);
    sub_100124048(a1);
    sub_100124048(a1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "handleRoadsideAssistanceRequestStewie: %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    sub_100124048(a1);
    sub_100124048(a1);
  }

  v15 = swift_retain_n(v1, v14);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v20.n128_u64[0] = 136446210;
    *(_DWORD *)v18 = 136446210;
    *(_QWORD *)&v41 = v19;
    LOBYTE(v45) = *(_BYTE *)(*(_QWORD *)(v2 + 32) + 41);
    v21 = String.init<A>(describing:)(&v45, &type metadata for AppRuntimeStateModel.Stage, v20);
    v23 = v22;
    v45 = sub_100172BEC(v21, v22, (uint64_t *)&v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v18 + 4, v18 + 12);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "handleRoadsideAssistanceRequestStewie: current stage: %{public}s", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

    swift_release_n(v2);
  }
  sub_100235F44();
  v24 = *(_QWORD *)(v2 + 96);
  if (qword_100315828 != -1)
    swift_once(&qword_100315828, sub_1000D95FC);
  v25 = sub_10000D744(v40, (uint64_t)qword_10033FD30);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "cancelAllAlerts", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

  v29 = *(_QWORD *)(v24 + 56);
  if (v29)
  {
    v30 = *(_QWORD *)(v24 + 48);
    swift_bridgeObjectRetain(*(_QWORD *)(v24 + 56));
    sub_100186480(v30, v29);
    swift_bridgeObjectRelease(v29);
  }
  v31 = *(unsigned __int8 *)(a1 + 8);
  v32 = *(_QWORD *)(a1 + 16);
  v33 = *(unsigned __int8 *)(a1 + 24);
  v34 = *(_QWORD *)(a1 + 32);
  v35 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)&v41 = *(_QWORD *)a1;
  *((_QWORD *)&v41 + 1) = v31;
  *(_QWORD *)&v42 = v32;
  *((_QWORD *)&v42 + 1) = v33;
  *(_QWORD *)&v43 = v34;
  BYTE8(v43) = v35;
  sub_10005B21C((uint64_t)&v41);
  sub_10016D6FC(*(_BYTE *)(a1 + 42));
  sub_10021981C(2);
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v36 = sub_10000D744(v40, (uint64_t)qword_10033FD48);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "fetchConnectionAssistantState", v39, 2u);
    swift_slowDealloc(v39, -1, -1);
  }

  sub_1000EF86C(0, 0);
}

uint64_t sub_10016C5E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  __int128 v10;
  __n128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _OWORD v19[3];
  uint64_t v20;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = swift_retain_n(v3, v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v20 = v9;
    *(_DWORD *)v8 = 136446210;
    v10 = *(_OWORD *)(a1 + 16);
    v19[0] = *(_OWORD *)a1;
    v19[1] = v10;
    v19[2] = *(_OWORD *)(a1 + 32);
    v11 = swift_retain(v3);
    v12 = String.init<A>(describing:)(v19, &type metadata for DeepLinkHandler.AlertRequestContext, v11);
    v14 = v13;
    *(_QWORD *)&v19[0] = sub_100172BEC(v12, v13, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, (char *)v19 + 8, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v14);
    sub_1000C71C8(a1);
    sub_1000C71C8(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "handleAlertRequest: %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    sub_1000C71C8(a1);
    sub_1000C71C8(a1);
  }

  v15 = swift_allocObject(&unk_1002F3E00, 24, 7);
  swift_weakInit(v15 + 16);
  v16 = swift_allocObject(&unk_1002F3EA0, 72, 7);
  *(_QWORD *)(v16 + 16) = v15;
  v17 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v16 + 24) = *(_OWORD *)a1;
  *(_OWORD *)(v16 + 40) = v17;
  *(_OWORD *)(v16 + 56) = *(_OWORD *)(a1 + 32);
  sub_1000C71A0(a1);
  swift_retain(v15);
  sub_10005CBDC((void (*)(__n128))sub_100175604, v16);
  swift_release(v15);
  return swift_release(v16);
}

uint64_t sub_10016C83C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];
  _QWORD v9[5];
  _QWORD v10[5];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_10016C8F4(a1, *(_QWORD *)(a3 + 8), *(_BYTE *)(a3 + 16), v9);
    sub_10016C8F4(a1, *(_QWORD *)(a3 + 24), *(_BYTE *)(a3 + 32), v10);
    sub_100174B28((_BYTE *)a3, v9, v10);
    sub_100064870(v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
    sub_100064870(v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_10016C8F4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((a3 & 1) == 0 && (v5 = result, *(_QWORD *)(result + 16)) && (result = sub_10018647C(a2), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(v5 + 56) + 40 * result;
    v8 = *(_QWORD *)v7;
    v9 = *(_QWORD *)(v7 + 8);
    v10 = *(_QWORD *)(v7 + 16);
    v11 = *(unsigned __int8 *)(v7 + 24);
    v12 = *(unsigned __int8 *)(v7 + 25);
    v13 = *(_QWORD *)(v7 + 32);
    v14 = 256;
    if (!v12)
      v14 = 0;
    v15 = v14 | v11;
    swift_bridgeObjectRetain(v13);
    result = swift_bridgeObjectRetain(v10);
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v15 = 0;
    v13 = 0;
  }
  *a4 = v8;
  a4[1] = v9;
  a4[2] = v10;
  a4[3] = v15;
  a4[4] = v13;
  return result;
}

uint64_t sub_10016C9A0(char a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  char v9;
  uint8_t *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FD18);
  v6 = swift_retain_n(a2, v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v24 = v4;
    v9 = a1;
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v26 = v11;
    v12.n128_u64[0] = 136446210;
    *(_DWORD *)v10 = 136446210;
    v13 = String.init<A>(describing:)(v11, &type metadata for OfferCommandKind, v12);
    v15 = v14;
    v25 = sub_100172BEC(v13, v14, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v10 + 4, v10 + 12);
    swift_release_n(a2);
    v16 = v15;
    a1 = v9;
    v4 = v24;
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "handleOfferRequest: %{public}s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(a2);
  }
  v17 = swift_allocObject(&unk_1002F3E00, 24, 7);
  swift_weakInit(v17 + 16);
  v18 = swift_allocObject(&unk_1002F3E78, 40, 7);
  *(_QWORD *)(v18 + 16) = v17;
  *(_BYTE *)(v18 + 24) = a1 & 1;
  *(_QWORD *)(v18 + 32) = a2;
  swift_retain(a2);
  swift_retain(v17);
  sub_10016D6FC(0);
  sub_10021981C(2);
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v19 = sub_10000D744(v4, (uint64_t)qword_10033FD48);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "fetchConnectionAssistantState", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  sub_1000EF86C((uint64_t)sub_1001755C8, v18);
  swift_release(v17);
  return swift_release(v18);
}

uint64_t sub_10016CCA8(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    v8 = *(_QWORD *)(result + 80);
    swift_retain(v8);
    sub_1000231FC(a2 & 1, a3);
    swift_release(v7);
    return swift_release(v8);
  }
  return result;
}

void sub_10016CD2C(char a1, uint64_t a2)
{
  sub_10016CD64(a1, a2, (uint64_t)&type metadata for DeepLinkHandler.MessagingRequestContext, "handleMessagingRequestStewie: %{public}s", "handleMessagingRequestStewie: current stage: %{public}s");
}

void sub_10016CD48(char a1, uint64_t a2)
{
  sub_10016CD64(a1, a2, (uint64_t)&type metadata for DeepLinkHandler.FindMyRequestContext, "handleFindMyRequestStewie: %{public}s", "handleFindMyRequestStewie: current stage: %{public}s");
}

void sub_10016CD64(char a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v8 = v5;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v10 = type metadata accessor for Logger(0);
  sub_10000D744(v10, (uint64_t)qword_10033FD18);
  v12 = swift_retain_n(a2, v11);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    *(_DWORD *)v15 = 136446210;
    v38 = a2;
    v39 = v16;
    LOBYTE(v37) = a1 & 1;
    v17 = swift_retain(a2);
    v18 = String.init<A>(describing:)(&v37, a3, v17);
    v20 = v19;
    v37 = sub_100172BEC(v18, v19, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v15 + 4, v15 + 12);
    swift_release_n(a2);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, a4, v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_release_n(a2);
  }
  v22 = swift_retain_n(v5, v21);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v27.n128_u64[0] = 136446210;
    *(_DWORD *)v25 = 136446210;
    v37 = v26;
    LOBYTE(v39) = *(_BYTE *)(*(_QWORD *)(v8 + 32) + 41);
    v28 = String.init<A>(describing:)(&v39, &type metadata for AppRuntimeStateModel.Stage, v27);
    v30 = v29;
    v39 = sub_100172BEC(v28, v29, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v25 + 4, v25 + 12);
    swift_release_n(v8);
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, a5, v25, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

    swift_release_n(v8);
  }
  sub_100235F44();
  sub_10016D6FC(a1 & 1);
  sub_10021981C(2);
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v31 = sub_10000D744(v10, (uint64_t)qword_10033FD48);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "fetchConnectionAssistantState", v34, 2u);
    swift_slowDealloc(v34, -1, -1);
  }

  sub_1000EF86C(0, 0);
}

void sub_10016D154(__int16 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = v2;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v6 = a1 & 0x100;
  v7 = type metadata accessor for Logger(0);
  sub_10000D744(v7, (uint64_t)qword_10033FD18);
  v9 = swift_retain_n(a2, v8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  v33 = a1;
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    *(_DWORD *)v12 = 136446210;
    v35 = a2;
    v36 = v13;
    LOBYTE(v34) = a1;
    BYTE1(v34) = (unsigned __int16)(a1 & 0x100) >> 8;
    v14 = swift_retain(a2);
    v15 = String.init<A>(describing:)(&v34, &type metadata for DeepLinkHandler.OfferTryOutRequestContext, v14);
    v17 = v16;
    v34 = sub_100172BEC(v15, v16, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v12 + 4, v12 + 12);
    swift_release_n(a2);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "handleOfferTryOutRequest: %{public}s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    v18 = v13;
    v3 = v2;
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    v19 = swift_release_n(a2);
  }
  v20 = *(_QWORD *)(v3 + 120);
  v21 = *(unsigned __int16 *)(v20 + 56);
  if (v21 >> 9 > 0x7E)
  {
    v22 = v33;
LABEL_14:
    v27 = sub_100003DB8(&qword_10032B0E0);
    v28 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v27, v28);
LABEL_15:
    *(_WORD *)(v20 + 56) = v22;
    sub_1002361A8(v21);
    goto LABEL_16;
  }
  if (v21 >> 14 != 1)
  {
    v22 = v33;
    if (!(v21 >> 14) && !(v21 & 0x100 | (v21 ^ v33)))
      goto LABEL_15;
    goto LABEL_14;
  }
  v23 = v6;
  v24 = Logger.logObject.getter(v19);
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "handleOfferTryOutRequest: TryOut mode is already active, ignoring", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

  v6 = v23;
LABEL_16:
  sub_10016D6FC(v6 != 0);
  sub_10021981C(2);
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v29 = sub_10000D744(v7, (uint64_t)qword_10033FD48);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "fetchConnectionAssistantState", v32, 2u);
    swift_slowDealloc(v32, -1, -1);
  }

  sub_1000EF86C(0, 0);
}

void sub_10016D524(__int16 a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  char v10;
  uint8_t *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = HIBYTE(a1);
  v4 = a1 & 1;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FD18);
  v7 = swift_retain_n(a2, v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = v3;
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    *(_DWORD *)v11 = 136446210;
    v18 = a2;
    v19 = v12;
    LOBYTE(v17) = v4;
    BYTE1(v17) = v10;
    v13 = swift_retain(a2);
    v14 = String.init<A>(describing:)(&v17, &type metadata for DeepLinkHandler.OpenCommandContext, v13);
    v16 = v15;
    v17 = sub_100172BEC(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v11 + 4, v11 + 12);
    swift_release_n(a2);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "handleOpenCommand: %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_release_n(a2);
  }
  sub_10016D6FC(v4);
}

void sub_10016D6FC(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  _QWORD aBlock[5];
  uint64_t v49;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchTime(0);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = __chkstk_darwin(v13, v15);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v16, v19);
  v22 = (char *)&v40 - v21;
  if ((*(_BYTE *)(v2[3] + 80) & 1) != 0)
  {
    v47 = v2[3];
    sub_10016B1B8();
    if ((a1 & 1) != 0)
      goto LABEL_5;
  }
  else
  {
    if ((a1 & 1) != 0)
    {
      v47 = v2[3];
      v41 = v20;
      v45 = v9;
      v24 = v2[27];
      v23 = v2[28];
      sub_100007BBC(v2 + 24, v24);
      v25 = *(void (**)(uint64_t, uint64_t))(v23 + 96);
      v44 = v5;
      v25(v24, v23);
      sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
      v42 = static OS_dispatch_queue.main.getter(v26);
      static DispatchTime.now()(v42);
      + infix(_:_:)(v18, 0.5);
      v43 = *(void (**)(char *, uint64_t))(v14 + 8);
      v27 = v41;
      v43(v18, v41);
      v28 = swift_allocObject(&unk_1002F3E00, 24, 7);
      swift_weakInit(v28 + 16, v2);
      aBlock[4] = sub_1001755A4;
      v49 = v28;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1001BAACC;
      aBlock[3] = &unk_1002F3E40;
      v29 = _Block_copy(aBlock);
      swift_release(v49);
      static DispatchQoS.unspecified.getter(v30);
      aBlock[0] = _swiftEmptyArrayStorage;
      v31 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v32 = sub_100003DB8((uint64_t *)&unk_1003178D0);
      v33 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v32, v33, v4, v31);
      v34 = (void *)v42;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v22, v12, v8, v29);
      _Block_release(v29);

      (*(void (**)(char *, uint64_t))(v44 + 8))(v8, v4);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v12, v45);
      v43(v22, v27);
      sub_10016B1B8();
LABEL_5:
      v35 = swift_allocObject(&unk_1002F3E00, 24, 7);
      swift_weakInit(v35 + 16, v2);
      swift_retain(v35);
      sub_100125058((uint64_t)sub_10017559C, v35);
      swift_release_n(v35);
      return;
    }
    sub_10016B1B8();
  }
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v36 = type metadata accessor for Logger(0);
  v37 = sub_10000D744(v36, (uint64_t)qword_10033FD18);
  v47 = Logger.logObject.getter(v37);
  v38 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v47, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v38, "_postHandleRequest: skipping bringForeground", v39, 2u);
    swift_slowDealloc(v39, -1, -1);
  }

}

uint64_t sub_10016DB24(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_10016B1B8();
    return swift_release(v3);
  }
  return result;
}

void sub_10016DB78(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _BYTE v11[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    if ((a1 & 1) == 0 && (*(_BYTE *)(*(_QWORD *)(Strong + 72) + 48) & 1) != 0)
    {
      *(_BYTE *)(Strong + 336) = 1;
      if (qword_100315820 != -1)
        swift_once(&qword_100315820, sub_1000D95E4);
      v6 = type metadata accessor for Logger(0);
      v7 = sub_10000D744(v6, (uint64_t)qword_10033FD18);
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Scheduled delayed bringForegroundOnUnlock request", v10, 2u);
        swift_slowDealloc(v10, -1, -1);
        swift_release(v5);

        return;
      }

    }
    else
    {
      *(_BYTE *)(Strong + 336) = 2;
    }
    swift_release(v5);
  }
}

BOOL sub_10016DCB4()
{
  _QWORD *v0;
  uint64_t v1;
  int v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v1 = v0[4];
  v2 = *(unsigned __int8 *)(v1 + 41);
  result = 1;
  switch(*(_BYTE *)(v1 + 41))
  {
    case 3:
      v4 = *(_QWORD *)(v0[7] + 88);
      if (!v4)
        return v2 == 9;
      swift_beginAccess(v4 + 48, v10, 0, 0);
      v5 = *(_QWORD *)(v4 + 144);
      v6 = *(_QWORD *)(v5 + 16);
      if (!v6)
      {
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x10016DDACLL);
      }
      return *(_BYTE *)(v6 + v5 + 31) == 4 || v2 == 9;
    case 5:
      return result;
    case 6:
      if ((*(_BYTE *)(v1 + 42) & 1) != 0)
        return result;
      return 0;
    case 8:
      v7 = *(_QWORD *)(v0[11] + 104);
      if (!v7)
        return 0;
      swift_beginAccess(v7 + 48, v10, 0, 0);
      v8 = *(_QWORD *)(v7 + 144);
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
        return *(_BYTE *)(v9 + v8 + 31) == 4;
      goto LABEL_15;
    default:
      return v2 == 9;
  }
}

uint64_t sub_10016DDC4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 104));
  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 128));
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(*(_QWORD *)(v0 + 144));

  swift_release(*(_QWORD *)(v0 + 160));
  swift_release(*(_QWORD *)(v0 + 168));
  swift_release(*(_QWORD *)(v0 + 176));
  swift_release(*(_QWORD *)(v0 + 184));
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((_QWORD *)(v0 + 192));
  swift_release(*(_QWORD *)(v0 + 232));
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((_QWORD *)(v0 + 240));
  swift_release(*(_QWORD *)(v0 + 280));
  swift_release(*(_QWORD *)(v0 + 288));
  swift_release(*(_QWORD *)(v0 + 296));
  swift_release(*(_QWORD *)(v0 + 304));
  swift_release(*(_QWORD *)(v0 + 312));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 320));
  swift_release(*(_QWORD *)(v0 + 328));
  return v0;
}

uint64_t sub_10016DED8()
{
  uint64_t v0;

  sub_10016DDC4();
  return swift_deallocClassInstance(v0, 338, 7);
}

uint64_t type metadata accessor for SOSBuddyEnvironment()
{
  return objc_opt_self(_TtC8SOSBuddy19SOSBuddyEnvironment);
}

_QWORD *sub_10016DF18()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t MyAgent;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _UNKNOWN **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  __n128 v38;

  v1 = v0;
  v2 = type metadata accessor for AppEvents();
  swift_allocObject(v2, 208, 7);
  v0[2] = sub_1000DF260();
  v3 = type metadata accessor for AppPropertiesModel();
  swift_allocObject(v3, 82, 7);
  v0[3] = sub_100124234();
  v4 = type metadata accessor for AppRuntimeStateModel();
  swift_allocObject(v4, 43, 7);
  v0[4] = sub_100125D24();
  v5 = type metadata accessor for BannerAppearanceModel(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v0[5] = sub_1002287B4();
  v6 = type metadata accessor for ConnectionAssistantModels();
  swift_allocObject(v6, 184, 7);
  v0[6] = sub_1001C022C();
  v7 = type metadata accessor for EmergencyModel();
  swift_allocObject(v7, 280, 7);
  v0[7] = sub_10022C660();
  v8 = type metadata accessor for GeoLocationModel();
  swift_allocObject(v8, 96, 7);
  v0[8] = sub_100015BC8();
  v9 = type metadata accessor for LockScreenModel();
  swift_allocObject(v9, 49, 7);
  v0[9] = sub_100118E18();
  v10 = type metadata accessor for OfferModel();
  swift_allocObject(v10, 59, 7);
  v0[10] = sub_100022704();
  v11 = type metadata accessor for RoadsideAssistanceModel();
  swift_allocObject(v11, 376, 7);
  v0[11] = sub_100059C54();
  v12 = type metadata accessor for TransitionAlertModel();
  swift_allocObject(v12, 104, 7);
  v0[12] = sub_100187490();
  v13 = type metadata accessor for StewieStateModel();
  swift_allocObject(v13, 122, 7);
  v0[13] = sub_10007E3EC();
  v14 = type metadata accessor for TimeZoneModel(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v0[14] = sub_10007923C();
  v15 = type metadata accessor for TryOutModel(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v0[15] = sub_1002386F4();
  v16 = type metadata accessor for OffTheGridModel();
  swift_allocObject(v16, 56, 7);
  v0[16] = sub_10001E0DC();
  v17 = type metadata accessor for UIMetrics();
  swift_allocObject(v17, 120, 7);
  v0[17] = sub_10006F51C();
  v18 = type metadata accessor for BackgroundActivityAgent();
  swift_allocObject(v18, 24, 7);
  v0[18] = sub_1000D89F4();
  v0[19] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CoreTelephonySPIAgent()), "init");
  MyAgent = type metadata accessor for FindMyAgent();
  swift_allocObject(MyAgent, 16, 7);
  v0[20] = sub_100078AC0();
  v20 = type metadata accessor for MessagesAgent(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v0[21] = sub_10013EF9C();
  v21 = type metadata accessor for SettingsAgent();
  swift_allocObject(v21, 16, 7);
  v0[22] = sub_1000FFC10();
  v22 = type metadata accessor for TelephonyUtilitiesAgent();
  swift_allocObject(v22, 40, 7);
  v0[23] = sub_1001EDC54();
  if (SBUIIsSystemApertureEnabled())
  {
    v23 = type metadata accessor for _SessionEnvironmentBannerSession();
    swift_allocObject(v23, 96, 7);
    v24 = sub_10023EC28();
    v25 = &off_1002FC298;
  }
  else
  {
    v23 = type metadata accessor for _SessionEnvironmentBannerKitStatusBar();
    swift_allocObject(v23, 96, 7);
    v24 = sub_1002413BC();
    v25 = &off_1002FC228;
  }
  v0[27] = v23;
  v0[28] = v25;
  v0[24] = v24;
  v26 = type metadata accessor for DeepLinkHandler();
  swift_allocObject(v26, 80, 7);
  v0[29] = sub_10013C5F0();
  v27 = type metadata accessor for _HapticFeedback(0);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v28 = sub_1001999C0();
  v0[33] = v27;
  v0[34] = &off_1002F5B38;
  v0[30] = v28;
  v29 = type metadata accessor for VoiceOverFeedback();
  v30 = (_QWORD *)swift_allocObject(v29, 40, 7);
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100209204((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v31 = &_swiftEmptySetSingleton;
  }
  v30[3] = 0;
  v30[4] = 0;
  v30[2] = v31;
  v1[35] = v30;
  v32 = type metadata accessor for LockScreenNotification(0);
  swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  v1[36] = sub_100023748();
  v33 = type metadata accessor for SOSBuddyPersistence();
  swift_allocObject(v33, 113, 7);
  v1[37] = sub_10012FE1C();
  v34 = type metadata accessor for Analytics();
  swift_allocObject(v34, 40, 7);
  v1[38] = sub_1001124D4();
  v35 = type metadata accessor for DeviceOrientationTracker(0);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  v1[39] = sub_10013E328();
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100209204((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v36 = &_swiftEmptySetSingleton;
  }
  v1[40] = v36;
  v37 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  v1[41] = PassthroughSubject.init()(v38);
  *((_WORD *)v1 + 168) = 1282;
  return v1;
}

id sub_10016E3EC(void *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  objc_class *v32;
  id v33;
  char *v34;
  void *v35;
  id v36;
  char *v37;
  void *v38;
  char *v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v44;
  objc_super v45;
  uint64_t __src[44];
  char v47;
  uint64_t __dst[44];
  _QWORD v49[45];

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v3 = a1;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    __src[0] = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = objc_msgSend(v3, "requestIdentifier");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v49[0] = sub_100172BEC(v9, v11, __src);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v49, &v49[1], v6 + 4, v6 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "createBannerContentFor(%{public}s)", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
  v12 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v13 = *(_QWORD **)(v44 + 136);
  v14 = v13 + 6;
  v15 = v13[9];
  v16 = v13[10];
  sub_100007BBC(v13 + 6, v15);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v16 + 8))(__src, v15, v16);
  v17 = (void *)objc_opt_self(UIColor);
  v18 = objc_msgSend(v17, "systemGray5Color");
  objc_msgSend(v12, "setBackgroundColor:", v18);

  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(__src);
  objc_msgSend(v12, "setAutoresizingMask:", 18);
  v19 = objc_msgSend(v12, "layer");
  v20 = v13[9];
  v21 = v13[10];
  sub_100007BBC(v14, v20);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v21 + 8))(__src, v20, v21);
  objc_msgSend(v19, "setCornerRadius:", 30.0);

  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(__src);
  v22 = objc_msgSend(v12, "layer");
  objc_msgSend(v22, "setCornerCurve:", kCACornerCurveContinuous);

  v23 = objc_msgSend(v12, "layer");
  objc_msgSend(v23, "setMasksToBounds:", 1);

  v24 = type metadata accessor for BannerAppearanceModel(0);
  v25 = sub_1000052EC(&qword_100316AA8, type metadata accessor for BannerAppearanceModel, (uint64_t)&unk_10024D2FC);
  v26 = EnvironmentObject.init()(v24, v25);
  v28 = sub_100170F30(v26, v27, __src);
  LOBYTE(v24) = static Edge.Set.all.getter(v28);
  swift_release(v26);
  memcpy(__dst, __src, sizeof(__dst));
  memcpy(v49, __dst, 0x160uLL);
  v29 = *(_QWORD *)(v44 + 40);
  v30 = *(double *)(v29 + 32);
  v31 = *(double *)(v29 + 40);
  v32 = (objc_class *)sub_100003DB8(&qword_1003229C8);
  v33 = objc_allocWithZone(v32);
  objc_allocWithZone((Class)sub_100003DB8(&qword_1003229D0));
  memcpy(__src, v49, sizeof(__src));
  v47 = v24;
  sub_1001750C0(__dst);
  sub_1001750C0(__dst);
  v34 = (char *)v33;
  v35 = (void *)UIHostingController.init(rootView:)(__src);
  *(_QWORD *)&v34[qword_100316EE0] = v35;
  v36 = v35;
  UIHostingController.safeAreaRegions.setter(0);

  v45.receiver = v34;
  v45.super_class = v32;
  v37 = (char *)objc_msgSendSuper2(&v45, "initWithFrame:", 0.0, 0.0, v30, v31);
  v38 = *(void **)&v37[qword_100316EE0];
  v39 = v37;
  v40 = objc_msgSend(v38, "view");
  if (v40)
  {
    v41 = v40;
    v42 = objc_msgSend(v17, "clearColor");
    objc_msgSend(v41, "setBackgroundColor:", v42);

    objc_msgSend(v41, "setFrame:", 0.0, 0.0, v30, v31);
    objc_msgSend(v39, "addSubview:", v41);
    objc_msgSend(v41, "setAutoresizesSubviews:", 1);

  }
  objc_msgSend(v39, "setAutoresizesSubviews:", 1);
  objc_msgSend(v39, "setAutoresizingMask:", 16);

  sub_100175338(__dst);
  objc_msgSend(v12, "addSubview:", v39);

  sub_100175338(__dst);
  return v12;
}

char *sub_10016E950(void *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  char v17;
  objc_class *v18;
  _BYTE *v19;
  char *v20;
  void *v21;
  id v22;
  char *v23;
  void *v24;
  char *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  char v31;
  objc_class *v32;
  _BYTE *v33;
  char *v34;
  void *v35;
  id v36;
  char *v37;
  void *v38;
  char *v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  char v46;
  objc_class *v47;
  _BYTE *v48;
  char *v49;
  void *v50;
  id v51;
  char *v52;
  void *v53;
  char *v54;
  id v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  char v61;
  uint64_t v62;
  double v63;
  double v64;
  objc_class *v65;
  id v66;
  char *v67;
  void *v68;
  id v69;
  char *v70;
  void *v71;
  char *v72;
  id v73;
  void *v74;
  id v75;
  uint64_t v77;
  objc_super v78;
  uint64_t v79[44];
  _BYTE v80[352];
  objc_super v81;
  uint64_t v82[44];
  _BYTE v83[352];
  objc_super v84;
  uint64_t v85[44];
  _BYTE v86[352];
  objc_super v87;
  uint64_t __src[44];
  char v89;
  uint64_t __dst[44];
  _QWORD v91[45];

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v3 = a1;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    __src[0] = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = objc_msgSend(v3, "requestIdentifier");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v91[0] = sub_100172BEC(v9, v11, __src);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v91, &v91[1], v6 + 4, v6 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "createSessionContent(%{public}s)", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
  v12 = type metadata accessor for BannerAppearanceModel(0);
  v13 = sub_1000052EC(&qword_100316AA8, type metadata accessor for BannerAppearanceModel, (uint64_t)&unk_10024D2FC);
  v14 = EnvironmentObject.init()(v12, v13);
  v16 = sub_100170F30(v14, v15, __src);
  v17 = static Edge.Set.all.getter(v16);
  swift_release(v14);
  memcpy(__dst, __src, sizeof(__dst));
  memcpy(v91, __dst, 0x160uLL);
  v18 = (objc_class *)sub_100003DB8(&qword_100322980);
  v19 = objc_allocWithZone(v18);
  v19[qword_10031DD20] = 0;
  objc_allocWithZone((Class)sub_100003DB8(&qword_100322988));
  memcpy(__src, v91, sizeof(__src));
  v89 = v17;
  v20 = v19;
  sub_1001750C0(__dst);
  v21 = (void *)UIHostingController.init(rootView:)(__src);
  *(_QWORD *)&v20[qword_10031DD28] = v21;
  v22 = v21;
  UIHostingController.safeAreaRegions.setter(0);

  v87.receiver = v20;
  v87.super_class = v18;
  v23 = (char *)objc_msgSendSuper2(&v87, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v24 = *(void **)&v23[qword_10031DD28];
  v25 = v23;
  v26 = objc_msgSend(v24, "view");
  if (v26)
  {
    v27 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v26, "setBackgroundColor:", v27);

    objc_msgSend(v25, "addSubview:", v26);
    objc_msgSend(v26, "setAutoresizesSubviews:", 1);

  }
  objc_msgSend(v25, "setAutoresizesSubviews:", 1);
  objc_msgSend(v25, "setAutoresizingMask:", 0);

  sub_100175338(__dst);
  v28 = EnvironmentObject.init()(v12, v13);
  v30 = sub_100170F30(v28, v29, __src);
  v31 = static Edge.Set.all.getter(v30);
  swift_release(v28);
  memcpy(v85, __src, sizeof(v85));
  memcpy(v86, v85, sizeof(v86));
  v32 = (objc_class *)sub_100003DB8(&qword_100322990);
  v33 = objc_allocWithZone(v32);
  v33[qword_10031DD20] = 1;
  objc_allocWithZone((Class)sub_100003DB8(&qword_100322998));
  memcpy(__src, v86, sizeof(__src));
  v89 = v31;
  v34 = v33;
  sub_1001750C0(v85);
  v35 = (void *)UIHostingController.init(rootView:)(__src);
  *(_QWORD *)&v34[qword_10031DD28] = v35;
  v36 = v35;
  UIHostingController.safeAreaRegions.setter(0);

  v84.receiver = v34;
  v84.super_class = v32;
  v37 = (char *)objc_msgSendSuper2(&v84, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v38 = *(void **)&v37[qword_10031DD28];
  v39 = v37;
  v40 = objc_msgSend(v38, "view");
  if (v40)
  {
    v41 = v40;
    v42 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v41, "setBackgroundColor:", v42);

    objc_msgSend(v39, "addSubview:", v41);
    objc_msgSend(v41, "setAutoresizesSubviews:", 1);

  }
  objc_msgSend(v39, "setAutoresizesSubviews:", 1);
  objc_msgSend(v39, "setAutoresizingMask:", 0);

  sub_100175338(v85);
  v43 = EnvironmentObject.init()(v12, v13);
  v45 = sub_100170F30(v43, v44, __src);
  v46 = static Edge.Set.all.getter(v45);
  swift_release(v43);
  memcpy(v82, __src, sizeof(v82));
  memcpy(v83, v82, sizeof(v83));
  v47 = (objc_class *)sub_100003DB8(&qword_1003229A0);
  v48 = objc_allocWithZone(v47);
  v48[qword_10031DD20] = 2;
  objc_allocWithZone((Class)sub_100003DB8(&qword_1003229A8));
  memcpy(__src, v83, sizeof(__src));
  v89 = v46;
  v49 = v48;
  sub_1001750C0(v82);
  v50 = (void *)UIHostingController.init(rootView:)(__src);
  *(_QWORD *)&v49[qword_10031DD28] = v50;
  v51 = v50;
  UIHostingController.safeAreaRegions.setter(0);

  v81.receiver = v49;
  v81.super_class = v47;
  v52 = (char *)objc_msgSendSuper2(&v81, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v53 = *(void **)&v52[qword_10031DD28];
  v54 = v52;
  v55 = objc_msgSend(v53, "view");
  if (v55)
  {
    v56 = v55;
    v57 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v56, "setBackgroundColor:", v57);

    objc_msgSend(v54, "addSubview:", v56);
    objc_msgSend(v56, "setAutoresizesSubviews:", 1);

  }
  objc_msgSend(v54, "setAutoresizesSubviews:", 1);
  objc_msgSend(v54, "setAutoresizingMask:", 0);

  sub_100175338(v82);
  v58 = EnvironmentObject.init()(v12, v13);
  v60 = sub_100170F30(v58, v59, __src);
  v61 = static Edge.Set.all.getter(v60);
  swift_release(v58);
  memcpy(v79, __src, sizeof(v79));
  memcpy(v80, v79, sizeof(v80));
  v62 = *(_QWORD *)(v77 + 40);
  v63 = *(double *)(v62 + 64);
  v64 = *(double *)(v62 + 72);
  v65 = (objc_class *)sub_100003DB8(&qword_1003229B0);
  v66 = objc_allocWithZone(v65);
  objc_allocWithZone((Class)sub_100003DB8(&qword_1003229B8));
  memcpy(__src, v80, sizeof(__src));
  v89 = v61;
  v67 = (char *)v66;
  sub_1001750C0(v79);
  v68 = (void *)UIHostingController.init(rootView:)(__src);
  *(_QWORD *)&v67[qword_100316EE0] = v68;
  v69 = v68;
  UIHostingController.safeAreaRegions.setter(0);

  v78.receiver = v67;
  v78.super_class = v65;
  v70 = (char *)objc_msgSendSuper2(&v78, "initWithFrame:", 0.0, 0.0, v63, v64);
  v71 = *(void **)&v70[qword_100316EE0];
  v72 = v70;
  v73 = objc_msgSend(v71, "view");
  if (v73)
  {
    v74 = v73;
    v75 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v74, "setBackgroundColor:", v75);

    objc_msgSend(v74, "setFrame:", 0.0, 0.0, v63, v64);
    objc_msgSend(v72, "addSubview:", v74);
    objc_msgSend(v74, "setAutoresizesSubviews:", 1);

  }
  objc_msgSend(v72, "setAutoresizesSubviews:", 1);
  objc_msgSend(v72, "setAutoresizingMask:", 0);

  sub_100175338(v79);
  return v25;
}

uint64_t sub_10016F280(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  _QWORD *v10;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000D744(v4, (uint64_t)qword_10033FD18);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Fetching my phone numbers", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = swift_allocObject(&unk_1002F3E00, 24, 7);
  swift_weakInit(v9 + 16);
  v10 = (_QWORD *)swift_allocObject(&unk_1002F3E28, 40, 7);
  v10[2] = v9;
  v10[3] = a1;
  v10[4] = a2;
  swift_retain(v9);
  swift_retain(a2);
  sub_100217838((uint64_t)sub_10016F980, (uint64_t)v10);
  swift_release(v9);
  return swift_release(v10);
}

double sub_10016F3D4(uint64_t a1, uint64_t a2, void (*a3)(char *, __n128), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __n128 v20;
  char v21;
  uint64_t Strong;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *object;
  double result;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t inited;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  NSString v57;
  NSString v58;
  void *v59;
  uint64_t String;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, __n128);
  uint64_t v70;
  uint64_t v71;
  uint64_t countAndFlagsBits;
  uint64_t v73;
  uint64_t v74;
  char v75[32];
  char v76[24];

  v70 = a4;
  v71 = a1;
  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003DB8(&qword_100319D48);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (uint64_t *)((char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v19 = static OS_dispatch_queue.main.getter(v20);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v15);
  v21 = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v19, v15);
  if ((v21 & 1) != 0)
  {
    swift_beginAccess(a2 + 16, v76, 0, 0);
    Strong = swift_weakLoadStrong(a2 + 16);
    swift_release(Strong);
    if (!Strong)
      goto LABEL_9;
    countAndFlagsBits = v7;
    if (qword_100315820 == -1)
      goto LABEL_4;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315820, sub_1000D95E4);
LABEL_4:
  v23 = type metadata accessor for Logger(0);
  sub_10000D744(v23, (uint64_t)qword_10033FD18);
  v24 = v71;
  v26 = swift_bridgeObjectRetain_n(v71, 2, v25);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  if (!os_log_type_enabled(v27, v28))
  {

    v39 = swift_bridgeObjectRelease_n(v24, 2);
    v40 = countAndFlagsBits;
    if (v24)
      goto LABEL_6;
LABEL_9:
    ((void (*)(_QWORD))a3)(0);
    return result;
  }
  v29 = (uint8_t *)swift_slowAlloc(12, -1);
  v30 = swift_slowAlloc(32, -1);
  v69 = (void (*)(char *, __n128))v6;
  v31 = v30;
  *(_DWORD *)v29 = 136315138;
  v73 = v71;
  v74 = v30;
  swift_bridgeObjectRetain(v71);
  v32 = sub_100003DB8(&qword_100319D70);
  v34 = String.init<A>(describing:)(&v73, v32, v33);
  v36 = v35;
  v73 = sub_100172BEC(v34, v35, &v74);
  v37 = v71;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v29 + 4, v29 + 12);
  swift_bridgeObjectRelease_n(v37, 2);
  swift_bridgeObjectRelease(v36);
  _os_log_impl((void *)&_mh_execute_header, v27, v28, "My phone numbers fetched: %s", v29, 0xCu);
  swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
  v38 = v31;
  v6 = (uint64_t)v69;
  swift_slowDealloc(v38, -1, -1);
  swift_slowDealloc(v29, -1, -1);

  v40 = countAndFlagsBits;
  if (!v37)
    goto LABEL_9;
LABEL_6:
  v69 = a3;
  v41 = static Locale.autoupdatingCurrent.getter(v39);
  Locale.region.getter(v41);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v6);
  v42 = type metadata accessor for Locale.Region(0);
  v43 = *(_QWORD *)(v42 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v14, 1, v42) == 1)
  {
    sub_100007FF0((uint64_t)v14, &qword_100319D48);
    countAndFlagsBits = 0;
    object = 0;
  }
  else
  {
    Locale.Region.identifier.getter();
    v47 = v46;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v14, v42);
    v48 = String.lowercased()();
    countAndFlagsBits = v48._countAndFlagsBits;
    object = v48._object;
    swift_bridgeObjectRelease(v47);
  }
  v49 = type metadata accessor for PhoneNumberFormatter();
  inited = swift_initStackObject(v49, v75);
  v52 = v71;
  *(_QWORD *)(inited + 16) = countAndFlagsBits;
  *(_QWORD *)(inited + 24) = object;
  v53 = *(_QWORD *)(v52 + 16);
  if (v53)
  {
    swift_bridgeObjectRetain(v52);
    v68 = inited;
    swift_retain(inited);
    v54 = (_QWORD *)(v52 + 40);
    v55 = (char *)_swiftEmptyArrayStorage;
    do
    {
      v56 = *v54;
      swift_bridgeObjectRetain(*v54);
      v57 = String._bridgeToObjectiveC()();
      if (object)
        v58 = String._bridgeToObjectiveC()();
      else
        v58 = 0;
      v59 = (void *)CFPhoneNumberCreate(kCFAllocatorDefault, v57, v58);

      String = CFPhoneNumberCreateString(kCFAllocatorDefault, v59, 7);
      if (String)
      {
        v61 = (void *)String;
        v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(String);
        v64 = v63;
        swift_bridgeObjectRelease(v56);

        if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) == 0)
          v55 = sub_100171738(0, *((_QWORD *)v55 + 2) + 1, 1, v55);
        v66 = *((_QWORD *)v55 + 2);
        v65 = *((_QWORD *)v55 + 3);
        if (v66 >= v65 >> 1)
          v55 = sub_100171738((char *)(v65 > 1), v66 + 1, 1, v55);
        *((_QWORD *)v55 + 2) = v66 + 1;
        v67 = &v55[16 * v66];
        *((_QWORD *)v67 + 4) = v62;
        *((_QWORD *)v67 + 5) = v64;
      }
      else
      {
        swift_bridgeObjectRelease(v56);

      }
      v54 += 2;
      --v53;
    }
    while (v53);
    inited = v68;
    swift_release(v68);
    v51 = swift_bridgeObjectRelease(v71);
  }
  else
  {
    v55 = (char *)_swiftEmptyArrayStorage;
  }
  v69(v55, v51);
  swift_bridgeObjectRelease(v55);
  swift_setDeallocating(inited);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(inited + 24)).n128_u64[0];
  return result;
}

uint64_t sub_10016F958()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_10016F980(uint64_t a1)
{
  uint64_t v1;

  return sub_10016F3D4(a1, *(_QWORD *)(v1 + 16), *(void (**)(char *, __n128))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10016F98C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 264) + 32) & 1) == 0)
  {
    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10000D744(v16, (uint64_t)qword_10033FD18);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Transitioning back to roadside", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    v13 = swift_allocObject(&unk_1002F45F8, 32, 7);
    *(_QWORD *)(v13 + 16) = a2;
    *(_QWORD *)(v13 + 24) = a3;
    swift_retain(a3);
    v14 = sub_100175AC8;
    v15 = 3;
    goto LABEL_14;
  }
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000D744(v6, (uint64_t)qword_10033FD18);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Transitioning back to emergency", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v12 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 32);
  if (*(_QWORD *)(v12 + 64))
  {
    v11 = sub_100067058(0, *(_QWORD *)(v12 + 80));
    if (v11)
    {
      v13 = swift_allocObject(&unk_1002F45D0, 32, 7);
      *(_QWORD *)(v13 + 16) = a2;
      *(_QWORD *)(v13 + 24) = a3;
      swift_retain(a3);
      v14 = sub_100175AA8;
      v15 = 2;
LABEL_14:
      sub_1002167F8(v15, 0x80u, (uint64_t)v14, v13);
      return swift_release(v13);
    }
  }
  v21 = Logger.logObject.getter(v11);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Transitioning back to emergency - Stewie emergency is not allowed, placing a call", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  v13 = swift_allocObject(&unk_1002F45A8, 32, 7);
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  swift_retain(a3);
  sub_1001EE234((uint64_t)sub_100175AA0, v13);
  return swift_release(v13);
}

uint64_t sub_10016FC64(uint64_t a1, uint64_t (*a2)(BOOL), uint64_t a3, const char *a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _BOOL4 v13;
  uint64_t v14;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v7 = type metadata accessor for Logger(0);
  sub_10000D744(v7, (uint64_t)qword_10033FD18);
  v8 = swift_errorRetain(a1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 67240192;
    v13 = a1 == 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v11 + 4, v11 + 8);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, a4, v11, 8u);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
  }

  return a2(a1 == 0);
}

uint64_t sub_10016FDB0(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  int v10;
  uint64_t v11;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000D744(v4, (uint64_t)qword_10033FD18);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 67109120;
    v10 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 4, v8 + 8);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Emergency call request, success: %{BOOL}d", v8, 8u);
    swift_slowDealloc(v8, -1, -1);
  }

  return a2(0);
}

uint64_t sub_10016FED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v6;
  _BYTE v7[2];
  _BYTE v8[24];
  uint64_t v9;
  _OWORD v10[2];

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 88);
  if (v1
    && (swift_beginAccess(v1 + 48, &v6, 0, 0), v2 = *(_QWORD *)(v1 + 64), *(_QWORD *)(v2 + 16))
    && (v3 = sub_10017D294(1), (v4 & 1) != 0))
  {
    sub_10008CAC4(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)v10);
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_10000B458((uint64_t)v10, (uint64_t)v8, &qword_100324AC0);
  if (!v9)
  {
    sub_100007FF0((uint64_t)v8, &qword_100324AC0);
    return 0;
  }
  if ((swift_dynamicCast(v7, v8, (char *)&type metadata for Any + 8, &type metadata for RecordedForkAnswer, 6) & 1) == 0)
    return 0;
  if (v7[0] == 1)
    return v7[1] ^ 1u;
  else
    return 0;
}

BOOL sub_10016FFBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _BYTE v10[24];
  _BYTE v11[32];

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 104);
  if (!v1)
    return 0;
  swift_beginAccess(v1 + 48, v10, 0, 0);
  v2 = *(_QWORD *)(v1 + 64);
  if (!*(_QWORD *)(v2 + 16))
    return 0;
  v3 = sub_10017D294(5);
  if ((v4 & 1) == 0)
    return 0;
  sub_10008CAC4(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)v11);
  swift_retain(v1);
  if ((swift_dynamicCast(v9, v11, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    swift_release(v1);
    return 0;
  }
  v6 = v9[0];
  v5 = v9[1];
  swift_release(v1);
  swift_bridgeObjectRelease(v5);
  v7 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v7 = v6 & 0xFFFFFFFFFFFFLL;
  return v7 != 0;
}

double sub_100170098@<D0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double result;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;

  v3 = v2;
  v120 = a1[1];
  v121 = *a1;
  v118 = *((_QWORD *)a1 + 5);
  v119 = *((_QWORD *)a1 + 4);
  v117 = *((_QWORD *)a1 + 7);
  v116 = *((_BYTE *)a1 + 64);
  v115 = *((_QWORD *)a1 + 9);
  v114 = a1[3] & 1;
  v6 = v2[2];
  v112 = v6;
  v7 = type metadata accessor for AppEvents();
  v8 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  v113 = static ObservableObject.environmentStore.getter(v7, v8);
  v9 = v3[3];
  v110 = v9;
  v10 = type metadata accessor for AppPropertiesModel();
  swift_retain(v6);
  sub_100175AE8((uint64_t *)a1);
  v11 = sub_1000052EC(&qword_10031CB88, (uint64_t (*)(uint64_t))type metadata accessor for AppPropertiesModel, (uint64_t)&unk_10024D2FC);
  v111 = static ObservableObject.environmentStore.getter(v10, v11);
  v12 = v3[4];
  v108 = v12;
  v13 = type metadata accessor for AppRuntimeStateModel();
  v14 = sub_1000052EC(&qword_100318498, (uint64_t (*)(uint64_t))type metadata accessor for AppRuntimeStateModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v9);
  v109 = static ObservableObject.environmentStore.getter(v13, v14);
  v15 = v3[5];
  v106 = v15;
  v16 = type metadata accessor for BannerAppearanceModel(0);
  v17 = sub_1000052EC(&qword_100316AA8, type metadata accessor for BannerAppearanceModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v12);
  v107 = static ObservableObject.environmentStore.getter(v16, v17);
  v18 = (_QWORD *)v3[6];
  v19 = v18[14];
  v105 = v19;
  v20 = type metadata accessor for ConnectionClosedModel(0);
  v21 = sub_1000052EC(&qword_10031CB58, type metadata accessor for ConnectionClosedModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v15);
  swift_retain(v19);
  v22 = static ObservableObject.environmentStore.getter(v20, v21);
  v23 = v18[9];
  v103 = v23;
  v104 = v22;
  v24 = type metadata accessor for ConnectionModel(0);
  v25 = sub_1000052EC(&qword_100316B10, type metadata accessor for ConnectionModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v23);
  v26 = static ObservableObject.environmentStore.getter(v24, v25);
  v27 = v18[12];
  v101 = v27;
  v102 = v26;
  v28 = type metadata accessor for ConnectivityModel();
  v29 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v27);
  v30 = static ObservableObject.environmentStore.getter(v28, v29);
  v31 = v18[8];
  v99 = v31;
  v100 = v30;
  v32 = type metadata accessor for GuidanceMessagesModel();
  v33 = sub_1000052EC(&qword_1003195D8, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v31);
  v34 = static ObservableObject.environmentStore.getter(v32, v33);
  v35 = v18[7];
  v97 = v35;
  v98 = v34;
  v36 = type metadata accessor for GuidanceModel();
  v37 = sub_1000052EC(&qword_100316B08, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v35);
  v38 = static ObservableObject.environmentStore.getter(v36, v37);
  v39 = v18[3];
  v95 = v39;
  v96 = v38;
  v40 = type metadata accessor for OrientationModel();
  v41 = sub_1000052EC(&qword_10031CB60, (uint64_t (*)(uint64_t))type metadata accessor for OrientationModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v39);
  v42 = static ObservableObject.environmentStore.getter(v40, v41);
  v43 = v18[4];
  v93 = v43;
  v94 = v42;
  v44 = type metadata accessor for StewieModel();
  v45 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v43);
  v46 = static ObservableObject.environmentStore.getter(v44, v45);
  v91 = v18[2];
  v92 = v46;
  v47 = type metadata accessor for SystemSettingsModel();
  v48 = sub_1000052EC(&qword_10031CB98, (uint64_t (*)(uint64_t))type metadata accessor for SystemSettingsModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v91);
  v90 = static ObservableObject.environmentStore.getter(v47, v48);
  v49 = v3[7];
  v88 = v49;
  v50 = type metadata accessor for EmergencyModel();
  v51 = sub_1000052EC(&qword_100318690, (uint64_t (*)(uint64_t))type metadata accessor for EmergencyModel, (uint64_t)&unk_10024D2FC);
  v89 = static ObservableObject.environmentStore.getter(v50, v51);
  v52 = v3[8];
  v86 = v52;
  v53 = type metadata accessor for GeoLocationModel();
  v54 = sub_1000052EC(&qword_10031CD28, (uint64_t (*)(uint64_t))type metadata accessor for GeoLocationModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v49);
  v87 = static ObservableObject.environmentStore.getter(v53, v54);
  v55 = v3[10];
  v84 = v55;
  v56 = type metadata accessor for OfferModel();
  v57 = sub_1000052EC(&qword_1003229C0, (uint64_t (*)(uint64_t))type metadata accessor for OfferModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v52);
  v85 = static ObservableObject.environmentStore.getter(v56, v57);
  v58 = v3[16];
  v82 = v58;
  v59 = type metadata accessor for OffTheGridModel();
  v60 = sub_1000052EC(&qword_10031CB90, (uint64_t (*)(uint64_t))type metadata accessor for OffTheGridModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v55);
  v83 = static ObservableObject.environmentStore.getter(v59, v60);
  v61 = v3[11];
  v62 = type metadata accessor for RoadsideAssistanceModel();
  v63 = sub_1000052EC(&qword_100318688, (uint64_t (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v58);
  v81 = static ObservableObject.environmentStore.getter(v62, v63);
  v64 = v3[12];
  v65 = type metadata accessor for TransitionAlertModel();
  v66 = sub_1000052EC((unint64_t *)&unk_1003184A0, (uint64_t (*)(uint64_t))type metadata accessor for TransitionAlertModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v61);
  v80 = static ObservableObject.environmentStore.getter(v65, v66);
  v67 = v3[14];
  v68 = type metadata accessor for TimeZoneModel(0);
  v69 = sub_1000052EC(&qword_10031CD30, type metadata accessor for TimeZoneModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v64);
  v70 = static ObservableObject.environmentStore.getter(v68, v69);
  v71 = v3[15];
  v72 = type metadata accessor for TryOutModel(0);
  v73 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v67);
  v74 = static ObservableObject.environmentStore.getter(v72, v73);
  v75 = v3[17];
  v76 = type metadata accessor for UIMetrics();
  v77 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  swift_retain(v71);
  v78 = static ObservableObject.environmentStore.getter(v76, v77);
  *(_QWORD *)(a2 + 32) = v119;
  *(_QWORD *)(a2 + 40) = v118;
  *(_BYTE *)(a2 + 48) = v114;
  *(_QWORD *)(a2 + 56) = v117;
  *(_BYTE *)(a2 + 64) = v116;
  *(_QWORD *)(a2 + 72) = v115;
  *(_QWORD *)(a2 + 80) = v113;
  *(_QWORD *)(a2 + 88) = v112;
  *(_QWORD *)(a2 + 96) = v111;
  *(_QWORD *)(a2 + 104) = v110;
  *(_QWORD *)(a2 + 112) = v109;
  *(_QWORD *)(a2 + 120) = v108;
  *(_QWORD *)(a2 + 128) = v107;
  *(_QWORD *)(a2 + 136) = v106;
  *(_QWORD *)(a2 + 144) = v104;
  *(_QWORD *)(a2 + 152) = v105;
  *(_QWORD *)(a2 + 160) = v102;
  *(_QWORD *)(a2 + 168) = v103;
  *(_QWORD *)(a2 + 176) = v100;
  *(_OWORD *)a2 = v121;
  *(_OWORD *)(a2 + 16) = v120;
  *(_QWORD *)(a2 + 184) = v101;
  *(_QWORD *)(a2 + 192) = v98;
  *(_QWORD *)(a2 + 200) = v99;
  *(_QWORD *)(a2 + 208) = v96;
  *(_QWORD *)(a2 + 216) = v97;
  *(_QWORD *)(a2 + 224) = v94;
  *(_QWORD *)(a2 + 232) = v95;
  *(_QWORD *)(a2 + 240) = v92;
  *(_QWORD *)(a2 + 248) = v93;
  *(_QWORD *)(a2 + 256) = v90;
  *(_QWORD *)(a2 + 264) = v91;
  *(_QWORD *)(a2 + 272) = v89;
  *(_QWORD *)(a2 + 280) = v88;
  *(_QWORD *)(a2 + 288) = v87;
  *(_QWORD *)(a2 + 296) = v86;
  *(_QWORD *)(a2 + 304) = v85;
  *(_QWORD *)(a2 + 312) = v84;
  *(_QWORD *)(a2 + 320) = v83;
  *(_QWORD *)(a2 + 328) = v82;
  *(_QWORD *)(a2 + 336) = v81;
  *(_QWORD *)(a2 + 344) = v61;
  *(_QWORD *)(a2 + 352) = v80;
  *(_QWORD *)(a2 + 360) = v64;
  *(_QWORD *)(a2 + 368) = v70;
  *(_QWORD *)(a2 + 376) = v67;
  *(_QWORD *)(a2 + 384) = v74;
  *(_QWORD *)(a2 + 392) = v71;
  *(_QWORD *)(a2 + 400) = v78;
  *(_QWORD *)(a2 + 408) = v75;
  *(_QWORD *)&result = swift_retain(v75).n128_u64[0];
  return result;
}

double sub_1001707F4@<D0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double result;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;

  v3 = v2;
  v117 = a1[1];
  v118 = *a1;
  v115 = *((_QWORD *)a1 + 5);
  v116 = *((_QWORD *)a1 + 4);
  v6 = v2[2];
  v113 = v6;
  v7 = type metadata accessor for AppEvents();
  v8 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  v114 = static ObservableObject.environmentStore.getter(v7, v8);
  v9 = *a1;
  v120 = a1[1];
  v121 = v9;
  v119 = a1[2];
  v10 = v3[3];
  v111 = v10;
  v11 = type metadata accessor for AppPropertiesModel();
  swift_retain(v6);
  sub_100031A88(&v121);
  sub_100031A88(&v120);
  sub_100031A88(&v119);
  v12 = sub_1000052EC(&qword_10031CB88, (uint64_t (*)(uint64_t))type metadata accessor for AppPropertiesModel, (uint64_t)&unk_10024D2FC);
  v112 = static ObservableObject.environmentStore.getter(v11, v12);
  v13 = v3[4];
  v109 = v13;
  v14 = type metadata accessor for AppRuntimeStateModel();
  v15 = sub_1000052EC(&qword_100318498, (uint64_t (*)(uint64_t))type metadata accessor for AppRuntimeStateModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v10);
  v110 = static ObservableObject.environmentStore.getter(v14, v15);
  v16 = v3[5];
  v107 = v16;
  v17 = type metadata accessor for BannerAppearanceModel(0);
  v18 = sub_1000052EC(&qword_100316AA8, type metadata accessor for BannerAppearanceModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v13);
  v108 = static ObservableObject.environmentStore.getter(v17, v18);
  v19 = (_QWORD *)v3[6];
  v20 = v19[14];
  v106 = v20;
  v21 = type metadata accessor for ConnectionClosedModel(0);
  v22 = sub_1000052EC(&qword_10031CB58, type metadata accessor for ConnectionClosedModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v16);
  swift_retain(v20);
  v23 = static ObservableObject.environmentStore.getter(v21, v22);
  v24 = v19[9];
  v104 = v24;
  v105 = v23;
  v25 = type metadata accessor for ConnectionModel(0);
  v26 = sub_1000052EC(&qword_100316B10, type metadata accessor for ConnectionModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v24);
  v27 = static ObservableObject.environmentStore.getter(v25, v26);
  v28 = v19[12];
  v102 = v28;
  v103 = v27;
  v29 = type metadata accessor for ConnectivityModel();
  v30 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v28);
  v31 = static ObservableObject.environmentStore.getter(v29, v30);
  v32 = v19[8];
  v100 = v32;
  v101 = v31;
  v33 = type metadata accessor for GuidanceMessagesModel();
  v34 = sub_1000052EC(&qword_1003195D8, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v32);
  v35 = static ObservableObject.environmentStore.getter(v33, v34);
  v36 = v19[7];
  v98 = v36;
  v99 = v35;
  v37 = type metadata accessor for GuidanceModel();
  v38 = sub_1000052EC(&qword_100316B08, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v36);
  v39 = static ObservableObject.environmentStore.getter(v37, v38);
  v40 = v19[3];
  v96 = v40;
  v97 = v39;
  v41 = type metadata accessor for OrientationModel();
  v42 = sub_1000052EC(&qword_10031CB60, (uint64_t (*)(uint64_t))type metadata accessor for OrientationModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v40);
  v43 = static ObservableObject.environmentStore.getter(v41, v42);
  v44 = v19[4];
  v94 = v44;
  v95 = v43;
  v45 = type metadata accessor for StewieModel();
  v46 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v44);
  v47 = static ObservableObject.environmentStore.getter(v45, v46);
  v92 = v19[2];
  v93 = v47;
  v48 = type metadata accessor for SystemSettingsModel();
  v49 = sub_1000052EC(&qword_10031CB98, (uint64_t (*)(uint64_t))type metadata accessor for SystemSettingsModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v92);
  v91 = static ObservableObject.environmentStore.getter(v48, v49);
  v50 = v3[7];
  v89 = v50;
  v51 = type metadata accessor for EmergencyModel();
  v52 = sub_1000052EC(&qword_100318690, (uint64_t (*)(uint64_t))type metadata accessor for EmergencyModel, (uint64_t)&unk_10024D2FC);
  v90 = static ObservableObject.environmentStore.getter(v51, v52);
  v53 = v3[8];
  v87 = v53;
  v54 = type metadata accessor for GeoLocationModel();
  v55 = sub_1000052EC(&qword_10031CD28, (uint64_t (*)(uint64_t))type metadata accessor for GeoLocationModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v50);
  v88 = static ObservableObject.environmentStore.getter(v54, v55);
  v56 = v3[10];
  v85 = v56;
  v57 = type metadata accessor for OfferModel();
  v58 = sub_1000052EC(&qword_1003229C0, (uint64_t (*)(uint64_t))type metadata accessor for OfferModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v53);
  v86 = static ObservableObject.environmentStore.getter(v57, v58);
  v59 = v3[16];
  v83 = v59;
  v60 = type metadata accessor for OffTheGridModel();
  v61 = sub_1000052EC(&qword_10031CB90, (uint64_t (*)(uint64_t))type metadata accessor for OffTheGridModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v56);
  v84 = static ObservableObject.environmentStore.getter(v60, v61);
  v62 = v3[11];
  v63 = type metadata accessor for RoadsideAssistanceModel();
  v64 = sub_1000052EC(&qword_100318688, (uint64_t (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v59);
  v82 = static ObservableObject.environmentStore.getter(v63, v64);
  v65 = v3[12];
  v66 = type metadata accessor for TransitionAlertModel();
  v67 = sub_1000052EC((unint64_t *)&unk_1003184A0, (uint64_t (*)(uint64_t))type metadata accessor for TransitionAlertModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v62);
  v81 = static ObservableObject.environmentStore.getter(v66, v67);
  v68 = v3[14];
  v69 = type metadata accessor for TimeZoneModel(0);
  v70 = sub_1000052EC(&qword_10031CD30, type metadata accessor for TimeZoneModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v65);
  v71 = static ObservableObject.environmentStore.getter(v69, v70);
  v72 = v3[15];
  v73 = type metadata accessor for TryOutModel(0);
  v74 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v68);
  v75 = static ObservableObject.environmentStore.getter(v73, v74);
  v76 = v3[17];
  v77 = type metadata accessor for UIMetrics();
  v78 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  swift_retain(v72);
  v79 = static ObservableObject.environmentStore.getter(v77, v78);
  *(_QWORD *)(a2 + 32) = v116;
  *(_QWORD *)(a2 + 40) = v115;
  *(_QWORD *)(a2 + 48) = v114;
  *(_QWORD *)(a2 + 56) = v113;
  *(_QWORD *)(a2 + 64) = v112;
  *(_QWORD *)(a2 + 72) = v111;
  *(_QWORD *)(a2 + 80) = v110;
  *(_QWORD *)(a2 + 88) = v109;
  *(_QWORD *)(a2 + 96) = v108;
  *(_QWORD *)(a2 + 104) = v107;
  *(_QWORD *)(a2 + 112) = v105;
  *(_QWORD *)(a2 + 120) = v106;
  *(_QWORD *)(a2 + 128) = v103;
  *(_QWORD *)(a2 + 136) = v104;
  *(_OWORD *)a2 = v118;
  *(_OWORD *)(a2 + 16) = v117;
  *(_QWORD *)(a2 + 144) = v101;
  *(_QWORD *)(a2 + 152) = v102;
  *(_QWORD *)(a2 + 160) = v99;
  *(_QWORD *)(a2 + 168) = v100;
  *(_QWORD *)(a2 + 176) = v97;
  *(_QWORD *)(a2 + 184) = v98;
  *(_QWORD *)(a2 + 192) = v95;
  *(_QWORD *)(a2 + 200) = v96;
  *(_QWORD *)(a2 + 208) = v93;
  *(_QWORD *)(a2 + 216) = v94;
  *(_QWORD *)(a2 + 224) = v91;
  *(_QWORD *)(a2 + 232) = v92;
  *(_QWORD *)(a2 + 240) = v90;
  *(_QWORD *)(a2 + 248) = v89;
  *(_QWORD *)(a2 + 256) = v88;
  *(_QWORD *)(a2 + 264) = v87;
  *(_QWORD *)(a2 + 272) = v86;
  *(_QWORD *)(a2 + 280) = v85;
  *(_QWORD *)(a2 + 288) = v84;
  *(_QWORD *)(a2 + 296) = v83;
  *(_QWORD *)(a2 + 304) = v82;
  *(_QWORD *)(a2 + 312) = v62;
  *(_QWORD *)(a2 + 320) = v81;
  *(_QWORD *)(a2 + 328) = v65;
  *(_QWORD *)(a2 + 336) = v71;
  *(_QWORD *)(a2 + 344) = v68;
  *(_QWORD *)(a2 + 352) = v75;
  *(_QWORD *)(a2 + 360) = v72;
  *(_QWORD *)(a2 + 368) = v79;
  *(_QWORD *)(a2 + 376) = v76;
  *(_QWORD *)&result = swift_retain(v76).n128_u64[0];
  return result;
}

double sub_100170F30@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double result;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;

  v4 = v3;
  v7 = v3[2];
  v113 = v7;
  v8 = type metadata accessor for AppEvents();
  v9 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  v114 = static ObservableObject.environmentStore.getter(v8, v9);
  v10 = v4[3];
  v110 = v10;
  v11 = type metadata accessor for AppPropertiesModel();
  v12 = sub_1000052EC(&qword_10031CB88, (uint64_t (*)(uint64_t))type metadata accessor for AppPropertiesModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v7);
  swift_retain(a1);
  v111 = static ObservableObject.environmentStore.getter(v11, v12);
  v13 = v4[4];
  v108 = v13;
  v14 = type metadata accessor for AppRuntimeStateModel();
  v15 = sub_1000052EC(&qword_100318498, (uint64_t (*)(uint64_t))type metadata accessor for AppRuntimeStateModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v10);
  v109 = static ObservableObject.environmentStore.getter(v14, v15);
  v16 = v4[5];
  v106 = v16;
  v17 = type metadata accessor for BannerAppearanceModel(0);
  v18 = sub_1000052EC(&qword_100316AA8, type metadata accessor for BannerAppearanceModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v13);
  v107 = static ObservableObject.environmentStore.getter(v17, v18);
  v19 = (_QWORD *)v4[6];
  v20 = v19[14];
  v105 = v20;
  v21 = type metadata accessor for ConnectionClosedModel(0);
  v22 = sub_1000052EC(&qword_10031CB58, type metadata accessor for ConnectionClosedModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v16);
  swift_retain(v20);
  v104 = static ObservableObject.environmentStore.getter(v21, v22);
  v23 = v19[9];
  v103 = v23;
  v24 = type metadata accessor for ConnectionModel(0);
  v25 = sub_1000052EC(&qword_100316B10, type metadata accessor for ConnectionModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v23);
  v26 = static ObservableObject.environmentStore.getter(v24, v25);
  v27 = v19[12];
  v101 = v27;
  v102 = v26;
  v28 = type metadata accessor for ConnectivityModel();
  v29 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v27);
  v30 = static ObservableObject.environmentStore.getter(v28, v29);
  v31 = v19[8];
  v99 = v31;
  v100 = v30;
  v32 = type metadata accessor for GuidanceMessagesModel();
  v33 = sub_1000052EC(&qword_1003195D8, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v31);
  v34 = static ObservableObject.environmentStore.getter(v32, v33);
  v35 = v19[7];
  v97 = v35;
  v98 = v34;
  v36 = type metadata accessor for GuidanceModel();
  v37 = sub_1000052EC(&qword_100316B08, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v35);
  v38 = static ObservableObject.environmentStore.getter(v36, v37);
  v39 = v19[3];
  v95 = v39;
  v96 = v38;
  v40 = type metadata accessor for OrientationModel();
  v41 = sub_1000052EC(&qword_10031CB60, (uint64_t (*)(uint64_t))type metadata accessor for OrientationModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v39);
  v42 = static ObservableObject.environmentStore.getter(v40, v41);
  v43 = v19[4];
  v93 = v43;
  v94 = v42;
  v44 = type metadata accessor for StewieModel();
  v45 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v43);
  v46 = static ObservableObject.environmentStore.getter(v44, v45);
  v91 = v19[2];
  v92 = v46;
  v47 = type metadata accessor for SystemSettingsModel();
  v48 = sub_1000052EC(&qword_10031CB98, (uint64_t (*)(uint64_t))type metadata accessor for SystemSettingsModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v91);
  v90 = static ObservableObject.environmentStore.getter(v47, v48);
  v49 = v4[7];
  v88 = v49;
  v50 = type metadata accessor for EmergencyModel();
  v51 = sub_1000052EC(&qword_100318690, (uint64_t (*)(uint64_t))type metadata accessor for EmergencyModel, (uint64_t)&unk_10024D2FC);
  v89 = static ObservableObject.environmentStore.getter(v50, v51);
  v52 = v4[8];
  v86 = v52;
  v53 = type metadata accessor for GeoLocationModel();
  v54 = sub_1000052EC(&qword_10031CD28, (uint64_t (*)(uint64_t))type metadata accessor for GeoLocationModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v49);
  v87 = static ObservableObject.environmentStore.getter(v53, v54);
  v55 = v4[10];
  v84 = v55;
  v56 = type metadata accessor for OfferModel();
  v57 = sub_1000052EC(&qword_1003229C0, (uint64_t (*)(uint64_t))type metadata accessor for OfferModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v52);
  v85 = static ObservableObject.environmentStore.getter(v56, v57);
  v58 = v4[16];
  v82 = v58;
  v59 = type metadata accessor for OffTheGridModel();
  v60 = sub_1000052EC(&qword_10031CB90, (uint64_t (*)(uint64_t))type metadata accessor for OffTheGridModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v55);
  v83 = static ObservableObject.environmentStore.getter(v59, v60);
  v61 = v4[11];
  v62 = type metadata accessor for RoadsideAssistanceModel();
  v63 = sub_1000052EC(&qword_100318688, (uint64_t (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v58);
  v81 = static ObservableObject.environmentStore.getter(v62, v63);
  v64 = v4[12];
  v65 = type metadata accessor for TransitionAlertModel();
  v66 = sub_1000052EC((unint64_t *)&unk_1003184A0, (uint64_t (*)(uint64_t))type metadata accessor for TransitionAlertModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v61);
  v80 = static ObservableObject.environmentStore.getter(v65, v66);
  v67 = v4[14];
  v68 = type metadata accessor for TimeZoneModel(0);
  v69 = sub_1000052EC(&qword_10031CD30, type metadata accessor for TimeZoneModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v64);
  v70 = static ObservableObject.environmentStore.getter(v68, v69);
  v71 = v4[15];
  v72 = type metadata accessor for TryOutModel(0);
  v73 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v67);
  v74 = static ObservableObject.environmentStore.getter(v72, v73);
  v75 = v4[17];
  v76 = type metadata accessor for UIMetrics();
  v77 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  swift_retain(v71);
  v78 = static ObservableObject.environmentStore.getter(v76, v77);
  *a3 = a1;
  a3[1] = a2;
  a3[2] = v114;
  a3[3] = v113;
  a3[4] = v111;
  a3[5] = v110;
  a3[6] = v109;
  a3[7] = v108;
  a3[8] = v107;
  a3[9] = v106;
  a3[10] = v104;
  a3[11] = v105;
  a3[12] = v102;
  a3[13] = v103;
  a3[14] = v100;
  a3[15] = v101;
  a3[16] = v98;
  a3[17] = v99;
  a3[18] = v96;
  a3[19] = v97;
  a3[20] = v94;
  a3[21] = v95;
  a3[22] = v92;
  a3[23] = v93;
  a3[24] = v90;
  a3[25] = v91;
  a3[26] = v89;
  a3[27] = v88;
  a3[28] = v87;
  a3[29] = v86;
  a3[30] = v85;
  a3[31] = v84;
  a3[32] = v83;
  a3[33] = v82;
  a3[34] = v81;
  a3[35] = v61;
  a3[36] = v80;
  a3[37] = v64;
  a3[38] = v70;
  a3[39] = v67;
  a3[40] = v74;
  a3[41] = v71;
  a3[42] = v78;
  a3[43] = v75;
  *(_QWORD *)&result = swift_retain(v75).n128_u64[0];
  return result;
}

char *sub_10017162C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003DB8(&qword_100322D50);
      v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size_0(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[8 * v8 + 32])
          memmove(v14, a4 + 32, 8 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100173D94(0, v8, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_100171738(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003DB8((uint64_t *)&unk_10031B300);
      v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size_0(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32])
          memmove(v14, a4 + 32, 16 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100173E7C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100171844(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003DB8(&qword_1003181E8);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size_0(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100174150(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100171950(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100171BA8(a1, a2, a3, a4, &qword_100322D58);
}

_QWORD *sub_10017195C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003DB8(&qword_100322D90);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size_0(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100174354(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100171A7C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003DB8(&qword_1003186E8);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size_0(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100173F6C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100171B9C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100171BA8(a1, a2, a3, a4, &qword_100322D98);
}

_QWORD *sub_100171BA8(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_100003DB8(a5);
      v12 = (_QWORD *)swift_allocObject(v11, v10 + 32, 7);
      v13 = j__malloc_size_0(v12);
      v12[2] = v9;
      v12[3] = 2 * v13 - 64;
      v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= (_QWORD *)((char *)a4 + v9 + 32))
          memmove(v14, a4 + 4, v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100174640(0, v9, (char *)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_100171C9C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10017223C(a1, a2, a3, a4, &qword_100322D70, type metadata accessor for MessageSimulationEngineImplementation.MessageProgress);
}

_QWORD *sub_100171CB0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003DB8(&qword_100318E28);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size_0(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100174448(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100171DBC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003DB8(&qword_100318E30);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size_0(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100174550(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100171EC8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003DB8(&qword_100322D68);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size_0(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100173D94(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100171FD4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100171BA8(a1, a2, a3, a4, &qword_10031CCB0);
}

_QWORD *sub_100171FE0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003DB8(&qword_100322D60);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size_0(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100174724(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_100172100(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003DB8(&qword_100322CD0);
      v11 = (char *)swift_allocObject(v10, 88 * v9 + 32, 7);
      v12 = j__malloc_size_0(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 88);
      v13 = v11 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[88 * v8 + 32])
          memmove(v13, a4 + 32, 88 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100174060(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100172228(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10017223C(a1, a2, a3, a4, &qword_100322D48, type metadata accessor for ServiceOutages.Outage);
}

uint64_t sub_10017223C(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100003DB8(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size_0(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23, v25);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100174904(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_100172448(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100003DB8(&qword_10031FA80);
  v11 = *(_QWORD *)(sub_100003DB8(&qword_100317D58) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size_0(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_100003DB8(&qword_100317D58);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20, v22);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100174238(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

_QWORD *sub_100172658(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003DB8(&qword_100322C90);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size_0(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100174818(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10017277C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10017223C(a1, a2, a3, a4, &qword_100322C88, type metadata accessor for TargetTracks.TimePoint);
}

_QWORD *sub_100172790(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003DB8(&qword_1003229D8);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size_0(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100174A1C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001728B0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003DB8(&qword_100322978);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size_0(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100174FD8(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001729BC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003DB8(&qword_100322D80);
      v11 = (_QWORD *)swift_allocObject(v10, 12 * v9 + 32, 7);
      v12 = j__malloc_size_0(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 12);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (_QWORD *)((char *)a4 + 12 * v8 + 32))
          memmove(v13, a4 + 4, 12 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100175B50(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100172AE0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003DB8(&qword_100322D88);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size_0(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100173D94(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100172BEC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_100172CBC(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10008CAC4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10008CAC4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v12);
  return v7;
}

uint64_t sub_100172CBC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100172E74(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100172E74(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_100172F08(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_100173158(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_100173158(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_100172F08(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10017307C(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10017307C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100003DB8(&qword_100322970);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size_0(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1001730E0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_100173158(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003DB8(&qword_100322970);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001732A8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _BYTE *))
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE v11[8];
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 40);
  v11[0] = *(_BYTE *)a1;
  v12 = v4;
  v13 = v5;
  v14 = *(_OWORD *)(a1 + 24);
  v15 = v6;
  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v7);
  if (result)
  {
    v9 = result;
    a3(result, v11);
    return swift_release(v9);
  }
  return result;
}

uint64_t sub_100173338(_OWORD *a1, uint64_t a2, void (*a3)(uint64_t, _OWORD *))
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[24];
  _OWORD v10[4];

  v4 = a1[1];
  v10[0] = *a1;
  v10[1] = v4;
  v5 = a1[3];
  v10[2] = a1[2];
  v10[3] = v5;
  v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    v8 = result;
    a3(result, v10);
    return swift_release(v8);
  }
  return result;
}

uint64_t sub_1001733B0(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *a1;
  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, &v7, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    a3(result, &v8);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_100173420(char *a1, uint64_t a2, void (*a3)(uint64_t, char *))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v8 = *a1;
  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, &v7, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    a3(result, &v8);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_100173490(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _BYTE *))
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE v10[8];
  uint64_t v11;

  v4 = *(_BYTE *)(a1 + 1);
  v5 = *(_QWORD *)(a1 + 8);
  v10[0] = *(_BYTE *)a1;
  v10[1] = v4;
  v11 = v5;
  v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    v8 = result;
    a3(result, v10);
    return swift_release(v8);
  }
  return result;
}

uint64_t sub_100173510(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _BYTE *))
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE v14[8];
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 33);
  v9 = *(_QWORD *)(a1 + 40);
  v14[0] = *(_BYTE *)a1;
  v15 = v4;
  v16 = v5;
  v17 = v6;
  v18 = v7;
  v19 = v8;
  v10 = a2 + 16;
  v20 = v9;
  swift_beginAccess(a2 + 16, v13, 0, 0);
  result = swift_weakLoadStrong(v10);
  if (result)
  {
    v12 = result;
    a3(result, v14);
    return swift_release(v12);
  }
  return result;
}

uint64_t sub_1001735B0(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;

  v4 = *((_BYTE *)a1 + 8);
  v5 = a1[2];
  v6 = *((_BYTE *)a1 + 24);
  v7 = a1[4];
  v8 = *((_BYTE *)a1 + 40);
  v9 = *((_BYTE *)a1 + 41);
  v10 = *((_BYTE *)a1 + 42);
  v11 = a1[6];
  v16 = *a1;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  v21 = v8;
  v22 = v9;
  v23 = v10;
  v12 = a2 + 16;
  v24 = v11;
  swift_beginAccess(a2 + 16, &v15, 0, 0);
  result = swift_weakLoadStrong(v12);
  if (result)
  {
    v14 = result;
    a3(result, &v16);
    return swift_release(v14);
  }
  return result;
}

uint64_t sub_100173660(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _BYTE *))
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE v15[8];
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 33);
  v9 = *(_BYTE *)(a1 + 34);
  v10 = *(_QWORD *)(a1 + 40);
  v15[0] = *(_BYTE *)a1;
  v16 = v4;
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v20 = v8;
  v21 = v9;
  v11 = a2 + 16;
  v22 = v10;
  swift_beginAccess(a2 + 16, v14, 0, 0);
  result = swift_weakLoadStrong(v11);
  if (result)
  {
    v13 = result;
    a3(result, v15);
    return swift_release(v13);
  }
  return result;
}

uint64_t sub_100173708(__int128 *a1, uint64_t a2, void (*a3)(uint64_t, __int128 *))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[24];
  __int128 v8;

  v8 = *a1;
  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    a3(result, &v8);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_100173778(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _BYTE *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE v9[8];
  uint64_t v10;
  __int128 v11;

  v4 = *(_QWORD *)(a1 + 8);
  v9[0] = *(_BYTE *)a1;
  v10 = v4;
  v11 = *(_OWORD *)(a1 + 16);
  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    a3(result, v9);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_1001737F8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _BYTE *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE v9[8];
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  v9[0] = *(_BYTE *)a1;
  v10 = v4;
  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    a3(result, v9);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_100173870(_QWORD *a1, uint64_t a2, void (*a3)(uint64_t, _QWORD *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];
  _QWORD v9[2];

  v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    a3(result, v9);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_1001738E0(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v8 = *a1;
  v9 = *(_OWORD *)(a1 + 1);
  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, &v7, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    a3(result, &v8);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_100173958(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  char v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];
  uint64_t v9;
  char v10;

  v4 = *((_BYTE *)a1 + 8);
  v9 = *a1;
  v10 = v4;
  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    a3(result, &v9);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_1001739D0(__int128 *a1, uint64_t a2, void (*a3)(uint64_t, __int128 *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];
  __int128 v9;
  uint64_t v10;

  v4 = *((_QWORD *)a1 + 2);
  v9 = *a1;
  v10 = v4;
  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    a3(result, &v9);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_100173A48(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;

  v4 = *((_BYTE *)a1 + 8);
  v5 = *((_BYTE *)a1 + 9);
  v6 = a1[2];
  v11 = *a1;
  v12 = v4;
  v13 = v5;
  v14 = v6;
  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, &v10, 0, 0);
  result = swift_weakLoadStrong(v7);
  if (result)
  {
    v9 = result;
    a3(result, &v11);
    return swift_release(v9);
  }
  return result;
}

uint64_t sub_100173AD0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    a3();
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_100173B34(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a4[21];
  a4[20] = a1;
  a4[21] = a2;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v6);
  a4[7] = &off_1002F3C50;
  swift_unknownObjectWeakAssign(a4 + 6, a3);
  if (!sub_10000BB70())
  {
    if (qword_100315858 != -1)
      swift_once(&qword_100315858, sub_1000D96AC);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10000D744(v7, (uint64_t)qword_10033FDC0);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to start EEDSource instance", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

  }
  v12 = a4[25];
  v13 = a4[26];
  v14 = a4[27];
  v15 = a4[28];
  v16 = a4[29];
  v17 = a4[30];
  v18 = a4[31];
  v19 = a4[32];
  *(_OWORD *)(a4 + 25) = xmmword_10024E030;
  *(_OWORD *)(a4 + 27) = xmmword_10024E030;
  *(_OWORD *)(a4 + 29) = xmmword_10024E030;
  a4[31] = 0;
  a4[32] = 0;
  sub_10006491C(v12, v13);
  sub_10006491C(v14, v15);
  return sub_100064A24(v16, v17, v18, v19);
}

uint64_t sub_100173CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v10 = a6[33];
  v11 = a6 + 37;
  a6[32] = a1;
  a6[33] = a2;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v10);
  a6[7] = &off_1002F3C50;
  swift_unknownObjectWeakAssign(a6 + 6, a3);
  a6[9] = &off_1002FA510;
  swift_unknownObjectWeakAssign(a6 + 8, a4);
  a6[11] = &off_1002F3CC8;
  swift_unknownObjectWeakAssign(a6 + 10, a5);
  v12 = a6[37];
  v13 = a6[38];
  v14 = v11[2];
  v15 = a6[40];
  v16 = v11[4];
  v17 = a6[42];
  v18 = a6[43];
  v19 = a6[44];
  *(_OWORD *)v11 = xmmword_10024E030;
  *((_OWORD *)v11 + 1) = xmmword_10024E030;
  *((_OWORD *)v11 + 2) = xmmword_10024E030;
  a6[43] = 0;
  a6[44] = 0;
  sub_10006491C(v12, v13);
  sub_10006491C(v14, v15);
  return sub_100064A24(v16, v17, v18, v19);
}

char *sub_100173D94(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100173E7C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100173F6C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100174060(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 88 * a1 + 32;
  v6 = a3 + 88 * v4;
  if (v5 >= v6 || v5 + 88 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100174150(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100174238(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(sub_100003DB8(&qword_100317D58) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100174354(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100174448(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100003DB8(&qword_100322D78);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100174550(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_100174640(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100174724(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100174818(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = (char *)(a4 + 24 * a1 + 32);
  v6 = 24 * v4;
  v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100174904(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100174A1C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_100003DB8((uint64_t *)&unk_100324A70);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100174B28(_BYTE *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *object;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  _QWORD v58[5];
  _QWORD v59[5];
  char v60[16];
  uint64_t v61;
  uint64_t v62[5];
  uint64_t countAndFlagsBits;
  _QWORD v64[4];
  __int128 v65;

  sub_10000B458((uint64_t)a2, (uint64_t)v59, &qword_100319D68);
  v6 = v59[0];
  v7 = v59[2];
  v8 = v59[3];
  v50 = v59[4];
  v51 = v59[1];
  sub_10000B458((uint64_t)a3, (uint64_t)v58, &qword_100319D68);
  v9 = v58[0];
  v48 = v58[2];
  v49 = v58[1];
  v46 = v58[4];
  v47 = v58[3];
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v10 = type metadata accessor for Logger(0);
  sub_10000D744(v10, (uint64_t)qword_10033FD18);
  sub_1000C71A0((uint64_t)a1);
  sub_100064870(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
  sub_100064870(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
  sub_1000C71A0((uint64_t)a1);
  sub_100064870(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
  v11 = sub_100064870(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v45 = v7;
    v14 = swift_slowAlloc(32, -1);
    v42 = swift_slowAlloc(96, -1);
    v53._countAndFlagsBits = v42;
    v15.n128_u64[0] = 136446723;
    *(_DWORD *)v14 = 136446723;
    LOBYTE(countAndFlagsBits) = *a1;
    v44 = v8;
    v16 = String.init<A>(describing:)(&countAndFlagsBits, &type metadata for AlertCommandKind, v15);
    v43 = v9;
    v18 = v17;
    countAndFlagsBits = sub_100172BEC(v16, v17, &v53._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&countAndFlagsBits, v64, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v18);
    sub_1000C71C8((uint64_t)a1);
    sub_1000C71C8((uint64_t)a1);
    *(_WORD *)(v14 + 12) = 2081;
    sub_10000B458((uint64_t)a2, (uint64_t)&countAndFlagsBits, &qword_100319D68);
    sub_100064870(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
    v19 = v6;
    v20 = sub_100003DB8(&qword_100319D68);
    v22 = String.init<A>(describing:)(&countAndFlagsBits, v20, v21);
    v24 = v23;
    countAndFlagsBits = sub_100172BEC(v22, v23, &v53._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&countAndFlagsBits, v64, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v24);
    sub_100064870(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
    sub_100064870(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
    *(_WORD *)(v14 + 22) = 2081;
    sub_10000B458((uint64_t)a3, (uint64_t)&countAndFlagsBits, &qword_100319D68);
    sub_100064870(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
    v25 = v20;
    v6 = v19;
    v27 = String.init<A>(describing:)(&countAndFlagsBits, v25, v26);
    v29 = v28;
    countAndFlagsBits = sub_100172BEC(v27, v28, &v53._countAndFlagsBits);
    v8 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&countAndFlagsBits, v64, v14 + 24, v14 + 32);
    v30 = v29;
    v9 = v43;
    swift_bridgeObjectRelease(v30);
    sub_100064870(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
    sub_100064870(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "handleAlertRequest: %{public}s, requestedProvider=%{private}s, resumableProvider=%{private}s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy(v42, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    v31 = v14;
    v7 = v45;
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    sub_1000C71C8((uint64_t)a1);
    sub_1000C71C8((uint64_t)a1);
    sub_100064870(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
    sub_100064870(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
    sub_100064870(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
    sub_100064870(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
  }

  if ((*a1 & 1) != 0)
  {
    sub_100186D04(&v53);
    object = v53._object;
    v33 = v54;
    v34 = v55;
    v35 = v56;
    v36 = v57;
    countAndFlagsBits = v53._countAndFlagsBits;
  }
  else
  {
    sub_10000B458((uint64_t)a2, (uint64_t)v60, &qword_100319D68);
    if (v61)
    {
      v37 = v50;
      v38 = v51;
    }
    else
    {
      sub_100064870(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
      v6 = v9;
      v7 = v48;
      v38 = v49;
      v37 = v46;
      v8 = v47;
    }
    v62[0] = v6;
    v62[1] = v38;
    v62[2] = v7;
    v62[3] = v8;
    v62[4] = v37;
    sub_100064870(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
    sub_1001869F8(v62, &v53);
    v39 = v8;
    v40 = v53._countAndFlagsBits;
    object = v53._object;
    v41 = v7;
    v33 = v54;
    v34 = v55;
    v35 = v56;
    v52 = v57;
    sub_100034464(v6, v38, v41, v39, v37);
    v36 = v52;
    countAndFlagsBits = v40;
  }
  v64[0] = object;
  v64[1] = v33;
  v64[2] = v34;
  v64[3] = v35;
  v65 = v36;
  sub_1001867A0(&countAndFlagsBits);
  sub_10016D6FC(a1[33]);
}

char *sub_100174FD8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t *sub_1001750C0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[3];
  v6 = a1[4];
  v5 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  v10 = a1[8];
  v9 = a1[9];
  v12 = a1[10];
  v13 = a1[11];
  v14 = a1[12];
  v15 = a1[13];
  v16 = a1[14];
  v17 = a1[15];
  v18 = a1[16];
  v19 = a1[17];
  v20 = a1[18];
  v21 = a1[19];
  v22 = a1[20];
  v23 = a1[21];
  v24 = a1[22];
  v25 = a1[23];
  v26 = a1[24];
  v27 = a1[25];
  v28 = a1[26];
  v29 = a1[27];
  v30 = a1[28];
  v31 = a1[29];
  v32 = a1[30];
  v33 = a1[31];
  v34 = a1[32];
  v35 = a1[33];
  v36 = a1[34];
  v37 = a1[35];
  v38 = a1[36];
  v39 = a1[37];
  v40 = a1[38];
  v41 = a1[39];
  v42 = a1[40];
  v43 = a1[41];
  v44 = a1[42];
  swift_retain(a1[43]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v6);
  swift_retain(v5);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v10);
  swift_retain(v9);
  swift_retain(v12);
  swift_retain(v13);
  swift_retain(v14);
  swift_retain(v15);
  swift_retain(v16);
  swift_retain(v17);
  swift_retain(v18);
  swift_retain(v19);
  swift_retain(v20);
  swift_retain(v21);
  swift_retain(v22);
  swift_retain(v23);
  swift_retain(v24);
  swift_retain(v25);
  swift_retain(v26);
  swift_retain(v27);
  swift_retain(v28);
  swift_retain(v29);
  swift_retain(v30);
  swift_retain(v31);
  swift_retain(v32);
  swift_retain(v33);
  swift_retain(v34);
  swift_retain(v35);
  swift_retain(v36);
  swift_retain(v37);
  swift_retain(v38);
  swift_retain(v39);
  swift_retain(v40);
  swift_retain(v41);
  swift_retain(v42);
  swift_retain(v43);
  swift_retain(v44);
  return a1;
}

uint64_t *sub_100175338(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v22 = a1[2];
  v23 = *a1;
  v24 = a1[3];
  v25 = a1[5];
  v20 = a1[6];
  v21 = a1[4];
  v26 = a1[7];
  v27 = a1[9];
  v18 = a1[10];
  v19 = a1[8];
  v28 = a1[11];
  v29 = a1[13];
  v16 = a1[14];
  v17 = a1[12];
  v30 = a1[15];
  v31 = a1[17];
  v14 = a1[18];
  v15 = a1[16];
  v32 = a1[19];
  v33 = a1[21];
  v12 = a1[22];
  v13 = a1[20];
  v2 = a1[24];
  v34 = a1[23];
  v3 = a1[26];
  v4 = a1[28];
  v35 = a1[25];
  v36 = a1[27];
  v5 = a1[30];
  v6 = a1[32];
  v37 = a1[29];
  v38 = a1[31];
  v7 = a1[34];
  v8 = a1[36];
  v39 = a1[33];
  v40 = a1[35];
  v9 = a1[38];
  v10 = a1[40];
  v41 = a1[37];
  v42 = a1[39];
  v43 = a1[41];
  v44 = a1[43];
  swift_release(a1[42]);
  swift_release(v10);
  swift_release(v9);
  swift_release(v8);
  swift_release(v7);
  swift_release(v6);
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  swift_release(v12);
  swift_release(v13);
  swift_release(v14);
  swift_release(v15);
  swift_release(v16);
  swift_release(v17);
  swift_release(v18);
  swift_release(v19);
  swift_release(v20);
  swift_release(v21);
  swift_release(v22);
  swift_release(v23);
  swift_release(v24);
  swift_release(v25);
  swift_release(v26);
  swift_release(v27);
  swift_release(v28);
  swift_release(v29);
  swift_release(v30);
  swift_release(v31);
  swift_release(v32);
  swift_release(v33);
  swift_release(v34);
  swift_release(v35);
  swift_release(v36);
  swift_release(v37);
  swift_release(v38);
  swift_release(v39);
  swift_release(v40);
  swift_release(v41);
  swift_release(v42);
  swift_release(v43);
  swift_release(v44);
  return a1;
}

void sub_10017559C(char a1)
{
  uint64_t v1;

  sub_10016DB78(a1, v1);
}

uint64_t sub_1001755A4()
{
  uint64_t v0;

  return sub_10016DB24(v0);
}

double sub_1001755AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1001755BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001755C8()
{
  uint64_t v0;

  return sub_10016CCA8(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1001755D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100175604(uint64_t a1)
{
  uint64_t v1;

  return sub_10016C83C(a1, *(_QWORD *)(v1 + 16), v1 + 24);
}

uint64_t sub_100175610(_QWORD *a1, _BYTE *a2)
{
  uint64_t v2;

  return sub_100166664(a1, a2, v2);
}

uint64_t sub_100175618(uint64_t a1, unsigned __int8 *a2)
{
  return sub_100167594(a1, a2);
}

unint64_t sub_100175620()
{
  unint64_t result;

  result = qword_100322A18;
  if (!qword_100322A18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100322A18);
  }
  return result;
}

unint64_t sub_100175664()
{
  unint64_t result;

  result = qword_100322A20;
  if (!qword_100322A20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100322A20);
  }
  return result;
}

uint64_t sub_1001756AC(uint64_t a1)
{
  uint64_t v1;

  return sub_1001732A8(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, _BYTE *))(v1 + 24));
}

uint64_t sub_1001756BC(_OWORD *a1)
{
  uint64_t v1;

  return sub_100173338(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, _OWORD *))(v1 + 24));
}

uint64_t sub_1001756D0(uint64_t *a1)
{
  uint64_t v1;

  return sub_1001733B0(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, uint64_t *))(v1 + 24));
}

uint64_t sub_1001756E4(char *a1)
{
  uint64_t v1;

  return sub_100173420(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, char *))(v1 + 24));
}

uint64_t sub_1001756F4(uint64_t a1)
{
  uint64_t v1;

  return sub_100173490(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, _BYTE *))(v1 + 24));
}

uint64_t sub_100175714(uint64_t a1)
{
  uint64_t v1;

  return sub_100173510(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, _BYTE *))(v1 + 24));
}

uint64_t sub_100175724(uint64_t *a1)
{
  uint64_t v1;

  return sub_1001735B0(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, uint64_t *))(v1 + 24));
}

uint64_t sub_100175734(uint64_t a1)
{
  uint64_t v1;

  return sub_100173660(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, _BYTE *))(v1 + 24));
}

uint64_t sub_100175744(__int128 *a1)
{
  uint64_t v1;

  return sub_100173708(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, __int128 *))(v1 + 24));
}

uint64_t sub_100175754(char *a1)
{
  uint64_t v1;

  return sub_100173420(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, char *))(v1 + 24));
}

uint64_t sub_100175774(uint64_t a1)
{
  uint64_t v1;

  return sub_100173778(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, _BYTE *))(v1 + 24));
}

uint64_t sub_100175784(uint64_t a1)
{
  uint64_t v1;

  return sub_1001737F8(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, _BYTE *))(v1 + 24));
}

uint64_t sub_1001757A4(_QWORD *a1)
{
  uint64_t v1;

  return sub_100173870(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, _QWORD *))(v1 + 24));
}

uint64_t sub_1001757B4(uint64_t *a1)
{
  uint64_t v1;

  return sub_1001738E0(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, uint64_t *))(v1 + 24));
}

uint64_t sub_1001757C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001757E8(char a1)
{
  uint64_t v1;

  return sub_1001685CC(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t sub_1001757F0(uint64_t a1)
{
  uint64_t v1;

  return sub_10016FC64(a1, *(uint64_t (**)(BOOL))(v1 + 16), *(_QWORD *)(v1 + 24), "switchFromRoadsideToEmergency success: %{BOOL,public}d");
}

uint64_t sub_100175814(char a1)
{
  uint64_t v1;
  uint64_t (*v2)(char *);
  char v4;

  v2 = *(uint64_t (**)(char *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_100175844(uint64_t a1)
{
  uint64_t v1;

  return sub_10016FC64(a1, *(uint64_t (**)(BOOL))(v1 + 16), *(_QWORD *)(v1 + 24), "switchFromEmergencyToRoadside success: %{BOOL,public}d");
}

uint64_t sub_100175870()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100175894(uint64_t a1)
{
  uint64_t v1;

  return sub_1001677A8(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_1001758A8(uint64_t a1)
{
  uint64_t v1;

  return sub_100163D30(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, uint64_t))(v1 + 24));
}

uint64_t sub_1001758C4()
{
  uint64_t v0;

  return sub_100166C08(v0);
}

uint64_t sub_1001758D0(uint64_t a1)
{
  uint64_t v1;

  return sub_100163D30(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, uint64_t))(v1 + 24));
}

uint64_t sub_1001758DC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ServicePredictionsModel.RequestToken(a2, a1);
  return a2;
}

uint64_t sub_100175918(uint64_t a1, uint64_t a2)
{
  initializeWithTake for ServicePredictionsModel.RequestToken(a2, a1);
  return a2;
}

uint64_t sub_100175954(uint64_t a1)
{
  return sub_1001664DC(a1);
}

uint64_t sub_100175960(uint64_t *a1)
{
  uint64_t v1;

  return sub_100173958(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, uint64_t *))(v1 + 24));
}

uint64_t sub_100175970(__int128 *a1)
{
  uint64_t v1;

  return sub_1001739D0(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, __int128 *))(v1 + 24));
}

uint64_t sub_100175980(uint64_t *a1)
{
  uint64_t v1;

  return sub_100173A48(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, uint64_t *))(v1 + 24));
}

uint64_t sub_100175998(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003DB8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001759E0(uint64_t a1)
{
  uint64_t v1;

  return sub_100173AD0(a1, *(_QWORD *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

void sub_1001759FC()
{
  uint64_t v0;

  sub_10015E504(v0, &qword_100315878, (uint64_t)qword_10033FE20, (uint64_t)sub_1000D9778);
}

unint64_t sub_100175A2C()
{
  unint64_t result;

  result = qword_100322D40;
  if (!qword_100322D40)
  {
    result = swift_getWitnessTable(&unk_10024D488, &type metadata for UIFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100322D40);
  }
  return result;
}

void sub_100175A70()
{
  uint64_t v0;

  sub_10015E504(v0, &qword_1003158D8, (uint64_t)qword_10033FF40, (uint64_t)sub_1000D9904);
}

uint64_t sub_100175AA0(char a1)
{
  uint64_t v1;

  return sub_10016FDB0(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t sub_100175AA8(uint64_t a1)
{
  uint64_t v1;

  return sub_10016FC64(a1, *(uint64_t (**)(BOOL))(v1 + 16), *(_QWORD *)(v1 + 24), "Transitioned back to emergency, success: %{BOOL,public}d");
}

uint64_t sub_100175AC8(uint64_t a1)
{
  uint64_t v1;

  return sub_10016FC64(a1, *(uint64_t (**)(BOOL))(v1 + 16), *(_QWORD *)(v1 + 24), "Transitioned back to roadside, success: %{BOOL,public}d");
}

uint64_t *sub_100175AE8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[7];
  swift_retain(a1[9]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

char *sub_100175B50(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = (char *)(a4 + 12 * a1 + 32);
  v6 = 12 * v4;
  v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100175C88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  __n128 v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v39 = *(_QWORD *)(v0 - 8);
  v40 = v0;
  __chkstk_darwin(v0, v1);
  v3 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v13 = objc_msgSend(v12, "bundleIdentifier");

  if (v13)
  {
    v14 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

  }
  else
  {
    v16 = 0x8000000100260990;
    v14 = (_QWORD *)0xD000000000000012;
  }
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v43 = v14;
  v44 = v16;
  swift_bridgeObjectRetain(v16);
  v17._countAndFlagsBits = 0x616E4165726F432ELL;
  v17._object = (void *)0xEE0073636974796CLL;
  String.append(_:)(v17);
  v18 = swift_bridgeObjectRelease(v16);
  v19 = v43;
  v20 = v44;
  static DispatchQoS.unspecified.getter(v18);
  v43 = _swiftEmptyArrayStorage;
  v21 = sub_1000052EC((unint64_t *)&unk_1003178B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = sub_100003DB8((uint64_t *)&unk_100324AE0);
  v23 = sub_10000F138((unint64_t *)&unk_1003178C0, (uint64_t *)&unk_100324AE0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v22, v23, v4, v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v39 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v40);
  v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v19, v20, v11, v7, v3, 0);
  v25 = v41;
  *(_QWORD *)(v41 + 16) = v24;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v26 = type metadata accessor for Logger(0);
  sub_10000D744(v26, (uint64_t)qword_10033FD18);
  v28 = swift_retain_n(v25, v27);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = (_QWORD *)swift_slowAlloc(32, -1);
    v42 = v25;
    v43 = v32;
    *(_DWORD *)v31 = 136446210;
    v33 = type metadata accessor for CoreAnalyticsAgent();
    v34 = swift_retain(v25);
    v35 = String.init<A>(describing:)(&v42, v33, v34);
    v37 = v36;
    v42 = sub_100172BEC(v35, v36, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v31 + 4, v31 + 12);
    swift_release_n(v25);
    swift_bridgeObjectRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "[%{public}s] init", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_release_n(v25);
  }
  return v25;
}

uint64_t sub_100176074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = swift_retain_n(v0, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v1;
    v16 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for CoreAnalyticsAgent();
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v9, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] deinit", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }

  return v1;
}

uint64_t sub_100176238()
{
  uint64_t v0;

  sub_100176074();
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for CoreAnalyticsAgent()
{
  return objc_opt_self(_TtC8SOSBuddy18CoreAnalyticsAgent);
}

uint64_t sub_100176278(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  NSObject *v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  void *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD aBlock[5];
  uint64_t v37;

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315818 != -1)
    swift_once(&qword_100315818, sub_1000D95C0);
  v15 = type metadata accessor for Logger(0);
  sub_10000D744(v15, (uint64_t)qword_10033FD00);
  v17 = swift_bridgeObjectRetain_n(a2, 2, v16);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, (os_log_type_t)v19))
  {
    v29 = v19;
    v30 = v3;
    v33 = v7;
    v20 = (_DWORD *)swift_slowAlloc(22, -1);
    v28 = swift_slowAlloc(64, -1);
    aBlock[0] = v28;
    *v20 = 136315394;
    v31 = a1;
    v32 = v11;
    __asm { BR              X10 }
  }

  swift_bridgeObjectRelease_n(a2, 2);
  v21 = swift_allocObject(&unk_1002F4658, 32, 7);
  *(_BYTE *)(v21 + 16) = a1;
  *(_QWORD *)(v21 + 24) = a2;
  aBlock[4] = sub_100176948;
  v37 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002F4670;
  v22 = _Block_copy(aBlock);
  v23 = swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v23);
  v35 = _swiftEmptyArrayStorage;
  v24 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v26 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v25, v26, v6, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v11);
  return swift_release(v37);
}

void sub_10017671C(char a1)
{
  __asm { BR              X11 }
}

void sub_100176770()
{
  uint64_t v0;
  char v1;
  NSString v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x800000010026C3F0);
  v3 = swift_allocObject(&unk_1002F46A8, 32, 7);
  *(_BYTE *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v0;
  v6[4] = sub_10017696C;
  v7 = v3;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_1001768A0;
  v6[3] = &unk_1002F46C0;
  v4 = _Block_copy(v6);
  v5 = v7;
  swift_bridgeObjectRetain(v0);
  swift_release(v5);
  ((void (*)(NSString, void *))AnalyticsSendEventLazy)(v2, v4);
  _Block_release(v4);

}

Class sub_1001768A0(uint64_t a1)
{
  uint64_t (*v1)(__n128);
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSDictionary v5;

  v1 = *(uint64_t (**)(__n128))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_10006477C(0, &qword_100322E58, NSObject_ptr);
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5.super.isa = 0;
  }
  return v5.super.isa;
}

uint64_t sub_100176924()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100176948()
{
  uint64_t v0;

  sub_10017671C(*(_BYTE *)(v0 + 16));
}

double sub_100176954(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_100176964(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

double sub_10017696C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = sub_100176988(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24));
  *(_QWORD *)&result = swift_bridgeObjectRetain(v1).n128_u64[0];
  return result;
}

uint64_t sub_100176988(char a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _DWORD *v9;

  if (qword_100315818 != -1)
    swift_once(&qword_100315818, sub_1000D95C0);
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FD00);
  v6 = swift_bridgeObjectRetain_n(a2, 2, v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (_DWORD *)swift_slowAlloc(22, -1);
    swift_slowAlloc(64, -1);
    *v9 = 136315394;
    __asm { BR              X10 }
  }

  swift_bridgeObjectRelease_n(a2, 2);
  return a2;
}

void sub_100176C70(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_10003E704((_OWORD *)a1, v15);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v13 = *v2;
    *v2 = 0x8000000000000000;
    sub_10020CD54(v15, a2, isUniquelyReferenced_nonNull_native);
    v6 = *v2;
    *v2 = v13;
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    sub_100007FF0(a1, &qword_100324AC0);
    v7 = sub_10017D2F0(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native(*v2);
      v11 = *v2;
      v14 = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        sub_10008B340();
        v11 = v14;
      }
      sub_10003E704((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v9), v15);
      sub_10017DECC(v9, v11);
      v12 = *v3;
      *v3 = v11;
      swift_bridgeObjectRelease(v12);
    }
    else
    {
      memset(v15, 0, sizeof(v15));
    }
    sub_100007FF0((uint64_t)v15, &qword_100324AC0);
  }
}

uint64_t sub_100176D80(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10003E704((_OWORD *)a1, v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v9 = *v2;
    *v2 = 0x8000000000000000;
    sub_10020D298(v10, a2, isUniquelyReferenced_nonNull_native);
    v5 = *v2;
    *v2 = v9;
    swift_bridgeObjectRelease(v5);
    v6 = type metadata accessor for CodingUserInfoKey(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a2, v6);
  }
  else
  {
    sub_100007FF0(a1, &qword_100324AC0);
    sub_10017DC00(a2, v10);
    v8 = type metadata accessor for CodingUserInfoKey(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a2, v8);
    return sub_100007FF0((uint64_t)v10, &qword_100324AC0);
  }
}

uint64_t sub_100176E64()
{
  uint64_t v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100176E9C
                                                                     + 4
                                                                     * asc_100259710[*(unsigned __int8 *)(v0 + 16)]))(0xD000000000000019, 0x800000010026CCD0);
}

unint64_t sub_100176E9C()
{
  return 0xD000000000000021;
}

uint64_t sub_100176F04@<X0>(uint64_t a1@<X8>)
{
  return a1 + 8;
}

uint64_t sub_100176F14@<X0>(uint64_t a1@<X8>)
{
  return a1 - 6;
}

void sub_100176F24()
{
  JUMPOUT(0x100176F30);
}

unint64_t sub_100176F40(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  _QWORD v23[3];

  v4 = HIBYTE(a2) & 0xF;
  v5 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v6 = v4;
  else
    v6 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v6)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v8 = (unint64_t)sub_10017F33C(a1, a2, 10);
    v10 = v22;
    goto LABEL_39;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
      v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
    v8 = (unint64_t)sub_10017F420(v7, v5, 10);
    v10 = v9 & 1;
    goto LABEL_39;
  }
  v23[0] = a1;
  v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v4)
      goto LABEL_52;
    if (v4 == 1 || (BYTE1(a1) - 48) > 9u)
      goto LABEL_36;
    v8 = (BYTE1(a1) - 48);
    v15 = v4 - 2;
    if (v15)
    {
      v16 = (unsigned __int8 *)v23 + 2;
      while (1)
      {
        v17 = *v16 - 48;
        if (v17 > 9)
          goto LABEL_36;
        if (!is_mul_ok(v8, 0xAuLL))
          goto LABEL_36;
        v14 = __CFADD__(10 * v8, v17);
        v8 = 10 * v8 + v17;
        if (v14)
          goto LABEL_36;
        v10 = 0;
        ++v16;
        if (!--v15)
          goto LABEL_39;
      }
    }
LABEL_38:
    v10 = 0;
    goto LABEL_39;
  }
  if (a1 != 45)
  {
    if (!v4 || (a1 - 48) > 9u)
      goto LABEL_36;
    v8 = (a1 - 48);
    v18 = v4 - 1;
    if (v18)
    {
      v20 = (unsigned __int8 *)v23 + 1;
      while (1)
      {
        v21 = *v20 - 48;
        if (v21 > 9)
          goto LABEL_36;
        if (!is_mul_ok(v8, 0xAuLL))
          goto LABEL_36;
        v14 = __CFADD__(10 * v8, v21);
        v8 = 10 * v8 + v21;
        if (v14)
          goto LABEL_36;
        v10 = 0;
        ++v20;
        if (!--v18)
          goto LABEL_39;
      }
    }
    goto LABEL_38;
  }
  if (v4)
  {
    if (v4 != 1 && (BYTE1(a1) - 48) <= 9u)
    {
      v2 = 0;
      v8 = -(uint64_t)(BYTE1(a1) - 48);
      if (BYTE1(a1) == 48)
      {
        v11 = v4 - 2;
        if (v11)
        {
          v12 = (unsigned __int8 *)v23 + 2;
          while (1)
          {
            v13 = *v12 - 48;
            if (v13 > 9)
              goto LABEL_36;
            if (!is_mul_ok(v8, 0xAuLL))
              goto LABEL_36;
            v14 = 10 * v8 >= v13;
            v8 = 10 * v8 - v13;
            if (!v14)
              goto LABEL_36;
            v10 = 0;
            ++v12;
            if (!--v11)
              goto LABEL_39;
          }
        }
        goto LABEL_38;
      }
      goto LABEL_53;
    }
LABEL_36:
    v8 = 0;
    v10 = 1;
    goto LABEL_39;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  v10 = 1;
  v8 = v2;
LABEL_39:
  swift_bridgeObjectRelease(a2);
  if ((v10 & 1) != 0)
    return 0;
  else
    return v8;
}

BOOL sub_10017719C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_1001771B4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  void *object;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v1 = a1[3];
  v2 = a1[4];
  sub_100007BBC(a1, v1);
  dispatch thunk of Encoder.singleValueContainer()(v12, v1, v2);
  v10 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
  v11 = v3;
  v4._countAndFlagsBits = 46;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7 = v13;
  v8 = v14;
  sub_10001D2C4((uint64_t)v12, v13);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v10, v11, v7, v8);
  swift_bridgeObjectRelease(v11);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v12);
}

void sub_1001772BC(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  sub_10017FB58(a1);
  if (!v2)
  {
    *a2 = v4;
    a2[1] = v5;
  }
}

uint64_t sub_1001772E4(_QWORD *a1)
{
  return sub_1001771B4(a1);
}

uint64_t sub_1001772FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_allocObject(v2, 32, 7);
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_100177338()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 32, 7);
  swift_deallocPartialClassInstance(v1, v0, 32, 7);
  return 0;
}

uint64_t type metadata accessor for StringCodingKey()
{
  return objc_opt_self(_TtC8SOSBuddyP33_582E2C1178450B40512F948C7832E18815StringCodingKey);
}

uint64_t sub_10017738C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 24));
  return v1;
}

uint64_t sub_1001773BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 88))();
  *a1 = result;
  return result;
}

uint64_t sub_1001773E4()
{
  return 0;
}

uint64_t sub_1001773F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 104))();
  *a1 = result;
  return result;
}

uint64_t sub_100177418(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10025A028, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_10017744C(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10025A028, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t sub_100177480(uint64_t a1)
{
  return sub_1001774EC(a1, qword_10033FFA0, 0xD000000000000011, 0x800000010026CD10);
}

uint64_t sub_1001774A4(uint64_t a1)
{
  return sub_1001774EC(a1, qword_10033FFB8, 0xD000000000000013, 0x800000010026CAA0);
}

uint64_t sub_1001774C8(uint64_t a1)
{
  return sub_1001774EC(a1, qword_10033FFD0, 0xD00000000000001ALL, 0x800000010026CD60);
}

uint64_t sub_1001774EC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v7 = sub_100003DB8(&qword_100323AC0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CodingUserInfoKey(0);
  sub_1000D971C(v11, a2);
  v12 = sub_10000D744(v11, (uint64_t)a2);
  CodingUserInfoKey.init(rawValue:)(a3, a4);
  v13 = *(_QWORD *)(v11 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v12, v10, v11);
  __break(1u);
  return result;
}

uint64_t sub_1001775C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v4 = type metadata accessor for CodingUserInfoKey(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100007BBC(a1, v9);
  v11 = dispatch thunk of Decoder.userInfo.getter(v9, v10);
  if (qword_100315908 != -1)
    swift_once(&qword_100315908, sub_1001774A4);
  v12 = sub_10000D744(v4, (uint64_t)qword_10033FFB8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v12, v4);
  if (*(_QWORD *)(v11 + 16) && (v13 = sub_10017D55C((uint64_t)v8), (v14 & 1) != 0))
  {
    sub_10008CAC4(*(_QWORD *)(v11 + 56) + 32 * v13, (uint64_t)&v25);
  }
  else
  {
    v25 = 0u;
    v26 = 0u;
  }
  v15 = swift_bridgeObjectRelease(v11);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v8, v4, v15);
  if (*((_QWORD *)&v26 + 1))
  {
    v16 = sub_100003DB8(&qword_100323AB8);
    if ((swift_dynamicCast(&v27, &v25, (char *)&type metadata for Any + 8, v16, 6) & 1) != 0)
    {
      if (*((_QWORD *)&v28 + 1))
        return sub_100007D04(&v27, a2);
    }
    else
    {
      v29 = 0;
      v27 = 0u;
      v28 = 0u;
    }
  }
  else
  {
    sub_100007FF0((uint64_t)&v25, &qword_100324AC0);
    v27 = 0u;
    v28 = 0u;
    v29 = 0;
  }
  sub_100007FF0((uint64_t)&v27, &qword_100323AB0);
  v18 = type metadata accessor for DecodingError(0);
  swift_allocError(v18, &protocol witness table for DecodingError, 0, 0);
  v20 = v19;
  v21 = a1[3];
  v22 = a1[4];
  sub_100007BBC(a1, v21);
  v23 = dispatch thunk of Decoder.codingPath.getter(v21, v22);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v23, 0xD00000000000001CLL, 0x800000010026CA80, 0);
  v24 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, enum case for DecodingError.dataCorrupted(_:), v18);
  return swift_willThrow(v24);
}

uint64_t sub_100177828(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  NSString v12;
  NSString v13;
  NSString v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  _QWORD *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = a2;
  v4 = HIBYTE(a2) & 0xF;
  v35 = a1;
  if ((a2 & 0x2000000000000000) == 0)
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    goto LABEL_25;
  v5 = *(_QWORD **)(v2 + 24);
  v34 = v5[2];
  if (!v34)
  {
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_10000D744(v18, (uint64_t)qword_10033FEC8);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "No tableNames provided", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    goto LABEL_25;
  }
  v33 = *(id *)(v2 + 16);
  v6 = v5[5];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(0x800000010026D020);
  v32 = v5;
  v7 = v5 + 7;
  v8 = 1;
  while (1)
  {
    v11 = v3;
    v12 = String._bridgeToObjectiveC()();
    v13 = String._bridgeToObjectiveC()();
    v14 = String._bridgeToObjectiveC()();
    v15 = objc_msgSend(v33, "localizedStringForKey:value:table:", v12, v13, v14, swift_bridgeObjectRelease(v6).n128_f64[0]);

    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v9 = v17;

    if (v16 != 0xD000000000000024 || v9 != 0x800000010026D020)
      break;
    v9 = 0x800000010026D020;
    v3 = v11;
    if (v34 == v8)
    {
      swift_bridgeObjectRelease(0x800000010026D020);
      v23 = (unint64_t)v32;
      goto LABEL_21;
    }
LABEL_7:
    v6 = *v7;
    swift_bridgeObjectRetain(*v7);
    swift_bridgeObjectRelease(v9);
    v7 += 2;
    if (__OFADD__(v8++, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, 0xD000000000000024, 0x800000010026D020, 0) & 1) != 0
    && v34 != v8)
  {
    v3 = v11;
    goto LABEL_7;
  }
  swift_bridgeObjectRelease(v32);
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, 0xD000000000000024, 0x800000010026D020, 0) & 1) == 0)
    return v16;
  v3 = v11;
  v23 = v9;
LABEL_21:
  swift_bridgeObjectRelease(v23);
  if (qword_1003158B0 == -1)
    goto LABEL_22;
LABEL_29:
  swift_once(&qword_1003158B0, sub_1000D9854);
LABEL_22:
  v24 = type metadata accessor for Logger(0);
  sub_10000D744(v24, (uint64_t)qword_10033FEC8);
  v26 = swift_bridgeObjectRetain_n(v3, 2, v25);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v37 = v30;
    *(_DWORD *)v29 = 136315138;
    swift_bridgeObjectRetain(v3);
    v36 = sub_100172BEC(v35, v3, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease_n(v3, 3);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "No translation for '%s'", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v3, 2);
  }
LABEL_25:
  swift_bridgeObjectRetain(v3);
  return v35;
}

uint64_t sub_100177C5C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for BundleTranslationProvider()
{
  return objc_opt_self(_TtC8SOSBuddy25BundleTranslationProvider);
}

uint64_t sub_100177CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6;
  char v8;

  v4 = 0;
  if (a1 == 0x636E656772656D65 && a2 == 0xE900000000000079)
    goto LABEL_12;
  v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x636E656772656D65, 0xE900000000000079, a1, a2, 0);
  swift_bridgeObjectRelease(0xE900000000000079);
  if ((v6 & 1) != 0)
    return v4;
  v4 = 1;
  if (a1 == 0x6564697364616F72 && a2 == 0xE800000000000000)
  {
LABEL_12:
    swift_bridgeObjectRelease(a2);
    return v4;
  }
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6564697364616F72, 0xE800000000000000, a1, a2, 0);
  swift_bridgeObjectRelease(0xE800000000000000);
  if ((v8 & 1) == 0)
    return 2;
  return v4;
}

uint64_t sub_100177DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;
  char v6;
  char v7;

  v3 = 0;
  if (a1 == 1852138867 && a2 == 0xE400000000000000)
    goto LABEL_3;
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)(1852138867, 0xE400000000000000, a1, a2, 0);
  swift_bridgeObjectRelease(0xE400000000000000);
  if ((v5 & 1) != 0)
    return v3;
  v3 = 1;
  if (a1 == 0x6465726577736E61 && a2 == 0xE800000000000000)
    goto LABEL_3;
  v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6465726577736E61, 0xE800000000000000, a1, a2, 0);
  swift_bridgeObjectRelease(0xE800000000000000);
  if ((v6 & 1) != 0)
    return v3;
  v3 = 2;
  if (a1 == 0x64657070696B73 && a2 == 0xE700000000000000)
  {
LABEL_3:
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64657070696B73, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(0xE700000000000000);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
  return v3;
}

void sub_100177F88()
{
  __asm { BR              X8 }
}

uint64_t sub_1001781A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;
  char v6;
  char v7;

  v3 = 0;
  if (a1 == 6581857 && a2 == 0xE300000000000000)
    goto LABEL_3;
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)(6581857, 0xE300000000000000, a1, a2, 0);
  swift_bridgeObjectRelease(0xE300000000000000);
  if ((v5 & 1) != 0)
    return v3;
  v3 = 1;
  if (a1 == 29295 && a2 == 0xE200000000000000)
    goto LABEL_3;
  v6 = _stringCompareWithSmolCheck(_:_:expecting:)(29295, 0xE200000000000000, a1, a2, 0);
  swift_bridgeObjectRelease(0xE200000000000000);
  if ((v6 & 1) != 0)
    return v3;
  v3 = 2;
  if (a1 == 7630702 && a2 == 0xE300000000000000)
  {
LABEL_3:
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(7630702, 0xE300000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(0xE300000000000000);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
  return v3;
}

void sub_100178348()
{
  __asm { BR              X10; loc_1001783AC }
}

void sub_1001786C4()
{
  __asm { BR              X8 }
}

uint64_t sub_100178854(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6;
  char v8;

  v4 = 0;
  if (a1 == 0x636E656772656D45 && a2 == 0xED00006570795479)
    goto LABEL_8;
  v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x636E656772656D45, 0xED00006570795479, a1, a2, 0);
  swift_bridgeObjectRelease(0xED00006570795479);
  if ((v6 & 1) == 0)
  {
    v4 = 1;
    if (a1 == 0xD000000000000016 && 0x800000010026CF90 == a2)
    {
LABEL_8:
      swift_bridgeObjectRelease(a2);
      return v4;
    }
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x800000010026CF90, a1, a2, 0);
    swift_bridgeObjectRelease(0x800000010026CF90);
    if ((v8 & 1) == 0)
      return 2;
  }
  return v4;
}

uint64_t sub_100178970(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6;
  char v8;

  v4 = 0;
  if (a1 == 0x6F697463656C6553 && a2 == 0xE90000000000006ELL)
    goto LABEL_12;
  v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F697463656C6553, 0xE90000000000006ELL, a1, a2, 0);
  swift_bridgeObjectRelease(0xE90000000000006ELL);
  if ((v6 & 1) != 0)
    return v4;
  v4 = 1;
  if (a1 == 1954047316 && a2 == 0xE400000000000000)
  {
LABEL_12:
    swift_bridgeObjectRelease(a2);
    return v4;
  }
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1954047316, 0xE400000000000000, a1, a2, 0);
  swift_bridgeObjectRelease(0xE400000000000000);
  if ((v8 & 1) == 0)
    return 2;
  return v4;
}

uint64_t sub_100178A6C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;

  v4 = sub_1001781A0(a1, (uint64_t)a2);
  if (v4 == 3)
  {
    v5 = type metadata accessor for DecodingError(0);
    swift_allocError(v5, &protocol witness table for DecodingError, 0, 0);
    v7 = v6;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease(0xE000000000000000);
    v8._countAndFlagsBits = a1;
    v8._object = a2;
    String.append(_:)(v8);
    v9._countAndFlagsBits = 11815;
    v9._object = (void *)0xE200000000000000;
    String.append(_:)(v9);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(_swiftEmptyArrayStorage, 0xD000000000000014, 0x800000010026CAC0, 0);
    v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v7, enum case for DecodingError.dataCorrupted(_:), v5);
    swift_willThrow(v10);
  }
  return v4;
}

uint64_t sub_100178B8C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;

  sub_100178348();
  v5 = v4;
  if (v4 == 4)
  {
    v6 = type metadata accessor for DecodingError(0);
    swift_allocError(v6, &protocol witness table for DecodingError, 0, 0);
    v8 = v7;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease(0xE000000000000000);
    v9._countAndFlagsBits = a1;
    v9._object = a2;
    String.append(_:)(v9);
    v10._countAndFlagsBits = 11815;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(_swiftEmptyArrayStorage, 0xD000000000000014, 0x800000010026CAC0, 0);
    v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v8, enum case for DecodingError.dataCorrupted(_:), v6);
    swift_willThrow(v11);
  }
  return v5;
}

uint64_t sub_100178CAC(uint64_t result, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;

  if (result != 0x726F7461646E614DLL || a2 != (void *)0xE900000000000079)
  {
    v4 = result;
    result = _stringCompareWithSmolCheck(_:_:expecting:)(0x726F7461646E614DLL, 0xE900000000000079, result, a2, 0);
    if ((result & 1) == 0)
    {
      v5 = type metadata accessor for DecodingError(0);
      swift_allocError(v5, &protocol witness table for DecodingError, 0, 0);
      v7 = v6;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease(0xE000000000000000);
      v8._countAndFlagsBits = v4;
      v8._object = a2;
      String.append(_:)(v8);
      v9._countAndFlagsBits = 11815;
      v9._object = (void *)0xE200000000000000;
      String.append(_:)(v9);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(&_swiftEmptyArrayStorage, 0xD000000000000014, 0x800000010026CAC0, 0);
      v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v7, enum case for DecodingError.dataCorrupted(_:), v5);
      return swift_willThrow(v10);
    }
  }
  return result;
}

uint64_t sub_100178DFC(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;

  sub_1001786C4();
  v5 = v4;
  if (v4 == 7)
  {
    v6 = type metadata accessor for DecodingError(0);
    swift_allocError(v6, &protocol witness table for DecodingError, 0, 0);
    v8 = v7;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease(0xE000000000000000);
    v9._countAndFlagsBits = a1;
    v9._object = a2;
    String.append(_:)(v9);
    v10._countAndFlagsBits = 11815;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(_swiftEmptyArrayStorage, 0xD000000000000014, 0x800000010026CAC0, 0);
    v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v8, enum case for DecodingError.dataCorrupted(_:), v6);
    swift_willThrow(v11);
  }
  return v5;
}

uint64_t sub_100178F1C(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;

  v5 = a3();
  if (v5 != 2)
    return v5 & 1;
  v6 = type metadata accessor for DecodingError(0);
  swift_allocError(v6, &protocol witness table for DecodingError, 0, 0);
  v8 = v7;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease(0xE000000000000000);
  v9._countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 11815;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(&_swiftEmptyArrayStorage, 0xD000000000000014, 0x800000010026CAC0, 0);
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v8, enum case for DecodingError.dataCorrupted(_:), v6);
  return swift_willThrow(v11);
}

_QWORD *sub_100179034@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  char v6;

  result = sub_1001804EC(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t type metadata accessor for QuestionnairePresentationBuddyAutoSendPolicy.Key()
{
  return objc_opt_self(_TtCV8SOSBuddy44QuestionnairePresentationBuddyAutoSendPolicyP33_582E2C1178450B40512F948C7832E1883Key);
}

uint64_t sub_100179088(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;

  v18 = a4;
  v19 = a3;
  v7 = sub_100003DB8(&qword_100323A10);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_100007BBC(a1, v13);
  v14 = type metadata accessor for QuestionnairePresentationBuddyAutoSendPolicy.Key();
  v15 = sub_1000052EC(&qword_100323A08, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnairePresentationBuddyAutoSendPolicy.Key, (uint64_t)&unk_10025A028);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v14, v14, v15, v13, v12);
  inited = swift_initStaticObject(v14, &unk_1003159C0);
  KeyedEncodingContainer.encode(_:forKey:)(a2, &inited, v7);
  if (!v4)
  {
    v16 = v18;
    inited = swift_initStaticObject(v14, &unk_1003159E8);
    KeyedEncodingContainer.encode(_:forKey:)(v19, &inited, v7);
    inited = swift_initStaticObject(v14, &unk_100315A10);
    KeyedEncodingContainer.encode(_:forKey:)(v16, &inited, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_10017921C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_100180774(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100179248(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100179088(a1, *v1, v1[1], v1[2]);
}

void sub_100179264(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  int64_t v25;

  v4 = *(_QWORD *)(v2 + 8);
  v24 = v4 + 64;
  v5 = 1 << *(_BYTE *)(v4 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v4 + 64);
  v25 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(v4);
  v8 = 0;
  while (v7)
  {
    v9 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v10 = v9 | (v8 << 6);
LABEL_20:
    v14 = (_QWORD *)(*(_QWORD *)(v4 + 56) + 72 * v10);
    v15 = v14[8];
    if (*(_QWORD *)(v15 + 16))
    {
      v16 = v14[1];
      v17 = v14[3];
      v18 = v14[4];
      v19 = v14[7];
      v20 = v14[5];
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v20);
      v21 = sub_10017D3B0(a1, a2);
      if ((v22 & 1) != 0)
      {
        swift_retain(*(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v21));
        swift_release(v4);
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v15);
        swift_bridgeObjectRelease(v19);
        swift_bridgeObjectRelease(v20);
        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease(v16);
        return;
      }
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v16);
    }
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v11 >= v25)
    goto LABEL_23;
  v12 = *(_QWORD *)(v24 + 8 * v11);
  ++v8;
  if (v12)
    goto LABEL_19;
  v8 = v11 + 1;
  if (v11 + 1 >= v25)
    goto LABEL_23;
  v12 = *(_QWORD *)(v24 + 8 * v8);
  if (v12)
    goto LABEL_19;
  v8 = v11 + 2;
  if (v11 + 2 >= v25)
    goto LABEL_23;
  v12 = *(_QWORD *)(v24 + 8 * v8);
  if (v12)
  {
LABEL_19:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_20;
  }
  v13 = v11 + 3;
  if (v13 >= v25)
  {
LABEL_23:
    swift_release(v4);
    return;
  }
  v12 = *(_QWORD *)(v24 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_19;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v25)
      goto LABEL_23;
    v12 = *(_QWORD *)(v24 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

uint64_t type metadata accessor for QuestionnairePresentationBuddy.Key()
{
  return objc_opt_self(_TtCV8SOSBuddy30QuestionnairePresentationBuddyP33_582E2C1178450B40512F948C7832E1883Key);
}

uint64_t sub_1001794FC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[32];
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t inited;

  v3 = v1;
  v5 = sub_100003DB8(&qword_100323A48);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_100007BBC(a1, v10);
  v12 = type metadata accessor for QuestionnairePresentationBuddy.Key();
  v13 = sub_1000052EC(&qword_100323A20, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnairePresentationBuddy.Key, (uint64_t)&unk_10025A028);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v12, v12, v13, v10, v11);
  v14 = *v3;
  *(_QWORD *)&v19 = swift_initStaticObject(v12, &unk_100315A38);
  KeyedEncodingContainer.encode(_:forKey:)(v14, &v19, v5);
  if (!v2)
  {
    *(_QWORD *)&v19 = v3[1];
    swift_bridgeObjectRetain(v19);
    inited = swift_initStaticObject(v12, &unk_100315A60);
    v15 = sub_100003DB8(&qword_100323A28);
    v16 = sub_100180C88(&qword_100323A50, (void (*)(void))sub_100180CFC, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &inited, v5, v15, v16);
    sub_100031198((uint64_t)v3);
    sub_10000B458((uint64_t)(v3 + 2), (uint64_t)v21, &qword_100323A60);
    sub_10000B458((uint64_t)v21, (uint64_t)&v22, &qword_100323A60);
    if (v24 != 1)
    {
      v19 = v22;
      v20 = v23;
      inited = swift_initStaticObject(v12, &unk_100315A88);
      v17 = sub_100180D40();
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &inited, v5, &type metadata for QuestionnairePresentationBuddyAutoSendPolicy, v17);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

double sub_100179730@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  sub_100180938(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_100179770(_QWORD *a1)
{
  return sub_1001794FC(a1);
}

uint64_t type metadata accessor for QuestionPresentationBuddy.Key()
{
  return objc_opt_self(_TtCV8SOSBuddy25QuestionPresentationBuddyP33_582E2C1178450B40512F948C7832E1883Key);
}

uint64_t sub_1001797C8(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[16];
  _BYTE v38[8];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = v1;
  v5 = sub_100003DB8(&qword_100323AC8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_100007BBC(a1, v10);
  v12 = type metadata accessor for QuestionPresentationBuddy.Key();
  v13 = sub_1000052EC(&qword_100323A78, (uint64_t (*)(uint64_t))type metadata accessor for QuestionPresentationBuddy.Key, (uint64_t)&unk_10025A028);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v12, v12, v13, v10, v11);
  v14 = v3[1];
  v33 = *v3;
  v34 = v14;
  v15 = v3[3];
  v35 = v3[2];
  v36 = v15;
  v16 = v33;
  v17 = HIBYTE(*((_QWORD *)&v33 + 1)) & 0xFLL;
  if ((*((_QWORD *)&v33 + 1) & 0x2000000000000000) == 0)
    v17 = v33 & 0xFFFFFFFFFFFFLL;
  if (!v17
    || (v31 = swift_initStaticObject(v12, &unk_100315B78),
        KeyedEncodingContainer.encode(_:forKey:)(v16, *((_QWORD *)&v16 + 1), &v31, v5),
        !v2))
  {
    v18 = v34;
    v19 = HIBYTE(*((_QWORD *)&v34 + 1)) & 0xFLL;
    if ((*((_QWORD *)&v34 + 1) & 0x2000000000000000) == 0)
      v19 = v34 & 0xFFFFFFFFFFFFLL;
    if (!v19
      || (v31 = swift_initStaticObject(v12, &unk_100315B50),
          KeyedEncodingContainer.encode(_:forKey:)(v18, *((_QWORD *)&v18 + 1), &v31, v5),
          !v2))
    {
      v39 = v35;
      if (*(_QWORD *)(v35 + 16))
      {
        v31 = v35;
        swift_bridgeObjectRetain(v35);
        inited = swift_initStaticObject(v12, &unk_100315AB0);
        v20 = sub_100003DB8(&qword_10031C658);
        v21 = sub_10003418C(&qword_100323AD0, &qword_10031C658, (void (*)(void))sub_1001814CC, (uint64_t)&protocol conformance descriptor for <A> [A]);
        KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &inited, v5, v20, v21);
        if (v2)
        {
          sub_100042AF8(&v39);
          return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
        }
        sub_100042AF8(&v39);
      }
      v31 = *((_QWORD *)v3 + 8);
      v32 = v31;
      swift_bridgeObjectRetain(v31);
      inited = swift_initStaticObject(v12, &unk_100315B00);
      v22 = sub_100003DB8(&qword_100323A80);
      v23 = sub_100181510();
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &inited, v5, v22, v23);
      sub_100042AF8(&v32);
      if (!v2)
      {
        sub_10000B458((uint64_t)&v35 + 8, (uint64_t)v38, &qword_100319D70);
        sub_10000B458((uint64_t)v38, (uint64_t)&v42, &qword_100319D70);
        if (v42)
        {
          v31 = v42;
          inited = swift_initStaticObject(v12, &unk_100315B28);
          v25 = sub_100003DB8(&qword_100317980);
          v26 = sub_1001815C0(&qword_100323AF0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
          KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &inited, v5, v25, v26);
        }
        sub_10000B458((uint64_t)&v36, (uint64_t)v37, &qword_100318260);
        sub_10000B458((uint64_t)v37, (uint64_t)&v40, &qword_100318260);
        v27 = v41;
        if (v41)
        {
          v28 = v40;
          v31 = swift_initStaticObject(v12, &unk_100315AD8);
          KeyedEncodingContainer.encode(_:forKey:)(v28, v27, &v31, v5);
        }
      }
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

__n128 sub_100179B74@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  sub_100180D84(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_QWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100179BC4(_QWORD *a1)
{
  return sub_1001797C8(a1);
}

uint64_t type metadata accessor for OptionPresentationBuddy.Key()
{
  return objc_opt_self(_TtCV8SOSBuddy23OptionPresentationBuddyP33_582E2C1178450B40512F948C7832E1883Key);
}

uint64_t sub_100179BF8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  void (*v50)(char *, uint64_t, __n128);
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t inited;

  v4 = sub_100003DB8(&qword_100323B08);
  v57 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4, v5);
  v52 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6, v8);
  v53 = (char *)&v51 - v10;
  v12 = __chkstk_darwin(v9, v11);
  v54 = (char *)&v51 - v13;
  v15 = __chkstk_darwin(v12, v14);
  v56 = (char *)&v51 - v16;
  v18 = __chkstk_darwin(v15, v17);
  v55 = (char *)&v51 - v19;
  __chkstk_darwin(v18, v20);
  v22 = (char *)&v51 - v21;
  v23 = a1[3];
  v24 = a1[4];
  sub_100007BBC(a1, v23);
  v25 = type metadata accessor for OptionPresentationBuddy.Key();
  v26 = sub_1000052EC(&qword_100323B00, (uint64_t (*)(uint64_t))type metadata accessor for OptionPresentationBuddy.Key, (uint64_t)&unk_10025A028);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v25, v25, v26, v23, v24);
  v27 = a2[2];
  v28 = a2[3];
  v29 = HIBYTE(v28) & 0xF;
  if ((v28 & 0x2000000000000000) == 0)
    v29 = v27 & 0xFFFFFFFFFFFFLL;
  if (v29)
  {
    inited = swift_initStaticObject(v25, &unk_100315C90);
    v30 = v58;
    KeyedEncodingContainer.encode(_:forKey:)(v27, v28, &inited, v4);
    v31 = v30;
    if (v30)
      return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v22, v4);
  }
  else
  {
    v31 = v58;
  }
  v33 = a2[5];
  if (v33)
  {
    v58 = (char *)a2[4];
    inited = swift_initStaticObject(v25, &unk_100315BF0);
    v34 = v55;
    v35 = v26;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(v25, &inited, v4, v25, v26);
    inited = swift_initStaticObject(v25, &unk_100315BA0);
    v36 = v56;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(v25, &inited, v4, v25, v35);
    inited = swift_initStaticObject(v25, &unk_100315C18);
    KeyedEncodingContainer.encode(_:forKey:)(v58, v33, &inited, v4);
    v37 = *(void (**)(char *, uint64_t))(v57 + 8);
    v37(v36, v4);
    v37(v34, v4);
    return ((uint64_t (*)(char *, uint64_t))v37)(v22, v4);
  }
  else
  {
    if (!a2[7])
      return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v22, v4);
    v38 = (char *)a2[6];
    v55 = (char *)a2[7];
    v56 = v38;
    inited = swift_initStaticObject(v25, &unk_100315BF0);
    v39 = v54;
    v40 = v4;
    v58 = v22;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(v25, &inited, v4, v25, v26);
    inited = swift_initStaticObject(v25, &unk_100315C68);
    v41 = v53;
    v51 = v26;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(v25, &inited, v40, v25, v26);
    inited = swift_initStaticObject(v25, &unk_100315C18);
    KeyedEncodingContainer.encode(_:forKey:)(v56, v55, &inited, v40);
    if (v31)
    {
      v42 = v40;
      v43 = *(void (**)(char *, uint64_t))(v57 + 8);
      v43(v41, v42);
      v43(v39, v42);
      return ((uint64_t (*)(char *, uint64_t))v43)(v58, v42);
    }
    else
    {
      inited = swift_initStaticObject(v25, &unk_100315BC8);
      v44 = v52;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(v25, &inited, v40, v25, v51);
      v45 = Color.description.getter(a2[8]);
      v46 = v40;
      v48 = v47;
      inited = swift_initStaticObject(v25, &unk_100315C40);
      KeyedEncodingContainer.encode(_:forKey:)(v45, v48, &inited, v46);
      v49 = swift_bridgeObjectRelease(v48);
      v50 = *(void (**)(char *, uint64_t, __n128))(v57 + 8);
      v50(v44, v46, v49);
      ((void (*)(char *, uint64_t))v50)(v41, v46);
      ((void (*)(char *, uint64_t))v50)(v54, v46);
      return ((uint64_t (*)(char *, uint64_t))v50)(v58, v46);
    }
  }
}

_QWORD *sub_10017A080@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_100181620(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10017A0A8(_QWORD *a1)
{
  _QWORD **v1;

  return sub_100179BF8(a1, *v1);
}

_QWORD *sub_10017A0C0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_10018402C(a1, (uint64_t (*)(void))sub_100177CA8);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t sub_10017A0F4(_QWORD *a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  sub_100007BBC(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v10, v3, v4);
  if (v2)
    v5 = 0x6564697364616F72;
  else
    v5 = 0x636E656772656D65;
  if (v2)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE900000000000079;
  v7 = v11;
  v8 = v12;
  sub_10001D2C4((uint64_t)v10, v11);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v5, v6, v7, v8);
  swift_bridgeObjectRelease(v6);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v10);
}

uint64_t _s3KeyCMa()
{
  return objc_opt_self(_TtCC8SOSBuddy13QuestionnaireP33_582E2C1178450B40512F948C7832E1883Key);
}

uint64_t sub_10017A1EC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;

  v3 = v1;
  v5 = sub_100003DB8(&qword_100323B40);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_100007BBC(a1, v10);
  v12 = _s3KeyCMa();
  v13 = sub_1000052EC(&qword_100323B18, (uint64_t (*)(uint64_t))_s3KeyCMa, (uint64_t)&unk_10025A028);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v12, v12, v13, v10, v11);
  v14 = *(_QWORD *)(v3 + 88);
  inited = swift_initStaticObject(v12, &unk_100315CB8);
  KeyedEncodingContainer.encode(_:forKey:)(v14, &inited, v5);
  if (!v2)
  {
    LOBYTE(v24) = *(_BYTE *)(v3 + 32);
    inited = swift_initStaticObject(v12, &unk_100315CE0);
    v16 = sub_100182224();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &inited, v5, &type metadata for QuestionnairePolicy.QuestionnaireScope, v16);
    v17 = *(_QWORD *)(v3 + 40);
    v18 = *(_QWORD *)(v3 + 48);
    inited = swift_initStaticObject(v12, &unk_100315D08);
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &inited, v5);
    v19 = *(_QWORD *)(v3 + 96);
    inited = v19;
    swift_bridgeObjectRetain(v19);
    v24 = swift_initStaticObject(v12, &unk_100315D30);
    v20 = sub_100003DB8(&qword_100323B28);
    v21 = sub_100182268();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&inited, &v24, v5, v20, v21);
    v15 = swift_bridgeObjectRelease(v19);
  }
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v6 + 8))(v9, v5, v15);
}

uint64_t sub_10017A404@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  char v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v41;
  unint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  char v45;
  char v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t result;
  char v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v3 = *(_QWORD *)(v2 + 96);
  v60 = v3;
  if ((unint64_t)v3 >> 62)
    goto LABEL_52;
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(v3, 2, a2);
  if (v4)
  {
LABEL_3:
    v5 = 0;
    v62 = v4;
    while (1)
    {
      if ((v60 & 0xC000000000000001) != 0)
      {
        v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v60);
        v11 = (_QWORD *)v3;
        v12 = __OFADD__(v5, 1);
        v13 = v5 + 1;
        if (v12)
          goto LABEL_49;
      }
      else
      {
        v11 = *(_QWORD **)(v60 + 32 + 8 * v5);
        a2 = swift_retain(v11);
        v12 = __OFADD__(v5, 1);
        v13 = v5 + 1;
        if (v12)
          goto LABEL_49;
      }
      v14 = v11[5];
      if ((unint64_t)v14 >> 62)
      {
        v51 = v14 < 0 ? v11[5] : v14 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(v11[5], 3, a2);
        v15 = _CocoaArrayWrapper.endIndex.getter(v51);
        swift_bridgeObjectRelease(v14);
      }
      else
      {
        v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n(v11[5], 2, a2);
      }
      v65 = v11;
      v64 = v13;
      if (v15)
        break;
LABEL_33:
      swift_bridgeObjectRelease_n(v14, 2);
      v35 = v65[2];
      v34 = v65[3];
      v36 = v65[10];
      v63 = v65[9];
      v37 = v65[12];
      v67 = v65[11];
      v39 = v65[13];
      v38 = v65[14];
      v71 = v65[15];
      v73 = v65[16];
      swift_bridgeObjectRetain(v73);
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v39);
      v69 = v38;
      swift_bridgeObjectRetain(v38);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
      v42 = sub_10017D3B0(v35, v34);
      v43 = *((_QWORD *)&_swiftEmptyDictionarySingleton + 2);
      v44 = (v41 & 1) == 0;
      v3 = v43 + v44;
      if (__OFADD__(v43, v44))
        goto LABEL_50;
      v45 = v41;
      if (*((_QWORD *)&_swiftEmptyDictionarySingleton + 3) >= v3)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_10008BDE8();
      }
      else
      {
        sub_100089814(v3, isUniquelyReferenced_nonNull_native);
        v3 = sub_10017D3B0(v35, v34);
        if ((v45 & 1) != (v46 & 1))
        {
LABEL_60:
          result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          __break(1u);
          return result;
        }
        v42 = v3;
      }
      if ((v45 & 1) != 0)
      {
        v6 = (_QWORD *)(*((_QWORD *)&_swiftEmptyDictionarySingleton + 7) + 72 * v42);
        v7 = v6[1];
        v8 = v6[3];
        v9 = v6[4];
        v10 = v6[5];
        v61 = v6[7];
        swift_bridgeObjectRelease(v6[8]);
        swift_bridgeObjectRelease(v9);
        swift_bridgeObjectRelease(v8);
        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(v61);
        *v6 = v63;
        v6[1] = v36;
        v6[2] = v67;
        v6[3] = v37;
        v6[4] = v39;
        v6[5] = v69;
        v6[6] = v71;
        v6[7] = v73;
        v6[8] = &_swiftEmptyDictionarySingleton;
      }
      else
      {
        *((_QWORD *)&_swiftEmptyDictionarySingleton + (v42 >> 6) + 8) |= 1 << v42;
        v47 = (uint64_t *)(*((_QWORD *)&_swiftEmptyDictionarySingleton + 6) + 16 * v42);
        *v47 = v35;
        v47[1] = v34;
        v48 = (_QWORD *)(*((_QWORD *)&_swiftEmptyDictionarySingleton + 7) + 72 * v42);
        *v48 = v63;
        v48[1] = v36;
        v48[2] = v67;
        v48[3] = v37;
        v48[4] = v39;
        v48[5] = v69;
        v48[6] = v71;
        v48[7] = v73;
        v48[8] = &_swiftEmptyDictionarySingleton;
        v49 = *((_QWORD *)&_swiftEmptyDictionarySingleton + 2);
        v12 = __OFADD__(v49, 1);
        v50 = v49 + 1;
        if (v12)
          goto LABEL_51;
        *((_QWORD *)&_swiftEmptyDictionarySingleton + 2) = v50;
        swift_bridgeObjectRetain(v34);
      }
      swift_release(v65);
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(0x8000000000000000);
      v5 = v64;
      if (v64 == v62)
        goto LABEL_56;
    }
    v70 = v14 & 0xC000000000000001;
    v16 = 4;
    v66 = v15;
    v68 = v14;
    while (1)
    {
      v18 = v16 - 4;
      if (v70)
      {
        v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, v14);
        v19 = (_QWORD *)v3;
        v20 = v16 - 3;
        if (__OFADD__(v18, 1))
          goto LABEL_46;
      }
      else
      {
        v19 = *(_QWORD **)(v14 + 8 * v16);
        a2 = swift_retain(v19);
        v20 = v16 - 3;
        if (__OFADD__(v18, 1))
        {
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          if (v3 < 0)
            v52 = v3;
          else
            v52 = v3 & 0xFFFFFFFFFFFFFF8;
          v53 = v3;
          swift_bridgeObjectRetain_n(v3, 3, a2);
          v4 = _CocoaArrayWrapper.endIndex.getter(v52);
          swift_bridgeObjectRelease(v53);
          if (!v4)
            break;
          goto LABEL_3;
        }
      }
      v72 = v20;
      v22 = v19[2];
      v21 = v19[3];
      v23 = v19[4];
      swift_bridgeObjectRetain(v21);
      swift_retain(v23);
      v24 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
      v26 = sub_10017D3B0(v22, v21);
      v27 = *((_QWORD *)&_swiftEmptyDictionarySingleton + 2);
      v28 = (v25 & 1) == 0;
      v3 = v27 + v28;
      if (__OFADD__(v27, v28))
        goto LABEL_47;
      v29 = v25;
      if (*((_QWORD *)&_swiftEmptyDictionarySingleton + 3) >= v3)
      {
        if ((v24 & 1) != 0)
        {
          if ((v25 & 1) != 0)
            goto LABEL_15;
        }
        else
        {
          sub_10008C018();
          if ((v29 & 1) != 0)
            goto LABEL_15;
        }
      }
      else
      {
        sub_100089BB4(v3, v24);
        v3 = sub_10017D3B0(v22, v21);
        if ((v29 & 1) != (v30 & 1))
          goto LABEL_60;
        v26 = v3;
        if ((v29 & 1) != 0)
        {
LABEL_15:
          v17 = *((_QWORD *)&_swiftEmptyDictionarySingleton + 7);
          swift_release(*(_QWORD *)(v17 + 8 * v26));
          *(_QWORD *)(v17 + 8 * v26) = v23;
          goto LABEL_16;
        }
      }
      *((_QWORD *)&_swiftEmptyDictionarySingleton + (v26 >> 6) + 8) |= 1 << v26;
      v31 = (uint64_t *)(*((_QWORD *)&_swiftEmptyDictionarySingleton + 6) + 16 * v26);
      *v31 = v22;
      v31[1] = v21;
      *(_QWORD *)(*((_QWORD *)&_swiftEmptyDictionarySingleton + 7) + 8 * v26) = v23;
      v32 = *((_QWORD *)&_swiftEmptyDictionarySingleton + 2);
      v12 = __OFADD__(v32, 1);
      v33 = v32 + 1;
      if (v12)
        goto LABEL_48;
      *((_QWORD *)&_swiftEmptyDictionarySingleton + 2) = v33;
      swift_bridgeObjectRetain(v21);
LABEL_16:
      swift_release(v19);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(0x8000000000000000);
      ++v16;
      v14 = v68;
      if (v72 == v66)
        goto LABEL_33;
    }
  }
LABEL_56:
  result = swift_bridgeObjectRelease_n(v60, 2);
  v55 = *(_BYTE *)(v59 + 80);
  if ((v55 & 1) != 0)
  {
    v56 = 0;
    v57 = 0uLL;
  }
  else
  {
    v56 = *(_QWORD *)(v59 + 72);
    v57 = *(_OWORD *)(v59 + 56);
  }
  *(_QWORD *)a1 = *(_QWORD *)(v59 + 88);
  *(_QWORD *)(a1 + 8) = &_swiftEmptyDictionarySingleton;
  *(_OWORD *)(a1 + 16) = v57;
  *(_QWORD *)(a1 + 32) = v56;
  *(_BYTE *)(a1 + 40) = v55;
  return result;
}

uint64_t sub_10017A998@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100181D0C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10017A9C0(_QWORD *a1)
{
  return sub_10017A1EC(a1);
}

uint64_t _s3KeyCMa_0()
{
  return objc_opt_self(_TtCC8SOSBuddy8QuestionP33_582E2C1178450B40512F948C7832E1883Key);
}

uint64_t sub_10017AA00(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t inited;

  v3 = v1;
  v5 = sub_100003DB8(&qword_100323BB8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_100007BBC(a1, v10);
  v12 = _s3KeyCMa_0();
  v13 = sub_1000052EC(&qword_100323B68, (uint64_t (*)(uint64_t))_s3KeyCMa_0, (uint64_t)&unk_10025A028);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v12, v12, v13, v10, v11);
  v14 = *(_QWORD *)(v3 + 16);
  v15 = *(_QWORD *)(v3 + 24);
  inited = swift_initStaticObject(v12, &unk_100315D58);
  KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &inited, v5);
  if (!v2)
  {
    LOBYTE(v31) = *(_BYTE *)(v3 + 32);
    inited = swift_initStaticObject(v12, &unk_100315DF8);
    v16 = sub_100183D40();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &inited, v5, &type metadata for Question.QuestionType, v16);
    v18 = *(_QWORD *)(v3 + 56);
    if (*(_QWORD *)(v18 + 16))
    {
      inited = *(_QWORD *)(v3 + 56);
      swift_bridgeObjectRetain(v18);
      v31 = swift_initStaticObject(v12, &unk_100315D80);
      v19 = sub_100003DB8(&qword_10031C550);
      v20 = sub_10003418C(&qword_100323BC8, &qword_10031C550, (void (*)(void))sub_100183D84, (uint64_t)&protocol conformance descriptor for <A> [A]);
      KeyedEncodingContainer.encode<A>(_:forKey:)(&inited, &v31, v5, v19, v20);
      swift_bridgeObjectRelease(v18);
    }
    v21 = *(_QWORD *)(v3 + 40);
    inited = v21;
    swift_bridgeObjectRetain(v21);
    v31 = swift_initStaticObject(v12, &unk_100315DA8);
    v22 = sub_100003DB8(&qword_100323B78);
    v23 = sub_100183DC8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&inited, &v31, v5, v22, v23);
    swift_bridgeObjectRelease(v21);
    v24 = *(_QWORD *)(v3 + 48);
    v25 = type metadata accessor for NoPrerequisites();
    if (!swift_dynamicCastClass(v24, v25))
    {
      inited = v24;
      swift_retain(v24);
      v31 = swift_initStaticObject(v12, &unk_100315DD0);
      v28 = type metadata accessor for Condition();
      v29 = sub_1000052EC(&qword_1003239F8, (uint64_t (*)(uint64_t))type metadata accessor for Condition, (uint64_t)&unk_10025A0E8);
      KeyedEncodingContainer.encode<A>(_:forKey:)(&inited, &v31, v5, v28, v29);
      swift_release(v24);
    }
    if (*(_BYTE *)(v3 + 64) != 7)
    {
      LOBYTE(v31) = *(_BYTE *)(v3 + 64);
      inited = swift_initStaticObject(v12, &unk_100315E20);
      v26 = sub_100003DB8(&qword_100323BE8);
      v27 = sub_10003418C(&qword_100323BF0, &qword_100323BE8, (void (*)(void))sub_100183E44, (uint64_t)&protocol conformance descriptor for <A> A?);
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &inited, v5, v26, v27);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

_QWORD *sub_10017AD94@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_100183330(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10017ADBC(_QWORD *a1)
{
  return sub_10017AA00(a1);
}

void sub_10017ADDC(_QWORD *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  v3 = a1[3];
  v4 = a1[4];
  sub_100007BBC(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v5, v3, v4);
  __asm { BR              X10 }
}

uint64_t sub_10017AE4C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[3];
  uint64_t v4;
  uint64_t v5;

  v0 = v4;
  v1 = v5;
  sub_10001D2C4((uint64_t)v3, v4);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(0x6843656C676E6953, 0xEC0000006563696FLL, v0, v1);
  swift_bridgeObjectRelease(0xEC0000006563696FLL);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v3);
}

_QWORD *sub_10017AF04@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_100183F44(a1, (uint64_t (*)(uint64_t))sub_100178B8C);
  if (!v2)
    *a2 = (_BYTE)result;
  return result;
}

void sub_10017AF34(_QWORD *a1)
{
  char *v1;

  sub_10017ADDC(a1, *v1);
}

uint64_t sub_10017AF4C(_QWORD *a1)
{
  return sub_100183E88(a1);
}

uint64_t sub_10017AF60(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v1 = a1[3];
  v2 = a1[4];
  sub_100007BBC(a1, v1);
  dispatch thunk of Encoder.singleValueContainer()(v6, v1, v2);
  v3 = v7;
  v4 = v8;
  sub_10001D2C4((uint64_t)v6, v7);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(0x726F7461646E614DLL, 0xE900000000000079, v3, v4);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v6);
}

void sub_10017AFF8(_QWORD *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  v3 = a1[3];
  v4 = a1[4];
  sub_100007BBC(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v5, v3, v4);
  __asm { BR              X10 }
}

uint64_t sub_10017B070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  v1 = v5;
  v2 = v6;
  sub_10001D2C4((uint64_t)v4, v5);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v0 - 6, 0x800000010026CF70, v1, v2);
  swift_bridgeObjectRelease(0x800000010026CF70);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v4);
}

_QWORD *sub_10017B13C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_100183F44(a1, (uint64_t (*)(uint64_t))sub_100178DFC);
  if (!v2)
    *a2 = (_BYTE)result;
  return result;
}

void sub_10017B16C(_QWORD *a1)
{
  char *v1;

  sub_10017AFF8(a1, *v1);
}

uint64_t sub_10017B184(_QWORD *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v3 = a1[3];
  v4 = a1[4];
  sub_100007BBC(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v10, v3, v4);
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000016;
  else
    v5 = 0x636E656772656D45;
  if ((a2 & 1) != 0)
    v6 = 0x800000010026CF90;
  else
    v6 = 0xED00006570795479;
  v7 = v11;
  v8 = v12;
  sub_10001D2C4((uint64_t)v10, v11);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v5, v6, v7, v8);
  swift_bridgeObjectRelease(v6);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v10);
}

_QWORD *sub_10017B268@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_10018402C(a1, (uint64_t (*)(void))sub_100178854);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t sub_10017B29C(_QWORD *a1)
{
  char *v1;

  return sub_10017B184(a1, *v1);
}

uint64_t _s3KeyCMa_1()
{
  return objc_opt_self(_TtCVC8SOSBuddy8Question17BuiltInParametersP33_582E2C1178450B40512F948C7832E1883Key);
}

uint64_t sub_10017B2D4(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t inited;
  char v17;

  v4 = sub_100003DB8(&qword_100323C18);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100007BBC(a1, v9);
  v11 = _s3KeyCMa_1();
  v12 = sub_1000052EC(&qword_100323C08, (uint64_t (*)(uint64_t))_s3KeyCMa_1, (uint64_t)&unk_10025A028);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v11, v11, v12, v9, v10);
  v17 = a2;
  inited = swift_initStaticObject(v11, &unk_100315E48);
  v13 = sub_1001842C0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &inited, v4, &type metadata for Question.BuiltInId, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

unint64_t sub_10017B40C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_10018411C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10017B434(_QWORD *a1)
{
  char *v1;

  return sub_10017B2D4(a1, *v1);
}

uint64_t _s3KeyCMa_2()
{
  return objc_opt_self(_TtCC8SOSBuddy6OptionP33_582E2C1178450B40512F948C7832E1883Key);
}

uint64_t sub_10017B46C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t inited;

  v2 = v1;
  v4 = sub_100003DB8(&qword_100323C40);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v25 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v24 - v10;
  v13 = a1[3];
  v12 = a1[4];
  sub_100007BBC(a1, v13);
  v14 = _s3KeyCMa_2();
  v15 = sub_1000052EC(&qword_100323C30, (uint64_t (*)(uint64_t))_s3KeyCMa_2, (uint64_t)&unk_10025A028);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v14, v14, v15, v13, v12);
  v16 = *(_QWORD *)(v2 + 16);
  v17 = *(_QWORD *)(v2 + 24);
  inited = swift_initStaticObject(v14, &unk_100315E70);
  v18 = v26;
  KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &inited, v4);
  if (v18)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4);
  v19 = v25;
  if ((*(_BYTE *)(v2 + 40) & 1) == 0)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4);
  inited = swift_initStaticObject(v14, &unk_100315E98);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(v14, &inited, v4, v14, v15);
  v27 = 1;
  inited = swift_initStaticObject(v14, &unk_100315EC0);
  v20 = sub_1001848F0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &inited, v4, &type metadata for Option.InputType, v20);
  v21 = *(_QWORD *)(v2 + 48);
  inited = swift_initStaticObject(v14, &unk_100315EE8);
  KeyedEncodingContainer.encode(_:forKey:)(v21, &inited, v4);
  v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v19, v4);
  return ((uint64_t (*)(char *, uint64_t))v22)(v11, v4);
}

uint64_t sub_10017B6A4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100184304(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10017B6CC(_QWORD *a1)
{
  return sub_10017B46C(a1);
}

_QWORD *sub_10017B6EC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_10018402C(a1, (uint64_t (*)(void))sub_100178970);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t sub_10017B720(_QWORD *a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  sub_100007BBC(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v10, v3, v4);
  if (v2)
    v5 = 1954047316;
  else
    v5 = 0x6F697463656C6553;
  if (v2)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE90000000000006ELL;
  v7 = v11;
  v8 = v12;
  sub_10001D2C4((uint64_t)v10, v11);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v5, v6, v7, v8);
  swift_bridgeObjectRelease(v6);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v10);
}

uint64_t _s3KeyCMa_3()
{
  return objc_opt_self(_TtCC8SOSBuddy9ConditionP33_582E2C1178450B40512F948C7832E1883Key);
}

uint64_t sub_10017B810()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  int64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  result = sub_10017E340(0, 3, 0);
  v2 = _swiftEmptyArrayStorage[2];
  v1 = _swiftEmptyArrayStorage[3];
  v3 = v2 + 1;
  if (v2 >= v1 >> 1)
    result = sub_10017E340(v1 > 1, v2 + 1, 1);
  _swiftEmptyArrayStorage[2] = v3;
  v4 = &_swiftEmptyArrayStorage[2 * v2];
  v4[4] = 6581857;
  v4[5] = 0xE300000000000000;
  v5 = _swiftEmptyArrayStorage[3];
  v6 = v2 + 2;
  if (v3 >= v5 >> 1)
    result = sub_10017E340(v5 > 1, v6, 1);
  _swiftEmptyArrayStorage[2] = v6;
  v7 = &_swiftEmptyArrayStorage[2 * v3];
  v7[4] = 29295;
  v7[5] = 0xE200000000000000;
  v9 = _swiftEmptyArrayStorage[2];
  v8 = _swiftEmptyArrayStorage[3];
  if (v9 >= v8 >> 1)
    result = sub_10017E340(v8 > 1, v9 + 1, 1);
  _swiftEmptyArrayStorage[2] = v9 + 1;
  v10 = &_swiftEmptyArrayStorage[2 * v9];
  v10[4] = 7630702;
  v10[5] = 0xE300000000000000;
  qword_100322E60 = (uint64_t)_swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_10017B9DC()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  int64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  result = sub_10017E340(0, 3, 0);
  v2 = _swiftEmptyArrayStorage[2];
  v1 = _swiftEmptyArrayStorage[3];
  v3 = v2 + 1;
  if (v2 >= v1 >> 1)
    result = sub_10017E340(v1 > 1, v2 + 1, 1);
  _swiftEmptyArrayStorage[2] = v3;
  v4 = &_swiftEmptyArrayStorage[2 * v2];
  v4[4] = 1852138867;
  v4[5] = 0xE400000000000000;
  v5 = _swiftEmptyArrayStorage[3];
  v6 = v2 + 2;
  if (v3 >= v5 >> 1)
    result = sub_10017E340(v5 > 1, v6, 1);
  _swiftEmptyArrayStorage[2] = v6;
  v7 = &_swiftEmptyArrayStorage[2 * v3];
  v7[4] = 0x6465726577736E61;
  v7[5] = 0xE800000000000000;
  v9 = _swiftEmptyArrayStorage[2];
  v8 = _swiftEmptyArrayStorage[3];
  if (v9 >= v8 >> 1)
    result = sub_10017E340(v8 > 1, v9 + 1, 1);
  _swiftEmptyArrayStorage[2] = v9 + 1;
  v10 = &_swiftEmptyArrayStorage[2 * v9];
  v10[4] = 0x64657070696B73;
  v10[5] = 0xE700000000000000;
  qword_100322E68 = (uint64_t)_swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_10017BBE4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;

  result = sub_10017E340(0, 1, 0);
  v2 = _swiftEmptyArrayStorage[2];
  v1 = _swiftEmptyArrayStorage[3];
  if (v2 >= v1 >> 1)
    result = sub_10017E340(v1 > 1, v2 + 1, 1);
  _swiftEmptyArrayStorage[2] = v2 + 1;
  v3 = &_swiftEmptyArrayStorage[2 * v2];
  v3[4] = 0x64657463656C6573;
  v3[5] = 0xE800000000000000;
  qword_100322E70 = (uint64_t)_swiftEmptyArrayStorage;
  return result;
}

void sub_10017BC88()
{
  sub_10017E340(0, 10, 0);
  __asm { BR              X10 }
}

uint64_t sub_10017BEA0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  __int128 v34[2];
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v1;
  v4 = sub_100003DB8(&qword_1003239C0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = v2;
  v9 = type metadata accessor for Condition();
  swift_retain(v2);
  v10 = sub_100003DB8(&qword_1003239C8);
  if (swift_dynamicCast(v34, &v40, v9, v10, 6))
  {
    sub_100007D04(v34, (uint64_t)&v36);
    v11 = a1[3];
    v12 = a1[4];
    sub_100007BBC(a1, v11);
    v13 = _s3KeyCMa_3();
    v14 = sub_1000052EC(&qword_1003239E0, (uint64_t (*)(uint64_t))_s3KeyCMa_3, (uint64_t)&unk_10025A028);
    dispatch thunk of Encoder.container<A>(keyedBy:)(v13, v13, v14, v11, v12);
    v15 = v38;
    v16 = v39;
    sub_100007BBC(&v36, v38);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
    v19 = v18;
    v20 = swift_allocObject(v13, 32, 7);
    *(_QWORD *)(v20 + 16) = v17;
    *(_QWORD *)(v20 + 24) = v19;
    v21 = v38;
    v22 = v39;
    sub_100007BBC(&v36, v38);
    v40 = v20;
    KeyedEncodingContainer.superEncoder(forKey:)(v34, &v40, v4);
    (*(void (**)(__int128 *, uint64_t, uint64_t))(v22 + 16))(v34, v21, v22);
    swift_release(v20);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v34);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(&v36);
  }
  else
  {
    v35 = 0;
    memset(v34, 0, sizeof(v34));
    sub_100007FF0((uint64_t)v34, &qword_1003239D0);
    v24 = type metadata accessor for EncodingError(0);
    swift_allocError(v24, &protocol witness table for EncodingError, 0, 0);
    v26 = v25;
    sub_100003DB8(&qword_1003239D8);
    v26[3] = v9;
    *v26 = v2;
    v27 = a1[3];
    v28 = a1[4];
    sub_100007BBC(a1, v27);
    v29 = swift_retain(v2);
    v30 = dispatch thunk of Encoder.codingPath.getter(v27, v28, v29);
    v36 = 0;
    v37 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    v31._object = (void *)0x800000010026C9B0;
    v31._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v31);
    *(_QWORD *)&v34[0] = v2;
    _print_unlocked<A, B>(_:_:)(v34, &v36, v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v32._countAndFlagsBits = 46;
    v32._object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    EncodingError.Context.init(codingPath:debugDescription:underlyingError:)(v30, v36, v37, 0);
    v33 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, enum case for EncodingError.invalidValue(_:), v24);
    return swift_willThrow(v33);
  }
}

uint64_t sub_10017C1BC(_QWORD *a1)
{
  return sub_10017BEA0(a1);
}

void sub_10017C1DC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 24);
  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0)
      v18 = *(_QWORD *)(v2 + 24);
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v2 + 24));
    v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
    if (v19)
      goto LABEL_3;
LABEL_21:
    v20 = type metadata accessor for EncodingError(0);
    swift_allocError(v20, &protocol witness table for EncodingError, 0, 0);
    v22 = v21;
    sub_100003DB8(&qword_1003239D8);
    v23 = type metadata accessor for LogicalCondition();
    v22[3] = v23;
    *v22 = v2;
    v24 = a1[3];
    v25 = a1[4];
    sub_100007BBC(a1, v24);
    v26 = swift_retain(v2);
    v27 = dispatch thunk of Encoder.codingPath.getter(v24, v25, v26);
    v31 = 0;
    v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    v28._object = (void *)0x800000010026C9D0;
    v28._countAndFlagsBits = 0xD000000000000022;
    String.append(_:)(v28);
    v35 = v2;
    _print_unlocked<A, B>(_:_:)(&v35, &v31, v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v29._countAndFlagsBits = 46;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    EncodingError.Context.init(codingPath:debugDescription:underlyingError:)(v27, v31, v32, 0);
    v30 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, enum case for EncodingError.invalidValue(_:), v20);
    swift_willThrow(v30);
    return;
  }
  if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_21;
LABEL_3:
  v5 = a1[3];
  v6 = a1[4];
  sub_100007BBC(a1, v5);
  dispatch thunk of Encoder.singleValueContainer()(&v31, v5, v6);
  if (*(_BYTE *)(v2 + 16) != 2)
  {
    v35 = v4;
    v8 = v33;
    v9 = v34;
    sub_10001D2C4((uint64_t)&v31, v33);
    v10 = sub_100003DB8(&qword_1003239E8);
    v11 = sub_10017D218();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(&v35, v10, v11, v8, v9);
LABEL_16:
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(&v31);
    return;
  }
  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0)
      v12 = v4;
    else
      v12 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v7 = _CocoaArrayWrapper.endIndex.getter(v12);
  }
  else
  {
    v7 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v4);
  }
  if (v7)
  {
    if ((v4 & 0xC000000000000001) != 0)
    {
      v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
      goto LABEL_15;
    }
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v13 = *(_QWORD *)(v4 + 32);
      swift_retain(v13);
LABEL_15:
      swift_bridgeObjectRelease(v4);
      v35 = v13;
      v14 = v33;
      v15 = v34;
      sub_10001D2C4((uint64_t)&v31, v33);
      v16 = type metadata accessor for Condition();
      v17 = sub_1000052EC(&qword_1003239F8, (uint64_t (*)(uint64_t))type metadata accessor for Condition, (uint64_t)&unk_10025A0E8);
      dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(&v35, v16, v17, v14, v15);
      swift_release(v13);
      goto LABEL_16;
    }
    __break(1u);
  }
  swift_bridgeObjectRelease(v4);
  __break(1u);
}

uint64_t sub_10017C514()
{
  uint64_t v0;

  if (!*(_BYTE *)(*(_QWORD *)v0 + 16))
    return 6581857;
  if (*(_BYTE *)(*(_QWORD *)v0 + 16) == 1)
    return 29295;
  return 7630702;
}

void sub_10017C554(_QWORD *a1)
{
  sub_10017C1DC(a1);
}

uint64_t sub_10017C574()
{
  uint64_t v0;

  if (!*(_BYTE *)(*(_QWORD *)v0 + 16))
    return 1852138867;
  if (*(_BYTE *)(*(_QWORD *)v0 + 16) == 1)
    return 0x6465726577736E61;
  return 0x64657070696B73;
}

uint64_t sub_10017C5C8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  sub_100007BBC(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v10, v3, v4);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 32);
  v7 = v11;
  v8 = v12;
  sub_10001D2C4((uint64_t)v10, v11);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v5, v6, v7, v8);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v10);
}

uint64_t sub_10017C664()
{
  return 0x64657463656C6573;
}

uint64_t sub_10017C67C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  sub_100007BBC(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v10, v3, v4);
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = v11;
  v8 = v12;
  sub_10001D2C4((uint64_t)v10, v11);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v5, v6, v7, v8);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v10);
}

uint64_t sub_10017C718()
{
  return sub_100176E64();
}

uint64_t sub_10017C738()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 33, 7);
}

uint64_t type metadata accessor for QuestionnaireRevisionContainer()
{
  return objc_opt_self(_TtC8SOSBuddyP33_582E2C1178450B40512F948C7832E18830QuestionnaireRevisionContainer);
}

uint64_t sub_10017C768()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 57, 7);
}

uint64_t type metadata accessor for QuestionnairePresentationBuddyContainer()
{
  return objc_opt_self(_TtC8SOSBuddyP33_582E2C1178450B40512F948C7832E18839QuestionnairePresentationBuddyContainer);
}

uint64_t type metadata accessor for QuestionnaireStringsBundle.Key()
{
  return objc_opt_self(_TtCV8SOSBuddyP33_582E2C1178450B40512F948C7832E18826QuestionnaireStringsBundle3Key);
}

uint64_t sub_10017C7CC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;

  v19 = a4;
  v20 = a5;
  v21 = a2;
  v8 = sub_100003DB8(&qword_100323C60);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_100007BBC(a1, v13);
  v15 = type metadata accessor for QuestionnaireStringsBundle.Key();
  v16 = sub_1000052EC(&qword_100323C58, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireStringsBundle.Key, (uint64_t)&unk_10025A028);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v15, v15, v16, v13, v14);
  if (!a3
    || (inited = swift_initStaticObject(v15, &unk_100315F10),
        KeyedEncodingContainer.encode(_:forKey:)(v21, a3, &inited, v8),
        !v5))
  {
    inited = swift_initStaticObject(v15, &unk_100315F38);
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &inited, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_10017C934@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_100184934(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_10017C960(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10017C7CC(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t type metadata accessor for QuestionnaireRepresentation.Key()
{
  return objc_opt_self(_TtCV8SOSBuddyP33_582E2C1178450B40512F948C7832E18827QuestionnaireRepresentation3Key);
}

void sub_10017C99C(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];
  uint64_t inited;

  v9 = sub_100003DB8(&qword_100323CA8);
  __chkstk_darwin(v9, v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    v36 = v11;
    v37 = v4;
    v15 = a1[3];
    v14 = a1[4];
    sub_100007BBC(a1, v15);
    v16 = type metadata accessor for QuestionnaireRepresentation.Key();
    v17 = sub_1000052EC(&qword_100323C70, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireRepresentation.Key, (uint64_t)&unk_10025A028);
    swift_retain(a4);
    dispatch thunk of Encoder.container<A>(keyedBy:)(v16, v16, v17, v15, v14);
    v18 = sub_100003DB8(&qword_100323CB0);
    v19 = swift_allocObject(v18, 64, 7);
    *(_OWORD *)(v19 + 16) = xmmword_10024E070;
    v21 = a4[5];
    v20 = a4[6];
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 40) = 0;
    *(_QWORD *)(v19 + 48) = v21;
    *(_QWORD *)(v19 + 56) = v20;
    *(_QWORD *)&v38 = a2;
    *((_QWORD *)&v38 + 1) = a3;
    swift_bridgeObjectRetain(v20);
    inited = swift_initStaticObject(v16, &unk_100315F60);
    v22 = sub_10018510C();
    v23 = v37;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v38, &inited, v9, &type metadata for QuestionnaireRevision, v22);
    if (v23)
    {
      swift_release(a4);
      v25 = swift_bridgeObjectRelease(v19);
      (*(void (**)(char *, uint64_t, __n128))(v36 + 8))(v13, v9, v25);
    }
    else
    {
      v24 = a4[11];
      *(_QWORD *)&v38 = swift_initStaticObject(v16, &unk_100315F88);
      KeyedEncodingContainer.encode(_:forKey:)(v24, &v38, v9);
      *(_QWORD *)&v38 = a4;
      inited = swift_initStaticObject(v16, &unk_100315FB0);
      v30 = type metadata accessor for Questionnaire();
      v31 = sub_1000052EC(&qword_100323CC0, (uint64_t (*)(uint64_t))type metadata accessor for Questionnaire, (uint64_t)&unk_100259DD8);
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v38, &inited, v9, v30, v31);
      sub_10017A404((uint64_t)&v40, v32);
      v38 = v40;
      v39[0] = v41[0];
      *(_OWORD *)((char *)v39 + 9) = *(_OWORD *)((char *)v41 + 9);
      inited = swift_initStaticObject(v16, &unk_100315FD8);
      v33 = sub_100185150();
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v38, &inited, v9, &type metadata for QuestionnairePresentationBuddy, v33);
      sub_100031198((uint64_t)&v40);
      *(_QWORD *)&v38 = v19;
      inited = swift_initStaticObject(v16, &unk_100316000);
      v34 = sub_100003DB8(&qword_100323C78);
      v35 = sub_10003418C(&qword_100323CD0, &qword_100323C78, (void (*)(void))sub_100185194, (uint64_t)&protocol conformance descriptor for <A> [A]);
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v38, &inited, v9, v34, v35);
      swift_release(a4);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v9);
      swift_bridgeObjectRelease(v19);
    }
  }
  else
  {
    v26 = type metadata accessor for EncodingError(0);
    swift_allocError(v26, &protocol witness table for EncodingError, 0, 0);
    v28 = v27;
    sub_100003DB8(&qword_1003239D8);
    *v28 = a2;
    v28[1] = a3;
    v28[2] = 0;
    v28[3] = &type metadata for QuestionnaireRepresentation;
    EncodingError.Context.init(codingPath:debugDescription:underlyingError:)(_swiftEmptyArrayStorage, 0xD000000000000032, 0x800000010026CFE0, 0);
    v29 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, enum case for EncodingError.invalidValue(_:), v26);
    swift_willThrow(v29);
  }
}

_QWORD *sub_10017CDC8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;

  result = sub_100184B48(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

void sub_10017CDF4(_QWORD *a1)
{
  uint64_t v1;

  sub_10017C99C(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD **)(v1 + 16));
}

uint64_t sub_10017CE10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = swift_allocObject(v0, 32, 7);
  v2 = type metadata accessor for StringCodingKey();
  swift_deallocPartialClassInstance(v1, v2, 32, 7);
  return 0;
}

uint64_t type metadata accessor for QuestionnaireRegion.Key()
{
  return objc_opt_self(_TtCV8SOSBuddyP33_582E2C1178450B40512F948C7832E18819QuestionnaireRegion3Key);
}

uint64_t initializeWithCopy for QuestionnairePresentationBuddy(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for QuestionnairePresentationBuddy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v6;
  return a1;
}

uint64_t assignWithTake for QuestionnairePresentationBuddy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionnairePresentationBuddy(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnairePresentationBuddy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionnairePresentationBuddy()
{
  return &type metadata for QuestionnairePresentationBuddy;
}

ValueMetadata *type metadata accessor for QuestionnaireRevision()
{
  return &type metadata for QuestionnaireRevision;
}

uint64_t sub_10017D00C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;

  v4 = sub_100003DB8(&qword_100323D10);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100007BBC(a1, v9);
  v11 = type metadata accessor for QuestionnaireRegion.Key();
  v12 = sub_1000052EC(&qword_100323CE8, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireRegion.Key, (uint64_t)&unk_10025A028);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v11, v11, v12, v9, v10);
  v19 = a2;
  swift_bridgeObjectRetain(a2);
  inited = swift_initStaticObject(v11, &unk_100316028);
  v13 = sub_100003DB8(&qword_100323CF0);
  v14 = sub_10003418C(&qword_100323D18, &qword_100323CF0, (void (*)(void))sub_100185484, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &inited, v4, v13, v14);
  v15 = swift_bridgeObjectRelease(a2);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v5 + 8))(v8, v4, v15);
}

_QWORD *sub_10017D180@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1001851D8(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10017D1A8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10017D00C(a1, *v1);
}

uint64_t sub_10017D1C0()
{
  return sub_1000052EC(&qword_1003239B0, (uint64_t (*)(uint64_t))type metadata accessor for StringCodingKey, (uint64_t)&unk_100259FD8);
}

uint64_t sub_10017D1EC()
{
  return sub_1000052EC(&qword_1003239B8, (uint64_t (*)(uint64_t))type metadata accessor for StringCodingKey, (uint64_t)&unk_10025A000);
}

unint64_t sub_10017D218()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003239F0;
  if (!qword_1003239F0)
  {
    v1 = sub_100007FAC(&qword_1003239E8);
    sub_1000052EC(&qword_1003239F8, (uint64_t (*)(uint64_t))type metadata accessor for Condition, (uint64_t)&unk_10025A0E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1003239F0);
  }
  return result;
}

unint64_t sub_10017D298(Swift::UInt a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  Hasher._combine(_:)(a1);
  v3 = Hasher._finalize()();
  return sub_10017D5AC(a1, v3);
}

unint64_t sub_10017D2F0(unsigned __int8 a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  Hasher._combine(_:)(a1);
  v3 = Hasher._finalize()();
  return sub_10017D8C4(a1, v3);
}

unint64_t sub_10017D354(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = v1;
  v4 = a1 & 1;
  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  Hasher._combine(_:)(a1 & 1);
  v5 = Hasher._finalize()();
  return sub_10017D648(v4, v5);
}

unint64_t sub_10017D3B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10017D704(a1, a2, v5);
}

unint64_t sub_10017D418(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v1 + 40));
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v4);
  v5 = Hasher._finalize()();
  return sub_10017D7E4(a1, v5);
}

unint64_t sub_10017D498(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_10017D5AC(a1, v3);
}

unint64_t sub_10017D4D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_10017D964(a1, v7);
}

unint64_t sub_10017D55C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for CodingUserInfoKey(0);
  v6 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, &protocol witness table for CodingUserInfoKey);
  return sub_10017DAD8(a1, v6);
}

unint64_t sub_10017D5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_10017D648(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v7 + result)) & 1) == 0)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (((((a1 & 1) == 0) ^ *(_BYTE *)(v7 + result)) & 1) != 0)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_10017D704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10017D7E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 48);
    v7 = *(_QWORD *)(v6 + 8 * v5);
    v8 = *(_QWORD *)(v7 + 24);
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 24);
    v11 = *(_QWORD *)(v7 + 16) == v9 && v8 == v10;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v7 + 16), v8, v9, v10, 0) & 1) == 0)
    {
      v12 = ~v4;
      do
      {
        v5 = (v5 + 1) & v12;
        if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
          break;
        v13 = *(_QWORD *)(v6 + 8 * v5);
        v14 = *(_QWORD *)(v13 + 16);
        v15 = *(_QWORD *)(v13 + 24);
        v16 = v14 == v9 && v15 == v10;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v9, v10, 0) & 1) == 0);
    }
  }
  return v5;
}

unint64_t sub_10017D8C4(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_10017D964(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_10017DAD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  v17 = a1;
  v5 = type metadata accessor for CodingUserInfoKey(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v17, v5, &protocol witness table for CodingUserInfoKey);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

double sub_10017DC00@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10017D55C(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v15 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10008C1CC();
      v10 = v15;
    }
    v11 = *(_QWORD *)(v10 + 48);
    v12 = type metadata accessor for CodingUserInfoKey(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
    sub_10003E704((_OWORD *)(*(_QWORD *)(v10 + 56) + 32 * v7), a2);
    sub_10017E084(v7, v10);
    v13 = *v3;
    *v3 = v10;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

unint64_t sub_10017DCFC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  const void *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)(v23, *(_QWORD *)(a2 + 40));
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_BYTE *)(v11 + v3);
          v13 = (_BYTE *)(v11 + v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          result = v14 + 72 * v3;
          v15 = (const void *)(v14 + 72 * v6);
          if (72 * v3 < (uint64_t)(72 * v6) || result >= (unint64_t)v15 + 72 || (v16 = v3 == v6, v3 = v6, !v16))
          {
            result = (unint64_t)memmove((void *)result, v15, 0x48uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

